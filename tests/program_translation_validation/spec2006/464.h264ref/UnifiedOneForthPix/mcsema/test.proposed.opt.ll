; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x4b8c50_type = type <{ [4 x i8] }>
%G_0x4b8c58_type = type <{ [4 x i8] }>
%G_0x4b8c60_type = type <{ [4 x i8] }>
%G_0x6cb8f8_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x726410_type = type <{ [8 x i8] }>
%G__0x4c03bd_type = type <{ [8 x i8] }>
%G__0x4c03e0_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x4b8c50 = local_unnamed_addr global %G_0x4b8c50_type zeroinitializer
@G_0x4b8c58 = local_unnamed_addr global %G_0x4b8c58_type zeroinitializer
@G_0x4b8c60 = local_unnamed_addr global %G_0x4b8c60_type zeroinitializer
@G_0x6cb8f8 = local_unnamed_addr global %G_0x6cb8f8_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x726410 = local_unnamed_addr global %G_0x726410_type zeroinitializer
@G__0x4c03bd = global %G__0x4c03bd_type zeroinitializer
@G__0x4c03e0 = global %G__0x4c03e0_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @malloc(i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_4593f0.no_mem_exit(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_459480.get_mem2Dpel(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_49e170.PutPel_14(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_42ffd0.GenerateFullPelRepresentation(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @UnifiedOneForthPix(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %RBX.i241 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %12 = load i64, i64* %RBX.i241, align 8
  %13 = add i64 %10, 4
  store i64 %13, i64* %3, align 8
  %14 = add i64 %7, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15, align 8
  %16 = load i64, i64* %3, align 8
  %17 = add i64 %7, -1160
  store i64 %17, i64* %6, align 8
  %18 = icmp ult i64 %14, 1144
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = trunc i64 %17 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22)
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = xor i64 %14, 16
  %29 = xor i64 %28, %17
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1
  %34 = icmp eq i64 %17, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1
  %37 = lshr i64 %17, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1
  %40 = lshr i64 %14, 63
  %41 = xor i64 %37, %40
  %42 = add nuw nsw i64 %41, %40
  %43 = icmp eq i64 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %RDI.i605 = getelementptr inbounds %union.anon, %union.anon* %46, i64 0, i32 0
  %47 = load i64, i64* %RBP.i, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %RDI.i605, align 8
  %50 = add i64 %16, 11
  store i64 %50, i64* %3, align 8
  %51 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %51, align 8
  %52 = load i64, i64* %RBP.i, align 8
  %53 = add i64 %52, -16
  %54 = load i64, i64* %3, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %3, align 8
  %56 = inttoptr i64 %53 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RDI.i605, align 8
  %58 = add i64 %57, 6424
  %59 = add i64 %54, 11
  store i64 %59, i64* %3, align 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RDI.i605, align 8
  %62 = add i64 %52, -72
  %63 = add i64 %54, 15
  store i64 %63, i64* %3, align 8
  %64 = inttoptr i64 %62 to i64*
  store i64 %61, i64* %64, align 8
  %65 = load i64, i64* %RBP.i, align 8
  %66 = add i64 %65, -16
  %67 = load i64, i64* %3, align 8
  %68 = add i64 %67, 4
  store i64 %68, i64* %3, align 8
  %69 = inttoptr i64 %66 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RDI.i605, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i1585 = getelementptr inbounds %union.anon, %union.anon* %71, i64 0, i32 0
  %72 = add i64 %70, 6392
  %73 = add i64 %67, 10
  store i64 %73, i64* %3, align 8
  %74 = inttoptr i64 %72 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i64
  store i64 %76, i64* %RAX.i1585, align 8
  %EAX.i1609 = bitcast %union.anon* %71 to i32*
  %77 = add i64 %65, -76
  %78 = add i64 %67, 13
  store i64 %78, i64* %3, align 8
  %79 = inttoptr i64 %77 to i32*
  store i32 %75, i32* %79, align 4
  %80 = load i64, i64* %RBP.i, align 8
  %81 = add i64 %80, -16
  %82 = load i64, i64* %3, align 8
  %83 = add i64 %82, 4
  store i64 %83, i64* %3, align 8
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %RDI.i605, align 8
  %86 = add i64 %85, 6396
  %87 = add i64 %82, 10
  store i64 %87, i64* %3, align 8
  %88 = inttoptr i64 %86 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  store i64 %90, i64* %RAX.i1585, align 8
  %91 = add i64 %80, -80
  %92 = add i64 %82, 13
  store i64 %92, i64* %3, align 8
  %93 = inttoptr i64 %91 to i32*
  store i32 %89, i32* %93, align 4
  %94 = load i64, i64* %RBP.i, align 8
  %95 = add i64 %94, -16
  %96 = load i64, i64* %3, align 8
  %97 = add i64 %96, 4
  store i64 %97, i64* %3, align 8
  %98 = inttoptr i64 %95 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %RDI.i605, align 8
  %100 = add i64 %99, 6448
  %101 = add i64 %96, 12
  store i64 %101, i64* %3, align 8
  %102 = inttoptr i64 %100 to i64*
  %103 = load i64, i64* %102, align 8
  store i8 0, i8* %20, align 1
  %104 = trunc i64 %103 to i32
  %105 = and i32 %104, 255
  %106 = tail call i32 @llvm.ctpop.i32(i32 %105)
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  store i8 %109, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %110 = icmp eq i64 %103, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %36, align 1
  %112 = lshr i64 %103, 63
  %113 = trunc i64 %112 to i8
  store i8 %113, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %.v318 = select i1 %110, i64 18, i64 36
  %114 = add i64 %96, %.v318
  store i64 %114, i64* %3, align 8
  br i1 %110, label %block_42dd9b, label %block_.L_42ddad

block_42dd9b:                                     ; preds = %entry
  %115 = add i64 %114, 4
  store i64 %115, i64* %3, align 8
  %116 = load i64, i64* %98, align 8
  store i64 %116, i64* %RAX.i1585, align 8
  %117 = add i64 %116, 6432
  %118 = add i64 %114, 12
  store i64 %118, i64* %3, align 8
  %119 = inttoptr i64 %117 to i64*
  %120 = load i64, i64* %119, align 8
  store i8 0, i8* %20, align 1
  %121 = trunc i64 %120 to i32
  %122 = and i32 %121, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122)
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %127 = icmp eq i64 %120, 0
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %36, align 1
  %129 = lshr i64 %120, 63
  %130 = trunc i64 %129 to i8
  store i8 %130, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %.v319 = select i1 %127, i64 23, i64 18
  %131 = add i64 %114, %.v319
  store i64 %131, i64* %3, align 8
  br i1 %127, label %block_.L_42ddb2, label %block_.L_42ddad

block_.L_42ddad:                                  ; preds = %entry, %block_42dd9b
  %132 = phi i64 [ %131, %block_42dd9b ], [ %114, %entry ]
  %133 = add i64 %132, 8715
  store i64 %133, i64* %3, align 8
  br label %block_.L_42ffb8

block_.L_42ddb2:                                  ; preds = %block_42dd9b
  %134 = add i64 %131, 4
  store i64 %134, i64* %3, align 8
  %135 = load i64, i64* %98, align 8
  store i64 %135, i64* %RAX.i1585, align 8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i3128 = getelementptr inbounds %union.anon, %union.anon* %136, i64 0, i32 0
  %137 = add i64 %135, 6392
  %138 = add i64 %131, 10
  store i64 %138, i64* %3, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i64
  store i64 %141, i64* %RCX.i3128, align 8
  %142 = add i64 %131, 14
  store i64 %142, i64* %3, align 8
  %143 = load i64, i64* %98, align 8
  store i64 %143, i64* %RAX.i1585, align 8
  %144 = add i64 %143, 6396
  %145 = add i64 %131, 21
  store i64 %145, i64* %3, align 8
  %146 = inttoptr i64 %144 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = sext i32 %140 to i64
  %149 = sext i32 %147 to i64
  %150 = mul nsw i64 %149, %148
  %151 = and i64 %150, 4294967295
  store i64 %151, i64* %RCX.i3128, align 8
  %ECX.i3256 = bitcast %union.anon* %136 to i32*
  %152 = trunc i64 %150 to i32
  %sext = shl i64 %150, 32
  %153 = ashr exact i64 %sext, 32
  %154 = ashr exact i64 %sext, 31
  store i64 %154, i64* %RAX.i1585, align 8
  %.lobit = lshr i32 %152, 31
  %155 = trunc i32 %.lobit to i8
  store i8 %155, i8* %20, align 1
  %156 = trunc i64 %154 to i32
  %157 = and i32 %156, 254
  %158 = tail call i32 @llvm.ctpop.i32(i32 %157)
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = xor i8 %160, 1
  store i8 %161, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %162 = icmp eq i32 %152, 0
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %36, align 1
  %164 = lshr i64 %153, 62
  %165 = trunc i64 %164 to i8
  %166 = and i8 %165, 1
  store i8 %166, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i64 %154, i64* %RDI.i605, align 8
  %167 = add i64 %131, -183395
  %168 = add i64 %131, 35
  %169 = load i64, i64* %6, align 8
  %170 = add i64 %169, -8
  %171 = inttoptr i64 %170 to i64*
  store i64 %168, i64* %171, align 8
  store i64 %170, i64* %6, align 8
  store i64 %167, i64* %3, align 8
  %172 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory* %2)
  %173 = load i64, i64* %3, align 8
  store i64 0, i64* %RCX.i3128, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  store i64 0, i64* %RDI.i605, align 8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i5152 = getelementptr inbounds %union.anon, %union.anon* %174, i64 0, i32 0
  %175 = load i64, i64* %RBP.i, align 8
  %176 = add i64 %175, -16
  %177 = add i64 %173, 8
  store i64 %177, i64* %3, align 8
  %178 = inttoptr i64 %176 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %RDX.i5152, align 8
  %180 = add i64 %179, 6432
  %181 = load i64, i64* %RAX.i1585, align 8
  %182 = add i64 %173, 15
  store i64 %182, i64* %3, align 8
  %183 = inttoptr i64 %180 to i64*
  store i64 %181, i64* %183, align 8
  %184 = load i64, i64* %RBP.i, align 8
  %185 = add i64 %184, -16
  %186 = load i64, i64* %3, align 8
  %187 = add i64 %186, 4
  store i64 %187, i64* %3, align 8
  %188 = inttoptr i64 %185 to i64*
  %189 = load i64, i64* %188, align 8
  store i64 %189, i64* %RAX.i1585, align 8
  %190 = load i64, i64* %RDI.i605, align 8
  %191 = add i64 %189, 6432
  %192 = add i64 %186, 11
  store i64 %192, i64* %3, align 8
  %193 = inttoptr i64 %191 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = sub i64 %190, %194
  %196 = icmp ult i64 %190, %194
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %20, align 1
  %198 = trunc i64 %195 to i32
  %199 = and i32 %198, 255
  %200 = tail call i32 @llvm.ctpop.i32(i32 %199)
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  store i8 %203, i8* %27, align 1
  %204 = xor i64 %194, %190
  %205 = xor i64 %204, %195
  %206 = lshr i64 %205, 4
  %207 = trunc i64 %206 to i8
  %208 = and i8 %207, 1
  store i8 %208, i8* %33, align 1
  %209 = icmp eq i64 %195, 0
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %36, align 1
  %211 = lshr i64 %195, 63
  %212 = trunc i64 %211 to i8
  store i8 %212, i8* %39, align 1
  %213 = lshr i64 %190, 63
  %214 = lshr i64 %194, 63
  %215 = xor i64 %214, %213
  %216 = xor i64 %211, %213
  %217 = add nuw nsw i64 %216, %215
  %218 = icmp eq i64 %217, 2
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %45, align 1
  %.v320 = select i1 %209, i64 17, i64 32
  %220 = add i64 %186, %.v320
  store i64 %220, i64* %3, align 8
  br i1 %209, label %block_42ddf6, label %block_.L_42de05

block_42ddf6:                                     ; preds = %block_.L_42ddb2
  store i64 ptrtoint (%G__0x4c03bd_type* @G__0x4c03bd to i64), i64* %RDI.i605, align 8
  %221 = add i64 %220, 177658
  %222 = add i64 %220, 15
  %223 = load i64, i64* %6, align 8
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %6, align 8
  store i64 %221, i64* %3, align 8
  %call2_42de00 = tail call %struct.Memory* @sub_4593f0.no_mem_exit(%struct.State* nonnull %0, i64 %221, %struct.Memory* %172)
  %.pre = load i64, i64* %RBP.i, align 8
  %.pre139 = load i64, i64* %3, align 8
  br label %block_.L_42de05

block_.L_42de05:                                  ; preds = %block_.L_42ddb2, %block_42ddf6
  %226 = phi i64 [ %220, %block_.L_42ddb2 ], [ %.pre139, %block_42ddf6 ]
  %227 = phi i64 [ %184, %block_.L_42ddb2 ], [ %.pre, %block_42ddf6 ]
  %MEMORY.1 = phi %struct.Memory* [ %172, %block_.L_42ddb2 ], [ %call2_42de00, %block_42ddf6 ]
  %228 = add i64 %227, -16
  %229 = add i64 %226, 4
  store i64 %229, i64* %3, align 8
  %230 = inttoptr i64 %228 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = add i64 %231, 6448
  store i64 %232, i64* %RAX.i1585, align 8
  %233 = icmp ugt i64 %231, -6449
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %20, align 1
  %235 = trunc i64 %232 to i32
  %236 = and i32 %235, 255
  %237 = tail call i32 @llvm.ctpop.i32(i32 %236)
  %238 = trunc i32 %237 to i8
  %239 = and i8 %238, 1
  %240 = xor i8 %239, 1
  store i8 %240, i8* %27, align 1
  %241 = xor i64 %231, 16
  %242 = xor i64 %241, %232
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %33, align 1
  %246 = icmp eq i64 %232, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %36, align 1
  %248 = lshr i64 %232, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %39, align 1
  %250 = lshr i64 %231, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %45, align 1
  %255 = add i64 %226, 14
  store i64 %255, i64* %3, align 8
  %256 = load i64, i64* %230, align 8
  store i64 %256, i64* %RCX.i3128, align 8
  %257 = add i64 %256, 6396
  %258 = add i64 %226, 20
  store i64 %258, i64* %3, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = add i32 %260, 8
  %262 = shl i32 %261, 2
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RDX.i5152, align 8
  %264 = lshr i32 %261, 30
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  store i8 %266, i8* %20, align 1
  %267 = and i32 %262, 252
  %268 = tail call i32 @llvm.ctpop.i32(i32 %267)
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  store i8 %271, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %272 = icmp eq i32 %262, 0
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %36, align 1
  %274 = lshr i32 %261, 29
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %277 = load i64, i64* %RBP.i, align 8
  %278 = add i64 %277, -16
  %279 = add i64 %226, 30
  store i64 %279, i64* %3, align 8
  %280 = inttoptr i64 %278 to i64*
  %281 = load i64, i64* %280, align 8
  store i64 %281, i64* %RCX.i3128, align 8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %RSI.i5212 = getelementptr inbounds %union.anon, %union.anon* %282, i64 0, i32 0
  %283 = add i64 %281, 6392
  %284 = add i64 %226, 36
  store i64 %284, i64* %3, align 8
  %285 = inttoptr i64 %283 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = add i32 %286, 8
  %288 = shl i32 %287, 2
  %289 = lshr i32 %287, 30
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  store i8 %291, i8* %20, align 1
  %292 = and i32 %288, 252
  %293 = tail call i32 @llvm.ctpop.i32(i32 %292)
  %294 = trunc i32 %293 to i8
  %295 = and i8 %294, 1
  %296 = xor i8 %295, 1
  store i8 %296, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %297 = icmp eq i32 %288, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %36, align 1
  %299 = lshr i32 %287, 29
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  store i8 %301, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %302 = load i64, i64* %RAX.i1585, align 8
  store i64 %302, i64* %RDI.i605, align 8
  %ESI.i5201 = bitcast %union.anon* %282 to i32*
  %303 = add i64 %277, -84
  %304 = add i64 %226, 48
  store i64 %304, i64* %3, align 8
  %305 = inttoptr i64 %303 to i32*
  store i32 %288, i32* %305, align 4
  %EDX.i5198 = bitcast %union.anon* %174 to i32*
  %306 = load i32, i32* %EDX.i5198, align 4
  %307 = zext i32 %306 to i64
  %308 = load i64, i64* %3, align 8
  store i64 %307, i64* %RSI.i5212, align 8
  %309 = load i64, i64* %RBP.i, align 8
  %310 = add i64 %309, -84
  %311 = add i64 %308, 5
  store i64 %311, i64* %3, align 8
  %312 = inttoptr i64 %310 to i32*
  %313 = load i32, i32* %312, align 4
  %314 = zext i32 %313 to i64
  store i64 %314, i64* %RDX.i5152, align 8
  %315 = add i64 %308, 177739
  %316 = add i64 %308, 10
  %317 = load i64, i64* %6, align 8
  %318 = add i64 %317, -8
  %319 = inttoptr i64 %318 to i64*
  store i64 %316, i64* %319, align 8
  store i64 %318, i64* %6, align 8
  store i64 %315, i64* %3, align 8
  %call2_42de3a = tail call %struct.Memory* @sub_459480.get_mem2Dpel(%struct.State* nonnull %0, i64 %315, %struct.Memory* %MEMORY.1)
  %320 = load i64, i64* %3, align 8
  %321 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %321, i64* %RCX.i3128, align 8
  %322 = add i64 %321, 1284
  %323 = add i64 %320, 15
  store i64 %323, i64* %3, align 8
  %324 = inttoptr i64 %322 to i32*
  %325 = load i32, i32* %324, align 4
  store i8 0, i8* %20, align 1
  %326 = and i32 %325, 255
  %327 = tail call i32 @llvm.ctpop.i32(i32 %326)
  %328 = trunc i32 %327 to i8
  %329 = and i8 %328, 1
  %330 = xor i8 %329, 1
  store i8 %330, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %331 = icmp eq i32 %325, 0
  %332 = zext i1 %331 to i8
  store i8 %332, i8* %36, align 1
  %333 = lshr i32 %325, 31
  %334 = trunc i32 %333 to i8
  store i8 %334, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %335 = load i64, i64* %RBP.i, align 8
  %336 = add i64 %335, -88
  %337 = load i32, i32* %EAX.i1609, align 4
  %338 = add i64 %320, 18
  store i64 %338, i64* %3, align 8
  %339 = inttoptr i64 %336 to i32*
  store i32 %337, i32* %339, align 4
  %340 = load i64, i64* %3, align 8
  %341 = add i64 %340, 45
  %342 = add i64 %340, 6
  %343 = load i8, i8* %36, align 1
  %344 = icmp eq i8 %343, 0
  %345 = select i1 %344, i64 %341, i64 %342
  store i64 %345, i64* %3, align 8
  br i1 %344, label %block_.L_42de7e, label %block_42de57

block_42de57:                                     ; preds = %block_.L_42de05
  %346 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %346, i64* %RAX.i1585, align 8
  %347 = add i64 %346, 1288
  %348 = add i64 %345, 15
  store i64 %348, i64* %3, align 8
  %349 = inttoptr i64 %347 to i32*
  %350 = load i32, i32* %349, align 4
  store i8 0, i8* %20, align 1
  %351 = and i32 %350, 255
  %352 = tail call i32 @llvm.ctpop.i32(i32 %351)
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  %355 = xor i8 %354, 1
  store i8 %355, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %356 = icmp eq i32 %350, 0
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %36, align 1
  %358 = lshr i32 %350, 31
  %359 = trunc i32 %358 to i8
  store i8 %359, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %.v321 = select i1 %356, i64 21, i64 39
  %360 = add i64 %345, %.v321
  store i64 %360, i64* %3, align 8
  br i1 %356, label %block_42de6c, label %block_.L_42de7e

block_42de6c:                                     ; preds = %block_42de57
  store i64 %346, i64* %RAX.i1585, align 8
  %361 = add i64 %346, 60
  %362 = add i64 %360, 12
  store i64 %362, i64* %3, align 8
  %363 = inttoptr i64 %361 to i32*
  %364 = load i32, i32* %363, align 4
  store i8 0, i8* %20, align 1
  %365 = and i32 %364, 255
  %366 = tail call i32 @llvm.ctpop.i32(i32 %365)
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  store i8 %369, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %370 = icmp eq i32 %364, 0
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %36, align 1
  %372 = lshr i32 %364, 31
  %373 = trunc i32 %372 to i8
  store i8 %373, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %.v364 = select i1 %370, i64 162, i64 18
  %374 = add i64 %360, %.v364
  store i64 %374, i64* %3, align 8
  br i1 %370, label %block_.L_42df0e, label %block_.L_42de7e

block_.L_42de7e:                                  ; preds = %block_42de57, %block_42de6c, %block_.L_42de05
  %375 = phi i64 [ %374, %block_42de6c ], [ %360, %block_42de57 ], [ %341, %block_.L_42de05 ]
  %376 = load i64, i64* %RBP.i, align 8
  %377 = add i64 %376, -16
  %378 = add i64 %375, 4
  store i64 %378, i64* %3, align 8
  %379 = inttoptr i64 %377 to i64*
  %380 = load i64, i64* %379, align 8
  store i64 %380, i64* %RAX.i1585, align 8
  %381 = add i64 %380, 6392
  %382 = add i64 %375, 10
  store i64 %382, i64* %3, align 8
  %383 = inttoptr i64 %381 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i64
  store i64 %385, i64* %RCX.i3128, align 8
  %386 = add i64 %375, 14
  store i64 %386, i64* %3, align 8
  %387 = load i64, i64* %379, align 8
  store i64 %387, i64* %RAX.i1585, align 8
  %388 = add i64 %387, 6396
  %389 = add i64 %375, 21
  store i64 %389, i64* %3, align 8
  %390 = inttoptr i64 %388 to i32*
  %391 = load i32, i32* %390, align 4
  %392 = sext i32 %384 to i64
  %393 = sext i32 %391 to i64
  %394 = mul nsw i64 %393, %392
  %395 = and i64 %394, 4294967295
  store i64 %395, i64* %RCX.i3128, align 8
  %396 = trunc i64 %394 to i32
  %sext308 = shl i64 %394, 32
  %397 = ashr exact i64 %sext308, 32
  %398 = ashr exact i64 %sext308, 31
  store i64 %398, i64* %RAX.i1585, align 8
  %.lobit96 = lshr i32 %396, 31
  %399 = trunc i32 %.lobit96 to i8
  store i8 %399, i8* %20, align 1
  %400 = trunc i64 %398 to i32
  %401 = and i32 %400, 254
  %402 = tail call i32 @llvm.ctpop.i32(i32 %401)
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  store i8 %405, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %406 = icmp eq i32 %396, 0
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %36, align 1
  %408 = lshr i64 %397, 62
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i64 %398, i64* %RDI.i605, align 8
  %411 = add i64 %375, -183599
  %412 = add i64 %375, 35
  %413 = load i64, i64* %6, align 8
  %414 = add i64 %413, -8
  %415 = inttoptr i64 %414 to i64*
  store i64 %412, i64* %415, align 8
  store i64 %414, i64* %6, align 8
  store i64 %411, i64* %3, align 8
  %416 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory* %call2_42de3a)
  %417 = load i64, i64* %3, align 8
  store i64 0, i64* %RCX.i3128, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  store i64 0, i64* %RDI.i605, align 8
  %418 = load i64, i64* %RBP.i, align 8
  %419 = add i64 %418, -16
  %420 = add i64 %417, 8
  store i64 %420, i64* %3, align 8
  %421 = inttoptr i64 %419 to i64*
  %422 = load i64, i64* %421, align 8
  store i64 %422, i64* %RDX.i5152, align 8
  %423 = add i64 %422, 6440
  %424 = load i64, i64* %RAX.i1585, align 8
  %425 = add i64 %417, 15
  store i64 %425, i64* %3, align 8
  %426 = inttoptr i64 %423 to i64*
  store i64 %424, i64* %426, align 8
  %427 = load i64, i64* %RBP.i, align 8
  %428 = add i64 %427, -16
  %429 = load i64, i64* %3, align 8
  %430 = add i64 %429, 4
  store i64 %430, i64* %3, align 8
  %431 = inttoptr i64 %428 to i64*
  %432 = load i64, i64* %431, align 8
  store i64 %432, i64* %RAX.i1585, align 8
  %433 = load i64, i64* %RDI.i605, align 8
  %434 = add i64 %432, 6440
  %435 = add i64 %429, 11
  store i64 %435, i64* %3, align 8
  %436 = inttoptr i64 %434 to i64*
  %437 = load i64, i64* %436, align 8
  %438 = sub i64 %433, %437
  %439 = icmp ult i64 %433, %437
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %20, align 1
  %441 = trunc i64 %438 to i32
  %442 = and i32 %441, 255
  %443 = tail call i32 @llvm.ctpop.i32(i32 %442)
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  store i8 %446, i8* %27, align 1
  %447 = xor i64 %437, %433
  %448 = xor i64 %447, %438
  %449 = lshr i64 %448, 4
  %450 = trunc i64 %449 to i8
  %451 = and i8 %450, 1
  store i8 %451, i8* %33, align 1
  %452 = icmp eq i64 %438, 0
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %36, align 1
  %454 = lshr i64 %438, 63
  %455 = trunc i64 %454 to i8
  store i8 %455, i8* %39, align 1
  %456 = lshr i64 %433, 63
  %457 = lshr i64 %437, 63
  %458 = xor i64 %457, %456
  %459 = xor i64 %454, %456
  %460 = add nuw nsw i64 %459, %458
  %461 = icmp eq i64 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %45, align 1
  %.v322 = select i1 %452, i64 17, i64 32
  %463 = add i64 %429, %.v322
  store i64 %463, i64* %3, align 8
  br i1 %452, label %block_42dec2, label %block_.L_42ded1

block_42dec2:                                     ; preds = %block_.L_42de7e
  store i64 ptrtoint (%G__0x4c03e0_type* @G__0x4c03e0 to i64), i64* %RDI.i605, align 8
  %464 = add i64 %463, 177454
  %465 = add i64 %463, 15
  %466 = load i64, i64* %6, align 8
  %467 = add i64 %466, -8
  %468 = inttoptr i64 %467 to i64*
  store i64 %465, i64* %468, align 8
  store i64 %467, i64* %6, align 8
  store i64 %464, i64* %3, align 8
  %call2_42decc = tail call %struct.Memory* @sub_4593f0.no_mem_exit(%struct.State* nonnull %0, i64 %464, %struct.Memory* %416)
  %.pre140 = load i64, i64* %RBP.i, align 8
  %.pre141 = load i64, i64* %3, align 8
  br label %block_.L_42ded1

block_.L_42ded1:                                  ; preds = %block_.L_42de7e, %block_42dec2
  %469 = phi i64 [ %463, %block_.L_42de7e ], [ %.pre141, %block_42dec2 ]
  %470 = phi i64 [ %427, %block_.L_42de7e ], [ %.pre140, %block_42dec2 ]
  %MEMORY.3 = phi %struct.Memory* [ %416, %block_.L_42de7e ], [ %call2_42decc, %block_42dec2 ]
  %471 = add i64 %470, -16
  %472 = add i64 %469, 4
  store i64 %472, i64* %3, align 8
  %473 = inttoptr i64 %471 to i64*
  %474 = load i64, i64* %473, align 8
  %475 = add i64 %474, 6456
  store i64 %475, i64* %RAX.i1585, align 8
  %476 = icmp ugt i64 %474, -6457
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %20, align 1
  %478 = trunc i64 %475 to i32
  %479 = and i32 %478, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479)
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %27, align 1
  %484 = xor i64 %474, 16
  %485 = xor i64 %484, %475
  %486 = lshr i64 %485, 4
  %487 = trunc i64 %486 to i8
  %488 = and i8 %487, 1
  store i8 %488, i8* %33, align 1
  %489 = icmp eq i64 %475, 0
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %36, align 1
  %491 = lshr i64 %475, 63
  %492 = trunc i64 %491 to i8
  store i8 %492, i8* %39, align 1
  %493 = lshr i64 %474, 63
  %494 = xor i64 %491, %493
  %495 = add nuw nsw i64 %494, %491
  %496 = icmp eq i64 %495, 2
  %497 = zext i1 %496 to i8
  store i8 %497, i8* %45, align 1
  %498 = add i64 %469, 14
  store i64 %498, i64* %3, align 8
  %499 = load i64, i64* %473, align 8
  store i64 %499, i64* %RCX.i3128, align 8
  %500 = add i64 %499, 6396
  %501 = add i64 %469, 20
  store i64 %501, i64* %3, align 8
  %502 = inttoptr i64 %500 to i32*
  %503 = load i32, i32* %502, align 4
  %504 = add i32 %503, 8
  %505 = shl i32 %504, 2
  %506 = zext i32 %505 to i64
  store i64 %506, i64* %RDX.i5152, align 8
  %507 = lshr i32 %504, 30
  %508 = trunc i32 %507 to i8
  %509 = and i8 %508, 1
  store i8 %509, i8* %20, align 1
  %510 = and i32 %505, 252
  %511 = tail call i32 @llvm.ctpop.i32(i32 %510)
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  %514 = xor i8 %513, 1
  store i8 %514, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %515 = icmp eq i32 %505, 0
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %36, align 1
  %517 = lshr i32 %504, 29
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  store i8 %519, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %520 = load i64, i64* %RBP.i, align 8
  %521 = add i64 %520, -16
  %522 = add i64 %469, 30
  store i64 %522, i64* %3, align 8
  %523 = inttoptr i64 %521 to i64*
  %524 = load i64, i64* %523, align 8
  store i64 %524, i64* %RCX.i3128, align 8
  %525 = add i64 %524, 6392
  %526 = add i64 %469, 36
  store i64 %526, i64* %3, align 8
  %527 = inttoptr i64 %525 to i32*
  %528 = load i32, i32* %527, align 4
  %529 = add i32 %528, 8
  %530 = shl i32 %529, 2
  %531 = lshr i32 %529, 30
  %532 = trunc i32 %531 to i8
  %533 = and i8 %532, 1
  store i8 %533, i8* %20, align 1
  %534 = and i32 %530, 252
  %535 = tail call i32 @llvm.ctpop.i32(i32 %534)
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  store i8 %538, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %539 = icmp eq i32 %530, 0
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %36, align 1
  %541 = lshr i32 %529, 29
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  store i8 %543, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %544 = load i64, i64* %RAX.i1585, align 8
  store i64 %544, i64* %RDI.i605, align 8
  %545 = add i64 %520, -92
  %546 = add i64 %469, 48
  store i64 %546, i64* %3, align 8
  %547 = inttoptr i64 %545 to i32*
  store i32 %530, i32* %547, align 4
  %548 = load i32, i32* %EDX.i5198, align 4
  %549 = zext i32 %548 to i64
  %550 = load i64, i64* %3, align 8
  store i64 %549, i64* %RSI.i5212, align 8
  %551 = load i64, i64* %RBP.i, align 8
  %552 = add i64 %551, -92
  %553 = add i64 %550, 5
  store i64 %553, i64* %3, align 8
  %554 = inttoptr i64 %552 to i32*
  %555 = load i32, i32* %554, align 4
  %556 = zext i32 %555 to i64
  store i64 %556, i64* %RDX.i5152, align 8
  %557 = add i64 %550, 177535
  %558 = add i64 %550, 10
  %559 = load i64, i64* %6, align 8
  %560 = add i64 %559, -8
  %561 = inttoptr i64 %560 to i64*
  store i64 %558, i64* %561, align 8
  store i64 %560, i64* %6, align 8
  store i64 %557, i64* %3, align 8
  %call2_42df06 = tail call %struct.Memory* @sub_459480.get_mem2Dpel(%struct.State* nonnull %0, i64 %557, %struct.Memory* %MEMORY.3)
  %562 = load i64, i64* %RBP.i, align 8
  %563 = add i64 %562, -96
  %564 = load i32, i32* %EAX.i1609, align 4
  %565 = load i64, i64* %3, align 8
  %566 = add i64 %565, 3
  store i64 %566, i64* %3, align 8
  %567 = inttoptr i64 %563 to i32*
  store i32 %564, i32* %567, align 4
  %.pre142 = load i64, i64* %3, align 8
  br label %block_.L_42df0e

block_.L_42df0e:                                  ; preds = %block_.L_42ded1, %block_42de6c
  %568 = phi i64 [ %.pre142, %block_.L_42ded1 ], [ %374, %block_42de6c ]
  %MEMORY.4 = phi %struct.Memory* [ %call2_42df06, %block_.L_42ded1 ], [ %call2_42de3a, %block_42de6c ]
  %569 = load i64, i64* %RBP.i, align 8
  %570 = add i64 %569, -16
  %571 = add i64 %568, 4
  store i64 %571, i64* %3, align 8
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RAX.i1585, align 8
  %574 = add i64 %573, 6448
  %575 = add i64 %568, 11
  store i64 %575, i64* %3, align 8
  %576 = inttoptr i64 %574 to i64*
  %577 = load i64, i64* %576, align 8
  store i64 %577, i64* %RAX.i1585, align 8
  %578 = add i64 %569, -56
  %579 = add i64 %568, 15
  store i64 %579, i64* %3, align 8
  %580 = inttoptr i64 %578 to i64*
  store i64 %577, i64* %580, align 8
  %581 = load i64, i64* %RBP.i, align 8
  %582 = add i64 %581, -16
  %583 = load i64, i64* %3, align 8
  %584 = add i64 %583, 4
  store i64 %584, i64* %3, align 8
  %585 = inttoptr i64 %582 to i64*
  %586 = load i64, i64* %585, align 8
  store i64 %586, i64* %RAX.i1585, align 8
  %587 = add i64 %586, 6432
  %588 = add i64 %583, 11
  store i64 %588, i64* %3, align 8
  %589 = inttoptr i64 %587 to i64*
  %590 = load i64, i64* %589, align 8
  store i64 %590, i64* %RAX.i1585, align 8
  %591 = add i64 %581, -64
  %592 = add i64 %583, 15
  store i64 %592, i64* %3, align 8
  %593 = inttoptr i64 %591 to i64*
  store i64 %590, i64* %593, align 8
  %594 = load i64, i64* %RBP.i, align 8
  %595 = add i64 %594, -28
  %596 = load i64, i64* %3, align 8
  %597 = add i64 %596, 7
  store i64 %597, i64* %3, align 8
  %598 = inttoptr i64 %595 to i32*
  store i32 -4, i32* %598, align 4
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D.i4817 = bitcast %union.anon* %599 to i32*
  %600 = getelementptr inbounds %union.anon, %union.anon* %599, i64 0, i32 0
  %EDI.i4812 = bitcast %union.anon* %46 to i32*
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D.i4678 = bitcast %union.anon* %601 to i32*
  %602 = getelementptr inbounds %union.anon, %union.anon* %601, i64 0, i32 0
  %.pre143 = load i64, i64* %3, align 8
  br label %block_.L_42df33

block_.L_42df33:                                  ; preds = %block_.L_42e653, %block_.L_42df0e
  %603 = phi i64 [ %3717, %block_.L_42e653 ], [ %.pre143, %block_.L_42df0e ]
  %604 = load i64, i64* %RBP.i, align 8
  %605 = add i64 %604, -28
  %606 = add i64 %603, 3
  store i64 %606, i64* %3, align 8
  %607 = inttoptr i64 %605 to i32*
  %608 = load i32, i32* %607, align 4
  %609 = zext i32 %608 to i64
  store i64 %609, i64* %RAX.i1585, align 8
  %610 = add i64 %604, -16
  %611 = add i64 %603, 7
  store i64 %611, i64* %3, align 8
  %612 = inttoptr i64 %610 to i64*
  %613 = load i64, i64* %612, align 8
  store i64 %613, i64* %RCX.i3128, align 8
  %614 = add i64 %613, 6396
  %615 = add i64 %603, 13
  store i64 %615, i64* %3, align 8
  %616 = inttoptr i64 %614 to i32*
  %617 = load i32, i32* %616, align 4
  %618 = add i32 %617, 4
  %619 = zext i32 %618 to i64
  store i64 %619, i64* %RDX.i5152, align 8
  %620 = lshr i32 %618, 31
  %621 = sub i32 %608, %618
  %622 = icmp ult i32 %608, %618
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %20, align 1
  %624 = and i32 %621, 255
  %625 = tail call i32 @llvm.ctpop.i32(i32 %624)
  %626 = trunc i32 %625 to i8
  %627 = and i8 %626, 1
  %628 = xor i8 %627, 1
  store i8 %628, i8* %27, align 1
  %629 = xor i32 %618, %608
  %630 = xor i32 %629, %621
  %631 = lshr i32 %630, 4
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  store i8 %633, i8* %33, align 1
  %634 = icmp eq i32 %621, 0
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %36, align 1
  %636 = lshr i32 %621, 31
  %637 = trunc i32 %636 to i8
  store i8 %637, i8* %39, align 1
  %638 = lshr i32 %608, 31
  %639 = xor i32 %620, %638
  %640 = xor i32 %636, %638
  %641 = add nuw nsw i32 %640, %639
  %642 = icmp eq i32 %641, 2
  %643 = zext i1 %642 to i8
  store i8 %643, i8* %45, align 1
  %644 = icmp ne i8 %637, 0
  %645 = xor i1 %644, %642
  %.v = select i1 %645, i64 24, i64 1843
  %646 = add i64 %603, %.v
  %647 = add i64 %604, -24
  %648 = add i64 %646, 7
  store i64 %648, i64* %3, align 8
  %649 = inttoptr i64 %647 to i32*
  br i1 %645, label %block_42df4b, label %block_.L_42e666

block_42df4b:                                     ; preds = %block_.L_42df33
  store i32 -4, i32* %649, align 4
  %.pre282 = load i64, i64* %3, align 8
  br label %block_.L_42df52

block_.L_42df52:                                  ; preds = %block_.L_42e5dd, %block_42df4b
  %650 = phi i64 [ %3687, %block_.L_42e5dd ], [ %.pre282, %block_42df4b ]
  %651 = load i64, i64* %RBP.i, align 8
  %652 = add i64 %651, -24
  %653 = add i64 %650, 3
  store i64 %653, i64* %3, align 8
  %654 = inttoptr i64 %652 to i32*
  %655 = load i32, i32* %654, align 4
  %656 = zext i32 %655 to i64
  store i64 %656, i64* %RAX.i1585, align 8
  %657 = add i64 %651, -16
  %658 = add i64 %650, 7
  store i64 %658, i64* %3, align 8
  %659 = inttoptr i64 %657 to i64*
  %660 = load i64, i64* %659, align 8
  store i64 %660, i64* %RCX.i3128, align 8
  %661 = add i64 %660, 6392
  %662 = add i64 %650, 13
  store i64 %662, i64* %3, align 8
  %663 = inttoptr i64 %661 to i32*
  %664 = load i32, i32* %663, align 4
  %665 = add i32 %664, 4
  %666 = zext i32 %665 to i64
  store i64 %666, i64* %RDX.i5152, align 8
  %667 = lshr i32 %665, 31
  %668 = sub i32 %655, %665
  %669 = icmp ult i32 %655, %665
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %20, align 1
  %671 = and i32 %668, 255
  %672 = tail call i32 @llvm.ctpop.i32(i32 %671)
  %673 = trunc i32 %672 to i8
  %674 = and i8 %673, 1
  %675 = xor i8 %674, 1
  store i8 %675, i8* %27, align 1
  %676 = xor i32 %665, %655
  %677 = xor i32 %676, %668
  %678 = lshr i32 %677, 4
  %679 = trunc i32 %678 to i8
  %680 = and i8 %679, 1
  store i8 %680, i8* %33, align 1
  %681 = icmp eq i32 %668, 0
  %682 = zext i1 %681 to i8
  store i8 %682, i8* %36, align 1
  %683 = lshr i32 %668, 31
  %684 = trunc i32 %683 to i8
  store i8 %684, i8* %39, align 1
  %685 = lshr i32 %655, 31
  %686 = xor i32 %667, %685
  %687 = xor i32 %683, %685
  %688 = add nuw nsw i32 %687, %686
  %689 = icmp eq i32 %688, 2
  %690 = zext i1 %689 to i8
  store i8 %690, i8* %45, align 1
  %691 = icmp ne i8 %684, 0
  %692 = xor i1 %691, %689
  %.v317 = select i1 %692, i64 24, i64 1793
  %693 = add i64 %650, %.v317
  store i64 %693, i64* %3, align 8
  br i1 %692, label %block_42df6a, label %block_.L_42e653

block_42df6a:                                     ; preds = %block_.L_42df52
  %694 = add i64 %693, 4
  store i64 %694, i64* %3, align 8
  %695 = load i64, i64* %659, align 8
  store i64 %695, i64* %RAX.i1585, align 8
  %696 = add i64 %695, 6396
  %697 = add i64 %693, 10
  store i64 %697, i64* %3, align 8
  %698 = inttoptr i64 %696 to i32*
  %699 = load i32, i32* %698, align 4
  %700 = add i32 %699, -1
  %701 = zext i32 %700 to i64
  store i64 %701, i64* %RCX.i3128, align 8
  %702 = icmp eq i32 %699, 0
  %703 = zext i1 %702 to i8
  store i8 %703, i8* %20, align 1
  %704 = and i32 %700, 255
  %705 = tail call i32 @llvm.ctpop.i32(i32 %704)
  %706 = trunc i32 %705 to i8
  %707 = and i8 %706, 1
  %708 = xor i8 %707, 1
  store i8 %708, i8* %27, align 1
  %709 = xor i32 %700, %699
  %710 = lshr i32 %709, 4
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  store i8 %712, i8* %33, align 1
  %713 = icmp eq i32 %700, 0
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %36, align 1
  %715 = lshr i32 %700, 31
  %716 = trunc i32 %715 to i8
  store i8 %716, i8* %39, align 1
  %717 = lshr i32 %699, 31
  %718 = xor i32 %715, %717
  %719 = add nuw nsw i32 %718, %717
  %720 = icmp eq i32 %719, 2
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %45, align 1
  %722 = add i64 %651, -28
  %723 = add i64 %693, 16
  store i64 %723, i64* %3, align 8
  %724 = inttoptr i64 %722 to i32*
  %725 = load i32, i32* %724, align 4
  %726 = sub i32 %700, %725
  %727 = icmp ult i32 %700, %725
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %20, align 1
  %729 = and i32 %726, 255
  %730 = tail call i32 @llvm.ctpop.i32(i32 %729)
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  %733 = xor i8 %732, 1
  store i8 %733, i8* %27, align 1
  %734 = xor i32 %725, %700
  %735 = xor i32 %734, %726
  %736 = lshr i32 %735, 4
  %737 = trunc i32 %736 to i8
  %738 = and i8 %737, 1
  store i8 %738, i8* %33, align 1
  %739 = icmp eq i32 %726, 0
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %36, align 1
  %741 = lshr i32 %726, 31
  %742 = trunc i32 %741 to i8
  store i8 %742, i8* %39, align 1
  %743 = lshr i32 %725, 31
  %744 = xor i32 %743, %715
  %745 = xor i32 %741, %715
  %746 = add nuw nsw i32 %745, %744
  %747 = icmp eq i32 %746, 2
  %748 = zext i1 %747 to i8
  store i8 %748, i8* %45, align 1
  %749 = icmp ne i8 %742, 0
  %750 = xor i1 %749, %747
  %.v347 = select i1 %750, i64 22, i64 43
  %751 = add i64 %693, %.v347
  store i64 %751, i64* %3, align 8
  br i1 %750, label %block_42df80, label %block_.L_42df95

block_42df80:                                     ; preds = %block_42df6a
  %752 = add i64 %751, 4
  store i64 %752, i64* %3, align 8
  %753 = load i64, i64* %659, align 8
  store i64 %753, i64* %RAX.i1585, align 8
  %754 = add i64 %753, 6396
  %755 = add i64 %751, 10
  store i64 %755, i64* %3, align 8
  %756 = inttoptr i64 %754 to i32*
  %757 = load i32, i32* %756, align 4
  %758 = add i32 %757, -1
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RCX.i3128, align 8
  %760 = icmp eq i32 %757, 0
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %20, align 1
  %762 = and i32 %758, 255
  %763 = tail call i32 @llvm.ctpop.i32(i32 %762)
  %764 = trunc i32 %763 to i8
  %765 = and i8 %764, 1
  %766 = xor i8 %765, 1
  store i8 %766, i8* %27, align 1
  %767 = xor i32 %758, %757
  %768 = lshr i32 %767, 4
  %769 = trunc i32 %768 to i8
  %770 = and i8 %769, 1
  store i8 %770, i8* %33, align 1
  %771 = icmp eq i32 %758, 0
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %36, align 1
  %773 = lshr i32 %758, 31
  %774 = trunc i32 %773 to i8
  store i8 %774, i8* %39, align 1
  %775 = lshr i32 %757, 31
  %776 = xor i32 %773, %775
  %777 = add nuw nsw i32 %776, %775
  %778 = icmp eq i32 %777, 2
  %779 = zext i1 %778 to i8
  store i8 %779, i8* %45, align 1
  %780 = add i64 %651, -100
  %781 = add i64 %751, 16
  store i64 %781, i64* %3, align 8
  %782 = inttoptr i64 %780 to i32*
  store i32 %758, i32* %782, align 4
  %783 = load i64, i64* %3, align 8
  %784 = add i64 %783, 11
  store i64 %784, i64* %3, align 8
  br label %block_.L_42df9b

block_.L_42df95:                                  ; preds = %block_42df6a
  %785 = add i64 %751, 3
  store i64 %785, i64* %3, align 8
  %786 = load i32, i32* %724, align 4
  %787 = zext i32 %786 to i64
  store i64 %787, i64* %RAX.i1585, align 8
  %788 = add i64 %651, -100
  %789 = add i64 %751, 6
  store i64 %789, i64* %3, align 8
  %790 = inttoptr i64 %788 to i32*
  store i32 %786, i32* %790, align 4
  %.pre283 = load i64, i64* %3, align 8
  br label %block_.L_42df9b

block_.L_42df9b:                                  ; preds = %block_.L_42df95, %block_42df80
  %791 = phi i64 [ %.pre283, %block_.L_42df95 ], [ %784, %block_42df80 ]
  %792 = load i64, i64* %RBP.i, align 8
  %793 = add i64 %792, -100
  %794 = add i64 %791, 3
  store i64 %794, i64* %3, align 8
  %795 = inttoptr i64 %793 to i32*
  %796 = load i32, i32* %795, align 4
  %797 = zext i32 %796 to i64
  store i64 %797, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %798 = sub i32 0, %796
  %799 = icmp ne i32 %796, 0
  %800 = zext i1 %799 to i8
  store i8 %800, i8* %20, align 1
  %801 = and i32 %798, 255
  %802 = tail call i32 @llvm.ctpop.i32(i32 %801)
  %803 = trunc i32 %802 to i8
  %804 = and i8 %803, 1
  %805 = xor i8 %804, 1
  store i8 %805, i8* %27, align 1
  %806 = xor i32 %796, %798
  %807 = lshr i32 %806, 4
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  store i8 %809, i8* %33, align 1
  %810 = icmp eq i32 %796, 0
  %811 = zext i1 %810 to i8
  store i8 %811, i8* %36, align 1
  %812 = lshr i32 %798, 31
  %813 = trunc i32 %812 to i8
  store i8 %813, i8* %39, align 1
  %814 = lshr i32 %796, 31
  %815 = add nuw nsw i32 %812, %814
  %816 = icmp eq i32 %815, 2
  %817 = zext i1 %816 to i8
  store i8 %817, i8* %45, align 1
  %818 = icmp ne i8 %813, 0
  %819 = xor i1 %818, %816
  %820 = or i1 %810, %819
  %.v348 = select i1 %820, i64 23, i64 13
  %821 = add i64 %791, %.v348
  store i64 %821, i64* %3, align 8
  br i1 %820, label %block_.L_42dfb2, label %block_42dfa8

block_42dfa8:                                     ; preds = %block_.L_42df9b
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %822 = add i64 %792, -104
  %823 = add i64 %821, 5
  store i64 %823, i64* %3, align 8
  %824 = inttoptr i64 %822 to i32*
  store i32 0, i32* %824, align 4
  %825 = load i64, i64* %3, align 8
  %826 = add i64 %825, 60
  store i64 %826, i64* %3, align 8
  br label %block_.L_42dfe9

block_.L_42dfb2:                                  ; preds = %block_.L_42df9b
  %827 = add i64 %792, -16
  %828 = add i64 %821, 4
  store i64 %828, i64* %3, align 8
  %829 = inttoptr i64 %827 to i64*
  %830 = load i64, i64* %829, align 8
  store i64 %830, i64* %RAX.i1585, align 8
  %831 = add i64 %830, 6396
  %832 = add i64 %821, 10
  store i64 %832, i64* %3, align 8
  %833 = inttoptr i64 %831 to i32*
  %834 = load i32, i32* %833, align 4
  %835 = add i32 %834, -1
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RCX.i3128, align 8
  %837 = icmp eq i32 %834, 0
  %838 = zext i1 %837 to i8
  store i8 %838, i8* %20, align 1
  %839 = and i32 %835, 255
  %840 = tail call i32 @llvm.ctpop.i32(i32 %839)
  %841 = trunc i32 %840 to i8
  %842 = and i8 %841, 1
  %843 = xor i8 %842, 1
  store i8 %843, i8* %27, align 1
  %844 = xor i32 %835, %834
  %845 = lshr i32 %844, 4
  %846 = trunc i32 %845 to i8
  %847 = and i8 %846, 1
  store i8 %847, i8* %33, align 1
  %848 = icmp eq i32 %835, 0
  %849 = zext i1 %848 to i8
  store i8 %849, i8* %36, align 1
  %850 = lshr i32 %835, 31
  %851 = trunc i32 %850 to i8
  store i8 %851, i8* %39, align 1
  %852 = lshr i32 %834, 31
  %853 = xor i32 %850, %852
  %854 = add nuw nsw i32 %853, %852
  %855 = icmp eq i32 %854, 2
  %856 = zext i1 %855 to i8
  store i8 %856, i8* %45, align 1
  %857 = add i64 %792, -28
  %858 = add i64 %821, 16
  store i64 %858, i64* %3, align 8
  %859 = inttoptr i64 %857 to i32*
  %860 = load i32, i32* %859, align 4
  %861 = sub i32 %835, %860
  %862 = icmp ult i32 %835, %860
  %863 = zext i1 %862 to i8
  store i8 %863, i8* %20, align 1
  %864 = and i32 %861, 255
  %865 = tail call i32 @llvm.ctpop.i32(i32 %864)
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  %868 = xor i8 %867, 1
  store i8 %868, i8* %27, align 1
  %869 = xor i32 %860, %835
  %870 = xor i32 %869, %861
  %871 = lshr i32 %870, 4
  %872 = trunc i32 %871 to i8
  %873 = and i8 %872, 1
  store i8 %873, i8* %33, align 1
  %874 = icmp eq i32 %861, 0
  %875 = zext i1 %874 to i8
  store i8 %875, i8* %36, align 1
  %876 = lshr i32 %861, 31
  %877 = trunc i32 %876 to i8
  store i8 %877, i8* %39, align 1
  %878 = lshr i32 %860, 31
  %879 = xor i32 %878, %850
  %880 = xor i32 %876, %850
  %881 = add nuw nsw i32 %880, %879
  %882 = icmp eq i32 %881, 2
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %45, align 1
  %884 = icmp ne i8 %877, 0
  %885 = xor i1 %884, %882
  %.v363 = select i1 %885, i64 22, i64 43
  %886 = add i64 %821, %.v363
  store i64 %886, i64* %3, align 8
  br i1 %885, label %block_42dfc8, label %block_.L_42dfdd

block_42dfc8:                                     ; preds = %block_.L_42dfb2
  %887 = add i64 %886, 4
  store i64 %887, i64* %3, align 8
  %888 = load i64, i64* %829, align 8
  store i64 %888, i64* %RAX.i1585, align 8
  %889 = add i64 %888, 6396
  %890 = add i64 %886, 10
  store i64 %890, i64* %3, align 8
  %891 = inttoptr i64 %889 to i32*
  %892 = load i32, i32* %891, align 4
  %893 = add i32 %892, -1
  %894 = zext i32 %893 to i64
  store i64 %894, i64* %RCX.i3128, align 8
  %895 = icmp eq i32 %892, 0
  %896 = zext i1 %895 to i8
  store i8 %896, i8* %20, align 1
  %897 = and i32 %893, 255
  %898 = tail call i32 @llvm.ctpop.i32(i32 %897)
  %899 = trunc i32 %898 to i8
  %900 = and i8 %899, 1
  %901 = xor i8 %900, 1
  store i8 %901, i8* %27, align 1
  %902 = xor i32 %893, %892
  %903 = lshr i32 %902, 4
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  store i8 %905, i8* %33, align 1
  %906 = icmp eq i32 %893, 0
  %907 = zext i1 %906 to i8
  store i8 %907, i8* %36, align 1
  %908 = lshr i32 %893, 31
  %909 = trunc i32 %908 to i8
  store i8 %909, i8* %39, align 1
  %910 = lshr i32 %892, 31
  %911 = xor i32 %908, %910
  %912 = add nuw nsw i32 %911, %910
  %913 = icmp eq i32 %912, 2
  %914 = zext i1 %913 to i8
  store i8 %914, i8* %45, align 1
  %915 = add i64 %792, -108
  %916 = add i64 %886, 16
  store i64 %916, i64* %3, align 8
  %917 = inttoptr i64 %915 to i32*
  store i32 %893, i32* %917, align 4
  %918 = load i64, i64* %3, align 8
  %919 = add i64 %918, 11
  store i64 %919, i64* %3, align 8
  br label %block_.L_42dfe3

block_.L_42dfdd:                                  ; preds = %block_.L_42dfb2
  %920 = add i64 %886, 3
  store i64 %920, i64* %3, align 8
  %921 = load i32, i32* %859, align 4
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RAX.i1585, align 8
  %923 = add i64 %792, -108
  %924 = add i64 %886, 6
  store i64 %924, i64* %3, align 8
  %925 = inttoptr i64 %923 to i32*
  store i32 %921, i32* %925, align 4
  %.pre284 = load i64, i64* %3, align 8
  br label %block_.L_42dfe3

block_.L_42dfe3:                                  ; preds = %block_.L_42dfdd, %block_42dfc8
  %926 = phi i64 [ %.pre284, %block_.L_42dfdd ], [ %919, %block_42dfc8 ]
  %927 = load i64, i64* %RBP.i, align 8
  %928 = add i64 %927, -108
  %929 = add i64 %926, 3
  store i64 %929, i64* %3, align 8
  %930 = inttoptr i64 %928 to i32*
  %931 = load i32, i32* %930, align 4
  %932 = zext i32 %931 to i64
  store i64 %932, i64* %RAX.i1585, align 8
  %933 = add i64 %927, -104
  %934 = add i64 %926, 6
  store i64 %934, i64* %3, align 8
  %935 = inttoptr i64 %933 to i32*
  store i32 %931, i32* %935, align 4
  %.pre285 = load i64, i64* %3, align 8
  br label %block_.L_42dfe9

block_.L_42dfe9:                                  ; preds = %block_.L_42dfe3, %block_42dfa8
  %936 = phi i64 [ %.pre285, %block_.L_42dfe3 ], [ %826, %block_42dfa8 ]
  %937 = load i64, i64* %RBP.i, align 8
  %938 = add i64 %937, -104
  %939 = add i64 %936, 3
  store i64 %939, i64* %3, align 8
  %940 = inttoptr i64 %938 to i32*
  %941 = load i32, i32* %940, align 4
  %942 = add i64 %937, -44
  %943 = add i64 %936, 6
  store i64 %943, i64* %3, align 8
  %944 = inttoptr i64 %942 to i32*
  store i32 %941, i32* %944, align 4
  %945 = load i64, i64* %3, align 8
  %946 = load i32, i32* bitcast (%G_0x4b8c50_type* @G_0x4b8c50 to i32*), align 8
  %947 = zext i32 %946 to i64
  store i64 %947, i64* %RAX.i1585, align 8
  %948 = load i64, i64* %RBP.i, align 8
  %949 = add i64 %948, -72
  %950 = add i64 %945, 11
  store i64 %950, i64* %3, align 8
  %951 = inttoptr i64 %949 to i64*
  %952 = load i64, i64* %951, align 8
  store i64 %952, i64* %RCX.i3128, align 8
  %953 = add i64 %948, -44
  %954 = add i64 %945, 15
  store i64 %954, i64* %3, align 8
  %955 = inttoptr i64 %953 to i32*
  %956 = load i32, i32* %955, align 4
  %957 = sext i32 %956 to i64
  store i64 %957, i64* %RDX.i5152, align 8
  %958 = shl nsw i64 %957, 3
  %959 = add i64 %958, %952
  %960 = add i64 %945, 19
  store i64 %960, i64* %3, align 8
  %961 = inttoptr i64 %959 to i64*
  %962 = load i64, i64* %961, align 8
  store i64 %962, i64* %RCX.i3128, align 8
  %963 = add i64 %948, -16
  %964 = add i64 %945, 23
  store i64 %964, i64* %3, align 8
  %965 = inttoptr i64 %963 to i64*
  %966 = load i64, i64* %965, align 8
  store i64 %966, i64* %RDX.i5152, align 8
  %967 = add i64 %966, 6392
  %968 = add i64 %945, 29
  store i64 %968, i64* %3, align 8
  %969 = inttoptr i64 %967 to i32*
  %970 = load i32, i32* %969, align 4
  %971 = add i32 %970, -1
  %972 = zext i32 %971 to i64
  store i64 %972, i64* %RSI.i5212, align 8
  %973 = icmp eq i32 %970, 0
  %974 = zext i1 %973 to i8
  store i8 %974, i8* %20, align 1
  %975 = and i32 %971, 255
  %976 = tail call i32 @llvm.ctpop.i32(i32 %975)
  %977 = trunc i32 %976 to i8
  %978 = and i8 %977, 1
  %979 = xor i8 %978, 1
  store i8 %979, i8* %27, align 1
  %980 = xor i32 %971, %970
  %981 = lshr i32 %980, 4
  %982 = trunc i32 %981 to i8
  %983 = and i8 %982, 1
  store i8 %983, i8* %33, align 1
  %984 = icmp eq i32 %971, 0
  %985 = zext i1 %984 to i8
  store i8 %985, i8* %36, align 1
  %986 = lshr i32 %971, 31
  %987 = trunc i32 %986 to i8
  store i8 %987, i8* %39, align 1
  %988 = lshr i32 %970, 31
  %989 = xor i32 %986, %988
  %990 = add nuw nsw i32 %989, %988
  %991 = icmp eq i32 %990, 2
  %992 = zext i1 %991 to i8
  store i8 %992, i8* %45, align 1
  %993 = add i64 %948, -24
  %994 = add i64 %945, 35
  store i64 %994, i64* %3, align 8
  %995 = inttoptr i64 %993 to i32*
  %996 = load i32, i32* %995, align 4
  %997 = sub i32 %971, %996
  %998 = icmp ult i32 %971, %996
  %999 = zext i1 %998 to i8
  store i8 %999, i8* %20, align 1
  %1000 = and i32 %997, 255
  %1001 = tail call i32 @llvm.ctpop.i32(i32 %1000)
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  store i8 %1004, i8* %27, align 1
  %1005 = xor i32 %996, %971
  %1006 = xor i32 %1005, %997
  %1007 = lshr i32 %1006, 4
  %1008 = trunc i32 %1007 to i8
  %1009 = and i8 %1008, 1
  store i8 %1009, i8* %33, align 1
  %1010 = icmp eq i32 %997, 0
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %36, align 1
  %1012 = lshr i32 %997, 31
  %1013 = trunc i32 %1012 to i8
  store i8 %1013, i8* %39, align 1
  %1014 = lshr i32 %996, 31
  %1015 = xor i32 %1014, %986
  %1016 = xor i32 %1012, %986
  %1017 = add nuw nsw i32 %1016, %1015
  %1018 = icmp eq i32 %1017, 2
  %1019 = zext i1 %1018 to i8
  store i8 %1019, i8* %45, align 1
  %1020 = load i64, i64* %RBP.i, align 8
  %1021 = add i64 %1020, -112
  %1022 = load i32, i32* %EAX.i1609, align 4
  %1023 = add i64 %945, 38
  store i64 %1023, i64* %3, align 8
  %1024 = inttoptr i64 %1021 to i32*
  store i32 %1022, i32* %1024, align 4
  %1025 = load i64, i64* %RBP.i, align 8
  %1026 = add i64 %1025, -120
  %1027 = load i64, i64* %RCX.i3128, align 8
  %1028 = load i64, i64* %3, align 8
  %1029 = add i64 %1028, 4
  store i64 %1029, i64* %3, align 8
  %1030 = inttoptr i64 %1026 to i64*
  store i64 %1027, i64* %1030, align 8
  %1031 = load i64, i64* %3, align 8
  %1032 = load i8, i8* %39, align 1
  %1033 = icmp ne i8 %1032, 0
  %1034 = load i8, i8* %45, align 1
  %1035 = icmp ne i8 %1034, 0
  %1036 = xor i1 %1033, %1035
  %.v408 = select i1 %1036, i64 6, i64 27
  %1037 = add i64 %1031, %.v408
  store i64 %1037, i64* %3, align 8
  %1038 = load i64, i64* %RBP.i, align 8
  br i1 %1036, label %block_42e01f, label %block_.L_42e034

block_42e01f:                                     ; preds = %block_.L_42dfe9
  %1039 = add i64 %1038, -16
  %1040 = add i64 %1037, 4
  store i64 %1040, i64* %3, align 8
  %1041 = inttoptr i64 %1039 to i64*
  %1042 = load i64, i64* %1041, align 8
  store i64 %1042, i64* %RAX.i1585, align 8
  %1043 = add i64 %1042, 6392
  %1044 = add i64 %1037, 10
  store i64 %1044, i64* %3, align 8
  %1045 = inttoptr i64 %1043 to i32*
  %1046 = load i32, i32* %1045, align 4
  %1047 = add i32 %1046, -1
  %1048 = zext i32 %1047 to i64
  store i64 %1048, i64* %RCX.i3128, align 8
  %1049 = icmp eq i32 %1046, 0
  %1050 = zext i1 %1049 to i8
  store i8 %1050, i8* %20, align 1
  %1051 = and i32 %1047, 255
  %1052 = tail call i32 @llvm.ctpop.i32(i32 %1051)
  %1053 = trunc i32 %1052 to i8
  %1054 = and i8 %1053, 1
  %1055 = xor i8 %1054, 1
  store i8 %1055, i8* %27, align 1
  %1056 = xor i32 %1047, %1046
  %1057 = lshr i32 %1056, 4
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  store i8 %1059, i8* %33, align 1
  %1060 = icmp eq i32 %1047, 0
  %1061 = zext i1 %1060 to i8
  store i8 %1061, i8* %36, align 1
  %1062 = lshr i32 %1047, 31
  %1063 = trunc i32 %1062 to i8
  store i8 %1063, i8* %39, align 1
  %1064 = lshr i32 %1046, 31
  %1065 = xor i32 %1062, %1064
  %1066 = add nuw nsw i32 %1065, %1064
  %1067 = icmp eq i32 %1066, 2
  %1068 = zext i1 %1067 to i8
  store i8 %1068, i8* %45, align 1
  %1069 = add i64 %1038, -124
  %1070 = add i64 %1037, 16
  store i64 %1070, i64* %3, align 8
  %1071 = inttoptr i64 %1069 to i32*
  store i32 %1047, i32* %1071, align 4
  %1072 = load i64, i64* %3, align 8
  %1073 = add i64 %1072, 11
  store i64 %1073, i64* %3, align 8
  br label %block_.L_42e03a

block_.L_42e034:                                  ; preds = %block_.L_42dfe9
  %1074 = add i64 %1038, -24
  %1075 = add i64 %1037, 3
  store i64 %1075, i64* %3, align 8
  %1076 = inttoptr i64 %1074 to i32*
  %1077 = load i32, i32* %1076, align 4
  %1078 = zext i32 %1077 to i64
  store i64 %1078, i64* %RAX.i1585, align 8
  %1079 = add i64 %1038, -124
  %1080 = add i64 %1037, 6
  store i64 %1080, i64* %3, align 8
  %1081 = inttoptr i64 %1079 to i32*
  store i32 %1077, i32* %1081, align 4
  %.pre286 = load i64, i64* %3, align 8
  br label %block_.L_42e03a

block_.L_42e03a:                                  ; preds = %block_.L_42e034, %block_42e01f
  %1082 = phi i64 [ %.pre286, %block_.L_42e034 ], [ %1073, %block_42e01f ]
  %1083 = load i64, i64* %RBP.i, align 8
  %1084 = add i64 %1083, -124
  %1085 = add i64 %1082, 3
  store i64 %1085, i64* %3, align 8
  %1086 = inttoptr i64 %1084 to i32*
  %1087 = load i32, i32* %1086, align 4
  %1088 = zext i32 %1087 to i64
  store i64 %1088, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %1089 = sub i32 0, %1087
  %1090 = icmp ne i32 %1087, 0
  %1091 = zext i1 %1090 to i8
  store i8 %1091, i8* %20, align 1
  %1092 = and i32 %1089, 255
  %1093 = tail call i32 @llvm.ctpop.i32(i32 %1092)
  %1094 = trunc i32 %1093 to i8
  %1095 = and i8 %1094, 1
  %1096 = xor i8 %1095, 1
  store i8 %1096, i8* %27, align 1
  %1097 = xor i32 %1087, %1089
  %1098 = lshr i32 %1097, 4
  %1099 = trunc i32 %1098 to i8
  %1100 = and i8 %1099, 1
  store i8 %1100, i8* %33, align 1
  %1101 = icmp eq i32 %1087, 0
  %1102 = zext i1 %1101 to i8
  store i8 %1102, i8* %36, align 1
  %1103 = lshr i32 %1089, 31
  %1104 = trunc i32 %1103 to i8
  store i8 %1104, i8* %39, align 1
  %1105 = lshr i32 %1087, 31
  %1106 = add nuw nsw i32 %1103, %1105
  %1107 = icmp eq i32 %1106, 2
  %1108 = zext i1 %1107 to i8
  store i8 %1108, i8* %45, align 1
  %1109 = icmp ne i8 %1104, 0
  %1110 = xor i1 %1109, %1107
  %1111 = or i1 %1101, %1110
  %.v349 = select i1 %1111, i64 23, i64 13
  %1112 = add i64 %1082, %.v349
  store i64 %1112, i64* %3, align 8
  br i1 %1111, label %block_.L_42e051, label %block_42e047

block_42e047:                                     ; preds = %block_.L_42e03a
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %1113 = add i64 %1083, -128
  %1114 = add i64 %1112, 5
  store i64 %1114, i64* %3, align 8
  %1115 = inttoptr i64 %1113 to i32*
  store i32 0, i32* %1115, align 4
  %1116 = load i64, i64* %3, align 8
  %1117 = add i64 %1116, 69
  store i64 %1117, i64* %3, align 8
  br label %block_.L_42e091

block_.L_42e051:                                  ; preds = %block_.L_42e03a
  %1118 = add i64 %1083, -16
  %1119 = add i64 %1112, 4
  store i64 %1119, i64* %3, align 8
  %1120 = inttoptr i64 %1118 to i64*
  %1121 = load i64, i64* %1120, align 8
  store i64 %1121, i64* %RAX.i1585, align 8
  %1122 = add i64 %1121, 6392
  %1123 = add i64 %1112, 10
  store i64 %1123, i64* %3, align 8
  %1124 = inttoptr i64 %1122 to i32*
  %1125 = load i32, i32* %1124, align 4
  %1126 = add i32 %1125, -1
  %1127 = zext i32 %1126 to i64
  store i64 %1127, i64* %RCX.i3128, align 8
  %1128 = icmp eq i32 %1125, 0
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %20, align 1
  %1130 = and i32 %1126, 255
  %1131 = tail call i32 @llvm.ctpop.i32(i32 %1130)
  %1132 = trunc i32 %1131 to i8
  %1133 = and i8 %1132, 1
  %1134 = xor i8 %1133, 1
  store i8 %1134, i8* %27, align 1
  %1135 = xor i32 %1126, %1125
  %1136 = lshr i32 %1135, 4
  %1137 = trunc i32 %1136 to i8
  %1138 = and i8 %1137, 1
  store i8 %1138, i8* %33, align 1
  %1139 = icmp eq i32 %1126, 0
  %1140 = zext i1 %1139 to i8
  store i8 %1140, i8* %36, align 1
  %1141 = lshr i32 %1126, 31
  %1142 = trunc i32 %1141 to i8
  store i8 %1142, i8* %39, align 1
  %1143 = lshr i32 %1125, 31
  %1144 = xor i32 %1141, %1143
  %1145 = add nuw nsw i32 %1144, %1143
  %1146 = icmp eq i32 %1145, 2
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %45, align 1
  %1148 = add i64 %1083, -24
  %1149 = add i64 %1112, 16
  store i64 %1149, i64* %3, align 8
  %1150 = inttoptr i64 %1148 to i32*
  %1151 = load i32, i32* %1150, align 4
  %1152 = sub i32 %1126, %1151
  %1153 = icmp ult i32 %1126, %1151
  %1154 = zext i1 %1153 to i8
  store i8 %1154, i8* %20, align 1
  %1155 = and i32 %1152, 255
  %1156 = tail call i32 @llvm.ctpop.i32(i32 %1155)
  %1157 = trunc i32 %1156 to i8
  %1158 = and i8 %1157, 1
  %1159 = xor i8 %1158, 1
  store i8 %1159, i8* %27, align 1
  %1160 = xor i32 %1151, %1126
  %1161 = xor i32 %1160, %1152
  %1162 = lshr i32 %1161, 4
  %1163 = trunc i32 %1162 to i8
  %1164 = and i8 %1163, 1
  store i8 %1164, i8* %33, align 1
  %1165 = icmp eq i32 %1152, 0
  %1166 = zext i1 %1165 to i8
  store i8 %1166, i8* %36, align 1
  %1167 = lshr i32 %1152, 31
  %1168 = trunc i32 %1167 to i8
  store i8 %1168, i8* %39, align 1
  %1169 = lshr i32 %1151, 31
  %1170 = xor i32 %1169, %1141
  %1171 = xor i32 %1167, %1141
  %1172 = add nuw nsw i32 %1171, %1170
  %1173 = icmp eq i32 %1172, 2
  %1174 = zext i1 %1173 to i8
  store i8 %1174, i8* %45, align 1
  %1175 = icmp ne i8 %1168, 0
  %1176 = xor i1 %1175, %1173
  %.v362 = select i1 %1176, i64 22, i64 46
  %1177 = add i64 %1112, %.v362
  store i64 %1177, i64* %3, align 8
  br i1 %1176, label %block_42e067, label %block_.L_42e07f

block_42e067:                                     ; preds = %block_.L_42e051
  %1178 = add i64 %1177, 4
  store i64 %1178, i64* %3, align 8
  %1179 = load i64, i64* %1120, align 8
  store i64 %1179, i64* %RAX.i1585, align 8
  %1180 = add i64 %1179, 6392
  %1181 = add i64 %1177, 10
  store i64 %1181, i64* %3, align 8
  %1182 = inttoptr i64 %1180 to i32*
  %1183 = load i32, i32* %1182, align 4
  %1184 = add i32 %1183, -1
  %1185 = zext i32 %1184 to i64
  store i64 %1185, i64* %RCX.i3128, align 8
  %1186 = icmp eq i32 %1183, 0
  %1187 = zext i1 %1186 to i8
  store i8 %1187, i8* %20, align 1
  %1188 = and i32 %1184, 255
  %1189 = tail call i32 @llvm.ctpop.i32(i32 %1188)
  %1190 = trunc i32 %1189 to i8
  %1191 = and i8 %1190, 1
  %1192 = xor i8 %1191, 1
  store i8 %1192, i8* %27, align 1
  %1193 = xor i32 %1184, %1183
  %1194 = lshr i32 %1193, 4
  %1195 = trunc i32 %1194 to i8
  %1196 = and i8 %1195, 1
  store i8 %1196, i8* %33, align 1
  %1197 = icmp eq i32 %1184, 0
  %1198 = zext i1 %1197 to i8
  store i8 %1198, i8* %36, align 1
  %1199 = lshr i32 %1184, 31
  %1200 = trunc i32 %1199 to i8
  store i8 %1200, i8* %39, align 1
  %1201 = lshr i32 %1183, 31
  %1202 = xor i32 %1199, %1201
  %1203 = add nuw nsw i32 %1202, %1201
  %1204 = icmp eq i32 %1203, 2
  %1205 = zext i1 %1204 to i8
  store i8 %1205, i8* %45, align 1
  %1206 = add i64 %1083, -132
  %1207 = add i64 %1177, 19
  store i64 %1207, i64* %3, align 8
  %1208 = inttoptr i64 %1206 to i32*
  store i32 %1184, i32* %1208, align 4
  %1209 = load i64, i64* %3, align 8
  %1210 = add i64 %1209, 14
  store i64 %1210, i64* %3, align 8
  br label %block_.L_42e088

block_.L_42e07f:                                  ; preds = %block_.L_42e051
  %1211 = add i64 %1177, 3
  store i64 %1211, i64* %3, align 8
  %1212 = load i32, i32* %1150, align 4
  %1213 = zext i32 %1212 to i64
  store i64 %1213, i64* %RAX.i1585, align 8
  %1214 = add i64 %1083, -132
  %1215 = add i64 %1177, 9
  store i64 %1215, i64* %3, align 8
  %1216 = inttoptr i64 %1214 to i32*
  store i32 %1212, i32* %1216, align 4
  %.pre287 = load i64, i64* %3, align 8
  br label %block_.L_42e088

block_.L_42e088:                                  ; preds = %block_.L_42e07f, %block_42e067
  %1217 = phi i64 [ %.pre287, %block_.L_42e07f ], [ %1210, %block_42e067 ]
  %1218 = load i64, i64* %RBP.i, align 8
  %1219 = add i64 %1218, -132
  %1220 = add i64 %1217, 6
  store i64 %1220, i64* %3, align 8
  %1221 = inttoptr i64 %1219 to i32*
  %1222 = load i32, i32* %1221, align 4
  %1223 = zext i32 %1222 to i64
  store i64 %1223, i64* %RAX.i1585, align 8
  %1224 = add i64 %1218, -128
  %1225 = add i64 %1217, 9
  store i64 %1225, i64* %3, align 8
  %1226 = inttoptr i64 %1224 to i32*
  store i32 %1222, i32* %1226, align 4
  %.pre288 = load i64, i64* %3, align 8
  br label %block_.L_42e091

block_.L_42e091:                                  ; preds = %block_.L_42e088, %block_42e047
  %1227 = phi i64 [ %.pre288, %block_.L_42e088 ], [ %1117, %block_42e047 ]
  %1228 = load i64, i64* %RBP.i, align 8
  %1229 = add i64 %1228, -128
  %1230 = add i64 %1227, 3
  store i64 %1230, i64* %3, align 8
  %1231 = inttoptr i64 %1229 to i32*
  %1232 = load i32, i32* %1231, align 4
  %1233 = zext i32 %1232 to i64
  store i64 %1233, i64* %RAX.i1585, align 8
  %1234 = sext i32 %1232 to i64
  store i64 %1234, i64* %RCX.i3128, align 8
  %1235 = add i64 %1228, -120
  %1236 = add i64 %1227, 10
  store i64 %1236, i64* %3, align 8
  %1237 = inttoptr i64 %1235 to i64*
  %1238 = load i64, i64* %1237, align 8
  store i64 %1238, i64* %RDX.i5152, align 8
  %1239 = shl nsw i64 %1234, 1
  %1240 = add i64 %1239, %1238
  %1241 = add i64 %1227, 14
  store i64 %1241, i64* %3, align 8
  %1242 = inttoptr i64 %1240 to i16*
  %1243 = load i16, i16* %1242, align 2
  %1244 = zext i16 %1243 to i64
  store i64 %1244, i64* %RAX.i1585, align 8
  %1245 = add i64 %1228, -72
  %1246 = add i64 %1227, 18
  store i64 %1246, i64* %3, align 8
  %1247 = inttoptr i64 %1245 to i64*
  %1248 = load i64, i64* %1247, align 8
  store i64 %1248, i64* %RCX.i3128, align 8
  %1249 = add i64 %1228, -44
  %1250 = add i64 %1227, 22
  store i64 %1250, i64* %3, align 8
  %1251 = inttoptr i64 %1249 to i32*
  %1252 = load i32, i32* %1251, align 4
  %1253 = sext i32 %1252 to i64
  store i64 %1253, i64* %RSI.i5212, align 8
  %1254 = shl nsw i64 %1253, 3
  %1255 = add i64 %1254, %1248
  %1256 = add i64 %1227, 26
  store i64 %1256, i64* %3, align 8
  %1257 = inttoptr i64 %1255 to i64*
  %1258 = load i64, i64* %1257, align 8
  store i64 %1258, i64* %RCX.i3128, align 8
  %1259 = add i64 %1228, -16
  %1260 = add i64 %1227, 30
  store i64 %1260, i64* %3, align 8
  %1261 = inttoptr i64 %1259 to i64*
  %1262 = load i64, i64* %1261, align 8
  store i64 %1262, i64* %RSI.i5212, align 8
  %1263 = add i64 %1262, 6392
  %1264 = add i64 %1227, 36
  store i64 %1264, i64* %3, align 8
  %1265 = inttoptr i64 %1263 to i32*
  %1266 = load i32, i32* %1265, align 4
  %1267 = add i32 %1266, -1
  %1268 = zext i32 %1267 to i64
  store i64 %1268, i64* %RDI.i605, align 8
  %1269 = icmp eq i32 %1266, 0
  %1270 = zext i1 %1269 to i8
  store i8 %1270, i8* %20, align 1
  %1271 = and i32 %1267, 255
  %1272 = tail call i32 @llvm.ctpop.i32(i32 %1271)
  %1273 = trunc i32 %1272 to i8
  %1274 = and i8 %1273, 1
  %1275 = xor i8 %1274, 1
  store i8 %1275, i8* %27, align 1
  %1276 = xor i32 %1267, %1266
  %1277 = lshr i32 %1276, 4
  %1278 = trunc i32 %1277 to i8
  %1279 = and i8 %1278, 1
  store i8 %1279, i8* %33, align 1
  %1280 = icmp eq i32 %1267, 0
  %1281 = zext i1 %1280 to i8
  store i8 %1281, i8* %36, align 1
  %1282 = lshr i32 %1267, 31
  %1283 = trunc i32 %1282 to i8
  store i8 %1283, i8* %39, align 1
  %1284 = lshr i32 %1266, 31
  %1285 = xor i32 %1282, %1284
  %1286 = add nuw nsw i32 %1285, %1284
  %1287 = icmp eq i32 %1286, 2
  %1288 = zext i1 %1287 to i8
  store i8 %1288, i8* %45, align 1
  %1289 = add i64 %1228, -24
  %1290 = add i64 %1227, 43
  store i64 %1290, i64* %3, align 8
  %1291 = inttoptr i64 %1289 to i32*
  %1292 = load i32, i32* %1291, align 4
  %1293 = add i32 %1292, 1
  %1294 = zext i32 %1293 to i64
  store i64 %1294, i64* %600, align 8
  %1295 = lshr i32 %1293, 31
  %1296 = sub i32 %1267, %1293
  %1297 = icmp ult i32 %1267, %1293
  %1298 = zext i1 %1297 to i8
  store i8 %1298, i8* %20, align 1
  %1299 = and i32 %1296, 255
  %1300 = tail call i32 @llvm.ctpop.i32(i32 %1299)
  %1301 = trunc i32 %1300 to i8
  %1302 = and i8 %1301, 1
  %1303 = xor i8 %1302, 1
  store i8 %1303, i8* %27, align 1
  %1304 = xor i32 %1293, %1267
  %1305 = xor i32 %1304, %1296
  %1306 = lshr i32 %1305, 4
  %1307 = trunc i32 %1306 to i8
  %1308 = and i8 %1307, 1
  store i8 %1308, i8* %33, align 1
  %1309 = icmp eq i32 %1296, 0
  %1310 = zext i1 %1309 to i8
  store i8 %1310, i8* %36, align 1
  %1311 = lshr i32 %1296, 31
  %1312 = trunc i32 %1311 to i8
  store i8 %1312, i8* %39, align 1
  %1313 = xor i32 %1295, %1282
  %1314 = xor i32 %1311, %1282
  %1315 = add nuw nsw i32 %1314, %1313
  %1316 = icmp eq i32 %1315, 2
  %1317 = zext i1 %1316 to i8
  store i8 %1317, i8* %45, align 1
  %1318 = load i64, i64* %RBP.i, align 8
  %1319 = add i64 %1318, -136
  %1320 = load i32, i32* %EAX.i1609, align 4
  %1321 = add i64 %1227, 56
  store i64 %1321, i64* %3, align 8
  %1322 = inttoptr i64 %1319 to i32*
  store i32 %1320, i32* %1322, align 4
  %1323 = load i64, i64* %RBP.i, align 8
  %1324 = add i64 %1323, -144
  %1325 = load i64, i64* %RCX.i3128, align 8
  %1326 = load i64, i64* %3, align 8
  %1327 = add i64 %1326, 7
  store i64 %1327, i64* %3, align 8
  %1328 = inttoptr i64 %1324 to i64*
  store i64 %1325, i64* %1328, align 8
  %1329 = load i64, i64* %3, align 8
  %1330 = load i8, i8* %39, align 1
  %1331 = icmp ne i8 %1330, 0
  %1332 = load i8, i8* %45, align 1
  %1333 = icmp ne i8 %1332, 0
  %1334 = xor i1 %1331, %1333
  %.v409 = select i1 %1334, i64 6, i64 30
  %1335 = add i64 %1329, %.v409
  store i64 %1335, i64* %3, align 8
  %1336 = load i64, i64* %RBP.i, align 8
  br i1 %1334, label %block_42e0d6, label %block_.L_42e0ee

block_42e0d6:                                     ; preds = %block_.L_42e091
  %1337 = add i64 %1336, -16
  %1338 = add i64 %1335, 4
  store i64 %1338, i64* %3, align 8
  %1339 = inttoptr i64 %1337 to i64*
  %1340 = load i64, i64* %1339, align 8
  store i64 %1340, i64* %RAX.i1585, align 8
  %1341 = add i64 %1340, 6392
  %1342 = add i64 %1335, 10
  store i64 %1342, i64* %3, align 8
  %1343 = inttoptr i64 %1341 to i32*
  %1344 = load i32, i32* %1343, align 4
  %1345 = add i32 %1344, -1
  %1346 = zext i32 %1345 to i64
  store i64 %1346, i64* %RCX.i3128, align 8
  %1347 = icmp eq i32 %1344, 0
  %1348 = zext i1 %1347 to i8
  store i8 %1348, i8* %20, align 1
  %1349 = and i32 %1345, 255
  %1350 = tail call i32 @llvm.ctpop.i32(i32 %1349)
  %1351 = trunc i32 %1350 to i8
  %1352 = and i8 %1351, 1
  %1353 = xor i8 %1352, 1
  store i8 %1353, i8* %27, align 1
  %1354 = xor i32 %1345, %1344
  %1355 = lshr i32 %1354, 4
  %1356 = trunc i32 %1355 to i8
  %1357 = and i8 %1356, 1
  store i8 %1357, i8* %33, align 1
  %1358 = icmp eq i32 %1345, 0
  %1359 = zext i1 %1358 to i8
  store i8 %1359, i8* %36, align 1
  %1360 = lshr i32 %1345, 31
  %1361 = trunc i32 %1360 to i8
  store i8 %1361, i8* %39, align 1
  %1362 = lshr i32 %1344, 31
  %1363 = xor i32 %1360, %1362
  %1364 = add nuw nsw i32 %1363, %1362
  %1365 = icmp eq i32 %1364, 2
  %1366 = zext i1 %1365 to i8
  store i8 %1366, i8* %45, align 1
  %1367 = add i64 %1336, -148
  %1368 = add i64 %1335, 19
  store i64 %1368, i64* %3, align 8
  %1369 = inttoptr i64 %1367 to i32*
  store i32 %1345, i32* %1369, align 4
  %1370 = load i64, i64* %3, align 8
  %1371 = add i64 %1370, 17
  store i64 %1371, i64* %3, align 8
  br label %block_.L_42e0fa

block_.L_42e0ee:                                  ; preds = %block_.L_42e091
  %1372 = add i64 %1336, -24
  %1373 = add i64 %1335, 3
  store i64 %1373, i64* %3, align 8
  %1374 = inttoptr i64 %1372 to i32*
  %1375 = load i32, i32* %1374, align 4
  %1376 = add i32 %1375, 1
  %1377 = zext i32 %1376 to i64
  store i64 %1377, i64* %RAX.i1585, align 8
  %1378 = icmp eq i32 %1375, -1
  %1379 = icmp eq i32 %1376, 0
  %1380 = or i1 %1378, %1379
  %1381 = zext i1 %1380 to i8
  store i8 %1381, i8* %20, align 1
  %1382 = and i32 %1376, 255
  %1383 = tail call i32 @llvm.ctpop.i32(i32 %1382)
  %1384 = trunc i32 %1383 to i8
  %1385 = and i8 %1384, 1
  %1386 = xor i8 %1385, 1
  store i8 %1386, i8* %27, align 1
  %1387 = xor i32 %1376, %1375
  %1388 = lshr i32 %1387, 4
  %1389 = trunc i32 %1388 to i8
  %1390 = and i8 %1389, 1
  store i8 %1390, i8* %33, align 1
  %1391 = zext i1 %1379 to i8
  store i8 %1391, i8* %36, align 1
  %1392 = lshr i32 %1376, 31
  %1393 = trunc i32 %1392 to i8
  store i8 %1393, i8* %39, align 1
  %1394 = lshr i32 %1375, 31
  %1395 = xor i32 %1392, %1394
  %1396 = add nuw nsw i32 %1395, %1392
  %1397 = icmp eq i32 %1396, 2
  %1398 = zext i1 %1397 to i8
  store i8 %1398, i8* %45, align 1
  %1399 = add i64 %1336, -148
  %1400 = add i64 %1335, 12
  store i64 %1400, i64* %3, align 8
  %1401 = inttoptr i64 %1399 to i32*
  store i32 %1376, i32* %1401, align 4
  %.pre289 = load i64, i64* %3, align 8
  br label %block_.L_42e0fa

block_.L_42e0fa:                                  ; preds = %block_.L_42e0ee, %block_42e0d6
  %1402 = phi i64 [ %.pre289, %block_.L_42e0ee ], [ %1371, %block_42e0d6 ]
  %1403 = load i64, i64* %RBP.i, align 8
  %1404 = add i64 %1403, -148
  %1405 = add i64 %1402, 6
  store i64 %1405, i64* %3, align 8
  %1406 = inttoptr i64 %1404 to i32*
  %1407 = load i32, i32* %1406, align 4
  %1408 = zext i32 %1407 to i64
  store i64 %1408, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %1409 = sub i32 0, %1407
  %1410 = icmp ne i32 %1407, 0
  %1411 = zext i1 %1410 to i8
  store i8 %1411, i8* %20, align 1
  %1412 = and i32 %1409, 255
  %1413 = tail call i32 @llvm.ctpop.i32(i32 %1412)
  %1414 = trunc i32 %1413 to i8
  %1415 = and i8 %1414, 1
  %1416 = xor i8 %1415, 1
  store i8 %1416, i8* %27, align 1
  %1417 = xor i32 %1407, %1409
  %1418 = lshr i32 %1417, 4
  %1419 = trunc i32 %1418 to i8
  %1420 = and i8 %1419, 1
  store i8 %1420, i8* %33, align 1
  %1421 = icmp eq i32 %1407, 0
  %1422 = zext i1 %1421 to i8
  store i8 %1422, i8* %36, align 1
  %1423 = lshr i32 %1409, 31
  %1424 = trunc i32 %1423 to i8
  store i8 %1424, i8* %39, align 1
  %1425 = lshr i32 %1407, 31
  %1426 = add nuw nsw i32 %1423, %1425
  %1427 = icmp eq i32 %1426, 2
  %1428 = zext i1 %1427 to i8
  store i8 %1428, i8* %45, align 1
  %1429 = icmp ne i8 %1424, 0
  %1430 = xor i1 %1429, %1427
  %1431 = or i1 %1421, %1430
  %.v350 = select i1 %1431, i64 29, i64 16
  %1432 = add i64 %1402, %.v350
  store i64 %1432, i64* %3, align 8
  br i1 %1431, label %block_.L_42e117, label %block_42e10a

block_42e10a:                                     ; preds = %block_.L_42e0fa
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %1433 = add i64 %1403, -152
  %1434 = add i64 %1432, 8
  store i64 %1434, i64* %3, align 8
  %1435 = inttoptr i64 %1433 to i32*
  store i32 0, i32* %1435, align 4
  %1436 = load i64, i64* %3, align 8
  %1437 = add i64 %1436, 80
  store i64 %1437, i64* %3, align 8
  br label %block_.L_42e162

block_.L_42e117:                                  ; preds = %block_.L_42e0fa
  %1438 = add i64 %1403, -16
  %1439 = add i64 %1432, 4
  store i64 %1439, i64* %3, align 8
  %1440 = inttoptr i64 %1438 to i64*
  %1441 = load i64, i64* %1440, align 8
  store i64 %1441, i64* %RAX.i1585, align 8
  %1442 = add i64 %1441, 6392
  %1443 = add i64 %1432, 10
  store i64 %1443, i64* %3, align 8
  %1444 = inttoptr i64 %1442 to i32*
  %1445 = load i32, i32* %1444, align 4
  %1446 = add i32 %1445, -1
  %1447 = zext i32 %1446 to i64
  store i64 %1447, i64* %RCX.i3128, align 8
  %1448 = icmp eq i32 %1445, 0
  %1449 = zext i1 %1448 to i8
  store i8 %1449, i8* %20, align 1
  %1450 = and i32 %1446, 255
  %1451 = tail call i32 @llvm.ctpop.i32(i32 %1450)
  %1452 = trunc i32 %1451 to i8
  %1453 = and i8 %1452, 1
  %1454 = xor i8 %1453, 1
  store i8 %1454, i8* %27, align 1
  %1455 = xor i32 %1446, %1445
  %1456 = lshr i32 %1455, 4
  %1457 = trunc i32 %1456 to i8
  %1458 = and i8 %1457, 1
  store i8 %1458, i8* %33, align 1
  %1459 = icmp eq i32 %1446, 0
  %1460 = zext i1 %1459 to i8
  store i8 %1460, i8* %36, align 1
  %1461 = lshr i32 %1446, 31
  %1462 = trunc i32 %1461 to i8
  store i8 %1462, i8* %39, align 1
  %1463 = lshr i32 %1445, 31
  %1464 = xor i32 %1461, %1463
  %1465 = add nuw nsw i32 %1464, %1463
  %1466 = icmp eq i32 %1465, 2
  %1467 = zext i1 %1466 to i8
  store i8 %1467, i8* %45, align 1
  %1468 = add i64 %1403, -24
  %1469 = add i64 %1432, 16
  store i64 %1469, i64* %3, align 8
  %1470 = inttoptr i64 %1468 to i32*
  %1471 = load i32, i32* %1470, align 4
  %1472 = add i32 %1471, 1
  %1473 = zext i32 %1472 to i64
  store i64 %1473, i64* %RDX.i5152, align 8
  %1474 = lshr i32 %1472, 31
  %1475 = sub i32 %1446, %1472
  %1476 = icmp ult i32 %1446, %1472
  %1477 = zext i1 %1476 to i8
  store i8 %1477, i8* %20, align 1
  %1478 = and i32 %1475, 255
  %1479 = tail call i32 @llvm.ctpop.i32(i32 %1478)
  %1480 = trunc i32 %1479 to i8
  %1481 = and i8 %1480, 1
  %1482 = xor i8 %1481, 1
  store i8 %1482, i8* %27, align 1
  %1483 = xor i32 %1472, %1446
  %1484 = xor i32 %1483, %1475
  %1485 = lshr i32 %1484, 4
  %1486 = trunc i32 %1485 to i8
  %1487 = and i8 %1486, 1
  store i8 %1487, i8* %33, align 1
  %1488 = icmp eq i32 %1475, 0
  %1489 = zext i1 %1488 to i8
  store i8 %1489, i8* %36, align 1
  %1490 = lshr i32 %1475, 31
  %1491 = trunc i32 %1490 to i8
  store i8 %1491, i8* %39, align 1
  %1492 = xor i32 %1474, %1461
  %1493 = xor i32 %1490, %1461
  %1494 = add nuw nsw i32 %1493, %1492
  %1495 = icmp eq i32 %1494, 2
  %1496 = zext i1 %1495 to i8
  store i8 %1496, i8* %45, align 1
  %1497 = icmp ne i8 %1491, 0
  %1498 = xor i1 %1497, %1495
  %.v361 = select i1 %1498, i64 27, i64 51
  %1499 = add i64 %1432, %.v361
  store i64 %1499, i64* %3, align 8
  %1500 = load i64, i64* %RBP.i, align 8
  br i1 %1498, label %block_42e132, label %block_.L_42e14a

block_42e132:                                     ; preds = %block_.L_42e117
  %1501 = add i64 %1500, -16
  %1502 = add i64 %1499, 4
  store i64 %1502, i64* %3, align 8
  %1503 = inttoptr i64 %1501 to i64*
  %1504 = load i64, i64* %1503, align 8
  store i64 %1504, i64* %RAX.i1585, align 8
  %1505 = add i64 %1504, 6392
  %1506 = add i64 %1499, 10
  store i64 %1506, i64* %3, align 8
  %1507 = inttoptr i64 %1505 to i32*
  %1508 = load i32, i32* %1507, align 4
  %1509 = add i32 %1508, -1
  %1510 = zext i32 %1509 to i64
  store i64 %1510, i64* %RCX.i3128, align 8
  %1511 = icmp eq i32 %1508, 0
  %1512 = zext i1 %1511 to i8
  store i8 %1512, i8* %20, align 1
  %1513 = and i32 %1509, 255
  %1514 = tail call i32 @llvm.ctpop.i32(i32 %1513)
  %1515 = trunc i32 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = xor i8 %1516, 1
  store i8 %1517, i8* %27, align 1
  %1518 = xor i32 %1509, %1508
  %1519 = lshr i32 %1518, 4
  %1520 = trunc i32 %1519 to i8
  %1521 = and i8 %1520, 1
  store i8 %1521, i8* %33, align 1
  %1522 = icmp eq i32 %1509, 0
  %1523 = zext i1 %1522 to i8
  store i8 %1523, i8* %36, align 1
  %1524 = lshr i32 %1509, 31
  %1525 = trunc i32 %1524 to i8
  store i8 %1525, i8* %39, align 1
  %1526 = lshr i32 %1508, 31
  %1527 = xor i32 %1524, %1526
  %1528 = add nuw nsw i32 %1527, %1526
  %1529 = icmp eq i32 %1528, 2
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %45, align 1
  %1531 = add i64 %1500, -156
  %1532 = add i64 %1499, 19
  store i64 %1532, i64* %3, align 8
  %1533 = inttoptr i64 %1531 to i32*
  store i32 %1509, i32* %1533, align 4
  %1534 = load i64, i64* %3, align 8
  %1535 = add i64 %1534, 17
  store i64 %1535, i64* %3, align 8
  br label %block_.L_42e156

block_.L_42e14a:                                  ; preds = %block_.L_42e117
  %1536 = add i64 %1500, -24
  %1537 = add i64 %1499, 3
  store i64 %1537, i64* %3, align 8
  %1538 = inttoptr i64 %1536 to i32*
  %1539 = load i32, i32* %1538, align 4
  %1540 = add i32 %1539, 1
  %1541 = zext i32 %1540 to i64
  store i64 %1541, i64* %RAX.i1585, align 8
  %1542 = icmp eq i32 %1539, -1
  %1543 = icmp eq i32 %1540, 0
  %1544 = or i1 %1542, %1543
  %1545 = zext i1 %1544 to i8
  store i8 %1545, i8* %20, align 1
  %1546 = and i32 %1540, 255
  %1547 = tail call i32 @llvm.ctpop.i32(i32 %1546)
  %1548 = trunc i32 %1547 to i8
  %1549 = and i8 %1548, 1
  %1550 = xor i8 %1549, 1
  store i8 %1550, i8* %27, align 1
  %1551 = xor i32 %1540, %1539
  %1552 = lshr i32 %1551, 4
  %1553 = trunc i32 %1552 to i8
  %1554 = and i8 %1553, 1
  store i8 %1554, i8* %33, align 1
  %1555 = zext i1 %1543 to i8
  store i8 %1555, i8* %36, align 1
  %1556 = lshr i32 %1540, 31
  %1557 = trunc i32 %1556 to i8
  store i8 %1557, i8* %39, align 1
  %1558 = lshr i32 %1539, 31
  %1559 = xor i32 %1556, %1558
  %1560 = add nuw nsw i32 %1559, %1556
  %1561 = icmp eq i32 %1560, 2
  %1562 = zext i1 %1561 to i8
  store i8 %1562, i8* %45, align 1
  %1563 = add i64 %1500, -156
  %1564 = add i64 %1499, 12
  store i64 %1564, i64* %3, align 8
  %1565 = inttoptr i64 %1563 to i32*
  store i32 %1540, i32* %1565, align 4
  %.pre290 = load i64, i64* %3, align 8
  br label %block_.L_42e156

block_.L_42e156:                                  ; preds = %block_.L_42e14a, %block_42e132
  %1566 = phi i64 [ %.pre290, %block_.L_42e14a ], [ %1535, %block_42e132 ]
  %1567 = load i64, i64* %RBP.i, align 8
  %1568 = add i64 %1567, -156
  %1569 = add i64 %1566, 6
  store i64 %1569, i64* %3, align 8
  %1570 = inttoptr i64 %1568 to i32*
  %1571 = load i32, i32* %1570, align 4
  %1572 = zext i32 %1571 to i64
  store i64 %1572, i64* %RAX.i1585, align 8
  %1573 = add i64 %1567, -152
  %1574 = add i64 %1566, 12
  store i64 %1574, i64* %3, align 8
  %1575 = inttoptr i64 %1573 to i32*
  store i32 %1571, i32* %1575, align 4
  %.pre291 = load i64, i64* %3, align 8
  br label %block_.L_42e162

block_.L_42e162:                                  ; preds = %block_.L_42e156, %block_42e10a
  %1576 = phi i64 [ %.pre291, %block_.L_42e156 ], [ %1437, %block_42e10a ]
  %1577 = load i64, i64* %RBP.i, align 8
  %1578 = add i64 %1577, -152
  %1579 = add i64 %1576, 6
  store i64 %1579, i64* %3, align 8
  %1580 = inttoptr i64 %1578 to i32*
  %1581 = load i32, i32* %1580, align 4
  %1582 = zext i32 %1581 to i64
  store i64 %1582, i64* %RAX.i1585, align 8
  %1583 = sext i32 %1581 to i64
  store i64 %1583, i64* %RCX.i3128, align 8
  %1584 = add i64 %1577, -144
  %1585 = add i64 %1576, 16
  store i64 %1585, i64* %3, align 8
  %1586 = inttoptr i64 %1584 to i64*
  %1587 = load i64, i64* %1586, align 8
  store i64 %1587, i64* %RDX.i5152, align 8
  %1588 = shl nsw i64 %1583, 1
  %1589 = add i64 %1588, %1587
  %1590 = add i64 %1576, 20
  store i64 %1590, i64* %3, align 8
  %1591 = inttoptr i64 %1589 to i16*
  %1592 = load i16, i16* %1591, align 2
  %1593 = zext i16 %1592 to i64
  store i64 %1593, i64* %RAX.i1585, align 8
  %1594 = add i64 %1577, -136
  %1595 = add i64 %1576, 26
  store i64 %1595, i64* %3, align 8
  %1596 = inttoptr i64 %1594 to i32*
  %1597 = load i32, i32* %1596, align 4
  %1598 = zext i16 %1592 to i32
  %1599 = add i32 %1598, %1597
  %1600 = zext i32 %1599 to i64
  store i64 %1600, i64* %RSI.i5212, align 8
  %1601 = icmp ult i32 %1599, %1597
  %1602 = icmp ult i32 %1599, %1598
  %1603 = or i1 %1601, %1602
  %1604 = zext i1 %1603 to i8
  store i8 %1604, i8* %20, align 1
  %1605 = and i32 %1599, 255
  %1606 = tail call i32 @llvm.ctpop.i32(i32 %1605)
  %1607 = trunc i32 %1606 to i8
  %1608 = and i8 %1607, 1
  %1609 = xor i8 %1608, 1
  store i8 %1609, i8* %27, align 1
  %1610 = xor i32 %1598, %1597
  %1611 = xor i32 %1610, %1599
  %1612 = lshr i32 %1611, 4
  %1613 = trunc i32 %1612 to i8
  %1614 = and i8 %1613, 1
  store i8 %1614, i8* %33, align 1
  %1615 = icmp eq i32 %1599, 0
  %1616 = zext i1 %1615 to i8
  store i8 %1616, i8* %36, align 1
  %1617 = lshr i32 %1599, 31
  %1618 = trunc i32 %1617 to i8
  store i8 %1618, i8* %39, align 1
  %1619 = lshr i32 %1597, 31
  %1620 = xor i32 %1617, %1619
  %1621 = add nuw nsw i32 %1620, %1617
  %1622 = icmp eq i32 %1621, 2
  %1623 = zext i1 %1622 to i8
  store i8 %1623, i8* %45, align 1
  %1624 = add i64 %1577, -112
  %1625 = add i64 %1576, 31
  store i64 %1625, i64* %3, align 8
  %1626 = inttoptr i64 %1624 to i32*
  %1627 = load i32, i32* %1626, align 4
  %1628 = sext i32 %1627 to i64
  %1629 = sext i32 %1599 to i64
  %1630 = mul nsw i64 %1629, %1628
  %1631 = trunc i64 %1630 to i32
  %1632 = and i64 %1630, 4294967295
  store i64 %1632, i64* %RAX.i1585, align 8
  %1633 = shl i64 %1630, 32
  %1634 = ashr exact i64 %1633, 32
  %1635 = icmp ne i64 %1634, %1630
  %1636 = zext i1 %1635 to i8
  store i8 %1636, i8* %20, align 1
  %1637 = and i32 %1631, 255
  %1638 = tail call i32 @llvm.ctpop.i32(i32 %1637)
  %1639 = trunc i32 %1638 to i8
  %1640 = and i8 %1639, 1
  %1641 = xor i8 %1640, 1
  store i8 %1641, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  %1642 = lshr i32 %1631, 31
  %1643 = trunc i32 %1642 to i8
  store i8 %1643, i8* %39, align 1
  store i8 %1636, i8* %45, align 1
  %1644 = load i32, i32* bitcast (%G_0x4b8c58_type* @G_0x4b8c58 to i32*), align 8
  %1645 = zext i32 %1644 to i64
  store i64 %1645, i64* %RSI.i5212, align 8
  %1646 = load i64, i64* %RBP.i, align 8
  %1647 = add i64 %1646, -72
  %1648 = add i64 %1576, 45
  store i64 %1648, i64* %3, align 8
  %1649 = inttoptr i64 %1647 to i64*
  %1650 = load i64, i64* %1649, align 8
  store i64 %1650, i64* %RCX.i3128, align 8
  %1651 = add i64 %1646, -44
  %1652 = add i64 %1576, 49
  store i64 %1652, i64* %3, align 8
  %1653 = inttoptr i64 %1651 to i32*
  %1654 = load i32, i32* %1653, align 4
  %1655 = sext i32 %1654 to i64
  store i64 %1655, i64* %RDI.i605, align 8
  %1656 = shl nsw i64 %1655, 3
  %1657 = add i64 %1656, %1650
  %1658 = add i64 %1576, 53
  store i64 %1658, i64* %3, align 8
  %1659 = inttoptr i64 %1657 to i64*
  %1660 = load i64, i64* %1659, align 8
  store i64 %1660, i64* %RCX.i3128, align 8
  %1661 = add i64 %1646, -16
  %1662 = add i64 %1576, 57
  store i64 %1662, i64* %3, align 8
  %1663 = inttoptr i64 %1661 to i64*
  %1664 = load i64, i64* %1663, align 8
  store i64 %1664, i64* %RDI.i605, align 8
  %1665 = add i64 %1664, 6392
  %1666 = add i64 %1576, 64
  store i64 %1666, i64* %3, align 8
  %1667 = inttoptr i64 %1665 to i32*
  %1668 = load i32, i32* %1667, align 4
  %1669 = add i32 %1668, -1
  %1670 = zext i32 %1669 to i64
  store i64 %1670, i64* %600, align 8
  %1671 = icmp eq i32 %1668, 0
  %1672 = zext i1 %1671 to i8
  store i8 %1672, i8* %20, align 1
  %1673 = and i32 %1669, 255
  %1674 = tail call i32 @llvm.ctpop.i32(i32 %1673)
  %1675 = trunc i32 %1674 to i8
  %1676 = and i8 %1675, 1
  %1677 = xor i8 %1676, 1
  store i8 %1677, i8* %27, align 1
  %1678 = xor i32 %1669, %1668
  %1679 = lshr i32 %1678, 4
  %1680 = trunc i32 %1679 to i8
  %1681 = and i8 %1680, 1
  store i8 %1681, i8* %33, align 1
  %1682 = icmp eq i32 %1669, 0
  %1683 = zext i1 %1682 to i8
  store i8 %1683, i8* %36, align 1
  %1684 = lshr i32 %1669, 31
  %1685 = trunc i32 %1684 to i8
  store i8 %1685, i8* %39, align 1
  %1686 = lshr i32 %1668, 31
  %1687 = xor i32 %1684, %1686
  %1688 = add nuw nsw i32 %1687, %1686
  %1689 = icmp eq i32 %1688, 2
  %1690 = zext i1 %1689 to i8
  store i8 %1690, i8* %45, align 1
  %1691 = add i64 %1646, -24
  %1692 = add i64 %1576, 72
  store i64 %1692, i64* %3, align 8
  %1693 = inttoptr i64 %1691 to i32*
  %1694 = load i32, i32* %1693, align 4
  %1695 = add i32 %1694, -1
  %1696 = zext i32 %1695 to i64
  store i64 %1696, i64* %602, align 8
  %1697 = lshr i32 %1695, 31
  %1698 = sub i32 %1669, %1695
  %1699 = icmp ult i32 %1669, %1695
  %1700 = zext i1 %1699 to i8
  store i8 %1700, i8* %20, align 1
  %1701 = and i32 %1698, 255
  %1702 = tail call i32 @llvm.ctpop.i32(i32 %1701)
  %1703 = trunc i32 %1702 to i8
  %1704 = and i8 %1703, 1
  %1705 = xor i8 %1704, 1
  store i8 %1705, i8* %27, align 1
  %1706 = xor i32 %1695, %1669
  %1707 = xor i32 %1706, %1698
  %1708 = lshr i32 %1707, 4
  %1709 = trunc i32 %1708 to i8
  %1710 = and i8 %1709, 1
  store i8 %1710, i8* %33, align 1
  %1711 = icmp eq i32 %1698, 0
  %1712 = zext i1 %1711 to i8
  store i8 %1712, i8* %36, align 1
  %1713 = lshr i32 %1698, 31
  %1714 = trunc i32 %1713 to i8
  store i8 %1714, i8* %39, align 1
  %1715 = xor i32 %1697, %1684
  %1716 = xor i32 %1713, %1684
  %1717 = add nuw nsw i32 %1716, %1715
  %1718 = icmp eq i32 %1717, 2
  %1719 = zext i1 %1718 to i8
  store i8 %1719, i8* %45, align 1
  %1720 = load i64, i64* %RBP.i, align 8
  %1721 = add i64 %1720, -160
  %1722 = load i32, i32* %EAX.i1609, align 4
  %1723 = add i64 %1576, 85
  store i64 %1723, i64* %3, align 8
  %1724 = inttoptr i64 %1721 to i32*
  store i32 %1722, i32* %1724, align 4
  %1725 = load i64, i64* %RBP.i, align 8
  %1726 = add i64 %1725, -164
  %1727 = load i32, i32* %ESI.i5201, align 4
  %1728 = load i64, i64* %3, align 8
  %1729 = add i64 %1728, 6
  store i64 %1729, i64* %3, align 8
  %1730 = inttoptr i64 %1726 to i32*
  store i32 %1727, i32* %1730, align 4
  %1731 = load i64, i64* %RBP.i, align 8
  %1732 = add i64 %1731, -176
  %1733 = load i64, i64* %RCX.i3128, align 8
  %1734 = load i64, i64* %3, align 8
  %1735 = add i64 %1734, 7
  store i64 %1735, i64* %3, align 8
  %1736 = inttoptr i64 %1732 to i64*
  store i64 %1733, i64* %1736, align 8
  %1737 = load i64, i64* %3, align 8
  %1738 = load i8, i8* %39, align 1
  %1739 = icmp ne i8 %1738, 0
  %1740 = load i8, i8* %45, align 1
  %1741 = icmp ne i8 %1740, 0
  %1742 = xor i1 %1739, %1741
  %.v410 = select i1 %1742, i64 6, i64 30
  %1743 = add i64 %1737, %.v410
  store i64 %1743, i64* %3, align 8
  %1744 = load i64, i64* %RBP.i, align 8
  br i1 %1742, label %block_42e1ca, label %block_.L_42e1e2

block_42e1ca:                                     ; preds = %block_.L_42e162
  %1745 = add i64 %1744, -16
  %1746 = add i64 %1743, 4
  store i64 %1746, i64* %3, align 8
  %1747 = inttoptr i64 %1745 to i64*
  %1748 = load i64, i64* %1747, align 8
  store i64 %1748, i64* %RAX.i1585, align 8
  %1749 = add i64 %1748, 6392
  %1750 = add i64 %1743, 10
  store i64 %1750, i64* %3, align 8
  %1751 = inttoptr i64 %1749 to i32*
  %1752 = load i32, i32* %1751, align 4
  %1753 = add i32 %1752, -1
  %1754 = zext i32 %1753 to i64
  store i64 %1754, i64* %RCX.i3128, align 8
  %1755 = icmp eq i32 %1752, 0
  %1756 = zext i1 %1755 to i8
  store i8 %1756, i8* %20, align 1
  %1757 = and i32 %1753, 255
  %1758 = tail call i32 @llvm.ctpop.i32(i32 %1757)
  %1759 = trunc i32 %1758 to i8
  %1760 = and i8 %1759, 1
  %1761 = xor i8 %1760, 1
  store i8 %1761, i8* %27, align 1
  %1762 = xor i32 %1753, %1752
  %1763 = lshr i32 %1762, 4
  %1764 = trunc i32 %1763 to i8
  %1765 = and i8 %1764, 1
  store i8 %1765, i8* %33, align 1
  %1766 = icmp eq i32 %1753, 0
  %1767 = zext i1 %1766 to i8
  store i8 %1767, i8* %36, align 1
  %1768 = lshr i32 %1753, 31
  %1769 = trunc i32 %1768 to i8
  store i8 %1769, i8* %39, align 1
  %1770 = lshr i32 %1752, 31
  %1771 = xor i32 %1768, %1770
  %1772 = add nuw nsw i32 %1771, %1770
  %1773 = icmp eq i32 %1772, 2
  %1774 = zext i1 %1773 to i8
  store i8 %1774, i8* %45, align 1
  %1775 = add i64 %1744, -180
  %1776 = add i64 %1743, 19
  store i64 %1776, i64* %3, align 8
  %1777 = inttoptr i64 %1775 to i32*
  store i32 %1753, i32* %1777, align 4
  %1778 = load i64, i64* %3, align 8
  %1779 = add i64 %1778, 17
  store i64 %1779, i64* %3, align 8
  br label %block_.L_42e1ee

block_.L_42e1e2:                                  ; preds = %block_.L_42e162
  %1780 = add i64 %1744, -24
  %1781 = add i64 %1743, 3
  store i64 %1781, i64* %3, align 8
  %1782 = inttoptr i64 %1780 to i32*
  %1783 = load i32, i32* %1782, align 4
  %1784 = add i32 %1783, -1
  %1785 = zext i32 %1784 to i64
  store i64 %1785, i64* %RAX.i1585, align 8
  %1786 = icmp eq i32 %1783, 0
  %1787 = zext i1 %1786 to i8
  store i8 %1787, i8* %20, align 1
  %1788 = and i32 %1784, 255
  %1789 = tail call i32 @llvm.ctpop.i32(i32 %1788)
  %1790 = trunc i32 %1789 to i8
  %1791 = and i8 %1790, 1
  %1792 = xor i8 %1791, 1
  store i8 %1792, i8* %27, align 1
  %1793 = xor i32 %1784, %1783
  %1794 = lshr i32 %1793, 4
  %1795 = trunc i32 %1794 to i8
  %1796 = and i8 %1795, 1
  store i8 %1796, i8* %33, align 1
  %1797 = icmp eq i32 %1784, 0
  %1798 = zext i1 %1797 to i8
  store i8 %1798, i8* %36, align 1
  %1799 = lshr i32 %1784, 31
  %1800 = trunc i32 %1799 to i8
  store i8 %1800, i8* %39, align 1
  %1801 = lshr i32 %1783, 31
  %1802 = xor i32 %1799, %1801
  %1803 = add nuw nsw i32 %1802, %1801
  %1804 = icmp eq i32 %1803, 2
  %1805 = zext i1 %1804 to i8
  store i8 %1805, i8* %45, align 1
  %1806 = add i64 %1744, -180
  %1807 = add i64 %1743, 12
  store i64 %1807, i64* %3, align 8
  %1808 = inttoptr i64 %1806 to i32*
  store i32 %1784, i32* %1808, align 4
  %.pre292 = load i64, i64* %3, align 8
  br label %block_.L_42e1ee

block_.L_42e1ee:                                  ; preds = %block_.L_42e1e2, %block_42e1ca
  %1809 = phi i64 [ %.pre292, %block_.L_42e1e2 ], [ %1779, %block_42e1ca ]
  %1810 = load i64, i64* %RBP.i, align 8
  %1811 = add i64 %1810, -180
  %1812 = add i64 %1809, 6
  store i64 %1812, i64* %3, align 8
  %1813 = inttoptr i64 %1811 to i32*
  %1814 = load i32, i32* %1813, align 4
  %1815 = zext i32 %1814 to i64
  store i64 %1815, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %1816 = sub i32 0, %1814
  %1817 = icmp ne i32 %1814, 0
  %1818 = zext i1 %1817 to i8
  store i8 %1818, i8* %20, align 1
  %1819 = and i32 %1816, 255
  %1820 = tail call i32 @llvm.ctpop.i32(i32 %1819)
  %1821 = trunc i32 %1820 to i8
  %1822 = and i8 %1821, 1
  %1823 = xor i8 %1822, 1
  store i8 %1823, i8* %27, align 1
  %1824 = xor i32 %1814, %1816
  %1825 = lshr i32 %1824, 4
  %1826 = trunc i32 %1825 to i8
  %1827 = and i8 %1826, 1
  store i8 %1827, i8* %33, align 1
  %1828 = icmp eq i32 %1814, 0
  %1829 = zext i1 %1828 to i8
  store i8 %1829, i8* %36, align 1
  %1830 = lshr i32 %1816, 31
  %1831 = trunc i32 %1830 to i8
  store i8 %1831, i8* %39, align 1
  %1832 = lshr i32 %1814, 31
  %1833 = add nuw nsw i32 %1830, %1832
  %1834 = icmp eq i32 %1833, 2
  %1835 = zext i1 %1834 to i8
  store i8 %1835, i8* %45, align 1
  %1836 = icmp ne i8 %1831, 0
  %1837 = xor i1 %1836, %1834
  %1838 = or i1 %1828, %1837
  %.v351 = select i1 %1838, i64 29, i64 16
  %1839 = add i64 %1809, %.v351
  store i64 %1839, i64* %3, align 8
  br i1 %1838, label %block_.L_42e20b, label %block_42e1fe

block_42e1fe:                                     ; preds = %block_.L_42e1ee
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %1840 = add i64 %1810, -184
  %1841 = add i64 %1839, 8
  store i64 %1841, i64* %3, align 8
  %1842 = inttoptr i64 %1840 to i32*
  store i32 0, i32* %1842, align 4
  %1843 = load i64, i64* %3, align 8
  %1844 = add i64 %1843, 80
  store i64 %1844, i64* %3, align 8
  br label %block_.L_42e256

block_.L_42e20b:                                  ; preds = %block_.L_42e1ee
  %1845 = add i64 %1810, -16
  %1846 = add i64 %1839, 4
  store i64 %1846, i64* %3, align 8
  %1847 = inttoptr i64 %1845 to i64*
  %1848 = load i64, i64* %1847, align 8
  store i64 %1848, i64* %RAX.i1585, align 8
  %1849 = add i64 %1848, 6392
  %1850 = add i64 %1839, 10
  store i64 %1850, i64* %3, align 8
  %1851 = inttoptr i64 %1849 to i32*
  %1852 = load i32, i32* %1851, align 4
  %1853 = add i32 %1852, -1
  %1854 = zext i32 %1853 to i64
  store i64 %1854, i64* %RCX.i3128, align 8
  %1855 = icmp eq i32 %1852, 0
  %1856 = zext i1 %1855 to i8
  store i8 %1856, i8* %20, align 1
  %1857 = and i32 %1853, 255
  %1858 = tail call i32 @llvm.ctpop.i32(i32 %1857)
  %1859 = trunc i32 %1858 to i8
  %1860 = and i8 %1859, 1
  %1861 = xor i8 %1860, 1
  store i8 %1861, i8* %27, align 1
  %1862 = xor i32 %1853, %1852
  %1863 = lshr i32 %1862, 4
  %1864 = trunc i32 %1863 to i8
  %1865 = and i8 %1864, 1
  store i8 %1865, i8* %33, align 1
  %1866 = icmp eq i32 %1853, 0
  %1867 = zext i1 %1866 to i8
  store i8 %1867, i8* %36, align 1
  %1868 = lshr i32 %1853, 31
  %1869 = trunc i32 %1868 to i8
  store i8 %1869, i8* %39, align 1
  %1870 = lshr i32 %1852, 31
  %1871 = xor i32 %1868, %1870
  %1872 = add nuw nsw i32 %1871, %1870
  %1873 = icmp eq i32 %1872, 2
  %1874 = zext i1 %1873 to i8
  store i8 %1874, i8* %45, align 1
  %1875 = add i64 %1810, -24
  %1876 = add i64 %1839, 16
  store i64 %1876, i64* %3, align 8
  %1877 = inttoptr i64 %1875 to i32*
  %1878 = load i32, i32* %1877, align 4
  %1879 = add i32 %1878, -1
  %1880 = zext i32 %1879 to i64
  store i64 %1880, i64* %RDX.i5152, align 8
  %1881 = lshr i32 %1879, 31
  %1882 = sub i32 %1853, %1879
  %1883 = icmp ult i32 %1853, %1879
  %1884 = zext i1 %1883 to i8
  store i8 %1884, i8* %20, align 1
  %1885 = and i32 %1882, 255
  %1886 = tail call i32 @llvm.ctpop.i32(i32 %1885)
  %1887 = trunc i32 %1886 to i8
  %1888 = and i8 %1887, 1
  %1889 = xor i8 %1888, 1
  store i8 %1889, i8* %27, align 1
  %1890 = xor i32 %1879, %1853
  %1891 = xor i32 %1890, %1882
  %1892 = lshr i32 %1891, 4
  %1893 = trunc i32 %1892 to i8
  %1894 = and i8 %1893, 1
  store i8 %1894, i8* %33, align 1
  %1895 = icmp eq i32 %1882, 0
  %1896 = zext i1 %1895 to i8
  store i8 %1896, i8* %36, align 1
  %1897 = lshr i32 %1882, 31
  %1898 = trunc i32 %1897 to i8
  store i8 %1898, i8* %39, align 1
  %1899 = xor i32 %1881, %1868
  %1900 = xor i32 %1897, %1868
  %1901 = add nuw nsw i32 %1900, %1899
  %1902 = icmp eq i32 %1901, 2
  %1903 = zext i1 %1902 to i8
  store i8 %1903, i8* %45, align 1
  %1904 = icmp ne i8 %1898, 0
  %1905 = xor i1 %1904, %1902
  %.v360 = select i1 %1905, i64 27, i64 51
  %1906 = add i64 %1839, %.v360
  store i64 %1906, i64* %3, align 8
  %1907 = load i64, i64* %RBP.i, align 8
  br i1 %1905, label %block_42e226, label %block_.L_42e23e

block_42e226:                                     ; preds = %block_.L_42e20b
  %1908 = add i64 %1907, -16
  %1909 = add i64 %1906, 4
  store i64 %1909, i64* %3, align 8
  %1910 = inttoptr i64 %1908 to i64*
  %1911 = load i64, i64* %1910, align 8
  store i64 %1911, i64* %RAX.i1585, align 8
  %1912 = add i64 %1911, 6392
  %1913 = add i64 %1906, 10
  store i64 %1913, i64* %3, align 8
  %1914 = inttoptr i64 %1912 to i32*
  %1915 = load i32, i32* %1914, align 4
  %1916 = add i32 %1915, -1
  %1917 = zext i32 %1916 to i64
  store i64 %1917, i64* %RCX.i3128, align 8
  %1918 = icmp eq i32 %1915, 0
  %1919 = zext i1 %1918 to i8
  store i8 %1919, i8* %20, align 1
  %1920 = and i32 %1916, 255
  %1921 = tail call i32 @llvm.ctpop.i32(i32 %1920)
  %1922 = trunc i32 %1921 to i8
  %1923 = and i8 %1922, 1
  %1924 = xor i8 %1923, 1
  store i8 %1924, i8* %27, align 1
  %1925 = xor i32 %1916, %1915
  %1926 = lshr i32 %1925, 4
  %1927 = trunc i32 %1926 to i8
  %1928 = and i8 %1927, 1
  store i8 %1928, i8* %33, align 1
  %1929 = icmp eq i32 %1916, 0
  %1930 = zext i1 %1929 to i8
  store i8 %1930, i8* %36, align 1
  %1931 = lshr i32 %1916, 31
  %1932 = trunc i32 %1931 to i8
  store i8 %1932, i8* %39, align 1
  %1933 = lshr i32 %1915, 31
  %1934 = xor i32 %1931, %1933
  %1935 = add nuw nsw i32 %1934, %1933
  %1936 = icmp eq i32 %1935, 2
  %1937 = zext i1 %1936 to i8
  store i8 %1937, i8* %45, align 1
  %1938 = add i64 %1907, -188
  %1939 = add i64 %1906, 19
  store i64 %1939, i64* %3, align 8
  %1940 = inttoptr i64 %1938 to i32*
  store i32 %1916, i32* %1940, align 4
  %1941 = load i64, i64* %3, align 8
  %1942 = add i64 %1941, 17
  store i64 %1942, i64* %3, align 8
  br label %block_.L_42e24a

block_.L_42e23e:                                  ; preds = %block_.L_42e20b
  %1943 = add i64 %1907, -24
  %1944 = add i64 %1906, 3
  store i64 %1944, i64* %3, align 8
  %1945 = inttoptr i64 %1943 to i32*
  %1946 = load i32, i32* %1945, align 4
  %1947 = add i32 %1946, -1
  %1948 = zext i32 %1947 to i64
  store i64 %1948, i64* %RAX.i1585, align 8
  %1949 = icmp eq i32 %1946, 0
  %1950 = zext i1 %1949 to i8
  store i8 %1950, i8* %20, align 1
  %1951 = and i32 %1947, 255
  %1952 = tail call i32 @llvm.ctpop.i32(i32 %1951)
  %1953 = trunc i32 %1952 to i8
  %1954 = and i8 %1953, 1
  %1955 = xor i8 %1954, 1
  store i8 %1955, i8* %27, align 1
  %1956 = xor i32 %1947, %1946
  %1957 = lshr i32 %1956, 4
  %1958 = trunc i32 %1957 to i8
  %1959 = and i8 %1958, 1
  store i8 %1959, i8* %33, align 1
  %1960 = icmp eq i32 %1947, 0
  %1961 = zext i1 %1960 to i8
  store i8 %1961, i8* %36, align 1
  %1962 = lshr i32 %1947, 31
  %1963 = trunc i32 %1962 to i8
  store i8 %1963, i8* %39, align 1
  %1964 = lshr i32 %1946, 31
  %1965 = xor i32 %1962, %1964
  %1966 = add nuw nsw i32 %1965, %1964
  %1967 = icmp eq i32 %1966, 2
  %1968 = zext i1 %1967 to i8
  store i8 %1968, i8* %45, align 1
  %1969 = add i64 %1907, -188
  %1970 = add i64 %1906, 12
  store i64 %1970, i64* %3, align 8
  %1971 = inttoptr i64 %1969 to i32*
  store i32 %1947, i32* %1971, align 4
  %.pre293 = load i64, i64* %3, align 8
  br label %block_.L_42e24a

block_.L_42e24a:                                  ; preds = %block_.L_42e23e, %block_42e226
  %1972 = phi i64 [ %.pre293, %block_.L_42e23e ], [ %1942, %block_42e226 ]
  %1973 = load i64, i64* %RBP.i, align 8
  %1974 = add i64 %1973, -188
  %1975 = add i64 %1972, 6
  store i64 %1975, i64* %3, align 8
  %1976 = inttoptr i64 %1974 to i32*
  %1977 = load i32, i32* %1976, align 4
  %1978 = zext i32 %1977 to i64
  store i64 %1978, i64* %RAX.i1585, align 8
  %1979 = add i64 %1973, -184
  %1980 = add i64 %1972, 12
  store i64 %1980, i64* %3, align 8
  %1981 = inttoptr i64 %1979 to i32*
  store i32 %1977, i32* %1981, align 4
  %.pre294 = load i64, i64* %3, align 8
  br label %block_.L_42e256

block_.L_42e256:                                  ; preds = %block_.L_42e24a, %block_42e1fe
  %1982 = phi i64 [ %.pre294, %block_.L_42e24a ], [ %1844, %block_42e1fe ]
  %1983 = load i64, i64* %RBP.i, align 8
  %1984 = add i64 %1983, -184
  %1985 = add i64 %1982, 6
  store i64 %1985, i64* %3, align 8
  %1986 = inttoptr i64 %1984 to i32*
  %1987 = load i32, i32* %1986, align 4
  %1988 = zext i32 %1987 to i64
  store i64 %1988, i64* %RAX.i1585, align 8
  %1989 = sext i32 %1987 to i64
  store i64 %1989, i64* %RCX.i3128, align 8
  %1990 = add i64 %1983, -176
  %1991 = add i64 %1982, 16
  store i64 %1991, i64* %3, align 8
  %1992 = inttoptr i64 %1990 to i64*
  %1993 = load i64, i64* %1992, align 8
  store i64 %1993, i64* %RDX.i5152, align 8
  %1994 = shl nsw i64 %1989, 1
  %1995 = add i64 %1994, %1993
  %1996 = add i64 %1982, 20
  store i64 %1996, i64* %3, align 8
  %1997 = inttoptr i64 %1995 to i16*
  %1998 = load i16, i16* %1997, align 2
  %1999 = zext i16 %1998 to i64
  store i64 %1999, i64* %RAX.i1585, align 8
  %2000 = add i64 %1983, -72
  %2001 = add i64 %1982, 24
  store i64 %2001, i64* %3, align 8
  %2002 = inttoptr i64 %2000 to i64*
  %2003 = load i64, i64* %2002, align 8
  store i64 %2003, i64* %RCX.i3128, align 8
  %2004 = add i64 %1983, -44
  %2005 = add i64 %1982, 28
  store i64 %2005, i64* %3, align 8
  %2006 = inttoptr i64 %2004 to i32*
  %2007 = load i32, i32* %2006, align 4
  %2008 = sext i32 %2007 to i64
  store i64 %2008, i64* %RSI.i5212, align 8
  %2009 = shl nsw i64 %2008, 3
  %2010 = add i64 %2009, %2003
  %2011 = add i64 %1982, 32
  store i64 %2011, i64* %3, align 8
  %2012 = inttoptr i64 %2010 to i64*
  %2013 = load i64, i64* %2012, align 8
  store i64 %2013, i64* %RCX.i3128, align 8
  %2014 = add i64 %1983, -16
  %2015 = add i64 %1982, 36
  store i64 %2015, i64* %3, align 8
  %2016 = inttoptr i64 %2014 to i64*
  %2017 = load i64, i64* %2016, align 8
  store i64 %2017, i64* %RSI.i5212, align 8
  %2018 = add i64 %2017, 6392
  %2019 = add i64 %1982, 42
  store i64 %2019, i64* %3, align 8
  %2020 = inttoptr i64 %2018 to i32*
  %2021 = load i32, i32* %2020, align 4
  %2022 = add i32 %2021, -1
  %2023 = zext i32 %2022 to i64
  store i64 %2023, i64* %RDI.i605, align 8
  %2024 = icmp eq i32 %2021, 0
  %2025 = zext i1 %2024 to i8
  store i8 %2025, i8* %20, align 1
  %2026 = and i32 %2022, 255
  %2027 = tail call i32 @llvm.ctpop.i32(i32 %2026)
  %2028 = trunc i32 %2027 to i8
  %2029 = and i8 %2028, 1
  %2030 = xor i8 %2029, 1
  store i8 %2030, i8* %27, align 1
  %2031 = xor i32 %2022, %2021
  %2032 = lshr i32 %2031, 4
  %2033 = trunc i32 %2032 to i8
  %2034 = and i8 %2033, 1
  store i8 %2034, i8* %33, align 1
  %2035 = icmp eq i32 %2022, 0
  %2036 = zext i1 %2035 to i8
  store i8 %2036, i8* %36, align 1
  %2037 = lshr i32 %2022, 31
  %2038 = trunc i32 %2037 to i8
  store i8 %2038, i8* %39, align 1
  %2039 = lshr i32 %2021, 31
  %2040 = xor i32 %2037, %2039
  %2041 = add nuw nsw i32 %2040, %2039
  %2042 = icmp eq i32 %2041, 2
  %2043 = zext i1 %2042 to i8
  store i8 %2043, i8* %45, align 1
  %2044 = add i64 %1983, -24
  %2045 = add i64 %1982, 49
  store i64 %2045, i64* %3, align 8
  %2046 = inttoptr i64 %2044 to i32*
  %2047 = load i32, i32* %2046, align 4
  %2048 = add i32 %2047, 2
  %2049 = zext i32 %2048 to i64
  store i64 %2049, i64* %600, align 8
  %2050 = lshr i32 %2048, 31
  %2051 = sub i32 %2022, %2048
  %2052 = icmp ult i32 %2022, %2048
  %2053 = zext i1 %2052 to i8
  store i8 %2053, i8* %20, align 1
  %2054 = and i32 %2051, 255
  %2055 = tail call i32 @llvm.ctpop.i32(i32 %2054)
  %2056 = trunc i32 %2055 to i8
  %2057 = and i8 %2056, 1
  %2058 = xor i8 %2057, 1
  store i8 %2058, i8* %27, align 1
  %2059 = xor i32 %2048, %2022
  %2060 = xor i32 %2059, %2051
  %2061 = lshr i32 %2060, 4
  %2062 = trunc i32 %2061 to i8
  %2063 = and i8 %2062, 1
  store i8 %2063, i8* %33, align 1
  %2064 = icmp eq i32 %2051, 0
  %2065 = zext i1 %2064 to i8
  store i8 %2065, i8* %36, align 1
  %2066 = lshr i32 %2051, 31
  %2067 = trunc i32 %2066 to i8
  store i8 %2067, i8* %39, align 1
  %2068 = xor i32 %2050, %2037
  %2069 = xor i32 %2066, %2037
  %2070 = add nuw nsw i32 %2069, %2068
  %2071 = icmp eq i32 %2070, 2
  %2072 = zext i1 %2071 to i8
  store i8 %2072, i8* %45, align 1
  %2073 = load i64, i64* %RBP.i, align 8
  %2074 = add i64 %2073, -192
  %2075 = load i32, i32* %EAX.i1609, align 4
  %2076 = add i64 %1982, 62
  store i64 %2076, i64* %3, align 8
  %2077 = inttoptr i64 %2074 to i32*
  store i32 %2075, i32* %2077, align 4
  %2078 = load i64, i64* %RBP.i, align 8
  %2079 = add i64 %2078, -200
  %2080 = load i64, i64* %RCX.i3128, align 8
  %2081 = load i64, i64* %3, align 8
  %2082 = add i64 %2081, 7
  store i64 %2082, i64* %3, align 8
  %2083 = inttoptr i64 %2079 to i64*
  store i64 %2080, i64* %2083, align 8
  %2084 = load i64, i64* %3, align 8
  %2085 = load i8, i8* %39, align 1
  %2086 = icmp ne i8 %2085, 0
  %2087 = load i8, i8* %45, align 1
  %2088 = icmp ne i8 %2087, 0
  %2089 = xor i1 %2086, %2088
  %.v411 = select i1 %2089, i64 6, i64 30
  %2090 = add i64 %2084, %.v411
  store i64 %2090, i64* %3, align 8
  %2091 = load i64, i64* %RBP.i, align 8
  br i1 %2089, label %block_42e2a1, label %block_.L_42e2b9

block_42e2a1:                                     ; preds = %block_.L_42e256
  %2092 = add i64 %2091, -16
  %2093 = add i64 %2090, 4
  store i64 %2093, i64* %3, align 8
  %2094 = inttoptr i64 %2092 to i64*
  %2095 = load i64, i64* %2094, align 8
  store i64 %2095, i64* %RAX.i1585, align 8
  %2096 = add i64 %2095, 6392
  %2097 = add i64 %2090, 10
  store i64 %2097, i64* %3, align 8
  %2098 = inttoptr i64 %2096 to i32*
  %2099 = load i32, i32* %2098, align 4
  %2100 = add i32 %2099, -1
  %2101 = zext i32 %2100 to i64
  store i64 %2101, i64* %RCX.i3128, align 8
  %2102 = icmp eq i32 %2099, 0
  %2103 = zext i1 %2102 to i8
  store i8 %2103, i8* %20, align 1
  %2104 = and i32 %2100, 255
  %2105 = tail call i32 @llvm.ctpop.i32(i32 %2104)
  %2106 = trunc i32 %2105 to i8
  %2107 = and i8 %2106, 1
  %2108 = xor i8 %2107, 1
  store i8 %2108, i8* %27, align 1
  %2109 = xor i32 %2100, %2099
  %2110 = lshr i32 %2109, 4
  %2111 = trunc i32 %2110 to i8
  %2112 = and i8 %2111, 1
  store i8 %2112, i8* %33, align 1
  %2113 = icmp eq i32 %2100, 0
  %2114 = zext i1 %2113 to i8
  store i8 %2114, i8* %36, align 1
  %2115 = lshr i32 %2100, 31
  %2116 = trunc i32 %2115 to i8
  store i8 %2116, i8* %39, align 1
  %2117 = lshr i32 %2099, 31
  %2118 = xor i32 %2115, %2117
  %2119 = add nuw nsw i32 %2118, %2117
  %2120 = icmp eq i32 %2119, 2
  %2121 = zext i1 %2120 to i8
  store i8 %2121, i8* %45, align 1
  %2122 = add i64 %2091, -204
  %2123 = add i64 %2090, 19
  store i64 %2123, i64* %3, align 8
  %2124 = inttoptr i64 %2122 to i32*
  store i32 %2100, i32* %2124, align 4
  %2125 = load i64, i64* %3, align 8
  %2126 = add i64 %2125, 17
  store i64 %2126, i64* %3, align 8
  br label %block_.L_42e2c5

block_.L_42e2b9:                                  ; preds = %block_.L_42e256
  %2127 = add i64 %2091, -24
  %2128 = add i64 %2090, 3
  store i64 %2128, i64* %3, align 8
  %2129 = inttoptr i64 %2127 to i32*
  %2130 = load i32, i32* %2129, align 4
  %2131 = add i32 %2130, 2
  %2132 = zext i32 %2131 to i64
  store i64 %2132, i64* %RAX.i1585, align 8
  %2133 = icmp ugt i32 %2130, -3
  %2134 = zext i1 %2133 to i8
  store i8 %2134, i8* %20, align 1
  %2135 = and i32 %2131, 255
  %2136 = tail call i32 @llvm.ctpop.i32(i32 %2135)
  %2137 = trunc i32 %2136 to i8
  %2138 = and i8 %2137, 1
  %2139 = xor i8 %2138, 1
  store i8 %2139, i8* %27, align 1
  %2140 = xor i32 %2131, %2130
  %2141 = lshr i32 %2140, 4
  %2142 = trunc i32 %2141 to i8
  %2143 = and i8 %2142, 1
  store i8 %2143, i8* %33, align 1
  %2144 = icmp eq i32 %2131, 0
  %2145 = zext i1 %2144 to i8
  store i8 %2145, i8* %36, align 1
  %2146 = lshr i32 %2131, 31
  %2147 = trunc i32 %2146 to i8
  store i8 %2147, i8* %39, align 1
  %2148 = lshr i32 %2130, 31
  %2149 = xor i32 %2146, %2148
  %2150 = add nuw nsw i32 %2149, %2146
  %2151 = icmp eq i32 %2150, 2
  %2152 = zext i1 %2151 to i8
  store i8 %2152, i8* %45, align 1
  %2153 = add i64 %2091, -204
  %2154 = add i64 %2090, 12
  store i64 %2154, i64* %3, align 8
  %2155 = inttoptr i64 %2153 to i32*
  store i32 %2131, i32* %2155, align 4
  %.pre295 = load i64, i64* %3, align 8
  br label %block_.L_42e2c5

block_.L_42e2c5:                                  ; preds = %block_.L_42e2b9, %block_42e2a1
  %2156 = phi i64 [ %.pre295, %block_.L_42e2b9 ], [ %2126, %block_42e2a1 ]
  %2157 = load i64, i64* %RBP.i, align 8
  %2158 = add i64 %2157, -204
  %2159 = add i64 %2156, 6
  store i64 %2159, i64* %3, align 8
  %2160 = inttoptr i64 %2158 to i32*
  %2161 = load i32, i32* %2160, align 4
  %2162 = zext i32 %2161 to i64
  store i64 %2162, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %2163 = sub i32 0, %2161
  %2164 = icmp ne i32 %2161, 0
  %2165 = zext i1 %2164 to i8
  store i8 %2165, i8* %20, align 1
  %2166 = and i32 %2163, 255
  %2167 = tail call i32 @llvm.ctpop.i32(i32 %2166)
  %2168 = trunc i32 %2167 to i8
  %2169 = and i8 %2168, 1
  %2170 = xor i8 %2169, 1
  store i8 %2170, i8* %27, align 1
  %2171 = xor i32 %2161, %2163
  %2172 = lshr i32 %2171, 4
  %2173 = trunc i32 %2172 to i8
  %2174 = and i8 %2173, 1
  store i8 %2174, i8* %33, align 1
  %2175 = icmp eq i32 %2161, 0
  %2176 = zext i1 %2175 to i8
  store i8 %2176, i8* %36, align 1
  %2177 = lshr i32 %2163, 31
  %2178 = trunc i32 %2177 to i8
  store i8 %2178, i8* %39, align 1
  %2179 = lshr i32 %2161, 31
  %2180 = add nuw nsw i32 %2177, %2179
  %2181 = icmp eq i32 %2180, 2
  %2182 = zext i1 %2181 to i8
  store i8 %2182, i8* %45, align 1
  %2183 = icmp ne i8 %2178, 0
  %2184 = xor i1 %2183, %2181
  %2185 = or i1 %2175, %2184
  %.v352 = select i1 %2185, i64 29, i64 16
  %2186 = add i64 %2156, %.v352
  store i64 %2186, i64* %3, align 8
  br i1 %2185, label %block_.L_42e2e2, label %block_42e2d5

block_42e2d5:                                     ; preds = %block_.L_42e2c5
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %2187 = add i64 %2157, -208
  %2188 = add i64 %2186, 8
  store i64 %2188, i64* %3, align 8
  %2189 = inttoptr i64 %2187 to i32*
  store i32 0, i32* %2189, align 4
  %2190 = load i64, i64* %3, align 8
  %2191 = add i64 %2190, 80
  store i64 %2191, i64* %3, align 8
  br label %block_.L_42e32d

block_.L_42e2e2:                                  ; preds = %block_.L_42e2c5
  %2192 = add i64 %2157, -16
  %2193 = add i64 %2186, 4
  store i64 %2193, i64* %3, align 8
  %2194 = inttoptr i64 %2192 to i64*
  %2195 = load i64, i64* %2194, align 8
  store i64 %2195, i64* %RAX.i1585, align 8
  %2196 = add i64 %2195, 6392
  %2197 = add i64 %2186, 10
  store i64 %2197, i64* %3, align 8
  %2198 = inttoptr i64 %2196 to i32*
  %2199 = load i32, i32* %2198, align 4
  %2200 = add i32 %2199, -1
  %2201 = zext i32 %2200 to i64
  store i64 %2201, i64* %RCX.i3128, align 8
  %2202 = icmp eq i32 %2199, 0
  %2203 = zext i1 %2202 to i8
  store i8 %2203, i8* %20, align 1
  %2204 = and i32 %2200, 255
  %2205 = tail call i32 @llvm.ctpop.i32(i32 %2204)
  %2206 = trunc i32 %2205 to i8
  %2207 = and i8 %2206, 1
  %2208 = xor i8 %2207, 1
  store i8 %2208, i8* %27, align 1
  %2209 = xor i32 %2200, %2199
  %2210 = lshr i32 %2209, 4
  %2211 = trunc i32 %2210 to i8
  %2212 = and i8 %2211, 1
  store i8 %2212, i8* %33, align 1
  %2213 = icmp eq i32 %2200, 0
  %2214 = zext i1 %2213 to i8
  store i8 %2214, i8* %36, align 1
  %2215 = lshr i32 %2200, 31
  %2216 = trunc i32 %2215 to i8
  store i8 %2216, i8* %39, align 1
  %2217 = lshr i32 %2199, 31
  %2218 = xor i32 %2215, %2217
  %2219 = add nuw nsw i32 %2218, %2217
  %2220 = icmp eq i32 %2219, 2
  %2221 = zext i1 %2220 to i8
  store i8 %2221, i8* %45, align 1
  %2222 = add i64 %2157, -24
  %2223 = add i64 %2186, 16
  store i64 %2223, i64* %3, align 8
  %2224 = inttoptr i64 %2222 to i32*
  %2225 = load i32, i32* %2224, align 4
  %2226 = add i32 %2225, 2
  %2227 = zext i32 %2226 to i64
  store i64 %2227, i64* %RDX.i5152, align 8
  %2228 = lshr i32 %2226, 31
  %2229 = sub i32 %2200, %2226
  %2230 = icmp ult i32 %2200, %2226
  %2231 = zext i1 %2230 to i8
  store i8 %2231, i8* %20, align 1
  %2232 = and i32 %2229, 255
  %2233 = tail call i32 @llvm.ctpop.i32(i32 %2232)
  %2234 = trunc i32 %2233 to i8
  %2235 = and i8 %2234, 1
  %2236 = xor i8 %2235, 1
  store i8 %2236, i8* %27, align 1
  %2237 = xor i32 %2226, %2200
  %2238 = xor i32 %2237, %2229
  %2239 = lshr i32 %2238, 4
  %2240 = trunc i32 %2239 to i8
  %2241 = and i8 %2240, 1
  store i8 %2241, i8* %33, align 1
  %2242 = icmp eq i32 %2229, 0
  %2243 = zext i1 %2242 to i8
  store i8 %2243, i8* %36, align 1
  %2244 = lshr i32 %2229, 31
  %2245 = trunc i32 %2244 to i8
  store i8 %2245, i8* %39, align 1
  %2246 = xor i32 %2228, %2215
  %2247 = xor i32 %2244, %2215
  %2248 = add nuw nsw i32 %2247, %2246
  %2249 = icmp eq i32 %2248, 2
  %2250 = zext i1 %2249 to i8
  store i8 %2250, i8* %45, align 1
  %2251 = icmp ne i8 %2245, 0
  %2252 = xor i1 %2251, %2249
  %.v359 = select i1 %2252, i64 27, i64 51
  %2253 = add i64 %2186, %.v359
  store i64 %2253, i64* %3, align 8
  %2254 = load i64, i64* %RBP.i, align 8
  br i1 %2252, label %block_42e2fd, label %block_.L_42e315

block_42e2fd:                                     ; preds = %block_.L_42e2e2
  %2255 = add i64 %2254, -16
  %2256 = add i64 %2253, 4
  store i64 %2256, i64* %3, align 8
  %2257 = inttoptr i64 %2255 to i64*
  %2258 = load i64, i64* %2257, align 8
  store i64 %2258, i64* %RAX.i1585, align 8
  %2259 = add i64 %2258, 6392
  %2260 = add i64 %2253, 10
  store i64 %2260, i64* %3, align 8
  %2261 = inttoptr i64 %2259 to i32*
  %2262 = load i32, i32* %2261, align 4
  %2263 = add i32 %2262, -1
  %2264 = zext i32 %2263 to i64
  store i64 %2264, i64* %RCX.i3128, align 8
  %2265 = icmp eq i32 %2262, 0
  %2266 = zext i1 %2265 to i8
  store i8 %2266, i8* %20, align 1
  %2267 = and i32 %2263, 255
  %2268 = tail call i32 @llvm.ctpop.i32(i32 %2267)
  %2269 = trunc i32 %2268 to i8
  %2270 = and i8 %2269, 1
  %2271 = xor i8 %2270, 1
  store i8 %2271, i8* %27, align 1
  %2272 = xor i32 %2263, %2262
  %2273 = lshr i32 %2272, 4
  %2274 = trunc i32 %2273 to i8
  %2275 = and i8 %2274, 1
  store i8 %2275, i8* %33, align 1
  %2276 = icmp eq i32 %2263, 0
  %2277 = zext i1 %2276 to i8
  store i8 %2277, i8* %36, align 1
  %2278 = lshr i32 %2263, 31
  %2279 = trunc i32 %2278 to i8
  store i8 %2279, i8* %39, align 1
  %2280 = lshr i32 %2262, 31
  %2281 = xor i32 %2278, %2280
  %2282 = add nuw nsw i32 %2281, %2280
  %2283 = icmp eq i32 %2282, 2
  %2284 = zext i1 %2283 to i8
  store i8 %2284, i8* %45, align 1
  %2285 = add i64 %2254, -212
  %2286 = add i64 %2253, 19
  store i64 %2286, i64* %3, align 8
  %2287 = inttoptr i64 %2285 to i32*
  store i32 %2263, i32* %2287, align 4
  %2288 = load i64, i64* %3, align 8
  %2289 = add i64 %2288, 17
  store i64 %2289, i64* %3, align 8
  br label %block_.L_42e321

block_.L_42e315:                                  ; preds = %block_.L_42e2e2
  %2290 = add i64 %2254, -24
  %2291 = add i64 %2253, 3
  store i64 %2291, i64* %3, align 8
  %2292 = inttoptr i64 %2290 to i32*
  %2293 = load i32, i32* %2292, align 4
  %2294 = add i32 %2293, 2
  %2295 = zext i32 %2294 to i64
  store i64 %2295, i64* %RAX.i1585, align 8
  %2296 = icmp ugt i32 %2293, -3
  %2297 = zext i1 %2296 to i8
  store i8 %2297, i8* %20, align 1
  %2298 = and i32 %2294, 255
  %2299 = tail call i32 @llvm.ctpop.i32(i32 %2298)
  %2300 = trunc i32 %2299 to i8
  %2301 = and i8 %2300, 1
  %2302 = xor i8 %2301, 1
  store i8 %2302, i8* %27, align 1
  %2303 = xor i32 %2294, %2293
  %2304 = lshr i32 %2303, 4
  %2305 = trunc i32 %2304 to i8
  %2306 = and i8 %2305, 1
  store i8 %2306, i8* %33, align 1
  %2307 = icmp eq i32 %2294, 0
  %2308 = zext i1 %2307 to i8
  store i8 %2308, i8* %36, align 1
  %2309 = lshr i32 %2294, 31
  %2310 = trunc i32 %2309 to i8
  store i8 %2310, i8* %39, align 1
  %2311 = lshr i32 %2293, 31
  %2312 = xor i32 %2309, %2311
  %2313 = add nuw nsw i32 %2312, %2309
  %2314 = icmp eq i32 %2313, 2
  %2315 = zext i1 %2314 to i8
  store i8 %2315, i8* %45, align 1
  %2316 = add i64 %2254, -212
  %2317 = add i64 %2253, 12
  store i64 %2317, i64* %3, align 8
  %2318 = inttoptr i64 %2316 to i32*
  store i32 %2294, i32* %2318, align 4
  %.pre296 = load i64, i64* %3, align 8
  br label %block_.L_42e321

block_.L_42e321:                                  ; preds = %block_.L_42e315, %block_42e2fd
  %2319 = phi i64 [ %.pre296, %block_.L_42e315 ], [ %2289, %block_42e2fd ]
  %2320 = load i64, i64* %RBP.i, align 8
  %2321 = add i64 %2320, -212
  %2322 = add i64 %2319, 6
  store i64 %2322, i64* %3, align 8
  %2323 = inttoptr i64 %2321 to i32*
  %2324 = load i32, i32* %2323, align 4
  %2325 = zext i32 %2324 to i64
  store i64 %2325, i64* %RAX.i1585, align 8
  %2326 = add i64 %2320, -208
  %2327 = add i64 %2319, 12
  store i64 %2327, i64* %3, align 8
  %2328 = inttoptr i64 %2326 to i32*
  store i32 %2324, i32* %2328, align 4
  %.pre297 = load i64, i64* %3, align 8
  br label %block_.L_42e32d

block_.L_42e32d:                                  ; preds = %block_.L_42e321, %block_42e2d5
  %2329 = phi i64 [ %.pre297, %block_.L_42e321 ], [ %2191, %block_42e2d5 ]
  %2330 = load i64, i64* %RBP.i, align 8
  %2331 = add i64 %2330, -208
  %2332 = add i64 %2329, 6
  store i64 %2332, i64* %3, align 8
  %2333 = inttoptr i64 %2331 to i32*
  %2334 = load i32, i32* %2333, align 4
  %2335 = zext i32 %2334 to i64
  store i64 %2335, i64* %RAX.i1585, align 8
  %2336 = sext i32 %2334 to i64
  store i64 %2336, i64* %RCX.i3128, align 8
  %2337 = add i64 %2330, -200
  %2338 = add i64 %2329, 16
  store i64 %2338, i64* %3, align 8
  %2339 = inttoptr i64 %2337 to i64*
  %2340 = load i64, i64* %2339, align 8
  store i64 %2340, i64* %RDX.i5152, align 8
  %2341 = shl nsw i64 %2336, 1
  %2342 = add i64 %2341, %2340
  %2343 = add i64 %2329, 20
  store i64 %2343, i64* %3, align 8
  %2344 = inttoptr i64 %2342 to i16*
  %2345 = load i16, i16* %2344, align 2
  %2346 = zext i16 %2345 to i64
  store i64 %2346, i64* %RAX.i1585, align 8
  %2347 = add i64 %2330, -192
  %2348 = add i64 %2329, 26
  store i64 %2348, i64* %3, align 8
  %2349 = inttoptr i64 %2347 to i32*
  %2350 = load i32, i32* %2349, align 4
  %2351 = zext i16 %2345 to i32
  %2352 = add i32 %2351, %2350
  %2353 = zext i32 %2352 to i64
  store i64 %2353, i64* %RSI.i5212, align 8
  %2354 = icmp ult i32 %2352, %2350
  %2355 = icmp ult i32 %2352, %2351
  %2356 = or i1 %2354, %2355
  %2357 = zext i1 %2356 to i8
  store i8 %2357, i8* %20, align 1
  %2358 = and i32 %2352, 255
  %2359 = tail call i32 @llvm.ctpop.i32(i32 %2358)
  %2360 = trunc i32 %2359 to i8
  %2361 = and i8 %2360, 1
  %2362 = xor i8 %2361, 1
  store i8 %2362, i8* %27, align 1
  %2363 = xor i32 %2351, %2350
  %2364 = xor i32 %2363, %2352
  %2365 = lshr i32 %2364, 4
  %2366 = trunc i32 %2365 to i8
  %2367 = and i8 %2366, 1
  store i8 %2367, i8* %33, align 1
  %2368 = icmp eq i32 %2352, 0
  %2369 = zext i1 %2368 to i8
  store i8 %2369, i8* %36, align 1
  %2370 = lshr i32 %2352, 31
  %2371 = trunc i32 %2370 to i8
  store i8 %2371, i8* %39, align 1
  %2372 = lshr i32 %2350, 31
  %2373 = xor i32 %2370, %2372
  %2374 = add nuw nsw i32 %2373, %2370
  %2375 = icmp eq i32 %2374, 2
  %2376 = zext i1 %2375 to i8
  store i8 %2376, i8* %45, align 1
  %2377 = add i64 %2330, -164
  %2378 = add i64 %2329, 34
  store i64 %2378, i64* %3, align 8
  %2379 = inttoptr i64 %2377 to i32*
  %2380 = load i32, i32* %2379, align 4
  %2381 = sext i32 %2380 to i64
  %2382 = sext i32 %2352 to i64
  %2383 = mul nsw i64 %2382, %2381
  %2384 = trunc i64 %2383 to i32
  %2385 = and i64 %2383, 4294967295
  store i64 %2385, i64* %RAX.i1585, align 8
  %2386 = shl i64 %2383, 32
  %2387 = ashr exact i64 %2386, 32
  %2388 = icmp ne i64 %2387, %2383
  %2389 = zext i1 %2388 to i8
  store i8 %2389, i8* %20, align 1
  %2390 = and i32 %2384, 255
  %2391 = tail call i32 @llvm.ctpop.i32(i32 %2390)
  %2392 = trunc i32 %2391 to i8
  %2393 = and i8 %2392, 1
  %2394 = xor i8 %2393, 1
  store i8 %2394, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  %2395 = lshr i32 %2384, 31
  %2396 = trunc i32 %2395 to i8
  store i8 %2396, i8* %39, align 1
  store i8 %2389, i8* %45, align 1
  %2397 = load i64, i64* %RBP.i, align 8
  %2398 = add i64 %2397, -160
  %2399 = add i64 %2329, 43
  store i64 %2399, i64* %3, align 8
  %2400 = inttoptr i64 %2398 to i32*
  %2401 = load i32, i32* %2400, align 4
  %2402 = trunc i64 %2383 to i32
  %2403 = add i32 %2402, %2401
  %2404 = zext i32 %2403 to i64
  store i64 %2404, i64* %RSI.i5212, align 8
  %2405 = icmp ult i32 %2403, %2401
  %2406 = icmp ult i32 %2403, %2402
  %2407 = or i1 %2405, %2406
  %2408 = zext i1 %2407 to i8
  store i8 %2408, i8* %20, align 1
  %2409 = and i32 %2403, 255
  %2410 = tail call i32 @llvm.ctpop.i32(i32 %2409)
  %2411 = trunc i32 %2410 to i8
  %2412 = and i8 %2411, 1
  %2413 = xor i8 %2412, 1
  store i8 %2413, i8* %27, align 1
  %2414 = xor i32 %2402, %2401
  %2415 = xor i32 %2414, %2403
  %2416 = lshr i32 %2415, 4
  %2417 = trunc i32 %2416 to i8
  %2418 = and i8 %2417, 1
  store i8 %2418, i8* %33, align 1
  %2419 = icmp eq i32 %2403, 0
  %2420 = zext i1 %2419 to i8
  store i8 %2420, i8* %36, align 1
  %2421 = lshr i32 %2403, 31
  %2422 = trunc i32 %2421 to i8
  store i8 %2422, i8* %39, align 1
  %2423 = lshr i32 %2401, 31
  %2424 = lshr i32 %2402, 31
  %2425 = xor i32 %2421, %2423
  %2426 = xor i32 %2421, %2424
  %2427 = add nuw nsw i32 %2425, %2426
  %2428 = icmp eq i32 %2427, 2
  %2429 = zext i1 %2428 to i8
  store i8 %2429, i8* %45, align 1
  %2430 = load i32, i32* bitcast (%G_0x4b8c60_type* @G_0x4b8c60 to i32*), align 8
  %2431 = zext i32 %2430 to i64
  store i64 %2431, i64* %RAX.i1585, align 8
  %2432 = add i64 %2397, -72
  %2433 = add i64 %2329, 56
  store i64 %2433, i64* %3, align 8
  %2434 = inttoptr i64 %2432 to i64*
  %2435 = load i64, i64* %2434, align 8
  store i64 %2435, i64* %RCX.i3128, align 8
  %2436 = add i64 %2397, -44
  %2437 = add i64 %2329, 60
  store i64 %2437, i64* %3, align 8
  %2438 = inttoptr i64 %2436 to i32*
  %2439 = load i32, i32* %2438, align 4
  %2440 = sext i32 %2439 to i64
  store i64 %2440, i64* %RDI.i605, align 8
  %2441 = shl nsw i64 %2440, 3
  %2442 = add i64 %2441, %2435
  %2443 = add i64 %2329, 64
  store i64 %2443, i64* %3, align 8
  %2444 = inttoptr i64 %2442 to i64*
  %2445 = load i64, i64* %2444, align 8
  store i64 %2445, i64* %RCX.i3128, align 8
  %2446 = add i64 %2397, -16
  %2447 = add i64 %2329, 68
  store i64 %2447, i64* %3, align 8
  %2448 = inttoptr i64 %2446 to i64*
  %2449 = load i64, i64* %2448, align 8
  store i64 %2449, i64* %RDI.i605, align 8
  %2450 = add i64 %2449, 6392
  %2451 = add i64 %2329, 75
  store i64 %2451, i64* %3, align 8
  %2452 = inttoptr i64 %2450 to i32*
  %2453 = load i32, i32* %2452, align 4
  %2454 = add i32 %2453, -1
  %2455 = zext i32 %2454 to i64
  store i64 %2455, i64* %600, align 8
  %2456 = icmp eq i32 %2453, 0
  %2457 = zext i1 %2456 to i8
  store i8 %2457, i8* %20, align 1
  %2458 = and i32 %2454, 255
  %2459 = tail call i32 @llvm.ctpop.i32(i32 %2458)
  %2460 = trunc i32 %2459 to i8
  %2461 = and i8 %2460, 1
  %2462 = xor i8 %2461, 1
  store i8 %2462, i8* %27, align 1
  %2463 = xor i32 %2454, %2453
  %2464 = lshr i32 %2463, 4
  %2465 = trunc i32 %2464 to i8
  %2466 = and i8 %2465, 1
  store i8 %2466, i8* %33, align 1
  %2467 = icmp eq i32 %2454, 0
  %2468 = zext i1 %2467 to i8
  store i8 %2468, i8* %36, align 1
  %2469 = lshr i32 %2454, 31
  %2470 = trunc i32 %2469 to i8
  store i8 %2470, i8* %39, align 1
  %2471 = lshr i32 %2453, 31
  %2472 = xor i32 %2469, %2471
  %2473 = add nuw nsw i32 %2472, %2471
  %2474 = icmp eq i32 %2473, 2
  %2475 = zext i1 %2474 to i8
  store i8 %2475, i8* %45, align 1
  %2476 = load i64, i64* %RBP.i, align 8
  %2477 = add i64 %2476, -24
  %2478 = add i64 %2329, 83
  store i64 %2478, i64* %3, align 8
  %2479 = inttoptr i64 %2477 to i32*
  %2480 = load i32, i32* %2479, align 4
  %2481 = add i32 %2480, -2
  %2482 = zext i32 %2481 to i64
  store i64 %2482, i64* %602, align 8
  %2483 = lshr i32 %2481, 31
  %2484 = sub i32 %2454, %2481
  %2485 = icmp ult i32 %2454, %2481
  %2486 = zext i1 %2485 to i8
  store i8 %2486, i8* %20, align 1
  %2487 = and i32 %2484, 255
  %2488 = tail call i32 @llvm.ctpop.i32(i32 %2487)
  %2489 = trunc i32 %2488 to i8
  %2490 = and i8 %2489, 1
  %2491 = xor i8 %2490, 1
  store i8 %2491, i8* %27, align 1
  %2492 = xor i32 %2481, %2454
  %2493 = xor i32 %2492, %2484
  %2494 = lshr i32 %2493, 4
  %2495 = trunc i32 %2494 to i8
  %2496 = and i8 %2495, 1
  store i8 %2496, i8* %33, align 1
  %2497 = icmp eq i32 %2484, 0
  %2498 = zext i1 %2497 to i8
  store i8 %2498, i8* %36, align 1
  %2499 = lshr i32 %2484, 31
  %2500 = trunc i32 %2499 to i8
  store i8 %2500, i8* %39, align 1
  %2501 = xor i32 %2483, %2469
  %2502 = xor i32 %2499, %2469
  %2503 = add nuw nsw i32 %2502, %2501
  %2504 = icmp eq i32 %2503, 2
  %2505 = zext i1 %2504 to i8
  store i8 %2505, i8* %45, align 1
  %2506 = add i64 %2476, -216
  %2507 = load i32, i32* %ESI.i5201, align 4
  %2508 = add i64 %2329, 96
  store i64 %2508, i64* %3, align 8
  %2509 = inttoptr i64 %2506 to i32*
  store i32 %2507, i32* %2509, align 4
  %2510 = load i64, i64* %RBP.i, align 8
  %2511 = add i64 %2510, -220
  %2512 = load i32, i32* %EAX.i1609, align 4
  %2513 = load i64, i64* %3, align 8
  %2514 = add i64 %2513, 6
  store i64 %2514, i64* %3, align 8
  %2515 = inttoptr i64 %2511 to i32*
  store i32 %2512, i32* %2515, align 4
  %2516 = load i64, i64* %RBP.i, align 8
  %2517 = add i64 %2516, -232
  %2518 = load i64, i64* %RCX.i3128, align 8
  %2519 = load i64, i64* %3, align 8
  %2520 = add i64 %2519, 7
  store i64 %2520, i64* %3, align 8
  %2521 = inttoptr i64 %2517 to i64*
  store i64 %2518, i64* %2521, align 8
  %2522 = load i64, i64* %3, align 8
  %2523 = load i8, i8* %39, align 1
  %2524 = icmp ne i8 %2523, 0
  %2525 = load i8, i8* %45, align 1
  %2526 = icmp ne i8 %2525, 0
  %2527 = xor i1 %2524, %2526
  %.v412 = select i1 %2527, i64 6, i64 30
  %2528 = add i64 %2522, %.v412
  store i64 %2528, i64* %3, align 8
  %2529 = load i64, i64* %RBP.i, align 8
  br i1 %2527, label %block_42e3a0, label %block_.L_42e3b8

block_42e3a0:                                     ; preds = %block_.L_42e32d
  %2530 = add i64 %2529, -16
  %2531 = add i64 %2528, 4
  store i64 %2531, i64* %3, align 8
  %2532 = inttoptr i64 %2530 to i64*
  %2533 = load i64, i64* %2532, align 8
  store i64 %2533, i64* %RAX.i1585, align 8
  %2534 = add i64 %2533, 6392
  %2535 = add i64 %2528, 10
  store i64 %2535, i64* %3, align 8
  %2536 = inttoptr i64 %2534 to i32*
  %2537 = load i32, i32* %2536, align 4
  %2538 = add i32 %2537, -1
  %2539 = zext i32 %2538 to i64
  store i64 %2539, i64* %RCX.i3128, align 8
  %2540 = icmp eq i32 %2537, 0
  %2541 = zext i1 %2540 to i8
  store i8 %2541, i8* %20, align 1
  %2542 = and i32 %2538, 255
  %2543 = tail call i32 @llvm.ctpop.i32(i32 %2542)
  %2544 = trunc i32 %2543 to i8
  %2545 = and i8 %2544, 1
  %2546 = xor i8 %2545, 1
  store i8 %2546, i8* %27, align 1
  %2547 = xor i32 %2538, %2537
  %2548 = lshr i32 %2547, 4
  %2549 = trunc i32 %2548 to i8
  %2550 = and i8 %2549, 1
  store i8 %2550, i8* %33, align 1
  %2551 = icmp eq i32 %2538, 0
  %2552 = zext i1 %2551 to i8
  store i8 %2552, i8* %36, align 1
  %2553 = lshr i32 %2538, 31
  %2554 = trunc i32 %2553 to i8
  store i8 %2554, i8* %39, align 1
  %2555 = lshr i32 %2537, 31
  %2556 = xor i32 %2553, %2555
  %2557 = add nuw nsw i32 %2556, %2555
  %2558 = icmp eq i32 %2557, 2
  %2559 = zext i1 %2558 to i8
  store i8 %2559, i8* %45, align 1
  %2560 = add i64 %2529, -236
  %2561 = add i64 %2528, 19
  store i64 %2561, i64* %3, align 8
  %2562 = inttoptr i64 %2560 to i32*
  store i32 %2538, i32* %2562, align 4
  %2563 = load i64, i64* %3, align 8
  %2564 = add i64 %2563, 17
  store i64 %2564, i64* %3, align 8
  br label %block_.L_42e3c4

block_.L_42e3b8:                                  ; preds = %block_.L_42e32d
  %2565 = add i64 %2529, -24
  %2566 = add i64 %2528, 3
  store i64 %2566, i64* %3, align 8
  %2567 = inttoptr i64 %2565 to i32*
  %2568 = load i32, i32* %2567, align 4
  %2569 = add i32 %2568, -2
  %2570 = zext i32 %2569 to i64
  store i64 %2570, i64* %RAX.i1585, align 8
  %2571 = icmp ult i32 %2568, 2
  %2572 = zext i1 %2571 to i8
  store i8 %2572, i8* %20, align 1
  %2573 = and i32 %2569, 255
  %2574 = tail call i32 @llvm.ctpop.i32(i32 %2573)
  %2575 = trunc i32 %2574 to i8
  %2576 = and i8 %2575, 1
  %2577 = xor i8 %2576, 1
  store i8 %2577, i8* %27, align 1
  %2578 = xor i32 %2569, %2568
  %2579 = lshr i32 %2578, 4
  %2580 = trunc i32 %2579 to i8
  %2581 = and i8 %2580, 1
  store i8 %2581, i8* %33, align 1
  %2582 = icmp eq i32 %2569, 0
  %2583 = zext i1 %2582 to i8
  store i8 %2583, i8* %36, align 1
  %2584 = lshr i32 %2569, 31
  %2585 = trunc i32 %2584 to i8
  store i8 %2585, i8* %39, align 1
  %2586 = lshr i32 %2568, 31
  %2587 = xor i32 %2584, %2586
  %2588 = add nuw nsw i32 %2587, %2586
  %2589 = icmp eq i32 %2588, 2
  %2590 = zext i1 %2589 to i8
  store i8 %2590, i8* %45, align 1
  %2591 = add i64 %2529, -236
  %2592 = add i64 %2528, 12
  store i64 %2592, i64* %3, align 8
  %2593 = inttoptr i64 %2591 to i32*
  store i32 %2569, i32* %2593, align 4
  %.pre298 = load i64, i64* %3, align 8
  br label %block_.L_42e3c4

block_.L_42e3c4:                                  ; preds = %block_.L_42e3b8, %block_42e3a0
  %2594 = phi i64 [ %.pre298, %block_.L_42e3b8 ], [ %2564, %block_42e3a0 ]
  %2595 = load i64, i64* %RBP.i, align 8
  %2596 = add i64 %2595, -236
  %2597 = add i64 %2594, 6
  store i64 %2597, i64* %3, align 8
  %2598 = inttoptr i64 %2596 to i32*
  %2599 = load i32, i32* %2598, align 4
  %2600 = zext i32 %2599 to i64
  store i64 %2600, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %2601 = sub i32 0, %2599
  %2602 = icmp ne i32 %2599, 0
  %2603 = zext i1 %2602 to i8
  store i8 %2603, i8* %20, align 1
  %2604 = and i32 %2601, 255
  %2605 = tail call i32 @llvm.ctpop.i32(i32 %2604)
  %2606 = trunc i32 %2605 to i8
  %2607 = and i8 %2606, 1
  %2608 = xor i8 %2607, 1
  store i8 %2608, i8* %27, align 1
  %2609 = xor i32 %2599, %2601
  %2610 = lshr i32 %2609, 4
  %2611 = trunc i32 %2610 to i8
  %2612 = and i8 %2611, 1
  store i8 %2612, i8* %33, align 1
  %2613 = icmp eq i32 %2599, 0
  %2614 = zext i1 %2613 to i8
  store i8 %2614, i8* %36, align 1
  %2615 = lshr i32 %2601, 31
  %2616 = trunc i32 %2615 to i8
  store i8 %2616, i8* %39, align 1
  %2617 = lshr i32 %2599, 31
  %2618 = add nuw nsw i32 %2615, %2617
  %2619 = icmp eq i32 %2618, 2
  %2620 = zext i1 %2619 to i8
  store i8 %2620, i8* %45, align 1
  %2621 = icmp ne i8 %2616, 0
  %2622 = xor i1 %2621, %2619
  %2623 = or i1 %2613, %2622
  %.v353 = select i1 %2623, i64 29, i64 16
  %2624 = add i64 %2594, %.v353
  store i64 %2624, i64* %3, align 8
  br i1 %2623, label %block_.L_42e3e1, label %block_42e3d4

block_42e3d4:                                     ; preds = %block_.L_42e3c4
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %2625 = add i64 %2595, -240
  %2626 = add i64 %2624, 8
  store i64 %2626, i64* %3, align 8
  %2627 = inttoptr i64 %2625 to i32*
  store i32 0, i32* %2627, align 4
  %2628 = load i64, i64* %3, align 8
  %2629 = add i64 %2628, 80
  store i64 %2629, i64* %3, align 8
  br label %block_.L_42e42c

block_.L_42e3e1:                                  ; preds = %block_.L_42e3c4
  %2630 = add i64 %2595, -16
  %2631 = add i64 %2624, 4
  store i64 %2631, i64* %3, align 8
  %2632 = inttoptr i64 %2630 to i64*
  %2633 = load i64, i64* %2632, align 8
  store i64 %2633, i64* %RAX.i1585, align 8
  %2634 = add i64 %2633, 6392
  %2635 = add i64 %2624, 10
  store i64 %2635, i64* %3, align 8
  %2636 = inttoptr i64 %2634 to i32*
  %2637 = load i32, i32* %2636, align 4
  %2638 = add i32 %2637, -1
  %2639 = zext i32 %2638 to i64
  store i64 %2639, i64* %RCX.i3128, align 8
  %2640 = icmp eq i32 %2637, 0
  %2641 = zext i1 %2640 to i8
  store i8 %2641, i8* %20, align 1
  %2642 = and i32 %2638, 255
  %2643 = tail call i32 @llvm.ctpop.i32(i32 %2642)
  %2644 = trunc i32 %2643 to i8
  %2645 = and i8 %2644, 1
  %2646 = xor i8 %2645, 1
  store i8 %2646, i8* %27, align 1
  %2647 = xor i32 %2638, %2637
  %2648 = lshr i32 %2647, 4
  %2649 = trunc i32 %2648 to i8
  %2650 = and i8 %2649, 1
  store i8 %2650, i8* %33, align 1
  %2651 = icmp eq i32 %2638, 0
  %2652 = zext i1 %2651 to i8
  store i8 %2652, i8* %36, align 1
  %2653 = lshr i32 %2638, 31
  %2654 = trunc i32 %2653 to i8
  store i8 %2654, i8* %39, align 1
  %2655 = lshr i32 %2637, 31
  %2656 = xor i32 %2653, %2655
  %2657 = add nuw nsw i32 %2656, %2655
  %2658 = icmp eq i32 %2657, 2
  %2659 = zext i1 %2658 to i8
  store i8 %2659, i8* %45, align 1
  %2660 = add i64 %2595, -24
  %2661 = add i64 %2624, 16
  store i64 %2661, i64* %3, align 8
  %2662 = inttoptr i64 %2660 to i32*
  %2663 = load i32, i32* %2662, align 4
  %2664 = add i32 %2663, -2
  %2665 = zext i32 %2664 to i64
  store i64 %2665, i64* %RDX.i5152, align 8
  %2666 = lshr i32 %2664, 31
  %2667 = sub i32 %2638, %2664
  %2668 = icmp ult i32 %2638, %2664
  %2669 = zext i1 %2668 to i8
  store i8 %2669, i8* %20, align 1
  %2670 = and i32 %2667, 255
  %2671 = tail call i32 @llvm.ctpop.i32(i32 %2670)
  %2672 = trunc i32 %2671 to i8
  %2673 = and i8 %2672, 1
  %2674 = xor i8 %2673, 1
  store i8 %2674, i8* %27, align 1
  %2675 = xor i32 %2664, %2638
  %2676 = xor i32 %2675, %2667
  %2677 = lshr i32 %2676, 4
  %2678 = trunc i32 %2677 to i8
  %2679 = and i8 %2678, 1
  store i8 %2679, i8* %33, align 1
  %2680 = icmp eq i32 %2667, 0
  %2681 = zext i1 %2680 to i8
  store i8 %2681, i8* %36, align 1
  %2682 = lshr i32 %2667, 31
  %2683 = trunc i32 %2682 to i8
  store i8 %2683, i8* %39, align 1
  %2684 = xor i32 %2666, %2653
  %2685 = xor i32 %2682, %2653
  %2686 = add nuw nsw i32 %2685, %2684
  %2687 = icmp eq i32 %2686, 2
  %2688 = zext i1 %2687 to i8
  store i8 %2688, i8* %45, align 1
  %2689 = icmp ne i8 %2683, 0
  %2690 = xor i1 %2689, %2687
  %.v358 = select i1 %2690, i64 27, i64 51
  %2691 = add i64 %2624, %.v358
  store i64 %2691, i64* %3, align 8
  %2692 = load i64, i64* %RBP.i, align 8
  br i1 %2690, label %block_42e3fc, label %block_.L_42e414

block_42e3fc:                                     ; preds = %block_.L_42e3e1
  %2693 = add i64 %2692, -16
  %2694 = add i64 %2691, 4
  store i64 %2694, i64* %3, align 8
  %2695 = inttoptr i64 %2693 to i64*
  %2696 = load i64, i64* %2695, align 8
  store i64 %2696, i64* %RAX.i1585, align 8
  %2697 = add i64 %2696, 6392
  %2698 = add i64 %2691, 10
  store i64 %2698, i64* %3, align 8
  %2699 = inttoptr i64 %2697 to i32*
  %2700 = load i32, i32* %2699, align 4
  %2701 = add i32 %2700, -1
  %2702 = zext i32 %2701 to i64
  store i64 %2702, i64* %RCX.i3128, align 8
  %2703 = icmp eq i32 %2700, 0
  %2704 = zext i1 %2703 to i8
  store i8 %2704, i8* %20, align 1
  %2705 = and i32 %2701, 255
  %2706 = tail call i32 @llvm.ctpop.i32(i32 %2705)
  %2707 = trunc i32 %2706 to i8
  %2708 = and i8 %2707, 1
  %2709 = xor i8 %2708, 1
  store i8 %2709, i8* %27, align 1
  %2710 = xor i32 %2701, %2700
  %2711 = lshr i32 %2710, 4
  %2712 = trunc i32 %2711 to i8
  %2713 = and i8 %2712, 1
  store i8 %2713, i8* %33, align 1
  %2714 = icmp eq i32 %2701, 0
  %2715 = zext i1 %2714 to i8
  store i8 %2715, i8* %36, align 1
  %2716 = lshr i32 %2701, 31
  %2717 = trunc i32 %2716 to i8
  store i8 %2717, i8* %39, align 1
  %2718 = lshr i32 %2700, 31
  %2719 = xor i32 %2716, %2718
  %2720 = add nuw nsw i32 %2719, %2718
  %2721 = icmp eq i32 %2720, 2
  %2722 = zext i1 %2721 to i8
  store i8 %2722, i8* %45, align 1
  %2723 = add i64 %2692, -244
  %2724 = add i64 %2691, 19
  store i64 %2724, i64* %3, align 8
  %2725 = inttoptr i64 %2723 to i32*
  store i32 %2701, i32* %2725, align 4
  %2726 = load i64, i64* %3, align 8
  %2727 = add i64 %2726, 17
  store i64 %2727, i64* %3, align 8
  br label %block_.L_42e420

block_.L_42e414:                                  ; preds = %block_.L_42e3e1
  %2728 = add i64 %2692, -24
  %2729 = add i64 %2691, 3
  store i64 %2729, i64* %3, align 8
  %2730 = inttoptr i64 %2728 to i32*
  %2731 = load i32, i32* %2730, align 4
  %2732 = add i32 %2731, -2
  %2733 = zext i32 %2732 to i64
  store i64 %2733, i64* %RAX.i1585, align 8
  %2734 = icmp ult i32 %2731, 2
  %2735 = zext i1 %2734 to i8
  store i8 %2735, i8* %20, align 1
  %2736 = and i32 %2732, 255
  %2737 = tail call i32 @llvm.ctpop.i32(i32 %2736)
  %2738 = trunc i32 %2737 to i8
  %2739 = and i8 %2738, 1
  %2740 = xor i8 %2739, 1
  store i8 %2740, i8* %27, align 1
  %2741 = xor i32 %2732, %2731
  %2742 = lshr i32 %2741, 4
  %2743 = trunc i32 %2742 to i8
  %2744 = and i8 %2743, 1
  store i8 %2744, i8* %33, align 1
  %2745 = icmp eq i32 %2732, 0
  %2746 = zext i1 %2745 to i8
  store i8 %2746, i8* %36, align 1
  %2747 = lshr i32 %2732, 31
  %2748 = trunc i32 %2747 to i8
  store i8 %2748, i8* %39, align 1
  %2749 = lshr i32 %2731, 31
  %2750 = xor i32 %2747, %2749
  %2751 = add nuw nsw i32 %2750, %2749
  %2752 = icmp eq i32 %2751, 2
  %2753 = zext i1 %2752 to i8
  store i8 %2753, i8* %45, align 1
  %2754 = add i64 %2692, -244
  %2755 = add i64 %2691, 12
  store i64 %2755, i64* %3, align 8
  %2756 = inttoptr i64 %2754 to i32*
  store i32 %2732, i32* %2756, align 4
  %.pre299 = load i64, i64* %3, align 8
  br label %block_.L_42e420

block_.L_42e420:                                  ; preds = %block_.L_42e414, %block_42e3fc
  %2757 = phi i64 [ %.pre299, %block_.L_42e414 ], [ %2727, %block_42e3fc ]
  %2758 = load i64, i64* %RBP.i, align 8
  %2759 = add i64 %2758, -244
  %2760 = add i64 %2757, 6
  store i64 %2760, i64* %3, align 8
  %2761 = inttoptr i64 %2759 to i32*
  %2762 = load i32, i32* %2761, align 4
  %2763 = zext i32 %2762 to i64
  store i64 %2763, i64* %RAX.i1585, align 8
  %2764 = add i64 %2758, -240
  %2765 = add i64 %2757, 12
  store i64 %2765, i64* %3, align 8
  %2766 = inttoptr i64 %2764 to i32*
  store i32 %2762, i32* %2766, align 4
  %.pre300 = load i64, i64* %3, align 8
  br label %block_.L_42e42c

block_.L_42e42c:                                  ; preds = %block_.L_42e420, %block_42e3d4
  %2767 = phi i64 [ %.pre300, %block_.L_42e420 ], [ %2629, %block_42e3d4 ]
  %2768 = load i64, i64* %RBP.i, align 8
  %2769 = add i64 %2768, -240
  %2770 = add i64 %2767, 6
  store i64 %2770, i64* %3, align 8
  %2771 = inttoptr i64 %2769 to i32*
  %2772 = load i32, i32* %2771, align 4
  %2773 = zext i32 %2772 to i64
  store i64 %2773, i64* %RAX.i1585, align 8
  %2774 = sext i32 %2772 to i64
  store i64 %2774, i64* %RCX.i3128, align 8
  %2775 = add i64 %2768, -232
  %2776 = add i64 %2767, 16
  store i64 %2776, i64* %3, align 8
  %2777 = inttoptr i64 %2775 to i64*
  %2778 = load i64, i64* %2777, align 8
  store i64 %2778, i64* %RDX.i5152, align 8
  %2779 = shl nsw i64 %2774, 1
  %2780 = add i64 %2779, %2778
  %2781 = add i64 %2767, 20
  store i64 %2781, i64* %3, align 8
  %2782 = inttoptr i64 %2780 to i16*
  %2783 = load i16, i16* %2782, align 2
  %2784 = zext i16 %2783 to i64
  store i64 %2784, i64* %RAX.i1585, align 8
  %2785 = add i64 %2768, -72
  %2786 = add i64 %2767, 24
  store i64 %2786, i64* %3, align 8
  %2787 = inttoptr i64 %2785 to i64*
  %2788 = load i64, i64* %2787, align 8
  store i64 %2788, i64* %RCX.i3128, align 8
  %2789 = add i64 %2768, -44
  %2790 = add i64 %2767, 28
  store i64 %2790, i64* %3, align 8
  %2791 = inttoptr i64 %2789 to i32*
  %2792 = load i32, i32* %2791, align 4
  %2793 = sext i32 %2792 to i64
  store i64 %2793, i64* %RSI.i5212, align 8
  %2794 = shl nsw i64 %2793, 3
  %2795 = add i64 %2794, %2788
  %2796 = add i64 %2767, 32
  store i64 %2796, i64* %3, align 8
  %2797 = inttoptr i64 %2795 to i64*
  %2798 = load i64, i64* %2797, align 8
  store i64 %2798, i64* %RCX.i3128, align 8
  %2799 = add i64 %2768, -16
  %2800 = add i64 %2767, 36
  store i64 %2800, i64* %3, align 8
  %2801 = inttoptr i64 %2799 to i64*
  %2802 = load i64, i64* %2801, align 8
  store i64 %2802, i64* %RSI.i5212, align 8
  %2803 = add i64 %2802, 6392
  %2804 = add i64 %2767, 42
  store i64 %2804, i64* %3, align 8
  %2805 = inttoptr i64 %2803 to i32*
  %2806 = load i32, i32* %2805, align 4
  %2807 = add i32 %2806, -1
  %2808 = zext i32 %2807 to i64
  store i64 %2808, i64* %RDI.i605, align 8
  %2809 = icmp eq i32 %2806, 0
  %2810 = zext i1 %2809 to i8
  store i8 %2810, i8* %20, align 1
  %2811 = and i32 %2807, 255
  %2812 = tail call i32 @llvm.ctpop.i32(i32 %2811)
  %2813 = trunc i32 %2812 to i8
  %2814 = and i8 %2813, 1
  %2815 = xor i8 %2814, 1
  store i8 %2815, i8* %27, align 1
  %2816 = xor i32 %2807, %2806
  %2817 = lshr i32 %2816, 4
  %2818 = trunc i32 %2817 to i8
  %2819 = and i8 %2818, 1
  store i8 %2819, i8* %33, align 1
  %2820 = icmp eq i32 %2807, 0
  %2821 = zext i1 %2820 to i8
  store i8 %2821, i8* %36, align 1
  %2822 = lshr i32 %2807, 31
  %2823 = trunc i32 %2822 to i8
  store i8 %2823, i8* %39, align 1
  %2824 = lshr i32 %2806, 31
  %2825 = xor i32 %2822, %2824
  %2826 = add nuw nsw i32 %2825, %2824
  %2827 = icmp eq i32 %2826, 2
  %2828 = zext i1 %2827 to i8
  store i8 %2828, i8* %45, align 1
  %2829 = add i64 %2768, -24
  %2830 = add i64 %2767, 49
  store i64 %2830, i64* %3, align 8
  %2831 = inttoptr i64 %2829 to i32*
  %2832 = load i32, i32* %2831, align 4
  %2833 = add i32 %2832, 3
  %2834 = zext i32 %2833 to i64
  store i64 %2834, i64* %600, align 8
  %2835 = lshr i32 %2833, 31
  %2836 = sub i32 %2807, %2833
  %2837 = icmp ult i32 %2807, %2833
  %2838 = zext i1 %2837 to i8
  store i8 %2838, i8* %20, align 1
  %2839 = and i32 %2836, 255
  %2840 = tail call i32 @llvm.ctpop.i32(i32 %2839)
  %2841 = trunc i32 %2840 to i8
  %2842 = and i8 %2841, 1
  %2843 = xor i8 %2842, 1
  store i8 %2843, i8* %27, align 1
  %2844 = xor i32 %2833, %2807
  %2845 = xor i32 %2844, %2836
  %2846 = lshr i32 %2845, 4
  %2847 = trunc i32 %2846 to i8
  %2848 = and i8 %2847, 1
  store i8 %2848, i8* %33, align 1
  %2849 = icmp eq i32 %2836, 0
  %2850 = zext i1 %2849 to i8
  store i8 %2850, i8* %36, align 1
  %2851 = lshr i32 %2836, 31
  %2852 = trunc i32 %2851 to i8
  store i8 %2852, i8* %39, align 1
  %2853 = xor i32 %2835, %2822
  %2854 = xor i32 %2851, %2822
  %2855 = add nuw nsw i32 %2854, %2853
  %2856 = icmp eq i32 %2855, 2
  %2857 = zext i1 %2856 to i8
  store i8 %2857, i8* %45, align 1
  %2858 = load i64, i64* %RBP.i, align 8
  %2859 = add i64 %2858, -248
  %2860 = load i32, i32* %EAX.i1609, align 4
  %2861 = add i64 %2767, 62
  store i64 %2861, i64* %3, align 8
  %2862 = inttoptr i64 %2859 to i32*
  store i32 %2860, i32* %2862, align 4
  %2863 = load i64, i64* %RBP.i, align 8
  %2864 = add i64 %2863, -256
  %2865 = load i64, i64* %RCX.i3128, align 8
  %2866 = load i64, i64* %3, align 8
  %2867 = add i64 %2866, 7
  store i64 %2867, i64* %3, align 8
  %2868 = inttoptr i64 %2864 to i64*
  store i64 %2865, i64* %2868, align 8
  %2869 = load i64, i64* %3, align 8
  %2870 = load i8, i8* %39, align 1
  %2871 = icmp ne i8 %2870, 0
  %2872 = load i8, i8* %45, align 1
  %2873 = icmp ne i8 %2872, 0
  %2874 = xor i1 %2871, %2873
  %.v413 = select i1 %2874, i64 6, i64 30
  %2875 = add i64 %2869, %.v413
  store i64 %2875, i64* %3, align 8
  %2876 = load i64, i64* %RBP.i, align 8
  br i1 %2874, label %block_42e477, label %block_.L_42e48f

block_42e477:                                     ; preds = %block_.L_42e42c
  %2877 = add i64 %2876, -16
  %2878 = add i64 %2875, 4
  store i64 %2878, i64* %3, align 8
  %2879 = inttoptr i64 %2877 to i64*
  %2880 = load i64, i64* %2879, align 8
  store i64 %2880, i64* %RAX.i1585, align 8
  %2881 = add i64 %2880, 6392
  %2882 = add i64 %2875, 10
  store i64 %2882, i64* %3, align 8
  %2883 = inttoptr i64 %2881 to i32*
  %2884 = load i32, i32* %2883, align 4
  %2885 = add i32 %2884, -1
  %2886 = zext i32 %2885 to i64
  store i64 %2886, i64* %RCX.i3128, align 8
  %2887 = icmp eq i32 %2884, 0
  %2888 = zext i1 %2887 to i8
  store i8 %2888, i8* %20, align 1
  %2889 = and i32 %2885, 255
  %2890 = tail call i32 @llvm.ctpop.i32(i32 %2889)
  %2891 = trunc i32 %2890 to i8
  %2892 = and i8 %2891, 1
  %2893 = xor i8 %2892, 1
  store i8 %2893, i8* %27, align 1
  %2894 = xor i32 %2885, %2884
  %2895 = lshr i32 %2894, 4
  %2896 = trunc i32 %2895 to i8
  %2897 = and i8 %2896, 1
  store i8 %2897, i8* %33, align 1
  %2898 = icmp eq i32 %2885, 0
  %2899 = zext i1 %2898 to i8
  store i8 %2899, i8* %36, align 1
  %2900 = lshr i32 %2885, 31
  %2901 = trunc i32 %2900 to i8
  store i8 %2901, i8* %39, align 1
  %2902 = lshr i32 %2884, 31
  %2903 = xor i32 %2900, %2902
  %2904 = add nuw nsw i32 %2903, %2902
  %2905 = icmp eq i32 %2904, 2
  %2906 = zext i1 %2905 to i8
  store i8 %2906, i8* %45, align 1
  %2907 = add i64 %2876, -260
  %2908 = add i64 %2875, 19
  store i64 %2908, i64* %3, align 8
  %2909 = inttoptr i64 %2907 to i32*
  store i32 %2885, i32* %2909, align 4
  %2910 = load i64, i64* %3, align 8
  %2911 = add i64 %2910, 17
  store i64 %2911, i64* %3, align 8
  br label %block_.L_42e49b

block_.L_42e48f:                                  ; preds = %block_.L_42e42c
  %2912 = add i64 %2876, -24
  %2913 = add i64 %2875, 3
  store i64 %2913, i64* %3, align 8
  %2914 = inttoptr i64 %2912 to i32*
  %2915 = load i32, i32* %2914, align 4
  %2916 = add i32 %2915, 3
  %2917 = zext i32 %2916 to i64
  store i64 %2917, i64* %RAX.i1585, align 8
  %2918 = icmp ugt i32 %2915, -4
  %2919 = zext i1 %2918 to i8
  store i8 %2919, i8* %20, align 1
  %2920 = and i32 %2916, 255
  %2921 = tail call i32 @llvm.ctpop.i32(i32 %2920)
  %2922 = trunc i32 %2921 to i8
  %2923 = and i8 %2922, 1
  %2924 = xor i8 %2923, 1
  store i8 %2924, i8* %27, align 1
  %2925 = xor i32 %2916, %2915
  %2926 = lshr i32 %2925, 4
  %2927 = trunc i32 %2926 to i8
  %2928 = and i8 %2927, 1
  store i8 %2928, i8* %33, align 1
  %2929 = icmp eq i32 %2916, 0
  %2930 = zext i1 %2929 to i8
  store i8 %2930, i8* %36, align 1
  %2931 = lshr i32 %2916, 31
  %2932 = trunc i32 %2931 to i8
  store i8 %2932, i8* %39, align 1
  %2933 = lshr i32 %2915, 31
  %2934 = xor i32 %2931, %2933
  %2935 = add nuw nsw i32 %2934, %2931
  %2936 = icmp eq i32 %2935, 2
  %2937 = zext i1 %2936 to i8
  store i8 %2937, i8* %45, align 1
  %2938 = add i64 %2876, -260
  %2939 = add i64 %2875, 12
  store i64 %2939, i64* %3, align 8
  %2940 = inttoptr i64 %2938 to i32*
  store i32 %2916, i32* %2940, align 4
  %.pre301 = load i64, i64* %3, align 8
  br label %block_.L_42e49b

block_.L_42e49b:                                  ; preds = %block_.L_42e48f, %block_42e477
  %2941 = phi i64 [ %.pre301, %block_.L_42e48f ], [ %2911, %block_42e477 ]
  %2942 = load i64, i64* %RBP.i, align 8
  %2943 = add i64 %2942, -260
  %2944 = add i64 %2941, 6
  store i64 %2944, i64* %3, align 8
  %2945 = inttoptr i64 %2943 to i32*
  %2946 = load i32, i32* %2945, align 4
  %2947 = zext i32 %2946 to i64
  store i64 %2947, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %2948 = sub i32 0, %2946
  %2949 = icmp ne i32 %2946, 0
  %2950 = zext i1 %2949 to i8
  store i8 %2950, i8* %20, align 1
  %2951 = and i32 %2948, 255
  %2952 = tail call i32 @llvm.ctpop.i32(i32 %2951)
  %2953 = trunc i32 %2952 to i8
  %2954 = and i8 %2953, 1
  %2955 = xor i8 %2954, 1
  store i8 %2955, i8* %27, align 1
  %2956 = xor i32 %2946, %2948
  %2957 = lshr i32 %2956, 4
  %2958 = trunc i32 %2957 to i8
  %2959 = and i8 %2958, 1
  store i8 %2959, i8* %33, align 1
  %2960 = icmp eq i32 %2946, 0
  %2961 = zext i1 %2960 to i8
  store i8 %2961, i8* %36, align 1
  %2962 = lshr i32 %2948, 31
  %2963 = trunc i32 %2962 to i8
  store i8 %2963, i8* %39, align 1
  %2964 = lshr i32 %2946, 31
  %2965 = add nuw nsw i32 %2962, %2964
  %2966 = icmp eq i32 %2965, 2
  %2967 = zext i1 %2966 to i8
  store i8 %2967, i8* %45, align 1
  %2968 = icmp ne i8 %2963, 0
  %2969 = xor i1 %2968, %2966
  %2970 = or i1 %2960, %2969
  %.v354 = select i1 %2970, i64 29, i64 16
  %2971 = add i64 %2941, %.v354
  store i64 %2971, i64* %3, align 8
  br i1 %2970, label %block_.L_42e4b8, label %block_42e4ab

block_42e4ab:                                     ; preds = %block_.L_42e49b
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %2972 = add i64 %2942, -264
  %2973 = add i64 %2971, 8
  store i64 %2973, i64* %3, align 8
  %2974 = inttoptr i64 %2972 to i32*
  store i32 0, i32* %2974, align 4
  %2975 = load i64, i64* %3, align 8
  %2976 = add i64 %2975, 80
  store i64 %2976, i64* %3, align 8
  br label %block_.L_42e503

block_.L_42e4b8:                                  ; preds = %block_.L_42e49b
  %2977 = add i64 %2942, -16
  %2978 = add i64 %2971, 4
  store i64 %2978, i64* %3, align 8
  %2979 = inttoptr i64 %2977 to i64*
  %2980 = load i64, i64* %2979, align 8
  store i64 %2980, i64* %RAX.i1585, align 8
  %2981 = add i64 %2980, 6392
  %2982 = add i64 %2971, 10
  store i64 %2982, i64* %3, align 8
  %2983 = inttoptr i64 %2981 to i32*
  %2984 = load i32, i32* %2983, align 4
  %2985 = add i32 %2984, -1
  %2986 = zext i32 %2985 to i64
  store i64 %2986, i64* %RCX.i3128, align 8
  %2987 = icmp eq i32 %2984, 0
  %2988 = zext i1 %2987 to i8
  store i8 %2988, i8* %20, align 1
  %2989 = and i32 %2985, 255
  %2990 = tail call i32 @llvm.ctpop.i32(i32 %2989)
  %2991 = trunc i32 %2990 to i8
  %2992 = and i8 %2991, 1
  %2993 = xor i8 %2992, 1
  store i8 %2993, i8* %27, align 1
  %2994 = xor i32 %2985, %2984
  %2995 = lshr i32 %2994, 4
  %2996 = trunc i32 %2995 to i8
  %2997 = and i8 %2996, 1
  store i8 %2997, i8* %33, align 1
  %2998 = icmp eq i32 %2985, 0
  %2999 = zext i1 %2998 to i8
  store i8 %2999, i8* %36, align 1
  %3000 = lshr i32 %2985, 31
  %3001 = trunc i32 %3000 to i8
  store i8 %3001, i8* %39, align 1
  %3002 = lshr i32 %2984, 31
  %3003 = xor i32 %3000, %3002
  %3004 = add nuw nsw i32 %3003, %3002
  %3005 = icmp eq i32 %3004, 2
  %3006 = zext i1 %3005 to i8
  store i8 %3006, i8* %45, align 1
  %3007 = add i64 %2942, -24
  %3008 = add i64 %2971, 16
  store i64 %3008, i64* %3, align 8
  %3009 = inttoptr i64 %3007 to i32*
  %3010 = load i32, i32* %3009, align 4
  %3011 = add i32 %3010, 3
  %3012 = zext i32 %3011 to i64
  store i64 %3012, i64* %RDX.i5152, align 8
  %3013 = lshr i32 %3011, 31
  %3014 = sub i32 %2985, %3011
  %3015 = icmp ult i32 %2985, %3011
  %3016 = zext i1 %3015 to i8
  store i8 %3016, i8* %20, align 1
  %3017 = and i32 %3014, 255
  %3018 = tail call i32 @llvm.ctpop.i32(i32 %3017)
  %3019 = trunc i32 %3018 to i8
  %3020 = and i8 %3019, 1
  %3021 = xor i8 %3020, 1
  store i8 %3021, i8* %27, align 1
  %3022 = xor i32 %3011, %2985
  %3023 = xor i32 %3022, %3014
  %3024 = lshr i32 %3023, 4
  %3025 = trunc i32 %3024 to i8
  %3026 = and i8 %3025, 1
  store i8 %3026, i8* %33, align 1
  %3027 = icmp eq i32 %3014, 0
  %3028 = zext i1 %3027 to i8
  store i8 %3028, i8* %36, align 1
  %3029 = lshr i32 %3014, 31
  %3030 = trunc i32 %3029 to i8
  store i8 %3030, i8* %39, align 1
  %3031 = xor i32 %3013, %3000
  %3032 = xor i32 %3029, %3000
  %3033 = add nuw nsw i32 %3032, %3031
  %3034 = icmp eq i32 %3033, 2
  %3035 = zext i1 %3034 to i8
  store i8 %3035, i8* %45, align 1
  %3036 = icmp ne i8 %3030, 0
  %3037 = xor i1 %3036, %3034
  %.v357 = select i1 %3037, i64 27, i64 51
  %3038 = add i64 %2971, %.v357
  store i64 %3038, i64* %3, align 8
  %3039 = load i64, i64* %RBP.i, align 8
  br i1 %3037, label %block_42e4d3, label %block_.L_42e4eb

block_42e4d3:                                     ; preds = %block_.L_42e4b8
  %3040 = add i64 %3039, -16
  %3041 = add i64 %3038, 4
  store i64 %3041, i64* %3, align 8
  %3042 = inttoptr i64 %3040 to i64*
  %3043 = load i64, i64* %3042, align 8
  store i64 %3043, i64* %RAX.i1585, align 8
  %3044 = add i64 %3043, 6392
  %3045 = add i64 %3038, 10
  store i64 %3045, i64* %3, align 8
  %3046 = inttoptr i64 %3044 to i32*
  %3047 = load i32, i32* %3046, align 4
  %3048 = add i32 %3047, -1
  %3049 = zext i32 %3048 to i64
  store i64 %3049, i64* %RCX.i3128, align 8
  %3050 = icmp eq i32 %3047, 0
  %3051 = zext i1 %3050 to i8
  store i8 %3051, i8* %20, align 1
  %3052 = and i32 %3048, 255
  %3053 = tail call i32 @llvm.ctpop.i32(i32 %3052)
  %3054 = trunc i32 %3053 to i8
  %3055 = and i8 %3054, 1
  %3056 = xor i8 %3055, 1
  store i8 %3056, i8* %27, align 1
  %3057 = xor i32 %3048, %3047
  %3058 = lshr i32 %3057, 4
  %3059 = trunc i32 %3058 to i8
  %3060 = and i8 %3059, 1
  store i8 %3060, i8* %33, align 1
  %3061 = icmp eq i32 %3048, 0
  %3062 = zext i1 %3061 to i8
  store i8 %3062, i8* %36, align 1
  %3063 = lshr i32 %3048, 31
  %3064 = trunc i32 %3063 to i8
  store i8 %3064, i8* %39, align 1
  %3065 = lshr i32 %3047, 31
  %3066 = xor i32 %3063, %3065
  %3067 = add nuw nsw i32 %3066, %3065
  %3068 = icmp eq i32 %3067, 2
  %3069 = zext i1 %3068 to i8
  store i8 %3069, i8* %45, align 1
  %3070 = add i64 %3039, -268
  %3071 = add i64 %3038, 19
  store i64 %3071, i64* %3, align 8
  %3072 = inttoptr i64 %3070 to i32*
  store i32 %3048, i32* %3072, align 4
  %3073 = load i64, i64* %3, align 8
  %3074 = add i64 %3073, 17
  store i64 %3074, i64* %3, align 8
  br label %block_.L_42e4f7

block_.L_42e4eb:                                  ; preds = %block_.L_42e4b8
  %3075 = add i64 %3039, -24
  %3076 = add i64 %3038, 3
  store i64 %3076, i64* %3, align 8
  %3077 = inttoptr i64 %3075 to i32*
  %3078 = load i32, i32* %3077, align 4
  %3079 = add i32 %3078, 3
  %3080 = zext i32 %3079 to i64
  store i64 %3080, i64* %RAX.i1585, align 8
  %3081 = icmp ugt i32 %3078, -4
  %3082 = zext i1 %3081 to i8
  store i8 %3082, i8* %20, align 1
  %3083 = and i32 %3079, 255
  %3084 = tail call i32 @llvm.ctpop.i32(i32 %3083)
  %3085 = trunc i32 %3084 to i8
  %3086 = and i8 %3085, 1
  %3087 = xor i8 %3086, 1
  store i8 %3087, i8* %27, align 1
  %3088 = xor i32 %3079, %3078
  %3089 = lshr i32 %3088, 4
  %3090 = trunc i32 %3089 to i8
  %3091 = and i8 %3090, 1
  store i8 %3091, i8* %33, align 1
  %3092 = icmp eq i32 %3079, 0
  %3093 = zext i1 %3092 to i8
  store i8 %3093, i8* %36, align 1
  %3094 = lshr i32 %3079, 31
  %3095 = trunc i32 %3094 to i8
  store i8 %3095, i8* %39, align 1
  %3096 = lshr i32 %3078, 31
  %3097 = xor i32 %3094, %3096
  %3098 = add nuw nsw i32 %3097, %3094
  %3099 = icmp eq i32 %3098, 2
  %3100 = zext i1 %3099 to i8
  store i8 %3100, i8* %45, align 1
  %3101 = add i64 %3039, -268
  %3102 = add i64 %3038, 12
  store i64 %3102, i64* %3, align 8
  %3103 = inttoptr i64 %3101 to i32*
  store i32 %3079, i32* %3103, align 4
  %.pre302 = load i64, i64* %3, align 8
  br label %block_.L_42e4f7

block_.L_42e4f7:                                  ; preds = %block_.L_42e4eb, %block_42e4d3
  %3104 = phi i64 [ %.pre302, %block_.L_42e4eb ], [ %3074, %block_42e4d3 ]
  %3105 = load i64, i64* %RBP.i, align 8
  %3106 = add i64 %3105, -268
  %3107 = add i64 %3104, 6
  store i64 %3107, i64* %3, align 8
  %3108 = inttoptr i64 %3106 to i32*
  %3109 = load i32, i32* %3108, align 4
  %3110 = zext i32 %3109 to i64
  store i64 %3110, i64* %RAX.i1585, align 8
  %3111 = add i64 %3105, -264
  %3112 = add i64 %3104, 12
  store i64 %3112, i64* %3, align 8
  %3113 = inttoptr i64 %3111 to i32*
  store i32 %3109, i32* %3113, align 4
  %.pre303 = load i64, i64* %3, align 8
  br label %block_.L_42e503

block_.L_42e503:                                  ; preds = %block_.L_42e4f7, %block_42e4ab
  %3114 = phi i64 [ %.pre303, %block_.L_42e4f7 ], [ %2976, %block_42e4ab ]
  %3115 = load i64, i64* %RBP.i, align 8
  %3116 = add i64 %3115, -264
  %3117 = add i64 %3114, 6
  store i64 %3117, i64* %3, align 8
  %3118 = inttoptr i64 %3116 to i32*
  %3119 = load i32, i32* %3118, align 4
  %3120 = zext i32 %3119 to i64
  store i64 %3120, i64* %RAX.i1585, align 8
  %3121 = sext i32 %3119 to i64
  store i64 %3121, i64* %RCX.i3128, align 8
  %3122 = add i64 %3115, -256
  %3123 = add i64 %3114, 16
  store i64 %3123, i64* %3, align 8
  %3124 = inttoptr i64 %3122 to i64*
  %3125 = load i64, i64* %3124, align 8
  store i64 %3125, i64* %RDX.i5152, align 8
  %3126 = shl nsw i64 %3121, 1
  %3127 = add i64 %3126, %3125
  %3128 = add i64 %3114, 20
  store i64 %3128, i64* %3, align 8
  %3129 = inttoptr i64 %3127 to i16*
  %3130 = load i16, i16* %3129, align 2
  %3131 = zext i16 %3130 to i64
  store i64 %3131, i64* %RAX.i1585, align 8
  %3132 = add i64 %3115, -248
  %3133 = add i64 %3114, 26
  store i64 %3133, i64* %3, align 8
  %3134 = inttoptr i64 %3132 to i32*
  %3135 = load i32, i32* %3134, align 4
  %3136 = zext i16 %3130 to i32
  %3137 = add i32 %3136, %3135
  %3138 = zext i32 %3137 to i64
  store i64 %3138, i64* %RSI.i5212, align 8
  %3139 = icmp ult i32 %3137, %3135
  %3140 = icmp ult i32 %3137, %3136
  %3141 = or i1 %3139, %3140
  %3142 = zext i1 %3141 to i8
  store i8 %3142, i8* %20, align 1
  %3143 = and i32 %3137, 255
  %3144 = tail call i32 @llvm.ctpop.i32(i32 %3143)
  %3145 = trunc i32 %3144 to i8
  %3146 = and i8 %3145, 1
  %3147 = xor i8 %3146, 1
  store i8 %3147, i8* %27, align 1
  %3148 = xor i32 %3136, %3135
  %3149 = xor i32 %3148, %3137
  %3150 = lshr i32 %3149, 4
  %3151 = trunc i32 %3150 to i8
  %3152 = and i8 %3151, 1
  store i8 %3152, i8* %33, align 1
  %3153 = icmp eq i32 %3137, 0
  %3154 = zext i1 %3153 to i8
  store i8 %3154, i8* %36, align 1
  %3155 = lshr i32 %3137, 31
  %3156 = trunc i32 %3155 to i8
  store i8 %3156, i8* %39, align 1
  %3157 = lshr i32 %3135, 31
  %3158 = xor i32 %3155, %3157
  %3159 = add nuw nsw i32 %3158, %3155
  %3160 = icmp eq i32 %3159, 2
  %3161 = zext i1 %3160 to i8
  store i8 %3161, i8* %45, align 1
  %3162 = add i64 %3115, -220
  %3163 = add i64 %3114, 34
  store i64 %3163, i64* %3, align 8
  %3164 = inttoptr i64 %3162 to i32*
  %3165 = load i32, i32* %3164, align 4
  %3166 = sext i32 %3165 to i64
  %3167 = sext i32 %3137 to i64
  %3168 = mul nsw i64 %3167, %3166
  %3169 = trunc i64 %3168 to i32
  %3170 = and i64 %3168, 4294967295
  store i64 %3170, i64* %RAX.i1585, align 8
  %3171 = shl i64 %3168, 32
  %3172 = ashr exact i64 %3171, 32
  %3173 = icmp ne i64 %3172, %3168
  %3174 = zext i1 %3173 to i8
  store i8 %3174, i8* %20, align 1
  %3175 = and i32 %3169, 255
  %3176 = tail call i32 @llvm.ctpop.i32(i32 %3175)
  %3177 = trunc i32 %3176 to i8
  %3178 = and i8 %3177, 1
  %3179 = xor i8 %3178, 1
  store i8 %3179, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  %3180 = lshr i32 %3169, 31
  %3181 = trunc i32 %3180 to i8
  store i8 %3181, i8* %39, align 1
  store i8 %3174, i8* %45, align 1
  %3182 = load i64, i64* %RBP.i, align 8
  %3183 = add i64 %3182, -216
  %3184 = add i64 %3114, 43
  store i64 %3184, i64* %3, align 8
  %3185 = inttoptr i64 %3183 to i32*
  %3186 = load i32, i32* %3185, align 4
  %3187 = trunc i64 %3168 to i32
  %3188 = add i32 %3187, %3186
  %3189 = zext i32 %3188 to i64
  store i64 %3189, i64* %RSI.i5212, align 8
  %3190 = icmp ult i32 %3188, %3186
  %3191 = icmp ult i32 %3188, %3187
  %3192 = or i1 %3190, %3191
  %3193 = zext i1 %3192 to i8
  store i8 %3193, i8* %20, align 1
  %3194 = and i32 %3188, 255
  %3195 = tail call i32 @llvm.ctpop.i32(i32 %3194)
  %3196 = trunc i32 %3195 to i8
  %3197 = and i8 %3196, 1
  %3198 = xor i8 %3197, 1
  store i8 %3198, i8* %27, align 1
  %3199 = xor i32 %3187, %3186
  %3200 = xor i32 %3199, %3188
  %3201 = lshr i32 %3200, 4
  %3202 = trunc i32 %3201 to i8
  %3203 = and i8 %3202, 1
  store i8 %3203, i8* %33, align 1
  %3204 = icmp eq i32 %3188, 0
  %3205 = zext i1 %3204 to i8
  store i8 %3205, i8* %36, align 1
  %3206 = lshr i32 %3188, 31
  %3207 = trunc i32 %3206 to i8
  store i8 %3207, i8* %39, align 1
  %3208 = lshr i32 %3186, 31
  %3209 = lshr i32 %3187, 31
  %3210 = xor i32 %3206, %3208
  %3211 = xor i32 %3206, %3209
  %3212 = add nuw nsw i32 %3210, %3211
  %3213 = icmp eq i32 %3212, 2
  %3214 = zext i1 %3213 to i8
  store i8 %3214, i8* %45, align 1
  %3215 = add i64 %3182, -20
  %3216 = add i64 %3114, 48
  store i64 %3216, i64* %3, align 8
  %3217 = inttoptr i64 %3215 to i32*
  store i32 %3188, i32* %3217, align 4
  %3218 = load i64, i64* %RBP.i, align 8
  %3219 = add i64 %3218, -72
  %3220 = load i64, i64* %3, align 8
  %3221 = add i64 %3220, 4
  store i64 %3221, i64* %3, align 8
  %3222 = inttoptr i64 %3219 to i64*
  %3223 = load i64, i64* %3222, align 8
  store i64 %3223, i64* %RCX.i3128, align 8
  %3224 = add i64 %3218, -44
  %3225 = add i64 %3220, 8
  store i64 %3225, i64* %3, align 8
  %3226 = inttoptr i64 %3224 to i32*
  %3227 = load i32, i32* %3226, align 4
  %3228 = sext i32 %3227 to i64
  store i64 %3228, i64* %RDI.i605, align 8
  %3229 = shl nsw i64 %3228, 3
  %3230 = add i64 %3229, %3223
  %3231 = add i64 %3220, 12
  store i64 %3231, i64* %3, align 8
  %3232 = inttoptr i64 %3230 to i64*
  %3233 = load i64, i64* %3232, align 8
  store i64 %3233, i64* %RCX.i3128, align 8
  %3234 = add i64 %3218, -16
  %3235 = add i64 %3220, 16
  store i64 %3235, i64* %3, align 8
  %3236 = inttoptr i64 %3234 to i64*
  %3237 = load i64, i64* %3236, align 8
  store i64 %3237, i64* %RDI.i605, align 8
  %3238 = add i64 %3237, 6392
  %3239 = add i64 %3220, 22
  store i64 %3239, i64* %3, align 8
  %3240 = inttoptr i64 %3238 to i32*
  %3241 = load i32, i32* %3240, align 4
  %3242 = add i32 %3241, -1
  %3243 = zext i32 %3242 to i64
  store i64 %3243, i64* %RAX.i1585, align 8
  %3244 = icmp eq i32 %3241, 0
  %3245 = zext i1 %3244 to i8
  store i8 %3245, i8* %20, align 1
  %3246 = and i32 %3242, 255
  %3247 = tail call i32 @llvm.ctpop.i32(i32 %3246)
  %3248 = trunc i32 %3247 to i8
  %3249 = and i8 %3248, 1
  %3250 = xor i8 %3249, 1
  store i8 %3250, i8* %27, align 1
  %3251 = xor i32 %3242, %3241
  %3252 = lshr i32 %3251, 4
  %3253 = trunc i32 %3252 to i8
  %3254 = and i8 %3253, 1
  store i8 %3254, i8* %33, align 1
  %3255 = icmp eq i32 %3242, 0
  %3256 = zext i1 %3255 to i8
  store i8 %3256, i8* %36, align 1
  %3257 = lshr i32 %3242, 31
  %3258 = trunc i32 %3257 to i8
  store i8 %3258, i8* %39, align 1
  %3259 = lshr i32 %3241, 31
  %3260 = xor i32 %3257, %3259
  %3261 = add nuw nsw i32 %3260, %3259
  %3262 = icmp eq i32 %3261, 2
  %3263 = zext i1 %3262 to i8
  store i8 %3263, i8* %45, align 1
  %3264 = add i64 %3218, -24
  %3265 = add i64 %3220, 28
  store i64 %3265, i64* %3, align 8
  %3266 = inttoptr i64 %3264 to i32*
  %3267 = load i32, i32* %3266, align 4
  %3268 = sub i32 %3242, %3267
  %3269 = icmp ult i32 %3242, %3267
  %3270 = zext i1 %3269 to i8
  store i8 %3270, i8* %20, align 1
  %3271 = and i32 %3268, 255
  %3272 = tail call i32 @llvm.ctpop.i32(i32 %3271)
  %3273 = trunc i32 %3272 to i8
  %3274 = and i8 %3273, 1
  %3275 = xor i8 %3274, 1
  store i8 %3275, i8* %27, align 1
  %3276 = xor i32 %3267, %3242
  %3277 = xor i32 %3276, %3268
  %3278 = lshr i32 %3277, 4
  %3279 = trunc i32 %3278 to i8
  %3280 = and i8 %3279, 1
  store i8 %3280, i8* %33, align 1
  %3281 = icmp eq i32 %3268, 0
  %3282 = zext i1 %3281 to i8
  store i8 %3282, i8* %36, align 1
  %3283 = lshr i32 %3268, 31
  %3284 = trunc i32 %3283 to i8
  store i8 %3284, i8* %39, align 1
  %3285 = lshr i32 %3267, 31
  %3286 = xor i32 %3285, %3257
  %3287 = xor i32 %3283, %3257
  %3288 = add nuw nsw i32 %3287, %3286
  %3289 = icmp eq i32 %3288, 2
  %3290 = zext i1 %3289 to i8
  store i8 %3290, i8* %45, align 1
  %3291 = load i64, i64* %RBP.i, align 8
  %3292 = add i64 %3291, -280
  %3293 = add i64 %3220, 35
  store i64 %3293, i64* %3, align 8
  %3294 = inttoptr i64 %3292 to i64*
  store i64 %3233, i64* %3294, align 8
  %3295 = load i64, i64* %3, align 8
  %3296 = load i8, i8* %39, align 1
  %3297 = icmp ne i8 %3296, 0
  %3298 = load i8, i8* %45, align 1
  %3299 = icmp ne i8 %3298, 0
  %3300 = xor i1 %3297, %3299
  %.v414 = select i1 %3300, i64 6, i64 30
  %3301 = add i64 %3295, %.v414
  store i64 %3301, i64* %3, align 8
  %3302 = load i64, i64* %RBP.i, align 8
  br i1 %3300, label %block_42e55c, label %block_.L_42e574

block_42e55c:                                     ; preds = %block_.L_42e503
  %3303 = add i64 %3302, -16
  %3304 = add i64 %3301, 4
  store i64 %3304, i64* %3, align 8
  %3305 = inttoptr i64 %3303 to i64*
  %3306 = load i64, i64* %3305, align 8
  store i64 %3306, i64* %RAX.i1585, align 8
  %3307 = add i64 %3306, 6392
  %3308 = add i64 %3301, 10
  store i64 %3308, i64* %3, align 8
  %3309 = inttoptr i64 %3307 to i32*
  %3310 = load i32, i32* %3309, align 4
  %3311 = add i32 %3310, -1
  %3312 = zext i32 %3311 to i64
  store i64 %3312, i64* %RCX.i3128, align 8
  %3313 = icmp eq i32 %3310, 0
  %3314 = zext i1 %3313 to i8
  store i8 %3314, i8* %20, align 1
  %3315 = and i32 %3311, 255
  %3316 = tail call i32 @llvm.ctpop.i32(i32 %3315)
  %3317 = trunc i32 %3316 to i8
  %3318 = and i8 %3317, 1
  %3319 = xor i8 %3318, 1
  store i8 %3319, i8* %27, align 1
  %3320 = xor i32 %3311, %3310
  %3321 = lshr i32 %3320, 4
  %3322 = trunc i32 %3321 to i8
  %3323 = and i8 %3322, 1
  store i8 %3323, i8* %33, align 1
  %3324 = icmp eq i32 %3311, 0
  %3325 = zext i1 %3324 to i8
  store i8 %3325, i8* %36, align 1
  %3326 = lshr i32 %3311, 31
  %3327 = trunc i32 %3326 to i8
  store i8 %3327, i8* %39, align 1
  %3328 = lshr i32 %3310, 31
  %3329 = xor i32 %3326, %3328
  %3330 = add nuw nsw i32 %3329, %3328
  %3331 = icmp eq i32 %3330, 2
  %3332 = zext i1 %3331 to i8
  store i8 %3332, i8* %45, align 1
  %3333 = add i64 %3302, -284
  %3334 = add i64 %3301, 19
  store i64 %3334, i64* %3, align 8
  %3335 = inttoptr i64 %3333 to i32*
  store i32 %3311, i32* %3335, align 4
  %3336 = load i64, i64* %3, align 8
  %3337 = add i64 %3336, 14
  store i64 %3337, i64* %3, align 8
  br label %block_.L_42e57d

block_.L_42e574:                                  ; preds = %block_.L_42e503
  %3338 = add i64 %3302, -24
  %3339 = add i64 %3301, 3
  store i64 %3339, i64* %3, align 8
  %3340 = inttoptr i64 %3338 to i32*
  %3341 = load i32, i32* %3340, align 4
  %3342 = zext i32 %3341 to i64
  store i64 %3342, i64* %RAX.i1585, align 8
  %3343 = add i64 %3302, -284
  %3344 = add i64 %3301, 9
  store i64 %3344, i64* %3, align 8
  %3345 = inttoptr i64 %3343 to i32*
  store i32 %3341, i32* %3345, align 4
  %.pre304 = load i64, i64* %3, align 8
  br label %block_.L_42e57d

block_.L_42e57d:                                  ; preds = %block_.L_42e574, %block_42e55c
  %3346 = phi i64 [ %.pre304, %block_.L_42e574 ], [ %3337, %block_42e55c ]
  %3347 = load i64, i64* %RBP.i, align 8
  %3348 = add i64 %3347, -284
  %3349 = add i64 %3346, 6
  store i64 %3349, i64* %3, align 8
  %3350 = inttoptr i64 %3348 to i32*
  %3351 = load i32, i32* %3350, align 4
  %3352 = zext i32 %3351 to i64
  store i64 %3352, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %3353 = sub i32 0, %3351
  %3354 = icmp ne i32 %3351, 0
  %3355 = zext i1 %3354 to i8
  store i8 %3355, i8* %20, align 1
  %3356 = and i32 %3353, 255
  %3357 = tail call i32 @llvm.ctpop.i32(i32 %3356)
  %3358 = trunc i32 %3357 to i8
  %3359 = and i8 %3358, 1
  %3360 = xor i8 %3359, 1
  store i8 %3360, i8* %27, align 1
  %3361 = xor i32 %3351, %3353
  %3362 = lshr i32 %3361, 4
  %3363 = trunc i32 %3362 to i8
  %3364 = and i8 %3363, 1
  store i8 %3364, i8* %33, align 1
  %3365 = icmp eq i32 %3351, 0
  %3366 = zext i1 %3365 to i8
  store i8 %3366, i8* %36, align 1
  %3367 = lshr i32 %3353, 31
  %3368 = trunc i32 %3367 to i8
  store i8 %3368, i8* %39, align 1
  %3369 = lshr i32 %3351, 31
  %3370 = add nuw nsw i32 %3367, %3369
  %3371 = icmp eq i32 %3370, 2
  %3372 = zext i1 %3371 to i8
  store i8 %3372, i8* %45, align 1
  %3373 = icmp ne i8 %3368, 0
  %3374 = xor i1 %3373, %3371
  %3375 = or i1 %3365, %3374
  %.v355 = select i1 %3375, i64 29, i64 16
  %3376 = add i64 %3346, %.v355
  store i64 %3376, i64* %3, align 8
  br i1 %3375, label %block_.L_42e59a, label %block_42e58d

block_42e58d:                                     ; preds = %block_.L_42e57d
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %3377 = add i64 %3347, -288
  %3378 = add i64 %3376, 8
  store i64 %3378, i64* %3, align 8
  %3379 = inttoptr i64 %3377 to i32*
  store i32 0, i32* %3379, align 4
  %3380 = load i64, i64* %3, align 8
  %3381 = add i64 %3380, 72
  store i64 %3381, i64* %3, align 8
  br label %block_.L_42e5dd

block_.L_42e59a:                                  ; preds = %block_.L_42e57d
  %3382 = add i64 %3347, -16
  %3383 = add i64 %3376, 4
  store i64 %3383, i64* %3, align 8
  %3384 = inttoptr i64 %3382 to i64*
  %3385 = load i64, i64* %3384, align 8
  store i64 %3385, i64* %RAX.i1585, align 8
  %3386 = add i64 %3385, 6392
  %3387 = add i64 %3376, 10
  store i64 %3387, i64* %3, align 8
  %3388 = inttoptr i64 %3386 to i32*
  %3389 = load i32, i32* %3388, align 4
  %3390 = add i32 %3389, -1
  %3391 = zext i32 %3390 to i64
  store i64 %3391, i64* %RCX.i3128, align 8
  %3392 = icmp eq i32 %3389, 0
  %3393 = zext i1 %3392 to i8
  store i8 %3393, i8* %20, align 1
  %3394 = and i32 %3390, 255
  %3395 = tail call i32 @llvm.ctpop.i32(i32 %3394)
  %3396 = trunc i32 %3395 to i8
  %3397 = and i8 %3396, 1
  %3398 = xor i8 %3397, 1
  store i8 %3398, i8* %27, align 1
  %3399 = xor i32 %3390, %3389
  %3400 = lshr i32 %3399, 4
  %3401 = trunc i32 %3400 to i8
  %3402 = and i8 %3401, 1
  store i8 %3402, i8* %33, align 1
  %3403 = icmp eq i32 %3390, 0
  %3404 = zext i1 %3403 to i8
  store i8 %3404, i8* %36, align 1
  %3405 = lshr i32 %3390, 31
  %3406 = trunc i32 %3405 to i8
  store i8 %3406, i8* %39, align 1
  %3407 = lshr i32 %3389, 31
  %3408 = xor i32 %3405, %3407
  %3409 = add nuw nsw i32 %3408, %3407
  %3410 = icmp eq i32 %3409, 2
  %3411 = zext i1 %3410 to i8
  store i8 %3411, i8* %45, align 1
  %3412 = add i64 %3347, -24
  %3413 = add i64 %3376, 16
  store i64 %3413, i64* %3, align 8
  %3414 = inttoptr i64 %3412 to i32*
  %3415 = load i32, i32* %3414, align 4
  %3416 = sub i32 %3390, %3415
  %3417 = icmp ult i32 %3390, %3415
  %3418 = zext i1 %3417 to i8
  store i8 %3418, i8* %20, align 1
  %3419 = and i32 %3416, 255
  %3420 = tail call i32 @llvm.ctpop.i32(i32 %3419)
  %3421 = trunc i32 %3420 to i8
  %3422 = and i8 %3421, 1
  %3423 = xor i8 %3422, 1
  store i8 %3423, i8* %27, align 1
  %3424 = xor i32 %3415, %3390
  %3425 = xor i32 %3424, %3416
  %3426 = lshr i32 %3425, 4
  %3427 = trunc i32 %3426 to i8
  %3428 = and i8 %3427, 1
  store i8 %3428, i8* %33, align 1
  %3429 = icmp eq i32 %3416, 0
  %3430 = zext i1 %3429 to i8
  store i8 %3430, i8* %36, align 1
  %3431 = lshr i32 %3416, 31
  %3432 = trunc i32 %3431 to i8
  store i8 %3432, i8* %39, align 1
  %3433 = lshr i32 %3415, 31
  %3434 = xor i32 %3433, %3405
  %3435 = xor i32 %3431, %3405
  %3436 = add nuw nsw i32 %3435, %3434
  %3437 = icmp eq i32 %3436, 2
  %3438 = zext i1 %3437 to i8
  store i8 %3438, i8* %45, align 1
  %3439 = icmp ne i8 %3432, 0
  %3440 = xor i1 %3439, %3437
  %.v356 = select i1 %3440, i64 22, i64 46
  %3441 = add i64 %3376, %.v356
  store i64 %3441, i64* %3, align 8
  br i1 %3440, label %block_42e5b0, label %block_.L_42e5c8

block_42e5b0:                                     ; preds = %block_.L_42e59a
  %3442 = add i64 %3441, 4
  store i64 %3442, i64* %3, align 8
  %3443 = load i64, i64* %3384, align 8
  store i64 %3443, i64* %RAX.i1585, align 8
  %3444 = add i64 %3443, 6392
  %3445 = add i64 %3441, 10
  store i64 %3445, i64* %3, align 8
  %3446 = inttoptr i64 %3444 to i32*
  %3447 = load i32, i32* %3446, align 4
  %3448 = add i32 %3447, -1
  %3449 = zext i32 %3448 to i64
  store i64 %3449, i64* %RCX.i3128, align 8
  %3450 = icmp eq i32 %3447, 0
  %3451 = zext i1 %3450 to i8
  store i8 %3451, i8* %20, align 1
  %3452 = and i32 %3448, 255
  %3453 = tail call i32 @llvm.ctpop.i32(i32 %3452)
  %3454 = trunc i32 %3453 to i8
  %3455 = and i8 %3454, 1
  %3456 = xor i8 %3455, 1
  store i8 %3456, i8* %27, align 1
  %3457 = xor i32 %3448, %3447
  %3458 = lshr i32 %3457, 4
  %3459 = trunc i32 %3458 to i8
  %3460 = and i8 %3459, 1
  store i8 %3460, i8* %33, align 1
  %3461 = icmp eq i32 %3448, 0
  %3462 = zext i1 %3461 to i8
  store i8 %3462, i8* %36, align 1
  %3463 = lshr i32 %3448, 31
  %3464 = trunc i32 %3463 to i8
  store i8 %3464, i8* %39, align 1
  %3465 = lshr i32 %3447, 31
  %3466 = xor i32 %3463, %3465
  %3467 = add nuw nsw i32 %3466, %3465
  %3468 = icmp eq i32 %3467, 2
  %3469 = zext i1 %3468 to i8
  store i8 %3469, i8* %45, align 1
  %3470 = add i64 %3347, -292
  %3471 = add i64 %3441, 19
  store i64 %3471, i64* %3, align 8
  %3472 = inttoptr i64 %3470 to i32*
  store i32 %3448, i32* %3472, align 4
  %3473 = load i64, i64* %3, align 8
  %3474 = add i64 %3473, 14
  store i64 %3474, i64* %3, align 8
  br label %block_.L_42e5d1

block_.L_42e5c8:                                  ; preds = %block_.L_42e59a
  %3475 = add i64 %3441, 3
  store i64 %3475, i64* %3, align 8
  %3476 = load i32, i32* %3414, align 4
  %3477 = zext i32 %3476 to i64
  store i64 %3477, i64* %RAX.i1585, align 8
  %3478 = add i64 %3347, -292
  %3479 = add i64 %3441, 9
  store i64 %3479, i64* %3, align 8
  %3480 = inttoptr i64 %3478 to i32*
  store i32 %3476, i32* %3480, align 4
  %.pre305 = load i64, i64* %3, align 8
  br label %block_.L_42e5d1

block_.L_42e5d1:                                  ; preds = %block_.L_42e5c8, %block_42e5b0
  %3481 = phi i64 [ %.pre305, %block_.L_42e5c8 ], [ %3474, %block_42e5b0 ]
  %3482 = load i64, i64* %RBP.i, align 8
  %3483 = add i64 %3482, -292
  %3484 = add i64 %3481, 6
  store i64 %3484, i64* %3, align 8
  %3485 = inttoptr i64 %3483 to i32*
  %3486 = load i32, i32* %3485, align 4
  %3487 = zext i32 %3486 to i64
  store i64 %3487, i64* %RAX.i1585, align 8
  %3488 = add i64 %3482, -288
  %3489 = add i64 %3481, 12
  store i64 %3489, i64* %3, align 8
  %3490 = inttoptr i64 %3488 to i32*
  store i32 %3486, i32* %3490, align 4
  %.pre306 = load i64, i64* %3, align 8
  br label %block_.L_42e5dd

block_.L_42e5dd:                                  ; preds = %block_.L_42e5d1, %block_42e58d
  %3491 = phi i64 [ %.pre306, %block_.L_42e5d1 ], [ %3381, %block_42e58d ]
  %3492 = load i64, i64* %RBP.i, align 8
  %3493 = add i64 %3492, -288
  %3494 = add i64 %3491, 6
  store i64 %3494, i64* %3, align 8
  %3495 = inttoptr i64 %3493 to i32*
  %3496 = load i32, i32* %3495, align 4
  %3497 = zext i32 %3496 to i64
  store i64 %3497, i64* %RAX.i1585, align 8
  %3498 = sext i32 %3496 to i64
  store i64 %3498, i64* %RCX.i3128, align 8
  %3499 = add i64 %3492, -280
  %3500 = add i64 %3491, 16
  store i64 %3500, i64* %3, align 8
  %3501 = inttoptr i64 %3499 to i64*
  %3502 = load i64, i64* %3501, align 8
  store i64 %3502, i64* %RDX.i5152, align 8
  %3503 = shl nsw i64 %3498, 1
  %3504 = add i64 %3503, %3502
  %3505 = add i64 %3491, 20
  store i64 %3505, i64* %3, align 8
  %3506 = inttoptr i64 %3504 to i16*
  %3507 = load i16, i16* %3506, align 2
  %3508 = zext i16 %3507 to i64
  %3509 = shl nuw nsw i64 %3508, 10
  store i64 %3509, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %3510 = icmp eq i16 %3507, 0
  %3511 = zext i1 %3510 to i8
  store i8 %3511, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %3512 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %3512, i64* %RCX.i3128, align 8
  %3513 = add i64 %3492, -28
  %3514 = add i64 %3491, 34
  store i64 %3514, i64* %3, align 8
  %3515 = inttoptr i64 %3513 to i32*
  %3516 = load i32, i32* %3515, align 4
  %3517 = add i32 %3516, 4
  %3518 = zext i32 %3517 to i64
  store i64 %3518, i64* %RSI.i5212, align 8
  %3519 = icmp ugt i32 %3516, -5
  %3520 = zext i1 %3519 to i8
  store i8 %3520, i8* %20, align 1
  %3521 = and i32 %3517, 255
  %3522 = tail call i32 @llvm.ctpop.i32(i32 %3521)
  %3523 = trunc i32 %3522 to i8
  %3524 = and i8 %3523, 1
  %3525 = xor i8 %3524, 1
  store i8 %3525, i8* %27, align 1
  %3526 = xor i32 %3517, %3516
  %3527 = lshr i32 %3526, 4
  %3528 = trunc i32 %3527 to i8
  %3529 = and i8 %3528, 1
  store i8 %3529, i8* %33, align 1
  %3530 = icmp eq i32 %3517, 0
  %3531 = zext i1 %3530 to i8
  store i8 %3531, i8* %36, align 1
  %3532 = lshr i32 %3517, 31
  %3533 = trunc i32 %3532 to i8
  store i8 %3533, i8* %39, align 1
  %3534 = lshr i32 %3516, 31
  %3535 = xor i32 %3532, %3534
  %3536 = add nuw nsw i32 %3535, %3532
  %3537 = icmp eq i32 %3536, 2
  %3538 = zext i1 %3537 to i8
  store i8 %3538, i8* %45, align 1
  %3539 = sext i32 %3517 to i64
  store i64 %3539, i64* %RDI.i605, align 8
  %3540 = shl nsw i64 %3539, 3
  %3541 = add i64 %3512, %3540
  %3542 = add i64 %3491, 44
  store i64 %3542, i64* %3, align 8
  %3543 = inttoptr i64 %3541 to i64*
  %3544 = load i64, i64* %3543, align 8
  store i64 %3544, i64* %RCX.i3128, align 8
  %3545 = add i64 %3492, -24
  %3546 = add i64 %3491, 47
  store i64 %3546, i64* %3, align 8
  %3547 = inttoptr i64 %3545 to i32*
  %3548 = load i32, i32* %3547, align 4
  %3549 = add i32 %3548, 4
  %3550 = lshr i32 %3549, 31
  %3551 = trunc i32 %3550 to i8
  %3552 = shl i32 %3549, 1
  %3553 = icmp slt i32 %3549, 0
  %3554 = icmp slt i32 %3552, 0
  %3555 = xor i1 %3553, %3554
  %3556 = zext i32 %3552 to i64
  store i64 %3556, i64* %RSI.i5212, align 8
  store i8 %3551, i8* %20, align 1
  %3557 = and i32 %3552, 254
  %3558 = tail call i32 @llvm.ctpop.i32(i32 %3557)
  %3559 = trunc i32 %3558 to i8
  %3560 = and i8 %3559, 1
  %3561 = xor i8 %3560, 1
  store i8 %3561, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %3562 = icmp eq i32 %3552, 0
  %3563 = zext i1 %3562 to i8
  store i8 %3563, i8* %36, align 1
  %3564 = lshr i32 %3549, 30
  %3565 = trunc i32 %3564 to i8
  %3566 = and i8 %3565, 1
  store i8 %3566, i8* %39, align 1
  %3567 = zext i1 %3555 to i8
  store i8 %3567, i8* %45, align 1
  %3568 = sext i32 %3552 to i64
  store i64 %3568, i64* %RDI.i605, align 8
  %3569 = shl nsw i64 %3568, 2
  %3570 = add i64 %3544, %3569
  %3571 = load i32, i32* %EAX.i1609, align 4
  %3572 = add i64 %3491, 58
  store i64 %3572, i64* %3, align 8
  %3573 = inttoptr i64 %3570 to i32*
  store i32 %3571, i32* %3573, align 4
  %3574 = load i64, i64* %RBP.i, align 8
  %3575 = add i64 %3574, -20
  %3576 = load i64, i64* %3, align 8
  %3577 = add i64 %3576, 3
  store i64 %3577, i64* %3, align 8
  %3578 = inttoptr i64 %3575 to i32*
  %3579 = load i32, i32* %3578, align 4
  %3580 = shl i32 %3579, 5
  %3581 = zext i32 %3580 to i64
  store i64 %3581, i64* %RAX.i1585, align 8
  %3582 = lshr i32 %3579, 27
  %3583 = trunc i32 %3582 to i8
  %3584 = and i8 %3583, 1
  store i8 %3584, i8* %20, align 1
  %3585 = and i32 %3580, 224
  %3586 = tail call i32 @llvm.ctpop.i32(i32 %3585)
  %3587 = trunc i32 %3586 to i8
  %3588 = and i8 %3587, 1
  %3589 = xor i8 %3588, 1
  store i8 %3589, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %3590 = icmp eq i32 %3580, 0
  %3591 = zext i1 %3590 to i8
  store i8 %3591, i8* %36, align 1
  %3592 = lshr i32 %3579, 26
  %3593 = trunc i32 %3592 to i8
  %3594 = and i8 %3593, 1
  store i8 %3594, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %3595 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %3595, i64* %RCX.i3128, align 8
  %3596 = add i64 %3574, -28
  %3597 = add i64 %3576, 17
  store i64 %3597, i64* %3, align 8
  %3598 = inttoptr i64 %3596 to i32*
  %3599 = load i32, i32* %3598, align 4
  %3600 = add i32 %3599, 4
  %3601 = zext i32 %3600 to i64
  store i64 %3601, i64* %RSI.i5212, align 8
  %3602 = icmp ugt i32 %3599, -5
  %3603 = zext i1 %3602 to i8
  store i8 %3603, i8* %20, align 1
  %3604 = and i32 %3600, 255
  %3605 = tail call i32 @llvm.ctpop.i32(i32 %3604)
  %3606 = trunc i32 %3605 to i8
  %3607 = and i8 %3606, 1
  %3608 = xor i8 %3607, 1
  store i8 %3608, i8* %27, align 1
  %3609 = xor i32 %3600, %3599
  %3610 = lshr i32 %3609, 4
  %3611 = trunc i32 %3610 to i8
  %3612 = and i8 %3611, 1
  store i8 %3612, i8* %33, align 1
  %3613 = icmp eq i32 %3600, 0
  %3614 = zext i1 %3613 to i8
  store i8 %3614, i8* %36, align 1
  %3615 = lshr i32 %3600, 31
  %3616 = trunc i32 %3615 to i8
  store i8 %3616, i8* %39, align 1
  %3617 = lshr i32 %3599, 31
  %3618 = xor i32 %3615, %3617
  %3619 = add nuw nsw i32 %3618, %3615
  %3620 = icmp eq i32 %3619, 2
  %3621 = zext i1 %3620 to i8
  store i8 %3621, i8* %45, align 1
  %3622 = sext i32 %3600 to i64
  store i64 %3622, i64* %RDI.i605, align 8
  %3623 = shl nsw i64 %3622, 3
  %3624 = add i64 %3595, %3623
  %3625 = add i64 %3576, 27
  store i64 %3625, i64* %3, align 8
  %3626 = inttoptr i64 %3624 to i64*
  %3627 = load i64, i64* %3626, align 8
  store i64 %3627, i64* %RCX.i3128, align 8
  %3628 = add i64 %3574, -24
  %3629 = add i64 %3576, 30
  store i64 %3629, i64* %3, align 8
  %3630 = inttoptr i64 %3628 to i32*
  %3631 = load i32, i32* %3630, align 4
  %3632 = add i32 %3631, 4
  %3633 = shl i32 %3632, 1
  %3634 = or i32 %3633, 1
  %3635 = zext i32 %3634 to i64
  store i64 %3635, i64* %RSI.i5212, align 8
  store i8 0, i8* %20, align 1
  %3636 = and i32 %3634, 255
  %3637 = tail call i32 @llvm.ctpop.i32(i32 %3636)
  %3638 = trunc i32 %3637 to i8
  %3639 = and i8 %3638, 1
  %3640 = xor i8 %3639, 1
  store i8 %3640, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  %3641 = lshr i32 %3632, 30
  %3642 = and i32 %3641, 1
  %3643 = trunc i32 %3642 to i8
  store i8 %3643, i8* %39, align 1
  %3644 = lshr i32 %3632, 30
  %3645 = and i32 %3644, 1
  %3646 = xor i32 %3642, %3645
  %3647 = add nuw nsw i32 %3646, %3642
  %3648 = icmp eq i32 %3647, 2
  %3649 = zext i1 %3648 to i8
  store i8 %3649, i8* %45, align 1
  %3650 = sext i32 %3634 to i64
  store i64 %3650, i64* %RDI.i605, align 8
  %3651 = shl nsw i64 %3650, 2
  %3652 = add i64 %3627, %3651
  %3653 = load i32, i32* %EAX.i1609, align 4
  %3654 = add i64 %3576, 44
  store i64 %3654, i64* %3, align 8
  %3655 = inttoptr i64 %3652 to i32*
  store i32 %3653, i32* %3655, align 4
  %3656 = load i64, i64* %RBP.i, align 8
  %3657 = add i64 %3656, -24
  %3658 = load i64, i64* %3, align 8
  %3659 = add i64 %3658, 3
  store i64 %3659, i64* %3, align 8
  %3660 = inttoptr i64 %3657 to i32*
  %3661 = load i32, i32* %3660, align 4
  %3662 = add i32 %3661, 1
  %3663 = zext i32 %3662 to i64
  store i64 %3663, i64* %RAX.i1585, align 8
  %3664 = icmp eq i32 %3661, -1
  %3665 = icmp eq i32 %3662, 0
  %3666 = or i1 %3664, %3665
  %3667 = zext i1 %3666 to i8
  store i8 %3667, i8* %20, align 1
  %3668 = and i32 %3662, 255
  %3669 = tail call i32 @llvm.ctpop.i32(i32 %3668)
  %3670 = trunc i32 %3669 to i8
  %3671 = and i8 %3670, 1
  %3672 = xor i8 %3671, 1
  store i8 %3672, i8* %27, align 1
  %3673 = xor i32 %3662, %3661
  %3674 = lshr i32 %3673, 4
  %3675 = trunc i32 %3674 to i8
  %3676 = and i8 %3675, 1
  store i8 %3676, i8* %33, align 1
  %3677 = zext i1 %3665 to i8
  store i8 %3677, i8* %36, align 1
  %3678 = lshr i32 %3662, 31
  %3679 = trunc i32 %3678 to i8
  store i8 %3679, i8* %39, align 1
  %3680 = lshr i32 %3661, 31
  %3681 = xor i32 %3678, %3680
  %3682 = add nuw nsw i32 %3681, %3678
  %3683 = icmp eq i32 %3682, 2
  %3684 = zext i1 %3683 to i8
  store i8 %3684, i8* %45, align 1
  %3685 = add i64 %3658, 9
  store i64 %3685, i64* %3, align 8
  store i32 %3662, i32* %3660, align 4
  %3686 = load i64, i64* %3, align 8
  %3687 = add i64 %3686, -1788
  store i64 %3687, i64* %3, align 8
  br label %block_.L_42df52

block_.L_42e653:                                  ; preds = %block_.L_42df52
  %3688 = add i64 %651, -28
  %3689 = add i64 %693, 8
  store i64 %3689, i64* %3, align 8
  %3690 = inttoptr i64 %3688 to i32*
  %3691 = load i32, i32* %3690, align 4
  %3692 = add i32 %3691, 1
  %3693 = zext i32 %3692 to i64
  store i64 %3693, i64* %RAX.i1585, align 8
  %3694 = icmp eq i32 %3691, -1
  %3695 = icmp eq i32 %3692, 0
  %3696 = or i1 %3694, %3695
  %3697 = zext i1 %3696 to i8
  store i8 %3697, i8* %20, align 1
  %3698 = and i32 %3692, 255
  %3699 = tail call i32 @llvm.ctpop.i32(i32 %3698)
  %3700 = trunc i32 %3699 to i8
  %3701 = and i8 %3700, 1
  %3702 = xor i8 %3701, 1
  store i8 %3702, i8* %27, align 1
  %3703 = xor i32 %3692, %3691
  %3704 = lshr i32 %3703, 4
  %3705 = trunc i32 %3704 to i8
  %3706 = and i8 %3705, 1
  store i8 %3706, i8* %33, align 1
  %3707 = zext i1 %3695 to i8
  store i8 %3707, i8* %36, align 1
  %3708 = lshr i32 %3692, 31
  %3709 = trunc i32 %3708 to i8
  store i8 %3709, i8* %39, align 1
  %3710 = lshr i32 %3691, 31
  %3711 = xor i32 %3708, %3710
  %3712 = add nuw nsw i32 %3711, %3708
  %3713 = icmp eq i32 %3712, 2
  %3714 = zext i1 %3713 to i8
  store i8 %3714, i8* %45, align 1
  %3715 = add i64 %693, 14
  store i64 %3715, i64* %3, align 8
  store i32 %3692, i32* %3690, align 4
  %3716 = load i64, i64* %3, align 8
  %3717 = add i64 %3716, -1838
  store i64 %3717, i64* %3, align 8
  br label %block_.L_42df33

block_.L_42e666:                                  ; preds = %block_.L_42df33
  store i32 0, i32* %649, align 4
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D.i3532 = bitcast %union.anon* %3719 to i32*
  %3720 = getelementptr inbounds %union.anon, %union.anon* %3719, i64 0, i32 0
  %3721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D.i3523 = bitcast %union.anon* %3721 to i32*
  %3722 = getelementptr inbounds %union.anon, %union.anon* %3721, i64 0, i32 0
  %EBX.i = bitcast %union.anon* %11 to i32*
  %AX.i3315 = bitcast %union.anon* %71 to i16*
  %CX.i3316 = bitcast %union.anon* %136 to i16*
  %.pre144 = load i64, i64* %3, align 8
  br label %block_.L_42e66d

block_.L_42e66d:                                  ; preds = %block_.L_42ec69, %block_.L_42e666
  %3723 = phi i64 [ %.pre144, %block_.L_42e666 ], [ %5875, %block_.L_42ec69 ]
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.4, %block_.L_42e666 ], [ %MEMORY.32, %block_.L_42ec69 ]
  %3724 = load i64, i64* %RBP.i, align 8
  %3725 = add i64 %3724, -24
  %3726 = add i64 %3723, 3
  store i64 %3726, i64* %3, align 8
  %3727 = inttoptr i64 %3725 to i32*
  %3728 = load i32, i32* %3727, align 4
  %3729 = zext i32 %3728 to i64
  store i64 %3729, i64* %RAX.i1585, align 8
  %3730 = add i64 %3724, -16
  %3731 = add i64 %3723, 7
  store i64 %3731, i64* %3, align 8
  %3732 = inttoptr i64 %3730 to i64*
  %3733 = load i64, i64* %3732, align 8
  store i64 %3733, i64* %RCX.i3128, align 8
  %3734 = add i64 %3733, 6392
  %3735 = add i64 %3723, 13
  store i64 %3735, i64* %3, align 8
  %3736 = inttoptr i64 %3734 to i32*
  %3737 = load i32, i32* %3736, align 4
  %3738 = add i32 %3737, 8
  %3739 = shl i32 %3738, 1
  %3740 = zext i32 %3739 to i64
  store i64 %3740, i64* %RDX.i5152, align 8
  %3741 = sub i32 %3728, %3739
  %3742 = icmp ult i32 %3728, %3739
  %3743 = zext i1 %3742 to i8
  store i8 %3743, i8* %20, align 1
  %3744 = and i32 %3741, 255
  %3745 = tail call i32 @llvm.ctpop.i32(i32 %3744)
  %3746 = trunc i32 %3745 to i8
  %3747 = and i8 %3746, 1
  %3748 = xor i8 %3747, 1
  store i8 %3748, i8* %27, align 1
  %3749 = xor i32 %3739, %3728
  %3750 = xor i32 %3749, %3741
  %3751 = lshr i32 %3750, 4
  %3752 = trunc i32 %3751 to i8
  %3753 = and i8 %3752, 1
  store i8 %3753, i8* %33, align 1
  %3754 = icmp eq i32 %3741, 0
  %3755 = zext i1 %3754 to i8
  store i8 %3755, i8* %36, align 1
  %3756 = lshr i32 %3741, 31
  %3757 = trunc i32 %3756 to i8
  store i8 %3757, i8* %39, align 1
  %3758 = lshr i32 %3728, 31
  %3759 = lshr i32 %3738, 30
  %3760 = and i32 %3759, 1
  %3761 = xor i32 %3760, %3758
  %3762 = xor i32 %3756, %3758
  %3763 = add nuw nsw i32 %3762, %3761
  %3764 = icmp eq i32 %3763, 2
  %3765 = zext i1 %3764 to i8
  store i8 %3765, i8* %45, align 1
  %3766 = icmp ne i8 %3757, 0
  %3767 = xor i1 %3766, %3764
  %.v323 = select i1 %3767, i64 26, i64 1550
  %3768 = add i64 %3723, %.v323
  store i64 %3768, i64* %3, align 8
  %3769 = load i64, i64* %RBP.i, align 8
  br i1 %3767, label %block_42e688, label %block_.L_42ec7c

block_42e688:                                     ; preds = %block_.L_42e66d
  %3770 = add i64 %3769, -28
  %3771 = add i64 %3768, 7
  store i64 %3771, i64* %3, align 8
  %3772 = inttoptr i64 %3770 to i32*
  store i32 0, i32* %3772, align 4
  %.pre244 = load i64, i64* %3, align 8
  br label %block_.L_42e68f

block_.L_42e68f:                                  ; preds = %block_.L_42ec37, %block_42e688
  %3773 = phi i64 [ %.pre244, %block_42e688 ], [ %5845, %block_.L_42ec37 ]
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.31, %block_42e688 ], [ %call2_42ec56, %block_.L_42ec37 ]
  %3774 = load i64, i64* %RBP.i, align 8
  %3775 = add i64 %3774, -28
  %3776 = add i64 %3773, 3
  store i64 %3776, i64* %3, align 8
  %3777 = inttoptr i64 %3775 to i32*
  %3778 = load i32, i32* %3777, align 4
  %3779 = zext i32 %3778 to i64
  store i64 %3779, i64* %RAX.i1585, align 8
  %3780 = add i64 %3774, -16
  %3781 = add i64 %3773, 7
  store i64 %3781, i64* %3, align 8
  %3782 = inttoptr i64 %3780 to i64*
  %3783 = load i64, i64* %3782, align 8
  store i64 %3783, i64* %RCX.i3128, align 8
  %3784 = add i64 %3783, 6396
  %3785 = add i64 %3773, 13
  store i64 %3785, i64* %3, align 8
  %3786 = inttoptr i64 %3784 to i32*
  %3787 = load i32, i32* %3786, align 4
  %3788 = add i32 %3787, 8
  %3789 = zext i32 %3788 to i64
  store i64 %3789, i64* %RDX.i5152, align 8
  %3790 = lshr i32 %3788, 31
  %3791 = sub i32 %3778, %3788
  %3792 = icmp ult i32 %3778, %3788
  %3793 = zext i1 %3792 to i8
  store i8 %3793, i8* %20, align 1
  %3794 = and i32 %3791, 255
  %3795 = tail call i32 @llvm.ctpop.i32(i32 %3794)
  %3796 = trunc i32 %3795 to i8
  %3797 = and i8 %3796, 1
  %3798 = xor i8 %3797, 1
  store i8 %3798, i8* %27, align 1
  %3799 = xor i32 %3788, %3778
  %3800 = xor i32 %3799, %3791
  %3801 = lshr i32 %3800, 4
  %3802 = trunc i32 %3801 to i8
  %3803 = and i8 %3802, 1
  store i8 %3803, i8* %33, align 1
  %3804 = icmp eq i32 %3791, 0
  %3805 = zext i1 %3804 to i8
  store i8 %3805, i8* %36, align 1
  %3806 = lshr i32 %3791, 31
  %3807 = trunc i32 %3806 to i8
  store i8 %3807, i8* %39, align 1
  %3808 = lshr i32 %3778, 31
  %3809 = xor i32 %3790, %3808
  %3810 = xor i32 %3806, %3808
  %3811 = add nuw nsw i32 %3810, %3809
  %3812 = icmp eq i32 %3811, 2
  %3813 = zext i1 %3812 to i8
  store i8 %3813, i8* %45, align 1
  %3814 = icmp ne i8 %3807, 0
  %3815 = xor i1 %3814, %3812
  %.v314 = select i1 %3815, i64 24, i64 1498
  %3816 = add i64 %3773, %.v314
  store i64 %3816, i64* %3, align 8
  br i1 %3815, label %block_42e6a7, label %block_.L_42ec69

block_42e6a7:                                     ; preds = %block_.L_42e68f
  %3817 = add i64 %3816, 3
  store i64 %3817, i64* %3, align 8
  %3818 = load i32, i32* %3777, align 4
  %3819 = shl i32 %3818, 2
  %3820 = zext i32 %3819 to i64
  store i64 %3820, i64* %RAX.i1585, align 8
  %3821 = lshr i32 %3818, 30
  %3822 = trunc i32 %3821 to i8
  %3823 = and i8 %3822, 1
  store i8 %3823, i8* %20, align 1
  %3824 = and i32 %3819, 252
  %3825 = tail call i32 @llvm.ctpop.i32(i32 %3824)
  %3826 = trunc i32 %3825 to i8
  %3827 = and i8 %3826, 1
  %3828 = xor i8 %3827, 1
  store i8 %3828, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %3829 = icmp eq i32 %3819, 0
  %3830 = zext i1 %3829 to i8
  store i8 %3830, i8* %36, align 1
  %3831 = lshr i32 %3818, 29
  %3832 = trunc i32 %3831 to i8
  %3833 = and i8 %3832, 1
  store i8 %3833, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %3834 = add i64 %3774, -32
  %3835 = add i64 %3816, 9
  store i64 %3835, i64* %3, align 8
  %3836 = inttoptr i64 %3834 to i32*
  store i32 %3819, i32* %3836, align 4
  %3837 = load i64, i64* %RBP.i, align 8
  %3838 = add i64 %3837, -16
  %3839 = load i64, i64* %3, align 8
  %3840 = add i64 %3839, 4
  store i64 %3840, i64* %3, align 8
  %3841 = inttoptr i64 %3838 to i64*
  %3842 = load i64, i64* %3841, align 8
  store i64 %3842, i64* %RCX.i3128, align 8
  %3843 = add i64 %3842, 6396
  %3844 = add i64 %3839, 10
  store i64 %3844, i64* %3, align 8
  %3845 = inttoptr i64 %3843 to i32*
  %3846 = load i32, i32* %3845, align 4
  %3847 = add i32 %3846, 8
  %3848 = icmp eq i32 %3847, 0
  %3849 = zext i1 %3848 to i8
  %3850 = lshr i32 %3847, 31
  %3851 = add i32 %3846, 7
  store i8 %3849, i8* %20, align 1
  %3852 = and i32 %3851, 255
  %3853 = tail call i32 @llvm.ctpop.i32(i32 %3852)
  %3854 = trunc i32 %3853 to i8
  %3855 = and i8 %3854, 1
  %3856 = xor i8 %3855, 1
  store i8 %3856, i8* %27, align 1
  %3857 = xor i32 %3851, %3847
  %3858 = lshr i32 %3857, 4
  %3859 = trunc i32 %3858 to i8
  %3860 = and i8 %3859, 1
  store i8 %3860, i8* %33, align 1
  %3861 = icmp eq i32 %3851, 0
  %3862 = zext i1 %3861 to i8
  store i8 %3862, i8* %36, align 1
  %3863 = lshr i32 %3851, 31
  %3864 = trunc i32 %3863 to i8
  store i8 %3864, i8* %39, align 1
  %3865 = xor i32 %3863, %3850
  %3866 = add nuw nsw i32 %3865, %3850
  %3867 = icmp eq i32 %3866, 2
  %3868 = zext i1 %3867 to i8
  store i8 %3868, i8* %45, align 1
  %3869 = add i64 %3837, -48
  %3870 = add i64 %3839, 19
  store i64 %3870, i64* %3, align 8
  %3871 = inttoptr i64 %3869 to i32*
  store i32 %3851, i32* %3871, align 4
  %3872 = load i64, i64* %3, align 8
  %3873 = load i32, i32* bitcast (%G_0x4b8c50_type* @G_0x4b8c50 to i32*), align 8
  %3874 = zext i32 %3873 to i64
  store i64 %3874, i64* %RAX.i1585, align 8
  %3875 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %3875, i64* %RCX.i3128, align 8
  %3876 = load i64, i64* %RBP.i, align 8
  %3877 = add i64 %3876, -28
  %3878 = add i64 %3872, 19
  store i64 %3878, i64* %3, align 8
  %3879 = inttoptr i64 %3877 to i32*
  %3880 = load i32, i32* %3879, align 4
  %3881 = sext i32 %3880 to i64
  store i64 %3881, i64* %RDX.i5152, align 8
  %3882 = shl nsw i64 %3881, 3
  %3883 = add i64 %3882, %3875
  %3884 = add i64 %3872, 23
  store i64 %3884, i64* %3, align 8
  %3885 = inttoptr i64 %3883 to i64*
  %3886 = load i64, i64* %3885, align 8
  store i64 %3886, i64* %RCX.i3128, align 8
  %3887 = add i64 %3876, -24
  %3888 = add i64 %3872, 27
  store i64 %3888, i64* %3, align 8
  %3889 = inttoptr i64 %3887 to i32*
  %3890 = load i32, i32* %3889, align 4
  %3891 = sext i32 %3890 to i64
  store i64 %3891, i64* %RDX.i5152, align 8
  %3892 = shl nsw i64 %3891, 2
  %3893 = add i64 %3892, %3886
  %3894 = add i64 %3872, 30
  store i64 %3894, i64* %3, align 8
  %3895 = inttoptr i64 %3893 to i32*
  %3896 = load i32, i32* %3895, align 4
  %3897 = zext i32 %3896 to i64
  store i64 %3897, i64* %RSI.i5212, align 8
  store i64 %3875, i64* %RCX.i3128, align 8
  %3898 = add i64 %3876, -48
  %3899 = add i64 %3872, 41
  store i64 %3899, i64* %3, align 8
  %3900 = inttoptr i64 %3898 to i32*
  %3901 = load i32, i32* %3900, align 4
  %3902 = zext i32 %3901 to i64
  store i64 %3902, i64* %RDI.i605, align 8
  %3903 = add i64 %3872, 45
  store i64 %3903, i64* %3, align 8
  %3904 = load i32, i32* %3879, align 4
  %3905 = add i32 %3904, 1
  %3906 = zext i32 %3905 to i64
  store i64 %3906, i64* %600, align 8
  %3907 = lshr i32 %3905, 31
  %3908 = sub i32 %3901, %3905
  %3909 = icmp ult i32 %3901, %3905
  %3910 = zext i1 %3909 to i8
  store i8 %3910, i8* %20, align 1
  %3911 = and i32 %3908, 255
  %3912 = tail call i32 @llvm.ctpop.i32(i32 %3911)
  %3913 = trunc i32 %3912 to i8
  %3914 = and i8 %3913, 1
  %3915 = xor i8 %3914, 1
  store i8 %3915, i8* %27, align 1
  %3916 = xor i32 %3905, %3901
  %3917 = xor i32 %3916, %3908
  %3918 = lshr i32 %3917, 4
  %3919 = trunc i32 %3918 to i8
  %3920 = and i8 %3919, 1
  store i8 %3920, i8* %33, align 1
  %3921 = icmp eq i32 %3908, 0
  %3922 = zext i1 %3921 to i8
  store i8 %3922, i8* %36, align 1
  %3923 = lshr i32 %3908, 31
  %3924 = trunc i32 %3923 to i8
  store i8 %3924, i8* %39, align 1
  %3925 = lshr i32 %3901, 31
  %3926 = xor i32 %3907, %3925
  %3927 = xor i32 %3923, %3925
  %3928 = add nuw nsw i32 %3927, %3926
  %3929 = icmp eq i32 %3928, 2
  %3930 = zext i1 %3929 to i8
  store i8 %3930, i8* %45, align 1
  %3931 = load i64, i64* %RBP.i, align 8
  %3932 = add i64 %3931, -296
  %3933 = load i32, i32* %EAX.i1609, align 4
  %3934 = add i64 %3872, 58
  store i64 %3934, i64* %3, align 8
  %3935 = inttoptr i64 %3932 to i32*
  store i32 %3933, i32* %3935, align 4
  %3936 = load i64, i64* %RBP.i, align 8
  %3937 = add i64 %3936, -300
  %3938 = load i32, i32* %ESI.i5201, align 4
  %3939 = load i64, i64* %3, align 8
  %3940 = add i64 %3939, 6
  store i64 %3940, i64* %3, align 8
  %3941 = inttoptr i64 %3937 to i32*
  store i32 %3938, i32* %3941, align 4
  %3942 = load i64, i64* %RBP.i, align 8
  %3943 = add i64 %3942, -312
  %3944 = load i64, i64* %RCX.i3128, align 8
  %3945 = load i64, i64* %3, align 8
  %3946 = add i64 %3945, 7
  store i64 %3946, i64* %3, align 8
  %3947 = inttoptr i64 %3943 to i64*
  store i64 %3944, i64* %3947, align 8
  %3948 = load i64, i64* %3, align 8
  %3949 = load i8, i8* %39, align 1
  %3950 = icmp ne i8 %3949, 0
  %3951 = load i8, i8* %45, align 1
  %3952 = icmp ne i8 %3951, 0
  %3953 = xor i1 %3950, %3952
  %.v401 = select i1 %3953, i64 6, i64 20
  %3954 = add i64 %3948, %.v401
  store i64 %3954, i64* %3, align 8
  %3955 = load i64, i64* %RBP.i, align 8
  br i1 %3953, label %block_42e710, label %block_.L_42e71e

block_42e710:                                     ; preds = %block_42e6a7
  %3956 = add i64 %3955, -48
  %3957 = add i64 %3954, 3
  store i64 %3957, i64* %3, align 8
  %3958 = inttoptr i64 %3956 to i32*
  %3959 = load i32, i32* %3958, align 4
  %3960 = zext i32 %3959 to i64
  store i64 %3960, i64* %RAX.i1585, align 8
  %3961 = add i64 %3955, -316
  %3962 = add i64 %3954, 9
  store i64 %3962, i64* %3, align 8
  %3963 = inttoptr i64 %3961 to i32*
  store i32 %3959, i32* %3963, align 4
  %3964 = load i64, i64* %3, align 8
  %3965 = add i64 %3964, 17
  store i64 %3965, i64* %3, align 8
  br label %block_.L_42e72a

block_.L_42e71e:                                  ; preds = %block_42e6a7
  %3966 = add i64 %3955, -28
  %3967 = add i64 %3954, 3
  store i64 %3967, i64* %3, align 8
  %3968 = inttoptr i64 %3966 to i32*
  %3969 = load i32, i32* %3968, align 4
  %3970 = add i32 %3969, 1
  %3971 = zext i32 %3970 to i64
  store i64 %3971, i64* %RAX.i1585, align 8
  %3972 = icmp eq i32 %3969, -1
  %3973 = icmp eq i32 %3970, 0
  %3974 = or i1 %3972, %3973
  %3975 = zext i1 %3974 to i8
  store i8 %3975, i8* %20, align 1
  %3976 = and i32 %3970, 255
  %3977 = tail call i32 @llvm.ctpop.i32(i32 %3976)
  %3978 = trunc i32 %3977 to i8
  %3979 = and i8 %3978, 1
  %3980 = xor i8 %3979, 1
  store i8 %3980, i8* %27, align 1
  %3981 = xor i32 %3970, %3969
  %3982 = lshr i32 %3981, 4
  %3983 = trunc i32 %3982 to i8
  %3984 = and i8 %3983, 1
  store i8 %3984, i8* %33, align 1
  %3985 = zext i1 %3973 to i8
  store i8 %3985, i8* %36, align 1
  %3986 = lshr i32 %3970, 31
  %3987 = trunc i32 %3986 to i8
  store i8 %3987, i8* %39, align 1
  %3988 = lshr i32 %3969, 31
  %3989 = xor i32 %3986, %3988
  %3990 = add nuw nsw i32 %3989, %3986
  %3991 = icmp eq i32 %3990, 2
  %3992 = zext i1 %3991 to i8
  store i8 %3992, i8* %45, align 1
  %3993 = add i64 %3955, -316
  %3994 = add i64 %3954, 12
  store i64 %3994, i64* %3, align 8
  %3995 = inttoptr i64 %3993 to i32*
  store i32 %3970, i32* %3995, align 4
  %.pre245 = load i64, i64* %3, align 8
  br label %block_.L_42e72a

block_.L_42e72a:                                  ; preds = %block_.L_42e71e, %block_42e710
  %3996 = phi i64 [ %.pre245, %block_.L_42e71e ], [ %3965, %block_42e710 ]
  %3997 = load i64, i64* %RBP.i, align 8
  %3998 = add i64 %3997, -316
  %3999 = add i64 %3996, 6
  store i64 %3999, i64* %3, align 8
  %4000 = inttoptr i64 %3998 to i32*
  %4001 = load i32, i32* %4000, align 4
  %4002 = zext i32 %4001 to i64
  store i64 %4002, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %4003 = sext i32 %4001 to i64
  store i64 %4003, i64* %RDX.i5152, align 8
  %4004 = add i64 %3997, -312
  %4005 = add i64 %3996, 18
  store i64 %4005, i64* %3, align 8
  %4006 = inttoptr i64 %4004 to i64*
  %4007 = load i64, i64* %4006, align 8
  store i64 %4007, i64* %RSI.i5212, align 8
  %4008 = shl nsw i64 %4003, 3
  %4009 = add i64 %4008, %4007
  %4010 = add i64 %3996, 22
  store i64 %4010, i64* %3, align 8
  %4011 = inttoptr i64 %4009 to i64*
  %4012 = load i64, i64* %4011, align 8
  store i64 %4012, i64* %RDX.i5152, align 8
  %4013 = add i64 %3997, -24
  %4014 = add i64 %3996, 26
  store i64 %4014, i64* %3, align 8
  %4015 = inttoptr i64 %4013 to i32*
  %4016 = load i32, i32* %4015, align 4
  %4017 = sext i32 %4016 to i64
  store i64 %4017, i64* %RDI.i605, align 8
  %4018 = add i64 %3997, -300
  %4019 = add i64 %3996, 32
  store i64 %4019, i64* %3, align 8
  %4020 = inttoptr i64 %4018 to i32*
  %4021 = load i32, i32* %4020, align 4
  %4022 = zext i32 %4021 to i64
  store i64 %4022, i64* %RAX.i1585, align 8
  %4023 = shl nsw i64 %4017, 2
  %4024 = add i64 %4023, %4012
  %4025 = add i64 %3996, 35
  store i64 %4025, i64* %3, align 8
  %4026 = inttoptr i64 %4024 to i32*
  %4027 = load i32, i32* %4026, align 4
  %4028 = add i32 %4027, %4021
  %4029 = zext i32 %4028 to i64
  store i64 %4029, i64* %RAX.i1585, align 8
  %4030 = icmp ult i32 %4028, %4021
  %4031 = icmp ult i32 %4028, %4027
  %4032 = or i1 %4030, %4031
  %4033 = zext i1 %4032 to i8
  store i8 %4033, i8* %20, align 1
  %4034 = and i32 %4028, 255
  %4035 = tail call i32 @llvm.ctpop.i32(i32 %4034)
  %4036 = trunc i32 %4035 to i8
  %4037 = and i8 %4036, 1
  %4038 = xor i8 %4037, 1
  store i8 %4038, i8* %27, align 1
  %4039 = xor i32 %4027, %4021
  %4040 = xor i32 %4039, %4028
  %4041 = lshr i32 %4040, 4
  %4042 = trunc i32 %4041 to i8
  %4043 = and i8 %4042, 1
  store i8 %4043, i8* %33, align 1
  %4044 = icmp eq i32 %4028, 0
  %4045 = zext i1 %4044 to i8
  store i8 %4045, i8* %36, align 1
  %4046 = lshr i32 %4028, 31
  %4047 = trunc i32 %4046 to i8
  store i8 %4047, i8* %39, align 1
  %4048 = lshr i32 %4021, 31
  %4049 = lshr i32 %4027, 31
  %4050 = xor i32 %4046, %4048
  %4051 = xor i32 %4046, %4049
  %4052 = add nuw nsw i32 %4050, %4051
  %4053 = icmp eq i32 %4052, 2
  %4054 = zext i1 %4053 to i8
  store i8 %4054, i8* %45, align 1
  %4055 = load i64, i64* %RBP.i, align 8
  %4056 = add i64 %4055, -296
  %4057 = add i64 %3996, 42
  store i64 %4057, i64* %3, align 8
  %4058 = inttoptr i64 %4056 to i32*
  %4059 = load i32, i32* %4058, align 4
  %4060 = sext i32 %4059 to i64
  %4061 = sext i32 %4028 to i64
  %4062 = mul nsw i64 %4061, %4060
  %4063 = trunc i64 %4062 to i32
  %4064 = and i64 %4062, 4294967295
  store i64 %4064, i64* %600, align 8
  %4065 = shl i64 %4062, 32
  %4066 = ashr exact i64 %4065, 32
  %4067 = icmp ne i64 %4066, %4062
  %4068 = zext i1 %4067 to i8
  store i8 %4068, i8* %20, align 1
  %4069 = and i32 %4063, 255
  %4070 = tail call i32 @llvm.ctpop.i32(i32 %4069)
  %4071 = trunc i32 %4070 to i8
  %4072 = and i8 %4071, 1
  %4073 = xor i8 %4072, 1
  store i8 %4073, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  %4074 = lshr i32 %4063, 31
  %4075 = trunc i32 %4074 to i8
  store i8 %4075, i8* %39, align 1
  store i8 %4068, i8* %45, align 1
  %4076 = load i32, i32* bitcast (%G_0x4b8c58_type* @G_0x4b8c58 to i32*), align 8
  %4077 = zext i32 %4076 to i64
  store i64 %4077, i64* %RAX.i1585, align 8
  %4078 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %4078, i64* %RDX.i5152, align 8
  %4079 = add i64 %4055, -28
  %4080 = add i64 %3996, 65
  store i64 %4080, i64* %3, align 8
  %4081 = inttoptr i64 %4079 to i32*
  %4082 = load i32, i32* %4081, align 4
  %4083 = add i32 %4082, -1
  %4084 = zext i32 %4083 to i64
  store i64 %4084, i64* %602, align 8
  %4085 = lshr i32 %4083, 31
  %4086 = load i32, i32* %ECX.i3256, align 4
  %4087 = sub i32 %4086, %4083
  %4088 = icmp ult i32 %4086, %4083
  %4089 = zext i1 %4088 to i8
  store i8 %4089, i8* %20, align 1
  %4090 = and i32 %4087, 255
  %4091 = tail call i32 @llvm.ctpop.i32(i32 %4090)
  %4092 = trunc i32 %4091 to i8
  %4093 = and i8 %4092, 1
  %4094 = xor i8 %4093, 1
  store i8 %4094, i8* %27, align 1
  %4095 = xor i32 %4083, %4086
  %4096 = xor i32 %4095, %4087
  %4097 = lshr i32 %4096, 4
  %4098 = trunc i32 %4097 to i8
  %4099 = and i8 %4098, 1
  store i8 %4099, i8* %33, align 1
  %4100 = icmp eq i32 %4087, 0
  %4101 = zext i1 %4100 to i8
  store i8 %4101, i8* %36, align 1
  %4102 = lshr i32 %4087, 31
  %4103 = trunc i32 %4102 to i8
  store i8 %4103, i8* %39, align 1
  %4104 = lshr i32 %4086, 31
  %4105 = xor i32 %4085, %4104
  %4106 = xor i32 %4102, %4104
  %4107 = add nuw nsw i32 %4106, %4105
  %4108 = icmp eq i32 %4107, 2
  %4109 = zext i1 %4108 to i8
  store i8 %4109, i8* %45, align 1
  %4110 = load i64, i64* %RBP.i, align 8
  %4111 = add i64 %4110, -328
  %4112 = add i64 %3996, 79
  store i64 %4112, i64* %3, align 8
  %4113 = inttoptr i64 %4111 to i64*
  store i64 %4078, i64* %4113, align 8
  %4114 = load i64, i64* %RBP.i, align 8
  %4115 = add i64 %4114, -332
  %4116 = load i32, i32* %R8D.i4817, align 4
  %4117 = load i64, i64* %3, align 8
  %4118 = add i64 %4117, 7
  store i64 %4118, i64* %3, align 8
  %4119 = inttoptr i64 %4115 to i32*
  store i32 %4116, i32* %4119, align 4
  %4120 = load i64, i64* %RBP.i, align 8
  %4121 = add i64 %4120, -336
  %4122 = load i32, i32* %EAX.i1609, align 4
  %4123 = load i64, i64* %3, align 8
  %4124 = add i64 %4123, 6
  store i64 %4124, i64* %3, align 8
  %4125 = inttoptr i64 %4121 to i32*
  store i32 %4122, i32* %4125, align 4
  %4126 = load i64, i64* %3, align 8
  %4127 = load i8, i8* %36, align 1
  %4128 = icmp ne i8 %4127, 0
  %4129 = load i8, i8* %39, align 1
  %4130 = icmp ne i8 %4129, 0
  %4131 = load i8, i8* %45, align 1
  %4132 = icmp ne i8 %4131, 0
  %4133 = xor i1 %4130, %4132
  %4134 = or i1 %4128, %4133
  %.v402 = select i1 %4134, i64 19, i64 6
  %4135 = add i64 %4126, %.v402
  store i64 %4135, i64* %3, align 8
  br i1 %4134, label %block_.L_42e799, label %block_42e78c

block_42e78c:                                     ; preds = %block_.L_42e72a
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %4136 = load i64, i64* %RBP.i, align 8
  %4137 = add i64 %4136, -340
  %4138 = add i64 %4135, 8
  store i64 %4138, i64* %3, align 8
  %4139 = inttoptr i64 %4137 to i32*
  store i32 0, i32* %4139, align 4
  %4140 = load i64, i64* %3, align 8
  %4141 = add i64 %4140, 17
  store i64 %4141, i64* %3, align 8
  br label %block_.L_42e7a5

block_.L_42e799:                                  ; preds = %block_.L_42e72a
  %4142 = load i64, i64* %RBP.i, align 8
  %4143 = add i64 %4142, -28
  %4144 = add i64 %4135, 3
  store i64 %4144, i64* %3, align 8
  %4145 = inttoptr i64 %4143 to i32*
  %4146 = load i32, i32* %4145, align 4
  %4147 = add i32 %4146, -1
  %4148 = zext i32 %4147 to i64
  store i64 %4148, i64* %RAX.i1585, align 8
  %4149 = icmp eq i32 %4146, 0
  %4150 = zext i1 %4149 to i8
  store i8 %4150, i8* %20, align 1
  %4151 = and i32 %4147, 255
  %4152 = tail call i32 @llvm.ctpop.i32(i32 %4151)
  %4153 = trunc i32 %4152 to i8
  %4154 = and i8 %4153, 1
  %4155 = xor i8 %4154, 1
  store i8 %4155, i8* %27, align 1
  %4156 = xor i32 %4147, %4146
  %4157 = lshr i32 %4156, 4
  %4158 = trunc i32 %4157 to i8
  %4159 = and i8 %4158, 1
  store i8 %4159, i8* %33, align 1
  %4160 = icmp eq i32 %4147, 0
  %4161 = zext i1 %4160 to i8
  store i8 %4161, i8* %36, align 1
  %4162 = lshr i32 %4147, 31
  %4163 = trunc i32 %4162 to i8
  store i8 %4163, i8* %39, align 1
  %4164 = lshr i32 %4146, 31
  %4165 = xor i32 %4162, %4164
  %4166 = add nuw nsw i32 %4165, %4164
  %4167 = icmp eq i32 %4166, 2
  %4168 = zext i1 %4167 to i8
  store i8 %4168, i8* %45, align 1
  %4169 = add i64 %4142, -340
  %4170 = add i64 %4135, 12
  store i64 %4170, i64* %3, align 8
  %4171 = inttoptr i64 %4169 to i32*
  store i32 %4147, i32* %4171, align 4
  %.pre246 = load i64, i64* %3, align 8
  br label %block_.L_42e7a5

block_.L_42e7a5:                                  ; preds = %block_.L_42e799, %block_42e78c
  %4172 = phi i64 [ %.pre246, %block_.L_42e799 ], [ %4141, %block_42e78c ]
  %4173 = load i64, i64* %RBP.i, align 8
  %4174 = add i64 %4173, -340
  %4175 = add i64 %4172, 6
  store i64 %4175, i64* %3, align 8
  %4176 = inttoptr i64 %4174 to i32*
  %4177 = load i32, i32* %4176, align 4
  %4178 = zext i32 %4177 to i64
  store i64 %4178, i64* %RAX.i1585, align 8
  %4179 = sext i32 %4177 to i64
  store i64 %4179, i64* %RCX.i3128, align 8
  %4180 = add i64 %4173, -328
  %4181 = add i64 %4172, 16
  store i64 %4181, i64* %3, align 8
  %4182 = inttoptr i64 %4180 to i64*
  %4183 = load i64, i64* %4182, align 8
  store i64 %4183, i64* %RDX.i5152, align 8
  %4184 = shl nsw i64 %4179, 3
  %4185 = add i64 %4184, %4183
  %4186 = add i64 %4172, 20
  store i64 %4186, i64* %3, align 8
  %4187 = inttoptr i64 %4185 to i64*
  %4188 = load i64, i64* %4187, align 8
  store i64 %4188, i64* %RCX.i3128, align 8
  %4189 = add i64 %4173, -24
  %4190 = add i64 %4172, 24
  store i64 %4190, i64* %3, align 8
  %4191 = inttoptr i64 %4189 to i32*
  %4192 = load i32, i32* %4191, align 4
  %4193 = sext i32 %4192 to i64
  store i64 %4193, i64* %RSI.i5212, align 8
  %4194 = shl nsw i64 %4193, 2
  %4195 = add i64 %4194, %4188
  %4196 = add i64 %4172, 27
  store i64 %4196, i64* %3, align 8
  %4197 = inttoptr i64 %4195 to i32*
  %4198 = load i32, i32* %4197, align 4
  %4199 = zext i32 %4198 to i64
  store i64 %4199, i64* %RAX.i1585, align 8
  %4200 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %4200, i64* %RCX.i3128, align 8
  %4201 = add i64 %4173, -48
  %4202 = add i64 %4172, 38
  store i64 %4202, i64* %3, align 8
  %4203 = inttoptr i64 %4201 to i32*
  %4204 = load i32, i32* %4203, align 4
  %4205 = zext i32 %4204 to i64
  store i64 %4205, i64* %RDI.i605, align 8
  %4206 = add i64 %4173, -28
  %4207 = add i64 %4172, 42
  store i64 %4207, i64* %3, align 8
  %4208 = inttoptr i64 %4206 to i32*
  %4209 = load i32, i32* %4208, align 4
  %4210 = add i32 %4209, 2
  %4211 = zext i32 %4210 to i64
  store i64 %4211, i64* %600, align 8
  %4212 = lshr i32 %4210, 31
  %4213 = sub i32 %4204, %4210
  %4214 = icmp ult i32 %4204, %4210
  %4215 = zext i1 %4214 to i8
  store i8 %4215, i8* %20, align 1
  %4216 = and i32 %4213, 255
  %4217 = tail call i32 @llvm.ctpop.i32(i32 %4216)
  %4218 = trunc i32 %4217 to i8
  %4219 = and i8 %4218, 1
  %4220 = xor i8 %4219, 1
  store i8 %4220, i8* %27, align 1
  %4221 = xor i32 %4210, %4204
  %4222 = xor i32 %4221, %4213
  %4223 = lshr i32 %4222, 4
  %4224 = trunc i32 %4223 to i8
  %4225 = and i8 %4224, 1
  store i8 %4225, i8* %33, align 1
  %4226 = icmp eq i32 %4213, 0
  %4227 = zext i1 %4226 to i8
  store i8 %4227, i8* %36, align 1
  %4228 = lshr i32 %4213, 31
  %4229 = trunc i32 %4228 to i8
  store i8 %4229, i8* %39, align 1
  %4230 = lshr i32 %4204, 31
  %4231 = xor i32 %4212, %4230
  %4232 = xor i32 %4228, %4230
  %4233 = add nuw nsw i32 %4232, %4231
  %4234 = icmp eq i32 %4233, 2
  %4235 = zext i1 %4234 to i8
  store i8 %4235, i8* %45, align 1
  %4236 = load i64, i64* %RBP.i, align 8
  %4237 = add i64 %4236, -344
  %4238 = add i64 %4172, 55
  store i64 %4238, i64* %3, align 8
  %4239 = inttoptr i64 %4237 to i32*
  store i32 %4198, i32* %4239, align 4
  %4240 = load i64, i64* %RBP.i, align 8
  %4241 = add i64 %4240, -352
  %4242 = load i64, i64* %RCX.i3128, align 8
  %4243 = load i64, i64* %3, align 8
  %4244 = add i64 %4243, 7
  store i64 %4244, i64* %3, align 8
  %4245 = inttoptr i64 %4241 to i64*
  store i64 %4242, i64* %4245, align 8
  %4246 = load i64, i64* %3, align 8
  %4247 = load i8, i8* %39, align 1
  %4248 = icmp ne i8 %4247, 0
  %4249 = load i8, i8* %45, align 1
  %4250 = icmp ne i8 %4249, 0
  %4251 = xor i1 %4248, %4250
  %.v403 = select i1 %4251, i64 6, i64 20
  %4252 = add i64 %4246, %.v403
  store i64 %4252, i64* %3, align 8
  %4253 = load i64, i64* %RBP.i, align 8
  br i1 %4251, label %block_42e7e9, label %block_.L_42e7f7

block_42e7e9:                                     ; preds = %block_.L_42e7a5
  %4254 = add i64 %4253, -48
  %4255 = add i64 %4252, 3
  store i64 %4255, i64* %3, align 8
  %4256 = inttoptr i64 %4254 to i32*
  %4257 = load i32, i32* %4256, align 4
  %4258 = zext i32 %4257 to i64
  store i64 %4258, i64* %RAX.i1585, align 8
  %4259 = add i64 %4253, -356
  %4260 = add i64 %4252, 9
  store i64 %4260, i64* %3, align 8
  %4261 = inttoptr i64 %4259 to i32*
  store i32 %4257, i32* %4261, align 4
  %4262 = load i64, i64* %3, align 8
  %4263 = add i64 %4262, 17
  store i64 %4263, i64* %3, align 8
  br label %block_.L_42e803

block_.L_42e7f7:                                  ; preds = %block_.L_42e7a5
  %4264 = add i64 %4253, -28
  %4265 = add i64 %4252, 3
  store i64 %4265, i64* %3, align 8
  %4266 = inttoptr i64 %4264 to i32*
  %4267 = load i32, i32* %4266, align 4
  %4268 = add i32 %4267, 2
  %4269 = zext i32 %4268 to i64
  store i64 %4269, i64* %RAX.i1585, align 8
  %4270 = icmp ugt i32 %4267, -3
  %4271 = zext i1 %4270 to i8
  store i8 %4271, i8* %20, align 1
  %4272 = and i32 %4268, 255
  %4273 = tail call i32 @llvm.ctpop.i32(i32 %4272)
  %4274 = trunc i32 %4273 to i8
  %4275 = and i8 %4274, 1
  %4276 = xor i8 %4275, 1
  store i8 %4276, i8* %27, align 1
  %4277 = xor i32 %4268, %4267
  %4278 = lshr i32 %4277, 4
  %4279 = trunc i32 %4278 to i8
  %4280 = and i8 %4279, 1
  store i8 %4280, i8* %33, align 1
  %4281 = icmp eq i32 %4268, 0
  %4282 = zext i1 %4281 to i8
  store i8 %4282, i8* %36, align 1
  %4283 = lshr i32 %4268, 31
  %4284 = trunc i32 %4283 to i8
  store i8 %4284, i8* %39, align 1
  %4285 = lshr i32 %4267, 31
  %4286 = xor i32 %4283, %4285
  %4287 = add nuw nsw i32 %4286, %4283
  %4288 = icmp eq i32 %4287, 2
  %4289 = zext i1 %4288 to i8
  store i8 %4289, i8* %45, align 1
  %4290 = add i64 %4253, -356
  %4291 = add i64 %4252, 12
  store i64 %4291, i64* %3, align 8
  %4292 = inttoptr i64 %4290 to i32*
  store i32 %4268, i32* %4292, align 4
  %.pre247 = load i64, i64* %3, align 8
  br label %block_.L_42e803

block_.L_42e803:                                  ; preds = %block_.L_42e7f7, %block_42e7e9
  %4293 = phi i64 [ %.pre247, %block_.L_42e7f7 ], [ %4263, %block_42e7e9 ]
  %4294 = load i64, i64* %RBP.i, align 8
  %4295 = add i64 %4294, -356
  %4296 = add i64 %4293, 6
  store i64 %4296, i64* %3, align 8
  %4297 = inttoptr i64 %4295 to i32*
  %4298 = load i32, i32* %4297, align 4
  %4299 = zext i32 %4298 to i64
  store i64 %4299, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %4300 = sext i32 %4298 to i64
  store i64 %4300, i64* %RDX.i5152, align 8
  %4301 = add i64 %4294, -352
  %4302 = add i64 %4293, 18
  store i64 %4302, i64* %3, align 8
  %4303 = inttoptr i64 %4301 to i64*
  %4304 = load i64, i64* %4303, align 8
  store i64 %4304, i64* %RSI.i5212, align 8
  %4305 = shl nsw i64 %4300, 3
  %4306 = add i64 %4305, %4304
  %4307 = add i64 %4293, 22
  store i64 %4307, i64* %3, align 8
  %4308 = inttoptr i64 %4306 to i64*
  %4309 = load i64, i64* %4308, align 8
  store i64 %4309, i64* %RDX.i5152, align 8
  %4310 = add i64 %4294, -24
  %4311 = add i64 %4293, 26
  store i64 %4311, i64* %3, align 8
  %4312 = inttoptr i64 %4310 to i32*
  %4313 = load i32, i32* %4312, align 4
  %4314 = sext i32 %4313 to i64
  store i64 %4314, i64* %RDI.i605, align 8
  %4315 = add i64 %4294, -344
  %4316 = add i64 %4293, 32
  store i64 %4316, i64* %3, align 8
  %4317 = inttoptr i64 %4315 to i32*
  %4318 = load i32, i32* %4317, align 4
  %4319 = zext i32 %4318 to i64
  store i64 %4319, i64* %RAX.i1585, align 8
  %4320 = shl nsw i64 %4314, 2
  %4321 = add i64 %4320, %4309
  %4322 = add i64 %4293, 35
  store i64 %4322, i64* %3, align 8
  %4323 = inttoptr i64 %4321 to i32*
  %4324 = load i32, i32* %4323, align 4
  %4325 = add i32 %4324, %4318
  %4326 = zext i32 %4325 to i64
  store i64 %4326, i64* %RAX.i1585, align 8
  %4327 = icmp ult i32 %4325, %4318
  %4328 = icmp ult i32 %4325, %4324
  %4329 = or i1 %4327, %4328
  %4330 = zext i1 %4329 to i8
  store i8 %4330, i8* %20, align 1
  %4331 = and i32 %4325, 255
  %4332 = tail call i32 @llvm.ctpop.i32(i32 %4331)
  %4333 = trunc i32 %4332 to i8
  %4334 = and i8 %4333, 1
  %4335 = xor i8 %4334, 1
  store i8 %4335, i8* %27, align 1
  %4336 = xor i32 %4324, %4318
  %4337 = xor i32 %4336, %4325
  %4338 = lshr i32 %4337, 4
  %4339 = trunc i32 %4338 to i8
  %4340 = and i8 %4339, 1
  store i8 %4340, i8* %33, align 1
  %4341 = icmp eq i32 %4325, 0
  %4342 = zext i1 %4341 to i8
  store i8 %4342, i8* %36, align 1
  %4343 = lshr i32 %4325, 31
  %4344 = trunc i32 %4343 to i8
  store i8 %4344, i8* %39, align 1
  %4345 = lshr i32 %4318, 31
  %4346 = lshr i32 %4324, 31
  %4347 = xor i32 %4343, %4345
  %4348 = xor i32 %4343, %4346
  %4349 = add nuw nsw i32 %4347, %4348
  %4350 = icmp eq i32 %4349, 2
  %4351 = zext i1 %4350 to i8
  store i8 %4351, i8* %45, align 1
  %4352 = load i64, i64* %RBP.i, align 8
  %4353 = add i64 %4352, -336
  %4354 = add i64 %4293, 42
  store i64 %4354, i64* %3, align 8
  %4355 = inttoptr i64 %4353 to i32*
  %4356 = load i32, i32* %4355, align 4
  %4357 = sext i32 %4356 to i64
  %4358 = sext i32 %4325 to i64
  %4359 = mul nsw i64 %4358, %4357
  %4360 = trunc i64 %4359 to i32
  %4361 = and i64 %4359, 4294967295
  store i64 %4361, i64* %600, align 8
  %4362 = shl i64 %4359, 32
  %4363 = ashr exact i64 %4362, 32
  %4364 = icmp ne i64 %4363, %4359
  %4365 = zext i1 %4364 to i8
  store i8 %4365, i8* %20, align 1
  %4366 = and i32 %4360, 255
  %4367 = tail call i32 @llvm.ctpop.i32(i32 %4366)
  %4368 = trunc i32 %4367 to i8
  %4369 = and i8 %4368, 1
  %4370 = xor i8 %4369, 1
  store i8 %4370, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  %4371 = lshr i32 %4360, 31
  %4372 = trunc i32 %4371 to i8
  store i8 %4372, i8* %39, align 1
  store i8 %4365, i8* %45, align 1
  %4373 = add i64 %4352, -332
  %4374 = add i64 %4293, 52
  store i64 %4374, i64* %3, align 8
  %4375 = inttoptr i64 %4373 to i32*
  %4376 = load i32, i32* %4375, align 4
  %4377 = trunc i64 %4359 to i32
  %4378 = add i32 %4377, %4376
  %4379 = zext i32 %4378 to i64
  store i64 %4379, i64* %RAX.i1585, align 8
  %4380 = icmp ult i32 %4378, %4376
  %4381 = icmp ult i32 %4378, %4377
  %4382 = or i1 %4380, %4381
  %4383 = zext i1 %4382 to i8
  store i8 %4383, i8* %20, align 1
  %4384 = and i32 %4378, 255
  %4385 = tail call i32 @llvm.ctpop.i32(i32 %4384)
  %4386 = trunc i32 %4385 to i8
  %4387 = and i8 %4386, 1
  %4388 = xor i8 %4387, 1
  store i8 %4388, i8* %27, align 1
  %4389 = xor i32 %4377, %4376
  %4390 = xor i32 %4389, %4378
  %4391 = lshr i32 %4390, 4
  %4392 = trunc i32 %4391 to i8
  %4393 = and i8 %4392, 1
  store i8 %4393, i8* %33, align 1
  %4394 = icmp eq i32 %4378, 0
  %4395 = zext i1 %4394 to i8
  store i8 %4395, i8* %36, align 1
  %4396 = lshr i32 %4378, 31
  %4397 = trunc i32 %4396 to i8
  store i8 %4397, i8* %39, align 1
  %4398 = lshr i32 %4376, 31
  %4399 = lshr i32 %4377, 31
  %4400 = xor i32 %4396, %4398
  %4401 = xor i32 %4396, %4399
  %4402 = add nuw nsw i32 %4400, %4401
  %4403 = icmp eq i32 %4402, 2
  %4404 = zext i1 %4403 to i8
  store i8 %4404, i8* %45, align 1
  %4405 = load i32, i32* bitcast (%G_0x4b8c60_type* @G_0x4b8c60 to i32*), align 8
  %4406 = zext i32 %4405 to i64
  store i64 %4406, i64* %600, align 8
  %4407 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %4407, i64* %RDX.i5152, align 8
  %4408 = add i64 %4352, -28
  %4409 = add i64 %4293, 75
  store i64 %4409, i64* %3, align 8
  %4410 = inttoptr i64 %4408 to i32*
  %4411 = load i32, i32* %4410, align 4
  %4412 = add i32 %4411, -2
  %4413 = zext i32 %4412 to i64
  store i64 %4413, i64* %602, align 8
  %4414 = lshr i32 %4412, 31
  %4415 = load i32, i32* %ECX.i3256, align 4
  %4416 = sub i32 %4415, %4412
  %4417 = icmp ult i32 %4415, %4412
  %4418 = zext i1 %4417 to i8
  store i8 %4418, i8* %20, align 1
  %4419 = and i32 %4416, 255
  %4420 = tail call i32 @llvm.ctpop.i32(i32 %4419)
  %4421 = trunc i32 %4420 to i8
  %4422 = and i8 %4421, 1
  %4423 = xor i8 %4422, 1
  store i8 %4423, i8* %27, align 1
  %4424 = xor i32 %4412, %4415
  %4425 = xor i32 %4424, %4416
  %4426 = lshr i32 %4425, 4
  %4427 = trunc i32 %4426 to i8
  %4428 = and i8 %4427, 1
  store i8 %4428, i8* %33, align 1
  %4429 = icmp eq i32 %4416, 0
  %4430 = zext i1 %4429 to i8
  store i8 %4430, i8* %36, align 1
  %4431 = lshr i32 %4416, 31
  %4432 = trunc i32 %4431 to i8
  store i8 %4432, i8* %39, align 1
  %4433 = lshr i32 %4415, 31
  %4434 = xor i32 %4414, %4433
  %4435 = xor i32 %4431, %4433
  %4436 = add nuw nsw i32 %4435, %4434
  %4437 = icmp eq i32 %4436, 2
  %4438 = zext i1 %4437 to i8
  store i8 %4438, i8* %45, align 1
  %4439 = load i64, i64* %RBP.i, align 8
  %4440 = add i64 %4439, -368
  %4441 = add i64 %4293, 89
  store i64 %4441, i64* %3, align 8
  %4442 = inttoptr i64 %4440 to i64*
  store i64 %4407, i64* %4442, align 8
  %4443 = load i64, i64* %RBP.i, align 8
  %4444 = add i64 %4443, -372
  %4445 = load i32, i32* %EAX.i1609, align 4
  %4446 = load i64, i64* %3, align 8
  %4447 = add i64 %4446, 6
  store i64 %4447, i64* %3, align 8
  %4448 = inttoptr i64 %4444 to i32*
  store i32 %4445, i32* %4448, align 4
  %4449 = load i64, i64* %RBP.i, align 8
  %4450 = add i64 %4449, -376
  %4451 = load i32, i32* %R8D.i4817, align 4
  %4452 = load i64, i64* %3, align 8
  %4453 = add i64 %4452, 7
  store i64 %4453, i64* %3, align 8
  %4454 = inttoptr i64 %4450 to i32*
  store i32 %4451, i32* %4454, align 4
  %4455 = load i64, i64* %3, align 8
  %4456 = load i8, i8* %36, align 1
  %4457 = icmp ne i8 %4456, 0
  %4458 = load i8, i8* %39, align 1
  %4459 = icmp ne i8 %4458, 0
  %4460 = load i8, i8* %45, align 1
  %4461 = icmp ne i8 %4460, 0
  %4462 = xor i1 %4459, %4461
  %4463 = or i1 %4457, %4462
  %.v404 = select i1 %4463, i64 19, i64 6
  %4464 = add i64 %4455, %.v404
  store i64 %4464, i64* %3, align 8
  br i1 %4463, label %block_.L_42e87c, label %block_42e86f

block_42e86f:                                     ; preds = %block_.L_42e803
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %4465 = load i64, i64* %RBP.i, align 8
  %4466 = add i64 %4465, -380
  %4467 = add i64 %4464, 8
  store i64 %4467, i64* %3, align 8
  %4468 = inttoptr i64 %4466 to i32*
  store i32 0, i32* %4468, align 4
  %4469 = load i64, i64* %3, align 8
  %4470 = add i64 %4469, 17
  store i64 %4470, i64* %3, align 8
  br label %block_.L_42e888

block_.L_42e87c:                                  ; preds = %block_.L_42e803
  %4471 = load i64, i64* %RBP.i, align 8
  %4472 = add i64 %4471, -28
  %4473 = add i64 %4464, 3
  store i64 %4473, i64* %3, align 8
  %4474 = inttoptr i64 %4472 to i32*
  %4475 = load i32, i32* %4474, align 4
  %4476 = add i32 %4475, -2
  %4477 = zext i32 %4476 to i64
  store i64 %4477, i64* %RAX.i1585, align 8
  %4478 = icmp ult i32 %4475, 2
  %4479 = zext i1 %4478 to i8
  store i8 %4479, i8* %20, align 1
  %4480 = and i32 %4476, 255
  %4481 = tail call i32 @llvm.ctpop.i32(i32 %4480)
  %4482 = trunc i32 %4481 to i8
  %4483 = and i8 %4482, 1
  %4484 = xor i8 %4483, 1
  store i8 %4484, i8* %27, align 1
  %4485 = xor i32 %4476, %4475
  %4486 = lshr i32 %4485, 4
  %4487 = trunc i32 %4486 to i8
  %4488 = and i8 %4487, 1
  store i8 %4488, i8* %33, align 1
  %4489 = icmp eq i32 %4476, 0
  %4490 = zext i1 %4489 to i8
  store i8 %4490, i8* %36, align 1
  %4491 = lshr i32 %4476, 31
  %4492 = trunc i32 %4491 to i8
  store i8 %4492, i8* %39, align 1
  %4493 = lshr i32 %4475, 31
  %4494 = xor i32 %4491, %4493
  %4495 = add nuw nsw i32 %4494, %4493
  %4496 = icmp eq i32 %4495, 2
  %4497 = zext i1 %4496 to i8
  store i8 %4497, i8* %45, align 1
  %4498 = add i64 %4471, -380
  %4499 = add i64 %4464, 12
  store i64 %4499, i64* %3, align 8
  %4500 = inttoptr i64 %4498 to i32*
  store i32 %4476, i32* %4500, align 4
  %.pre248 = load i64, i64* %3, align 8
  br label %block_.L_42e888

block_.L_42e888:                                  ; preds = %block_.L_42e87c, %block_42e86f
  %4501 = phi i64 [ %.pre248, %block_.L_42e87c ], [ %4470, %block_42e86f ]
  %4502 = load i64, i64* %RBP.i, align 8
  %4503 = add i64 %4502, -380
  %4504 = add i64 %4501, 6
  store i64 %4504, i64* %3, align 8
  %4505 = inttoptr i64 %4503 to i32*
  %4506 = load i32, i32* %4505, align 4
  %4507 = zext i32 %4506 to i64
  store i64 %4507, i64* %RAX.i1585, align 8
  %4508 = sext i32 %4506 to i64
  store i64 %4508, i64* %RCX.i3128, align 8
  %4509 = add i64 %4502, -368
  %4510 = add i64 %4501, 16
  store i64 %4510, i64* %3, align 8
  %4511 = inttoptr i64 %4509 to i64*
  %4512 = load i64, i64* %4511, align 8
  store i64 %4512, i64* %RDX.i5152, align 8
  %4513 = shl nsw i64 %4508, 3
  %4514 = add i64 %4513, %4512
  %4515 = add i64 %4501, 20
  store i64 %4515, i64* %3, align 8
  %4516 = inttoptr i64 %4514 to i64*
  %4517 = load i64, i64* %4516, align 8
  store i64 %4517, i64* %RCX.i3128, align 8
  %4518 = add i64 %4502, -24
  %4519 = add i64 %4501, 24
  store i64 %4519, i64* %3, align 8
  %4520 = inttoptr i64 %4518 to i32*
  %4521 = load i32, i32* %4520, align 4
  %4522 = sext i32 %4521 to i64
  store i64 %4522, i64* %RSI.i5212, align 8
  %4523 = shl nsw i64 %4522, 2
  %4524 = add i64 %4523, %4517
  %4525 = add i64 %4501, 27
  store i64 %4525, i64* %3, align 8
  %4526 = inttoptr i64 %4524 to i32*
  %4527 = load i32, i32* %4526, align 4
  %4528 = zext i32 %4527 to i64
  store i64 %4528, i64* %RAX.i1585, align 8
  %4529 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %4529, i64* %RCX.i3128, align 8
  %4530 = add i64 %4502, -48
  %4531 = add i64 %4501, 38
  store i64 %4531, i64* %3, align 8
  %4532 = inttoptr i64 %4530 to i32*
  %4533 = load i32, i32* %4532, align 4
  %4534 = zext i32 %4533 to i64
  store i64 %4534, i64* %RDI.i605, align 8
  %4535 = add i64 %4502, -28
  %4536 = add i64 %4501, 42
  store i64 %4536, i64* %3, align 8
  %4537 = inttoptr i64 %4535 to i32*
  %4538 = load i32, i32* %4537, align 4
  %4539 = add i32 %4538, 3
  %4540 = zext i32 %4539 to i64
  store i64 %4540, i64* %600, align 8
  %4541 = lshr i32 %4539, 31
  %4542 = sub i32 %4533, %4539
  %4543 = icmp ult i32 %4533, %4539
  %4544 = zext i1 %4543 to i8
  store i8 %4544, i8* %20, align 1
  %4545 = and i32 %4542, 255
  %4546 = tail call i32 @llvm.ctpop.i32(i32 %4545)
  %4547 = trunc i32 %4546 to i8
  %4548 = and i8 %4547, 1
  %4549 = xor i8 %4548, 1
  store i8 %4549, i8* %27, align 1
  %4550 = xor i32 %4539, %4533
  %4551 = xor i32 %4550, %4542
  %4552 = lshr i32 %4551, 4
  %4553 = trunc i32 %4552 to i8
  %4554 = and i8 %4553, 1
  store i8 %4554, i8* %33, align 1
  %4555 = icmp eq i32 %4542, 0
  %4556 = zext i1 %4555 to i8
  store i8 %4556, i8* %36, align 1
  %4557 = lshr i32 %4542, 31
  %4558 = trunc i32 %4557 to i8
  store i8 %4558, i8* %39, align 1
  %4559 = lshr i32 %4533, 31
  %4560 = xor i32 %4541, %4559
  %4561 = xor i32 %4557, %4559
  %4562 = add nuw nsw i32 %4561, %4560
  %4563 = icmp eq i32 %4562, 2
  %4564 = zext i1 %4563 to i8
  store i8 %4564, i8* %45, align 1
  %4565 = load i64, i64* %RBP.i, align 8
  %4566 = add i64 %4565, -384
  %4567 = add i64 %4501, 55
  store i64 %4567, i64* %3, align 8
  %4568 = inttoptr i64 %4566 to i32*
  store i32 %4527, i32* %4568, align 4
  %4569 = load i64, i64* %RBP.i, align 8
  %4570 = add i64 %4569, -392
  %4571 = load i64, i64* %RCX.i3128, align 8
  %4572 = load i64, i64* %3, align 8
  %4573 = add i64 %4572, 7
  store i64 %4573, i64* %3, align 8
  %4574 = inttoptr i64 %4570 to i64*
  store i64 %4571, i64* %4574, align 8
  %4575 = load i64, i64* %3, align 8
  %4576 = load i8, i8* %39, align 1
  %4577 = icmp ne i8 %4576, 0
  %4578 = load i8, i8* %45, align 1
  %4579 = icmp ne i8 %4578, 0
  %4580 = xor i1 %4577, %4579
  %.v405 = select i1 %4580, i64 6, i64 20
  %4581 = add i64 %4575, %.v405
  store i64 %4581, i64* %3, align 8
  %4582 = load i64, i64* %RBP.i, align 8
  br i1 %4580, label %block_42e8cc, label %block_.L_42e8da

block_42e8cc:                                     ; preds = %block_.L_42e888
  %4583 = add i64 %4582, -48
  %4584 = add i64 %4581, 3
  store i64 %4584, i64* %3, align 8
  %4585 = inttoptr i64 %4583 to i32*
  %4586 = load i32, i32* %4585, align 4
  %4587 = zext i32 %4586 to i64
  store i64 %4587, i64* %RAX.i1585, align 8
  %4588 = add i64 %4582, -396
  %4589 = add i64 %4581, 9
  store i64 %4589, i64* %3, align 8
  %4590 = inttoptr i64 %4588 to i32*
  store i32 %4586, i32* %4590, align 4
  %4591 = load i64, i64* %3, align 8
  %4592 = add i64 %4591, 17
  store i64 %4592, i64* %3, align 8
  br label %block_.L_42e8e6

block_.L_42e8da:                                  ; preds = %block_.L_42e888
  %4593 = add i64 %4582, -28
  %4594 = add i64 %4581, 3
  store i64 %4594, i64* %3, align 8
  %4595 = inttoptr i64 %4593 to i32*
  %4596 = load i32, i32* %4595, align 4
  %4597 = add i32 %4596, 3
  %4598 = zext i32 %4597 to i64
  store i64 %4598, i64* %RAX.i1585, align 8
  %4599 = icmp ugt i32 %4596, -4
  %4600 = zext i1 %4599 to i8
  store i8 %4600, i8* %20, align 1
  %4601 = and i32 %4597, 255
  %4602 = tail call i32 @llvm.ctpop.i32(i32 %4601)
  %4603 = trunc i32 %4602 to i8
  %4604 = and i8 %4603, 1
  %4605 = xor i8 %4604, 1
  store i8 %4605, i8* %27, align 1
  %4606 = xor i32 %4597, %4596
  %4607 = lshr i32 %4606, 4
  %4608 = trunc i32 %4607 to i8
  %4609 = and i8 %4608, 1
  store i8 %4609, i8* %33, align 1
  %4610 = icmp eq i32 %4597, 0
  %4611 = zext i1 %4610 to i8
  store i8 %4611, i8* %36, align 1
  %4612 = lshr i32 %4597, 31
  %4613 = trunc i32 %4612 to i8
  store i8 %4613, i8* %39, align 1
  %4614 = lshr i32 %4596, 31
  %4615 = xor i32 %4612, %4614
  %4616 = add nuw nsw i32 %4615, %4612
  %4617 = icmp eq i32 %4616, 2
  %4618 = zext i1 %4617 to i8
  store i8 %4618, i8* %45, align 1
  %4619 = add i64 %4582, -396
  %4620 = add i64 %4581, 12
  store i64 %4620, i64* %3, align 8
  %4621 = inttoptr i64 %4619 to i32*
  store i32 %4597, i32* %4621, align 4
  %.pre249 = load i64, i64* %3, align 8
  br label %block_.L_42e8e6

block_.L_42e8e6:                                  ; preds = %block_.L_42e8da, %block_42e8cc
  %4622 = phi i64 [ %.pre249, %block_.L_42e8da ], [ %4592, %block_42e8cc ]
  %4623 = load i64, i64* %RBP.i, align 8
  %4624 = add i64 %4623, -396
  %4625 = add i64 %4622, 6
  store i64 %4625, i64* %3, align 8
  %4626 = inttoptr i64 %4624 to i32*
  %4627 = load i32, i32* %4626, align 4
  %4628 = zext i32 %4627 to i64
  store i64 %4628, i64* %RAX.i1585, align 8
  store i64 1024, i64* %RCX.i3128, align 8
  store i64 32, i64* %RDX.i5152, align 8
  %4629 = sext i32 %4627 to i64
  store i64 %4629, i64* %RSI.i5212, align 8
  %4630 = add i64 %4623, -392
  %4631 = add i64 %4622, 26
  store i64 %4631, i64* %3, align 8
  %4632 = inttoptr i64 %4630 to i64*
  %4633 = load i64, i64* %4632, align 8
  store i64 %4633, i64* %RDI.i605, align 8
  %4634 = shl nsw i64 %4629, 3
  %4635 = add i64 %4634, %4633
  %4636 = add i64 %4622, 30
  store i64 %4636, i64* %3, align 8
  %4637 = inttoptr i64 %4635 to i64*
  %4638 = load i64, i64* %4637, align 8
  store i64 %4638, i64* %RSI.i5212, align 8
  %4639 = add i64 %4623, -24
  %4640 = add i64 %4622, 34
  store i64 %4640, i64* %3, align 8
  %4641 = inttoptr i64 %4639 to i32*
  %4642 = load i32, i32* %4641, align 4
  %4643 = sext i32 %4642 to i64
  store i64 %4643, i64* %600, align 8
  %4644 = add i64 %4623, -384
  %4645 = add i64 %4622, 40
  store i64 %4645, i64* %3, align 8
  %4646 = inttoptr i64 %4644 to i32*
  %4647 = load i32, i32* %4646, align 4
  %4648 = zext i32 %4647 to i64
  store i64 %4648, i64* %RAX.i1585, align 8
  %4649 = shl nsw i64 %4643, 2
  %4650 = add i64 %4649, %4638
  %4651 = add i64 %4622, 44
  store i64 %4651, i64* %3, align 8
  %4652 = inttoptr i64 %4650 to i32*
  %4653 = load i32, i32* %4652, align 4
  %4654 = add i32 %4653, %4647
  %4655 = zext i32 %4654 to i64
  store i64 %4655, i64* %RAX.i1585, align 8
  %4656 = icmp ult i32 %4654, %4647
  %4657 = icmp ult i32 %4654, %4653
  %4658 = or i1 %4656, %4657
  %4659 = zext i1 %4658 to i8
  store i8 %4659, i8* %20, align 1
  %4660 = and i32 %4654, 255
  %4661 = tail call i32 @llvm.ctpop.i32(i32 %4660)
  %4662 = trunc i32 %4661 to i8
  %4663 = and i8 %4662, 1
  %4664 = xor i8 %4663, 1
  store i8 %4664, i8* %27, align 1
  %4665 = xor i32 %4653, %4647
  %4666 = xor i32 %4665, %4654
  %4667 = lshr i32 %4666, 4
  %4668 = trunc i32 %4667 to i8
  %4669 = and i8 %4668, 1
  store i8 %4669, i8* %33, align 1
  %4670 = icmp eq i32 %4654, 0
  %4671 = zext i1 %4670 to i8
  store i8 %4671, i8* %36, align 1
  %4672 = lshr i32 %4654, 31
  %4673 = trunc i32 %4672 to i8
  store i8 %4673, i8* %39, align 1
  %4674 = lshr i32 %4647, 31
  %4675 = lshr i32 %4653, 31
  %4676 = xor i32 %4672, %4674
  %4677 = xor i32 %4672, %4675
  %4678 = add nuw nsw i32 %4676, %4677
  %4679 = icmp eq i32 %4678, 2
  %4680 = zext i1 %4679 to i8
  store i8 %4680, i8* %45, align 1
  %4681 = add i64 %4623, -376
  %4682 = add i64 %4622, 51
  store i64 %4682, i64* %3, align 8
  %4683 = inttoptr i64 %4681 to i32*
  %4684 = load i32, i32* %4683, align 4
  %4685 = sext i32 %4684 to i64
  %4686 = sext i32 %4654 to i64
  %4687 = mul nsw i64 %4686, %4685
  %4688 = trunc i64 %4687 to i32
  %4689 = and i64 %4687, 4294967295
  store i64 %4689, i64* %602, align 8
  %4690 = shl i64 %4687, 32
  %4691 = ashr exact i64 %4690, 32
  %4692 = icmp ne i64 %4691, %4687
  %4693 = zext i1 %4692 to i8
  store i8 %4693, i8* %20, align 1
  %4694 = and i32 %4688, 255
  %4695 = tail call i32 @llvm.ctpop.i32(i32 %4694)
  %4696 = trunc i32 %4695 to i8
  %4697 = and i8 %4696, 1
  %4698 = xor i8 %4697, 1
  store i8 %4698, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  %4699 = lshr i32 %4688, 31
  %4700 = trunc i32 %4699 to i8
  store i8 %4700, i8* %39, align 1
  store i8 %4693, i8* %45, align 1
  %4701 = load i64, i64* %RBP.i, align 8
  %4702 = add i64 %4701, -372
  %4703 = add i64 %4622, 61
  store i64 %4703, i64* %3, align 8
  %4704 = inttoptr i64 %4702 to i32*
  %4705 = load i32, i32* %4704, align 4
  %4706 = trunc i64 %4687 to i32
  %4707 = add i32 %4706, %4705
  %4708 = zext i32 %4707 to i64
  store i64 %4708, i64* %RAX.i1585, align 8
  %4709 = icmp ult i32 %4707, %4705
  %4710 = icmp ult i32 %4707, %4706
  %4711 = or i1 %4709, %4710
  %4712 = zext i1 %4711 to i8
  store i8 %4712, i8* %20, align 1
  %4713 = and i32 %4707, 255
  %4714 = tail call i32 @llvm.ctpop.i32(i32 %4713)
  %4715 = trunc i32 %4714 to i8
  %4716 = and i8 %4715, 1
  %4717 = xor i8 %4716, 1
  store i8 %4717, i8* %27, align 1
  %4718 = xor i32 %4706, %4705
  %4719 = xor i32 %4718, %4707
  %4720 = lshr i32 %4719, 4
  %4721 = trunc i32 %4720 to i8
  %4722 = and i8 %4721, 1
  store i8 %4722, i8* %33, align 1
  %4723 = icmp eq i32 %4707, 0
  %4724 = zext i1 %4723 to i8
  store i8 %4724, i8* %36, align 1
  %4725 = lshr i32 %4707, 31
  %4726 = trunc i32 %4725 to i8
  store i8 %4726, i8* %39, align 1
  %4727 = lshr i32 %4705, 31
  %4728 = lshr i32 %4706, 31
  %4729 = xor i32 %4725, %4727
  %4730 = xor i32 %4725, %4728
  %4731 = add nuw nsw i32 %4729, %4730
  %4732 = icmp eq i32 %4731, 2
  %4733 = zext i1 %4732 to i8
  store i8 %4733, i8* %45, align 1
  %4734 = add i64 %4701, -400
  %4735 = load i32, i32* %EDX.i5198, align 4
  %4736 = add i64 %4622, 70
  store i64 %4736, i64* %3, align 8
  %4737 = inttoptr i64 %4734 to i32*
  store i32 %4735, i32* %4737, align 4
  %4738 = load i64, i64* %3, align 8
  %4739 = load i32, i32* %EAX.i1609, align 8
  %4740 = sext i32 %4739 to i64
  %4741 = lshr i64 %4740, 32
  store i64 %4741, i64* %3718, align 8
  %4742 = load i64, i64* %RBP.i, align 8
  %4743 = add i64 %4742, -400
  %4744 = add i64 %4738, 8
  store i64 %4744, i64* %3, align 8
  %4745 = inttoptr i64 %4743 to i32*
  %4746 = load i32, i32* %4745, align 4
  %4747 = zext i32 %4746 to i64
  store i64 %4747, i64* %602, align 8
  %4748 = add i64 %4738, 11
  store i64 %4748, i64* %3, align 8
  %4749 = zext i32 %4739 to i64
  %4750 = sext i32 %4746 to i64
  %4751 = shl nuw i64 %4741, 32
  %4752 = or i64 %4751, %4749
  %4753 = sdiv i64 %4752, %4750
  %4754 = shl i64 %4753, 32
  %4755 = ashr exact i64 %4754, 32
  %4756 = icmp eq i64 %4753, %4755
  br i1 %4756, label %4759, label %4757

; <label>:4757:                                   ; preds = %block_.L_42e8e6
  %4758 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4748, %struct.Memory* %MEMORY.32)
  %.pre250 = load i64, i64* %RBP.i, align 8
  %.pre251 = load i32, i32* %EAX.i1609, align 4
  %.pre252 = load i64, i64* %3, align 8
  br label %routine_idivl__r9d.exit3549

; <label>:4759:                                   ; preds = %block_.L_42e8e6
  %4760 = srem i64 %4752, %4750
  %4761 = and i64 %4753, 4294967295
  store i64 %4761, i64* %RAX.i1585, align 8
  %4762 = and i64 %4760, 4294967295
  store i64 %4762, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %4763 = trunc i64 %4753 to i32
  br label %routine_idivl__r9d.exit3549

routine_idivl__r9d.exit3549:                      ; preds = %4759, %4757
  %4764 = phi i64 [ %.pre252, %4757 ], [ %4748, %4759 ]
  %4765 = phi i32 [ %.pre251, %4757 ], [ %4763, %4759 ]
  %4766 = phi i64 [ %.pre250, %4757 ], [ %4742, %4759 ]
  %4767 = phi %struct.Memory* [ %4758, %4757 ], [ %MEMORY.32, %4759 ]
  %4768 = add i64 %4766, -20
  %4769 = add i64 %4764, 3
  store i64 %4769, i64* %3, align 8
  %4770 = inttoptr i64 %4768 to i32*
  store i32 %4765, i32* %4770, align 4
  %4771 = load i64, i64* %RBP.i, align 8
  %4772 = add i64 %4771, -56
  %4773 = load i64, i64* %3, align 8
  %4774 = add i64 %4773, 4
  store i64 %4774, i64* %3, align 8
  %4775 = inttoptr i64 %4772 to i64*
  %4776 = load i64, i64* %4775, align 8
  store i64 %4776, i64* %RDI.i605, align 8
  %4777 = add i64 %4771, -28
  %4778 = add i64 %4773, 7
  store i64 %4778, i64* %3, align 8
  %4779 = inttoptr i64 %4777 to i32*
  %4780 = load i32, i32* %4779, align 4
  %4781 = add i32 %4780, -4
  %4782 = shl i32 %4781, 2
  %4783 = zext i32 %4782 to i64
  store i64 %4783, i64* %RAX.i1585, align 8
  %4784 = lshr i32 %4781, 30
  %4785 = trunc i32 %4784 to i8
  %4786 = and i8 %4785, 1
  store i8 %4786, i8* %20, align 1
  %4787 = and i32 %4782, 252
  %4788 = tail call i32 @llvm.ctpop.i32(i32 %4787)
  %4789 = trunc i32 %4788 to i8
  %4790 = and i8 %4789, 1
  %4791 = xor i8 %4790, 1
  store i8 %4791, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %4792 = icmp eq i32 %4782, 0
  %4793 = zext i1 %4792 to i8
  store i8 %4793, i8* %36, align 1
  %4794 = lshr i32 %4781, 29
  %4795 = trunc i32 %4794 to i8
  %4796 = and i8 %4795, 1
  store i8 %4796, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %4797 = add i64 %4771, -24
  %4798 = add i64 %4773, 17
  store i64 %4798, i64* %3, align 8
  %4799 = inttoptr i64 %4797 to i32*
  %4800 = load i32, i32* %4799, align 4
  %4801 = add i32 %4800, -8
  %4802 = lshr i32 %4801, 31
  %4803 = trunc i32 %4802 to i8
  %4804 = shl i32 %4801, 1
  %4805 = icmp slt i32 %4801, 0
  %4806 = icmp slt i32 %4804, 0
  %4807 = xor i1 %4805, %4806
  %4808 = zext i32 %4804 to i64
  store i64 %4808, i64* %3720, align 8
  store i8 %4803, i8* %20, align 1
  %4809 = and i32 %4804, 254
  %4810 = tail call i32 @llvm.ctpop.i32(i32 %4809)
  %4811 = trunc i32 %4810 to i8
  %4812 = and i8 %4811, 1
  %4813 = xor i8 %4812, 1
  store i8 %4813, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %4814 = icmp eq i32 %4804, 0
  %4815 = zext i1 %4814 to i8
  store i8 %4815, i8* %36, align 1
  %4816 = lshr i32 %4801, 30
  %4817 = trunc i32 %4816 to i8
  %4818 = and i8 %4817, 1
  store i8 %4818, i8* %39, align 1
  %4819 = zext i1 %4807 to i8
  store i8 %4819, i8* %45, align 1
  %4820 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4820, i64* %RSI.i5212, align 8
  %4821 = add i64 %4820, 72684
  %4822 = add i64 %4773, 39
  store i64 %4822, i64* %3, align 8
  %4823 = inttoptr i64 %4821 to i32*
  %4824 = load i32, i32* %4823, align 4
  %4825 = zext i32 %4824 to i64
  store i64 %4825, i64* %3722, align 8
  %4826 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %4826, i64* %RSI.i5212, align 8
  %4827 = load i64, i64* %RBP.i, align 8
  %4828 = add i64 %4827, -28
  %4829 = add i64 %4773, 51
  store i64 %4829, i64* %3, align 8
  %4830 = inttoptr i64 %4828 to i32*
  %4831 = load i32, i32* %4830, align 4
  %4832 = sext i32 %4831 to i64
  store i64 %4832, i64* %600, align 8
  %4833 = shl nsw i64 %4832, 3
  %4834 = add i64 %4833, %4826
  %4835 = add i64 %4773, 55
  store i64 %4835, i64* %3, align 8
  %4836 = inttoptr i64 %4834 to i64*
  %4837 = load i64, i64* %4836, align 8
  store i64 %4837, i64* %RSI.i5212, align 8
  %4838 = add i64 %4827, -24
  %4839 = add i64 %4773, 59
  store i64 %4839, i64* %3, align 8
  %4840 = inttoptr i64 %4838 to i32*
  %4841 = load i32, i32* %4840, align 4
  %4842 = sext i32 %4841 to i64
  store i64 %4842, i64* %600, align 8
  %4843 = shl nsw i64 %4842, 2
  %4844 = add i64 %4843, %4837
  %4845 = add i64 %4773, 63
  store i64 %4845, i64* %3, align 8
  %4846 = inttoptr i64 %4844 to i32*
  %4847 = load i32, i32* %4846, align 4
  %4848 = add i32 %4847, 512
  %4849 = zext i32 %4848 to i64
  store i64 %4849, i64* %RBX.i241, align 8
  %4850 = icmp ugt i32 %4847, -513
  %4851 = zext i1 %4850 to i8
  store i8 %4851, i8* %20, align 1
  %4852 = and i32 %4848, 255
  %4853 = tail call i32 @llvm.ctpop.i32(i32 %4852)
  %4854 = trunc i32 %4853 to i8
  %4855 = and i8 %4854, 1
  %4856 = xor i8 %4855, 1
  store i8 %4856, i8* %27, align 1
  %4857 = xor i32 %4848, %4847
  %4858 = lshr i32 %4857, 4
  %4859 = trunc i32 %4858 to i8
  %4860 = and i8 %4859, 1
  store i8 %4860, i8* %33, align 1
  %4861 = icmp eq i32 %4848, 0
  %4862 = zext i1 %4861 to i8
  store i8 %4862, i8* %36, align 1
  %4863 = lshr i32 %4848, 31
  %4864 = trunc i32 %4863 to i8
  store i8 %4864, i8* %39, align 1
  %4865 = lshr i32 %4847, 31
  %4866 = xor i32 %4863, %4865
  %4867 = add nuw nsw i32 %4866, %4863
  %4868 = icmp eq i32 %4867, 2
  %4869 = zext i1 %4868 to i8
  store i8 %4869, i8* %45, align 1
  %4870 = add i64 %4827, -404
  %4871 = load i32, i32* %EAX.i1609, align 4
  %4872 = add i64 %4773, 75
  store i64 %4872, i64* %3, align 8
  %4873 = inttoptr i64 %4870 to i32*
  store i32 %4871, i32* %4873, align 4
  %4874 = load i32, i32* %EBX.i, align 4
  %4875 = zext i32 %4874 to i64
  %4876 = load i64, i64* %3, align 8
  store i64 %4875, i64* %RAX.i1585, align 8
  %4877 = sext i32 %4874 to i64
  %4878 = lshr i64 %4877, 32
  store i64 %4878, i64* %3718, align 8
  %4879 = load i32, i32* %ECX.i3256, align 4
  %4880 = add i64 %4876, 5
  store i64 %4880, i64* %3, align 8
  %4881 = sext i32 %4879 to i64
  %4882 = shl nuw i64 %4878, 32
  %4883 = or i64 %4882, %4875
  %4884 = sdiv i64 %4883, %4881
  %4885 = shl i64 %4884, 32
  %4886 = ashr exact i64 %4885, 32
  %4887 = icmp eq i64 %4884, %4886
  br i1 %4887, label %4890, label %4888

; <label>:4888:                                   ; preds = %routine_idivl__r9d.exit3549
  %4889 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4880, %struct.Memory* %4767)
  %.pre253 = load i32, i32* %EAX.i1609, align 4
  %.pre254 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3495

; <label>:4890:                                   ; preds = %routine_idivl__r9d.exit3549
  %4891 = srem i64 %4883, %4881
  %4892 = and i64 %4884, 4294967295
  store i64 %4892, i64* %RAX.i1585, align 8
  %4893 = and i64 %4891, 4294967295
  store i64 %4893, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %4894 = trunc i64 %4884 to i32
  br label %routine_idivl__ecx.exit3495

routine_idivl__ecx.exit3495:                      ; preds = %4890, %4888
  %4895 = phi i64 [ %.pre254, %4888 ], [ %4880, %4890 ]
  %4896 = phi i32 [ %.pre253, %4888 ], [ %4894, %4890 ]
  %4897 = phi %struct.Memory* [ %4889, %4888 ], [ %4767, %4890 ]
  %4898 = load i32, i32* %R11D.i3523, align 4
  %4899 = sub i32 %4898, %4896
  %4900 = icmp ult i32 %4898, %4896
  %4901 = zext i1 %4900 to i8
  store i8 %4901, i8* %20, align 1
  %4902 = and i32 %4899, 255
  %4903 = tail call i32 @llvm.ctpop.i32(i32 %4902)
  %4904 = trunc i32 %4903 to i8
  %4905 = and i8 %4904, 1
  %4906 = xor i8 %4905, 1
  store i8 %4906, i8* %27, align 1
  %4907 = xor i32 %4896, %4898
  %4908 = xor i32 %4907, %4899
  %4909 = lshr i32 %4908, 4
  %4910 = trunc i32 %4909 to i8
  %4911 = and i8 %4910, 1
  store i8 %4911, i8* %33, align 1
  %4912 = icmp eq i32 %4899, 0
  %4913 = zext i1 %4912 to i8
  store i8 %4913, i8* %36, align 1
  %4914 = lshr i32 %4899, 31
  %4915 = trunc i32 %4914 to i8
  store i8 %4915, i8* %39, align 1
  %4916 = lshr i32 %4898, 31
  %4917 = lshr i32 %4896, 31
  %4918 = xor i32 %4917, %4916
  %4919 = xor i32 %4914, %4916
  %4920 = add nuw nsw i32 %4919, %4918
  %4921 = icmp eq i32 %4920, 2
  %4922 = zext i1 %4921 to i8
  store i8 %4922, i8* %45, align 1
  %4923 = load i64, i64* %RBP.i, align 8
  %4924 = add i64 %4923, -416
  %4925 = load i64, i64* %RDI.i605, align 8
  %4926 = add i64 %4895, 10
  store i64 %4926, i64* %3, align 8
  %4927 = inttoptr i64 %4924 to i64*
  store i64 %4925, i64* %4927, align 8
  %4928 = load i64, i64* %RBP.i, align 8
  %4929 = add i64 %4928, -420
  %4930 = load i32, i32* %R10D.i3532, align 4
  %4931 = load i64, i64* %3, align 8
  %4932 = add i64 %4931, 7
  store i64 %4932, i64* %3, align 8
  %4933 = inttoptr i64 %4929 to i32*
  store i32 %4930, i32* %4933, align 4
  %4934 = load i64, i64* %3, align 8
  %4935 = load i8, i8* %39, align 1
  %4936 = icmp ne i8 %4935, 0
  %4937 = load i8, i8* %45, align 1
  %4938 = icmp ne i8 %4937, 0
  %4939 = xor i1 %4936, %4938
  %.v406 = select i1 %4939, i64 6, i64 31
  %4940 = add i64 %4934, %.v406
  store i64 %4940, i64* %3, align 8
  br i1 %4939, label %block_42e9a2, label %block_.L_42e9bb

block_42e9a2:                                     ; preds = %routine_idivl__ecx.exit3495
  %4941 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4941, i64* %RAX.i1585, align 8
  %4942 = add i64 %4941, 72684
  %4943 = add i64 %4940, 14
  store i64 %4943, i64* %3, align 8
  %4944 = inttoptr i64 %4942 to i32*
  %4945 = load i32, i32* %4944, align 4
  %4946 = zext i32 %4945 to i64
  store i64 %4946, i64* %RCX.i3128, align 8
  %4947 = load i64, i64* %RBP.i, align 8
  %4948 = add i64 %4947, -424
  %4949 = add i64 %4940, 20
  store i64 %4949, i64* %3, align 8
  %4950 = inttoptr i64 %4948 to i32*
  store i32 %4945, i32* %4950, align 4
  %4951 = load i64, i64* %3, align 8
  %4952 = add i64 %4951, 62
  store i64 %4952, i64* %3, align 8
  br label %block_.L_42e9f4

block_.L_42e9bb:                                  ; preds = %routine_idivl__ecx.exit3495
  store i64 1024, i64* %RAX.i1585, align 8
  %4953 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %4953, i64* %RCX.i3128, align 8
  %4954 = load i64, i64* %RBP.i, align 8
  %4955 = add i64 %4954, -28
  %4956 = add i64 %4940, 17
  store i64 %4956, i64* %3, align 8
  %4957 = inttoptr i64 %4955 to i32*
  %4958 = load i32, i32* %4957, align 4
  %4959 = sext i32 %4958 to i64
  store i64 %4959, i64* %RDX.i5152, align 8
  %4960 = shl nsw i64 %4959, 3
  %4961 = add i64 %4960, %4953
  %4962 = add i64 %4940, 21
  store i64 %4962, i64* %3, align 8
  %4963 = inttoptr i64 %4961 to i64*
  %4964 = load i64, i64* %4963, align 8
  store i64 %4964, i64* %RCX.i3128, align 8
  %4965 = add i64 %4954, -24
  %4966 = add i64 %4940, 25
  store i64 %4966, i64* %3, align 8
  %4967 = inttoptr i64 %4965 to i32*
  %4968 = load i32, i32* %4967, align 4
  %4969 = sext i32 %4968 to i64
  store i64 %4969, i64* %RDX.i5152, align 8
  %4970 = shl nsw i64 %4969, 2
  %4971 = add i64 %4970, %4964
  %4972 = add i64 %4940, 28
  store i64 %4972, i64* %3, align 8
  %4973 = inttoptr i64 %4971 to i32*
  %4974 = load i32, i32* %4973, align 4
  %4975 = add i32 %4974, 512
  %4976 = zext i32 %4975 to i64
  store i64 %4976, i64* %RSI.i5212, align 8
  %4977 = icmp ugt i32 %4974, -513
  %4978 = zext i1 %4977 to i8
  store i8 %4978, i8* %20, align 1
  %4979 = and i32 %4975, 255
  %4980 = tail call i32 @llvm.ctpop.i32(i32 %4979)
  %4981 = trunc i32 %4980 to i8
  %4982 = and i8 %4981, 1
  %4983 = xor i8 %4982, 1
  store i8 %4983, i8* %27, align 1
  %4984 = xor i32 %4975, %4974
  %4985 = lshr i32 %4984, 4
  %4986 = trunc i32 %4985 to i8
  %4987 = and i8 %4986, 1
  store i8 %4987, i8* %33, align 1
  %4988 = icmp eq i32 %4975, 0
  %4989 = zext i1 %4988 to i8
  store i8 %4989, i8* %36, align 1
  %4990 = lshr i32 %4975, 31
  %4991 = trunc i32 %4990 to i8
  store i8 %4991, i8* %39, align 1
  %4992 = lshr i32 %4974, 31
  %4993 = xor i32 %4990, %4992
  %4994 = add nuw nsw i32 %4993, %4990
  %4995 = icmp eq i32 %4994, 2
  %4996 = zext i1 %4995 to i8
  store i8 %4996, i8* %45, align 1
  %4997 = add i64 %4954, -428
  %4998 = add i64 %4940, 40
  store i64 %4998, i64* %3, align 8
  %4999 = inttoptr i64 %4997 to i32*
  store i32 1024, i32* %4999, align 4
  %5000 = load i32, i32* %ESI.i5201, align 4
  %5001 = zext i32 %5000 to i64
  %5002 = load i64, i64* %3, align 8
  store i64 %5001, i64* %RAX.i1585, align 8
  %5003 = sext i32 %5000 to i64
  %5004 = lshr i64 %5003, 32
  store i64 %5004, i64* %3718, align 8
  %5005 = load i64, i64* %RBP.i, align 8
  %5006 = add i64 %5005, -428
  %5007 = add i64 %5002, 9
  store i64 %5007, i64* %3, align 8
  %5008 = inttoptr i64 %5006 to i32*
  %5009 = load i32, i32* %5008, align 4
  %5010 = zext i32 %5009 to i64
  store i64 %5010, i64* %RSI.i5212, align 8
  %5011 = add i64 %5002, 11
  store i64 %5011, i64* %3, align 8
  %5012 = sext i32 %5009 to i64
  %5013 = shl nuw i64 %5004, 32
  %5014 = or i64 %5013, %5001
  %5015 = sdiv i64 %5014, %5012
  %5016 = shl i64 %5015, 32
  %5017 = ashr exact i64 %5016, 32
  %5018 = icmp eq i64 %5015, %5017
  br i1 %5018, label %5021, label %5019

; <label>:5019:                                   ; preds = %block_.L_42e9bb
  %5020 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5011, %struct.Memory* %4897)
  %.pre255 = load i64, i64* %RBP.i, align 8
  %.pre256 = load i32, i32* %EAX.i1609, align 4
  %.pre257 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit3443

; <label>:5021:                                   ; preds = %block_.L_42e9bb
  %5022 = srem i64 %5014, %5012
  %5023 = and i64 %5015, 4294967295
  store i64 %5023, i64* %RAX.i1585, align 8
  %5024 = and i64 %5022, 4294967295
  store i64 %5024, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5025 = trunc i64 %5015 to i32
  br label %routine_idivl__esi.exit3443

routine_idivl__esi.exit3443:                      ; preds = %5021, %5019
  %5026 = phi i64 [ %.pre257, %5019 ], [ %5011, %5021 ]
  %5027 = phi i32 [ %.pre256, %5019 ], [ %5025, %5021 ]
  %5028 = phi i64 [ %.pre255, %5019 ], [ %5005, %5021 ]
  %5029 = phi %struct.Memory* [ %5020, %5019 ], [ %4897, %5021 ]
  %5030 = add i64 %5028, -424
  %5031 = add i64 %5026, 6
  store i64 %5031, i64* %3, align 8
  %5032 = inttoptr i64 %5030 to i32*
  store i32 %5027, i32* %5032, align 4
  %.pre258 = load i64, i64* %3, align 8
  br label %block_.L_42e9f4

block_.L_42e9f4:                                  ; preds = %routine_idivl__esi.exit3443, %block_42e9a2
  %5033 = phi i64 [ %.pre258, %routine_idivl__esi.exit3443 ], [ %4952, %block_42e9a2 ]
  %MEMORY.38 = phi %struct.Memory* [ %5029, %routine_idivl__esi.exit3443 ], [ %4897, %block_42e9a2 ]
  %5034 = load i64, i64* %RBP.i, align 8
  %5035 = add i64 %5034, -424
  %5036 = add i64 %5033, 6
  store i64 %5036, i64* %3, align 8
  %5037 = inttoptr i64 %5035 to i32*
  %5038 = load i32, i32* %5037, align 4
  %5039 = zext i32 %5038 to i64
  store i64 %5039, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %5040 = sub i32 0, %5038
  %5041 = icmp ne i32 %5038, 0
  %5042 = zext i1 %5041 to i8
  store i8 %5042, i8* %20, align 1
  %5043 = and i32 %5040, 255
  %5044 = tail call i32 @llvm.ctpop.i32(i32 %5043)
  %5045 = trunc i32 %5044 to i8
  %5046 = and i8 %5045, 1
  %5047 = xor i8 %5046, 1
  store i8 %5047, i8* %27, align 1
  %5048 = xor i32 %5038, %5040
  %5049 = lshr i32 %5048, 4
  %5050 = trunc i32 %5049 to i8
  %5051 = and i8 %5050, 1
  store i8 %5051, i8* %33, align 1
  %5052 = icmp eq i32 %5038, 0
  %5053 = zext i1 %5052 to i8
  store i8 %5053, i8* %36, align 1
  %5054 = lshr i32 %5040, 31
  %5055 = trunc i32 %5054 to i8
  store i8 %5055, i8* %39, align 1
  %5056 = lshr i32 %5038, 31
  %5057 = add nuw nsw i32 %5054, %5056
  %5058 = icmp eq i32 %5057, 2
  %5059 = zext i1 %5058 to i8
  store i8 %5059, i8* %45, align 1
  %5060 = icmp ne i8 %5055, 0
  %5061 = xor i1 %5060, %5058
  %5062 = or i1 %5052, %5061
  %.v343 = select i1 %5062, i64 29, i64 16
  %5063 = add i64 %5033, %.v343
  store i64 %5063, i64* %3, align 8
  br i1 %5062, label %block_.L_42ea11, label %block_42ea04

block_42ea04:                                     ; preds = %block_.L_42e9f4
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %5064 = add i64 %5034, -432
  %5065 = add i64 %5063, 8
  store i64 %5065, i64* %3, align 8
  %5066 = inttoptr i64 %5064 to i32*
  store i32 0, i32* %5066, align 4
  %5067 = load i64, i64* %3, align 8
  %5068 = add i64 %5067, 186
  store i64 %5068, i64* %3, align 8
  br label %block_.L_42eac6

block_.L_42ea11:                                  ; preds = %block_.L_42e9f4
  store i64 1024, i64* %RAX.i1585, align 8
  %5069 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5069, i64* %RCX.i3128, align 8
  %5070 = add i64 %5069, 72684
  %5071 = add i64 %5063, 19
  store i64 %5071, i64* %3, align 8
  %5072 = inttoptr i64 %5070 to i32*
  %5073 = load i32, i32* %5072, align 4
  %5074 = zext i32 %5073 to i64
  store i64 %5074, i64* %RDX.i5152, align 8
  %5075 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %5075, i64* %RCX.i3128, align 8
  %5076 = add i64 %5034, -28
  %5077 = add i64 %5063, 31
  store i64 %5077, i64* %3, align 8
  %5078 = inttoptr i64 %5076 to i32*
  %5079 = load i32, i32* %5078, align 4
  %5080 = sext i32 %5079 to i64
  store i64 %5080, i64* %RSI.i5212, align 8
  %5081 = shl nsw i64 %5080, 3
  %5082 = add i64 %5081, %5075
  %5083 = add i64 %5063, 35
  store i64 %5083, i64* %3, align 8
  %5084 = inttoptr i64 %5082 to i64*
  %5085 = load i64, i64* %5084, align 8
  store i64 %5085, i64* %RCX.i3128, align 8
  %5086 = add i64 %5034, -24
  %5087 = add i64 %5063, 39
  store i64 %5087, i64* %3, align 8
  %5088 = inttoptr i64 %5086 to i32*
  %5089 = load i32, i32* %5088, align 4
  %5090 = sext i32 %5089 to i64
  store i64 %5090, i64* %RSI.i5212, align 8
  %5091 = shl nsw i64 %5090, 2
  %5092 = add i64 %5091, %5085
  %5093 = add i64 %5063, 42
  store i64 %5093, i64* %3, align 8
  %5094 = inttoptr i64 %5092 to i32*
  %5095 = load i32, i32* %5094, align 4
  %5096 = add i32 %5095, 512
  %5097 = zext i32 %5096 to i64
  store i64 %5097, i64* %RDI.i605, align 8
  %5098 = icmp ugt i32 %5095, -513
  %5099 = zext i1 %5098 to i8
  store i8 %5099, i8* %20, align 1
  %5100 = and i32 %5096, 255
  %5101 = tail call i32 @llvm.ctpop.i32(i32 %5100)
  %5102 = trunc i32 %5101 to i8
  %5103 = and i8 %5102, 1
  %5104 = xor i8 %5103, 1
  store i8 %5104, i8* %27, align 1
  %5105 = xor i32 %5096, %5095
  %5106 = lshr i32 %5105, 4
  %5107 = trunc i32 %5106 to i8
  %5108 = and i8 %5107, 1
  store i8 %5108, i8* %33, align 1
  %5109 = icmp eq i32 %5096, 0
  %5110 = zext i1 %5109 to i8
  store i8 %5110, i8* %36, align 1
  %5111 = lshr i32 %5096, 31
  %5112 = trunc i32 %5111 to i8
  store i8 %5112, i8* %39, align 1
  %5113 = lshr i32 %5095, 31
  %5114 = xor i32 %5111, %5113
  %5115 = add nuw nsw i32 %5114, %5111
  %5116 = icmp eq i32 %5115, 2
  %5117 = zext i1 %5116 to i8
  store i8 %5117, i8* %45, align 1
  %5118 = add i64 %5034, -436
  %5119 = add i64 %5063, 54
  store i64 %5119, i64* %3, align 8
  %5120 = inttoptr i64 %5118 to i32*
  store i32 1024, i32* %5120, align 4
  %5121 = load i32, i32* %EDI.i4812, align 4
  %5122 = zext i32 %5121 to i64
  %5123 = load i64, i64* %3, align 8
  store i64 %5122, i64* %RAX.i1585, align 8
  %5124 = load i64, i64* %RBP.i, align 8
  %5125 = add i64 %5124, -440
  %5126 = load i32, i32* %EDX.i5198, align 4
  %5127 = add i64 %5123, 8
  store i64 %5127, i64* %3, align 8
  %5128 = inttoptr i64 %5125 to i32*
  store i32 %5126, i32* %5128, align 4
  %5129 = load i64, i64* %3, align 8
  %5130 = load i32, i32* %EAX.i1609, align 8
  %5131 = sext i32 %5130 to i64
  %5132 = lshr i64 %5131, 32
  store i64 %5132, i64* %3718, align 8
  %5133 = load i64, i64* %RBP.i, align 8
  %5134 = add i64 %5133, -436
  %5135 = add i64 %5129, 7
  store i64 %5135, i64* %3, align 8
  %5136 = inttoptr i64 %5134 to i32*
  %5137 = load i32, i32* %5136, align 4
  %5138 = zext i32 %5137 to i64
  store i64 %5138, i64* %RDI.i605, align 8
  %5139 = add i64 %5129, 9
  store i64 %5139, i64* %3, align 8
  %5140 = zext i32 %5130 to i64
  %5141 = sext i32 %5137 to i64
  %5142 = shl nuw i64 %5132, 32
  %5143 = or i64 %5142, %5140
  %5144 = sdiv i64 %5143, %5141
  %5145 = shl i64 %5144, 32
  %5146 = ashr exact i64 %5145, 32
  %5147 = icmp eq i64 %5144, %5146
  br i1 %5147, label %5150, label %5148

; <label>:5148:                                   ; preds = %block_.L_42ea11
  %5149 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5139, %struct.Memory* %MEMORY.38)
  %.pre259 = load i64, i64* %RBP.i, align 8
  %.pre260 = load i64, i64* %3, align 8
  %.pre261 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__edi.exit

; <label>:5150:                                   ; preds = %block_.L_42ea11
  %5151 = srem i64 %5143, %5141
  %5152 = and i64 %5144, 4294967295
  store i64 %5152, i64* %RAX.i1585, align 8
  %5153 = and i64 %5151, 4294967295
  store i64 %5153, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5154 = trunc i64 %5144 to i32
  br label %routine_idivl__edi.exit

routine_idivl__edi.exit:                          ; preds = %5150, %5148
  %5155 = phi i32 [ %.pre261, %5148 ], [ %5154, %5150 ]
  %5156 = phi i64 [ %.pre260, %5148 ], [ %5139, %5150 ]
  %5157 = phi i64 [ %.pre259, %5148 ], [ %5133, %5150 ]
  %5158 = phi %struct.Memory* [ %5149, %5148 ], [ %MEMORY.38, %5150 ]
  %5159 = add i64 %5157, -440
  %5160 = add i64 %5156, 7
  store i64 %5160, i64* %3, align 8
  %5161 = inttoptr i64 %5159 to i32*
  %5162 = load i32, i32* %5161, align 4
  %5163 = zext i32 %5162 to i64
  store i64 %5163, i64* %600, align 8
  %5164 = sub i32 %5162, %5155
  %5165 = icmp ult i32 %5162, %5155
  %5166 = zext i1 %5165 to i8
  store i8 %5166, i8* %20, align 1
  %5167 = and i32 %5164, 255
  %5168 = tail call i32 @llvm.ctpop.i32(i32 %5167)
  %5169 = trunc i32 %5168 to i8
  %5170 = and i8 %5169, 1
  %5171 = xor i8 %5170, 1
  store i8 %5171, i8* %27, align 1
  %5172 = xor i32 %5155, %5162
  %5173 = xor i32 %5172, %5164
  %5174 = lshr i32 %5173, 4
  %5175 = trunc i32 %5174 to i8
  %5176 = and i8 %5175, 1
  store i8 %5176, i8* %33, align 1
  %5177 = icmp eq i32 %5164, 0
  %5178 = zext i1 %5177 to i8
  store i8 %5178, i8* %36, align 1
  %5179 = lshr i32 %5164, 31
  %5180 = trunc i32 %5179 to i8
  store i8 %5180, i8* %39, align 1
  %5181 = lshr i32 %5162, 31
  %5182 = lshr i32 %5155, 31
  %5183 = xor i32 %5182, %5181
  %5184 = xor i32 %5179, %5181
  %5185 = add nuw nsw i32 %5184, %5183
  %5186 = icmp eq i32 %5185, 2
  %5187 = zext i1 %5186 to i8
  store i8 %5187, i8* %45, align 1
  %5188 = icmp ne i8 %5180, 0
  %5189 = xor i1 %5188, %5186
  %.v346 = select i1 %5189, i64 16, i64 41
  %5190 = add i64 %5156, %.v346
  store i64 %5190, i64* %3, align 8
  br i1 %5189, label %block_42ea68, label %block_.L_42ea81

block_42ea68:                                     ; preds = %routine_idivl__edi.exit
  %5191 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5191, i64* %RAX.i1585, align 8
  %5192 = add i64 %5191, 72684
  %5193 = add i64 %5190, 14
  store i64 %5193, i64* %3, align 8
  %5194 = inttoptr i64 %5192 to i32*
  %5195 = load i32, i32* %5194, align 4
  %5196 = zext i32 %5195 to i64
  store i64 %5196, i64* %RCX.i3128, align 8
  %5197 = add i64 %5157, -444
  %5198 = add i64 %5190, 20
  store i64 %5198, i64* %3, align 8
  %5199 = inttoptr i64 %5197 to i32*
  store i32 %5195, i32* %5199, align 4
  %5200 = load i64, i64* %3, align 8
  %5201 = add i64 %5200, 62
  store i64 %5201, i64* %3, align 8
  br label %block_.L_42eaba

block_.L_42ea81:                                  ; preds = %routine_idivl__edi.exit
  store i64 1024, i64* %RAX.i1585, align 8
  %5202 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %5202, i64* %RCX.i3128, align 8
  %5203 = add i64 %5157, -28
  %5204 = add i64 %5190, 17
  store i64 %5204, i64* %3, align 8
  %5205 = inttoptr i64 %5203 to i32*
  %5206 = load i32, i32* %5205, align 4
  %5207 = sext i32 %5206 to i64
  store i64 %5207, i64* %RDX.i5152, align 8
  %5208 = shl nsw i64 %5207, 3
  %5209 = add i64 %5208, %5202
  %5210 = add i64 %5190, 21
  store i64 %5210, i64* %3, align 8
  %5211 = inttoptr i64 %5209 to i64*
  %5212 = load i64, i64* %5211, align 8
  store i64 %5212, i64* %RCX.i3128, align 8
  %5213 = add i64 %5157, -24
  %5214 = add i64 %5190, 25
  store i64 %5214, i64* %3, align 8
  %5215 = inttoptr i64 %5213 to i32*
  %5216 = load i32, i32* %5215, align 4
  %5217 = sext i32 %5216 to i64
  store i64 %5217, i64* %RDX.i5152, align 8
  %5218 = shl nsw i64 %5217, 2
  %5219 = add i64 %5218, %5212
  %5220 = add i64 %5190, 28
  store i64 %5220, i64* %3, align 8
  %5221 = inttoptr i64 %5219 to i32*
  %5222 = load i32, i32* %5221, align 4
  %5223 = add i32 %5222, 512
  %5224 = zext i32 %5223 to i64
  store i64 %5224, i64* %RSI.i5212, align 8
  %5225 = icmp ugt i32 %5222, -513
  %5226 = zext i1 %5225 to i8
  store i8 %5226, i8* %20, align 1
  %5227 = and i32 %5223, 255
  %5228 = tail call i32 @llvm.ctpop.i32(i32 %5227)
  %5229 = trunc i32 %5228 to i8
  %5230 = and i8 %5229, 1
  %5231 = xor i8 %5230, 1
  store i8 %5231, i8* %27, align 1
  %5232 = xor i32 %5223, %5222
  %5233 = lshr i32 %5232, 4
  %5234 = trunc i32 %5233 to i8
  %5235 = and i8 %5234, 1
  store i8 %5235, i8* %33, align 1
  %5236 = icmp eq i32 %5223, 0
  %5237 = zext i1 %5236 to i8
  store i8 %5237, i8* %36, align 1
  %5238 = lshr i32 %5223, 31
  %5239 = trunc i32 %5238 to i8
  store i8 %5239, i8* %39, align 1
  %5240 = lshr i32 %5222, 31
  %5241 = xor i32 %5238, %5240
  %5242 = add nuw nsw i32 %5241, %5238
  %5243 = icmp eq i32 %5242, 2
  %5244 = zext i1 %5243 to i8
  store i8 %5244, i8* %45, align 1
  %5245 = add i64 %5157, -448
  %5246 = add i64 %5190, 40
  store i64 %5246, i64* %3, align 8
  %5247 = inttoptr i64 %5245 to i32*
  store i32 1024, i32* %5247, align 4
  %5248 = load i32, i32* %ESI.i5201, align 4
  %5249 = zext i32 %5248 to i64
  %5250 = load i64, i64* %3, align 8
  store i64 %5249, i64* %RAX.i1585, align 8
  %5251 = sext i32 %5248 to i64
  %5252 = lshr i64 %5251, 32
  store i64 %5252, i64* %3718, align 8
  %5253 = load i64, i64* %RBP.i, align 8
  %5254 = add i64 %5253, -448
  %5255 = add i64 %5250, 9
  store i64 %5255, i64* %3, align 8
  %5256 = inttoptr i64 %5254 to i32*
  %5257 = load i32, i32* %5256, align 4
  %5258 = zext i32 %5257 to i64
  store i64 %5258, i64* %RSI.i5212, align 8
  %5259 = add i64 %5250, 11
  store i64 %5259, i64* %3, align 8
  %5260 = sext i32 %5257 to i64
  %5261 = shl nuw i64 %5252, 32
  %5262 = or i64 %5261, %5249
  %5263 = sdiv i64 %5262, %5260
  %5264 = shl i64 %5263, 32
  %5265 = ashr exact i64 %5264, 32
  %5266 = icmp eq i64 %5263, %5265
  br i1 %5266, label %5269, label %5267

; <label>:5267:                                   ; preds = %block_.L_42ea81
  %5268 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5259, %struct.Memory* %5158)
  %.pre262 = load i64, i64* %RBP.i, align 8
  %.pre263 = load i32, i32* %EAX.i1609, align 4
  %.pre264 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit3331

; <label>:5269:                                   ; preds = %block_.L_42ea81
  %5270 = srem i64 %5262, %5260
  %5271 = and i64 %5263, 4294967295
  store i64 %5271, i64* %RAX.i1585, align 8
  %5272 = and i64 %5270, 4294967295
  store i64 %5272, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5273 = trunc i64 %5263 to i32
  br label %routine_idivl__esi.exit3331

routine_idivl__esi.exit3331:                      ; preds = %5269, %5267
  %5274 = phi i64 [ %.pre264, %5267 ], [ %5259, %5269 ]
  %5275 = phi i32 [ %.pre263, %5267 ], [ %5273, %5269 ]
  %5276 = phi i64 [ %.pre262, %5267 ], [ %5253, %5269 ]
  %5277 = phi %struct.Memory* [ %5268, %5267 ], [ %5158, %5269 ]
  %5278 = add i64 %5276, -444
  %5279 = add i64 %5274, 6
  store i64 %5279, i64* %3, align 8
  %5280 = inttoptr i64 %5278 to i32*
  store i32 %5275, i32* %5280, align 4
  %.pre265 = load i64, i64* %3, align 8
  br label %block_.L_42eaba

block_.L_42eaba:                                  ; preds = %routine_idivl__esi.exit3331, %block_42ea68
  %5281 = phi i64 [ %.pre265, %routine_idivl__esi.exit3331 ], [ %5201, %block_42ea68 ]
  %MEMORY.39 = phi %struct.Memory* [ %5277, %routine_idivl__esi.exit3331 ], [ %5158, %block_42ea68 ]
  %5282 = load i64, i64* %RBP.i, align 8
  %5283 = add i64 %5282, -444
  %5284 = add i64 %5281, 6
  store i64 %5284, i64* %3, align 8
  %5285 = inttoptr i64 %5283 to i32*
  %5286 = load i32, i32* %5285, align 4
  %5287 = zext i32 %5286 to i64
  store i64 %5287, i64* %RAX.i1585, align 8
  %5288 = add i64 %5282, -432
  %5289 = add i64 %5281, 12
  store i64 %5289, i64* %3, align 8
  %5290 = inttoptr i64 %5288 to i32*
  store i32 %5286, i32* %5290, align 4
  %.pre266 = load i64, i64* %3, align 8
  br label %block_.L_42eac6

block_.L_42eac6:                                  ; preds = %block_.L_42eaba, %block_42ea04
  %5291 = phi i64 [ %.pre266, %block_.L_42eaba ], [ %5068, %block_42ea04 ]
  %MEMORY.40 = phi %struct.Memory* [ %MEMORY.39, %block_.L_42eaba ], [ %MEMORY.38, %block_42ea04 ]
  %5292 = load i64, i64* %RBP.i, align 8
  %5293 = add i64 %5292, -432
  %5294 = add i64 %5291, 6
  store i64 %5294, i64* %3, align 8
  %5295 = inttoptr i64 %5293 to i32*
  %5296 = load i32, i32* %5295, align 4
  %5297 = zext i32 %5296 to i64
  store i64 %5297, i64* %RAX.i1585, align 8
  %5298 = trunc i32 %5296 to i16
  store i16 %5298, i16* %CX.i3316, align 2
  %5299 = add i64 %5292, -416
  %5300 = add i64 %5291, 16
  store i64 %5300, i64* %3, align 8
  %5301 = inttoptr i64 %5299 to i64*
  %5302 = load i64, i64* %5301, align 8
  store i64 %5302, i64* %RDI.i605, align 8
  %5303 = add i64 %5292, -404
  %5304 = add i64 %5291, 22
  store i64 %5304, i64* %3, align 8
  %5305 = inttoptr i64 %5303 to i32*
  %5306 = load i32, i32* %5305, align 4
  %5307 = zext i32 %5306 to i64
  store i64 %5307, i64* %RSI.i5212, align 8
  %5308 = add i64 %5292, -420
  %5309 = add i64 %5291, 28
  store i64 %5309, i64* %3, align 8
  %5310 = inttoptr i64 %5308 to i32*
  %5311 = load i32, i32* %5310, align 4
  %5312 = zext i32 %5311 to i64
  store i64 %5312, i64* %RDX.i5152, align 8
  %.mask315 = and i32 %5296, 65535
  %5313 = zext i32 %.mask315 to i64
  store i64 %5313, i64* %RCX.i3128, align 8
  %5314 = add i64 %5291, 456362
  %5315 = add i64 %5291, 36
  %5316 = load i64, i64* %6, align 8
  %5317 = add i64 %5316, -8
  %5318 = inttoptr i64 %5317 to i64*
  store i64 %5315, i64* %5318, align 8
  store i64 %5317, i64* %6, align 8
  store i64 %5314, i64* %3, align 8
  %call2_42eae5 = tail call %struct.Memory* @sub_49e170.PutPel_14(%struct.State* nonnull %0, i64 %5314, %struct.Memory* %MEMORY.40)
  %5319 = load i64, i64* %3, align 8
  store i64 1024, i64* %RAX.i1585, align 8
  %5320 = load i64, i64* %RBP.i, align 8
  %5321 = add i64 %5320, -56
  %5322 = add i64 %5319, 9
  store i64 %5322, i64* %3, align 8
  %5323 = inttoptr i64 %5321 to i64*
  %5324 = load i64, i64* %5323, align 8
  store i64 %5324, i64* %RDI.i605, align 8
  %5325 = add i64 %5320, -28
  %5326 = add i64 %5319, 12
  store i64 %5326, i64* %3, align 8
  %5327 = inttoptr i64 %5325 to i32*
  %5328 = load i32, i32* %5327, align 4
  %5329 = add i32 %5328, -4
  %5330 = shl i32 %5329, 2
  %5331 = or i32 %5330, 2
  %5332 = zext i32 %5331 to i64
  store i64 %5332, i64* %RCX.i3128, align 8
  store i8 0, i8* %20, align 1
  %5333 = and i32 %5331, 254
  %5334 = tail call i32 @llvm.ctpop.i32(i32 %5333)
  %5335 = trunc i32 %5334 to i8
  %5336 = and i8 %5335, 1
  %5337 = xor i8 %5336, 1
  store i8 %5337, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  %5338 = lshr i32 %5329, 29
  %5339 = and i32 %5338, 1
  %5340 = trunc i32 %5339 to i8
  store i8 %5340, i8* %39, align 1
  %5341 = lshr i32 %5329, 29
  %5342 = and i32 %5341, 1
  %5343 = xor i32 %5339, %5342
  %5344 = add nuw nsw i32 %5343, %5339
  %5345 = icmp eq i32 %5344, 2
  %5346 = zext i1 %5345 to i8
  store i8 %5346, i8* %45, align 1
  %5347 = add i64 %5320, -24
  %5348 = add i64 %5319, 24
  store i64 %5348, i64* %3, align 8
  %5349 = inttoptr i64 %5347 to i32*
  %5350 = load i32, i32* %5349, align 4
  %5351 = add i32 %5350, -8
  %5352 = lshr i32 %5351, 31
  %5353 = trunc i32 %5352 to i8
  %5354 = shl i32 %5351, 1
  %5355 = icmp slt i32 %5351, 0
  %5356 = icmp slt i32 %5354, 0
  %5357 = xor i1 %5355, %5356
  %5358 = zext i32 %5354 to i64
  store i64 %5358, i64* %RDX.i5152, align 8
  store i8 %5353, i8* %20, align 1
  %5359 = and i32 %5354, 254
  %5360 = tail call i32 @llvm.ctpop.i32(i32 %5359)
  %5361 = trunc i32 %5360 to i8
  %5362 = and i8 %5361, 1
  %5363 = xor i8 %5362, 1
  store i8 %5363, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %5364 = icmp eq i32 %5354, 0
  %5365 = zext i1 %5364 to i8
  store i8 %5365, i8* %36, align 1
  %5366 = lshr i32 %5351, 30
  %5367 = trunc i32 %5366 to i8
  %5368 = and i8 %5367, 1
  store i8 %5368, i8* %39, align 1
  %5369 = zext i1 %5357 to i8
  store i8 %5369, i8* %45, align 1
  %5370 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5370, i64* %600, align 8
  %5371 = add i64 %5370, 72684
  %5372 = add i64 %5319, 44
  store i64 %5372, i64* %3, align 8
  %5373 = inttoptr i64 %5371 to i32*
  %5374 = load i32, i32* %5373, align 4
  %5375 = zext i32 %5374 to i64
  store i64 %5375, i64* %RSI.i5212, align 8
  %5376 = load i64, i64* %RBP.i, align 8
  %5377 = add i64 %5376, -20
  %5378 = add i64 %5319, 48
  store i64 %5378, i64* %3, align 8
  %5379 = inttoptr i64 %5377 to i32*
  %5380 = load i32, i32* %5379, align 4
  %5381 = add i32 %5380, 512
  %5382 = zext i32 %5381 to i64
  store i64 %5382, i64* %602, align 8
  %5383 = icmp ugt i32 %5380, -513
  %5384 = zext i1 %5383 to i8
  store i8 %5384, i8* %20, align 1
  %5385 = and i32 %5381, 255
  %5386 = tail call i32 @llvm.ctpop.i32(i32 %5385)
  %5387 = trunc i32 %5386 to i8
  %5388 = and i8 %5387, 1
  %5389 = xor i8 %5388, 1
  store i8 %5389, i8* %27, align 1
  %5390 = xor i32 %5381, %5380
  %5391 = lshr i32 %5390, 4
  %5392 = trunc i32 %5391 to i8
  %5393 = and i8 %5392, 1
  store i8 %5393, i8* %33, align 1
  %5394 = icmp eq i32 %5381, 0
  %5395 = zext i1 %5394 to i8
  store i8 %5395, i8* %36, align 1
  %5396 = lshr i32 %5381, 31
  %5397 = trunc i32 %5396 to i8
  store i8 %5397, i8* %39, align 1
  %5398 = lshr i32 %5380, 31
  %5399 = xor i32 %5396, %5398
  %5400 = add nuw nsw i32 %5399, %5396
  %5401 = icmp eq i32 %5400, 2
  %5402 = zext i1 %5401 to i8
  store i8 %5402, i8* %45, align 1
  %5403 = add i64 %5376, -452
  %5404 = load i32, i32* %EAX.i1609, align 4
  %5405 = add i64 %5319, 61
  store i64 %5405, i64* %3, align 8
  %5406 = inttoptr i64 %5403 to i32*
  store i32 %5404, i32* %5406, align 4
  %5407 = load i32, i32* %R9D.i4678, align 4
  %5408 = zext i32 %5407 to i64
  %5409 = load i64, i64* %3, align 8
  store i64 %5408, i64* %RAX.i1585, align 8
  %5410 = load i64, i64* %RBP.i, align 8
  %5411 = add i64 %5410, -456
  %5412 = load i32, i32* %EDX.i5198, align 4
  %5413 = add i64 %5409, 9
  store i64 %5413, i64* %3, align 8
  %5414 = inttoptr i64 %5411 to i32*
  store i32 %5412, i32* %5414, align 4
  %5415 = load i64, i64* %3, align 8
  %5416 = load i32, i32* %EAX.i1609, align 8
  %5417 = sext i32 %5416 to i64
  %5418 = lshr i64 %5417, 32
  store i64 %5418, i64* %3718, align 8
  %5419 = load i64, i64* %RBP.i, align 8
  %5420 = add i64 %5419, -452
  %5421 = add i64 %5415, 8
  store i64 %5421, i64* %3, align 8
  %5422 = inttoptr i64 %5420 to i32*
  %5423 = load i32, i32* %5422, align 4
  %5424 = zext i32 %5423 to i64
  store i64 %5424, i64* %602, align 8
  %5425 = add i64 %5415, 11
  store i64 %5425, i64* %3, align 8
  %5426 = zext i32 %5416 to i64
  %5427 = sext i32 %5423 to i64
  %5428 = shl nuw i64 %5418, 32
  %5429 = or i64 %5428, %5426
  %5430 = sdiv i64 %5429, %5427
  %5431 = shl i64 %5430, 32
  %5432 = ashr exact i64 %5431, 32
  %5433 = icmp eq i64 %5430, %5432
  br i1 %5433, label %5436, label %5434

; <label>:5434:                                   ; preds = %block_.L_42eac6
  %5435 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5425, %struct.Memory* %call2_42eae5)
  %.pre267 = load i32, i32* %EAX.i1609, align 4
  %.pre268 = load i64, i64* %3, align 8
  %.pre269 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__r9d.exit

; <label>:5436:                                   ; preds = %block_.L_42eac6
  %5437 = srem i64 %5429, %5427
  %5438 = and i64 %5430, 4294967295
  store i64 %5438, i64* %RAX.i1585, align 8
  %5439 = and i64 %5437, 4294967295
  store i64 %5439, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5440 = trunc i64 %5430 to i32
  br label %routine_idivl__r9d.exit

routine_idivl__r9d.exit:                          ; preds = %5436, %5434
  %5441 = phi i64 [ %.pre269, %5434 ], [ %5419, %5436 ]
  %5442 = phi i64 [ %.pre268, %5434 ], [ %5425, %5436 ]
  %5443 = phi i32 [ %.pre267, %5434 ], [ %5440, %5436 ]
  %5444 = phi %struct.Memory* [ %5435, %5434 ], [ %call2_42eae5, %5436 ]
  %5445 = load i32, i32* %ESI.i5201, align 4
  %5446 = sub i32 %5445, %5443
  %5447 = icmp ult i32 %5445, %5443
  %5448 = zext i1 %5447 to i8
  store i8 %5448, i8* %20, align 1
  %5449 = and i32 %5446, 255
  %5450 = tail call i32 @llvm.ctpop.i32(i32 %5449)
  %5451 = trunc i32 %5450 to i8
  %5452 = and i8 %5451, 1
  %5453 = xor i8 %5452, 1
  store i8 %5453, i8* %27, align 1
  %5454 = xor i32 %5443, %5445
  %5455 = xor i32 %5454, %5446
  %5456 = lshr i32 %5455, 4
  %5457 = trunc i32 %5456 to i8
  %5458 = and i8 %5457, 1
  store i8 %5458, i8* %33, align 1
  %5459 = icmp eq i32 %5446, 0
  %5460 = zext i1 %5459 to i8
  store i8 %5460, i8* %36, align 1
  %5461 = lshr i32 %5446, 31
  %5462 = trunc i32 %5461 to i8
  store i8 %5462, i8* %39, align 1
  %5463 = lshr i32 %5445, 31
  %5464 = lshr i32 %5443, 31
  %5465 = xor i32 %5464, %5463
  %5466 = xor i32 %5461, %5463
  %5467 = add nuw nsw i32 %5466, %5465
  %5468 = icmp eq i32 %5467, 2
  %5469 = zext i1 %5468 to i8
  store i8 %5469, i8* %45, align 1
  %5470 = add i64 %5441, -464
  %5471 = load i64, i64* %RDI.i605, align 8
  %5472 = add i64 %5442, 9
  store i64 %5472, i64* %3, align 8
  %5473 = inttoptr i64 %5470 to i64*
  store i64 %5471, i64* %5473, align 8
  %5474 = load i64, i64* %RBP.i, align 8
  %5475 = add i64 %5474, -468
  %5476 = load i32, i32* %ECX.i3256, align 4
  %5477 = load i64, i64* %3, align 8
  %5478 = add i64 %5477, 6
  store i64 %5478, i64* %3, align 8
  %5479 = inttoptr i64 %5475 to i32*
  store i32 %5476, i32* %5479, align 4
  %5480 = load i64, i64* %3, align 8
  %5481 = load i8, i8* %39, align 1
  %5482 = icmp ne i8 %5481, 0
  %5483 = load i8, i8* %45, align 1
  %5484 = icmp ne i8 %5483, 0
  %5485 = xor i1 %5482, %5484
  %.v407 = select i1 %5485, i64 6, i64 31
  %5486 = add i64 %5480, %.v407
  store i64 %5486, i64* %3, align 8
  br i1 %5485, label %block_42eb51, label %block_.L_42eb6a

block_42eb51:                                     ; preds = %routine_idivl__r9d.exit
  %5487 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5487, i64* %RAX.i1585, align 8
  %5488 = add i64 %5487, 72684
  %5489 = add i64 %5486, 14
  store i64 %5489, i64* %3, align 8
  %5490 = inttoptr i64 %5488 to i32*
  %5491 = load i32, i32* %5490, align 4
  %5492 = zext i32 %5491 to i64
  store i64 %5492, i64* %RCX.i3128, align 8
  %5493 = load i64, i64* %RBP.i, align 8
  %5494 = add i64 %5493, -472
  %5495 = add i64 %5486, 20
  store i64 %5495, i64* %3, align 8
  %5496 = inttoptr i64 %5494 to i32*
  store i32 %5491, i32* %5496, align 4
  %5497 = load i64, i64* %3, align 8
  %5498 = add i64 %5497, 42
  store i64 %5498, i64* %3, align 8
  br label %block_.L_42eb8f

block_.L_42eb6a:                                  ; preds = %routine_idivl__r9d.exit
  store i64 1024, i64* %RAX.i1585, align 8
  %5499 = load i64, i64* %RBP.i, align 8
  %5500 = add i64 %5499, -20
  %5501 = add i64 %5486, 8
  store i64 %5501, i64* %3, align 8
  %5502 = inttoptr i64 %5500 to i32*
  %5503 = load i32, i32* %5502, align 4
  %5504 = add i32 %5503, 512
  %5505 = zext i32 %5504 to i64
  store i64 %5505, i64* %RCX.i3128, align 8
  %5506 = icmp ugt i32 %5503, -513
  %5507 = zext i1 %5506 to i8
  store i8 %5507, i8* %20, align 1
  %5508 = and i32 %5504, 255
  %5509 = tail call i32 @llvm.ctpop.i32(i32 %5508)
  %5510 = trunc i32 %5509 to i8
  %5511 = and i8 %5510, 1
  %5512 = xor i8 %5511, 1
  store i8 %5512, i8* %27, align 1
  %5513 = xor i32 %5504, %5503
  %5514 = lshr i32 %5513, 4
  %5515 = trunc i32 %5514 to i8
  %5516 = and i8 %5515, 1
  store i8 %5516, i8* %33, align 1
  %5517 = icmp eq i32 %5504, 0
  %5518 = zext i1 %5517 to i8
  store i8 %5518, i8* %36, align 1
  %5519 = lshr i32 %5504, 31
  %5520 = trunc i32 %5519 to i8
  store i8 %5520, i8* %39, align 1
  %5521 = lshr i32 %5503, 31
  %5522 = xor i32 %5519, %5521
  %5523 = add nuw nsw i32 %5522, %5519
  %5524 = icmp eq i32 %5523, 2
  %5525 = zext i1 %5524 to i8
  store i8 %5525, i8* %45, align 1
  %5526 = add i64 %5499, -476
  %5527 = add i64 %5486, 20
  store i64 %5527, i64* %3, align 8
  %5528 = inttoptr i64 %5526 to i32*
  store i32 1024, i32* %5528, align 4
  %5529 = load i32, i32* %ECX.i3256, align 4
  %5530 = zext i32 %5529 to i64
  %5531 = load i64, i64* %3, align 8
  store i64 %5530, i64* %RAX.i1585, align 8
  %5532 = sext i32 %5529 to i64
  %5533 = lshr i64 %5532, 32
  store i64 %5533, i64* %3718, align 8
  %5534 = load i64, i64* %RBP.i, align 8
  %5535 = add i64 %5534, -476
  %5536 = add i64 %5531, 9
  store i64 %5536, i64* %3, align 8
  %5537 = inttoptr i64 %5535 to i32*
  %5538 = load i32, i32* %5537, align 4
  %5539 = zext i32 %5538 to i64
  store i64 %5539, i64* %RCX.i3128, align 8
  %5540 = add i64 %5531, 11
  store i64 %5540, i64* %3, align 8
  %5541 = sext i32 %5538 to i64
  %5542 = shl nuw i64 %5533, 32
  %5543 = or i64 %5542, %5530
  %5544 = sdiv i64 %5543, %5541
  %5545 = shl i64 %5544, 32
  %5546 = ashr exact i64 %5545, 32
  %5547 = icmp eq i64 %5544, %5546
  br i1 %5547, label %5550, label %5548

; <label>:5548:                                   ; preds = %block_.L_42eb6a
  %5549 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5540, %struct.Memory* %5444)
  %.pre270 = load i64, i64* %RBP.i, align 8
  %.pre271 = load i32, i32* %EAX.i1609, align 4
  %.pre272 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3213

; <label>:5550:                                   ; preds = %block_.L_42eb6a
  %5551 = srem i64 %5543, %5541
  %5552 = and i64 %5544, 4294967295
  store i64 %5552, i64* %RAX.i1585, align 8
  %5553 = and i64 %5551, 4294967295
  store i64 %5553, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5554 = trunc i64 %5544 to i32
  br label %routine_idivl__ecx.exit3213

routine_idivl__ecx.exit3213:                      ; preds = %5550, %5548
  %5555 = phi i64 [ %.pre272, %5548 ], [ %5540, %5550 ]
  %5556 = phi i32 [ %.pre271, %5548 ], [ %5554, %5550 ]
  %5557 = phi i64 [ %.pre270, %5548 ], [ %5534, %5550 ]
  %5558 = phi %struct.Memory* [ %5549, %5548 ], [ %5444, %5550 ]
  %5559 = add i64 %5557, -472
  %5560 = add i64 %5555, 6
  store i64 %5560, i64* %3, align 8
  %5561 = inttoptr i64 %5559 to i32*
  store i32 %5556, i32* %5561, align 4
  %.pre273 = load i64, i64* %3, align 8
  br label %block_.L_42eb8f

block_.L_42eb8f:                                  ; preds = %routine_idivl__ecx.exit3213, %block_42eb51
  %5562 = phi i64 [ %.pre273, %routine_idivl__ecx.exit3213 ], [ %5498, %block_42eb51 ]
  %MEMORY.41 = phi %struct.Memory* [ %5558, %routine_idivl__ecx.exit3213 ], [ %5444, %block_42eb51 ]
  %5563 = load i64, i64* %RBP.i, align 8
  %5564 = add i64 %5563, -472
  %5565 = add i64 %5562, 6
  store i64 %5565, i64* %3, align 8
  %5566 = inttoptr i64 %5564 to i32*
  %5567 = load i32, i32* %5566, align 4
  %5568 = zext i32 %5567 to i64
  store i64 %5568, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %5569 = sub i32 0, %5567
  %5570 = icmp ne i32 %5567, 0
  %5571 = zext i1 %5570 to i8
  store i8 %5571, i8* %20, align 1
  %5572 = and i32 %5569, 255
  %5573 = tail call i32 @llvm.ctpop.i32(i32 %5572)
  %5574 = trunc i32 %5573 to i8
  %5575 = and i8 %5574, 1
  %5576 = xor i8 %5575, 1
  store i8 %5576, i8* %27, align 1
  %5577 = xor i32 %5567, %5569
  %5578 = lshr i32 %5577, 4
  %5579 = trunc i32 %5578 to i8
  %5580 = and i8 %5579, 1
  store i8 %5580, i8* %33, align 1
  %5581 = icmp eq i32 %5567, 0
  %5582 = zext i1 %5581 to i8
  store i8 %5582, i8* %36, align 1
  %5583 = lshr i32 %5569, 31
  %5584 = trunc i32 %5583 to i8
  store i8 %5584, i8* %39, align 1
  %5585 = lshr i32 %5567, 31
  %5586 = add nuw nsw i32 %5583, %5585
  %5587 = icmp eq i32 %5586, 2
  %5588 = zext i1 %5587 to i8
  store i8 %5588, i8* %45, align 1
  %5589 = icmp ne i8 %5584, 0
  %5590 = xor i1 %5589, %5587
  %5591 = or i1 %5581, %5590
  %.v344 = select i1 %5591, i64 29, i64 16
  %5592 = add i64 %5562, %.v344
  store i64 %5592, i64* %3, align 8
  br i1 %5591, label %block_.L_42ebac, label %block_42eb9f

block_42eb9f:                                     ; preds = %block_.L_42eb8f
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %5593 = add i64 %5563, -480
  %5594 = add i64 %5592, 8
  store i64 %5594, i64* %3, align 8
  %5595 = inttoptr i64 %5593 to i32*
  store i32 0, i32* %5595, align 4
  %5596 = load i64, i64* %3, align 8
  %5597 = add i64 %5596, 144
  store i64 %5597, i64* %3, align 8
  br label %block_.L_42ec37

block_.L_42ebac:                                  ; preds = %block_.L_42eb8f
  store i64 1024, i64* %RAX.i1585, align 8
  %5598 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5598, i64* %RCX.i3128, align 8
  %5599 = add i64 %5598, 72684
  %5600 = add i64 %5592, 19
  store i64 %5600, i64* %3, align 8
  %5601 = inttoptr i64 %5599 to i32*
  %5602 = load i32, i32* %5601, align 4
  %5603 = zext i32 %5602 to i64
  store i64 %5603, i64* %RDX.i5152, align 8
  %5604 = add i64 %5563, -20
  %5605 = add i64 %5592, 22
  store i64 %5605, i64* %3, align 8
  %5606 = inttoptr i64 %5604 to i32*
  %5607 = load i32, i32* %5606, align 4
  %5608 = add i32 %5607, 512
  %5609 = zext i32 %5608 to i64
  store i64 %5609, i64* %RSI.i5212, align 8
  %5610 = icmp ugt i32 %5607, -513
  %5611 = zext i1 %5610 to i8
  store i8 %5611, i8* %20, align 1
  %5612 = and i32 %5608, 255
  %5613 = tail call i32 @llvm.ctpop.i32(i32 %5612)
  %5614 = trunc i32 %5613 to i8
  %5615 = and i8 %5614, 1
  %5616 = xor i8 %5615, 1
  store i8 %5616, i8* %27, align 1
  %5617 = xor i32 %5608, %5607
  %5618 = lshr i32 %5617, 4
  %5619 = trunc i32 %5618 to i8
  %5620 = and i8 %5619, 1
  store i8 %5620, i8* %33, align 1
  %5621 = icmp eq i32 %5608, 0
  %5622 = zext i1 %5621 to i8
  store i8 %5622, i8* %36, align 1
  %5623 = lshr i32 %5608, 31
  %5624 = trunc i32 %5623 to i8
  store i8 %5624, i8* %39, align 1
  %5625 = lshr i32 %5607, 31
  %5626 = xor i32 %5623, %5625
  %5627 = add nuw nsw i32 %5626, %5623
  %5628 = icmp eq i32 %5627, 2
  %5629 = zext i1 %5628 to i8
  store i8 %5629, i8* %45, align 1
  %5630 = add i64 %5563, -484
  %5631 = add i64 %5592, 34
  store i64 %5631, i64* %3, align 8
  %5632 = inttoptr i64 %5630 to i32*
  store i32 1024, i32* %5632, align 4
  %5633 = load i32, i32* %ESI.i5201, align 4
  %5634 = zext i32 %5633 to i64
  %5635 = load i64, i64* %3, align 8
  store i64 %5634, i64* %RAX.i1585, align 8
  %5636 = load i64, i64* %RBP.i, align 8
  %5637 = add i64 %5636, -488
  %5638 = load i32, i32* %EDX.i5198, align 4
  %5639 = add i64 %5635, 8
  store i64 %5639, i64* %3, align 8
  %5640 = inttoptr i64 %5637 to i32*
  store i32 %5638, i32* %5640, align 4
  %5641 = load i64, i64* %3, align 8
  %5642 = load i32, i32* %EAX.i1609, align 8
  %5643 = sext i32 %5642 to i64
  %5644 = lshr i64 %5643, 32
  store i64 %5644, i64* %3718, align 8
  %5645 = load i64, i64* %RBP.i, align 8
  %5646 = add i64 %5645, -484
  %5647 = add i64 %5641, 7
  store i64 %5647, i64* %3, align 8
  %5648 = inttoptr i64 %5646 to i32*
  %5649 = load i32, i32* %5648, align 4
  %5650 = zext i32 %5649 to i64
  store i64 %5650, i64* %RSI.i5212, align 8
  %5651 = add i64 %5641, 9
  store i64 %5651, i64* %3, align 8
  %5652 = zext i32 %5642 to i64
  %5653 = sext i32 %5649 to i64
  %5654 = shl nuw i64 %5644, 32
  %5655 = or i64 %5654, %5652
  %5656 = sdiv i64 %5655, %5653
  %5657 = shl i64 %5656, 32
  %5658 = ashr exact i64 %5657, 32
  %5659 = icmp eq i64 %5656, %5658
  br i1 %5659, label %5662, label %5660

; <label>:5660:                                   ; preds = %block_.L_42ebac
  %5661 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5651, %struct.Memory* %MEMORY.41)
  %.pre274 = load i64, i64* %RBP.i, align 8
  %.pre275 = load i64, i64* %3, align 8
  %.pre276 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__esi.exit

; <label>:5662:                                   ; preds = %block_.L_42ebac
  %5663 = srem i64 %5655, %5653
  %5664 = and i64 %5656, 4294967295
  store i64 %5664, i64* %RAX.i1585, align 8
  %5665 = and i64 %5663, 4294967295
  store i64 %5665, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5666 = trunc i64 %5656 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %5662, %5660
  %5667 = phi i32 [ %.pre276, %5660 ], [ %5666, %5662 ]
  %5668 = phi i64 [ %.pre275, %5660 ], [ %5651, %5662 ]
  %5669 = phi i64 [ %.pre274, %5660 ], [ %5645, %5662 ]
  %5670 = phi %struct.Memory* [ %5661, %5660 ], [ %MEMORY.41, %5662 ]
  %5671 = add i64 %5669, -488
  %5672 = add i64 %5668, 6
  store i64 %5672, i64* %3, align 8
  %5673 = inttoptr i64 %5671 to i32*
  %5674 = load i32, i32* %5673, align 4
  %5675 = zext i32 %5674 to i64
  store i64 %5675, i64* %RDI.i605, align 8
  %5676 = sub i32 %5674, %5667
  %5677 = icmp ult i32 %5674, %5667
  %5678 = zext i1 %5677 to i8
  store i8 %5678, i8* %20, align 1
  %5679 = and i32 %5676, 255
  %5680 = tail call i32 @llvm.ctpop.i32(i32 %5679)
  %5681 = trunc i32 %5680 to i8
  %5682 = and i8 %5681, 1
  %5683 = xor i8 %5682, 1
  store i8 %5683, i8* %27, align 1
  %5684 = xor i32 %5667, %5674
  %5685 = xor i32 %5684, %5676
  %5686 = lshr i32 %5685, 4
  %5687 = trunc i32 %5686 to i8
  %5688 = and i8 %5687, 1
  store i8 %5688, i8* %33, align 1
  %5689 = icmp eq i32 %5676, 0
  %5690 = zext i1 %5689 to i8
  store i8 %5690, i8* %36, align 1
  %5691 = lshr i32 %5676, 31
  %5692 = trunc i32 %5691 to i8
  store i8 %5692, i8* %39, align 1
  %5693 = lshr i32 %5674, 31
  %5694 = lshr i32 %5667, 31
  %5695 = xor i32 %5694, %5693
  %5696 = xor i32 %5691, %5693
  %5697 = add nuw nsw i32 %5696, %5695
  %5698 = icmp eq i32 %5697, 2
  %5699 = zext i1 %5698 to i8
  store i8 %5699, i8* %45, align 1
  %5700 = icmp ne i8 %5692, 0
  %5701 = xor i1 %5700, %5698
  %.v345 = select i1 %5701, i64 14, i64 39
  %5702 = add i64 %5668, %.v345
  store i64 %5702, i64* %3, align 8
  br i1 %5701, label %block_42ebed, label %block_.L_42ec06

block_42ebed:                                     ; preds = %routine_idivl__esi.exit
  %5703 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5703, i64* %RAX.i1585, align 8
  %5704 = add i64 %5703, 72684
  %5705 = add i64 %5702, 14
  store i64 %5705, i64* %3, align 8
  %5706 = inttoptr i64 %5704 to i32*
  %5707 = load i32, i32* %5706, align 4
  %5708 = zext i32 %5707 to i64
  store i64 %5708, i64* %RCX.i3128, align 8
  %5709 = add i64 %5669, -492
  %5710 = add i64 %5702, 20
  store i64 %5710, i64* %3, align 8
  %5711 = inttoptr i64 %5709 to i32*
  store i32 %5707, i32* %5711, align 4
  %5712 = load i64, i64* %3, align 8
  %5713 = add i64 %5712, 42
  store i64 %5713, i64* %3, align 8
  br label %block_.L_42ec2b

block_.L_42ec06:                                  ; preds = %routine_idivl__esi.exit
  store i64 1024, i64* %RAX.i1585, align 8
  %5714 = add i64 %5669, -20
  %5715 = add i64 %5702, 8
  store i64 %5715, i64* %3, align 8
  %5716 = inttoptr i64 %5714 to i32*
  %5717 = load i32, i32* %5716, align 4
  %5718 = add i32 %5717, 512
  %5719 = zext i32 %5718 to i64
  store i64 %5719, i64* %RCX.i3128, align 8
  %5720 = icmp ugt i32 %5717, -513
  %5721 = zext i1 %5720 to i8
  store i8 %5721, i8* %20, align 1
  %5722 = and i32 %5718, 255
  %5723 = tail call i32 @llvm.ctpop.i32(i32 %5722)
  %5724 = trunc i32 %5723 to i8
  %5725 = and i8 %5724, 1
  %5726 = xor i8 %5725, 1
  store i8 %5726, i8* %27, align 1
  %5727 = xor i32 %5718, %5717
  %5728 = lshr i32 %5727, 4
  %5729 = trunc i32 %5728 to i8
  %5730 = and i8 %5729, 1
  store i8 %5730, i8* %33, align 1
  %5731 = icmp eq i32 %5718, 0
  %5732 = zext i1 %5731 to i8
  store i8 %5732, i8* %36, align 1
  %5733 = lshr i32 %5718, 31
  %5734 = trunc i32 %5733 to i8
  store i8 %5734, i8* %39, align 1
  %5735 = lshr i32 %5717, 31
  %5736 = xor i32 %5733, %5735
  %5737 = add nuw nsw i32 %5736, %5733
  %5738 = icmp eq i32 %5737, 2
  %5739 = zext i1 %5738 to i8
  store i8 %5739, i8* %45, align 1
  %5740 = add i64 %5669, -496
  %5741 = add i64 %5702, 20
  store i64 %5741, i64* %3, align 8
  %5742 = inttoptr i64 %5740 to i32*
  store i32 1024, i32* %5742, align 4
  %5743 = load i32, i32* %ECX.i3256, align 4
  %5744 = zext i32 %5743 to i64
  %5745 = load i64, i64* %3, align 8
  store i64 %5744, i64* %RAX.i1585, align 8
  %5746 = sext i32 %5743 to i64
  %5747 = lshr i64 %5746, 32
  store i64 %5747, i64* %3718, align 8
  %5748 = load i64, i64* %RBP.i, align 8
  %5749 = add i64 %5748, -496
  %5750 = add i64 %5745, 9
  store i64 %5750, i64* %3, align 8
  %5751 = inttoptr i64 %5749 to i32*
  %5752 = load i32, i32* %5751, align 4
  %5753 = zext i32 %5752 to i64
  store i64 %5753, i64* %RCX.i3128, align 8
  %5754 = add i64 %5745, 11
  store i64 %5754, i64* %3, align 8
  %5755 = sext i32 %5752 to i64
  %5756 = shl nuw i64 %5747, 32
  %5757 = or i64 %5756, %5744
  %5758 = sdiv i64 %5757, %5755
  %5759 = shl i64 %5758, 32
  %5760 = ashr exact i64 %5759, 32
  %5761 = icmp eq i64 %5758, %5760
  br i1 %5761, label %5764, label %5762

; <label>:5762:                                   ; preds = %block_.L_42ec06
  %5763 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5754, %struct.Memory* %5670)
  %.pre277 = load i64, i64* %RBP.i, align 8
  %.pre278 = load i32, i32* %EAX.i1609, align 4
  %.pre279 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3125

; <label>:5764:                                   ; preds = %block_.L_42ec06
  %5765 = srem i64 %5757, %5755
  %5766 = and i64 %5758, 4294967295
  store i64 %5766, i64* %RAX.i1585, align 8
  %5767 = and i64 %5765, 4294967295
  store i64 %5767, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5768 = trunc i64 %5758 to i32
  br label %routine_idivl__ecx.exit3125

routine_idivl__ecx.exit3125:                      ; preds = %5764, %5762
  %5769 = phi i64 [ %.pre279, %5762 ], [ %5754, %5764 ]
  %5770 = phi i32 [ %.pre278, %5762 ], [ %5768, %5764 ]
  %5771 = phi i64 [ %.pre277, %5762 ], [ %5748, %5764 ]
  %5772 = phi %struct.Memory* [ %5763, %5762 ], [ %5670, %5764 ]
  %5773 = add i64 %5771, -492
  %5774 = add i64 %5769, 6
  store i64 %5774, i64* %3, align 8
  %5775 = inttoptr i64 %5773 to i32*
  store i32 %5770, i32* %5775, align 4
  %.pre280 = load i64, i64* %3, align 8
  br label %block_.L_42ec2b

block_.L_42ec2b:                                  ; preds = %routine_idivl__ecx.exit3125, %block_42ebed
  %5776 = phi i64 [ %.pre280, %routine_idivl__ecx.exit3125 ], [ %5713, %block_42ebed ]
  %MEMORY.42 = phi %struct.Memory* [ %5772, %routine_idivl__ecx.exit3125 ], [ %5670, %block_42ebed ]
  %5777 = load i64, i64* %RBP.i, align 8
  %5778 = add i64 %5777, -492
  %5779 = add i64 %5776, 6
  store i64 %5779, i64* %3, align 8
  %5780 = inttoptr i64 %5778 to i32*
  %5781 = load i32, i32* %5780, align 4
  %5782 = zext i32 %5781 to i64
  store i64 %5782, i64* %RAX.i1585, align 8
  %5783 = add i64 %5777, -480
  %5784 = add i64 %5776, 12
  store i64 %5784, i64* %3, align 8
  %5785 = inttoptr i64 %5783 to i32*
  store i32 %5781, i32* %5785, align 4
  %.pre281 = load i64, i64* %3, align 8
  br label %block_.L_42ec37

block_.L_42ec37:                                  ; preds = %block_.L_42ec2b, %block_42eb9f
  %5786 = phi i64 [ %.pre281, %block_.L_42ec2b ], [ %5597, %block_42eb9f ]
  %MEMORY.43 = phi %struct.Memory* [ %MEMORY.42, %block_.L_42ec2b ], [ %MEMORY.41, %block_42eb9f ]
  %5787 = load i64, i64* %RBP.i, align 8
  %5788 = add i64 %5787, -480
  %5789 = add i64 %5786, 6
  store i64 %5789, i64* %3, align 8
  %5790 = inttoptr i64 %5788 to i32*
  %5791 = load i32, i32* %5790, align 4
  %5792 = zext i32 %5791 to i64
  store i64 %5792, i64* %RAX.i1585, align 8
  %5793 = trunc i32 %5791 to i16
  store i16 %5793, i16* %CX.i3316, align 2
  %5794 = add i64 %5787, -464
  %5795 = add i64 %5786, 16
  store i64 %5795, i64* %3, align 8
  %5796 = inttoptr i64 %5794 to i64*
  %5797 = load i64, i64* %5796, align 8
  store i64 %5797, i64* %RDI.i605, align 8
  %5798 = add i64 %5787, -468
  %5799 = add i64 %5786, 22
  store i64 %5799, i64* %3, align 8
  %5800 = inttoptr i64 %5798 to i32*
  %5801 = load i32, i32* %5800, align 4
  %5802 = zext i32 %5801 to i64
  store i64 %5802, i64* %RSI.i5212, align 8
  %5803 = add i64 %5787, -456
  %5804 = add i64 %5786, 28
  store i64 %5804, i64* %3, align 8
  %5805 = inttoptr i64 %5803 to i32*
  %5806 = load i32, i32* %5805, align 4
  %5807 = zext i32 %5806 to i64
  store i64 %5807, i64* %RDX.i5152, align 8
  %.mask316 = and i32 %5791, 65535
  %5808 = zext i32 %.mask316 to i64
  store i64 %5808, i64* %RCX.i3128, align 8
  %5809 = add i64 %5786, 455993
  %5810 = add i64 %5786, 36
  %5811 = load i64, i64* %6, align 8
  %5812 = add i64 %5811, -8
  %5813 = inttoptr i64 %5812 to i64*
  store i64 %5810, i64* %5813, align 8
  store i64 %5812, i64* %6, align 8
  store i64 %5809, i64* %3, align 8
  %call2_42ec56 = tail call %struct.Memory* @sub_49e170.PutPel_14(%struct.State* nonnull %0, i64 %5809, %struct.Memory* %MEMORY.43)
  %5814 = load i64, i64* %RBP.i, align 8
  %5815 = add i64 %5814, -28
  %5816 = load i64, i64* %3, align 8
  %5817 = add i64 %5816, 3
  store i64 %5817, i64* %3, align 8
  %5818 = inttoptr i64 %5815 to i32*
  %5819 = load i32, i32* %5818, align 4
  %5820 = add i32 %5819, 1
  %5821 = zext i32 %5820 to i64
  store i64 %5821, i64* %RAX.i1585, align 8
  %5822 = icmp eq i32 %5819, -1
  %5823 = icmp eq i32 %5820, 0
  %5824 = or i1 %5822, %5823
  %5825 = zext i1 %5824 to i8
  store i8 %5825, i8* %20, align 1
  %5826 = and i32 %5820, 255
  %5827 = tail call i32 @llvm.ctpop.i32(i32 %5826)
  %5828 = trunc i32 %5827 to i8
  %5829 = and i8 %5828, 1
  %5830 = xor i8 %5829, 1
  store i8 %5830, i8* %27, align 1
  %5831 = xor i32 %5820, %5819
  %5832 = lshr i32 %5831, 4
  %5833 = trunc i32 %5832 to i8
  %5834 = and i8 %5833, 1
  store i8 %5834, i8* %33, align 1
  %5835 = zext i1 %5823 to i8
  store i8 %5835, i8* %36, align 1
  %5836 = lshr i32 %5820, 31
  %5837 = trunc i32 %5836 to i8
  store i8 %5837, i8* %39, align 1
  %5838 = lshr i32 %5819, 31
  %5839 = xor i32 %5836, %5838
  %5840 = add nuw nsw i32 %5839, %5836
  %5841 = icmp eq i32 %5840, 2
  %5842 = zext i1 %5841 to i8
  store i8 %5842, i8* %45, align 1
  %5843 = add i64 %5816, 9
  store i64 %5843, i64* %3, align 8
  store i32 %5820, i32* %5818, align 4
  %5844 = load i64, i64* %3, align 8
  %5845 = add i64 %5844, -1493
  store i64 %5845, i64* %3, align 8
  br label %block_.L_42e68f

block_.L_42ec69:                                  ; preds = %block_.L_42e68f
  %5846 = add i64 %3774, -24
  %5847 = add i64 %3816, 8
  store i64 %5847, i64* %3, align 8
  %5848 = inttoptr i64 %5846 to i32*
  %5849 = load i32, i32* %5848, align 4
  %5850 = add i32 %5849, 1
  %5851 = zext i32 %5850 to i64
  store i64 %5851, i64* %RAX.i1585, align 8
  %5852 = icmp eq i32 %5849, -1
  %5853 = icmp eq i32 %5850, 0
  %5854 = or i1 %5852, %5853
  %5855 = zext i1 %5854 to i8
  store i8 %5855, i8* %20, align 1
  %5856 = and i32 %5850, 255
  %5857 = tail call i32 @llvm.ctpop.i32(i32 %5856)
  %5858 = trunc i32 %5857 to i8
  %5859 = and i8 %5858, 1
  %5860 = xor i8 %5859, 1
  store i8 %5860, i8* %27, align 1
  %5861 = xor i32 %5850, %5849
  %5862 = lshr i32 %5861, 4
  %5863 = trunc i32 %5862 to i8
  %5864 = and i8 %5863, 1
  store i8 %5864, i8* %33, align 1
  %5865 = zext i1 %5853 to i8
  store i8 %5865, i8* %36, align 1
  %5866 = lshr i32 %5850, 31
  %5867 = trunc i32 %5866 to i8
  store i8 %5867, i8* %39, align 1
  %5868 = lshr i32 %5849, 31
  %5869 = xor i32 %5866, %5868
  %5870 = add nuw nsw i32 %5869, %5866
  %5871 = icmp eq i32 %5870, 2
  %5872 = zext i1 %5871 to i8
  store i8 %5872, i8* %45, align 1
  %5873 = add i64 %3816, 14
  store i64 %5873, i64* %3, align 8
  store i32 %5850, i32* %5848, align 4
  %5874 = load i64, i64* %3, align 8
  %5875 = add i64 %5874, -1546
  store i64 %5875, i64* %3, align 8
  br label %block_.L_42e66d

block_.L_42ec7c:                                  ; preds = %block_.L_42e66d
  %5876 = add i64 %3769, -16
  %5877 = add i64 %3768, 4
  store i64 %5877, i64* %3, align 8
  %5878 = inttoptr i64 %5876 to i64*
  %5879 = load i64, i64* %5878, align 8
  store i64 %5879, i64* %RAX.i1585, align 8
  %5880 = add i64 %5879, 6392
  %5881 = add i64 %3768, 10
  store i64 %5881, i64* %3, align 8
  %5882 = inttoptr i64 %5880 to i32*
  %5883 = load i32, i32* %5882, align 4
  %5884 = add i32 %5883, 7
  %5885 = shl i32 %5884, 2
  %5886 = zext i32 %5885 to i64
  store i64 %5886, i64* %RCX.i3128, align 8
  %5887 = lshr i32 %5884, 30
  %5888 = trunc i32 %5887 to i8
  %5889 = and i8 %5888, 1
  store i8 %5889, i8* %20, align 1
  %5890 = and i32 %5885, 252
  %5891 = tail call i32 @llvm.ctpop.i32(i32 %5890)
  %5892 = trunc i32 %5891 to i8
  %5893 = and i8 %5892, 1
  %5894 = xor i8 %5893, 1
  store i8 %5894, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %5895 = icmp eq i32 %5885, 0
  %5896 = zext i1 %5895 to i8
  store i8 %5896, i8* %36, align 1
  %5897 = lshr i32 %5884, 29
  %5898 = trunc i32 %5897 to i8
  %5899 = and i8 %5898, 1
  store i8 %5899, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5900 = add i64 %3769, -36
  %5901 = add i64 %3768, 22
  store i64 %5901, i64* %3, align 8
  %5902 = inttoptr i64 %5900 to i32*
  store i32 %5885, i32* %5902, align 4
  %5903 = load i64, i64* %RBP.i, align 8
  %5904 = add i64 %5903, -16
  %5905 = load i64, i64* %3, align 8
  %5906 = add i64 %5905, 4
  store i64 %5906, i64* %3, align 8
  %5907 = inttoptr i64 %5904 to i64*
  %5908 = load i64, i64* %5907, align 8
  store i64 %5908, i64* %RAX.i1585, align 8
  %5909 = add i64 %5908, 6396
  %5910 = add i64 %5905, 10
  store i64 %5910, i64* %3, align 8
  %5911 = inttoptr i64 %5909 to i32*
  %5912 = load i32, i32* %5911, align 4
  %5913 = add i32 %5912, 7
  %5914 = shl i32 %5913, 2
  %5915 = zext i32 %5914 to i64
  store i64 %5915, i64* %RCX.i3128, align 8
  %5916 = lshr i32 %5913, 30
  %5917 = trunc i32 %5916 to i8
  %5918 = and i8 %5917, 1
  store i8 %5918, i8* %20, align 1
  %5919 = and i32 %5914, 252
  %5920 = tail call i32 @llvm.ctpop.i32(i32 %5919)
  %5921 = trunc i32 %5920 to i8
  %5922 = and i8 %5921, 1
  %5923 = xor i8 %5922, 1
  store i8 %5923, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %5924 = icmp eq i32 %5914, 0
  %5925 = zext i1 %5924 to i8
  store i8 %5925, i8* %36, align 1
  %5926 = lshr i32 %5913, 29
  %5927 = trunc i32 %5926 to i8
  %5928 = and i8 %5927, 1
  store i8 %5928, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5929 = add i64 %5903, -40
  %5930 = add i64 %5905, 22
  store i64 %5930, i64* %3, align 8
  %5931 = inttoptr i64 %5929 to i32*
  store i32 %5914, i32* %5931, align 4
  %5932 = load i64, i64* %RBP.i, align 8
  %5933 = add i64 %5932, -28
  %5934 = load i64, i64* %3, align 8
  %5935 = add i64 %5934, 7
  store i64 %5935, i64* %3, align 8
  %5936 = inttoptr i64 %5933 to i32*
  store i32 0, i32* %5936, align 4
  %.pre145 = load i64, i64* %3, align 8
  br label %block_.L_42ecaf

block_.L_42ecaf:                                  ; preds = %block_.L_42f0d4, %block_.L_42ec7c
  %5937 = phi i64 [ %.pre145, %block_.L_42ec7c ], [ %7812, %block_.L_42f0d4 ]
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.31, %block_.L_42ec7c ], [ %MEMORY.45, %block_.L_42f0d4 ]
  %5938 = load i64, i64* %RBP.i, align 8
  %5939 = add i64 %5938, -28
  %5940 = add i64 %5937, 3
  store i64 %5940, i64* %3, align 8
  %5941 = inttoptr i64 %5939 to i32*
  %5942 = load i32, i32* %5941, align 4
  %5943 = zext i32 %5942 to i64
  store i64 %5943, i64* %RAX.i1585, align 8
  %5944 = add i64 %5938, -40
  %5945 = add i64 %5937, 6
  store i64 %5945, i64* %3, align 8
  %5946 = inttoptr i64 %5944 to i32*
  %5947 = load i32, i32* %5946, align 4
  %5948 = add i32 %5947, 4
  %5949 = zext i32 %5948 to i64
  store i64 %5949, i64* %RCX.i3128, align 8
  %5950 = lshr i32 %5948, 31
  %5951 = sub i32 %5942, %5948
  %5952 = icmp ult i32 %5942, %5948
  %5953 = zext i1 %5952 to i8
  store i8 %5953, i8* %20, align 1
  %5954 = and i32 %5951, 255
  %5955 = tail call i32 @llvm.ctpop.i32(i32 %5954)
  %5956 = trunc i32 %5955 to i8
  %5957 = and i8 %5956, 1
  %5958 = xor i8 %5957, 1
  store i8 %5958, i8* %27, align 1
  %5959 = xor i32 %5948, %5942
  %5960 = xor i32 %5959, %5951
  %5961 = lshr i32 %5960, 4
  %5962 = trunc i32 %5961 to i8
  %5963 = and i8 %5962, 1
  store i8 %5963, i8* %33, align 1
  %5964 = icmp eq i32 %5951, 0
  %5965 = zext i1 %5964 to i8
  store i8 %5965, i8* %36, align 1
  %5966 = lshr i32 %5951, 31
  %5967 = trunc i32 %5966 to i8
  store i8 %5967, i8* %39, align 1
  %5968 = lshr i32 %5942, 31
  %5969 = xor i32 %5950, %5968
  %5970 = xor i32 %5966, %5968
  %5971 = add nuw nsw i32 %5970, %5969
  %5972 = icmp eq i32 %5971, 2
  %5973 = zext i1 %5972 to i8
  store i8 %5973, i8* %45, align 1
  %5974 = icmp ne i8 %5967, 0
  %5975 = xor i1 %5974, %5972
  %.v309 = select i1 %5975, i64 17, i64 1080
  %5976 = add i64 %5937, %.v309
  %5977 = add i64 %5938, -24
  %5978 = add i64 %5976, 7
  store i64 %5978, i64* %3, align 8
  %5979 = inttoptr i64 %5977 to i32*
  store i32 0, i32* %5979, align 4
  %.pre224 = load i64, i64* %3, align 8
  br i1 %5975, label %block_.L_42ecc7.preheader, label %block_.L_42f0ee.preheader

block_.L_42ecc7.preheader:                        ; preds = %block_.L_42ecaf
  br label %block_.L_42ecc7

block_.L_42f0ee.preheader:                        ; preds = %block_.L_42ecaf
  br label %block_.L_42f0ee

block_.L_42ecc7:                                  ; preds = %block_.L_42ecc7.preheader, %block_.L_42f0a2
  %5980 = phi i64 [ %7783, %block_.L_42f0a2 ], [ %.pre224, %block_.L_42ecc7.preheader ]
  %MEMORY.45 = phi %struct.Memory* [ %call2_42f0c1, %block_.L_42f0a2 ], [ %MEMORY.44, %block_.L_42ecc7.preheader ]
  %5981 = load i64, i64* %RBP.i, align 8
  %5982 = add i64 %5981, -24
  %5983 = add i64 %5980, 3
  store i64 %5983, i64* %3, align 8
  %5984 = inttoptr i64 %5982 to i32*
  %5985 = load i32, i32* %5984, align 4
  %5986 = zext i32 %5985 to i64
  store i64 %5986, i64* %RAX.i1585, align 8
  %5987 = add i64 %5981, -36
  %5988 = add i64 %5980, 6
  store i64 %5988, i64* %3, align 8
  %5989 = inttoptr i64 %5987 to i32*
  %5990 = load i32, i32* %5989, align 4
  %5991 = add i32 %5990, 3
  %5992 = zext i32 %5991 to i64
  store i64 %5992, i64* %RCX.i3128, align 8
  %5993 = lshr i32 %5991, 31
  %5994 = sub i32 %5985, %5991
  %5995 = icmp ult i32 %5985, %5991
  %5996 = zext i1 %5995 to i8
  store i8 %5996, i8* %20, align 1
  %5997 = and i32 %5994, 255
  %5998 = tail call i32 @llvm.ctpop.i32(i32 %5997)
  %5999 = trunc i32 %5998 to i8
  %6000 = and i8 %5999, 1
  %6001 = xor i8 %6000, 1
  store i8 %6001, i8* %27, align 1
  %6002 = xor i32 %5991, %5985
  %6003 = xor i32 %6002, %5994
  %6004 = lshr i32 %6003, 4
  %6005 = trunc i32 %6004 to i8
  %6006 = and i8 %6005, 1
  store i8 %6006, i8* %33, align 1
  %6007 = icmp eq i32 %5994, 0
  %6008 = zext i1 %6007 to i8
  store i8 %6008, i8* %36, align 1
  %6009 = lshr i32 %5994, 31
  %6010 = trunc i32 %6009 to i8
  store i8 %6010, i8* %39, align 1
  %6011 = lshr i32 %5985, 31
  %6012 = xor i32 %5993, %6011
  %6013 = xor i32 %6009, %6011
  %6014 = add nuw nsw i32 %6013, %6012
  %6015 = icmp eq i32 %6014, 2
  %6016 = zext i1 %6015 to i8
  store i8 %6016, i8* %45, align 1
  %6017 = icmp ne i8 %6010, 0
  %6018 = xor i1 %6017, %6015
  %.v312 = select i1 %6018, i64 17, i64 1037
  %6019 = add i64 %5980, %.v312
  store i64 %6019, i64* %3, align 8
  br i1 %6018, label %block_42ecd8, label %block_.L_42f0d4

block_42ecd8:                                     ; preds = %block_.L_42ecc7
  %6020 = add i64 %5981, -56
  %6021 = add i64 %6019, 4
  store i64 %6021, i64* %3, align 8
  %6022 = inttoptr i64 %6020 to i64*
  %6023 = load i64, i64* %6022, align 8
  store i64 %6023, i64* %RDI.i605, align 8
  %6024 = add i64 %5981, -28
  %6025 = add i64 %6019, 7
  store i64 %6025, i64* %3, align 8
  %6026 = inttoptr i64 %6024 to i32*
  %6027 = load i32, i32* %6026, align 4
  %6028 = add i32 %6027, -16
  %6029 = zext i32 %6028 to i64
  store i64 %6029, i64* %RAX.i1585, align 8
  %6030 = icmp ult i32 %6027, 16
  %6031 = zext i1 %6030 to i8
  store i8 %6031, i8* %20, align 1
  %6032 = and i32 %6028, 255
  %6033 = tail call i32 @llvm.ctpop.i32(i32 %6032)
  %6034 = trunc i32 %6033 to i8
  %6035 = and i8 %6034, 1
  %6036 = xor i8 %6035, 1
  store i8 %6036, i8* %27, align 1
  %6037 = xor i32 %6027, 16
  %6038 = xor i32 %6037, %6028
  %6039 = lshr i32 %6038, 4
  %6040 = trunc i32 %6039 to i8
  %6041 = and i8 %6040, 1
  store i8 %6041, i8* %33, align 1
  %6042 = icmp eq i32 %6028, 0
  %6043 = zext i1 %6042 to i8
  store i8 %6043, i8* %36, align 1
  %6044 = lshr i32 %6028, 31
  %6045 = trunc i32 %6044 to i8
  store i8 %6045, i8* %39, align 1
  %6046 = lshr i32 %6027, 31
  %6047 = xor i32 %6044, %6046
  %6048 = add nuw nsw i32 %6047, %6046
  %6049 = icmp eq i32 %6048, 2
  %6050 = zext i1 %6049 to i8
  store i8 %6050, i8* %45, align 1
  %6051 = add i64 %6019, 13
  store i64 %6051, i64* %3, align 8
  %6052 = load i32, i32* %5984, align 4
  %6053 = add i32 %6052, -16
  %6054 = lshr i32 %6053, 31
  %6055 = add i32 %6052, -15
  %6056 = zext i32 %6055 to i64
  store i64 %6056, i64* %RCX.i3128, align 8
  %6057 = icmp eq i32 %6053, -1
  %6058 = icmp eq i32 %6055, 0
  %6059 = or i1 %6057, %6058
  %6060 = zext i1 %6059 to i8
  store i8 %6060, i8* %20, align 1
  %6061 = and i32 %6055, 255
  %6062 = tail call i32 @llvm.ctpop.i32(i32 %6061)
  %6063 = trunc i32 %6062 to i8
  %6064 = and i8 %6063, 1
  %6065 = xor i8 %6064, 1
  store i8 %6065, i8* %27, align 1
  %6066 = xor i32 %6055, %6053
  %6067 = lshr i32 %6066, 4
  %6068 = trunc i32 %6067 to i8
  %6069 = and i8 %6068, 1
  store i8 %6069, i8* %33, align 1
  %6070 = zext i1 %6058 to i8
  store i8 %6070, i8* %36, align 1
  %6071 = lshr i32 %6055, 31
  %6072 = trunc i32 %6071 to i8
  store i8 %6072, i8* %39, align 1
  %6073 = xor i32 %6071, %6054
  %6074 = add nuw nsw i32 %6073, %6071
  %6075 = icmp eq i32 %6074, 2
  %6076 = zext i1 %6075 to i8
  store i8 %6076, i8* %45, align 1
  %6077 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6077, i64* %RDX.i5152, align 8
  %6078 = add i64 %6077, 72684
  %6079 = add i64 %6019, 33
  store i64 %6079, i64* %3, align 8
  %6080 = inttoptr i64 %6078 to i32*
  %6081 = load i32, i32* %6080, align 4
  %6082 = zext i32 %6081 to i64
  store i64 %6082, i64* %RSI.i5212, align 8
  %6083 = load i64, i64* %RBP.i, align 8
  %6084 = add i64 %6083, -56
  %6085 = add i64 %6019, 37
  store i64 %6085, i64* %3, align 8
  %6086 = inttoptr i64 %6084 to i64*
  %6087 = load i64, i64* %6086, align 8
  store i64 %6087, i64* %RDX.i5152, align 8
  %6088 = add i64 %6083, -28
  %6089 = add i64 %6019, 41
  store i64 %6089, i64* %3, align 8
  %6090 = inttoptr i64 %6088 to i32*
  %6091 = load i32, i32* %6090, align 4
  %6092 = add i32 %6091, -16
  %6093 = zext i32 %6092 to i64
  store i64 %6093, i64* %600, align 8
  %6094 = icmp ult i32 %6091, 16
  %6095 = zext i1 %6094 to i8
  store i8 %6095, i8* %20, align 1
  %6096 = and i32 %6092, 255
  %6097 = tail call i32 @llvm.ctpop.i32(i32 %6096)
  %6098 = trunc i32 %6097 to i8
  %6099 = and i8 %6098, 1
  %6100 = xor i8 %6099, 1
  store i8 %6100, i8* %27, align 1
  %6101 = xor i32 %6091, 16
  %6102 = xor i32 %6101, %6092
  %6103 = lshr i32 %6102, 4
  %6104 = trunc i32 %6103 to i8
  %6105 = and i8 %6104, 1
  store i8 %6105, i8* %33, align 1
  %6106 = icmp eq i32 %6092, 0
  %6107 = zext i1 %6106 to i8
  store i8 %6107, i8* %36, align 1
  %6108 = lshr i32 %6092, 31
  %6109 = trunc i32 %6108 to i8
  store i8 %6109, i8* %39, align 1
  %6110 = lshr i32 %6091, 31
  %6111 = xor i32 %6108, %6110
  %6112 = add nuw nsw i32 %6111, %6110
  %6113 = icmp eq i32 %6112, 2
  %6114 = zext i1 %6113 to i8
  store i8 %6114, i8* %45, align 1
  %6115 = add i64 %6083, -24
  %6116 = add i64 %6019, 49
  store i64 %6116, i64* %3, align 8
  %6117 = inttoptr i64 %6115 to i32*
  %6118 = load i32, i32* %6117, align 4
  %6119 = add i32 %6118, -16
  %6120 = zext i32 %6119 to i64
  store i64 %6120, i64* %602, align 8
  %6121 = icmp ult i32 %6118, 16
  %6122 = zext i1 %6121 to i8
  store i8 %6122, i8* %20, align 1
  %6123 = and i32 %6119, 255
  %6124 = tail call i32 @llvm.ctpop.i32(i32 %6123)
  %6125 = trunc i32 %6124 to i8
  %6126 = and i8 %6125, 1
  %6127 = xor i8 %6126, 1
  store i8 %6127, i8* %27, align 1
  %6128 = xor i32 %6118, 16
  %6129 = xor i32 %6128, %6119
  %6130 = lshr i32 %6129, 4
  %6131 = trunc i32 %6130 to i8
  %6132 = and i8 %6131, 1
  store i8 %6132, i8* %33, align 1
  %6133 = icmp eq i32 %6119, 0
  %6134 = zext i1 %6133 to i8
  store i8 %6134, i8* %36, align 1
  %6135 = lshr i32 %6119, 31
  %6136 = trunc i32 %6135 to i8
  store i8 %6136, i8* %39, align 1
  %6137 = lshr i32 %6118, 31
  %6138 = xor i32 %6135, %6137
  %6139 = add nuw nsw i32 %6138, %6137
  %6140 = icmp eq i32 %6139, 2
  %6141 = zext i1 %6140 to i8
  store i8 %6141, i8* %45, align 1
  %6142 = add i64 %6083, -80
  %6143 = add i64 %6019, 57
  store i64 %6143, i64* %3, align 8
  %6144 = inttoptr i64 %6142 to i32*
  %6145 = load i32, i32* %6144, align 4
  %6146 = zext i32 %6145 to i64
  store i64 %6146, i64* %3720, align 8
  %6147 = add i64 %6083, -76
  %6148 = add i64 %6019, 61
  store i64 %6148, i64* %3, align 8
  %6149 = inttoptr i64 %6147 to i32*
  %6150 = load i32, i32* %6149, align 4
  %6151 = zext i32 %6150 to i64
  store i64 %6151, i64* %3722, align 8
  %6152 = load i64, i64* %RBP.i, align 8
  %6153 = add i64 %6152, -504
  %6154 = load i64, i64* %RDI.i605, align 8
  %6155 = add i64 %6019, 68
  store i64 %6155, i64* %3, align 8
  %6156 = inttoptr i64 %6153 to i64*
  store i64 %6154, i64* %6156, align 8
  %6157 = load i64, i64* %RDX.i5152, align 8
  %6158 = load i64, i64* %3, align 8
  store i64 %6157, i64* %RDI.i605, align 8
  %6159 = load i64, i64* %RBP.i, align 8
  %6160 = add i64 %6159, -508
  %6161 = load i32, i32* %ESI.i5201, align 4
  %6162 = add i64 %6158, 9
  store i64 %6162, i64* %3, align 8
  %6163 = inttoptr i64 %6160 to i32*
  store i32 %6161, i32* %6163, align 4
  %6164 = load i32, i32* %R8D.i4817, align 4
  %6165 = zext i32 %6164 to i64
  %6166 = load i64, i64* %3, align 8
  store i64 %6165, i64* %RSI.i5212, align 8
  %6167 = load i32, i32* %R9D.i4678, align 4
  %6168 = zext i32 %6167 to i64
  store i64 %6168, i64* %RDX.i5152, align 8
  %6169 = load i64, i64* %RBP.i, align 8
  %6170 = add i64 %6169, -512
  %6171 = load i32, i32* %ECX.i3256, align 4
  %6172 = add i64 %6166, 12
  store i64 %6172, i64* %3, align 8
  %6173 = inttoptr i64 %6170 to i32*
  store i32 %6171, i32* %6173, align 4
  %6174 = load i32, i32* %R10D.i3532, align 4
  %6175 = zext i32 %6174 to i64
  %6176 = load i64, i64* %3, align 8
  store i64 %6175, i64* %RCX.i3128, align 8
  %6177 = load i32, i32* %R11D.i3523, align 4
  %6178 = zext i32 %6177 to i64
  store i64 %6178, i64* %600, align 8
  %6179 = load i64, i64* %RBP.i, align 8
  %6180 = add i64 %6179, -516
  %6181 = load i32, i32* %EAX.i1609, align 4
  %6182 = add i64 %6176, 12
  store i64 %6182, i64* %3, align 8
  %6183 = inttoptr i64 %6180 to i32*
  store i32 %6181, i32* %6183, align 4
  %6184 = load i64, i64* %3, align 8
  %6185 = add i64 %6184, 457683
  %6186 = add i64 %6184, 5
  %6187 = load i64, i64* %6, align 8
  %6188 = add i64 %6187, -8
  %6189 = inttoptr i64 %6188 to i64*
  store i64 %6186, i64* %6189, align 8
  store i64 %6188, i64* %6, align 8
  store i64 %6185, i64* %3, align 8
  %call2_42ed3d = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %6185, %struct.Memory* %MEMORY.45)
  %6190 = load i16, i16* %AX.i3315, align 2
  %6191 = zext i16 %6190 to i64
  %6192 = load i64, i64* %3, align 8
  store i64 %6191, i64* %RCX.i3128, align 8
  %6193 = load i64, i64* %RBP.i, align 8
  %6194 = add i64 %6193, -56
  %6195 = add i64 %6192, 7
  store i64 %6195, i64* %3, align 8
  %6196 = inttoptr i64 %6194 to i64*
  %6197 = load i64, i64* %6196, align 8
  store i64 %6197, i64* %RDI.i605, align 8
  %6198 = add i64 %6193, -28
  %6199 = add i64 %6192, 10
  store i64 %6199, i64* %3, align 8
  %6200 = inttoptr i64 %6198 to i32*
  %6201 = load i32, i32* %6200, align 4
  %6202 = add i32 %6201, -16
  %6203 = zext i32 %6202 to i64
  store i64 %6203, i64* %RDX.i5152, align 8
  %6204 = icmp ult i32 %6201, 16
  %6205 = zext i1 %6204 to i8
  store i8 %6205, i8* %20, align 1
  %6206 = and i32 %6202, 255
  %6207 = tail call i32 @llvm.ctpop.i32(i32 %6206)
  %6208 = trunc i32 %6207 to i8
  %6209 = and i8 %6208, 1
  %6210 = xor i8 %6209, 1
  store i8 %6210, i8* %27, align 1
  %6211 = xor i32 %6201, 16
  %6212 = xor i32 %6211, %6202
  %6213 = lshr i32 %6212, 4
  %6214 = trunc i32 %6213 to i8
  %6215 = and i8 %6214, 1
  store i8 %6215, i8* %33, align 1
  %6216 = icmp eq i32 %6202, 0
  %6217 = zext i1 %6216 to i8
  store i8 %6217, i8* %36, align 1
  %6218 = lshr i32 %6202, 31
  %6219 = trunc i32 %6218 to i8
  store i8 %6219, i8* %39, align 1
  %6220 = lshr i32 %6201, 31
  %6221 = xor i32 %6218, %6220
  %6222 = add nuw nsw i32 %6221, %6220
  %6223 = icmp eq i32 %6222, 2
  %6224 = zext i1 %6223 to i8
  store i8 %6224, i8* %45, align 1
  %6225 = add i64 %6193, -36
  %6226 = add i64 %6192, 16
  store i64 %6226, i64* %3, align 8
  %6227 = inttoptr i64 %6225 to i32*
  %6228 = load i32, i32* %6227, align 4
  %6229 = add i32 %6228, 2
  %6230 = zext i32 %6229 to i64
  store i64 %6230, i64* %RSI.i5212, align 8
  %6231 = icmp ugt i32 %6228, -3
  %6232 = zext i1 %6231 to i8
  store i8 %6232, i8* %20, align 1
  %6233 = and i32 %6229, 255
  %6234 = tail call i32 @llvm.ctpop.i32(i32 %6233)
  %6235 = trunc i32 %6234 to i8
  %6236 = and i8 %6235, 1
  %6237 = xor i8 %6236, 1
  store i8 %6237, i8* %27, align 1
  %6238 = xor i32 %6229, %6228
  %6239 = lshr i32 %6238, 4
  %6240 = trunc i32 %6239 to i8
  %6241 = and i8 %6240, 1
  store i8 %6241, i8* %33, align 1
  %6242 = icmp eq i32 %6229, 0
  %6243 = zext i1 %6242 to i8
  store i8 %6243, i8* %36, align 1
  %6244 = lshr i32 %6229, 31
  %6245 = trunc i32 %6244 to i8
  store i8 %6245, i8* %39, align 1
  %6246 = lshr i32 %6228, 31
  %6247 = xor i32 %6244, %6246
  %6248 = add nuw nsw i32 %6247, %6244
  %6249 = icmp eq i32 %6248, 2
  %6250 = zext i1 %6249 to i8
  store i8 %6250, i8* %45, align 1
  %6251 = add i64 %6193, -24
  %6252 = add i64 %6192, 23
  store i64 %6252, i64* %3, align 8
  %6253 = inttoptr i64 %6251 to i32*
  %6254 = load i32, i32* %6253, align 4
  %6255 = add i32 %6254, 2
  %6256 = zext i32 %6255 to i64
  store i64 %6256, i64* %600, align 8
  %6257 = lshr i32 %6255, 31
  %6258 = sub i32 %6229, %6255
  %6259 = icmp ult i32 %6229, %6255
  %6260 = zext i1 %6259 to i8
  store i8 %6260, i8* %20, align 1
  %6261 = and i32 %6258, 255
  %6262 = tail call i32 @llvm.ctpop.i32(i32 %6261)
  %6263 = trunc i32 %6262 to i8
  %6264 = and i8 %6263, 1
  %6265 = xor i8 %6264, 1
  store i8 %6265, i8* %27, align 1
  %6266 = xor i32 %6255, %6229
  %6267 = xor i32 %6266, %6258
  %6268 = lshr i32 %6267, 4
  %6269 = trunc i32 %6268 to i8
  %6270 = and i8 %6269, 1
  store i8 %6270, i8* %33, align 1
  %6271 = icmp eq i32 %6258, 0
  %6272 = zext i1 %6271 to i8
  store i8 %6272, i8* %36, align 1
  %6273 = lshr i32 %6258, 31
  %6274 = trunc i32 %6273 to i8
  store i8 %6274, i8* %39, align 1
  %6275 = xor i32 %6257, %6244
  %6276 = xor i32 %6273, %6244
  %6277 = add nuw nsw i32 %6276, %6275
  %6278 = icmp eq i32 %6277, 2
  %6279 = zext i1 %6278 to i8
  store i8 %6279, i8* %45, align 1
  %6280 = load i64, i64* %RBP.i, align 8
  %6281 = add i64 %6280, -520
  %6282 = load i32, i32* %ECX.i3256, align 4
  %6283 = add i64 %6192, 36
  store i64 %6283, i64* %3, align 8
  %6284 = inttoptr i64 %6281 to i32*
  store i32 %6282, i32* %6284, align 4
  %6285 = load i64, i64* %RBP.i, align 8
  %6286 = add i64 %6285, -528
  %6287 = load i64, i64* %RDI.i605, align 8
  %6288 = load i64, i64* %3, align 8
  %6289 = add i64 %6288, 7
  store i64 %6289, i64* %3, align 8
  %6290 = inttoptr i64 %6286 to i64*
  store i64 %6287, i64* %6290, align 8
  %6291 = load i64, i64* %RBP.i, align 8
  %6292 = add i64 %6291, -532
  %6293 = load i32, i32* %EDX.i5198, align 4
  %6294 = load i64, i64* %3, align 8
  %6295 = add i64 %6294, 6
  store i64 %6295, i64* %3, align 8
  %6296 = inttoptr i64 %6292 to i32*
  store i32 %6293, i32* %6296, align 4
  %6297 = load i64, i64* %3, align 8
  %6298 = load i8, i8* %39, align 1
  %6299 = icmp ne i8 %6298, 0
  %6300 = load i8, i8* %45, align 1
  %6301 = icmp ne i8 %6300, 0
  %6302 = xor i1 %6299, %6301
  %.v397 = select i1 %6302, i64 6, i64 23
  %6303 = add i64 %6297, %.v397
  store i64 %6303, i64* %3, align 8
  %6304 = load i64, i64* %RBP.i, align 8
  br i1 %6302, label %block_42ed79, label %block_.L_42ed8a

block_42ed79:                                     ; preds = %block_42ecd8
  %6305 = add i64 %6304, -36
  %6306 = add i64 %6303, 3
  store i64 %6306, i64* %3, align 8
  %6307 = inttoptr i64 %6305 to i32*
  %6308 = load i32, i32* %6307, align 4
  %6309 = add i32 %6308, 2
  %6310 = zext i32 %6309 to i64
  store i64 %6310, i64* %RAX.i1585, align 8
  %6311 = icmp ugt i32 %6308, -3
  %6312 = zext i1 %6311 to i8
  store i8 %6312, i8* %20, align 1
  %6313 = and i32 %6309, 255
  %6314 = tail call i32 @llvm.ctpop.i32(i32 %6313)
  %6315 = trunc i32 %6314 to i8
  %6316 = and i8 %6315, 1
  %6317 = xor i8 %6316, 1
  store i8 %6317, i8* %27, align 1
  %6318 = xor i32 %6309, %6308
  %6319 = lshr i32 %6318, 4
  %6320 = trunc i32 %6319 to i8
  %6321 = and i8 %6320, 1
  store i8 %6321, i8* %33, align 1
  %6322 = icmp eq i32 %6309, 0
  %6323 = zext i1 %6322 to i8
  store i8 %6323, i8* %36, align 1
  %6324 = lshr i32 %6309, 31
  %6325 = trunc i32 %6324 to i8
  store i8 %6325, i8* %39, align 1
  %6326 = lshr i32 %6308, 31
  %6327 = xor i32 %6324, %6326
  %6328 = add nuw nsw i32 %6327, %6324
  %6329 = icmp eq i32 %6328, 2
  %6330 = zext i1 %6329 to i8
  store i8 %6330, i8* %45, align 1
  %6331 = add i64 %6304, -536
  %6332 = add i64 %6303, 12
  store i64 %6332, i64* %3, align 8
  %6333 = inttoptr i64 %6331 to i32*
  store i32 %6309, i32* %6333, align 4
  %6334 = load i64, i64* %3, align 8
  %6335 = add i64 %6334, 17
  store i64 %6335, i64* %3, align 8
  br label %block_.L_42ed96

block_.L_42ed8a:                                  ; preds = %block_42ecd8
  %6336 = add i64 %6304, -24
  %6337 = add i64 %6303, 3
  store i64 %6337, i64* %3, align 8
  %6338 = inttoptr i64 %6336 to i32*
  %6339 = load i32, i32* %6338, align 4
  %6340 = add i32 %6339, 2
  %6341 = zext i32 %6340 to i64
  store i64 %6341, i64* %RAX.i1585, align 8
  %6342 = icmp ugt i32 %6339, -3
  %6343 = zext i1 %6342 to i8
  store i8 %6343, i8* %20, align 1
  %6344 = and i32 %6340, 255
  %6345 = tail call i32 @llvm.ctpop.i32(i32 %6344)
  %6346 = trunc i32 %6345 to i8
  %6347 = and i8 %6346, 1
  %6348 = xor i8 %6347, 1
  store i8 %6348, i8* %27, align 1
  %6349 = xor i32 %6340, %6339
  %6350 = lshr i32 %6349, 4
  %6351 = trunc i32 %6350 to i8
  %6352 = and i8 %6351, 1
  store i8 %6352, i8* %33, align 1
  %6353 = icmp eq i32 %6340, 0
  %6354 = zext i1 %6353 to i8
  store i8 %6354, i8* %36, align 1
  %6355 = lshr i32 %6340, 31
  %6356 = trunc i32 %6355 to i8
  store i8 %6356, i8* %39, align 1
  %6357 = lshr i32 %6339, 31
  %6358 = xor i32 %6355, %6357
  %6359 = add nuw nsw i32 %6358, %6355
  %6360 = icmp eq i32 %6359, 2
  %6361 = zext i1 %6360 to i8
  store i8 %6361, i8* %45, align 1
  %6362 = add i64 %6304, -536
  %6363 = add i64 %6303, 12
  store i64 %6363, i64* %3, align 8
  %6364 = inttoptr i64 %6362 to i32*
  store i32 %6340, i32* %6364, align 4
  %.pre225 = load i64, i64* %3, align 8
  br label %block_.L_42ed96

block_.L_42ed96:                                  ; preds = %block_.L_42ed8a, %block_42ed79
  %6365 = phi i64 [ %.pre225, %block_.L_42ed8a ], [ %6335, %block_42ed79 ]
  %6366 = load i64, i64* %RBP.i, align 8
  %6367 = add i64 %6366, -536
  %6368 = add i64 %6365, 6
  store i64 %6368, i64* %3, align 8
  %6369 = inttoptr i64 %6367 to i32*
  %6370 = load i32, i32* %6369, align 4
  %6371 = add i32 %6370, -16
  %6372 = zext i32 %6371 to i64
  store i64 %6372, i64* %RAX.i1585, align 8
  %6373 = icmp ult i32 %6370, 16
  %6374 = zext i1 %6373 to i8
  store i8 %6374, i8* %20, align 1
  %6375 = and i32 %6371, 255
  %6376 = tail call i32 @llvm.ctpop.i32(i32 %6375)
  %6377 = trunc i32 %6376 to i8
  %6378 = and i8 %6377, 1
  %6379 = xor i8 %6378, 1
  store i8 %6379, i8* %27, align 1
  %6380 = xor i32 %6370, 16
  %6381 = xor i32 %6380, %6371
  %6382 = lshr i32 %6381, 4
  %6383 = trunc i32 %6382 to i8
  %6384 = and i8 %6383, 1
  store i8 %6384, i8* %33, align 1
  %6385 = icmp eq i32 %6371, 0
  %6386 = zext i1 %6385 to i8
  store i8 %6386, i8* %36, align 1
  %6387 = lshr i32 %6371, 31
  %6388 = trunc i32 %6387 to i8
  store i8 %6388, i8* %39, align 1
  %6389 = lshr i32 %6370, 31
  %6390 = xor i32 %6387, %6389
  %6391 = add nuw nsw i32 %6390, %6389
  %6392 = icmp eq i32 %6391, 2
  %6393 = zext i1 %6392 to i8
  store i8 %6393, i8* %45, align 1
  %6394 = add i64 %6366, -80
  %6395 = add i64 %6365, 12
  store i64 %6395, i64* %3, align 8
  %6396 = inttoptr i64 %6394 to i32*
  %6397 = load i32, i32* %6396, align 4
  %6398 = zext i32 %6397 to i64
  store i64 %6398, i64* %RCX.i3128, align 8
  %6399 = add i64 %6366, -76
  %6400 = add i64 %6365, 16
  store i64 %6400, i64* %3, align 8
  %6401 = inttoptr i64 %6399 to i32*
  %6402 = load i32, i32* %6401, align 4
  %6403 = zext i32 %6402 to i64
  store i64 %6403, i64* %600, align 8
  %6404 = add i64 %6366, -528
  %6405 = add i64 %6365, 23
  store i64 %6405, i64* %3, align 8
  %6406 = inttoptr i64 %6404 to i64*
  %6407 = load i64, i64* %6406, align 8
  store i64 %6407, i64* %RDI.i605, align 8
  %6408 = add i64 %6366, -532
  %6409 = add i64 %6365, 29
  store i64 %6409, i64* %3, align 8
  %6410 = inttoptr i64 %6408 to i32*
  %6411 = load i32, i32* %6410, align 4
  %6412 = zext i32 %6411 to i64
  store i64 %6412, i64* %RSI.i5212, align 8
  store i64 %6372, i64* %RDX.i5152, align 8
  %6413 = add i64 %6365, 457594
  %6414 = add i64 %6365, 36
  %6415 = load i64, i64* %6, align 8
  %6416 = add i64 %6415, -8
  %6417 = inttoptr i64 %6416 to i64*
  store i64 %6414, i64* %6417, align 8
  store i64 %6416, i64* %6, align 8
  store i64 %6413, i64* %3, align 8
  %call2_42edb5 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %6413, %struct.Memory* %MEMORY.45)
  %6418 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %6419 = load i16, i16* %AX.i3315, align 2
  %6420 = zext i16 %6419 to i64
  store i64 %6420, i64* %RDX.i5152, align 8
  %6421 = load i64, i64* %RBP.i, align 8
  %6422 = add i64 %6421, -520
  %6423 = add i64 %6418, 14
  store i64 %6423, i64* %3, align 8
  %6424 = inttoptr i64 %6422 to i32*
  %6425 = load i32, i32* %6424, align 4
  %6426 = zext i16 %6419 to i32
  %6427 = add i32 %6426, %6425
  %6428 = lshr i32 %6427, 31
  %6429 = add i32 %6427, 1
  %6430 = zext i32 %6429 to i64
  store i64 %6430, i64* %RSI.i5212, align 8
  %6431 = icmp eq i32 %6427, -1
  %6432 = icmp eq i32 %6429, 0
  %6433 = or i1 %6431, %6432
  %6434 = zext i1 %6433 to i8
  store i8 %6434, i8* %20, align 1
  %6435 = and i32 %6429, 255
  %6436 = tail call i32 @llvm.ctpop.i32(i32 %6435)
  %6437 = trunc i32 %6436 to i8
  %6438 = and i8 %6437, 1
  %6439 = xor i8 %6438, 1
  store i8 %6439, i8* %27, align 1
  %6440 = xor i32 %6429, %6427
  %6441 = lshr i32 %6440, 4
  %6442 = trunc i32 %6441 to i8
  %6443 = and i8 %6442, 1
  store i8 %6443, i8* %33, align 1
  %6444 = zext i1 %6432 to i8
  store i8 %6444, i8* %36, align 1
  %6445 = lshr i32 %6429, 31
  %6446 = trunc i32 %6445 to i8
  store i8 %6446, i8* %39, align 1
  %6447 = xor i32 %6445, %6428
  %6448 = add nuw nsw i32 %6447, %6445
  %6449 = icmp eq i32 %6448, 2
  %6450 = zext i1 %6449 to i8
  store i8 %6450, i8* %45, align 1
  store i64 %6430, i64* %RAX.i1585, align 8
  %6451 = sext i32 %6429 to i64
  %6452 = lshr i64 %6451, 32
  store i64 %6452, i64* %3718, align 8
  %6453 = add i64 %6418, 24
  store i64 %6453, i64* %3, align 8
  %6454 = shl nuw i64 %6452, 32
  %6455 = or i64 %6454, %6430
  %6456 = sdiv i64 %6455, 2
  %6457 = shl i64 %6456, 32
  %6458 = ashr exact i64 %6457, 32
  %6459 = icmp eq i64 %6456, %6458
  br i1 %6459, label %6462, label %6460

; <label>:6460:                                   ; preds = %block_.L_42ed96
  %6461 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6453, %struct.Memory* %MEMORY.45)
  %.pre226 = load i64, i64* %RBP.i, align 8
  %.pre227 = load i64, i64* %3, align 8
  %.pre228 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__ecx.exit2858

; <label>:6462:                                   ; preds = %block_.L_42ed96
  %6463 = srem i64 %6455, 2
  %6464 = and i64 %6456, 4294967295
  store i64 %6464, i64* %RAX.i1585, align 8
  %6465 = and i64 %6463, 4294967295
  store i64 %6465, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %6466 = trunc i64 %6456 to i32
  br label %routine_idivl__ecx.exit2858

routine_idivl__ecx.exit2858:                      ; preds = %6462, %6460
  %6467 = phi i32 [ %.pre228, %6460 ], [ %6466, %6462 ]
  %6468 = phi i64 [ %.pre227, %6460 ], [ %6453, %6462 ]
  %6469 = phi i64 [ %.pre226, %6460 ], [ %6421, %6462 ]
  %6470 = phi %struct.Memory* [ %6461, %6460 ], [ %MEMORY.45, %6462 ]
  %6471 = add i64 %6469, -508
  %6472 = add i64 %6468, 6
  store i64 %6472, i64* %3, align 8
  %6473 = inttoptr i64 %6471 to i32*
  %6474 = load i32, i32* %6473, align 4
  %6475 = zext i32 %6474 to i64
  store i64 %6475, i64* %RCX.i3128, align 8
  %6476 = sub i32 %6474, %6467
  %6477 = icmp ult i32 %6474, %6467
  %6478 = zext i1 %6477 to i8
  store i8 %6478, i8* %20, align 1
  %6479 = and i32 %6476, 255
  %6480 = tail call i32 @llvm.ctpop.i32(i32 %6479)
  %6481 = trunc i32 %6480 to i8
  %6482 = and i8 %6481, 1
  %6483 = xor i8 %6482, 1
  store i8 %6483, i8* %27, align 1
  %6484 = xor i32 %6467, %6474
  %6485 = xor i32 %6484, %6476
  %6486 = lshr i32 %6485, 4
  %6487 = trunc i32 %6486 to i8
  %6488 = and i8 %6487, 1
  store i8 %6488, i8* %33, align 1
  %6489 = icmp eq i32 %6476, 0
  %6490 = zext i1 %6489 to i8
  store i8 %6490, i8* %36, align 1
  %6491 = lshr i32 %6476, 31
  %6492 = trunc i32 %6491 to i8
  store i8 %6492, i8* %39, align 1
  %6493 = lshr i32 %6474, 31
  %6494 = lshr i32 %6467, 31
  %6495 = xor i32 %6494, %6493
  %6496 = xor i32 %6491, %6493
  %6497 = add nuw nsw i32 %6496, %6495
  %6498 = icmp eq i32 %6497, 2
  %6499 = zext i1 %6498 to i8
  store i8 %6499, i8* %45, align 1
  %6500 = icmp ne i8 %6492, 0
  %6501 = xor i1 %6500, %6498
  %.v340 = select i1 %6501, i64 14, i64 39
  %6502 = add i64 %6468, %.v340
  store i64 %6502, i64* %3, align 8
  br i1 %6501, label %block_42ede0, label %block_.L_42edf9

block_42ede0:                                     ; preds = %routine_idivl__ecx.exit2858
  %6503 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6503, i64* %RAX.i1585, align 8
  %6504 = add i64 %6503, 72684
  %6505 = add i64 %6502, 14
  store i64 %6505, i64* %3, align 8
  %6506 = inttoptr i64 %6504 to i32*
  %6507 = load i32, i32* %6506, align 4
  %6508 = zext i32 %6507 to i64
  store i64 %6508, i64* %RCX.i3128, align 8
  %6509 = add i64 %6469, -540
  %6510 = add i64 %6502, 20
  store i64 %6510, i64* %3, align 8
  %6511 = inttoptr i64 %6509 to i32*
  store i32 %6507, i32* %6511, align 4
  %6512 = load i64, i64* %3, align 8
  %6513 = add i64 %6512, 199
  store i64 %6513, i64* %3, align 8
  br label %block_.L_42eebb

block_.L_42edf9:                                  ; preds = %routine_idivl__ecx.exit2858
  %6514 = add i64 %6469, -56
  %6515 = add i64 %6502, 4
  store i64 %6515, i64* %3, align 8
  %6516 = inttoptr i64 %6514 to i64*
  %6517 = load i64, i64* %6516, align 8
  store i64 %6517, i64* %RDI.i605, align 8
  %6518 = add i64 %6469, -28
  %6519 = add i64 %6502, 7
  store i64 %6519, i64* %3, align 8
  %6520 = inttoptr i64 %6518 to i32*
  %6521 = load i32, i32* %6520, align 4
  %6522 = add i32 %6521, -16
  %6523 = zext i32 %6522 to i64
  store i64 %6523, i64* %RAX.i1585, align 8
  %6524 = icmp ult i32 %6521, 16
  %6525 = zext i1 %6524 to i8
  store i8 %6525, i8* %20, align 1
  %6526 = and i32 %6522, 255
  %6527 = tail call i32 @llvm.ctpop.i32(i32 %6526)
  %6528 = trunc i32 %6527 to i8
  %6529 = and i8 %6528, 1
  %6530 = xor i8 %6529, 1
  store i8 %6530, i8* %27, align 1
  %6531 = xor i32 %6521, 16
  %6532 = xor i32 %6531, %6522
  %6533 = lshr i32 %6532, 4
  %6534 = trunc i32 %6533 to i8
  %6535 = and i8 %6534, 1
  store i8 %6535, i8* %33, align 1
  %6536 = icmp eq i32 %6522, 0
  %6537 = zext i1 %6536 to i8
  store i8 %6537, i8* %36, align 1
  %6538 = lshr i32 %6522, 31
  %6539 = trunc i32 %6538 to i8
  store i8 %6539, i8* %39, align 1
  %6540 = lshr i32 %6521, 31
  %6541 = xor i32 %6538, %6540
  %6542 = add nuw nsw i32 %6541, %6540
  %6543 = icmp eq i32 %6542, 2
  %6544 = zext i1 %6543 to i8
  store i8 %6544, i8* %45, align 1
  %6545 = add i64 %6469, -24
  %6546 = add i64 %6502, 13
  store i64 %6546, i64* %3, align 8
  %6547 = inttoptr i64 %6545 to i32*
  %6548 = load i32, i32* %6547, align 4
  %6549 = add i32 %6548, -16
  %6550 = zext i32 %6549 to i64
  store i64 %6550, i64* %RCX.i3128, align 8
  %6551 = icmp ult i32 %6548, 16
  %6552 = zext i1 %6551 to i8
  store i8 %6552, i8* %20, align 1
  %6553 = and i32 %6549, 255
  %6554 = tail call i32 @llvm.ctpop.i32(i32 %6553)
  %6555 = trunc i32 %6554 to i8
  %6556 = and i8 %6555, 1
  %6557 = xor i8 %6556, 1
  store i8 %6557, i8* %27, align 1
  %6558 = xor i32 %6548, 16
  %6559 = xor i32 %6558, %6549
  %6560 = lshr i32 %6559, 4
  %6561 = trunc i32 %6560 to i8
  %6562 = and i8 %6561, 1
  store i8 %6562, i8* %33, align 1
  %6563 = icmp eq i32 %6549, 0
  %6564 = zext i1 %6563 to i8
  store i8 %6564, i8* %36, align 1
  %6565 = lshr i32 %6549, 31
  %6566 = trunc i32 %6565 to i8
  store i8 %6566, i8* %39, align 1
  %6567 = lshr i32 %6548, 31
  %6568 = xor i32 %6565, %6567
  %6569 = add nuw nsw i32 %6568, %6567
  %6570 = icmp eq i32 %6569, 2
  %6571 = zext i1 %6570 to i8
  store i8 %6571, i8* %45, align 1
  %6572 = add i64 %6469, -80
  %6573 = add i64 %6502, 19
  store i64 %6573, i64* %3, align 8
  %6574 = inttoptr i64 %6572 to i32*
  %6575 = load i32, i32* %6574, align 4
  %6576 = zext i32 %6575 to i64
  store i64 %6576, i64* %RDX.i5152, align 8
  %6577 = add i64 %6469, -76
  %6578 = add i64 %6502, 23
  store i64 %6578, i64* %3, align 8
  %6579 = inttoptr i64 %6577 to i32*
  %6580 = load i32, i32* %6579, align 4
  %6581 = zext i32 %6580 to i64
  store i64 %6581, i64* %600, align 8
  store i64 %6523, i64* %RSI.i5212, align 8
  %6582 = load i64, i64* %RBP.i, align 8
  %6583 = add i64 %6582, -544
  %6584 = add i64 %6502, 31
  store i64 %6584, i64* %3, align 8
  %6585 = inttoptr i64 %6583 to i32*
  store i32 %6575, i32* %6585, align 4
  %6586 = load i32, i32* %ECX.i3256, align 4
  %6587 = zext i32 %6586 to i64
  %6588 = load i64, i64* %3, align 8
  store i64 %6587, i64* %RDX.i5152, align 8
  %6589 = load i64, i64* %RBP.i, align 8
  %6590 = add i64 %6589, -544
  %6591 = add i64 %6588, 8
  store i64 %6591, i64* %3, align 8
  %6592 = inttoptr i64 %6590 to i32*
  %6593 = load i32, i32* %6592, align 4
  %6594 = zext i32 %6593 to i64
  store i64 %6594, i64* %RCX.i3128, align 8
  %6595 = add i64 %6588, 457464
  %6596 = add i64 %6588, 13
  %6597 = load i64, i64* %6, align 8
  %6598 = add i64 %6597, -8
  %6599 = inttoptr i64 %6598 to i64*
  store i64 %6596, i64* %6599, align 8
  store i64 %6598, i64* %6, align 8
  store i64 %6595, i64* %3, align 8
  %call2_42ee20 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %6595, %struct.Memory* %6470)
  %6600 = load i16, i16* %AX.i3315, align 2
  %6601 = zext i16 %6600 to i64
  %6602 = load i64, i64* %3, align 8
  store i64 %6601, i64* %RCX.i3128, align 8
  %6603 = load i64, i64* %RBP.i, align 8
  %6604 = add i64 %6603, -56
  %6605 = add i64 %6602, 7
  store i64 %6605, i64* %3, align 8
  %6606 = inttoptr i64 %6604 to i64*
  %6607 = load i64, i64* %6606, align 8
  store i64 %6607, i64* %RDI.i605, align 8
  %6608 = add i64 %6603, -28
  %6609 = add i64 %6602, 10
  store i64 %6609, i64* %3, align 8
  %6610 = inttoptr i64 %6608 to i32*
  %6611 = load i32, i32* %6610, align 4
  %6612 = add i32 %6611, -16
  %6613 = zext i32 %6612 to i64
  store i64 %6613, i64* %RDX.i5152, align 8
  %6614 = icmp ult i32 %6611, 16
  %6615 = zext i1 %6614 to i8
  store i8 %6615, i8* %20, align 1
  %6616 = and i32 %6612, 255
  %6617 = tail call i32 @llvm.ctpop.i32(i32 %6616)
  %6618 = trunc i32 %6617 to i8
  %6619 = and i8 %6618, 1
  %6620 = xor i8 %6619, 1
  store i8 %6620, i8* %27, align 1
  %6621 = xor i32 %6611, 16
  %6622 = xor i32 %6621, %6612
  %6623 = lshr i32 %6622, 4
  %6624 = trunc i32 %6623 to i8
  %6625 = and i8 %6624, 1
  store i8 %6625, i8* %33, align 1
  %6626 = icmp eq i32 %6612, 0
  %6627 = zext i1 %6626 to i8
  store i8 %6627, i8* %36, align 1
  %6628 = lshr i32 %6612, 31
  %6629 = trunc i32 %6628 to i8
  store i8 %6629, i8* %39, align 1
  %6630 = lshr i32 %6611, 31
  %6631 = xor i32 %6628, %6630
  %6632 = add nuw nsw i32 %6631, %6630
  %6633 = icmp eq i32 %6632, 2
  %6634 = zext i1 %6633 to i8
  store i8 %6634, i8* %45, align 1
  %6635 = add i64 %6603, -36
  %6636 = add i64 %6602, 16
  store i64 %6636, i64* %3, align 8
  %6637 = inttoptr i64 %6635 to i32*
  %6638 = load i32, i32* %6637, align 4
  %6639 = add i32 %6638, 2
  %6640 = zext i32 %6639 to i64
  store i64 %6640, i64* %RSI.i5212, align 8
  %6641 = icmp ugt i32 %6638, -3
  %6642 = zext i1 %6641 to i8
  store i8 %6642, i8* %20, align 1
  %6643 = and i32 %6639, 255
  %6644 = tail call i32 @llvm.ctpop.i32(i32 %6643)
  %6645 = trunc i32 %6644 to i8
  %6646 = and i8 %6645, 1
  %6647 = xor i8 %6646, 1
  store i8 %6647, i8* %27, align 1
  %6648 = xor i32 %6639, %6638
  %6649 = lshr i32 %6648, 4
  %6650 = trunc i32 %6649 to i8
  %6651 = and i8 %6650, 1
  store i8 %6651, i8* %33, align 1
  %6652 = icmp eq i32 %6639, 0
  %6653 = zext i1 %6652 to i8
  store i8 %6653, i8* %36, align 1
  %6654 = lshr i32 %6639, 31
  %6655 = trunc i32 %6654 to i8
  store i8 %6655, i8* %39, align 1
  %6656 = lshr i32 %6638, 31
  %6657 = xor i32 %6654, %6656
  %6658 = add nuw nsw i32 %6657, %6654
  %6659 = icmp eq i32 %6658, 2
  %6660 = zext i1 %6659 to i8
  store i8 %6660, i8* %45, align 1
  %6661 = add i64 %6603, -24
  %6662 = add i64 %6602, 23
  store i64 %6662, i64* %3, align 8
  %6663 = inttoptr i64 %6661 to i32*
  %6664 = load i32, i32* %6663, align 4
  %6665 = add i32 %6664, 2
  %6666 = zext i32 %6665 to i64
  store i64 %6666, i64* %600, align 8
  %6667 = lshr i32 %6665, 31
  %6668 = sub i32 %6639, %6665
  %6669 = icmp ult i32 %6639, %6665
  %6670 = zext i1 %6669 to i8
  store i8 %6670, i8* %20, align 1
  %6671 = and i32 %6668, 255
  %6672 = tail call i32 @llvm.ctpop.i32(i32 %6671)
  %6673 = trunc i32 %6672 to i8
  %6674 = and i8 %6673, 1
  %6675 = xor i8 %6674, 1
  store i8 %6675, i8* %27, align 1
  %6676 = xor i32 %6665, %6639
  %6677 = xor i32 %6676, %6668
  %6678 = lshr i32 %6677, 4
  %6679 = trunc i32 %6678 to i8
  %6680 = and i8 %6679, 1
  store i8 %6680, i8* %33, align 1
  %6681 = icmp eq i32 %6668, 0
  %6682 = zext i1 %6681 to i8
  store i8 %6682, i8* %36, align 1
  %6683 = lshr i32 %6668, 31
  %6684 = trunc i32 %6683 to i8
  store i8 %6684, i8* %39, align 1
  %6685 = xor i32 %6667, %6654
  %6686 = xor i32 %6683, %6654
  %6687 = add nuw nsw i32 %6686, %6685
  %6688 = icmp eq i32 %6687, 2
  %6689 = zext i1 %6688 to i8
  store i8 %6689, i8* %45, align 1
  %6690 = load i64, i64* %RBP.i, align 8
  %6691 = add i64 %6690, -548
  %6692 = load i32, i32* %ECX.i3256, align 4
  %6693 = add i64 %6602, 36
  store i64 %6693, i64* %3, align 8
  %6694 = inttoptr i64 %6691 to i32*
  store i32 %6692, i32* %6694, align 4
  %6695 = load i64, i64* %RBP.i, align 8
  %6696 = add i64 %6695, -560
  %6697 = load i64, i64* %RDI.i605, align 8
  %6698 = load i64, i64* %3, align 8
  %6699 = add i64 %6698, 7
  store i64 %6699, i64* %3, align 8
  %6700 = inttoptr i64 %6696 to i64*
  store i64 %6697, i64* %6700, align 8
  %6701 = load i64, i64* %RBP.i, align 8
  %6702 = add i64 %6701, -564
  %6703 = load i32, i32* %EDX.i5198, align 4
  %6704 = load i64, i64* %3, align 8
  %6705 = add i64 %6704, 6
  store i64 %6705, i64* %3, align 8
  %6706 = inttoptr i64 %6702 to i32*
  store i32 %6703, i32* %6706, align 4
  %6707 = load i64, i64* %3, align 8
  %6708 = load i8, i8* %39, align 1
  %6709 = icmp ne i8 %6708, 0
  %6710 = load i8, i8* %45, align 1
  %6711 = icmp ne i8 %6710, 0
  %6712 = xor i1 %6709, %6711
  %.v398 = select i1 %6712, i64 6, i64 23
  %6713 = add i64 %6707, %.v398
  store i64 %6713, i64* %3, align 8
  %6714 = load i64, i64* %RBP.i, align 8
  br i1 %6712, label %block_42ee5c, label %block_.L_42ee6d

block_42ee5c:                                     ; preds = %block_.L_42edf9
  %6715 = add i64 %6714, -36
  %6716 = add i64 %6713, 3
  store i64 %6716, i64* %3, align 8
  %6717 = inttoptr i64 %6715 to i32*
  %6718 = load i32, i32* %6717, align 4
  %6719 = add i32 %6718, 2
  %6720 = zext i32 %6719 to i64
  store i64 %6720, i64* %RAX.i1585, align 8
  %6721 = icmp ugt i32 %6718, -3
  %6722 = zext i1 %6721 to i8
  store i8 %6722, i8* %20, align 1
  %6723 = and i32 %6719, 255
  %6724 = tail call i32 @llvm.ctpop.i32(i32 %6723)
  %6725 = trunc i32 %6724 to i8
  %6726 = and i8 %6725, 1
  %6727 = xor i8 %6726, 1
  store i8 %6727, i8* %27, align 1
  %6728 = xor i32 %6719, %6718
  %6729 = lshr i32 %6728, 4
  %6730 = trunc i32 %6729 to i8
  %6731 = and i8 %6730, 1
  store i8 %6731, i8* %33, align 1
  %6732 = icmp eq i32 %6719, 0
  %6733 = zext i1 %6732 to i8
  store i8 %6733, i8* %36, align 1
  %6734 = lshr i32 %6719, 31
  %6735 = trunc i32 %6734 to i8
  store i8 %6735, i8* %39, align 1
  %6736 = lshr i32 %6718, 31
  %6737 = xor i32 %6734, %6736
  %6738 = add nuw nsw i32 %6737, %6734
  %6739 = icmp eq i32 %6738, 2
  %6740 = zext i1 %6739 to i8
  store i8 %6740, i8* %45, align 1
  %6741 = add i64 %6714, -568
  %6742 = add i64 %6713, 12
  store i64 %6742, i64* %3, align 8
  %6743 = inttoptr i64 %6741 to i32*
  store i32 %6719, i32* %6743, align 4
  %6744 = load i64, i64* %3, align 8
  %6745 = add i64 %6744, 17
  store i64 %6745, i64* %3, align 8
  br label %block_.L_42ee79

block_.L_42ee6d:                                  ; preds = %block_.L_42edf9
  %6746 = add i64 %6714, -24
  %6747 = add i64 %6713, 3
  store i64 %6747, i64* %3, align 8
  %6748 = inttoptr i64 %6746 to i32*
  %6749 = load i32, i32* %6748, align 4
  %6750 = add i32 %6749, 2
  %6751 = zext i32 %6750 to i64
  store i64 %6751, i64* %RAX.i1585, align 8
  %6752 = icmp ugt i32 %6749, -3
  %6753 = zext i1 %6752 to i8
  store i8 %6753, i8* %20, align 1
  %6754 = and i32 %6750, 255
  %6755 = tail call i32 @llvm.ctpop.i32(i32 %6754)
  %6756 = trunc i32 %6755 to i8
  %6757 = and i8 %6756, 1
  %6758 = xor i8 %6757, 1
  store i8 %6758, i8* %27, align 1
  %6759 = xor i32 %6750, %6749
  %6760 = lshr i32 %6759, 4
  %6761 = trunc i32 %6760 to i8
  %6762 = and i8 %6761, 1
  store i8 %6762, i8* %33, align 1
  %6763 = icmp eq i32 %6750, 0
  %6764 = zext i1 %6763 to i8
  store i8 %6764, i8* %36, align 1
  %6765 = lshr i32 %6750, 31
  %6766 = trunc i32 %6765 to i8
  store i8 %6766, i8* %39, align 1
  %6767 = lshr i32 %6749, 31
  %6768 = xor i32 %6765, %6767
  %6769 = add nuw nsw i32 %6768, %6765
  %6770 = icmp eq i32 %6769, 2
  %6771 = zext i1 %6770 to i8
  store i8 %6771, i8* %45, align 1
  %6772 = add i64 %6714, -568
  %6773 = add i64 %6713, 12
  store i64 %6773, i64* %3, align 8
  %6774 = inttoptr i64 %6772 to i32*
  store i32 %6750, i32* %6774, align 4
  %.pre229 = load i64, i64* %3, align 8
  br label %block_.L_42ee79

block_.L_42ee79:                                  ; preds = %block_.L_42ee6d, %block_42ee5c
  %6775 = phi i64 [ %.pre229, %block_.L_42ee6d ], [ %6745, %block_42ee5c ]
  %6776 = load i64, i64* %RBP.i, align 8
  %6777 = add i64 %6776, -568
  %6778 = add i64 %6775, 6
  store i64 %6778, i64* %3, align 8
  %6779 = inttoptr i64 %6777 to i32*
  %6780 = load i32, i32* %6779, align 4
  %6781 = add i32 %6780, -16
  %6782 = zext i32 %6781 to i64
  store i64 %6782, i64* %RAX.i1585, align 8
  %6783 = icmp ult i32 %6780, 16
  %6784 = zext i1 %6783 to i8
  store i8 %6784, i8* %20, align 1
  %6785 = and i32 %6781, 255
  %6786 = tail call i32 @llvm.ctpop.i32(i32 %6785)
  %6787 = trunc i32 %6786 to i8
  %6788 = and i8 %6787, 1
  %6789 = xor i8 %6788, 1
  store i8 %6789, i8* %27, align 1
  %6790 = xor i32 %6780, 16
  %6791 = xor i32 %6790, %6781
  %6792 = lshr i32 %6791, 4
  %6793 = trunc i32 %6792 to i8
  %6794 = and i8 %6793, 1
  store i8 %6794, i8* %33, align 1
  %6795 = icmp eq i32 %6781, 0
  %6796 = zext i1 %6795 to i8
  store i8 %6796, i8* %36, align 1
  %6797 = lshr i32 %6781, 31
  %6798 = trunc i32 %6797 to i8
  store i8 %6798, i8* %39, align 1
  %6799 = lshr i32 %6780, 31
  %6800 = xor i32 %6797, %6799
  %6801 = add nuw nsw i32 %6800, %6799
  %6802 = icmp eq i32 %6801, 2
  %6803 = zext i1 %6802 to i8
  store i8 %6803, i8* %45, align 1
  %6804 = add i64 %6776, -80
  %6805 = add i64 %6775, 12
  store i64 %6805, i64* %3, align 8
  %6806 = inttoptr i64 %6804 to i32*
  %6807 = load i32, i32* %6806, align 4
  %6808 = zext i32 %6807 to i64
  store i64 %6808, i64* %RCX.i3128, align 8
  %6809 = add i64 %6776, -76
  %6810 = add i64 %6775, 16
  store i64 %6810, i64* %3, align 8
  %6811 = inttoptr i64 %6809 to i32*
  %6812 = load i32, i32* %6811, align 4
  %6813 = zext i32 %6812 to i64
  store i64 %6813, i64* %600, align 8
  %6814 = add i64 %6776, -560
  %6815 = add i64 %6775, 23
  store i64 %6815, i64* %3, align 8
  %6816 = inttoptr i64 %6814 to i64*
  %6817 = load i64, i64* %6816, align 8
  store i64 %6817, i64* %RDI.i605, align 8
  %6818 = add i64 %6776, -564
  %6819 = add i64 %6775, 29
  store i64 %6819, i64* %3, align 8
  %6820 = inttoptr i64 %6818 to i32*
  %6821 = load i32, i32* %6820, align 4
  %6822 = zext i32 %6821 to i64
  store i64 %6822, i64* %RSI.i5212, align 8
  store i64 %6782, i64* %RDX.i5152, align 8
  %6823 = add i64 %6775, 457367
  %6824 = add i64 %6775, 36
  %6825 = load i64, i64* %6, align 8
  %6826 = add i64 %6825, -8
  %6827 = inttoptr i64 %6826 to i64*
  store i64 %6824, i64* %6827, align 8
  store i64 %6826, i64* %6, align 8
  store i64 %6823, i64* %3, align 8
  %call2_42ee98 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %6823, %struct.Memory* %call2_42ee20)
  %6828 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %6829 = load i16, i16* %AX.i3315, align 2
  %6830 = zext i16 %6829 to i64
  store i64 %6830, i64* %RDX.i5152, align 8
  %6831 = load i64, i64* %RBP.i, align 8
  %6832 = add i64 %6831, -548
  %6833 = add i64 %6828, 14
  store i64 %6833, i64* %3, align 8
  %6834 = inttoptr i64 %6832 to i32*
  %6835 = load i32, i32* %6834, align 4
  %6836 = zext i16 %6829 to i32
  %6837 = add i32 %6836, %6835
  %6838 = lshr i32 %6837, 31
  %6839 = add i32 %6837, 1
  %6840 = zext i32 %6839 to i64
  store i64 %6840, i64* %RSI.i5212, align 8
  %6841 = icmp eq i32 %6837, -1
  %6842 = icmp eq i32 %6839, 0
  %6843 = or i1 %6841, %6842
  %6844 = zext i1 %6843 to i8
  store i8 %6844, i8* %20, align 1
  %6845 = and i32 %6839, 255
  %6846 = tail call i32 @llvm.ctpop.i32(i32 %6845)
  %6847 = trunc i32 %6846 to i8
  %6848 = and i8 %6847, 1
  %6849 = xor i8 %6848, 1
  store i8 %6849, i8* %27, align 1
  %6850 = xor i32 %6839, %6837
  %6851 = lshr i32 %6850, 4
  %6852 = trunc i32 %6851 to i8
  %6853 = and i8 %6852, 1
  store i8 %6853, i8* %33, align 1
  %6854 = zext i1 %6842 to i8
  store i8 %6854, i8* %36, align 1
  %6855 = lshr i32 %6839, 31
  %6856 = trunc i32 %6855 to i8
  store i8 %6856, i8* %39, align 1
  %6857 = xor i32 %6855, %6838
  %6858 = add nuw nsw i32 %6857, %6855
  %6859 = icmp eq i32 %6858, 2
  %6860 = zext i1 %6859 to i8
  store i8 %6860, i8* %45, align 1
  store i64 %6840, i64* %RAX.i1585, align 8
  %6861 = sext i32 %6839 to i64
  %6862 = lshr i64 %6861, 32
  store i64 %6862, i64* %3718, align 8
  %6863 = add i64 %6828, 24
  store i64 %6863, i64* %3, align 8
  %6864 = shl nuw i64 %6862, 32
  %6865 = or i64 %6864, %6840
  %6866 = sdiv i64 %6865, 2
  %6867 = shl i64 %6866, 32
  %6868 = ashr exact i64 %6867, 32
  %6869 = icmp eq i64 %6866, %6868
  br i1 %6869, label %6872, label %6870

; <label>:6870:                                   ; preds = %block_.L_42ee79
  %6871 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6863, %struct.Memory* %call2_42ee98)
  %.pre230 = load i64, i64* %RBP.i, align 8
  %.pre231 = load i32, i32* %EAX.i1609, align 4
  %.pre232 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2717

; <label>:6872:                                   ; preds = %block_.L_42ee79
  %6873 = srem i64 %6865, 2
  %6874 = and i64 %6866, 4294967295
  store i64 %6874, i64* %RAX.i1585, align 8
  %6875 = and i64 %6873, 4294967295
  store i64 %6875, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %6876 = trunc i64 %6866 to i32
  br label %routine_idivl__ecx.exit2717

routine_idivl__ecx.exit2717:                      ; preds = %6872, %6870
  %6877 = phi i64 [ %.pre232, %6870 ], [ %6863, %6872 ]
  %6878 = phi i32 [ %.pre231, %6870 ], [ %6876, %6872 ]
  %6879 = phi i64 [ %.pre230, %6870 ], [ %6831, %6872 ]
  %6880 = phi %struct.Memory* [ %6871, %6870 ], [ %call2_42ee98, %6872 ]
  %6881 = add i64 %6879, -540
  %6882 = add i64 %6877, 6
  store i64 %6882, i64* %3, align 8
  %6883 = inttoptr i64 %6881 to i32*
  store i32 %6878, i32* %6883, align 4
  %.pre233 = load i64, i64* %3, align 8
  br label %block_.L_42eebb

block_.L_42eebb:                                  ; preds = %routine_idivl__ecx.exit2717, %block_42ede0
  %6884 = phi i64 [ %.pre233, %routine_idivl__ecx.exit2717 ], [ %6513, %block_42ede0 ]
  %MEMORY.48 = phi %struct.Memory* [ %6880, %routine_idivl__ecx.exit2717 ], [ %6470, %block_42ede0 ]
  %6885 = load i64, i64* %RBP.i, align 8
  %6886 = add i64 %6885, -540
  %6887 = add i64 %6884, 6
  store i64 %6887, i64* %3, align 8
  %6888 = inttoptr i64 %6886 to i32*
  %6889 = load i32, i32* %6888, align 4
  %6890 = zext i32 %6889 to i64
  store i64 %6890, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %6891 = sub i32 0, %6889
  %6892 = icmp ne i32 %6889, 0
  %6893 = zext i1 %6892 to i8
  store i8 %6893, i8* %20, align 1
  %6894 = and i32 %6891, 255
  %6895 = tail call i32 @llvm.ctpop.i32(i32 %6894)
  %6896 = trunc i32 %6895 to i8
  %6897 = and i8 %6896, 1
  %6898 = xor i8 %6897, 1
  store i8 %6898, i8* %27, align 1
  %6899 = xor i32 %6889, %6891
  %6900 = lshr i32 %6899, 4
  %6901 = trunc i32 %6900 to i8
  %6902 = and i8 %6901, 1
  store i8 %6902, i8* %33, align 1
  %6903 = icmp eq i32 %6889, 0
  %6904 = zext i1 %6903 to i8
  store i8 %6904, i8* %36, align 1
  %6905 = lshr i32 %6891, 31
  %6906 = trunc i32 %6905 to i8
  store i8 %6906, i8* %39, align 1
  %6907 = lshr i32 %6889, 31
  %6908 = add nuw nsw i32 %6905, %6907
  %6909 = icmp eq i32 %6908, 2
  %6910 = zext i1 %6909 to i8
  store i8 %6910, i8* %45, align 1
  %6911 = icmp ne i8 %6906, 0
  %6912 = xor i1 %6911, %6909
  %6913 = or i1 %6903, %6912
  %.v341 = select i1 %6913, i64 29, i64 16
  %6914 = add i64 %6884, %.v341
  store i64 %6914, i64* %3, align 8
  br i1 %6913, label %block_.L_42eed8, label %block_42eecb

block_42eecb:                                     ; preds = %block_.L_42eebb
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %6915 = add i64 %6885, -572
  %6916 = add i64 %6914, 8
  store i64 %6916, i64* %3, align 8
  %6917 = inttoptr i64 %6915 to i32*
  store i32 0, i32* %6917, align 4
  %6918 = load i64, i64* %3, align 8
  %6919 = add i64 %6918, 463
  store i64 %6919, i64* %3, align 8
  br label %block_.L_42f0a2

block_.L_42eed8:                                  ; preds = %block_.L_42eebb
  %6920 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6920, i64* %RAX.i1585, align 8
  %6921 = add i64 %6920, 72684
  %6922 = add i64 %6914, 14
  store i64 %6922, i64* %3, align 8
  %6923 = inttoptr i64 %6921 to i32*
  %6924 = load i32, i32* %6923, align 4
  %6925 = zext i32 %6924 to i64
  store i64 %6925, i64* %RCX.i3128, align 8
  %6926 = add i64 %6885, -56
  %6927 = add i64 %6914, 18
  store i64 %6927, i64* %3, align 8
  %6928 = inttoptr i64 %6926 to i64*
  %6929 = load i64, i64* %6928, align 8
  store i64 %6929, i64* %RDI.i605, align 8
  %6930 = add i64 %6885, -28
  %6931 = add i64 %6914, 21
  store i64 %6931, i64* %3, align 8
  %6932 = inttoptr i64 %6930 to i32*
  %6933 = load i32, i32* %6932, align 4
  %6934 = add i32 %6933, -16
  %6935 = zext i32 %6934 to i64
  store i64 %6935, i64* %RDX.i5152, align 8
  %6936 = icmp ult i32 %6933, 16
  %6937 = zext i1 %6936 to i8
  store i8 %6937, i8* %20, align 1
  %6938 = and i32 %6934, 255
  %6939 = tail call i32 @llvm.ctpop.i32(i32 %6938)
  %6940 = trunc i32 %6939 to i8
  %6941 = and i8 %6940, 1
  %6942 = xor i8 %6941, 1
  store i8 %6942, i8* %27, align 1
  %6943 = xor i32 %6933, 16
  %6944 = xor i32 %6943, %6934
  %6945 = lshr i32 %6944, 4
  %6946 = trunc i32 %6945 to i8
  %6947 = and i8 %6946, 1
  store i8 %6947, i8* %33, align 1
  %6948 = icmp eq i32 %6934, 0
  %6949 = zext i1 %6948 to i8
  store i8 %6949, i8* %36, align 1
  %6950 = lshr i32 %6934, 31
  %6951 = trunc i32 %6950 to i8
  store i8 %6951, i8* %39, align 1
  %6952 = lshr i32 %6933, 31
  %6953 = xor i32 %6950, %6952
  %6954 = add nuw nsw i32 %6953, %6952
  %6955 = icmp eq i32 %6954, 2
  %6956 = zext i1 %6955 to i8
  store i8 %6956, i8* %45, align 1
  %6957 = add i64 %6885, -24
  %6958 = add i64 %6914, 27
  store i64 %6958, i64* %3, align 8
  %6959 = inttoptr i64 %6957 to i32*
  %6960 = load i32, i32* %6959, align 4
  %6961 = add i32 %6960, -16
  %6962 = zext i32 %6961 to i64
  store i64 %6962, i64* %RSI.i5212, align 8
  %6963 = icmp ult i32 %6960, 16
  %6964 = zext i1 %6963 to i8
  store i8 %6964, i8* %20, align 1
  %6965 = and i32 %6961, 255
  %6966 = tail call i32 @llvm.ctpop.i32(i32 %6965)
  %6967 = trunc i32 %6966 to i8
  %6968 = and i8 %6967, 1
  %6969 = xor i8 %6968, 1
  store i8 %6969, i8* %27, align 1
  %6970 = xor i32 %6960, 16
  %6971 = xor i32 %6970, %6961
  %6972 = lshr i32 %6971, 4
  %6973 = trunc i32 %6972 to i8
  %6974 = and i8 %6973, 1
  store i8 %6974, i8* %33, align 1
  %6975 = icmp eq i32 %6961, 0
  %6976 = zext i1 %6975 to i8
  store i8 %6976, i8* %36, align 1
  %6977 = lshr i32 %6961, 31
  %6978 = trunc i32 %6977 to i8
  store i8 %6978, i8* %39, align 1
  %6979 = lshr i32 %6960, 31
  %6980 = xor i32 %6977, %6979
  %6981 = add nuw nsw i32 %6980, %6979
  %6982 = icmp eq i32 %6981, 2
  %6983 = zext i1 %6982 to i8
  store i8 %6983, i8* %45, align 1
  %6984 = add i64 %6885, -80
  %6985 = add i64 %6914, 34
  store i64 %6985, i64* %3, align 8
  %6986 = inttoptr i64 %6984 to i32*
  %6987 = load i32, i32* %6986, align 4
  %6988 = zext i32 %6987 to i64
  store i64 %6988, i64* %600, align 8
  %6989 = load i64, i64* %RBP.i, align 8
  %6990 = add i64 %6989, -76
  %6991 = add i64 %6914, 38
  store i64 %6991, i64* %3, align 8
  %6992 = inttoptr i64 %6990 to i32*
  %6993 = load i32, i32* %6992, align 4
  %6994 = zext i32 %6993 to i64
  store i64 %6994, i64* %602, align 8
  %6995 = add i64 %6989, -576
  %6996 = add i64 %6914, 44
  store i64 %6996, i64* %3, align 8
  %6997 = inttoptr i64 %6995 to i32*
  store i32 %6961, i32* %6997, align 4
  %6998 = load i32, i32* %EDX.i5198, align 4
  %6999 = zext i32 %6998 to i64
  %7000 = load i64, i64* %3, align 8
  store i64 %6999, i64* %RSI.i5212, align 8
  %7001 = load i64, i64* %RBP.i, align 8
  %7002 = add i64 %7001, -576
  %7003 = add i64 %7000, 8
  store i64 %7003, i64* %3, align 8
  %7004 = inttoptr i64 %7002 to i32*
  %7005 = load i32, i32* %7004, align 4
  %7006 = zext i32 %7005 to i64
  store i64 %7006, i64* %RDX.i5152, align 8
  %7007 = add i64 %7001, -580
  %7008 = load i32, i32* %ECX.i3256, align 4
  %7009 = add i64 %7000, 14
  store i64 %7009, i64* %3, align 8
  %7010 = inttoptr i64 %7007 to i32*
  store i32 %7008, i32* %7010, align 4
  %7011 = load i32, i32* %R8D.i4817, align 4
  %7012 = zext i32 %7011 to i64
  %7013 = load i64, i64* %3, align 8
  store i64 %7012, i64* %RCX.i3128, align 8
  %7014 = load i32, i32* %R9D.i4678, align 4
  %7015 = zext i32 %7014 to i64
  store i64 %7015, i64* %600, align 8
  %7016 = add i64 %7013, 457214
  %7017 = add i64 %7013, 11
  %7018 = load i64, i64* %6, align 8
  %7019 = add i64 %7018, -8
  %7020 = inttoptr i64 %7019 to i64*
  store i64 %7017, i64* %7020, align 8
  store i64 %7019, i64* %6, align 8
  store i64 %7016, i64* %3, align 8
  %call2_42ef18 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %7016, %struct.Memory* %MEMORY.48)
  %7021 = load i16, i16* %AX.i3315, align 2
  %7022 = zext i16 %7021 to i64
  %7023 = load i64, i64* %3, align 8
  store i64 %7022, i64* %RCX.i3128, align 8
  %7024 = load i64, i64* %RBP.i, align 8
  %7025 = add i64 %7024, -56
  %7026 = add i64 %7023, 7
  store i64 %7026, i64* %3, align 8
  %7027 = inttoptr i64 %7025 to i64*
  %7028 = load i64, i64* %7027, align 8
  store i64 %7028, i64* %RDI.i605, align 8
  %7029 = add i64 %7024, -28
  %7030 = add i64 %7023, 10
  store i64 %7030, i64* %3, align 8
  %7031 = inttoptr i64 %7029 to i32*
  %7032 = load i32, i32* %7031, align 4
  %7033 = add i32 %7032, -16
  %7034 = zext i32 %7033 to i64
  store i64 %7034, i64* %RDX.i5152, align 8
  %7035 = icmp ult i32 %7032, 16
  %7036 = zext i1 %7035 to i8
  store i8 %7036, i8* %20, align 1
  %7037 = and i32 %7033, 255
  %7038 = tail call i32 @llvm.ctpop.i32(i32 %7037)
  %7039 = trunc i32 %7038 to i8
  %7040 = and i8 %7039, 1
  %7041 = xor i8 %7040, 1
  store i8 %7041, i8* %27, align 1
  %7042 = xor i32 %7032, 16
  %7043 = xor i32 %7042, %7033
  %7044 = lshr i32 %7043, 4
  %7045 = trunc i32 %7044 to i8
  %7046 = and i8 %7045, 1
  store i8 %7046, i8* %33, align 1
  %7047 = icmp eq i32 %7033, 0
  %7048 = zext i1 %7047 to i8
  store i8 %7048, i8* %36, align 1
  %7049 = lshr i32 %7033, 31
  %7050 = trunc i32 %7049 to i8
  store i8 %7050, i8* %39, align 1
  %7051 = lshr i32 %7032, 31
  %7052 = xor i32 %7049, %7051
  %7053 = add nuw nsw i32 %7052, %7051
  %7054 = icmp eq i32 %7053, 2
  %7055 = zext i1 %7054 to i8
  store i8 %7055, i8* %45, align 1
  %7056 = add i64 %7024, -36
  %7057 = add i64 %7023, 16
  store i64 %7057, i64* %3, align 8
  %7058 = inttoptr i64 %7056 to i32*
  %7059 = load i32, i32* %7058, align 4
  %7060 = add i32 %7059, 2
  %7061 = zext i32 %7060 to i64
  store i64 %7061, i64* %RSI.i5212, align 8
  %7062 = icmp ugt i32 %7059, -3
  %7063 = zext i1 %7062 to i8
  store i8 %7063, i8* %20, align 1
  %7064 = and i32 %7060, 255
  %7065 = tail call i32 @llvm.ctpop.i32(i32 %7064)
  %7066 = trunc i32 %7065 to i8
  %7067 = and i8 %7066, 1
  %7068 = xor i8 %7067, 1
  store i8 %7068, i8* %27, align 1
  %7069 = xor i32 %7060, %7059
  %7070 = lshr i32 %7069, 4
  %7071 = trunc i32 %7070 to i8
  %7072 = and i8 %7071, 1
  store i8 %7072, i8* %33, align 1
  %7073 = icmp eq i32 %7060, 0
  %7074 = zext i1 %7073 to i8
  store i8 %7074, i8* %36, align 1
  %7075 = lshr i32 %7060, 31
  %7076 = trunc i32 %7075 to i8
  store i8 %7076, i8* %39, align 1
  %7077 = lshr i32 %7059, 31
  %7078 = xor i32 %7075, %7077
  %7079 = add nuw nsw i32 %7078, %7075
  %7080 = icmp eq i32 %7079, 2
  %7081 = zext i1 %7080 to i8
  store i8 %7081, i8* %45, align 1
  %7082 = add i64 %7024, -24
  %7083 = add i64 %7023, 23
  store i64 %7083, i64* %3, align 8
  %7084 = inttoptr i64 %7082 to i32*
  %7085 = load i32, i32* %7084, align 4
  %7086 = add i32 %7085, 2
  %7087 = zext i32 %7086 to i64
  store i64 %7087, i64* %600, align 8
  %7088 = lshr i32 %7086, 31
  %7089 = sub i32 %7060, %7086
  %7090 = icmp ult i32 %7060, %7086
  %7091 = zext i1 %7090 to i8
  store i8 %7091, i8* %20, align 1
  %7092 = and i32 %7089, 255
  %7093 = tail call i32 @llvm.ctpop.i32(i32 %7092)
  %7094 = trunc i32 %7093 to i8
  %7095 = and i8 %7094, 1
  %7096 = xor i8 %7095, 1
  store i8 %7096, i8* %27, align 1
  %7097 = xor i32 %7086, %7060
  %7098 = xor i32 %7097, %7089
  %7099 = lshr i32 %7098, 4
  %7100 = trunc i32 %7099 to i8
  %7101 = and i8 %7100, 1
  store i8 %7101, i8* %33, align 1
  %7102 = icmp eq i32 %7089, 0
  %7103 = zext i1 %7102 to i8
  store i8 %7103, i8* %36, align 1
  %7104 = lshr i32 %7089, 31
  %7105 = trunc i32 %7104 to i8
  store i8 %7105, i8* %39, align 1
  %7106 = xor i32 %7088, %7075
  %7107 = xor i32 %7104, %7075
  %7108 = add nuw nsw i32 %7107, %7106
  %7109 = icmp eq i32 %7108, 2
  %7110 = zext i1 %7109 to i8
  store i8 %7110, i8* %45, align 1
  %7111 = load i64, i64* %RBP.i, align 8
  %7112 = add i64 %7111, -584
  %7113 = load i32, i32* %ECX.i3256, align 4
  %7114 = add i64 %7023, 36
  store i64 %7114, i64* %3, align 8
  %7115 = inttoptr i64 %7112 to i32*
  store i32 %7113, i32* %7115, align 4
  %7116 = load i64, i64* %RBP.i, align 8
  %7117 = add i64 %7116, -592
  %7118 = load i64, i64* %RDI.i605, align 8
  %7119 = load i64, i64* %3, align 8
  %7120 = add i64 %7119, 7
  store i64 %7120, i64* %3, align 8
  %7121 = inttoptr i64 %7117 to i64*
  store i64 %7118, i64* %7121, align 8
  %7122 = load i64, i64* %RBP.i, align 8
  %7123 = add i64 %7122, -596
  %7124 = load i32, i32* %EDX.i5198, align 4
  %7125 = load i64, i64* %3, align 8
  %7126 = add i64 %7125, 6
  store i64 %7126, i64* %3, align 8
  %7127 = inttoptr i64 %7123 to i32*
  store i32 %7124, i32* %7127, align 4
  %7128 = load i64, i64* %3, align 8
  %7129 = load i8, i8* %39, align 1
  %7130 = icmp ne i8 %7129, 0
  %7131 = load i8, i8* %45, align 1
  %7132 = icmp ne i8 %7131, 0
  %7133 = xor i1 %7130, %7132
  %.v399 = select i1 %7133, i64 6, i64 23
  %7134 = add i64 %7128, %.v399
  store i64 %7134, i64* %3, align 8
  %7135 = load i64, i64* %RBP.i, align 8
  br i1 %7133, label %block_42ef54, label %block_.L_42ef65

block_42ef54:                                     ; preds = %block_.L_42eed8
  %7136 = add i64 %7135, -36
  %7137 = add i64 %7134, 3
  store i64 %7137, i64* %3, align 8
  %7138 = inttoptr i64 %7136 to i32*
  %7139 = load i32, i32* %7138, align 4
  %7140 = add i32 %7139, 2
  %7141 = zext i32 %7140 to i64
  store i64 %7141, i64* %RAX.i1585, align 8
  %7142 = icmp ugt i32 %7139, -3
  %7143 = zext i1 %7142 to i8
  store i8 %7143, i8* %20, align 1
  %7144 = and i32 %7140, 255
  %7145 = tail call i32 @llvm.ctpop.i32(i32 %7144)
  %7146 = trunc i32 %7145 to i8
  %7147 = and i8 %7146, 1
  %7148 = xor i8 %7147, 1
  store i8 %7148, i8* %27, align 1
  %7149 = xor i32 %7140, %7139
  %7150 = lshr i32 %7149, 4
  %7151 = trunc i32 %7150 to i8
  %7152 = and i8 %7151, 1
  store i8 %7152, i8* %33, align 1
  %7153 = icmp eq i32 %7140, 0
  %7154 = zext i1 %7153 to i8
  store i8 %7154, i8* %36, align 1
  %7155 = lshr i32 %7140, 31
  %7156 = trunc i32 %7155 to i8
  store i8 %7156, i8* %39, align 1
  %7157 = lshr i32 %7139, 31
  %7158 = xor i32 %7155, %7157
  %7159 = add nuw nsw i32 %7158, %7155
  %7160 = icmp eq i32 %7159, 2
  %7161 = zext i1 %7160 to i8
  store i8 %7161, i8* %45, align 1
  %7162 = add i64 %7135, -600
  %7163 = add i64 %7134, 12
  store i64 %7163, i64* %3, align 8
  %7164 = inttoptr i64 %7162 to i32*
  store i32 %7140, i32* %7164, align 4
  %7165 = load i64, i64* %3, align 8
  %7166 = add i64 %7165, 17
  store i64 %7166, i64* %3, align 8
  br label %block_.L_42ef71

block_.L_42ef65:                                  ; preds = %block_.L_42eed8
  %7167 = add i64 %7135, -24
  %7168 = add i64 %7134, 3
  store i64 %7168, i64* %3, align 8
  %7169 = inttoptr i64 %7167 to i32*
  %7170 = load i32, i32* %7169, align 4
  %7171 = add i32 %7170, 2
  %7172 = zext i32 %7171 to i64
  store i64 %7172, i64* %RAX.i1585, align 8
  %7173 = icmp ugt i32 %7170, -3
  %7174 = zext i1 %7173 to i8
  store i8 %7174, i8* %20, align 1
  %7175 = and i32 %7171, 255
  %7176 = tail call i32 @llvm.ctpop.i32(i32 %7175)
  %7177 = trunc i32 %7176 to i8
  %7178 = and i8 %7177, 1
  %7179 = xor i8 %7178, 1
  store i8 %7179, i8* %27, align 1
  %7180 = xor i32 %7171, %7170
  %7181 = lshr i32 %7180, 4
  %7182 = trunc i32 %7181 to i8
  %7183 = and i8 %7182, 1
  store i8 %7183, i8* %33, align 1
  %7184 = icmp eq i32 %7171, 0
  %7185 = zext i1 %7184 to i8
  store i8 %7185, i8* %36, align 1
  %7186 = lshr i32 %7171, 31
  %7187 = trunc i32 %7186 to i8
  store i8 %7187, i8* %39, align 1
  %7188 = lshr i32 %7170, 31
  %7189 = xor i32 %7186, %7188
  %7190 = add nuw nsw i32 %7189, %7186
  %7191 = icmp eq i32 %7190, 2
  %7192 = zext i1 %7191 to i8
  store i8 %7192, i8* %45, align 1
  %7193 = add i64 %7135, -600
  %7194 = add i64 %7134, 12
  store i64 %7194, i64* %3, align 8
  %7195 = inttoptr i64 %7193 to i32*
  store i32 %7171, i32* %7195, align 4
  %.pre234 = load i64, i64* %3, align 8
  br label %block_.L_42ef71

block_.L_42ef71:                                  ; preds = %block_.L_42ef65, %block_42ef54
  %7196 = phi i64 [ %.pre234, %block_.L_42ef65 ], [ %7166, %block_42ef54 ]
  %7197 = load i64, i64* %RBP.i, align 8
  %7198 = add i64 %7197, -600
  %7199 = add i64 %7196, 6
  store i64 %7199, i64* %3, align 8
  %7200 = inttoptr i64 %7198 to i32*
  %7201 = load i32, i32* %7200, align 4
  %7202 = add i32 %7201, -16
  %7203 = zext i32 %7202 to i64
  store i64 %7203, i64* %RAX.i1585, align 8
  %7204 = icmp ult i32 %7201, 16
  %7205 = zext i1 %7204 to i8
  store i8 %7205, i8* %20, align 1
  %7206 = and i32 %7202, 255
  %7207 = tail call i32 @llvm.ctpop.i32(i32 %7206)
  %7208 = trunc i32 %7207 to i8
  %7209 = and i8 %7208, 1
  %7210 = xor i8 %7209, 1
  store i8 %7210, i8* %27, align 1
  %7211 = xor i32 %7201, 16
  %7212 = xor i32 %7211, %7202
  %7213 = lshr i32 %7212, 4
  %7214 = trunc i32 %7213 to i8
  %7215 = and i8 %7214, 1
  store i8 %7215, i8* %33, align 1
  %7216 = icmp eq i32 %7202, 0
  %7217 = zext i1 %7216 to i8
  store i8 %7217, i8* %36, align 1
  %7218 = lshr i32 %7202, 31
  %7219 = trunc i32 %7218 to i8
  store i8 %7219, i8* %39, align 1
  %7220 = lshr i32 %7201, 31
  %7221 = xor i32 %7218, %7220
  %7222 = add nuw nsw i32 %7221, %7220
  %7223 = icmp eq i32 %7222, 2
  %7224 = zext i1 %7223 to i8
  store i8 %7224, i8* %45, align 1
  %7225 = add i64 %7197, -80
  %7226 = add i64 %7196, 12
  store i64 %7226, i64* %3, align 8
  %7227 = inttoptr i64 %7225 to i32*
  %7228 = load i32, i32* %7227, align 4
  %7229 = zext i32 %7228 to i64
  store i64 %7229, i64* %RCX.i3128, align 8
  %7230 = add i64 %7197, -76
  %7231 = add i64 %7196, 16
  store i64 %7231, i64* %3, align 8
  %7232 = inttoptr i64 %7230 to i32*
  %7233 = load i32, i32* %7232, align 4
  %7234 = zext i32 %7233 to i64
  store i64 %7234, i64* %600, align 8
  %7235 = add i64 %7197, -592
  %7236 = add i64 %7196, 23
  store i64 %7236, i64* %3, align 8
  %7237 = inttoptr i64 %7235 to i64*
  %7238 = load i64, i64* %7237, align 8
  store i64 %7238, i64* %RDI.i605, align 8
  %7239 = add i64 %7197, -596
  %7240 = add i64 %7196, 29
  store i64 %7240, i64* %3, align 8
  %7241 = inttoptr i64 %7239 to i32*
  %7242 = load i32, i32* %7241, align 4
  %7243 = zext i32 %7242 to i64
  store i64 %7243, i64* %RSI.i5212, align 8
  store i64 %7203, i64* %RDX.i5152, align 8
  %7244 = add i64 %7196, 457119
  %7245 = add i64 %7196, 36
  %7246 = load i64, i64* %6, align 8
  %7247 = add i64 %7246, -8
  %7248 = inttoptr i64 %7247 to i64*
  store i64 %7245, i64* %7248, align 8
  store i64 %7247, i64* %6, align 8
  store i64 %7244, i64* %3, align 8
  %call2_42ef90 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %7244, %struct.Memory* %call2_42ef18)
  %7249 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %7250 = load i16, i16* %AX.i3315, align 2
  %7251 = zext i16 %7250 to i64
  store i64 %7251, i64* %RDX.i5152, align 8
  %7252 = load i64, i64* %RBP.i, align 8
  %7253 = add i64 %7252, -584
  %7254 = add i64 %7249, 14
  store i64 %7254, i64* %3, align 8
  %7255 = inttoptr i64 %7253 to i32*
  %7256 = load i32, i32* %7255, align 4
  %7257 = zext i16 %7250 to i32
  %7258 = add i32 %7257, %7256
  %7259 = lshr i32 %7258, 31
  %7260 = add i32 %7258, 1
  %7261 = zext i32 %7260 to i64
  store i64 %7261, i64* %RSI.i5212, align 8
  %7262 = icmp eq i32 %7258, -1
  %7263 = icmp eq i32 %7260, 0
  %7264 = or i1 %7262, %7263
  %7265 = zext i1 %7264 to i8
  store i8 %7265, i8* %20, align 1
  %7266 = and i32 %7260, 255
  %7267 = tail call i32 @llvm.ctpop.i32(i32 %7266)
  %7268 = trunc i32 %7267 to i8
  %7269 = and i8 %7268, 1
  %7270 = xor i8 %7269, 1
  store i8 %7270, i8* %27, align 1
  %7271 = xor i32 %7260, %7258
  %7272 = lshr i32 %7271, 4
  %7273 = trunc i32 %7272 to i8
  %7274 = and i8 %7273, 1
  store i8 %7274, i8* %33, align 1
  %7275 = zext i1 %7263 to i8
  store i8 %7275, i8* %36, align 1
  %7276 = lshr i32 %7260, 31
  %7277 = trunc i32 %7276 to i8
  store i8 %7277, i8* %39, align 1
  %7278 = xor i32 %7276, %7259
  %7279 = add nuw nsw i32 %7278, %7276
  %7280 = icmp eq i32 %7279, 2
  %7281 = zext i1 %7280 to i8
  store i8 %7281, i8* %45, align 1
  store i64 %7261, i64* %RAX.i1585, align 8
  %7282 = sext i32 %7260 to i64
  %7283 = lshr i64 %7282, 32
  store i64 %7283, i64* %3718, align 8
  %7284 = add i64 %7249, 24
  store i64 %7284, i64* %3, align 8
  %7285 = shl nuw i64 %7283, 32
  %7286 = or i64 %7285, %7261
  %7287 = sdiv i64 %7286, 2
  %7288 = shl i64 %7287, 32
  %7289 = ashr exact i64 %7288, 32
  %7290 = icmp eq i64 %7287, %7289
  br i1 %7290, label %7293, label %7291

; <label>:7291:                                   ; preds = %block_.L_42ef71
  %7292 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7284, %struct.Memory* %call2_42ef90)
  %.pre235 = load i64, i64* %RBP.i, align 8
  %.pre236 = load i64, i64* %3, align 8
  %.pre237 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__ecx.exit2561

; <label>:7293:                                   ; preds = %block_.L_42ef71
  %7294 = srem i64 %7286, 2
  %7295 = and i64 %7287, 4294967295
  store i64 %7295, i64* %RAX.i1585, align 8
  %7296 = and i64 %7294, 4294967295
  store i64 %7296, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7297 = trunc i64 %7287 to i32
  br label %routine_idivl__ecx.exit2561

routine_idivl__ecx.exit2561:                      ; preds = %7293, %7291
  %7298 = phi i32 [ %.pre237, %7291 ], [ %7297, %7293 ]
  %7299 = phi i64 [ %.pre236, %7291 ], [ %7284, %7293 ]
  %7300 = phi i64 [ %.pre235, %7291 ], [ %7252, %7293 ]
  %7301 = phi %struct.Memory* [ %7292, %7291 ], [ %call2_42ef90, %7293 ]
  %7302 = add i64 %7300, -580
  %7303 = add i64 %7299, 6
  store i64 %7303, i64* %3, align 8
  %7304 = inttoptr i64 %7302 to i32*
  %7305 = load i32, i32* %7304, align 4
  %7306 = zext i32 %7305 to i64
  store i64 %7306, i64* %RCX.i3128, align 8
  %7307 = sub i32 %7305, %7298
  %7308 = icmp ult i32 %7305, %7298
  %7309 = zext i1 %7308 to i8
  store i8 %7309, i8* %20, align 1
  %7310 = and i32 %7307, 255
  %7311 = tail call i32 @llvm.ctpop.i32(i32 %7310)
  %7312 = trunc i32 %7311 to i8
  %7313 = and i8 %7312, 1
  %7314 = xor i8 %7313, 1
  store i8 %7314, i8* %27, align 1
  %7315 = xor i32 %7298, %7305
  %7316 = xor i32 %7315, %7307
  %7317 = lshr i32 %7316, 4
  %7318 = trunc i32 %7317 to i8
  %7319 = and i8 %7318, 1
  store i8 %7319, i8* %33, align 1
  %7320 = icmp eq i32 %7307, 0
  %7321 = zext i1 %7320 to i8
  store i8 %7321, i8* %36, align 1
  %7322 = lshr i32 %7307, 31
  %7323 = trunc i32 %7322 to i8
  store i8 %7323, i8* %39, align 1
  %7324 = lshr i32 %7305, 31
  %7325 = lshr i32 %7298, 31
  %7326 = xor i32 %7325, %7324
  %7327 = xor i32 %7322, %7324
  %7328 = add nuw nsw i32 %7327, %7326
  %7329 = icmp eq i32 %7328, 2
  %7330 = zext i1 %7329 to i8
  store i8 %7330, i8* %45, align 1
  %7331 = icmp ne i8 %7323, 0
  %7332 = xor i1 %7331, %7329
  %.v342 = select i1 %7332, i64 14, i64 39
  %7333 = add i64 %7299, %.v342
  store i64 %7333, i64* %3, align 8
  br i1 %7332, label %block_42efbb, label %block_.L_42efd4

block_42efbb:                                     ; preds = %routine_idivl__ecx.exit2561
  %7334 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7334, i64* %RAX.i1585, align 8
  %7335 = add i64 %7334, 72684
  %7336 = add i64 %7333, 14
  store i64 %7336, i64* %3, align 8
  %7337 = inttoptr i64 %7335 to i32*
  %7338 = load i32, i32* %7337, align 4
  %7339 = zext i32 %7338 to i64
  store i64 %7339, i64* %RCX.i3128, align 8
  %7340 = add i64 %7300, -604
  %7341 = add i64 %7333, 20
  store i64 %7341, i64* %3, align 8
  %7342 = inttoptr i64 %7340 to i32*
  store i32 %7338, i32* %7342, align 4
  %7343 = load i64, i64* %3, align 8
  %7344 = add i64 %7343, 199
  store i64 %7344, i64* %3, align 8
  br label %block_.L_42f096

block_.L_42efd4:                                  ; preds = %routine_idivl__ecx.exit2561
  %7345 = add i64 %7300, -56
  %7346 = add i64 %7333, 4
  store i64 %7346, i64* %3, align 8
  %7347 = inttoptr i64 %7345 to i64*
  %7348 = load i64, i64* %7347, align 8
  store i64 %7348, i64* %RDI.i605, align 8
  %7349 = add i64 %7300, -28
  %7350 = add i64 %7333, 7
  store i64 %7350, i64* %3, align 8
  %7351 = inttoptr i64 %7349 to i32*
  %7352 = load i32, i32* %7351, align 4
  %7353 = add i32 %7352, -16
  %7354 = zext i32 %7353 to i64
  store i64 %7354, i64* %RAX.i1585, align 8
  %7355 = icmp ult i32 %7352, 16
  %7356 = zext i1 %7355 to i8
  store i8 %7356, i8* %20, align 1
  %7357 = and i32 %7353, 255
  %7358 = tail call i32 @llvm.ctpop.i32(i32 %7357)
  %7359 = trunc i32 %7358 to i8
  %7360 = and i8 %7359, 1
  %7361 = xor i8 %7360, 1
  store i8 %7361, i8* %27, align 1
  %7362 = xor i32 %7352, 16
  %7363 = xor i32 %7362, %7353
  %7364 = lshr i32 %7363, 4
  %7365 = trunc i32 %7364 to i8
  %7366 = and i8 %7365, 1
  store i8 %7366, i8* %33, align 1
  %7367 = icmp eq i32 %7353, 0
  %7368 = zext i1 %7367 to i8
  store i8 %7368, i8* %36, align 1
  %7369 = lshr i32 %7353, 31
  %7370 = trunc i32 %7369 to i8
  store i8 %7370, i8* %39, align 1
  %7371 = lshr i32 %7352, 31
  %7372 = xor i32 %7369, %7371
  %7373 = add nuw nsw i32 %7372, %7371
  %7374 = icmp eq i32 %7373, 2
  %7375 = zext i1 %7374 to i8
  store i8 %7375, i8* %45, align 1
  %7376 = add i64 %7300, -24
  %7377 = add i64 %7333, 13
  store i64 %7377, i64* %3, align 8
  %7378 = inttoptr i64 %7376 to i32*
  %7379 = load i32, i32* %7378, align 4
  %7380 = add i32 %7379, -16
  %7381 = zext i32 %7380 to i64
  store i64 %7381, i64* %RCX.i3128, align 8
  %7382 = icmp ult i32 %7379, 16
  %7383 = zext i1 %7382 to i8
  store i8 %7383, i8* %20, align 1
  %7384 = and i32 %7380, 255
  %7385 = tail call i32 @llvm.ctpop.i32(i32 %7384)
  %7386 = trunc i32 %7385 to i8
  %7387 = and i8 %7386, 1
  %7388 = xor i8 %7387, 1
  store i8 %7388, i8* %27, align 1
  %7389 = xor i32 %7379, 16
  %7390 = xor i32 %7389, %7380
  %7391 = lshr i32 %7390, 4
  %7392 = trunc i32 %7391 to i8
  %7393 = and i8 %7392, 1
  store i8 %7393, i8* %33, align 1
  %7394 = icmp eq i32 %7380, 0
  %7395 = zext i1 %7394 to i8
  store i8 %7395, i8* %36, align 1
  %7396 = lshr i32 %7380, 31
  %7397 = trunc i32 %7396 to i8
  store i8 %7397, i8* %39, align 1
  %7398 = lshr i32 %7379, 31
  %7399 = xor i32 %7396, %7398
  %7400 = add nuw nsw i32 %7399, %7398
  %7401 = icmp eq i32 %7400, 2
  %7402 = zext i1 %7401 to i8
  store i8 %7402, i8* %45, align 1
  %7403 = add i64 %7300, -80
  %7404 = add i64 %7333, 19
  store i64 %7404, i64* %3, align 8
  %7405 = inttoptr i64 %7403 to i32*
  %7406 = load i32, i32* %7405, align 4
  %7407 = zext i32 %7406 to i64
  store i64 %7407, i64* %RDX.i5152, align 8
  %7408 = add i64 %7300, -76
  %7409 = add i64 %7333, 23
  store i64 %7409, i64* %3, align 8
  %7410 = inttoptr i64 %7408 to i32*
  %7411 = load i32, i32* %7410, align 4
  %7412 = zext i32 %7411 to i64
  store i64 %7412, i64* %600, align 8
  store i64 %7354, i64* %RSI.i5212, align 8
  %7413 = load i64, i64* %RBP.i, align 8
  %7414 = add i64 %7413, -608
  %7415 = add i64 %7333, 31
  store i64 %7415, i64* %3, align 8
  %7416 = inttoptr i64 %7414 to i32*
  store i32 %7406, i32* %7416, align 4
  %7417 = load i32, i32* %ECX.i3256, align 4
  %7418 = zext i32 %7417 to i64
  %7419 = load i64, i64* %3, align 8
  store i64 %7418, i64* %RDX.i5152, align 8
  %7420 = load i64, i64* %RBP.i, align 8
  %7421 = add i64 %7420, -608
  %7422 = add i64 %7419, 8
  store i64 %7422, i64* %3, align 8
  %7423 = inttoptr i64 %7421 to i32*
  %7424 = load i32, i32* %7423, align 4
  %7425 = zext i32 %7424 to i64
  store i64 %7425, i64* %RCX.i3128, align 8
  %7426 = add i64 %7419, 456989
  %7427 = add i64 %7419, 13
  %7428 = load i64, i64* %6, align 8
  %7429 = add i64 %7428, -8
  %7430 = inttoptr i64 %7429 to i64*
  store i64 %7427, i64* %7430, align 8
  store i64 %7429, i64* %6, align 8
  store i64 %7426, i64* %3, align 8
  %call2_42effb = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %7426, %struct.Memory* %7301)
  %7431 = load i16, i16* %AX.i3315, align 2
  %7432 = zext i16 %7431 to i64
  %7433 = load i64, i64* %3, align 8
  store i64 %7432, i64* %RCX.i3128, align 8
  %7434 = load i64, i64* %RBP.i, align 8
  %7435 = add i64 %7434, -56
  %7436 = add i64 %7433, 7
  store i64 %7436, i64* %3, align 8
  %7437 = inttoptr i64 %7435 to i64*
  %7438 = load i64, i64* %7437, align 8
  store i64 %7438, i64* %RDI.i605, align 8
  %7439 = add i64 %7434, -28
  %7440 = add i64 %7433, 10
  store i64 %7440, i64* %3, align 8
  %7441 = inttoptr i64 %7439 to i32*
  %7442 = load i32, i32* %7441, align 4
  %7443 = add i32 %7442, -16
  %7444 = zext i32 %7443 to i64
  store i64 %7444, i64* %RDX.i5152, align 8
  %7445 = icmp ult i32 %7442, 16
  %7446 = zext i1 %7445 to i8
  store i8 %7446, i8* %20, align 1
  %7447 = and i32 %7443, 255
  %7448 = tail call i32 @llvm.ctpop.i32(i32 %7447)
  %7449 = trunc i32 %7448 to i8
  %7450 = and i8 %7449, 1
  %7451 = xor i8 %7450, 1
  store i8 %7451, i8* %27, align 1
  %7452 = xor i32 %7442, 16
  %7453 = xor i32 %7452, %7443
  %7454 = lshr i32 %7453, 4
  %7455 = trunc i32 %7454 to i8
  %7456 = and i8 %7455, 1
  store i8 %7456, i8* %33, align 1
  %7457 = icmp eq i32 %7443, 0
  %7458 = zext i1 %7457 to i8
  store i8 %7458, i8* %36, align 1
  %7459 = lshr i32 %7443, 31
  %7460 = trunc i32 %7459 to i8
  store i8 %7460, i8* %39, align 1
  %7461 = lshr i32 %7442, 31
  %7462 = xor i32 %7459, %7461
  %7463 = add nuw nsw i32 %7462, %7461
  %7464 = icmp eq i32 %7463, 2
  %7465 = zext i1 %7464 to i8
  store i8 %7465, i8* %45, align 1
  %7466 = add i64 %7434, -36
  %7467 = add i64 %7433, 16
  store i64 %7467, i64* %3, align 8
  %7468 = inttoptr i64 %7466 to i32*
  %7469 = load i32, i32* %7468, align 4
  %7470 = add i32 %7469, 2
  %7471 = zext i32 %7470 to i64
  store i64 %7471, i64* %RSI.i5212, align 8
  %7472 = icmp ugt i32 %7469, -3
  %7473 = zext i1 %7472 to i8
  store i8 %7473, i8* %20, align 1
  %7474 = and i32 %7470, 255
  %7475 = tail call i32 @llvm.ctpop.i32(i32 %7474)
  %7476 = trunc i32 %7475 to i8
  %7477 = and i8 %7476, 1
  %7478 = xor i8 %7477, 1
  store i8 %7478, i8* %27, align 1
  %7479 = xor i32 %7470, %7469
  %7480 = lshr i32 %7479, 4
  %7481 = trunc i32 %7480 to i8
  %7482 = and i8 %7481, 1
  store i8 %7482, i8* %33, align 1
  %7483 = icmp eq i32 %7470, 0
  %7484 = zext i1 %7483 to i8
  store i8 %7484, i8* %36, align 1
  %7485 = lshr i32 %7470, 31
  %7486 = trunc i32 %7485 to i8
  store i8 %7486, i8* %39, align 1
  %7487 = lshr i32 %7469, 31
  %7488 = xor i32 %7485, %7487
  %7489 = add nuw nsw i32 %7488, %7485
  %7490 = icmp eq i32 %7489, 2
  %7491 = zext i1 %7490 to i8
  store i8 %7491, i8* %45, align 1
  %7492 = add i64 %7434, -24
  %7493 = add i64 %7433, 23
  store i64 %7493, i64* %3, align 8
  %7494 = inttoptr i64 %7492 to i32*
  %7495 = load i32, i32* %7494, align 4
  %7496 = add i32 %7495, 2
  %7497 = zext i32 %7496 to i64
  store i64 %7497, i64* %600, align 8
  %7498 = lshr i32 %7496, 31
  %7499 = sub i32 %7470, %7496
  %7500 = icmp ult i32 %7470, %7496
  %7501 = zext i1 %7500 to i8
  store i8 %7501, i8* %20, align 1
  %7502 = and i32 %7499, 255
  %7503 = tail call i32 @llvm.ctpop.i32(i32 %7502)
  %7504 = trunc i32 %7503 to i8
  %7505 = and i8 %7504, 1
  %7506 = xor i8 %7505, 1
  store i8 %7506, i8* %27, align 1
  %7507 = xor i32 %7496, %7470
  %7508 = xor i32 %7507, %7499
  %7509 = lshr i32 %7508, 4
  %7510 = trunc i32 %7509 to i8
  %7511 = and i8 %7510, 1
  store i8 %7511, i8* %33, align 1
  %7512 = icmp eq i32 %7499, 0
  %7513 = zext i1 %7512 to i8
  store i8 %7513, i8* %36, align 1
  %7514 = lshr i32 %7499, 31
  %7515 = trunc i32 %7514 to i8
  store i8 %7515, i8* %39, align 1
  %7516 = xor i32 %7498, %7485
  %7517 = xor i32 %7514, %7485
  %7518 = add nuw nsw i32 %7517, %7516
  %7519 = icmp eq i32 %7518, 2
  %7520 = zext i1 %7519 to i8
  store i8 %7520, i8* %45, align 1
  %7521 = load i64, i64* %RBP.i, align 8
  %7522 = add i64 %7521, -612
  %7523 = load i32, i32* %ECX.i3256, align 4
  %7524 = add i64 %7433, 36
  store i64 %7524, i64* %3, align 8
  %7525 = inttoptr i64 %7522 to i32*
  store i32 %7523, i32* %7525, align 4
  %7526 = load i64, i64* %RBP.i, align 8
  %7527 = add i64 %7526, -624
  %7528 = load i64, i64* %RDI.i605, align 8
  %7529 = load i64, i64* %3, align 8
  %7530 = add i64 %7529, 7
  store i64 %7530, i64* %3, align 8
  %7531 = inttoptr i64 %7527 to i64*
  store i64 %7528, i64* %7531, align 8
  %7532 = load i64, i64* %RBP.i, align 8
  %7533 = add i64 %7532, -628
  %7534 = load i32, i32* %EDX.i5198, align 4
  %7535 = load i64, i64* %3, align 8
  %7536 = add i64 %7535, 6
  store i64 %7536, i64* %3, align 8
  %7537 = inttoptr i64 %7533 to i32*
  store i32 %7534, i32* %7537, align 4
  %7538 = load i64, i64* %3, align 8
  %7539 = load i8, i8* %39, align 1
  %7540 = icmp ne i8 %7539, 0
  %7541 = load i8, i8* %45, align 1
  %7542 = icmp ne i8 %7541, 0
  %7543 = xor i1 %7540, %7542
  %.v400 = select i1 %7543, i64 6, i64 23
  %7544 = add i64 %7538, %.v400
  store i64 %7544, i64* %3, align 8
  %7545 = load i64, i64* %RBP.i, align 8
  br i1 %7543, label %block_42f037, label %block_.L_42f048

block_42f037:                                     ; preds = %block_.L_42efd4
  %7546 = add i64 %7545, -36
  %7547 = add i64 %7544, 3
  store i64 %7547, i64* %3, align 8
  %7548 = inttoptr i64 %7546 to i32*
  %7549 = load i32, i32* %7548, align 4
  %7550 = add i32 %7549, 2
  %7551 = zext i32 %7550 to i64
  store i64 %7551, i64* %RAX.i1585, align 8
  %7552 = icmp ugt i32 %7549, -3
  %7553 = zext i1 %7552 to i8
  store i8 %7553, i8* %20, align 1
  %7554 = and i32 %7550, 255
  %7555 = tail call i32 @llvm.ctpop.i32(i32 %7554)
  %7556 = trunc i32 %7555 to i8
  %7557 = and i8 %7556, 1
  %7558 = xor i8 %7557, 1
  store i8 %7558, i8* %27, align 1
  %7559 = xor i32 %7550, %7549
  %7560 = lshr i32 %7559, 4
  %7561 = trunc i32 %7560 to i8
  %7562 = and i8 %7561, 1
  store i8 %7562, i8* %33, align 1
  %7563 = icmp eq i32 %7550, 0
  %7564 = zext i1 %7563 to i8
  store i8 %7564, i8* %36, align 1
  %7565 = lshr i32 %7550, 31
  %7566 = trunc i32 %7565 to i8
  store i8 %7566, i8* %39, align 1
  %7567 = lshr i32 %7549, 31
  %7568 = xor i32 %7565, %7567
  %7569 = add nuw nsw i32 %7568, %7565
  %7570 = icmp eq i32 %7569, 2
  %7571 = zext i1 %7570 to i8
  store i8 %7571, i8* %45, align 1
  %7572 = add i64 %7545, -632
  %7573 = add i64 %7544, 12
  store i64 %7573, i64* %3, align 8
  %7574 = inttoptr i64 %7572 to i32*
  store i32 %7550, i32* %7574, align 4
  %7575 = load i64, i64* %3, align 8
  %7576 = add i64 %7575, 17
  store i64 %7576, i64* %3, align 8
  br label %block_.L_42f054

block_.L_42f048:                                  ; preds = %block_.L_42efd4
  %7577 = add i64 %7545, -24
  %7578 = add i64 %7544, 3
  store i64 %7578, i64* %3, align 8
  %7579 = inttoptr i64 %7577 to i32*
  %7580 = load i32, i32* %7579, align 4
  %7581 = add i32 %7580, 2
  %7582 = zext i32 %7581 to i64
  store i64 %7582, i64* %RAX.i1585, align 8
  %7583 = icmp ugt i32 %7580, -3
  %7584 = zext i1 %7583 to i8
  store i8 %7584, i8* %20, align 1
  %7585 = and i32 %7581, 255
  %7586 = tail call i32 @llvm.ctpop.i32(i32 %7585)
  %7587 = trunc i32 %7586 to i8
  %7588 = and i8 %7587, 1
  %7589 = xor i8 %7588, 1
  store i8 %7589, i8* %27, align 1
  %7590 = xor i32 %7581, %7580
  %7591 = lshr i32 %7590, 4
  %7592 = trunc i32 %7591 to i8
  %7593 = and i8 %7592, 1
  store i8 %7593, i8* %33, align 1
  %7594 = icmp eq i32 %7581, 0
  %7595 = zext i1 %7594 to i8
  store i8 %7595, i8* %36, align 1
  %7596 = lshr i32 %7581, 31
  %7597 = trunc i32 %7596 to i8
  store i8 %7597, i8* %39, align 1
  %7598 = lshr i32 %7580, 31
  %7599 = xor i32 %7596, %7598
  %7600 = add nuw nsw i32 %7599, %7596
  %7601 = icmp eq i32 %7600, 2
  %7602 = zext i1 %7601 to i8
  store i8 %7602, i8* %45, align 1
  %7603 = add i64 %7545, -632
  %7604 = add i64 %7544, 12
  store i64 %7604, i64* %3, align 8
  %7605 = inttoptr i64 %7603 to i32*
  store i32 %7581, i32* %7605, align 4
  %.pre238 = load i64, i64* %3, align 8
  br label %block_.L_42f054

block_.L_42f054:                                  ; preds = %block_.L_42f048, %block_42f037
  %7606 = phi i64 [ %.pre238, %block_.L_42f048 ], [ %7576, %block_42f037 ]
  %7607 = load i64, i64* %RBP.i, align 8
  %7608 = add i64 %7607, -632
  %7609 = add i64 %7606, 6
  store i64 %7609, i64* %3, align 8
  %7610 = inttoptr i64 %7608 to i32*
  %7611 = load i32, i32* %7610, align 4
  %7612 = add i32 %7611, -16
  %7613 = zext i32 %7612 to i64
  store i64 %7613, i64* %RAX.i1585, align 8
  %7614 = icmp ult i32 %7611, 16
  %7615 = zext i1 %7614 to i8
  store i8 %7615, i8* %20, align 1
  %7616 = and i32 %7612, 255
  %7617 = tail call i32 @llvm.ctpop.i32(i32 %7616)
  %7618 = trunc i32 %7617 to i8
  %7619 = and i8 %7618, 1
  %7620 = xor i8 %7619, 1
  store i8 %7620, i8* %27, align 1
  %7621 = xor i32 %7611, 16
  %7622 = xor i32 %7621, %7612
  %7623 = lshr i32 %7622, 4
  %7624 = trunc i32 %7623 to i8
  %7625 = and i8 %7624, 1
  store i8 %7625, i8* %33, align 1
  %7626 = icmp eq i32 %7612, 0
  %7627 = zext i1 %7626 to i8
  store i8 %7627, i8* %36, align 1
  %7628 = lshr i32 %7612, 31
  %7629 = trunc i32 %7628 to i8
  store i8 %7629, i8* %39, align 1
  %7630 = lshr i32 %7611, 31
  %7631 = xor i32 %7628, %7630
  %7632 = add nuw nsw i32 %7631, %7630
  %7633 = icmp eq i32 %7632, 2
  %7634 = zext i1 %7633 to i8
  store i8 %7634, i8* %45, align 1
  %7635 = add i64 %7607, -80
  %7636 = add i64 %7606, 12
  store i64 %7636, i64* %3, align 8
  %7637 = inttoptr i64 %7635 to i32*
  %7638 = load i32, i32* %7637, align 4
  %7639 = zext i32 %7638 to i64
  store i64 %7639, i64* %RCX.i3128, align 8
  %7640 = add i64 %7607, -76
  %7641 = add i64 %7606, 16
  store i64 %7641, i64* %3, align 8
  %7642 = inttoptr i64 %7640 to i32*
  %7643 = load i32, i32* %7642, align 4
  %7644 = zext i32 %7643 to i64
  store i64 %7644, i64* %600, align 8
  %7645 = add i64 %7607, -624
  %7646 = add i64 %7606, 23
  store i64 %7646, i64* %3, align 8
  %7647 = inttoptr i64 %7645 to i64*
  %7648 = load i64, i64* %7647, align 8
  store i64 %7648, i64* %RDI.i605, align 8
  %7649 = add i64 %7607, -628
  %7650 = add i64 %7606, 29
  store i64 %7650, i64* %3, align 8
  %7651 = inttoptr i64 %7649 to i32*
  %7652 = load i32, i32* %7651, align 4
  %7653 = zext i32 %7652 to i64
  store i64 %7653, i64* %RSI.i5212, align 8
  store i64 %7613, i64* %RDX.i5152, align 8
  %7654 = add i64 %7606, 456892
  %7655 = add i64 %7606, 36
  %7656 = load i64, i64* %6, align 8
  %7657 = add i64 %7656, -8
  %7658 = inttoptr i64 %7657 to i64*
  store i64 %7655, i64* %7658, align 8
  store i64 %7657, i64* %6, align 8
  store i64 %7654, i64* %3, align 8
  %call2_42f073 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %7654, %struct.Memory* %call2_42effb)
  %7659 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %7660 = load i16, i16* %AX.i3315, align 2
  %7661 = zext i16 %7660 to i64
  store i64 %7661, i64* %RDX.i5152, align 8
  %7662 = load i64, i64* %RBP.i, align 8
  %7663 = add i64 %7662, -612
  %7664 = add i64 %7659, 14
  store i64 %7664, i64* %3, align 8
  %7665 = inttoptr i64 %7663 to i32*
  %7666 = load i32, i32* %7665, align 4
  %7667 = zext i16 %7660 to i32
  %7668 = add i32 %7667, %7666
  %7669 = lshr i32 %7668, 31
  %7670 = add i32 %7668, 1
  %7671 = zext i32 %7670 to i64
  store i64 %7671, i64* %RSI.i5212, align 8
  %7672 = icmp eq i32 %7668, -1
  %7673 = icmp eq i32 %7670, 0
  %7674 = or i1 %7672, %7673
  %7675 = zext i1 %7674 to i8
  store i8 %7675, i8* %20, align 1
  %7676 = and i32 %7670, 255
  %7677 = tail call i32 @llvm.ctpop.i32(i32 %7676)
  %7678 = trunc i32 %7677 to i8
  %7679 = and i8 %7678, 1
  %7680 = xor i8 %7679, 1
  store i8 %7680, i8* %27, align 1
  %7681 = xor i32 %7670, %7668
  %7682 = lshr i32 %7681, 4
  %7683 = trunc i32 %7682 to i8
  %7684 = and i8 %7683, 1
  store i8 %7684, i8* %33, align 1
  %7685 = zext i1 %7673 to i8
  store i8 %7685, i8* %36, align 1
  %7686 = lshr i32 %7670, 31
  %7687 = trunc i32 %7686 to i8
  store i8 %7687, i8* %39, align 1
  %7688 = xor i32 %7686, %7669
  %7689 = add nuw nsw i32 %7688, %7686
  %7690 = icmp eq i32 %7689, 2
  %7691 = zext i1 %7690 to i8
  store i8 %7691, i8* %45, align 1
  store i64 %7671, i64* %RAX.i1585, align 8
  %7692 = sext i32 %7670 to i64
  %7693 = lshr i64 %7692, 32
  store i64 %7693, i64* %3718, align 8
  %7694 = add i64 %7659, 24
  store i64 %7694, i64* %3, align 8
  %7695 = shl nuw i64 %7693, 32
  %7696 = or i64 %7695, %7671
  %7697 = sdiv i64 %7696, 2
  %7698 = shl i64 %7697, 32
  %7699 = ashr exact i64 %7698, 32
  %7700 = icmp eq i64 %7697, %7699
  br i1 %7700, label %7703, label %7701

; <label>:7701:                                   ; preds = %block_.L_42f054
  %7702 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7694, %struct.Memory* %call2_42f073)
  %.pre239 = load i64, i64* %RBP.i, align 8
  %.pre240 = load i32, i32* %EAX.i1609, align 4
  %.pre241 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2419

; <label>:7703:                                   ; preds = %block_.L_42f054
  %7704 = srem i64 %7696, 2
  %7705 = and i64 %7697, 4294967295
  store i64 %7705, i64* %RAX.i1585, align 8
  %7706 = and i64 %7704, 4294967295
  store i64 %7706, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7707 = trunc i64 %7697 to i32
  br label %routine_idivl__ecx.exit2419

routine_idivl__ecx.exit2419:                      ; preds = %7703, %7701
  %7708 = phi i64 [ %.pre241, %7701 ], [ %7694, %7703 ]
  %7709 = phi i32 [ %.pre240, %7701 ], [ %7707, %7703 ]
  %7710 = phi i64 [ %.pre239, %7701 ], [ %7662, %7703 ]
  %7711 = phi %struct.Memory* [ %7702, %7701 ], [ %call2_42f073, %7703 ]
  %7712 = add i64 %7710, -604
  %7713 = add i64 %7708, 6
  store i64 %7713, i64* %3, align 8
  %7714 = inttoptr i64 %7712 to i32*
  store i32 %7709, i32* %7714, align 4
  %.pre242 = load i64, i64* %3, align 8
  br label %block_.L_42f096

block_.L_42f096:                                  ; preds = %routine_idivl__ecx.exit2419, %block_42efbb
  %7715 = phi i64 [ %.pre242, %routine_idivl__ecx.exit2419 ], [ %7344, %block_42efbb ]
  %MEMORY.51 = phi %struct.Memory* [ %7711, %routine_idivl__ecx.exit2419 ], [ %7301, %block_42efbb ]
  %7716 = load i64, i64* %RBP.i, align 8
  %7717 = add i64 %7716, -604
  %7718 = add i64 %7715, 6
  store i64 %7718, i64* %3, align 8
  %7719 = inttoptr i64 %7717 to i32*
  %7720 = load i32, i32* %7719, align 4
  %7721 = zext i32 %7720 to i64
  store i64 %7721, i64* %RAX.i1585, align 8
  %7722 = add i64 %7716, -572
  %7723 = add i64 %7715, 12
  store i64 %7723, i64* %3, align 8
  %7724 = inttoptr i64 %7722 to i32*
  store i32 %7720, i32* %7724, align 4
  %.pre243 = load i64, i64* %3, align 8
  br label %block_.L_42f0a2

block_.L_42f0a2:                                  ; preds = %block_.L_42f096, %block_42eecb
  %7725 = phi i64 [ %.pre243, %block_.L_42f096 ], [ %6919, %block_42eecb ]
  %MEMORY.52 = phi %struct.Memory* [ %MEMORY.51, %block_.L_42f096 ], [ %MEMORY.48, %block_42eecb ]
  %7726 = load i64, i64* %RBP.i, align 8
  %7727 = add i64 %7726, -572
  %7728 = add i64 %7725, 6
  store i64 %7728, i64* %3, align 8
  %7729 = inttoptr i64 %7727 to i32*
  %7730 = load i32, i32* %7729, align 4
  %7731 = zext i32 %7730 to i64
  store i64 %7731, i64* %RAX.i1585, align 8
  %7732 = trunc i32 %7730 to i16
  store i16 %7732, i16* %CX.i3316, align 2
  %7733 = add i64 %7726, -504
  %7734 = add i64 %7725, 16
  store i64 %7734, i64* %3, align 8
  %7735 = inttoptr i64 %7733 to i64*
  %7736 = load i64, i64* %7735, align 8
  store i64 %7736, i64* %RDI.i605, align 8
  %7737 = add i64 %7726, -516
  %7738 = add i64 %7725, 22
  store i64 %7738, i64* %3, align 8
  %7739 = inttoptr i64 %7737 to i32*
  %7740 = load i32, i32* %7739, align 4
  %7741 = zext i32 %7740 to i64
  store i64 %7741, i64* %RSI.i5212, align 8
  %7742 = add i64 %7726, -512
  %7743 = add i64 %7725, 28
  store i64 %7743, i64* %3, align 8
  %7744 = inttoptr i64 %7742 to i32*
  %7745 = load i32, i32* %7744, align 4
  %7746 = zext i32 %7745 to i64
  store i64 %7746, i64* %RDX.i5152, align 8
  %.mask313 = and i32 %7730, 65535
  %7747 = zext i32 %.mask313 to i64
  store i64 %7747, i64* %RCX.i3128, align 8
  %7748 = add i64 %7725, 454862
  %7749 = add i64 %7725, 36
  %7750 = load i64, i64* %6, align 8
  %7751 = add i64 %7750, -8
  %7752 = inttoptr i64 %7751 to i64*
  store i64 %7749, i64* %7752, align 8
  store i64 %7751, i64* %6, align 8
  store i64 %7748, i64* %3, align 8
  %call2_42f0c1 = tail call %struct.Memory* @sub_49e170.PutPel_14(%struct.State* nonnull %0, i64 %7748, %struct.Memory* %MEMORY.52)
  %7753 = load i64, i64* %RBP.i, align 8
  %7754 = add i64 %7753, -24
  %7755 = load i64, i64* %3, align 8
  %7756 = add i64 %7755, 3
  store i64 %7756, i64* %3, align 8
  %7757 = inttoptr i64 %7754 to i32*
  %7758 = load i32, i32* %7757, align 4
  %7759 = add i32 %7758, 2
  %7760 = zext i32 %7759 to i64
  store i64 %7760, i64* %RAX.i1585, align 8
  %7761 = icmp ugt i32 %7758, -3
  %7762 = zext i1 %7761 to i8
  store i8 %7762, i8* %20, align 1
  %7763 = and i32 %7759, 255
  %7764 = tail call i32 @llvm.ctpop.i32(i32 %7763)
  %7765 = trunc i32 %7764 to i8
  %7766 = and i8 %7765, 1
  %7767 = xor i8 %7766, 1
  store i8 %7767, i8* %27, align 1
  %7768 = xor i32 %7759, %7758
  %7769 = lshr i32 %7768, 4
  %7770 = trunc i32 %7769 to i8
  %7771 = and i8 %7770, 1
  store i8 %7771, i8* %33, align 1
  %7772 = icmp eq i32 %7759, 0
  %7773 = zext i1 %7772 to i8
  store i8 %7773, i8* %36, align 1
  %7774 = lshr i32 %7759, 31
  %7775 = trunc i32 %7774 to i8
  store i8 %7775, i8* %39, align 1
  %7776 = lshr i32 %7758, 31
  %7777 = xor i32 %7774, %7776
  %7778 = add nuw nsw i32 %7777, %7774
  %7779 = icmp eq i32 %7778, 2
  %7780 = zext i1 %7779 to i8
  store i8 %7780, i8* %45, align 1
  %7781 = add i64 %7755, 9
  store i64 %7781, i64* %3, align 8
  store i32 %7759, i32* %7757, align 4
  %7782 = load i64, i64* %3, align 8
  %7783 = add i64 %7782, -1032
  store i64 %7783, i64* %3, align 8
  br label %block_.L_42ecc7

block_.L_42f0d4:                                  ; preds = %block_.L_42ecc7
  %7784 = add i64 %5981, -28
  %7785 = add i64 %6019, 8
  store i64 %7785, i64* %3, align 8
  %7786 = inttoptr i64 %7784 to i32*
  %7787 = load i32, i32* %7786, align 4
  %7788 = add i32 %7787, 2
  %7789 = zext i32 %7788 to i64
  store i64 %7789, i64* %RAX.i1585, align 8
  %7790 = icmp ugt i32 %7787, -3
  %7791 = zext i1 %7790 to i8
  store i8 %7791, i8* %20, align 1
  %7792 = and i32 %7788, 255
  %7793 = tail call i32 @llvm.ctpop.i32(i32 %7792)
  %7794 = trunc i32 %7793 to i8
  %7795 = and i8 %7794, 1
  %7796 = xor i8 %7795, 1
  store i8 %7796, i8* %27, align 1
  %7797 = xor i32 %7788, %7787
  %7798 = lshr i32 %7797, 4
  %7799 = trunc i32 %7798 to i8
  %7800 = and i8 %7799, 1
  store i8 %7800, i8* %33, align 1
  %7801 = icmp eq i32 %7788, 0
  %7802 = zext i1 %7801 to i8
  store i8 %7802, i8* %36, align 1
  %7803 = lshr i32 %7788, 31
  %7804 = trunc i32 %7803 to i8
  store i8 %7804, i8* %39, align 1
  %7805 = lshr i32 %7787, 31
  %7806 = xor i32 %7803, %7805
  %7807 = add nuw nsw i32 %7806, %7803
  %7808 = icmp eq i32 %7807, 2
  %7809 = zext i1 %7808 to i8
  store i8 %7809, i8* %45, align 1
  %7810 = add i64 %6019, 14
  store i64 %7810, i64* %3, align 8
  store i32 %7788, i32* %7786, align 4
  %7811 = load i64, i64* %3, align 8
  %7812 = add i64 %7811, -1075
  store i64 %7812, i64* %3, align 8
  br label %block_.L_42ecaf

block_.L_42f0ee:                                  ; preds = %block_.L_42f0ee.preheader, %block_.L_42ff84
  %7813 = phi i64 [ %14509, %block_.L_42ff84 ], [ %.pre224, %block_.L_42f0ee.preheader ]
  %MEMORY.53 = phi %struct.Memory* [ %MEMORY.54, %block_.L_42ff84 ], [ %MEMORY.44, %block_.L_42f0ee.preheader ]
  %7814 = load i64, i64* %RBP.i, align 8
  %7815 = add i64 %7814, -24
  %7816 = add i64 %7813, 3
  store i64 %7816, i64* %3, align 8
  %7817 = inttoptr i64 %7815 to i32*
  %7818 = load i32, i32* %7817, align 4
  %7819 = zext i32 %7818 to i64
  store i64 %7819, i64* %RAX.i1585, align 8
  %7820 = add i64 %7814, -36
  %7821 = add i64 %7813, 6
  store i64 %7821, i64* %3, align 8
  %7822 = inttoptr i64 %7820 to i32*
  %7823 = load i32, i32* %7822, align 4
  %7824 = add i32 %7823, 4
  %7825 = zext i32 %7824 to i64
  store i64 %7825, i64* %RCX.i3128, align 8
  %7826 = lshr i32 %7824, 31
  %7827 = sub i32 %7818, %7824
  %7828 = icmp ult i32 %7818, %7824
  %7829 = zext i1 %7828 to i8
  store i8 %7829, i8* %20, align 1
  %7830 = and i32 %7827, 255
  %7831 = tail call i32 @llvm.ctpop.i32(i32 %7830)
  %7832 = trunc i32 %7831 to i8
  %7833 = and i8 %7832, 1
  %7834 = xor i8 %7833, 1
  store i8 %7834, i8* %27, align 1
  %7835 = xor i32 %7824, %7818
  %7836 = xor i32 %7835, %7827
  %7837 = lshr i32 %7836, 4
  %7838 = trunc i32 %7837 to i8
  %7839 = and i8 %7838, 1
  store i8 %7839, i8* %33, align 1
  %7840 = icmp eq i32 %7827, 0
  %7841 = zext i1 %7840 to i8
  store i8 %7841, i8* %36, align 1
  %7842 = lshr i32 %7827, 31
  %7843 = trunc i32 %7842 to i8
  store i8 %7843, i8* %39, align 1
  %7844 = lshr i32 %7818, 31
  %7845 = xor i32 %7826, %7844
  %7846 = xor i32 %7842, %7844
  %7847 = add nuw nsw i32 %7846, %7845
  %7848 = icmp eq i32 %7847, 2
  %7849 = zext i1 %7848 to i8
  store i8 %7849, i8* %45, align 1
  %7850 = icmp ne i8 %7843, 0
  %7851 = xor i1 %7850, %7848
  %.v324 = select i1 %7851, i64 17, i64 3753
  %7852 = add i64 %7813, %.v324
  store i64 %7852, i64* %3, align 8
  br i1 %7851, label %block_42f0ff, label %block_.L_42ff97

block_42f0ff:                                     ; preds = %block_.L_42f0ee
  %7853 = add i64 %7814, -28
  %7854 = add i64 %7852, 7
  store i64 %7854, i64* %3, align 8
  %7855 = inttoptr i64 %7853 to i32*
  store i32 0, i32* %7855, align 4
  %.pre147 = load i64, i64* %3, align 8
  br label %block_.L_42f106

block_.L_42f106:                                  ; preds = %block_.L_42ff71, %block_42f0ff
  %7856 = phi i64 [ %.pre147, %block_42f0ff ], [ %14479, %block_.L_42ff71 ]
  %MEMORY.54 = phi %struct.Memory* [ %MEMORY.53, %block_42f0ff ], [ %MEMORY.88, %block_.L_42ff71 ]
  %7857 = load i64, i64* %RBP.i, align 8
  %7858 = add i64 %7857, -28
  %7859 = add i64 %7856, 3
  store i64 %7859, i64* %3, align 8
  %7860 = inttoptr i64 %7858 to i32*
  %7861 = load i32, i32* %7860, align 4
  %7862 = zext i32 %7861 to i64
  store i64 %7862, i64* %RAX.i1585, align 8
  %7863 = add i64 %7857, -40
  %7864 = add i64 %7856, 6
  store i64 %7864, i64* %3, align 8
  %7865 = inttoptr i64 %7863 to i32*
  %7866 = load i32, i32* %7865, align 4
  %7867 = add i32 %7866, 3
  %7868 = zext i32 %7867 to i64
  store i64 %7868, i64* %RCX.i3128, align 8
  %7869 = lshr i32 %7867, 31
  %7870 = sub i32 %7861, %7867
  %7871 = icmp ult i32 %7861, %7867
  %7872 = zext i1 %7871 to i8
  store i8 %7872, i8* %20, align 1
  %7873 = and i32 %7870, 255
  %7874 = tail call i32 @llvm.ctpop.i32(i32 %7873)
  %7875 = trunc i32 %7874 to i8
  %7876 = and i8 %7875, 1
  %7877 = xor i8 %7876, 1
  store i8 %7877, i8* %27, align 1
  %7878 = xor i32 %7867, %7861
  %7879 = xor i32 %7878, %7870
  %7880 = lshr i32 %7879, 4
  %7881 = trunc i32 %7880 to i8
  %7882 = and i8 %7881, 1
  store i8 %7882, i8* %33, align 1
  %7883 = icmp eq i32 %7870, 0
  %7884 = zext i1 %7883 to i8
  store i8 %7884, i8* %36, align 1
  %7885 = lshr i32 %7870, 31
  %7886 = trunc i32 %7885 to i8
  store i8 %7886, i8* %39, align 1
  %7887 = lshr i32 %7861, 31
  %7888 = xor i32 %7869, %7887
  %7889 = xor i32 %7885, %7887
  %7890 = add nuw nsw i32 %7889, %7888
  %7891 = icmp eq i32 %7890, 2
  %7892 = zext i1 %7891 to i8
  store i8 %7892, i8* %45, align 1
  %7893 = icmp ne i8 %7886, 0
  %7894 = xor i1 %7893, %7891
  %.v325 = select i1 %7894, i64 17, i64 3710
  %7895 = add i64 %7856, %.v325
  %7896 = add i64 %7895, 5
  store i64 %7896, i64* %3, align 8
  br i1 %7894, label %block_42f117, label %block_.L_42ff84

block_42f117:                                     ; preds = %block_.L_42f106
  store i64 2, i64* %RAX.i1585, align 8
  %7897 = add i64 %7857, -24
  %7898 = add i64 %7895, 8
  store i64 %7898, i64* %3, align 8
  %7899 = inttoptr i64 %7897 to i32*
  %7900 = load i32, i32* %7899, align 4
  %7901 = zext i32 %7900 to i64
  store i64 %7901, i64* %RCX.i3128, align 8
  %7902 = add i64 %7857, -636
  %7903 = add i64 %7895, 14
  store i64 %7903, i64* %3, align 8
  %7904 = inttoptr i64 %7902 to i32*
  store i32 2, i32* %7904, align 4
  %7905 = load i32, i32* %ECX.i3256, align 4
  %7906 = zext i32 %7905 to i64
  %7907 = load i64, i64* %3, align 8
  store i64 %7906, i64* %RAX.i1585, align 8
  %7908 = sext i32 %7905 to i64
  %7909 = lshr i64 %7908, 32
  store i64 %7909, i64* %3718, align 8
  %7910 = load i64, i64* %RBP.i, align 8
  %7911 = add i64 %7910, -636
  %7912 = add i64 %7907, 9
  store i64 %7912, i64* %3, align 8
  %7913 = inttoptr i64 %7911 to i32*
  %7914 = load i32, i32* %7913, align 4
  %7915 = zext i32 %7914 to i64
  store i64 %7915, i64* %RCX.i3128, align 8
  %7916 = add i64 %7907, 11
  store i64 %7916, i64* %3, align 8
  %7917 = sext i32 %7914 to i64
  %7918 = shl nuw i64 %7909, 32
  %7919 = or i64 %7918, %7906
  %7920 = sdiv i64 %7919, %7917
  %7921 = shl i64 %7920, 32
  %7922 = ashr exact i64 %7921, 32
  %7923 = icmp eq i64 %7920, %7922
  br i1 %7923, label %7926, label %7924

; <label>:7924:                                   ; preds = %block_42f117
  %7925 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7916, %struct.Memory* %MEMORY.54)
  %.pre148 = load i32, i32* %EDX.i5198, align 4
  %.pre149 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2323

; <label>:7926:                                   ; preds = %block_42f117
  %7927 = srem i64 %7919, %7917
  %7928 = and i64 %7920, 4294967295
  store i64 %7928, i64* %RAX.i1585, align 8
  %7929 = and i64 %7927, 4294967295
  store i64 %7929, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7930 = trunc i64 %7927 to i32
  br label %routine_idivl__ecx.exit2323

routine_idivl__ecx.exit2323:                      ; preds = %7926, %7924
  %7931 = phi i64 [ %.pre149, %7924 ], [ %7916, %7926 ]
  %7932 = phi i32 [ %.pre148, %7924 ], [ %7930, %7926 ]
  %7933 = phi %struct.Memory* [ %7925, %7924 ], [ %MEMORY.54, %7926 ]
  store i8 0, i8* %20, align 1
  %7934 = and i32 %7932, 255
  %7935 = tail call i32 @llvm.ctpop.i32(i32 %7934)
  %7936 = trunc i32 %7935 to i8
  %7937 = and i8 %7936, 1
  %7938 = xor i8 %7937, 1
  store i8 %7938, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %7939 = icmp eq i32 %7932, 0
  %7940 = zext i1 %7939 to i8
  store i8 %7940, i8* %36, align 1
  %7941 = lshr i32 %7932, 31
  %7942 = trunc i32 %7941 to i8
  store i8 %7942, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %.v326 = select i1 %7939, i64 9, i64 1016
  %7943 = add i64 %7931, %.v326
  store i64 %7943, i64* %3, align 8
  br i1 %7939, label %block_42f139, label %block_.L_42f528

block_42f139:                                     ; preds = %routine_idivl__ecx.exit2323
  %7944 = load i64, i64* %RBP.i, align 8
  %7945 = add i64 %7944, -56
  %7946 = add i64 %7943, 4
  store i64 %7946, i64* %3, align 8
  %7947 = inttoptr i64 %7945 to i64*
  %7948 = load i64, i64* %7947, align 8
  store i64 %7948, i64* %RDI.i605, align 8
  %7949 = add i64 %7944, -28
  %7950 = add i64 %7943, 7
  store i64 %7950, i64* %3, align 8
  %7951 = inttoptr i64 %7949 to i32*
  %7952 = load i32, i32* %7951, align 4
  %7953 = add i32 %7952, -16
  %7954 = lshr i32 %7953, 31
  %7955 = add i32 %7952, -15
  %7956 = zext i32 %7955 to i64
  store i64 %7956, i64* %RAX.i1585, align 8
  %7957 = icmp eq i32 %7953, -1
  %7958 = icmp eq i32 %7955, 0
  %7959 = or i1 %7957, %7958
  %7960 = zext i1 %7959 to i8
  store i8 %7960, i8* %20, align 1
  %7961 = and i32 %7955, 255
  %7962 = tail call i32 @llvm.ctpop.i32(i32 %7961)
  %7963 = trunc i32 %7962 to i8
  %7964 = and i8 %7963, 1
  %7965 = xor i8 %7964, 1
  store i8 %7965, i8* %27, align 1
  %7966 = xor i32 %7955, %7953
  %7967 = lshr i32 %7966, 4
  %7968 = trunc i32 %7967 to i8
  %7969 = and i8 %7968, 1
  store i8 %7969, i8* %33, align 1
  %7970 = zext i1 %7958 to i8
  store i8 %7970, i8* %36, align 1
  %7971 = lshr i32 %7955, 31
  %7972 = trunc i32 %7971 to i8
  store i8 %7972, i8* %39, align 1
  %7973 = xor i32 %7971, %7954
  %7974 = add nuw nsw i32 %7973, %7971
  %7975 = icmp eq i32 %7974, 2
  %7976 = zext i1 %7975 to i8
  store i8 %7976, i8* %45, align 1
  %7977 = add i64 %7944, -24
  %7978 = add i64 %7943, 16
  store i64 %7978, i64* %3, align 8
  %7979 = inttoptr i64 %7977 to i32*
  %7980 = load i32, i32* %7979, align 4
  %7981 = add i32 %7980, -16
  %7982 = zext i32 %7981 to i64
  store i64 %7982, i64* %RCX.i3128, align 8
  %7983 = icmp ult i32 %7980, 16
  %7984 = zext i1 %7983 to i8
  store i8 %7984, i8* %20, align 1
  %7985 = and i32 %7981, 255
  %7986 = tail call i32 @llvm.ctpop.i32(i32 %7985)
  %7987 = trunc i32 %7986 to i8
  %7988 = and i8 %7987, 1
  %7989 = xor i8 %7988, 1
  store i8 %7989, i8* %27, align 1
  %7990 = xor i32 %7980, 16
  %7991 = xor i32 %7990, %7981
  %7992 = lshr i32 %7991, 4
  %7993 = trunc i32 %7992 to i8
  %7994 = and i8 %7993, 1
  store i8 %7994, i8* %33, align 1
  %7995 = icmp eq i32 %7981, 0
  %7996 = zext i1 %7995 to i8
  store i8 %7996, i8* %36, align 1
  %7997 = lshr i32 %7981, 31
  %7998 = trunc i32 %7997 to i8
  store i8 %7998, i8* %39, align 1
  %7999 = lshr i32 %7980, 31
  %8000 = xor i32 %7997, %7999
  %8001 = add nuw nsw i32 %8000, %7999
  %8002 = icmp eq i32 %8001, 2
  %8003 = zext i1 %8002 to i8
  store i8 %8003, i8* %45, align 1
  %8004 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8004, i64* %RDX.i5152, align 8
  %8005 = add i64 %8004, 72684
  %8006 = add i64 %7943, 33
  store i64 %8006, i64* %3, align 8
  %8007 = inttoptr i64 %8005 to i32*
  %8008 = load i32, i32* %8007, align 4
  %8009 = zext i32 %8008 to i64
  store i64 %8009, i64* %RSI.i5212, align 8
  %8010 = load i64, i64* %RBP.i, align 8
  %8011 = add i64 %8010, -56
  %8012 = add i64 %7943, 37
  store i64 %8012, i64* %3, align 8
  %8013 = inttoptr i64 %8011 to i64*
  %8014 = load i64, i64* %8013, align 8
  store i64 %8014, i64* %RDX.i5152, align 8
  %8015 = add i64 %8010, -28
  %8016 = add i64 %7943, 41
  store i64 %8016, i64* %3, align 8
  %8017 = inttoptr i64 %8015 to i32*
  %8018 = load i32, i32* %8017, align 4
  %8019 = add i32 %8018, -16
  %8020 = zext i32 %8019 to i64
  store i64 %8020, i64* %600, align 8
  %8021 = icmp ult i32 %8018, 16
  %8022 = zext i1 %8021 to i8
  store i8 %8022, i8* %20, align 1
  %8023 = and i32 %8019, 255
  %8024 = tail call i32 @llvm.ctpop.i32(i32 %8023)
  %8025 = trunc i32 %8024 to i8
  %8026 = and i8 %8025, 1
  %8027 = xor i8 %8026, 1
  store i8 %8027, i8* %27, align 1
  %8028 = xor i32 %8018, 16
  %8029 = xor i32 %8028, %8019
  %8030 = lshr i32 %8029, 4
  %8031 = trunc i32 %8030 to i8
  %8032 = and i8 %8031, 1
  store i8 %8032, i8* %33, align 1
  %8033 = icmp eq i32 %8019, 0
  %8034 = zext i1 %8033 to i8
  store i8 %8034, i8* %36, align 1
  %8035 = lshr i32 %8019, 31
  %8036 = trunc i32 %8035 to i8
  store i8 %8036, i8* %39, align 1
  %8037 = lshr i32 %8018, 31
  %8038 = xor i32 %8035, %8037
  %8039 = add nuw nsw i32 %8038, %8037
  %8040 = icmp eq i32 %8039, 2
  %8041 = zext i1 %8040 to i8
  store i8 %8041, i8* %45, align 1
  %8042 = add i64 %8010, -24
  %8043 = add i64 %7943, 49
  store i64 %8043, i64* %3, align 8
  %8044 = inttoptr i64 %8042 to i32*
  %8045 = load i32, i32* %8044, align 4
  %8046 = add i32 %8045, -16
  %8047 = zext i32 %8046 to i64
  store i64 %8047, i64* %602, align 8
  %8048 = icmp ult i32 %8045, 16
  %8049 = zext i1 %8048 to i8
  store i8 %8049, i8* %20, align 1
  %8050 = and i32 %8046, 255
  %8051 = tail call i32 @llvm.ctpop.i32(i32 %8050)
  %8052 = trunc i32 %8051 to i8
  %8053 = and i8 %8052, 1
  %8054 = xor i8 %8053, 1
  store i8 %8054, i8* %27, align 1
  %8055 = xor i32 %8045, 16
  %8056 = xor i32 %8055, %8046
  %8057 = lshr i32 %8056, 4
  %8058 = trunc i32 %8057 to i8
  %8059 = and i8 %8058, 1
  store i8 %8059, i8* %33, align 1
  %8060 = icmp eq i32 %8046, 0
  %8061 = zext i1 %8060 to i8
  store i8 %8061, i8* %36, align 1
  %8062 = lshr i32 %8046, 31
  %8063 = trunc i32 %8062 to i8
  store i8 %8063, i8* %39, align 1
  %8064 = lshr i32 %8045, 31
  %8065 = xor i32 %8062, %8064
  %8066 = add nuw nsw i32 %8065, %8064
  %8067 = icmp eq i32 %8066, 2
  %8068 = zext i1 %8067 to i8
  store i8 %8068, i8* %45, align 1
  %8069 = add i64 %8010, -80
  %8070 = add i64 %7943, 57
  store i64 %8070, i64* %3, align 8
  %8071 = inttoptr i64 %8069 to i32*
  %8072 = load i32, i32* %8071, align 4
  %8073 = zext i32 %8072 to i64
  store i64 %8073, i64* %3720, align 8
  %8074 = add i64 %8010, -76
  %8075 = add i64 %7943, 61
  store i64 %8075, i64* %3, align 8
  %8076 = inttoptr i64 %8074 to i32*
  %8077 = load i32, i32* %8076, align 4
  %8078 = zext i32 %8077 to i64
  store i64 %8078, i64* %3722, align 8
  %8079 = load i64, i64* %RBP.i, align 8
  %8080 = add i64 %8079, -648
  %8081 = load i64, i64* %RDI.i605, align 8
  %8082 = add i64 %7943, 68
  store i64 %8082, i64* %3, align 8
  %8083 = inttoptr i64 %8080 to i64*
  store i64 %8081, i64* %8083, align 8
  %8084 = load i64, i64* %RDX.i5152, align 8
  %8085 = load i64, i64* %3, align 8
  store i64 %8084, i64* %RDI.i605, align 8
  %8086 = load i64, i64* %RBP.i, align 8
  %8087 = add i64 %8086, -652
  %8088 = load i32, i32* %ESI.i5201, align 4
  %8089 = add i64 %8085, 9
  store i64 %8089, i64* %3, align 8
  %8090 = inttoptr i64 %8087 to i32*
  store i32 %8088, i32* %8090, align 4
  %8091 = load i32, i32* %R8D.i4817, align 4
  %8092 = zext i32 %8091 to i64
  %8093 = load i64, i64* %3, align 8
  store i64 %8092, i64* %RSI.i5212, align 8
  %8094 = load i32, i32* %R9D.i4678, align 4
  %8095 = zext i32 %8094 to i64
  store i64 %8095, i64* %RDX.i5152, align 8
  %8096 = load i64, i64* %RBP.i, align 8
  %8097 = add i64 %8096, -656
  %8098 = load i32, i32* %ECX.i3256, align 4
  %8099 = add i64 %8093, 12
  store i64 %8099, i64* %3, align 8
  %8100 = inttoptr i64 %8097 to i32*
  store i32 %8098, i32* %8100, align 4
  %8101 = load i32, i32* %R10D.i3532, align 4
  %8102 = zext i32 %8101 to i64
  %8103 = load i64, i64* %3, align 8
  store i64 %8102, i64* %RCX.i3128, align 8
  %8104 = load i32, i32* %R11D.i3523, align 4
  %8105 = zext i32 %8104 to i64
  store i64 %8105, i64* %600, align 8
  %8106 = load i64, i64* %RBP.i, align 8
  %8107 = add i64 %8106, -660
  %8108 = load i32, i32* %EAX.i1609, align 4
  %8109 = add i64 %8103, 12
  store i64 %8109, i64* %3, align 8
  %8110 = inttoptr i64 %8107 to i32*
  store i32 %8108, i32* %8110, align 4
  %8111 = load i64, i64* %3, align 8
  %8112 = add i64 %8111, 456562
  %8113 = add i64 %8111, 5
  %8114 = load i64, i64* %6, align 8
  %8115 = add i64 %8114, -8
  %8116 = inttoptr i64 %8115 to i64*
  store i64 %8113, i64* %8116, align 8
  store i64 %8115, i64* %6, align 8
  store i64 %8112, i64* %3, align 8
  %call2_42f19e = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %8112, %struct.Memory* %7933)
  %8117 = load i16, i16* %AX.i3315, align 2
  %8118 = zext i16 %8117 to i64
  %8119 = load i64, i64* %3, align 8
  store i64 %8118, i64* %RCX.i3128, align 8
  %8120 = load i64, i64* %RBP.i, align 8
  %8121 = add i64 %8120, -56
  %8122 = add i64 %8119, 7
  store i64 %8122, i64* %3, align 8
  %8123 = inttoptr i64 %8121 to i64*
  %8124 = load i64, i64* %8123, align 8
  store i64 %8124, i64* %RDI.i605, align 8
  %8125 = add i64 %8120, -40
  %8126 = add i64 %8119, 10
  store i64 %8126, i64* %3, align 8
  %8127 = inttoptr i64 %8125 to i32*
  %8128 = load i32, i32* %8127, align 4
  %8129 = add i32 %8128, 2
  %8130 = zext i32 %8129 to i64
  store i64 %8130, i64* %RDX.i5152, align 8
  %8131 = icmp ugt i32 %8128, -3
  %8132 = zext i1 %8131 to i8
  store i8 %8132, i8* %20, align 1
  %8133 = and i32 %8129, 255
  %8134 = tail call i32 @llvm.ctpop.i32(i32 %8133)
  %8135 = trunc i32 %8134 to i8
  %8136 = and i8 %8135, 1
  %8137 = xor i8 %8136, 1
  store i8 %8137, i8* %27, align 1
  %8138 = xor i32 %8129, %8128
  %8139 = lshr i32 %8138, 4
  %8140 = trunc i32 %8139 to i8
  %8141 = and i8 %8140, 1
  store i8 %8141, i8* %33, align 1
  %8142 = icmp eq i32 %8129, 0
  %8143 = zext i1 %8142 to i8
  store i8 %8143, i8* %36, align 1
  %8144 = lshr i32 %8129, 31
  %8145 = trunc i32 %8144 to i8
  store i8 %8145, i8* %39, align 1
  %8146 = lshr i32 %8128, 31
  %8147 = xor i32 %8144, %8146
  %8148 = add nuw nsw i32 %8147, %8144
  %8149 = icmp eq i32 %8148, 2
  %8150 = zext i1 %8149 to i8
  store i8 %8150, i8* %45, align 1
  %8151 = add i64 %8120, -28
  %8152 = add i64 %8119, 16
  store i64 %8152, i64* %3, align 8
  %8153 = inttoptr i64 %8151 to i32*
  %8154 = load i32, i32* %8153, align 4
  %8155 = add i32 %8154, 2
  %8156 = zext i32 %8155 to i64
  store i64 %8156, i64* %RSI.i5212, align 8
  %8157 = lshr i32 %8155, 31
  %8158 = sub i32 %8129, %8155
  %8159 = icmp ult i32 %8129, %8155
  %8160 = zext i1 %8159 to i8
  store i8 %8160, i8* %20, align 1
  %8161 = and i32 %8158, 255
  %8162 = tail call i32 @llvm.ctpop.i32(i32 %8161)
  %8163 = trunc i32 %8162 to i8
  %8164 = and i8 %8163, 1
  %8165 = xor i8 %8164, 1
  store i8 %8165, i8* %27, align 1
  %8166 = xor i32 %8155, %8129
  %8167 = xor i32 %8166, %8158
  %8168 = lshr i32 %8167, 4
  %8169 = trunc i32 %8168 to i8
  %8170 = and i8 %8169, 1
  store i8 %8170, i8* %33, align 1
  %8171 = icmp eq i32 %8158, 0
  %8172 = zext i1 %8171 to i8
  store i8 %8172, i8* %36, align 1
  %8173 = lshr i32 %8158, 31
  %8174 = trunc i32 %8173 to i8
  store i8 %8174, i8* %39, align 1
  %8175 = xor i32 %8157, %8144
  %8176 = xor i32 %8173, %8144
  %8177 = add nuw nsw i32 %8176, %8175
  %8178 = icmp eq i32 %8177, 2
  %8179 = zext i1 %8178 to i8
  store i8 %8179, i8* %45, align 1
  %8180 = load i64, i64* %RBP.i, align 8
  %8181 = add i64 %8180, -664
  %8182 = load i32, i32* %ECX.i3256, align 4
  %8183 = add i64 %8119, 27
  store i64 %8183, i64* %3, align 8
  %8184 = inttoptr i64 %8181 to i32*
  store i32 %8182, i32* %8184, align 4
  %8185 = load i64, i64* %RBP.i, align 8
  %8186 = add i64 %8185, -672
  %8187 = load i64, i64* %RDI.i605, align 8
  %8188 = load i64, i64* %3, align 8
  %8189 = add i64 %8188, 7
  store i64 %8189, i64* %3, align 8
  %8190 = inttoptr i64 %8186 to i64*
  store i64 %8187, i64* %8190, align 8
  %8191 = load i64, i64* %3, align 8
  %8192 = load i8, i8* %39, align 1
  %8193 = icmp ne i8 %8192, 0
  %8194 = load i8, i8* %45, align 1
  %8195 = icmp ne i8 %8194, 0
  %8196 = xor i1 %8193, %8195
  %.v393 = select i1 %8196, i64 6, i64 23
  %8197 = add i64 %8191, %.v393
  store i64 %8197, i64* %3, align 8
  %8198 = load i64, i64* %RBP.i, align 8
  br i1 %8196, label %block_42f1cb, label %block_.L_42f1dc

block_42f1cb:                                     ; preds = %block_42f139
  %8199 = add i64 %8198, -40
  %8200 = add i64 %8197, 3
  store i64 %8200, i64* %3, align 8
  %8201 = inttoptr i64 %8199 to i32*
  %8202 = load i32, i32* %8201, align 4
  %8203 = add i32 %8202, 2
  %8204 = zext i32 %8203 to i64
  store i64 %8204, i64* %RAX.i1585, align 8
  %8205 = icmp ugt i32 %8202, -3
  %8206 = zext i1 %8205 to i8
  store i8 %8206, i8* %20, align 1
  %8207 = and i32 %8203, 255
  %8208 = tail call i32 @llvm.ctpop.i32(i32 %8207)
  %8209 = trunc i32 %8208 to i8
  %8210 = and i8 %8209, 1
  %8211 = xor i8 %8210, 1
  store i8 %8211, i8* %27, align 1
  %8212 = xor i32 %8203, %8202
  %8213 = lshr i32 %8212, 4
  %8214 = trunc i32 %8213 to i8
  %8215 = and i8 %8214, 1
  store i8 %8215, i8* %33, align 1
  %8216 = icmp eq i32 %8203, 0
  %8217 = zext i1 %8216 to i8
  store i8 %8217, i8* %36, align 1
  %8218 = lshr i32 %8203, 31
  %8219 = trunc i32 %8218 to i8
  store i8 %8219, i8* %39, align 1
  %8220 = lshr i32 %8202, 31
  %8221 = xor i32 %8218, %8220
  %8222 = add nuw nsw i32 %8221, %8218
  %8223 = icmp eq i32 %8222, 2
  %8224 = zext i1 %8223 to i8
  store i8 %8224, i8* %45, align 1
  %8225 = add i64 %8198, -676
  %8226 = add i64 %8197, 12
  store i64 %8226, i64* %3, align 8
  %8227 = inttoptr i64 %8225 to i32*
  store i32 %8203, i32* %8227, align 4
  %8228 = load i64, i64* %3, align 8
  %8229 = add i64 %8228, 17
  store i64 %8229, i64* %3, align 8
  br label %block_.L_42f1e8

block_.L_42f1dc:                                  ; preds = %block_42f139
  %8230 = add i64 %8198, -28
  %8231 = add i64 %8197, 3
  store i64 %8231, i64* %3, align 8
  %8232 = inttoptr i64 %8230 to i32*
  %8233 = load i32, i32* %8232, align 4
  %8234 = add i32 %8233, 2
  %8235 = zext i32 %8234 to i64
  store i64 %8235, i64* %RAX.i1585, align 8
  %8236 = icmp ugt i32 %8233, -3
  %8237 = zext i1 %8236 to i8
  store i8 %8237, i8* %20, align 1
  %8238 = and i32 %8234, 255
  %8239 = tail call i32 @llvm.ctpop.i32(i32 %8238)
  %8240 = trunc i32 %8239 to i8
  %8241 = and i8 %8240, 1
  %8242 = xor i8 %8241, 1
  store i8 %8242, i8* %27, align 1
  %8243 = xor i32 %8234, %8233
  %8244 = lshr i32 %8243, 4
  %8245 = trunc i32 %8244 to i8
  %8246 = and i8 %8245, 1
  store i8 %8246, i8* %33, align 1
  %8247 = icmp eq i32 %8234, 0
  %8248 = zext i1 %8247 to i8
  store i8 %8248, i8* %36, align 1
  %8249 = lshr i32 %8234, 31
  %8250 = trunc i32 %8249 to i8
  store i8 %8250, i8* %39, align 1
  %8251 = lshr i32 %8233, 31
  %8252 = xor i32 %8249, %8251
  %8253 = add nuw nsw i32 %8252, %8249
  %8254 = icmp eq i32 %8253, 2
  %8255 = zext i1 %8254 to i8
  store i8 %8255, i8* %45, align 1
  %8256 = add i64 %8198, -676
  %8257 = add i64 %8197, 12
  store i64 %8257, i64* %3, align 8
  %8258 = inttoptr i64 %8256 to i32*
  store i32 %8234, i32* %8258, align 4
  %.pre150 = load i64, i64* %3, align 8
  br label %block_.L_42f1e8

block_.L_42f1e8:                                  ; preds = %block_.L_42f1dc, %block_42f1cb
  %8259 = phi i64 [ %.pre150, %block_.L_42f1dc ], [ %8229, %block_42f1cb ]
  %8260 = load i64, i64* %RBP.i, align 8
  %8261 = add i64 %8260, -676
  %8262 = add i64 %8259, 6
  store i64 %8262, i64* %3, align 8
  %8263 = inttoptr i64 %8261 to i32*
  %8264 = load i32, i32* %8263, align 4
  %8265 = add i32 %8264, -16
  %8266 = zext i32 %8265 to i64
  store i64 %8266, i64* %RAX.i1585, align 8
  %8267 = icmp ult i32 %8264, 16
  %8268 = zext i1 %8267 to i8
  store i8 %8268, i8* %20, align 1
  %8269 = and i32 %8265, 255
  %8270 = tail call i32 @llvm.ctpop.i32(i32 %8269)
  %8271 = trunc i32 %8270 to i8
  %8272 = and i8 %8271, 1
  %8273 = xor i8 %8272, 1
  store i8 %8273, i8* %27, align 1
  %8274 = xor i32 %8264, 16
  %8275 = xor i32 %8274, %8265
  %8276 = lshr i32 %8275, 4
  %8277 = trunc i32 %8276 to i8
  %8278 = and i8 %8277, 1
  store i8 %8278, i8* %33, align 1
  %8279 = icmp eq i32 %8265, 0
  %8280 = zext i1 %8279 to i8
  store i8 %8280, i8* %36, align 1
  %8281 = lshr i32 %8265, 31
  %8282 = trunc i32 %8281 to i8
  store i8 %8282, i8* %39, align 1
  %8283 = lshr i32 %8264, 31
  %8284 = xor i32 %8281, %8283
  %8285 = add nuw nsw i32 %8284, %8283
  %8286 = icmp eq i32 %8285, 2
  %8287 = zext i1 %8286 to i8
  store i8 %8287, i8* %45, align 1
  %8288 = add i64 %8260, -24
  %8289 = add i64 %8259, 12
  store i64 %8289, i64* %3, align 8
  %8290 = inttoptr i64 %8288 to i32*
  %8291 = load i32, i32* %8290, align 4
  %8292 = add i32 %8291, -16
  %8293 = zext i32 %8292 to i64
  store i64 %8293, i64* %RCX.i3128, align 8
  %8294 = icmp ult i32 %8291, 16
  %8295 = zext i1 %8294 to i8
  store i8 %8295, i8* %20, align 1
  %8296 = and i32 %8292, 255
  %8297 = tail call i32 @llvm.ctpop.i32(i32 %8296)
  %8298 = trunc i32 %8297 to i8
  %8299 = and i8 %8298, 1
  %8300 = xor i8 %8299, 1
  store i8 %8300, i8* %27, align 1
  %8301 = xor i32 %8291, 16
  %8302 = xor i32 %8301, %8292
  %8303 = lshr i32 %8302, 4
  %8304 = trunc i32 %8303 to i8
  %8305 = and i8 %8304, 1
  store i8 %8305, i8* %33, align 1
  %8306 = icmp eq i32 %8292, 0
  %8307 = zext i1 %8306 to i8
  store i8 %8307, i8* %36, align 1
  %8308 = lshr i32 %8292, 31
  %8309 = trunc i32 %8308 to i8
  store i8 %8309, i8* %39, align 1
  %8310 = lshr i32 %8291, 31
  %8311 = xor i32 %8308, %8310
  %8312 = add nuw nsw i32 %8311, %8310
  %8313 = icmp eq i32 %8312, 2
  %8314 = zext i1 %8313 to i8
  store i8 %8314, i8* %45, align 1
  %8315 = add i64 %8260, -80
  %8316 = add i64 %8259, 18
  store i64 %8316, i64* %3, align 8
  %8317 = inttoptr i64 %8315 to i32*
  %8318 = load i32, i32* %8317, align 4
  %8319 = zext i32 %8318 to i64
  store i64 %8319, i64* %RDX.i5152, align 8
  %8320 = add i64 %8260, -76
  %8321 = add i64 %8259, 22
  store i64 %8321, i64* %3, align 8
  %8322 = inttoptr i64 %8320 to i32*
  %8323 = load i32, i32* %8322, align 4
  %8324 = zext i32 %8323 to i64
  store i64 %8324, i64* %600, align 8
  %8325 = add i64 %8260, -672
  %8326 = add i64 %8259, 29
  store i64 %8326, i64* %3, align 8
  %8327 = inttoptr i64 %8325 to i64*
  %8328 = load i64, i64* %8327, align 8
  store i64 %8328, i64* %RDI.i605, align 8
  store i64 %8266, i64* %RSI.i5212, align 8
  %8329 = load i64, i64* %RBP.i, align 8
  %8330 = add i64 %8329, -680
  %8331 = add i64 %8259, 37
  store i64 %8331, i64* %3, align 8
  %8332 = inttoptr i64 %8330 to i32*
  store i32 %8318, i32* %8332, align 4
  %8333 = load i32, i32* %ECX.i3256, align 4
  %8334 = zext i32 %8333 to i64
  %8335 = load i64, i64* %3, align 8
  store i64 %8334, i64* %RDX.i5152, align 8
  %8336 = load i64, i64* %RBP.i, align 8
  %8337 = add i64 %8336, -680
  %8338 = add i64 %8335, 8
  store i64 %8338, i64* %3, align 8
  %8339 = inttoptr i64 %8337 to i32*
  %8340 = load i32, i32* %8339, align 4
  %8341 = zext i32 %8340 to i64
  store i64 %8341, i64* %RCX.i3128, align 8
  %8342 = add i64 %8335, 456451
  %8343 = add i64 %8335, 13
  %8344 = load i64, i64* %6, align 8
  %8345 = add i64 %8344, -8
  %8346 = inttoptr i64 %8345 to i64*
  store i64 %8343, i64* %8346, align 8
  store i64 %8345, i64* %6, align 8
  store i64 %8342, i64* %3, align 8
  %call2_42f215 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %8342, %struct.Memory* %call2_42f19e)
  %8347 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %8348 = load i16, i16* %AX.i3315, align 2
  %8349 = zext i16 %8348 to i64
  store i64 %8349, i64* %RDX.i5152, align 8
  %8350 = load i64, i64* %RBP.i, align 8
  %8351 = add i64 %8350, -664
  %8352 = add i64 %8347, 14
  store i64 %8352, i64* %3, align 8
  %8353 = inttoptr i64 %8351 to i32*
  %8354 = load i32, i32* %8353, align 4
  %8355 = zext i16 %8348 to i32
  %8356 = add i32 %8355, %8354
  %8357 = lshr i32 %8356, 31
  %8358 = add i32 %8356, 1
  %8359 = zext i32 %8358 to i64
  store i64 %8359, i64* %RSI.i5212, align 8
  %8360 = icmp eq i32 %8356, -1
  %8361 = icmp eq i32 %8358, 0
  %8362 = or i1 %8360, %8361
  %8363 = zext i1 %8362 to i8
  store i8 %8363, i8* %20, align 1
  %8364 = and i32 %8358, 255
  %8365 = tail call i32 @llvm.ctpop.i32(i32 %8364)
  %8366 = trunc i32 %8365 to i8
  %8367 = and i8 %8366, 1
  %8368 = xor i8 %8367, 1
  store i8 %8368, i8* %27, align 1
  %8369 = xor i32 %8358, %8356
  %8370 = lshr i32 %8369, 4
  %8371 = trunc i32 %8370 to i8
  %8372 = and i8 %8371, 1
  store i8 %8372, i8* %33, align 1
  %8373 = zext i1 %8361 to i8
  store i8 %8373, i8* %36, align 1
  %8374 = lshr i32 %8358, 31
  %8375 = trunc i32 %8374 to i8
  store i8 %8375, i8* %39, align 1
  %8376 = xor i32 %8374, %8357
  %8377 = add nuw nsw i32 %8376, %8374
  %8378 = icmp eq i32 %8377, 2
  %8379 = zext i1 %8378 to i8
  store i8 %8379, i8* %45, align 1
  store i64 %8359, i64* %RAX.i1585, align 8
  %8380 = sext i32 %8358 to i64
  %8381 = lshr i64 %8380, 32
  store i64 %8381, i64* %3718, align 8
  %8382 = add i64 %8347, 24
  store i64 %8382, i64* %3, align 8
  %8383 = shl nuw i64 %8381, 32
  %8384 = or i64 %8383, %8359
  %8385 = sdiv i64 %8384, 2
  %8386 = shl i64 %8385, 32
  %8387 = ashr exact i64 %8386, 32
  %8388 = icmp eq i64 %8385, %8387
  br i1 %8388, label %8391, label %8389

; <label>:8389:                                   ; preds = %block_.L_42f1e8
  %8390 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8382, %struct.Memory* %call2_42f215)
  %.pre151 = load i64, i64* %RBP.i, align 8
  %.pre152 = load i64, i64* %3, align 8
  %.pre153 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__ecx.exit2157

; <label>:8391:                                   ; preds = %block_.L_42f1e8
  %8392 = srem i64 %8384, 2
  %8393 = and i64 %8385, 4294967295
  store i64 %8393, i64* %RAX.i1585, align 8
  %8394 = and i64 %8392, 4294967295
  store i64 %8394, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8395 = trunc i64 %8385 to i32
  br label %routine_idivl__ecx.exit2157

routine_idivl__ecx.exit2157:                      ; preds = %8391, %8389
  %8396 = phi i32 [ %.pre153, %8389 ], [ %8395, %8391 ]
  %8397 = phi i64 [ %.pre152, %8389 ], [ %8382, %8391 ]
  %8398 = phi i64 [ %.pre151, %8389 ], [ %8350, %8391 ]
  %8399 = phi %struct.Memory* [ %8390, %8389 ], [ %call2_42f215, %8391 ]
  %8400 = add i64 %8398, -652
  %8401 = add i64 %8397, 6
  store i64 %8401, i64* %3, align 8
  %8402 = inttoptr i64 %8400 to i32*
  %8403 = load i32, i32* %8402, align 4
  %8404 = zext i32 %8403 to i64
  store i64 %8404, i64* %RCX.i3128, align 8
  %8405 = sub i32 %8403, %8396
  %8406 = icmp ult i32 %8403, %8396
  %8407 = zext i1 %8406 to i8
  store i8 %8407, i8* %20, align 1
  %8408 = and i32 %8405, 255
  %8409 = tail call i32 @llvm.ctpop.i32(i32 %8408)
  %8410 = trunc i32 %8409 to i8
  %8411 = and i8 %8410, 1
  %8412 = xor i8 %8411, 1
  store i8 %8412, i8* %27, align 1
  %8413 = xor i32 %8396, %8403
  %8414 = xor i32 %8413, %8405
  %8415 = lshr i32 %8414, 4
  %8416 = trunc i32 %8415 to i8
  %8417 = and i8 %8416, 1
  store i8 %8417, i8* %33, align 1
  %8418 = icmp eq i32 %8405, 0
  %8419 = zext i1 %8418 to i8
  store i8 %8419, i8* %36, align 1
  %8420 = lshr i32 %8405, 31
  %8421 = trunc i32 %8420 to i8
  store i8 %8421, i8* %39, align 1
  %8422 = lshr i32 %8403, 31
  %8423 = lshr i32 %8396, 31
  %8424 = xor i32 %8423, %8422
  %8425 = xor i32 %8420, %8422
  %8426 = add nuw nsw i32 %8425, %8424
  %8427 = icmp eq i32 %8426, 2
  %8428 = zext i1 %8427 to i8
  store i8 %8428, i8* %45, align 1
  %8429 = icmp ne i8 %8421, 0
  %8430 = xor i1 %8429, %8427
  %.v337 = select i1 %8430, i64 14, i64 39
  %8431 = add i64 %8397, %.v337
  store i64 %8431, i64* %3, align 8
  br i1 %8430, label %block_42f240, label %block_.L_42f259

block_42f240:                                     ; preds = %routine_idivl__ecx.exit2157
  %8432 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8432, i64* %RAX.i1585, align 8
  %8433 = add i64 %8432, 72684
  %8434 = add i64 %8431, 14
  store i64 %8434, i64* %3, align 8
  %8435 = inttoptr i64 %8433 to i32*
  %8436 = load i32, i32* %8435, align 4
  %8437 = zext i32 %8436 to i64
  store i64 %8437, i64* %RCX.i3128, align 8
  %8438 = add i64 %8398, -684
  %8439 = add i64 %8431, 20
  store i64 %8439, i64* %3, align 8
  %8440 = inttoptr i64 %8438 to i32*
  store i32 %8436, i32* %8440, align 4
  %8441 = load i64, i64* %3, align 8
  %8442 = add i64 %8441, 198
  store i64 %8442, i64* %3, align 8
  br label %block_.L_42f31a

block_.L_42f259:                                  ; preds = %routine_idivl__ecx.exit2157
  %8443 = add i64 %8398, -56
  %8444 = add i64 %8431, 4
  store i64 %8444, i64* %3, align 8
  %8445 = inttoptr i64 %8443 to i64*
  %8446 = load i64, i64* %8445, align 8
  store i64 %8446, i64* %RDI.i605, align 8
  %8447 = add i64 %8398, -28
  %8448 = add i64 %8431, 7
  store i64 %8448, i64* %3, align 8
  %8449 = inttoptr i64 %8447 to i32*
  %8450 = load i32, i32* %8449, align 4
  %8451 = add i32 %8450, -16
  %8452 = zext i32 %8451 to i64
  store i64 %8452, i64* %RAX.i1585, align 8
  %8453 = icmp ult i32 %8450, 16
  %8454 = zext i1 %8453 to i8
  store i8 %8454, i8* %20, align 1
  %8455 = and i32 %8451, 255
  %8456 = tail call i32 @llvm.ctpop.i32(i32 %8455)
  %8457 = trunc i32 %8456 to i8
  %8458 = and i8 %8457, 1
  %8459 = xor i8 %8458, 1
  store i8 %8459, i8* %27, align 1
  %8460 = xor i32 %8450, 16
  %8461 = xor i32 %8460, %8451
  %8462 = lshr i32 %8461, 4
  %8463 = trunc i32 %8462 to i8
  %8464 = and i8 %8463, 1
  store i8 %8464, i8* %33, align 1
  %8465 = icmp eq i32 %8451, 0
  %8466 = zext i1 %8465 to i8
  store i8 %8466, i8* %36, align 1
  %8467 = lshr i32 %8451, 31
  %8468 = trunc i32 %8467 to i8
  store i8 %8468, i8* %39, align 1
  %8469 = lshr i32 %8450, 31
  %8470 = xor i32 %8467, %8469
  %8471 = add nuw nsw i32 %8470, %8469
  %8472 = icmp eq i32 %8471, 2
  %8473 = zext i1 %8472 to i8
  store i8 %8473, i8* %45, align 1
  %8474 = add i64 %8398, -24
  %8475 = add i64 %8431, 13
  store i64 %8475, i64* %3, align 8
  %8476 = inttoptr i64 %8474 to i32*
  %8477 = load i32, i32* %8476, align 4
  %8478 = add i32 %8477, -16
  %8479 = zext i32 %8478 to i64
  store i64 %8479, i64* %RCX.i3128, align 8
  %8480 = icmp ult i32 %8477, 16
  %8481 = zext i1 %8480 to i8
  store i8 %8481, i8* %20, align 1
  %8482 = and i32 %8478, 255
  %8483 = tail call i32 @llvm.ctpop.i32(i32 %8482)
  %8484 = trunc i32 %8483 to i8
  %8485 = and i8 %8484, 1
  %8486 = xor i8 %8485, 1
  store i8 %8486, i8* %27, align 1
  %8487 = xor i32 %8477, 16
  %8488 = xor i32 %8487, %8478
  %8489 = lshr i32 %8488, 4
  %8490 = trunc i32 %8489 to i8
  %8491 = and i8 %8490, 1
  store i8 %8491, i8* %33, align 1
  %8492 = icmp eq i32 %8478, 0
  %8493 = zext i1 %8492 to i8
  store i8 %8493, i8* %36, align 1
  %8494 = lshr i32 %8478, 31
  %8495 = trunc i32 %8494 to i8
  store i8 %8495, i8* %39, align 1
  %8496 = lshr i32 %8477, 31
  %8497 = xor i32 %8494, %8496
  %8498 = add nuw nsw i32 %8497, %8496
  %8499 = icmp eq i32 %8498, 2
  %8500 = zext i1 %8499 to i8
  store i8 %8500, i8* %45, align 1
  %8501 = add i64 %8398, -80
  %8502 = add i64 %8431, 19
  store i64 %8502, i64* %3, align 8
  %8503 = inttoptr i64 %8501 to i32*
  %8504 = load i32, i32* %8503, align 4
  %8505 = zext i32 %8504 to i64
  store i64 %8505, i64* %RDX.i5152, align 8
  %8506 = add i64 %8398, -76
  %8507 = add i64 %8431, 23
  store i64 %8507, i64* %3, align 8
  %8508 = inttoptr i64 %8506 to i32*
  %8509 = load i32, i32* %8508, align 4
  %8510 = zext i32 %8509 to i64
  store i64 %8510, i64* %600, align 8
  store i64 %8452, i64* %RSI.i5212, align 8
  %8511 = load i64, i64* %RBP.i, align 8
  %8512 = add i64 %8511, -688
  %8513 = add i64 %8431, 31
  store i64 %8513, i64* %3, align 8
  %8514 = inttoptr i64 %8512 to i32*
  store i32 %8504, i32* %8514, align 4
  %8515 = load i32, i32* %ECX.i3256, align 4
  %8516 = zext i32 %8515 to i64
  %8517 = load i64, i64* %3, align 8
  store i64 %8516, i64* %RDX.i5152, align 8
  %8518 = load i64, i64* %RBP.i, align 8
  %8519 = add i64 %8518, -688
  %8520 = add i64 %8517, 8
  store i64 %8520, i64* %3, align 8
  %8521 = inttoptr i64 %8519 to i32*
  %8522 = load i32, i32* %8521, align 4
  %8523 = zext i32 %8522 to i64
  store i64 %8523, i64* %RCX.i3128, align 8
  %8524 = add i64 %8517, 456344
  %8525 = add i64 %8517, 13
  %8526 = load i64, i64* %6, align 8
  %8527 = add i64 %8526, -8
  %8528 = inttoptr i64 %8527 to i64*
  store i64 %8525, i64* %8528, align 8
  store i64 %8527, i64* %6, align 8
  store i64 %8524, i64* %3, align 8
  %call2_42f280 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %8524, %struct.Memory* %8399)
  %8529 = load i16, i16* %AX.i3315, align 2
  %8530 = zext i16 %8529 to i64
  %8531 = load i64, i64* %3, align 8
  store i64 %8530, i64* %RCX.i3128, align 8
  %8532 = load i64, i64* %RBP.i, align 8
  %8533 = add i64 %8532, -56
  %8534 = add i64 %8531, 7
  store i64 %8534, i64* %3, align 8
  %8535 = inttoptr i64 %8533 to i64*
  %8536 = load i64, i64* %8535, align 8
  store i64 %8536, i64* %RDI.i605, align 8
  %8537 = add i64 %8532, -40
  %8538 = add i64 %8531, 10
  store i64 %8538, i64* %3, align 8
  %8539 = inttoptr i64 %8537 to i32*
  %8540 = load i32, i32* %8539, align 4
  %8541 = add i32 %8540, 2
  %8542 = zext i32 %8541 to i64
  store i64 %8542, i64* %RDX.i5152, align 8
  %8543 = icmp ugt i32 %8540, -3
  %8544 = zext i1 %8543 to i8
  store i8 %8544, i8* %20, align 1
  %8545 = and i32 %8541, 255
  %8546 = tail call i32 @llvm.ctpop.i32(i32 %8545)
  %8547 = trunc i32 %8546 to i8
  %8548 = and i8 %8547, 1
  %8549 = xor i8 %8548, 1
  store i8 %8549, i8* %27, align 1
  %8550 = xor i32 %8541, %8540
  %8551 = lshr i32 %8550, 4
  %8552 = trunc i32 %8551 to i8
  %8553 = and i8 %8552, 1
  store i8 %8553, i8* %33, align 1
  %8554 = icmp eq i32 %8541, 0
  %8555 = zext i1 %8554 to i8
  store i8 %8555, i8* %36, align 1
  %8556 = lshr i32 %8541, 31
  %8557 = trunc i32 %8556 to i8
  store i8 %8557, i8* %39, align 1
  %8558 = lshr i32 %8540, 31
  %8559 = xor i32 %8556, %8558
  %8560 = add nuw nsw i32 %8559, %8556
  %8561 = icmp eq i32 %8560, 2
  %8562 = zext i1 %8561 to i8
  store i8 %8562, i8* %45, align 1
  %8563 = add i64 %8532, -28
  %8564 = add i64 %8531, 16
  store i64 %8564, i64* %3, align 8
  %8565 = inttoptr i64 %8563 to i32*
  %8566 = load i32, i32* %8565, align 4
  %8567 = add i32 %8566, 2
  %8568 = zext i32 %8567 to i64
  store i64 %8568, i64* %RSI.i5212, align 8
  %8569 = lshr i32 %8567, 31
  %8570 = sub i32 %8541, %8567
  %8571 = icmp ult i32 %8541, %8567
  %8572 = zext i1 %8571 to i8
  store i8 %8572, i8* %20, align 1
  %8573 = and i32 %8570, 255
  %8574 = tail call i32 @llvm.ctpop.i32(i32 %8573)
  %8575 = trunc i32 %8574 to i8
  %8576 = and i8 %8575, 1
  %8577 = xor i8 %8576, 1
  store i8 %8577, i8* %27, align 1
  %8578 = xor i32 %8567, %8541
  %8579 = xor i32 %8578, %8570
  %8580 = lshr i32 %8579, 4
  %8581 = trunc i32 %8580 to i8
  %8582 = and i8 %8581, 1
  store i8 %8582, i8* %33, align 1
  %8583 = icmp eq i32 %8570, 0
  %8584 = zext i1 %8583 to i8
  store i8 %8584, i8* %36, align 1
  %8585 = lshr i32 %8570, 31
  %8586 = trunc i32 %8585 to i8
  store i8 %8586, i8* %39, align 1
  %8587 = xor i32 %8569, %8556
  %8588 = xor i32 %8585, %8556
  %8589 = add nuw nsw i32 %8588, %8587
  %8590 = icmp eq i32 %8589, 2
  %8591 = zext i1 %8590 to i8
  store i8 %8591, i8* %45, align 1
  %8592 = load i64, i64* %RBP.i, align 8
  %8593 = add i64 %8592, -692
  %8594 = load i32, i32* %ECX.i3256, align 4
  %8595 = add i64 %8531, 27
  store i64 %8595, i64* %3, align 8
  %8596 = inttoptr i64 %8593 to i32*
  store i32 %8594, i32* %8596, align 4
  %8597 = load i64, i64* %RBP.i, align 8
  %8598 = add i64 %8597, -704
  %8599 = load i64, i64* %RDI.i605, align 8
  %8600 = load i64, i64* %3, align 8
  %8601 = add i64 %8600, 7
  store i64 %8601, i64* %3, align 8
  %8602 = inttoptr i64 %8598 to i64*
  store i64 %8599, i64* %8602, align 8
  %8603 = load i64, i64* %3, align 8
  %8604 = load i8, i8* %39, align 1
  %8605 = icmp ne i8 %8604, 0
  %8606 = load i8, i8* %45, align 1
  %8607 = icmp ne i8 %8606, 0
  %8608 = xor i1 %8605, %8607
  %.v394 = select i1 %8608, i64 6, i64 23
  %8609 = add i64 %8603, %.v394
  store i64 %8609, i64* %3, align 8
  %8610 = load i64, i64* %RBP.i, align 8
  br i1 %8608, label %block_42f2ad, label %block_.L_42f2be

block_42f2ad:                                     ; preds = %block_.L_42f259
  %8611 = add i64 %8610, -40
  %8612 = add i64 %8609, 3
  store i64 %8612, i64* %3, align 8
  %8613 = inttoptr i64 %8611 to i32*
  %8614 = load i32, i32* %8613, align 4
  %8615 = add i32 %8614, 2
  %8616 = zext i32 %8615 to i64
  store i64 %8616, i64* %RAX.i1585, align 8
  %8617 = icmp ugt i32 %8614, -3
  %8618 = zext i1 %8617 to i8
  store i8 %8618, i8* %20, align 1
  %8619 = and i32 %8615, 255
  %8620 = tail call i32 @llvm.ctpop.i32(i32 %8619)
  %8621 = trunc i32 %8620 to i8
  %8622 = and i8 %8621, 1
  %8623 = xor i8 %8622, 1
  store i8 %8623, i8* %27, align 1
  %8624 = xor i32 %8615, %8614
  %8625 = lshr i32 %8624, 4
  %8626 = trunc i32 %8625 to i8
  %8627 = and i8 %8626, 1
  store i8 %8627, i8* %33, align 1
  %8628 = icmp eq i32 %8615, 0
  %8629 = zext i1 %8628 to i8
  store i8 %8629, i8* %36, align 1
  %8630 = lshr i32 %8615, 31
  %8631 = trunc i32 %8630 to i8
  store i8 %8631, i8* %39, align 1
  %8632 = lshr i32 %8614, 31
  %8633 = xor i32 %8630, %8632
  %8634 = add nuw nsw i32 %8633, %8630
  %8635 = icmp eq i32 %8634, 2
  %8636 = zext i1 %8635 to i8
  store i8 %8636, i8* %45, align 1
  %8637 = add i64 %8610, -708
  %8638 = add i64 %8609, 12
  store i64 %8638, i64* %3, align 8
  %8639 = inttoptr i64 %8637 to i32*
  store i32 %8615, i32* %8639, align 4
  %8640 = load i64, i64* %3, align 8
  %8641 = add i64 %8640, 17
  store i64 %8641, i64* %3, align 8
  br label %block_.L_42f2ca

block_.L_42f2be:                                  ; preds = %block_.L_42f259
  %8642 = add i64 %8610, -28
  %8643 = add i64 %8609, 3
  store i64 %8643, i64* %3, align 8
  %8644 = inttoptr i64 %8642 to i32*
  %8645 = load i32, i32* %8644, align 4
  %8646 = add i32 %8645, 2
  %8647 = zext i32 %8646 to i64
  store i64 %8647, i64* %RAX.i1585, align 8
  %8648 = icmp ugt i32 %8645, -3
  %8649 = zext i1 %8648 to i8
  store i8 %8649, i8* %20, align 1
  %8650 = and i32 %8646, 255
  %8651 = tail call i32 @llvm.ctpop.i32(i32 %8650)
  %8652 = trunc i32 %8651 to i8
  %8653 = and i8 %8652, 1
  %8654 = xor i8 %8653, 1
  store i8 %8654, i8* %27, align 1
  %8655 = xor i32 %8646, %8645
  %8656 = lshr i32 %8655, 4
  %8657 = trunc i32 %8656 to i8
  %8658 = and i8 %8657, 1
  store i8 %8658, i8* %33, align 1
  %8659 = icmp eq i32 %8646, 0
  %8660 = zext i1 %8659 to i8
  store i8 %8660, i8* %36, align 1
  %8661 = lshr i32 %8646, 31
  %8662 = trunc i32 %8661 to i8
  store i8 %8662, i8* %39, align 1
  %8663 = lshr i32 %8645, 31
  %8664 = xor i32 %8661, %8663
  %8665 = add nuw nsw i32 %8664, %8661
  %8666 = icmp eq i32 %8665, 2
  %8667 = zext i1 %8666 to i8
  store i8 %8667, i8* %45, align 1
  %8668 = add i64 %8610, -708
  %8669 = add i64 %8609, 12
  store i64 %8669, i64* %3, align 8
  %8670 = inttoptr i64 %8668 to i32*
  store i32 %8646, i32* %8670, align 4
  %.pre154 = load i64, i64* %3, align 8
  br label %block_.L_42f2ca

block_.L_42f2ca:                                  ; preds = %block_.L_42f2be, %block_42f2ad
  %8671 = phi i64 [ %.pre154, %block_.L_42f2be ], [ %8641, %block_42f2ad ]
  %8672 = load i64, i64* %RBP.i, align 8
  %8673 = add i64 %8672, -708
  %8674 = add i64 %8671, 6
  store i64 %8674, i64* %3, align 8
  %8675 = inttoptr i64 %8673 to i32*
  %8676 = load i32, i32* %8675, align 4
  %8677 = add i32 %8676, -16
  %8678 = zext i32 %8677 to i64
  store i64 %8678, i64* %RAX.i1585, align 8
  %8679 = icmp ult i32 %8676, 16
  %8680 = zext i1 %8679 to i8
  store i8 %8680, i8* %20, align 1
  %8681 = and i32 %8677, 255
  %8682 = tail call i32 @llvm.ctpop.i32(i32 %8681)
  %8683 = trunc i32 %8682 to i8
  %8684 = and i8 %8683, 1
  %8685 = xor i8 %8684, 1
  store i8 %8685, i8* %27, align 1
  %8686 = xor i32 %8676, 16
  %8687 = xor i32 %8686, %8677
  %8688 = lshr i32 %8687, 4
  %8689 = trunc i32 %8688 to i8
  %8690 = and i8 %8689, 1
  store i8 %8690, i8* %33, align 1
  %8691 = icmp eq i32 %8677, 0
  %8692 = zext i1 %8691 to i8
  store i8 %8692, i8* %36, align 1
  %8693 = lshr i32 %8677, 31
  %8694 = trunc i32 %8693 to i8
  store i8 %8694, i8* %39, align 1
  %8695 = lshr i32 %8676, 31
  %8696 = xor i32 %8693, %8695
  %8697 = add nuw nsw i32 %8696, %8695
  %8698 = icmp eq i32 %8697, 2
  %8699 = zext i1 %8698 to i8
  store i8 %8699, i8* %45, align 1
  %8700 = add i64 %8672, -24
  %8701 = add i64 %8671, 12
  store i64 %8701, i64* %3, align 8
  %8702 = inttoptr i64 %8700 to i32*
  %8703 = load i32, i32* %8702, align 4
  %8704 = add i32 %8703, -16
  %8705 = zext i32 %8704 to i64
  store i64 %8705, i64* %RCX.i3128, align 8
  %8706 = icmp ult i32 %8703, 16
  %8707 = zext i1 %8706 to i8
  store i8 %8707, i8* %20, align 1
  %8708 = and i32 %8704, 255
  %8709 = tail call i32 @llvm.ctpop.i32(i32 %8708)
  %8710 = trunc i32 %8709 to i8
  %8711 = and i8 %8710, 1
  %8712 = xor i8 %8711, 1
  store i8 %8712, i8* %27, align 1
  %8713 = xor i32 %8703, 16
  %8714 = xor i32 %8713, %8704
  %8715 = lshr i32 %8714, 4
  %8716 = trunc i32 %8715 to i8
  %8717 = and i8 %8716, 1
  store i8 %8717, i8* %33, align 1
  %8718 = icmp eq i32 %8704, 0
  %8719 = zext i1 %8718 to i8
  store i8 %8719, i8* %36, align 1
  %8720 = lshr i32 %8704, 31
  %8721 = trunc i32 %8720 to i8
  store i8 %8721, i8* %39, align 1
  %8722 = lshr i32 %8703, 31
  %8723 = xor i32 %8720, %8722
  %8724 = add nuw nsw i32 %8723, %8722
  %8725 = icmp eq i32 %8724, 2
  %8726 = zext i1 %8725 to i8
  store i8 %8726, i8* %45, align 1
  %8727 = add i64 %8672, -80
  %8728 = add i64 %8671, 18
  store i64 %8728, i64* %3, align 8
  %8729 = inttoptr i64 %8727 to i32*
  %8730 = load i32, i32* %8729, align 4
  %8731 = zext i32 %8730 to i64
  store i64 %8731, i64* %RDX.i5152, align 8
  %8732 = add i64 %8672, -76
  %8733 = add i64 %8671, 22
  store i64 %8733, i64* %3, align 8
  %8734 = inttoptr i64 %8732 to i32*
  %8735 = load i32, i32* %8734, align 4
  %8736 = zext i32 %8735 to i64
  store i64 %8736, i64* %600, align 8
  %8737 = add i64 %8672, -704
  %8738 = add i64 %8671, 29
  store i64 %8738, i64* %3, align 8
  %8739 = inttoptr i64 %8737 to i64*
  %8740 = load i64, i64* %8739, align 8
  store i64 %8740, i64* %RDI.i605, align 8
  store i64 %8678, i64* %RSI.i5212, align 8
  %8741 = load i64, i64* %RBP.i, align 8
  %8742 = add i64 %8741, -712
  %8743 = add i64 %8671, 37
  store i64 %8743, i64* %3, align 8
  %8744 = inttoptr i64 %8742 to i32*
  store i32 %8730, i32* %8744, align 4
  %8745 = load i32, i32* %ECX.i3256, align 4
  %8746 = zext i32 %8745 to i64
  %8747 = load i64, i64* %3, align 8
  store i64 %8746, i64* %RDX.i5152, align 8
  %8748 = load i64, i64* %RBP.i, align 8
  %8749 = add i64 %8748, -712
  %8750 = add i64 %8747, 8
  store i64 %8750, i64* %3, align 8
  %8751 = inttoptr i64 %8749 to i32*
  %8752 = load i32, i32* %8751, align 4
  %8753 = zext i32 %8752 to i64
  store i64 %8753, i64* %RCX.i3128, align 8
  %8754 = add i64 %8747, 456225
  %8755 = add i64 %8747, 13
  %8756 = load i64, i64* %6, align 8
  %8757 = add i64 %8756, -8
  %8758 = inttoptr i64 %8757 to i64*
  store i64 %8755, i64* %8758, align 8
  store i64 %8757, i64* %6, align 8
  store i64 %8754, i64* %3, align 8
  %call2_42f2f7 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %8754, %struct.Memory* %call2_42f280)
  %8759 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %8760 = load i16, i16* %AX.i3315, align 2
  %8761 = zext i16 %8760 to i64
  store i64 %8761, i64* %RDX.i5152, align 8
  %8762 = load i64, i64* %RBP.i, align 8
  %8763 = add i64 %8762, -692
  %8764 = add i64 %8759, 14
  store i64 %8764, i64* %3, align 8
  %8765 = inttoptr i64 %8763 to i32*
  %8766 = load i32, i32* %8765, align 4
  %8767 = zext i16 %8760 to i32
  %8768 = add i32 %8767, %8766
  %8769 = lshr i32 %8768, 31
  %8770 = add i32 %8768, 1
  %8771 = zext i32 %8770 to i64
  store i64 %8771, i64* %RSI.i5212, align 8
  %8772 = icmp eq i32 %8768, -1
  %8773 = icmp eq i32 %8770, 0
  %8774 = or i1 %8772, %8773
  %8775 = zext i1 %8774 to i8
  store i8 %8775, i8* %20, align 1
  %8776 = and i32 %8770, 255
  %8777 = tail call i32 @llvm.ctpop.i32(i32 %8776)
  %8778 = trunc i32 %8777 to i8
  %8779 = and i8 %8778, 1
  %8780 = xor i8 %8779, 1
  store i8 %8780, i8* %27, align 1
  %8781 = xor i32 %8770, %8768
  %8782 = lshr i32 %8781, 4
  %8783 = trunc i32 %8782 to i8
  %8784 = and i8 %8783, 1
  store i8 %8784, i8* %33, align 1
  %8785 = zext i1 %8773 to i8
  store i8 %8785, i8* %36, align 1
  %8786 = lshr i32 %8770, 31
  %8787 = trunc i32 %8786 to i8
  store i8 %8787, i8* %39, align 1
  %8788 = xor i32 %8786, %8769
  %8789 = add nuw nsw i32 %8788, %8786
  %8790 = icmp eq i32 %8789, 2
  %8791 = zext i1 %8790 to i8
  store i8 %8791, i8* %45, align 1
  store i64 %8771, i64* %RAX.i1585, align 8
  %8792 = sext i32 %8770 to i64
  %8793 = lshr i64 %8792, 32
  store i64 %8793, i64* %3718, align 8
  %8794 = add i64 %8759, 24
  store i64 %8794, i64* %3, align 8
  %8795 = shl nuw i64 %8793, 32
  %8796 = or i64 %8795, %8771
  %8797 = sdiv i64 %8796, 2
  %8798 = shl i64 %8797, 32
  %8799 = ashr exact i64 %8798, 32
  %8800 = icmp eq i64 %8797, %8799
  br i1 %8800, label %8803, label %8801

; <label>:8801:                                   ; preds = %block_.L_42f2ca
  %8802 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8794, %struct.Memory* %call2_42f2f7)
  %.pre155 = load i64, i64* %RBP.i, align 8
  %.pre156 = load i32, i32* %EAX.i1609, align 4
  %.pre157 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2012

; <label>:8803:                                   ; preds = %block_.L_42f2ca
  %8804 = srem i64 %8796, 2
  %8805 = and i64 %8797, 4294967295
  store i64 %8805, i64* %RAX.i1585, align 8
  %8806 = and i64 %8804, 4294967295
  store i64 %8806, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8807 = trunc i64 %8797 to i32
  br label %routine_idivl__ecx.exit2012

routine_idivl__ecx.exit2012:                      ; preds = %8803, %8801
  %8808 = phi i64 [ %.pre157, %8801 ], [ %8794, %8803 ]
  %8809 = phi i32 [ %.pre156, %8801 ], [ %8807, %8803 ]
  %8810 = phi i64 [ %.pre155, %8801 ], [ %8762, %8803 ]
  %8811 = phi %struct.Memory* [ %8802, %8801 ], [ %call2_42f2f7, %8803 ]
  %8812 = add i64 %8810, -684
  %8813 = add i64 %8808, 6
  store i64 %8813, i64* %3, align 8
  %8814 = inttoptr i64 %8812 to i32*
  store i32 %8809, i32* %8814, align 4
  %.pre158 = load i64, i64* %3, align 8
  br label %block_.L_42f31a

block_.L_42f31a:                                  ; preds = %routine_idivl__ecx.exit2012, %block_42f240
  %8815 = phi i64 [ %.pre158, %routine_idivl__ecx.exit2012 ], [ %8442, %block_42f240 ]
  %MEMORY.57 = phi %struct.Memory* [ %8811, %routine_idivl__ecx.exit2012 ], [ %8399, %block_42f240 ]
  %8816 = load i64, i64* %RBP.i, align 8
  %8817 = add i64 %8816, -684
  %8818 = add i64 %8815, 6
  store i64 %8818, i64* %3, align 8
  %8819 = inttoptr i64 %8817 to i32*
  %8820 = load i32, i32* %8819, align 4
  %8821 = zext i32 %8820 to i64
  store i64 %8821, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %8822 = sub i32 0, %8820
  %8823 = icmp ne i32 %8820, 0
  %8824 = zext i1 %8823 to i8
  store i8 %8824, i8* %20, align 1
  %8825 = and i32 %8822, 255
  %8826 = tail call i32 @llvm.ctpop.i32(i32 %8825)
  %8827 = trunc i32 %8826 to i8
  %8828 = and i8 %8827, 1
  %8829 = xor i8 %8828, 1
  store i8 %8829, i8* %27, align 1
  %8830 = xor i32 %8820, %8822
  %8831 = lshr i32 %8830, 4
  %8832 = trunc i32 %8831 to i8
  %8833 = and i8 %8832, 1
  store i8 %8833, i8* %33, align 1
  %8834 = icmp eq i32 %8820, 0
  %8835 = zext i1 %8834 to i8
  store i8 %8835, i8* %36, align 1
  %8836 = lshr i32 %8822, 31
  %8837 = trunc i32 %8836 to i8
  store i8 %8837, i8* %39, align 1
  %8838 = lshr i32 %8820, 31
  %8839 = add nuw nsw i32 %8836, %8838
  %8840 = icmp eq i32 %8839, 2
  %8841 = zext i1 %8840 to i8
  store i8 %8841, i8* %45, align 1
  %8842 = icmp ne i8 %8837, 0
  %8843 = xor i1 %8842, %8840
  %8844 = or i1 %8834, %8843
  %.v338 = select i1 %8844, i64 29, i64 16
  %8845 = add i64 %8815, %.v338
  store i64 %8845, i64* %3, align 8
  br i1 %8844, label %block_.L_42f337, label %block_42f32a

block_42f32a:                                     ; preds = %block_.L_42f31a
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %8846 = add i64 %8816, -716
  %8847 = add i64 %8845, 8
  store i64 %8847, i64* %3, align 8
  %8848 = inttoptr i64 %8846 to i32*
  store i32 0, i32* %8848, align 4
  %8849 = load i64, i64* %3, align 8
  %8850 = add i64 %8849, 461
  store i64 %8850, i64* %3, align 8
  br label %block_.L_42f4ff

block_.L_42f337:                                  ; preds = %block_.L_42f31a
  %8851 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8851, i64* %RAX.i1585, align 8
  %8852 = add i64 %8851, 72684
  %8853 = add i64 %8845, 14
  store i64 %8853, i64* %3, align 8
  %8854 = inttoptr i64 %8852 to i32*
  %8855 = load i32, i32* %8854, align 4
  %8856 = zext i32 %8855 to i64
  store i64 %8856, i64* %RCX.i3128, align 8
  %8857 = add i64 %8816, -56
  %8858 = add i64 %8845, 18
  store i64 %8858, i64* %3, align 8
  %8859 = inttoptr i64 %8857 to i64*
  %8860 = load i64, i64* %8859, align 8
  store i64 %8860, i64* %RDI.i605, align 8
  %8861 = add i64 %8816, -28
  %8862 = add i64 %8845, 21
  store i64 %8862, i64* %3, align 8
  %8863 = inttoptr i64 %8861 to i32*
  %8864 = load i32, i32* %8863, align 4
  %8865 = add i32 %8864, -16
  %8866 = zext i32 %8865 to i64
  store i64 %8866, i64* %RDX.i5152, align 8
  %8867 = icmp ult i32 %8864, 16
  %8868 = zext i1 %8867 to i8
  store i8 %8868, i8* %20, align 1
  %8869 = and i32 %8865, 255
  %8870 = tail call i32 @llvm.ctpop.i32(i32 %8869)
  %8871 = trunc i32 %8870 to i8
  %8872 = and i8 %8871, 1
  %8873 = xor i8 %8872, 1
  store i8 %8873, i8* %27, align 1
  %8874 = xor i32 %8864, 16
  %8875 = xor i32 %8874, %8865
  %8876 = lshr i32 %8875, 4
  %8877 = trunc i32 %8876 to i8
  %8878 = and i8 %8877, 1
  store i8 %8878, i8* %33, align 1
  %8879 = icmp eq i32 %8865, 0
  %8880 = zext i1 %8879 to i8
  store i8 %8880, i8* %36, align 1
  %8881 = lshr i32 %8865, 31
  %8882 = trunc i32 %8881 to i8
  store i8 %8882, i8* %39, align 1
  %8883 = lshr i32 %8864, 31
  %8884 = xor i32 %8881, %8883
  %8885 = add nuw nsw i32 %8884, %8883
  %8886 = icmp eq i32 %8885, 2
  %8887 = zext i1 %8886 to i8
  store i8 %8887, i8* %45, align 1
  %8888 = add i64 %8816, -24
  %8889 = add i64 %8845, 27
  store i64 %8889, i64* %3, align 8
  %8890 = inttoptr i64 %8888 to i32*
  %8891 = load i32, i32* %8890, align 4
  %8892 = add i32 %8891, -16
  %8893 = zext i32 %8892 to i64
  store i64 %8893, i64* %RSI.i5212, align 8
  %8894 = icmp ult i32 %8891, 16
  %8895 = zext i1 %8894 to i8
  store i8 %8895, i8* %20, align 1
  %8896 = and i32 %8892, 255
  %8897 = tail call i32 @llvm.ctpop.i32(i32 %8896)
  %8898 = trunc i32 %8897 to i8
  %8899 = and i8 %8898, 1
  %8900 = xor i8 %8899, 1
  store i8 %8900, i8* %27, align 1
  %8901 = xor i32 %8891, 16
  %8902 = xor i32 %8901, %8892
  %8903 = lshr i32 %8902, 4
  %8904 = trunc i32 %8903 to i8
  %8905 = and i8 %8904, 1
  store i8 %8905, i8* %33, align 1
  %8906 = icmp eq i32 %8892, 0
  %8907 = zext i1 %8906 to i8
  store i8 %8907, i8* %36, align 1
  %8908 = lshr i32 %8892, 31
  %8909 = trunc i32 %8908 to i8
  store i8 %8909, i8* %39, align 1
  %8910 = lshr i32 %8891, 31
  %8911 = xor i32 %8908, %8910
  %8912 = add nuw nsw i32 %8911, %8910
  %8913 = icmp eq i32 %8912, 2
  %8914 = zext i1 %8913 to i8
  store i8 %8914, i8* %45, align 1
  %8915 = add i64 %8816, -80
  %8916 = add i64 %8845, 34
  store i64 %8916, i64* %3, align 8
  %8917 = inttoptr i64 %8915 to i32*
  %8918 = load i32, i32* %8917, align 4
  %8919 = zext i32 %8918 to i64
  store i64 %8919, i64* %600, align 8
  %8920 = load i64, i64* %RBP.i, align 8
  %8921 = add i64 %8920, -76
  %8922 = add i64 %8845, 38
  store i64 %8922, i64* %3, align 8
  %8923 = inttoptr i64 %8921 to i32*
  %8924 = load i32, i32* %8923, align 4
  %8925 = zext i32 %8924 to i64
  store i64 %8925, i64* %602, align 8
  %8926 = add i64 %8920, -720
  %8927 = add i64 %8845, 44
  store i64 %8927, i64* %3, align 8
  %8928 = inttoptr i64 %8926 to i32*
  store i32 %8892, i32* %8928, align 4
  %8929 = load i32, i32* %EDX.i5198, align 4
  %8930 = zext i32 %8929 to i64
  %8931 = load i64, i64* %3, align 8
  store i64 %8930, i64* %RSI.i5212, align 8
  %8932 = load i64, i64* %RBP.i, align 8
  %8933 = add i64 %8932, -720
  %8934 = add i64 %8931, 8
  store i64 %8934, i64* %3, align 8
  %8935 = inttoptr i64 %8933 to i32*
  %8936 = load i32, i32* %8935, align 4
  %8937 = zext i32 %8936 to i64
  store i64 %8937, i64* %RDX.i5152, align 8
  %8938 = add i64 %8932, -724
  %8939 = load i32, i32* %ECX.i3256, align 4
  %8940 = add i64 %8931, 14
  store i64 %8940, i64* %3, align 8
  %8941 = inttoptr i64 %8938 to i32*
  store i32 %8939, i32* %8941, align 4
  %8942 = load i32, i32* %R8D.i4817, align 4
  %8943 = zext i32 %8942 to i64
  %8944 = load i64, i64* %3, align 8
  store i64 %8943, i64* %RCX.i3128, align 8
  %8945 = load i32, i32* %R9D.i4678, align 4
  %8946 = zext i32 %8945 to i64
  store i64 %8946, i64* %600, align 8
  %8947 = add i64 %8944, 456095
  %8948 = add i64 %8944, 11
  %8949 = load i64, i64* %6, align 8
  %8950 = add i64 %8949, -8
  %8951 = inttoptr i64 %8950 to i64*
  store i64 %8948, i64* %8951, align 8
  store i64 %8950, i64* %6, align 8
  store i64 %8947, i64* %3, align 8
  %call2_42f377 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %8947, %struct.Memory* %MEMORY.57)
  %8952 = load i16, i16* %AX.i3315, align 2
  %8953 = zext i16 %8952 to i64
  %8954 = load i64, i64* %3, align 8
  store i64 %8953, i64* %RCX.i3128, align 8
  %8955 = load i64, i64* %RBP.i, align 8
  %8956 = add i64 %8955, -56
  %8957 = add i64 %8954, 7
  store i64 %8957, i64* %3, align 8
  %8958 = inttoptr i64 %8956 to i64*
  %8959 = load i64, i64* %8958, align 8
  store i64 %8959, i64* %RDI.i605, align 8
  %8960 = add i64 %8955, -40
  %8961 = add i64 %8954, 10
  store i64 %8961, i64* %3, align 8
  %8962 = inttoptr i64 %8960 to i32*
  %8963 = load i32, i32* %8962, align 4
  %8964 = add i32 %8963, 2
  %8965 = zext i32 %8964 to i64
  store i64 %8965, i64* %RDX.i5152, align 8
  %8966 = icmp ugt i32 %8963, -3
  %8967 = zext i1 %8966 to i8
  store i8 %8967, i8* %20, align 1
  %8968 = and i32 %8964, 255
  %8969 = tail call i32 @llvm.ctpop.i32(i32 %8968)
  %8970 = trunc i32 %8969 to i8
  %8971 = and i8 %8970, 1
  %8972 = xor i8 %8971, 1
  store i8 %8972, i8* %27, align 1
  %8973 = xor i32 %8964, %8963
  %8974 = lshr i32 %8973, 4
  %8975 = trunc i32 %8974 to i8
  %8976 = and i8 %8975, 1
  store i8 %8976, i8* %33, align 1
  %8977 = icmp eq i32 %8964, 0
  %8978 = zext i1 %8977 to i8
  store i8 %8978, i8* %36, align 1
  %8979 = lshr i32 %8964, 31
  %8980 = trunc i32 %8979 to i8
  store i8 %8980, i8* %39, align 1
  %8981 = lshr i32 %8963, 31
  %8982 = xor i32 %8979, %8981
  %8983 = add nuw nsw i32 %8982, %8979
  %8984 = icmp eq i32 %8983, 2
  %8985 = zext i1 %8984 to i8
  store i8 %8985, i8* %45, align 1
  %8986 = add i64 %8955, -28
  %8987 = add i64 %8954, 16
  store i64 %8987, i64* %3, align 8
  %8988 = inttoptr i64 %8986 to i32*
  %8989 = load i32, i32* %8988, align 4
  %8990 = add i32 %8989, 2
  %8991 = zext i32 %8990 to i64
  store i64 %8991, i64* %RSI.i5212, align 8
  %8992 = lshr i32 %8990, 31
  %8993 = sub i32 %8964, %8990
  %8994 = icmp ult i32 %8964, %8990
  %8995 = zext i1 %8994 to i8
  store i8 %8995, i8* %20, align 1
  %8996 = and i32 %8993, 255
  %8997 = tail call i32 @llvm.ctpop.i32(i32 %8996)
  %8998 = trunc i32 %8997 to i8
  %8999 = and i8 %8998, 1
  %9000 = xor i8 %8999, 1
  store i8 %9000, i8* %27, align 1
  %9001 = xor i32 %8990, %8964
  %9002 = xor i32 %9001, %8993
  %9003 = lshr i32 %9002, 4
  %9004 = trunc i32 %9003 to i8
  %9005 = and i8 %9004, 1
  store i8 %9005, i8* %33, align 1
  %9006 = icmp eq i32 %8993, 0
  %9007 = zext i1 %9006 to i8
  store i8 %9007, i8* %36, align 1
  %9008 = lshr i32 %8993, 31
  %9009 = trunc i32 %9008 to i8
  store i8 %9009, i8* %39, align 1
  %9010 = xor i32 %8992, %8979
  %9011 = xor i32 %9008, %8979
  %9012 = add nuw nsw i32 %9011, %9010
  %9013 = icmp eq i32 %9012, 2
  %9014 = zext i1 %9013 to i8
  store i8 %9014, i8* %45, align 1
  %9015 = load i64, i64* %RBP.i, align 8
  %9016 = add i64 %9015, -728
  %9017 = load i32, i32* %ECX.i3256, align 4
  %9018 = add i64 %8954, 27
  store i64 %9018, i64* %3, align 8
  %9019 = inttoptr i64 %9016 to i32*
  store i32 %9017, i32* %9019, align 4
  %9020 = load i64, i64* %RBP.i, align 8
  %9021 = add i64 %9020, -736
  %9022 = load i64, i64* %RDI.i605, align 8
  %9023 = load i64, i64* %3, align 8
  %9024 = add i64 %9023, 7
  store i64 %9024, i64* %3, align 8
  %9025 = inttoptr i64 %9021 to i64*
  store i64 %9022, i64* %9025, align 8
  %9026 = load i64, i64* %3, align 8
  %9027 = load i8, i8* %39, align 1
  %9028 = icmp ne i8 %9027, 0
  %9029 = load i8, i8* %45, align 1
  %9030 = icmp ne i8 %9029, 0
  %9031 = xor i1 %9028, %9030
  %.v395 = select i1 %9031, i64 6, i64 23
  %9032 = add i64 %9026, %.v395
  store i64 %9032, i64* %3, align 8
  %9033 = load i64, i64* %RBP.i, align 8
  br i1 %9031, label %block_42f3a4, label %block_.L_42f3b5

block_42f3a4:                                     ; preds = %block_.L_42f337
  %9034 = add i64 %9033, -40
  %9035 = add i64 %9032, 3
  store i64 %9035, i64* %3, align 8
  %9036 = inttoptr i64 %9034 to i32*
  %9037 = load i32, i32* %9036, align 4
  %9038 = add i32 %9037, 2
  %9039 = zext i32 %9038 to i64
  store i64 %9039, i64* %RAX.i1585, align 8
  %9040 = icmp ugt i32 %9037, -3
  %9041 = zext i1 %9040 to i8
  store i8 %9041, i8* %20, align 1
  %9042 = and i32 %9038, 255
  %9043 = tail call i32 @llvm.ctpop.i32(i32 %9042)
  %9044 = trunc i32 %9043 to i8
  %9045 = and i8 %9044, 1
  %9046 = xor i8 %9045, 1
  store i8 %9046, i8* %27, align 1
  %9047 = xor i32 %9038, %9037
  %9048 = lshr i32 %9047, 4
  %9049 = trunc i32 %9048 to i8
  %9050 = and i8 %9049, 1
  store i8 %9050, i8* %33, align 1
  %9051 = icmp eq i32 %9038, 0
  %9052 = zext i1 %9051 to i8
  store i8 %9052, i8* %36, align 1
  %9053 = lshr i32 %9038, 31
  %9054 = trunc i32 %9053 to i8
  store i8 %9054, i8* %39, align 1
  %9055 = lshr i32 %9037, 31
  %9056 = xor i32 %9053, %9055
  %9057 = add nuw nsw i32 %9056, %9053
  %9058 = icmp eq i32 %9057, 2
  %9059 = zext i1 %9058 to i8
  store i8 %9059, i8* %45, align 1
  %9060 = add i64 %9033, -740
  %9061 = add i64 %9032, 12
  store i64 %9061, i64* %3, align 8
  %9062 = inttoptr i64 %9060 to i32*
  store i32 %9038, i32* %9062, align 4
  %9063 = load i64, i64* %3, align 8
  %9064 = add i64 %9063, 17
  store i64 %9064, i64* %3, align 8
  br label %block_.L_42f3c1

block_.L_42f3b5:                                  ; preds = %block_.L_42f337
  %9065 = add i64 %9033, -28
  %9066 = add i64 %9032, 3
  store i64 %9066, i64* %3, align 8
  %9067 = inttoptr i64 %9065 to i32*
  %9068 = load i32, i32* %9067, align 4
  %9069 = add i32 %9068, 2
  %9070 = zext i32 %9069 to i64
  store i64 %9070, i64* %RAX.i1585, align 8
  %9071 = icmp ugt i32 %9068, -3
  %9072 = zext i1 %9071 to i8
  store i8 %9072, i8* %20, align 1
  %9073 = and i32 %9069, 255
  %9074 = tail call i32 @llvm.ctpop.i32(i32 %9073)
  %9075 = trunc i32 %9074 to i8
  %9076 = and i8 %9075, 1
  %9077 = xor i8 %9076, 1
  store i8 %9077, i8* %27, align 1
  %9078 = xor i32 %9069, %9068
  %9079 = lshr i32 %9078, 4
  %9080 = trunc i32 %9079 to i8
  %9081 = and i8 %9080, 1
  store i8 %9081, i8* %33, align 1
  %9082 = icmp eq i32 %9069, 0
  %9083 = zext i1 %9082 to i8
  store i8 %9083, i8* %36, align 1
  %9084 = lshr i32 %9069, 31
  %9085 = trunc i32 %9084 to i8
  store i8 %9085, i8* %39, align 1
  %9086 = lshr i32 %9068, 31
  %9087 = xor i32 %9084, %9086
  %9088 = add nuw nsw i32 %9087, %9084
  %9089 = icmp eq i32 %9088, 2
  %9090 = zext i1 %9089 to i8
  store i8 %9090, i8* %45, align 1
  %9091 = add i64 %9033, -740
  %9092 = add i64 %9032, 12
  store i64 %9092, i64* %3, align 8
  %9093 = inttoptr i64 %9091 to i32*
  store i32 %9069, i32* %9093, align 4
  %.pre159 = load i64, i64* %3, align 8
  br label %block_.L_42f3c1

block_.L_42f3c1:                                  ; preds = %block_.L_42f3b5, %block_42f3a4
  %9094 = phi i64 [ %.pre159, %block_.L_42f3b5 ], [ %9064, %block_42f3a4 ]
  %9095 = load i64, i64* %RBP.i, align 8
  %9096 = add i64 %9095, -740
  %9097 = add i64 %9094, 6
  store i64 %9097, i64* %3, align 8
  %9098 = inttoptr i64 %9096 to i32*
  %9099 = load i32, i32* %9098, align 4
  %9100 = add i32 %9099, -16
  %9101 = zext i32 %9100 to i64
  store i64 %9101, i64* %RAX.i1585, align 8
  %9102 = icmp ult i32 %9099, 16
  %9103 = zext i1 %9102 to i8
  store i8 %9103, i8* %20, align 1
  %9104 = and i32 %9100, 255
  %9105 = tail call i32 @llvm.ctpop.i32(i32 %9104)
  %9106 = trunc i32 %9105 to i8
  %9107 = and i8 %9106, 1
  %9108 = xor i8 %9107, 1
  store i8 %9108, i8* %27, align 1
  %9109 = xor i32 %9099, 16
  %9110 = xor i32 %9109, %9100
  %9111 = lshr i32 %9110, 4
  %9112 = trunc i32 %9111 to i8
  %9113 = and i8 %9112, 1
  store i8 %9113, i8* %33, align 1
  %9114 = icmp eq i32 %9100, 0
  %9115 = zext i1 %9114 to i8
  store i8 %9115, i8* %36, align 1
  %9116 = lshr i32 %9100, 31
  %9117 = trunc i32 %9116 to i8
  store i8 %9117, i8* %39, align 1
  %9118 = lshr i32 %9099, 31
  %9119 = xor i32 %9116, %9118
  %9120 = add nuw nsw i32 %9119, %9118
  %9121 = icmp eq i32 %9120, 2
  %9122 = zext i1 %9121 to i8
  store i8 %9122, i8* %45, align 1
  %9123 = add i64 %9095, -24
  %9124 = add i64 %9094, 12
  store i64 %9124, i64* %3, align 8
  %9125 = inttoptr i64 %9123 to i32*
  %9126 = load i32, i32* %9125, align 4
  %9127 = add i32 %9126, -16
  %9128 = zext i32 %9127 to i64
  store i64 %9128, i64* %RCX.i3128, align 8
  %9129 = icmp ult i32 %9126, 16
  %9130 = zext i1 %9129 to i8
  store i8 %9130, i8* %20, align 1
  %9131 = and i32 %9127, 255
  %9132 = tail call i32 @llvm.ctpop.i32(i32 %9131)
  %9133 = trunc i32 %9132 to i8
  %9134 = and i8 %9133, 1
  %9135 = xor i8 %9134, 1
  store i8 %9135, i8* %27, align 1
  %9136 = xor i32 %9126, 16
  %9137 = xor i32 %9136, %9127
  %9138 = lshr i32 %9137, 4
  %9139 = trunc i32 %9138 to i8
  %9140 = and i8 %9139, 1
  store i8 %9140, i8* %33, align 1
  %9141 = icmp eq i32 %9127, 0
  %9142 = zext i1 %9141 to i8
  store i8 %9142, i8* %36, align 1
  %9143 = lshr i32 %9127, 31
  %9144 = trunc i32 %9143 to i8
  store i8 %9144, i8* %39, align 1
  %9145 = lshr i32 %9126, 31
  %9146 = xor i32 %9143, %9145
  %9147 = add nuw nsw i32 %9146, %9145
  %9148 = icmp eq i32 %9147, 2
  %9149 = zext i1 %9148 to i8
  store i8 %9149, i8* %45, align 1
  %9150 = add i64 %9095, -80
  %9151 = add i64 %9094, 18
  store i64 %9151, i64* %3, align 8
  %9152 = inttoptr i64 %9150 to i32*
  %9153 = load i32, i32* %9152, align 4
  %9154 = zext i32 %9153 to i64
  store i64 %9154, i64* %RDX.i5152, align 8
  %9155 = add i64 %9095, -76
  %9156 = add i64 %9094, 22
  store i64 %9156, i64* %3, align 8
  %9157 = inttoptr i64 %9155 to i32*
  %9158 = load i32, i32* %9157, align 4
  %9159 = zext i32 %9158 to i64
  store i64 %9159, i64* %600, align 8
  %9160 = add i64 %9095, -736
  %9161 = add i64 %9094, 29
  store i64 %9161, i64* %3, align 8
  %9162 = inttoptr i64 %9160 to i64*
  %9163 = load i64, i64* %9162, align 8
  store i64 %9163, i64* %RDI.i605, align 8
  store i64 %9101, i64* %RSI.i5212, align 8
  %9164 = load i64, i64* %RBP.i, align 8
  %9165 = add i64 %9164, -744
  %9166 = add i64 %9094, 37
  store i64 %9166, i64* %3, align 8
  %9167 = inttoptr i64 %9165 to i32*
  store i32 %9153, i32* %9167, align 4
  %9168 = load i32, i32* %ECX.i3256, align 4
  %9169 = zext i32 %9168 to i64
  %9170 = load i64, i64* %3, align 8
  store i64 %9169, i64* %RDX.i5152, align 8
  %9171 = load i64, i64* %RBP.i, align 8
  %9172 = add i64 %9171, -744
  %9173 = add i64 %9170, 8
  store i64 %9173, i64* %3, align 8
  %9174 = inttoptr i64 %9172 to i32*
  %9175 = load i32, i32* %9174, align 4
  %9176 = zext i32 %9175 to i64
  store i64 %9176, i64* %RCX.i3128, align 8
  %9177 = add i64 %9170, 455978
  %9178 = add i64 %9170, 13
  %9179 = load i64, i64* %6, align 8
  %9180 = add i64 %9179, -8
  %9181 = inttoptr i64 %9180 to i64*
  store i64 %9178, i64* %9181, align 8
  store i64 %9180, i64* %6, align 8
  store i64 %9177, i64* %3, align 8
  %call2_42f3ee = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %9177, %struct.Memory* %call2_42f377)
  %9182 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %9183 = load i16, i16* %AX.i3315, align 2
  %9184 = zext i16 %9183 to i64
  store i64 %9184, i64* %RDX.i5152, align 8
  %9185 = load i64, i64* %RBP.i, align 8
  %9186 = add i64 %9185, -728
  %9187 = add i64 %9182, 14
  store i64 %9187, i64* %3, align 8
  %9188 = inttoptr i64 %9186 to i32*
  %9189 = load i32, i32* %9188, align 4
  %9190 = zext i16 %9183 to i32
  %9191 = add i32 %9190, %9189
  %9192 = lshr i32 %9191, 31
  %9193 = add i32 %9191, 1
  %9194 = zext i32 %9193 to i64
  store i64 %9194, i64* %RSI.i5212, align 8
  %9195 = icmp eq i32 %9191, -1
  %9196 = icmp eq i32 %9193, 0
  %9197 = or i1 %9195, %9196
  %9198 = zext i1 %9197 to i8
  store i8 %9198, i8* %20, align 1
  %9199 = and i32 %9193, 255
  %9200 = tail call i32 @llvm.ctpop.i32(i32 %9199)
  %9201 = trunc i32 %9200 to i8
  %9202 = and i8 %9201, 1
  %9203 = xor i8 %9202, 1
  store i8 %9203, i8* %27, align 1
  %9204 = xor i32 %9193, %9191
  %9205 = lshr i32 %9204, 4
  %9206 = trunc i32 %9205 to i8
  %9207 = and i8 %9206, 1
  store i8 %9207, i8* %33, align 1
  %9208 = zext i1 %9196 to i8
  store i8 %9208, i8* %36, align 1
  %9209 = lshr i32 %9193, 31
  %9210 = trunc i32 %9209 to i8
  store i8 %9210, i8* %39, align 1
  %9211 = xor i32 %9209, %9192
  %9212 = add nuw nsw i32 %9211, %9209
  %9213 = icmp eq i32 %9212, 2
  %9214 = zext i1 %9213 to i8
  store i8 %9214, i8* %45, align 1
  store i64 %9194, i64* %RAX.i1585, align 8
  %9215 = sext i32 %9193 to i64
  %9216 = lshr i64 %9215, 32
  store i64 %9216, i64* %3718, align 8
  %9217 = add i64 %9182, 24
  store i64 %9217, i64* %3, align 8
  %9218 = shl nuw i64 %9216, 32
  %9219 = or i64 %9218, %9194
  %9220 = sdiv i64 %9219, 2
  %9221 = shl i64 %9220, 32
  %9222 = ashr exact i64 %9221, 32
  %9223 = icmp eq i64 %9220, %9222
  br i1 %9223, label %9226, label %9224

; <label>:9224:                                   ; preds = %block_.L_42f3c1
  %9225 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9217, %struct.Memory* %call2_42f3ee)
  %.pre160 = load i64, i64* %RBP.i, align 8
  %.pre161 = load i64, i64* %3, align 8
  %.pre162 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__ecx.exit1851

; <label>:9226:                                   ; preds = %block_.L_42f3c1
  %9227 = srem i64 %9219, 2
  %9228 = and i64 %9220, 4294967295
  store i64 %9228, i64* %RAX.i1585, align 8
  %9229 = and i64 %9227, 4294967295
  store i64 %9229, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9230 = trunc i64 %9220 to i32
  br label %routine_idivl__ecx.exit1851

routine_idivl__ecx.exit1851:                      ; preds = %9226, %9224
  %9231 = phi i32 [ %.pre162, %9224 ], [ %9230, %9226 ]
  %9232 = phi i64 [ %.pre161, %9224 ], [ %9217, %9226 ]
  %9233 = phi i64 [ %.pre160, %9224 ], [ %9185, %9226 ]
  %9234 = phi %struct.Memory* [ %9225, %9224 ], [ %call2_42f3ee, %9226 ]
  %9235 = add i64 %9233, -724
  %9236 = add i64 %9232, 6
  store i64 %9236, i64* %3, align 8
  %9237 = inttoptr i64 %9235 to i32*
  %9238 = load i32, i32* %9237, align 4
  %9239 = zext i32 %9238 to i64
  store i64 %9239, i64* %RCX.i3128, align 8
  %9240 = sub i32 %9238, %9231
  %9241 = icmp ult i32 %9238, %9231
  %9242 = zext i1 %9241 to i8
  store i8 %9242, i8* %20, align 1
  %9243 = and i32 %9240, 255
  %9244 = tail call i32 @llvm.ctpop.i32(i32 %9243)
  %9245 = trunc i32 %9244 to i8
  %9246 = and i8 %9245, 1
  %9247 = xor i8 %9246, 1
  store i8 %9247, i8* %27, align 1
  %9248 = xor i32 %9231, %9238
  %9249 = xor i32 %9248, %9240
  %9250 = lshr i32 %9249, 4
  %9251 = trunc i32 %9250 to i8
  %9252 = and i8 %9251, 1
  store i8 %9252, i8* %33, align 1
  %9253 = icmp eq i32 %9240, 0
  %9254 = zext i1 %9253 to i8
  store i8 %9254, i8* %36, align 1
  %9255 = lshr i32 %9240, 31
  %9256 = trunc i32 %9255 to i8
  store i8 %9256, i8* %39, align 1
  %9257 = lshr i32 %9238, 31
  %9258 = lshr i32 %9231, 31
  %9259 = xor i32 %9258, %9257
  %9260 = xor i32 %9255, %9257
  %9261 = add nuw nsw i32 %9260, %9259
  %9262 = icmp eq i32 %9261, 2
  %9263 = zext i1 %9262 to i8
  store i8 %9263, i8* %45, align 1
  %9264 = icmp ne i8 %9256, 0
  %9265 = xor i1 %9264, %9262
  %.v339 = select i1 %9265, i64 14, i64 39
  %9266 = add i64 %9232, %.v339
  store i64 %9266, i64* %3, align 8
  br i1 %9265, label %block_42f419, label %block_.L_42f432

block_42f419:                                     ; preds = %routine_idivl__ecx.exit1851
  %9267 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9267, i64* %RAX.i1585, align 8
  %9268 = add i64 %9267, 72684
  %9269 = add i64 %9266, 14
  store i64 %9269, i64* %3, align 8
  %9270 = inttoptr i64 %9268 to i32*
  %9271 = load i32, i32* %9270, align 4
  %9272 = zext i32 %9271 to i64
  store i64 %9272, i64* %RCX.i3128, align 8
  %9273 = add i64 %9233, -748
  %9274 = add i64 %9266, 20
  store i64 %9274, i64* %3, align 8
  %9275 = inttoptr i64 %9273 to i32*
  store i32 %9271, i32* %9275, align 4
  %9276 = load i64, i64* %3, align 8
  %9277 = add i64 %9276, 198
  store i64 %9277, i64* %3, align 8
  br label %block_.L_42f4f3

block_.L_42f432:                                  ; preds = %routine_idivl__ecx.exit1851
  %9278 = add i64 %9233, -56
  %9279 = add i64 %9266, 4
  store i64 %9279, i64* %3, align 8
  %9280 = inttoptr i64 %9278 to i64*
  %9281 = load i64, i64* %9280, align 8
  store i64 %9281, i64* %RDI.i605, align 8
  %9282 = add i64 %9233, -28
  %9283 = add i64 %9266, 7
  store i64 %9283, i64* %3, align 8
  %9284 = inttoptr i64 %9282 to i32*
  %9285 = load i32, i32* %9284, align 4
  %9286 = add i32 %9285, -16
  %9287 = zext i32 %9286 to i64
  store i64 %9287, i64* %RAX.i1585, align 8
  %9288 = icmp ult i32 %9285, 16
  %9289 = zext i1 %9288 to i8
  store i8 %9289, i8* %20, align 1
  %9290 = and i32 %9286, 255
  %9291 = tail call i32 @llvm.ctpop.i32(i32 %9290)
  %9292 = trunc i32 %9291 to i8
  %9293 = and i8 %9292, 1
  %9294 = xor i8 %9293, 1
  store i8 %9294, i8* %27, align 1
  %9295 = xor i32 %9285, 16
  %9296 = xor i32 %9295, %9286
  %9297 = lshr i32 %9296, 4
  %9298 = trunc i32 %9297 to i8
  %9299 = and i8 %9298, 1
  store i8 %9299, i8* %33, align 1
  %9300 = icmp eq i32 %9286, 0
  %9301 = zext i1 %9300 to i8
  store i8 %9301, i8* %36, align 1
  %9302 = lshr i32 %9286, 31
  %9303 = trunc i32 %9302 to i8
  store i8 %9303, i8* %39, align 1
  %9304 = lshr i32 %9285, 31
  %9305 = xor i32 %9302, %9304
  %9306 = add nuw nsw i32 %9305, %9304
  %9307 = icmp eq i32 %9306, 2
  %9308 = zext i1 %9307 to i8
  store i8 %9308, i8* %45, align 1
  %9309 = add i64 %9233, -24
  %9310 = add i64 %9266, 13
  store i64 %9310, i64* %3, align 8
  %9311 = inttoptr i64 %9309 to i32*
  %9312 = load i32, i32* %9311, align 4
  %9313 = add i32 %9312, -16
  %9314 = zext i32 %9313 to i64
  store i64 %9314, i64* %RCX.i3128, align 8
  %9315 = icmp ult i32 %9312, 16
  %9316 = zext i1 %9315 to i8
  store i8 %9316, i8* %20, align 1
  %9317 = and i32 %9313, 255
  %9318 = tail call i32 @llvm.ctpop.i32(i32 %9317)
  %9319 = trunc i32 %9318 to i8
  %9320 = and i8 %9319, 1
  %9321 = xor i8 %9320, 1
  store i8 %9321, i8* %27, align 1
  %9322 = xor i32 %9312, 16
  %9323 = xor i32 %9322, %9313
  %9324 = lshr i32 %9323, 4
  %9325 = trunc i32 %9324 to i8
  %9326 = and i8 %9325, 1
  store i8 %9326, i8* %33, align 1
  %9327 = icmp eq i32 %9313, 0
  %9328 = zext i1 %9327 to i8
  store i8 %9328, i8* %36, align 1
  %9329 = lshr i32 %9313, 31
  %9330 = trunc i32 %9329 to i8
  store i8 %9330, i8* %39, align 1
  %9331 = lshr i32 %9312, 31
  %9332 = xor i32 %9329, %9331
  %9333 = add nuw nsw i32 %9332, %9331
  %9334 = icmp eq i32 %9333, 2
  %9335 = zext i1 %9334 to i8
  store i8 %9335, i8* %45, align 1
  %9336 = add i64 %9233, -80
  %9337 = add i64 %9266, 19
  store i64 %9337, i64* %3, align 8
  %9338 = inttoptr i64 %9336 to i32*
  %9339 = load i32, i32* %9338, align 4
  %9340 = zext i32 %9339 to i64
  store i64 %9340, i64* %RDX.i5152, align 8
  %9341 = add i64 %9233, -76
  %9342 = add i64 %9266, 23
  store i64 %9342, i64* %3, align 8
  %9343 = inttoptr i64 %9341 to i32*
  %9344 = load i32, i32* %9343, align 4
  %9345 = zext i32 %9344 to i64
  store i64 %9345, i64* %600, align 8
  store i64 %9287, i64* %RSI.i5212, align 8
  %9346 = load i64, i64* %RBP.i, align 8
  %9347 = add i64 %9346, -752
  %9348 = add i64 %9266, 31
  store i64 %9348, i64* %3, align 8
  %9349 = inttoptr i64 %9347 to i32*
  store i32 %9339, i32* %9349, align 4
  %9350 = load i32, i32* %ECX.i3256, align 4
  %9351 = zext i32 %9350 to i64
  %9352 = load i64, i64* %3, align 8
  store i64 %9351, i64* %RDX.i5152, align 8
  %9353 = load i64, i64* %RBP.i, align 8
  %9354 = add i64 %9353, -752
  %9355 = add i64 %9352, 8
  store i64 %9355, i64* %3, align 8
  %9356 = inttoptr i64 %9354 to i32*
  %9357 = load i32, i32* %9356, align 4
  %9358 = zext i32 %9357 to i64
  store i64 %9358, i64* %RCX.i3128, align 8
  %9359 = add i64 %9352, 455871
  %9360 = add i64 %9352, 13
  %9361 = load i64, i64* %6, align 8
  %9362 = add i64 %9361, -8
  %9363 = inttoptr i64 %9362 to i64*
  store i64 %9360, i64* %9363, align 8
  store i64 %9362, i64* %6, align 8
  store i64 %9359, i64* %3, align 8
  %call2_42f459 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %9359, %struct.Memory* %9234)
  %9364 = load i16, i16* %AX.i3315, align 2
  %9365 = zext i16 %9364 to i64
  %9366 = load i64, i64* %3, align 8
  store i64 %9365, i64* %RCX.i3128, align 8
  %9367 = load i64, i64* %RBP.i, align 8
  %9368 = add i64 %9367, -56
  %9369 = add i64 %9366, 7
  store i64 %9369, i64* %3, align 8
  %9370 = inttoptr i64 %9368 to i64*
  %9371 = load i64, i64* %9370, align 8
  store i64 %9371, i64* %RDI.i605, align 8
  %9372 = add i64 %9367, -40
  %9373 = add i64 %9366, 10
  store i64 %9373, i64* %3, align 8
  %9374 = inttoptr i64 %9372 to i32*
  %9375 = load i32, i32* %9374, align 4
  %9376 = add i32 %9375, 2
  %9377 = zext i32 %9376 to i64
  store i64 %9377, i64* %RDX.i5152, align 8
  %9378 = icmp ugt i32 %9375, -3
  %9379 = zext i1 %9378 to i8
  store i8 %9379, i8* %20, align 1
  %9380 = and i32 %9376, 255
  %9381 = tail call i32 @llvm.ctpop.i32(i32 %9380)
  %9382 = trunc i32 %9381 to i8
  %9383 = and i8 %9382, 1
  %9384 = xor i8 %9383, 1
  store i8 %9384, i8* %27, align 1
  %9385 = xor i32 %9376, %9375
  %9386 = lshr i32 %9385, 4
  %9387 = trunc i32 %9386 to i8
  %9388 = and i8 %9387, 1
  store i8 %9388, i8* %33, align 1
  %9389 = icmp eq i32 %9376, 0
  %9390 = zext i1 %9389 to i8
  store i8 %9390, i8* %36, align 1
  %9391 = lshr i32 %9376, 31
  %9392 = trunc i32 %9391 to i8
  store i8 %9392, i8* %39, align 1
  %9393 = lshr i32 %9375, 31
  %9394 = xor i32 %9391, %9393
  %9395 = add nuw nsw i32 %9394, %9391
  %9396 = icmp eq i32 %9395, 2
  %9397 = zext i1 %9396 to i8
  store i8 %9397, i8* %45, align 1
  %9398 = add i64 %9367, -28
  %9399 = add i64 %9366, 16
  store i64 %9399, i64* %3, align 8
  %9400 = inttoptr i64 %9398 to i32*
  %9401 = load i32, i32* %9400, align 4
  %9402 = add i32 %9401, 2
  %9403 = zext i32 %9402 to i64
  store i64 %9403, i64* %RSI.i5212, align 8
  %9404 = lshr i32 %9402, 31
  %9405 = sub i32 %9376, %9402
  %9406 = icmp ult i32 %9376, %9402
  %9407 = zext i1 %9406 to i8
  store i8 %9407, i8* %20, align 1
  %9408 = and i32 %9405, 255
  %9409 = tail call i32 @llvm.ctpop.i32(i32 %9408)
  %9410 = trunc i32 %9409 to i8
  %9411 = and i8 %9410, 1
  %9412 = xor i8 %9411, 1
  store i8 %9412, i8* %27, align 1
  %9413 = xor i32 %9402, %9376
  %9414 = xor i32 %9413, %9405
  %9415 = lshr i32 %9414, 4
  %9416 = trunc i32 %9415 to i8
  %9417 = and i8 %9416, 1
  store i8 %9417, i8* %33, align 1
  %9418 = icmp eq i32 %9405, 0
  %9419 = zext i1 %9418 to i8
  store i8 %9419, i8* %36, align 1
  %9420 = lshr i32 %9405, 31
  %9421 = trunc i32 %9420 to i8
  store i8 %9421, i8* %39, align 1
  %9422 = xor i32 %9404, %9391
  %9423 = xor i32 %9420, %9391
  %9424 = add nuw nsw i32 %9423, %9422
  %9425 = icmp eq i32 %9424, 2
  %9426 = zext i1 %9425 to i8
  store i8 %9426, i8* %45, align 1
  %9427 = load i64, i64* %RBP.i, align 8
  %9428 = add i64 %9427, -756
  %9429 = load i32, i32* %ECX.i3256, align 4
  %9430 = add i64 %9366, 27
  store i64 %9430, i64* %3, align 8
  %9431 = inttoptr i64 %9428 to i32*
  store i32 %9429, i32* %9431, align 4
  %9432 = load i64, i64* %RBP.i, align 8
  %9433 = add i64 %9432, -768
  %9434 = load i64, i64* %RDI.i605, align 8
  %9435 = load i64, i64* %3, align 8
  %9436 = add i64 %9435, 7
  store i64 %9436, i64* %3, align 8
  %9437 = inttoptr i64 %9433 to i64*
  store i64 %9434, i64* %9437, align 8
  %9438 = load i64, i64* %3, align 8
  %9439 = load i8, i8* %39, align 1
  %9440 = icmp ne i8 %9439, 0
  %9441 = load i8, i8* %45, align 1
  %9442 = icmp ne i8 %9441, 0
  %9443 = xor i1 %9440, %9442
  %.v396 = select i1 %9443, i64 6, i64 23
  %9444 = add i64 %9438, %.v396
  store i64 %9444, i64* %3, align 8
  %9445 = load i64, i64* %RBP.i, align 8
  br i1 %9443, label %block_42f486, label %block_.L_42f497

block_42f486:                                     ; preds = %block_.L_42f432
  %9446 = add i64 %9445, -40
  %9447 = add i64 %9444, 3
  store i64 %9447, i64* %3, align 8
  %9448 = inttoptr i64 %9446 to i32*
  %9449 = load i32, i32* %9448, align 4
  %9450 = add i32 %9449, 2
  %9451 = zext i32 %9450 to i64
  store i64 %9451, i64* %RAX.i1585, align 8
  %9452 = icmp ugt i32 %9449, -3
  %9453 = zext i1 %9452 to i8
  store i8 %9453, i8* %20, align 1
  %9454 = and i32 %9450, 255
  %9455 = tail call i32 @llvm.ctpop.i32(i32 %9454)
  %9456 = trunc i32 %9455 to i8
  %9457 = and i8 %9456, 1
  %9458 = xor i8 %9457, 1
  store i8 %9458, i8* %27, align 1
  %9459 = xor i32 %9450, %9449
  %9460 = lshr i32 %9459, 4
  %9461 = trunc i32 %9460 to i8
  %9462 = and i8 %9461, 1
  store i8 %9462, i8* %33, align 1
  %9463 = icmp eq i32 %9450, 0
  %9464 = zext i1 %9463 to i8
  store i8 %9464, i8* %36, align 1
  %9465 = lshr i32 %9450, 31
  %9466 = trunc i32 %9465 to i8
  store i8 %9466, i8* %39, align 1
  %9467 = lshr i32 %9449, 31
  %9468 = xor i32 %9465, %9467
  %9469 = add nuw nsw i32 %9468, %9465
  %9470 = icmp eq i32 %9469, 2
  %9471 = zext i1 %9470 to i8
  store i8 %9471, i8* %45, align 1
  %9472 = add i64 %9445, -772
  %9473 = add i64 %9444, 12
  store i64 %9473, i64* %3, align 8
  %9474 = inttoptr i64 %9472 to i32*
  store i32 %9450, i32* %9474, align 4
  %9475 = load i64, i64* %3, align 8
  %9476 = add i64 %9475, 17
  store i64 %9476, i64* %3, align 8
  br label %block_.L_42f4a3

block_.L_42f497:                                  ; preds = %block_.L_42f432
  %9477 = add i64 %9445, -28
  %9478 = add i64 %9444, 3
  store i64 %9478, i64* %3, align 8
  %9479 = inttoptr i64 %9477 to i32*
  %9480 = load i32, i32* %9479, align 4
  %9481 = add i32 %9480, 2
  %9482 = zext i32 %9481 to i64
  store i64 %9482, i64* %RAX.i1585, align 8
  %9483 = icmp ugt i32 %9480, -3
  %9484 = zext i1 %9483 to i8
  store i8 %9484, i8* %20, align 1
  %9485 = and i32 %9481, 255
  %9486 = tail call i32 @llvm.ctpop.i32(i32 %9485)
  %9487 = trunc i32 %9486 to i8
  %9488 = and i8 %9487, 1
  %9489 = xor i8 %9488, 1
  store i8 %9489, i8* %27, align 1
  %9490 = xor i32 %9481, %9480
  %9491 = lshr i32 %9490, 4
  %9492 = trunc i32 %9491 to i8
  %9493 = and i8 %9492, 1
  store i8 %9493, i8* %33, align 1
  %9494 = icmp eq i32 %9481, 0
  %9495 = zext i1 %9494 to i8
  store i8 %9495, i8* %36, align 1
  %9496 = lshr i32 %9481, 31
  %9497 = trunc i32 %9496 to i8
  store i8 %9497, i8* %39, align 1
  %9498 = lshr i32 %9480, 31
  %9499 = xor i32 %9496, %9498
  %9500 = add nuw nsw i32 %9499, %9496
  %9501 = icmp eq i32 %9500, 2
  %9502 = zext i1 %9501 to i8
  store i8 %9502, i8* %45, align 1
  %9503 = add i64 %9445, -772
  %9504 = add i64 %9444, 12
  store i64 %9504, i64* %3, align 8
  %9505 = inttoptr i64 %9503 to i32*
  store i32 %9481, i32* %9505, align 4
  %.pre163 = load i64, i64* %3, align 8
  br label %block_.L_42f4a3

block_.L_42f4a3:                                  ; preds = %block_.L_42f497, %block_42f486
  %9506 = phi i64 [ %.pre163, %block_.L_42f497 ], [ %9476, %block_42f486 ]
  %9507 = load i64, i64* %RBP.i, align 8
  %9508 = add i64 %9507, -772
  %9509 = add i64 %9506, 6
  store i64 %9509, i64* %3, align 8
  %9510 = inttoptr i64 %9508 to i32*
  %9511 = load i32, i32* %9510, align 4
  %9512 = add i32 %9511, -16
  %9513 = zext i32 %9512 to i64
  store i64 %9513, i64* %RAX.i1585, align 8
  %9514 = icmp ult i32 %9511, 16
  %9515 = zext i1 %9514 to i8
  store i8 %9515, i8* %20, align 1
  %9516 = and i32 %9512, 255
  %9517 = tail call i32 @llvm.ctpop.i32(i32 %9516)
  %9518 = trunc i32 %9517 to i8
  %9519 = and i8 %9518, 1
  %9520 = xor i8 %9519, 1
  store i8 %9520, i8* %27, align 1
  %9521 = xor i32 %9511, 16
  %9522 = xor i32 %9521, %9512
  %9523 = lshr i32 %9522, 4
  %9524 = trunc i32 %9523 to i8
  %9525 = and i8 %9524, 1
  store i8 %9525, i8* %33, align 1
  %9526 = icmp eq i32 %9512, 0
  %9527 = zext i1 %9526 to i8
  store i8 %9527, i8* %36, align 1
  %9528 = lshr i32 %9512, 31
  %9529 = trunc i32 %9528 to i8
  store i8 %9529, i8* %39, align 1
  %9530 = lshr i32 %9511, 31
  %9531 = xor i32 %9528, %9530
  %9532 = add nuw nsw i32 %9531, %9530
  %9533 = icmp eq i32 %9532, 2
  %9534 = zext i1 %9533 to i8
  store i8 %9534, i8* %45, align 1
  %9535 = add i64 %9507, -24
  %9536 = add i64 %9506, 12
  store i64 %9536, i64* %3, align 8
  %9537 = inttoptr i64 %9535 to i32*
  %9538 = load i32, i32* %9537, align 4
  %9539 = add i32 %9538, -16
  %9540 = zext i32 %9539 to i64
  store i64 %9540, i64* %RCX.i3128, align 8
  %9541 = icmp ult i32 %9538, 16
  %9542 = zext i1 %9541 to i8
  store i8 %9542, i8* %20, align 1
  %9543 = and i32 %9539, 255
  %9544 = tail call i32 @llvm.ctpop.i32(i32 %9543)
  %9545 = trunc i32 %9544 to i8
  %9546 = and i8 %9545, 1
  %9547 = xor i8 %9546, 1
  store i8 %9547, i8* %27, align 1
  %9548 = xor i32 %9538, 16
  %9549 = xor i32 %9548, %9539
  %9550 = lshr i32 %9549, 4
  %9551 = trunc i32 %9550 to i8
  %9552 = and i8 %9551, 1
  store i8 %9552, i8* %33, align 1
  %9553 = icmp eq i32 %9539, 0
  %9554 = zext i1 %9553 to i8
  store i8 %9554, i8* %36, align 1
  %9555 = lshr i32 %9539, 31
  %9556 = trunc i32 %9555 to i8
  store i8 %9556, i8* %39, align 1
  %9557 = lshr i32 %9538, 31
  %9558 = xor i32 %9555, %9557
  %9559 = add nuw nsw i32 %9558, %9557
  %9560 = icmp eq i32 %9559, 2
  %9561 = zext i1 %9560 to i8
  store i8 %9561, i8* %45, align 1
  %9562 = add i64 %9507, -80
  %9563 = add i64 %9506, 18
  store i64 %9563, i64* %3, align 8
  %9564 = inttoptr i64 %9562 to i32*
  %9565 = load i32, i32* %9564, align 4
  %9566 = zext i32 %9565 to i64
  store i64 %9566, i64* %RDX.i5152, align 8
  %9567 = add i64 %9507, -76
  %9568 = add i64 %9506, 22
  store i64 %9568, i64* %3, align 8
  %9569 = inttoptr i64 %9567 to i32*
  %9570 = load i32, i32* %9569, align 4
  %9571 = zext i32 %9570 to i64
  store i64 %9571, i64* %600, align 8
  %9572 = add i64 %9507, -768
  %9573 = add i64 %9506, 29
  store i64 %9573, i64* %3, align 8
  %9574 = inttoptr i64 %9572 to i64*
  %9575 = load i64, i64* %9574, align 8
  store i64 %9575, i64* %RDI.i605, align 8
  store i64 %9513, i64* %RSI.i5212, align 8
  %9576 = load i64, i64* %RBP.i, align 8
  %9577 = add i64 %9576, -776
  %9578 = add i64 %9506, 37
  store i64 %9578, i64* %3, align 8
  %9579 = inttoptr i64 %9577 to i32*
  store i32 %9565, i32* %9579, align 4
  %9580 = load i32, i32* %ECX.i3256, align 4
  %9581 = zext i32 %9580 to i64
  %9582 = load i64, i64* %3, align 8
  store i64 %9581, i64* %RDX.i5152, align 8
  %9583 = load i64, i64* %RBP.i, align 8
  %9584 = add i64 %9583, -776
  %9585 = add i64 %9582, 8
  store i64 %9585, i64* %3, align 8
  %9586 = inttoptr i64 %9584 to i32*
  %9587 = load i32, i32* %9586, align 4
  %9588 = zext i32 %9587 to i64
  store i64 %9588, i64* %RCX.i3128, align 8
  %9589 = add i64 %9582, 455752
  %9590 = add i64 %9582, 13
  %9591 = load i64, i64* %6, align 8
  %9592 = add i64 %9591, -8
  %9593 = inttoptr i64 %9592 to i64*
  store i64 %9590, i64* %9593, align 8
  store i64 %9592, i64* %6, align 8
  store i64 %9589, i64* %3, align 8
  %call2_42f4d0 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %9589, %struct.Memory* %call2_42f459)
  %9594 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %9595 = load i16, i16* %AX.i3315, align 2
  %9596 = zext i16 %9595 to i64
  store i64 %9596, i64* %RDX.i5152, align 8
  %9597 = load i64, i64* %RBP.i, align 8
  %9598 = add i64 %9597, -756
  %9599 = add i64 %9594, 14
  store i64 %9599, i64* %3, align 8
  %9600 = inttoptr i64 %9598 to i32*
  %9601 = load i32, i32* %9600, align 4
  %9602 = zext i16 %9595 to i32
  %9603 = add i32 %9602, %9601
  %9604 = lshr i32 %9603, 31
  %9605 = add i32 %9603, 1
  %9606 = zext i32 %9605 to i64
  store i64 %9606, i64* %RSI.i5212, align 8
  %9607 = icmp eq i32 %9603, -1
  %9608 = icmp eq i32 %9605, 0
  %9609 = or i1 %9607, %9608
  %9610 = zext i1 %9609 to i8
  store i8 %9610, i8* %20, align 1
  %9611 = and i32 %9605, 255
  %9612 = tail call i32 @llvm.ctpop.i32(i32 %9611)
  %9613 = trunc i32 %9612 to i8
  %9614 = and i8 %9613, 1
  %9615 = xor i8 %9614, 1
  store i8 %9615, i8* %27, align 1
  %9616 = xor i32 %9605, %9603
  %9617 = lshr i32 %9616, 4
  %9618 = trunc i32 %9617 to i8
  %9619 = and i8 %9618, 1
  store i8 %9619, i8* %33, align 1
  %9620 = zext i1 %9608 to i8
  store i8 %9620, i8* %36, align 1
  %9621 = lshr i32 %9605, 31
  %9622 = trunc i32 %9621 to i8
  store i8 %9622, i8* %39, align 1
  %9623 = xor i32 %9621, %9604
  %9624 = add nuw nsw i32 %9623, %9621
  %9625 = icmp eq i32 %9624, 2
  %9626 = zext i1 %9625 to i8
  store i8 %9626, i8* %45, align 1
  store i64 %9606, i64* %RAX.i1585, align 8
  %9627 = sext i32 %9605 to i64
  %9628 = lshr i64 %9627, 32
  store i64 %9628, i64* %3718, align 8
  %9629 = add i64 %9594, 24
  store i64 %9629, i64* %3, align 8
  %9630 = shl nuw i64 %9628, 32
  %9631 = or i64 %9630, %9606
  %9632 = sdiv i64 %9631, 2
  %9633 = shl i64 %9632, 32
  %9634 = ashr exact i64 %9633, 32
  %9635 = icmp eq i64 %9632, %9634
  br i1 %9635, label %9638, label %9636

; <label>:9636:                                   ; preds = %block_.L_42f4a3
  %9637 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9629, %struct.Memory* %call2_42f4d0)
  %.pre164 = load i64, i64* %RBP.i, align 8
  %.pre165 = load i32, i32* %EAX.i1609, align 4
  %.pre166 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1705

; <label>:9638:                                   ; preds = %block_.L_42f4a3
  %9639 = srem i64 %9631, 2
  %9640 = and i64 %9632, 4294967295
  store i64 %9640, i64* %RAX.i1585, align 8
  %9641 = and i64 %9639, 4294967295
  store i64 %9641, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9642 = trunc i64 %9632 to i32
  br label %routine_idivl__ecx.exit1705

routine_idivl__ecx.exit1705:                      ; preds = %9638, %9636
  %9643 = phi i64 [ %.pre166, %9636 ], [ %9629, %9638 ]
  %9644 = phi i32 [ %.pre165, %9636 ], [ %9642, %9638 ]
  %9645 = phi i64 [ %.pre164, %9636 ], [ %9597, %9638 ]
  %9646 = phi %struct.Memory* [ %9637, %9636 ], [ %call2_42f4d0, %9638 ]
  %9647 = add i64 %9645, -748
  %9648 = add i64 %9643, 6
  store i64 %9648, i64* %3, align 8
  %9649 = inttoptr i64 %9647 to i32*
  store i32 %9644, i32* %9649, align 4
  %.pre167 = load i64, i64* %3, align 8
  br label %block_.L_42f4f3

block_.L_42f4f3:                                  ; preds = %routine_idivl__ecx.exit1705, %block_42f419
  %9650 = phi i64 [ %.pre167, %routine_idivl__ecx.exit1705 ], [ %9277, %block_42f419 ]
  %MEMORY.60 = phi %struct.Memory* [ %9646, %routine_idivl__ecx.exit1705 ], [ %9234, %block_42f419 ]
  %9651 = load i64, i64* %RBP.i, align 8
  %9652 = add i64 %9651, -748
  %9653 = add i64 %9650, 6
  store i64 %9653, i64* %3, align 8
  %9654 = inttoptr i64 %9652 to i32*
  %9655 = load i32, i32* %9654, align 4
  %9656 = zext i32 %9655 to i64
  store i64 %9656, i64* %RAX.i1585, align 8
  %9657 = add i64 %9651, -716
  %9658 = add i64 %9650, 12
  store i64 %9658, i64* %3, align 8
  %9659 = inttoptr i64 %9657 to i32*
  store i32 %9655, i32* %9659, align 4
  %.pre168 = load i64, i64* %3, align 8
  br label %block_.L_42f4ff

block_.L_42f4ff:                                  ; preds = %block_.L_42f4f3, %block_42f32a
  %9660 = phi i64 [ %.pre168, %block_.L_42f4f3 ], [ %8850, %block_42f32a ]
  %MEMORY.61 = phi %struct.Memory* [ %MEMORY.60, %block_.L_42f4f3 ], [ %MEMORY.57, %block_42f32a ]
  %9661 = load i64, i64* %RBP.i, align 8
  %9662 = add i64 %9661, -716
  %9663 = add i64 %9660, 6
  store i64 %9663, i64* %3, align 8
  %9664 = inttoptr i64 %9662 to i32*
  %9665 = load i32, i32* %9664, align 4
  %9666 = zext i32 %9665 to i64
  store i64 %9666, i64* %RAX.i1585, align 8
  %9667 = trunc i32 %9665 to i16
  store i16 %9667, i16* %CX.i3316, align 2
  %9668 = add i64 %9661, -648
  %9669 = add i64 %9660, 16
  store i64 %9669, i64* %3, align 8
  %9670 = inttoptr i64 %9668 to i64*
  %9671 = load i64, i64* %9670, align 8
  store i64 %9671, i64* %RDI.i605, align 8
  %9672 = add i64 %9661, -660
  %9673 = add i64 %9660, 22
  store i64 %9673, i64* %3, align 8
  %9674 = inttoptr i64 %9672 to i32*
  %9675 = load i32, i32* %9674, align 4
  %9676 = zext i32 %9675 to i64
  store i64 %9676, i64* %RSI.i5212, align 8
  %9677 = add i64 %9661, -656
  %9678 = add i64 %9660, 28
  store i64 %9678, i64* %3, align 8
  %9679 = inttoptr i64 %9677 to i32*
  %9680 = load i32, i32* %9679, align 4
  %9681 = zext i32 %9680 to i64
  store i64 %9681, i64* %RDX.i5152, align 8
  %.mask = and i32 %9665, 65535
  %9682 = zext i32 %.mask to i64
  store i64 %9682, i64* %RCX.i3128, align 8
  %9683 = add i64 %9660, 453745
  %9684 = add i64 %9660, 36
  %9685 = load i64, i64* %6, align 8
  %9686 = add i64 %9685, -8
  %9687 = inttoptr i64 %9686 to i64*
  store i64 %9684, i64* %9687, align 8
  store i64 %9686, i64* %6, align 8
  store i64 %9683, i64* %3, align 8
  %call2_42f51e = tail call %struct.Memory* @sub_49e170.PutPel_14(%struct.State* nonnull %0, i64 %9683, %struct.Memory* %MEMORY.61)
  %9688 = load i64, i64* %3, align 8
  %9689 = add i64 %9688, 2638
  br label %block_.L_42ff71

block_.L_42f528:                                  ; preds = %routine_idivl__ecx.exit2323
  store i64 4, i64* %RAX.i1585, align 8
  %9690 = load i64, i64* %RBP.i, align 8
  %9691 = add i64 %9690, -28
  %9692 = add i64 %7943, 8
  store i64 %9692, i64* %3, align 8
  %9693 = inttoptr i64 %9691 to i32*
  %9694 = load i32, i32* %9693, align 4
  %9695 = zext i32 %9694 to i64
  store i64 %9695, i64* %RCX.i3128, align 8
  %9696 = add i64 %9690, -780
  %9697 = add i64 %7943, 14
  store i64 %9697, i64* %3, align 8
  %9698 = inttoptr i64 %9696 to i32*
  store i32 4, i32* %9698, align 4
  %9699 = load i32, i32* %ECX.i3256, align 4
  %9700 = zext i32 %9699 to i64
  %9701 = load i64, i64* %3, align 8
  store i64 %9700, i64* %RAX.i1585, align 8
  %9702 = sext i32 %9699 to i64
  %9703 = lshr i64 %9702, 32
  store i64 %9703, i64* %3718, align 8
  %9704 = load i64, i64* %RBP.i, align 8
  %9705 = add i64 %9704, -780
  %9706 = add i64 %9701, 9
  store i64 %9706, i64* %3, align 8
  %9707 = inttoptr i64 %9705 to i32*
  %9708 = load i32, i32* %9707, align 4
  %9709 = zext i32 %9708 to i64
  store i64 %9709, i64* %RCX.i3128, align 8
  %9710 = add i64 %9701, 11
  store i64 %9710, i64* %3, align 8
  %9711 = sext i32 %9708 to i64
  %9712 = shl nuw i64 %9703, 32
  %9713 = or i64 %9712, %9700
  %9714 = sdiv i64 %9713, %9711
  %9715 = shl i64 %9714, 32
  %9716 = ashr exact i64 %9715, 32
  %9717 = icmp eq i64 %9714, %9716
  br i1 %9717, label %9720, label %9718

; <label>:9718:                                   ; preds = %block_.L_42f528
  %9719 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9710, %struct.Memory* %7933)
  %.pre169 = load i32, i32* %EDX.i5198, align 4
  %.pre170 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1655

; <label>:9720:                                   ; preds = %block_.L_42f528
  %9721 = srem i64 %9713, %9711
  %9722 = and i64 %9714, 4294967295
  store i64 %9722, i64* %RAX.i1585, align 8
  %9723 = and i64 %9721, 4294967295
  store i64 %9723, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9724 = trunc i64 %9721 to i32
  br label %routine_idivl__ecx.exit1655

routine_idivl__ecx.exit1655:                      ; preds = %9720, %9718
  %9725 = phi i64 [ %.pre170, %9718 ], [ %9710, %9720 ]
  %9726 = phi i32 [ %.pre169, %9718 ], [ %9724, %9720 ]
  %9727 = phi %struct.Memory* [ %9719, %9718 ], [ %7933, %9720 ]
  store i8 0, i8* %20, align 1
  %9728 = and i32 %9726, 255
  %9729 = tail call i32 @llvm.ctpop.i32(i32 %9728)
  %9730 = trunc i32 %9729 to i8
  %9731 = and i8 %9730, 1
  %9732 = xor i8 %9731, 1
  store i8 %9732, i8* %27, align 1
  store i8 0, i8* %33, align 1
  %9733 = icmp eq i32 %9726, 0
  %9734 = zext i1 %9733 to i8
  store i8 %9734, i8* %36, align 1
  %9735 = lshr i32 %9726, 31
  %9736 = trunc i32 %9735 to i8
  store i8 %9736, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %.v327 = select i1 %9733, i64 9, i64 43
  %9737 = add i64 %9725, %.v327
  store i64 %9737, i64* %3, align 8
  br i1 %9733, label %block_42f54a, label %block_.L_42f56c

block_42f54a:                                     ; preds = %routine_idivl__ecx.exit1655
  store i64 4, i64* %RAX.i1585, align 8
  %9738 = load i64, i64* %RBP.i, align 8
  %9739 = add i64 %9738, -24
  %9740 = add i64 %9737, 8
  store i64 %9740, i64* %3, align 8
  %9741 = inttoptr i64 %9739 to i32*
  %9742 = load i32, i32* %9741, align 4
  %9743 = zext i32 %9742 to i64
  store i64 %9743, i64* %RCX.i3128, align 8
  %9744 = add i64 %9738, -784
  %9745 = add i64 %9737, 14
  store i64 %9745, i64* %3, align 8
  %9746 = inttoptr i64 %9744 to i32*
  store i32 4, i32* %9746, align 4
  %9747 = load i32, i32* %ECX.i3256, align 4
  %9748 = zext i32 %9747 to i64
  %9749 = load i64, i64* %3, align 8
  store i64 %9748, i64* %RAX.i1585, align 8
  %9750 = sext i32 %9747 to i64
  %9751 = lshr i64 %9750, 32
  store i64 %9751, i64* %3718, align 8
  %9752 = load i64, i64* %RBP.i, align 8
  %9753 = add i64 %9752, -784
  %9754 = add i64 %9749, 9
  store i64 %9754, i64* %3, align 8
  %9755 = inttoptr i64 %9753 to i32*
  %9756 = load i32, i32* %9755, align 4
  %9757 = zext i32 %9756 to i64
  store i64 %9757, i64* %RCX.i3128, align 8
  %9758 = add i64 %9749, 11
  store i64 %9758, i64* %3, align 8
  %9759 = sext i32 %9756 to i64
  %9760 = shl nuw i64 %9751, 32
  %9761 = or i64 %9760, %9748
  %9762 = sdiv i64 %9761, %9759
  %9763 = shl i64 %9762, 32
  %9764 = ashr exact i64 %9763, 32
  %9765 = icmp eq i64 %9762, %9764
  br i1 %9765, label %9768, label %9766

; <label>:9766:                                   ; preds = %block_42f54a
  %9767 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9758, %struct.Memory* %9727)
  %.pre171 = load i32, i32* %EDX.i5198, align 4
  %.pre172 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1631

; <label>:9768:                                   ; preds = %block_42f54a
  %9769 = srem i64 %9761, %9759
  %9770 = and i64 %9762, 4294967295
  store i64 %9770, i64* %RAX.i1585, align 8
  %9771 = and i64 %9769, 4294967295
  store i64 %9771, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9772 = trunc i64 %9769 to i32
  br label %routine_idivl__ecx.exit1631

routine_idivl__ecx.exit1631:                      ; preds = %9768, %9766
  %9773 = phi i64 [ %.pre172, %9766 ], [ %9758, %9768 ]
  %9774 = phi i32 [ %.pre171, %9766 ], [ %9772, %9768 ]
  %9775 = phi %struct.Memory* [ %9767, %9766 ], [ %9727, %9768 ]
  %9776 = add i32 %9774, -1
  %9777 = icmp eq i32 %9774, 0
  %9778 = zext i1 %9777 to i8
  store i8 %9778, i8* %20, align 1
  %9779 = and i32 %9776, 255
  %9780 = tail call i32 @llvm.ctpop.i32(i32 %9779)
  %9781 = trunc i32 %9780 to i8
  %9782 = and i8 %9781, 1
  %9783 = xor i8 %9782, 1
  store i8 %9783, i8* %27, align 1
  %9784 = xor i32 %9776, %9774
  %9785 = lshr i32 %9784, 4
  %9786 = trunc i32 %9785 to i8
  %9787 = and i8 %9786, 1
  store i8 %9787, i8* %33, align 1
  %9788 = icmp eq i32 %9776, 0
  %9789 = zext i1 %9788 to i8
  store i8 %9789, i8* %36, align 1
  %9790 = lshr i32 %9776, 31
  %9791 = trunc i32 %9790 to i8
  store i8 %9791, i8* %39, align 1
  %9792 = lshr i32 %9774, 31
  %9793 = xor i32 %9790, %9792
  %9794 = add nuw nsw i32 %9793, %9792
  %9795 = icmp eq i32 %9794, 2
  %9796 = zext i1 %9795 to i8
  store i8 %9796, i8* %45, align 1
  %.v336 = select i1 %9788, i64 77, i64 9
  %9797 = add i64 %9773, %.v336
  store i64 %9797, i64* %3, align 8
  br i1 %9788, label %block_.L_42f5b0, label %block_.L_42f56c

block_.L_42f56c:                                  ; preds = %routine_idivl__ecx.exit1655, %routine_idivl__ecx.exit1631
  %9798 = phi i64 [ %9737, %routine_idivl__ecx.exit1655 ], [ %9797, %routine_idivl__ecx.exit1631 ]
  %MEMORY.62 = phi %struct.Memory* [ %9727, %routine_idivl__ecx.exit1655 ], [ %9775, %routine_idivl__ecx.exit1631 ]
  store i64 4, i64* %RAX.i1585, align 8
  %9799 = load i64, i64* %RBP.i, align 8
  %9800 = add i64 %9799, -28
  %9801 = add i64 %9798, 8
  store i64 %9801, i64* %3, align 8
  %9802 = inttoptr i64 %9800 to i32*
  %9803 = load i32, i32* %9802, align 4
  %9804 = zext i32 %9803 to i64
  store i64 %9804, i64* %RCX.i3128, align 8
  %9805 = add i64 %9799, -788
  %9806 = add i64 %9798, 14
  store i64 %9806, i64* %3, align 8
  %9807 = inttoptr i64 %9805 to i32*
  store i32 4, i32* %9807, align 4
  %9808 = load i32, i32* %ECX.i3256, align 4
  %9809 = zext i32 %9808 to i64
  %9810 = load i64, i64* %3, align 8
  store i64 %9809, i64* %RAX.i1585, align 8
  %9811 = sext i32 %9808 to i64
  %9812 = lshr i64 %9811, 32
  store i64 %9812, i64* %3718, align 8
  %9813 = load i64, i64* %RBP.i, align 8
  %9814 = add i64 %9813, -788
  %9815 = add i64 %9810, 9
  store i64 %9815, i64* %3, align 8
  %9816 = inttoptr i64 %9814 to i32*
  %9817 = load i32, i32* %9816, align 4
  %9818 = zext i32 %9817 to i64
  store i64 %9818, i64* %RCX.i3128, align 8
  %9819 = add i64 %9810, 11
  store i64 %9819, i64* %3, align 8
  %9820 = sext i32 %9817 to i64
  %9821 = shl nuw i64 %9812, 32
  %9822 = or i64 %9821, %9809
  %9823 = sdiv i64 %9822, %9820
  %9824 = shl i64 %9823, 32
  %9825 = ashr exact i64 %9824, 32
  %9826 = icmp eq i64 %9823, %9825
  br i1 %9826, label %9829, label %9827

; <label>:9827:                                   ; preds = %block_.L_42f56c
  %9828 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9819, %struct.Memory* %MEMORY.62)
  %.pre173 = load i32, i32* %EDX.i5198, align 4
  %.pre174 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1607

; <label>:9829:                                   ; preds = %block_.L_42f56c
  %9830 = srem i64 %9822, %9820
  %9831 = and i64 %9823, 4294967295
  store i64 %9831, i64* %RAX.i1585, align 8
  %9832 = and i64 %9830, 4294967295
  store i64 %9832, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9833 = trunc i64 %9830 to i32
  br label %routine_idivl__ecx.exit1607

routine_idivl__ecx.exit1607:                      ; preds = %9829, %9827
  %9834 = phi i64 [ %.pre174, %9827 ], [ %9819, %9829 ]
  %9835 = phi i32 [ %.pre173, %9827 ], [ %9833, %9829 ]
  %9836 = phi %struct.Memory* [ %9828, %9827 ], [ %MEMORY.62, %9829 ]
  %9837 = add i32 %9835, -2
  %9838 = icmp ult i32 %9835, 2
  %9839 = zext i1 %9838 to i8
  store i8 %9839, i8* %20, align 1
  %9840 = and i32 %9837, 255
  %9841 = tail call i32 @llvm.ctpop.i32(i32 %9840)
  %9842 = trunc i32 %9841 to i8
  %9843 = and i8 %9842, 1
  %9844 = xor i8 %9843, 1
  store i8 %9844, i8* %27, align 1
  %9845 = xor i32 %9837, %9835
  %9846 = lshr i32 %9845, 4
  %9847 = trunc i32 %9846 to i8
  %9848 = and i8 %9847, 1
  store i8 %9848, i8* %33, align 1
  %9849 = icmp eq i32 %9837, 0
  %9850 = zext i1 %9849 to i8
  store i8 %9850, i8* %36, align 1
  %9851 = lshr i32 %9837, 31
  %9852 = trunc i32 %9851 to i8
  store i8 %9852, i8* %39, align 1
  %9853 = lshr i32 %9835, 31
  %9854 = xor i32 %9851, %9853
  %9855 = add nuw nsw i32 %9854, %9853
  %9856 = icmp eq i32 %9855, 2
  %9857 = zext i1 %9856 to i8
  store i8 %9857, i8* %45, align 1
  %.v328 = select i1 %9849, i64 9, i64 1320
  %9858 = add i64 %9834, %.v328
  store i64 %9858, i64* %3, align 8
  br i1 %9849, label %block_42f58e, label %block_.L_42faad

block_42f58e:                                     ; preds = %routine_idivl__ecx.exit1607
  store i64 4, i64* %RAX.i1585, align 8
  %9859 = load i64, i64* %RBP.i, align 8
  %9860 = add i64 %9859, -24
  %9861 = add i64 %9858, 8
  store i64 %9861, i64* %3, align 8
  %9862 = inttoptr i64 %9860 to i32*
  %9863 = load i32, i32* %9862, align 4
  %9864 = zext i32 %9863 to i64
  store i64 %9864, i64* %RCX.i3128, align 8
  %9865 = add i64 %9859, -792
  %9866 = add i64 %9858, 14
  store i64 %9866, i64* %3, align 8
  %9867 = inttoptr i64 %9865 to i32*
  store i32 4, i32* %9867, align 4
  %9868 = load i32, i32* %ECX.i3256, align 4
  %9869 = zext i32 %9868 to i64
  %9870 = load i64, i64* %3, align 8
  store i64 %9869, i64* %RAX.i1585, align 8
  %9871 = sext i32 %9868 to i64
  %9872 = lshr i64 %9871, 32
  store i64 %9872, i64* %3718, align 8
  %9873 = load i64, i64* %RBP.i, align 8
  %9874 = add i64 %9873, -792
  %9875 = add i64 %9870, 9
  store i64 %9875, i64* %3, align 8
  %9876 = inttoptr i64 %9874 to i32*
  %9877 = load i32, i32* %9876, align 4
  %9878 = zext i32 %9877 to i64
  store i64 %9878, i64* %RCX.i3128, align 8
  %9879 = add i64 %9870, 11
  store i64 %9879, i64* %3, align 8
  %9880 = sext i32 %9877 to i64
  %9881 = shl nuw i64 %9872, 32
  %9882 = or i64 %9881, %9869
  %9883 = sdiv i64 %9882, %9880
  %9884 = shl i64 %9883, 32
  %9885 = ashr exact i64 %9884, 32
  %9886 = icmp eq i64 %9883, %9885
  br i1 %9886, label %9889, label %9887

; <label>:9887:                                   ; preds = %block_42f58e
  %9888 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9879, %struct.Memory* %9836)
  %.pre175 = load i32, i32* %EDX.i5198, align 4
  %.pre176 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1583

; <label>:9889:                                   ; preds = %block_42f58e
  %9890 = srem i64 %9882, %9880
  %9891 = and i64 %9883, 4294967295
  store i64 %9891, i64* %RAX.i1585, align 8
  %9892 = and i64 %9890, 4294967295
  store i64 %9892, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9893 = trunc i64 %9890 to i32
  br label %routine_idivl__ecx.exit1583

routine_idivl__ecx.exit1583:                      ; preds = %9889, %9887
  %9894 = phi i64 [ %.pre176, %9887 ], [ %9879, %9889 ]
  %9895 = phi i32 [ %.pre175, %9887 ], [ %9893, %9889 ]
  %9896 = phi %struct.Memory* [ %9888, %9887 ], [ %9836, %9889 ]
  %9897 = add i32 %9895, -3
  %9898 = icmp ult i32 %9895, 3
  %9899 = zext i1 %9898 to i8
  store i8 %9899, i8* %20, align 1
  %9900 = and i32 %9897, 255
  %9901 = tail call i32 @llvm.ctpop.i32(i32 %9900)
  %9902 = trunc i32 %9901 to i8
  %9903 = and i8 %9902, 1
  %9904 = xor i8 %9903, 1
  store i8 %9904, i8* %27, align 1
  %9905 = xor i32 %9897, %9895
  %9906 = lshr i32 %9905, 4
  %9907 = trunc i32 %9906 to i8
  %9908 = and i8 %9907, 1
  store i8 %9908, i8* %33, align 1
  %9909 = icmp eq i32 %9897, 0
  %9910 = zext i1 %9909 to i8
  store i8 %9910, i8* %36, align 1
  %9911 = lshr i32 %9897, 31
  %9912 = trunc i32 %9911 to i8
  store i8 %9912, i8* %39, align 1
  %9913 = lshr i32 %9895, 31
  %9914 = xor i32 %9911, %9913
  %9915 = add nuw nsw i32 %9914, %9913
  %9916 = icmp eq i32 %9915, 2
  %9917 = zext i1 %9916 to i8
  store i8 %9917, i8* %45, align 1
  %.v332 = select i1 %9909, i64 9, i64 1286
  %9918 = add i64 %9894, %.v332
  store i64 %9918, i64* %3, align 8
  br i1 %9909, label %block_.L_42f5b0, label %block_.L_42faad

block_.L_42f5b0:                                  ; preds = %routine_idivl__ecx.exit1583, %routine_idivl__ecx.exit1631
  %9919 = phi i64 [ %9918, %routine_idivl__ecx.exit1583 ], [ %9797, %routine_idivl__ecx.exit1631 ]
  %MEMORY.63 = phi %struct.Memory* [ %9896, %routine_idivl__ecx.exit1583 ], [ %9775, %routine_idivl__ecx.exit1631 ]
  %9920 = load i64, i64* %RBP.i, align 8
  %9921 = add i64 %9920, -56
  %9922 = add i64 %9919, 4
  store i64 %9922, i64* %3, align 8
  %9923 = inttoptr i64 %9921 to i64*
  %9924 = load i64, i64* %9923, align 8
  store i64 %9924, i64* %RDI.i605, align 8
  %9925 = add i64 %9920, -28
  %9926 = add i64 %9919, 7
  store i64 %9926, i64* %3, align 8
  %9927 = inttoptr i64 %9925 to i32*
  %9928 = load i32, i32* %9927, align 4
  %9929 = add i32 %9928, -16
  %9930 = lshr i32 %9929, 31
  %9931 = add i32 %9928, -15
  %9932 = zext i32 %9931 to i64
  store i64 %9932, i64* %RAX.i1585, align 8
  %9933 = icmp eq i32 %9929, -1
  %9934 = icmp eq i32 %9931, 0
  %9935 = or i1 %9933, %9934
  %9936 = zext i1 %9935 to i8
  store i8 %9936, i8* %20, align 1
  %9937 = and i32 %9931, 255
  %9938 = tail call i32 @llvm.ctpop.i32(i32 %9937)
  %9939 = trunc i32 %9938 to i8
  %9940 = and i8 %9939, 1
  %9941 = xor i8 %9940, 1
  store i8 %9941, i8* %27, align 1
  %9942 = xor i32 %9931, %9929
  %9943 = lshr i32 %9942, 4
  %9944 = trunc i32 %9943 to i8
  %9945 = and i8 %9944, 1
  store i8 %9945, i8* %33, align 1
  %9946 = zext i1 %9934 to i8
  store i8 %9946, i8* %36, align 1
  %9947 = lshr i32 %9931, 31
  %9948 = trunc i32 %9947 to i8
  store i8 %9948, i8* %39, align 1
  %9949 = xor i32 %9947, %9930
  %9950 = add nuw nsw i32 %9949, %9947
  %9951 = icmp eq i32 %9950, 2
  %9952 = zext i1 %9951 to i8
  store i8 %9952, i8* %45, align 1
  %9953 = add i64 %9920, -24
  %9954 = add i64 %9919, 16
  store i64 %9954, i64* %3, align 8
  %9955 = inttoptr i64 %9953 to i32*
  %9956 = load i32, i32* %9955, align 4
  %9957 = add i32 %9956, -16
  %9958 = zext i32 %9957 to i64
  store i64 %9958, i64* %RCX.i3128, align 8
  %9959 = icmp ult i32 %9956, 16
  %9960 = zext i1 %9959 to i8
  store i8 %9960, i8* %20, align 1
  %9961 = and i32 %9957, 255
  %9962 = tail call i32 @llvm.ctpop.i32(i32 %9961)
  %9963 = trunc i32 %9962 to i8
  %9964 = and i8 %9963, 1
  %9965 = xor i8 %9964, 1
  store i8 %9965, i8* %27, align 1
  %9966 = xor i32 %9956, 16
  %9967 = xor i32 %9966, %9957
  %9968 = lshr i32 %9967, 4
  %9969 = trunc i32 %9968 to i8
  %9970 = and i8 %9969, 1
  store i8 %9970, i8* %33, align 1
  %9971 = icmp eq i32 %9957, 0
  %9972 = zext i1 %9971 to i8
  store i8 %9972, i8* %36, align 1
  %9973 = lshr i32 %9957, 31
  %9974 = trunc i32 %9973 to i8
  store i8 %9974, i8* %39, align 1
  %9975 = lshr i32 %9956, 31
  %9976 = xor i32 %9973, %9975
  %9977 = add nuw nsw i32 %9976, %9975
  %9978 = icmp eq i32 %9977, 2
  %9979 = zext i1 %9978 to i8
  store i8 %9979, i8* %45, align 1
  %9980 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9980, i64* %RDX.i5152, align 8
  %9981 = add i64 %9980, 72684
  %9982 = add i64 %9919, 33
  store i64 %9982, i64* %3, align 8
  %9983 = inttoptr i64 %9981 to i32*
  %9984 = load i32, i32* %9983, align 4
  %9985 = zext i32 %9984 to i64
  store i64 %9985, i64* %RSI.i5212, align 8
  %9986 = load i64, i64* %RBP.i, align 8
  %9987 = add i64 %9986, -56
  %9988 = add i64 %9919, 37
  store i64 %9988, i64* %3, align 8
  %9989 = inttoptr i64 %9987 to i64*
  %9990 = load i64, i64* %9989, align 8
  store i64 %9990, i64* %RDX.i5152, align 8
  %9991 = add i64 %9986, -28
  %9992 = add i64 %9919, 41
  store i64 %9992, i64* %3, align 8
  %9993 = inttoptr i64 %9991 to i32*
  %9994 = load i32, i32* %9993, align 4
  %9995 = add i32 %9994, -16
  %9996 = zext i32 %9995 to i64
  store i64 %9996, i64* %600, align 8
  %9997 = icmp ult i32 %9994, 16
  %9998 = zext i1 %9997 to i8
  store i8 %9998, i8* %20, align 1
  %9999 = and i32 %9995, 255
  %10000 = tail call i32 @llvm.ctpop.i32(i32 %9999)
  %10001 = trunc i32 %10000 to i8
  %10002 = and i8 %10001, 1
  %10003 = xor i8 %10002, 1
  store i8 %10003, i8* %27, align 1
  %10004 = xor i32 %9994, 16
  %10005 = xor i32 %10004, %9995
  %10006 = lshr i32 %10005, 4
  %10007 = trunc i32 %10006 to i8
  %10008 = and i8 %10007, 1
  store i8 %10008, i8* %33, align 1
  %10009 = icmp eq i32 %9995, 0
  %10010 = zext i1 %10009 to i8
  store i8 %10010, i8* %36, align 1
  %10011 = lshr i32 %9995, 31
  %10012 = trunc i32 %10011 to i8
  store i8 %10012, i8* %39, align 1
  %10013 = lshr i32 %9994, 31
  %10014 = xor i32 %10011, %10013
  %10015 = add nuw nsw i32 %10014, %10013
  %10016 = icmp eq i32 %10015, 2
  %10017 = zext i1 %10016 to i8
  store i8 %10017, i8* %45, align 1
  %10018 = add i64 %9986, -36
  %10019 = add i64 %9919, 49
  store i64 %10019, i64* %3, align 8
  %10020 = inttoptr i64 %10018 to i32*
  %10021 = load i32, i32* %10020, align 4
  %10022 = add i32 %10021, 2
  %10023 = zext i32 %10022 to i64
  store i64 %10023, i64* %602, align 8
  %10024 = icmp ugt i32 %10021, -3
  %10025 = zext i1 %10024 to i8
  store i8 %10025, i8* %20, align 1
  %10026 = and i32 %10022, 255
  %10027 = tail call i32 @llvm.ctpop.i32(i32 %10026)
  %10028 = trunc i32 %10027 to i8
  %10029 = and i8 %10028, 1
  %10030 = xor i8 %10029, 1
  store i8 %10030, i8* %27, align 1
  %10031 = xor i32 %10022, %10021
  %10032 = lshr i32 %10031, 4
  %10033 = trunc i32 %10032 to i8
  %10034 = and i8 %10033, 1
  store i8 %10034, i8* %33, align 1
  %10035 = icmp eq i32 %10022, 0
  %10036 = zext i1 %10035 to i8
  store i8 %10036, i8* %36, align 1
  %10037 = lshr i32 %10022, 31
  %10038 = trunc i32 %10037 to i8
  store i8 %10038, i8* %39, align 1
  %10039 = lshr i32 %10021, 31
  %10040 = xor i32 %10037, %10039
  %10041 = add nuw nsw i32 %10040, %10037
  %10042 = icmp eq i32 %10041, 2
  %10043 = zext i1 %10042 to i8
  store i8 %10043, i8* %45, align 1
  %10044 = add i64 %9986, -24
  %10045 = add i64 %9919, 57
  store i64 %10045, i64* %3, align 8
  %10046 = inttoptr i64 %10044 to i32*
  %10047 = load i32, i32* %10046, align 4
  %10048 = add i32 %10047, 1
  %10049 = zext i32 %10048 to i64
  store i64 %10049, i64* %3720, align 8
  %10050 = lshr i32 %10048, 31
  %10051 = sub i32 %10022, %10048
  %10052 = icmp ult i32 %10022, %10048
  %10053 = zext i1 %10052 to i8
  store i8 %10053, i8* %20, align 1
  %10054 = and i32 %10051, 255
  %10055 = tail call i32 @llvm.ctpop.i32(i32 %10054)
  %10056 = trunc i32 %10055 to i8
  %10057 = and i8 %10056, 1
  %10058 = xor i8 %10057, 1
  store i8 %10058, i8* %27, align 1
  %10059 = xor i32 %10048, %10022
  %10060 = xor i32 %10059, %10051
  %10061 = lshr i32 %10060, 4
  %10062 = trunc i32 %10061 to i8
  %10063 = and i8 %10062, 1
  store i8 %10063, i8* %33, align 1
  %10064 = icmp eq i32 %10051, 0
  %10065 = zext i1 %10064 to i8
  store i8 %10065, i8* %36, align 1
  %10066 = lshr i32 %10051, 31
  %10067 = trunc i32 %10066 to i8
  store i8 %10067, i8* %39, align 1
  %10068 = xor i32 %10050, %10037
  %10069 = xor i32 %10066, %10037
  %10070 = add nuw nsw i32 %10069, %10068
  %10071 = icmp eq i32 %10070, 2
  %10072 = zext i1 %10071 to i8
  store i8 %10072, i8* %45, align 1
  %10073 = load i64, i64* %RBP.i, align 8
  %10074 = add i64 %10073, -800
  %10075 = load i64, i64* %RDI.i605, align 8
  %10076 = add i64 %9919, 71
  store i64 %10076, i64* %3, align 8
  %10077 = inttoptr i64 %10074 to i64*
  store i64 %10075, i64* %10077, align 8
  %10078 = load i64, i64* %RBP.i, align 8
  %10079 = add i64 %10078, -804
  %10080 = load i32, i32* %EAX.i1609, align 4
  %10081 = load i64, i64* %3, align 8
  %10082 = add i64 %10081, 6
  store i64 %10082, i64* %3, align 8
  %10083 = inttoptr i64 %10079 to i32*
  store i32 %10080, i32* %10083, align 4
  %10084 = load i64, i64* %RBP.i, align 8
  %10085 = add i64 %10084, -808
  %10086 = load i32, i32* %ECX.i3256, align 4
  %10087 = load i64, i64* %3, align 8
  %10088 = add i64 %10087, 6
  store i64 %10088, i64* %3, align 8
  %10089 = inttoptr i64 %10085 to i32*
  store i32 %10086, i32* %10089, align 4
  %10090 = load i64, i64* %RBP.i, align 8
  %10091 = add i64 %10090, -812
  %10092 = load i32, i32* %ESI.i5201, align 4
  %10093 = load i64, i64* %3, align 8
  %10094 = add i64 %10093, 6
  store i64 %10094, i64* %3, align 8
  %10095 = inttoptr i64 %10091 to i32*
  store i32 %10092, i32* %10095, align 4
  %10096 = load i64, i64* %RBP.i, align 8
  %10097 = add i64 %10096, -824
  %10098 = load i64, i64* %RDX.i5152, align 8
  %10099 = load i64, i64* %3, align 8
  %10100 = add i64 %10099, 7
  store i64 %10100, i64* %3, align 8
  %10101 = inttoptr i64 %10097 to i64*
  store i64 %10098, i64* %10101, align 8
  %10102 = load i64, i64* %RBP.i, align 8
  %10103 = add i64 %10102, -828
  %10104 = load i32, i32* %R8D.i4817, align 4
  %10105 = load i64, i64* %3, align 8
  %10106 = add i64 %10105, 7
  store i64 %10106, i64* %3, align 8
  %10107 = inttoptr i64 %10103 to i32*
  store i32 %10104, i32* %10107, align 4
  %10108 = load i64, i64* %3, align 8
  %10109 = load i8, i8* %39, align 1
  %10110 = icmp ne i8 %10109, 0
  %10111 = load i8, i8* %45, align 1
  %10112 = icmp ne i8 %10111, 0
  %10113 = xor i1 %10110, %10112
  %.v385 = select i1 %10113, i64 6, i64 23
  %10114 = add i64 %10108, %.v385
  store i64 %10114, i64* %3, align 8
  %10115 = load i64, i64* %RBP.i, align 8
  br i1 %10113, label %block_42f61d, label %block_.L_42f62e

block_42f61d:                                     ; preds = %block_.L_42f5b0
  %10116 = add i64 %10115, -36
  %10117 = add i64 %10114, 3
  store i64 %10117, i64* %3, align 8
  %10118 = inttoptr i64 %10116 to i32*
  %10119 = load i32, i32* %10118, align 4
  %10120 = add i32 %10119, 2
  %10121 = zext i32 %10120 to i64
  store i64 %10121, i64* %RAX.i1585, align 8
  %10122 = icmp ugt i32 %10119, -3
  %10123 = zext i1 %10122 to i8
  store i8 %10123, i8* %20, align 1
  %10124 = and i32 %10120, 255
  %10125 = tail call i32 @llvm.ctpop.i32(i32 %10124)
  %10126 = trunc i32 %10125 to i8
  %10127 = and i8 %10126, 1
  %10128 = xor i8 %10127, 1
  store i8 %10128, i8* %27, align 1
  %10129 = xor i32 %10120, %10119
  %10130 = lshr i32 %10129, 4
  %10131 = trunc i32 %10130 to i8
  %10132 = and i8 %10131, 1
  store i8 %10132, i8* %33, align 1
  %10133 = icmp eq i32 %10120, 0
  %10134 = zext i1 %10133 to i8
  store i8 %10134, i8* %36, align 1
  %10135 = lshr i32 %10120, 31
  %10136 = trunc i32 %10135 to i8
  store i8 %10136, i8* %39, align 1
  %10137 = lshr i32 %10119, 31
  %10138 = xor i32 %10135, %10137
  %10139 = add nuw nsw i32 %10138, %10135
  %10140 = icmp eq i32 %10139, 2
  %10141 = zext i1 %10140 to i8
  store i8 %10141, i8* %45, align 1
  %10142 = add i64 %10115, -832
  %10143 = add i64 %10114, 12
  store i64 %10143, i64* %3, align 8
  %10144 = inttoptr i64 %10142 to i32*
  store i32 %10120, i32* %10144, align 4
  %10145 = load i64, i64* %3, align 8
  %10146 = add i64 %10145, 17
  store i64 %10146, i64* %3, align 8
  br label %block_.L_42f63a

block_.L_42f62e:                                  ; preds = %block_.L_42f5b0
  %10147 = add i64 %10115, -24
  %10148 = add i64 %10114, 3
  store i64 %10148, i64* %3, align 8
  %10149 = inttoptr i64 %10147 to i32*
  %10150 = load i32, i32* %10149, align 4
  %10151 = add i32 %10150, 1
  %10152 = zext i32 %10151 to i64
  store i64 %10152, i64* %RAX.i1585, align 8
  %10153 = icmp eq i32 %10150, -1
  %10154 = icmp eq i32 %10151, 0
  %10155 = or i1 %10153, %10154
  %10156 = zext i1 %10155 to i8
  store i8 %10156, i8* %20, align 1
  %10157 = and i32 %10151, 255
  %10158 = tail call i32 @llvm.ctpop.i32(i32 %10157)
  %10159 = trunc i32 %10158 to i8
  %10160 = and i8 %10159, 1
  %10161 = xor i8 %10160, 1
  store i8 %10161, i8* %27, align 1
  %10162 = xor i32 %10151, %10150
  %10163 = lshr i32 %10162, 4
  %10164 = trunc i32 %10163 to i8
  %10165 = and i8 %10164, 1
  store i8 %10165, i8* %33, align 1
  %10166 = zext i1 %10154 to i8
  store i8 %10166, i8* %36, align 1
  %10167 = lshr i32 %10151, 31
  %10168 = trunc i32 %10167 to i8
  store i8 %10168, i8* %39, align 1
  %10169 = lshr i32 %10150, 31
  %10170 = xor i32 %10167, %10169
  %10171 = add nuw nsw i32 %10170, %10167
  %10172 = icmp eq i32 %10171, 2
  %10173 = zext i1 %10172 to i8
  store i8 %10173, i8* %45, align 1
  %10174 = add i64 %10115, -832
  %10175 = add i64 %10114, 12
  store i64 %10175, i64* %3, align 8
  %10176 = inttoptr i64 %10174 to i32*
  store i32 %10151, i32* %10176, align 4
  %.pre177 = load i64, i64* %3, align 8
  br label %block_.L_42f63a

block_.L_42f63a:                                  ; preds = %block_.L_42f62e, %block_42f61d
  %10177 = phi i64 [ %.pre177, %block_.L_42f62e ], [ %10146, %block_42f61d ]
  %10178 = load i64, i64* %RBP.i, align 8
  %10179 = add i64 %10178, -832
  %10180 = add i64 %10177, 6
  store i64 %10180, i64* %3, align 8
  %10181 = inttoptr i64 %10179 to i32*
  %10182 = load i32, i32* %10181, align 4
  %10183 = add i32 %10182, -16
  %10184 = zext i32 %10183 to i64
  store i64 %10184, i64* %RAX.i1585, align 8
  %10185 = icmp ult i32 %10182, 16
  %10186 = zext i1 %10185 to i8
  store i8 %10186, i8* %20, align 1
  %10187 = and i32 %10183, 255
  %10188 = tail call i32 @llvm.ctpop.i32(i32 %10187)
  %10189 = trunc i32 %10188 to i8
  %10190 = and i8 %10189, 1
  %10191 = xor i8 %10190, 1
  store i8 %10191, i8* %27, align 1
  %10192 = xor i32 %10182, 16
  %10193 = xor i32 %10192, %10183
  %10194 = lshr i32 %10193, 4
  %10195 = trunc i32 %10194 to i8
  %10196 = and i8 %10195, 1
  store i8 %10196, i8* %33, align 1
  %10197 = icmp eq i32 %10183, 0
  %10198 = zext i1 %10197 to i8
  store i8 %10198, i8* %36, align 1
  %10199 = lshr i32 %10183, 31
  %10200 = trunc i32 %10199 to i8
  store i8 %10200, i8* %39, align 1
  %10201 = lshr i32 %10182, 31
  %10202 = xor i32 %10199, %10201
  %10203 = add nuw nsw i32 %10202, %10201
  %10204 = icmp eq i32 %10203, 2
  %10205 = zext i1 %10204 to i8
  store i8 %10205, i8* %45, align 1
  %10206 = add i64 %10178, -80
  %10207 = add i64 %10177, 12
  store i64 %10207, i64* %3, align 8
  %10208 = inttoptr i64 %10206 to i32*
  %10209 = load i32, i32* %10208, align 4
  %10210 = zext i32 %10209 to i64
  store i64 %10210, i64* %RCX.i3128, align 8
  %10211 = add i64 %10178, -76
  %10212 = add i64 %10177, 16
  store i64 %10212, i64* %3, align 8
  %10213 = inttoptr i64 %10211 to i32*
  %10214 = load i32, i32* %10213, align 4
  %10215 = zext i32 %10214 to i64
  store i64 %10215, i64* %600, align 8
  %10216 = add i64 %10178, -824
  %10217 = add i64 %10177, 23
  store i64 %10217, i64* %3, align 8
  %10218 = inttoptr i64 %10216 to i64*
  %10219 = load i64, i64* %10218, align 8
  store i64 %10219, i64* %RDI.i605, align 8
  %10220 = add i64 %10178, -828
  %10221 = add i64 %10177, 29
  store i64 %10221, i64* %3, align 8
  %10222 = inttoptr i64 %10220 to i32*
  %10223 = load i32, i32* %10222, align 4
  %10224 = zext i32 %10223 to i64
  store i64 %10224, i64* %RSI.i5212, align 8
  store i64 %10184, i64* %RDX.i5152, align 8
  %10225 = add i64 %10177, 455382
  %10226 = add i64 %10177, 36
  %10227 = load i64, i64* %6, align 8
  %10228 = add i64 %10227, -8
  %10229 = inttoptr i64 %10228 to i64*
  store i64 %10226, i64* %10229, align 8
  store i64 %10228, i64* %6, align 8
  store i64 %10225, i64* %3, align 8
  %call2_42f659 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %10225, %struct.Memory* %MEMORY.63)
  %10230 = load i16, i16* %AX.i3315, align 2
  %10231 = zext i16 %10230 to i64
  %10232 = load i64, i64* %3, align 8
  store i64 %10231, i64* %RCX.i3128, align 8
  %10233 = load i64, i64* %RBP.i, align 8
  %10234 = add i64 %10233, -56
  %10235 = add i64 %10232, 7
  store i64 %10235, i64* %3, align 8
  %10236 = inttoptr i64 %10234 to i64*
  %10237 = load i64, i64* %10236, align 8
  store i64 %10237, i64* %RDI.i605, align 8
  %10238 = add i64 %10233, -40
  %10239 = add i64 %10232, 10
  store i64 %10239, i64* %3, align 8
  %10240 = inttoptr i64 %10238 to i32*
  %10241 = load i32, i32* %10240, align 4
  %10242 = add i32 %10241, 2
  %10243 = zext i32 %10242 to i64
  store i64 %10243, i64* %RDX.i5152, align 8
  %10244 = icmp ugt i32 %10241, -3
  %10245 = zext i1 %10244 to i8
  store i8 %10245, i8* %20, align 1
  %10246 = and i32 %10242, 255
  %10247 = tail call i32 @llvm.ctpop.i32(i32 %10246)
  %10248 = trunc i32 %10247 to i8
  %10249 = and i8 %10248, 1
  %10250 = xor i8 %10249, 1
  store i8 %10250, i8* %27, align 1
  %10251 = xor i32 %10242, %10241
  %10252 = lshr i32 %10251, 4
  %10253 = trunc i32 %10252 to i8
  %10254 = and i8 %10253, 1
  store i8 %10254, i8* %33, align 1
  %10255 = icmp eq i32 %10242, 0
  %10256 = zext i1 %10255 to i8
  store i8 %10256, i8* %36, align 1
  %10257 = lshr i32 %10242, 31
  %10258 = trunc i32 %10257 to i8
  store i8 %10258, i8* %39, align 1
  %10259 = lshr i32 %10241, 31
  %10260 = xor i32 %10257, %10259
  %10261 = add nuw nsw i32 %10260, %10257
  %10262 = icmp eq i32 %10261, 2
  %10263 = zext i1 %10262 to i8
  store i8 %10263, i8* %45, align 1
  %10264 = add i64 %10233, -28
  %10265 = add i64 %10232, 16
  store i64 %10265, i64* %3, align 8
  %10266 = inttoptr i64 %10264 to i32*
  %10267 = load i32, i32* %10266, align 4
  %10268 = add i32 %10267, 2
  %10269 = zext i32 %10268 to i64
  store i64 %10269, i64* %RSI.i5212, align 8
  %10270 = lshr i32 %10268, 31
  %10271 = sub i32 %10242, %10268
  %10272 = icmp ult i32 %10242, %10268
  %10273 = zext i1 %10272 to i8
  store i8 %10273, i8* %20, align 1
  %10274 = and i32 %10271, 255
  %10275 = tail call i32 @llvm.ctpop.i32(i32 %10274)
  %10276 = trunc i32 %10275 to i8
  %10277 = and i8 %10276, 1
  %10278 = xor i8 %10277, 1
  store i8 %10278, i8* %27, align 1
  %10279 = xor i32 %10268, %10242
  %10280 = xor i32 %10279, %10271
  %10281 = lshr i32 %10280, 4
  %10282 = trunc i32 %10281 to i8
  %10283 = and i8 %10282, 1
  store i8 %10283, i8* %33, align 1
  %10284 = icmp eq i32 %10271, 0
  %10285 = zext i1 %10284 to i8
  store i8 %10285, i8* %36, align 1
  %10286 = lshr i32 %10271, 31
  %10287 = trunc i32 %10286 to i8
  store i8 %10287, i8* %39, align 1
  %10288 = xor i32 %10270, %10257
  %10289 = xor i32 %10286, %10257
  %10290 = add nuw nsw i32 %10289, %10288
  %10291 = icmp eq i32 %10290, 2
  %10292 = zext i1 %10291 to i8
  store i8 %10292, i8* %45, align 1
  %10293 = load i64, i64* %RBP.i, align 8
  %10294 = add i64 %10293, -836
  %10295 = load i32, i32* %ECX.i3256, align 4
  %10296 = add i64 %10232, 27
  store i64 %10296, i64* %3, align 8
  %10297 = inttoptr i64 %10294 to i32*
  store i32 %10295, i32* %10297, align 4
  %10298 = load i64, i64* %RBP.i, align 8
  %10299 = add i64 %10298, -848
  %10300 = load i64, i64* %RDI.i605, align 8
  %10301 = load i64, i64* %3, align 8
  %10302 = add i64 %10301, 7
  store i64 %10302, i64* %3, align 8
  %10303 = inttoptr i64 %10299 to i64*
  store i64 %10300, i64* %10303, align 8
  %10304 = load i64, i64* %3, align 8
  %10305 = load i8, i8* %39, align 1
  %10306 = icmp ne i8 %10305, 0
  %10307 = load i8, i8* %45, align 1
  %10308 = icmp ne i8 %10307, 0
  %10309 = xor i1 %10306, %10308
  %.v386 = select i1 %10309, i64 6, i64 23
  %10310 = add i64 %10304, %.v386
  store i64 %10310, i64* %3, align 8
  %10311 = load i64, i64* %RBP.i, align 8
  br i1 %10309, label %block_42f686, label %block_.L_42f697

block_42f686:                                     ; preds = %block_.L_42f63a
  %10312 = add i64 %10311, -40
  %10313 = add i64 %10310, 3
  store i64 %10313, i64* %3, align 8
  %10314 = inttoptr i64 %10312 to i32*
  %10315 = load i32, i32* %10314, align 4
  %10316 = add i32 %10315, 2
  %10317 = zext i32 %10316 to i64
  store i64 %10317, i64* %RAX.i1585, align 8
  %10318 = icmp ugt i32 %10315, -3
  %10319 = zext i1 %10318 to i8
  store i8 %10319, i8* %20, align 1
  %10320 = and i32 %10316, 255
  %10321 = tail call i32 @llvm.ctpop.i32(i32 %10320)
  %10322 = trunc i32 %10321 to i8
  %10323 = and i8 %10322, 1
  %10324 = xor i8 %10323, 1
  store i8 %10324, i8* %27, align 1
  %10325 = xor i32 %10316, %10315
  %10326 = lshr i32 %10325, 4
  %10327 = trunc i32 %10326 to i8
  %10328 = and i8 %10327, 1
  store i8 %10328, i8* %33, align 1
  %10329 = icmp eq i32 %10316, 0
  %10330 = zext i1 %10329 to i8
  store i8 %10330, i8* %36, align 1
  %10331 = lshr i32 %10316, 31
  %10332 = trunc i32 %10331 to i8
  store i8 %10332, i8* %39, align 1
  %10333 = lshr i32 %10315, 31
  %10334 = xor i32 %10331, %10333
  %10335 = add nuw nsw i32 %10334, %10331
  %10336 = icmp eq i32 %10335, 2
  %10337 = zext i1 %10336 to i8
  store i8 %10337, i8* %45, align 1
  %10338 = add i64 %10311, -852
  %10339 = add i64 %10310, 12
  store i64 %10339, i64* %3, align 8
  %10340 = inttoptr i64 %10338 to i32*
  store i32 %10316, i32* %10340, align 4
  %10341 = load i64, i64* %3, align 8
  %10342 = add i64 %10341, 17
  store i64 %10342, i64* %3, align 8
  br label %block_.L_42f6a3

block_.L_42f697:                                  ; preds = %block_.L_42f63a
  %10343 = add i64 %10311, -28
  %10344 = add i64 %10310, 3
  store i64 %10344, i64* %3, align 8
  %10345 = inttoptr i64 %10343 to i32*
  %10346 = load i32, i32* %10345, align 4
  %10347 = add i32 %10346, 2
  %10348 = zext i32 %10347 to i64
  store i64 %10348, i64* %RAX.i1585, align 8
  %10349 = icmp ugt i32 %10346, -3
  %10350 = zext i1 %10349 to i8
  store i8 %10350, i8* %20, align 1
  %10351 = and i32 %10347, 255
  %10352 = tail call i32 @llvm.ctpop.i32(i32 %10351)
  %10353 = trunc i32 %10352 to i8
  %10354 = and i8 %10353, 1
  %10355 = xor i8 %10354, 1
  store i8 %10355, i8* %27, align 1
  %10356 = xor i32 %10347, %10346
  %10357 = lshr i32 %10356, 4
  %10358 = trunc i32 %10357 to i8
  %10359 = and i8 %10358, 1
  store i8 %10359, i8* %33, align 1
  %10360 = icmp eq i32 %10347, 0
  %10361 = zext i1 %10360 to i8
  store i8 %10361, i8* %36, align 1
  %10362 = lshr i32 %10347, 31
  %10363 = trunc i32 %10362 to i8
  store i8 %10363, i8* %39, align 1
  %10364 = lshr i32 %10346, 31
  %10365 = xor i32 %10362, %10364
  %10366 = add nuw nsw i32 %10365, %10362
  %10367 = icmp eq i32 %10366, 2
  %10368 = zext i1 %10367 to i8
  store i8 %10368, i8* %45, align 1
  %10369 = add i64 %10311, -852
  %10370 = add i64 %10310, 12
  store i64 %10370, i64* %3, align 8
  %10371 = inttoptr i64 %10369 to i32*
  store i32 %10347, i32* %10371, align 4
  %.pre178 = load i64, i64* %3, align 8
  br label %block_.L_42f6a3

block_.L_42f6a3:                                  ; preds = %block_.L_42f697, %block_42f686
  %10372 = phi i64 [ %.pre178, %block_.L_42f697 ], [ %10342, %block_42f686 ]
  %10373 = load i64, i64* %RBP.i, align 8
  %10374 = add i64 %10373, -852
  %10375 = add i64 %10372, 6
  store i64 %10375, i64* %3, align 8
  %10376 = inttoptr i64 %10374 to i32*
  %10377 = load i32, i32* %10376, align 4
  %10378 = add i32 %10377, -16
  %10379 = zext i32 %10378 to i64
  store i64 %10379, i64* %RAX.i1585, align 8
  %10380 = icmp ult i32 %10377, 16
  %10381 = zext i1 %10380 to i8
  store i8 %10381, i8* %20, align 1
  %10382 = and i32 %10378, 255
  %10383 = tail call i32 @llvm.ctpop.i32(i32 %10382)
  %10384 = trunc i32 %10383 to i8
  %10385 = and i8 %10384, 1
  %10386 = xor i8 %10385, 1
  store i8 %10386, i8* %27, align 1
  %10387 = xor i32 %10377, 16
  %10388 = xor i32 %10387, %10378
  %10389 = lshr i32 %10388, 4
  %10390 = trunc i32 %10389 to i8
  %10391 = and i8 %10390, 1
  store i8 %10391, i8* %33, align 1
  %10392 = icmp eq i32 %10378, 0
  %10393 = zext i1 %10392 to i8
  store i8 %10393, i8* %36, align 1
  %10394 = lshr i32 %10378, 31
  %10395 = trunc i32 %10394 to i8
  store i8 %10395, i8* %39, align 1
  %10396 = lshr i32 %10377, 31
  %10397 = xor i32 %10394, %10396
  %10398 = add nuw nsw i32 %10397, %10396
  %10399 = icmp eq i32 %10398, 2
  %10400 = zext i1 %10399 to i8
  store i8 %10400, i8* %45, align 1
  %10401 = add i64 %10373, -24
  %10402 = add i64 %10372, 12
  store i64 %10402, i64* %3, align 8
  %10403 = inttoptr i64 %10401 to i32*
  %10404 = load i32, i32* %10403, align 4
  %10405 = add i32 %10404, -16
  %10406 = icmp eq i32 %10405, 0
  %10407 = zext i1 %10406 to i8
  %10408 = lshr i32 %10405, 31
  %10409 = add i32 %10404, -17
  %10410 = zext i32 %10409 to i64
  store i64 %10410, i64* %RCX.i3128, align 8
  store i8 %10407, i8* %20, align 1
  %10411 = and i32 %10409, 255
  %10412 = tail call i32 @llvm.ctpop.i32(i32 %10411)
  %10413 = trunc i32 %10412 to i8
  %10414 = and i8 %10413, 1
  %10415 = xor i8 %10414, 1
  store i8 %10415, i8* %27, align 1
  %10416 = xor i32 %10409, %10405
  %10417 = lshr i32 %10416, 4
  %10418 = trunc i32 %10417 to i8
  %10419 = and i8 %10418, 1
  store i8 %10419, i8* %33, align 1
  %10420 = icmp eq i32 %10409, 0
  %10421 = zext i1 %10420 to i8
  store i8 %10421, i8* %36, align 1
  %10422 = lshr i32 %10409, 31
  %10423 = trunc i32 %10422 to i8
  store i8 %10423, i8* %39, align 1
  %10424 = xor i32 %10422, %10408
  %10425 = add nuw nsw i32 %10424, %10408
  %10426 = icmp eq i32 %10425, 2
  %10427 = zext i1 %10426 to i8
  store i8 %10427, i8* %45, align 1
  %10428 = load i64, i64* %RBP.i, align 8
  %10429 = add i64 %10428, -80
  %10430 = add i64 %10372, 21
  store i64 %10430, i64* %3, align 8
  %10431 = inttoptr i64 %10429 to i32*
  %10432 = load i32, i32* %10431, align 4
  %10433 = zext i32 %10432 to i64
  store i64 %10433, i64* %RDX.i5152, align 8
  %10434 = add i64 %10428, -76
  %10435 = add i64 %10372, 25
  store i64 %10435, i64* %3, align 8
  %10436 = inttoptr i64 %10434 to i32*
  %10437 = load i32, i32* %10436, align 4
  %10438 = zext i32 %10437 to i64
  store i64 %10438, i64* %600, align 8
  %10439 = add i64 %10428, -848
  %10440 = add i64 %10372, 32
  store i64 %10440, i64* %3, align 8
  %10441 = inttoptr i64 %10439 to i64*
  %10442 = load i64, i64* %10441, align 8
  store i64 %10442, i64* %RDI.i605, align 8
  %10443 = load i32, i32* %EAX.i1609, align 4
  %10444 = zext i32 %10443 to i64
  store i64 %10444, i64* %RSI.i5212, align 8
  %10445 = add i64 %10428, -856
  %10446 = add i64 %10372, 40
  store i64 %10446, i64* %3, align 8
  %10447 = inttoptr i64 %10445 to i32*
  store i32 %10432, i32* %10447, align 4
  %10448 = load i32, i32* %ECX.i3256, align 4
  %10449 = zext i32 %10448 to i64
  %10450 = load i64, i64* %3, align 8
  store i64 %10449, i64* %RDX.i5152, align 8
  %10451 = load i64, i64* %RBP.i, align 8
  %10452 = add i64 %10451, -856
  %10453 = add i64 %10450, 8
  store i64 %10453, i64* %3, align 8
  %10454 = inttoptr i64 %10452 to i32*
  %10455 = load i32, i32* %10454, align 4
  %10456 = zext i32 %10455 to i64
  store i64 %10456, i64* %RCX.i3128, align 8
  %10457 = add i64 %10450, 455237
  %10458 = add i64 %10450, 13
  %10459 = load i64, i64* %6, align 8
  %10460 = add i64 %10459, -8
  %10461 = inttoptr i64 %10460 to i64*
  store i64 %10458, i64* %10461, align 8
  store i64 %10460, i64* %6, align 8
  store i64 %10457, i64* %3, align 8
  %call2_42f6d3 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %10457, %struct.Memory* %call2_42f659)
  %10462 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %10463 = load i16, i16* %AX.i3315, align 2
  %10464 = zext i16 %10463 to i64
  store i64 %10464, i64* %RDX.i5152, align 8
  %10465 = load i64, i64* %RBP.i, align 8
  %10466 = add i64 %10465, -836
  %10467 = add i64 %10462, 14
  store i64 %10467, i64* %3, align 8
  %10468 = inttoptr i64 %10466 to i32*
  %10469 = load i32, i32* %10468, align 4
  %10470 = zext i16 %10463 to i32
  %10471 = add i32 %10470, %10469
  %10472 = lshr i32 %10471, 31
  %10473 = add i32 %10471, 1
  %10474 = zext i32 %10473 to i64
  store i64 %10474, i64* %RSI.i5212, align 8
  %10475 = icmp eq i32 %10471, -1
  %10476 = icmp eq i32 %10473, 0
  %10477 = or i1 %10475, %10476
  %10478 = zext i1 %10477 to i8
  store i8 %10478, i8* %20, align 1
  %10479 = and i32 %10473, 255
  %10480 = tail call i32 @llvm.ctpop.i32(i32 %10479)
  %10481 = trunc i32 %10480 to i8
  %10482 = and i8 %10481, 1
  %10483 = xor i8 %10482, 1
  store i8 %10483, i8* %27, align 1
  %10484 = xor i32 %10473, %10471
  %10485 = lshr i32 %10484, 4
  %10486 = trunc i32 %10485 to i8
  %10487 = and i8 %10486, 1
  store i8 %10487, i8* %33, align 1
  %10488 = zext i1 %10476 to i8
  store i8 %10488, i8* %36, align 1
  %10489 = lshr i32 %10473, 31
  %10490 = trunc i32 %10489 to i8
  store i8 %10490, i8* %39, align 1
  %10491 = xor i32 %10489, %10472
  %10492 = add nuw nsw i32 %10491, %10489
  %10493 = icmp eq i32 %10492, 2
  %10494 = zext i1 %10493 to i8
  store i8 %10494, i8* %45, align 1
  store i64 %10474, i64* %RAX.i1585, align 8
  %10495 = sext i32 %10473 to i64
  %10496 = lshr i64 %10495, 32
  store i64 %10496, i64* %3718, align 8
  %10497 = add i64 %10462, 24
  store i64 %10497, i64* %3, align 8
  %10498 = shl nuw i64 %10496, 32
  %10499 = or i64 %10498, %10474
  %10500 = sdiv i64 %10499, 2
  %10501 = shl i64 %10500, 32
  %10502 = ashr exact i64 %10501, 32
  %10503 = icmp eq i64 %10500, %10502
  br i1 %10503, label %10506, label %10504

; <label>:10504:                                  ; preds = %block_.L_42f6a3
  %10505 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10497, %struct.Memory* %call2_42f6d3)
  %.pre179 = load i64, i64* %RBP.i, align 8
  %.pre180 = load i64, i64* %3, align 8
  %.pre181 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__ecx.exit1382

; <label>:10506:                                  ; preds = %block_.L_42f6a3
  %10507 = srem i64 %10499, 2
  %10508 = and i64 %10500, 4294967295
  store i64 %10508, i64* %RAX.i1585, align 8
  %10509 = and i64 %10507, 4294967295
  store i64 %10509, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %10510 = trunc i64 %10500 to i32
  br label %routine_idivl__ecx.exit1382

routine_idivl__ecx.exit1382:                      ; preds = %10506, %10504
  %10511 = phi i32 [ %.pre181, %10504 ], [ %10510, %10506 ]
  %10512 = phi i64 [ %.pre180, %10504 ], [ %10497, %10506 ]
  %10513 = phi i64 [ %.pre179, %10504 ], [ %10465, %10506 ]
  %10514 = phi %struct.Memory* [ %10505, %10504 ], [ %call2_42f6d3, %10506 ]
  %10515 = add i64 %10513, -812
  %10516 = add i64 %10512, 6
  store i64 %10516, i64* %3, align 8
  %10517 = inttoptr i64 %10515 to i32*
  %10518 = load i32, i32* %10517, align 4
  %10519 = zext i32 %10518 to i64
  store i64 %10519, i64* %RCX.i3128, align 8
  %10520 = sub i32 %10518, %10511
  %10521 = icmp ult i32 %10518, %10511
  %10522 = zext i1 %10521 to i8
  store i8 %10522, i8* %20, align 1
  %10523 = and i32 %10520, 255
  %10524 = tail call i32 @llvm.ctpop.i32(i32 %10523)
  %10525 = trunc i32 %10524 to i8
  %10526 = and i8 %10525, 1
  %10527 = xor i8 %10526, 1
  store i8 %10527, i8* %27, align 1
  %10528 = xor i32 %10511, %10518
  %10529 = xor i32 %10528, %10520
  %10530 = lshr i32 %10529, 4
  %10531 = trunc i32 %10530 to i8
  %10532 = and i8 %10531, 1
  store i8 %10532, i8* %33, align 1
  %10533 = icmp eq i32 %10520, 0
  %10534 = zext i1 %10533 to i8
  store i8 %10534, i8* %36, align 1
  %10535 = lshr i32 %10520, 31
  %10536 = trunc i32 %10535 to i8
  store i8 %10536, i8* %39, align 1
  %10537 = lshr i32 %10518, 31
  %10538 = lshr i32 %10511, 31
  %10539 = xor i32 %10538, %10537
  %10540 = xor i32 %10535, %10537
  %10541 = add nuw nsw i32 %10540, %10539
  %10542 = icmp eq i32 %10541, 2
  %10543 = zext i1 %10542 to i8
  store i8 %10543, i8* %45, align 1
  %10544 = icmp ne i8 %10536, 0
  %10545 = xor i1 %10544, %10542
  %.v333 = select i1 %10545, i64 14, i64 39
  %10546 = add i64 %10512, %.v333
  store i64 %10546, i64* %3, align 8
  br i1 %10545, label %block_42f6fe, label %block_.L_42f717

block_42f6fe:                                     ; preds = %routine_idivl__ecx.exit1382
  %10547 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10547, i64* %RAX.i1585, align 8
  %10548 = add i64 %10547, 72684
  %10549 = add i64 %10546, 14
  store i64 %10549, i64* %3, align 8
  %10550 = inttoptr i64 %10548 to i32*
  %10551 = load i32, i32* %10550, align 4
  %10552 = zext i32 %10551 to i64
  store i64 %10552, i64* %RCX.i3128, align 8
  %10553 = add i64 %10513, -860
  %10554 = add i64 %10546, 20
  store i64 %10554, i64* %3, align 8
  %10555 = inttoptr i64 %10553 to i32*
  store i32 %10551, i32* %10555, align 4
  %10556 = load i64, i64* %3, align 8
  %10557 = add i64 %10556, 265
  store i64 %10557, i64* %3, align 8
  br label %block_.L_42f81b

block_.L_42f717:                                  ; preds = %routine_idivl__ecx.exit1382
  %10558 = add i64 %10513, -56
  %10559 = add i64 %10546, 4
  store i64 %10559, i64* %3, align 8
  %10560 = inttoptr i64 %10558 to i64*
  %10561 = load i64, i64* %10560, align 8
  store i64 %10561, i64* %RDI.i605, align 8
  %10562 = add i64 %10513, -28
  %10563 = add i64 %10546, 7
  store i64 %10563, i64* %3, align 8
  %10564 = inttoptr i64 %10562 to i32*
  %10565 = load i32, i32* %10564, align 4
  %10566 = add i32 %10565, -16
  %10567 = zext i32 %10566 to i64
  store i64 %10567, i64* %RAX.i1585, align 8
  %10568 = icmp ult i32 %10565, 16
  %10569 = zext i1 %10568 to i8
  store i8 %10569, i8* %20, align 1
  %10570 = and i32 %10566, 255
  %10571 = tail call i32 @llvm.ctpop.i32(i32 %10570)
  %10572 = trunc i32 %10571 to i8
  %10573 = and i8 %10572, 1
  %10574 = xor i8 %10573, 1
  store i8 %10574, i8* %27, align 1
  %10575 = xor i32 %10565, 16
  %10576 = xor i32 %10575, %10566
  %10577 = lshr i32 %10576, 4
  %10578 = trunc i32 %10577 to i8
  %10579 = and i8 %10578, 1
  store i8 %10579, i8* %33, align 1
  %10580 = icmp eq i32 %10566, 0
  %10581 = zext i1 %10580 to i8
  store i8 %10581, i8* %36, align 1
  %10582 = lshr i32 %10566, 31
  %10583 = trunc i32 %10582 to i8
  store i8 %10583, i8* %39, align 1
  %10584 = lshr i32 %10565, 31
  %10585 = xor i32 %10582, %10584
  %10586 = add nuw nsw i32 %10585, %10584
  %10587 = icmp eq i32 %10586, 2
  %10588 = zext i1 %10587 to i8
  store i8 %10588, i8* %45, align 1
  %10589 = add i64 %10513, -36
  %10590 = add i64 %10546, 13
  store i64 %10590, i64* %3, align 8
  %10591 = inttoptr i64 %10589 to i32*
  %10592 = load i32, i32* %10591, align 4
  %10593 = add i32 %10592, 2
  %10594 = zext i32 %10593 to i64
  store i64 %10594, i64* %RCX.i3128, align 8
  %10595 = icmp ugt i32 %10592, -3
  %10596 = zext i1 %10595 to i8
  store i8 %10596, i8* %20, align 1
  %10597 = and i32 %10593, 255
  %10598 = tail call i32 @llvm.ctpop.i32(i32 %10597)
  %10599 = trunc i32 %10598 to i8
  %10600 = and i8 %10599, 1
  %10601 = xor i8 %10600, 1
  store i8 %10601, i8* %27, align 1
  %10602 = xor i32 %10593, %10592
  %10603 = lshr i32 %10602, 4
  %10604 = trunc i32 %10603 to i8
  %10605 = and i8 %10604, 1
  store i8 %10605, i8* %33, align 1
  %10606 = icmp eq i32 %10593, 0
  %10607 = zext i1 %10606 to i8
  store i8 %10607, i8* %36, align 1
  %10608 = lshr i32 %10593, 31
  %10609 = trunc i32 %10608 to i8
  store i8 %10609, i8* %39, align 1
  %10610 = lshr i32 %10592, 31
  %10611 = xor i32 %10608, %10610
  %10612 = add nuw nsw i32 %10611, %10608
  %10613 = icmp eq i32 %10612, 2
  %10614 = zext i1 %10613 to i8
  store i8 %10614, i8* %45, align 1
  %10615 = add i64 %10513, -24
  %10616 = add i64 %10546, 19
  store i64 %10616, i64* %3, align 8
  %10617 = inttoptr i64 %10615 to i32*
  %10618 = load i32, i32* %10617, align 4
  %10619 = add i32 %10618, 1
  %10620 = zext i32 %10619 to i64
  store i64 %10620, i64* %RDX.i5152, align 8
  %10621 = lshr i32 %10619, 31
  %10622 = sub i32 %10593, %10619
  %10623 = icmp ult i32 %10593, %10619
  %10624 = zext i1 %10623 to i8
  store i8 %10624, i8* %20, align 1
  %10625 = and i32 %10622, 255
  %10626 = tail call i32 @llvm.ctpop.i32(i32 %10625)
  %10627 = trunc i32 %10626 to i8
  %10628 = and i8 %10627, 1
  %10629 = xor i8 %10628, 1
  store i8 %10629, i8* %27, align 1
  %10630 = xor i32 %10619, %10593
  %10631 = xor i32 %10630, %10622
  %10632 = lshr i32 %10631, 4
  %10633 = trunc i32 %10632 to i8
  %10634 = and i8 %10633, 1
  store i8 %10634, i8* %33, align 1
  %10635 = icmp eq i32 %10622, 0
  %10636 = zext i1 %10635 to i8
  store i8 %10636, i8* %36, align 1
  %10637 = lshr i32 %10622, 31
  %10638 = trunc i32 %10637 to i8
  store i8 %10638, i8* %39, align 1
  %10639 = xor i32 %10621, %10608
  %10640 = xor i32 %10637, %10608
  %10641 = add nuw nsw i32 %10640, %10639
  %10642 = icmp eq i32 %10641, 2
  %10643 = zext i1 %10642 to i8
  store i8 %10643, i8* %45, align 1
  %10644 = load i64, i64* %RBP.i, align 8
  %10645 = add i64 %10644, -872
  %10646 = load i64, i64* %RDI.i605, align 8
  %10647 = add i64 %10546, 31
  store i64 %10647, i64* %3, align 8
  %10648 = inttoptr i64 %10645 to i64*
  store i64 %10646, i64* %10648, align 8
  %10649 = load i64, i64* %RBP.i, align 8
  %10650 = add i64 %10649, -876
  %10651 = load i32, i32* %EAX.i1609, align 4
  %10652 = load i64, i64* %3, align 8
  %10653 = add i64 %10652, 6
  store i64 %10653, i64* %3, align 8
  %10654 = inttoptr i64 %10650 to i32*
  store i32 %10651, i32* %10654, align 4
  %10655 = load i64, i64* %3, align 8
  %10656 = load i8, i8* %39, align 1
  %10657 = icmp ne i8 %10656, 0
  %10658 = load i8, i8* %45, align 1
  %10659 = icmp ne i8 %10658, 0
  %10660 = xor i1 %10657, %10659
  %.v387 = select i1 %10660, i64 6, i64 23
  %10661 = add i64 %10655, %.v387
  store i64 %10661, i64* %3, align 8
  %10662 = load i64, i64* %RBP.i, align 8
  br i1 %10660, label %block_42f742, label %block_.L_42f753

block_42f742:                                     ; preds = %block_.L_42f717
  %10663 = add i64 %10662, -36
  %10664 = add i64 %10661, 3
  store i64 %10664, i64* %3, align 8
  %10665 = inttoptr i64 %10663 to i32*
  %10666 = load i32, i32* %10665, align 4
  %10667 = add i32 %10666, 2
  %10668 = zext i32 %10667 to i64
  store i64 %10668, i64* %RAX.i1585, align 8
  %10669 = icmp ugt i32 %10666, -3
  %10670 = zext i1 %10669 to i8
  store i8 %10670, i8* %20, align 1
  %10671 = and i32 %10667, 255
  %10672 = tail call i32 @llvm.ctpop.i32(i32 %10671)
  %10673 = trunc i32 %10672 to i8
  %10674 = and i8 %10673, 1
  %10675 = xor i8 %10674, 1
  store i8 %10675, i8* %27, align 1
  %10676 = xor i32 %10667, %10666
  %10677 = lshr i32 %10676, 4
  %10678 = trunc i32 %10677 to i8
  %10679 = and i8 %10678, 1
  store i8 %10679, i8* %33, align 1
  %10680 = icmp eq i32 %10667, 0
  %10681 = zext i1 %10680 to i8
  store i8 %10681, i8* %36, align 1
  %10682 = lshr i32 %10667, 31
  %10683 = trunc i32 %10682 to i8
  store i8 %10683, i8* %39, align 1
  %10684 = lshr i32 %10666, 31
  %10685 = xor i32 %10682, %10684
  %10686 = add nuw nsw i32 %10685, %10682
  %10687 = icmp eq i32 %10686, 2
  %10688 = zext i1 %10687 to i8
  store i8 %10688, i8* %45, align 1
  %10689 = add i64 %10662, -880
  %10690 = add i64 %10661, 12
  store i64 %10690, i64* %3, align 8
  %10691 = inttoptr i64 %10689 to i32*
  store i32 %10667, i32* %10691, align 4
  %10692 = load i64, i64* %3, align 8
  %10693 = add i64 %10692, 17
  store i64 %10693, i64* %3, align 8
  br label %block_.L_42f75f

block_.L_42f753:                                  ; preds = %block_.L_42f717
  %10694 = add i64 %10662, -24
  %10695 = add i64 %10661, 3
  store i64 %10695, i64* %3, align 8
  %10696 = inttoptr i64 %10694 to i32*
  %10697 = load i32, i32* %10696, align 4
  %10698 = add i32 %10697, 1
  %10699 = zext i32 %10698 to i64
  store i64 %10699, i64* %RAX.i1585, align 8
  %10700 = icmp eq i32 %10697, -1
  %10701 = icmp eq i32 %10698, 0
  %10702 = or i1 %10700, %10701
  %10703 = zext i1 %10702 to i8
  store i8 %10703, i8* %20, align 1
  %10704 = and i32 %10698, 255
  %10705 = tail call i32 @llvm.ctpop.i32(i32 %10704)
  %10706 = trunc i32 %10705 to i8
  %10707 = and i8 %10706, 1
  %10708 = xor i8 %10707, 1
  store i8 %10708, i8* %27, align 1
  %10709 = xor i32 %10698, %10697
  %10710 = lshr i32 %10709, 4
  %10711 = trunc i32 %10710 to i8
  %10712 = and i8 %10711, 1
  store i8 %10712, i8* %33, align 1
  %10713 = zext i1 %10701 to i8
  store i8 %10713, i8* %36, align 1
  %10714 = lshr i32 %10698, 31
  %10715 = trunc i32 %10714 to i8
  store i8 %10715, i8* %39, align 1
  %10716 = lshr i32 %10697, 31
  %10717 = xor i32 %10714, %10716
  %10718 = add nuw nsw i32 %10717, %10714
  %10719 = icmp eq i32 %10718, 2
  %10720 = zext i1 %10719 to i8
  store i8 %10720, i8* %45, align 1
  %10721 = add i64 %10662, -880
  %10722 = add i64 %10661, 12
  store i64 %10722, i64* %3, align 8
  %10723 = inttoptr i64 %10721 to i32*
  store i32 %10698, i32* %10723, align 4
  %.pre182 = load i64, i64* %3, align 8
  br label %block_.L_42f75f

block_.L_42f75f:                                  ; preds = %block_.L_42f753, %block_42f742
  %10724 = phi i64 [ %.pre182, %block_.L_42f753 ], [ %10693, %block_42f742 ]
  %10725 = load i64, i64* %RBP.i, align 8
  %10726 = add i64 %10725, -880
  %10727 = add i64 %10724, 6
  store i64 %10727, i64* %3, align 8
  %10728 = inttoptr i64 %10726 to i32*
  %10729 = load i32, i32* %10728, align 4
  %10730 = add i32 %10729, -16
  %10731 = zext i32 %10730 to i64
  store i64 %10731, i64* %RAX.i1585, align 8
  %10732 = icmp ult i32 %10729, 16
  %10733 = zext i1 %10732 to i8
  store i8 %10733, i8* %20, align 1
  %10734 = and i32 %10730, 255
  %10735 = tail call i32 @llvm.ctpop.i32(i32 %10734)
  %10736 = trunc i32 %10735 to i8
  %10737 = and i8 %10736, 1
  %10738 = xor i8 %10737, 1
  store i8 %10738, i8* %27, align 1
  %10739 = xor i32 %10729, 16
  %10740 = xor i32 %10739, %10730
  %10741 = lshr i32 %10740, 4
  %10742 = trunc i32 %10741 to i8
  %10743 = and i8 %10742, 1
  store i8 %10743, i8* %33, align 1
  %10744 = icmp eq i32 %10730, 0
  %10745 = zext i1 %10744 to i8
  store i8 %10745, i8* %36, align 1
  %10746 = lshr i32 %10730, 31
  %10747 = trunc i32 %10746 to i8
  store i8 %10747, i8* %39, align 1
  %10748 = lshr i32 %10729, 31
  %10749 = xor i32 %10746, %10748
  %10750 = add nuw nsw i32 %10749, %10748
  %10751 = icmp eq i32 %10750, 2
  %10752 = zext i1 %10751 to i8
  store i8 %10752, i8* %45, align 1
  %10753 = add i64 %10725, -80
  %10754 = add i64 %10724, 12
  store i64 %10754, i64* %3, align 8
  %10755 = inttoptr i64 %10753 to i32*
  %10756 = load i32, i32* %10755, align 4
  %10757 = zext i32 %10756 to i64
  store i64 %10757, i64* %RCX.i3128, align 8
  %10758 = add i64 %10725, -76
  %10759 = add i64 %10724, 16
  store i64 %10759, i64* %3, align 8
  %10760 = inttoptr i64 %10758 to i32*
  %10761 = load i32, i32* %10760, align 4
  %10762 = zext i32 %10761 to i64
  store i64 %10762, i64* %600, align 8
  %10763 = add i64 %10725, -872
  %10764 = add i64 %10724, 23
  store i64 %10764, i64* %3, align 8
  %10765 = inttoptr i64 %10763 to i64*
  %10766 = load i64, i64* %10765, align 8
  store i64 %10766, i64* %RDI.i605, align 8
  %10767 = add i64 %10725, -876
  %10768 = add i64 %10724, 29
  store i64 %10768, i64* %3, align 8
  %10769 = inttoptr i64 %10767 to i32*
  %10770 = load i32, i32* %10769, align 4
  %10771 = zext i32 %10770 to i64
  store i64 %10771, i64* %RSI.i5212, align 8
  store i64 %10731, i64* %RDX.i5152, align 8
  %10772 = add i64 %10724, 455089
  %10773 = add i64 %10724, 36
  %10774 = load i64, i64* %6, align 8
  %10775 = add i64 %10774, -8
  %10776 = inttoptr i64 %10775 to i64*
  store i64 %10773, i64* %10776, align 8
  store i64 %10775, i64* %6, align 8
  store i64 %10772, i64* %3, align 8
  %call2_42f77e = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %10772, %struct.Memory* %10514)
  %10777 = load i16, i16* %AX.i3315, align 2
  %10778 = zext i16 %10777 to i64
  %10779 = load i64, i64* %3, align 8
  store i64 %10778, i64* %RCX.i3128, align 8
  %10780 = load i64, i64* %RBP.i, align 8
  %10781 = add i64 %10780, -56
  %10782 = add i64 %10779, 7
  store i64 %10782, i64* %3, align 8
  %10783 = inttoptr i64 %10781 to i64*
  %10784 = load i64, i64* %10783, align 8
  store i64 %10784, i64* %RDI.i605, align 8
  %10785 = add i64 %10780, -40
  %10786 = add i64 %10779, 10
  store i64 %10786, i64* %3, align 8
  %10787 = inttoptr i64 %10785 to i32*
  %10788 = load i32, i32* %10787, align 4
  %10789 = add i32 %10788, 2
  %10790 = zext i32 %10789 to i64
  store i64 %10790, i64* %RDX.i5152, align 8
  %10791 = icmp ugt i32 %10788, -3
  %10792 = zext i1 %10791 to i8
  store i8 %10792, i8* %20, align 1
  %10793 = and i32 %10789, 255
  %10794 = tail call i32 @llvm.ctpop.i32(i32 %10793)
  %10795 = trunc i32 %10794 to i8
  %10796 = and i8 %10795, 1
  %10797 = xor i8 %10796, 1
  store i8 %10797, i8* %27, align 1
  %10798 = xor i32 %10789, %10788
  %10799 = lshr i32 %10798, 4
  %10800 = trunc i32 %10799 to i8
  %10801 = and i8 %10800, 1
  store i8 %10801, i8* %33, align 1
  %10802 = icmp eq i32 %10789, 0
  %10803 = zext i1 %10802 to i8
  store i8 %10803, i8* %36, align 1
  %10804 = lshr i32 %10789, 31
  %10805 = trunc i32 %10804 to i8
  store i8 %10805, i8* %39, align 1
  %10806 = lshr i32 %10788, 31
  %10807 = xor i32 %10804, %10806
  %10808 = add nuw nsw i32 %10807, %10804
  %10809 = icmp eq i32 %10808, 2
  %10810 = zext i1 %10809 to i8
  store i8 %10810, i8* %45, align 1
  %10811 = add i64 %10780, -28
  %10812 = add i64 %10779, 16
  store i64 %10812, i64* %3, align 8
  %10813 = inttoptr i64 %10811 to i32*
  %10814 = load i32, i32* %10813, align 4
  %10815 = add i32 %10814, 2
  %10816 = zext i32 %10815 to i64
  store i64 %10816, i64* %RSI.i5212, align 8
  %10817 = lshr i32 %10815, 31
  %10818 = sub i32 %10789, %10815
  %10819 = icmp ult i32 %10789, %10815
  %10820 = zext i1 %10819 to i8
  store i8 %10820, i8* %20, align 1
  %10821 = and i32 %10818, 255
  %10822 = tail call i32 @llvm.ctpop.i32(i32 %10821)
  %10823 = trunc i32 %10822 to i8
  %10824 = and i8 %10823, 1
  %10825 = xor i8 %10824, 1
  store i8 %10825, i8* %27, align 1
  %10826 = xor i32 %10815, %10789
  %10827 = xor i32 %10826, %10818
  %10828 = lshr i32 %10827, 4
  %10829 = trunc i32 %10828 to i8
  %10830 = and i8 %10829, 1
  store i8 %10830, i8* %33, align 1
  %10831 = icmp eq i32 %10818, 0
  %10832 = zext i1 %10831 to i8
  store i8 %10832, i8* %36, align 1
  %10833 = lshr i32 %10818, 31
  %10834 = trunc i32 %10833 to i8
  store i8 %10834, i8* %39, align 1
  %10835 = xor i32 %10817, %10804
  %10836 = xor i32 %10833, %10804
  %10837 = add nuw nsw i32 %10836, %10835
  %10838 = icmp eq i32 %10837, 2
  %10839 = zext i1 %10838 to i8
  store i8 %10839, i8* %45, align 1
  %10840 = load i64, i64* %RBP.i, align 8
  %10841 = add i64 %10840, -884
  %10842 = load i32, i32* %ECX.i3256, align 4
  %10843 = add i64 %10779, 27
  store i64 %10843, i64* %3, align 8
  %10844 = inttoptr i64 %10841 to i32*
  store i32 %10842, i32* %10844, align 4
  %10845 = load i64, i64* %RBP.i, align 8
  %10846 = add i64 %10845, -896
  %10847 = load i64, i64* %RDI.i605, align 8
  %10848 = load i64, i64* %3, align 8
  %10849 = add i64 %10848, 7
  store i64 %10849, i64* %3, align 8
  %10850 = inttoptr i64 %10846 to i64*
  store i64 %10847, i64* %10850, align 8
  %10851 = load i64, i64* %3, align 8
  %10852 = load i8, i8* %39, align 1
  %10853 = icmp ne i8 %10852, 0
  %10854 = load i8, i8* %45, align 1
  %10855 = icmp ne i8 %10854, 0
  %10856 = xor i1 %10853, %10855
  %.v388 = select i1 %10856, i64 6, i64 23
  %10857 = add i64 %10851, %.v388
  store i64 %10857, i64* %3, align 8
  %10858 = load i64, i64* %RBP.i, align 8
  br i1 %10856, label %block_42f7ab, label %block_.L_42f7bc

block_42f7ab:                                     ; preds = %block_.L_42f75f
  %10859 = add i64 %10858, -40
  %10860 = add i64 %10857, 3
  store i64 %10860, i64* %3, align 8
  %10861 = inttoptr i64 %10859 to i32*
  %10862 = load i32, i32* %10861, align 4
  %10863 = add i32 %10862, 2
  %10864 = zext i32 %10863 to i64
  store i64 %10864, i64* %RAX.i1585, align 8
  %10865 = icmp ugt i32 %10862, -3
  %10866 = zext i1 %10865 to i8
  store i8 %10866, i8* %20, align 1
  %10867 = and i32 %10863, 255
  %10868 = tail call i32 @llvm.ctpop.i32(i32 %10867)
  %10869 = trunc i32 %10868 to i8
  %10870 = and i8 %10869, 1
  %10871 = xor i8 %10870, 1
  store i8 %10871, i8* %27, align 1
  %10872 = xor i32 %10863, %10862
  %10873 = lshr i32 %10872, 4
  %10874 = trunc i32 %10873 to i8
  %10875 = and i8 %10874, 1
  store i8 %10875, i8* %33, align 1
  %10876 = icmp eq i32 %10863, 0
  %10877 = zext i1 %10876 to i8
  store i8 %10877, i8* %36, align 1
  %10878 = lshr i32 %10863, 31
  %10879 = trunc i32 %10878 to i8
  store i8 %10879, i8* %39, align 1
  %10880 = lshr i32 %10862, 31
  %10881 = xor i32 %10878, %10880
  %10882 = add nuw nsw i32 %10881, %10878
  %10883 = icmp eq i32 %10882, 2
  %10884 = zext i1 %10883 to i8
  store i8 %10884, i8* %45, align 1
  %10885 = add i64 %10858, -900
  %10886 = add i64 %10857, 12
  store i64 %10886, i64* %3, align 8
  %10887 = inttoptr i64 %10885 to i32*
  store i32 %10863, i32* %10887, align 4
  %10888 = load i64, i64* %3, align 8
  %10889 = add i64 %10888, 17
  store i64 %10889, i64* %3, align 8
  br label %block_.L_42f7c8

block_.L_42f7bc:                                  ; preds = %block_.L_42f75f
  %10890 = add i64 %10858, -28
  %10891 = add i64 %10857, 3
  store i64 %10891, i64* %3, align 8
  %10892 = inttoptr i64 %10890 to i32*
  %10893 = load i32, i32* %10892, align 4
  %10894 = add i32 %10893, 2
  %10895 = zext i32 %10894 to i64
  store i64 %10895, i64* %RAX.i1585, align 8
  %10896 = icmp ugt i32 %10893, -3
  %10897 = zext i1 %10896 to i8
  store i8 %10897, i8* %20, align 1
  %10898 = and i32 %10894, 255
  %10899 = tail call i32 @llvm.ctpop.i32(i32 %10898)
  %10900 = trunc i32 %10899 to i8
  %10901 = and i8 %10900, 1
  %10902 = xor i8 %10901, 1
  store i8 %10902, i8* %27, align 1
  %10903 = xor i32 %10894, %10893
  %10904 = lshr i32 %10903, 4
  %10905 = trunc i32 %10904 to i8
  %10906 = and i8 %10905, 1
  store i8 %10906, i8* %33, align 1
  %10907 = icmp eq i32 %10894, 0
  %10908 = zext i1 %10907 to i8
  store i8 %10908, i8* %36, align 1
  %10909 = lshr i32 %10894, 31
  %10910 = trunc i32 %10909 to i8
  store i8 %10910, i8* %39, align 1
  %10911 = lshr i32 %10893, 31
  %10912 = xor i32 %10909, %10911
  %10913 = add nuw nsw i32 %10912, %10909
  %10914 = icmp eq i32 %10913, 2
  %10915 = zext i1 %10914 to i8
  store i8 %10915, i8* %45, align 1
  %10916 = add i64 %10858, -900
  %10917 = add i64 %10857, 12
  store i64 %10917, i64* %3, align 8
  %10918 = inttoptr i64 %10916 to i32*
  store i32 %10894, i32* %10918, align 4
  %.pre183 = load i64, i64* %3, align 8
  br label %block_.L_42f7c8

block_.L_42f7c8:                                  ; preds = %block_.L_42f7bc, %block_42f7ab
  %10919 = phi i64 [ %.pre183, %block_.L_42f7bc ], [ %10889, %block_42f7ab ]
  %10920 = load i64, i64* %RBP.i, align 8
  %10921 = add i64 %10920, -900
  %10922 = add i64 %10919, 6
  store i64 %10922, i64* %3, align 8
  %10923 = inttoptr i64 %10921 to i32*
  %10924 = load i32, i32* %10923, align 4
  %10925 = add i32 %10924, -16
  %10926 = zext i32 %10925 to i64
  store i64 %10926, i64* %RAX.i1585, align 8
  %10927 = icmp ult i32 %10924, 16
  %10928 = zext i1 %10927 to i8
  store i8 %10928, i8* %20, align 1
  %10929 = and i32 %10925, 255
  %10930 = tail call i32 @llvm.ctpop.i32(i32 %10929)
  %10931 = trunc i32 %10930 to i8
  %10932 = and i8 %10931, 1
  %10933 = xor i8 %10932, 1
  store i8 %10933, i8* %27, align 1
  %10934 = xor i32 %10924, 16
  %10935 = xor i32 %10934, %10925
  %10936 = lshr i32 %10935, 4
  %10937 = trunc i32 %10936 to i8
  %10938 = and i8 %10937, 1
  store i8 %10938, i8* %33, align 1
  %10939 = icmp eq i32 %10925, 0
  %10940 = zext i1 %10939 to i8
  store i8 %10940, i8* %36, align 1
  %10941 = lshr i32 %10925, 31
  %10942 = trunc i32 %10941 to i8
  store i8 %10942, i8* %39, align 1
  %10943 = lshr i32 %10924, 31
  %10944 = xor i32 %10941, %10943
  %10945 = add nuw nsw i32 %10944, %10943
  %10946 = icmp eq i32 %10945, 2
  %10947 = zext i1 %10946 to i8
  store i8 %10947, i8* %45, align 1
  %10948 = add i64 %10920, -24
  %10949 = add i64 %10919, 12
  store i64 %10949, i64* %3, align 8
  %10950 = inttoptr i64 %10948 to i32*
  %10951 = load i32, i32* %10950, align 4
  %10952 = add i32 %10951, -16
  %10953 = icmp eq i32 %10952, 0
  %10954 = zext i1 %10953 to i8
  %10955 = lshr i32 %10952, 31
  %10956 = add i32 %10951, -17
  %10957 = zext i32 %10956 to i64
  store i64 %10957, i64* %RCX.i3128, align 8
  store i8 %10954, i8* %20, align 1
  %10958 = and i32 %10956, 255
  %10959 = tail call i32 @llvm.ctpop.i32(i32 %10958)
  %10960 = trunc i32 %10959 to i8
  %10961 = and i8 %10960, 1
  %10962 = xor i8 %10961, 1
  store i8 %10962, i8* %27, align 1
  %10963 = xor i32 %10956, %10952
  %10964 = lshr i32 %10963, 4
  %10965 = trunc i32 %10964 to i8
  %10966 = and i8 %10965, 1
  store i8 %10966, i8* %33, align 1
  %10967 = icmp eq i32 %10956, 0
  %10968 = zext i1 %10967 to i8
  store i8 %10968, i8* %36, align 1
  %10969 = lshr i32 %10956, 31
  %10970 = trunc i32 %10969 to i8
  store i8 %10970, i8* %39, align 1
  %10971 = xor i32 %10969, %10955
  %10972 = add nuw nsw i32 %10971, %10955
  %10973 = icmp eq i32 %10972, 2
  %10974 = zext i1 %10973 to i8
  store i8 %10974, i8* %45, align 1
  %10975 = load i64, i64* %RBP.i, align 8
  %10976 = add i64 %10975, -80
  %10977 = add i64 %10919, 21
  store i64 %10977, i64* %3, align 8
  %10978 = inttoptr i64 %10976 to i32*
  %10979 = load i32, i32* %10978, align 4
  %10980 = zext i32 %10979 to i64
  store i64 %10980, i64* %RDX.i5152, align 8
  %10981 = add i64 %10975, -76
  %10982 = add i64 %10919, 25
  store i64 %10982, i64* %3, align 8
  %10983 = inttoptr i64 %10981 to i32*
  %10984 = load i32, i32* %10983, align 4
  %10985 = zext i32 %10984 to i64
  store i64 %10985, i64* %600, align 8
  %10986 = add i64 %10975, -896
  %10987 = add i64 %10919, 32
  store i64 %10987, i64* %3, align 8
  %10988 = inttoptr i64 %10986 to i64*
  %10989 = load i64, i64* %10988, align 8
  store i64 %10989, i64* %RDI.i605, align 8
  %10990 = load i32, i32* %EAX.i1609, align 4
  %10991 = zext i32 %10990 to i64
  store i64 %10991, i64* %RSI.i5212, align 8
  %10992 = add i64 %10975, -904
  %10993 = add i64 %10919, 40
  store i64 %10993, i64* %3, align 8
  %10994 = inttoptr i64 %10992 to i32*
  store i32 %10979, i32* %10994, align 4
  %10995 = load i32, i32* %ECX.i3256, align 4
  %10996 = zext i32 %10995 to i64
  %10997 = load i64, i64* %3, align 8
  store i64 %10996, i64* %RDX.i5152, align 8
  %10998 = load i64, i64* %RBP.i, align 8
  %10999 = add i64 %10998, -904
  %11000 = add i64 %10997, 8
  store i64 %11000, i64* %3, align 8
  %11001 = inttoptr i64 %10999 to i32*
  %11002 = load i32, i32* %11001, align 4
  %11003 = zext i32 %11002 to i64
  store i64 %11003, i64* %RCX.i3128, align 8
  %11004 = add i64 %10997, 454944
  %11005 = add i64 %10997, 13
  %11006 = load i64, i64* %6, align 8
  %11007 = add i64 %11006, -8
  %11008 = inttoptr i64 %11007 to i64*
  store i64 %11005, i64* %11008, align 8
  store i64 %11007, i64* %6, align 8
  store i64 %11004, i64* %3, align 8
  %call2_42f7f8 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %11004, %struct.Memory* %call2_42f77e)
  %11009 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %11010 = load i16, i16* %AX.i3315, align 2
  %11011 = zext i16 %11010 to i64
  store i64 %11011, i64* %RDX.i5152, align 8
  %11012 = load i64, i64* %RBP.i, align 8
  %11013 = add i64 %11012, -884
  %11014 = add i64 %11009, 14
  store i64 %11014, i64* %3, align 8
  %11015 = inttoptr i64 %11013 to i32*
  %11016 = load i32, i32* %11015, align 4
  %11017 = zext i16 %11010 to i32
  %11018 = add i32 %11017, %11016
  %11019 = lshr i32 %11018, 31
  %11020 = add i32 %11018, 1
  %11021 = zext i32 %11020 to i64
  store i64 %11021, i64* %RSI.i5212, align 8
  %11022 = icmp eq i32 %11018, -1
  %11023 = icmp eq i32 %11020, 0
  %11024 = or i1 %11022, %11023
  %11025 = zext i1 %11024 to i8
  store i8 %11025, i8* %20, align 1
  %11026 = and i32 %11020, 255
  %11027 = tail call i32 @llvm.ctpop.i32(i32 %11026)
  %11028 = trunc i32 %11027 to i8
  %11029 = and i8 %11028, 1
  %11030 = xor i8 %11029, 1
  store i8 %11030, i8* %27, align 1
  %11031 = xor i32 %11020, %11018
  %11032 = lshr i32 %11031, 4
  %11033 = trunc i32 %11032 to i8
  %11034 = and i8 %11033, 1
  store i8 %11034, i8* %33, align 1
  %11035 = zext i1 %11023 to i8
  store i8 %11035, i8* %36, align 1
  %11036 = lshr i32 %11020, 31
  %11037 = trunc i32 %11036 to i8
  store i8 %11037, i8* %39, align 1
  %11038 = xor i32 %11036, %11019
  %11039 = add nuw nsw i32 %11038, %11036
  %11040 = icmp eq i32 %11039, 2
  %11041 = zext i1 %11040 to i8
  store i8 %11041, i8* %45, align 1
  store i64 %11021, i64* %RAX.i1585, align 8
  %11042 = sext i32 %11020 to i64
  %11043 = lshr i64 %11042, 32
  store i64 %11043, i64* %3718, align 8
  %11044 = add i64 %11009, 24
  store i64 %11044, i64* %3, align 8
  %11045 = shl nuw i64 %11043, 32
  %11046 = or i64 %11045, %11021
  %11047 = sdiv i64 %11046, 2
  %11048 = shl i64 %11047, 32
  %11049 = ashr exact i64 %11048, 32
  %11050 = icmp eq i64 %11047, %11049
  br i1 %11050, label %11053, label %11051

; <label>:11051:                                  ; preds = %block_.L_42f7c8
  %11052 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11044, %struct.Memory* %call2_42f7f8)
  %.pre184 = load i64, i64* %RBP.i, align 8
  %.pre185 = load i32, i32* %EAX.i1609, align 4
  %.pre186 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1200

; <label>:11053:                                  ; preds = %block_.L_42f7c8
  %11054 = srem i64 %11046, 2
  %11055 = and i64 %11047, 4294967295
  store i64 %11055, i64* %RAX.i1585, align 8
  %11056 = and i64 %11054, 4294967295
  store i64 %11056, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %11057 = trunc i64 %11047 to i32
  br label %routine_idivl__ecx.exit1200

routine_idivl__ecx.exit1200:                      ; preds = %11053, %11051
  %11058 = phi i64 [ %.pre186, %11051 ], [ %11044, %11053 ]
  %11059 = phi i32 [ %.pre185, %11051 ], [ %11057, %11053 ]
  %11060 = phi i64 [ %.pre184, %11051 ], [ %11012, %11053 ]
  %11061 = phi %struct.Memory* [ %11052, %11051 ], [ %call2_42f7f8, %11053 ]
  %11062 = add i64 %11060, -860
  %11063 = add i64 %11058, 6
  store i64 %11063, i64* %3, align 8
  %11064 = inttoptr i64 %11062 to i32*
  store i32 %11059, i32* %11064, align 4
  %.pre187 = load i64, i64* %3, align 8
  br label %block_.L_42f81b

block_.L_42f81b:                                  ; preds = %routine_idivl__ecx.exit1200, %block_42f6fe
  %11065 = phi i64 [ %.pre187, %routine_idivl__ecx.exit1200 ], [ %10557, %block_42f6fe ]
  %MEMORY.68 = phi %struct.Memory* [ %11061, %routine_idivl__ecx.exit1200 ], [ %10514, %block_42f6fe ]
  %11066 = load i64, i64* %RBP.i, align 8
  %11067 = add i64 %11066, -860
  %11068 = add i64 %11065, 6
  store i64 %11068, i64* %3, align 8
  %11069 = inttoptr i64 %11067 to i32*
  %11070 = load i32, i32* %11069, align 4
  %11071 = zext i32 %11070 to i64
  store i64 %11071, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %11072 = sub i32 0, %11070
  %11073 = icmp ne i32 %11070, 0
  %11074 = zext i1 %11073 to i8
  store i8 %11074, i8* %20, align 1
  %11075 = and i32 %11072, 255
  %11076 = tail call i32 @llvm.ctpop.i32(i32 %11075)
  %11077 = trunc i32 %11076 to i8
  %11078 = and i8 %11077, 1
  %11079 = xor i8 %11078, 1
  store i8 %11079, i8* %27, align 1
  %11080 = xor i32 %11070, %11072
  %11081 = lshr i32 %11080, 4
  %11082 = trunc i32 %11081 to i8
  %11083 = and i8 %11082, 1
  store i8 %11083, i8* %33, align 1
  %11084 = icmp eq i32 %11070, 0
  %11085 = zext i1 %11084 to i8
  store i8 %11085, i8* %36, align 1
  %11086 = lshr i32 %11072, 31
  %11087 = trunc i32 %11086 to i8
  store i8 %11087, i8* %39, align 1
  %11088 = lshr i32 %11070, 31
  %11089 = add nuw nsw i32 %11086, %11088
  %11090 = icmp eq i32 %11089, 2
  %11091 = zext i1 %11090 to i8
  store i8 %11091, i8* %45, align 1
  %11092 = icmp ne i8 %11087, 0
  %11093 = xor i1 %11092, %11090
  %11094 = or i1 %11084, %11093
  %.v334 = select i1 %11094, i64 29, i64 16
  %11095 = add i64 %11065, %.v334
  store i64 %11095, i64* %3, align 8
  br i1 %11094, label %block_.L_42f838, label %block_42f82b

block_42f82b:                                     ; preds = %block_.L_42f81b
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %11096 = add i64 %11066, -908
  %11097 = add i64 %11095, 8
  store i64 %11097, i64* %3, align 8
  %11098 = inttoptr i64 %11096 to i32*
  store i32 0, i32* %11098, align 4
  %11099 = load i64, i64* %3, align 8
  %11100 = add i64 %11099, 593
  store i64 %11100, i64* %3, align 8
  br label %block_.L_42fa84

block_.L_42f838:                                  ; preds = %block_.L_42f81b
  %11101 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11101, i64* %RAX.i1585, align 8
  %11102 = add i64 %11101, 72684
  %11103 = add i64 %11095, 14
  store i64 %11103, i64* %3, align 8
  %11104 = inttoptr i64 %11102 to i32*
  %11105 = load i32, i32* %11104, align 4
  %11106 = zext i32 %11105 to i64
  store i64 %11106, i64* %RCX.i3128, align 8
  %11107 = add i64 %11066, -56
  %11108 = add i64 %11095, 18
  store i64 %11108, i64* %3, align 8
  %11109 = inttoptr i64 %11107 to i64*
  %11110 = load i64, i64* %11109, align 8
  store i64 %11110, i64* %RDI.i605, align 8
  %11111 = add i64 %11066, -28
  %11112 = add i64 %11095, 21
  store i64 %11112, i64* %3, align 8
  %11113 = inttoptr i64 %11111 to i32*
  %11114 = load i32, i32* %11113, align 4
  %11115 = add i32 %11114, -16
  %11116 = zext i32 %11115 to i64
  store i64 %11116, i64* %RDX.i5152, align 8
  %11117 = icmp ult i32 %11114, 16
  %11118 = zext i1 %11117 to i8
  store i8 %11118, i8* %20, align 1
  %11119 = and i32 %11115, 255
  %11120 = tail call i32 @llvm.ctpop.i32(i32 %11119)
  %11121 = trunc i32 %11120 to i8
  %11122 = and i8 %11121, 1
  %11123 = xor i8 %11122, 1
  store i8 %11123, i8* %27, align 1
  %11124 = xor i32 %11114, 16
  %11125 = xor i32 %11124, %11115
  %11126 = lshr i32 %11125, 4
  %11127 = trunc i32 %11126 to i8
  %11128 = and i8 %11127, 1
  store i8 %11128, i8* %33, align 1
  %11129 = icmp eq i32 %11115, 0
  %11130 = zext i1 %11129 to i8
  store i8 %11130, i8* %36, align 1
  %11131 = lshr i32 %11115, 31
  %11132 = trunc i32 %11131 to i8
  store i8 %11132, i8* %39, align 1
  %11133 = lshr i32 %11114, 31
  %11134 = xor i32 %11131, %11133
  %11135 = add nuw nsw i32 %11134, %11133
  %11136 = icmp eq i32 %11135, 2
  %11137 = zext i1 %11136 to i8
  store i8 %11137, i8* %45, align 1
  %11138 = add i64 %11066, -36
  %11139 = add i64 %11095, 27
  store i64 %11139, i64* %3, align 8
  %11140 = inttoptr i64 %11138 to i32*
  %11141 = load i32, i32* %11140, align 4
  %11142 = add i32 %11141, 2
  %11143 = zext i32 %11142 to i64
  store i64 %11143, i64* %RSI.i5212, align 8
  %11144 = icmp ugt i32 %11141, -3
  %11145 = zext i1 %11144 to i8
  store i8 %11145, i8* %20, align 1
  %11146 = and i32 %11142, 255
  %11147 = tail call i32 @llvm.ctpop.i32(i32 %11146)
  %11148 = trunc i32 %11147 to i8
  %11149 = and i8 %11148, 1
  %11150 = xor i8 %11149, 1
  store i8 %11150, i8* %27, align 1
  %11151 = xor i32 %11142, %11141
  %11152 = lshr i32 %11151, 4
  %11153 = trunc i32 %11152 to i8
  %11154 = and i8 %11153, 1
  store i8 %11154, i8* %33, align 1
  %11155 = icmp eq i32 %11142, 0
  %11156 = zext i1 %11155 to i8
  store i8 %11156, i8* %36, align 1
  %11157 = lshr i32 %11142, 31
  %11158 = trunc i32 %11157 to i8
  store i8 %11158, i8* %39, align 1
  %11159 = lshr i32 %11141, 31
  %11160 = xor i32 %11157, %11159
  %11161 = add nuw nsw i32 %11160, %11157
  %11162 = icmp eq i32 %11161, 2
  %11163 = zext i1 %11162 to i8
  store i8 %11163, i8* %45, align 1
  %11164 = add i64 %11066, -24
  %11165 = add i64 %11095, 34
  store i64 %11165, i64* %3, align 8
  %11166 = inttoptr i64 %11164 to i32*
  %11167 = load i32, i32* %11166, align 4
  %11168 = add i32 %11167, 1
  %11169 = zext i32 %11168 to i64
  store i64 %11169, i64* %600, align 8
  %11170 = lshr i32 %11168, 31
  %11171 = sub i32 %11142, %11168
  %11172 = icmp ult i32 %11142, %11168
  %11173 = zext i1 %11172 to i8
  store i8 %11173, i8* %20, align 1
  %11174 = and i32 %11171, 255
  %11175 = tail call i32 @llvm.ctpop.i32(i32 %11174)
  %11176 = trunc i32 %11175 to i8
  %11177 = and i8 %11176, 1
  %11178 = xor i8 %11177, 1
  store i8 %11178, i8* %27, align 1
  %11179 = xor i32 %11168, %11142
  %11180 = xor i32 %11179, %11171
  %11181 = lshr i32 %11180, 4
  %11182 = trunc i32 %11181 to i8
  %11183 = and i8 %11182, 1
  store i8 %11183, i8* %33, align 1
  %11184 = icmp eq i32 %11171, 0
  %11185 = zext i1 %11184 to i8
  store i8 %11185, i8* %36, align 1
  %11186 = lshr i32 %11171, 31
  %11187 = trunc i32 %11186 to i8
  store i8 %11187, i8* %39, align 1
  %11188 = xor i32 %11170, %11157
  %11189 = xor i32 %11186, %11157
  %11190 = add nuw nsw i32 %11189, %11188
  %11191 = icmp eq i32 %11190, 2
  %11192 = zext i1 %11191 to i8
  store i8 %11192, i8* %45, align 1
  %11193 = load i64, i64* %RBP.i, align 8
  %11194 = add i64 %11193, -912
  %11195 = load i32, i32* %ECX.i3256, align 4
  %11196 = add i64 %11095, 47
  store i64 %11196, i64* %3, align 8
  %11197 = inttoptr i64 %11194 to i32*
  store i32 %11195, i32* %11197, align 4
  %11198 = load i64, i64* %RBP.i, align 8
  %11199 = add i64 %11198, -920
  %11200 = load i64, i64* %RDI.i605, align 8
  %11201 = load i64, i64* %3, align 8
  %11202 = add i64 %11201, 7
  store i64 %11202, i64* %3, align 8
  %11203 = inttoptr i64 %11199 to i64*
  store i64 %11200, i64* %11203, align 8
  %11204 = load i64, i64* %RBP.i, align 8
  %11205 = add i64 %11204, -924
  %11206 = load i32, i32* %EDX.i5198, align 4
  %11207 = load i64, i64* %3, align 8
  %11208 = add i64 %11207, 6
  store i64 %11208, i64* %3, align 8
  %11209 = inttoptr i64 %11205 to i32*
  store i32 %11206, i32* %11209, align 4
  %11210 = load i64, i64* %3, align 8
  %11211 = load i8, i8* %39, align 1
  %11212 = icmp ne i8 %11211, 0
  %11213 = load i8, i8* %45, align 1
  %11214 = icmp ne i8 %11213, 0
  %11215 = xor i1 %11212, %11214
  %.v389 = select i1 %11215, i64 6, i64 23
  %11216 = add i64 %11210, %.v389
  store i64 %11216, i64* %3, align 8
  %11217 = load i64, i64* %RBP.i, align 8
  br i1 %11215, label %block_42f87a, label %block_.L_42f88b

block_42f87a:                                     ; preds = %block_.L_42f838
  %11218 = add i64 %11217, -36
  %11219 = add i64 %11216, 3
  store i64 %11219, i64* %3, align 8
  %11220 = inttoptr i64 %11218 to i32*
  %11221 = load i32, i32* %11220, align 4
  %11222 = add i32 %11221, 2
  %11223 = zext i32 %11222 to i64
  store i64 %11223, i64* %RAX.i1585, align 8
  %11224 = icmp ugt i32 %11221, -3
  %11225 = zext i1 %11224 to i8
  store i8 %11225, i8* %20, align 1
  %11226 = and i32 %11222, 255
  %11227 = tail call i32 @llvm.ctpop.i32(i32 %11226)
  %11228 = trunc i32 %11227 to i8
  %11229 = and i8 %11228, 1
  %11230 = xor i8 %11229, 1
  store i8 %11230, i8* %27, align 1
  %11231 = xor i32 %11222, %11221
  %11232 = lshr i32 %11231, 4
  %11233 = trunc i32 %11232 to i8
  %11234 = and i8 %11233, 1
  store i8 %11234, i8* %33, align 1
  %11235 = icmp eq i32 %11222, 0
  %11236 = zext i1 %11235 to i8
  store i8 %11236, i8* %36, align 1
  %11237 = lshr i32 %11222, 31
  %11238 = trunc i32 %11237 to i8
  store i8 %11238, i8* %39, align 1
  %11239 = lshr i32 %11221, 31
  %11240 = xor i32 %11237, %11239
  %11241 = add nuw nsw i32 %11240, %11237
  %11242 = icmp eq i32 %11241, 2
  %11243 = zext i1 %11242 to i8
  store i8 %11243, i8* %45, align 1
  %11244 = add i64 %11217, -928
  %11245 = add i64 %11216, 12
  store i64 %11245, i64* %3, align 8
  %11246 = inttoptr i64 %11244 to i32*
  store i32 %11222, i32* %11246, align 4
  %11247 = load i64, i64* %3, align 8
  %11248 = add i64 %11247, 17
  store i64 %11248, i64* %3, align 8
  br label %block_.L_42f897

block_.L_42f88b:                                  ; preds = %block_.L_42f838
  %11249 = add i64 %11217, -24
  %11250 = add i64 %11216, 3
  store i64 %11250, i64* %3, align 8
  %11251 = inttoptr i64 %11249 to i32*
  %11252 = load i32, i32* %11251, align 4
  %11253 = add i32 %11252, 1
  %11254 = zext i32 %11253 to i64
  store i64 %11254, i64* %RAX.i1585, align 8
  %11255 = icmp eq i32 %11252, -1
  %11256 = icmp eq i32 %11253, 0
  %11257 = or i1 %11255, %11256
  %11258 = zext i1 %11257 to i8
  store i8 %11258, i8* %20, align 1
  %11259 = and i32 %11253, 255
  %11260 = tail call i32 @llvm.ctpop.i32(i32 %11259)
  %11261 = trunc i32 %11260 to i8
  %11262 = and i8 %11261, 1
  %11263 = xor i8 %11262, 1
  store i8 %11263, i8* %27, align 1
  %11264 = xor i32 %11253, %11252
  %11265 = lshr i32 %11264, 4
  %11266 = trunc i32 %11265 to i8
  %11267 = and i8 %11266, 1
  store i8 %11267, i8* %33, align 1
  %11268 = zext i1 %11256 to i8
  store i8 %11268, i8* %36, align 1
  %11269 = lshr i32 %11253, 31
  %11270 = trunc i32 %11269 to i8
  store i8 %11270, i8* %39, align 1
  %11271 = lshr i32 %11252, 31
  %11272 = xor i32 %11269, %11271
  %11273 = add nuw nsw i32 %11272, %11269
  %11274 = icmp eq i32 %11273, 2
  %11275 = zext i1 %11274 to i8
  store i8 %11275, i8* %45, align 1
  %11276 = add i64 %11217, -928
  %11277 = add i64 %11216, 12
  store i64 %11277, i64* %3, align 8
  %11278 = inttoptr i64 %11276 to i32*
  store i32 %11253, i32* %11278, align 4
  %.pre188 = load i64, i64* %3, align 8
  br label %block_.L_42f897

block_.L_42f897:                                  ; preds = %block_.L_42f88b, %block_42f87a
  %11279 = phi i64 [ %.pre188, %block_.L_42f88b ], [ %11248, %block_42f87a ]
  %11280 = load i64, i64* %RBP.i, align 8
  %11281 = add i64 %11280, -928
  %11282 = add i64 %11279, 6
  store i64 %11282, i64* %3, align 8
  %11283 = inttoptr i64 %11281 to i32*
  %11284 = load i32, i32* %11283, align 4
  %11285 = add i32 %11284, -16
  %11286 = zext i32 %11285 to i64
  store i64 %11286, i64* %RAX.i1585, align 8
  %11287 = icmp ult i32 %11284, 16
  %11288 = zext i1 %11287 to i8
  store i8 %11288, i8* %20, align 1
  %11289 = and i32 %11285, 255
  %11290 = tail call i32 @llvm.ctpop.i32(i32 %11289)
  %11291 = trunc i32 %11290 to i8
  %11292 = and i8 %11291, 1
  %11293 = xor i8 %11292, 1
  store i8 %11293, i8* %27, align 1
  %11294 = xor i32 %11284, 16
  %11295 = xor i32 %11294, %11285
  %11296 = lshr i32 %11295, 4
  %11297 = trunc i32 %11296 to i8
  %11298 = and i8 %11297, 1
  store i8 %11298, i8* %33, align 1
  %11299 = icmp eq i32 %11285, 0
  %11300 = zext i1 %11299 to i8
  store i8 %11300, i8* %36, align 1
  %11301 = lshr i32 %11285, 31
  %11302 = trunc i32 %11301 to i8
  store i8 %11302, i8* %39, align 1
  %11303 = lshr i32 %11284, 31
  %11304 = xor i32 %11301, %11303
  %11305 = add nuw nsw i32 %11304, %11303
  %11306 = icmp eq i32 %11305, 2
  %11307 = zext i1 %11306 to i8
  store i8 %11307, i8* %45, align 1
  %11308 = add i64 %11280, -80
  %11309 = add i64 %11279, 12
  store i64 %11309, i64* %3, align 8
  %11310 = inttoptr i64 %11308 to i32*
  %11311 = load i32, i32* %11310, align 4
  %11312 = zext i32 %11311 to i64
  store i64 %11312, i64* %RCX.i3128, align 8
  %11313 = add i64 %11280, -76
  %11314 = add i64 %11279, 16
  store i64 %11314, i64* %3, align 8
  %11315 = inttoptr i64 %11313 to i32*
  %11316 = load i32, i32* %11315, align 4
  %11317 = zext i32 %11316 to i64
  store i64 %11317, i64* %600, align 8
  %11318 = add i64 %11280, -920
  %11319 = add i64 %11279, 23
  store i64 %11319, i64* %3, align 8
  %11320 = inttoptr i64 %11318 to i64*
  %11321 = load i64, i64* %11320, align 8
  store i64 %11321, i64* %RDI.i605, align 8
  %11322 = add i64 %11280, -924
  %11323 = add i64 %11279, 29
  store i64 %11323, i64* %3, align 8
  %11324 = inttoptr i64 %11322 to i32*
  %11325 = load i32, i32* %11324, align 4
  %11326 = zext i32 %11325 to i64
  store i64 %11326, i64* %RSI.i5212, align 8
  store i64 %11286, i64* %RDX.i5152, align 8
  %11327 = add i64 %11279, 454777
  %11328 = add i64 %11279, 36
  %11329 = load i64, i64* %6, align 8
  %11330 = add i64 %11329, -8
  %11331 = inttoptr i64 %11330 to i64*
  store i64 %11328, i64* %11331, align 8
  store i64 %11330, i64* %6, align 8
  store i64 %11327, i64* %3, align 8
  %call2_42f8b6 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %11327, %struct.Memory* %MEMORY.68)
  %11332 = load i16, i16* %AX.i3315, align 2
  %11333 = zext i16 %11332 to i64
  %11334 = load i64, i64* %3, align 8
  store i64 %11333, i64* %RCX.i3128, align 8
  %11335 = load i64, i64* %RBP.i, align 8
  %11336 = add i64 %11335, -56
  %11337 = add i64 %11334, 7
  store i64 %11337, i64* %3, align 8
  %11338 = inttoptr i64 %11336 to i64*
  %11339 = load i64, i64* %11338, align 8
  store i64 %11339, i64* %RDI.i605, align 8
  %11340 = add i64 %11335, -40
  %11341 = add i64 %11334, 10
  store i64 %11341, i64* %3, align 8
  %11342 = inttoptr i64 %11340 to i32*
  %11343 = load i32, i32* %11342, align 4
  %11344 = add i32 %11343, 2
  %11345 = zext i32 %11344 to i64
  store i64 %11345, i64* %RDX.i5152, align 8
  %11346 = icmp ugt i32 %11343, -3
  %11347 = zext i1 %11346 to i8
  store i8 %11347, i8* %20, align 1
  %11348 = and i32 %11344, 255
  %11349 = tail call i32 @llvm.ctpop.i32(i32 %11348)
  %11350 = trunc i32 %11349 to i8
  %11351 = and i8 %11350, 1
  %11352 = xor i8 %11351, 1
  store i8 %11352, i8* %27, align 1
  %11353 = xor i32 %11344, %11343
  %11354 = lshr i32 %11353, 4
  %11355 = trunc i32 %11354 to i8
  %11356 = and i8 %11355, 1
  store i8 %11356, i8* %33, align 1
  %11357 = icmp eq i32 %11344, 0
  %11358 = zext i1 %11357 to i8
  store i8 %11358, i8* %36, align 1
  %11359 = lshr i32 %11344, 31
  %11360 = trunc i32 %11359 to i8
  store i8 %11360, i8* %39, align 1
  %11361 = lshr i32 %11343, 31
  %11362 = xor i32 %11359, %11361
  %11363 = add nuw nsw i32 %11362, %11359
  %11364 = icmp eq i32 %11363, 2
  %11365 = zext i1 %11364 to i8
  store i8 %11365, i8* %45, align 1
  %11366 = add i64 %11335, -28
  %11367 = add i64 %11334, 16
  store i64 %11367, i64* %3, align 8
  %11368 = inttoptr i64 %11366 to i32*
  %11369 = load i32, i32* %11368, align 4
  %11370 = add i32 %11369, 2
  %11371 = zext i32 %11370 to i64
  store i64 %11371, i64* %RSI.i5212, align 8
  %11372 = lshr i32 %11370, 31
  %11373 = sub i32 %11344, %11370
  %11374 = icmp ult i32 %11344, %11370
  %11375 = zext i1 %11374 to i8
  store i8 %11375, i8* %20, align 1
  %11376 = and i32 %11373, 255
  %11377 = tail call i32 @llvm.ctpop.i32(i32 %11376)
  %11378 = trunc i32 %11377 to i8
  %11379 = and i8 %11378, 1
  %11380 = xor i8 %11379, 1
  store i8 %11380, i8* %27, align 1
  %11381 = xor i32 %11370, %11344
  %11382 = xor i32 %11381, %11373
  %11383 = lshr i32 %11382, 4
  %11384 = trunc i32 %11383 to i8
  %11385 = and i8 %11384, 1
  store i8 %11385, i8* %33, align 1
  %11386 = icmp eq i32 %11373, 0
  %11387 = zext i1 %11386 to i8
  store i8 %11387, i8* %36, align 1
  %11388 = lshr i32 %11373, 31
  %11389 = trunc i32 %11388 to i8
  store i8 %11389, i8* %39, align 1
  %11390 = xor i32 %11372, %11359
  %11391 = xor i32 %11388, %11359
  %11392 = add nuw nsw i32 %11391, %11390
  %11393 = icmp eq i32 %11392, 2
  %11394 = zext i1 %11393 to i8
  store i8 %11394, i8* %45, align 1
  %11395 = load i64, i64* %RBP.i, align 8
  %11396 = add i64 %11395, -932
  %11397 = load i32, i32* %ECX.i3256, align 4
  %11398 = add i64 %11334, 27
  store i64 %11398, i64* %3, align 8
  %11399 = inttoptr i64 %11396 to i32*
  store i32 %11397, i32* %11399, align 4
  %11400 = load i64, i64* %RBP.i, align 8
  %11401 = add i64 %11400, -944
  %11402 = load i64, i64* %RDI.i605, align 8
  %11403 = load i64, i64* %3, align 8
  %11404 = add i64 %11403, 7
  store i64 %11404, i64* %3, align 8
  %11405 = inttoptr i64 %11401 to i64*
  store i64 %11402, i64* %11405, align 8
  %11406 = load i64, i64* %3, align 8
  %11407 = load i8, i8* %39, align 1
  %11408 = icmp ne i8 %11407, 0
  %11409 = load i8, i8* %45, align 1
  %11410 = icmp ne i8 %11409, 0
  %11411 = xor i1 %11408, %11410
  %.v390 = select i1 %11411, i64 6, i64 23
  %11412 = add i64 %11406, %.v390
  store i64 %11412, i64* %3, align 8
  %11413 = load i64, i64* %RBP.i, align 8
  br i1 %11411, label %block_42f8e3, label %block_.L_42f8f4

block_42f8e3:                                     ; preds = %block_.L_42f897
  %11414 = add i64 %11413, -40
  %11415 = add i64 %11412, 3
  store i64 %11415, i64* %3, align 8
  %11416 = inttoptr i64 %11414 to i32*
  %11417 = load i32, i32* %11416, align 4
  %11418 = add i32 %11417, 2
  %11419 = zext i32 %11418 to i64
  store i64 %11419, i64* %RAX.i1585, align 8
  %11420 = icmp ugt i32 %11417, -3
  %11421 = zext i1 %11420 to i8
  store i8 %11421, i8* %20, align 1
  %11422 = and i32 %11418, 255
  %11423 = tail call i32 @llvm.ctpop.i32(i32 %11422)
  %11424 = trunc i32 %11423 to i8
  %11425 = and i8 %11424, 1
  %11426 = xor i8 %11425, 1
  store i8 %11426, i8* %27, align 1
  %11427 = xor i32 %11418, %11417
  %11428 = lshr i32 %11427, 4
  %11429 = trunc i32 %11428 to i8
  %11430 = and i8 %11429, 1
  store i8 %11430, i8* %33, align 1
  %11431 = icmp eq i32 %11418, 0
  %11432 = zext i1 %11431 to i8
  store i8 %11432, i8* %36, align 1
  %11433 = lshr i32 %11418, 31
  %11434 = trunc i32 %11433 to i8
  store i8 %11434, i8* %39, align 1
  %11435 = lshr i32 %11417, 31
  %11436 = xor i32 %11433, %11435
  %11437 = add nuw nsw i32 %11436, %11433
  %11438 = icmp eq i32 %11437, 2
  %11439 = zext i1 %11438 to i8
  store i8 %11439, i8* %45, align 1
  %11440 = add i64 %11413, -948
  %11441 = add i64 %11412, 12
  store i64 %11441, i64* %3, align 8
  %11442 = inttoptr i64 %11440 to i32*
  store i32 %11418, i32* %11442, align 4
  %11443 = load i64, i64* %3, align 8
  %11444 = add i64 %11443, 17
  store i64 %11444, i64* %3, align 8
  br label %block_.L_42f900

block_.L_42f8f4:                                  ; preds = %block_.L_42f897
  %11445 = add i64 %11413, -28
  %11446 = add i64 %11412, 3
  store i64 %11446, i64* %3, align 8
  %11447 = inttoptr i64 %11445 to i32*
  %11448 = load i32, i32* %11447, align 4
  %11449 = add i32 %11448, 2
  %11450 = zext i32 %11449 to i64
  store i64 %11450, i64* %RAX.i1585, align 8
  %11451 = icmp ugt i32 %11448, -3
  %11452 = zext i1 %11451 to i8
  store i8 %11452, i8* %20, align 1
  %11453 = and i32 %11449, 255
  %11454 = tail call i32 @llvm.ctpop.i32(i32 %11453)
  %11455 = trunc i32 %11454 to i8
  %11456 = and i8 %11455, 1
  %11457 = xor i8 %11456, 1
  store i8 %11457, i8* %27, align 1
  %11458 = xor i32 %11449, %11448
  %11459 = lshr i32 %11458, 4
  %11460 = trunc i32 %11459 to i8
  %11461 = and i8 %11460, 1
  store i8 %11461, i8* %33, align 1
  %11462 = icmp eq i32 %11449, 0
  %11463 = zext i1 %11462 to i8
  store i8 %11463, i8* %36, align 1
  %11464 = lshr i32 %11449, 31
  %11465 = trunc i32 %11464 to i8
  store i8 %11465, i8* %39, align 1
  %11466 = lshr i32 %11448, 31
  %11467 = xor i32 %11464, %11466
  %11468 = add nuw nsw i32 %11467, %11464
  %11469 = icmp eq i32 %11468, 2
  %11470 = zext i1 %11469 to i8
  store i8 %11470, i8* %45, align 1
  %11471 = add i64 %11413, -948
  %11472 = add i64 %11412, 12
  store i64 %11472, i64* %3, align 8
  %11473 = inttoptr i64 %11471 to i32*
  store i32 %11449, i32* %11473, align 4
  %.pre189 = load i64, i64* %3, align 8
  br label %block_.L_42f900

block_.L_42f900:                                  ; preds = %block_.L_42f8f4, %block_42f8e3
  %11474 = phi i64 [ %.pre189, %block_.L_42f8f4 ], [ %11444, %block_42f8e3 ]
  %11475 = load i64, i64* %RBP.i, align 8
  %11476 = add i64 %11475, -948
  %11477 = add i64 %11474, 6
  store i64 %11477, i64* %3, align 8
  %11478 = inttoptr i64 %11476 to i32*
  %11479 = load i32, i32* %11478, align 4
  %11480 = add i32 %11479, -16
  %11481 = zext i32 %11480 to i64
  store i64 %11481, i64* %RAX.i1585, align 8
  %11482 = icmp ult i32 %11479, 16
  %11483 = zext i1 %11482 to i8
  store i8 %11483, i8* %20, align 1
  %11484 = and i32 %11480, 255
  %11485 = tail call i32 @llvm.ctpop.i32(i32 %11484)
  %11486 = trunc i32 %11485 to i8
  %11487 = and i8 %11486, 1
  %11488 = xor i8 %11487, 1
  store i8 %11488, i8* %27, align 1
  %11489 = xor i32 %11479, 16
  %11490 = xor i32 %11489, %11480
  %11491 = lshr i32 %11490, 4
  %11492 = trunc i32 %11491 to i8
  %11493 = and i8 %11492, 1
  store i8 %11493, i8* %33, align 1
  %11494 = icmp eq i32 %11480, 0
  %11495 = zext i1 %11494 to i8
  store i8 %11495, i8* %36, align 1
  %11496 = lshr i32 %11480, 31
  %11497 = trunc i32 %11496 to i8
  store i8 %11497, i8* %39, align 1
  %11498 = lshr i32 %11479, 31
  %11499 = xor i32 %11496, %11498
  %11500 = add nuw nsw i32 %11499, %11498
  %11501 = icmp eq i32 %11500, 2
  %11502 = zext i1 %11501 to i8
  store i8 %11502, i8* %45, align 1
  %11503 = add i64 %11475, -24
  %11504 = add i64 %11474, 12
  store i64 %11504, i64* %3, align 8
  %11505 = inttoptr i64 %11503 to i32*
  %11506 = load i32, i32* %11505, align 4
  %11507 = add i32 %11506, -16
  %11508 = icmp eq i32 %11507, 0
  %11509 = zext i1 %11508 to i8
  %11510 = lshr i32 %11507, 31
  %11511 = add i32 %11506, -17
  %11512 = zext i32 %11511 to i64
  store i64 %11512, i64* %RCX.i3128, align 8
  store i8 %11509, i8* %20, align 1
  %11513 = and i32 %11511, 255
  %11514 = tail call i32 @llvm.ctpop.i32(i32 %11513)
  %11515 = trunc i32 %11514 to i8
  %11516 = and i8 %11515, 1
  %11517 = xor i8 %11516, 1
  store i8 %11517, i8* %27, align 1
  %11518 = xor i32 %11511, %11507
  %11519 = lshr i32 %11518, 4
  %11520 = trunc i32 %11519 to i8
  %11521 = and i8 %11520, 1
  store i8 %11521, i8* %33, align 1
  %11522 = icmp eq i32 %11511, 0
  %11523 = zext i1 %11522 to i8
  store i8 %11523, i8* %36, align 1
  %11524 = lshr i32 %11511, 31
  %11525 = trunc i32 %11524 to i8
  store i8 %11525, i8* %39, align 1
  %11526 = xor i32 %11524, %11510
  %11527 = add nuw nsw i32 %11526, %11510
  %11528 = icmp eq i32 %11527, 2
  %11529 = zext i1 %11528 to i8
  store i8 %11529, i8* %45, align 1
  %11530 = load i64, i64* %RBP.i, align 8
  %11531 = add i64 %11530, -80
  %11532 = add i64 %11474, 21
  store i64 %11532, i64* %3, align 8
  %11533 = inttoptr i64 %11531 to i32*
  %11534 = load i32, i32* %11533, align 4
  %11535 = zext i32 %11534 to i64
  store i64 %11535, i64* %RDX.i5152, align 8
  %11536 = add i64 %11530, -76
  %11537 = add i64 %11474, 25
  store i64 %11537, i64* %3, align 8
  %11538 = inttoptr i64 %11536 to i32*
  %11539 = load i32, i32* %11538, align 4
  %11540 = zext i32 %11539 to i64
  store i64 %11540, i64* %600, align 8
  %11541 = add i64 %11530, -944
  %11542 = add i64 %11474, 32
  store i64 %11542, i64* %3, align 8
  %11543 = inttoptr i64 %11541 to i64*
  %11544 = load i64, i64* %11543, align 8
  store i64 %11544, i64* %RDI.i605, align 8
  %11545 = load i32, i32* %EAX.i1609, align 4
  %11546 = zext i32 %11545 to i64
  store i64 %11546, i64* %RSI.i5212, align 8
  %11547 = add i64 %11530, -952
  %11548 = add i64 %11474, 40
  store i64 %11548, i64* %3, align 8
  %11549 = inttoptr i64 %11547 to i32*
  store i32 %11534, i32* %11549, align 4
  %11550 = load i32, i32* %ECX.i3256, align 4
  %11551 = zext i32 %11550 to i64
  %11552 = load i64, i64* %3, align 8
  store i64 %11551, i64* %RDX.i5152, align 8
  %11553 = load i64, i64* %RBP.i, align 8
  %11554 = add i64 %11553, -952
  %11555 = add i64 %11552, 8
  store i64 %11555, i64* %3, align 8
  %11556 = inttoptr i64 %11554 to i32*
  %11557 = load i32, i32* %11556, align 4
  %11558 = zext i32 %11557 to i64
  store i64 %11558, i64* %RCX.i3128, align 8
  %11559 = add i64 %11552, 454632
  %11560 = add i64 %11552, 13
  %11561 = load i64, i64* %6, align 8
  %11562 = add i64 %11561, -8
  %11563 = inttoptr i64 %11562 to i64*
  store i64 %11560, i64* %11563, align 8
  store i64 %11562, i64* %6, align 8
  store i64 %11559, i64* %3, align 8
  %call2_42f930 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %11559, %struct.Memory* %call2_42f8b6)
  %11564 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %11565 = load i16, i16* %AX.i3315, align 2
  %11566 = zext i16 %11565 to i64
  store i64 %11566, i64* %RDX.i5152, align 8
  %11567 = load i64, i64* %RBP.i, align 8
  %11568 = add i64 %11567, -932
  %11569 = add i64 %11564, 14
  store i64 %11569, i64* %3, align 8
  %11570 = inttoptr i64 %11568 to i32*
  %11571 = load i32, i32* %11570, align 4
  %11572 = zext i16 %11565 to i32
  %11573 = add i32 %11572, %11571
  %11574 = lshr i32 %11573, 31
  %11575 = add i32 %11573, 1
  %11576 = zext i32 %11575 to i64
  store i64 %11576, i64* %RSI.i5212, align 8
  %11577 = icmp eq i32 %11573, -1
  %11578 = icmp eq i32 %11575, 0
  %11579 = or i1 %11577, %11578
  %11580 = zext i1 %11579 to i8
  store i8 %11580, i8* %20, align 1
  %11581 = and i32 %11575, 255
  %11582 = tail call i32 @llvm.ctpop.i32(i32 %11581)
  %11583 = trunc i32 %11582 to i8
  %11584 = and i8 %11583, 1
  %11585 = xor i8 %11584, 1
  store i8 %11585, i8* %27, align 1
  %11586 = xor i32 %11575, %11573
  %11587 = lshr i32 %11586, 4
  %11588 = trunc i32 %11587 to i8
  %11589 = and i8 %11588, 1
  store i8 %11589, i8* %33, align 1
  %11590 = zext i1 %11578 to i8
  store i8 %11590, i8* %36, align 1
  %11591 = lshr i32 %11575, 31
  %11592 = trunc i32 %11591 to i8
  store i8 %11592, i8* %39, align 1
  %11593 = xor i32 %11591, %11574
  %11594 = add nuw nsw i32 %11593, %11591
  %11595 = icmp eq i32 %11594, 2
  %11596 = zext i1 %11595 to i8
  store i8 %11596, i8* %45, align 1
  store i64 %11576, i64* %RAX.i1585, align 8
  %11597 = sext i32 %11575 to i64
  %11598 = lshr i64 %11597, 32
  store i64 %11598, i64* %3718, align 8
  %11599 = add i64 %11564, 24
  store i64 %11599, i64* %3, align 8
  %11600 = shl nuw i64 %11598, 32
  %11601 = or i64 %11600, %11576
  %11602 = sdiv i64 %11601, 2
  %11603 = shl i64 %11602, 32
  %11604 = ashr exact i64 %11603, 32
  %11605 = icmp eq i64 %11602, %11604
  br i1 %11605, label %11608, label %11606

; <label>:11606:                                  ; preds = %block_.L_42f900
  %11607 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11599, %struct.Memory* %call2_42f930)
  %.pre190 = load i64, i64* %RBP.i, align 8
  %.pre191 = load i64, i64* %3, align 8
  %.pre192 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__ecx.exit1007

; <label>:11608:                                  ; preds = %block_.L_42f900
  %11609 = srem i64 %11601, 2
  %11610 = and i64 %11602, 4294967295
  store i64 %11610, i64* %RAX.i1585, align 8
  %11611 = and i64 %11609, 4294967295
  store i64 %11611, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %11612 = trunc i64 %11602 to i32
  br label %routine_idivl__ecx.exit1007

routine_idivl__ecx.exit1007:                      ; preds = %11608, %11606
  %11613 = phi i32 [ %.pre192, %11606 ], [ %11612, %11608 ]
  %11614 = phi i64 [ %.pre191, %11606 ], [ %11599, %11608 ]
  %11615 = phi i64 [ %.pre190, %11606 ], [ %11567, %11608 ]
  %11616 = phi %struct.Memory* [ %11607, %11606 ], [ %call2_42f930, %11608 ]
  %11617 = add i64 %11615, -912
  %11618 = add i64 %11614, 6
  store i64 %11618, i64* %3, align 8
  %11619 = inttoptr i64 %11617 to i32*
  %11620 = load i32, i32* %11619, align 4
  %11621 = zext i32 %11620 to i64
  store i64 %11621, i64* %RCX.i3128, align 8
  %11622 = sub i32 %11620, %11613
  %11623 = icmp ult i32 %11620, %11613
  %11624 = zext i1 %11623 to i8
  store i8 %11624, i8* %20, align 1
  %11625 = and i32 %11622, 255
  %11626 = tail call i32 @llvm.ctpop.i32(i32 %11625)
  %11627 = trunc i32 %11626 to i8
  %11628 = and i8 %11627, 1
  %11629 = xor i8 %11628, 1
  store i8 %11629, i8* %27, align 1
  %11630 = xor i32 %11613, %11620
  %11631 = xor i32 %11630, %11622
  %11632 = lshr i32 %11631, 4
  %11633 = trunc i32 %11632 to i8
  %11634 = and i8 %11633, 1
  store i8 %11634, i8* %33, align 1
  %11635 = icmp eq i32 %11622, 0
  %11636 = zext i1 %11635 to i8
  store i8 %11636, i8* %36, align 1
  %11637 = lshr i32 %11622, 31
  %11638 = trunc i32 %11637 to i8
  store i8 %11638, i8* %39, align 1
  %11639 = lshr i32 %11620, 31
  %11640 = lshr i32 %11613, 31
  %11641 = xor i32 %11640, %11639
  %11642 = xor i32 %11637, %11639
  %11643 = add nuw nsw i32 %11642, %11641
  %11644 = icmp eq i32 %11643, 2
  %11645 = zext i1 %11644 to i8
  store i8 %11645, i8* %45, align 1
  %11646 = icmp ne i8 %11638, 0
  %11647 = xor i1 %11646, %11644
  %.v335 = select i1 %11647, i64 14, i64 39
  %11648 = add i64 %11614, %.v335
  store i64 %11648, i64* %3, align 8
  br i1 %11647, label %block_42f95b, label %block_.L_42f974

block_42f95b:                                     ; preds = %routine_idivl__ecx.exit1007
  %11649 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11649, i64* %RAX.i1585, align 8
  %11650 = add i64 %11649, 72684
  %11651 = add i64 %11648, 14
  store i64 %11651, i64* %3, align 8
  %11652 = inttoptr i64 %11650 to i32*
  %11653 = load i32, i32* %11652, align 4
  %11654 = zext i32 %11653 to i64
  store i64 %11654, i64* %RCX.i3128, align 8
  %11655 = add i64 %11615, -956
  %11656 = add i64 %11648, 20
  store i64 %11656, i64* %3, align 8
  %11657 = inttoptr i64 %11655 to i32*
  store i32 %11653, i32* %11657, align 4
  %11658 = load i64, i64* %3, align 8
  %11659 = add i64 %11658, 265
  store i64 %11659, i64* %3, align 8
  br label %block_.L_42fa78

block_.L_42f974:                                  ; preds = %routine_idivl__ecx.exit1007
  %11660 = add i64 %11615, -56
  %11661 = add i64 %11648, 4
  store i64 %11661, i64* %3, align 8
  %11662 = inttoptr i64 %11660 to i64*
  %11663 = load i64, i64* %11662, align 8
  store i64 %11663, i64* %RDI.i605, align 8
  %11664 = add i64 %11615, -28
  %11665 = add i64 %11648, 7
  store i64 %11665, i64* %3, align 8
  %11666 = inttoptr i64 %11664 to i32*
  %11667 = load i32, i32* %11666, align 4
  %11668 = add i32 %11667, -16
  %11669 = zext i32 %11668 to i64
  store i64 %11669, i64* %RAX.i1585, align 8
  %11670 = icmp ult i32 %11667, 16
  %11671 = zext i1 %11670 to i8
  store i8 %11671, i8* %20, align 1
  %11672 = and i32 %11668, 255
  %11673 = tail call i32 @llvm.ctpop.i32(i32 %11672)
  %11674 = trunc i32 %11673 to i8
  %11675 = and i8 %11674, 1
  %11676 = xor i8 %11675, 1
  store i8 %11676, i8* %27, align 1
  %11677 = xor i32 %11667, 16
  %11678 = xor i32 %11677, %11668
  %11679 = lshr i32 %11678, 4
  %11680 = trunc i32 %11679 to i8
  %11681 = and i8 %11680, 1
  store i8 %11681, i8* %33, align 1
  %11682 = icmp eq i32 %11668, 0
  %11683 = zext i1 %11682 to i8
  store i8 %11683, i8* %36, align 1
  %11684 = lshr i32 %11668, 31
  %11685 = trunc i32 %11684 to i8
  store i8 %11685, i8* %39, align 1
  %11686 = lshr i32 %11667, 31
  %11687 = xor i32 %11684, %11686
  %11688 = add nuw nsw i32 %11687, %11686
  %11689 = icmp eq i32 %11688, 2
  %11690 = zext i1 %11689 to i8
  store i8 %11690, i8* %45, align 1
  %11691 = add i64 %11615, -36
  %11692 = add i64 %11648, 13
  store i64 %11692, i64* %3, align 8
  %11693 = inttoptr i64 %11691 to i32*
  %11694 = load i32, i32* %11693, align 4
  %11695 = add i32 %11694, 2
  %11696 = zext i32 %11695 to i64
  store i64 %11696, i64* %RCX.i3128, align 8
  %11697 = icmp ugt i32 %11694, -3
  %11698 = zext i1 %11697 to i8
  store i8 %11698, i8* %20, align 1
  %11699 = and i32 %11695, 255
  %11700 = tail call i32 @llvm.ctpop.i32(i32 %11699)
  %11701 = trunc i32 %11700 to i8
  %11702 = and i8 %11701, 1
  %11703 = xor i8 %11702, 1
  store i8 %11703, i8* %27, align 1
  %11704 = xor i32 %11695, %11694
  %11705 = lshr i32 %11704, 4
  %11706 = trunc i32 %11705 to i8
  %11707 = and i8 %11706, 1
  store i8 %11707, i8* %33, align 1
  %11708 = icmp eq i32 %11695, 0
  %11709 = zext i1 %11708 to i8
  store i8 %11709, i8* %36, align 1
  %11710 = lshr i32 %11695, 31
  %11711 = trunc i32 %11710 to i8
  store i8 %11711, i8* %39, align 1
  %11712 = lshr i32 %11694, 31
  %11713 = xor i32 %11710, %11712
  %11714 = add nuw nsw i32 %11713, %11710
  %11715 = icmp eq i32 %11714, 2
  %11716 = zext i1 %11715 to i8
  store i8 %11716, i8* %45, align 1
  %11717 = add i64 %11615, -24
  %11718 = add i64 %11648, 19
  store i64 %11718, i64* %3, align 8
  %11719 = inttoptr i64 %11717 to i32*
  %11720 = load i32, i32* %11719, align 4
  %11721 = add i32 %11720, 1
  %11722 = zext i32 %11721 to i64
  store i64 %11722, i64* %RDX.i5152, align 8
  %11723 = lshr i32 %11721, 31
  %11724 = sub i32 %11695, %11721
  %11725 = icmp ult i32 %11695, %11721
  %11726 = zext i1 %11725 to i8
  store i8 %11726, i8* %20, align 1
  %11727 = and i32 %11724, 255
  %11728 = tail call i32 @llvm.ctpop.i32(i32 %11727)
  %11729 = trunc i32 %11728 to i8
  %11730 = and i8 %11729, 1
  %11731 = xor i8 %11730, 1
  store i8 %11731, i8* %27, align 1
  %11732 = xor i32 %11721, %11695
  %11733 = xor i32 %11732, %11724
  %11734 = lshr i32 %11733, 4
  %11735 = trunc i32 %11734 to i8
  %11736 = and i8 %11735, 1
  store i8 %11736, i8* %33, align 1
  %11737 = icmp eq i32 %11724, 0
  %11738 = zext i1 %11737 to i8
  store i8 %11738, i8* %36, align 1
  %11739 = lshr i32 %11724, 31
  %11740 = trunc i32 %11739 to i8
  store i8 %11740, i8* %39, align 1
  %11741 = xor i32 %11723, %11710
  %11742 = xor i32 %11739, %11710
  %11743 = add nuw nsw i32 %11742, %11741
  %11744 = icmp eq i32 %11743, 2
  %11745 = zext i1 %11744 to i8
  store i8 %11745, i8* %45, align 1
  %11746 = load i64, i64* %RBP.i, align 8
  %11747 = add i64 %11746, -968
  %11748 = load i64, i64* %RDI.i605, align 8
  %11749 = add i64 %11648, 31
  store i64 %11749, i64* %3, align 8
  %11750 = inttoptr i64 %11747 to i64*
  store i64 %11748, i64* %11750, align 8
  %11751 = load i64, i64* %RBP.i, align 8
  %11752 = add i64 %11751, -972
  %11753 = load i32, i32* %EAX.i1609, align 4
  %11754 = load i64, i64* %3, align 8
  %11755 = add i64 %11754, 6
  store i64 %11755, i64* %3, align 8
  %11756 = inttoptr i64 %11752 to i32*
  store i32 %11753, i32* %11756, align 4
  %11757 = load i64, i64* %3, align 8
  %11758 = load i8, i8* %39, align 1
  %11759 = icmp ne i8 %11758, 0
  %11760 = load i8, i8* %45, align 1
  %11761 = icmp ne i8 %11760, 0
  %11762 = xor i1 %11759, %11761
  %.v391 = select i1 %11762, i64 6, i64 23
  %11763 = add i64 %11757, %.v391
  store i64 %11763, i64* %3, align 8
  %11764 = load i64, i64* %RBP.i, align 8
  br i1 %11762, label %block_42f99f, label %block_.L_42f9b0

block_42f99f:                                     ; preds = %block_.L_42f974
  %11765 = add i64 %11764, -36
  %11766 = add i64 %11763, 3
  store i64 %11766, i64* %3, align 8
  %11767 = inttoptr i64 %11765 to i32*
  %11768 = load i32, i32* %11767, align 4
  %11769 = add i32 %11768, 2
  %11770 = zext i32 %11769 to i64
  store i64 %11770, i64* %RAX.i1585, align 8
  %11771 = icmp ugt i32 %11768, -3
  %11772 = zext i1 %11771 to i8
  store i8 %11772, i8* %20, align 1
  %11773 = and i32 %11769, 255
  %11774 = tail call i32 @llvm.ctpop.i32(i32 %11773)
  %11775 = trunc i32 %11774 to i8
  %11776 = and i8 %11775, 1
  %11777 = xor i8 %11776, 1
  store i8 %11777, i8* %27, align 1
  %11778 = xor i32 %11769, %11768
  %11779 = lshr i32 %11778, 4
  %11780 = trunc i32 %11779 to i8
  %11781 = and i8 %11780, 1
  store i8 %11781, i8* %33, align 1
  %11782 = icmp eq i32 %11769, 0
  %11783 = zext i1 %11782 to i8
  store i8 %11783, i8* %36, align 1
  %11784 = lshr i32 %11769, 31
  %11785 = trunc i32 %11784 to i8
  store i8 %11785, i8* %39, align 1
  %11786 = lshr i32 %11768, 31
  %11787 = xor i32 %11784, %11786
  %11788 = add nuw nsw i32 %11787, %11784
  %11789 = icmp eq i32 %11788, 2
  %11790 = zext i1 %11789 to i8
  store i8 %11790, i8* %45, align 1
  %11791 = add i64 %11764, -976
  %11792 = add i64 %11763, 12
  store i64 %11792, i64* %3, align 8
  %11793 = inttoptr i64 %11791 to i32*
  store i32 %11769, i32* %11793, align 4
  %11794 = load i64, i64* %3, align 8
  %11795 = add i64 %11794, 17
  store i64 %11795, i64* %3, align 8
  br label %block_.L_42f9bc

block_.L_42f9b0:                                  ; preds = %block_.L_42f974
  %11796 = add i64 %11764, -24
  %11797 = add i64 %11763, 3
  store i64 %11797, i64* %3, align 8
  %11798 = inttoptr i64 %11796 to i32*
  %11799 = load i32, i32* %11798, align 4
  %11800 = add i32 %11799, 1
  %11801 = zext i32 %11800 to i64
  store i64 %11801, i64* %RAX.i1585, align 8
  %11802 = icmp eq i32 %11799, -1
  %11803 = icmp eq i32 %11800, 0
  %11804 = or i1 %11802, %11803
  %11805 = zext i1 %11804 to i8
  store i8 %11805, i8* %20, align 1
  %11806 = and i32 %11800, 255
  %11807 = tail call i32 @llvm.ctpop.i32(i32 %11806)
  %11808 = trunc i32 %11807 to i8
  %11809 = and i8 %11808, 1
  %11810 = xor i8 %11809, 1
  store i8 %11810, i8* %27, align 1
  %11811 = xor i32 %11800, %11799
  %11812 = lshr i32 %11811, 4
  %11813 = trunc i32 %11812 to i8
  %11814 = and i8 %11813, 1
  store i8 %11814, i8* %33, align 1
  %11815 = zext i1 %11803 to i8
  store i8 %11815, i8* %36, align 1
  %11816 = lshr i32 %11800, 31
  %11817 = trunc i32 %11816 to i8
  store i8 %11817, i8* %39, align 1
  %11818 = lshr i32 %11799, 31
  %11819 = xor i32 %11816, %11818
  %11820 = add nuw nsw i32 %11819, %11816
  %11821 = icmp eq i32 %11820, 2
  %11822 = zext i1 %11821 to i8
  store i8 %11822, i8* %45, align 1
  %11823 = add i64 %11764, -976
  %11824 = add i64 %11763, 12
  store i64 %11824, i64* %3, align 8
  %11825 = inttoptr i64 %11823 to i32*
  store i32 %11800, i32* %11825, align 4
  %.pre193 = load i64, i64* %3, align 8
  br label %block_.L_42f9bc

block_.L_42f9bc:                                  ; preds = %block_.L_42f9b0, %block_42f99f
  %11826 = phi i64 [ %.pre193, %block_.L_42f9b0 ], [ %11795, %block_42f99f ]
  %11827 = load i64, i64* %RBP.i, align 8
  %11828 = add i64 %11827, -976
  %11829 = add i64 %11826, 6
  store i64 %11829, i64* %3, align 8
  %11830 = inttoptr i64 %11828 to i32*
  %11831 = load i32, i32* %11830, align 4
  %11832 = add i32 %11831, -16
  %11833 = zext i32 %11832 to i64
  store i64 %11833, i64* %RAX.i1585, align 8
  %11834 = icmp ult i32 %11831, 16
  %11835 = zext i1 %11834 to i8
  store i8 %11835, i8* %20, align 1
  %11836 = and i32 %11832, 255
  %11837 = tail call i32 @llvm.ctpop.i32(i32 %11836)
  %11838 = trunc i32 %11837 to i8
  %11839 = and i8 %11838, 1
  %11840 = xor i8 %11839, 1
  store i8 %11840, i8* %27, align 1
  %11841 = xor i32 %11831, 16
  %11842 = xor i32 %11841, %11832
  %11843 = lshr i32 %11842, 4
  %11844 = trunc i32 %11843 to i8
  %11845 = and i8 %11844, 1
  store i8 %11845, i8* %33, align 1
  %11846 = icmp eq i32 %11832, 0
  %11847 = zext i1 %11846 to i8
  store i8 %11847, i8* %36, align 1
  %11848 = lshr i32 %11832, 31
  %11849 = trunc i32 %11848 to i8
  store i8 %11849, i8* %39, align 1
  %11850 = lshr i32 %11831, 31
  %11851 = xor i32 %11848, %11850
  %11852 = add nuw nsw i32 %11851, %11850
  %11853 = icmp eq i32 %11852, 2
  %11854 = zext i1 %11853 to i8
  store i8 %11854, i8* %45, align 1
  %11855 = add i64 %11827, -80
  %11856 = add i64 %11826, 12
  store i64 %11856, i64* %3, align 8
  %11857 = inttoptr i64 %11855 to i32*
  %11858 = load i32, i32* %11857, align 4
  %11859 = zext i32 %11858 to i64
  store i64 %11859, i64* %RCX.i3128, align 8
  %11860 = add i64 %11827, -76
  %11861 = add i64 %11826, 16
  store i64 %11861, i64* %3, align 8
  %11862 = inttoptr i64 %11860 to i32*
  %11863 = load i32, i32* %11862, align 4
  %11864 = zext i32 %11863 to i64
  store i64 %11864, i64* %600, align 8
  %11865 = add i64 %11827, -968
  %11866 = add i64 %11826, 23
  store i64 %11866, i64* %3, align 8
  %11867 = inttoptr i64 %11865 to i64*
  %11868 = load i64, i64* %11867, align 8
  store i64 %11868, i64* %RDI.i605, align 8
  %11869 = add i64 %11827, -972
  %11870 = add i64 %11826, 29
  store i64 %11870, i64* %3, align 8
  %11871 = inttoptr i64 %11869 to i32*
  %11872 = load i32, i32* %11871, align 4
  %11873 = zext i32 %11872 to i64
  store i64 %11873, i64* %RSI.i5212, align 8
  store i64 %11833, i64* %RDX.i5152, align 8
  %11874 = add i64 %11826, 454484
  %11875 = add i64 %11826, 36
  %11876 = load i64, i64* %6, align 8
  %11877 = add i64 %11876, -8
  %11878 = inttoptr i64 %11877 to i64*
  store i64 %11875, i64* %11878, align 8
  store i64 %11877, i64* %6, align 8
  store i64 %11874, i64* %3, align 8
  %call2_42f9db = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %11874, %struct.Memory* %11616)
  %11879 = load i16, i16* %AX.i3315, align 2
  %11880 = zext i16 %11879 to i64
  %11881 = load i64, i64* %3, align 8
  store i64 %11880, i64* %RCX.i3128, align 8
  %11882 = load i64, i64* %RBP.i, align 8
  %11883 = add i64 %11882, -56
  %11884 = add i64 %11881, 7
  store i64 %11884, i64* %3, align 8
  %11885 = inttoptr i64 %11883 to i64*
  %11886 = load i64, i64* %11885, align 8
  store i64 %11886, i64* %RDI.i605, align 8
  %11887 = add i64 %11882, -40
  %11888 = add i64 %11881, 10
  store i64 %11888, i64* %3, align 8
  %11889 = inttoptr i64 %11887 to i32*
  %11890 = load i32, i32* %11889, align 4
  %11891 = add i32 %11890, 2
  %11892 = zext i32 %11891 to i64
  store i64 %11892, i64* %RDX.i5152, align 8
  %11893 = icmp ugt i32 %11890, -3
  %11894 = zext i1 %11893 to i8
  store i8 %11894, i8* %20, align 1
  %11895 = and i32 %11891, 255
  %11896 = tail call i32 @llvm.ctpop.i32(i32 %11895)
  %11897 = trunc i32 %11896 to i8
  %11898 = and i8 %11897, 1
  %11899 = xor i8 %11898, 1
  store i8 %11899, i8* %27, align 1
  %11900 = xor i32 %11891, %11890
  %11901 = lshr i32 %11900, 4
  %11902 = trunc i32 %11901 to i8
  %11903 = and i8 %11902, 1
  store i8 %11903, i8* %33, align 1
  %11904 = icmp eq i32 %11891, 0
  %11905 = zext i1 %11904 to i8
  store i8 %11905, i8* %36, align 1
  %11906 = lshr i32 %11891, 31
  %11907 = trunc i32 %11906 to i8
  store i8 %11907, i8* %39, align 1
  %11908 = lshr i32 %11890, 31
  %11909 = xor i32 %11906, %11908
  %11910 = add nuw nsw i32 %11909, %11906
  %11911 = icmp eq i32 %11910, 2
  %11912 = zext i1 %11911 to i8
  store i8 %11912, i8* %45, align 1
  %11913 = add i64 %11882, -28
  %11914 = add i64 %11881, 16
  store i64 %11914, i64* %3, align 8
  %11915 = inttoptr i64 %11913 to i32*
  %11916 = load i32, i32* %11915, align 4
  %11917 = add i32 %11916, 2
  %11918 = zext i32 %11917 to i64
  store i64 %11918, i64* %RSI.i5212, align 8
  %11919 = lshr i32 %11917, 31
  %11920 = sub i32 %11891, %11917
  %11921 = icmp ult i32 %11891, %11917
  %11922 = zext i1 %11921 to i8
  store i8 %11922, i8* %20, align 1
  %11923 = and i32 %11920, 255
  %11924 = tail call i32 @llvm.ctpop.i32(i32 %11923)
  %11925 = trunc i32 %11924 to i8
  %11926 = and i8 %11925, 1
  %11927 = xor i8 %11926, 1
  store i8 %11927, i8* %27, align 1
  %11928 = xor i32 %11917, %11891
  %11929 = xor i32 %11928, %11920
  %11930 = lshr i32 %11929, 4
  %11931 = trunc i32 %11930 to i8
  %11932 = and i8 %11931, 1
  store i8 %11932, i8* %33, align 1
  %11933 = icmp eq i32 %11920, 0
  %11934 = zext i1 %11933 to i8
  store i8 %11934, i8* %36, align 1
  %11935 = lshr i32 %11920, 31
  %11936 = trunc i32 %11935 to i8
  store i8 %11936, i8* %39, align 1
  %11937 = xor i32 %11919, %11906
  %11938 = xor i32 %11935, %11906
  %11939 = add nuw nsw i32 %11938, %11937
  %11940 = icmp eq i32 %11939, 2
  %11941 = zext i1 %11940 to i8
  store i8 %11941, i8* %45, align 1
  %11942 = load i64, i64* %RBP.i, align 8
  %11943 = add i64 %11942, -980
  %11944 = load i32, i32* %ECX.i3256, align 4
  %11945 = add i64 %11881, 27
  store i64 %11945, i64* %3, align 8
  %11946 = inttoptr i64 %11943 to i32*
  store i32 %11944, i32* %11946, align 4
  %11947 = load i64, i64* %RBP.i, align 8
  %11948 = add i64 %11947, -992
  %11949 = load i64, i64* %RDI.i605, align 8
  %11950 = load i64, i64* %3, align 8
  %11951 = add i64 %11950, 7
  store i64 %11951, i64* %3, align 8
  %11952 = inttoptr i64 %11948 to i64*
  store i64 %11949, i64* %11952, align 8
  %11953 = load i64, i64* %3, align 8
  %11954 = load i8, i8* %39, align 1
  %11955 = icmp ne i8 %11954, 0
  %11956 = load i8, i8* %45, align 1
  %11957 = icmp ne i8 %11956, 0
  %11958 = xor i1 %11955, %11957
  %.v392 = select i1 %11958, i64 6, i64 23
  %11959 = add i64 %11953, %.v392
  store i64 %11959, i64* %3, align 8
  %11960 = load i64, i64* %RBP.i, align 8
  br i1 %11958, label %block_42fa08, label %block_.L_42fa19

block_42fa08:                                     ; preds = %block_.L_42f9bc
  %11961 = add i64 %11960, -40
  %11962 = add i64 %11959, 3
  store i64 %11962, i64* %3, align 8
  %11963 = inttoptr i64 %11961 to i32*
  %11964 = load i32, i32* %11963, align 4
  %11965 = add i32 %11964, 2
  %11966 = zext i32 %11965 to i64
  store i64 %11966, i64* %RAX.i1585, align 8
  %11967 = icmp ugt i32 %11964, -3
  %11968 = zext i1 %11967 to i8
  store i8 %11968, i8* %20, align 1
  %11969 = and i32 %11965, 255
  %11970 = tail call i32 @llvm.ctpop.i32(i32 %11969)
  %11971 = trunc i32 %11970 to i8
  %11972 = and i8 %11971, 1
  %11973 = xor i8 %11972, 1
  store i8 %11973, i8* %27, align 1
  %11974 = xor i32 %11965, %11964
  %11975 = lshr i32 %11974, 4
  %11976 = trunc i32 %11975 to i8
  %11977 = and i8 %11976, 1
  store i8 %11977, i8* %33, align 1
  %11978 = icmp eq i32 %11965, 0
  %11979 = zext i1 %11978 to i8
  store i8 %11979, i8* %36, align 1
  %11980 = lshr i32 %11965, 31
  %11981 = trunc i32 %11980 to i8
  store i8 %11981, i8* %39, align 1
  %11982 = lshr i32 %11964, 31
  %11983 = xor i32 %11980, %11982
  %11984 = add nuw nsw i32 %11983, %11980
  %11985 = icmp eq i32 %11984, 2
  %11986 = zext i1 %11985 to i8
  store i8 %11986, i8* %45, align 1
  %11987 = add i64 %11960, -996
  %11988 = add i64 %11959, 12
  store i64 %11988, i64* %3, align 8
  %11989 = inttoptr i64 %11987 to i32*
  store i32 %11965, i32* %11989, align 4
  %11990 = load i64, i64* %3, align 8
  %11991 = add i64 %11990, 17
  store i64 %11991, i64* %3, align 8
  br label %block_.L_42fa25

block_.L_42fa19:                                  ; preds = %block_.L_42f9bc
  %11992 = add i64 %11960, -28
  %11993 = add i64 %11959, 3
  store i64 %11993, i64* %3, align 8
  %11994 = inttoptr i64 %11992 to i32*
  %11995 = load i32, i32* %11994, align 4
  %11996 = add i32 %11995, 2
  %11997 = zext i32 %11996 to i64
  store i64 %11997, i64* %RAX.i1585, align 8
  %11998 = icmp ugt i32 %11995, -3
  %11999 = zext i1 %11998 to i8
  store i8 %11999, i8* %20, align 1
  %12000 = and i32 %11996, 255
  %12001 = tail call i32 @llvm.ctpop.i32(i32 %12000)
  %12002 = trunc i32 %12001 to i8
  %12003 = and i8 %12002, 1
  %12004 = xor i8 %12003, 1
  store i8 %12004, i8* %27, align 1
  %12005 = xor i32 %11996, %11995
  %12006 = lshr i32 %12005, 4
  %12007 = trunc i32 %12006 to i8
  %12008 = and i8 %12007, 1
  store i8 %12008, i8* %33, align 1
  %12009 = icmp eq i32 %11996, 0
  %12010 = zext i1 %12009 to i8
  store i8 %12010, i8* %36, align 1
  %12011 = lshr i32 %11996, 31
  %12012 = trunc i32 %12011 to i8
  store i8 %12012, i8* %39, align 1
  %12013 = lshr i32 %11995, 31
  %12014 = xor i32 %12011, %12013
  %12015 = add nuw nsw i32 %12014, %12011
  %12016 = icmp eq i32 %12015, 2
  %12017 = zext i1 %12016 to i8
  store i8 %12017, i8* %45, align 1
  %12018 = add i64 %11960, -996
  %12019 = add i64 %11959, 12
  store i64 %12019, i64* %3, align 8
  %12020 = inttoptr i64 %12018 to i32*
  store i32 %11996, i32* %12020, align 4
  %.pre194 = load i64, i64* %3, align 8
  br label %block_.L_42fa25

block_.L_42fa25:                                  ; preds = %block_.L_42fa19, %block_42fa08
  %12021 = phi i64 [ %.pre194, %block_.L_42fa19 ], [ %11991, %block_42fa08 ]
  %12022 = load i64, i64* %RBP.i, align 8
  %12023 = add i64 %12022, -996
  %12024 = add i64 %12021, 6
  store i64 %12024, i64* %3, align 8
  %12025 = inttoptr i64 %12023 to i32*
  %12026 = load i32, i32* %12025, align 4
  %12027 = add i32 %12026, -16
  %12028 = zext i32 %12027 to i64
  store i64 %12028, i64* %RAX.i1585, align 8
  %12029 = icmp ult i32 %12026, 16
  %12030 = zext i1 %12029 to i8
  store i8 %12030, i8* %20, align 1
  %12031 = and i32 %12027, 255
  %12032 = tail call i32 @llvm.ctpop.i32(i32 %12031)
  %12033 = trunc i32 %12032 to i8
  %12034 = and i8 %12033, 1
  %12035 = xor i8 %12034, 1
  store i8 %12035, i8* %27, align 1
  %12036 = xor i32 %12026, 16
  %12037 = xor i32 %12036, %12027
  %12038 = lshr i32 %12037, 4
  %12039 = trunc i32 %12038 to i8
  %12040 = and i8 %12039, 1
  store i8 %12040, i8* %33, align 1
  %12041 = icmp eq i32 %12027, 0
  %12042 = zext i1 %12041 to i8
  store i8 %12042, i8* %36, align 1
  %12043 = lshr i32 %12027, 31
  %12044 = trunc i32 %12043 to i8
  store i8 %12044, i8* %39, align 1
  %12045 = lshr i32 %12026, 31
  %12046 = xor i32 %12043, %12045
  %12047 = add nuw nsw i32 %12046, %12045
  %12048 = icmp eq i32 %12047, 2
  %12049 = zext i1 %12048 to i8
  store i8 %12049, i8* %45, align 1
  %12050 = add i64 %12022, -24
  %12051 = add i64 %12021, 12
  store i64 %12051, i64* %3, align 8
  %12052 = inttoptr i64 %12050 to i32*
  %12053 = load i32, i32* %12052, align 4
  %12054 = add i32 %12053, -16
  %12055 = icmp eq i32 %12054, 0
  %12056 = zext i1 %12055 to i8
  %12057 = lshr i32 %12054, 31
  %12058 = add i32 %12053, -17
  %12059 = zext i32 %12058 to i64
  store i64 %12059, i64* %RCX.i3128, align 8
  store i8 %12056, i8* %20, align 1
  %12060 = and i32 %12058, 255
  %12061 = tail call i32 @llvm.ctpop.i32(i32 %12060)
  %12062 = trunc i32 %12061 to i8
  %12063 = and i8 %12062, 1
  %12064 = xor i8 %12063, 1
  store i8 %12064, i8* %27, align 1
  %12065 = xor i32 %12058, %12054
  %12066 = lshr i32 %12065, 4
  %12067 = trunc i32 %12066 to i8
  %12068 = and i8 %12067, 1
  store i8 %12068, i8* %33, align 1
  %12069 = icmp eq i32 %12058, 0
  %12070 = zext i1 %12069 to i8
  store i8 %12070, i8* %36, align 1
  %12071 = lshr i32 %12058, 31
  %12072 = trunc i32 %12071 to i8
  store i8 %12072, i8* %39, align 1
  %12073 = xor i32 %12071, %12057
  %12074 = add nuw nsw i32 %12073, %12057
  %12075 = icmp eq i32 %12074, 2
  %12076 = zext i1 %12075 to i8
  store i8 %12076, i8* %45, align 1
  %12077 = load i64, i64* %RBP.i, align 8
  %12078 = add i64 %12077, -80
  %12079 = add i64 %12021, 21
  store i64 %12079, i64* %3, align 8
  %12080 = inttoptr i64 %12078 to i32*
  %12081 = load i32, i32* %12080, align 4
  %12082 = zext i32 %12081 to i64
  store i64 %12082, i64* %RDX.i5152, align 8
  %12083 = add i64 %12077, -76
  %12084 = add i64 %12021, 25
  store i64 %12084, i64* %3, align 8
  %12085 = inttoptr i64 %12083 to i32*
  %12086 = load i32, i32* %12085, align 4
  %12087 = zext i32 %12086 to i64
  store i64 %12087, i64* %600, align 8
  %12088 = add i64 %12077, -992
  %12089 = add i64 %12021, 32
  store i64 %12089, i64* %3, align 8
  %12090 = inttoptr i64 %12088 to i64*
  %12091 = load i64, i64* %12090, align 8
  store i64 %12091, i64* %RDI.i605, align 8
  %12092 = load i32, i32* %EAX.i1609, align 4
  %12093 = zext i32 %12092 to i64
  store i64 %12093, i64* %RSI.i5212, align 8
  %12094 = add i64 %12077, -1000
  %12095 = add i64 %12021, 40
  store i64 %12095, i64* %3, align 8
  %12096 = inttoptr i64 %12094 to i32*
  store i32 %12081, i32* %12096, align 4
  %12097 = load i32, i32* %ECX.i3256, align 4
  %12098 = zext i32 %12097 to i64
  %12099 = load i64, i64* %3, align 8
  store i64 %12098, i64* %RDX.i5152, align 8
  %12100 = load i64, i64* %RBP.i, align 8
  %12101 = add i64 %12100, -1000
  %12102 = add i64 %12099, 8
  store i64 %12102, i64* %3, align 8
  %12103 = inttoptr i64 %12101 to i32*
  %12104 = load i32, i32* %12103, align 4
  %12105 = zext i32 %12104 to i64
  store i64 %12105, i64* %RCX.i3128, align 8
  %12106 = add i64 %12099, 454339
  %12107 = add i64 %12099, 13
  %12108 = load i64, i64* %6, align 8
  %12109 = add i64 %12108, -8
  %12110 = inttoptr i64 %12109 to i64*
  store i64 %12107, i64* %12110, align 8
  store i64 %12109, i64* %6, align 8
  store i64 %12106, i64* %3, align 8
  %call2_42fa55 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %12106, %struct.Memory* %call2_42f9db)
  %12111 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %12112 = load i16, i16* %AX.i3315, align 2
  %12113 = zext i16 %12112 to i64
  store i64 %12113, i64* %RDX.i5152, align 8
  %12114 = load i64, i64* %RBP.i, align 8
  %12115 = add i64 %12114, -980
  %12116 = add i64 %12111, 14
  store i64 %12116, i64* %3, align 8
  %12117 = inttoptr i64 %12115 to i32*
  %12118 = load i32, i32* %12117, align 4
  %12119 = zext i16 %12112 to i32
  %12120 = add i32 %12119, %12118
  %12121 = lshr i32 %12120, 31
  %12122 = add i32 %12120, 1
  %12123 = zext i32 %12122 to i64
  store i64 %12123, i64* %RSI.i5212, align 8
  %12124 = icmp eq i32 %12120, -1
  %12125 = icmp eq i32 %12122, 0
  %12126 = or i1 %12124, %12125
  %12127 = zext i1 %12126 to i8
  store i8 %12127, i8* %20, align 1
  %12128 = and i32 %12122, 255
  %12129 = tail call i32 @llvm.ctpop.i32(i32 %12128)
  %12130 = trunc i32 %12129 to i8
  %12131 = and i8 %12130, 1
  %12132 = xor i8 %12131, 1
  store i8 %12132, i8* %27, align 1
  %12133 = xor i32 %12122, %12120
  %12134 = lshr i32 %12133, 4
  %12135 = trunc i32 %12134 to i8
  %12136 = and i8 %12135, 1
  store i8 %12136, i8* %33, align 1
  %12137 = zext i1 %12125 to i8
  store i8 %12137, i8* %36, align 1
  %12138 = lshr i32 %12122, 31
  %12139 = trunc i32 %12138 to i8
  store i8 %12139, i8* %39, align 1
  %12140 = xor i32 %12138, %12121
  %12141 = add nuw nsw i32 %12140, %12138
  %12142 = icmp eq i32 %12141, 2
  %12143 = zext i1 %12142 to i8
  store i8 %12143, i8* %45, align 1
  store i64 %12123, i64* %RAX.i1585, align 8
  %12144 = sext i32 %12122 to i64
  %12145 = lshr i64 %12144, 32
  store i64 %12145, i64* %3718, align 8
  %12146 = add i64 %12111, 24
  store i64 %12146, i64* %3, align 8
  %12147 = shl nuw i64 %12145, 32
  %12148 = or i64 %12147, %12123
  %12149 = sdiv i64 %12148, 2
  %12150 = shl i64 %12149, 32
  %12151 = ashr exact i64 %12150, 32
  %12152 = icmp eq i64 %12149, %12151
  br i1 %12152, label %12155, label %12153

; <label>:12153:                                  ; preds = %block_.L_42fa25
  %12154 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12146, %struct.Memory* %call2_42fa55)
  %.pre195 = load i64, i64* %RBP.i, align 8
  %.pre196 = load i32, i32* %EAX.i1609, align 4
  %.pre197 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit825

; <label>:12155:                                  ; preds = %block_.L_42fa25
  %12156 = srem i64 %12148, 2
  %12157 = and i64 %12149, 4294967295
  store i64 %12157, i64* %RAX.i1585, align 8
  %12158 = and i64 %12156, 4294967295
  store i64 %12158, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %12159 = trunc i64 %12149 to i32
  br label %routine_idivl__ecx.exit825

routine_idivl__ecx.exit825:                       ; preds = %12155, %12153
  %12160 = phi i64 [ %.pre197, %12153 ], [ %12146, %12155 ]
  %12161 = phi i32 [ %.pre196, %12153 ], [ %12159, %12155 ]
  %12162 = phi i64 [ %.pre195, %12153 ], [ %12114, %12155 ]
  %12163 = phi %struct.Memory* [ %12154, %12153 ], [ %call2_42fa55, %12155 ]
  %12164 = add i64 %12162, -956
  %12165 = add i64 %12160, 6
  store i64 %12165, i64* %3, align 8
  %12166 = inttoptr i64 %12164 to i32*
  store i32 %12161, i32* %12166, align 4
  %.pre198 = load i64, i64* %3, align 8
  br label %block_.L_42fa78

block_.L_42fa78:                                  ; preds = %routine_idivl__ecx.exit825, %block_42f95b
  %12167 = phi i64 [ %.pre198, %routine_idivl__ecx.exit825 ], [ %11659, %block_42f95b ]
  %MEMORY.73 = phi %struct.Memory* [ %12163, %routine_idivl__ecx.exit825 ], [ %11616, %block_42f95b ]
  %12168 = load i64, i64* %RBP.i, align 8
  %12169 = add i64 %12168, -956
  %12170 = add i64 %12167, 6
  store i64 %12170, i64* %3, align 8
  %12171 = inttoptr i64 %12169 to i32*
  %12172 = load i32, i32* %12171, align 4
  %12173 = zext i32 %12172 to i64
  store i64 %12173, i64* %RAX.i1585, align 8
  %12174 = add i64 %12168, -908
  %12175 = add i64 %12167, 12
  store i64 %12175, i64* %3, align 8
  %12176 = inttoptr i64 %12174 to i32*
  store i32 %12172, i32* %12176, align 4
  %.pre199 = load i64, i64* %3, align 8
  br label %block_.L_42fa84

block_.L_42fa84:                                  ; preds = %block_.L_42fa78, %block_42f82b
  %12177 = phi i64 [ %.pre199, %block_.L_42fa78 ], [ %11100, %block_42f82b ]
  %MEMORY.74 = phi %struct.Memory* [ %MEMORY.73, %block_.L_42fa78 ], [ %MEMORY.68, %block_42f82b ]
  %12178 = load i64, i64* %RBP.i, align 8
  %12179 = add i64 %12178, -908
  %12180 = add i64 %12177, 6
  store i64 %12180, i64* %3, align 8
  %12181 = inttoptr i64 %12179 to i32*
  %12182 = load i32, i32* %12181, align 4
  %12183 = zext i32 %12182 to i64
  store i64 %12183, i64* %RAX.i1585, align 8
  %12184 = trunc i32 %12182 to i16
  store i16 %12184, i16* %CX.i3316, align 2
  %12185 = add i64 %12178, -800
  %12186 = add i64 %12177, 16
  store i64 %12186, i64* %3, align 8
  %12187 = inttoptr i64 %12185 to i64*
  %12188 = load i64, i64* %12187, align 8
  store i64 %12188, i64* %RDI.i605, align 8
  %12189 = add i64 %12178, -804
  %12190 = add i64 %12177, 22
  store i64 %12190, i64* %3, align 8
  %12191 = inttoptr i64 %12189 to i32*
  %12192 = load i32, i32* %12191, align 4
  %12193 = zext i32 %12192 to i64
  store i64 %12193, i64* %RSI.i5212, align 8
  %12194 = add i64 %12178, -808
  %12195 = add i64 %12177, 28
  store i64 %12195, i64* %3, align 8
  %12196 = inttoptr i64 %12194 to i32*
  %12197 = load i32, i32* %12196, align 4
  %12198 = zext i32 %12197 to i64
  store i64 %12198, i64* %RDX.i5152, align 8
  %.mask310 = and i32 %12182, 65535
  %12199 = zext i32 %.mask310 to i64
  store i64 %12199, i64* %RCX.i3128, align 8
  %12200 = add i64 %12177, 452332
  %12201 = add i64 %12177, 36
  %12202 = load i64, i64* %6, align 8
  %12203 = add i64 %12202, -8
  %12204 = inttoptr i64 %12203 to i64*
  store i64 %12201, i64* %12204, align 8
  store i64 %12203, i64* %6, align 8
  store i64 %12200, i64* %3, align 8
  %call2_42faa3 = tail call %struct.Memory* @sub_49e170.PutPel_14(%struct.State* nonnull %0, i64 %12200, %struct.Memory* %MEMORY.74)
  %12205 = load i64, i64* %3, align 8
  %12206 = add i64 %12205, 1220
  store i64 %12206, i64* %3, align 8
  br label %block_.L_42ff6c

block_.L_42faad:                                  ; preds = %routine_idivl__ecx.exit1583, %routine_idivl__ecx.exit1607
  %12207 = phi i64 [ %9858, %routine_idivl__ecx.exit1607 ], [ %9918, %routine_idivl__ecx.exit1583 ]
  %MEMORY.75 = phi %struct.Memory* [ %9836, %routine_idivl__ecx.exit1607 ], [ %9896, %routine_idivl__ecx.exit1583 ]
  %12208 = load i64, i64* %RBP.i, align 8
  %12209 = add i64 %12208, -56
  %12210 = add i64 %12207, 4
  store i64 %12210, i64* %3, align 8
  %12211 = inttoptr i64 %12209 to i64*
  %12212 = load i64, i64* %12211, align 8
  store i64 %12212, i64* %RDI.i605, align 8
  %12213 = add i64 %12208, -28
  %12214 = add i64 %12207, 7
  store i64 %12214, i64* %3, align 8
  %12215 = inttoptr i64 %12213 to i32*
  %12216 = load i32, i32* %12215, align 4
  %12217 = add i32 %12216, -16
  %12218 = lshr i32 %12217, 31
  %12219 = add i32 %12216, -15
  %12220 = zext i32 %12219 to i64
  store i64 %12220, i64* %RAX.i1585, align 8
  %12221 = icmp eq i32 %12217, -1
  %12222 = icmp eq i32 %12219, 0
  %12223 = or i1 %12221, %12222
  %12224 = zext i1 %12223 to i8
  store i8 %12224, i8* %20, align 1
  %12225 = and i32 %12219, 255
  %12226 = tail call i32 @llvm.ctpop.i32(i32 %12225)
  %12227 = trunc i32 %12226 to i8
  %12228 = and i8 %12227, 1
  %12229 = xor i8 %12228, 1
  store i8 %12229, i8* %27, align 1
  %12230 = xor i32 %12219, %12217
  %12231 = lshr i32 %12230, 4
  %12232 = trunc i32 %12231 to i8
  %12233 = and i8 %12232, 1
  store i8 %12233, i8* %33, align 1
  %12234 = zext i1 %12222 to i8
  store i8 %12234, i8* %36, align 1
  %12235 = lshr i32 %12219, 31
  %12236 = trunc i32 %12235 to i8
  store i8 %12236, i8* %39, align 1
  %12237 = xor i32 %12235, %12218
  %12238 = add nuw nsw i32 %12237, %12235
  %12239 = icmp eq i32 %12238, 2
  %12240 = zext i1 %12239 to i8
  store i8 %12240, i8* %45, align 1
  %12241 = add i64 %12208, -24
  %12242 = add i64 %12207, 16
  store i64 %12242, i64* %3, align 8
  %12243 = inttoptr i64 %12241 to i32*
  %12244 = load i32, i32* %12243, align 4
  %12245 = add i32 %12244, -16
  %12246 = zext i32 %12245 to i64
  store i64 %12246, i64* %RCX.i3128, align 8
  %12247 = icmp ult i32 %12244, 16
  %12248 = zext i1 %12247 to i8
  store i8 %12248, i8* %20, align 1
  %12249 = and i32 %12245, 255
  %12250 = tail call i32 @llvm.ctpop.i32(i32 %12249)
  %12251 = trunc i32 %12250 to i8
  %12252 = and i8 %12251, 1
  %12253 = xor i8 %12252, 1
  store i8 %12253, i8* %27, align 1
  %12254 = xor i32 %12244, 16
  %12255 = xor i32 %12254, %12245
  %12256 = lshr i32 %12255, 4
  %12257 = trunc i32 %12256 to i8
  %12258 = and i8 %12257, 1
  store i8 %12258, i8* %33, align 1
  %12259 = icmp eq i32 %12245, 0
  %12260 = zext i1 %12259 to i8
  store i8 %12260, i8* %36, align 1
  %12261 = lshr i32 %12245, 31
  %12262 = trunc i32 %12261 to i8
  store i8 %12262, i8* %39, align 1
  %12263 = lshr i32 %12244, 31
  %12264 = xor i32 %12261, %12263
  %12265 = add nuw nsw i32 %12264, %12263
  %12266 = icmp eq i32 %12265, 2
  %12267 = zext i1 %12266 to i8
  store i8 %12267, i8* %45, align 1
  %12268 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %12268, i64* %RDX.i5152, align 8
  %12269 = add i64 %12268, 72684
  %12270 = add i64 %12207, 33
  store i64 %12270, i64* %3, align 8
  %12271 = inttoptr i64 %12269 to i32*
  %12272 = load i32, i32* %12271, align 4
  %12273 = zext i32 %12272 to i64
  store i64 %12273, i64* %RSI.i5212, align 8
  %12274 = load i64, i64* %RBP.i, align 8
  %12275 = add i64 %12274, -56
  %12276 = add i64 %12207, 37
  store i64 %12276, i64* %3, align 8
  %12277 = inttoptr i64 %12275 to i64*
  %12278 = load i64, i64* %12277, align 8
  store i64 %12278, i64* %RDX.i5152, align 8
  %12279 = add i64 %12274, -28
  %12280 = add i64 %12207, 41
  store i64 %12280, i64* %3, align 8
  %12281 = inttoptr i64 %12279 to i32*
  %12282 = load i32, i32* %12281, align 4
  %12283 = add i32 %12282, -16
  %12284 = zext i32 %12283 to i64
  store i64 %12284, i64* %600, align 8
  %12285 = icmp ult i32 %12282, 16
  %12286 = zext i1 %12285 to i8
  store i8 %12286, i8* %20, align 1
  %12287 = and i32 %12283, 255
  %12288 = tail call i32 @llvm.ctpop.i32(i32 %12287)
  %12289 = trunc i32 %12288 to i8
  %12290 = and i8 %12289, 1
  %12291 = xor i8 %12290, 1
  store i8 %12291, i8* %27, align 1
  %12292 = xor i32 %12282, 16
  %12293 = xor i32 %12292, %12283
  %12294 = lshr i32 %12293, 4
  %12295 = trunc i32 %12294 to i8
  %12296 = and i8 %12295, 1
  store i8 %12296, i8* %33, align 1
  %12297 = icmp eq i32 %12283, 0
  %12298 = zext i1 %12297 to i8
  store i8 %12298, i8* %36, align 1
  %12299 = lshr i32 %12283, 31
  %12300 = trunc i32 %12299 to i8
  store i8 %12300, i8* %39, align 1
  %12301 = lshr i32 %12282, 31
  %12302 = xor i32 %12299, %12301
  %12303 = add nuw nsw i32 %12302, %12301
  %12304 = icmp eq i32 %12303, 2
  %12305 = zext i1 %12304 to i8
  store i8 %12305, i8* %45, align 1
  %12306 = add i64 %12274, -24
  %12307 = add i64 %12207, 49
  store i64 %12307, i64* %3, align 8
  %12308 = inttoptr i64 %12306 to i32*
  %12309 = load i32, i32* %12308, align 4
  %12310 = add i32 %12309, -16
  %12311 = icmp eq i32 %12310, 0
  %12312 = zext i1 %12311 to i8
  %12313 = lshr i32 %12310, 31
  %12314 = add i32 %12309, -17
  %12315 = zext i32 %12314 to i64
  store i64 %12315, i64* %602, align 8
  store i8 %12312, i8* %20, align 1
  %12316 = and i32 %12314, 255
  %12317 = tail call i32 @llvm.ctpop.i32(i32 %12316)
  %12318 = trunc i32 %12317 to i8
  %12319 = and i8 %12318, 1
  %12320 = xor i8 %12319, 1
  store i8 %12320, i8* %27, align 1
  %12321 = xor i32 %12314, %12310
  %12322 = lshr i32 %12321, 4
  %12323 = trunc i32 %12322 to i8
  %12324 = and i8 %12323, 1
  store i8 %12324, i8* %33, align 1
  %12325 = icmp eq i32 %12314, 0
  %12326 = zext i1 %12325 to i8
  store i8 %12326, i8* %36, align 1
  %12327 = lshr i32 %12314, 31
  %12328 = trunc i32 %12327 to i8
  store i8 %12328, i8* %39, align 1
  %12329 = xor i32 %12327, %12313
  %12330 = add nuw nsw i32 %12329, %12313
  %12331 = icmp eq i32 %12330, 2
  %12332 = zext i1 %12331 to i8
  store i8 %12332, i8* %45, align 1
  %12333 = load i64, i64* %RBP.i, align 8
  %12334 = add i64 %12333, -80
  %12335 = add i64 %12207, 61
  store i64 %12335, i64* %3, align 8
  %12336 = inttoptr i64 %12334 to i32*
  %12337 = load i32, i32* %12336, align 4
  %12338 = zext i32 %12337 to i64
  store i64 %12338, i64* %3720, align 8
  %12339 = add i64 %12333, -76
  %12340 = add i64 %12207, 65
  store i64 %12340, i64* %3, align 8
  %12341 = inttoptr i64 %12339 to i32*
  %12342 = load i32, i32* %12341, align 4
  %12343 = zext i32 %12342 to i64
  store i64 %12343, i64* %3722, align 8
  %12344 = add i64 %12333, -1008
  %12345 = load i64, i64* %RDI.i605, align 8
  %12346 = add i64 %12207, 72
  store i64 %12346, i64* %3, align 8
  %12347 = inttoptr i64 %12344 to i64*
  store i64 %12345, i64* %12347, align 8
  %12348 = load i64, i64* %RDX.i5152, align 8
  %12349 = load i64, i64* %3, align 8
  store i64 %12348, i64* %RDI.i605, align 8
  %12350 = load i64, i64* %RBP.i, align 8
  %12351 = add i64 %12350, -1012
  %12352 = load i32, i32* %ESI.i5201, align 4
  %12353 = add i64 %12349, 9
  store i64 %12353, i64* %3, align 8
  %12354 = inttoptr i64 %12351 to i32*
  store i32 %12352, i32* %12354, align 4
  %12355 = load i32, i32* %R8D.i4817, align 4
  %12356 = zext i32 %12355 to i64
  %12357 = load i64, i64* %3, align 8
  store i64 %12356, i64* %RSI.i5212, align 8
  %12358 = load i32, i32* %R9D.i4678, align 4
  %12359 = zext i32 %12358 to i64
  store i64 %12359, i64* %RDX.i5152, align 8
  %12360 = load i64, i64* %RBP.i, align 8
  %12361 = add i64 %12360, -1016
  %12362 = load i32, i32* %ECX.i3256, align 4
  %12363 = add i64 %12357, 12
  store i64 %12363, i64* %3, align 8
  %12364 = inttoptr i64 %12361 to i32*
  store i32 %12362, i32* %12364, align 4
  %12365 = load i32, i32* %R10D.i3532, align 4
  %12366 = zext i32 %12365 to i64
  %12367 = load i64, i64* %3, align 8
  store i64 %12366, i64* %RCX.i3128, align 8
  %12368 = load i32, i32* %R11D.i3523, align 4
  %12369 = zext i32 %12368 to i64
  store i64 %12369, i64* %600, align 8
  %12370 = load i64, i64* %RBP.i, align 8
  %12371 = add i64 %12370, -1020
  %12372 = load i32, i32* %EAX.i1609, align 4
  %12373 = add i64 %12367, 12
  store i64 %12373, i64* %3, align 8
  %12374 = inttoptr i64 %12371 to i32*
  store i32 %12372, i32* %12374, align 4
  %12375 = load i64, i64* %3, align 8
  %12376 = add i64 %12375, 454138
  %12377 = add i64 %12375, 5
  %12378 = load i64, i64* %6, align 8
  %12379 = add i64 %12378, -8
  %12380 = inttoptr i64 %12379 to i64*
  store i64 %12377, i64* %12380, align 8
  store i64 %12379, i64* %6, align 8
  store i64 %12376, i64* %3, align 8
  %call2_42fb16 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %12376, %struct.Memory* %MEMORY.75)
  %12381 = load i16, i16* %AX.i3315, align 2
  %12382 = zext i16 %12381 to i64
  %12383 = load i64, i64* %3, align 8
  store i64 %12382, i64* %RCX.i3128, align 8
  %12384 = load i64, i64* %RBP.i, align 8
  %12385 = add i64 %12384, -56
  %12386 = add i64 %12383, 7
  store i64 %12386, i64* %3, align 8
  %12387 = inttoptr i64 %12385 to i64*
  %12388 = load i64, i64* %12387, align 8
  store i64 %12388, i64* %RDI.i605, align 8
  %12389 = add i64 %12384, -40
  %12390 = add i64 %12383, 10
  store i64 %12390, i64* %3, align 8
  %12391 = inttoptr i64 %12389 to i32*
  %12392 = load i32, i32* %12391, align 4
  %12393 = add i32 %12392, 2
  %12394 = zext i32 %12393 to i64
  store i64 %12394, i64* %RDX.i5152, align 8
  %12395 = icmp ugt i32 %12392, -3
  %12396 = zext i1 %12395 to i8
  store i8 %12396, i8* %20, align 1
  %12397 = and i32 %12393, 255
  %12398 = tail call i32 @llvm.ctpop.i32(i32 %12397)
  %12399 = trunc i32 %12398 to i8
  %12400 = and i8 %12399, 1
  %12401 = xor i8 %12400, 1
  store i8 %12401, i8* %27, align 1
  %12402 = xor i32 %12393, %12392
  %12403 = lshr i32 %12402, 4
  %12404 = trunc i32 %12403 to i8
  %12405 = and i8 %12404, 1
  store i8 %12405, i8* %33, align 1
  %12406 = icmp eq i32 %12393, 0
  %12407 = zext i1 %12406 to i8
  store i8 %12407, i8* %36, align 1
  %12408 = lshr i32 %12393, 31
  %12409 = trunc i32 %12408 to i8
  store i8 %12409, i8* %39, align 1
  %12410 = lshr i32 %12392, 31
  %12411 = xor i32 %12408, %12410
  %12412 = add nuw nsw i32 %12411, %12408
  %12413 = icmp eq i32 %12412, 2
  %12414 = zext i1 %12413 to i8
  store i8 %12414, i8* %45, align 1
  %12415 = add i64 %12384, -28
  %12416 = add i64 %12383, 16
  store i64 %12416, i64* %3, align 8
  %12417 = inttoptr i64 %12415 to i32*
  %12418 = load i32, i32* %12417, align 4
  %12419 = add i32 %12418, 2
  %12420 = zext i32 %12419 to i64
  store i64 %12420, i64* %RSI.i5212, align 8
  %12421 = lshr i32 %12419, 31
  %12422 = sub i32 %12393, %12419
  %12423 = icmp ult i32 %12393, %12419
  %12424 = zext i1 %12423 to i8
  store i8 %12424, i8* %20, align 1
  %12425 = and i32 %12422, 255
  %12426 = tail call i32 @llvm.ctpop.i32(i32 %12425)
  %12427 = trunc i32 %12426 to i8
  %12428 = and i8 %12427, 1
  %12429 = xor i8 %12428, 1
  store i8 %12429, i8* %27, align 1
  %12430 = xor i32 %12419, %12393
  %12431 = xor i32 %12430, %12422
  %12432 = lshr i32 %12431, 4
  %12433 = trunc i32 %12432 to i8
  %12434 = and i8 %12433, 1
  store i8 %12434, i8* %33, align 1
  %12435 = icmp eq i32 %12422, 0
  %12436 = zext i1 %12435 to i8
  store i8 %12436, i8* %36, align 1
  %12437 = lshr i32 %12422, 31
  %12438 = trunc i32 %12437 to i8
  store i8 %12438, i8* %39, align 1
  %12439 = xor i32 %12421, %12408
  %12440 = xor i32 %12437, %12408
  %12441 = add nuw nsw i32 %12440, %12439
  %12442 = icmp eq i32 %12441, 2
  %12443 = zext i1 %12442 to i8
  store i8 %12443, i8* %45, align 1
  %12444 = load i64, i64* %RBP.i, align 8
  %12445 = add i64 %12444, -1024
  %12446 = load i32, i32* %ECX.i3256, align 4
  %12447 = add i64 %12383, 27
  store i64 %12447, i64* %3, align 8
  %12448 = inttoptr i64 %12445 to i32*
  store i32 %12446, i32* %12448, align 4
  %12449 = load i64, i64* %RBP.i, align 8
  %12450 = add i64 %12449, -1032
  %12451 = load i64, i64* %RDI.i605, align 8
  %12452 = load i64, i64* %3, align 8
  %12453 = add i64 %12452, 7
  store i64 %12453, i64* %3, align 8
  %12454 = inttoptr i64 %12450 to i64*
  store i64 %12451, i64* %12454, align 8
  %12455 = load i64, i64* %3, align 8
  %12456 = load i8, i8* %39, align 1
  %12457 = icmp ne i8 %12456, 0
  %12458 = load i8, i8* %45, align 1
  %12459 = icmp ne i8 %12458, 0
  %12460 = xor i1 %12457, %12459
  %.v377 = select i1 %12460, i64 6, i64 23
  %12461 = add i64 %12455, %.v377
  store i64 %12461, i64* %3, align 8
  %12462 = load i64, i64* %RBP.i, align 8
  br i1 %12460, label %block_42fb43, label %block_.L_42fb54

block_42fb43:                                     ; preds = %block_.L_42faad
  %12463 = add i64 %12462, -40
  %12464 = add i64 %12461, 3
  store i64 %12464, i64* %3, align 8
  %12465 = inttoptr i64 %12463 to i32*
  %12466 = load i32, i32* %12465, align 4
  %12467 = add i32 %12466, 2
  %12468 = zext i32 %12467 to i64
  store i64 %12468, i64* %RAX.i1585, align 8
  %12469 = icmp ugt i32 %12466, -3
  %12470 = zext i1 %12469 to i8
  store i8 %12470, i8* %20, align 1
  %12471 = and i32 %12467, 255
  %12472 = tail call i32 @llvm.ctpop.i32(i32 %12471)
  %12473 = trunc i32 %12472 to i8
  %12474 = and i8 %12473, 1
  %12475 = xor i8 %12474, 1
  store i8 %12475, i8* %27, align 1
  %12476 = xor i32 %12467, %12466
  %12477 = lshr i32 %12476, 4
  %12478 = trunc i32 %12477 to i8
  %12479 = and i8 %12478, 1
  store i8 %12479, i8* %33, align 1
  %12480 = icmp eq i32 %12467, 0
  %12481 = zext i1 %12480 to i8
  store i8 %12481, i8* %36, align 1
  %12482 = lshr i32 %12467, 31
  %12483 = trunc i32 %12482 to i8
  store i8 %12483, i8* %39, align 1
  %12484 = lshr i32 %12466, 31
  %12485 = xor i32 %12482, %12484
  %12486 = add nuw nsw i32 %12485, %12482
  %12487 = icmp eq i32 %12486, 2
  %12488 = zext i1 %12487 to i8
  store i8 %12488, i8* %45, align 1
  %12489 = add i64 %12462, -1036
  %12490 = add i64 %12461, 12
  store i64 %12490, i64* %3, align 8
  %12491 = inttoptr i64 %12489 to i32*
  store i32 %12467, i32* %12491, align 4
  %12492 = load i64, i64* %3, align 8
  %12493 = add i64 %12492, 17
  store i64 %12493, i64* %3, align 8
  br label %block_.L_42fb60

block_.L_42fb54:                                  ; preds = %block_.L_42faad
  %12494 = add i64 %12462, -28
  %12495 = add i64 %12461, 3
  store i64 %12495, i64* %3, align 8
  %12496 = inttoptr i64 %12494 to i32*
  %12497 = load i32, i32* %12496, align 4
  %12498 = add i32 %12497, 2
  %12499 = zext i32 %12498 to i64
  store i64 %12499, i64* %RAX.i1585, align 8
  %12500 = icmp ugt i32 %12497, -3
  %12501 = zext i1 %12500 to i8
  store i8 %12501, i8* %20, align 1
  %12502 = and i32 %12498, 255
  %12503 = tail call i32 @llvm.ctpop.i32(i32 %12502)
  %12504 = trunc i32 %12503 to i8
  %12505 = and i8 %12504, 1
  %12506 = xor i8 %12505, 1
  store i8 %12506, i8* %27, align 1
  %12507 = xor i32 %12498, %12497
  %12508 = lshr i32 %12507, 4
  %12509 = trunc i32 %12508 to i8
  %12510 = and i8 %12509, 1
  store i8 %12510, i8* %33, align 1
  %12511 = icmp eq i32 %12498, 0
  %12512 = zext i1 %12511 to i8
  store i8 %12512, i8* %36, align 1
  %12513 = lshr i32 %12498, 31
  %12514 = trunc i32 %12513 to i8
  store i8 %12514, i8* %39, align 1
  %12515 = lshr i32 %12497, 31
  %12516 = xor i32 %12513, %12515
  %12517 = add nuw nsw i32 %12516, %12513
  %12518 = icmp eq i32 %12517, 2
  %12519 = zext i1 %12518 to i8
  store i8 %12519, i8* %45, align 1
  %12520 = add i64 %12462, -1036
  %12521 = add i64 %12461, 12
  store i64 %12521, i64* %3, align 8
  %12522 = inttoptr i64 %12520 to i32*
  store i32 %12498, i32* %12522, align 4
  %.pre200 = load i64, i64* %3, align 8
  br label %block_.L_42fb60

block_.L_42fb60:                                  ; preds = %block_.L_42fb54, %block_42fb43
  %12523 = phi i64 [ %.pre200, %block_.L_42fb54 ], [ %12493, %block_42fb43 ]
  %12524 = load i64, i64* %RBP.i, align 8
  %12525 = add i64 %12524, -1036
  %12526 = add i64 %12523, 6
  store i64 %12526, i64* %3, align 8
  %12527 = inttoptr i64 %12525 to i32*
  %12528 = load i32, i32* %12527, align 4
  %12529 = add i32 %12528, -16
  %12530 = zext i32 %12529 to i64
  store i64 %12530, i64* %RAX.i1585, align 8
  %12531 = icmp ult i32 %12528, 16
  %12532 = zext i1 %12531 to i8
  store i8 %12532, i8* %20, align 1
  %12533 = and i32 %12529, 255
  %12534 = tail call i32 @llvm.ctpop.i32(i32 %12533)
  %12535 = trunc i32 %12534 to i8
  %12536 = and i8 %12535, 1
  %12537 = xor i8 %12536, 1
  store i8 %12537, i8* %27, align 1
  %12538 = xor i32 %12528, 16
  %12539 = xor i32 %12538, %12529
  %12540 = lshr i32 %12539, 4
  %12541 = trunc i32 %12540 to i8
  %12542 = and i8 %12541, 1
  store i8 %12542, i8* %33, align 1
  %12543 = icmp eq i32 %12529, 0
  %12544 = zext i1 %12543 to i8
  store i8 %12544, i8* %36, align 1
  %12545 = lshr i32 %12529, 31
  %12546 = trunc i32 %12545 to i8
  store i8 %12546, i8* %39, align 1
  %12547 = lshr i32 %12528, 31
  %12548 = xor i32 %12545, %12547
  %12549 = add nuw nsw i32 %12548, %12547
  %12550 = icmp eq i32 %12549, 2
  %12551 = zext i1 %12550 to i8
  store i8 %12551, i8* %45, align 1
  %12552 = add i64 %12524, -36
  %12553 = add i64 %12523, 12
  store i64 %12553, i64* %3, align 8
  %12554 = inttoptr i64 %12552 to i32*
  %12555 = load i32, i32* %12554, align 4
  %12556 = add i32 %12555, 2
  %12557 = zext i32 %12556 to i64
  store i64 %12557, i64* %RCX.i3128, align 8
  %12558 = icmp ugt i32 %12555, -3
  %12559 = zext i1 %12558 to i8
  store i8 %12559, i8* %20, align 1
  %12560 = and i32 %12556, 255
  %12561 = tail call i32 @llvm.ctpop.i32(i32 %12560)
  %12562 = trunc i32 %12561 to i8
  %12563 = and i8 %12562, 1
  %12564 = xor i8 %12563, 1
  store i8 %12564, i8* %27, align 1
  %12565 = xor i32 %12556, %12555
  %12566 = lshr i32 %12565, 4
  %12567 = trunc i32 %12566 to i8
  %12568 = and i8 %12567, 1
  store i8 %12568, i8* %33, align 1
  %12569 = icmp eq i32 %12556, 0
  %12570 = zext i1 %12569 to i8
  store i8 %12570, i8* %36, align 1
  %12571 = lshr i32 %12556, 31
  %12572 = trunc i32 %12571 to i8
  store i8 %12572, i8* %39, align 1
  %12573 = lshr i32 %12555, 31
  %12574 = xor i32 %12571, %12573
  %12575 = add nuw nsw i32 %12574, %12571
  %12576 = icmp eq i32 %12575, 2
  %12577 = zext i1 %12576 to i8
  store i8 %12577, i8* %45, align 1
  %12578 = add i64 %12524, -24
  %12579 = add i64 %12523, 18
  store i64 %12579, i64* %3, align 8
  %12580 = inttoptr i64 %12578 to i32*
  %12581 = load i32, i32* %12580, align 4
  %12582 = add i32 %12581, 1
  %12583 = zext i32 %12582 to i64
  store i64 %12583, i64* %RDX.i5152, align 8
  %12584 = lshr i32 %12582, 31
  %12585 = sub i32 %12556, %12582
  %12586 = icmp ult i32 %12556, %12582
  %12587 = zext i1 %12586 to i8
  store i8 %12587, i8* %20, align 1
  %12588 = and i32 %12585, 255
  %12589 = tail call i32 @llvm.ctpop.i32(i32 %12588)
  %12590 = trunc i32 %12589 to i8
  %12591 = and i8 %12590, 1
  %12592 = xor i8 %12591, 1
  store i8 %12592, i8* %27, align 1
  %12593 = xor i32 %12582, %12556
  %12594 = xor i32 %12593, %12585
  %12595 = lshr i32 %12594, 4
  %12596 = trunc i32 %12595 to i8
  %12597 = and i8 %12596, 1
  store i8 %12597, i8* %33, align 1
  %12598 = icmp eq i32 %12585, 0
  %12599 = zext i1 %12598 to i8
  store i8 %12599, i8* %36, align 1
  %12600 = lshr i32 %12585, 31
  %12601 = trunc i32 %12600 to i8
  store i8 %12601, i8* %39, align 1
  %12602 = xor i32 %12584, %12571
  %12603 = xor i32 %12600, %12571
  %12604 = add nuw nsw i32 %12603, %12602
  %12605 = icmp eq i32 %12604, 2
  %12606 = zext i1 %12605 to i8
  store i8 %12606, i8* %45, align 1
  %12607 = load i64, i64* %RBP.i, align 8
  %12608 = add i64 %12607, -1040
  %12609 = load i32, i32* %EAX.i1609, align 4
  %12610 = add i64 %12523, 29
  store i64 %12610, i64* %3, align 8
  %12611 = inttoptr i64 %12608 to i32*
  store i32 %12609, i32* %12611, align 4
  %12612 = load i64, i64* %3, align 8
  %12613 = load i8, i8* %39, align 1
  %12614 = icmp ne i8 %12613, 0
  %12615 = load i8, i8* %45, align 1
  %12616 = icmp ne i8 %12615, 0
  %12617 = xor i1 %12614, %12616
  %.v378 = select i1 %12617, i64 6, i64 23
  %12618 = add i64 %12612, %.v378
  store i64 %12618, i64* %3, align 8
  %12619 = load i64, i64* %RBP.i, align 8
  br i1 %12617, label %block_42fb83, label %block_.L_42fb94

block_42fb83:                                     ; preds = %block_.L_42fb60
  %12620 = add i64 %12619, -36
  %12621 = add i64 %12618, 3
  store i64 %12621, i64* %3, align 8
  %12622 = inttoptr i64 %12620 to i32*
  %12623 = load i32, i32* %12622, align 4
  %12624 = add i32 %12623, 2
  %12625 = zext i32 %12624 to i64
  store i64 %12625, i64* %RAX.i1585, align 8
  %12626 = icmp ugt i32 %12623, -3
  %12627 = zext i1 %12626 to i8
  store i8 %12627, i8* %20, align 1
  %12628 = and i32 %12624, 255
  %12629 = tail call i32 @llvm.ctpop.i32(i32 %12628)
  %12630 = trunc i32 %12629 to i8
  %12631 = and i8 %12630, 1
  %12632 = xor i8 %12631, 1
  store i8 %12632, i8* %27, align 1
  %12633 = xor i32 %12624, %12623
  %12634 = lshr i32 %12633, 4
  %12635 = trunc i32 %12634 to i8
  %12636 = and i8 %12635, 1
  store i8 %12636, i8* %33, align 1
  %12637 = icmp eq i32 %12624, 0
  %12638 = zext i1 %12637 to i8
  store i8 %12638, i8* %36, align 1
  %12639 = lshr i32 %12624, 31
  %12640 = trunc i32 %12639 to i8
  store i8 %12640, i8* %39, align 1
  %12641 = lshr i32 %12623, 31
  %12642 = xor i32 %12639, %12641
  %12643 = add nuw nsw i32 %12642, %12639
  %12644 = icmp eq i32 %12643, 2
  %12645 = zext i1 %12644 to i8
  store i8 %12645, i8* %45, align 1
  %12646 = add i64 %12619, -1044
  %12647 = add i64 %12618, 12
  store i64 %12647, i64* %3, align 8
  %12648 = inttoptr i64 %12646 to i32*
  store i32 %12624, i32* %12648, align 4
  %12649 = load i64, i64* %3, align 8
  %12650 = add i64 %12649, 17
  store i64 %12650, i64* %3, align 8
  br label %block_.L_42fba0

block_.L_42fb94:                                  ; preds = %block_.L_42fb60
  %12651 = add i64 %12619, -24
  %12652 = add i64 %12618, 3
  store i64 %12652, i64* %3, align 8
  %12653 = inttoptr i64 %12651 to i32*
  %12654 = load i32, i32* %12653, align 4
  %12655 = add i32 %12654, 1
  %12656 = zext i32 %12655 to i64
  store i64 %12656, i64* %RAX.i1585, align 8
  %12657 = icmp eq i32 %12654, -1
  %12658 = icmp eq i32 %12655, 0
  %12659 = or i1 %12657, %12658
  %12660 = zext i1 %12659 to i8
  store i8 %12660, i8* %20, align 1
  %12661 = and i32 %12655, 255
  %12662 = tail call i32 @llvm.ctpop.i32(i32 %12661)
  %12663 = trunc i32 %12662 to i8
  %12664 = and i8 %12663, 1
  %12665 = xor i8 %12664, 1
  store i8 %12665, i8* %27, align 1
  %12666 = xor i32 %12655, %12654
  %12667 = lshr i32 %12666, 4
  %12668 = trunc i32 %12667 to i8
  %12669 = and i8 %12668, 1
  store i8 %12669, i8* %33, align 1
  %12670 = zext i1 %12658 to i8
  store i8 %12670, i8* %36, align 1
  %12671 = lshr i32 %12655, 31
  %12672 = trunc i32 %12671 to i8
  store i8 %12672, i8* %39, align 1
  %12673 = lshr i32 %12654, 31
  %12674 = xor i32 %12671, %12673
  %12675 = add nuw nsw i32 %12674, %12671
  %12676 = icmp eq i32 %12675, 2
  %12677 = zext i1 %12676 to i8
  store i8 %12677, i8* %45, align 1
  %12678 = add i64 %12619, -1044
  %12679 = add i64 %12618, 12
  store i64 %12679, i64* %3, align 8
  %12680 = inttoptr i64 %12678 to i32*
  store i32 %12655, i32* %12680, align 4
  %.pre201 = load i64, i64* %3, align 8
  br label %block_.L_42fba0

block_.L_42fba0:                                  ; preds = %block_.L_42fb94, %block_42fb83
  %12681 = phi i64 [ %.pre201, %block_.L_42fb94 ], [ %12650, %block_42fb83 ]
  %12682 = load i64, i64* %RBP.i, align 8
  %12683 = add i64 %12682, -1044
  %12684 = add i64 %12681, 6
  store i64 %12684, i64* %3, align 8
  %12685 = inttoptr i64 %12683 to i32*
  %12686 = load i32, i32* %12685, align 4
  %12687 = add i32 %12686, -16
  %12688 = zext i32 %12687 to i64
  store i64 %12688, i64* %RAX.i1585, align 8
  %12689 = icmp ult i32 %12686, 16
  %12690 = zext i1 %12689 to i8
  store i8 %12690, i8* %20, align 1
  %12691 = and i32 %12687, 255
  %12692 = tail call i32 @llvm.ctpop.i32(i32 %12691)
  %12693 = trunc i32 %12692 to i8
  %12694 = and i8 %12693, 1
  %12695 = xor i8 %12694, 1
  store i8 %12695, i8* %27, align 1
  %12696 = xor i32 %12686, 16
  %12697 = xor i32 %12696, %12687
  %12698 = lshr i32 %12697, 4
  %12699 = trunc i32 %12698 to i8
  %12700 = and i8 %12699, 1
  store i8 %12700, i8* %33, align 1
  %12701 = icmp eq i32 %12687, 0
  %12702 = zext i1 %12701 to i8
  store i8 %12702, i8* %36, align 1
  %12703 = lshr i32 %12687, 31
  %12704 = trunc i32 %12703 to i8
  store i8 %12704, i8* %39, align 1
  %12705 = lshr i32 %12686, 31
  %12706 = xor i32 %12703, %12705
  %12707 = add nuw nsw i32 %12706, %12705
  %12708 = icmp eq i32 %12707, 2
  %12709 = zext i1 %12708 to i8
  store i8 %12709, i8* %45, align 1
  %12710 = add i64 %12682, -80
  %12711 = add i64 %12681, 12
  store i64 %12711, i64* %3, align 8
  %12712 = inttoptr i64 %12710 to i32*
  %12713 = load i32, i32* %12712, align 4
  %12714 = zext i32 %12713 to i64
  store i64 %12714, i64* %RCX.i3128, align 8
  %12715 = add i64 %12682, -76
  %12716 = add i64 %12681, 16
  store i64 %12716, i64* %3, align 8
  %12717 = inttoptr i64 %12715 to i32*
  %12718 = load i32, i32* %12717, align 4
  %12719 = zext i32 %12718 to i64
  store i64 %12719, i64* %600, align 8
  %12720 = add i64 %12682, -1032
  %12721 = add i64 %12681, 23
  store i64 %12721, i64* %3, align 8
  %12722 = inttoptr i64 %12720 to i64*
  %12723 = load i64, i64* %12722, align 8
  store i64 %12723, i64* %RDI.i605, align 8
  %12724 = add i64 %12682, -1040
  %12725 = add i64 %12681, 29
  store i64 %12725, i64* %3, align 8
  %12726 = inttoptr i64 %12724 to i32*
  %12727 = load i32, i32* %12726, align 4
  %12728 = zext i32 %12727 to i64
  store i64 %12728, i64* %RSI.i5212, align 8
  store i64 %12688, i64* %RDX.i5152, align 8
  %12729 = add i64 %12681, 454000
  %12730 = add i64 %12681, 36
  %12731 = load i64, i64* %6, align 8
  %12732 = add i64 %12731, -8
  %12733 = inttoptr i64 %12732 to i64*
  store i64 %12730, i64* %12733, align 8
  store i64 %12732, i64* %6, align 8
  store i64 %12729, i64* %3, align 8
  %call2_42fbbf = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %12729, %struct.Memory* %call2_42fb16)
  %12734 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %12735 = load i16, i16* %AX.i3315, align 2
  %12736 = zext i16 %12735 to i64
  store i64 %12736, i64* %RDX.i5152, align 8
  %12737 = load i64, i64* %RBP.i, align 8
  %12738 = add i64 %12737, -1024
  %12739 = add i64 %12734, 14
  store i64 %12739, i64* %3, align 8
  %12740 = inttoptr i64 %12738 to i32*
  %12741 = load i32, i32* %12740, align 4
  %12742 = zext i16 %12735 to i32
  %12743 = add i32 %12742, %12741
  %12744 = lshr i32 %12743, 31
  %12745 = add i32 %12743, 1
  %12746 = zext i32 %12745 to i64
  store i64 %12746, i64* %RSI.i5212, align 8
  %12747 = icmp eq i32 %12743, -1
  %12748 = icmp eq i32 %12745, 0
  %12749 = or i1 %12747, %12748
  %12750 = zext i1 %12749 to i8
  store i8 %12750, i8* %20, align 1
  %12751 = and i32 %12745, 255
  %12752 = tail call i32 @llvm.ctpop.i32(i32 %12751)
  %12753 = trunc i32 %12752 to i8
  %12754 = and i8 %12753, 1
  %12755 = xor i8 %12754, 1
  store i8 %12755, i8* %27, align 1
  %12756 = xor i32 %12745, %12743
  %12757 = lshr i32 %12756, 4
  %12758 = trunc i32 %12757 to i8
  %12759 = and i8 %12758, 1
  store i8 %12759, i8* %33, align 1
  %12760 = zext i1 %12748 to i8
  store i8 %12760, i8* %36, align 1
  %12761 = lshr i32 %12745, 31
  %12762 = trunc i32 %12761 to i8
  store i8 %12762, i8* %39, align 1
  %12763 = xor i32 %12761, %12744
  %12764 = add nuw nsw i32 %12763, %12761
  %12765 = icmp eq i32 %12764, 2
  %12766 = zext i1 %12765 to i8
  store i8 %12766, i8* %45, align 1
  store i64 %12746, i64* %RAX.i1585, align 8
  %12767 = sext i32 %12745 to i64
  %12768 = lshr i64 %12767, 32
  store i64 %12768, i64* %3718, align 8
  %12769 = add i64 %12734, 24
  store i64 %12769, i64* %3, align 8
  %12770 = shl nuw i64 %12768, 32
  %12771 = or i64 %12770, %12746
  %12772 = sdiv i64 %12771, 2
  %12773 = shl i64 %12772, 32
  %12774 = ashr exact i64 %12773, 32
  %12775 = icmp eq i64 %12772, %12774
  br i1 %12775, label %12778, label %12776

; <label>:12776:                                  ; preds = %block_.L_42fba0
  %12777 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12769, %struct.Memory* %call2_42fbbf)
  %.pre202 = load i64, i64* %RBP.i, align 8
  %.pre203 = load i64, i64* %3, align 8
  %.pre204 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__ecx.exit603

; <label>:12778:                                  ; preds = %block_.L_42fba0
  %12779 = srem i64 %12771, 2
  %12780 = and i64 %12772, 4294967295
  store i64 %12780, i64* %RAX.i1585, align 8
  %12781 = and i64 %12779, 4294967295
  store i64 %12781, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %12782 = trunc i64 %12772 to i32
  br label %routine_idivl__ecx.exit603

routine_idivl__ecx.exit603:                       ; preds = %12778, %12776
  %12783 = phi i32 [ %.pre204, %12776 ], [ %12782, %12778 ]
  %12784 = phi i64 [ %.pre203, %12776 ], [ %12769, %12778 ]
  %12785 = phi i64 [ %.pre202, %12776 ], [ %12737, %12778 ]
  %12786 = phi %struct.Memory* [ %12777, %12776 ], [ %call2_42fbbf, %12778 ]
  %12787 = add i64 %12785, -1012
  %12788 = add i64 %12784, 6
  store i64 %12788, i64* %3, align 8
  %12789 = inttoptr i64 %12787 to i32*
  %12790 = load i32, i32* %12789, align 4
  %12791 = zext i32 %12790 to i64
  store i64 %12791, i64* %RCX.i3128, align 8
  %12792 = sub i32 %12790, %12783
  %12793 = icmp ult i32 %12790, %12783
  %12794 = zext i1 %12793 to i8
  store i8 %12794, i8* %20, align 1
  %12795 = and i32 %12792, 255
  %12796 = tail call i32 @llvm.ctpop.i32(i32 %12795)
  %12797 = trunc i32 %12796 to i8
  %12798 = and i8 %12797, 1
  %12799 = xor i8 %12798, 1
  store i8 %12799, i8* %27, align 1
  %12800 = xor i32 %12783, %12790
  %12801 = xor i32 %12800, %12792
  %12802 = lshr i32 %12801, 4
  %12803 = trunc i32 %12802 to i8
  %12804 = and i8 %12803, 1
  store i8 %12804, i8* %33, align 1
  %12805 = icmp eq i32 %12792, 0
  %12806 = zext i1 %12805 to i8
  store i8 %12806, i8* %36, align 1
  %12807 = lshr i32 %12792, 31
  %12808 = trunc i32 %12807 to i8
  store i8 %12808, i8* %39, align 1
  %12809 = lshr i32 %12790, 31
  %12810 = lshr i32 %12783, 31
  %12811 = xor i32 %12810, %12809
  %12812 = xor i32 %12807, %12809
  %12813 = add nuw nsw i32 %12812, %12811
  %12814 = icmp eq i32 %12813, 2
  %12815 = zext i1 %12814 to i8
  store i8 %12815, i8* %45, align 1
  %12816 = icmp ne i8 %12808, 0
  %12817 = xor i1 %12816, %12814
  %.v329 = select i1 %12817, i64 14, i64 39
  %12818 = add i64 %12784, %.v329
  store i64 %12818, i64* %3, align 8
  br i1 %12817, label %block_42fbea, label %block_.L_42fc03

block_42fbea:                                     ; preds = %routine_idivl__ecx.exit603
  %12819 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %12819, i64* %RAX.i1585, align 8
  %12820 = add i64 %12819, 72684
  %12821 = add i64 %12818, 14
  store i64 %12821, i64* %3, align 8
  %12822 = inttoptr i64 %12820 to i32*
  %12823 = load i32, i32* %12822, align 4
  %12824 = zext i32 %12823 to i64
  store i64 %12824, i64* %RCX.i3128, align 8
  %12825 = add i64 %12785, -1048
  %12826 = add i64 %12818, 20
  store i64 %12826, i64* %3, align 8
  %12827 = inttoptr i64 %12825 to i32*
  store i32 %12823, i32* %12827, align 4
  %12828 = load i64, i64* %3, align 8
  %12829 = add i64 %12828, 251
  store i64 %12829, i64* %3, align 8
  br label %block_.L_42fcf9

block_.L_42fc03:                                  ; preds = %routine_idivl__ecx.exit603
  %12830 = add i64 %12785, -56
  %12831 = add i64 %12818, 4
  store i64 %12831, i64* %3, align 8
  %12832 = inttoptr i64 %12830 to i64*
  %12833 = load i64, i64* %12832, align 8
  store i64 %12833, i64* %RDI.i605, align 8
  %12834 = add i64 %12785, -28
  %12835 = add i64 %12818, 7
  store i64 %12835, i64* %3, align 8
  %12836 = inttoptr i64 %12834 to i32*
  %12837 = load i32, i32* %12836, align 4
  %12838 = add i32 %12837, -16
  %12839 = zext i32 %12838 to i64
  store i64 %12839, i64* %RAX.i1585, align 8
  %12840 = icmp ult i32 %12837, 16
  %12841 = zext i1 %12840 to i8
  store i8 %12841, i8* %20, align 1
  %12842 = and i32 %12838, 255
  %12843 = tail call i32 @llvm.ctpop.i32(i32 %12842)
  %12844 = trunc i32 %12843 to i8
  %12845 = and i8 %12844, 1
  %12846 = xor i8 %12845, 1
  store i8 %12846, i8* %27, align 1
  %12847 = xor i32 %12837, 16
  %12848 = xor i32 %12847, %12838
  %12849 = lshr i32 %12848, 4
  %12850 = trunc i32 %12849 to i8
  %12851 = and i8 %12850, 1
  store i8 %12851, i8* %33, align 1
  %12852 = icmp eq i32 %12838, 0
  %12853 = zext i1 %12852 to i8
  store i8 %12853, i8* %36, align 1
  %12854 = lshr i32 %12838, 31
  %12855 = trunc i32 %12854 to i8
  store i8 %12855, i8* %39, align 1
  %12856 = lshr i32 %12837, 31
  %12857 = xor i32 %12854, %12856
  %12858 = add nuw nsw i32 %12857, %12856
  %12859 = icmp eq i32 %12858, 2
  %12860 = zext i1 %12859 to i8
  store i8 %12860, i8* %45, align 1
  %12861 = add i64 %12785, -24
  %12862 = add i64 %12818, 13
  store i64 %12862, i64* %3, align 8
  %12863 = inttoptr i64 %12861 to i32*
  %12864 = load i32, i32* %12863, align 4
  %12865 = add i32 %12864, -16
  %12866 = icmp eq i32 %12865, 0
  %12867 = zext i1 %12866 to i8
  %12868 = lshr i32 %12865, 31
  %12869 = add i32 %12864, -17
  %12870 = zext i32 %12869 to i64
  store i64 %12870, i64* %RCX.i3128, align 8
  store i8 %12867, i8* %20, align 1
  %12871 = and i32 %12869, 255
  %12872 = tail call i32 @llvm.ctpop.i32(i32 %12871)
  %12873 = trunc i32 %12872 to i8
  %12874 = and i8 %12873, 1
  %12875 = xor i8 %12874, 1
  store i8 %12875, i8* %27, align 1
  %12876 = xor i32 %12869, %12865
  %12877 = lshr i32 %12876, 4
  %12878 = trunc i32 %12877 to i8
  %12879 = and i8 %12878, 1
  store i8 %12879, i8* %33, align 1
  %12880 = icmp eq i32 %12869, 0
  %12881 = zext i1 %12880 to i8
  store i8 %12881, i8* %36, align 1
  %12882 = lshr i32 %12869, 31
  %12883 = trunc i32 %12882 to i8
  store i8 %12883, i8* %39, align 1
  %12884 = xor i32 %12882, %12868
  %12885 = add nuw nsw i32 %12884, %12868
  %12886 = icmp eq i32 %12885, 2
  %12887 = zext i1 %12886 to i8
  store i8 %12887, i8* %45, align 1
  %12888 = load i64, i64* %RBP.i, align 8
  %12889 = add i64 %12888, -80
  %12890 = add i64 %12818, 22
  store i64 %12890, i64* %3, align 8
  %12891 = inttoptr i64 %12889 to i32*
  %12892 = load i32, i32* %12891, align 4
  %12893 = zext i32 %12892 to i64
  store i64 %12893, i64* %RDX.i5152, align 8
  %12894 = add i64 %12888, -76
  %12895 = add i64 %12818, 26
  store i64 %12895, i64* %3, align 8
  %12896 = inttoptr i64 %12894 to i32*
  %12897 = load i32, i32* %12896, align 4
  %12898 = zext i32 %12897 to i64
  store i64 %12898, i64* %600, align 8
  %12899 = load i32, i32* %EAX.i1609, align 4
  %12900 = zext i32 %12899 to i64
  store i64 %12900, i64* %RSI.i5212, align 8
  %12901 = add i64 %12888, -1052
  %12902 = add i64 %12818, 34
  store i64 %12902, i64* %3, align 8
  %12903 = inttoptr i64 %12901 to i32*
  store i32 %12892, i32* %12903, align 4
  %12904 = load i32, i32* %ECX.i3256, align 4
  %12905 = zext i32 %12904 to i64
  %12906 = load i64, i64* %3, align 8
  store i64 %12905, i64* %RDX.i5152, align 8
  %12907 = load i64, i64* %RBP.i, align 8
  %12908 = add i64 %12907, -1052
  %12909 = add i64 %12906, 8
  store i64 %12909, i64* %3, align 8
  %12910 = inttoptr i64 %12908 to i32*
  %12911 = load i32, i32* %12910, align 4
  %12912 = zext i32 %12911 to i64
  store i64 %12912, i64* %RCX.i3128, align 8
  %12913 = add i64 %12906, 453867
  %12914 = add i64 %12906, 13
  %12915 = load i64, i64* %6, align 8
  %12916 = add i64 %12915, -8
  %12917 = inttoptr i64 %12916 to i64*
  store i64 %12914, i64* %12917, align 8
  store i64 %12916, i64* %6, align 8
  store i64 %12913, i64* %3, align 8
  %call2_42fc2d = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %12913, %struct.Memory* %12786)
  %12918 = load i16, i16* %AX.i3315, align 2
  %12919 = zext i16 %12918 to i64
  %12920 = load i64, i64* %3, align 8
  store i64 %12919, i64* %RCX.i3128, align 8
  %12921 = load i64, i64* %RBP.i, align 8
  %12922 = add i64 %12921, -56
  %12923 = add i64 %12920, 7
  store i64 %12923, i64* %3, align 8
  %12924 = inttoptr i64 %12922 to i64*
  %12925 = load i64, i64* %12924, align 8
  store i64 %12925, i64* %RDI.i605, align 8
  %12926 = add i64 %12921, -40
  %12927 = add i64 %12920, 10
  store i64 %12927, i64* %3, align 8
  %12928 = inttoptr i64 %12926 to i32*
  %12929 = load i32, i32* %12928, align 4
  %12930 = add i32 %12929, 2
  %12931 = zext i32 %12930 to i64
  store i64 %12931, i64* %RDX.i5152, align 8
  %12932 = icmp ugt i32 %12929, -3
  %12933 = zext i1 %12932 to i8
  store i8 %12933, i8* %20, align 1
  %12934 = and i32 %12930, 255
  %12935 = tail call i32 @llvm.ctpop.i32(i32 %12934)
  %12936 = trunc i32 %12935 to i8
  %12937 = and i8 %12936, 1
  %12938 = xor i8 %12937, 1
  store i8 %12938, i8* %27, align 1
  %12939 = xor i32 %12930, %12929
  %12940 = lshr i32 %12939, 4
  %12941 = trunc i32 %12940 to i8
  %12942 = and i8 %12941, 1
  store i8 %12942, i8* %33, align 1
  %12943 = icmp eq i32 %12930, 0
  %12944 = zext i1 %12943 to i8
  store i8 %12944, i8* %36, align 1
  %12945 = lshr i32 %12930, 31
  %12946 = trunc i32 %12945 to i8
  store i8 %12946, i8* %39, align 1
  %12947 = lshr i32 %12929, 31
  %12948 = xor i32 %12945, %12947
  %12949 = add nuw nsw i32 %12948, %12945
  %12950 = icmp eq i32 %12949, 2
  %12951 = zext i1 %12950 to i8
  store i8 %12951, i8* %45, align 1
  %12952 = add i64 %12921, -28
  %12953 = add i64 %12920, 16
  store i64 %12953, i64* %3, align 8
  %12954 = inttoptr i64 %12952 to i32*
  %12955 = load i32, i32* %12954, align 4
  %12956 = add i32 %12955, 2
  %12957 = zext i32 %12956 to i64
  store i64 %12957, i64* %RSI.i5212, align 8
  %12958 = lshr i32 %12956, 31
  %12959 = sub i32 %12930, %12956
  %12960 = icmp ult i32 %12930, %12956
  %12961 = zext i1 %12960 to i8
  store i8 %12961, i8* %20, align 1
  %12962 = and i32 %12959, 255
  %12963 = tail call i32 @llvm.ctpop.i32(i32 %12962)
  %12964 = trunc i32 %12963 to i8
  %12965 = and i8 %12964, 1
  %12966 = xor i8 %12965, 1
  store i8 %12966, i8* %27, align 1
  %12967 = xor i32 %12956, %12930
  %12968 = xor i32 %12967, %12959
  %12969 = lshr i32 %12968, 4
  %12970 = trunc i32 %12969 to i8
  %12971 = and i8 %12970, 1
  store i8 %12971, i8* %33, align 1
  %12972 = icmp eq i32 %12959, 0
  %12973 = zext i1 %12972 to i8
  store i8 %12973, i8* %36, align 1
  %12974 = lshr i32 %12959, 31
  %12975 = trunc i32 %12974 to i8
  store i8 %12975, i8* %39, align 1
  %12976 = xor i32 %12958, %12945
  %12977 = xor i32 %12974, %12945
  %12978 = add nuw nsw i32 %12977, %12976
  %12979 = icmp eq i32 %12978, 2
  %12980 = zext i1 %12979 to i8
  store i8 %12980, i8* %45, align 1
  %12981 = load i64, i64* %RBP.i, align 8
  %12982 = add i64 %12981, -1056
  %12983 = load i32, i32* %ECX.i3256, align 4
  %12984 = add i64 %12920, 27
  store i64 %12984, i64* %3, align 8
  %12985 = inttoptr i64 %12982 to i32*
  store i32 %12983, i32* %12985, align 4
  %12986 = load i64, i64* %RBP.i, align 8
  %12987 = add i64 %12986, -1064
  %12988 = load i64, i64* %RDI.i605, align 8
  %12989 = load i64, i64* %3, align 8
  %12990 = add i64 %12989, 7
  store i64 %12990, i64* %3, align 8
  %12991 = inttoptr i64 %12987 to i64*
  store i64 %12988, i64* %12991, align 8
  %12992 = load i64, i64* %3, align 8
  %12993 = load i8, i8* %39, align 1
  %12994 = icmp ne i8 %12993, 0
  %12995 = load i8, i8* %45, align 1
  %12996 = icmp ne i8 %12995, 0
  %12997 = xor i1 %12994, %12996
  %.v379 = select i1 %12997, i64 6, i64 23
  %12998 = add i64 %12992, %.v379
  store i64 %12998, i64* %3, align 8
  %12999 = load i64, i64* %RBP.i, align 8
  br i1 %12997, label %block_42fc5a, label %block_.L_42fc6b

block_42fc5a:                                     ; preds = %block_.L_42fc03
  %13000 = add i64 %12999, -40
  %13001 = add i64 %12998, 3
  store i64 %13001, i64* %3, align 8
  %13002 = inttoptr i64 %13000 to i32*
  %13003 = load i32, i32* %13002, align 4
  %13004 = add i32 %13003, 2
  %13005 = zext i32 %13004 to i64
  store i64 %13005, i64* %RAX.i1585, align 8
  %13006 = icmp ugt i32 %13003, -3
  %13007 = zext i1 %13006 to i8
  store i8 %13007, i8* %20, align 1
  %13008 = and i32 %13004, 255
  %13009 = tail call i32 @llvm.ctpop.i32(i32 %13008)
  %13010 = trunc i32 %13009 to i8
  %13011 = and i8 %13010, 1
  %13012 = xor i8 %13011, 1
  store i8 %13012, i8* %27, align 1
  %13013 = xor i32 %13004, %13003
  %13014 = lshr i32 %13013, 4
  %13015 = trunc i32 %13014 to i8
  %13016 = and i8 %13015, 1
  store i8 %13016, i8* %33, align 1
  %13017 = icmp eq i32 %13004, 0
  %13018 = zext i1 %13017 to i8
  store i8 %13018, i8* %36, align 1
  %13019 = lshr i32 %13004, 31
  %13020 = trunc i32 %13019 to i8
  store i8 %13020, i8* %39, align 1
  %13021 = lshr i32 %13003, 31
  %13022 = xor i32 %13019, %13021
  %13023 = add nuw nsw i32 %13022, %13019
  %13024 = icmp eq i32 %13023, 2
  %13025 = zext i1 %13024 to i8
  store i8 %13025, i8* %45, align 1
  %13026 = add i64 %12999, -1068
  %13027 = add i64 %12998, 12
  store i64 %13027, i64* %3, align 8
  %13028 = inttoptr i64 %13026 to i32*
  store i32 %13004, i32* %13028, align 4
  %13029 = load i64, i64* %3, align 8
  %13030 = add i64 %13029, 17
  store i64 %13030, i64* %3, align 8
  br label %block_.L_42fc77

block_.L_42fc6b:                                  ; preds = %block_.L_42fc03
  %13031 = add i64 %12999, -28
  %13032 = add i64 %12998, 3
  store i64 %13032, i64* %3, align 8
  %13033 = inttoptr i64 %13031 to i32*
  %13034 = load i32, i32* %13033, align 4
  %13035 = add i32 %13034, 2
  %13036 = zext i32 %13035 to i64
  store i64 %13036, i64* %RAX.i1585, align 8
  %13037 = icmp ugt i32 %13034, -3
  %13038 = zext i1 %13037 to i8
  store i8 %13038, i8* %20, align 1
  %13039 = and i32 %13035, 255
  %13040 = tail call i32 @llvm.ctpop.i32(i32 %13039)
  %13041 = trunc i32 %13040 to i8
  %13042 = and i8 %13041, 1
  %13043 = xor i8 %13042, 1
  store i8 %13043, i8* %27, align 1
  %13044 = xor i32 %13035, %13034
  %13045 = lshr i32 %13044, 4
  %13046 = trunc i32 %13045 to i8
  %13047 = and i8 %13046, 1
  store i8 %13047, i8* %33, align 1
  %13048 = icmp eq i32 %13035, 0
  %13049 = zext i1 %13048 to i8
  store i8 %13049, i8* %36, align 1
  %13050 = lshr i32 %13035, 31
  %13051 = trunc i32 %13050 to i8
  store i8 %13051, i8* %39, align 1
  %13052 = lshr i32 %13034, 31
  %13053 = xor i32 %13050, %13052
  %13054 = add nuw nsw i32 %13053, %13050
  %13055 = icmp eq i32 %13054, 2
  %13056 = zext i1 %13055 to i8
  store i8 %13056, i8* %45, align 1
  %13057 = add i64 %12999, -1068
  %13058 = add i64 %12998, 12
  store i64 %13058, i64* %3, align 8
  %13059 = inttoptr i64 %13057 to i32*
  store i32 %13035, i32* %13059, align 4
  %.pre205 = load i64, i64* %3, align 8
  br label %block_.L_42fc77

block_.L_42fc77:                                  ; preds = %block_.L_42fc6b, %block_42fc5a
  %13060 = phi i64 [ %.pre205, %block_.L_42fc6b ], [ %13030, %block_42fc5a ]
  %13061 = load i64, i64* %RBP.i, align 8
  %13062 = add i64 %13061, -1068
  %13063 = add i64 %13060, 6
  store i64 %13063, i64* %3, align 8
  %13064 = inttoptr i64 %13062 to i32*
  %13065 = load i32, i32* %13064, align 4
  %13066 = add i32 %13065, -16
  %13067 = zext i32 %13066 to i64
  store i64 %13067, i64* %RAX.i1585, align 8
  %13068 = icmp ult i32 %13065, 16
  %13069 = zext i1 %13068 to i8
  store i8 %13069, i8* %20, align 1
  %13070 = and i32 %13066, 255
  %13071 = tail call i32 @llvm.ctpop.i32(i32 %13070)
  %13072 = trunc i32 %13071 to i8
  %13073 = and i8 %13072, 1
  %13074 = xor i8 %13073, 1
  store i8 %13074, i8* %27, align 1
  %13075 = xor i32 %13065, 16
  %13076 = xor i32 %13075, %13066
  %13077 = lshr i32 %13076, 4
  %13078 = trunc i32 %13077 to i8
  %13079 = and i8 %13078, 1
  store i8 %13079, i8* %33, align 1
  %13080 = icmp eq i32 %13066, 0
  %13081 = zext i1 %13080 to i8
  store i8 %13081, i8* %36, align 1
  %13082 = lshr i32 %13066, 31
  %13083 = trunc i32 %13082 to i8
  store i8 %13083, i8* %39, align 1
  %13084 = lshr i32 %13065, 31
  %13085 = xor i32 %13082, %13084
  %13086 = add nuw nsw i32 %13085, %13084
  %13087 = icmp eq i32 %13086, 2
  %13088 = zext i1 %13087 to i8
  store i8 %13088, i8* %45, align 1
  %13089 = add i64 %13061, -36
  %13090 = add i64 %13060, 12
  store i64 %13090, i64* %3, align 8
  %13091 = inttoptr i64 %13089 to i32*
  %13092 = load i32, i32* %13091, align 4
  %13093 = add i32 %13092, 2
  %13094 = zext i32 %13093 to i64
  store i64 %13094, i64* %RCX.i3128, align 8
  %13095 = icmp ugt i32 %13092, -3
  %13096 = zext i1 %13095 to i8
  store i8 %13096, i8* %20, align 1
  %13097 = and i32 %13093, 255
  %13098 = tail call i32 @llvm.ctpop.i32(i32 %13097)
  %13099 = trunc i32 %13098 to i8
  %13100 = and i8 %13099, 1
  %13101 = xor i8 %13100, 1
  store i8 %13101, i8* %27, align 1
  %13102 = xor i32 %13093, %13092
  %13103 = lshr i32 %13102, 4
  %13104 = trunc i32 %13103 to i8
  %13105 = and i8 %13104, 1
  store i8 %13105, i8* %33, align 1
  %13106 = icmp eq i32 %13093, 0
  %13107 = zext i1 %13106 to i8
  store i8 %13107, i8* %36, align 1
  %13108 = lshr i32 %13093, 31
  %13109 = trunc i32 %13108 to i8
  store i8 %13109, i8* %39, align 1
  %13110 = lshr i32 %13092, 31
  %13111 = xor i32 %13108, %13110
  %13112 = add nuw nsw i32 %13111, %13108
  %13113 = icmp eq i32 %13112, 2
  %13114 = zext i1 %13113 to i8
  store i8 %13114, i8* %45, align 1
  %13115 = add i64 %13061, -24
  %13116 = add i64 %13060, 18
  store i64 %13116, i64* %3, align 8
  %13117 = inttoptr i64 %13115 to i32*
  %13118 = load i32, i32* %13117, align 4
  %13119 = add i32 %13118, 1
  %13120 = zext i32 %13119 to i64
  store i64 %13120, i64* %RDX.i5152, align 8
  %13121 = lshr i32 %13119, 31
  %13122 = sub i32 %13093, %13119
  %13123 = icmp ult i32 %13093, %13119
  %13124 = zext i1 %13123 to i8
  store i8 %13124, i8* %20, align 1
  %13125 = and i32 %13122, 255
  %13126 = tail call i32 @llvm.ctpop.i32(i32 %13125)
  %13127 = trunc i32 %13126 to i8
  %13128 = and i8 %13127, 1
  %13129 = xor i8 %13128, 1
  store i8 %13129, i8* %27, align 1
  %13130 = xor i32 %13119, %13093
  %13131 = xor i32 %13130, %13122
  %13132 = lshr i32 %13131, 4
  %13133 = trunc i32 %13132 to i8
  %13134 = and i8 %13133, 1
  store i8 %13134, i8* %33, align 1
  %13135 = icmp eq i32 %13122, 0
  %13136 = zext i1 %13135 to i8
  store i8 %13136, i8* %36, align 1
  %13137 = lshr i32 %13122, 31
  %13138 = trunc i32 %13137 to i8
  store i8 %13138, i8* %39, align 1
  %13139 = xor i32 %13121, %13108
  %13140 = xor i32 %13137, %13108
  %13141 = add nuw nsw i32 %13140, %13139
  %13142 = icmp eq i32 %13141, 2
  %13143 = zext i1 %13142 to i8
  store i8 %13143, i8* %45, align 1
  %13144 = load i64, i64* %RBP.i, align 8
  %13145 = add i64 %13144, -1072
  %13146 = load i32, i32* %EAX.i1609, align 4
  %13147 = add i64 %13060, 29
  store i64 %13147, i64* %3, align 8
  %13148 = inttoptr i64 %13145 to i32*
  store i32 %13146, i32* %13148, align 4
  %13149 = load i64, i64* %3, align 8
  %13150 = load i8, i8* %39, align 1
  %13151 = icmp ne i8 %13150, 0
  %13152 = load i8, i8* %45, align 1
  %13153 = icmp ne i8 %13152, 0
  %13154 = xor i1 %13151, %13153
  %.v380 = select i1 %13154, i64 6, i64 23
  %13155 = add i64 %13149, %.v380
  store i64 %13155, i64* %3, align 8
  %13156 = load i64, i64* %RBP.i, align 8
  br i1 %13154, label %block_42fc9a, label %block_.L_42fcab

block_42fc9a:                                     ; preds = %block_.L_42fc77
  %13157 = add i64 %13156, -36
  %13158 = add i64 %13155, 3
  store i64 %13158, i64* %3, align 8
  %13159 = inttoptr i64 %13157 to i32*
  %13160 = load i32, i32* %13159, align 4
  %13161 = add i32 %13160, 2
  %13162 = zext i32 %13161 to i64
  store i64 %13162, i64* %RAX.i1585, align 8
  %13163 = icmp ugt i32 %13160, -3
  %13164 = zext i1 %13163 to i8
  store i8 %13164, i8* %20, align 1
  %13165 = and i32 %13161, 255
  %13166 = tail call i32 @llvm.ctpop.i32(i32 %13165)
  %13167 = trunc i32 %13166 to i8
  %13168 = and i8 %13167, 1
  %13169 = xor i8 %13168, 1
  store i8 %13169, i8* %27, align 1
  %13170 = xor i32 %13161, %13160
  %13171 = lshr i32 %13170, 4
  %13172 = trunc i32 %13171 to i8
  %13173 = and i8 %13172, 1
  store i8 %13173, i8* %33, align 1
  %13174 = icmp eq i32 %13161, 0
  %13175 = zext i1 %13174 to i8
  store i8 %13175, i8* %36, align 1
  %13176 = lshr i32 %13161, 31
  %13177 = trunc i32 %13176 to i8
  store i8 %13177, i8* %39, align 1
  %13178 = lshr i32 %13160, 31
  %13179 = xor i32 %13176, %13178
  %13180 = add nuw nsw i32 %13179, %13176
  %13181 = icmp eq i32 %13180, 2
  %13182 = zext i1 %13181 to i8
  store i8 %13182, i8* %45, align 1
  %13183 = add i64 %13156, -1076
  %13184 = add i64 %13155, 12
  store i64 %13184, i64* %3, align 8
  %13185 = inttoptr i64 %13183 to i32*
  store i32 %13161, i32* %13185, align 4
  %13186 = load i64, i64* %3, align 8
  %13187 = add i64 %13186, 17
  store i64 %13187, i64* %3, align 8
  br label %block_.L_42fcb7

block_.L_42fcab:                                  ; preds = %block_.L_42fc77
  %13188 = add i64 %13156, -24
  %13189 = add i64 %13155, 3
  store i64 %13189, i64* %3, align 8
  %13190 = inttoptr i64 %13188 to i32*
  %13191 = load i32, i32* %13190, align 4
  %13192 = add i32 %13191, 1
  %13193 = zext i32 %13192 to i64
  store i64 %13193, i64* %RAX.i1585, align 8
  %13194 = icmp eq i32 %13191, -1
  %13195 = icmp eq i32 %13192, 0
  %13196 = or i1 %13194, %13195
  %13197 = zext i1 %13196 to i8
  store i8 %13197, i8* %20, align 1
  %13198 = and i32 %13192, 255
  %13199 = tail call i32 @llvm.ctpop.i32(i32 %13198)
  %13200 = trunc i32 %13199 to i8
  %13201 = and i8 %13200, 1
  %13202 = xor i8 %13201, 1
  store i8 %13202, i8* %27, align 1
  %13203 = xor i32 %13192, %13191
  %13204 = lshr i32 %13203, 4
  %13205 = trunc i32 %13204 to i8
  %13206 = and i8 %13205, 1
  store i8 %13206, i8* %33, align 1
  %13207 = zext i1 %13195 to i8
  store i8 %13207, i8* %36, align 1
  %13208 = lshr i32 %13192, 31
  %13209 = trunc i32 %13208 to i8
  store i8 %13209, i8* %39, align 1
  %13210 = lshr i32 %13191, 31
  %13211 = xor i32 %13208, %13210
  %13212 = add nuw nsw i32 %13211, %13208
  %13213 = icmp eq i32 %13212, 2
  %13214 = zext i1 %13213 to i8
  store i8 %13214, i8* %45, align 1
  %13215 = add i64 %13156, -1076
  %13216 = add i64 %13155, 12
  store i64 %13216, i64* %3, align 8
  %13217 = inttoptr i64 %13215 to i32*
  store i32 %13192, i32* %13217, align 4
  %.pre206 = load i64, i64* %3, align 8
  br label %block_.L_42fcb7

block_.L_42fcb7:                                  ; preds = %block_.L_42fcab, %block_42fc9a
  %13218 = phi i64 [ %.pre206, %block_.L_42fcab ], [ %13187, %block_42fc9a ]
  %13219 = load i64, i64* %RBP.i, align 8
  %13220 = add i64 %13219, -1076
  %13221 = add i64 %13218, 6
  store i64 %13221, i64* %3, align 8
  %13222 = inttoptr i64 %13220 to i32*
  %13223 = load i32, i32* %13222, align 4
  %13224 = add i32 %13223, -16
  %13225 = zext i32 %13224 to i64
  store i64 %13225, i64* %RAX.i1585, align 8
  %13226 = icmp ult i32 %13223, 16
  %13227 = zext i1 %13226 to i8
  store i8 %13227, i8* %20, align 1
  %13228 = and i32 %13224, 255
  %13229 = tail call i32 @llvm.ctpop.i32(i32 %13228)
  %13230 = trunc i32 %13229 to i8
  %13231 = and i8 %13230, 1
  %13232 = xor i8 %13231, 1
  store i8 %13232, i8* %27, align 1
  %13233 = xor i32 %13223, 16
  %13234 = xor i32 %13233, %13224
  %13235 = lshr i32 %13234, 4
  %13236 = trunc i32 %13235 to i8
  %13237 = and i8 %13236, 1
  store i8 %13237, i8* %33, align 1
  %13238 = icmp eq i32 %13224, 0
  %13239 = zext i1 %13238 to i8
  store i8 %13239, i8* %36, align 1
  %13240 = lshr i32 %13224, 31
  %13241 = trunc i32 %13240 to i8
  store i8 %13241, i8* %39, align 1
  %13242 = lshr i32 %13223, 31
  %13243 = xor i32 %13240, %13242
  %13244 = add nuw nsw i32 %13243, %13242
  %13245 = icmp eq i32 %13244, 2
  %13246 = zext i1 %13245 to i8
  store i8 %13246, i8* %45, align 1
  %13247 = add i64 %13219, -80
  %13248 = add i64 %13218, 12
  store i64 %13248, i64* %3, align 8
  %13249 = inttoptr i64 %13247 to i32*
  %13250 = load i32, i32* %13249, align 4
  %13251 = zext i32 %13250 to i64
  store i64 %13251, i64* %RCX.i3128, align 8
  %13252 = add i64 %13219, -76
  %13253 = add i64 %13218, 16
  store i64 %13253, i64* %3, align 8
  %13254 = inttoptr i64 %13252 to i32*
  %13255 = load i32, i32* %13254, align 4
  %13256 = zext i32 %13255 to i64
  store i64 %13256, i64* %600, align 8
  %13257 = add i64 %13219, -1064
  %13258 = add i64 %13218, 23
  store i64 %13258, i64* %3, align 8
  %13259 = inttoptr i64 %13257 to i64*
  %13260 = load i64, i64* %13259, align 8
  store i64 %13260, i64* %RDI.i605, align 8
  %13261 = add i64 %13219, -1072
  %13262 = add i64 %13218, 29
  store i64 %13262, i64* %3, align 8
  %13263 = inttoptr i64 %13261 to i32*
  %13264 = load i32, i32* %13263, align 4
  %13265 = zext i32 %13264 to i64
  store i64 %13265, i64* %RSI.i5212, align 8
  store i64 %13225, i64* %RDX.i5152, align 8
  %13266 = add i64 %13218, 453721
  %13267 = add i64 %13218, 36
  %13268 = load i64, i64* %6, align 8
  %13269 = add i64 %13268, -8
  %13270 = inttoptr i64 %13269 to i64*
  store i64 %13267, i64* %13270, align 8
  store i64 %13269, i64* %6, align 8
  store i64 %13266, i64* %3, align 8
  %call2_42fcd6 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %13266, %struct.Memory* %call2_42fc2d)
  %13271 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %13272 = load i16, i16* %AX.i3315, align 2
  %13273 = zext i16 %13272 to i64
  store i64 %13273, i64* %RDX.i5152, align 8
  %13274 = load i64, i64* %RBP.i, align 8
  %13275 = add i64 %13274, -1056
  %13276 = add i64 %13271, 14
  store i64 %13276, i64* %3, align 8
  %13277 = inttoptr i64 %13275 to i32*
  %13278 = load i32, i32* %13277, align 4
  %13279 = zext i16 %13272 to i32
  %13280 = add i32 %13279, %13278
  %13281 = lshr i32 %13280, 31
  %13282 = add i32 %13280, 1
  %13283 = zext i32 %13282 to i64
  store i64 %13283, i64* %RSI.i5212, align 8
  %13284 = icmp eq i32 %13280, -1
  %13285 = icmp eq i32 %13282, 0
  %13286 = or i1 %13284, %13285
  %13287 = zext i1 %13286 to i8
  store i8 %13287, i8* %20, align 1
  %13288 = and i32 %13282, 255
  %13289 = tail call i32 @llvm.ctpop.i32(i32 %13288)
  %13290 = trunc i32 %13289 to i8
  %13291 = and i8 %13290, 1
  %13292 = xor i8 %13291, 1
  store i8 %13292, i8* %27, align 1
  %13293 = xor i32 %13282, %13280
  %13294 = lshr i32 %13293, 4
  %13295 = trunc i32 %13294 to i8
  %13296 = and i8 %13295, 1
  store i8 %13296, i8* %33, align 1
  %13297 = zext i1 %13285 to i8
  store i8 %13297, i8* %36, align 1
  %13298 = lshr i32 %13282, 31
  %13299 = trunc i32 %13298 to i8
  store i8 %13299, i8* %39, align 1
  %13300 = xor i32 %13298, %13281
  %13301 = add nuw nsw i32 %13300, %13298
  %13302 = icmp eq i32 %13301, 2
  %13303 = zext i1 %13302 to i8
  store i8 %13303, i8* %45, align 1
  store i64 %13283, i64* %RAX.i1585, align 8
  %13304 = sext i32 %13282 to i64
  %13305 = lshr i64 %13304, 32
  store i64 %13305, i64* %3718, align 8
  %13306 = add i64 %13271, 24
  store i64 %13306, i64* %3, align 8
  %13307 = shl nuw i64 %13305, 32
  %13308 = or i64 %13307, %13283
  %13309 = sdiv i64 %13308, 2
  %13310 = shl i64 %13309, 32
  %13311 = ashr exact i64 %13310, 32
  %13312 = icmp eq i64 %13309, %13311
  br i1 %13312, label %13315, label %13313

; <label>:13313:                                  ; preds = %block_.L_42fcb7
  %13314 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %13306, %struct.Memory* %call2_42fcd6)
  %.pre207 = load i64, i64* %RBP.i, align 8
  %.pre208 = load i32, i32* %EAX.i1609, align 4
  %.pre209 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit428

; <label>:13315:                                  ; preds = %block_.L_42fcb7
  %13316 = srem i64 %13308, 2
  %13317 = and i64 %13309, 4294967295
  store i64 %13317, i64* %RAX.i1585, align 8
  %13318 = and i64 %13316, 4294967295
  store i64 %13318, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %13319 = trunc i64 %13309 to i32
  br label %routine_idivl__ecx.exit428

routine_idivl__ecx.exit428:                       ; preds = %13315, %13313
  %13320 = phi i64 [ %.pre209, %13313 ], [ %13306, %13315 ]
  %13321 = phi i32 [ %.pre208, %13313 ], [ %13319, %13315 ]
  %13322 = phi i64 [ %.pre207, %13313 ], [ %13274, %13315 ]
  %13323 = phi %struct.Memory* [ %13314, %13313 ], [ %call2_42fcd6, %13315 ]
  %13324 = add i64 %13322, -1048
  %13325 = add i64 %13320, 6
  store i64 %13325, i64* %3, align 8
  %13326 = inttoptr i64 %13324 to i32*
  store i32 %13321, i32* %13326, align 4
  %.pre210 = load i64, i64* %3, align 8
  br label %block_.L_42fcf9

block_.L_42fcf9:                                  ; preds = %routine_idivl__ecx.exit428, %block_42fbea
  %13327 = phi i64 [ %.pre210, %routine_idivl__ecx.exit428 ], [ %12829, %block_42fbea ]
  %MEMORY.80 = phi %struct.Memory* [ %13323, %routine_idivl__ecx.exit428 ], [ %12786, %block_42fbea ]
  %13328 = load i64, i64* %RBP.i, align 8
  %13329 = add i64 %13328, -1048
  %13330 = add i64 %13327, 6
  store i64 %13330, i64* %3, align 8
  %13331 = inttoptr i64 %13329 to i32*
  %13332 = load i32, i32* %13331, align 4
  %13333 = zext i32 %13332 to i64
  store i64 %13333, i64* %RAX.i1585, align 8
  store i64 0, i64* %RCX.i3128, align 8
  %13334 = sub i32 0, %13332
  %13335 = icmp ne i32 %13332, 0
  %13336 = zext i1 %13335 to i8
  store i8 %13336, i8* %20, align 1
  %13337 = and i32 %13334, 255
  %13338 = tail call i32 @llvm.ctpop.i32(i32 %13337)
  %13339 = trunc i32 %13338 to i8
  %13340 = and i8 %13339, 1
  %13341 = xor i8 %13340, 1
  store i8 %13341, i8* %27, align 1
  %13342 = xor i32 %13332, %13334
  %13343 = lshr i32 %13342, 4
  %13344 = trunc i32 %13343 to i8
  %13345 = and i8 %13344, 1
  store i8 %13345, i8* %33, align 1
  %13346 = icmp eq i32 %13332, 0
  %13347 = zext i1 %13346 to i8
  store i8 %13347, i8* %36, align 1
  %13348 = lshr i32 %13334, 31
  %13349 = trunc i32 %13348 to i8
  store i8 %13349, i8* %39, align 1
  %13350 = lshr i32 %13332, 31
  %13351 = add nuw nsw i32 %13348, %13350
  %13352 = icmp eq i32 %13351, 2
  %13353 = zext i1 %13352 to i8
  store i8 %13353, i8* %45, align 1
  %13354 = icmp ne i8 %13349, 0
  %13355 = xor i1 %13354, %13352
  %13356 = or i1 %13346, %13355
  %.v330 = select i1 %13356, i64 29, i64 16
  %13357 = add i64 %13327, %.v330
  store i64 %13357, i64* %3, align 8
  br i1 %13356, label %block_.L_42fd16, label %block_42fd09

block_42fd09:                                     ; preds = %block_.L_42fcf9
  store i64 0, i64* %RAX.i1585, align 8
  store i8 0, i8* %20, align 1
  store i8 1, i8* %27, align 1
  store i8 1, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %33, align 1
  %13358 = add i64 %13328, -1080
  %13359 = add i64 %13357, 8
  store i64 %13359, i64* %3, align 8
  %13360 = inttoptr i64 %13358 to i32*
  store i32 0, i32* %13360, align 4
  %13361 = load i64, i64* %3, align 8
  %13362 = add i64 %13361, 567
  store i64 %13362, i64* %3, align 8
  br label %block_.L_42ff48

block_.L_42fd16:                                  ; preds = %block_.L_42fcf9
  %13363 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %13363, i64* %RAX.i1585, align 8
  %13364 = add i64 %13363, 72684
  %13365 = add i64 %13357, 14
  store i64 %13365, i64* %3, align 8
  %13366 = inttoptr i64 %13364 to i32*
  %13367 = load i32, i32* %13366, align 4
  %13368 = zext i32 %13367 to i64
  store i64 %13368, i64* %RCX.i3128, align 8
  %13369 = add i64 %13328, -56
  %13370 = add i64 %13357, 18
  store i64 %13370, i64* %3, align 8
  %13371 = inttoptr i64 %13369 to i64*
  %13372 = load i64, i64* %13371, align 8
  store i64 %13372, i64* %RDI.i605, align 8
  %13373 = add i64 %13328, -28
  %13374 = add i64 %13357, 21
  store i64 %13374, i64* %3, align 8
  %13375 = inttoptr i64 %13373 to i32*
  %13376 = load i32, i32* %13375, align 4
  %13377 = add i32 %13376, -16
  %13378 = zext i32 %13377 to i64
  store i64 %13378, i64* %RDX.i5152, align 8
  %13379 = icmp ult i32 %13376, 16
  %13380 = zext i1 %13379 to i8
  store i8 %13380, i8* %20, align 1
  %13381 = and i32 %13377, 255
  %13382 = tail call i32 @llvm.ctpop.i32(i32 %13381)
  %13383 = trunc i32 %13382 to i8
  %13384 = and i8 %13383, 1
  %13385 = xor i8 %13384, 1
  store i8 %13385, i8* %27, align 1
  %13386 = xor i32 %13376, 16
  %13387 = xor i32 %13386, %13377
  %13388 = lshr i32 %13387, 4
  %13389 = trunc i32 %13388 to i8
  %13390 = and i8 %13389, 1
  store i8 %13390, i8* %33, align 1
  %13391 = icmp eq i32 %13377, 0
  %13392 = zext i1 %13391 to i8
  store i8 %13392, i8* %36, align 1
  %13393 = lshr i32 %13377, 31
  %13394 = trunc i32 %13393 to i8
  store i8 %13394, i8* %39, align 1
  %13395 = lshr i32 %13376, 31
  %13396 = xor i32 %13393, %13395
  %13397 = add nuw nsw i32 %13396, %13395
  %13398 = icmp eq i32 %13397, 2
  %13399 = zext i1 %13398 to i8
  store i8 %13399, i8* %45, align 1
  %13400 = add i64 %13328, -24
  %13401 = add i64 %13357, 27
  store i64 %13401, i64* %3, align 8
  %13402 = inttoptr i64 %13400 to i32*
  %13403 = load i32, i32* %13402, align 4
  %13404 = add i32 %13403, -16
  %13405 = icmp eq i32 %13404, 0
  %13406 = zext i1 %13405 to i8
  %13407 = lshr i32 %13404, 31
  %13408 = add i32 %13403, -17
  %13409 = zext i32 %13408 to i64
  store i64 %13409, i64* %RSI.i5212, align 8
  store i8 %13406, i8* %20, align 1
  %13410 = and i32 %13408, 255
  %13411 = tail call i32 @llvm.ctpop.i32(i32 %13410)
  %13412 = trunc i32 %13411 to i8
  %13413 = and i8 %13412, 1
  %13414 = xor i8 %13413, 1
  store i8 %13414, i8* %27, align 1
  %13415 = xor i32 %13408, %13404
  %13416 = lshr i32 %13415, 4
  %13417 = trunc i32 %13416 to i8
  %13418 = and i8 %13417, 1
  store i8 %13418, i8* %33, align 1
  %13419 = icmp eq i32 %13408, 0
  %13420 = zext i1 %13419 to i8
  store i8 %13420, i8* %36, align 1
  %13421 = lshr i32 %13408, 31
  %13422 = trunc i32 %13421 to i8
  store i8 %13422, i8* %39, align 1
  %13423 = xor i32 %13421, %13407
  %13424 = add nuw nsw i32 %13423, %13407
  %13425 = icmp eq i32 %13424, 2
  %13426 = zext i1 %13425 to i8
  store i8 %13426, i8* %45, align 1
  %13427 = load i64, i64* %RBP.i, align 8
  %13428 = add i64 %13427, -80
  %13429 = add i64 %13357, 37
  store i64 %13429, i64* %3, align 8
  %13430 = inttoptr i64 %13428 to i32*
  %13431 = load i32, i32* %13430, align 4
  %13432 = zext i32 %13431 to i64
  store i64 %13432, i64* %600, align 8
  %13433 = add i64 %13427, -76
  %13434 = add i64 %13357, 41
  store i64 %13434, i64* %3, align 8
  %13435 = inttoptr i64 %13433 to i32*
  %13436 = load i32, i32* %13435, align 4
  %13437 = zext i32 %13436 to i64
  store i64 %13437, i64* %602, align 8
  %13438 = add i64 %13427, -1084
  %13439 = add i64 %13357, 47
  store i64 %13439, i64* %3, align 8
  %13440 = inttoptr i64 %13438 to i32*
  store i32 %13408, i32* %13440, align 4
  %13441 = load i32, i32* %EDX.i5198, align 4
  %13442 = zext i32 %13441 to i64
  %13443 = load i64, i64* %3, align 8
  store i64 %13442, i64* %RSI.i5212, align 8
  %13444 = load i64, i64* %RBP.i, align 8
  %13445 = add i64 %13444, -1084
  %13446 = add i64 %13443, 8
  store i64 %13446, i64* %3, align 8
  %13447 = inttoptr i64 %13445 to i32*
  %13448 = load i32, i32* %13447, align 4
  %13449 = zext i32 %13448 to i64
  store i64 %13449, i64* %RDX.i5152, align 8
  %13450 = add i64 %13444, -1088
  %13451 = load i32, i32* %ECX.i3256, align 4
  %13452 = add i64 %13443, 14
  store i64 %13452, i64* %3, align 8
  %13453 = inttoptr i64 %13450 to i32*
  store i32 %13451, i32* %13453, align 4
  %13454 = load i32, i32* %R8D.i4817, align 4
  %13455 = zext i32 %13454 to i64
  %13456 = load i64, i64* %3, align 8
  store i64 %13455, i64* %RCX.i3128, align 8
  %13457 = load i32, i32* %R9D.i4678, align 4
  %13458 = zext i32 %13457 to i64
  store i64 %13458, i64* %600, align 8
  %13459 = add i64 %13456, 453565
  %13460 = add i64 %13456, 11
  %13461 = load i64, i64* %6, align 8
  %13462 = add i64 %13461, -8
  %13463 = inttoptr i64 %13462 to i64*
  store i64 %13460, i64* %13463, align 8
  store i64 %13462, i64* %6, align 8
  store i64 %13459, i64* %3, align 8
  %call2_42fd59 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %13459, %struct.Memory* %MEMORY.80)
  %13464 = load i16, i16* %AX.i3315, align 2
  %13465 = zext i16 %13464 to i64
  %13466 = load i64, i64* %3, align 8
  store i64 %13465, i64* %RCX.i3128, align 8
  %13467 = load i64, i64* %RBP.i, align 8
  %13468 = add i64 %13467, -56
  %13469 = add i64 %13466, 7
  store i64 %13469, i64* %3, align 8
  %13470 = inttoptr i64 %13468 to i64*
  %13471 = load i64, i64* %13470, align 8
  store i64 %13471, i64* %RDI.i605, align 8
  %13472 = add i64 %13467, -40
  %13473 = add i64 %13466, 10
  store i64 %13473, i64* %3, align 8
  %13474 = inttoptr i64 %13472 to i32*
  %13475 = load i32, i32* %13474, align 4
  %13476 = add i32 %13475, 2
  %13477 = zext i32 %13476 to i64
  store i64 %13477, i64* %RDX.i5152, align 8
  %13478 = icmp ugt i32 %13475, -3
  %13479 = zext i1 %13478 to i8
  store i8 %13479, i8* %20, align 1
  %13480 = and i32 %13476, 255
  %13481 = tail call i32 @llvm.ctpop.i32(i32 %13480)
  %13482 = trunc i32 %13481 to i8
  %13483 = and i8 %13482, 1
  %13484 = xor i8 %13483, 1
  store i8 %13484, i8* %27, align 1
  %13485 = xor i32 %13476, %13475
  %13486 = lshr i32 %13485, 4
  %13487 = trunc i32 %13486 to i8
  %13488 = and i8 %13487, 1
  store i8 %13488, i8* %33, align 1
  %13489 = icmp eq i32 %13476, 0
  %13490 = zext i1 %13489 to i8
  store i8 %13490, i8* %36, align 1
  %13491 = lshr i32 %13476, 31
  %13492 = trunc i32 %13491 to i8
  store i8 %13492, i8* %39, align 1
  %13493 = lshr i32 %13475, 31
  %13494 = xor i32 %13491, %13493
  %13495 = add nuw nsw i32 %13494, %13491
  %13496 = icmp eq i32 %13495, 2
  %13497 = zext i1 %13496 to i8
  store i8 %13497, i8* %45, align 1
  %13498 = add i64 %13467, -28
  %13499 = add i64 %13466, 16
  store i64 %13499, i64* %3, align 8
  %13500 = inttoptr i64 %13498 to i32*
  %13501 = load i32, i32* %13500, align 4
  %13502 = add i32 %13501, 2
  %13503 = zext i32 %13502 to i64
  store i64 %13503, i64* %RSI.i5212, align 8
  %13504 = lshr i32 %13502, 31
  %13505 = sub i32 %13476, %13502
  %13506 = icmp ult i32 %13476, %13502
  %13507 = zext i1 %13506 to i8
  store i8 %13507, i8* %20, align 1
  %13508 = and i32 %13505, 255
  %13509 = tail call i32 @llvm.ctpop.i32(i32 %13508)
  %13510 = trunc i32 %13509 to i8
  %13511 = and i8 %13510, 1
  %13512 = xor i8 %13511, 1
  store i8 %13512, i8* %27, align 1
  %13513 = xor i32 %13502, %13476
  %13514 = xor i32 %13513, %13505
  %13515 = lshr i32 %13514, 4
  %13516 = trunc i32 %13515 to i8
  %13517 = and i8 %13516, 1
  store i8 %13517, i8* %33, align 1
  %13518 = icmp eq i32 %13505, 0
  %13519 = zext i1 %13518 to i8
  store i8 %13519, i8* %36, align 1
  %13520 = lshr i32 %13505, 31
  %13521 = trunc i32 %13520 to i8
  store i8 %13521, i8* %39, align 1
  %13522 = xor i32 %13504, %13491
  %13523 = xor i32 %13520, %13491
  %13524 = add nuw nsw i32 %13523, %13522
  %13525 = icmp eq i32 %13524, 2
  %13526 = zext i1 %13525 to i8
  store i8 %13526, i8* %45, align 1
  %13527 = load i64, i64* %RBP.i, align 8
  %13528 = add i64 %13527, -1092
  %13529 = load i32, i32* %ECX.i3256, align 4
  %13530 = add i64 %13466, 27
  store i64 %13530, i64* %3, align 8
  %13531 = inttoptr i64 %13528 to i32*
  store i32 %13529, i32* %13531, align 4
  %13532 = load i64, i64* %RBP.i, align 8
  %13533 = add i64 %13532, -1104
  %13534 = load i64, i64* %RDI.i605, align 8
  %13535 = load i64, i64* %3, align 8
  %13536 = add i64 %13535, 7
  store i64 %13536, i64* %3, align 8
  %13537 = inttoptr i64 %13533 to i64*
  store i64 %13534, i64* %13537, align 8
  %13538 = load i64, i64* %3, align 8
  %13539 = load i8, i8* %39, align 1
  %13540 = icmp ne i8 %13539, 0
  %13541 = load i8, i8* %45, align 1
  %13542 = icmp ne i8 %13541, 0
  %13543 = xor i1 %13540, %13542
  %.v381 = select i1 %13543, i64 6, i64 23
  %13544 = add i64 %13538, %.v381
  store i64 %13544, i64* %3, align 8
  %13545 = load i64, i64* %RBP.i, align 8
  br i1 %13543, label %block_42fd86, label %block_.L_42fd97

block_42fd86:                                     ; preds = %block_.L_42fd16
  %13546 = add i64 %13545, -40
  %13547 = add i64 %13544, 3
  store i64 %13547, i64* %3, align 8
  %13548 = inttoptr i64 %13546 to i32*
  %13549 = load i32, i32* %13548, align 4
  %13550 = add i32 %13549, 2
  %13551 = zext i32 %13550 to i64
  store i64 %13551, i64* %RAX.i1585, align 8
  %13552 = icmp ugt i32 %13549, -3
  %13553 = zext i1 %13552 to i8
  store i8 %13553, i8* %20, align 1
  %13554 = and i32 %13550, 255
  %13555 = tail call i32 @llvm.ctpop.i32(i32 %13554)
  %13556 = trunc i32 %13555 to i8
  %13557 = and i8 %13556, 1
  %13558 = xor i8 %13557, 1
  store i8 %13558, i8* %27, align 1
  %13559 = xor i32 %13550, %13549
  %13560 = lshr i32 %13559, 4
  %13561 = trunc i32 %13560 to i8
  %13562 = and i8 %13561, 1
  store i8 %13562, i8* %33, align 1
  %13563 = icmp eq i32 %13550, 0
  %13564 = zext i1 %13563 to i8
  store i8 %13564, i8* %36, align 1
  %13565 = lshr i32 %13550, 31
  %13566 = trunc i32 %13565 to i8
  store i8 %13566, i8* %39, align 1
  %13567 = lshr i32 %13549, 31
  %13568 = xor i32 %13565, %13567
  %13569 = add nuw nsw i32 %13568, %13565
  %13570 = icmp eq i32 %13569, 2
  %13571 = zext i1 %13570 to i8
  store i8 %13571, i8* %45, align 1
  %13572 = add i64 %13545, -1108
  %13573 = add i64 %13544, 12
  store i64 %13573, i64* %3, align 8
  %13574 = inttoptr i64 %13572 to i32*
  store i32 %13550, i32* %13574, align 4
  %13575 = load i64, i64* %3, align 8
  %13576 = add i64 %13575, 17
  store i64 %13576, i64* %3, align 8
  br label %block_.L_42fda3

block_.L_42fd97:                                  ; preds = %block_.L_42fd16
  %13577 = add i64 %13545, -28
  %13578 = add i64 %13544, 3
  store i64 %13578, i64* %3, align 8
  %13579 = inttoptr i64 %13577 to i32*
  %13580 = load i32, i32* %13579, align 4
  %13581 = add i32 %13580, 2
  %13582 = zext i32 %13581 to i64
  store i64 %13582, i64* %RAX.i1585, align 8
  %13583 = icmp ugt i32 %13580, -3
  %13584 = zext i1 %13583 to i8
  store i8 %13584, i8* %20, align 1
  %13585 = and i32 %13581, 255
  %13586 = tail call i32 @llvm.ctpop.i32(i32 %13585)
  %13587 = trunc i32 %13586 to i8
  %13588 = and i8 %13587, 1
  %13589 = xor i8 %13588, 1
  store i8 %13589, i8* %27, align 1
  %13590 = xor i32 %13581, %13580
  %13591 = lshr i32 %13590, 4
  %13592 = trunc i32 %13591 to i8
  %13593 = and i8 %13592, 1
  store i8 %13593, i8* %33, align 1
  %13594 = icmp eq i32 %13581, 0
  %13595 = zext i1 %13594 to i8
  store i8 %13595, i8* %36, align 1
  %13596 = lshr i32 %13581, 31
  %13597 = trunc i32 %13596 to i8
  store i8 %13597, i8* %39, align 1
  %13598 = lshr i32 %13580, 31
  %13599 = xor i32 %13596, %13598
  %13600 = add nuw nsw i32 %13599, %13596
  %13601 = icmp eq i32 %13600, 2
  %13602 = zext i1 %13601 to i8
  store i8 %13602, i8* %45, align 1
  %13603 = add i64 %13545, -1108
  %13604 = add i64 %13544, 12
  store i64 %13604, i64* %3, align 8
  %13605 = inttoptr i64 %13603 to i32*
  store i32 %13581, i32* %13605, align 4
  %.pre211 = load i64, i64* %3, align 8
  br label %block_.L_42fda3

block_.L_42fda3:                                  ; preds = %block_.L_42fd97, %block_42fd86
  %13606 = phi i64 [ %.pre211, %block_.L_42fd97 ], [ %13576, %block_42fd86 ]
  %13607 = load i64, i64* %RBP.i, align 8
  %13608 = add i64 %13607, -1108
  %13609 = add i64 %13606, 6
  store i64 %13609, i64* %3, align 8
  %13610 = inttoptr i64 %13608 to i32*
  %13611 = load i32, i32* %13610, align 4
  %13612 = add i32 %13611, -16
  %13613 = zext i32 %13612 to i64
  store i64 %13613, i64* %RAX.i1585, align 8
  %13614 = icmp ult i32 %13611, 16
  %13615 = zext i1 %13614 to i8
  store i8 %13615, i8* %20, align 1
  %13616 = and i32 %13612, 255
  %13617 = tail call i32 @llvm.ctpop.i32(i32 %13616)
  %13618 = trunc i32 %13617 to i8
  %13619 = and i8 %13618, 1
  %13620 = xor i8 %13619, 1
  store i8 %13620, i8* %27, align 1
  %13621 = xor i32 %13611, 16
  %13622 = xor i32 %13621, %13612
  %13623 = lshr i32 %13622, 4
  %13624 = trunc i32 %13623 to i8
  %13625 = and i8 %13624, 1
  store i8 %13625, i8* %33, align 1
  %13626 = icmp eq i32 %13612, 0
  %13627 = zext i1 %13626 to i8
  store i8 %13627, i8* %36, align 1
  %13628 = lshr i32 %13612, 31
  %13629 = trunc i32 %13628 to i8
  store i8 %13629, i8* %39, align 1
  %13630 = lshr i32 %13611, 31
  %13631 = xor i32 %13628, %13630
  %13632 = add nuw nsw i32 %13631, %13630
  %13633 = icmp eq i32 %13632, 2
  %13634 = zext i1 %13633 to i8
  store i8 %13634, i8* %45, align 1
  %13635 = add i64 %13607, -36
  %13636 = add i64 %13606, 12
  store i64 %13636, i64* %3, align 8
  %13637 = inttoptr i64 %13635 to i32*
  %13638 = load i32, i32* %13637, align 4
  %13639 = add i32 %13638, 2
  %13640 = zext i32 %13639 to i64
  store i64 %13640, i64* %RCX.i3128, align 8
  %13641 = icmp ugt i32 %13638, -3
  %13642 = zext i1 %13641 to i8
  store i8 %13642, i8* %20, align 1
  %13643 = and i32 %13639, 255
  %13644 = tail call i32 @llvm.ctpop.i32(i32 %13643)
  %13645 = trunc i32 %13644 to i8
  %13646 = and i8 %13645, 1
  %13647 = xor i8 %13646, 1
  store i8 %13647, i8* %27, align 1
  %13648 = xor i32 %13639, %13638
  %13649 = lshr i32 %13648, 4
  %13650 = trunc i32 %13649 to i8
  %13651 = and i8 %13650, 1
  store i8 %13651, i8* %33, align 1
  %13652 = icmp eq i32 %13639, 0
  %13653 = zext i1 %13652 to i8
  store i8 %13653, i8* %36, align 1
  %13654 = lshr i32 %13639, 31
  %13655 = trunc i32 %13654 to i8
  store i8 %13655, i8* %39, align 1
  %13656 = lshr i32 %13638, 31
  %13657 = xor i32 %13654, %13656
  %13658 = add nuw nsw i32 %13657, %13654
  %13659 = icmp eq i32 %13658, 2
  %13660 = zext i1 %13659 to i8
  store i8 %13660, i8* %45, align 1
  %13661 = add i64 %13607, -24
  %13662 = add i64 %13606, 18
  store i64 %13662, i64* %3, align 8
  %13663 = inttoptr i64 %13661 to i32*
  %13664 = load i32, i32* %13663, align 4
  %13665 = add i32 %13664, 1
  %13666 = zext i32 %13665 to i64
  store i64 %13666, i64* %RDX.i5152, align 8
  %13667 = lshr i32 %13665, 31
  %13668 = sub i32 %13639, %13665
  %13669 = icmp ult i32 %13639, %13665
  %13670 = zext i1 %13669 to i8
  store i8 %13670, i8* %20, align 1
  %13671 = and i32 %13668, 255
  %13672 = tail call i32 @llvm.ctpop.i32(i32 %13671)
  %13673 = trunc i32 %13672 to i8
  %13674 = and i8 %13673, 1
  %13675 = xor i8 %13674, 1
  store i8 %13675, i8* %27, align 1
  %13676 = xor i32 %13665, %13639
  %13677 = xor i32 %13676, %13668
  %13678 = lshr i32 %13677, 4
  %13679 = trunc i32 %13678 to i8
  %13680 = and i8 %13679, 1
  store i8 %13680, i8* %33, align 1
  %13681 = icmp eq i32 %13668, 0
  %13682 = zext i1 %13681 to i8
  store i8 %13682, i8* %36, align 1
  %13683 = lshr i32 %13668, 31
  %13684 = trunc i32 %13683 to i8
  store i8 %13684, i8* %39, align 1
  %13685 = xor i32 %13667, %13654
  %13686 = xor i32 %13683, %13654
  %13687 = add nuw nsw i32 %13686, %13685
  %13688 = icmp eq i32 %13687, 2
  %13689 = zext i1 %13688 to i8
  store i8 %13689, i8* %45, align 1
  %13690 = load i64, i64* %RBP.i, align 8
  %13691 = add i64 %13690, -1112
  %13692 = load i32, i32* %EAX.i1609, align 4
  %13693 = add i64 %13606, 29
  store i64 %13693, i64* %3, align 8
  %13694 = inttoptr i64 %13691 to i32*
  store i32 %13692, i32* %13694, align 4
  %13695 = load i64, i64* %3, align 8
  %13696 = load i8, i8* %39, align 1
  %13697 = icmp ne i8 %13696, 0
  %13698 = load i8, i8* %45, align 1
  %13699 = icmp ne i8 %13698, 0
  %13700 = xor i1 %13697, %13699
  %.v382 = select i1 %13700, i64 6, i64 23
  %13701 = add i64 %13695, %.v382
  store i64 %13701, i64* %3, align 8
  %13702 = load i64, i64* %RBP.i, align 8
  br i1 %13700, label %block_42fdc6, label %block_.L_42fdd7

block_42fdc6:                                     ; preds = %block_.L_42fda3
  %13703 = add i64 %13702, -36
  %13704 = add i64 %13701, 3
  store i64 %13704, i64* %3, align 8
  %13705 = inttoptr i64 %13703 to i32*
  %13706 = load i32, i32* %13705, align 4
  %13707 = add i32 %13706, 2
  %13708 = zext i32 %13707 to i64
  store i64 %13708, i64* %RAX.i1585, align 8
  %13709 = icmp ugt i32 %13706, -3
  %13710 = zext i1 %13709 to i8
  store i8 %13710, i8* %20, align 1
  %13711 = and i32 %13707, 255
  %13712 = tail call i32 @llvm.ctpop.i32(i32 %13711)
  %13713 = trunc i32 %13712 to i8
  %13714 = and i8 %13713, 1
  %13715 = xor i8 %13714, 1
  store i8 %13715, i8* %27, align 1
  %13716 = xor i32 %13707, %13706
  %13717 = lshr i32 %13716, 4
  %13718 = trunc i32 %13717 to i8
  %13719 = and i8 %13718, 1
  store i8 %13719, i8* %33, align 1
  %13720 = icmp eq i32 %13707, 0
  %13721 = zext i1 %13720 to i8
  store i8 %13721, i8* %36, align 1
  %13722 = lshr i32 %13707, 31
  %13723 = trunc i32 %13722 to i8
  store i8 %13723, i8* %39, align 1
  %13724 = lshr i32 %13706, 31
  %13725 = xor i32 %13722, %13724
  %13726 = add nuw nsw i32 %13725, %13722
  %13727 = icmp eq i32 %13726, 2
  %13728 = zext i1 %13727 to i8
  store i8 %13728, i8* %45, align 1
  %13729 = add i64 %13702, -1116
  %13730 = add i64 %13701, 12
  store i64 %13730, i64* %3, align 8
  %13731 = inttoptr i64 %13729 to i32*
  store i32 %13707, i32* %13731, align 4
  %13732 = load i64, i64* %3, align 8
  %13733 = add i64 %13732, 17
  store i64 %13733, i64* %3, align 8
  br label %block_.L_42fde3

block_.L_42fdd7:                                  ; preds = %block_.L_42fda3
  %13734 = add i64 %13702, -24
  %13735 = add i64 %13701, 3
  store i64 %13735, i64* %3, align 8
  %13736 = inttoptr i64 %13734 to i32*
  %13737 = load i32, i32* %13736, align 4
  %13738 = add i32 %13737, 1
  %13739 = zext i32 %13738 to i64
  store i64 %13739, i64* %RAX.i1585, align 8
  %13740 = icmp eq i32 %13737, -1
  %13741 = icmp eq i32 %13738, 0
  %13742 = or i1 %13740, %13741
  %13743 = zext i1 %13742 to i8
  store i8 %13743, i8* %20, align 1
  %13744 = and i32 %13738, 255
  %13745 = tail call i32 @llvm.ctpop.i32(i32 %13744)
  %13746 = trunc i32 %13745 to i8
  %13747 = and i8 %13746, 1
  %13748 = xor i8 %13747, 1
  store i8 %13748, i8* %27, align 1
  %13749 = xor i32 %13738, %13737
  %13750 = lshr i32 %13749, 4
  %13751 = trunc i32 %13750 to i8
  %13752 = and i8 %13751, 1
  store i8 %13752, i8* %33, align 1
  %13753 = zext i1 %13741 to i8
  store i8 %13753, i8* %36, align 1
  %13754 = lshr i32 %13738, 31
  %13755 = trunc i32 %13754 to i8
  store i8 %13755, i8* %39, align 1
  %13756 = lshr i32 %13737, 31
  %13757 = xor i32 %13754, %13756
  %13758 = add nuw nsw i32 %13757, %13754
  %13759 = icmp eq i32 %13758, 2
  %13760 = zext i1 %13759 to i8
  store i8 %13760, i8* %45, align 1
  %13761 = add i64 %13702, -1116
  %13762 = add i64 %13701, 12
  store i64 %13762, i64* %3, align 8
  %13763 = inttoptr i64 %13761 to i32*
  store i32 %13738, i32* %13763, align 4
  %.pre212 = load i64, i64* %3, align 8
  br label %block_.L_42fde3

block_.L_42fde3:                                  ; preds = %block_.L_42fdd7, %block_42fdc6
  %13764 = phi i64 [ %.pre212, %block_.L_42fdd7 ], [ %13733, %block_42fdc6 ]
  %13765 = load i64, i64* %RBP.i, align 8
  %13766 = add i64 %13765, -1116
  %13767 = add i64 %13764, 6
  store i64 %13767, i64* %3, align 8
  %13768 = inttoptr i64 %13766 to i32*
  %13769 = load i32, i32* %13768, align 4
  %13770 = add i32 %13769, -16
  %13771 = zext i32 %13770 to i64
  store i64 %13771, i64* %RAX.i1585, align 8
  %13772 = icmp ult i32 %13769, 16
  %13773 = zext i1 %13772 to i8
  store i8 %13773, i8* %20, align 1
  %13774 = and i32 %13770, 255
  %13775 = tail call i32 @llvm.ctpop.i32(i32 %13774)
  %13776 = trunc i32 %13775 to i8
  %13777 = and i8 %13776, 1
  %13778 = xor i8 %13777, 1
  store i8 %13778, i8* %27, align 1
  %13779 = xor i32 %13769, 16
  %13780 = xor i32 %13779, %13770
  %13781 = lshr i32 %13780, 4
  %13782 = trunc i32 %13781 to i8
  %13783 = and i8 %13782, 1
  store i8 %13783, i8* %33, align 1
  %13784 = icmp eq i32 %13770, 0
  %13785 = zext i1 %13784 to i8
  store i8 %13785, i8* %36, align 1
  %13786 = lshr i32 %13770, 31
  %13787 = trunc i32 %13786 to i8
  store i8 %13787, i8* %39, align 1
  %13788 = lshr i32 %13769, 31
  %13789 = xor i32 %13786, %13788
  %13790 = add nuw nsw i32 %13789, %13788
  %13791 = icmp eq i32 %13790, 2
  %13792 = zext i1 %13791 to i8
  store i8 %13792, i8* %45, align 1
  %13793 = add i64 %13765, -80
  %13794 = add i64 %13764, 12
  store i64 %13794, i64* %3, align 8
  %13795 = inttoptr i64 %13793 to i32*
  %13796 = load i32, i32* %13795, align 4
  %13797 = zext i32 %13796 to i64
  store i64 %13797, i64* %RCX.i3128, align 8
  %13798 = add i64 %13765, -76
  %13799 = add i64 %13764, 16
  store i64 %13799, i64* %3, align 8
  %13800 = inttoptr i64 %13798 to i32*
  %13801 = load i32, i32* %13800, align 4
  %13802 = zext i32 %13801 to i64
  store i64 %13802, i64* %600, align 8
  %13803 = add i64 %13765, -1104
  %13804 = add i64 %13764, 23
  store i64 %13804, i64* %3, align 8
  %13805 = inttoptr i64 %13803 to i64*
  %13806 = load i64, i64* %13805, align 8
  store i64 %13806, i64* %RDI.i605, align 8
  %13807 = add i64 %13765, -1112
  %13808 = add i64 %13764, 29
  store i64 %13808, i64* %3, align 8
  %13809 = inttoptr i64 %13807 to i32*
  %13810 = load i32, i32* %13809, align 4
  %13811 = zext i32 %13810 to i64
  store i64 %13811, i64* %RSI.i5212, align 8
  store i64 %13771, i64* %RDX.i5152, align 8
  %13812 = add i64 %13764, 453421
  %13813 = add i64 %13764, 36
  %13814 = load i64, i64* %6, align 8
  %13815 = add i64 %13814, -8
  %13816 = inttoptr i64 %13815 to i64*
  store i64 %13813, i64* %13816, align 8
  store i64 %13815, i64* %6, align 8
  store i64 %13812, i64* %3, align 8
  %call2_42fe02 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %13812, %struct.Memory* %call2_42fd59)
  %13817 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %13818 = load i16, i16* %AX.i3315, align 2
  %13819 = zext i16 %13818 to i64
  store i64 %13819, i64* %RDX.i5152, align 8
  %13820 = load i64, i64* %RBP.i, align 8
  %13821 = add i64 %13820, -1092
  %13822 = add i64 %13817, 14
  store i64 %13822, i64* %3, align 8
  %13823 = inttoptr i64 %13821 to i32*
  %13824 = load i32, i32* %13823, align 4
  %13825 = zext i16 %13818 to i32
  %13826 = add i32 %13825, %13824
  %13827 = lshr i32 %13826, 31
  %13828 = add i32 %13826, 1
  %13829 = zext i32 %13828 to i64
  store i64 %13829, i64* %RSI.i5212, align 8
  %13830 = icmp eq i32 %13826, -1
  %13831 = icmp eq i32 %13828, 0
  %13832 = or i1 %13830, %13831
  %13833 = zext i1 %13832 to i8
  store i8 %13833, i8* %20, align 1
  %13834 = and i32 %13828, 255
  %13835 = tail call i32 @llvm.ctpop.i32(i32 %13834)
  %13836 = trunc i32 %13835 to i8
  %13837 = and i8 %13836, 1
  %13838 = xor i8 %13837, 1
  store i8 %13838, i8* %27, align 1
  %13839 = xor i32 %13828, %13826
  %13840 = lshr i32 %13839, 4
  %13841 = trunc i32 %13840 to i8
  %13842 = and i8 %13841, 1
  store i8 %13842, i8* %33, align 1
  %13843 = zext i1 %13831 to i8
  store i8 %13843, i8* %36, align 1
  %13844 = lshr i32 %13828, 31
  %13845 = trunc i32 %13844 to i8
  store i8 %13845, i8* %39, align 1
  %13846 = xor i32 %13844, %13827
  %13847 = add nuw nsw i32 %13846, %13844
  %13848 = icmp eq i32 %13847, 2
  %13849 = zext i1 %13848 to i8
  store i8 %13849, i8* %45, align 1
  store i64 %13829, i64* %RAX.i1585, align 8
  %13850 = sext i32 %13828 to i64
  %13851 = lshr i64 %13850, 32
  store i64 %13851, i64* %3718, align 8
  %13852 = add i64 %13817, 24
  store i64 %13852, i64* %3, align 8
  %13853 = shl nuw i64 %13851, 32
  %13854 = or i64 %13853, %13829
  %13855 = sdiv i64 %13854, 2
  %13856 = shl i64 %13855, 32
  %13857 = ashr exact i64 %13856, 32
  %13858 = icmp eq i64 %13855, %13857
  br i1 %13858, label %13861, label %13859

; <label>:13859:                                  ; preds = %block_.L_42fde3
  %13860 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %13852, %struct.Memory* %call2_42fe02)
  %.pre213 = load i64, i64* %RBP.i, align 8
  %.pre214 = load i64, i64* %3, align 8
  %.pre215 = load i32, i32* %EAX.i1609, align 4
  br label %routine_idivl__ecx.exit239

; <label>:13861:                                  ; preds = %block_.L_42fde3
  %13862 = srem i64 %13854, 2
  %13863 = and i64 %13855, 4294967295
  store i64 %13863, i64* %RAX.i1585, align 8
  %13864 = and i64 %13862, 4294967295
  store i64 %13864, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %13865 = trunc i64 %13855 to i32
  br label %routine_idivl__ecx.exit239

routine_idivl__ecx.exit239:                       ; preds = %13861, %13859
  %13866 = phi i32 [ %.pre215, %13859 ], [ %13865, %13861 ]
  %13867 = phi i64 [ %.pre214, %13859 ], [ %13852, %13861 ]
  %13868 = phi i64 [ %.pre213, %13859 ], [ %13820, %13861 ]
  %13869 = phi %struct.Memory* [ %13860, %13859 ], [ %call2_42fe02, %13861 ]
  %13870 = add i64 %13868, -1088
  %13871 = add i64 %13867, 6
  store i64 %13871, i64* %3, align 8
  %13872 = inttoptr i64 %13870 to i32*
  %13873 = load i32, i32* %13872, align 4
  %13874 = zext i32 %13873 to i64
  store i64 %13874, i64* %RCX.i3128, align 8
  %13875 = sub i32 %13873, %13866
  %13876 = icmp ult i32 %13873, %13866
  %13877 = zext i1 %13876 to i8
  store i8 %13877, i8* %20, align 1
  %13878 = and i32 %13875, 255
  %13879 = tail call i32 @llvm.ctpop.i32(i32 %13878)
  %13880 = trunc i32 %13879 to i8
  %13881 = and i8 %13880, 1
  %13882 = xor i8 %13881, 1
  store i8 %13882, i8* %27, align 1
  %13883 = xor i32 %13866, %13873
  %13884 = xor i32 %13883, %13875
  %13885 = lshr i32 %13884, 4
  %13886 = trunc i32 %13885 to i8
  %13887 = and i8 %13886, 1
  store i8 %13887, i8* %33, align 1
  %13888 = icmp eq i32 %13875, 0
  %13889 = zext i1 %13888 to i8
  store i8 %13889, i8* %36, align 1
  %13890 = lshr i32 %13875, 31
  %13891 = trunc i32 %13890 to i8
  store i8 %13891, i8* %39, align 1
  %13892 = lshr i32 %13873, 31
  %13893 = lshr i32 %13866, 31
  %13894 = xor i32 %13893, %13892
  %13895 = xor i32 %13890, %13892
  %13896 = add nuw nsw i32 %13895, %13894
  %13897 = icmp eq i32 %13896, 2
  %13898 = zext i1 %13897 to i8
  store i8 %13898, i8* %45, align 1
  %13899 = icmp ne i8 %13891, 0
  %13900 = xor i1 %13899, %13897
  %.v331 = select i1 %13900, i64 14, i64 39
  %13901 = add i64 %13867, %.v331
  store i64 %13901, i64* %3, align 8
  br i1 %13900, label %block_42fe2d, label %block_.L_42fe46

block_42fe2d:                                     ; preds = %routine_idivl__ecx.exit239
  %13902 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %13902, i64* %RAX.i1585, align 8
  %13903 = add i64 %13902, 72684
  %13904 = add i64 %13901, 14
  store i64 %13904, i64* %3, align 8
  %13905 = inttoptr i64 %13903 to i32*
  %13906 = load i32, i32* %13905, align 4
  %13907 = zext i32 %13906 to i64
  store i64 %13907, i64* %RCX.i3128, align 8
  %13908 = add i64 %13868, -1120
  %13909 = add i64 %13901, 20
  store i64 %13909, i64* %3, align 8
  %13910 = inttoptr i64 %13908 to i32*
  store i32 %13906, i32* %13910, align 4
  %13911 = load i64, i64* %3, align 8
  %13912 = add i64 %13911, 251
  store i64 %13912, i64* %3, align 8
  br label %block_.L_42ff3c

block_.L_42fe46:                                  ; preds = %routine_idivl__ecx.exit239
  %13913 = add i64 %13868, -56
  %13914 = add i64 %13901, 4
  store i64 %13914, i64* %3, align 8
  %13915 = inttoptr i64 %13913 to i64*
  %13916 = load i64, i64* %13915, align 8
  store i64 %13916, i64* %RDI.i605, align 8
  %13917 = add i64 %13868, -28
  %13918 = add i64 %13901, 7
  store i64 %13918, i64* %3, align 8
  %13919 = inttoptr i64 %13917 to i32*
  %13920 = load i32, i32* %13919, align 4
  %13921 = add i32 %13920, -16
  %13922 = zext i32 %13921 to i64
  store i64 %13922, i64* %RAX.i1585, align 8
  %13923 = icmp ult i32 %13920, 16
  %13924 = zext i1 %13923 to i8
  store i8 %13924, i8* %20, align 1
  %13925 = and i32 %13921, 255
  %13926 = tail call i32 @llvm.ctpop.i32(i32 %13925)
  %13927 = trunc i32 %13926 to i8
  %13928 = and i8 %13927, 1
  %13929 = xor i8 %13928, 1
  store i8 %13929, i8* %27, align 1
  %13930 = xor i32 %13920, 16
  %13931 = xor i32 %13930, %13921
  %13932 = lshr i32 %13931, 4
  %13933 = trunc i32 %13932 to i8
  %13934 = and i8 %13933, 1
  store i8 %13934, i8* %33, align 1
  %13935 = icmp eq i32 %13921, 0
  %13936 = zext i1 %13935 to i8
  store i8 %13936, i8* %36, align 1
  %13937 = lshr i32 %13921, 31
  %13938 = trunc i32 %13937 to i8
  store i8 %13938, i8* %39, align 1
  %13939 = lshr i32 %13920, 31
  %13940 = xor i32 %13937, %13939
  %13941 = add nuw nsw i32 %13940, %13939
  %13942 = icmp eq i32 %13941, 2
  %13943 = zext i1 %13942 to i8
  store i8 %13943, i8* %45, align 1
  %13944 = add i64 %13868, -24
  %13945 = add i64 %13901, 13
  store i64 %13945, i64* %3, align 8
  %13946 = inttoptr i64 %13944 to i32*
  %13947 = load i32, i32* %13946, align 4
  %13948 = add i32 %13947, -16
  %13949 = icmp eq i32 %13948, 0
  %13950 = zext i1 %13949 to i8
  %13951 = lshr i32 %13948, 31
  %13952 = add i32 %13947, -17
  %13953 = zext i32 %13952 to i64
  store i64 %13953, i64* %RCX.i3128, align 8
  store i8 %13950, i8* %20, align 1
  %13954 = and i32 %13952, 255
  %13955 = tail call i32 @llvm.ctpop.i32(i32 %13954)
  %13956 = trunc i32 %13955 to i8
  %13957 = and i8 %13956, 1
  %13958 = xor i8 %13957, 1
  store i8 %13958, i8* %27, align 1
  %13959 = xor i32 %13952, %13948
  %13960 = lshr i32 %13959, 4
  %13961 = trunc i32 %13960 to i8
  %13962 = and i8 %13961, 1
  store i8 %13962, i8* %33, align 1
  %13963 = icmp eq i32 %13952, 0
  %13964 = zext i1 %13963 to i8
  store i8 %13964, i8* %36, align 1
  %13965 = lshr i32 %13952, 31
  %13966 = trunc i32 %13965 to i8
  store i8 %13966, i8* %39, align 1
  %13967 = xor i32 %13965, %13951
  %13968 = add nuw nsw i32 %13967, %13951
  %13969 = icmp eq i32 %13968, 2
  %13970 = zext i1 %13969 to i8
  store i8 %13970, i8* %45, align 1
  %13971 = load i64, i64* %RBP.i, align 8
  %13972 = add i64 %13971, -80
  %13973 = add i64 %13901, 22
  store i64 %13973, i64* %3, align 8
  %13974 = inttoptr i64 %13972 to i32*
  %13975 = load i32, i32* %13974, align 4
  %13976 = zext i32 %13975 to i64
  store i64 %13976, i64* %RDX.i5152, align 8
  %13977 = add i64 %13971, -76
  %13978 = add i64 %13901, 26
  store i64 %13978, i64* %3, align 8
  %13979 = inttoptr i64 %13977 to i32*
  %13980 = load i32, i32* %13979, align 4
  %13981 = zext i32 %13980 to i64
  store i64 %13981, i64* %600, align 8
  %13982 = load i32, i32* %EAX.i1609, align 4
  %13983 = zext i32 %13982 to i64
  store i64 %13983, i64* %RSI.i5212, align 8
  %13984 = add i64 %13971, -1124
  %13985 = add i64 %13901, 34
  store i64 %13985, i64* %3, align 8
  %13986 = inttoptr i64 %13984 to i32*
  store i32 %13975, i32* %13986, align 4
  %13987 = load i32, i32* %ECX.i3256, align 4
  %13988 = zext i32 %13987 to i64
  %13989 = load i64, i64* %3, align 8
  store i64 %13988, i64* %RDX.i5152, align 8
  %13990 = load i64, i64* %RBP.i, align 8
  %13991 = add i64 %13990, -1124
  %13992 = add i64 %13989, 8
  store i64 %13992, i64* %3, align 8
  %13993 = inttoptr i64 %13991 to i32*
  %13994 = load i32, i32* %13993, align 4
  %13995 = zext i32 %13994 to i64
  store i64 %13995, i64* %RCX.i3128, align 8
  %13996 = add i64 %13989, 453288
  %13997 = add i64 %13989, 13
  %13998 = load i64, i64* %6, align 8
  %13999 = add i64 %13998, -8
  %14000 = inttoptr i64 %13999 to i64*
  store i64 %13997, i64* %14000, align 8
  store i64 %13999, i64* %6, align 8
  store i64 %13996, i64* %3, align 8
  %call2_42fe70 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %13996, %struct.Memory* %13869)
  %14001 = load i16, i16* %AX.i3315, align 2
  %14002 = zext i16 %14001 to i64
  %14003 = load i64, i64* %3, align 8
  store i64 %14002, i64* %RCX.i3128, align 8
  %14004 = load i64, i64* %RBP.i, align 8
  %14005 = add i64 %14004, -56
  %14006 = add i64 %14003, 7
  store i64 %14006, i64* %3, align 8
  %14007 = inttoptr i64 %14005 to i64*
  %14008 = load i64, i64* %14007, align 8
  store i64 %14008, i64* %RDI.i605, align 8
  %14009 = add i64 %14004, -40
  %14010 = add i64 %14003, 10
  store i64 %14010, i64* %3, align 8
  %14011 = inttoptr i64 %14009 to i32*
  %14012 = load i32, i32* %14011, align 4
  %14013 = add i32 %14012, 2
  %14014 = zext i32 %14013 to i64
  store i64 %14014, i64* %RDX.i5152, align 8
  %14015 = icmp ugt i32 %14012, -3
  %14016 = zext i1 %14015 to i8
  store i8 %14016, i8* %20, align 1
  %14017 = and i32 %14013, 255
  %14018 = tail call i32 @llvm.ctpop.i32(i32 %14017)
  %14019 = trunc i32 %14018 to i8
  %14020 = and i8 %14019, 1
  %14021 = xor i8 %14020, 1
  store i8 %14021, i8* %27, align 1
  %14022 = xor i32 %14013, %14012
  %14023 = lshr i32 %14022, 4
  %14024 = trunc i32 %14023 to i8
  %14025 = and i8 %14024, 1
  store i8 %14025, i8* %33, align 1
  %14026 = icmp eq i32 %14013, 0
  %14027 = zext i1 %14026 to i8
  store i8 %14027, i8* %36, align 1
  %14028 = lshr i32 %14013, 31
  %14029 = trunc i32 %14028 to i8
  store i8 %14029, i8* %39, align 1
  %14030 = lshr i32 %14012, 31
  %14031 = xor i32 %14028, %14030
  %14032 = add nuw nsw i32 %14031, %14028
  %14033 = icmp eq i32 %14032, 2
  %14034 = zext i1 %14033 to i8
  store i8 %14034, i8* %45, align 1
  %14035 = add i64 %14004, -28
  %14036 = add i64 %14003, 16
  store i64 %14036, i64* %3, align 8
  %14037 = inttoptr i64 %14035 to i32*
  %14038 = load i32, i32* %14037, align 4
  %14039 = add i32 %14038, 2
  %14040 = zext i32 %14039 to i64
  store i64 %14040, i64* %RSI.i5212, align 8
  %14041 = lshr i32 %14039, 31
  %14042 = sub i32 %14013, %14039
  %14043 = icmp ult i32 %14013, %14039
  %14044 = zext i1 %14043 to i8
  store i8 %14044, i8* %20, align 1
  %14045 = and i32 %14042, 255
  %14046 = tail call i32 @llvm.ctpop.i32(i32 %14045)
  %14047 = trunc i32 %14046 to i8
  %14048 = and i8 %14047, 1
  %14049 = xor i8 %14048, 1
  store i8 %14049, i8* %27, align 1
  %14050 = xor i32 %14039, %14013
  %14051 = xor i32 %14050, %14042
  %14052 = lshr i32 %14051, 4
  %14053 = trunc i32 %14052 to i8
  %14054 = and i8 %14053, 1
  store i8 %14054, i8* %33, align 1
  %14055 = icmp eq i32 %14042, 0
  %14056 = zext i1 %14055 to i8
  store i8 %14056, i8* %36, align 1
  %14057 = lshr i32 %14042, 31
  %14058 = trunc i32 %14057 to i8
  store i8 %14058, i8* %39, align 1
  %14059 = xor i32 %14041, %14028
  %14060 = xor i32 %14057, %14028
  %14061 = add nuw nsw i32 %14060, %14059
  %14062 = icmp eq i32 %14061, 2
  %14063 = zext i1 %14062 to i8
  store i8 %14063, i8* %45, align 1
  %14064 = load i64, i64* %RBP.i, align 8
  %14065 = add i64 %14064, -1128
  %14066 = load i32, i32* %ECX.i3256, align 4
  %14067 = add i64 %14003, 27
  store i64 %14067, i64* %3, align 8
  %14068 = inttoptr i64 %14065 to i32*
  store i32 %14066, i32* %14068, align 4
  %14069 = load i64, i64* %RBP.i, align 8
  %14070 = add i64 %14069, -1136
  %14071 = load i64, i64* %RDI.i605, align 8
  %14072 = load i64, i64* %3, align 8
  %14073 = add i64 %14072, 7
  store i64 %14073, i64* %3, align 8
  %14074 = inttoptr i64 %14070 to i64*
  store i64 %14071, i64* %14074, align 8
  %14075 = load i64, i64* %3, align 8
  %14076 = load i8, i8* %39, align 1
  %14077 = icmp ne i8 %14076, 0
  %14078 = load i8, i8* %45, align 1
  %14079 = icmp ne i8 %14078, 0
  %14080 = xor i1 %14077, %14079
  %.v383 = select i1 %14080, i64 6, i64 23
  %14081 = add i64 %14075, %.v383
  store i64 %14081, i64* %3, align 8
  %14082 = load i64, i64* %RBP.i, align 8
  br i1 %14080, label %block_42fe9d, label %block_.L_42feae

block_42fe9d:                                     ; preds = %block_.L_42fe46
  %14083 = add i64 %14082, -40
  %14084 = add i64 %14081, 3
  store i64 %14084, i64* %3, align 8
  %14085 = inttoptr i64 %14083 to i32*
  %14086 = load i32, i32* %14085, align 4
  %14087 = add i32 %14086, 2
  %14088 = zext i32 %14087 to i64
  store i64 %14088, i64* %RAX.i1585, align 8
  %14089 = icmp ugt i32 %14086, -3
  %14090 = zext i1 %14089 to i8
  store i8 %14090, i8* %20, align 1
  %14091 = and i32 %14087, 255
  %14092 = tail call i32 @llvm.ctpop.i32(i32 %14091)
  %14093 = trunc i32 %14092 to i8
  %14094 = and i8 %14093, 1
  %14095 = xor i8 %14094, 1
  store i8 %14095, i8* %27, align 1
  %14096 = xor i32 %14087, %14086
  %14097 = lshr i32 %14096, 4
  %14098 = trunc i32 %14097 to i8
  %14099 = and i8 %14098, 1
  store i8 %14099, i8* %33, align 1
  %14100 = icmp eq i32 %14087, 0
  %14101 = zext i1 %14100 to i8
  store i8 %14101, i8* %36, align 1
  %14102 = lshr i32 %14087, 31
  %14103 = trunc i32 %14102 to i8
  store i8 %14103, i8* %39, align 1
  %14104 = lshr i32 %14086, 31
  %14105 = xor i32 %14102, %14104
  %14106 = add nuw nsw i32 %14105, %14102
  %14107 = icmp eq i32 %14106, 2
  %14108 = zext i1 %14107 to i8
  store i8 %14108, i8* %45, align 1
  %14109 = add i64 %14082, -1140
  %14110 = add i64 %14081, 12
  store i64 %14110, i64* %3, align 8
  %14111 = inttoptr i64 %14109 to i32*
  store i32 %14087, i32* %14111, align 4
  %14112 = load i64, i64* %3, align 8
  %14113 = add i64 %14112, 17
  store i64 %14113, i64* %3, align 8
  br label %block_.L_42feba

block_.L_42feae:                                  ; preds = %block_.L_42fe46
  %14114 = add i64 %14082, -28
  %14115 = add i64 %14081, 3
  store i64 %14115, i64* %3, align 8
  %14116 = inttoptr i64 %14114 to i32*
  %14117 = load i32, i32* %14116, align 4
  %14118 = add i32 %14117, 2
  %14119 = zext i32 %14118 to i64
  store i64 %14119, i64* %RAX.i1585, align 8
  %14120 = icmp ugt i32 %14117, -3
  %14121 = zext i1 %14120 to i8
  store i8 %14121, i8* %20, align 1
  %14122 = and i32 %14118, 255
  %14123 = tail call i32 @llvm.ctpop.i32(i32 %14122)
  %14124 = trunc i32 %14123 to i8
  %14125 = and i8 %14124, 1
  %14126 = xor i8 %14125, 1
  store i8 %14126, i8* %27, align 1
  %14127 = xor i32 %14118, %14117
  %14128 = lshr i32 %14127, 4
  %14129 = trunc i32 %14128 to i8
  %14130 = and i8 %14129, 1
  store i8 %14130, i8* %33, align 1
  %14131 = icmp eq i32 %14118, 0
  %14132 = zext i1 %14131 to i8
  store i8 %14132, i8* %36, align 1
  %14133 = lshr i32 %14118, 31
  %14134 = trunc i32 %14133 to i8
  store i8 %14134, i8* %39, align 1
  %14135 = lshr i32 %14117, 31
  %14136 = xor i32 %14133, %14135
  %14137 = add nuw nsw i32 %14136, %14133
  %14138 = icmp eq i32 %14137, 2
  %14139 = zext i1 %14138 to i8
  store i8 %14139, i8* %45, align 1
  %14140 = add i64 %14082, -1140
  %14141 = add i64 %14081, 12
  store i64 %14141, i64* %3, align 8
  %14142 = inttoptr i64 %14140 to i32*
  store i32 %14118, i32* %14142, align 4
  %.pre216 = load i64, i64* %3, align 8
  br label %block_.L_42feba

block_.L_42feba:                                  ; preds = %block_.L_42feae, %block_42fe9d
  %14143 = phi i64 [ %.pre216, %block_.L_42feae ], [ %14113, %block_42fe9d ]
  %14144 = load i64, i64* %RBP.i, align 8
  %14145 = add i64 %14144, -1140
  %14146 = add i64 %14143, 6
  store i64 %14146, i64* %3, align 8
  %14147 = inttoptr i64 %14145 to i32*
  %14148 = load i32, i32* %14147, align 4
  %14149 = add i32 %14148, -16
  %14150 = zext i32 %14149 to i64
  store i64 %14150, i64* %RAX.i1585, align 8
  %14151 = icmp ult i32 %14148, 16
  %14152 = zext i1 %14151 to i8
  store i8 %14152, i8* %20, align 1
  %14153 = and i32 %14149, 255
  %14154 = tail call i32 @llvm.ctpop.i32(i32 %14153)
  %14155 = trunc i32 %14154 to i8
  %14156 = and i8 %14155, 1
  %14157 = xor i8 %14156, 1
  store i8 %14157, i8* %27, align 1
  %14158 = xor i32 %14148, 16
  %14159 = xor i32 %14158, %14149
  %14160 = lshr i32 %14159, 4
  %14161 = trunc i32 %14160 to i8
  %14162 = and i8 %14161, 1
  store i8 %14162, i8* %33, align 1
  %14163 = icmp eq i32 %14149, 0
  %14164 = zext i1 %14163 to i8
  store i8 %14164, i8* %36, align 1
  %14165 = lshr i32 %14149, 31
  %14166 = trunc i32 %14165 to i8
  store i8 %14166, i8* %39, align 1
  %14167 = lshr i32 %14148, 31
  %14168 = xor i32 %14165, %14167
  %14169 = add nuw nsw i32 %14168, %14167
  %14170 = icmp eq i32 %14169, 2
  %14171 = zext i1 %14170 to i8
  store i8 %14171, i8* %45, align 1
  %14172 = add i64 %14144, -36
  %14173 = add i64 %14143, 12
  store i64 %14173, i64* %3, align 8
  %14174 = inttoptr i64 %14172 to i32*
  %14175 = load i32, i32* %14174, align 4
  %14176 = add i32 %14175, 2
  %14177 = zext i32 %14176 to i64
  store i64 %14177, i64* %RCX.i3128, align 8
  %14178 = icmp ugt i32 %14175, -3
  %14179 = zext i1 %14178 to i8
  store i8 %14179, i8* %20, align 1
  %14180 = and i32 %14176, 255
  %14181 = tail call i32 @llvm.ctpop.i32(i32 %14180)
  %14182 = trunc i32 %14181 to i8
  %14183 = and i8 %14182, 1
  %14184 = xor i8 %14183, 1
  store i8 %14184, i8* %27, align 1
  %14185 = xor i32 %14176, %14175
  %14186 = lshr i32 %14185, 4
  %14187 = trunc i32 %14186 to i8
  %14188 = and i8 %14187, 1
  store i8 %14188, i8* %33, align 1
  %14189 = icmp eq i32 %14176, 0
  %14190 = zext i1 %14189 to i8
  store i8 %14190, i8* %36, align 1
  %14191 = lshr i32 %14176, 31
  %14192 = trunc i32 %14191 to i8
  store i8 %14192, i8* %39, align 1
  %14193 = lshr i32 %14175, 31
  %14194 = xor i32 %14191, %14193
  %14195 = add nuw nsw i32 %14194, %14191
  %14196 = icmp eq i32 %14195, 2
  %14197 = zext i1 %14196 to i8
  store i8 %14197, i8* %45, align 1
  %14198 = add i64 %14144, -24
  %14199 = add i64 %14143, 18
  store i64 %14199, i64* %3, align 8
  %14200 = inttoptr i64 %14198 to i32*
  %14201 = load i32, i32* %14200, align 4
  %14202 = add i32 %14201, 1
  %14203 = zext i32 %14202 to i64
  store i64 %14203, i64* %RDX.i5152, align 8
  %14204 = lshr i32 %14202, 31
  %14205 = sub i32 %14176, %14202
  %14206 = icmp ult i32 %14176, %14202
  %14207 = zext i1 %14206 to i8
  store i8 %14207, i8* %20, align 1
  %14208 = and i32 %14205, 255
  %14209 = tail call i32 @llvm.ctpop.i32(i32 %14208)
  %14210 = trunc i32 %14209 to i8
  %14211 = and i8 %14210, 1
  %14212 = xor i8 %14211, 1
  store i8 %14212, i8* %27, align 1
  %14213 = xor i32 %14202, %14176
  %14214 = xor i32 %14213, %14205
  %14215 = lshr i32 %14214, 4
  %14216 = trunc i32 %14215 to i8
  %14217 = and i8 %14216, 1
  store i8 %14217, i8* %33, align 1
  %14218 = icmp eq i32 %14205, 0
  %14219 = zext i1 %14218 to i8
  store i8 %14219, i8* %36, align 1
  %14220 = lshr i32 %14205, 31
  %14221 = trunc i32 %14220 to i8
  store i8 %14221, i8* %39, align 1
  %14222 = xor i32 %14204, %14191
  %14223 = xor i32 %14220, %14191
  %14224 = add nuw nsw i32 %14223, %14222
  %14225 = icmp eq i32 %14224, 2
  %14226 = zext i1 %14225 to i8
  store i8 %14226, i8* %45, align 1
  %14227 = load i64, i64* %RBP.i, align 8
  %14228 = add i64 %14227, -1144
  %14229 = load i32, i32* %EAX.i1609, align 4
  %14230 = add i64 %14143, 29
  store i64 %14230, i64* %3, align 8
  %14231 = inttoptr i64 %14228 to i32*
  store i32 %14229, i32* %14231, align 4
  %14232 = load i64, i64* %3, align 8
  %14233 = load i8, i8* %39, align 1
  %14234 = icmp ne i8 %14233, 0
  %14235 = load i8, i8* %45, align 1
  %14236 = icmp ne i8 %14235, 0
  %14237 = xor i1 %14234, %14236
  %.v384 = select i1 %14237, i64 6, i64 23
  %14238 = add i64 %14232, %.v384
  store i64 %14238, i64* %3, align 8
  %14239 = load i64, i64* %RBP.i, align 8
  br i1 %14237, label %block_42fedd, label %block_.L_42feee

block_42fedd:                                     ; preds = %block_.L_42feba
  %14240 = add i64 %14239, -36
  %14241 = add i64 %14238, 3
  store i64 %14241, i64* %3, align 8
  %14242 = inttoptr i64 %14240 to i32*
  %14243 = load i32, i32* %14242, align 4
  %14244 = add i32 %14243, 2
  %14245 = zext i32 %14244 to i64
  store i64 %14245, i64* %RAX.i1585, align 8
  %14246 = icmp ugt i32 %14243, -3
  %14247 = zext i1 %14246 to i8
  store i8 %14247, i8* %20, align 1
  %14248 = and i32 %14244, 255
  %14249 = tail call i32 @llvm.ctpop.i32(i32 %14248)
  %14250 = trunc i32 %14249 to i8
  %14251 = and i8 %14250, 1
  %14252 = xor i8 %14251, 1
  store i8 %14252, i8* %27, align 1
  %14253 = xor i32 %14244, %14243
  %14254 = lshr i32 %14253, 4
  %14255 = trunc i32 %14254 to i8
  %14256 = and i8 %14255, 1
  store i8 %14256, i8* %33, align 1
  %14257 = icmp eq i32 %14244, 0
  %14258 = zext i1 %14257 to i8
  store i8 %14258, i8* %36, align 1
  %14259 = lshr i32 %14244, 31
  %14260 = trunc i32 %14259 to i8
  store i8 %14260, i8* %39, align 1
  %14261 = lshr i32 %14243, 31
  %14262 = xor i32 %14259, %14261
  %14263 = add nuw nsw i32 %14262, %14259
  %14264 = icmp eq i32 %14263, 2
  %14265 = zext i1 %14264 to i8
  store i8 %14265, i8* %45, align 1
  %14266 = add i64 %14239, -1148
  %14267 = add i64 %14238, 12
  store i64 %14267, i64* %3, align 8
  %14268 = inttoptr i64 %14266 to i32*
  store i32 %14244, i32* %14268, align 4
  %14269 = load i64, i64* %3, align 8
  %14270 = add i64 %14269, 17
  store i64 %14270, i64* %3, align 8
  br label %block_.L_42fefa

block_.L_42feee:                                  ; preds = %block_.L_42feba
  %14271 = add i64 %14239, -24
  %14272 = add i64 %14238, 3
  store i64 %14272, i64* %3, align 8
  %14273 = inttoptr i64 %14271 to i32*
  %14274 = load i32, i32* %14273, align 4
  %14275 = add i32 %14274, 1
  %14276 = zext i32 %14275 to i64
  store i64 %14276, i64* %RAX.i1585, align 8
  %14277 = icmp eq i32 %14274, -1
  %14278 = icmp eq i32 %14275, 0
  %14279 = or i1 %14277, %14278
  %14280 = zext i1 %14279 to i8
  store i8 %14280, i8* %20, align 1
  %14281 = and i32 %14275, 255
  %14282 = tail call i32 @llvm.ctpop.i32(i32 %14281)
  %14283 = trunc i32 %14282 to i8
  %14284 = and i8 %14283, 1
  %14285 = xor i8 %14284, 1
  store i8 %14285, i8* %27, align 1
  %14286 = xor i32 %14275, %14274
  %14287 = lshr i32 %14286, 4
  %14288 = trunc i32 %14287 to i8
  %14289 = and i8 %14288, 1
  store i8 %14289, i8* %33, align 1
  %14290 = zext i1 %14278 to i8
  store i8 %14290, i8* %36, align 1
  %14291 = lshr i32 %14275, 31
  %14292 = trunc i32 %14291 to i8
  store i8 %14292, i8* %39, align 1
  %14293 = lshr i32 %14274, 31
  %14294 = xor i32 %14291, %14293
  %14295 = add nuw nsw i32 %14294, %14291
  %14296 = icmp eq i32 %14295, 2
  %14297 = zext i1 %14296 to i8
  store i8 %14297, i8* %45, align 1
  %14298 = add i64 %14239, -1148
  %14299 = add i64 %14238, 12
  store i64 %14299, i64* %3, align 8
  %14300 = inttoptr i64 %14298 to i32*
  store i32 %14275, i32* %14300, align 4
  %.pre217 = load i64, i64* %3, align 8
  br label %block_.L_42fefa

block_.L_42fefa:                                  ; preds = %block_.L_42feee, %block_42fedd
  %14301 = phi i64 [ %.pre217, %block_.L_42feee ], [ %14270, %block_42fedd ]
  %14302 = load i64, i64* %RBP.i, align 8
  %14303 = add i64 %14302, -1148
  %14304 = add i64 %14301, 6
  store i64 %14304, i64* %3, align 8
  %14305 = inttoptr i64 %14303 to i32*
  %14306 = load i32, i32* %14305, align 4
  %14307 = add i32 %14306, -16
  %14308 = zext i32 %14307 to i64
  store i64 %14308, i64* %RAX.i1585, align 8
  %14309 = icmp ult i32 %14306, 16
  %14310 = zext i1 %14309 to i8
  store i8 %14310, i8* %20, align 1
  %14311 = and i32 %14307, 255
  %14312 = tail call i32 @llvm.ctpop.i32(i32 %14311)
  %14313 = trunc i32 %14312 to i8
  %14314 = and i8 %14313, 1
  %14315 = xor i8 %14314, 1
  store i8 %14315, i8* %27, align 1
  %14316 = xor i32 %14306, 16
  %14317 = xor i32 %14316, %14307
  %14318 = lshr i32 %14317, 4
  %14319 = trunc i32 %14318 to i8
  %14320 = and i8 %14319, 1
  store i8 %14320, i8* %33, align 1
  %14321 = icmp eq i32 %14307, 0
  %14322 = zext i1 %14321 to i8
  store i8 %14322, i8* %36, align 1
  %14323 = lshr i32 %14307, 31
  %14324 = trunc i32 %14323 to i8
  store i8 %14324, i8* %39, align 1
  %14325 = lshr i32 %14306, 31
  %14326 = xor i32 %14323, %14325
  %14327 = add nuw nsw i32 %14326, %14325
  %14328 = icmp eq i32 %14327, 2
  %14329 = zext i1 %14328 to i8
  store i8 %14329, i8* %45, align 1
  %14330 = add i64 %14302, -80
  %14331 = add i64 %14301, 12
  store i64 %14331, i64* %3, align 8
  %14332 = inttoptr i64 %14330 to i32*
  %14333 = load i32, i32* %14332, align 4
  %14334 = zext i32 %14333 to i64
  store i64 %14334, i64* %RCX.i3128, align 8
  %14335 = add i64 %14302, -76
  %14336 = add i64 %14301, 16
  store i64 %14336, i64* %3, align 8
  %14337 = inttoptr i64 %14335 to i32*
  %14338 = load i32, i32* %14337, align 4
  %14339 = zext i32 %14338 to i64
  store i64 %14339, i64* %600, align 8
  %14340 = add i64 %14302, -1136
  %14341 = add i64 %14301, 23
  store i64 %14341, i64* %3, align 8
  %14342 = inttoptr i64 %14340 to i64*
  %14343 = load i64, i64* %14342, align 8
  store i64 %14343, i64* %RDI.i605, align 8
  %14344 = add i64 %14302, -1144
  %14345 = add i64 %14301, 29
  store i64 %14345, i64* %3, align 8
  %14346 = inttoptr i64 %14344 to i32*
  %14347 = load i32, i32* %14346, align 4
  %14348 = zext i32 %14347 to i64
  store i64 %14348, i64* %RSI.i5212, align 8
  store i64 %14308, i64* %RDX.i5152, align 8
  %14349 = add i64 %14301, 453142
  %14350 = add i64 %14301, 36
  %14351 = load i64, i64* %6, align 8
  %14352 = add i64 %14351, -8
  %14353 = inttoptr i64 %14352 to i64*
  store i64 %14350, i64* %14353, align 8
  store i64 %14352, i64* %6, align 8
  store i64 %14349, i64* %3, align 8
  %call2_42ff19 = tail call %struct.Memory* @sub_49e910.FastPelY_14(%struct.State* nonnull %0, i64 %14349, %struct.Memory* %call2_42fe70)
  %14354 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i3128, align 8
  %14355 = load i16, i16* %AX.i3315, align 2
  %14356 = zext i16 %14355 to i64
  store i64 %14356, i64* %RDX.i5152, align 8
  %14357 = load i64, i64* %RBP.i, align 8
  %14358 = add i64 %14357, -1128
  %14359 = add i64 %14354, 14
  store i64 %14359, i64* %3, align 8
  %14360 = inttoptr i64 %14358 to i32*
  %14361 = load i32, i32* %14360, align 4
  %14362 = zext i16 %14355 to i32
  %14363 = add i32 %14362, %14361
  %14364 = lshr i32 %14363, 31
  %14365 = add i32 %14363, 1
  %14366 = zext i32 %14365 to i64
  store i64 %14366, i64* %RSI.i5212, align 8
  %14367 = icmp eq i32 %14363, -1
  %14368 = icmp eq i32 %14365, 0
  %14369 = or i1 %14367, %14368
  %14370 = zext i1 %14369 to i8
  store i8 %14370, i8* %20, align 1
  %14371 = and i32 %14365, 255
  %14372 = tail call i32 @llvm.ctpop.i32(i32 %14371)
  %14373 = trunc i32 %14372 to i8
  %14374 = and i8 %14373, 1
  %14375 = xor i8 %14374, 1
  store i8 %14375, i8* %27, align 1
  %14376 = xor i32 %14365, %14363
  %14377 = lshr i32 %14376, 4
  %14378 = trunc i32 %14377 to i8
  %14379 = and i8 %14378, 1
  store i8 %14379, i8* %33, align 1
  %14380 = zext i1 %14368 to i8
  store i8 %14380, i8* %36, align 1
  %14381 = lshr i32 %14365, 31
  %14382 = trunc i32 %14381 to i8
  store i8 %14382, i8* %39, align 1
  %14383 = xor i32 %14381, %14364
  %14384 = add nuw nsw i32 %14383, %14381
  %14385 = icmp eq i32 %14384, 2
  %14386 = zext i1 %14385 to i8
  store i8 %14386, i8* %45, align 1
  store i64 %14366, i64* %RAX.i1585, align 8
  %14387 = sext i32 %14365 to i64
  %14388 = lshr i64 %14387, 32
  store i64 %14388, i64* %3718, align 8
  %14389 = add i64 %14354, 24
  store i64 %14389, i64* %3, align 8
  %14390 = shl nuw i64 %14388, 32
  %14391 = or i64 %14390, %14366
  %14392 = sdiv i64 %14391, 2
  %14393 = shl i64 %14392, 32
  %14394 = ashr exact i64 %14393, 32
  %14395 = icmp eq i64 %14392, %14394
  br i1 %14395, label %14398, label %14396

; <label>:14396:                                  ; preds = %block_.L_42fefa
  %14397 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %14389, %struct.Memory* %call2_42ff19)
  %.pre218 = load i64, i64* %RBP.i, align 8
  %.pre219 = load i32, i32* %EAX.i1609, align 4
  %.pre220 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit

; <label>:14398:                                  ; preds = %block_.L_42fefa
  %14399 = srem i64 %14391, 2
  %14400 = and i64 %14392, 4294967295
  store i64 %14400, i64* %RAX.i1585, align 8
  %14401 = and i64 %14399, 4294967295
  store i64 %14401, i64* %RDX.i5152, align 8
  store i8 0, i8* %20, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %36, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %14402 = trunc i64 %14392 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %14398, %14396
  %14403 = phi i64 [ %.pre220, %14396 ], [ %14389, %14398 ]
  %14404 = phi i32 [ %.pre219, %14396 ], [ %14402, %14398 ]
  %14405 = phi i64 [ %.pre218, %14396 ], [ %14357, %14398 ]
  %14406 = phi %struct.Memory* [ %14397, %14396 ], [ %call2_42ff19, %14398 ]
  %14407 = add i64 %14405, -1120
  %14408 = add i64 %14403, 6
  store i64 %14408, i64* %3, align 8
  %14409 = inttoptr i64 %14407 to i32*
  store i32 %14404, i32* %14409, align 4
  %.pre221 = load i64, i64* %3, align 8
  br label %block_.L_42ff3c

block_.L_42ff3c:                                  ; preds = %routine_idivl__ecx.exit, %block_42fe2d
  %14410 = phi i64 [ %.pre221, %routine_idivl__ecx.exit ], [ %13912, %block_42fe2d ]
  %MEMORY.85 = phi %struct.Memory* [ %14406, %routine_idivl__ecx.exit ], [ %13869, %block_42fe2d ]
  %14411 = load i64, i64* %RBP.i, align 8
  %14412 = add i64 %14411, -1120
  %14413 = add i64 %14410, 6
  store i64 %14413, i64* %3, align 8
  %14414 = inttoptr i64 %14412 to i32*
  %14415 = load i32, i32* %14414, align 4
  %14416 = zext i32 %14415 to i64
  store i64 %14416, i64* %RAX.i1585, align 8
  %14417 = add i64 %14411, -1080
  %14418 = add i64 %14410, 12
  store i64 %14418, i64* %3, align 8
  %14419 = inttoptr i64 %14417 to i32*
  store i32 %14415, i32* %14419, align 4
  %.pre222 = load i64, i64* %3, align 8
  br label %block_.L_42ff48

block_.L_42ff48:                                  ; preds = %block_.L_42ff3c, %block_42fd09
  %14420 = phi i64 [ %.pre222, %block_.L_42ff3c ], [ %13362, %block_42fd09 ]
  %MEMORY.86 = phi %struct.Memory* [ %MEMORY.85, %block_.L_42ff3c ], [ %MEMORY.80, %block_42fd09 ]
  %14421 = load i64, i64* %RBP.i, align 8
  %14422 = add i64 %14421, -1080
  %14423 = add i64 %14420, 6
  store i64 %14423, i64* %3, align 8
  %14424 = inttoptr i64 %14422 to i32*
  %14425 = load i32, i32* %14424, align 4
  %14426 = zext i32 %14425 to i64
  store i64 %14426, i64* %RAX.i1585, align 8
  %14427 = trunc i32 %14425 to i16
  store i16 %14427, i16* %CX.i3316, align 2
  %14428 = add i64 %14421, -1008
  %14429 = add i64 %14420, 16
  store i64 %14429, i64* %3, align 8
  %14430 = inttoptr i64 %14428 to i64*
  %14431 = load i64, i64* %14430, align 8
  store i64 %14431, i64* %RDI.i605, align 8
  %14432 = add i64 %14421, -1020
  %14433 = add i64 %14420, 22
  store i64 %14433, i64* %3, align 8
  %14434 = inttoptr i64 %14432 to i32*
  %14435 = load i32, i32* %14434, align 4
  %14436 = zext i32 %14435 to i64
  store i64 %14436, i64* %RSI.i5212, align 8
  %14437 = add i64 %14421, -1016
  %14438 = add i64 %14420, 28
  store i64 %14438, i64* %3, align 8
  %14439 = inttoptr i64 %14437 to i32*
  %14440 = load i32, i32* %14439, align 4
  %14441 = zext i32 %14440 to i64
  store i64 %14441, i64* %RDX.i5152, align 8
  %.mask311 = and i32 %14425, 65535
  %14442 = zext i32 %.mask311 to i64
  store i64 %14442, i64* %RCX.i3128, align 8
  %14443 = add i64 %14420, 451112
  %14444 = add i64 %14420, 36
  %14445 = load i64, i64* %6, align 8
  %14446 = add i64 %14445, -8
  %14447 = inttoptr i64 %14446 to i64*
  store i64 %14444, i64* %14447, align 8
  store i64 %14446, i64* %6, align 8
  store i64 %14443, i64* %3, align 8
  %call2_42ff67 = tail call %struct.Memory* @sub_49e170.PutPel_14(%struct.State* nonnull %0, i64 %14443, %struct.Memory* %MEMORY.86)
  %.pre223 = load i64, i64* %3, align 8
  br label %block_.L_42ff6c

block_.L_42ff6c:                                  ; preds = %block_.L_42ff48, %block_.L_42fa84
  %14448 = phi i64 [ %.pre223, %block_.L_42ff48 ], [ %12206, %block_.L_42fa84 ]
  %MEMORY.87 = phi %struct.Memory* [ %call2_42ff67, %block_.L_42ff48 ], [ %call2_42faa3, %block_.L_42fa84 ]
  %14449 = add i64 %14448, 5
  store i64 %14449, i64* %3, align 8
  br label %block_.L_42ff71

block_.L_42ff71:                                  ; preds = %block_.L_42ff6c, %block_.L_42f4ff
  %storemerge = phi i64 [ %9689, %block_.L_42f4ff ], [ %14449, %block_.L_42ff6c ]
  %MEMORY.88 = phi %struct.Memory* [ %call2_42f51e, %block_.L_42f4ff ], [ %MEMORY.87, %block_.L_42ff6c ]
  %14450 = load i64, i64* %RBP.i, align 8
  %14451 = add i64 %14450, -28
  %14452 = add i64 %storemerge, 8
  store i64 %14452, i64* %3, align 8
  %14453 = inttoptr i64 %14451 to i32*
  %14454 = load i32, i32* %14453, align 4
  %14455 = add i32 %14454, 2
  %14456 = zext i32 %14455 to i64
  store i64 %14456, i64* %RAX.i1585, align 8
  %14457 = icmp ugt i32 %14454, -3
  %14458 = zext i1 %14457 to i8
  store i8 %14458, i8* %20, align 1
  %14459 = and i32 %14455, 255
  %14460 = tail call i32 @llvm.ctpop.i32(i32 %14459)
  %14461 = trunc i32 %14460 to i8
  %14462 = and i8 %14461, 1
  %14463 = xor i8 %14462, 1
  store i8 %14463, i8* %27, align 1
  %14464 = xor i32 %14455, %14454
  %14465 = lshr i32 %14464, 4
  %14466 = trunc i32 %14465 to i8
  %14467 = and i8 %14466, 1
  store i8 %14467, i8* %33, align 1
  %14468 = icmp eq i32 %14455, 0
  %14469 = zext i1 %14468 to i8
  store i8 %14469, i8* %36, align 1
  %14470 = lshr i32 %14455, 31
  %14471 = trunc i32 %14470 to i8
  store i8 %14471, i8* %39, align 1
  %14472 = lshr i32 %14454, 31
  %14473 = xor i32 %14470, %14472
  %14474 = add nuw nsw i32 %14473, %14470
  %14475 = icmp eq i32 %14474, 2
  %14476 = zext i1 %14475 to i8
  store i8 %14476, i8* %45, align 1
  %14477 = add i64 %storemerge, 14
  store i64 %14477, i64* %3, align 8
  store i32 %14455, i32* %14453, align 4
  %14478 = load i64, i64* %3, align 8
  %14479 = add i64 %14478, -3705
  store i64 %14479, i64* %3, align 8
  br label %block_.L_42f106

block_.L_42ff84:                                  ; preds = %block_.L_42f106
  %14480 = add i64 %7857, -24
  %14481 = add i64 %7895, 8
  store i64 %14481, i64* %3, align 8
  %14482 = inttoptr i64 %14480 to i32*
  %14483 = load i32, i32* %14482, align 4
  %14484 = add i32 %14483, 1
  %14485 = zext i32 %14484 to i64
  store i64 %14485, i64* %RAX.i1585, align 8
  %14486 = icmp eq i32 %14483, -1
  %14487 = icmp eq i32 %14484, 0
  %14488 = or i1 %14486, %14487
  %14489 = zext i1 %14488 to i8
  store i8 %14489, i8* %20, align 1
  %14490 = and i32 %14484, 255
  %14491 = tail call i32 @llvm.ctpop.i32(i32 %14490)
  %14492 = trunc i32 %14491 to i8
  %14493 = and i8 %14492, 1
  %14494 = xor i8 %14493, 1
  store i8 %14494, i8* %27, align 1
  %14495 = xor i32 %14484, %14483
  %14496 = lshr i32 %14495, 4
  %14497 = trunc i32 %14496 to i8
  %14498 = and i8 %14497, 1
  store i8 %14498, i8* %33, align 1
  %14499 = zext i1 %14487 to i8
  store i8 %14499, i8* %36, align 1
  %14500 = lshr i32 %14484, 31
  %14501 = trunc i32 %14500 to i8
  store i8 %14501, i8* %39, align 1
  %14502 = lshr i32 %14483, 31
  %14503 = xor i32 %14500, %14502
  %14504 = add nuw nsw i32 %14503, %14500
  %14505 = icmp eq i32 %14504, 2
  %14506 = zext i1 %14505 to i8
  store i8 %14506, i8* %45, align 1
  %14507 = add i64 %7895, 14
  store i64 %14507, i64* %3, align 8
  store i32 %14484, i32* %14482, align 4
  %14508 = load i64, i64* %3, align 8
  %14509 = add i64 %14508, -3748
  store i64 %14509, i64* %3, align 8
  br label %block_.L_42f0ee

block_.L_42ff97:                                  ; preds = %block_.L_42f0ee
  %14510 = add i64 %7814, -56
  %14511 = add i64 %7852, 4
  store i64 %14511, i64* %3, align 8
  %14512 = inttoptr i64 %14510 to i64*
  %14513 = load i64, i64* %14512, align 8
  store i64 %14513, i64* %RDI.i605, align 8
  %14514 = add i64 %7814, -64
  %14515 = add i64 %7852, 8
  store i64 %14515, i64* %3, align 8
  %14516 = inttoptr i64 %14514 to i64*
  %14517 = load i64, i64* %14516, align 8
  store i64 %14517, i64* %RSI.i5212, align 8
  %14518 = add i64 %7814, -16
  %14519 = add i64 %7852, 12
  store i64 %14519, i64* %3, align 8
  %14520 = inttoptr i64 %14518 to i64*
  %14521 = load i64, i64* %14520, align 8
  store i64 %14521, i64* %RAX.i1585, align 8
  %14522 = add i64 %14521, 6392
  %14523 = add i64 %7852, 18
  store i64 %14523, i64* %3, align 8
  %14524 = inttoptr i64 %14522 to i32*
  %14525 = load i32, i32* %14524, align 4
  %14526 = zext i32 %14525 to i64
  store i64 %14526, i64* %RDX.i5152, align 8
  %14527 = add i64 %7852, 22
  store i64 %14527, i64* %3, align 8
  %14528 = load i64, i64* %14520, align 8
  store i64 %14528, i64* %RAX.i1585, align 8
  %14529 = add i64 %14528, 6396
  %14530 = add i64 %7852, 28
  store i64 %14530, i64* %3, align 8
  %14531 = inttoptr i64 %14529 to i32*
  %14532 = load i32, i32* %14531, align 4
  %14533 = zext i32 %14532 to i64
  store i64 %14533, i64* %RCX.i3128, align 8
  %14534 = add i64 %7852, 57
  %14535 = add i64 %7852, 33
  %14536 = load i64, i64* %6, align 8
  %14537 = add i64 %14536, -8
  %14538 = inttoptr i64 %14537 to i64*
  store i64 %14535, i64* %14538, align 8
  store i64 %14537, i64* %6, align 8
  store i64 %14534, i64* %3, align 8
  %call2_42ffb3 = tail call %struct.Memory* @sub_42ffd0.GenerateFullPelRepresentation(%struct.State* nonnull %0, i64 %14534, %struct.Memory* %MEMORY.53)
  %.pre307 = load i64, i64* %3, align 8
  br label %block_.L_42ffb8

block_.L_42ffb8:                                  ; preds = %block_.L_42ff97, %block_.L_42ddad
  %14539 = phi i64 [ %133, %block_.L_42ddad ], [ %.pre307, %block_.L_42ff97 ]
  %MEMORY.89 = phi %struct.Memory* [ %2, %block_.L_42ddad ], [ %call2_42ffb3, %block_.L_42ff97 ]
  %14540 = load i64, i64* %6, align 8
  %14541 = add i64 %14540, 1144
  store i64 %14541, i64* %6, align 8
  %14542 = icmp ugt i64 %14540, -1145
  %14543 = zext i1 %14542 to i8
  store i8 %14543, i8* %20, align 1
  %14544 = trunc i64 %14541 to i32
  %14545 = and i32 %14544, 255
  %14546 = tail call i32 @llvm.ctpop.i32(i32 %14545)
  %14547 = trunc i32 %14546 to i8
  %14548 = and i8 %14547, 1
  %14549 = xor i8 %14548, 1
  store i8 %14549, i8* %27, align 1
  %14550 = xor i64 %14540, 16
  %14551 = xor i64 %14550, %14541
  %14552 = lshr i64 %14551, 4
  %14553 = trunc i64 %14552 to i8
  %14554 = and i8 %14553, 1
  store i8 %14554, i8* %33, align 1
  %14555 = icmp eq i64 %14541, 0
  %14556 = zext i1 %14555 to i8
  store i8 %14556, i8* %36, align 1
  %14557 = lshr i64 %14541, 63
  %14558 = trunc i64 %14557 to i8
  store i8 %14558, i8* %39, align 1
  %14559 = lshr i64 %14540, 63
  %14560 = xor i64 %14557, %14559
  %14561 = add nuw nsw i64 %14560, %14557
  %14562 = icmp eq i64 %14561, 2
  %14563 = zext i1 %14562 to i8
  store i8 %14563, i8* %45, align 1
  %14564 = add i64 %14539, 8
  store i64 %14564, i64* %3, align 8
  %14565 = add i64 %14540, 1152
  %14566 = inttoptr i64 %14541 to i64*
  %14567 = load i64, i64* %14566, align 8
  store i64 %14567, i64* %RBX.i241, align 8
  store i64 %14565, i64* %6, align 8
  %14568 = add i64 %14539, 9
  store i64 %14568, i64* %3, align 8
  %14569 = add i64 %14540, 1160
  %14570 = inttoptr i64 %14565 to i64*
  %14571 = load i64, i64* %14570, align 8
  store i64 %14571, i64* %RBP.i, align 8
  store i64 %14569, i64* %6, align 8
  %14572 = add i64 %14539, 10
  store i64 %14572, i64* %3, align 8
  %14573 = inttoptr i64 %14569 to i64*
  %14574 = load i64, i64* %14573, align 8
  store i64 %14574, i64* %3, align 8
  %14575 = add i64 %14540, 1168
  store i64 %14575, i64* %6, align 8
  ret %struct.Memory* %MEMORY.89
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x478___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -1144
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 1144
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1918__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rdi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18fc__rdi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__0x0__0x1930__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42ddad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__0x0__0x1920__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_42ddb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ffb8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull_0x18fc__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 6396
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = shl i64 %3, 32
  %11 = ashr exact i64 %10, 32
  %12 = sext i32 %9 to i64
  %13 = mul nsw i64 %12, %11
  %14 = trunc i64 %13 to i32
  %15 = and i64 %13, 4294967295
  store i64 %15, i64* %RCX, align 8
  %16 = shl i64 %13, 32
  %17 = ashr exact i64 %16, 32
  %18 = icmp ne i64 %17, %13
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i32 %14, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x1___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 1
  %7 = icmp slt i64 %3, 0
  %8 = icmp slt i64 %6, 0
  %9 = xor i1 %7, %8
  store i64 %6, i64* %RAX, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i64 %3, 63
  %11 = trunc i64 %.lobit to i8
  store i8 %11, i8* %10, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = trunc i64 %6 to i32
  %14 = and i32 %13, 254
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %12, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i64 %6, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %3, 62
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %28 = zext i1 %9 to i8
  store i8 %28, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.malloc_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__ecx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x1920__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6432
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq_0x1920__rax____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 6432
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %3, %9
  %11 = icmp ult i64 %3, %9
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %9, %3
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %3, 63
  %34 = lshr i64 %9, 63
  %35 = xor i64 %34, %33
  %36 = xor i64 %30, %33
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42de05(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4c03bd___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4c03bd_type* @G__0x4c03bd to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.no_mem_exit(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x1930___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 6448
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -6449
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18fc__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x8___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 8
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -9
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rcx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x8___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 8
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -9
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RSI, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.get_mem2Dpel(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x504__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 1284
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42de7e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x508__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_42df0e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x1928__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6440
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq_0x1928__rax____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 6440
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %3, %9
  %11 = icmp ult i64 %3, %9
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %9, %3
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %3, 63
  %34 = lshr i64 %9, 63
  %35 = xor i64 %34, %33
  %36 = xor i64 %30, %33
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42ded1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4c03e0___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4c03e0_type* @G__0x4c03e0 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x1938___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 6456
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -6457
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1930__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1920__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xfffffffc__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -4, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x4___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -5
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e666(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xfffffffc__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -4, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e653(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18fc__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x1c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -28
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42df95(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42df9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42dfb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42dfe9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42dfdd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42dfe3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4b8c50___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x4b8c50_type* @G_0x4b8c50 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x48__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x18__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -24
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -112
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e034(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -124
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e03a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -124
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x7c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -124
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e051(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -128
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e091(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x18__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -24
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e07f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -132
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e088(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -132
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x84__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x78__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rdx__rcx_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rsi____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 1
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp eq i32 %5, -1
  %11 = icmp eq i32 %8, 0
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %8, %5
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = zext i1 %11 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %28
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__r8d___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDI, align 4
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -136
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e0ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -148
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e0fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -148
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x94__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e117(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -152
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e162(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e14a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -156
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e156(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -156
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x9c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x98__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x90__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x88__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x70__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RAX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4b8c58___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x4b8c58_type* @G_0x4b8c58 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdi_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rdi____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RDI, align 8
  %5 = add i64 %4, 6392
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, -1
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp eq i32 %5, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, -1
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp eq i32 %5, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__r9d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %R8D, align 4
  %6 = load i32, i32* %R9D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -160
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -164
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e1e2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xb4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -180
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e1ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e20b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e256(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e23e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e24a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xbc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xb0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 2
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ugt i32 %5, -3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -192
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e2b9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xcc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -204
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e2c5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xcc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -204
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xcc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e2e2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -208
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e32d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e315(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e321(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xc8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4b8c60___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x4b8c60_type* @G_0x4b8c60 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x2___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, -2
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ult i32 %5, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e3b8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -236
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e3c4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 2
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -236
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e3e1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -240
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e42c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ult i32 %6, 2
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e414(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xf4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -244
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e420(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -244
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -244
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xe8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 3
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ugt i32 %5, -4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -248
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x100__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e48f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x104__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -260
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e49b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x104__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -260
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x104__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e4b8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x108__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -264
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e503(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e4eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x10c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -268
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e4f7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x10c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -268
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -268
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x108__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x100__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x18__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -24
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x118__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e574(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x11c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -284
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e57d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x11c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -284
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x11c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -284
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e59a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -288
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e5dd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e5c8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x124__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -292
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e5d1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x124__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -292
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x124__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x120__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x118__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shll__0xa___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 10
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 22
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = icmp eq i32 %6, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %14, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = lshr i32 %.tr, 21
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  store i8 %20, i8* %17, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x726410___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x4___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -5
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx__rdi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x5___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 5
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 27
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 26
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42df52(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e658(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42df33(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ec7c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ec69(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18fc__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 8
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -9
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -296
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x12c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -300
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x138__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e71e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x13c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -316
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e72a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x13c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -316
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x138__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi__rdx_8____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x12c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -300
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rdx__rdi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x128__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -296
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R8D, align 4
  %7 = load i32, i32* %EAX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = sext i32 %6 to i64
  %11 = sext i32 %7 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %5, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4b8c58___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x4b8c58_type* @G_0x4b8c58 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x726410___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__r9d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %R9D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x148__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -328
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x14c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -332
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x150__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -336
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e799(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x154__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -340
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e7a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x154__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -340
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x148__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -328
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rcx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx__rsi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x158__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -344
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -352
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e7f7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x164__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -356
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e803(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x164__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -356
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x160__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -352
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x158__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -344
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x150__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -336
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -332
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__r8d___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %R8D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4b8c60___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  %6 = load i32, i32* bitcast (%G_0x4b8c60_type* @G_0x4b8c60 to i32*), align 8
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -368
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -372
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x178__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -376
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42e87c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x17c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -380
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e888(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x17c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x170__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -368
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x180__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -384
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x188__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e8da(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -396
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e8e6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x400___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1024, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x20___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 32, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x188__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdi__rsi_8____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x180__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rsi__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x178__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -376
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__eax___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R9D, align 4
  %7 = load i32, i32* %EAX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = sext i32 %6 to i64
  %11 = sext i32 %7 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %5, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x174__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -372
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__r9d___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %R9D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x190__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -400
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x190__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -400
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__r9d(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %R9D, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x38__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x8___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, -8
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ult i32 %5, 8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i32 %5, 1
  %9 = icmp slt i32 %5, 0
  %10 = icmp slt i32 %8, 0
  %11 = xor i1 %9, %10
  %12 = zext i32 %8 to i64
  store i64 %12, i64* %4, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %5, 31
  %14 = trunc i32 %.lobit to i8
  store i8 %14, i8* %13, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = and i32 %8, 254
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* %15, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = icmp eq i32 %8, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %22, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = lshr i32 %5, 30
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %25, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = zext i1 %11 to i8
  store i8 %30, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rsi____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 72684
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x726410___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x726410_type* @G_0x726410 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi__r8_8____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rsi__r8_4____ebx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x200___ebx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 512
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RBX, align 8
  %9 = icmp ugt i32 %6, -513
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x194__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ebx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %EBX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EBX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %R11D, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x1a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__MINUS0x1a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -420
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42e9bb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -424
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e9f4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x400___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1024, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x200___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 512
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -513
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -428
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1ac__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -428
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -424
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42ea11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -432
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42eac6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx__rsi_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x200___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 512
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp ugt i32 %6, -513
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -436
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -440
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b4__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -436
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__edi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b8__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -440
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %R8D, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ea81(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -444
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42eaba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -448
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -444
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1bc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1a0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x194__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -420
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl__cx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %4 = load i16, i16* %CX, align 2
  %5 = zext i16 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.PutPel_14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ult i32 %6, 4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RCX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x8___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -8
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ult i32 %6, 8
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__r8____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x200___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 512
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ugt i32 %5, -513
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -452
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %R9D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -456
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c4__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -452
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ESI, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x1d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -468
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42eb6a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -472
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42eb8f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x200___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 512
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -513
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -476
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1dc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -476
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -472
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -472
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42ebac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -480
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ec37(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -484
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -488
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -484
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e8__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -488
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDI, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ec06(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -492
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ec2b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -496
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -492
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -492
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1d0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -468
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e68f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ec6e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42e66d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x8___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 8
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -9
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -5
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f0e7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f0d4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x10___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 16
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x10___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ult i32 %6, 16
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x38__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x10___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, -16
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ult i32 %5, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %5, 16
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x10___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, -16
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ult i32 %5, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %5, 16
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4c__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x1f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -504
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x1fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -508
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %R9D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x200__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -512
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R10D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %R11D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x204__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -516
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.FastPelY_14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl__ax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i16, i16* %AX, align 2
  %5 = zext i16 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x10___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ult i32 %6, 16
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__r8d___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ESI, align 4
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x208__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -520
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x210__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -528
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x214__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -532
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ed8a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x218__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -536
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ed96(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x218__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4c__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x210__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x214__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl__ax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i16, i16* %AX, align 2
  %5 = zext i16 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x208__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -508
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42edf9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x21c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -540
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42eebb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x220__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -544
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x220__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x224__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -548
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x230__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x234__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -564
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ee6d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x238__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -568
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ee79(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x238__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -568
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x230__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x234__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -564
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x224__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -548
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x21c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -540
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x21c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -540
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42eed8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x23c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -572
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f0a2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x10___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ult i32 %6, 16
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4c__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x240__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -576
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x240__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -576
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x244__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -580
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x248__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -584
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x250__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -592
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x254__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -596
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ef65(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x258__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -600
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ef71(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x258__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x250__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -592
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x254__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -596
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x248__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -584
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x244__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -580
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42efd4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x25c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -604
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f096(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x260__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -608
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x260__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x264__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -612
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x270__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x274__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -628
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f048(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x278__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -632
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f054(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x278__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -632
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x270__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x274__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -628
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x264__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -612
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x25c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -604
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x25c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -604
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x23c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -572
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1f8__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x204__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -516
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x200__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ecc7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f0d9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ecaf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ff97(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42ff84(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x27c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -636
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -636
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42f528(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x288__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -648
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x28c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -652
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x290__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -656
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x294__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -660
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__esi___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDX, align 4
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x298__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -664
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x2a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -672
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f1dc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -676
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f1e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -676
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2a0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -672
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -680
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -680
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x298__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -664
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -652
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f259(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -684
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f31a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -688
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2b0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -688
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -692
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x2c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -704
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f2be(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -708
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f2ca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -708
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2c0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -712
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2b4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -692
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -684
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42f337(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -716
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f4ff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x2d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -720
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2d0__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -720
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -724
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -728
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x2e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f3b5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -740
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f3c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -740
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2e0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -744
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -744
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2d8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -728
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2d4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -724
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f432(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -748
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f4f3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -752
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -752
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -756
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x300__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f497(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x304__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -772
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f4a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x304__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -772
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x300__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x308__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -776
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x308__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -776
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -756
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -748
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -748
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2cc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x288__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -648
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x294__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -660
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x290__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -656
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ff71(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x30c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -780
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -780
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42f56c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x310__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -784
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x310__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -784
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_42f5b0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x314__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -788
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x314__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -788
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -2
  %8 = icmp ult i32 %4, 2
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42faad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x318__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -792
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x318__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -792
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -3
  %8 = icmp ult i32 %4, 3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 2
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ugt i32 %5, -3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 1
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp eq i32 %5, -1
  %11 = icmp eq i32 %8, 0
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %8, %5
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = zext i1 %11 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %28
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__r10d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %R9D, align 4
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x320__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -800
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x324__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -804
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x328__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -808
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x32c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -812
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x338__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -824
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x33c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -828
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f62e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x340__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -832
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f63a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x340__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x338__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -824
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x33c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -828
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x344__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -836
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x350__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -848
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f697(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x354__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -852
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f6a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x354__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -852
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x350__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x358__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -856
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x358__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -856
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x344__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -836
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x32c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -812
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f717(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x35c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -860
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f81b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x368__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -872
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x36c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -876
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f753(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x370__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -880
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f75f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x370__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x368__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -872
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x36c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -876
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x374__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -884
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x380__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -896
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f7bc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x384__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -900
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f7c8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x384__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -900
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x380__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -896
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x388__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -904
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x388__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -904
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x374__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -884
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x35c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -860
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x35c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -860
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42f838(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x38c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -908
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fa84(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x390__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -912
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x398__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -920
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x39c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -924
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f88b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -928
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f897(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3a0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -928
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x398__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -920
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x39c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -924
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x3a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -932
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x3b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -944
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f8f4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -948
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f900(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3b4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -948
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3b0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -944
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x3b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -952
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3b8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -952
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3a4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -932
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x390__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -912
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f974(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x3bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -956
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fa78(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x3c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -968
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -972
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42f9b0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -976
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f9bc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3d0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -976
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3c8__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -968
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3cc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -972
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x3d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -980
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x3e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -992
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fa19(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -996
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fa25(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3e4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -996
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3e0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -992
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x3e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1000
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3e8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1000
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3d4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -980
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -956
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3bc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -956
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -908
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x320__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -800
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x324__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -804
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x328__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -808
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ff6c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x3f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1008
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x3f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1012
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x3f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1016
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1020
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x400__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1024
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x408__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1032
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fb54(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x40c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1036
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fb60(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1036
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x410__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1040
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fb94(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x414__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1044
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fba0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x414__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1044
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x408__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1032
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x410__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1040
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x400__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1024
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3f4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1012
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fc03(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x418__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1048
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fcf9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x41c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1052
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x41c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1052
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x420__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1056
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x428__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1064
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fc6b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x42c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1068
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fc77(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x42c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x430__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1072
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fcab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x434__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1076
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fcb7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x434__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1076
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x428__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1064
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x430__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x420__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x418__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1048
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x418__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1048
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42fd16(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x438__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1080
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ff48(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x43c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1084
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x43c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1084
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x440__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1088
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x444__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1092
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x450__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1104
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fd97(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x454__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1108
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fda3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x454__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x458__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1112
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fdd7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x45c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1116
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fde3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x45c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x450__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x458__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x444__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1092
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x440__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1088
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42fe46(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x460__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1120
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ff3c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x464__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1124
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x464__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1124
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x468__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1128
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x470__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42feae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x474__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1140
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42feba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x474__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x478__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1144
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42feee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x47c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1148
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42fefa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x47c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x470__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x478__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x468__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x460__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1120
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x460__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x438__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1080
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3f0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1008
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3fc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1020
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3f8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1016
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ff76(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f106(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42ff89(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42f0ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x40__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.GenerateFullPelRepresentation(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x478___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 1144
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -1145
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBX, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
