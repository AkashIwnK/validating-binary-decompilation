; ModuleID = 'test.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"
%union.anon = type { i64 }
%seg_400388__init_type = type <{ [23 x i8] }>
%seg_4003a0__text_type = type <{ [354 x i8] }>
%seg_400504__fini_type = type <{ [9 x i8] }>
%seg_400510__rodata_type = type <{ [4 x i8] }>
%seg_400514__eh_frame_hdr_type = type <{ [52 x i8] }>
%seg_400548__eh_frame_type = type <{ [208 x i8] }>
%seg_600e40__init_array_type = type <{ i64, i64 }>
%seg_601018__data_type = type <{ [16 x i8] }>
%__bss_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.uint8v32_t = type { [32 x i8] }
%struct.anon.2 = type { i8, i8 }
%struct.int32v8_t = type { [8 x i32] }
%struct.float32v8_t = type { [8 x float] }
%struct.uint8v8_t = type { [8 x i8] }
%struct.uint8v16_t = type { [16 x i8] }
%struct.uint16v8_t = type { [8 x i16] }
%struct.uint8v4_t = type { [4 x i8] }
%struct.int16v4_t = type { [4 x i16] }
%struct.int32v4_t = type { [4 x i32] }
%struct.uint64v2_t = type { [2 x i64] }
%struct.uint64v4_t = type { [4 x i64] }
%struct.uint128v2_t = type { [2 x i128] }
%struct.uint16v16_t = type { [16 x i16] }
%struct.float64v4_t = type { [4 x double] }
%"class.(anonymous namespace)::BitMatrix" = type { %"class.std::bitset", [16 x [16 x i8]] }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.bcd80_t = type { [9 x %union.FPUAbridgedTagWord], %union.FPUAbridgedTagWord }
%struct.FpuFSAVE = type { %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, [8 x %struct.FPUStackElem] }
%struct.anon.5 = type { i32, i32 }
@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400388__init = internal constant %seg_400388__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05e\0C \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4003a0__text = internal constant %seg_4003a0__text_type <{ [354 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\00\05@\00H\C7\C1\90\04@\00H\C7\C7\88\04@\00\FF\15&\0C \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8(\10`\00H=(\10`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF(\10`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE(\10`\00UH\81\EE(\10`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF(\10`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\D1\0B \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\BF\0B \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89\90U\C3f\0F\1FD\00\00AWAVI\89\D7AUATL\8D%\9E\09 \00UH\8D-\9E\09 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\C7\FE\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_400504__fini = internal constant %seg_400504__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_400510__rodata = internal constant %seg_400510__rodata_type <{ [4 x i8] c"\01\00\02\00" }>
@seg_400514__eh_frame_hdr = internal constant %seg_400514__eh_frame_hdr_type <{ [52 x i8] c"\01\1B\03;0\00\00\00\05\00\00\00\8C\FE\FF\FFL\00\00\00\BC\FE\FF\FFx\00\00\00t\FF\FF\FF\8C\00\00\00|\FF\FF\FF\A4\00\00\00\EC\FF\FF\FF\EC\00\00\00" }>
@seg_400548__eh_frame = internal constant %seg_400548__eh_frame_type <{ [208 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\008\FE\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00<\FE\FF\FF\02\00\00\00\00\00\00\00\14\00\00\000\00\00\00\E0\FE\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00D\00\00\00H\00\00\00\D0\FE\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\90\00\00\00\F8\FE\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_601018__data = internal global %seg_601018__data_type zeroinitializer
@__bss_start = global %__bss_start_type zeroinitializer
@0 = internal global i1 false
%seg_400514__fini_type = type <{ [9 x i8] }>
%seg_400520__rodata_type = type <{ [4 x i8] }>
%seg_400524__eh_frame_hdr_type = type <{ [52 x i8] }>
%seg_400558__eh_frame_type = type <{ [208 x i8] }>
@seg_400514__fini = internal constant %seg_400514__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_400520__rodata = internal constant %seg_400520__rodata_type <{ [4 x i8] c"\01\00\02\00" }>
@seg_400524__eh_frame_hdr = internal constant %seg_400524__eh_frame_hdr_type <{ [52 x i8] c"\01\1B\03;0\00\00\00\05\00\00\00|\FE\FF\FFL\00\00\00\AC\FE\FF\FFx\00\00\00d\FF\FF\FF\8C\00\00\00|\FF\FF\FF\A4\00\00\00\EC\FF\FF\FF\EC\00\00\00" }>
@seg_400558__eh_frame = internal constant %seg_400558__eh_frame_type <{ [208 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00(\FE\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00,\FE\FF\FF\02\00\00\00\00\00\00\00\14\00\00\000\00\00\00\D0\FE\FF\FF\09\00\00\00\00\00\00\00\00\00\00\00D\00\00\00H\00\00\00\D0\FE\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\90\00\00\00\F8\FE\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>

; Function Declaraions
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*)
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32)
declare void @llvm.lifetime.start(i64, i8* nocapture)
declare void @llvm.lifetime.end(i64, i8* nocapture)
declare i32 @llvm.ctpop.i32(i32)
declare i32 @llvm.bswap.i32(i32)
declare i64 @llvm.bswap.i64(i64)
declare i32 @llvm.cttz.i32(i32, i1)
declare i64 @llvm.cttz.i64(i64, i1)
declare i32 @llvm.ctlz.i32(i32, i1)
declare i64 @llvm.ctlz.i64(i64, i1)
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1)
declare double @llvm.nearbyint.f64(double)
declare double @llvm.fabs.f64(double)
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>)
declare <4 x double> @llvm.fabs.v4f64(<4 x double>)
declare double @llvm.trunc.f64(double)
declare <4 x double> @llvm.trunc.v4f64(<4 x double>)
declare float @llvm.nearbyint.f32(float)
declare float @llvm.fabs.f32(float)
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>)
declare <4 x float> @llvm.fabs.v4f32(<4 x float>)
declare float @llvm.trunc.f32(float)
declare <4 x float> @llvm.trunc.v4f32(<4 x float>)
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1)

; Buiitins  
declare double @atan(double) local_unnamed_addr #9
declare double @cos(double) local_unnamed_addr #9
declare double @sin(double) local_unnamed_addr #9
declare double @sqrt(double) local_unnamed_addr #9
declare double @tan(double) local_unnamed_addr #9
declare extern_weak x86_64_sysvcc i64 @abort() #18
declare extern_weak x86_64_sysvcc i64 @abs(i64) #18
declare extern_weak x86_64_sysvcc i64 @asin(i64) #18
declare extern_weak x86_64_sysvcc i64 @atof(i64) #18
declare extern_weak x86_64_sysvcc i64 @atoi(i64) #18
declare extern_weak x86_64_sysvcc i64 @atol(i64) #18
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @clock() #18
declare extern_weak x86_64_sysvcc i64 @cosf(i64) #18
declare extern_weak x86_64_sysvcc i64 @exit(i64) #18
declare extern_weak x86_64_sysvcc i64 @exp(i64) #18
declare extern_weak x86_64_sysvcc i64 @fflush(i64) #18
declare extern_weak x86_64_sysvcc i64 @floor(i64) #18
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @fputs(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @free(i64) #18
declare extern_weak x86_64_sysvcc i64 @fwrite(i64, i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @getchar() #18
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @__isoc99_fscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @__isoc99_scanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @__isoc99_sscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @log(i64) #18
declare extern_weak x86_64_sysvcc i64 @lrand48() #18
declare extern_weak x86_64_sysvcc i64 @malloc(i64) #18
declare extern_weak x86_64_sysvcc i64 @memalign(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @perror(i64) #18
declare extern_weak x86_64_sysvcc i64 @posix_memalign(i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @pow(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @putchar(i64) #18
declare extern_weak x86_64_sysvcc i64 @puts(i64) #18
declare extern_weak x86_64_sysvcc i64 @rand() #18
declare extern_weak x86_64_sysvcc i64 @random() #18
declare extern_weak x86_64_sysvcc i64 @realloc(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @seed48(i64) #18
declare extern_weak x86_64_sysvcc i64 @sinf(i64) #18
declare extern_weak x86_64_sysvcc i64 @sprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @srand(i64) #18
declare extern_weak x86_64_sysvcc i64 @strcat(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @strcmp(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @strcpy(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @strdup(i64) #18
declare extern_weak x86_64_sysvcc i64 @strlen(i64) #18
declare extern_weak x86_64_sysvcc i64 @strncmp(i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @strtoll(i64, i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @time(i64) #18
declare extern_weak x86_64_sysvcc i64 @ungetc(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @pthread_join(i64, i64) #18
declare extern_weak x86_64_sysvcc i64 @pthread_create(i64, i64, i64, i64) #18

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*)

define internal %struct.Memory* @ext_pthread_create(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64)* @pthread_create to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_pthread_join(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @pthread_join to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_gettimeofday(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext___isoc99_scanf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_scanf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}


define internal %struct.Memory* @ext_fflush(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @fflush to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext___isoc99_fscanf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_fscanf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext___isoc99_sscanf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_sscanf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_memcpy(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_posix_memalign(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_fprintf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_memset(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_perror(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @perror to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_floor(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @floor to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_malloc(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_atoi(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_strcpy(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @strcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_ungetc(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @ungetc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_pow(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @pow to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_seed48(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @seed48 to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_asin(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @asin to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_strdup(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @strdup to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_cosf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @cosf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_abs(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_abort(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @abort to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_exit(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_putchar(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @putchar to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_strncmp(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @strncmp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_strcmp(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_rand(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @rand to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_calloc(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_fwrite(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64)* @fwrite to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_realloc(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @realloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}


define internal %struct.Memory* @ext_log(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @log to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}


define internal %struct.Memory* @ext_exp(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_sprintf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @sprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_strcat(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @strcat to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_puts(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @puts to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_atol(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atol to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_atof(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atof to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_clock(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_strlen(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @strlen to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_free(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_srand(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @srand to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_fputs(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @fputs to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_strtoll(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @strtoll to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_sinf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @sinf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_time(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @time to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_printf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_memalign(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @memalign to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_random(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @random to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_lrand48(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @lrand48 to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @ext_getchar(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @getchar to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

declare %struct.Memory* @ext_sqrt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)
declare %struct.Memory* @ext_atan(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias)
declare %struct.Memory* @ext_cos(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) 
declare %struct.Memory* @ext_tan(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) 
declare %struct.Memory* @ext_sin(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) 

declare %struct.Memory* @sub_48aaa0.RestoreMV8x8(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)
declare %struct.Memory* @sub_48bbd0.SetMotionVectorsMB(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

; Data Access Globals
%G_0x6cb8f8_type = type <{ [8 x i8] }>
@G_0x6cb8f8= global %G_0x6cb8f8_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G_0x6cb900_type = type <{ [8 x i8] }>
@G_0x6cb900= global %G_0x6cb900_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G_0x6cb918_type = type <{ [8 x i8] }>
@G_0x6cb918= global %G_0x6cb918_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G_0x6cc5f0_type = type <{ [8 x i8] }>
@G_0x6cc5f0= global %G_0x6cc5f0_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G_0x6cc600_type = type <{ [8 x i8] }>
@G_0x6cc600= global %G_0x6cc600_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G_0x6d2080_type = type <{ [4 x i8] }>
@G_0x6d2080= global %G_0x6d2080_type <{ [4 x i8] c"\00\00\00\00" }>
%G_0x6d4518_type = type <{ [8 x i8] }>
@G_0x6d4518= global %G_0x6d4518_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G_0x6d4688_type = type <{ [4 x i8] }>
@G_0x6d4688= global %G_0x6d4688_type <{ [4 x i8] c"\00\00\00\00" }>
%G_0x6f8f10_type = type <{ [8 x i8] }>
@G_0x6f8f10= global %G_0x6f8f10_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G_0x70fcf0_type = type <{ [8 x i8] }>
@G_0x70fcf0= global %G_0x70fcf0_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G_0x70fd50_type = type <{ [4 x i8] }>
@G_0x70fd50= global %G_0x70fd50_type <{ [4 x i8] c"\00\00\00\00" }>
%G_0x710a58_type = type <{ [4 x i8] }>
@G_0x710a58= global %G_0x710a58_type <{ [4 x i8] c"\00\00\00\00" }>
%G_0x723710_type = type <{ [4 x i8] }>
@G_0x723710= global %G_0x723710_type <{ [4 x i8] c"\00\00\00\00" }>
%G_0x7247a0_type = type <{ [4 x i8] }>
@G_0x7247a0= global %G_0x7247a0_type <{ [4 x i8] c"\00\00\00\00" }>
%G__0x6d1290_type = type <{ [8 x i8] }>
@G__0x6d1290= global %G__0x6d1290_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G__0x6f9360_type = type <{ [8 x i8] }>
@G__0x6f9360= global %G__0x6f9360_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G__0x7236a0_type = type <{ [8 x i8] }>
@G__0x7236a0= global %G__0x7236a0_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G__0x7242b0_type = type <{ [8 x i8] }>
@G__0x7242b0= global %G__0x7242b0_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G__0x725320_type = type <{ [8 x i8] }>
@G__0x725320= global %G__0x725320_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>
%G__0x726210_type = type <{ [8 x i8] }>
@G__0x726210= global %G__0x726210_type <{ [8 x i8] c"\00\00\00\00\00\00\00\00" }>


define %struct.Memory* @set_stored_macroblock_parameters(%struct.State* noalias , i64, %struct.Memory* noalias) alwaysinline  {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %3, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %MEMORY = alloca %struct.Memory*, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8

  ; Code: .set_stored_macroblock_parameters:	 RIP: 48db80	 Bytes: 0
  ; Code: pushq %rbp	 RIP: 48db80	 Bytes: 1
  %loadMem_48db80 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48db80 = call %struct.Memory* @routine_pushq__rbp(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48db80)
  store %struct.Memory* %call_48db80, %struct.Memory** %MEMORY

  ; Code: movq %rsp, %rbp	 RIP: 48db81	 Bytes: 3
  %loadMem_48db81 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48db81 = call %struct.Memory* @routine_movq__rsp___rbp(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48db81)
  store %struct.Memory* %call_48db81, %struct.Memory** %MEMORY

  ; Code: pushq %rbx	 RIP: 48db84	 Bytes: 1
  %loadMem_48db84 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48db84 = call %struct.Memory* @routine_pushq__rbx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48db84)
  store %struct.Memory* %call_48db84, %struct.Memory** %MEMORY

  ; Code: subq $0x108, %rsp	 RIP: 48db85	 Bytes: 7
  %loadMem_48db85 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48db85 = call %struct.Memory* @routine_subq__0x108___rsp(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48db85)
  store %struct.Memory* %call_48db85, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48db8c	 Bytes: 8
  %loadMem_48db8c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48db8c = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48db8c)
  store %struct.Memory* %call_48db8c, %struct.Memory** %MEMORY

  ; Code: movq 0x3758(%rax), %rax	 RIP: 48db94	 Bytes: 7
  %loadMem_48db94 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48db94 = call %struct.Memory* @routine_movq_0x3758__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48db94)
  store %struct.Memory* %call_48db94, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48db9b	 Bytes: 8
  %loadMem_48db9b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48db9b = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48db9b)
  store %struct.Memory* %call_48db9b, %struct.Memory** %MEMORY

  ; Code: movslq 0xc(%rcx), %rcx	 RIP: 48dba3	 Bytes: 4
  %loadMem_48dba3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dba3 = call %struct.Memory* @routine_movslq_0xc__rcx____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dba3)
  store %struct.Memory* %call_48dba3, %struct.Memory** %MEMORY

  ; Code: imulq $0x278, %rcx, %rcx	 RIP: 48dba7	 Bytes: 7
  %loadMem_48dba7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dba7 = call %struct.Memory* @routine_imulq__0x278___rcx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dba7)
  store %struct.Memory* %call_48dba7, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48dbae	 Bytes: 3
  %loadMem_48dbae = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbae = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbae)
  store %struct.Memory* %call_48dbae, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x38(%rbp)	 RIP: 48dbb1	 Bytes: 4
  %loadMem_48dbb1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbb1 = call %struct.Memory* @routine_movq__rax__MINUS0x38__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbb1)
  store %struct.Memory* %call_48dbb1, %struct.Memory** %MEMORY

  ; Code: movl 0x7247a0, %edx	 RIP: 48dbb5	 Bytes: 7
  %loadMem_48dbb5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbb5 = call %struct.Memory* @routine_movl_0x7247a0___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbb5)
  store %struct.Memory* %call_48dbb5, %struct.Memory** %MEMORY

  ; Code: movl %edx, -0x3c(%rbp)	 RIP: 48dbbc	 Bytes: 3
  %loadMem_48dbbc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbbc = call %struct.Memory* @routine_movl__edx__MINUS0x3c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbbc)
  store %struct.Memory* %call_48dbbc, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48dbbf	 Bytes: 8
  %loadMem_48dbbf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbbf = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbbf)
  store %struct.Memory* %call_48dbbf, %struct.Memory** %MEMORY

  ; Code: cmpl $0x1, 0x18(%rax)	 RIP: 48dbc7	 Bytes: 4
  %loadMem_48dbc7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbc7 = call %struct.Memory* @routine_cmpl__0x1__0x18__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbc7)
  store %struct.Memory* %call_48dbc7, %struct.Memory** %MEMORY

  ; Code: sete %sil	 RIP: 48dbcb	 Bytes: 4
  %loadMem_48dbcb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbcb = call %struct.Memory* @routine_sete__sil(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbcb)
  store %struct.Memory* %call_48dbcb, %struct.Memory** %MEMORY

  ; Code: andb $0x1, %sil	 RIP: 48dbcf	 Bytes: 4
  %loadMem_48dbcf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbcf = call %struct.Memory* @routine_andb__0x1___sil(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbcf)
  store %struct.Memory* %call_48dbcf, %struct.Memory** %MEMORY

  ; Code: movzbl %sil, %edx	 RIP: 48dbd3	 Bytes: 4
  %loadMem_48dbd3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbd3 = call %struct.Memory* @routine_movzbl__sil___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbd3)
  store %struct.Memory* %call_48dbd3, %struct.Memory** %MEMORY

  ; Code: movl %edx, -0x40(%rbp)	 RIP: 48dbd7	 Bytes: 3
  %loadMem_48dbd7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbd7 = call %struct.Memory* @routine_movl__edx__MINUS0x40__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbd7)
  store %struct.Memory* %call_48dbd7, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48dbda	 Bytes: 8
  %loadMem_48dbda = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbda = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbda)
  store %struct.Memory* %call_48dbda, %struct.Memory** %MEMORY

  ; Code: movq 0x68(%rax), %rax	 RIP: 48dbe2	 Bytes: 4
  %loadMem_48dbe2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbe2 = call %struct.Memory* @routine_movq_0x68__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbe2)
  store %struct.Memory* %call_48dbe2, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x48(%rbp)	 RIP: 48dbe6	 Bytes: 4
  %loadMem_48dbe6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbe6 = call %struct.Memory* @routine_movq__rax__MINUS0x48__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbe6)
  store %struct.Memory* %call_48dbe6, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48dbea	 Bytes: 8
  %loadMem_48dbea = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbea = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbea)
  store %struct.Memory* %call_48dbea, %struct.Memory** %MEMORY

  ; Code: movq 0x1918(%rax), %rax	 RIP: 48dbf2	 Bytes: 7
  %loadMem_48dbf2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbf2 = call %struct.Memory* @routine_movq_0x1918__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbf2)
  store %struct.Memory* %call_48dbf2, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x50(%rbp)	 RIP: 48dbf9	 Bytes: 4
  %loadMem_48dbf9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbf9 = call %struct.Memory* @routine_movq__rax__MINUS0x50__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbf9)
  store %struct.Memory* %call_48dbf9, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48dbfd	 Bytes: 8
  %loadMem_48dbfd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dbfd = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dbfd)
  store %struct.Memory* %call_48dbfd, %struct.Memory** %MEMORY

  ; Code: movq 0x1940(%rax), %rax	 RIP: 48dc05	 Bytes: 7
  %loadMem_48dc05 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc05 = call %struct.Memory* @routine_movq_0x1940__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc05)
  store %struct.Memory* %call_48dc05, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x58(%rbp)	 RIP: 48dc0c	 Bytes: 4
  %loadMem_48dc0c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc0c = call %struct.Memory* @routine_movq__rax__MINUS0x58__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc0c)
  store %struct.Memory* %call_48dc0c, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48dc10	 Bytes: 8
  %loadMem_48dc10 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc10 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc10)
  store %struct.Memory* %call_48dc10, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48dc18	 Bytes: 7
  %loadMem_48dc18 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc18 = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc18)
  store %struct.Memory* %call_48dc18, %struct.Memory** %MEMORY

  ; Code: je .L_48dc64	 RIP: 48dc1f	 Bytes: 6
  %loadMem_48dc1f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc1f = call %struct.Memory* @routine_je_.L_48dc64(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc1f, i8* %BRANCH_TAKEN, i64 69, i64 6, i64 6)
  store %struct.Memory* %call_48dc1f, %struct.Memory** %MEMORY

  %loadBr_48dc1f = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dc1f = icmp eq i8 %loadBr_48dc1f, 1
  br i1 %cmpBr_48dc1f, label %block_.L_48dc64, label %block_48dc25

block_48dc25:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48dc25	 Bytes: 4
  %loadMem_48dc25 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc25 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc25)
  store %struct.Memory* %call_48dc25, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x214(%rax)	 RIP: 48dc29	 Bytes: 7
  %loadMem_48dc29 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc29 = call %struct.Memory* @routine_cmpl__0x0__0x214__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc29)
  store %struct.Memory* %call_48dc29, %struct.Memory** %MEMORY

  ; Code: je .L_48dc64	 RIP: 48dc30	 Bytes: 6
  %loadMem_48dc30 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc30 = call %struct.Memory* @routine_je_.L_48dc64(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc30, i8* %BRANCH_TAKEN, i64 52, i64 6, i64 6)
  store %struct.Memory* %call_48dc30, %struct.Memory** %MEMORY

  %loadBr_48dc30 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dc30 = icmp eq i8 %loadBr_48dc30, 1
  br i1 %cmpBr_48dc30, label %block_.L_48dc64, label %block_48dc36

block_48dc36:
  ; Code: movl $0x2, %eax	 RIP: 48dc36	 Bytes: 5
  %loadMem_48dc36 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc36 = call %struct.Memory* @routine_movl__0x2___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc36)
  store %struct.Memory* %call_48dc36, %struct.Memory** %MEMORY

  ; Code: movl $0x4, %ecx	 RIP: 48dc3b	 Bytes: 5
  %loadMem_48dc3b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc3b = call %struct.Memory* @routine_movl__0x4___ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc3b)
  store %struct.Memory* %call_48dc3b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48dc40	 Bytes: 8
  %loadMem_48dc40 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc40 = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc40)
  store %struct.Memory* %call_48dc40, %struct.Memory** %MEMORY

  ; Code: movl 0xc(%rdx), %esi	 RIP: 48dc48	 Bytes: 3
  %loadMem_48dc48 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc48 = call %struct.Memory* @routine_movl_0xc__rdx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc48)
  store %struct.Memory* %call_48dc48, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x74(%rbp)	 RIP: 48dc4b	 Bytes: 3
  %loadMem_48dc4b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc4b = call %struct.Memory* @routine_movl__eax__MINUS0x74__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc4b)
  store %struct.Memory* %call_48dc4b, %struct.Memory** %MEMORY

  ; Code: movl %esi, %eax	 RIP: 48dc4e	 Bytes: 2
  %loadMem_48dc4e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc4e = call %struct.Memory* @routine_movl__esi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc4e)
  store %struct.Memory* %call_48dc4e, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48dc50	 Bytes: 1
  %loadMem_48dc50 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc50 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc50)
  store %struct.Memory* %call_48dc50, %struct.Memory** %MEMORY

  ; Code: movl -0x74(%rbp), %esi	 RIP: 48dc51	 Bytes: 3
  %loadMem_48dc51 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc51 = call %struct.Memory* @routine_movl_MINUS0x74__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc51)
  store %struct.Memory* %call_48dc51, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48dc54	 Bytes: 2
  %loadMem_48dc54 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc54 = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc54)
  store %struct.Memory* %call_48dc54, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, %edx	 RIP: 48dc56	 Bytes: 3
  %loadMem_48dc56 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc56 = call %struct.Memory* @routine_cmpl__0x0___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc56)
  store %struct.Memory* %call_48dc56, %struct.Memory** %MEMORY

  ; Code: cmovnel %ecx, %esi	 RIP: 48dc59	 Bytes: 3
  %loadMem_48dc59 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc59 = call %struct.Memory* @routine_cmovnel__ecx___esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc59)
  store %struct.Memory* %call_48dc59, %struct.Memory** %MEMORY

  ; Code: movl %esi, -0x78(%rbp)	 RIP: 48dc5c	 Bytes: 3
  %loadMem_48dc5c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc5c = call %struct.Memory* @routine_movl__esi__MINUS0x78__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc5c)
  store %struct.Memory* %call_48dc5c, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48dc6e	 RIP: 48dc5f	 Bytes: 5
  %loadMem_48dc5f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc5f = call %struct.Memory* @routine_jmpq_.L_48dc6e(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc5f, i64 15, i64 5)
  store %struct.Memory* %call_48dc5f, %struct.Memory** %MEMORY

  br label %block_.L_48dc6e

  ; Code: .L_48dc64:	 RIP: 48dc64	 Bytes: 0
block_.L_48dc64:

  ; Code: xorl %eax, %eax	 RIP: 48dc64	 Bytes: 2
  %loadMem_48dc64 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc64 = call %struct.Memory* @routine_xorl__eax___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc64)
  store %struct.Memory* %call_48dc64, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x78(%rbp)	 RIP: 48dc66	 Bytes: 3
  %loadMem_48dc66 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc66 = call %struct.Memory* @routine_movl__eax__MINUS0x78__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc66)
  store %struct.Memory* %call_48dc66, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48dc6e	 RIP: 48dc69	 Bytes: 5
  %loadMem_48dc69 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc69 = call %struct.Memory* @routine_jmpq_.L_48dc6e(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc69, i64 5, i64 5)
  store %struct.Memory* %call_48dc69, %struct.Memory** %MEMORY

  br label %block_.L_48dc6e

  ; Code: .L_48dc6e:	 RIP: 48dc6e	 Bytes: 0
block_.L_48dc6e:

  ; Code: movl -0x78(%rbp), %eax	 RIP: 48dc6e	 Bytes: 3
  %loadMem_48dc6e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc6e = call %struct.Memory* @routine_movl_MINUS0x78__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc6e)
  store %struct.Memory* %call_48dc6e, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x5c(%rbp)	 RIP: 48dc71	 Bytes: 3
  %loadMem_48dc71 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc71 = call %struct.Memory* @routine_movl__eax__MINUS0x5c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc71)
  store %struct.Memory* %call_48dc71, %struct.Memory** %MEMORY

  ; Code: movl $0x0, -0x10(%rbp)	 RIP: 48dc74	 Bytes: 7
  %loadMem_48dc74 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc74 = call %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc74)
  store %struct.Memory* %call_48dc74, %struct.Memory** %MEMORY

  ; Code: .L_48dc7b:	 RIP: 48dc7b	 Bytes: 0
  br label %block_.L_48dc7b
block_.L_48dc7b:

  ; Code: cmpl $0x10, -0x10(%rbp)	 RIP: 48dc7b	 Bytes: 4
  %loadMem_48dc7b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc7b = call %struct.Memory* @routine_cmpl__0x10__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc7b)
  store %struct.Memory* %call_48dc7b, %struct.Memory** %MEMORY

  ; Code: jge .L_48dd5d	 RIP: 48dc7f	 Bytes: 6
  %loadMem_48dc7f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc7f = call %struct.Memory* @routine_jge_.L_48dd5d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc7f, i8* %BRANCH_TAKEN, i64 222, i64 6, i64 6)
  store %struct.Memory* %call_48dc7f, %struct.Memory** %MEMORY

  %loadBr_48dc7f = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dc7f = icmp eq i8 %loadBr_48dc7f, 1
  br i1 %cmpBr_48dc7f, label %block_.L_48dd5d, label %block_48dc85

block_48dc85:
  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48dc85	 Bytes: 7
  %loadMem_48dc85 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc85 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc85)
  store %struct.Memory* %call_48dc85, %struct.Memory** %MEMORY

  ; Code: .L_48dc8c:	 RIP: 48dc8c	 Bytes: 0
  br label %block_.L_48dc8c
block_.L_48dc8c:

  ; Code: cmpl $0x10, -0xc(%rbp)	 RIP: 48dc8c	 Bytes: 4
  %loadMem_48dc8c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc8c = call %struct.Memory* @routine_cmpl__0x10__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc8c)
  store %struct.Memory* %call_48dc8c, %struct.Memory** %MEMORY

  ; Code: jge .L_48dd4a	 RIP: 48dc90	 Bytes: 6
  %loadMem_48dc90 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc90 = call %struct.Memory* @routine_jge_.L_48dd4a(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc90, i8* %BRANCH_TAKEN, i64 186, i64 6, i64 6)
  store %struct.Memory* %call_48dc90, %struct.Memory** %MEMORY

  %loadBr_48dc90 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dc90 = icmp eq i8 %loadBr_48dc90, 1
  br i1 %cmpBr_48dc90, label %block_.L_48dd4a, label %block_48dc96

block_48dc96:
  ; Code: movq $0x725320, %rax	 RIP: 48dc96	 Bytes: 10
  %loadMem_48dc96 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dc96 = call %struct.Memory* @routine_movq__0x725320___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dc96)
  store %struct.Memory* %call_48dc96, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48dca0	 Bytes: 4
  %loadMem_48dca0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dca0 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dca0)
  store %struct.Memory* %call_48dca0, %struct.Memory** %MEMORY

  ; Code: shlq $0x5, %rcx	 RIP: 48dca4	 Bytes: 4
  %loadMem_48dca4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dca4 = call %struct.Memory* @routine_shlq__0x5___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dca4)
  store %struct.Memory* %call_48dca4, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48dca8	 Bytes: 3
  %loadMem_48dca8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dca8 = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dca8)
  store %struct.Memory* %call_48dca8, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48dcab	 Bytes: 4
  %loadMem_48dcab = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcab = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcab)
  store %struct.Memory* %call_48dcab, %struct.Memory** %MEMORY

  ; Code: movw (%rax,%rcx,2), %dx	 RIP: 48dcaf	 Bytes: 4
  %loadMem_48dcaf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcaf = call %struct.Memory* @routine_movw___rax__rcx_2____dx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcaf)
  store %struct.Memory* %call_48dcaf, %struct.Memory** %MEMORY

  ; Code: movq -0x50(%rbp), %rax	 RIP: 48dcb3	 Bytes: 4
  %loadMem_48dcb3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcb3 = call %struct.Memory* @routine_movq_MINUS0x50__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcb3)
  store %struct.Memory* %call_48dcb3, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48dcb7	 Bytes: 8
  %loadMem_48dcb7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcb7 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcb7)
  store %struct.Memory* %call_48dcb7, %struct.Memory** %MEMORY

  ; Code: movl 0x9c(%rcx), %esi	 RIP: 48dcbf	 Bytes: 6
  %loadMem_48dcbf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcbf = call %struct.Memory* @routine_movl_0x9c__rcx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcbf)
  store %struct.Memory* %call_48dcbf, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %esi	 RIP: 48dcc5	 Bytes: 3
  %loadMem_48dcc5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcc5 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcc5)
  store %struct.Memory* %call_48dcc5, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rcx	 RIP: 48dcc8	 Bytes: 3
  %loadMem_48dcc8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcc8 = call %struct.Memory* @routine_movslq__esi___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcc8)
  store %struct.Memory* %call_48dcc8, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48dccb	 Bytes: 4
  %loadMem_48dccb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dccb = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dccb)
  store %struct.Memory* %call_48dccb, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48dccf	 Bytes: 8
  %loadMem_48dccf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dccf = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dccf)
  store %struct.Memory* %call_48dccf, %struct.Memory** %MEMORY

  ; Code: movl 0x98(%rcx), %esi	 RIP: 48dcd7	 Bytes: 6
  %loadMem_48dcd7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcd7 = call %struct.Memory* @routine_movl_0x98__rcx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcd7)
  store %struct.Memory* %call_48dcd7, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %esi	 RIP: 48dcdd	 Bytes: 3
  %loadMem_48dcdd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcdd = call %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcdd)
  store %struct.Memory* %call_48dcdd, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rcx	 RIP: 48dce0	 Bytes: 3
  %loadMem_48dce0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dce0 = call %struct.Memory* @routine_movslq__esi___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dce0)
  store %struct.Memory* %call_48dce0, %struct.Memory** %MEMORY

  ; Code: movw %dx, (%rax,%rcx,2)	 RIP: 48dce3	 Bytes: 4
  %loadMem_48dce3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dce3 = call %struct.Memory* @routine_movw__dx____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dce3)
  store %struct.Memory* %call_48dce3, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48dce7	 Bytes: 8
  %loadMem_48dce7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dce7 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dce7)
  store %struct.Memory* %call_48dce7, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48dcef	 Bytes: 7
  %loadMem_48dcef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcef = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcef)
  store %struct.Memory* %call_48dcef, %struct.Memory** %MEMORY

  ; Code: je .L_48dd37	 RIP: 48dcf6	 Bytes: 6
  %loadMem_48dcf6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcf6 = call %struct.Memory* @routine_je_.L_48dd37(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcf6, i8* %BRANCH_TAKEN, i64 65, i64 6, i64 6)
  store %struct.Memory* %call_48dcf6, %struct.Memory** %MEMORY

  %loadBr_48dcf6 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dcf6 = icmp eq i8 %loadBr_48dcf6, 1
  br i1 %cmpBr_48dcf6, label %block_.L_48dd37, label %block_48dcfc

block_48dcfc:
  ; Code: movq $0x725320, %rax	 RIP: 48dcfc	 Bytes: 10
  %loadMem_48dcfc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dcfc = call %struct.Memory* @routine_movq__0x725320___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dcfc)
  store %struct.Memory* %call_48dcfc, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48dd06	 Bytes: 4
  %loadMem_48dd06 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd06 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd06)
  store %struct.Memory* %call_48dd06, %struct.Memory** %MEMORY

  ; Code: shlq $0x5, %rcx	 RIP: 48dd0a	 Bytes: 4
  %loadMem_48dd0a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd0a = call %struct.Memory* @routine_shlq__0x5___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd0a)
  store %struct.Memory* %call_48dd0a, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48dd0e	 Bytes: 3
  %loadMem_48dd0e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd0e = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd0e)
  store %struct.Memory* %call_48dd0e, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48dd11	 Bytes: 4
  %loadMem_48dd11 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd11 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd11)
  store %struct.Memory* %call_48dd11, %struct.Memory** %MEMORY

  ; Code: movzwl (%rax,%rcx,2), %edx	 RIP: 48dd15	 Bytes: 4
  %loadMem_48dd15 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd15 = call %struct.Memory* @routine_movzwl___rax__rcx_2____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd15)
  store %struct.Memory* %call_48dd15, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48dd19	 Bytes: 8
  %loadMem_48dd19 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd19 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd19)
  store %struct.Memory* %call_48dd19, %struct.Memory** %MEMORY

  ; Code: addq $0x8, %rax	 RIP: 48dd21	 Bytes: 4
  %loadMem_48dd21 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd21 = call %struct.Memory* @routine_addq__0x8___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd21)
  store %struct.Memory* %call_48dd21, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48dd25	 Bytes: 4
  %loadMem_48dd25 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd25 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd25)
  store %struct.Memory* %call_48dd25, %struct.Memory** %MEMORY

  ; Code: shlq $0x6, %rcx	 RIP: 48dd29	 Bytes: 4
  %loadMem_48dd29 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd29 = call %struct.Memory* @routine_shlq__0x6___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd29)
  store %struct.Memory* %call_48dd29, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48dd2d	 Bytes: 3
  %loadMem_48dd2d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd2d = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd2d)
  store %struct.Memory* %call_48dd2d, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48dd30	 Bytes: 4
  %loadMem_48dd30 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd30 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd30)
  store %struct.Memory* %call_48dd30, %struct.Memory** %MEMORY

  ; Code: movl %edx, (%rax,%rcx,4)	 RIP: 48dd34	 Bytes: 3
  %loadMem_48dd34 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd34 = call %struct.Memory* @routine_movl__edx____rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd34)
  store %struct.Memory* %call_48dd34, %struct.Memory** %MEMORY

  ; Code: .L_48dd37:	 RIP: 48dd37	 Bytes: 0
  br label %block_.L_48dd37
block_.L_48dd37:

  ; Code: jmpq .L_48dd3c	 RIP: 48dd37	 Bytes: 5
  %loadMem_48dd37 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd37 = call %struct.Memory* @routine_jmpq_.L_48dd3c(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd37, i64 5, i64 5)
  store %struct.Memory* %call_48dd37, %struct.Memory** %MEMORY

  br label %block_.L_48dd3c

  ; Code: .L_48dd3c:	 RIP: 48dd3c	 Bytes: 0
block_.L_48dd3c:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48dd3c	 Bytes: 3
  %loadMem_48dd3c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd3c = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd3c)
  store %struct.Memory* %call_48dd3c, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48dd3f	 Bytes: 3
  %loadMem_48dd3f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd3f = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd3f)
  store %struct.Memory* %call_48dd3f, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48dd42	 Bytes: 3
  %loadMem_48dd42 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd42 = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd42)
  store %struct.Memory* %call_48dd42, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48dc8c	 RIP: 48dd45	 Bytes: 5
  %loadMem_48dd45 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd45 = call %struct.Memory* @routine_jmpq_.L_48dc8c(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd45, i64 -185, i64 5)
  store %struct.Memory* %call_48dd45, %struct.Memory** %MEMORY

  br label %block_.L_48dc8c

  ; Code: .L_48dd4a:	 RIP: 48dd4a	 Bytes: 0
block_.L_48dd4a:

  ; Code: jmpq .L_48dd4f	 RIP: 48dd4a	 Bytes: 5
  %loadMem_48dd4a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd4a = call %struct.Memory* @routine_jmpq_.L_48dd4f(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd4a, i64 5, i64 5)
  store %struct.Memory* %call_48dd4a, %struct.Memory** %MEMORY

  br label %block_.L_48dd4f

  ; Code: .L_48dd4f:	 RIP: 48dd4f	 Bytes: 0
block_.L_48dd4f:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48dd4f	 Bytes: 3
  %loadMem_48dd4f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd4f = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd4f)
  store %struct.Memory* %call_48dd4f, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48dd52	 Bytes: 3
  %loadMem_48dd52 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd52 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd52)
  store %struct.Memory* %call_48dd52, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48dd55	 Bytes: 3
  %loadMem_48dd55 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd55 = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd55)
  store %struct.Memory* %call_48dd55, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48dc7b	 RIP: 48dd58	 Bytes: 5
  %loadMem_48dd58 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd58 = call %struct.Memory* @routine_jmpq_.L_48dc7b(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd58, i64 -221, i64 5)
  store %struct.Memory* %call_48dd58, %struct.Memory** %MEMORY

  br label %block_.L_48dc7b

  ; Code: .L_48dd5d:	 RIP: 48dd5d	 Bytes: 0
block_.L_48dd5d:

  ; Code: movq 0x6cb900, %rax	 RIP: 48dd5d	 Bytes: 8
  %loadMem_48dd5d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd5d = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd5d)
  store %struct.Memory* %call_48dd5d, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11bfc(%rax)	 RIP: 48dd65	 Bytes: 7
  %loadMem_48dd65 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd65 = call %struct.Memory* @routine_cmpl__0x0__0x11bfc__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd65)
  store %struct.Memory* %call_48dd65, %struct.Memory** %MEMORY

  ; Code: je .L_48df12	 RIP: 48dd6c	 Bytes: 6
  %loadMem_48dd6c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd6c = call %struct.Memory* @routine_je_.L_48df12(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd6c, i8* %BRANCH_TAKEN, i64 422, i64 6, i64 6)
  store %struct.Memory* %call_48dd6c, %struct.Memory** %MEMORY

  %loadBr_48dd6c = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dd6c = icmp eq i8 %loadBr_48dd6c, 1
  br i1 %cmpBr_48dd6c, label %block_.L_48df12, label %block_48dd72

block_48dd72:
  ; Code: movl $0x0, -0x10(%rbp)	 RIP: 48dd72	 Bytes: 7
  %loadMem_48dd72 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd72 = call %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd72)
  store %struct.Memory* %call_48dd72, %struct.Memory** %MEMORY

  ; Code: .L_48dd79:	 RIP: 48dd79	 Bytes: 0
  br label %block_.L_48dd79
block_.L_48dd79:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48dd79	 Bytes: 3
  %loadMem_48dd79 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd79 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd79)
  store %struct.Memory* %call_48dd79, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48dd7c	 Bytes: 8
  %loadMem_48dd7c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd7c = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd7c)
  store %struct.Memory* %call_48dd7c, %struct.Memory** %MEMORY

  ; Code: cmpl 0x11c08(%rcx), %eax	 RIP: 48dd84	 Bytes: 6
  %loadMem_48dd84 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd84 = call %struct.Memory* @routine_cmpl_0x11c08__rcx____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd84)
  store %struct.Memory* %call_48dd84, %struct.Memory** %MEMORY

  ; Code: jge .L_48df0d	 RIP: 48dd8a	 Bytes: 6
  %loadMem_48dd8a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd8a = call %struct.Memory* @routine_jge_.L_48df0d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd8a, i8* %BRANCH_TAKEN, i64 387, i64 6, i64 6)
  store %struct.Memory* %call_48dd8a, %struct.Memory** %MEMORY

  %loadBr_48dd8a = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dd8a = icmp eq i8 %loadBr_48dd8a, 1
  br i1 %cmpBr_48dd8a, label %block_.L_48df0d, label %block_48dd90

block_48dd90:
  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48dd90	 Bytes: 7
  %loadMem_48dd90 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd90 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd90)
  store %struct.Memory* %call_48dd90, %struct.Memory** %MEMORY

  ; Code: .L_48dd97:	 RIP: 48dd97	 Bytes: 0
  br label %block_.L_48dd97
block_.L_48dd97:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48dd97	 Bytes: 3
  %loadMem_48dd97 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd97 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd97)
  store %struct.Memory* %call_48dd97, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48dd9a	 Bytes: 8
  %loadMem_48dd9a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dd9a = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dd9a)
  store %struct.Memory* %call_48dd9a, %struct.Memory** %MEMORY

  ; Code: cmpl 0x11c04(%rcx), %eax	 RIP: 48dda2	 Bytes: 6
  %loadMem_48dda2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dda2 = call %struct.Memory* @routine_cmpl_0x11c04__rcx____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dda2)
  store %struct.Memory* %call_48dda2, %struct.Memory** %MEMORY

  ; Code: jge .L_48defa	 RIP: 48dda8	 Bytes: 6
  %loadMem_48dda8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dda8 = call %struct.Memory* @routine_jge_.L_48defa(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dda8, i8* %BRANCH_TAKEN, i64 338, i64 6, i64 6)
  store %struct.Memory* %call_48dda8, %struct.Memory** %MEMORY

  %loadBr_48dda8 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dda8 = icmp eq i8 %loadBr_48dda8, 1
  br i1 %cmpBr_48dda8, label %block_.L_48defa, label %block_48ddae

block_48ddae:
  ; Code: movq $0x6f9360, %rax	 RIP: 48ddae	 Bytes: 10
  %loadMem_48ddae = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddae = call %struct.Memory* @routine_movq__0x6f9360___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddae)
  store %struct.Memory* %call_48ddae, %struct.Memory** %MEMORY

  ; Code: movq $0x726210, %rcx	 RIP: 48ddb8	 Bytes: 10
  %loadMem_48ddb8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddb8 = call %struct.Memory* @routine_movq__0x726210___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddb8)
  store %struct.Memory* %call_48ddb8, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rdx	 RIP: 48ddc2	 Bytes: 4
  %loadMem_48ddc2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddc2 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddc2)
  store %struct.Memory* %call_48ddc2, %struct.Memory** %MEMORY

  ; Code: shlq $0x5, %rdx	 RIP: 48ddc6	 Bytes: 4
  %loadMem_48ddc6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddc6 = call %struct.Memory* @routine_shlq__0x5___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddc6)
  store %struct.Memory* %call_48ddc6, %struct.Memory** %MEMORY

  ; Code: addq %rdx, %rcx	 RIP: 48ddca	 Bytes: 3
  %loadMem_48ddca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddca = call %struct.Memory* @routine_addq__rdx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddca)
  store %struct.Memory* %call_48ddca, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48ddcd	 Bytes: 4
  %loadMem_48ddcd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddcd = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddcd)
  store %struct.Memory* %call_48ddcd, %struct.Memory** %MEMORY

  ; Code: movw (%rcx,%rdx,2), %si	 RIP: 48ddd1	 Bytes: 4
  %loadMem_48ddd1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddd1 = call %struct.Memory* @routine_movw___rcx__rdx_2____si(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddd1)
  store %struct.Memory* %call_48ddd1, %struct.Memory** %MEMORY

  ; Code: movq -0x58(%rbp), %rcx	 RIP: 48ddd5	 Bytes: 4
  %loadMem_48ddd5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddd5 = call %struct.Memory* @routine_movq_MINUS0x58__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddd5)
  store %struct.Memory* %call_48ddd5, %struct.Memory** %MEMORY

  ; Code: movq (%rcx), %rcx	 RIP: 48ddd9	 Bytes: 3
  %loadMem_48ddd9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddd9 = call %struct.Memory* @routine_movq___rcx____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddd9)
  store %struct.Memory* %call_48ddd9, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48dddc	 Bytes: 8
  %loadMem_48dddc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dddc = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dddc)
  store %struct.Memory* %call_48dddc, %struct.Memory** %MEMORY

  ; Code: movl 0xa4(%rdx), %edi	 RIP: 48dde4	 Bytes: 6
  %loadMem_48dde4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dde4 = call %struct.Memory* @routine_movl_0xa4__rdx____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dde4)
  store %struct.Memory* %call_48dde4, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edi	 RIP: 48ddea	 Bytes: 3
  %loadMem_48ddea = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddea = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddea)
  store %struct.Memory* %call_48ddea, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %rdx	 RIP: 48dded	 Bytes: 3
  %loadMem_48dded = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dded = call %struct.Memory* @routine_movslq__edi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dded)
  store %struct.Memory* %call_48dded, %struct.Memory** %MEMORY

  ; Code: movq (%rcx,%rdx,8), %rcx	 RIP: 48ddf0	 Bytes: 4
  %loadMem_48ddf0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddf0 = call %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddf0)
  store %struct.Memory* %call_48ddf0, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48ddf4	 Bytes: 8
  %loadMem_48ddf4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddf4 = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddf4)
  store %struct.Memory* %call_48ddf4, %struct.Memory** %MEMORY

  ; Code: movl 0xa0(%rdx), %edi	 RIP: 48ddfc	 Bytes: 6
  %loadMem_48ddfc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ddfc = call %struct.Memory* @routine_movl_0xa0__rdx____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ddfc)
  store %struct.Memory* %call_48ddfc, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edi	 RIP: 48de02	 Bytes: 3
  %loadMem_48de02 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de02 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de02)
  store %struct.Memory* %call_48de02, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %rdx	 RIP: 48de05	 Bytes: 3
  %loadMem_48de05 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de05 = call %struct.Memory* @routine_movslq__edi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de05)
  store %struct.Memory* %call_48de05, %struct.Memory** %MEMORY

  ; Code: movw %si, (%rcx,%rdx,2)	 RIP: 48de08	 Bytes: 4
  %loadMem_48de08 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de08 = call %struct.Memory* @routine_movw__si____rcx__rdx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de08)
  store %struct.Memory* %call_48de08, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48de0c	 Bytes: 4
  %loadMem_48de0c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de0c = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de0c)
  store %struct.Memory* %call_48de0c, %struct.Memory** %MEMORY

  ; Code: shlq $0x5, %rcx	 RIP: 48de10	 Bytes: 4
  %loadMem_48de10 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de10 = call %struct.Memory* @routine_shlq__0x5___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de10)
  store %struct.Memory* %call_48de10, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48de14	 Bytes: 3
  %loadMem_48de14 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de14 = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de14)
  store %struct.Memory* %call_48de14, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48de17	 Bytes: 4
  %loadMem_48de17 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de17 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de17)
  store %struct.Memory* %call_48de17, %struct.Memory** %MEMORY

  ; Code: movw (%rax,%rcx,2), %si	 RIP: 48de1b	 Bytes: 4
  %loadMem_48de1b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de1b = call %struct.Memory* @routine_movw___rax__rcx_2____si(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de1b)
  store %struct.Memory* %call_48de1b, %struct.Memory** %MEMORY

  ; Code: movq -0x58(%rbp), %rax	 RIP: 48de1f	 Bytes: 4
  %loadMem_48de1f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de1f = call %struct.Memory* @routine_movq_MINUS0x58__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de1f)
  store %struct.Memory* %call_48de1f, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48de23	 Bytes: 4
  %loadMem_48de23 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de23 = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de23)
  store %struct.Memory* %call_48de23, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48de27	 Bytes: 8
  %loadMem_48de27 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de27 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de27)
  store %struct.Memory* %call_48de27, %struct.Memory** %MEMORY

  ; Code: movl 0xa4(%rcx), %edi	 RIP: 48de2f	 Bytes: 6
  %loadMem_48de2f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de2f = call %struct.Memory* @routine_movl_0xa4__rcx____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de2f)
  store %struct.Memory* %call_48de2f, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edi	 RIP: 48de35	 Bytes: 3
  %loadMem_48de35 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de35 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de35)
  store %struct.Memory* %call_48de35, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %rcx	 RIP: 48de38	 Bytes: 3
  %loadMem_48de38 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de38 = call %struct.Memory* @routine_movslq__edi___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de38)
  store %struct.Memory* %call_48de38, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48de3b	 Bytes: 4
  %loadMem_48de3b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de3b = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de3b)
  store %struct.Memory* %call_48de3b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48de3f	 Bytes: 8
  %loadMem_48de3f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de3f = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de3f)
  store %struct.Memory* %call_48de3f, %struct.Memory** %MEMORY

  ; Code: movl 0xa0(%rcx), %edi	 RIP: 48de47	 Bytes: 6
  %loadMem_48de47 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de47 = call %struct.Memory* @routine_movl_0xa0__rcx____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de47)
  store %struct.Memory* %call_48de47, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edi	 RIP: 48de4d	 Bytes: 3
  %loadMem_48de4d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de4d = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de4d)
  store %struct.Memory* %call_48de4d, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %rcx	 RIP: 48de50	 Bytes: 3
  %loadMem_48de50 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de50 = call %struct.Memory* @routine_movslq__edi___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de50)
  store %struct.Memory* %call_48de50, %struct.Memory** %MEMORY

  ; Code: movw %si, (%rax,%rcx,2)	 RIP: 48de53	 Bytes: 4
  %loadMem_48de53 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de53 = call %struct.Memory* @routine_movw__si____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de53)
  store %struct.Memory* %call_48de53, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48de57	 Bytes: 8
  %loadMem_48de57 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de57 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de57)
  store %struct.Memory* %call_48de57, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48de5f	 Bytes: 7
  %loadMem_48de5f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de5f = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de5f)
  store %struct.Memory* %call_48de5f, %struct.Memory** %MEMORY

  ; Code: je .L_48dee7	 RIP: 48de66	 Bytes: 6
  %loadMem_48de66 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de66 = call %struct.Memory* @routine_je_.L_48dee7(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de66, i8* %BRANCH_TAKEN, i64 129, i64 6, i64 6)
  store %struct.Memory* %call_48de66, %struct.Memory** %MEMORY

  %loadBr_48de66 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48de66 = icmp eq i8 %loadBr_48de66, 1
  br i1 %cmpBr_48de66, label %block_.L_48dee7, label %block_48de6c

block_48de6c:
  ; Code: movq $0x6f9360, %rax	 RIP: 48de6c	 Bytes: 10
  %loadMem_48de6c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de6c = call %struct.Memory* @routine_movq__0x6f9360___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de6c)
  store %struct.Memory* %call_48de6c, %struct.Memory** %MEMORY

  ; Code: movq $0x726210, %rcx	 RIP: 48de76	 Bytes: 10
  %loadMem_48de76 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de76 = call %struct.Memory* @routine_movq__0x726210___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de76)
  store %struct.Memory* %call_48de76, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rdx	 RIP: 48de80	 Bytes: 4
  %loadMem_48de80 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de80 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de80)
  store %struct.Memory* %call_48de80, %struct.Memory** %MEMORY

  ; Code: shlq $0x5, %rdx	 RIP: 48de84	 Bytes: 4
  %loadMem_48de84 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de84 = call %struct.Memory* @routine_shlq__0x5___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de84)
  store %struct.Memory* %call_48de84, %struct.Memory** %MEMORY

  ; Code: addq %rdx, %rcx	 RIP: 48de88	 Bytes: 3
  %loadMem_48de88 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de88 = call %struct.Memory* @routine_addq__rdx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de88)
  store %struct.Memory* %call_48de88, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48de8b	 Bytes: 4
  %loadMem_48de8b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de8b = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de8b)
  store %struct.Memory* %call_48de8b, %struct.Memory** %MEMORY

  ; Code: movzwl (%rcx,%rdx,2), %esi	 RIP: 48de8f	 Bytes: 4
  %loadMem_48de8f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de8f = call %struct.Memory* @routine_movzwl___rcx__rdx_2____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de8f)
  store %struct.Memory* %call_48de8f, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rcx	 RIP: 48de93	 Bytes: 8
  %loadMem_48de93 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de93 = call %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de93)
  store %struct.Memory* %call_48de93, %struct.Memory** %MEMORY

  ; Code: addq $0x408, %rcx	 RIP: 48de9b	 Bytes: 7
  %loadMem_48de9b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48de9b = call %struct.Memory* @routine_addq__0x408___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48de9b)
  store %struct.Memory* %call_48de9b, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rdx	 RIP: 48dea2	 Bytes: 4
  %loadMem_48dea2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dea2 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dea2)
  store %struct.Memory* %call_48dea2, %struct.Memory** %MEMORY

  ; Code: shlq $0x6, %rdx	 RIP: 48dea6	 Bytes: 4
  %loadMem_48dea6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dea6 = call %struct.Memory* @routine_shlq__0x6___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dea6)
  store %struct.Memory* %call_48dea6, %struct.Memory** %MEMORY

  ; Code: addq %rdx, %rcx	 RIP: 48deaa	 Bytes: 3
  %loadMem_48deaa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48deaa = call %struct.Memory* @routine_addq__rdx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48deaa)
  store %struct.Memory* %call_48deaa, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48dead	 Bytes: 4
  %loadMem_48dead = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dead = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dead)
  store %struct.Memory* %call_48dead, %struct.Memory** %MEMORY

  ; Code: movl %esi, (%rcx,%rdx,4)	 RIP: 48deb1	 Bytes: 3
  %loadMem_48deb1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48deb1 = call %struct.Memory* @routine_movl__esi____rcx__rdx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48deb1)
  store %struct.Memory* %call_48deb1, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48deb4	 Bytes: 4
  %loadMem_48deb4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48deb4 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48deb4)
  store %struct.Memory* %call_48deb4, %struct.Memory** %MEMORY

  ; Code: shlq $0x5, %rcx	 RIP: 48deb8	 Bytes: 4
  %loadMem_48deb8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48deb8 = call %struct.Memory* @routine_shlq__0x5___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48deb8)
  store %struct.Memory* %call_48deb8, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48debc	 Bytes: 3
  %loadMem_48debc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48debc = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48debc)
  store %struct.Memory* %call_48debc, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48debf	 Bytes: 4
  %loadMem_48debf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48debf = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48debf)
  store %struct.Memory* %call_48debf, %struct.Memory** %MEMORY

  ; Code: movzwl (%rax,%rcx,2), %esi	 RIP: 48dec3	 Bytes: 4
  %loadMem_48dec3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dec3 = call %struct.Memory* @routine_movzwl___rax__rcx_2____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dec3)
  store %struct.Memory* %call_48dec3, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48dec7	 Bytes: 8
  %loadMem_48dec7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dec7 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dec7)
  store %struct.Memory* %call_48dec7, %struct.Memory** %MEMORY

  ; Code: addq $0x808, %rax	 RIP: 48decf	 Bytes: 6
  %loadMem_48decf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48decf = call %struct.Memory* @routine_addq__0x808___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48decf)
  store %struct.Memory* %call_48decf, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48ded5	 Bytes: 4
  %loadMem_48ded5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ded5 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ded5)
  store %struct.Memory* %call_48ded5, %struct.Memory** %MEMORY

  ; Code: shlq $0x6, %rcx	 RIP: 48ded9	 Bytes: 4
  %loadMem_48ded9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ded9 = call %struct.Memory* @routine_shlq__0x6___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ded9)
  store %struct.Memory* %call_48ded9, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48dedd	 Bytes: 3
  %loadMem_48dedd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dedd = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dedd)
  store %struct.Memory* %call_48dedd, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48dee0	 Bytes: 4
  %loadMem_48dee0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dee0 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dee0)
  store %struct.Memory* %call_48dee0, %struct.Memory** %MEMORY

  ; Code: movl %esi, (%rax,%rcx,4)	 RIP: 48dee4	 Bytes: 3
  %loadMem_48dee4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dee4 = call %struct.Memory* @routine_movl__esi____rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dee4)
  store %struct.Memory* %call_48dee4, %struct.Memory** %MEMORY

  ; Code: .L_48dee7:	 RIP: 48dee7	 Bytes: 0
  br label %block_.L_48dee7
block_.L_48dee7:

  ; Code: jmpq .L_48deec	 RIP: 48dee7	 Bytes: 5
  %loadMem_48dee7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dee7 = call %struct.Memory* @routine_jmpq_.L_48deec(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dee7, i64 5, i64 5)
  store %struct.Memory* %call_48dee7, %struct.Memory** %MEMORY

  br label %block_.L_48deec

  ; Code: .L_48deec:	 RIP: 48deec	 Bytes: 0
block_.L_48deec:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48deec	 Bytes: 3
  %loadMem_48deec = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48deec = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48deec)
  store %struct.Memory* %call_48deec, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48deef	 Bytes: 3
  %loadMem_48deef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48deef = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48deef)
  store %struct.Memory* %call_48deef, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48def2	 Bytes: 3
  %loadMem_48def2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48def2 = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48def2)
  store %struct.Memory* %call_48def2, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48dd97	 RIP: 48def5	 Bytes: 5
  %loadMem_48def5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48def5 = call %struct.Memory* @routine_jmpq_.L_48dd97(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48def5, i64 -350, i64 5)
  store %struct.Memory* %call_48def5, %struct.Memory** %MEMORY

  br label %block_.L_48dd97

  ; Code: .L_48defa:	 RIP: 48defa	 Bytes: 0
block_.L_48defa:

  ; Code: jmpq .L_48deff	 RIP: 48defa	 Bytes: 5
  %loadMem_48defa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48defa = call %struct.Memory* @routine_jmpq_.L_48deff(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48defa, i64 5, i64 5)
  store %struct.Memory* %call_48defa, %struct.Memory** %MEMORY

  br label %block_.L_48deff

  ; Code: .L_48deff:	 RIP: 48deff	 Bytes: 0
block_.L_48deff:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48deff	 Bytes: 3
  %loadMem_48deff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48deff = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48deff)
  store %struct.Memory* %call_48deff, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48df02	 Bytes: 3
  %loadMem_48df02 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df02 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df02)
  store %struct.Memory* %call_48df02, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48df05	 Bytes: 3
  %loadMem_48df05 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df05 = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df05)
  store %struct.Memory* %call_48df05, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48dd79	 RIP: 48df08	 Bytes: 5
  %loadMem_48df08 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df08 = call %struct.Memory* @routine_jmpq_.L_48dd79(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df08, i64 -399, i64 5)
  store %struct.Memory* %call_48df08, %struct.Memory** %MEMORY

  br label %block_.L_48dd79

  ; Code: .L_48df0d:	 RIP: 48df0d	 Bytes: 0
block_.L_48df0d:

  ; Code: jmpq .L_48df12	 RIP: 48df0d	 Bytes: 5
  %loadMem_48df0d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df0d = call %struct.Memory* @routine_jmpq_.L_48df12(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df0d, i64 5, i64 5)
  store %struct.Memory* %call_48df0d, %struct.Memory** %MEMORY

  br label %block_.L_48df12

  ; Code: .L_48df12:	 RIP: 48df12	 Bytes: 0
block_.L_48df12:

  ; Code: movq 0x6cc5f0, %rax	 RIP: 48df12	 Bytes: 8
  %loadMem_48df12 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df12 = call %struct.Memory* @routine_movq_0x6cc5f0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df12)
  store %struct.Memory* %call_48df12, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x20(%rbp)	 RIP: 48df1a	 Bytes: 4
  %loadMem_48df1a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df1a = call %struct.Memory* @routine_movq__rax__MINUS0x20__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df1a)
  store %struct.Memory* %call_48df1a, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48df1e	 Bytes: 8
  %loadMem_48df1e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df1e = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df1e)
  store %struct.Memory* %call_48df1e, %struct.Memory** %MEMORY

  ; Code: movq 0x3738(%rax), %rax	 RIP: 48df26	 Bytes: 7
  %loadMem_48df26 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df26 = call %struct.Memory* @routine_movq_0x3738__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df26)
  store %struct.Memory* %call_48df26, %struct.Memory** %MEMORY

  ; Code: movq %rax, 0x6cc5f0	 RIP: 48df2d	 Bytes: 8
  %loadMem_48df2d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df2d = call %struct.Memory* @routine_movq__rax__0x6cc5f0(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df2d)
  store %struct.Memory* %call_48df2d, %struct.Memory** %MEMORY

  ; Code: movq -0x20(%rbp), %rax	 RIP: 48df35	 Bytes: 4
  %loadMem_48df35 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df35 = call %struct.Memory* @routine_movq_MINUS0x20__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df35)
  store %struct.Memory* %call_48df35, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48df39	 Bytes: 8
  %loadMem_48df39 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df39 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df39)
  store %struct.Memory* %call_48df39, %struct.Memory** %MEMORY

  ; Code: movq %rax, 0x3738(%rcx)	 RIP: 48df41	 Bytes: 7
  %loadMem_48df41 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df41 = call %struct.Memory* @routine_movq__rax__0x3738__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df41)
  store %struct.Memory* %call_48df41, %struct.Memory** %MEMORY

  ; Code: movq 0x6cc600, %rax	 RIP: 48df48	 Bytes: 8
  %loadMem_48df48 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df48 = call %struct.Memory* @routine_movq_0x6cc600___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df48)
  store %struct.Memory* %call_48df48, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x28(%rbp)	 RIP: 48df50	 Bytes: 4
  %loadMem_48df50 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df50 = call %struct.Memory* @routine_movq__rax__MINUS0x28__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df50)
  store %struct.Memory* %call_48df50, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48df54	 Bytes: 8
  %loadMem_48df54 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df54 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df54)
  store %struct.Memory* %call_48df54, %struct.Memory** %MEMORY

  ; Code: movq 0x3740(%rax), %rax	 RIP: 48df5c	 Bytes: 7
  %loadMem_48df5c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df5c = call %struct.Memory* @routine_movq_0x3740__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df5c)
  store %struct.Memory* %call_48df5c, %struct.Memory** %MEMORY

  ; Code: movq %rax, 0x6cc600	 RIP: 48df63	 Bytes: 8
  %loadMem_48df63 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df63 = call %struct.Memory* @routine_movq__rax__0x6cc600(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df63)
  store %struct.Memory* %call_48df63, %struct.Memory** %MEMORY

  ; Code: movq -0x28(%rbp), %rax	 RIP: 48df6b	 Bytes: 4
  %loadMem_48df6b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df6b = call %struct.Memory* @routine_movq_MINUS0x28__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df6b)
  store %struct.Memory* %call_48df6b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48df6f	 Bytes: 8
  %loadMem_48df6f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df6f = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df6f)
  store %struct.Memory* %call_48df6f, %struct.Memory** %MEMORY

  ; Code: movq %rax, 0x3740(%rcx)	 RIP: 48df77	 Bytes: 7
  %loadMem_48df77 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df77 = call %struct.Memory* @routine_movq__rax__0x3740__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df77)
  store %struct.Memory* %call_48df77, %struct.Memory** %MEMORY

  ; Code: movl 0x6d4688, %edx	 RIP: 48df7e	 Bytes: 7
  %loadMem_48df7e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df7e = call %struct.Memory* @routine_movl_0x6d4688___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df7e)
  store %struct.Memory* %call_48df7e, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48df85	 Bytes: 4
  %loadMem_48df85 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df85 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df85)
  store %struct.Memory* %call_48df85, %struct.Memory** %MEMORY

  ; Code: movl %edx, 0x1cc(%rax)	 RIP: 48df89	 Bytes: 6
  %loadMem_48df89 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df89 = call %struct.Memory* @routine_movl__edx__0x1cc__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df89)
  store %struct.Memory* %call_48df89, %struct.Memory** %MEMORY

  ; Code: movq 0x6f8f10, %rax	 RIP: 48df8f	 Bytes: 8
  %loadMem_48df8f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df8f = call %struct.Memory* @routine_movq_0x6f8f10___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df8f)
  store %struct.Memory* %call_48df8f, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48df97	 Bytes: 4
  %loadMem_48df97 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df97 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df97)
  store %struct.Memory* %call_48df97, %struct.Memory** %MEMORY

  ; Code: movq %rax, 0x1d0(%rcx)	 RIP: 48df9b	 Bytes: 7
  %loadMem_48df9b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48df9b = call %struct.Memory* @routine_movq__rax__0x1d0__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48df9b)
  store %struct.Memory* %call_48df9b, %struct.Memory** %MEMORY

  ; Code: movl -0x3c(%rbp), %edx	 RIP: 48dfa2	 Bytes: 3
  %loadMem_48dfa2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfa2 = call %struct.Memory* @routine_movl_MINUS0x3c__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfa2)
  store %struct.Memory* %call_48dfa2, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48dfa5	 Bytes: 4
  %loadMem_48dfa5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfa5 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfa5)
  store %struct.Memory* %call_48dfa5, %struct.Memory** %MEMORY

  ; Code: movl %edx, 0x48(%rax)	 RIP: 48dfa9	 Bytes: 3
  %loadMem_48dfa9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfa9 = call %struct.Memory* @routine_movl__edx__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfa9)
  store %struct.Memory* %call_48dfa9, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48dfac	 Bytes: 8
  %loadMem_48dfac = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfac = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfac)
  store %struct.Memory* %call_48dfac, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48dfb4	 Bytes: 7
  %loadMem_48dfb4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfb4 = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfb4)
  store %struct.Memory* %call_48dfb4, %struct.Memory** %MEMORY

  ; Code: je .L_48e221	 RIP: 48dfbb	 Bytes: 6
  %loadMem_48dfbb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfbb = call %struct.Memory* @routine_je_.L_48e221(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfbb, i8* %BRANCH_TAKEN, i64 614, i64 6, i64 6)
  store %struct.Memory* %call_48dfbb, %struct.Memory** %MEMORY

  %loadBr_48dfbb = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48dfbb = icmp eq i8 %loadBr_48dfbb, 1
  br i1 %cmpBr_48dfbb, label %block_.L_48e221, label %block_48dfc1

block_48dfc1:
  ; Code: movl -0x3c(%rbp), %eax	 RIP: 48dfc1	 Bytes: 3
  %loadMem_48dfc1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfc1 = call %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfc1)
  store %struct.Memory* %call_48dfc1, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rcx	 RIP: 48dfc4	 Bytes: 8
  %loadMem_48dfc4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfc4 = call %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfc4)
  store %struct.Memory* %call_48dfc4, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0xc98(%rcx)	 RIP: 48dfcc	 Bytes: 6
  %loadMem_48dfcc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfcc = call %struct.Memory* @routine_movl__eax__0xc98__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfcc)
  store %struct.Memory* %call_48dfcc, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48dfd2	 Bytes: 8
  %loadMem_48dfd2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfd2 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfd2)
  store %struct.Memory* %call_48dfd2, %struct.Memory** %MEMORY

  ; Code: movl 0x11abc(%rcx), %eax	 RIP: 48dfda	 Bytes: 6
  %loadMem_48dfda = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfda = call %struct.Memory* @routine_movl_0x11abc__rcx____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfda)
  store %struct.Memory* %call_48dfda, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rcx	 RIP: 48dfe0	 Bytes: 8
  %loadMem_48dfe0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfe0 = call %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfe0)
  store %struct.Memory* %call_48dfe0, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0xd00(%rcx)	 RIP: 48dfe8	 Bytes: 6
  %loadMem_48dfe8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfe8 = call %struct.Memory* @routine_movl__eax__0xd00__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfe8)
  store %struct.Memory* %call_48dfe8, %struct.Memory** %MEMORY

  ; Code: movl 0x6d4688, %eax	 RIP: 48dfee	 Bytes: 7
  %loadMem_48dfee = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dfee = call %struct.Memory* @routine_movl_0x6d4688___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dfee)
  store %struct.Memory* %call_48dfee, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rcx	 RIP: 48dff5	 Bytes: 8
  %loadMem_48dff5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dff5 = call %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dff5)
  store %struct.Memory* %call_48dff5, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0xc88(%rcx)	 RIP: 48dffd	 Bytes: 6
  %loadMem_48dffd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48dffd = call %struct.Memory* @routine_movl__eax__0xc88__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48dffd)
  store %struct.Memory* %call_48dffd, %struct.Memory** %MEMORY

  ; Code: movq 0x6f8f10, %rcx	 RIP: 48e003	 Bytes: 8
  %loadMem_48e003 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e003 = call %struct.Memory* @routine_movq_0x6f8f10___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e003)
  store %struct.Memory* %call_48e003, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rdx	 RIP: 48e00b	 Bytes: 8
  %loadMem_48e00b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e00b = call %struct.Memory* @routine_movq_0x6d4518___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e00b)
  store %struct.Memory* %call_48e00b, %struct.Memory** %MEMORY

  ; Code: movq %rcx, 0xc90(%rdx)	 RIP: 48e013	 Bytes: 7
  %loadMem_48e013 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e013 = call %struct.Memory* @routine_movq__rcx__0xc90__rdx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e013)
  store %struct.Memory* %call_48e013, %struct.Memory** %MEMORY

  ; Code: movl -0x3c(%rbp), %eax	 RIP: 48e01a	 Bytes: 3
  %loadMem_48e01a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e01a = call %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e01a)
  store %struct.Memory* %call_48e01a, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rcx	 RIP: 48e01d	 Bytes: 8
  %loadMem_48e01d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e01d = call %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e01d)
  store %struct.Memory* %call_48e01d, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0xc18(%rcx)	 RIP: 48e025	 Bytes: 6
  %loadMem_48e025 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e025 = call %struct.Memory* @routine_movl__eax__0xc18__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e025)
  store %struct.Memory* %call_48e025, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48e02b	 Bytes: 4
  %loadMem_48e02b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e02b = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e02b)
  store %struct.Memory* %call_48e02b, %struct.Memory** %MEMORY

  ; Code: movl 0x250(%rcx), %eax	 RIP: 48e02f	 Bytes: 6
  %loadMem_48e02f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e02f = call %struct.Memory* @routine_movl_0x250__rcx____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e02f)
  store %struct.Memory* %call_48e02f, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rcx	 RIP: 48e035	 Bytes: 8
  %loadMem_48e035 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e035 = call %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e035)
  store %struct.Memory* %call_48e035, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0xd14(%rcx)	 RIP: 48e03d	 Bytes: 6
  %loadMem_48e03d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e03d = call %struct.Memory* @routine_movl__eax__0xd14__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e03d)
  store %struct.Memory* %call_48e03d, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48e043	 Bytes: 4
  %loadMem_48e043 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e043 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e043)
  store %struct.Memory* %call_48e043, %struct.Memory** %MEMORY

  ; Code: movl 0x254(%rcx), %eax	 RIP: 48e047	 Bytes: 6
  %loadMem_48e047 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e047 = call %struct.Memory* @routine_movl_0x254__rcx____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e047)
  store %struct.Memory* %call_48e047, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rcx	 RIP: 48e04d	 Bytes: 8
  %loadMem_48e04d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e04d = call %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e04d)
  store %struct.Memory* %call_48e04d, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0xd18(%rcx)	 RIP: 48e055	 Bytes: 6
  %loadMem_48e055 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e055 = call %struct.Memory* @routine_movl__eax__0xd18__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e055)
  store %struct.Memory* %call_48e055, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48e05b	 Bytes: 4
  %loadMem_48e05b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e05b = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e05b)
  store %struct.Memory* %call_48e05b, %struct.Memory** %MEMORY

  ; Code: movl 0xc(%rcx), %eax	 RIP: 48e05f	 Bytes: 3
  %loadMem_48e05f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e05f = call %struct.Memory* @routine_movl_0xc__rcx____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e05f)
  store %struct.Memory* %call_48e05f, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rcx	 RIP: 48e062	 Bytes: 8
  %loadMem_48e062 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e062 = call %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e062)
  store %struct.Memory* %call_48e062, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0xd10(%rcx)	 RIP: 48e06a	 Bytes: 6
  %loadMem_48e06a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e06a = call %struct.Memory* @routine_movl__eax__0xd10__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e06a)
  store %struct.Memory* %call_48e06a, %struct.Memory** %MEMORY

  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48e070	 Bytes: 7
  %loadMem_48e070 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e070 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e070)
  store %struct.Memory* %call_48e070, %struct.Memory** %MEMORY

  ; Code: .L_48e077:	 RIP: 48e077	 Bytes: 0
  br label %block_.L_48e077
block_.L_48e077:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48e077	 Bytes: 3
  %loadMem_48e077 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e077 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e077)
  store %struct.Memory* %call_48e077, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e07a	 Bytes: 8
  %loadMem_48e07a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e07a = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e07a)
  store %struct.Memory* %call_48e07a, %struct.Memory** %MEMORY

  ; Code: movl 0x11bf4(%rcx), %edx	 RIP: 48e082	 Bytes: 6
  %loadMem_48e082 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e082 = call %struct.Memory* @routine_movl_0x11bf4__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e082)
  store %struct.Memory* %call_48e082, %struct.Memory** %MEMORY

  ; Code: addl $0x4, %edx	 RIP: 48e088	 Bytes: 3
  %loadMem_48e088 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e088 = call %struct.Memory* @routine_addl__0x4___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e088)
  store %struct.Memory* %call_48e088, %struct.Memory** %MEMORY

  ; Code: cmpl %edx, %eax	 RIP: 48e08b	 Bytes: 2
  %loadMem_48e08b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e08b = call %struct.Memory* @routine_cmpl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e08b)
  store %struct.Memory* %call_48e08b, %struct.Memory** %MEMORY

  ; Code: jge .L_48e169	 RIP: 48e08d	 Bytes: 6
  %loadMem_48e08d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e08d = call %struct.Memory* @routine_jge_.L_48e169(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e08d, i8* %BRANCH_TAKEN, i64 220, i64 6, i64 6)
  store %struct.Memory* %call_48e08d, %struct.Memory** %MEMORY

  %loadBr_48e08d = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e08d = icmp eq i8 %loadBr_48e08d, 1
  br i1 %cmpBr_48e08d, label %block_.L_48e169, label %block_48e093

block_48e093:
  ; Code: movl $0x0, -0x10(%rbp)	 RIP: 48e093	 Bytes: 7
  %loadMem_48e093 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e093 = call %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e093)
  store %struct.Memory* %call_48e093, %struct.Memory** %MEMORY

  ; Code: .L_48e09a:	 RIP: 48e09a	 Bytes: 0
  br label %block_.L_48e09a
block_.L_48e09a:

  ; Code: cmpl $0x4, -0x10(%rbp)	 RIP: 48e09a	 Bytes: 4
  %loadMem_48e09a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e09a = call %struct.Memory* @routine_cmpl__0x4__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e09a)
  store %struct.Memory* %call_48e09a, %struct.Memory** %MEMORY

  ; Code: jge .L_48e156	 RIP: 48e09e	 Bytes: 6
  %loadMem_48e09e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e09e = call %struct.Memory* @routine_jge_.L_48e156(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e09e, i8* %BRANCH_TAKEN, i64 184, i64 6, i64 6)
  store %struct.Memory* %call_48e09e, %struct.Memory** %MEMORY

  %loadBr_48e09e = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e09e = icmp eq i8 %loadBr_48e09e, 1
  br i1 %cmpBr_48e09e, label %block_.L_48e156, label %block_48e0a4

block_48e0a4:
  ; Code: movl $0x0, -0x14(%rbp)	 RIP: 48e0a4	 Bytes: 7
  %loadMem_48e0a4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0a4 = call %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0a4)
  store %struct.Memory* %call_48e0a4, %struct.Memory** %MEMORY

  ; Code: .L_48e0ab:	 RIP: 48e0ab	 Bytes: 0
  br label %block_.L_48e0ab
block_.L_48e0ab:

  ; Code: cmpl $0x2, -0x14(%rbp)	 RIP: 48e0ab	 Bytes: 4
  %loadMem_48e0ab = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0ab = call %struct.Memory* @routine_cmpl__0x2__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0ab)
  store %struct.Memory* %call_48e0ab, %struct.Memory** %MEMORY

  ; Code: jge .L_48e143	 RIP: 48e0af	 Bytes: 6
  %loadMem_48e0af = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0af = call %struct.Memory* @routine_jge_.L_48e143(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0af, i8* %BRANCH_TAKEN, i64 148, i64 6, i64 6)
  store %struct.Memory* %call_48e0af, %struct.Memory** %MEMORY

  %loadBr_48e0af = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e0af = icmp eq i8 %loadBr_48e0af, 1
  br i1 %cmpBr_48e0af, label %block_.L_48e143, label %block_48e0b5

block_48e0b5:
  ; Code: movl $0x0, -0x2c(%rbp)	 RIP: 48e0b5	 Bytes: 7
  %loadMem_48e0b5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0b5 = call %struct.Memory* @routine_movl__0x0__MINUS0x2c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0b5)
  store %struct.Memory* %call_48e0b5, %struct.Memory** %MEMORY

  ; Code: .L_48e0bc:	 RIP: 48e0bc	 Bytes: 0
  br label %block_.L_48e0bc
block_.L_48e0bc:

  ; Code: cmpl $0x41, -0x2c(%rbp)	 RIP: 48e0bc	 Bytes: 4
  %loadMem_48e0bc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0bc = call %struct.Memory* @routine_cmpl__0x41__MINUS0x2c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0bc)
  store %struct.Memory* %call_48e0bc, %struct.Memory** %MEMORY

  ; Code: jge .L_48e130	 RIP: 48e0c0	 Bytes: 6
  %loadMem_48e0c0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0c0 = call %struct.Memory* @routine_jge_.L_48e130(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0c0, i8* %BRANCH_TAKEN, i64 112, i64 6, i64 6)
  store %struct.Memory* %call_48e0c0, %struct.Memory** %MEMORY

  %loadBr_48e0c0 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e0c0 = icmp eq i8 %loadBr_48e0c0, 1
  br i1 %cmpBr_48e0c0, label %block_.L_48e130, label %block_48e0c6

block_48e0c6:
  ; Code: movq 0x6cb900, %rax	 RIP: 48e0c6	 Bytes: 8
  %loadMem_48e0c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0c6 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0c6)
  store %struct.Memory* %call_48e0c6, %struct.Memory** %MEMORY

  ; Code: movq 0x3738(%rax), %rax	 RIP: 48e0ce	 Bytes: 7
  %loadMem_48e0ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0ce = call %struct.Memory* @routine_movq_0x3738__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0ce)
  store %struct.Memory* %call_48e0ce, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48e0d5	 Bytes: 4
  %loadMem_48e0d5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0d5 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0d5)
  store %struct.Memory* %call_48e0d5, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e0d9	 Bytes: 4
  %loadMem_48e0d9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0d9 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0d9)
  store %struct.Memory* %call_48e0d9, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48e0dd	 Bytes: 4
  %loadMem_48e0dd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0dd = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0dd)
  store %struct.Memory* %call_48e0dd, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e0e1	 Bytes: 4
  %loadMem_48e0e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0e1 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0e1)
  store %struct.Memory* %call_48e0e1, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48e0e5	 Bytes: 4
  %loadMem_48e0e5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0e5 = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0e5)
  store %struct.Memory* %call_48e0e5, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e0e9	 Bytes: 4
  %loadMem_48e0e9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0e9 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0e9)
  store %struct.Memory* %call_48e0e9, %struct.Memory** %MEMORY

  ; Code: movslq -0x2c(%rbp), %rcx	 RIP: 48e0ed	 Bytes: 4
  %loadMem_48e0ed = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0ed = call %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0ed)
  store %struct.Memory* %call_48e0ed, %struct.Memory** %MEMORY

  ; Code: movl (%rax,%rcx,4), %edx	 RIP: 48e0f1	 Bytes: 3
  %loadMem_48e0f1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0f1 = call %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0f1)
  store %struct.Memory* %call_48e0f1, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48e0f4	 Bytes: 8
  %loadMem_48e0f4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0f4 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0f4)
  store %struct.Memory* %call_48e0f4, %struct.Memory** %MEMORY

  ; Code: movq 0xc08(%rax), %rax	 RIP: 48e0fc	 Bytes: 7
  %loadMem_48e0fc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e0fc = call %struct.Memory* @routine_movq_0xc08__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e0fc)
  store %struct.Memory* %call_48e0fc, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48e103	 Bytes: 4
  %loadMem_48e103 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e103 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e103)
  store %struct.Memory* %call_48e103, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e107	 Bytes: 4
  %loadMem_48e107 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e107 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e107)
  store %struct.Memory* %call_48e107, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48e10b	 Bytes: 4
  %loadMem_48e10b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e10b = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e10b)
  store %struct.Memory* %call_48e10b, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e10f	 Bytes: 4
  %loadMem_48e10f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e10f = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e10f)
  store %struct.Memory* %call_48e10f, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48e113	 Bytes: 4
  %loadMem_48e113 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e113 = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e113)
  store %struct.Memory* %call_48e113, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e117	 Bytes: 4
  %loadMem_48e117 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e117 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e117)
  store %struct.Memory* %call_48e117, %struct.Memory** %MEMORY

  ; Code: movslq -0x2c(%rbp), %rcx	 RIP: 48e11b	 Bytes: 4
  %loadMem_48e11b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e11b = call %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e11b)
  store %struct.Memory* %call_48e11b, %struct.Memory** %MEMORY

  ; Code: movl %edx, (%rax,%rcx,4)	 RIP: 48e11f	 Bytes: 3
  %loadMem_48e11f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e11f = call %struct.Memory* @routine_movl__edx____rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e11f)
  store %struct.Memory* %call_48e11f, %struct.Memory** %MEMORY

  ; Code: movl -0x2c(%rbp), %eax	 RIP: 48e122	 Bytes: 3
  %loadMem_48e122 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e122 = call %struct.Memory* @routine_movl_MINUS0x2c__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e122)
  store %struct.Memory* %call_48e122, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48e125	 Bytes: 3
  %loadMem_48e125 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e125 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e125)
  store %struct.Memory* %call_48e125, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x2c(%rbp)	 RIP: 48e128	 Bytes: 3
  %loadMem_48e128 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e128 = call %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e128)
  store %struct.Memory* %call_48e128, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e0bc	 RIP: 48e12b	 Bytes: 5
  %loadMem_48e12b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e12b = call %struct.Memory* @routine_jmpq_.L_48e0bc(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e12b, i64 -111, i64 5)
  store %struct.Memory* %call_48e12b, %struct.Memory** %MEMORY

  br label %block_.L_48e0bc

  ; Code: .L_48e130:	 RIP: 48e130	 Bytes: 0
block_.L_48e130:

  ; Code: jmpq .L_48e135	 RIP: 48e130	 Bytes: 5
  %loadMem_48e130 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e130 = call %struct.Memory* @routine_jmpq_.L_48e135(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e130, i64 5, i64 5)
  store %struct.Memory* %call_48e130, %struct.Memory** %MEMORY

  br label %block_.L_48e135

  ; Code: .L_48e135:	 RIP: 48e135	 Bytes: 0
block_.L_48e135:

  ; Code: movl -0x14(%rbp), %eax	 RIP: 48e135	 Bytes: 3
  %loadMem_48e135 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e135 = call %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e135)
  store %struct.Memory* %call_48e135, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48e138	 Bytes: 3
  %loadMem_48e138 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e138 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e138)
  store %struct.Memory* %call_48e138, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x14(%rbp)	 RIP: 48e13b	 Bytes: 3
  %loadMem_48e13b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e13b = call %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e13b)
  store %struct.Memory* %call_48e13b, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e0ab	 RIP: 48e13e	 Bytes: 5
  %loadMem_48e13e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e13e = call %struct.Memory* @routine_jmpq_.L_48e0ab(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e13e, i64 -147, i64 5)
  store %struct.Memory* %call_48e13e, %struct.Memory** %MEMORY

  br label %block_.L_48e0ab

  ; Code: .L_48e143:	 RIP: 48e143	 Bytes: 0
block_.L_48e143:

  ; Code: jmpq .L_48e148	 RIP: 48e143	 Bytes: 5
  %loadMem_48e143 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e143 = call %struct.Memory* @routine_jmpq_.L_48e148(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e143, i64 5, i64 5)
  store %struct.Memory* %call_48e143, %struct.Memory** %MEMORY

  br label %block_.L_48e148

  ; Code: .L_48e148:	 RIP: 48e148	 Bytes: 0
block_.L_48e148:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48e148	 Bytes: 3
  %loadMem_48e148 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e148 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e148)
  store %struct.Memory* %call_48e148, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48e14b	 Bytes: 3
  %loadMem_48e14b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e14b = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e14b)
  store %struct.Memory* %call_48e14b, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48e14e	 Bytes: 3
  %loadMem_48e14e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e14e = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e14e)
  store %struct.Memory* %call_48e14e, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e09a	 RIP: 48e151	 Bytes: 5
  %loadMem_48e151 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e151 = call %struct.Memory* @routine_jmpq_.L_48e09a(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e151, i64 -183, i64 5)
  store %struct.Memory* %call_48e151, %struct.Memory** %MEMORY

  br label %block_.L_48e09a

  ; Code: .L_48e156:	 RIP: 48e156	 Bytes: 0
block_.L_48e156:

  ; Code: jmpq .L_48e15b	 RIP: 48e156	 Bytes: 5
  %loadMem_48e156 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e156 = call %struct.Memory* @routine_jmpq_.L_48e15b(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e156, i64 5, i64 5)
  store %struct.Memory* %call_48e156, %struct.Memory** %MEMORY

  br label %block_.L_48e15b

  ; Code: .L_48e15b:	 RIP: 48e15b	 Bytes: 0
block_.L_48e15b:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48e15b	 Bytes: 3
  %loadMem_48e15b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e15b = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e15b)
  store %struct.Memory* %call_48e15b, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48e15e	 Bytes: 3
  %loadMem_48e15e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e15e = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e15e)
  store %struct.Memory* %call_48e15e, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48e161	 Bytes: 3
  %loadMem_48e161 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e161 = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e161)
  store %struct.Memory* %call_48e161, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e077	 RIP: 48e164	 Bytes: 5
  %loadMem_48e164 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e164 = call %struct.Memory* @routine_jmpq_.L_48e077(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e164, i64 -237, i64 5)
  store %struct.Memory* %call_48e164, %struct.Memory** %MEMORY

  br label %block_.L_48e077

  ; Code: .L_48e169:	 RIP: 48e169	 Bytes: 0
block_.L_48e169:

  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48e169	 Bytes: 7
  %loadMem_48e169 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e169 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e169)
  store %struct.Memory* %call_48e169, %struct.Memory** %MEMORY

  ; Code: .L_48e170:	 RIP: 48e170	 Bytes: 0
  br label %block_.L_48e170
block_.L_48e170:

  ; Code: cmpl $0x3, -0xc(%rbp)	 RIP: 48e170	 Bytes: 4
  %loadMem_48e170 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e170 = call %struct.Memory* @routine_cmpl__0x3__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e170)
  store %struct.Memory* %call_48e170, %struct.Memory** %MEMORY

  ; Code: jge .L_48e21c	 RIP: 48e174	 Bytes: 6
  %loadMem_48e174 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e174 = call %struct.Memory* @routine_jge_.L_48e21c(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e174, i8* %BRANCH_TAKEN, i64 168, i64 6, i64 6)
  store %struct.Memory* %call_48e174, %struct.Memory** %MEMORY

  %loadBr_48e174 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e174 = icmp eq i8 %loadBr_48e174, 1
  br i1 %cmpBr_48e174, label %block_.L_48e21c, label %block_48e17a

block_48e17a:
  ; Code: movl $0x0, -0x14(%rbp)	 RIP: 48e17a	 Bytes: 7
  %loadMem_48e17a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e17a = call %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e17a)
  store %struct.Memory* %call_48e17a, %struct.Memory** %MEMORY

  ; Code: .L_48e181:	 RIP: 48e181	 Bytes: 0
  br label %block_.L_48e181
block_.L_48e181:

  ; Code: cmpl $0x2, -0x14(%rbp)	 RIP: 48e181	 Bytes: 4
  %loadMem_48e181 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e181 = call %struct.Memory* @routine_cmpl__0x2__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e181)
  store %struct.Memory* %call_48e181, %struct.Memory** %MEMORY

  ; Code: jge .L_48e209	 RIP: 48e185	 Bytes: 6
  %loadMem_48e185 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e185 = call %struct.Memory* @routine_jge_.L_48e209(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e185, i8* %BRANCH_TAKEN, i64 132, i64 6, i64 6)
  store %struct.Memory* %call_48e185, %struct.Memory** %MEMORY

  %loadBr_48e185 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e185 = icmp eq i8 %loadBr_48e185, 1
  br i1 %cmpBr_48e185, label %block_.L_48e209, label %block_48e18b

block_48e18b:
  ; Code: movl $0x0, -0x2c(%rbp)	 RIP: 48e18b	 Bytes: 7
  %loadMem_48e18b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e18b = call %struct.Memory* @routine_movl__0x0__MINUS0x2c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e18b)
  store %struct.Memory* %call_48e18b, %struct.Memory** %MEMORY

  ; Code: .L_48e192:	 RIP: 48e192	 Bytes: 0
  br label %block_.L_48e192
block_.L_48e192:

  ; Code: cmpl $0x12, -0x2c(%rbp)	 RIP: 48e192	 Bytes: 4
  %loadMem_48e192 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e192 = call %struct.Memory* @routine_cmpl__0x12__MINUS0x2c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e192)
  store %struct.Memory* %call_48e192, %struct.Memory** %MEMORY

  ; Code: jge .L_48e1f6	 RIP: 48e196	 Bytes: 6
  %loadMem_48e196 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e196 = call %struct.Memory* @routine_jge_.L_48e1f6(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e196, i8* %BRANCH_TAKEN, i64 96, i64 6, i64 6)
  store %struct.Memory* %call_48e196, %struct.Memory** %MEMORY

  %loadBr_48e196 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e196 = icmp eq i8 %loadBr_48e196, 1
  br i1 %cmpBr_48e196, label %block_.L_48e1f6, label %block_48e19c

block_48e19c:
  ; Code: movq 0x6cb900, %rax	 RIP: 48e19c	 Bytes: 8
  %loadMem_48e19c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e19c = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e19c)
  store %struct.Memory* %call_48e19c, %struct.Memory** %MEMORY

  ; Code: movq 0x3740(%rax), %rax	 RIP: 48e1a4	 Bytes: 7
  %loadMem_48e1a4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1a4 = call %struct.Memory* @routine_movq_0x3740__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1a4)
  store %struct.Memory* %call_48e1a4, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48e1ab	 Bytes: 4
  %loadMem_48e1ab = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1ab = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1ab)
  store %struct.Memory* %call_48e1ab, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e1af	 Bytes: 4
  %loadMem_48e1af = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1af = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1af)
  store %struct.Memory* %call_48e1af, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48e1b3	 Bytes: 4
  %loadMem_48e1b3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1b3 = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1b3)
  store %struct.Memory* %call_48e1b3, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e1b7	 Bytes: 4
  %loadMem_48e1b7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1b7 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1b7)
  store %struct.Memory* %call_48e1b7, %struct.Memory** %MEMORY

  ; Code: movslq -0x2c(%rbp), %rcx	 RIP: 48e1bb	 Bytes: 4
  %loadMem_48e1bb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1bb = call %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1bb)
  store %struct.Memory* %call_48e1bb, %struct.Memory** %MEMORY

  ; Code: movl (%rax,%rcx,4), %edx	 RIP: 48e1bf	 Bytes: 3
  %loadMem_48e1bf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1bf = call %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1bf)
  store %struct.Memory* %call_48e1bf, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48e1c2	 Bytes: 8
  %loadMem_48e1c2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1c2 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1c2)
  store %struct.Memory* %call_48e1c2, %struct.Memory** %MEMORY

  ; Code: movq 0xc10(%rax), %rax	 RIP: 48e1ca	 Bytes: 7
  %loadMem_48e1ca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1ca = call %struct.Memory* @routine_movq_0xc10__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1ca)
  store %struct.Memory* %call_48e1ca, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48e1d1	 Bytes: 4
  %loadMem_48e1d1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1d1 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1d1)
  store %struct.Memory* %call_48e1d1, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e1d5	 Bytes: 4
  %loadMem_48e1d5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1d5 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1d5)
  store %struct.Memory* %call_48e1d5, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48e1d9	 Bytes: 4
  %loadMem_48e1d9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1d9 = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1d9)
  store %struct.Memory* %call_48e1d9, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e1dd	 Bytes: 4
  %loadMem_48e1dd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1dd = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1dd)
  store %struct.Memory* %call_48e1dd, %struct.Memory** %MEMORY

  ; Code: movslq -0x2c(%rbp), %rcx	 RIP: 48e1e1	 Bytes: 4
  %loadMem_48e1e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1e1 = call %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1e1)
  store %struct.Memory* %call_48e1e1, %struct.Memory** %MEMORY

  ; Code: movl %edx, (%rax,%rcx,4)	 RIP: 48e1e5	 Bytes: 3
  %loadMem_48e1e5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1e5 = call %struct.Memory* @routine_movl__edx____rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1e5)
  store %struct.Memory* %call_48e1e5, %struct.Memory** %MEMORY

  ; Code: movl -0x2c(%rbp), %eax	 RIP: 48e1e8	 Bytes: 3
  %loadMem_48e1e8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1e8 = call %struct.Memory* @routine_movl_MINUS0x2c__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1e8)
  store %struct.Memory* %call_48e1e8, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48e1eb	 Bytes: 3
  %loadMem_48e1eb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1eb = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1eb)
  store %struct.Memory* %call_48e1eb, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x2c(%rbp)	 RIP: 48e1ee	 Bytes: 3
  %loadMem_48e1ee = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1ee = call %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1ee)
  store %struct.Memory* %call_48e1ee, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e192	 RIP: 48e1f1	 Bytes: 5
  %loadMem_48e1f1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1f1 = call %struct.Memory* @routine_jmpq_.L_48e192(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1f1, i64 -95, i64 5)
  store %struct.Memory* %call_48e1f1, %struct.Memory** %MEMORY

  br label %block_.L_48e192

  ; Code: .L_48e1f6:	 RIP: 48e1f6	 Bytes: 0
block_.L_48e1f6:

  ; Code: jmpq .L_48e1fb	 RIP: 48e1f6	 Bytes: 5
  %loadMem_48e1f6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1f6 = call %struct.Memory* @routine_jmpq_.L_48e1fb(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1f6, i64 5, i64 5)
  store %struct.Memory* %call_48e1f6, %struct.Memory** %MEMORY

  br label %block_.L_48e1fb

  ; Code: .L_48e1fb:	 RIP: 48e1fb	 Bytes: 0
block_.L_48e1fb:

  ; Code: movl -0x14(%rbp), %eax	 RIP: 48e1fb	 Bytes: 3
  %loadMem_48e1fb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1fb = call %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1fb)
  store %struct.Memory* %call_48e1fb, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48e1fe	 Bytes: 3
  %loadMem_48e1fe = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e1fe = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e1fe)
  store %struct.Memory* %call_48e1fe, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x14(%rbp)	 RIP: 48e201	 Bytes: 3
  %loadMem_48e201 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e201 = call %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e201)
  store %struct.Memory* %call_48e201, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e181	 RIP: 48e204	 Bytes: 5
  %loadMem_48e204 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e204 = call %struct.Memory* @routine_jmpq_.L_48e181(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e204, i64 -131, i64 5)
  store %struct.Memory* %call_48e204, %struct.Memory** %MEMORY

  br label %block_.L_48e181

  ; Code: .L_48e209:	 RIP: 48e209	 Bytes: 0
block_.L_48e209:

  ; Code: jmpq .L_48e20e	 RIP: 48e209	 Bytes: 5
  %loadMem_48e209 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e209 = call %struct.Memory* @routine_jmpq_.L_48e20e(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e209, i64 5, i64 5)
  store %struct.Memory* %call_48e209, %struct.Memory** %MEMORY

  br label %block_.L_48e20e

  ; Code: .L_48e20e:	 RIP: 48e20e	 Bytes: 0
block_.L_48e20e:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48e20e	 Bytes: 3
  %loadMem_48e20e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e20e = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e20e)
  store %struct.Memory* %call_48e20e, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48e211	 Bytes: 3
  %loadMem_48e211 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e211 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e211)
  store %struct.Memory* %call_48e211, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48e214	 Bytes: 3
  %loadMem_48e214 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e214 = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e214)
  store %struct.Memory* %call_48e214, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e170	 RIP: 48e217	 Bytes: 5
  %loadMem_48e217 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e217 = call %struct.Memory* @routine_jmpq_.L_48e170(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e217, i64 -167, i64 5)
  store %struct.Memory* %call_48e217, %struct.Memory** %MEMORY

  br label %block_.L_48e170

  ; Code: .L_48e21c:	 RIP: 48e21c	 Bytes: 0
block_.L_48e21c:

  ; Code: jmpq .L_48e221	 RIP: 48e21c	 Bytes: 5
  %loadMem_48e21c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e21c = call %struct.Memory* @routine_jmpq_.L_48e221(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e21c, i64 5, i64 5)
  store %struct.Memory* %call_48e21c, %struct.Memory** %MEMORY

  br label %block_.L_48e221

  ; Code: .L_48e221:	 RIP: 48e221	 Bytes: 0
block_.L_48e221:

  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48e221	 Bytes: 7
  %loadMem_48e221 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e221 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e221)
  store %struct.Memory* %call_48e221, %struct.Memory** %MEMORY

  ; Code: .L_48e228:	 RIP: 48e228	 Bytes: 0
  br label %block_.L_48e228
block_.L_48e228:

  ; Code: cmpl $0x4, -0xc(%rbp)	 RIP: 48e228	 Bytes: 4
  %loadMem_48e228 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e228 = call %struct.Memory* @routine_cmpl__0x4__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e228)
  store %struct.Memory* %call_48e228, %struct.Memory** %MEMORY

  ; Code: jge .L_48e2ce	 RIP: 48e22c	 Bytes: 6
  %loadMem_48e22c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e22c = call %struct.Memory* @routine_jge_.L_48e2ce(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e22c, i8* %BRANCH_TAKEN, i64 162, i64 6, i64 6)
  store %struct.Memory* %call_48e22c, %struct.Memory** %MEMORY

  %loadBr_48e22c = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e22c = icmp eq i8 %loadBr_48e22c, 1
  br i1 %cmpBr_48e22c, label %block_.L_48e2ce, label %block_48e232

block_48e232:
  ; Code: movslq -0xc(%rbp), %rax	 RIP: 48e232	 Bytes: 4
  %loadMem_48e232 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e232 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e232)
  store %struct.Memory* %call_48e232, %struct.Memory** %MEMORY

  ; Code: movswl 0x6cea20(,%rax,2), %ecx	 RIP: 48e236	 Bytes: 8
  %loadMem_48e236 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e236 = call %struct.Memory* @routine_movswl_0x6cea20___rax_2____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e236)
  store %struct.Memory* %call_48e236, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e23e	 Bytes: 4
  %loadMem_48e23e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e23e = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e23e)
  store %struct.Memory* %call_48e23e, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48e242	 Bytes: 4
  %loadMem_48e242 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e242 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e242)
  store %struct.Memory* %call_48e242, %struct.Memory** %MEMORY

  ; Code: movl %ecx, 0x1d8(%rax,%rdx,4)	 RIP: 48e246	 Bytes: 7
  %loadMem_48e246 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e246 = call %struct.Memory* @routine_movl__ecx__0x1d8__rax__rdx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e246)
  store %struct.Memory* %call_48e246, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rax	 RIP: 48e24d	 Bytes: 4
  %loadMem_48e24d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e24d = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e24d)
  store %struct.Memory* %call_48e24d, %struct.Memory** %MEMORY

  ; Code: movswl 0x6d452c(,%rax,2), %ecx	 RIP: 48e251	 Bytes: 8
  %loadMem_48e251 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e251 = call %struct.Memory* @routine_movswl_0x6d452c___rax_2____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e251)
  store %struct.Memory* %call_48e251, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e259	 Bytes: 4
  %loadMem_48e259 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e259 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e259)
  store %struct.Memory* %call_48e259, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48e25d	 Bytes: 4
  %loadMem_48e25d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e25d = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e25d)
  store %struct.Memory* %call_48e25d, %struct.Memory** %MEMORY

  ; Code: movl %ecx, 0x1e8(%rax,%rdx,4)	 RIP: 48e261	 Bytes: 7
  %loadMem_48e261 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e261 = call %struct.Memory* @routine_movl__ecx__0x1e8__rax__rdx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e261)
  store %struct.Memory* %call_48e261, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48e268	 Bytes: 8
  %loadMem_48e268 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e268 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e268)
  store %struct.Memory* %call_48e268, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48e270	 Bytes: 7
  %loadMem_48e270 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e270 = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e270)
  store %struct.Memory* %call_48e270, %struct.Memory** %MEMORY

  ; Code: je .L_48e2bb	 RIP: 48e277	 Bytes: 6
  %loadMem_48e277 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e277 = call %struct.Memory* @routine_je_.L_48e2bb(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e277, i8* %BRANCH_TAKEN, i64 68, i64 6, i64 6)
  store %struct.Memory* %call_48e277, %struct.Memory** %MEMORY

  %loadBr_48e277 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e277 = icmp eq i8 %loadBr_48e277, 1
  br i1 %cmpBr_48e277, label %block_.L_48e2bb, label %block_48e27d

block_48e27d:
  ; Code: movslq -0xc(%rbp), %rax	 RIP: 48e27d	 Bytes: 4
  %loadMem_48e27d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e27d = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e27d)
  store %struct.Memory* %call_48e27d, %struct.Memory** %MEMORY

  ; Code: movswl 0x6cea20(,%rax,2), %ecx	 RIP: 48e281	 Bytes: 8
  %loadMem_48e281 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e281 = call %struct.Memory* @routine_movswl_0x6cea20___rax_2____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e281)
  store %struct.Memory* %call_48e281, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48e289	 Bytes: 8
  %loadMem_48e289 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e289 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e289)
  store %struct.Memory* %call_48e289, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48e291	 Bytes: 4
  %loadMem_48e291 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e291 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e291)
  store %struct.Memory* %call_48e291, %struct.Memory** %MEMORY

  ; Code: movl %ecx, 0xc20(%rax,%rdx,4)	 RIP: 48e295	 Bytes: 7
  %loadMem_48e295 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e295 = call %struct.Memory* @routine_movl__ecx__0xc20__rax__rdx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e295)
  store %struct.Memory* %call_48e295, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rax	 RIP: 48e29c	 Bytes: 4
  %loadMem_48e29c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e29c = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e29c)
  store %struct.Memory* %call_48e29c, %struct.Memory** %MEMORY

  ; Code: movswl 0x6d452c(,%rax,2), %ecx	 RIP: 48e2a0	 Bytes: 8
  %loadMem_48e2a0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2a0 = call %struct.Memory* @routine_movswl_0x6d452c___rax_2____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2a0)
  store %struct.Memory* %call_48e2a0, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48e2a8	 Bytes: 8
  %loadMem_48e2a8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2a8 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2a8)
  store %struct.Memory* %call_48e2a8, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48e2b0	 Bytes: 4
  %loadMem_48e2b0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2b0 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2b0)
  store %struct.Memory* %call_48e2b0, %struct.Memory** %MEMORY

  ; Code: movl %ecx, 0xc30(%rax,%rdx,4)	 RIP: 48e2b4	 Bytes: 7
  %loadMem_48e2b4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2b4 = call %struct.Memory* @routine_movl__ecx__0xc30__rax__rdx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2b4)
  store %struct.Memory* %call_48e2b4, %struct.Memory** %MEMORY

  ; Code: .L_48e2bb:	 RIP: 48e2bb	 Bytes: 0
  br label %block_.L_48e2bb
block_.L_48e2bb:

  ; Code: jmpq .L_48e2c0	 RIP: 48e2bb	 Bytes: 5
  %loadMem_48e2bb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2bb = call %struct.Memory* @routine_jmpq_.L_48e2c0(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2bb, i64 5, i64 5)
  store %struct.Memory* %call_48e2bb, %struct.Memory** %MEMORY

  br label %block_.L_48e2c0

  ; Code: .L_48e2c0:	 RIP: 48e2c0	 Bytes: 0
block_.L_48e2c0:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48e2c0	 Bytes: 3
  %loadMem_48e2c0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2c0 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2c0)
  store %struct.Memory* %call_48e2c0, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48e2c3	 Bytes: 3
  %loadMem_48e2c3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2c3 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2c3)
  store %struct.Memory* %call_48e2c3, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48e2c6	 Bytes: 3
  %loadMem_48e2c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2c6 = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2c6)
  store %struct.Memory* %call_48e2c6, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e228	 RIP: 48e2c9	 Bytes: 5
  %loadMem_48e2c9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2c9 = call %struct.Memory* @routine_jmpq_.L_48e228(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2c9, i64 -161, i64 5)
  store %struct.Memory* %call_48e2c9, %struct.Memory** %MEMORY

  br label %block_.L_48e228

  ; Code: .L_48e2ce:	 RIP: 48e2ce	 Bytes: 0
block_.L_48e2ce:

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e2ce	 Bytes: 4
  %loadMem_48e2ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2ce = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2ce)
  store %struct.Memory* %call_48e2ce, %struct.Memory** %MEMORY

  ; Code: cmpl $0x1, 0x48(%rax)	 RIP: 48e2d2	 Bytes: 4
  %loadMem_48e2d2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2d2 = call %struct.Memory* @routine_cmpl__0x1__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2d2)
  store %struct.Memory* %call_48e2d2, %struct.Memory** %MEMORY

  ; Code: jne .L_48e2f2	 RIP: 48e2d6	 Bytes: 6
  %loadMem_48e2d6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2d6 = call %struct.Memory* @routine_jne_.L_48e2f2(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2d6, i8* %BRANCH_TAKEN, i64 28, i64 6, i64 6)
  store %struct.Memory* %call_48e2d6, %struct.Memory** %MEMORY

  %loadBr_48e2d6 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e2d6 = icmp eq i8 %loadBr_48e2d6, 1
  br i1 %cmpBr_48e2d6, label %block_.L_48e2f2, label %block_48e2dc

block_48e2dc:
  ; Code: movl 0x6d2080, %eax	 RIP: 48e2dc	 Bytes: 7
  %loadMem_48e2dc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2dc = call %struct.Memory* @routine_movl_0x6d2080___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2dc)
  store %struct.Memory* %call_48e2dc, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48e2e3	 Bytes: 4
  %loadMem_48e2e3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2e3 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2e3)
  store %struct.Memory* %call_48e2e3, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0x244(%rcx)	 RIP: 48e2e7	 Bytes: 6
  %loadMem_48e2e7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2e7 = call %struct.Memory* @routine_movl__eax__0x244__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2e7)
  store %struct.Memory* %call_48e2e7, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e300	 RIP: 48e2ed	 Bytes: 5
  %loadMem_48e2ed = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2ed = call %struct.Memory* @routine_jmpq_.L_48e300(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2ed, i64 19, i64 5)
  store %struct.Memory* %call_48e2ed, %struct.Memory** %MEMORY

  br label %block_.L_48e300

  ; Code: .L_48e2f2:	 RIP: 48e2f2	 Bytes: 0
block_.L_48e2f2:

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e2f2	 Bytes: 4
  %loadMem_48e2f2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2f2 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2f2)
  store %struct.Memory* %call_48e2f2, %struct.Memory** %MEMORY

  ; Code: movl $0x0, 0x244(%rax)	 RIP: 48e2f6	 Bytes: 10
  %loadMem_48e2f6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e2f6 = call %struct.Memory* @routine_movl__0x0__0x244__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e2f6)
  store %struct.Memory* %call_48e2f6, %struct.Memory** %MEMORY

  ; Code: .L_48e300:	 RIP: 48e300	 Bytes: 0
  br label %block_.L_48e300
block_.L_48e300:

  ; Code: cmpl $0x8, -0x3c(%rbp)	 RIP: 48e300	 Bytes: 4
  %loadMem_48e300 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e300 = call %struct.Memory* @routine_cmpl__0x8__MINUS0x3c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e300)
  store %struct.Memory* %call_48e300, %struct.Memory** %MEMORY

  ; Code: jne .L_48e337	 RIP: 48e304	 Bytes: 6
  %loadMem_48e304 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e304 = call %struct.Memory* @routine_jne_.L_48e337(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e304, i8* %BRANCH_TAKEN, i64 51, i64 6, i64 6)
  store %struct.Memory* %call_48e304, %struct.Memory** %MEMORY

  %loadBr_48e304 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e304 = icmp eq i8 %loadBr_48e304, 1
  br i1 %cmpBr_48e304, label %block_.L_48e337, label %block_48e30a

block_48e30a:
  ; Code: cmpl $0x0, 0x723710	 RIP: 48e30a	 Bytes: 8
  %loadMem_48e30a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e30a = call %struct.Memory* @routine_cmpl__0x0__0x723710(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e30a)
  store %struct.Memory* %call_48e30a, %struct.Memory** %MEMORY

  ; Code: jne .L_48e337	 RIP: 48e312	 Bytes: 6
  %loadMem_48e312 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e312 = call %struct.Memory* @routine_jne_.L_48e337(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e312, i8* %BRANCH_TAKEN, i64 37, i64 6, i64 6)
  store %struct.Memory* %call_48e312, %struct.Memory** %MEMORY

  %loadBr_48e312 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e312 = icmp eq i8 %loadBr_48e312, 1
  br i1 %cmpBr_48e312, label %block_.L_48e337, label %block_48e318

block_48e318:
  ; Code: movq 0x6cb8f8, %rax	 RIP: 48e318	 Bytes: 8
  %loadMem_48e318 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e318 = call %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e318)
  store %struct.Memory* %call_48e318, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0xc94(%rax)	 RIP: 48e320	 Bytes: 7
  %loadMem_48e320 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e320 = call %struct.Memory* @routine_cmpl__0x0__0xc94__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e320)
  store %struct.Memory* %call_48e320, %struct.Memory** %MEMORY

  ; Code: je .L_48e337	 RIP: 48e327	 Bytes: 6
  %loadMem_48e327 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e327 = call %struct.Memory* @routine_je_.L_48e337(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e327, i8* %BRANCH_TAKEN, i64 16, i64 6, i64 6)
  store %struct.Memory* %call_48e327, %struct.Memory** %MEMORY

  %loadBr_48e327 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e327 = icmp eq i8 %loadBr_48e327, 1
  br i1 %cmpBr_48e327, label %block_.L_48e337, label %block_48e32d

block_48e32d:
  ; Code: movl $0x1, %edi	 RIP: 48e32d	 Bytes: 5
  %loadMem_48e32d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e32d = call %struct.Memory* @routine_movl__0x1___edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e32d)
  store %struct.Memory* %call_48e32d, %struct.Memory** %MEMORY

  ; Code: callq .RestoreMV8x8	 RIP: 48e332	 Bytes: 5
  %loadMem1_48e332 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call1_48e332 = call %struct.Memory* @routine_callq_.RestoreMV8x8(%struct.State* %0, i64  0, %struct.Memory* %loadMem1_48e332, i64 -14482, i64 5, i64 5)
  store %struct.Memory* %call1_48e332, %struct.Memory** %MEMORY

  %loadMem2_48e332 = load %struct.Memory*, %struct.Memory** %MEMORY
  %loadPC_48e332 = load i64, i64* %3
  %call2_48e332 = call %struct.Memory* @sub_48aaa0.RestoreMV8x8(%struct.State* %0, i64  %loadPC_48e332, %struct.Memory* %loadMem2_48e332)
  store %struct.Memory* %call2_48e332, %struct.Memory** %MEMORY

  ; Code: .L_48e337:	 RIP: 48e337	 Bytes: 0
  br label %block_.L_48e337
block_.L_48e337:

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e337	 Bytes: 4
  %loadMem_48e337 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e337 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e337)
  store %struct.Memory* %call_48e337, %struct.Memory** %MEMORY

  ; Code: movl 0x1cc(%rax), %ecx	 RIP: 48e33b	 Bytes: 6
  %loadMem_48e33b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e33b = call %struct.Memory* @routine_movl_0x1cc__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e33b)
  store %struct.Memory* %call_48e33b, %struct.Memory** %MEMORY

  ; Code: andl $0xf, %ecx	 RIP: 48e341	 Bytes: 3
  %loadMem_48e341 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e341 = call %struct.Memory* @routine_andl__0xf___ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e341)
  store %struct.Memory* %call_48e341, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, %ecx	 RIP: 48e344	 Bytes: 3
  %loadMem_48e344 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e344 = call %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e344)
  store %struct.Memory* %call_48e344, %struct.Memory** %MEMORY

  ; Code: jne .L_48e37c	 RIP: 48e347	 Bytes: 6
  %loadMem_48e347 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e347 = call %struct.Memory* @routine_jne_.L_48e37c(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e347, i8* %BRANCH_TAKEN, i64 53, i64 6, i64 6)
  store %struct.Memory* %call_48e347, %struct.Memory** %MEMORY

  %loadBr_48e347 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e347 = icmp eq i8 %loadBr_48e347, 1
  br i1 %cmpBr_48e347, label %block_.L_48e37c, label %block_48e34d

block_48e34d:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e34d	 Bytes: 4
  %loadMem_48e34d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e34d = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e34d)
  store %struct.Memory* %call_48e34d, %struct.Memory** %MEMORY

  ; Code: cmpl $0x9, 0x48(%rax)	 RIP: 48e351	 Bytes: 4
  %loadMem_48e351 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e351 = call %struct.Memory* @routine_cmpl__0x9__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e351)
  store %struct.Memory* %call_48e351, %struct.Memory** %MEMORY

  ; Code: je .L_48e37c	 RIP: 48e355	 Bytes: 6
  %loadMem_48e355 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e355 = call %struct.Memory* @routine_je_.L_48e37c(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e355, i8* %BRANCH_TAKEN, i64 39, i64 6, i64 6)
  store %struct.Memory* %call_48e355, %struct.Memory** %MEMORY

  %loadBr_48e355 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e355 = icmp eq i8 %loadBr_48e355, 1
  br i1 %cmpBr_48e355, label %block_.L_48e37c, label %block_48e35b

block_48e35b:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e35b	 Bytes: 4
  %loadMem_48e35b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e35b = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e35b)
  store %struct.Memory* %call_48e35b, %struct.Memory** %MEMORY

  ; Code: cmpl $0xd, 0x48(%rax)	 RIP: 48e35f	 Bytes: 4
  %loadMem_48e35f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e35f = call %struct.Memory* @routine_cmpl__0xd__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e35f)
  store %struct.Memory* %call_48e35f, %struct.Memory** %MEMORY

  ; Code: je .L_48e37c	 RIP: 48e363	 Bytes: 6
  %loadMem_48e363 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e363 = call %struct.Memory* @routine_je_.L_48e37c(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e363, i8* %BRANCH_TAKEN, i64 25, i64 6, i64 6)
  store %struct.Memory* %call_48e363, %struct.Memory** %MEMORY

  %loadBr_48e363 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e363 = icmp eq i8 %loadBr_48e363, 1
  br i1 %cmpBr_48e363, label %block_.L_48e37c, label %block_48e369

block_48e369:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e369	 Bytes: 4
  %loadMem_48e369 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e369 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e369)
  store %struct.Memory* %call_48e369, %struct.Memory** %MEMORY

  ; Code: movl $0x0, 0x23c(%rax)	 RIP: 48e36d	 Bytes: 10
  %loadMem_48e36d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e36d = call %struct.Memory* @routine_movl__0x0__0x23c__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e36d)
  store %struct.Memory* %call_48e36d, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e38d	 RIP: 48e377	 Bytes: 5
  %loadMem_48e377 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e377 = call %struct.Memory* @routine_jmpq_.L_48e38d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e377, i64 22, i64 5)
  store %struct.Memory* %call_48e377, %struct.Memory** %MEMORY

  br label %block_.L_48e38d

  ; Code: .L_48e37c:	 RIP: 48e37c	 Bytes: 0
block_.L_48e37c:

  ; Code: movl 0x723710, %eax	 RIP: 48e37c	 Bytes: 7
  %loadMem_48e37c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e37c = call %struct.Memory* @routine_movl_0x723710___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e37c)
  store %struct.Memory* %call_48e37c, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48e383	 Bytes: 4
  %loadMem_48e383 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e383 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e383)
  store %struct.Memory* %call_48e383, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0x23c(%rcx)	 RIP: 48e387	 Bytes: 6
  %loadMem_48e387 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e387 = call %struct.Memory* @routine_movl__eax__0x23c__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e387)
  store %struct.Memory* %call_48e387, %struct.Memory** %MEMORY

  ; Code: .L_48e38d:	 RIP: 48e38d	 Bytes: 0
  br label %block_.L_48e38d
block_.L_48e38d:

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e38d	 Bytes: 4
  %loadMem_48e38d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e38d = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e38d)
  store %struct.Memory* %call_48e38d, %struct.Memory** %MEMORY

  ; Code: movl 0x23c(%rax), %ecx	 RIP: 48e391	 Bytes: 6
  %loadMem_48e391 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e391 = call %struct.Memory* @routine_movl_0x23c__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e391)
  store %struct.Memory* %call_48e391, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48e397	 Bytes: 8
  %loadMem_48e397 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e397 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e397)
  store %struct.Memory* %call_48e397, %struct.Memory** %MEMORY

  ; Code: movl %ecx, 0xd08(%rax)	 RIP: 48e39f	 Bytes: 6
  %loadMem_48e39f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e39f = call %struct.Memory* @routine_movl__ecx__0xd08__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e39f)
  store %struct.Memory* %call_48e39f, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb8f8, %rax	 RIP: 48e3a5	 Bytes: 8
  %loadMem_48e3a5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3a5 = call %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3a5)
  store %struct.Memory* %call_48e3a5, %struct.Memory** %MEMORY

  ; Code: cmpl $0x2, 0x9a0(%rax)	 RIP: 48e3ad	 Bytes: 7
  %loadMem_48e3ad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3ad = call %struct.Memory* @routine_cmpl__0x2__0x9a0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3ad)
  store %struct.Memory* %call_48e3ad, %struct.Memory** %MEMORY

  ; Code: jne .L_48e402	 RIP: 48e3b4	 Bytes: 6
  %loadMem_48e3b4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3b4 = call %struct.Memory* @routine_jne_.L_48e402(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3b4, i8* %BRANCH_TAKEN, i64 78, i64 6, i64 6)
  store %struct.Memory* %call_48e3b4, %struct.Memory** %MEMORY

  %loadBr_48e3b4 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e3b4 = icmp eq i8 %loadBr_48e3b4, 1
  br i1 %cmpBr_48e3b4, label %block_.L_48e402, label %block_48e3ba

block_48e3ba:
  ; Code: movq 0x6cb900, %rax	 RIP: 48e3ba	 Bytes: 8
  %loadMem_48e3ba = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3ba = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3ba)
  store %struct.Memory* %call_48e3ba, %struct.Memory** %MEMORY

  ; Code: cmpl $0x1, 0x18(%rax)	 RIP: 48e3c2	 Bytes: 4
  %loadMem_48e3c2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3c2 = call %struct.Memory* @routine_cmpl__0x1__0x18__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3c2)
  store %struct.Memory* %call_48e3c2, %struct.Memory** %MEMORY

  ; Code: je .L_48e402	 RIP: 48e3c6	 Bytes: 6
  %loadMem_48e3c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3c6 = call %struct.Memory* @routine_je_.L_48e402(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3c6, i8* %BRANCH_TAKEN, i64 60, i64 6, i64 6)
  store %struct.Memory* %call_48e3c6, %struct.Memory** %MEMORY

  %loadBr_48e3c6 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e3c6 = icmp eq i8 %loadBr_48e3c6, 1
  br i1 %cmpBr_48e3c6, label %block_.L_48e402, label %block_48e3cc

block_48e3cc:
  ; Code: movl -0x3c(%rbp), %eax	 RIP: 48e3cc	 Bytes: 3
  %loadMem_48e3cc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3cc = call %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3cc)
  store %struct.Memory* %call_48e3cc, %struct.Memory** %MEMORY

  ; Code: movb %al, %cl	 RIP: 48e3cf	 Bytes: 2
  %loadMem_48e3cf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3cf = call %struct.Memory* @routine_movb__al___cl(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3cf)
  store %struct.Memory* %call_48e3cf, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb918, %rdx	 RIP: 48e3d1	 Bytes: 8
  %loadMem_48e3d1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3d1 = call %struct.Memory* @routine_movq_0x6cb918___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3d1)
  store %struct.Memory* %call_48e3d1, %struct.Memory** %MEMORY

  ; Code: movq 0x30(%rdx), %rdx	 RIP: 48e3d9	 Bytes: 4
  %loadMem_48e3d9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3d9 = call %struct.Memory* @routine_movq_0x30__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3d9)
  store %struct.Memory* %call_48e3d9, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48e3dd	 Bytes: 8
  %loadMem_48e3dd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3dd = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3dd)
  store %struct.Memory* %call_48e3dd, %struct.Memory** %MEMORY

  ; Code: movslq 0x88(%rsi), %rsi	 RIP: 48e3e5	 Bytes: 7
  %loadMem_48e3e5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3e5 = call %struct.Memory* @routine_movslq_0x88__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3e5)
  store %struct.Memory* %call_48e3e5, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48e3ec	 Bytes: 4
  %loadMem_48e3ec = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3ec = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3ec)
  store %struct.Memory* %call_48e3ec, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48e3f0	 Bytes: 8
  %loadMem_48e3f0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3f0 = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3f0)
  store %struct.Memory* %call_48e3f0, %struct.Memory** %MEMORY

  ; Code: movslq 0x8c(%rsi), %rsi	 RIP: 48e3f8	 Bytes: 7
  %loadMem_48e3f8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3f8 = call %struct.Memory* @routine_movslq_0x8c__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3f8)
  store %struct.Memory* %call_48e3f8, %struct.Memory** %MEMORY

  ; Code: movb %cl, (%rdx,%rsi,1)	 RIP: 48e3ff	 Bytes: 3
  %loadMem_48e3ff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e3ff = call %struct.Memory* @routine_movb__cl____rdx__rsi_1_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e3ff)
  store %struct.Memory* %call_48e3ff, %struct.Memory** %MEMORY

  ; Code: .L_48e402:	 RIP: 48e402	 Bytes: 0
  br label %block_.L_48e402
block_.L_48e402:

  ; Code: movl $0x0, -0x10(%rbp)	 RIP: 48e402	 Bytes: 7
  %loadMem_48e402 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e402 = call %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e402)
  store %struct.Memory* %call_48e402, %struct.Memory** %MEMORY

  ; Code: .L_48e409:	 RIP: 48e409	 Bytes: 0
  br label %block_.L_48e409
block_.L_48e409:

  ; Code: cmpl $0x4, -0x10(%rbp)	 RIP: 48e409	 Bytes: 4
  %loadMem_48e409 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e409 = call %struct.Memory* @routine_cmpl__0x4__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e409)
  store %struct.Memory* %call_48e409, %struct.Memory** %MEMORY

  ; Code: jge .L_48edd8	 RIP: 48e40d	 Bytes: 6
  %loadMem_48e40d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e40d = call %struct.Memory* @routine_jge_.L_48edd8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e40d, i8* %BRANCH_TAKEN, i64 2507, i64 6, i64 6)
  store %struct.Memory* %call_48e40d, %struct.Memory** %MEMORY

  %loadBr_48e40d = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e40d = icmp eq i8 %loadBr_48e40d, 1
  br i1 %cmpBr_48e40d, label %block_.L_48edd8, label %block_48e413

block_48e413:
  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48e413	 Bytes: 7
  %loadMem_48e413 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e413 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e413)
  store %struct.Memory* %call_48e413, %struct.Memory** %MEMORY

  ; Code: .L_48e41a:	 RIP: 48e41a	 Bytes: 0
  br label %block_.L_48e41a
block_.L_48e41a:

  ; Code: cmpl $0x4, -0xc(%rbp)	 RIP: 48e41a	 Bytes: 4
  %loadMem_48e41a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e41a = call %struct.Memory* @routine_cmpl__0x4__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e41a)
  store %struct.Memory* %call_48e41a, %struct.Memory** %MEMORY

  ; Code: jge .L_48edc5	 RIP: 48e41e	 Bytes: 6
  %loadMem_48e41e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e41e = call %struct.Memory* @routine_jge_.L_48edc5(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e41e, i8* %BRANCH_TAKEN, i64 2471, i64 6, i64 6)
  store %struct.Memory* %call_48e41e, %struct.Memory** %MEMORY

  %loadBr_48e41e = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e41e = icmp eq i8 %loadBr_48e41e, 1
  br i1 %cmpBr_48e41e, label %block_.L_48edc5, label %block_48e424

block_48e424:
  ; Code: movl $0x2, %eax	 RIP: 48e424	 Bytes: 5
  %loadMem_48e424 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e424 = call %struct.Memory* @routine_movl__0x2___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e424)
  store %struct.Memory* %call_48e424, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48e429	 Bytes: 4
  %loadMem_48e429 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e429 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e429)
  store %struct.Memory* %call_48e429, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %edx	 RIP: 48e42d	 Bytes: 3
  %loadMem_48e42d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e42d = call %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e42d)
  store %struct.Memory* %call_48e42d, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x7c(%rbp)	 RIP: 48e430	 Bytes: 3
  %loadMem_48e430 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e430 = call %struct.Memory* @routine_movl__eax__MINUS0x7c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e430)
  store %struct.Memory* %call_48e430, %struct.Memory** %MEMORY

  ; Code: movl %edx, %eax	 RIP: 48e433	 Bytes: 2
  %loadMem_48e433 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e433 = call %struct.Memory* @routine_movl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e433)
  store %struct.Memory* %call_48e433, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48e435	 Bytes: 1
  %loadMem_48e435 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e435 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e435)
  store %struct.Memory* %call_48e435, %struct.Memory** %MEMORY

  ; Code: movl -0x7c(%rbp), %esi	 RIP: 48e436	 Bytes: 3
  %loadMem_48e436 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e436 = call %struct.Memory* @routine_movl_MINUS0x7c__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e436)
  store %struct.Memory* %call_48e436, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48e439	 Bytes: 2
  %loadMem_48e439 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e439 = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e439)
  store %struct.Memory* %call_48e439, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %edi	 RIP: 48e43b	 Bytes: 3
  %loadMem_48e43b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e43b = call %struct.Memory* @routine_movl_MINUS0x10__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e43b)
  store %struct.Memory* %call_48e43b, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x80(%rbp)	 RIP: 48e43e	 Bytes: 3
  %loadMem_48e43e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e43e = call %struct.Memory* @routine_movl__eax__MINUS0x80__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e43e)
  store %struct.Memory* %call_48e43e, %struct.Memory** %MEMORY

  ; Code: movl %edi, %eax	 RIP: 48e441	 Bytes: 2
  %loadMem_48e441 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e441 = call %struct.Memory* @routine_movl__edi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e441)
  store %struct.Memory* %call_48e441, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48e443	 Bytes: 1
  %loadMem_48e443 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e443 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e443)
  store %struct.Memory* %call_48e443, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48e444	 Bytes: 2
  %loadMem_48e444 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e444 = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e444)
  store %struct.Memory* %call_48e444, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48e446	 Bytes: 3
  %loadMem_48e446 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e446 = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e446)
  store %struct.Memory* %call_48e446, %struct.Memory** %MEMORY

  ; Code: movl -0x80(%rbp), %edi	 RIP: 48e449	 Bytes: 3
  %loadMem_48e449 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e449 = call %struct.Memory* @routine_movl_MINUS0x80__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e449)
  store %struct.Memory* %call_48e449, %struct.Memory** %MEMORY

  ; Code: addl %eax, %edi	 RIP: 48e44c	 Bytes: 2
  %loadMem_48e44c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e44c = call %struct.Memory* @routine_addl__eax___edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e44c)
  store %struct.Memory* %call_48e44c, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %r8	 RIP: 48e44e	 Bytes: 3
  %loadMem_48e44e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e44e = call %struct.Memory* @routine_movslq__edi___r8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e44e)
  store %struct.Memory* %call_48e44e, %struct.Memory** %MEMORY

  ; Code: cmpl $0x1, 0x1e8(%rcx,%r8,4)	 RIP: 48e451	 Bytes: 9
  %loadMem_48e451 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e451 = call %struct.Memory* @routine_cmpl__0x1__0x1e8__rcx__r8_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e451)
  store %struct.Memory* %call_48e451, %struct.Memory** %MEMORY

  ; Code: je .L_48e48a	 RIP: 48e45a	 Bytes: 6
  %loadMem_48e45a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e45a = call %struct.Memory* @routine_je_.L_48e48a(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e45a, i8* %BRANCH_TAKEN, i64 48, i64 6, i64 6)
  store %struct.Memory* %call_48e45a, %struct.Memory** %MEMORY

  %loadBr_48e45a = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e45a = icmp eq i8 %loadBr_48e45a, 1
  br i1 %cmpBr_48e45a, label %block_.L_48e48a, label %block_48e460

block_48e460:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e460	 Bytes: 4
  %loadMem_48e460 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e460 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e460)
  store %struct.Memory* %call_48e460, %struct.Memory** %MEMORY

  ; Code: cmpl $0x9, 0x48(%rax)	 RIP: 48e464	 Bytes: 4
  %loadMem_48e464 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e464 = call %struct.Memory* @routine_cmpl__0x9__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e464)
  store %struct.Memory* %call_48e464, %struct.Memory** %MEMORY

  ; Code: je .L_48e48a	 RIP: 48e468	 Bytes: 6
  %loadMem_48e468 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e468 = call %struct.Memory* @routine_je_.L_48e48a(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e468, i8* %BRANCH_TAKEN, i64 34, i64 6, i64 6)
  store %struct.Memory* %call_48e468, %struct.Memory** %MEMORY

  %loadBr_48e468 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e468 = icmp eq i8 %loadBr_48e468, 1
  br i1 %cmpBr_48e468, label %block_.L_48e48a, label %block_48e46e

block_48e46e:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e46e	 Bytes: 4
  %loadMem_48e46e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e46e = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e46e)
  store %struct.Memory* %call_48e46e, %struct.Memory** %MEMORY

  ; Code: cmpl $0xa, 0x48(%rax)	 RIP: 48e472	 Bytes: 4
  %loadMem_48e472 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e472 = call %struct.Memory* @routine_cmpl__0xa__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e472)
  store %struct.Memory* %call_48e472, %struct.Memory** %MEMORY

  ; Code: je .L_48e48a	 RIP: 48e476	 Bytes: 6
  %loadMem_48e476 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e476 = call %struct.Memory* @routine_je_.L_48e48a(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e476, i8* %BRANCH_TAKEN, i64 20, i64 6, i64 6)
  store %struct.Memory* %call_48e476, %struct.Memory** %MEMORY

  %loadBr_48e476 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e476 = icmp eq i8 %loadBr_48e476, 1
  br i1 %cmpBr_48e476, label %block_.L_48e48a, label %block_48e47c

block_48e47c:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e47c	 Bytes: 4
  %loadMem_48e47c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e47c = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e47c)
  store %struct.Memory* %call_48e47c, %struct.Memory** %MEMORY

  ; Code: cmpl $0xd, 0x48(%rax)	 RIP: 48e480	 Bytes: 4
  %loadMem_48e480 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e480 = call %struct.Memory* @routine_cmpl__0xd__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e480)
  store %struct.Memory* %call_48e480, %struct.Memory** %MEMORY

  ; Code: jne .L_48e5e0	 RIP: 48e484	 Bytes: 6
  %loadMem_48e484 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e484 = call %struct.Memory* @routine_jne_.L_48e5e0(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e484, i8* %BRANCH_TAKEN, i64 348, i64 6, i64 6)
  store %struct.Memory* %call_48e484, %struct.Memory** %MEMORY

  %loadBr_48e484 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e484 = icmp eq i8 %loadBr_48e484, 1
  br i1 %cmpBr_48e484, label %block_.L_48e5e0, label %block_.L_48e48a

  ; Code: .L_48e48a:	 RIP: 48e48a	 Bytes: 0
block_.L_48e48a:

  ; Code: movq 0x70fcf0, %rax	 RIP: 48e48a	 Bytes: 8
  %loadMem_48e48a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e48a = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e48a)
  store %struct.Memory* %call_48e48a, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rax), %rax	 RIP: 48e492	 Bytes: 7
  %loadMem_48e492 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e492 = call %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e492)
  store %struct.Memory* %call_48e492, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48e499	 Bytes: 3
  %loadMem_48e499 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e499 = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e499)
  store %struct.Memory* %call_48e499, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e49c	 Bytes: 8
  %loadMem_48e49c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e49c = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e49c)
  store %struct.Memory* %call_48e49c, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48e4a4	 Bytes: 6
  %loadMem_48e4a4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4a4 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4a4)
  store %struct.Memory* %call_48e4a4, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48e4aa	 Bytes: 3
  %loadMem_48e4aa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4aa = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4aa)
  store %struct.Memory* %call_48e4aa, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48e4ad	 Bytes: 3
  %loadMem_48e4ad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4ad = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4ad)
  store %struct.Memory* %call_48e4ad, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e4b0	 Bytes: 4
  %loadMem_48e4b0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4b0 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4b0)
  store %struct.Memory* %call_48e4b0, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e4b4	 Bytes: 8
  %loadMem_48e4b4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4b4 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4b4)
  store %struct.Memory* %call_48e4b4, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48e4bc	 Bytes: 6
  %loadMem_48e4bc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4bc = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4bc)
  store %struct.Memory* %call_48e4bc, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48e4c2	 Bytes: 3
  %loadMem_48e4c2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4c2 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4c2)
  store %struct.Memory* %call_48e4c2, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48e4c5	 Bytes: 3
  %loadMem_48e4c5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4c5 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4c5)
  store %struct.Memory* %call_48e4c5, %struct.Memory** %MEMORY

  ; Code: movw $0xffff, (%rax,%rcx,2)	 RIP: 48e4c8	 Bytes: 6
  %loadMem_48e4c8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4c8 = call %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4c8)
  store %struct.Memory* %call_48e4c8, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48e4ce	 Bytes: 8
  %loadMem_48e4ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4ce = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4ce)
  store %struct.Memory* %call_48e4ce, %struct.Memory** %MEMORY

  ; Code: movq 0x1958(%rax), %rax	 RIP: 48e4d6	 Bytes: 7
  %loadMem_48e4d6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4d6 = call %struct.Memory* @routine_movq_0x1958__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4d6)
  store %struct.Memory* %call_48e4d6, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48e4dd	 Bytes: 3
  %loadMem_48e4dd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4dd = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4dd)
  store %struct.Memory* %call_48e4dd, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e4e0	 Bytes: 8
  %loadMem_48e4e0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4e0 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4e0)
  store %struct.Memory* %call_48e4e0, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48e4e8	 Bytes: 6
  %loadMem_48e4e8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4e8 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4e8)
  store %struct.Memory* %call_48e4e8, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48e4ee	 Bytes: 3
  %loadMem_48e4ee = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4ee = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4ee)
  store %struct.Memory* %call_48e4ee, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48e4f1	 Bytes: 3
  %loadMem_48e4f1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4f1 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4f1)
  store %struct.Memory* %call_48e4f1, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e4f4	 Bytes: 4
  %loadMem_48e4f4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4f4 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4f4)
  store %struct.Memory* %call_48e4f4, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e4f8	 Bytes: 8
  %loadMem_48e4f8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e4f8 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e4f8)
  store %struct.Memory* %call_48e4f8, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48e500	 Bytes: 6
  %loadMem_48e500 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e500 = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e500)
  store %struct.Memory* %call_48e500, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48e506	 Bytes: 3
  %loadMem_48e506 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e506 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e506)
  store %struct.Memory* %call_48e506, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48e509	 Bytes: 3
  %loadMem_48e509 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e509 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e509)
  store %struct.Memory* %call_48e509, %struct.Memory** %MEMORY

  ; Code: movq $0xffffffffffffffff, (%rax,%rcx,8)	 RIP: 48e50c	 Bytes: 8
  %loadMem_48e50c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e50c = call %struct.Memory* @routine_movq__0xffffffffffffffff____rax__rcx_8_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e50c)
  store %struct.Memory* %call_48e50c, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48e514	 Bytes: 8
  %loadMem_48e514 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e514 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e514)
  store %struct.Memory* %call_48e514, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rax), %rax	 RIP: 48e51c	 Bytes: 7
  %loadMem_48e51c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e51c = call %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e51c)
  store %struct.Memory* %call_48e51c, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48e523	 Bytes: 3
  %loadMem_48e523 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e523 = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e523)
  store %struct.Memory* %call_48e523, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e526	 Bytes: 8
  %loadMem_48e526 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e526 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e526)
  store %struct.Memory* %call_48e526, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48e52e	 Bytes: 6
  %loadMem_48e52e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e52e = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e52e)
  store %struct.Memory* %call_48e52e, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48e534	 Bytes: 3
  %loadMem_48e534 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e534 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e534)
  store %struct.Memory* %call_48e534, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48e537	 Bytes: 3
  %loadMem_48e537 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e537 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e537)
  store %struct.Memory* %call_48e537, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e53a	 Bytes: 4
  %loadMem_48e53a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e53a = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e53a)
  store %struct.Memory* %call_48e53a, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e53e	 Bytes: 8
  %loadMem_48e53e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e53e = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e53e)
  store %struct.Memory* %call_48e53e, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48e546	 Bytes: 6
  %loadMem_48e546 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e546 = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e546)
  store %struct.Memory* %call_48e546, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48e54c	 Bytes: 3
  %loadMem_48e54c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e54c = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e54c)
  store %struct.Memory* %call_48e54c, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48e54f	 Bytes: 3
  %loadMem_48e54f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e54f = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e54f)
  store %struct.Memory* %call_48e54f, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e552	 Bytes: 4
  %loadMem_48e552 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e552 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e552)
  store %struct.Memory* %call_48e552, %struct.Memory** %MEMORY

  ; Code: movw $0x0, (%rax)	 RIP: 48e556	 Bytes: 5
  %loadMem_48e556 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e556 = call %struct.Memory* @routine_movw__0x0____rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e556)
  store %struct.Memory* %call_48e556, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48e55b	 Bytes: 8
  %loadMem_48e55b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e55b = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e55b)
  store %struct.Memory* %call_48e55b, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rax), %rax	 RIP: 48e563	 Bytes: 7
  %loadMem_48e563 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e563 = call %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e563)
  store %struct.Memory* %call_48e563, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48e56a	 Bytes: 3
  %loadMem_48e56a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e56a = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e56a)
  store %struct.Memory* %call_48e56a, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e56d	 Bytes: 8
  %loadMem_48e56d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e56d = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e56d)
  store %struct.Memory* %call_48e56d, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48e575	 Bytes: 6
  %loadMem_48e575 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e575 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e575)
  store %struct.Memory* %call_48e575, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48e57b	 Bytes: 3
  %loadMem_48e57b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e57b = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e57b)
  store %struct.Memory* %call_48e57b, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48e57e	 Bytes: 3
  %loadMem_48e57e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e57e = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e57e)
  store %struct.Memory* %call_48e57e, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e581	 Bytes: 4
  %loadMem_48e581 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e581 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e581)
  store %struct.Memory* %call_48e581, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48e585	 Bytes: 8
  %loadMem_48e585 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e585 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e585)
  store %struct.Memory* %call_48e585, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48e58d	 Bytes: 6
  %loadMem_48e58d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e58d = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e58d)
  store %struct.Memory* %call_48e58d, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48e593	 Bytes: 3
  %loadMem_48e593 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e593 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e593)
  store %struct.Memory* %call_48e593, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48e596	 Bytes: 3
  %loadMem_48e596 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e596 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e596)
  store %struct.Memory* %call_48e596, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48e599	 Bytes: 4
  %loadMem_48e599 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e599 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e599)
  store %struct.Memory* %call_48e599, %struct.Memory** %MEMORY

  ; Code: movw $0x0, 0x2(%rax)	 RIP: 48e59d	 Bytes: 6
  %loadMem_48e59d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e59d = call %struct.Memory* @routine_movw__0x0__0x2__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e59d)
  store %struct.Memory* %call_48e59d, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48e5a3	 Bytes: 8
  %loadMem_48e5a3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5a3 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5a3)
  store %struct.Memory* %call_48e5a3, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48e5ab	 Bytes: 7
  %loadMem_48e5ab = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5ab = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5ab)
  store %struct.Memory* %call_48e5ab, %struct.Memory** %MEMORY

  ; Code: je .L_48e5db	 RIP: 48e5b2	 Bytes: 6
  %loadMem_48e5b2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5b2 = call %struct.Memory* @routine_je_.L_48e5db(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5b2, i8* %BRANCH_TAKEN, i64 41, i64 6, i64 6)
  store %struct.Memory* %call_48e5b2, %struct.Memory** %MEMORY

  %loadBr_48e5b2 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e5b2 = icmp eq i8 %loadBr_48e5b2, 1
  br i1 %cmpBr_48e5b2, label %block_.L_48e5db, label %block_48e5b8

block_48e5b8:
  ; Code: movq 0x6d4518, %rax	 RIP: 48e5b8	 Bytes: 8
  %loadMem_48e5b8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5b8 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5b8)
  store %struct.Memory* %call_48e5b8, %struct.Memory** %MEMORY

  ; Code: addq $0xcc0, %rax	 RIP: 48e5c0	 Bytes: 6
  %loadMem_48e5c0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5c0 = call %struct.Memory* @routine_addq__0xcc0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5c0)
  store %struct.Memory* %call_48e5c0, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48e5c6	 Bytes: 4
  %loadMem_48e5c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5c6 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5c6)
  store %struct.Memory* %call_48e5c6, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48e5ca	 Bytes: 4
  %loadMem_48e5ca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5ca = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5ca)
  store %struct.Memory* %call_48e5ca, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48e5ce	 Bytes: 3
  %loadMem_48e5ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5ce = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5ce)
  store %struct.Memory* %call_48e5ce, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48e5d1	 Bytes: 4
  %loadMem_48e5d1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5d1 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5d1)
  store %struct.Memory* %call_48e5d1, %struct.Memory** %MEMORY

  ; Code: movw $0xffff, (%rax,%rcx,2)	 RIP: 48e5d5	 Bytes: 6
  %loadMem_48e5d5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5d5 = call %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5d5)
  store %struct.Memory* %call_48e5d5, %struct.Memory** %MEMORY

  ; Code: .L_48e5db:	 RIP: 48e5db	 Bytes: 0
  br label %block_.L_48e5db
block_.L_48e5db:

  ; Code: jmpq .L_48ebe2	 RIP: 48e5db	 Bytes: 5
  %loadMem_48e5db = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5db = call %struct.Memory* @routine_jmpq_.L_48ebe2(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5db, i64 1543, i64 5)
  store %struct.Memory* %call_48e5db, %struct.Memory** %MEMORY

  br label %block_.L_48ebe2

  ; Code: .L_48e5e0:	 RIP: 48e5e0	 Bytes: 0
block_.L_48e5e0:

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e5e0	 Bytes: 4
  %loadMem_48e5e0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5e0 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5e0)
  store %struct.Memory* %call_48e5e0, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x244(%rax)	 RIP: 48e5e4	 Bytes: 7
  %loadMem_48e5e4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5e4 = call %struct.Memory* @routine_cmpl__0x0__0x244__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5e4)
  store %struct.Memory* %call_48e5e4, %struct.Memory** %MEMORY

  ; Code: je .L_48e8ce	 RIP: 48e5eb	 Bytes: 6
  %loadMem_48e5eb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5eb = call %struct.Memory* @routine_je_.L_48e8ce(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5eb, i8* %BRANCH_TAKEN, i64 739, i64 6, i64 6)
  store %struct.Memory* %call_48e5eb, %struct.Memory** %MEMORY

  %loadBr_48e5eb = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e5eb = icmp eq i8 %loadBr_48e5eb, 1
  br i1 %cmpBr_48e5eb, label %block_.L_48e8ce, label %block_48e5f1

block_48e5f1:
  ; Code: movl $0x2, %eax	 RIP: 48e5f1	 Bytes: 5
  %loadMem_48e5f1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5f1 = call %struct.Memory* @routine_movl__0x2___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5f1)
  store %struct.Memory* %call_48e5f1, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48e5f6	 Bytes: 4
  %loadMem_48e5f6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5f6 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5f6)
  store %struct.Memory* %call_48e5f6, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %edx	 RIP: 48e5fa	 Bytes: 3
  %loadMem_48e5fa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5fa = call %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5fa)
  store %struct.Memory* %call_48e5fa, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x84(%rbp)	 RIP: 48e5fd	 Bytes: 6
  %loadMem_48e5fd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e5fd = call %struct.Memory* @routine_movl__eax__MINUS0x84__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e5fd)
  store %struct.Memory* %call_48e5fd, %struct.Memory** %MEMORY

  ; Code: movl %edx, %eax	 RIP: 48e603	 Bytes: 2
  %loadMem_48e603 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e603 = call %struct.Memory* @routine_movl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e603)
  store %struct.Memory* %call_48e603, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48e605	 Bytes: 1
  %loadMem_48e605 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e605 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e605)
  store %struct.Memory* %call_48e605, %struct.Memory** %MEMORY

  ; Code: movl -0x84(%rbp), %esi	 RIP: 48e606	 Bytes: 6
  %loadMem_48e606 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e606 = call %struct.Memory* @routine_movl_MINUS0x84__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e606)
  store %struct.Memory* %call_48e606, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48e60c	 Bytes: 2
  %loadMem_48e60c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e60c = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e60c)
  store %struct.Memory* %call_48e60c, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %edi	 RIP: 48e60e	 Bytes: 3
  %loadMem_48e60e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e60e = call %struct.Memory* @routine_movl_MINUS0x10__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e60e)
  store %struct.Memory* %call_48e60e, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x88(%rbp)	 RIP: 48e611	 Bytes: 6
  %loadMem_48e611 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e611 = call %struct.Memory* @routine_movl__eax__MINUS0x88__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e611)
  store %struct.Memory* %call_48e611, %struct.Memory** %MEMORY

  ; Code: movl %edi, %eax	 RIP: 48e617	 Bytes: 2
  %loadMem_48e617 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e617 = call %struct.Memory* @routine_movl__edi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e617)
  store %struct.Memory* %call_48e617, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48e619	 Bytes: 1
  %loadMem_48e619 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e619 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e619)
  store %struct.Memory* %call_48e619, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48e61a	 Bytes: 2
  %loadMem_48e61a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e61a = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e61a)
  store %struct.Memory* %call_48e61a, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48e61c	 Bytes: 3
  %loadMem_48e61c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e61c = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e61c)
  store %struct.Memory* %call_48e61c, %struct.Memory** %MEMORY

  ; Code: movl -0x88(%rbp), %edi	 RIP: 48e61f	 Bytes: 6
  %loadMem_48e61f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e61f = call %struct.Memory* @routine_movl_MINUS0x88__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e61f)
  store %struct.Memory* %call_48e61f, %struct.Memory** %MEMORY

  ; Code: addl %eax, %edi	 RIP: 48e625	 Bytes: 2
  %loadMem_48e625 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e625 = call %struct.Memory* @routine_addl__eax___edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e625)
  store %struct.Memory* %call_48e625, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %r8	 RIP: 48e627	 Bytes: 3
  %loadMem_48e627 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e627 = call %struct.Memory* @routine_movslq__edi___r8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e627)
  store %struct.Memory* %call_48e627, %struct.Memory** %MEMORY

  ; Code: cmpl $0x2, 0x1e8(%rcx,%r8,4)	 RIP: 48e62a	 Bytes: 9
  %loadMem_48e62a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e62a = call %struct.Memory* @routine_cmpl__0x2__0x1e8__rcx__r8_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e62a)
  store %struct.Memory* %call_48e62a, %struct.Memory** %MEMORY

  ; Code: jne .L_48e8ce	 RIP: 48e633	 Bytes: 6
  %loadMem_48e633 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e633 = call %struct.Memory* @routine_jne_.L_48e8ce(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e633, i8* %BRANCH_TAKEN, i64 667, i64 6, i64 6)
  store %struct.Memory* %call_48e633, %struct.Memory** %MEMORY

  %loadBr_48e633 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e633 = icmp eq i8 %loadBr_48e633, 1
  br i1 %cmpBr_48e633, label %block_.L_48e8ce, label %block_48e639

block_48e639:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e639	 Bytes: 4
  %loadMem_48e639 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e639 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e639)
  store %struct.Memory* %call_48e639, %struct.Memory** %MEMORY

  ; Code: cmpl $0x1, 0x48(%rax)	 RIP: 48e63d	 Bytes: 4
  %loadMem_48e63d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e63d = call %struct.Memory* @routine_cmpl__0x1__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e63d)
  store %struct.Memory* %call_48e63d, %struct.Memory** %MEMORY

  ; Code: jne .L_48e8ce	 RIP: 48e641	 Bytes: 6
  %loadMem_48e641 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e641 = call %struct.Memory* @routine_jne_.L_48e8ce(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e641, i8* %BRANCH_TAKEN, i64 653, i64 6, i64 6)
  store %struct.Memory* %call_48e641, %struct.Memory** %MEMORY

  %loadBr_48e641 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e641 = icmp eq i8 %loadBr_48e641, 1
  br i1 %cmpBr_48e641, label %block_.L_48e8ce, label %block_48e647

block_48e647:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48e647	 Bytes: 4
  %loadMem_48e647 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e647 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e647)
  store %struct.Memory* %call_48e647, %struct.Memory** %MEMORY

  ; Code: cmpl $0x1, 0x244(%rax)	 RIP: 48e64b	 Bytes: 7
  %loadMem_48e64b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e64b = call %struct.Memory* @routine_cmpl__0x1__0x244__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e64b)
  store %struct.Memory* %call_48e64b, %struct.Memory** %MEMORY

  ; Code: jne .L_48e673	 RIP: 48e652	 Bytes: 6
  %loadMem_48e652 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e652 = call %struct.Memory* @routine_jne_.L_48e673(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e652, i8* %BRANCH_TAKEN, i64 33, i64 6, i64 6)
  store %struct.Memory* %call_48e652, %struct.Memory** %MEMORY

  %loadBr_48e652 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e652 = icmp eq i8 %loadBr_48e652, 1
  br i1 %cmpBr_48e652, label %block_.L_48e673, label %block_48e658

block_48e658:
  ; Code: movq 0x6cb900, %rax	 RIP: 48e658	 Bytes: 8
  %loadMem_48e658 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e658 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e658)
  store %struct.Memory* %call_48e658, %struct.Memory** %MEMORY

  ; Code: movq 0x11900(%rax), %rax	 RIP: 48e660	 Bytes: 7
  %loadMem_48e660 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e660 = call %struct.Memory* @routine_movq_0x11900__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e660)
  store %struct.Memory* %call_48e660, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x90(%rbp)	 RIP: 48e667	 Bytes: 7
  %loadMem_48e667 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e667 = call %struct.Memory* @routine_movq__rax__MINUS0x90__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e667)
  store %struct.Memory* %call_48e667, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e689	 RIP: 48e66e	 Bytes: 5
  %loadMem_48e66e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e66e = call %struct.Memory* @routine_jmpq_.L_48e689(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e66e, i64 27, i64 5)
  store %struct.Memory* %call_48e66e, %struct.Memory** %MEMORY

  br label %block_.L_48e689

  ; Code: .L_48e673:	 RIP: 48e673	 Bytes: 0
block_.L_48e673:

  ; Code: movq 0x6cb900, %rax	 RIP: 48e673	 Bytes: 8
  %loadMem_48e673 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e673 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e673)
  store %struct.Memory* %call_48e673, %struct.Memory** %MEMORY

  ; Code: movq 0x11908(%rax), %rax	 RIP: 48e67b	 Bytes: 7
  %loadMem_48e67b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e67b = call %struct.Memory* @routine_movq_0x11908__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e67b)
  store %struct.Memory* %call_48e67b, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x90(%rbp)	 RIP: 48e682	 Bytes: 7
  %loadMem_48e682 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e682 = call %struct.Memory* @routine_movq__rax__MINUS0x90__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e682)
  store %struct.Memory* %call_48e682, %struct.Memory** %MEMORY

  ; Code: .L_48e689:	 RIP: 48e689	 Bytes: 0
  br label %block_.L_48e689
block_.L_48e689:

  ; Code: movq -0x90(%rbp), %rax	 RIP: 48e689	 Bytes: 7
  %loadMem_48e689 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e689 = call %struct.Memory* @routine_movq_MINUS0x90__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e689)
  store %struct.Memory* %call_48e689, %struct.Memory** %MEMORY

  ; Code: movl $0x2, %ecx	 RIP: 48e690	 Bytes: 5
  %loadMem_48e690 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e690 = call %struct.Memory* @routine_movl__0x2___ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e690)
  store %struct.Memory* %call_48e690, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x68(%rbp)	 RIP: 48e695	 Bytes: 4
  %loadMem_48e695 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e695 = call %struct.Memory* @routine_movq__rax__MINUS0x68__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e695)
  store %struct.Memory* %call_48e695, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48e699	 Bytes: 8
  %loadMem_48e699 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e699 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e699)
  store %struct.Memory* %call_48e699, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rax), %rax	 RIP: 48e6a1	 Bytes: 7
  %loadMem_48e6a1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6a1 = call %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6a1)
  store %struct.Memory* %call_48e6a1, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48e6a8	 Bytes: 3
  %loadMem_48e6a8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6a8 = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6a8)
  store %struct.Memory* %call_48e6a8, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48e6ab	 Bytes: 8
  %loadMem_48e6ab = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6ab = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6ab)
  store %struct.Memory* %call_48e6ab, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rdx), %esi	 RIP: 48e6b3	 Bytes: 6
  %loadMem_48e6b3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6b3 = call %struct.Memory* @routine_movl_0x90__rdx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6b3)
  store %struct.Memory* %call_48e6b3, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %esi	 RIP: 48e6b9	 Bytes: 3
  %loadMem_48e6b9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6b9 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6b9)
  store %struct.Memory* %call_48e6b9, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdx	 RIP: 48e6bc	 Bytes: 3
  %loadMem_48e6bc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6bc = call %struct.Memory* @routine_movslq__esi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6bc)
  store %struct.Memory* %call_48e6bc, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rdx,8), %rax	 RIP: 48e6bf	 Bytes: 4
  %loadMem_48e6bf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6bf = call %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6bf)
  store %struct.Memory* %call_48e6bf, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48e6c3	 Bytes: 8
  %loadMem_48e6c3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6c3 = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6c3)
  store %struct.Memory* %call_48e6c3, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rdx), %esi	 RIP: 48e6cb	 Bytes: 6
  %loadMem_48e6cb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6cb = call %struct.Memory* @routine_movl_0x94__rdx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6cb)
  store %struct.Memory* %call_48e6cb, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %esi	 RIP: 48e6d1	 Bytes: 3
  %loadMem_48e6d1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6d1 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6d1)
  store %struct.Memory* %call_48e6d1, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdx	 RIP: 48e6d4	 Bytes: 3
  %loadMem_48e6d4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6d4 = call %struct.Memory* @routine_movslq__esi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6d4)
  store %struct.Memory* %call_48e6d4, %struct.Memory** %MEMORY

  ; Code: movw $0x0, (%rax,%rdx,2)	 RIP: 48e6d7	 Bytes: 6
  %loadMem_48e6d7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6d7 = call %struct.Memory* @routine_movw__0x0____rax__rdx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6d7)
  store %struct.Memory* %call_48e6d7, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48e6dd	 Bytes: 8
  %loadMem_48e6dd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6dd = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6dd)
  store %struct.Memory* %call_48e6dd, %struct.Memory** %MEMORY

  ; Code: addq $0x18, %rax	 RIP: 48e6e5	 Bytes: 4
  %loadMem_48e6e5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6e5 = call %struct.Memory* @routine_addq__0x18___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6e5)
  store %struct.Memory* %call_48e6e5, %struct.Memory** %MEMORY

  ; Code: movl -0x5c(%rbp), %esi	 RIP: 48e6e9	 Bytes: 3
  %loadMem_48e6e9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6e9 = call %struct.Memory* @routine_movl_MINUS0x5c__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6e9)
  store %struct.Memory* %call_48e6e9, %struct.Memory** %MEMORY

  ; Code: addl $0x0, %esi	 RIP: 48e6ec	 Bytes: 3
  %loadMem_48e6ec = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6ec = call %struct.Memory* @routine_addl__0x0___esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6ec)
  store %struct.Memory* %call_48e6ec, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdx	 RIP: 48e6ef	 Bytes: 3
  %loadMem_48e6ef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6ef = call %struct.Memory* @routine_movslq__esi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6ef)
  store %struct.Memory* %call_48e6ef, %struct.Memory** %MEMORY

  ; Code: imulq $0x108, %rdx, %rdx	 RIP: 48e6f2	 Bytes: 7
  %loadMem_48e6f2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6f2 = call %struct.Memory* @routine_imulq__0x108___rdx___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6f2)
  store %struct.Memory* %call_48e6f2, %struct.Memory** %MEMORY

  ; Code: addq %rdx, %rax	 RIP: 48e6f9	 Bytes: 3
  %loadMem_48e6f9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6f9 = call %struct.Memory* @routine_addq__rdx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6f9)
  store %struct.Memory* %call_48e6f9, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48e6fc	 Bytes: 3
  %loadMem_48e6fc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6fc = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6fc)
  store %struct.Memory* %call_48e6fc, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdx	 RIP: 48e6ff	 Bytes: 8
  %loadMem_48e6ff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e6ff = call %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e6ff)
  store %struct.Memory* %call_48e6ff, %struct.Memory** %MEMORY

  ; Code: movq 0x1958(%rdx), %rdx	 RIP: 48e707	 Bytes: 7
  %loadMem_48e707 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e707 = call %struct.Memory* @routine_movq_0x1958__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e707)
  store %struct.Memory* %call_48e707, %struct.Memory** %MEMORY

  ; Code: movq (%rdx), %rdx	 RIP: 48e70e	 Bytes: 3
  %loadMem_48e70e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e70e = call %struct.Memory* @routine_movq___rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e70e)
  store %struct.Memory* %call_48e70e, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdi	 RIP: 48e711	 Bytes: 8
  %loadMem_48e711 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e711 = call %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e711)
  store %struct.Memory* %call_48e711, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rdi), %esi	 RIP: 48e719	 Bytes: 6
  %loadMem_48e719 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e719 = call %struct.Memory* @routine_movl_0x90__rdi____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e719)
  store %struct.Memory* %call_48e719, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %esi	 RIP: 48e71f	 Bytes: 3
  %loadMem_48e71f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e71f = call %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e71f)
  store %struct.Memory* %call_48e71f, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdi	 RIP: 48e722	 Bytes: 3
  %loadMem_48e722 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e722 = call %struct.Memory* @routine_movslq__esi___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e722)
  store %struct.Memory* %call_48e722, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rdi,8), %rdx	 RIP: 48e725	 Bytes: 4
  %loadMem_48e725 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e725 = call %struct.Memory* @routine_movq___rdx__rdi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e725)
  store %struct.Memory* %call_48e725, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdi	 RIP: 48e729	 Bytes: 8
  %loadMem_48e729 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e729 = call %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e729)
  store %struct.Memory* %call_48e729, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rdi), %esi	 RIP: 48e731	 Bytes: 6
  %loadMem_48e731 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e731 = call %struct.Memory* @routine_movl_0x94__rdi____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e731)
  store %struct.Memory* %call_48e731, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %esi	 RIP: 48e737	 Bytes: 3
  %loadMem_48e737 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e737 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e737)
  store %struct.Memory* %call_48e737, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdi	 RIP: 48e73a	 Bytes: 3
  %loadMem_48e73a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e73a = call %struct.Memory* @routine_movslq__esi___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e73a)
  store %struct.Memory* %call_48e73a, %struct.Memory** %MEMORY

  ; Code: movq %rax, (%rdx,%rdi,8)	 RIP: 48e73d	 Bytes: 4
  %loadMem_48e73d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e73d = call %struct.Memory* @routine_movq__rax____rdx__rdi_8_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e73d)
  store %struct.Memory* %call_48e73d, %struct.Memory** %MEMORY

  ; Code: movq -0x68(%rbp), %rax	 RIP: 48e741	 Bytes: 4
  %loadMem_48e741 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e741 = call %struct.Memory* @routine_movq_MINUS0x68__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e741)
  store %struct.Memory* %call_48e741, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48e745	 Bytes: 4
  %loadMem_48e745 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e745 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e745)
  store %struct.Memory* %call_48e745, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rdx,8), %rax	 RIP: 48e749	 Bytes: 4
  %loadMem_48e749 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e749 = call %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e749)
  store %struct.Memory* %call_48e749, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rdx	 RIP: 48e74d	 Bytes: 4
  %loadMem_48e74d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e74d = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e74d)
  store %struct.Memory* %call_48e74d, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rdx,8), %rax	 RIP: 48e751	 Bytes: 4
  %loadMem_48e751 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e751 = call %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e751)
  store %struct.Memory* %call_48e751, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48e755	 Bytes: 3
  %loadMem_48e755 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e755 = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e755)
  store %struct.Memory* %call_48e755, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48e758	 Bytes: 3
  %loadMem_48e758 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e758 = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e758)
  store %struct.Memory* %call_48e758, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rdx	 RIP: 48e75b	 Bytes: 4
  %loadMem_48e75b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e75b = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e75b)
  store %struct.Memory* %call_48e75b, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %esi	 RIP: 48e75f	 Bytes: 3
  %loadMem_48e75f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e75f = call %struct.Memory* @routine_movl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e75f)
  store %struct.Memory* %call_48e75f, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x98(%rbp)	 RIP: 48e762	 Bytes: 7
  %loadMem_48e762 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e762 = call %struct.Memory* @routine_movq__rax__MINUS0x98__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e762)
  store %struct.Memory* %call_48e762, %struct.Memory** %MEMORY

  ; Code: movl %esi, %eax	 RIP: 48e769	 Bytes: 2
  %loadMem_48e769 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e769 = call %struct.Memory* @routine_movl__esi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e769)
  store %struct.Memory* %call_48e769, %struct.Memory** %MEMORY

  ; Code: movq %rdx, -0xa0(%rbp)	 RIP: 48e76b	 Bytes: 7
  %loadMem_48e76b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e76b = call %struct.Memory* @routine_movq__rdx__MINUS0xa0__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e76b)
  store %struct.Memory* %call_48e76b, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48e772	 Bytes: 1
  %loadMem_48e772 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e772 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e772)
  store %struct.Memory* %call_48e772, %struct.Memory** %MEMORY

  ; Code: idivl %ecx	 RIP: 48e773	 Bytes: 2
  %loadMem_48e773 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e773 = call %struct.Memory* @routine_idivl__ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e773)
  store %struct.Memory* %call_48e773, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %esi	 RIP: 48e775	 Bytes: 3
  %loadMem_48e775 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e775 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e775)
  store %struct.Memory* %call_48e775, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xa4(%rbp)	 RIP: 48e778	 Bytes: 6
  %loadMem_48e778 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e778 = call %struct.Memory* @routine_movl__eax__MINUS0xa4__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e778)
  store %struct.Memory* %call_48e778, %struct.Memory** %MEMORY

  ; Code: movl %esi, %eax	 RIP: 48e77e	 Bytes: 2
  %loadMem_48e77e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e77e = call %struct.Memory* @routine_movl__esi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e77e)
  store %struct.Memory* %call_48e77e, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48e780	 Bytes: 1
  %loadMem_48e780 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e780 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e780)
  store %struct.Memory* %call_48e780, %struct.Memory** %MEMORY

  ; Code: idivl %ecx	 RIP: 48e781	 Bytes: 2
  %loadMem_48e781 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e781 = call %struct.Memory* @routine_idivl__ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e781)
  store %struct.Memory* %call_48e781, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48e783	 Bytes: 3
  %loadMem_48e783 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e783 = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e783)
  store %struct.Memory* %call_48e783, %struct.Memory** %MEMORY

  ; Code: movl -0xa4(%rbp), %esi	 RIP: 48e786	 Bytes: 6
  %loadMem_48e786 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e786 = call %struct.Memory* @routine_movl_MINUS0xa4__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e786)
  store %struct.Memory* %call_48e786, %struct.Memory** %MEMORY

  ; Code: addl %eax, %esi	 RIP: 48e78c	 Bytes: 2
  %loadMem_48e78c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e78c = call %struct.Memory* @routine_addl__eax___esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e78c)
  store %struct.Memory* %call_48e78c, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdi	 RIP: 48e78e	 Bytes: 3
  %loadMem_48e78e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e78e = call %struct.Memory* @routine_movslq__esi___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e78e)
  store %struct.Memory* %call_48e78e, %struct.Memory** %MEMORY

  ; Code: movq -0xa0(%rbp), %r8	 RIP: 48e791	 Bytes: 7
  %loadMem_48e791 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e791 = call %struct.Memory* @routine_movq_MINUS0xa0__rbp____r8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e791)
  store %struct.Memory* %call_48e791, %struct.Memory** %MEMORY

  ; Code: movslq 0x1d8(%r8,%rdi,4), %rdi	 RIP: 48e798	 Bytes: 8
  %loadMem_48e798 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e798 = call %struct.Memory* @routine_movslq_0x1d8__r8__rdi_4____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e798)
  store %struct.Memory* %call_48e798, %struct.Memory** %MEMORY

  ; Code: movq -0x98(%rbp), %r9	 RIP: 48e7a0	 Bytes: 7
  %loadMem_48e7a0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7a0 = call %struct.Memory* @routine_movq_MINUS0x98__rbp____r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7a0)
  store %struct.Memory* %call_48e7a0, %struct.Memory** %MEMORY

  ; Code: movq (%r9,%rdi,8), %rdi	 RIP: 48e7a7	 Bytes: 4
  %loadMem_48e7a7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7a7 = call %struct.Memory* @routine_movq___r9__rdi_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7a7)
  store %struct.Memory* %call_48e7a7, %struct.Memory** %MEMORY

  ; Code: movw (%rdi), %r10w	 RIP: 48e7ab	 Bytes: 4
  %loadMem_48e7ab = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7ab = call %struct.Memory* @routine_movw___rdi____r10w(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7ab)
  store %struct.Memory* %call_48e7ab, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdi	 RIP: 48e7af	 Bytes: 8
  %loadMem_48e7af = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7af = call %struct.Memory* @routine_movq_0x70fcf0___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7af)
  store %struct.Memory* %call_48e7af, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rdi), %rdi	 RIP: 48e7b7	 Bytes: 7
  %loadMem_48e7b7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7b7 = call %struct.Memory* @routine_movq_0x1968__rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7b7)
  store %struct.Memory* %call_48e7b7, %struct.Memory** %MEMORY

  ; Code: movq (%rdi), %rdi	 RIP: 48e7be	 Bytes: 3
  %loadMem_48e7be = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7be = call %struct.Memory* @routine_movq___rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7be)
  store %struct.Memory* %call_48e7be, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48e7c1	 Bytes: 8
  %loadMem_48e7c1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7c1 = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7c1)
  store %struct.Memory* %call_48e7c1, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r11), %eax	 RIP: 48e7c9	 Bytes: 7
  %loadMem_48e7c9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7c9 = call %struct.Memory* @routine_movl_0x90__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7c9)
  store %struct.Memory* %call_48e7c9, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %eax	 RIP: 48e7d0	 Bytes: 3
  %loadMem_48e7d0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7d0 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7d0)
  store %struct.Memory* %call_48e7d0, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48e7d3	 Bytes: 3
  %loadMem_48e7d3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7d3 = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7d3)
  store %struct.Memory* %call_48e7d3, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48e7d6	 Bytes: 4
  %loadMem_48e7d6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7d6 = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7d6)
  store %struct.Memory* %call_48e7d6, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48e7da	 Bytes: 8
  %loadMem_48e7da = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7da = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7da)
  store %struct.Memory* %call_48e7da, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r11), %eax	 RIP: 48e7e2	 Bytes: 7
  %loadMem_48e7e2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7e2 = call %struct.Memory* @routine_movl_0x94__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7e2)
  store %struct.Memory* %call_48e7e2, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %eax	 RIP: 48e7e9	 Bytes: 3
  %loadMem_48e7e9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7e9 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7e9)
  store %struct.Memory* %call_48e7e9, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48e7ec	 Bytes: 3
  %loadMem_48e7ec = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7ec = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7ec)
  store %struct.Memory* %call_48e7ec, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48e7ef	 Bytes: 4
  %loadMem_48e7ef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7ef = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7ef)
  store %struct.Memory* %call_48e7ef, %struct.Memory** %MEMORY

  ; Code: movw %r10w, (%rdi)	 RIP: 48e7f3	 Bytes: 4
  %loadMem_48e7f3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7f3 = call %struct.Memory* @routine_movw__r10w____rdi_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7f3)
  store %struct.Memory* %call_48e7f3, %struct.Memory** %MEMORY

  ; Code: movq -0x68(%rbp), %rdi	 RIP: 48e7f7	 Bytes: 4
  %loadMem_48e7f7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7f7 = call %struct.Memory* @routine_movq_MINUS0x68__rbp____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7f7)
  store %struct.Memory* %call_48e7f7, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %r11	 RIP: 48e7fb	 Bytes: 4
  %loadMem_48e7fb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7fb = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7fb)
  store %struct.Memory* %call_48e7fb, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48e7ff	 Bytes: 4
  %loadMem_48e7ff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e7ff = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e7ff)
  store %struct.Memory* %call_48e7ff, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %r11	 RIP: 48e803	 Bytes: 4
  %loadMem_48e803 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e803 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e803)
  store %struct.Memory* %call_48e803, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48e807	 Bytes: 4
  %loadMem_48e807 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e807 = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e807)
  store %struct.Memory* %call_48e807, %struct.Memory** %MEMORY

  ; Code: movq (%rdi), %rdi	 RIP: 48e80b	 Bytes: 3
  %loadMem_48e80b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e80b = call %struct.Memory* @routine_movq___rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e80b)
  store %struct.Memory* %call_48e80b, %struct.Memory** %MEMORY

  ; Code: movq (%rdi), %rdi	 RIP: 48e80e	 Bytes: 3
  %loadMem_48e80e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e80e = call %struct.Memory* @routine_movq___rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e80e)
  store %struct.Memory* %call_48e80e, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %r11	 RIP: 48e811	 Bytes: 4
  %loadMem_48e811 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e811 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e811)
  store %struct.Memory* %call_48e811, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48e815	 Bytes: 3
  %loadMem_48e815 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e815 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e815)
  store %struct.Memory* %call_48e815, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48e818	 Bytes: 1
  %loadMem_48e818 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e818 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e818)
  store %struct.Memory* %call_48e818, %struct.Memory** %MEMORY

  ; Code: idivl %ecx	 RIP: 48e819	 Bytes: 2
  %loadMem_48e819 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e819 = call %struct.Memory* @routine_idivl__ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e819)
  store %struct.Memory* %call_48e819, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %esi	 RIP: 48e81b	 Bytes: 3
  %loadMem_48e81b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e81b = call %struct.Memory* @routine_movl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e81b)
  store %struct.Memory* %call_48e81b, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xa8(%rbp)	 RIP: 48e81e	 Bytes: 6
  %loadMem_48e81e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e81e = call %struct.Memory* @routine_movl__eax__MINUS0xa8__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e81e)
  store %struct.Memory* %call_48e81e, %struct.Memory** %MEMORY

  ; Code: movl %esi, %eax	 RIP: 48e824	 Bytes: 2
  %loadMem_48e824 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e824 = call %struct.Memory* @routine_movl__esi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e824)
  store %struct.Memory* %call_48e824, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48e826	 Bytes: 1
  %loadMem_48e826 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e826 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e826)
  store %struct.Memory* %call_48e826, %struct.Memory** %MEMORY

  ; Code: idivl %ecx	 RIP: 48e827	 Bytes: 2
  %loadMem_48e827 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e827 = call %struct.Memory* @routine_idivl__ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e827)
  store %struct.Memory* %call_48e827, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48e829	 Bytes: 3
  %loadMem_48e829 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e829 = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e829)
  store %struct.Memory* %call_48e829, %struct.Memory** %MEMORY

  ; Code: movl -0xa8(%rbp), %ecx	 RIP: 48e82c	 Bytes: 6
  %loadMem_48e82c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e82c = call %struct.Memory* @routine_movl_MINUS0xa8__rbp____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e82c)
  store %struct.Memory* %call_48e82c, %struct.Memory** %MEMORY

  ; Code: addl %eax, %ecx	 RIP: 48e832	 Bytes: 2
  %loadMem_48e832 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e832 = call %struct.Memory* @routine_addl__eax___ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e832)
  store %struct.Memory* %call_48e832, %struct.Memory** %MEMORY

  ; Code: movslq %ecx, %rbx	 RIP: 48e834	 Bytes: 3
  %loadMem_48e834 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e834 = call %struct.Memory* @routine_movslq__ecx___rbx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e834)
  store %struct.Memory* %call_48e834, %struct.Memory** %MEMORY

  ; Code: movslq 0x1d8(%r11,%rbx,4), %r11	 RIP: 48e837	 Bytes: 8
  %loadMem_48e837 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e837 = call %struct.Memory* @routine_movslq_0x1d8__r11__rbx_4____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e837)
  store %struct.Memory* %call_48e837, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48e83f	 Bytes: 4
  %loadMem_48e83f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e83f = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e83f)
  store %struct.Memory* %call_48e83f, %struct.Memory** %MEMORY

  ; Code: movw 0x2(%rdi), %r10w	 RIP: 48e843	 Bytes: 5
  %loadMem_48e843 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e843 = call %struct.Memory* @routine_movw_0x2__rdi____r10w(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e843)
  store %struct.Memory* %call_48e843, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdi	 RIP: 48e848	 Bytes: 8
  %loadMem_48e848 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e848 = call %struct.Memory* @routine_movq_0x70fcf0___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e848)
  store %struct.Memory* %call_48e848, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rdi), %rdi	 RIP: 48e850	 Bytes: 7
  %loadMem_48e850 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e850 = call %struct.Memory* @routine_movq_0x1968__rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e850)
  store %struct.Memory* %call_48e850, %struct.Memory** %MEMORY

  ; Code: movq (%rdi), %rdi	 RIP: 48e857	 Bytes: 3
  %loadMem_48e857 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e857 = call %struct.Memory* @routine_movq___rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e857)
  store %struct.Memory* %call_48e857, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48e85a	 Bytes: 8
  %loadMem_48e85a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e85a = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e85a)
  store %struct.Memory* %call_48e85a, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r11), %eax	 RIP: 48e862	 Bytes: 7
  %loadMem_48e862 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e862 = call %struct.Memory* @routine_movl_0x90__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e862)
  store %struct.Memory* %call_48e862, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %eax	 RIP: 48e869	 Bytes: 3
  %loadMem_48e869 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e869 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e869)
  store %struct.Memory* %call_48e869, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48e86c	 Bytes: 3
  %loadMem_48e86c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e86c = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e86c)
  store %struct.Memory* %call_48e86c, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48e86f	 Bytes: 4
  %loadMem_48e86f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e86f = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e86f)
  store %struct.Memory* %call_48e86f, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48e873	 Bytes: 8
  %loadMem_48e873 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e873 = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e873)
  store %struct.Memory* %call_48e873, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r11), %eax	 RIP: 48e87b	 Bytes: 7
  %loadMem_48e87b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e87b = call %struct.Memory* @routine_movl_0x94__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e87b)
  store %struct.Memory* %call_48e87b, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %eax	 RIP: 48e882	 Bytes: 3
  %loadMem_48e882 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e882 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e882)
  store %struct.Memory* %call_48e882, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48e885	 Bytes: 3
  %loadMem_48e885 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e885 = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e885)
  store %struct.Memory* %call_48e885, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48e888	 Bytes: 4
  %loadMem_48e888 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e888 = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e888)
  store %struct.Memory* %call_48e888, %struct.Memory** %MEMORY

  ; Code: movw %r10w, 0x2(%rdi)	 RIP: 48e88c	 Bytes: 5
  %loadMem_48e88c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e88c = call %struct.Memory* @routine_movw__r10w__0x2__rdi_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e88c)
  store %struct.Memory* %call_48e88c, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdi	 RIP: 48e891	 Bytes: 8
  %loadMem_48e891 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e891 = call %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e891)
  store %struct.Memory* %call_48e891, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rdi)	 RIP: 48e899	 Bytes: 7
  %loadMem_48e899 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e899 = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rdi_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e899)
  store %struct.Memory* %call_48e899, %struct.Memory** %MEMORY

  ; Code: je .L_48e8c9	 RIP: 48e8a0	 Bytes: 6
  %loadMem_48e8a0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8a0 = call %struct.Memory* @routine_je_.L_48e8c9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8a0, i8* %BRANCH_TAKEN, i64 41, i64 6, i64 6)
  store %struct.Memory* %call_48e8a0, %struct.Memory** %MEMORY

  %loadBr_48e8a0 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48e8a0 = icmp eq i8 %loadBr_48e8a0, 1
  br i1 %cmpBr_48e8a0, label %block_.L_48e8c9, label %block_48e8a6

block_48e8a6:
  ; Code: movq 0x6d4518, %rax	 RIP: 48e8a6	 Bytes: 8
  %loadMem_48e8a6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8a6 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8a6)
  store %struct.Memory* %call_48e8a6, %struct.Memory** %MEMORY

  ; Code: addq $0xcc0, %rax	 RIP: 48e8ae	 Bytes: 6
  %loadMem_48e8ae = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8ae = call %struct.Memory* @routine_addq__0xcc0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8ae)
  store %struct.Memory* %call_48e8ae, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48e8b4	 Bytes: 4
  %loadMem_48e8b4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8b4 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8b4)
  store %struct.Memory* %call_48e8b4, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48e8b8	 Bytes: 4
  %loadMem_48e8b8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8b8 = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8b8)
  store %struct.Memory* %call_48e8b8, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48e8bc	 Bytes: 3
  %loadMem_48e8bc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8bc = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8bc)
  store %struct.Memory* %call_48e8bc, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48e8bf	 Bytes: 4
  %loadMem_48e8bf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8bf = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8bf)
  store %struct.Memory* %call_48e8bf, %struct.Memory** %MEMORY

  ; Code: movw $0x0, (%rax,%rcx,2)	 RIP: 48e8c3	 Bytes: 6
  %loadMem_48e8c3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8c3 = call %struct.Memory* @routine_movw__0x0____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8c3)
  store %struct.Memory* %call_48e8c3, %struct.Memory** %MEMORY

  ; Code: .L_48e8c9:	 RIP: 48e8c9	 Bytes: 0
  br label %block_.L_48e8c9
block_.L_48e8c9:

  ; Code: jmpq .L_48ebdd	 RIP: 48e8c9	 Bytes: 5
  %loadMem_48e8c9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8c9 = call %struct.Memory* @routine_jmpq_.L_48ebdd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8c9, i64 788, i64 5)
  store %struct.Memory* %call_48e8c9, %struct.Memory** %MEMORY

  br label %block_.L_48ebdd

  ; Code: .L_48e8ce:	 RIP: 48e8ce	 Bytes: 0
block_.L_48e8ce:

  ; Code: movl $0x2, %eax	 RIP: 48e8ce	 Bytes: 5
  %loadMem_48e8ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8ce = call %struct.Memory* @routine_movl__0x2___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8ce)
  store %struct.Memory* %call_48e8ce, %struct.Memory** %MEMORY

  ; Code: movq $0x6d1290, %rcx	 RIP: 48e8d3	 Bytes: 10
  %loadMem_48e8d3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8d3 = call %struct.Memory* @routine_movq__0x6d1290___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8d3)
  store %struct.Memory* %call_48e8d3, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rdx	 RIP: 48e8dd	 Bytes: 4
  %loadMem_48e8dd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8dd = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8dd)
  store %struct.Memory* %call_48e8dd, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rdx	 RIP: 48e8e1	 Bytes: 4
  %loadMem_48e8e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8e1 = call %struct.Memory* @routine_shlq__0x3___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8e1)
  store %struct.Memory* %call_48e8e1, %struct.Memory** %MEMORY

  ; Code: movq %rcx, %rsi	 RIP: 48e8e5	 Bytes: 3
  %loadMem_48e8e5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8e5 = call %struct.Memory* @routine_movq__rcx___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8e5)
  store %struct.Memory* %call_48e8e5, %struct.Memory** %MEMORY

  ; Code: addq %rdx, %rsi	 RIP: 48e8e8	 Bytes: 3
  %loadMem_48e8e8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8e8 = call %struct.Memory* @routine_addq__rdx___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8e8)
  store %struct.Memory* %call_48e8e8, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48e8eb	 Bytes: 4
  %loadMem_48e8eb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8eb = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8eb)
  store %struct.Memory* %call_48e8eb, %struct.Memory** %MEMORY

  ; Code: movw (%rsi,%rdx,2), %di	 RIP: 48e8ef	 Bytes: 4
  %loadMem_48e8ef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8ef = call %struct.Memory* @routine_movw___rsi__rdx_2____di(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8ef)
  store %struct.Memory* %call_48e8ef, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdx	 RIP: 48e8f3	 Bytes: 8
  %loadMem_48e8f3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8f3 = call %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8f3)
  store %struct.Memory* %call_48e8f3, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rdx), %rdx	 RIP: 48e8fb	 Bytes: 7
  %loadMem_48e8fb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e8fb = call %struct.Memory* @routine_movq_0x1950__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e8fb)
  store %struct.Memory* %call_48e8fb, %struct.Memory** %MEMORY

  ; Code: movq (%rdx), %rdx	 RIP: 48e902	 Bytes: 3
  %loadMem_48e902 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e902 = call %struct.Memory* @routine_movq___rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e902)
  store %struct.Memory* %call_48e902, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48e905	 Bytes: 8
  %loadMem_48e905 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e905 = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e905)
  store %struct.Memory* %call_48e905, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rsi), %r8d	 RIP: 48e90d	 Bytes: 7
  %loadMem_48e90d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e90d = call %struct.Memory* @routine_movl_0x90__rsi____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e90d)
  store %struct.Memory* %call_48e90d, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %r8d	 RIP: 48e914	 Bytes: 4
  %loadMem_48e914 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e914 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e914)
  store %struct.Memory* %call_48e914, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %rsi	 RIP: 48e918	 Bytes: 3
  %loadMem_48e918 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e918 = call %struct.Memory* @routine_movslq__r8d___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e918)
  store %struct.Memory* %call_48e918, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48e91b	 Bytes: 4
  %loadMem_48e91b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e91b = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e91b)
  store %struct.Memory* %call_48e91b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48e91f	 Bytes: 8
  %loadMem_48e91f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e91f = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e91f)
  store %struct.Memory* %call_48e91f, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rsi), %r8d	 RIP: 48e927	 Bytes: 7
  %loadMem_48e927 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e927 = call %struct.Memory* @routine_movl_0x94__rsi____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e927)
  store %struct.Memory* %call_48e927, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %r8d	 RIP: 48e92e	 Bytes: 4
  %loadMem_48e92e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e92e = call %struct.Memory* @routine_addl_MINUS0x10__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e92e)
  store %struct.Memory* %call_48e92e, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %rsi	 RIP: 48e932	 Bytes: 3
  %loadMem_48e932 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e932 = call %struct.Memory* @routine_movslq__r8d___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e932)
  store %struct.Memory* %call_48e932, %struct.Memory** %MEMORY

  ; Code: movw %di, (%rdx,%rsi,2)	 RIP: 48e935	 Bytes: 4
  %loadMem_48e935 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e935 = call %struct.Memory* @routine_movw__di____rdx__rsi_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e935)
  store %struct.Memory* %call_48e935, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdx	 RIP: 48e939	 Bytes: 8
  %loadMem_48e939 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e939 = call %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e939)
  store %struct.Memory* %call_48e939, %struct.Memory** %MEMORY

  ; Code: addq $0x18, %rdx	 RIP: 48e941	 Bytes: 4
  %loadMem_48e941 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e941 = call %struct.Memory* @routine_addq__0x18___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e941)
  store %struct.Memory* %call_48e941, %struct.Memory** %MEMORY

  ; Code: movl -0x5c(%rbp), %r8d	 RIP: 48e945	 Bytes: 4
  %loadMem_48e945 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e945 = call %struct.Memory* @routine_movl_MINUS0x5c__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e945)
  store %struct.Memory* %call_48e945, %struct.Memory** %MEMORY

  ; Code: addl $0x0, %r8d	 RIP: 48e949	 Bytes: 4
  %loadMem_48e949 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e949 = call %struct.Memory* @routine_addl__0x0___r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e949)
  store %struct.Memory* %call_48e949, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %rsi	 RIP: 48e94d	 Bytes: 3
  %loadMem_48e94d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e94d = call %struct.Memory* @routine_movslq__r8d___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e94d)
  store %struct.Memory* %call_48e94d, %struct.Memory** %MEMORY

  ; Code: imulq $0x108, %rsi, %rsi	 RIP: 48e950	 Bytes: 7
  %loadMem_48e950 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e950 = call %struct.Memory* @routine_imulq__0x108___rsi___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e950)
  store %struct.Memory* %call_48e950, %struct.Memory** %MEMORY

  ; Code: addq %rsi, %rdx	 RIP: 48e957	 Bytes: 3
  %loadMem_48e957 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e957 = call %struct.Memory* @routine_addq__rsi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e957)
  store %struct.Memory* %call_48e957, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rsi	 RIP: 48e95a	 Bytes: 8
  %loadMem_48e95a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e95a = call %struct.Memory* @routine_movq_0x70fcf0___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e95a)
  store %struct.Memory* %call_48e95a, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rsi), %rsi	 RIP: 48e962	 Bytes: 7
  %loadMem_48e962 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e962 = call %struct.Memory* @routine_movq_0x1950__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e962)
  store %struct.Memory* %call_48e962, %struct.Memory** %MEMORY

  ; Code: movq (%rsi), %rsi	 RIP: 48e969	 Bytes: 3
  %loadMem_48e969 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e969 = call %struct.Memory* @routine_movq___rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e969)
  store %struct.Memory* %call_48e969, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r9	 RIP: 48e96c	 Bytes: 8
  %loadMem_48e96c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e96c = call %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e96c)
  store %struct.Memory* %call_48e96c, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r9), %r8d	 RIP: 48e974	 Bytes: 7
  %loadMem_48e974 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e974 = call %struct.Memory* @routine_movl_0x90__r9____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e974)
  store %struct.Memory* %call_48e974, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %r8d	 RIP: 48e97b	 Bytes: 4
  %loadMem_48e97b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e97b = call %struct.Memory* @routine_addl_MINUS0xc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e97b)
  store %struct.Memory* %call_48e97b, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %r9	 RIP: 48e97f	 Bytes: 3
  %loadMem_48e97f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e97f = call %struct.Memory* @routine_movslq__r8d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e97f)
  store %struct.Memory* %call_48e97f, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r9,8), %rsi	 RIP: 48e982	 Bytes: 4
  %loadMem_48e982 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e982 = call %struct.Memory* @routine_movq___rsi__r9_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e982)
  store %struct.Memory* %call_48e982, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r9	 RIP: 48e986	 Bytes: 8
  %loadMem_48e986 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e986 = call %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e986)
  store %struct.Memory* %call_48e986, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r9), %r8d	 RIP: 48e98e	 Bytes: 7
  %loadMem_48e98e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e98e = call %struct.Memory* @routine_movl_0x94__r9____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e98e)
  store %struct.Memory* %call_48e98e, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %r8d	 RIP: 48e995	 Bytes: 4
  %loadMem_48e995 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e995 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e995)
  store %struct.Memory* %call_48e995, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %r9	 RIP: 48e999	 Bytes: 3
  %loadMem_48e999 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e999 = call %struct.Memory* @routine_movslq__r8d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e999)
  store %struct.Memory* %call_48e999, %struct.Memory** %MEMORY

  ; Code: movswq (%rsi,%r9,2), %rsi	 RIP: 48e99c	 Bytes: 5
  %loadMem_48e99c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e99c = call %struct.Memory* @routine_movswq___rsi__r9_2____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e99c)
  store %struct.Memory* %call_48e99c, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48e9a1	 Bytes: 4
  %loadMem_48e9a1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9a1 = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9a1)
  store %struct.Memory* %call_48e9a1, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rsi	 RIP: 48e9a5	 Bytes: 8
  %loadMem_48e9a5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9a5 = call %struct.Memory* @routine_movq_0x70fcf0___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9a5)
  store %struct.Memory* %call_48e9a5, %struct.Memory** %MEMORY

  ; Code: movq 0x1958(%rsi), %rsi	 RIP: 48e9ad	 Bytes: 7
  %loadMem_48e9ad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9ad = call %struct.Memory* @routine_movq_0x1958__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9ad)
  store %struct.Memory* %call_48e9ad, %struct.Memory** %MEMORY

  ; Code: movq (%rsi), %rsi	 RIP: 48e9b4	 Bytes: 3
  %loadMem_48e9b4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9b4 = call %struct.Memory* @routine_movq___rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9b4)
  store %struct.Memory* %call_48e9b4, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r9	 RIP: 48e9b7	 Bytes: 8
  %loadMem_48e9b7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9b7 = call %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9b7)
  store %struct.Memory* %call_48e9b7, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r9), %r8d	 RIP: 48e9bf	 Bytes: 7
  %loadMem_48e9bf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9bf = call %struct.Memory* @routine_movl_0x90__r9____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9bf)
  store %struct.Memory* %call_48e9bf, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %r8d	 RIP: 48e9c6	 Bytes: 4
  %loadMem_48e9c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9c6 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9c6)
  store %struct.Memory* %call_48e9c6, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %r9	 RIP: 48e9ca	 Bytes: 3
  %loadMem_48e9ca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9ca = call %struct.Memory* @routine_movslq__r8d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9ca)
  store %struct.Memory* %call_48e9ca, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r9,8), %rsi	 RIP: 48e9cd	 Bytes: 4
  %loadMem_48e9cd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9cd = call %struct.Memory* @routine_movq___rsi__r9_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9cd)
  store %struct.Memory* %call_48e9cd, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r9	 RIP: 48e9d1	 Bytes: 8
  %loadMem_48e9d1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9d1 = call %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9d1)
  store %struct.Memory* %call_48e9d1, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r9), %r8d	 RIP: 48e9d9	 Bytes: 7
  %loadMem_48e9d9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9d9 = call %struct.Memory* @routine_movl_0x94__r9____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9d9)
  store %struct.Memory* %call_48e9d9, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %r8d	 RIP: 48e9e0	 Bytes: 4
  %loadMem_48e9e0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9e0 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9e0)
  store %struct.Memory* %call_48e9e0, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %r9	 RIP: 48e9e4	 Bytes: 3
  %loadMem_48e9e4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9e4 = call %struct.Memory* @routine_movslq__r8d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9e4)
  store %struct.Memory* %call_48e9e4, %struct.Memory** %MEMORY

  ; Code: movq %rdx, (%rsi,%r9,8)	 RIP: 48e9e7	 Bytes: 4
  %loadMem_48e9e7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9e7 = call %struct.Memory* @routine_movq__rdx____rsi__r9_8_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9e7)
  store %struct.Memory* %call_48e9e7, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48e9eb	 Bytes: 8
  %loadMem_48e9eb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9eb = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9eb)
  store %struct.Memory* %call_48e9eb, %struct.Memory** %MEMORY

  ; Code: movq 0x118f8(%rdx), %rdx	 RIP: 48e9f3	 Bytes: 7
  %loadMem_48e9f3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9f3 = call %struct.Memory* @routine_movq_0x118f8__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9f3)
  store %struct.Memory* %call_48e9f3, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rsi	 RIP: 48e9fa	 Bytes: 4
  %loadMem_48e9fa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9fa = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9fa)
  store %struct.Memory* %call_48e9fa, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48e9fe	 Bytes: 4
  %loadMem_48e9fe = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48e9fe = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48e9fe)
  store %struct.Memory* %call_48e9fe, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rsi	 RIP: 48ea02	 Bytes: 4
  %loadMem_48ea02 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea02 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea02)
  store %struct.Memory* %call_48ea02, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48ea06	 Bytes: 4
  %loadMem_48ea06 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea06 = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea06)
  store %struct.Memory* %call_48ea06, %struct.Memory** %MEMORY

  ; Code: movq (%rdx), %rdx	 RIP: 48ea0a	 Bytes: 3
  %loadMem_48ea0a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea0a = call %struct.Memory* @routine_movq___rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea0a)
  store %struct.Memory* %call_48ea0a, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rsi	 RIP: 48ea0d	 Bytes: 4
  %loadMem_48ea0d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea0d = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea0d)
  store %struct.Memory* %call_48ea0d, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rsi	 RIP: 48ea11	 Bytes: 4
  %loadMem_48ea11 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea11 = call %struct.Memory* @routine_shlq__0x3___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea11)
  store %struct.Memory* %call_48ea11, %struct.Memory** %MEMORY

  ; Code: movq %rcx, %r9	 RIP: 48ea15	 Bytes: 3
  %loadMem_48ea15 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea15 = call %struct.Memory* @routine_movq__rcx___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea15)
  store %struct.Memory* %call_48ea15, %struct.Memory** %MEMORY

  ; Code: addq %rsi, %r9	 RIP: 48ea18	 Bytes: 3
  %loadMem_48ea18 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea18 = call %struct.Memory* @routine_addq__rsi___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea18)
  store %struct.Memory* %call_48ea18, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rsi	 RIP: 48ea1b	 Bytes: 4
  %loadMem_48ea1b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea1b = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea1b)
  store %struct.Memory* %call_48ea1b, %struct.Memory** %MEMORY

  ; Code: movswq (%r9,%rsi,2), %rsi	 RIP: 48ea1f	 Bytes: 5
  %loadMem_48ea1f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea1f = call %struct.Memory* @routine_movswq___r9__rsi_2____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea1f)
  store %struct.Memory* %call_48ea1f, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48ea24	 Bytes: 4
  %loadMem_48ea24 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea24 = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea24)
  store %struct.Memory* %call_48ea24, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rsi	 RIP: 48ea28	 Bytes: 4
  %loadMem_48ea28 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea28 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea28)
  store %struct.Memory* %call_48ea28, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %r8d	 RIP: 48ea2c	 Bytes: 4
  %loadMem_48ea2c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea2c = call %struct.Memory* @routine_movl_MINUS0xc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea2c)
  store %struct.Memory* %call_48ea2c, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xac(%rbp)	 RIP: 48ea30	 Bytes: 6
  %loadMem_48ea30 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea30 = call %struct.Memory* @routine_movl__eax__MINUS0xac__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea30)
  store %struct.Memory* %call_48ea30, %struct.Memory** %MEMORY

  ; Code: movl %r8d, %eax	 RIP: 48ea36	 Bytes: 3
  %loadMem_48ea36 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea36 = call %struct.Memory* @routine_movl__r8d___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea36)
  store %struct.Memory* %call_48ea36, %struct.Memory** %MEMORY

  ; Code: movq %rdx, -0xb8(%rbp)	 RIP: 48ea39	 Bytes: 7
  %loadMem_48ea39 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea39 = call %struct.Memory* @routine_movq__rdx__MINUS0xb8__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea39)
  store %struct.Memory* %call_48ea39, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48ea40	 Bytes: 1
  %loadMem_48ea40 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea40 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea40)
  store %struct.Memory* %call_48ea40, %struct.Memory** %MEMORY

  ; Code: movl -0xac(%rbp), %r8d	 RIP: 48ea41	 Bytes: 7
  %loadMem_48ea41 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea41 = call %struct.Memory* @routine_movl_MINUS0xac__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea41)
  store %struct.Memory* %call_48ea41, %struct.Memory** %MEMORY

  ; Code: idivl %r8d	 RIP: 48ea48	 Bytes: 3
  %loadMem_48ea48 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea48 = call %struct.Memory* @routine_idivl__r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea48)
  store %struct.Memory* %call_48ea48, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %r10d	 RIP: 48ea4b	 Bytes: 4
  %loadMem_48ea4b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea4b = call %struct.Memory* @routine_movl_MINUS0x10__rbp____r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea4b)
  store %struct.Memory* %call_48ea4b, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xbc(%rbp)	 RIP: 48ea4f	 Bytes: 6
  %loadMem_48ea4f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea4f = call %struct.Memory* @routine_movl__eax__MINUS0xbc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea4f)
  store %struct.Memory* %call_48ea4f, %struct.Memory** %MEMORY

  ; Code: movl %r10d, %eax	 RIP: 48ea55	 Bytes: 3
  %loadMem_48ea55 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea55 = call %struct.Memory* @routine_movl__r10d___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea55)
  store %struct.Memory* %call_48ea55, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48ea58	 Bytes: 1
  %loadMem_48ea58 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea58 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea58)
  store %struct.Memory* %call_48ea58, %struct.Memory** %MEMORY

  ; Code: idivl %r8d	 RIP: 48ea59	 Bytes: 3
  %loadMem_48ea59 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea59 = call %struct.Memory* @routine_idivl__r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea59)
  store %struct.Memory* %call_48ea59, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48ea5c	 Bytes: 3
  %loadMem_48ea5c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea5c = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea5c)
  store %struct.Memory* %call_48ea5c, %struct.Memory** %MEMORY

  ; Code: movl -0xbc(%rbp), %r10d	 RIP: 48ea5f	 Bytes: 7
  %loadMem_48ea5f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea5f = call %struct.Memory* @routine_movl_MINUS0xbc__rbp____r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea5f)
  store %struct.Memory* %call_48ea5f, %struct.Memory** %MEMORY

  ; Code: addl %eax, %r10d	 RIP: 48ea66	 Bytes: 3
  %loadMem_48ea66 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea66 = call %struct.Memory* @routine_addl__eax___r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea66)
  store %struct.Memory* %call_48ea66, %struct.Memory** %MEMORY

  ; Code: movslq %r10d, %r9	 RIP: 48ea69	 Bytes: 3
  %loadMem_48ea69 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea69 = call %struct.Memory* @routine_movslq__r10d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea69)
  store %struct.Memory* %call_48ea69, %struct.Memory** %MEMORY

  ; Code: movslq 0x1d8(%rsi,%r9,4), %rsi	 RIP: 48ea6c	 Bytes: 8
  %loadMem_48ea6c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea6c = call %struct.Memory* @routine_movslq_0x1d8__rsi__r9_4____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea6c)
  store %struct.Memory* %call_48ea6c, %struct.Memory** %MEMORY

  ; Code: movq -0xb8(%rbp), %r9	 RIP: 48ea74	 Bytes: 7
  %loadMem_48ea74 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea74 = call %struct.Memory* @routine_movq_MINUS0xb8__rbp____r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea74)
  store %struct.Memory* %call_48ea74, %struct.Memory** %MEMORY

  ; Code: movq (%r9,%rsi,8), %rsi	 RIP: 48ea7b	 Bytes: 4
  %loadMem_48ea7b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea7b = call %struct.Memory* @routine_movq___r9__rsi_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea7b)
  store %struct.Memory* %call_48ea7b, %struct.Memory** %MEMORY

  ; Code: movw (%rsi), %di	 RIP: 48ea7f	 Bytes: 3
  %loadMem_48ea7f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea7f = call %struct.Memory* @routine_movw___rsi____di(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea7f)
  store %struct.Memory* %call_48ea7f, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rsi	 RIP: 48ea82	 Bytes: 8
  %loadMem_48ea82 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea82 = call %struct.Memory* @routine_movq_0x70fcf0___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea82)
  store %struct.Memory* %call_48ea82, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rsi), %rsi	 RIP: 48ea8a	 Bytes: 7
  %loadMem_48ea8a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea8a = call %struct.Memory* @routine_movq_0x1968__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea8a)
  store %struct.Memory* %call_48ea8a, %struct.Memory** %MEMORY

  ; Code: movq (%rsi), %rsi	 RIP: 48ea91	 Bytes: 3
  %loadMem_48ea91 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea91 = call %struct.Memory* @routine_movq___rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea91)
  store %struct.Memory* %call_48ea91, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48ea94	 Bytes: 8
  %loadMem_48ea94 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea94 = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea94)
  store %struct.Memory* %call_48ea94, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r11), %eax	 RIP: 48ea9c	 Bytes: 7
  %loadMem_48ea9c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ea9c = call %struct.Memory* @routine_movl_0x90__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ea9c)
  store %struct.Memory* %call_48ea9c, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %eax	 RIP: 48eaa3	 Bytes: 3
  %loadMem_48eaa3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaa3 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaa3)
  store %struct.Memory* %call_48eaa3, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48eaa6	 Bytes: 3
  %loadMem_48eaa6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaa6 = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaa6)
  store %struct.Memory* %call_48eaa6, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r11,8), %rsi	 RIP: 48eaa9	 Bytes: 4
  %loadMem_48eaa9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaa9 = call %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaa9)
  store %struct.Memory* %call_48eaa9, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48eaad	 Bytes: 8
  %loadMem_48eaad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaad = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaad)
  store %struct.Memory* %call_48eaad, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r11), %eax	 RIP: 48eab5	 Bytes: 7
  %loadMem_48eab5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eab5 = call %struct.Memory* @routine_movl_0x94__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eab5)
  store %struct.Memory* %call_48eab5, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %eax	 RIP: 48eabc	 Bytes: 3
  %loadMem_48eabc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eabc = call %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eabc)
  store %struct.Memory* %call_48eabc, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48eabf	 Bytes: 3
  %loadMem_48eabf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eabf = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eabf)
  store %struct.Memory* %call_48eabf, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r11,8), %rsi	 RIP: 48eac2	 Bytes: 4
  %loadMem_48eac2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eac2 = call %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eac2)
  store %struct.Memory* %call_48eac2, %struct.Memory** %MEMORY

  ; Code: movw %di, (%rsi)	 RIP: 48eac6	 Bytes: 3
  %loadMem_48eac6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eac6 = call %struct.Memory* @routine_movw__di____rsi_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eac6)
  store %struct.Memory* %call_48eac6, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48eac9	 Bytes: 8
  %loadMem_48eac9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eac9 = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eac9)
  store %struct.Memory* %call_48eac9, %struct.Memory** %MEMORY

  ; Code: movq 0x118f8(%rsi), %rsi	 RIP: 48ead1	 Bytes: 7
  %loadMem_48ead1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ead1 = call %struct.Memory* @routine_movq_0x118f8__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ead1)
  store %struct.Memory* %call_48ead1, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %r11	 RIP: 48ead8	 Bytes: 4
  %loadMem_48ead8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ead8 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ead8)
  store %struct.Memory* %call_48ead8, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r11,8), %rsi	 RIP: 48eadc	 Bytes: 4
  %loadMem_48eadc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eadc = call %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eadc)
  store %struct.Memory* %call_48eadc, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %r11	 RIP: 48eae0	 Bytes: 4
  %loadMem_48eae0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eae0 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eae0)
  store %struct.Memory* %call_48eae0, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r11,8), %rsi	 RIP: 48eae4	 Bytes: 4
  %loadMem_48eae4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eae4 = call %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eae4)
  store %struct.Memory* %call_48eae4, %struct.Memory** %MEMORY

  ; Code: movq (%rsi), %rsi	 RIP: 48eae8	 Bytes: 3
  %loadMem_48eae8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eae8 = call %struct.Memory* @routine_movq___rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eae8)
  store %struct.Memory* %call_48eae8, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %r11	 RIP: 48eaeb	 Bytes: 4
  %loadMem_48eaeb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaeb = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaeb)
  store %struct.Memory* %call_48eaeb, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %r11	 RIP: 48eaef	 Bytes: 4
  %loadMem_48eaef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaef = call %struct.Memory* @routine_shlq__0x3___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaef)
  store %struct.Memory* %call_48eaef, %struct.Memory** %MEMORY

  ; Code: addq %r11, %rcx	 RIP: 48eaf3	 Bytes: 3
  %loadMem_48eaf3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaf3 = call %struct.Memory* @routine_addq__r11___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaf3)
  store %struct.Memory* %call_48eaf3, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %r11	 RIP: 48eaf6	 Bytes: 4
  %loadMem_48eaf6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaf6 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaf6)
  store %struct.Memory* %call_48eaf6, %struct.Memory** %MEMORY

  ; Code: movswq (%rcx,%r11,2), %rcx	 RIP: 48eafa	 Bytes: 5
  %loadMem_48eafa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eafa = call %struct.Memory* @routine_movswq___rcx__r11_2____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eafa)
  store %struct.Memory* %call_48eafa, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%rcx,8), %rcx	 RIP: 48eaff	 Bytes: 4
  %loadMem_48eaff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eaff = call %struct.Memory* @routine_movq___rsi__rcx_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eaff)
  store %struct.Memory* %call_48eaff, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rsi	 RIP: 48eb03	 Bytes: 4
  %loadMem_48eb03 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb03 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb03)
  store %struct.Memory* %call_48eb03, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48eb07	 Bytes: 3
  %loadMem_48eb07 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb07 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb07)
  store %struct.Memory* %call_48eb07, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48eb0a	 Bytes: 1
  %loadMem_48eb0a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb0a = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb0a)
  store %struct.Memory* %call_48eb0a, %struct.Memory** %MEMORY

  ; Code: idivl %r8d	 RIP: 48eb0b	 Bytes: 3
  %loadMem_48eb0b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb0b = call %struct.Memory* @routine_idivl__r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb0b)
  store %struct.Memory* %call_48eb0b, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %r10d	 RIP: 48eb0e	 Bytes: 4
  %loadMem_48eb0e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb0e = call %struct.Memory* @routine_movl_MINUS0x10__rbp____r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb0e)
  store %struct.Memory* %call_48eb0e, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc0(%rbp)	 RIP: 48eb12	 Bytes: 6
  %loadMem_48eb12 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb12 = call %struct.Memory* @routine_movl__eax__MINUS0xc0__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb12)
  store %struct.Memory* %call_48eb12, %struct.Memory** %MEMORY

  ; Code: movl %r10d, %eax	 RIP: 48eb18	 Bytes: 3
  %loadMem_48eb18 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb18 = call %struct.Memory* @routine_movl__r10d___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb18)
  store %struct.Memory* %call_48eb18, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48eb1b	 Bytes: 1
  %loadMem_48eb1b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb1b = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb1b)
  store %struct.Memory* %call_48eb1b, %struct.Memory** %MEMORY

  ; Code: idivl %r8d	 RIP: 48eb1c	 Bytes: 3
  %loadMem_48eb1c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb1c = call %struct.Memory* @routine_idivl__r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb1c)
  store %struct.Memory* %call_48eb1c, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48eb1f	 Bytes: 3
  %loadMem_48eb1f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb1f = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb1f)
  store %struct.Memory* %call_48eb1f, %struct.Memory** %MEMORY

  ; Code: movl -0xc0(%rbp), %r10d	 RIP: 48eb22	 Bytes: 7
  %loadMem_48eb22 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb22 = call %struct.Memory* @routine_movl_MINUS0xc0__rbp____r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb22)
  store %struct.Memory* %call_48eb22, %struct.Memory** %MEMORY

  ; Code: addl %eax, %r10d	 RIP: 48eb29	 Bytes: 3
  %loadMem_48eb29 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb29 = call %struct.Memory* @routine_addl__eax___r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb29)
  store %struct.Memory* %call_48eb29, %struct.Memory** %MEMORY

  ; Code: movslq %r10d, %r11	 RIP: 48eb2c	 Bytes: 3
  %loadMem_48eb2c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb2c = call %struct.Memory* @routine_movslq__r10d___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb2c)
  store %struct.Memory* %call_48eb2c, %struct.Memory** %MEMORY

  ; Code: movslq 0x1d8(%rsi,%r11,4), %rsi	 RIP: 48eb2f	 Bytes: 8
  %loadMem_48eb2f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb2f = call %struct.Memory* @routine_movslq_0x1d8__rsi__r11_4____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb2f)
  store %struct.Memory* %call_48eb2f, %struct.Memory** %MEMORY

  ; Code: movq (%rcx,%rsi,8), %rcx	 RIP: 48eb37	 Bytes: 4
  %loadMem_48eb37 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb37 = call %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb37)
  store %struct.Memory* %call_48eb37, %struct.Memory** %MEMORY

  ; Code: movw 0x2(%rcx), %di	 RIP: 48eb3b	 Bytes: 4
  %loadMem_48eb3b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb3b = call %struct.Memory* @routine_movw_0x2__rcx____di(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb3b)
  store %struct.Memory* %call_48eb3b, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rcx	 RIP: 48eb3f	 Bytes: 8
  %loadMem_48eb3f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb3f = call %struct.Memory* @routine_movq_0x70fcf0___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb3f)
  store %struct.Memory* %call_48eb3f, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rcx), %rcx	 RIP: 48eb47	 Bytes: 7
  %loadMem_48eb47 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb47 = call %struct.Memory* @routine_movq_0x1968__rcx____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb47)
  store %struct.Memory* %call_48eb47, %struct.Memory** %MEMORY

  ; Code: movq (%rcx), %rcx	 RIP: 48eb4e	 Bytes: 3
  %loadMem_48eb4e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb4e = call %struct.Memory* @routine_movq___rcx____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb4e)
  store %struct.Memory* %call_48eb4e, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48eb51	 Bytes: 8
  %loadMem_48eb51 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb51 = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb51)
  store %struct.Memory* %call_48eb51, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rsi), %eax	 RIP: 48eb59	 Bytes: 6
  %loadMem_48eb59 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb59 = call %struct.Memory* @routine_movl_0x90__rsi____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb59)
  store %struct.Memory* %call_48eb59, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %eax	 RIP: 48eb5f	 Bytes: 3
  %loadMem_48eb5f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb5f = call %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb5f)
  store %struct.Memory* %call_48eb5f, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %rsi	 RIP: 48eb62	 Bytes: 3
  %loadMem_48eb62 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb62 = call %struct.Memory* @routine_movslq__eax___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb62)
  store %struct.Memory* %call_48eb62, %struct.Memory** %MEMORY

  ; Code: movq (%rcx,%rsi,8), %rcx	 RIP: 48eb65	 Bytes: 4
  %loadMem_48eb65 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb65 = call %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb65)
  store %struct.Memory* %call_48eb65, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48eb69	 Bytes: 8
  %loadMem_48eb69 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb69 = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb69)
  store %struct.Memory* %call_48eb69, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rsi), %eax	 RIP: 48eb71	 Bytes: 6
  %loadMem_48eb71 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb71 = call %struct.Memory* @routine_movl_0x94__rsi____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb71)
  store %struct.Memory* %call_48eb71, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %eax	 RIP: 48eb77	 Bytes: 3
  %loadMem_48eb77 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb77 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb77)
  store %struct.Memory* %call_48eb77, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %rsi	 RIP: 48eb7a	 Bytes: 3
  %loadMem_48eb7a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb7a = call %struct.Memory* @routine_movslq__eax___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb7a)
  store %struct.Memory* %call_48eb7a, %struct.Memory** %MEMORY

  ; Code: movq (%rcx,%rsi,8), %rcx	 RIP: 48eb7d	 Bytes: 4
  %loadMem_48eb7d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb7d = call %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb7d)
  store %struct.Memory* %call_48eb7d, %struct.Memory** %MEMORY

  ; Code: movw %di, 0x2(%rcx)	 RIP: 48eb81	 Bytes: 4
  %loadMem_48eb81 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb81 = call %struct.Memory* @routine_movw__di__0x2__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb81)
  store %struct.Memory* %call_48eb81, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48eb85	 Bytes: 8
  %loadMem_48eb85 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb85 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb85)
  store %struct.Memory* %call_48eb85, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rcx)	 RIP: 48eb8d	 Bytes: 7
  %loadMem_48eb8d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb8d = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb8d)
  store %struct.Memory* %call_48eb8d, %struct.Memory** %MEMORY

  ; Code: je .L_48ebd8	 RIP: 48eb94	 Bytes: 6
  %loadMem_48eb94 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb94 = call %struct.Memory* @routine_je_.L_48ebd8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb94, i8* %BRANCH_TAKEN, i64 68, i64 6, i64 6)
  store %struct.Memory* %call_48eb94, %struct.Memory** %MEMORY

  %loadBr_48eb94 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48eb94 = icmp eq i8 %loadBr_48eb94, 1
  br i1 %cmpBr_48eb94, label %block_.L_48ebd8, label %block_48eb9a

block_48eb9a:
  ; Code: movq $0x6d1290, %rax	 RIP: 48eb9a	 Bytes: 10
  %loadMem_48eb9a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eb9a = call %struct.Memory* @routine_movq__0x6d1290___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eb9a)
  store %struct.Memory* %call_48eb9a, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48eba4	 Bytes: 4
  %loadMem_48eba4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eba4 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eba4)
  store %struct.Memory* %call_48eba4, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48eba8	 Bytes: 4
  %loadMem_48eba8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eba8 = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eba8)
  store %struct.Memory* %call_48eba8, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48ebac	 Bytes: 3
  %loadMem_48ebac = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebac = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebac)
  store %struct.Memory* %call_48ebac, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48ebaf	 Bytes: 4
  %loadMem_48ebaf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebaf = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebaf)
  store %struct.Memory* %call_48ebaf, %struct.Memory** %MEMORY

  ; Code: movw (%rax,%rcx,2), %dx	 RIP: 48ebb3	 Bytes: 4
  %loadMem_48ebb3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebb3 = call %struct.Memory* @routine_movw___rax__rcx_2____dx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebb3)
  store %struct.Memory* %call_48ebb3, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48ebb7	 Bytes: 8
  %loadMem_48ebb7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebb7 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebb7)
  store %struct.Memory* %call_48ebb7, %struct.Memory** %MEMORY

  ; Code: addq $0xcc0, %rax	 RIP: 48ebbf	 Bytes: 6
  %loadMem_48ebbf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebbf = call %struct.Memory* @routine_addq__0xcc0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebbf)
  store %struct.Memory* %call_48ebbf, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48ebc5	 Bytes: 4
  %loadMem_48ebc5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebc5 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebc5)
  store %struct.Memory* %call_48ebc5, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48ebc9	 Bytes: 4
  %loadMem_48ebc9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebc9 = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebc9)
  store %struct.Memory* %call_48ebc9, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48ebcd	 Bytes: 3
  %loadMem_48ebcd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebcd = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebcd)
  store %struct.Memory* %call_48ebcd, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48ebd0	 Bytes: 4
  %loadMem_48ebd0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebd0 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebd0)
  store %struct.Memory* %call_48ebd0, %struct.Memory** %MEMORY

  ; Code: movw %dx, (%rax,%rcx,2)	 RIP: 48ebd4	 Bytes: 4
  %loadMem_48ebd4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebd4 = call %struct.Memory* @routine_movw__dx____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebd4)
  store %struct.Memory* %call_48ebd4, %struct.Memory** %MEMORY

  ; Code: .L_48ebd8:	 RIP: 48ebd8	 Bytes: 0
  br label %block_.L_48ebd8
block_.L_48ebd8:

  ; Code: jmpq .L_48ebdd	 RIP: 48ebd8	 Bytes: 5
  %loadMem_48ebd8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebd8 = call %struct.Memory* @routine_jmpq_.L_48ebdd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebd8, i64 5, i64 5)
  store %struct.Memory* %call_48ebd8, %struct.Memory** %MEMORY

  br label %block_.L_48ebdd

  ; Code: .L_48ebdd:	 RIP: 48ebdd	 Bytes: 0
block_.L_48ebdd:

  ; Code: jmpq .L_48ebe2	 RIP: 48ebdd	 Bytes: 5
  %loadMem_48ebdd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebdd = call %struct.Memory* @routine_jmpq_.L_48ebe2(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebdd, i64 5, i64 5)
  store %struct.Memory* %call_48ebdd, %struct.Memory** %MEMORY

  br label %block_.L_48ebe2

  ; Code: .L_48ebe2:	 RIP: 48ebe2	 Bytes: 0
block_.L_48ebe2:

  ; Code: movl $0x2, %eax	 RIP: 48ebe2	 Bytes: 5
  %loadMem_48ebe2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebe2 = call %struct.Memory* @routine_movl__0x2___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebe2)
  store %struct.Memory* %call_48ebe2, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48ebe7	 Bytes: 4
  %loadMem_48ebe7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebe7 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebe7)
  store %struct.Memory* %call_48ebe7, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %edx	 RIP: 48ebeb	 Bytes: 3
  %loadMem_48ebeb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebeb = call %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebeb)
  store %struct.Memory* %call_48ebeb, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc4(%rbp)	 RIP: 48ebee	 Bytes: 6
  %loadMem_48ebee = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebee = call %struct.Memory* @routine_movl__eax__MINUS0xc4__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebee)
  store %struct.Memory* %call_48ebee, %struct.Memory** %MEMORY

  ; Code: movl %edx, %eax	 RIP: 48ebf4	 Bytes: 2
  %loadMem_48ebf4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebf4 = call %struct.Memory* @routine_movl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebf4)
  store %struct.Memory* %call_48ebf4, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48ebf6	 Bytes: 1
  %loadMem_48ebf6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebf6 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebf6)
  store %struct.Memory* %call_48ebf6, %struct.Memory** %MEMORY

  ; Code: movl -0xc4(%rbp), %esi	 RIP: 48ebf7	 Bytes: 6
  %loadMem_48ebf7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebf7 = call %struct.Memory* @routine_movl_MINUS0xc4__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebf7)
  store %struct.Memory* %call_48ebf7, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48ebfd	 Bytes: 2
  %loadMem_48ebfd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebfd = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebfd)
  store %struct.Memory* %call_48ebfd, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %edi	 RIP: 48ebff	 Bytes: 3
  %loadMem_48ebff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ebff = call %struct.Memory* @routine_movl_MINUS0x10__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ebff)
  store %struct.Memory* %call_48ebff, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc8(%rbp)	 RIP: 48ec02	 Bytes: 6
  %loadMem_48ec02 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec02 = call %struct.Memory* @routine_movl__eax__MINUS0xc8__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec02)
  store %struct.Memory* %call_48ec02, %struct.Memory** %MEMORY

  ; Code: movl %edi, %eax	 RIP: 48ec08	 Bytes: 2
  %loadMem_48ec08 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec08 = call %struct.Memory* @routine_movl__edi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec08)
  store %struct.Memory* %call_48ec08, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48ec0a	 Bytes: 1
  %loadMem_48ec0a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec0a = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec0a)
  store %struct.Memory* %call_48ec0a, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48ec0b	 Bytes: 2
  %loadMem_48ec0b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec0b = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec0b)
  store %struct.Memory* %call_48ec0b, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48ec0d	 Bytes: 3
  %loadMem_48ec0d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec0d = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec0d)
  store %struct.Memory* %call_48ec0d, %struct.Memory** %MEMORY

  ; Code: movl -0xc8(%rbp), %edi	 RIP: 48ec10	 Bytes: 6
  %loadMem_48ec10 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec10 = call %struct.Memory* @routine_movl_MINUS0xc8__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec10)
  store %struct.Memory* %call_48ec10, %struct.Memory** %MEMORY

  ; Code: addl %eax, %edi	 RIP: 48ec16	 Bytes: 2
  %loadMem_48ec16 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec16 = call %struct.Memory* @routine_addl__eax___edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec16)
  store %struct.Memory* %call_48ec16, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %r8	 RIP: 48ec18	 Bytes: 3
  %loadMem_48ec18 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec18 = call %struct.Memory* @routine_movslq__edi___r8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec18)
  store %struct.Memory* %call_48ec18, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x1e8(%rcx,%r8,4)	 RIP: 48ec1b	 Bytes: 9
  %loadMem_48ec1b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec1b = call %struct.Memory* @routine_cmpl__0x0__0x1e8__rcx__r8_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec1b)
  store %struct.Memory* %call_48ec1b, %struct.Memory** %MEMORY

  ; Code: je .L_48ec54	 RIP: 48ec24	 Bytes: 6
  %loadMem_48ec24 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec24 = call %struct.Memory* @routine_je_.L_48ec54(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec24, i8* %BRANCH_TAKEN, i64 48, i64 6, i64 6)
  store %struct.Memory* %call_48ec24, %struct.Memory** %MEMORY

  %loadBr_48ec24 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ec24 = icmp eq i8 %loadBr_48ec24, 1
  br i1 %cmpBr_48ec24, label %block_.L_48ec54, label %block_48ec2a

block_48ec2a:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48ec2a	 Bytes: 4
  %loadMem_48ec2a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec2a = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec2a)
  store %struct.Memory* %call_48ec2a, %struct.Memory** %MEMORY

  ; Code: cmpl $0x9, 0x48(%rax)	 RIP: 48ec2e	 Bytes: 4
  %loadMem_48ec2e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec2e = call %struct.Memory* @routine_cmpl__0x9__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec2e)
  store %struct.Memory* %call_48ec2e, %struct.Memory** %MEMORY

  ; Code: je .L_48ec54	 RIP: 48ec32	 Bytes: 6
  %loadMem_48ec32 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec32 = call %struct.Memory* @routine_je_.L_48ec54(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec32, i8* %BRANCH_TAKEN, i64 34, i64 6, i64 6)
  store %struct.Memory* %call_48ec32, %struct.Memory** %MEMORY

  %loadBr_48ec32 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ec32 = icmp eq i8 %loadBr_48ec32, 1
  br i1 %cmpBr_48ec32, label %block_.L_48ec54, label %block_48ec38

block_48ec38:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48ec38	 Bytes: 4
  %loadMem_48ec38 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec38 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec38)
  store %struct.Memory* %call_48ec38, %struct.Memory** %MEMORY

  ; Code: cmpl $0xa, 0x48(%rax)	 RIP: 48ec3c	 Bytes: 4
  %loadMem_48ec3c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec3c = call %struct.Memory* @routine_cmpl__0xa__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec3c)
  store %struct.Memory* %call_48ec3c, %struct.Memory** %MEMORY

  ; Code: je .L_48ec54	 RIP: 48ec40	 Bytes: 6
  %loadMem_48ec40 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec40 = call %struct.Memory* @routine_je_.L_48ec54(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec40, i8* %BRANCH_TAKEN, i64 20, i64 6, i64 6)
  store %struct.Memory* %call_48ec40, %struct.Memory** %MEMORY

  %loadBr_48ec40 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ec40 = icmp eq i8 %loadBr_48ec40, 1
  br i1 %cmpBr_48ec40, label %block_.L_48ec54, label %block_48ec46

block_48ec46:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48ec46	 Bytes: 4
  %loadMem_48ec46 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec46 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec46)
  store %struct.Memory* %call_48ec46, %struct.Memory** %MEMORY

  ; Code: cmpl $0xd, 0x48(%rax)	 RIP: 48ec4a	 Bytes: 4
  %loadMem_48ec4a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec4a = call %struct.Memory* @routine_cmpl__0xd__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec4a)
  store %struct.Memory* %call_48ec4a, %struct.Memory** %MEMORY

  ; Code: jne .L_48edb2	 RIP: 48ec4e	 Bytes: 6
  %loadMem_48ec4e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec4e = call %struct.Memory* @routine_jne_.L_48edb2(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec4e, i8* %BRANCH_TAKEN, i64 356, i64 6, i64 6)
  store %struct.Memory* %call_48ec4e, %struct.Memory** %MEMORY

  %loadBr_48ec4e = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ec4e = icmp eq i8 %loadBr_48ec4e, 1
  br i1 %cmpBr_48ec4e, label %block_.L_48edb2, label %block_.L_48ec54

  ; Code: .L_48ec54:	 RIP: 48ec54	 Bytes: 0
block_.L_48ec54:

  ; Code: movq 0x70fcf0, %rax	 RIP: 48ec54	 Bytes: 8
  %loadMem_48ec54 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec54 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec54)
  store %struct.Memory* %call_48ec54, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rax), %rax	 RIP: 48ec5c	 Bytes: 7
  %loadMem_48ec5c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec5c = call %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec5c)
  store %struct.Memory* %call_48ec5c, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48ec63	 Bytes: 4
  %loadMem_48ec63 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec63 = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec63)
  store %struct.Memory* %call_48ec63, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ec67	 Bytes: 8
  %loadMem_48ec67 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec67 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec67)
  store %struct.Memory* %call_48ec67, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48ec6f	 Bytes: 6
  %loadMem_48ec6f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec6f = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec6f)
  store %struct.Memory* %call_48ec6f, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48ec75	 Bytes: 3
  %loadMem_48ec75 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec75 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec75)
  store %struct.Memory* %call_48ec75, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ec78	 Bytes: 3
  %loadMem_48ec78 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec78 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec78)
  store %struct.Memory* %call_48ec78, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ec7b	 Bytes: 4
  %loadMem_48ec7b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec7b = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec7b)
  store %struct.Memory* %call_48ec7b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ec7f	 Bytes: 8
  %loadMem_48ec7f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec7f = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec7f)
  store %struct.Memory* %call_48ec7f, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48ec87	 Bytes: 6
  %loadMem_48ec87 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec87 = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec87)
  store %struct.Memory* %call_48ec87, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48ec8d	 Bytes: 3
  %loadMem_48ec8d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec8d = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec8d)
  store %struct.Memory* %call_48ec8d, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ec90	 Bytes: 3
  %loadMem_48ec90 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec90 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec90)
  store %struct.Memory* %call_48ec90, %struct.Memory** %MEMORY

  ; Code: movw $0xffff, (%rax,%rcx,2)	 RIP: 48ec93	 Bytes: 6
  %loadMem_48ec93 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec93 = call %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec93)
  store %struct.Memory* %call_48ec93, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48ec99	 Bytes: 8
  %loadMem_48ec99 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ec99 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ec99)
  store %struct.Memory* %call_48ec99, %struct.Memory** %MEMORY

  ; Code: movq 0x1958(%rax), %rax	 RIP: 48eca1	 Bytes: 7
  %loadMem_48eca1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eca1 = call %struct.Memory* @routine_movq_0x1958__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eca1)
  store %struct.Memory* %call_48eca1, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48eca8	 Bytes: 4
  %loadMem_48eca8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eca8 = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eca8)
  store %struct.Memory* %call_48eca8, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ecac	 Bytes: 8
  %loadMem_48ecac = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecac = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecac)
  store %struct.Memory* %call_48ecac, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48ecb4	 Bytes: 6
  %loadMem_48ecb4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecb4 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecb4)
  store %struct.Memory* %call_48ecb4, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48ecba	 Bytes: 3
  %loadMem_48ecba = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecba = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecba)
  store %struct.Memory* %call_48ecba, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ecbd	 Bytes: 3
  %loadMem_48ecbd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecbd = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecbd)
  store %struct.Memory* %call_48ecbd, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ecc0	 Bytes: 4
  %loadMem_48ecc0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecc0 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecc0)
  store %struct.Memory* %call_48ecc0, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ecc4	 Bytes: 8
  %loadMem_48ecc4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecc4 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecc4)
  store %struct.Memory* %call_48ecc4, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48eccc	 Bytes: 6
  %loadMem_48eccc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eccc = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eccc)
  store %struct.Memory* %call_48eccc, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48ecd2	 Bytes: 3
  %loadMem_48ecd2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecd2 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecd2)
  store %struct.Memory* %call_48ecd2, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ecd5	 Bytes: 3
  %loadMem_48ecd5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecd5 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecd5)
  store %struct.Memory* %call_48ecd5, %struct.Memory** %MEMORY

  ; Code: movq $0xffffffffffffffff, (%rax,%rcx,8)	 RIP: 48ecd8	 Bytes: 8
  %loadMem_48ecd8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecd8 = call %struct.Memory* @routine_movq__0xffffffffffffffff____rax__rcx_8_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecd8)
  store %struct.Memory* %call_48ecd8, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48ece0	 Bytes: 8
  %loadMem_48ece0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ece0 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ece0)
  store %struct.Memory* %call_48ece0, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rax), %rax	 RIP: 48ece8	 Bytes: 7
  %loadMem_48ece8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ece8 = call %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ece8)
  store %struct.Memory* %call_48ece8, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48ecef	 Bytes: 4
  %loadMem_48ecef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecef = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecef)
  store %struct.Memory* %call_48ecef, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ecf3	 Bytes: 8
  %loadMem_48ecf3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecf3 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecf3)
  store %struct.Memory* %call_48ecf3, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48ecfb	 Bytes: 6
  %loadMem_48ecfb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ecfb = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ecfb)
  store %struct.Memory* %call_48ecfb, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48ed01	 Bytes: 3
  %loadMem_48ed01 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed01 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed01)
  store %struct.Memory* %call_48ed01, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ed04	 Bytes: 3
  %loadMem_48ed04 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed04 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed04)
  store %struct.Memory* %call_48ed04, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ed07	 Bytes: 4
  %loadMem_48ed07 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed07 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed07)
  store %struct.Memory* %call_48ed07, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ed0b	 Bytes: 8
  %loadMem_48ed0b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed0b = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed0b)
  store %struct.Memory* %call_48ed0b, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48ed13	 Bytes: 6
  %loadMem_48ed13 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed13 = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed13)
  store %struct.Memory* %call_48ed13, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48ed19	 Bytes: 3
  %loadMem_48ed19 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed19 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed19)
  store %struct.Memory* %call_48ed19, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ed1c	 Bytes: 3
  %loadMem_48ed1c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed1c = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed1c)
  store %struct.Memory* %call_48ed1c, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ed1f	 Bytes: 4
  %loadMem_48ed1f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed1f = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed1f)
  store %struct.Memory* %call_48ed1f, %struct.Memory** %MEMORY

  ; Code: movw $0x0, (%rax)	 RIP: 48ed23	 Bytes: 5
  %loadMem_48ed23 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed23 = call %struct.Memory* @routine_movw__0x0____rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed23)
  store %struct.Memory* %call_48ed23, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48ed28	 Bytes: 8
  %loadMem_48ed28 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed28 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed28)
  store %struct.Memory* %call_48ed28, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rax), %rax	 RIP: 48ed30	 Bytes: 7
  %loadMem_48ed30 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed30 = call %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed30)
  store %struct.Memory* %call_48ed30, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48ed37	 Bytes: 4
  %loadMem_48ed37 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed37 = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed37)
  store %struct.Memory* %call_48ed37, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ed3b	 Bytes: 8
  %loadMem_48ed3b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed3b = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed3b)
  store %struct.Memory* %call_48ed3b, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48ed43	 Bytes: 6
  %loadMem_48ed43 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed43 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed43)
  store %struct.Memory* %call_48ed43, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48ed49	 Bytes: 3
  %loadMem_48ed49 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed49 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed49)
  store %struct.Memory* %call_48ed49, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ed4c	 Bytes: 3
  %loadMem_48ed4c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed4c = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed4c)
  store %struct.Memory* %call_48ed4c, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ed4f	 Bytes: 4
  %loadMem_48ed4f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed4f = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed4f)
  store %struct.Memory* %call_48ed4f, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ed53	 Bytes: 8
  %loadMem_48ed53 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed53 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed53)
  store %struct.Memory* %call_48ed53, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48ed5b	 Bytes: 6
  %loadMem_48ed5b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed5b = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed5b)
  store %struct.Memory* %call_48ed5b, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48ed61	 Bytes: 3
  %loadMem_48ed61 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed61 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed61)
  store %struct.Memory* %call_48ed61, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ed64	 Bytes: 3
  %loadMem_48ed64 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed64 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed64)
  store %struct.Memory* %call_48ed64, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ed67	 Bytes: 4
  %loadMem_48ed67 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed67 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed67)
  store %struct.Memory* %call_48ed67, %struct.Memory** %MEMORY

  ; Code: movw $0x0, 0x2(%rax)	 RIP: 48ed6b	 Bytes: 6
  %loadMem_48ed6b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed6b = call %struct.Memory* @routine_movw__0x0__0x2__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed6b)
  store %struct.Memory* %call_48ed6b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48ed71	 Bytes: 8
  %loadMem_48ed71 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed71 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed71)
  store %struct.Memory* %call_48ed71, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48ed79	 Bytes: 7
  %loadMem_48ed79 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed79 = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed79)
  store %struct.Memory* %call_48ed79, %struct.Memory** %MEMORY

  ; Code: je .L_48edad	 RIP: 48ed80	 Bytes: 6
  %loadMem_48ed80 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed80 = call %struct.Memory* @routine_je_.L_48edad(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed80, i8* %BRANCH_TAKEN, i64 45, i64 6, i64 6)
  store %struct.Memory* %call_48ed80, %struct.Memory** %MEMORY

  %loadBr_48ed80 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ed80 = icmp eq i8 %loadBr_48ed80, 1
  br i1 %cmpBr_48ed80, label %block_.L_48edad, label %block_48ed86

block_48ed86:
  ; Code: movq 0x6d4518, %rax	 RIP: 48ed86	 Bytes: 8
  %loadMem_48ed86 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed86 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed86)
  store %struct.Memory* %call_48ed86, %struct.Memory** %MEMORY

  ; Code: addq $0xcc0, %rax	 RIP: 48ed8e	 Bytes: 6
  %loadMem_48ed8e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed8e = call %struct.Memory* @routine_addq__0xcc0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed8e)
  store %struct.Memory* %call_48ed8e, %struct.Memory** %MEMORY

  ; Code: addq $0x20, %rax	 RIP: 48ed94	 Bytes: 4
  %loadMem_48ed94 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed94 = call %struct.Memory* @routine_addq__0x20___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed94)
  store %struct.Memory* %call_48ed94, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48ed98	 Bytes: 4
  %loadMem_48ed98 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed98 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed98)
  store %struct.Memory* %call_48ed98, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48ed9c	 Bytes: 4
  %loadMem_48ed9c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ed9c = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ed9c)
  store %struct.Memory* %call_48ed9c, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48eda0	 Bytes: 3
  %loadMem_48eda0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eda0 = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eda0)
  store %struct.Memory* %call_48eda0, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48eda3	 Bytes: 4
  %loadMem_48eda3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eda3 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eda3)
  store %struct.Memory* %call_48eda3, %struct.Memory** %MEMORY

  ; Code: movw $0xffff, (%rax,%rcx,2)	 RIP: 48eda7	 Bytes: 6
  %loadMem_48eda7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eda7 = call %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eda7)
  store %struct.Memory* %call_48eda7, %struct.Memory** %MEMORY

  ; Code: .L_48edad:	 RIP: 48edad	 Bytes: 0
  br label %block_.L_48edad
block_.L_48edad:

  ; Code: jmpq .L_48edb2	 RIP: 48edad	 Bytes: 5
  %loadMem_48edad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edad = call %struct.Memory* @routine_jmpq_.L_48edb2(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edad, i64 5, i64 5)
  store %struct.Memory* %call_48edad, %struct.Memory** %MEMORY

  br label %block_.L_48edb2

  ; Code: .L_48edb2:	 RIP: 48edb2	 Bytes: 0
block_.L_48edb2:

  ; Code: jmpq .L_48edb7	 RIP: 48edb2	 Bytes: 5
  %loadMem_48edb2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edb2 = call %struct.Memory* @routine_jmpq_.L_48edb7(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edb2, i64 5, i64 5)
  store %struct.Memory* %call_48edb2, %struct.Memory** %MEMORY

  br label %block_.L_48edb7

  ; Code: .L_48edb7:	 RIP: 48edb7	 Bytes: 0
block_.L_48edb7:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48edb7	 Bytes: 3
  %loadMem_48edb7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edb7 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edb7)
  store %struct.Memory* %call_48edb7, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48edba	 Bytes: 3
  %loadMem_48edba = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edba = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edba)
  store %struct.Memory* %call_48edba, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48edbd	 Bytes: 3
  %loadMem_48edbd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edbd = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edbd)
  store %struct.Memory* %call_48edbd, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e41a	 RIP: 48edc0	 Bytes: 5
  %loadMem_48edc0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edc0 = call %struct.Memory* @routine_jmpq_.L_48e41a(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edc0, i64 -2470, i64 5)
  store %struct.Memory* %call_48edc0, %struct.Memory** %MEMORY

  br label %block_.L_48e41a

  ; Code: .L_48edc5:	 RIP: 48edc5	 Bytes: 0
block_.L_48edc5:

  ; Code: jmpq .L_48edca	 RIP: 48edc5	 Bytes: 5
  %loadMem_48edc5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edc5 = call %struct.Memory* @routine_jmpq_.L_48edca(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edc5, i64 5, i64 5)
  store %struct.Memory* %call_48edc5, %struct.Memory** %MEMORY

  br label %block_.L_48edca

  ; Code: .L_48edca:	 RIP: 48edca	 Bytes: 0
block_.L_48edca:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48edca	 Bytes: 3
  %loadMem_48edca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edca = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edca)
  store %struct.Memory* %call_48edca, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48edcd	 Bytes: 3
  %loadMem_48edcd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edcd = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edcd)
  store %struct.Memory* %call_48edcd, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48edd0	 Bytes: 3
  %loadMem_48edd0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edd0 = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edd0)
  store %struct.Memory* %call_48edd0, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48e409	 RIP: 48edd3	 Bytes: 5
  %loadMem_48edd3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edd3 = call %struct.Memory* @routine_jmpq_.L_48e409(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edd3, i64 -2506, i64 5)
  store %struct.Memory* %call_48edd3, %struct.Memory** %MEMORY

  br label %block_.L_48e409

  ; Code: .L_48edd8:	 RIP: 48edd8	 Bytes: 0
block_.L_48edd8:

  ; Code: cmpl $0x0, -0x40(%rbp)	 RIP: 48edd8	 Bytes: 4
  %loadMem_48edd8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edd8 = call %struct.Memory* @routine_cmpl__0x0__MINUS0x40__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edd8)
  store %struct.Memory* %call_48edd8, %struct.Memory** %MEMORY

  ; Code: je .L_48f616	 RIP: 48eddc	 Bytes: 6
  %loadMem_48eddc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eddc = call %struct.Memory* @routine_je_.L_48f616(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eddc, i8* %BRANCH_TAKEN, i64 2106, i64 6, i64 6)
  store %struct.Memory* %call_48eddc, %struct.Memory** %MEMORY

  %loadBr_48eddc = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48eddc = icmp eq i8 %loadBr_48eddc, 1
  br i1 %cmpBr_48eddc, label %block_.L_48f616, label %block_48ede2

block_48ede2:
  ; Code: movl $0x0, -0x10(%rbp)	 RIP: 48ede2	 Bytes: 7
  %loadMem_48ede2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ede2 = call %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ede2)
  store %struct.Memory* %call_48ede2, %struct.Memory** %MEMORY

  ; Code: .L_48ede9:	 RIP: 48ede9	 Bytes: 0
  br label %block_.L_48ede9
block_.L_48ede9:

  ; Code: cmpl $0x4, -0x10(%rbp)	 RIP: 48ede9	 Bytes: 4
  %loadMem_48ede9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ede9 = call %struct.Memory* @routine_cmpl__0x4__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ede9)
  store %struct.Memory* %call_48ede9, %struct.Memory** %MEMORY

  ; Code: jge .L_48f611	 RIP: 48eded	 Bytes: 6
  %loadMem_48eded = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eded = call %struct.Memory* @routine_jge_.L_48f611(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eded, i8* %BRANCH_TAKEN, i64 2084, i64 6, i64 6)
  store %struct.Memory* %call_48eded, %struct.Memory** %MEMORY

  %loadBr_48eded = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48eded = icmp eq i8 %loadBr_48eded, 1
  br i1 %cmpBr_48eded, label %block_.L_48f611, label %block_48edf3

block_48edf3:
  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48edf3	 Bytes: 7
  %loadMem_48edf3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edf3 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edf3)
  store %struct.Memory* %call_48edf3, %struct.Memory** %MEMORY

  ; Code: .L_48edfa:	 RIP: 48edfa	 Bytes: 0
  br label %block_.L_48edfa
block_.L_48edfa:

  ; Code: cmpl $0x4, -0xc(%rbp)	 RIP: 48edfa	 Bytes: 4
  %loadMem_48edfa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edfa = call %struct.Memory* @routine_cmpl__0x4__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edfa)
  store %struct.Memory* %call_48edfa, %struct.Memory** %MEMORY

  ; Code: jge .L_48f5fe	 RIP: 48edfe	 Bytes: 6
  %loadMem_48edfe = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48edfe = call %struct.Memory* @routine_jge_.L_48f5fe(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48edfe, i8* %BRANCH_TAKEN, i64 2048, i64 6, i64 6)
  store %struct.Memory* %call_48edfe, %struct.Memory** %MEMORY

  %loadBr_48edfe = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48edfe = icmp eq i8 %loadBr_48edfe, 1
  br i1 %cmpBr_48edfe, label %block_.L_48f5fe, label %block_48ee04

block_48ee04:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48ee04	 Bytes: 4
  %loadMem_48ee04 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee04 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee04)
  store %struct.Memory* %call_48ee04, %struct.Memory** %MEMORY

  ; Code: cmpl $0x9, 0x48(%rax)	 RIP: 48ee08	 Bytes: 4
  %loadMem_48ee08 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee08 = call %struct.Memory* @routine_cmpl__0x9__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee08)
  store %struct.Memory* %call_48ee08, %struct.Memory** %MEMORY

  ; Code: je .L_48ee76	 RIP: 48ee0c	 Bytes: 6
  %loadMem_48ee0c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee0c = call %struct.Memory* @routine_je_.L_48ee76(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee0c, i8* %BRANCH_TAKEN, i64 106, i64 6, i64 6)
  store %struct.Memory* %call_48ee0c, %struct.Memory** %MEMORY

  %loadBr_48ee0c = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ee0c = icmp eq i8 %loadBr_48ee0c, 1
  br i1 %cmpBr_48ee0c, label %block_.L_48ee76, label %block_48ee12

block_48ee12:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48ee12	 Bytes: 4
  %loadMem_48ee12 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee12 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee12)
  store %struct.Memory* %call_48ee12, %struct.Memory** %MEMORY

  ; Code: cmpl $0xa, 0x48(%rax)	 RIP: 48ee16	 Bytes: 4
  %loadMem_48ee16 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee16 = call %struct.Memory* @routine_cmpl__0xa__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee16)
  store %struct.Memory* %call_48ee16, %struct.Memory** %MEMORY

  ; Code: je .L_48ee76	 RIP: 48ee1a	 Bytes: 6
  %loadMem_48ee1a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee1a = call %struct.Memory* @routine_je_.L_48ee76(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee1a, i8* %BRANCH_TAKEN, i64 92, i64 6, i64 6)
  store %struct.Memory* %call_48ee1a, %struct.Memory** %MEMORY

  %loadBr_48ee1a = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ee1a = icmp eq i8 %loadBr_48ee1a, 1
  br i1 %cmpBr_48ee1a, label %block_.L_48ee76, label %block_48ee20

block_48ee20:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48ee20	 Bytes: 4
  %loadMem_48ee20 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee20 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee20)
  store %struct.Memory* %call_48ee20, %struct.Memory** %MEMORY

  ; Code: cmpl $0xd, 0x48(%rax)	 RIP: 48ee24	 Bytes: 4
  %loadMem_48ee24 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee24 = call %struct.Memory* @routine_cmpl__0xd__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee24)
  store %struct.Memory* %call_48ee24, %struct.Memory** %MEMORY

  ; Code: je .L_48ee76	 RIP: 48ee28	 Bytes: 6
  %loadMem_48ee28 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee28 = call %struct.Memory* @routine_je_.L_48ee76(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee28, i8* %BRANCH_TAKEN, i64 78, i64 6, i64 6)
  store %struct.Memory* %call_48ee28, %struct.Memory** %MEMORY

  %loadBr_48ee28 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ee28 = icmp eq i8 %loadBr_48ee28, 1
  br i1 %cmpBr_48ee28, label %block_.L_48ee76, label %block_48ee2e

block_48ee2e:
  ; Code: movl $0x2, %eax	 RIP: 48ee2e	 Bytes: 5
  %loadMem_48ee2e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee2e = call %struct.Memory* @routine_movl__0x2___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee2e)
  store %struct.Memory* %call_48ee2e, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48ee33	 Bytes: 4
  %loadMem_48ee33 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee33 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee33)
  store %struct.Memory* %call_48ee33, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %edx	 RIP: 48ee37	 Bytes: 3
  %loadMem_48ee37 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee37 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee37)
  store %struct.Memory* %call_48ee37, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xcc(%rbp)	 RIP: 48ee3a	 Bytes: 6
  %loadMem_48ee3a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee3a = call %struct.Memory* @routine_movl__eax__MINUS0xcc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee3a)
  store %struct.Memory* %call_48ee3a, %struct.Memory** %MEMORY

  ; Code: movl %edx, %eax	 RIP: 48ee40	 Bytes: 2
  %loadMem_48ee40 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee40 = call %struct.Memory* @routine_movl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee40)
  store %struct.Memory* %call_48ee40, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48ee42	 Bytes: 1
  %loadMem_48ee42 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee42 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee42)
  store %struct.Memory* %call_48ee42, %struct.Memory** %MEMORY

  ; Code: movl -0xcc(%rbp), %esi	 RIP: 48ee43	 Bytes: 6
  %loadMem_48ee43 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee43 = call %struct.Memory* @routine_movl_MINUS0xcc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee43)
  store %struct.Memory* %call_48ee43, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48ee49	 Bytes: 2
  %loadMem_48ee49 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee49 = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee49)
  store %struct.Memory* %call_48ee49, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %edi	 RIP: 48ee4b	 Bytes: 3
  %loadMem_48ee4b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee4b = call %struct.Memory* @routine_movl_MINUS0x10__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee4b)
  store %struct.Memory* %call_48ee4b, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xd0(%rbp)	 RIP: 48ee4e	 Bytes: 6
  %loadMem_48ee4e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee4e = call %struct.Memory* @routine_movl__eax__MINUS0xd0__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee4e)
  store %struct.Memory* %call_48ee4e, %struct.Memory** %MEMORY

  ; Code: movl %edi, %eax	 RIP: 48ee54	 Bytes: 2
  %loadMem_48ee54 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee54 = call %struct.Memory* @routine_movl__edi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee54)
  store %struct.Memory* %call_48ee54, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48ee56	 Bytes: 1
  %loadMem_48ee56 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee56 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee56)
  store %struct.Memory* %call_48ee56, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48ee57	 Bytes: 2
  %loadMem_48ee57 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee57 = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee57)
  store %struct.Memory* %call_48ee57, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48ee59	 Bytes: 3
  %loadMem_48ee59 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee59 = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee59)
  store %struct.Memory* %call_48ee59, %struct.Memory** %MEMORY

  ; Code: movl -0xd0(%rbp), %edi	 RIP: 48ee5c	 Bytes: 6
  %loadMem_48ee5c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee5c = call %struct.Memory* @routine_movl_MINUS0xd0__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee5c)
  store %struct.Memory* %call_48ee5c, %struct.Memory** %MEMORY

  ; Code: addl %eax, %edi	 RIP: 48ee62	 Bytes: 2
  %loadMem_48ee62 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee62 = call %struct.Memory* @routine_addl__eax___edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee62)
  store %struct.Memory* %call_48ee62, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %r8	 RIP: 48ee64	 Bytes: 3
  %loadMem_48ee64 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee64 = call %struct.Memory* @routine_movslq__edi___r8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee64)
  store %struct.Memory* %call_48ee64, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x1e8(%rcx,%r8,4)	 RIP: 48ee67	 Bytes: 9
  %loadMem_48ee67 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee67 = call %struct.Memory* @routine_cmpl__0x0__0x1e8__rcx__r8_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee67)
  store %struct.Memory* %call_48ee67, %struct.Memory** %MEMORY

  ; Code: jne .L_48efd4	 RIP: 48ee70	 Bytes: 6
  %loadMem_48ee70 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee70 = call %struct.Memory* @routine_jne_.L_48efd4(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee70, i8* %BRANCH_TAKEN, i64 356, i64 6, i64 6)
  store %struct.Memory* %call_48ee70, %struct.Memory** %MEMORY

  %loadBr_48ee70 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48ee70 = icmp eq i8 %loadBr_48ee70, 1
  br i1 %cmpBr_48ee70, label %block_.L_48efd4, label %block_.L_48ee76

  ; Code: .L_48ee76:	 RIP: 48ee76	 Bytes: 0
block_.L_48ee76:

  ; Code: movq 0x70fcf0, %rax	 RIP: 48ee76	 Bytes: 8
  %loadMem_48ee76 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee76 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee76)
  store %struct.Memory* %call_48ee76, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rax), %rax	 RIP: 48ee7e	 Bytes: 7
  %loadMem_48ee7e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee7e = call %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee7e)
  store %struct.Memory* %call_48ee7e, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48ee85	 Bytes: 4
  %loadMem_48ee85 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee85 = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee85)
  store %struct.Memory* %call_48ee85, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ee89	 Bytes: 8
  %loadMem_48ee89 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee89 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee89)
  store %struct.Memory* %call_48ee89, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48ee91	 Bytes: 6
  %loadMem_48ee91 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee91 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee91)
  store %struct.Memory* %call_48ee91, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48ee97	 Bytes: 3
  %loadMem_48ee97 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee97 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee97)
  store %struct.Memory* %call_48ee97, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ee9a	 Bytes: 3
  %loadMem_48ee9a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee9a = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee9a)
  store %struct.Memory* %call_48ee9a, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ee9d	 Bytes: 4
  %loadMem_48ee9d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ee9d = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ee9d)
  store %struct.Memory* %call_48ee9d, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48eea1	 Bytes: 8
  %loadMem_48eea1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eea1 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eea1)
  store %struct.Memory* %call_48eea1, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48eea9	 Bytes: 6
  %loadMem_48eea9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eea9 = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eea9)
  store %struct.Memory* %call_48eea9, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48eeaf	 Bytes: 3
  %loadMem_48eeaf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eeaf = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eeaf)
  store %struct.Memory* %call_48eeaf, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48eeb2	 Bytes: 3
  %loadMem_48eeb2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eeb2 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eeb2)
  store %struct.Memory* %call_48eeb2, %struct.Memory** %MEMORY

  ; Code: movw $0xffff, (%rax,%rcx,2)	 RIP: 48eeb5	 Bytes: 6
  %loadMem_48eeb5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eeb5 = call %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eeb5)
  store %struct.Memory* %call_48eeb5, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48eebb	 Bytes: 8
  %loadMem_48eebb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eebb = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eebb)
  store %struct.Memory* %call_48eebb, %struct.Memory** %MEMORY

  ; Code: movq 0x1958(%rax), %rax	 RIP: 48eec3	 Bytes: 7
  %loadMem_48eec3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eec3 = call %struct.Memory* @routine_movq_0x1958__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eec3)
  store %struct.Memory* %call_48eec3, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48eeca	 Bytes: 4
  %loadMem_48eeca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eeca = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eeca)
  store %struct.Memory* %call_48eeca, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48eece	 Bytes: 8
  %loadMem_48eece = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eece = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eece)
  store %struct.Memory* %call_48eece, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48eed6	 Bytes: 6
  %loadMem_48eed6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eed6 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eed6)
  store %struct.Memory* %call_48eed6, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48eedc	 Bytes: 3
  %loadMem_48eedc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eedc = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eedc)
  store %struct.Memory* %call_48eedc, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48eedf	 Bytes: 3
  %loadMem_48eedf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eedf = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eedf)
  store %struct.Memory* %call_48eedf, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48eee2	 Bytes: 4
  %loadMem_48eee2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eee2 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eee2)
  store %struct.Memory* %call_48eee2, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48eee6	 Bytes: 8
  %loadMem_48eee6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eee6 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eee6)
  store %struct.Memory* %call_48eee6, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48eeee	 Bytes: 6
  %loadMem_48eeee = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eeee = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eeee)
  store %struct.Memory* %call_48eeee, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48eef4	 Bytes: 3
  %loadMem_48eef4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eef4 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eef4)
  store %struct.Memory* %call_48eef4, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48eef7	 Bytes: 3
  %loadMem_48eef7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eef7 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eef7)
  store %struct.Memory* %call_48eef7, %struct.Memory** %MEMORY

  ; Code: movq $0xffffffffffffffff, (%rax,%rcx,8)	 RIP: 48eefa	 Bytes: 8
  %loadMem_48eefa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eefa = call %struct.Memory* @routine_movq__0xffffffffffffffff____rax__rcx_8_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eefa)
  store %struct.Memory* %call_48eefa, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48ef02	 Bytes: 8
  %loadMem_48ef02 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef02 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef02)
  store %struct.Memory* %call_48ef02, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rax), %rax	 RIP: 48ef0a	 Bytes: 7
  %loadMem_48ef0a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef0a = call %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef0a)
  store %struct.Memory* %call_48ef0a, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48ef11	 Bytes: 4
  %loadMem_48ef11 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef11 = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef11)
  store %struct.Memory* %call_48ef11, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ef15	 Bytes: 8
  %loadMem_48ef15 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef15 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef15)
  store %struct.Memory* %call_48ef15, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48ef1d	 Bytes: 6
  %loadMem_48ef1d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef1d = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef1d)
  store %struct.Memory* %call_48ef1d, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48ef23	 Bytes: 3
  %loadMem_48ef23 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef23 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef23)
  store %struct.Memory* %call_48ef23, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ef26	 Bytes: 3
  %loadMem_48ef26 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef26 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef26)
  store %struct.Memory* %call_48ef26, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ef29	 Bytes: 4
  %loadMem_48ef29 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef29 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef29)
  store %struct.Memory* %call_48ef29, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ef2d	 Bytes: 8
  %loadMem_48ef2d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef2d = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef2d)
  store %struct.Memory* %call_48ef2d, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48ef35	 Bytes: 6
  %loadMem_48ef35 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef35 = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef35)
  store %struct.Memory* %call_48ef35, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48ef3b	 Bytes: 3
  %loadMem_48ef3b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef3b = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef3b)
  store %struct.Memory* %call_48ef3b, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ef3e	 Bytes: 3
  %loadMem_48ef3e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef3e = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef3e)
  store %struct.Memory* %call_48ef3e, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ef41	 Bytes: 4
  %loadMem_48ef41 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef41 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef41)
  store %struct.Memory* %call_48ef41, %struct.Memory** %MEMORY

  ; Code: movw $0x0, (%rax)	 RIP: 48ef45	 Bytes: 5
  %loadMem_48ef45 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef45 = call %struct.Memory* @routine_movw__0x0____rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef45)
  store %struct.Memory* %call_48ef45, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48ef4a	 Bytes: 8
  %loadMem_48ef4a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef4a = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef4a)
  store %struct.Memory* %call_48ef4a, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rax), %rax	 RIP: 48ef52	 Bytes: 7
  %loadMem_48ef52 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef52 = call %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef52)
  store %struct.Memory* %call_48ef52, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48ef59	 Bytes: 4
  %loadMem_48ef59 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef59 = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef59)
  store %struct.Memory* %call_48ef59, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ef5d	 Bytes: 8
  %loadMem_48ef5d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef5d = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef5d)
  store %struct.Memory* %call_48ef5d, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48ef65	 Bytes: 6
  %loadMem_48ef65 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef65 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef65)
  store %struct.Memory* %call_48ef65, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48ef6b	 Bytes: 3
  %loadMem_48ef6b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef6b = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef6b)
  store %struct.Memory* %call_48ef6b, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ef6e	 Bytes: 3
  %loadMem_48ef6e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef6e = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef6e)
  store %struct.Memory* %call_48ef6e, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ef71	 Bytes: 4
  %loadMem_48ef71 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef71 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef71)
  store %struct.Memory* %call_48ef71, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48ef75	 Bytes: 8
  %loadMem_48ef75 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef75 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef75)
  store %struct.Memory* %call_48ef75, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48ef7d	 Bytes: 6
  %loadMem_48ef7d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef7d = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef7d)
  store %struct.Memory* %call_48ef7d, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48ef83	 Bytes: 3
  %loadMem_48ef83 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef83 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef83)
  store %struct.Memory* %call_48ef83, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48ef86	 Bytes: 3
  %loadMem_48ef86 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef86 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef86)
  store %struct.Memory* %call_48ef86, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48ef89	 Bytes: 4
  %loadMem_48ef89 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef89 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef89)
  store %struct.Memory* %call_48ef89, %struct.Memory** %MEMORY

  ; Code: movw $0x0, 0x2(%rax)	 RIP: 48ef8d	 Bytes: 6
  %loadMem_48ef8d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef8d = call %struct.Memory* @routine_movw__0x0__0x2__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef8d)
  store %struct.Memory* %call_48ef8d, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48ef93	 Bytes: 8
  %loadMem_48ef93 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef93 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef93)
  store %struct.Memory* %call_48ef93, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48ef9b	 Bytes: 7
  %loadMem_48ef9b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48ef9b = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48ef9b)
  store %struct.Memory* %call_48ef9b, %struct.Memory** %MEMORY

  ; Code: je .L_48efcf	 RIP: 48efa2	 Bytes: 6
  %loadMem_48efa2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efa2 = call %struct.Memory* @routine_je_.L_48efcf(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efa2, i8* %BRANCH_TAKEN, i64 45, i64 6, i64 6)
  store %struct.Memory* %call_48efa2, %struct.Memory** %MEMORY

  %loadBr_48efa2 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48efa2 = icmp eq i8 %loadBr_48efa2, 1
  br i1 %cmpBr_48efa2, label %block_.L_48efcf, label %block_48efa8

block_48efa8:
  ; Code: movq 0x6d4518, %rax	 RIP: 48efa8	 Bytes: 8
  %loadMem_48efa8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efa8 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efa8)
  store %struct.Memory* %call_48efa8, %struct.Memory** %MEMORY

  ; Code: addq $0xcc0, %rax	 RIP: 48efb0	 Bytes: 6
  %loadMem_48efb0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efb0 = call %struct.Memory* @routine_addq__0xcc0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efb0)
  store %struct.Memory* %call_48efb0, %struct.Memory** %MEMORY

  ; Code: addq $0x20, %rax	 RIP: 48efb6	 Bytes: 4
  %loadMem_48efb6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efb6 = call %struct.Memory* @routine_addq__0x20___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efb6)
  store %struct.Memory* %call_48efb6, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48efba	 Bytes: 4
  %loadMem_48efba = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efba = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efba)
  store %struct.Memory* %call_48efba, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48efbe	 Bytes: 4
  %loadMem_48efbe = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efbe = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efbe)
  store %struct.Memory* %call_48efbe, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48efc2	 Bytes: 3
  %loadMem_48efc2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efc2 = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efc2)
  store %struct.Memory* %call_48efc2, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48efc5	 Bytes: 4
  %loadMem_48efc5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efc5 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efc5)
  store %struct.Memory* %call_48efc5, %struct.Memory** %MEMORY

  ; Code: movw $0xffff, (%rax,%rcx,2)	 RIP: 48efc9	 Bytes: 6
  %loadMem_48efc9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efc9 = call %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efc9)
  store %struct.Memory* %call_48efc9, %struct.Memory** %MEMORY

  ; Code: .L_48efcf:	 RIP: 48efcf	 Bytes: 0
  br label %block_.L_48efcf
block_.L_48efcf:

  ; Code: jmpq .L_48f5eb	 RIP: 48efcf	 Bytes: 5
  %loadMem_48efcf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efcf = call %struct.Memory* @routine_jmpq_.L_48f5eb(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efcf, i64 1564, i64 5)
  store %struct.Memory* %call_48efcf, %struct.Memory** %MEMORY

  br label %block_.L_48f5eb

  ; Code: .L_48efd4:	 RIP: 48efd4	 Bytes: 0
block_.L_48efd4:

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48efd4	 Bytes: 4
  %loadMem_48efd4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efd4 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efd4)
  store %struct.Memory* %call_48efd4, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x244(%rax)	 RIP: 48efd8	 Bytes: 7
  %loadMem_48efd8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efd8 = call %struct.Memory* @routine_cmpl__0x0__0x244__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efd8)
  store %struct.Memory* %call_48efd8, %struct.Memory** %MEMORY

  ; Code: je .L_48f2cc	 RIP: 48efdf	 Bytes: 6
  %loadMem_48efdf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efdf = call %struct.Memory* @routine_je_.L_48f2cc(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efdf, i8* %BRANCH_TAKEN, i64 749, i64 6, i64 6)
  store %struct.Memory* %call_48efdf, %struct.Memory** %MEMORY

  %loadBr_48efdf = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48efdf = icmp eq i8 %loadBr_48efdf, 1
  br i1 %cmpBr_48efdf, label %block_.L_48f2cc, label %block_48efe5

block_48efe5:
  ; Code: movl $0x2, %eax	 RIP: 48efe5	 Bytes: 5
  %loadMem_48efe5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efe5 = call %struct.Memory* @routine_movl__0x2___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efe5)
  store %struct.Memory* %call_48efe5, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48efea	 Bytes: 4
  %loadMem_48efea = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efea = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efea)
  store %struct.Memory* %call_48efea, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %edx	 RIP: 48efee	 Bytes: 3
  %loadMem_48efee = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48efee = call %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48efee)
  store %struct.Memory* %call_48efee, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xd4(%rbp)	 RIP: 48eff1	 Bytes: 6
  %loadMem_48eff1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eff1 = call %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eff1)
  store %struct.Memory* %call_48eff1, %struct.Memory** %MEMORY

  ; Code: movl %edx, %eax	 RIP: 48eff7	 Bytes: 2
  %loadMem_48eff7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eff7 = call %struct.Memory* @routine_movl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eff7)
  store %struct.Memory* %call_48eff7, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48eff9	 Bytes: 1
  %loadMem_48eff9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48eff9 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48eff9)
  store %struct.Memory* %call_48eff9, %struct.Memory** %MEMORY

  ; Code: movl -0xd4(%rbp), %esi	 RIP: 48effa	 Bytes: 6
  %loadMem_48effa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48effa = call %struct.Memory* @routine_movl_MINUS0xd4__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48effa)
  store %struct.Memory* %call_48effa, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48f000	 Bytes: 2
  %loadMem_48f000 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f000 = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f000)
  store %struct.Memory* %call_48f000, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %edi	 RIP: 48f002	 Bytes: 3
  %loadMem_48f002 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f002 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f002)
  store %struct.Memory* %call_48f002, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xd8(%rbp)	 RIP: 48f005	 Bytes: 6
  %loadMem_48f005 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f005 = call %struct.Memory* @routine_movl__eax__MINUS0xd8__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f005)
  store %struct.Memory* %call_48f005, %struct.Memory** %MEMORY

  ; Code: movl %edi, %eax	 RIP: 48f00b	 Bytes: 2
  %loadMem_48f00b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f00b = call %struct.Memory* @routine_movl__edi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f00b)
  store %struct.Memory* %call_48f00b, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f00d	 Bytes: 1
  %loadMem_48f00d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f00d = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f00d)
  store %struct.Memory* %call_48f00d, %struct.Memory** %MEMORY

  ; Code: idivl %esi	 RIP: 48f00e	 Bytes: 2
  %loadMem_48f00e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f00e = call %struct.Memory* @routine_idivl__esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f00e)
  store %struct.Memory* %call_48f00e, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48f010	 Bytes: 3
  %loadMem_48f010 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f010 = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f010)
  store %struct.Memory* %call_48f010, %struct.Memory** %MEMORY

  ; Code: movl -0xd8(%rbp), %edi	 RIP: 48f013	 Bytes: 6
  %loadMem_48f013 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f013 = call %struct.Memory* @routine_movl_MINUS0xd8__rbp____edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f013)
  store %struct.Memory* %call_48f013, %struct.Memory** %MEMORY

  ; Code: addl %eax, %edi	 RIP: 48f019	 Bytes: 2
  %loadMem_48f019 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f019 = call %struct.Memory* @routine_addl__eax___edi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f019)
  store %struct.Memory* %call_48f019, %struct.Memory** %MEMORY

  ; Code: movslq %edi, %r8	 RIP: 48f01b	 Bytes: 3
  %loadMem_48f01b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f01b = call %struct.Memory* @routine_movslq__edi___r8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f01b)
  store %struct.Memory* %call_48f01b, %struct.Memory** %MEMORY

  ; Code: cmpl $0x2, 0x1e8(%rcx,%r8,4)	 RIP: 48f01e	 Bytes: 9
  %loadMem_48f01e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f01e = call %struct.Memory* @routine_cmpl__0x2__0x1e8__rcx__r8_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f01e)
  store %struct.Memory* %call_48f01e, %struct.Memory** %MEMORY

  ; Code: jne .L_48f2cc	 RIP: 48f027	 Bytes: 6
  %loadMem_48f027 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f027 = call %struct.Memory* @routine_jne_.L_48f2cc(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f027, i8* %BRANCH_TAKEN, i64 677, i64 6, i64 6)
  store %struct.Memory* %call_48f027, %struct.Memory** %MEMORY

  %loadBr_48f027 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f027 = icmp eq i8 %loadBr_48f027, 1
  br i1 %cmpBr_48f027, label %block_.L_48f2cc, label %block_48f02d

block_48f02d:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48f02d	 Bytes: 4
  %loadMem_48f02d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f02d = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f02d)
  store %struct.Memory* %call_48f02d, %struct.Memory** %MEMORY

  ; Code: cmpl $0x1, 0x48(%rax)	 RIP: 48f031	 Bytes: 4
  %loadMem_48f031 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f031 = call %struct.Memory* @routine_cmpl__0x1__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f031)
  store %struct.Memory* %call_48f031, %struct.Memory** %MEMORY

  ; Code: jne .L_48f2cc	 RIP: 48f035	 Bytes: 6
  %loadMem_48f035 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f035 = call %struct.Memory* @routine_jne_.L_48f2cc(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f035, i8* %BRANCH_TAKEN, i64 663, i64 6, i64 6)
  store %struct.Memory* %call_48f035, %struct.Memory** %MEMORY

  %loadBr_48f035 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f035 = icmp eq i8 %loadBr_48f035, 1
  br i1 %cmpBr_48f035, label %block_.L_48f2cc, label %block_48f03b

block_48f03b:
  ; Code: movq -0x38(%rbp), %rax	 RIP: 48f03b	 Bytes: 4
  %loadMem_48f03b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f03b = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f03b)
  store %struct.Memory* %call_48f03b, %struct.Memory** %MEMORY

  ; Code: cmpl $0x1, 0x244(%rax)	 RIP: 48f03f	 Bytes: 7
  %loadMem_48f03f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f03f = call %struct.Memory* @routine_cmpl__0x1__0x244__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f03f)
  store %struct.Memory* %call_48f03f, %struct.Memory** %MEMORY

  ; Code: jne .L_48f067	 RIP: 48f046	 Bytes: 6
  %loadMem_48f046 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f046 = call %struct.Memory* @routine_jne_.L_48f067(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f046, i8* %BRANCH_TAKEN, i64 33, i64 6, i64 6)
  store %struct.Memory* %call_48f046, %struct.Memory** %MEMORY

  %loadBr_48f046 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f046 = icmp eq i8 %loadBr_48f046, 1
  br i1 %cmpBr_48f046, label %block_.L_48f067, label %block_48f04c

block_48f04c:
  ; Code: movq 0x6cb900, %rax	 RIP: 48f04c	 Bytes: 8
  %loadMem_48f04c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f04c = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f04c)
  store %struct.Memory* %call_48f04c, %struct.Memory** %MEMORY

  ; Code: movq 0x11900(%rax), %rax	 RIP: 48f054	 Bytes: 7
  %loadMem_48f054 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f054 = call %struct.Memory* @routine_movq_0x11900__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f054)
  store %struct.Memory* %call_48f054, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0xe0(%rbp)	 RIP: 48f05b	 Bytes: 7
  %loadMem_48f05b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f05b = call %struct.Memory* @routine_movq__rax__MINUS0xe0__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f05b)
  store %struct.Memory* %call_48f05b, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f07d	 RIP: 48f062	 Bytes: 5
  %loadMem_48f062 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f062 = call %struct.Memory* @routine_jmpq_.L_48f07d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f062, i64 27, i64 5)
  store %struct.Memory* %call_48f062, %struct.Memory** %MEMORY

  br label %block_.L_48f07d

  ; Code: .L_48f067:	 RIP: 48f067	 Bytes: 0
block_.L_48f067:

  ; Code: movq 0x6cb900, %rax	 RIP: 48f067	 Bytes: 8
  %loadMem_48f067 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f067 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f067)
  store %struct.Memory* %call_48f067, %struct.Memory** %MEMORY

  ; Code: movq 0x11908(%rax), %rax	 RIP: 48f06f	 Bytes: 7
  %loadMem_48f06f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f06f = call %struct.Memory* @routine_movq_0x11908__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f06f)
  store %struct.Memory* %call_48f06f, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0xe0(%rbp)	 RIP: 48f076	 Bytes: 7
  %loadMem_48f076 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f076 = call %struct.Memory* @routine_movq__rax__MINUS0xe0__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f076)
  store %struct.Memory* %call_48f076, %struct.Memory** %MEMORY

  ; Code: .L_48f07d:	 RIP: 48f07d	 Bytes: 0
  br label %block_.L_48f07d
block_.L_48f07d:

  ; Code: movq -0xe0(%rbp), %rax	 RIP: 48f07d	 Bytes: 7
  %loadMem_48f07d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f07d = call %struct.Memory* @routine_movq_MINUS0xe0__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f07d)
  store %struct.Memory* %call_48f07d, %struct.Memory** %MEMORY

  ; Code: movl $0x2, %ecx	 RIP: 48f084	 Bytes: 5
  %loadMem_48f084 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f084 = call %struct.Memory* @routine_movl__0x2___ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f084)
  store %struct.Memory* %call_48f084, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0x70(%rbp)	 RIP: 48f089	 Bytes: 4
  %loadMem_48f089 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f089 = call %struct.Memory* @routine_movq__rax__MINUS0x70__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f089)
  store %struct.Memory* %call_48f089, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48f08d	 Bytes: 8
  %loadMem_48f08d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f08d = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f08d)
  store %struct.Memory* %call_48f08d, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rax), %rax	 RIP: 48f095	 Bytes: 7
  %loadMem_48f095 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f095 = call %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f095)
  store %struct.Memory* %call_48f095, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48f09c	 Bytes: 4
  %loadMem_48f09c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f09c = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f09c)
  store %struct.Memory* %call_48f09c, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48f0a0	 Bytes: 8
  %loadMem_48f0a0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0a0 = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0a0)
  store %struct.Memory* %call_48f0a0, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rdx), %esi	 RIP: 48f0a8	 Bytes: 6
  %loadMem_48f0a8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0a8 = call %struct.Memory* @routine_movl_0x90__rdx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0a8)
  store %struct.Memory* %call_48f0a8, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %esi	 RIP: 48f0ae	 Bytes: 3
  %loadMem_48f0ae = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0ae = call %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0ae)
  store %struct.Memory* %call_48f0ae, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdx	 RIP: 48f0b1	 Bytes: 3
  %loadMem_48f0b1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0b1 = call %struct.Memory* @routine_movslq__esi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0b1)
  store %struct.Memory* %call_48f0b1, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rdx,8), %rax	 RIP: 48f0b4	 Bytes: 4
  %loadMem_48f0b4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0b4 = call %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0b4)
  store %struct.Memory* %call_48f0b4, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48f0b8	 Bytes: 8
  %loadMem_48f0b8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0b8 = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0b8)
  store %struct.Memory* %call_48f0b8, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rdx), %esi	 RIP: 48f0c0	 Bytes: 6
  %loadMem_48f0c0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0c0 = call %struct.Memory* @routine_movl_0x94__rdx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0c0)
  store %struct.Memory* %call_48f0c0, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %esi	 RIP: 48f0c6	 Bytes: 3
  %loadMem_48f0c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0c6 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0c6)
  store %struct.Memory* %call_48f0c6, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdx	 RIP: 48f0c9	 Bytes: 3
  %loadMem_48f0c9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0c9 = call %struct.Memory* @routine_movslq__esi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0c9)
  store %struct.Memory* %call_48f0c9, %struct.Memory** %MEMORY

  ; Code: movw $0x0, (%rax,%rdx,2)	 RIP: 48f0cc	 Bytes: 6
  %loadMem_48f0cc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0cc = call %struct.Memory* @routine_movw__0x0____rax__rdx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0cc)
  store %struct.Memory* %call_48f0cc, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rax	 RIP: 48f0d2	 Bytes: 8
  %loadMem_48f0d2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0d2 = call %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0d2)
  store %struct.Memory* %call_48f0d2, %struct.Memory** %MEMORY

  ; Code: addq $0x18, %rax	 RIP: 48f0da	 Bytes: 4
  %loadMem_48f0da = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0da = call %struct.Memory* @routine_addq__0x18___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0da)
  store %struct.Memory* %call_48f0da, %struct.Memory** %MEMORY

  ; Code: movl -0x5c(%rbp), %esi	 RIP: 48f0de	 Bytes: 3
  %loadMem_48f0de = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0de = call %struct.Memory* @routine_movl_MINUS0x5c__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0de)
  store %struct.Memory* %call_48f0de, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %esi	 RIP: 48f0e1	 Bytes: 3
  %loadMem_48f0e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0e1 = call %struct.Memory* @routine_addl__0x1___esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0e1)
  store %struct.Memory* %call_48f0e1, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdx	 RIP: 48f0e4	 Bytes: 3
  %loadMem_48f0e4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0e4 = call %struct.Memory* @routine_movslq__esi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0e4)
  store %struct.Memory* %call_48f0e4, %struct.Memory** %MEMORY

  ; Code: imulq $0x108, %rdx, %rdx	 RIP: 48f0e7	 Bytes: 7
  %loadMem_48f0e7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0e7 = call %struct.Memory* @routine_imulq__0x108___rdx___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0e7)
  store %struct.Memory* %call_48f0e7, %struct.Memory** %MEMORY

  ; Code: addq %rdx, %rax	 RIP: 48f0ee	 Bytes: 3
  %loadMem_48f0ee = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0ee = call %struct.Memory* @routine_addq__rdx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0ee)
  store %struct.Memory* %call_48f0ee, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48f0f1	 Bytes: 3
  %loadMem_48f0f1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0f1 = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0f1)
  store %struct.Memory* %call_48f0f1, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdx	 RIP: 48f0f4	 Bytes: 8
  %loadMem_48f0f4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0f4 = call %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0f4)
  store %struct.Memory* %call_48f0f4, %struct.Memory** %MEMORY

  ; Code: movq 0x1958(%rdx), %rdx	 RIP: 48f0fc	 Bytes: 7
  %loadMem_48f0fc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f0fc = call %struct.Memory* @routine_movq_0x1958__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f0fc)
  store %struct.Memory* %call_48f0fc, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rdx), %rdx	 RIP: 48f103	 Bytes: 4
  %loadMem_48f103 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f103 = call %struct.Memory* @routine_movq_0x8__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f103)
  store %struct.Memory* %call_48f103, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdi	 RIP: 48f107	 Bytes: 8
  %loadMem_48f107 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f107 = call %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f107)
  store %struct.Memory* %call_48f107, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rdi), %esi	 RIP: 48f10f	 Bytes: 6
  %loadMem_48f10f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f10f = call %struct.Memory* @routine_movl_0x90__rdi____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f10f)
  store %struct.Memory* %call_48f10f, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %esi	 RIP: 48f115	 Bytes: 3
  %loadMem_48f115 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f115 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f115)
  store %struct.Memory* %call_48f115, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdi	 RIP: 48f118	 Bytes: 3
  %loadMem_48f118 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f118 = call %struct.Memory* @routine_movslq__esi___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f118)
  store %struct.Memory* %call_48f118, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rdi,8), %rdx	 RIP: 48f11b	 Bytes: 4
  %loadMem_48f11b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f11b = call %struct.Memory* @routine_movq___rdx__rdi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f11b)
  store %struct.Memory* %call_48f11b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdi	 RIP: 48f11f	 Bytes: 8
  %loadMem_48f11f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f11f = call %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f11f)
  store %struct.Memory* %call_48f11f, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rdi), %esi	 RIP: 48f127	 Bytes: 6
  %loadMem_48f127 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f127 = call %struct.Memory* @routine_movl_0x94__rdi____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f127)
  store %struct.Memory* %call_48f127, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %esi	 RIP: 48f12d	 Bytes: 3
  %loadMem_48f12d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f12d = call %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f12d)
  store %struct.Memory* %call_48f12d, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdi	 RIP: 48f130	 Bytes: 3
  %loadMem_48f130 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f130 = call %struct.Memory* @routine_movslq__esi___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f130)
  store %struct.Memory* %call_48f130, %struct.Memory** %MEMORY

  ; Code: movq %rax, (%rdx,%rdi,8)	 RIP: 48f133	 Bytes: 4
  %loadMem_48f133 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f133 = call %struct.Memory* @routine_movq__rax____rdx__rdi_8_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f133)
  store %struct.Memory* %call_48f133, %struct.Memory** %MEMORY

  ; Code: movq -0x70(%rbp), %rax	 RIP: 48f137	 Bytes: 4
  %loadMem_48f137 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f137 = call %struct.Memory* @routine_movq_MINUS0x70__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f137)
  store %struct.Memory* %call_48f137, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48f13b	 Bytes: 4
  %loadMem_48f13b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f13b = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f13b)
  store %struct.Memory* %call_48f13b, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rdx,8), %rax	 RIP: 48f13f	 Bytes: 4
  %loadMem_48f13f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f13f = call %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f13f)
  store %struct.Memory* %call_48f13f, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rdx	 RIP: 48f143	 Bytes: 4
  %loadMem_48f143 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f143 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f143)
  store %struct.Memory* %call_48f143, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rdx,8), %rax	 RIP: 48f147	 Bytes: 4
  %loadMem_48f147 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f147 = call %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f147)
  store %struct.Memory* %call_48f147, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rax), %rax	 RIP: 48f14b	 Bytes: 4
  %loadMem_48f14b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f14b = call %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f14b)
  store %struct.Memory* %call_48f14b, %struct.Memory** %MEMORY

  ; Code: movq (%rax), %rax	 RIP: 48f14f	 Bytes: 3
  %loadMem_48f14f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f14f = call %struct.Memory* @routine_movq___rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f14f)
  store %struct.Memory* %call_48f14f, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rdx	 RIP: 48f152	 Bytes: 4
  %loadMem_48f152 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f152 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f152)
  store %struct.Memory* %call_48f152, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %esi	 RIP: 48f156	 Bytes: 3
  %loadMem_48f156 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f156 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f156)
  store %struct.Memory* %call_48f156, %struct.Memory** %MEMORY

  ; Code: movq %rax, -0xe8(%rbp)	 RIP: 48f159	 Bytes: 7
  %loadMem_48f159 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f159 = call %struct.Memory* @routine_movq__rax__MINUS0xe8__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f159)
  store %struct.Memory* %call_48f159, %struct.Memory** %MEMORY

  ; Code: movl %esi, %eax	 RIP: 48f160	 Bytes: 2
  %loadMem_48f160 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f160 = call %struct.Memory* @routine_movl__esi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f160)
  store %struct.Memory* %call_48f160, %struct.Memory** %MEMORY

  ; Code: movq %rdx, -0xf0(%rbp)	 RIP: 48f162	 Bytes: 7
  %loadMem_48f162 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f162 = call %struct.Memory* @routine_movq__rdx__MINUS0xf0__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f162)
  store %struct.Memory* %call_48f162, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f169	 Bytes: 1
  %loadMem_48f169 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f169 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f169)
  store %struct.Memory* %call_48f169, %struct.Memory** %MEMORY

  ; Code: idivl %ecx	 RIP: 48f16a	 Bytes: 2
  %loadMem_48f16a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f16a = call %struct.Memory* @routine_idivl__ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f16a)
  store %struct.Memory* %call_48f16a, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %esi	 RIP: 48f16c	 Bytes: 3
  %loadMem_48f16c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f16c = call %struct.Memory* @routine_movl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f16c)
  store %struct.Memory* %call_48f16c, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xf4(%rbp)	 RIP: 48f16f	 Bytes: 6
  %loadMem_48f16f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f16f = call %struct.Memory* @routine_movl__eax__MINUS0xf4__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f16f)
  store %struct.Memory* %call_48f16f, %struct.Memory** %MEMORY

  ; Code: movl %esi, %eax	 RIP: 48f175	 Bytes: 2
  %loadMem_48f175 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f175 = call %struct.Memory* @routine_movl__esi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f175)
  store %struct.Memory* %call_48f175, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f177	 Bytes: 1
  %loadMem_48f177 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f177 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f177)
  store %struct.Memory* %call_48f177, %struct.Memory** %MEMORY

  ; Code: idivl %ecx	 RIP: 48f178	 Bytes: 2
  %loadMem_48f178 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f178 = call %struct.Memory* @routine_idivl__ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f178)
  store %struct.Memory* %call_48f178, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48f17a	 Bytes: 3
  %loadMem_48f17a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f17a = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f17a)
  store %struct.Memory* %call_48f17a, %struct.Memory** %MEMORY

  ; Code: movl -0xf4(%rbp), %esi	 RIP: 48f17d	 Bytes: 6
  %loadMem_48f17d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f17d = call %struct.Memory* @routine_movl_MINUS0xf4__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f17d)
  store %struct.Memory* %call_48f17d, %struct.Memory** %MEMORY

  ; Code: addl %eax, %esi	 RIP: 48f183	 Bytes: 2
  %loadMem_48f183 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f183 = call %struct.Memory* @routine_addl__eax___esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f183)
  store %struct.Memory* %call_48f183, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rdi	 RIP: 48f185	 Bytes: 3
  %loadMem_48f185 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f185 = call %struct.Memory* @routine_movslq__esi___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f185)
  store %struct.Memory* %call_48f185, %struct.Memory** %MEMORY

  ; Code: movq -0xf0(%rbp), %r8	 RIP: 48f188	 Bytes: 7
  %loadMem_48f188 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f188 = call %struct.Memory* @routine_movq_MINUS0xf0__rbp____r8(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f188)
  store %struct.Memory* %call_48f188, %struct.Memory** %MEMORY

  ; Code: movslq 0x1d8(%r8,%rdi,4), %rdi	 RIP: 48f18f	 Bytes: 8
  %loadMem_48f18f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f18f = call %struct.Memory* @routine_movslq_0x1d8__r8__rdi_4____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f18f)
  store %struct.Memory* %call_48f18f, %struct.Memory** %MEMORY

  ; Code: movq -0xe8(%rbp), %r9	 RIP: 48f197	 Bytes: 7
  %loadMem_48f197 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f197 = call %struct.Memory* @routine_movq_MINUS0xe8__rbp____r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f197)
  store %struct.Memory* %call_48f197, %struct.Memory** %MEMORY

  ; Code: movq (%r9,%rdi,8), %rdi	 RIP: 48f19e	 Bytes: 4
  %loadMem_48f19e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f19e = call %struct.Memory* @routine_movq___r9__rdi_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f19e)
  store %struct.Memory* %call_48f19e, %struct.Memory** %MEMORY

  ; Code: movw (%rdi), %r10w	 RIP: 48f1a2	 Bytes: 4
  %loadMem_48f1a2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1a2 = call %struct.Memory* @routine_movw___rdi____r10w(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1a2)
  store %struct.Memory* %call_48f1a2, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdi	 RIP: 48f1a6	 Bytes: 8
  %loadMem_48f1a6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1a6 = call %struct.Memory* @routine_movq_0x70fcf0___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1a6)
  store %struct.Memory* %call_48f1a6, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rdi), %rdi	 RIP: 48f1ae	 Bytes: 7
  %loadMem_48f1ae = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1ae = call %struct.Memory* @routine_movq_0x1968__rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1ae)
  store %struct.Memory* %call_48f1ae, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rdi), %rdi	 RIP: 48f1b5	 Bytes: 4
  %loadMem_48f1b5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1b5 = call %struct.Memory* @routine_movq_0x8__rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1b5)
  store %struct.Memory* %call_48f1b5, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48f1b9	 Bytes: 8
  %loadMem_48f1b9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1b9 = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1b9)
  store %struct.Memory* %call_48f1b9, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r11), %eax	 RIP: 48f1c1	 Bytes: 7
  %loadMem_48f1c1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1c1 = call %struct.Memory* @routine_movl_0x90__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1c1)
  store %struct.Memory* %call_48f1c1, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %eax	 RIP: 48f1c8	 Bytes: 3
  %loadMem_48f1c8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1c8 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1c8)
  store %struct.Memory* %call_48f1c8, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48f1cb	 Bytes: 3
  %loadMem_48f1cb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1cb = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1cb)
  store %struct.Memory* %call_48f1cb, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48f1ce	 Bytes: 4
  %loadMem_48f1ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1ce = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1ce)
  store %struct.Memory* %call_48f1ce, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48f1d2	 Bytes: 8
  %loadMem_48f1d2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1d2 = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1d2)
  store %struct.Memory* %call_48f1d2, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r11), %eax	 RIP: 48f1da	 Bytes: 7
  %loadMem_48f1da = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1da = call %struct.Memory* @routine_movl_0x94__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1da)
  store %struct.Memory* %call_48f1da, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %eax	 RIP: 48f1e1	 Bytes: 3
  %loadMem_48f1e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1e1 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1e1)
  store %struct.Memory* %call_48f1e1, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48f1e4	 Bytes: 3
  %loadMem_48f1e4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1e4 = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1e4)
  store %struct.Memory* %call_48f1e4, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48f1e7	 Bytes: 4
  %loadMem_48f1e7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1e7 = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1e7)
  store %struct.Memory* %call_48f1e7, %struct.Memory** %MEMORY

  ; Code: movw %r10w, (%rdi)	 RIP: 48f1eb	 Bytes: 4
  %loadMem_48f1eb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1eb = call %struct.Memory* @routine_movw__r10w____rdi_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1eb)
  store %struct.Memory* %call_48f1eb, %struct.Memory** %MEMORY

  ; Code: movq -0x70(%rbp), %rdi	 RIP: 48f1ef	 Bytes: 4
  %loadMem_48f1ef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1ef = call %struct.Memory* @routine_movq_MINUS0x70__rbp____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1ef)
  store %struct.Memory* %call_48f1ef, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %r11	 RIP: 48f1f3	 Bytes: 4
  %loadMem_48f1f3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1f3 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1f3)
  store %struct.Memory* %call_48f1f3, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48f1f7	 Bytes: 4
  %loadMem_48f1f7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1f7 = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1f7)
  store %struct.Memory* %call_48f1f7, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %r11	 RIP: 48f1fb	 Bytes: 4
  %loadMem_48f1fb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1fb = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1fb)
  store %struct.Memory* %call_48f1fb, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48f1ff	 Bytes: 4
  %loadMem_48f1ff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f1ff = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f1ff)
  store %struct.Memory* %call_48f1ff, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rdi), %rdi	 RIP: 48f203	 Bytes: 4
  %loadMem_48f203 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f203 = call %struct.Memory* @routine_movq_0x8__rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f203)
  store %struct.Memory* %call_48f203, %struct.Memory** %MEMORY

  ; Code: movq (%rdi), %rdi	 RIP: 48f207	 Bytes: 3
  %loadMem_48f207 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f207 = call %struct.Memory* @routine_movq___rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f207)
  store %struct.Memory* %call_48f207, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %r11	 RIP: 48f20a	 Bytes: 4
  %loadMem_48f20a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f20a = call %struct.Memory* @routine_movq_MINUS0x38__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f20a)
  store %struct.Memory* %call_48f20a, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f20e	 Bytes: 3
  %loadMem_48f20e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f20e = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f20e)
  store %struct.Memory* %call_48f20e, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f211	 Bytes: 1
  %loadMem_48f211 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f211 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f211)
  store %struct.Memory* %call_48f211, %struct.Memory** %MEMORY

  ; Code: idivl %ecx	 RIP: 48f212	 Bytes: 2
  %loadMem_48f212 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f212 = call %struct.Memory* @routine_idivl__ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f212)
  store %struct.Memory* %call_48f212, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %esi	 RIP: 48f214	 Bytes: 3
  %loadMem_48f214 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f214 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f214)
  store %struct.Memory* %call_48f214, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xf8(%rbp)	 RIP: 48f217	 Bytes: 6
  %loadMem_48f217 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f217 = call %struct.Memory* @routine_movl__eax__MINUS0xf8__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f217)
  store %struct.Memory* %call_48f217, %struct.Memory** %MEMORY

  ; Code: movl %esi, %eax	 RIP: 48f21d	 Bytes: 2
  %loadMem_48f21d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f21d = call %struct.Memory* @routine_movl__esi___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f21d)
  store %struct.Memory* %call_48f21d, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f21f	 Bytes: 1
  %loadMem_48f21f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f21f = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f21f)
  store %struct.Memory* %call_48f21f, %struct.Memory** %MEMORY

  ; Code: idivl %ecx	 RIP: 48f220	 Bytes: 2
  %loadMem_48f220 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f220 = call %struct.Memory* @routine_idivl__ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f220)
  store %struct.Memory* %call_48f220, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48f222	 Bytes: 3
  %loadMem_48f222 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f222 = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f222)
  store %struct.Memory* %call_48f222, %struct.Memory** %MEMORY

  ; Code: movl -0xf8(%rbp), %ecx	 RIP: 48f225	 Bytes: 6
  %loadMem_48f225 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f225 = call %struct.Memory* @routine_movl_MINUS0xf8__rbp____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f225)
  store %struct.Memory* %call_48f225, %struct.Memory** %MEMORY

  ; Code: addl %eax, %ecx	 RIP: 48f22b	 Bytes: 2
  %loadMem_48f22b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f22b = call %struct.Memory* @routine_addl__eax___ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f22b)
  store %struct.Memory* %call_48f22b, %struct.Memory** %MEMORY

  ; Code: movslq %ecx, %rbx	 RIP: 48f22d	 Bytes: 3
  %loadMem_48f22d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f22d = call %struct.Memory* @routine_movslq__ecx___rbx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f22d)
  store %struct.Memory* %call_48f22d, %struct.Memory** %MEMORY

  ; Code: movslq 0x1d8(%r11,%rbx,4), %r11	 RIP: 48f230	 Bytes: 8
  %loadMem_48f230 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f230 = call %struct.Memory* @routine_movslq_0x1d8__r11__rbx_4____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f230)
  store %struct.Memory* %call_48f230, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48f238	 Bytes: 4
  %loadMem_48f238 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f238 = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f238)
  store %struct.Memory* %call_48f238, %struct.Memory** %MEMORY

  ; Code: movw 0x2(%rdi), %r10w	 RIP: 48f23c	 Bytes: 5
  %loadMem_48f23c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f23c = call %struct.Memory* @routine_movw_0x2__rdi____r10w(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f23c)
  store %struct.Memory* %call_48f23c, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdi	 RIP: 48f241	 Bytes: 8
  %loadMem_48f241 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f241 = call %struct.Memory* @routine_movq_0x70fcf0___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f241)
  store %struct.Memory* %call_48f241, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rdi), %rdi	 RIP: 48f249	 Bytes: 7
  %loadMem_48f249 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f249 = call %struct.Memory* @routine_movq_0x1968__rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f249)
  store %struct.Memory* %call_48f249, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rdi), %rdi	 RIP: 48f250	 Bytes: 4
  %loadMem_48f250 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f250 = call %struct.Memory* @routine_movq_0x8__rdi____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f250)
  store %struct.Memory* %call_48f250, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48f254	 Bytes: 8
  %loadMem_48f254 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f254 = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f254)
  store %struct.Memory* %call_48f254, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r11), %eax	 RIP: 48f25c	 Bytes: 7
  %loadMem_48f25c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f25c = call %struct.Memory* @routine_movl_0x90__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f25c)
  store %struct.Memory* %call_48f25c, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %eax	 RIP: 48f263	 Bytes: 3
  %loadMem_48f263 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f263 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f263)
  store %struct.Memory* %call_48f263, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48f266	 Bytes: 3
  %loadMem_48f266 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f266 = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f266)
  store %struct.Memory* %call_48f266, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48f269	 Bytes: 4
  %loadMem_48f269 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f269 = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f269)
  store %struct.Memory* %call_48f269, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48f26d	 Bytes: 8
  %loadMem_48f26d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f26d = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f26d)
  store %struct.Memory* %call_48f26d, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r11), %eax	 RIP: 48f275	 Bytes: 7
  %loadMem_48f275 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f275 = call %struct.Memory* @routine_movl_0x94__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f275)
  store %struct.Memory* %call_48f275, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %eax	 RIP: 48f27c	 Bytes: 3
  %loadMem_48f27c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f27c = call %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f27c)
  store %struct.Memory* %call_48f27c, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48f27f	 Bytes: 3
  %loadMem_48f27f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f27f = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f27f)
  store %struct.Memory* %call_48f27f, %struct.Memory** %MEMORY

  ; Code: movq (%rdi,%r11,8), %rdi	 RIP: 48f282	 Bytes: 4
  %loadMem_48f282 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f282 = call %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f282)
  store %struct.Memory* %call_48f282, %struct.Memory** %MEMORY

  ; Code: movw %r10w, 0x2(%rdi)	 RIP: 48f286	 Bytes: 5
  %loadMem_48f286 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f286 = call %struct.Memory* @routine_movw__r10w__0x2__rdi_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f286)
  store %struct.Memory* %call_48f286, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdi	 RIP: 48f28b	 Bytes: 8
  %loadMem_48f28b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f28b = call %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f28b)
  store %struct.Memory* %call_48f28b, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rdi)	 RIP: 48f293	 Bytes: 7
  %loadMem_48f293 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f293 = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rdi_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f293)
  store %struct.Memory* %call_48f293, %struct.Memory** %MEMORY

  ; Code: je .L_48f2c7	 RIP: 48f29a	 Bytes: 6
  %loadMem_48f29a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f29a = call %struct.Memory* @routine_je_.L_48f2c7(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f29a, i8* %BRANCH_TAKEN, i64 45, i64 6, i64 6)
  store %struct.Memory* %call_48f29a, %struct.Memory** %MEMORY

  %loadBr_48f29a = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f29a = icmp eq i8 %loadBr_48f29a, 1
  br i1 %cmpBr_48f29a, label %block_.L_48f2c7, label %block_48f2a0

block_48f2a0:
  ; Code: movq 0x6d4518, %rax	 RIP: 48f2a0	 Bytes: 8
  %loadMem_48f2a0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2a0 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2a0)
  store %struct.Memory* %call_48f2a0, %struct.Memory** %MEMORY

  ; Code: addq $0xcc0, %rax	 RIP: 48f2a8	 Bytes: 6
  %loadMem_48f2a8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2a8 = call %struct.Memory* @routine_addq__0xcc0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2a8)
  store %struct.Memory* %call_48f2a8, %struct.Memory** %MEMORY

  ; Code: addq $0x20, %rax	 RIP: 48f2ae	 Bytes: 4
  %loadMem_48f2ae = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2ae = call %struct.Memory* @routine_addq__0x20___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2ae)
  store %struct.Memory* %call_48f2ae, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48f2b2	 Bytes: 4
  %loadMem_48f2b2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2b2 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2b2)
  store %struct.Memory* %call_48f2b2, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48f2b6	 Bytes: 4
  %loadMem_48f2b6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2b6 = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2b6)
  store %struct.Memory* %call_48f2b6, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48f2ba	 Bytes: 3
  %loadMem_48f2ba = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2ba = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2ba)
  store %struct.Memory* %call_48f2ba, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48f2bd	 Bytes: 4
  %loadMem_48f2bd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2bd = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2bd)
  store %struct.Memory* %call_48f2bd, %struct.Memory** %MEMORY

  ; Code: movw $0x0, (%rax,%rcx,2)	 RIP: 48f2c1	 Bytes: 6
  %loadMem_48f2c1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2c1 = call %struct.Memory* @routine_movw__0x0____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2c1)
  store %struct.Memory* %call_48f2c1, %struct.Memory** %MEMORY

  ; Code: .L_48f2c7:	 RIP: 48f2c7	 Bytes: 0
  br label %block_.L_48f2c7
block_.L_48f2c7:

  ; Code: jmpq .L_48f5e6	 RIP: 48f2c7	 Bytes: 5
  %loadMem_48f2c7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2c7 = call %struct.Memory* @routine_jmpq_.L_48f5e6(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2c7, i64 799, i64 5)
  store %struct.Memory* %call_48f2c7, %struct.Memory** %MEMORY

  br label %block_.L_48f5e6

  ; Code: .L_48f2cc:	 RIP: 48f2cc	 Bytes: 0
block_.L_48f2cc:

  ; Code: movl $0x2, %eax	 RIP: 48f2cc	 Bytes: 5
  %loadMem_48f2cc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2cc = call %struct.Memory* @routine_movl__0x2___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2cc)
  store %struct.Memory* %call_48f2cc, %struct.Memory** %MEMORY

  ; Code: movq $0x7236a0, %rcx	 RIP: 48f2d1	 Bytes: 10
  %loadMem_48f2d1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2d1 = call %struct.Memory* @routine_movq__0x7236a0___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2d1)
  store %struct.Memory* %call_48f2d1, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rdx	 RIP: 48f2db	 Bytes: 4
  %loadMem_48f2db = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2db = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2db)
  store %struct.Memory* %call_48f2db, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rdx	 RIP: 48f2df	 Bytes: 4
  %loadMem_48f2df = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2df = call %struct.Memory* @routine_shlq__0x3___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2df)
  store %struct.Memory* %call_48f2df, %struct.Memory** %MEMORY

  ; Code: movq %rcx, %rsi	 RIP: 48f2e3	 Bytes: 3
  %loadMem_48f2e3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2e3 = call %struct.Memory* @routine_movq__rcx___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2e3)
  store %struct.Memory* %call_48f2e3, %struct.Memory** %MEMORY

  ; Code: addq %rdx, %rsi	 RIP: 48f2e6	 Bytes: 3
  %loadMem_48f2e6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2e6 = call %struct.Memory* @routine_addq__rdx___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2e6)
  store %struct.Memory* %call_48f2e6, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48f2e9	 Bytes: 4
  %loadMem_48f2e9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2e9 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2e9)
  store %struct.Memory* %call_48f2e9, %struct.Memory** %MEMORY

  ; Code: movw (%rsi,%rdx,2), %di	 RIP: 48f2ed	 Bytes: 4
  %loadMem_48f2ed = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2ed = call %struct.Memory* @routine_movw___rsi__rdx_2____di(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2ed)
  store %struct.Memory* %call_48f2ed, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdx	 RIP: 48f2f1	 Bytes: 8
  %loadMem_48f2f1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2f1 = call %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2f1)
  store %struct.Memory* %call_48f2f1, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rdx), %rdx	 RIP: 48f2f9	 Bytes: 7
  %loadMem_48f2f9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f2f9 = call %struct.Memory* @routine_movq_0x1950__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f2f9)
  store %struct.Memory* %call_48f2f9, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rdx), %rdx	 RIP: 48f300	 Bytes: 4
  %loadMem_48f300 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f300 = call %struct.Memory* @routine_movq_0x8__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f300)
  store %struct.Memory* %call_48f300, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48f304	 Bytes: 8
  %loadMem_48f304 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f304 = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f304)
  store %struct.Memory* %call_48f304, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rsi), %r8d	 RIP: 48f30c	 Bytes: 7
  %loadMem_48f30c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f30c = call %struct.Memory* @routine_movl_0x90__rsi____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f30c)
  store %struct.Memory* %call_48f30c, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %r8d	 RIP: 48f313	 Bytes: 4
  %loadMem_48f313 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f313 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f313)
  store %struct.Memory* %call_48f313, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %rsi	 RIP: 48f317	 Bytes: 3
  %loadMem_48f317 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f317 = call %struct.Memory* @routine_movslq__r8d___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f317)
  store %struct.Memory* %call_48f317, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48f31a	 Bytes: 4
  %loadMem_48f31a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f31a = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f31a)
  store %struct.Memory* %call_48f31a, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48f31e	 Bytes: 8
  %loadMem_48f31e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f31e = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f31e)
  store %struct.Memory* %call_48f31e, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rsi), %r8d	 RIP: 48f326	 Bytes: 7
  %loadMem_48f326 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f326 = call %struct.Memory* @routine_movl_0x94__rsi____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f326)
  store %struct.Memory* %call_48f326, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %r8d	 RIP: 48f32d	 Bytes: 4
  %loadMem_48f32d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f32d = call %struct.Memory* @routine_addl_MINUS0x10__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f32d)
  store %struct.Memory* %call_48f32d, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %rsi	 RIP: 48f331	 Bytes: 3
  %loadMem_48f331 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f331 = call %struct.Memory* @routine_movslq__r8d___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f331)
  store %struct.Memory* %call_48f331, %struct.Memory** %MEMORY

  ; Code: movw %di, (%rdx,%rsi,2)	 RIP: 48f334	 Bytes: 4
  %loadMem_48f334 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f334 = call %struct.Memory* @routine_movw__di____rdx__rsi_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f334)
  store %struct.Memory* %call_48f334, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rdx	 RIP: 48f338	 Bytes: 8
  %loadMem_48f338 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f338 = call %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f338)
  store %struct.Memory* %call_48f338, %struct.Memory** %MEMORY

  ; Code: addq $0x18, %rdx	 RIP: 48f340	 Bytes: 4
  %loadMem_48f340 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f340 = call %struct.Memory* @routine_addq__0x18___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f340)
  store %struct.Memory* %call_48f340, %struct.Memory** %MEMORY

  ; Code: movl -0x5c(%rbp), %r8d	 RIP: 48f344	 Bytes: 4
  %loadMem_48f344 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f344 = call %struct.Memory* @routine_movl_MINUS0x5c__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f344)
  store %struct.Memory* %call_48f344, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %r8d	 RIP: 48f348	 Bytes: 4
  %loadMem_48f348 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f348 = call %struct.Memory* @routine_addl__0x1___r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f348)
  store %struct.Memory* %call_48f348, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %rsi	 RIP: 48f34c	 Bytes: 3
  %loadMem_48f34c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f34c = call %struct.Memory* @routine_movslq__r8d___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f34c)
  store %struct.Memory* %call_48f34c, %struct.Memory** %MEMORY

  ; Code: imulq $0x108, %rsi, %rsi	 RIP: 48f34f	 Bytes: 7
  %loadMem_48f34f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f34f = call %struct.Memory* @routine_imulq__0x108___rsi___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f34f)
  store %struct.Memory* %call_48f34f, %struct.Memory** %MEMORY

  ; Code: addq %rsi, %rdx	 RIP: 48f356	 Bytes: 3
  %loadMem_48f356 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f356 = call %struct.Memory* @routine_addq__rsi___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f356)
  store %struct.Memory* %call_48f356, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rsi	 RIP: 48f359	 Bytes: 8
  %loadMem_48f359 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f359 = call %struct.Memory* @routine_movq_0x70fcf0___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f359)
  store %struct.Memory* %call_48f359, %struct.Memory** %MEMORY

  ; Code: movq 0x1950(%rsi), %rsi	 RIP: 48f361	 Bytes: 7
  %loadMem_48f361 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f361 = call %struct.Memory* @routine_movq_0x1950__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f361)
  store %struct.Memory* %call_48f361, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rsi), %rsi	 RIP: 48f368	 Bytes: 4
  %loadMem_48f368 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f368 = call %struct.Memory* @routine_movq_0x8__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f368)
  store %struct.Memory* %call_48f368, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r9	 RIP: 48f36c	 Bytes: 8
  %loadMem_48f36c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f36c = call %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f36c)
  store %struct.Memory* %call_48f36c, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r9), %r8d	 RIP: 48f374	 Bytes: 7
  %loadMem_48f374 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f374 = call %struct.Memory* @routine_movl_0x90__r9____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f374)
  store %struct.Memory* %call_48f374, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %r8d	 RIP: 48f37b	 Bytes: 4
  %loadMem_48f37b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f37b = call %struct.Memory* @routine_addl_MINUS0xc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f37b)
  store %struct.Memory* %call_48f37b, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %r9	 RIP: 48f37f	 Bytes: 3
  %loadMem_48f37f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f37f = call %struct.Memory* @routine_movslq__r8d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f37f)
  store %struct.Memory* %call_48f37f, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r9,8), %rsi	 RIP: 48f382	 Bytes: 4
  %loadMem_48f382 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f382 = call %struct.Memory* @routine_movq___rsi__r9_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f382)
  store %struct.Memory* %call_48f382, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r9	 RIP: 48f386	 Bytes: 8
  %loadMem_48f386 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f386 = call %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f386)
  store %struct.Memory* %call_48f386, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r9), %r8d	 RIP: 48f38e	 Bytes: 7
  %loadMem_48f38e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f38e = call %struct.Memory* @routine_movl_0x94__r9____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f38e)
  store %struct.Memory* %call_48f38e, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %r8d	 RIP: 48f395	 Bytes: 4
  %loadMem_48f395 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f395 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f395)
  store %struct.Memory* %call_48f395, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %r9	 RIP: 48f399	 Bytes: 3
  %loadMem_48f399 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f399 = call %struct.Memory* @routine_movslq__r8d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f399)
  store %struct.Memory* %call_48f399, %struct.Memory** %MEMORY

  ; Code: movswq (%rsi,%r9,2), %rsi	 RIP: 48f39c	 Bytes: 5
  %loadMem_48f39c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f39c = call %struct.Memory* @routine_movswq___rsi__r9_2____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f39c)
  store %struct.Memory* %call_48f39c, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48f3a1	 Bytes: 4
  %loadMem_48f3a1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3a1 = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3a1)
  store %struct.Memory* %call_48f3a1, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rsi	 RIP: 48f3a5	 Bytes: 8
  %loadMem_48f3a5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3a5 = call %struct.Memory* @routine_movq_0x70fcf0___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3a5)
  store %struct.Memory* %call_48f3a5, %struct.Memory** %MEMORY

  ; Code: movq 0x1958(%rsi), %rsi	 RIP: 48f3ad	 Bytes: 7
  %loadMem_48f3ad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3ad = call %struct.Memory* @routine_movq_0x1958__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3ad)
  store %struct.Memory* %call_48f3ad, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rsi), %rsi	 RIP: 48f3b4	 Bytes: 4
  %loadMem_48f3b4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3b4 = call %struct.Memory* @routine_movq_0x8__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3b4)
  store %struct.Memory* %call_48f3b4, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r9	 RIP: 48f3b8	 Bytes: 8
  %loadMem_48f3b8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3b8 = call %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3b8)
  store %struct.Memory* %call_48f3b8, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r9), %r8d	 RIP: 48f3c0	 Bytes: 7
  %loadMem_48f3c0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3c0 = call %struct.Memory* @routine_movl_0x90__r9____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3c0)
  store %struct.Memory* %call_48f3c0, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %r8d	 RIP: 48f3c7	 Bytes: 4
  %loadMem_48f3c7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3c7 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3c7)
  store %struct.Memory* %call_48f3c7, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %r9	 RIP: 48f3cb	 Bytes: 3
  %loadMem_48f3cb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3cb = call %struct.Memory* @routine_movslq__r8d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3cb)
  store %struct.Memory* %call_48f3cb, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r9,8), %rsi	 RIP: 48f3ce	 Bytes: 4
  %loadMem_48f3ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3ce = call %struct.Memory* @routine_movq___rsi__r9_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3ce)
  store %struct.Memory* %call_48f3ce, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r9	 RIP: 48f3d2	 Bytes: 8
  %loadMem_48f3d2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3d2 = call %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3d2)
  store %struct.Memory* %call_48f3d2, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r9), %r8d	 RIP: 48f3da	 Bytes: 7
  %loadMem_48f3da = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3da = call %struct.Memory* @routine_movl_0x94__r9____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3da)
  store %struct.Memory* %call_48f3da, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %r8d	 RIP: 48f3e1	 Bytes: 4
  %loadMem_48f3e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3e1 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3e1)
  store %struct.Memory* %call_48f3e1, %struct.Memory** %MEMORY

  ; Code: movslq %r8d, %r9	 RIP: 48f3e5	 Bytes: 3
  %loadMem_48f3e5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3e5 = call %struct.Memory* @routine_movslq__r8d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3e5)
  store %struct.Memory* %call_48f3e5, %struct.Memory** %MEMORY

  ; Code: movq %rdx, (%rsi,%r9,8)	 RIP: 48f3e8	 Bytes: 4
  %loadMem_48f3e8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3e8 = call %struct.Memory* @routine_movq__rdx____rsi__r9_8_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3e8)
  store %struct.Memory* %call_48f3e8, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rdx	 RIP: 48f3ec	 Bytes: 8
  %loadMem_48f3ec = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3ec = call %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3ec)
  store %struct.Memory* %call_48f3ec, %struct.Memory** %MEMORY

  ; Code: movq 0x118f8(%rdx), %rdx	 RIP: 48f3f4	 Bytes: 7
  %loadMem_48f3f4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3f4 = call %struct.Memory* @routine_movq_0x118f8__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3f4)
  store %struct.Memory* %call_48f3f4, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rsi	 RIP: 48f3fb	 Bytes: 4
  %loadMem_48f3fb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3fb = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3fb)
  store %struct.Memory* %call_48f3fb, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48f3ff	 Bytes: 4
  %loadMem_48f3ff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f3ff = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f3ff)
  store %struct.Memory* %call_48f3ff, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rsi	 RIP: 48f403	 Bytes: 4
  %loadMem_48f403 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f403 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f403)
  store %struct.Memory* %call_48f403, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48f407	 Bytes: 4
  %loadMem_48f407 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f407 = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f407)
  store %struct.Memory* %call_48f407, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rdx), %rdx	 RIP: 48f40b	 Bytes: 4
  %loadMem_48f40b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f40b = call %struct.Memory* @routine_movq_0x8__rdx____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f40b)
  store %struct.Memory* %call_48f40b, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rsi	 RIP: 48f40f	 Bytes: 4
  %loadMem_48f40f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f40f = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f40f)
  store %struct.Memory* %call_48f40f, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rsi	 RIP: 48f413	 Bytes: 4
  %loadMem_48f413 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f413 = call %struct.Memory* @routine_shlq__0x3___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f413)
  store %struct.Memory* %call_48f413, %struct.Memory** %MEMORY

  ; Code: movq %rcx, %r9	 RIP: 48f417	 Bytes: 3
  %loadMem_48f417 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f417 = call %struct.Memory* @routine_movq__rcx___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f417)
  store %struct.Memory* %call_48f417, %struct.Memory** %MEMORY

  ; Code: addq %rsi, %r9	 RIP: 48f41a	 Bytes: 3
  %loadMem_48f41a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f41a = call %struct.Memory* @routine_addq__rsi___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f41a)
  store %struct.Memory* %call_48f41a, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rsi	 RIP: 48f41d	 Bytes: 4
  %loadMem_48f41d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f41d = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f41d)
  store %struct.Memory* %call_48f41d, %struct.Memory** %MEMORY

  ; Code: movswq (%r9,%rsi,2), %rsi	 RIP: 48f421	 Bytes: 5
  %loadMem_48f421 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f421 = call %struct.Memory* @routine_movswq___r9__rsi_2____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f421)
  store %struct.Memory* %call_48f421, %struct.Memory** %MEMORY

  ; Code: movq (%rdx,%rsi,8), %rdx	 RIP: 48f426	 Bytes: 4
  %loadMem_48f426 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f426 = call %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f426)
  store %struct.Memory* %call_48f426, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rsi	 RIP: 48f42a	 Bytes: 4
  %loadMem_48f42a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f42a = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f42a)
  store %struct.Memory* %call_48f42a, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %r8d	 RIP: 48f42e	 Bytes: 4
  %loadMem_48f42e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f42e = call %struct.Memory* @routine_movl_MINUS0xc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f42e)
  store %struct.Memory* %call_48f42e, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xfc(%rbp)	 RIP: 48f432	 Bytes: 6
  %loadMem_48f432 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f432 = call %struct.Memory* @routine_movl__eax__MINUS0xfc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f432)
  store %struct.Memory* %call_48f432, %struct.Memory** %MEMORY

  ; Code: movl %r8d, %eax	 RIP: 48f438	 Bytes: 3
  %loadMem_48f438 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f438 = call %struct.Memory* @routine_movl__r8d___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f438)
  store %struct.Memory* %call_48f438, %struct.Memory** %MEMORY

  ; Code: movq %rdx, -0x108(%rbp)	 RIP: 48f43b	 Bytes: 7
  %loadMem_48f43b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f43b = call %struct.Memory* @routine_movq__rdx__MINUS0x108__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f43b)
  store %struct.Memory* %call_48f43b, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f442	 Bytes: 1
  %loadMem_48f442 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f442 = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f442)
  store %struct.Memory* %call_48f442, %struct.Memory** %MEMORY

  ; Code: movl -0xfc(%rbp), %r8d	 RIP: 48f443	 Bytes: 7
  %loadMem_48f443 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f443 = call %struct.Memory* @routine_movl_MINUS0xfc__rbp____r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f443)
  store %struct.Memory* %call_48f443, %struct.Memory** %MEMORY

  ; Code: idivl %r8d	 RIP: 48f44a	 Bytes: 3
  %loadMem_48f44a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f44a = call %struct.Memory* @routine_idivl__r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f44a)
  store %struct.Memory* %call_48f44a, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %r10d	 RIP: 48f44d	 Bytes: 4
  %loadMem_48f44d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f44d = call %struct.Memory* @routine_movl_MINUS0x10__rbp____r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f44d)
  store %struct.Memory* %call_48f44d, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10c(%rbp)	 RIP: 48f451	 Bytes: 6
  %loadMem_48f451 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f451 = call %struct.Memory* @routine_movl__eax__MINUS0x10c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f451)
  store %struct.Memory* %call_48f451, %struct.Memory** %MEMORY

  ; Code: movl %r10d, %eax	 RIP: 48f457	 Bytes: 3
  %loadMem_48f457 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f457 = call %struct.Memory* @routine_movl__r10d___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f457)
  store %struct.Memory* %call_48f457, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f45a	 Bytes: 1
  %loadMem_48f45a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f45a = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f45a)
  store %struct.Memory* %call_48f45a, %struct.Memory** %MEMORY

  ; Code: idivl %r8d	 RIP: 48f45b	 Bytes: 3
  %loadMem_48f45b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f45b = call %struct.Memory* @routine_idivl__r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f45b)
  store %struct.Memory* %call_48f45b, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48f45e	 Bytes: 3
  %loadMem_48f45e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f45e = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f45e)
  store %struct.Memory* %call_48f45e, %struct.Memory** %MEMORY

  ; Code: movl -0x10c(%rbp), %r10d	 RIP: 48f461	 Bytes: 7
  %loadMem_48f461 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f461 = call %struct.Memory* @routine_movl_MINUS0x10c__rbp____r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f461)
  store %struct.Memory* %call_48f461, %struct.Memory** %MEMORY

  ; Code: addl %eax, %r10d	 RIP: 48f468	 Bytes: 3
  %loadMem_48f468 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f468 = call %struct.Memory* @routine_addl__eax___r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f468)
  store %struct.Memory* %call_48f468, %struct.Memory** %MEMORY

  ; Code: movslq %r10d, %r9	 RIP: 48f46b	 Bytes: 3
  %loadMem_48f46b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f46b = call %struct.Memory* @routine_movslq__r10d___r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f46b)
  store %struct.Memory* %call_48f46b, %struct.Memory** %MEMORY

  ; Code: movslq 0x1d8(%rsi,%r9,4), %rsi	 RIP: 48f46e	 Bytes: 8
  %loadMem_48f46e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f46e = call %struct.Memory* @routine_movslq_0x1d8__rsi__r9_4____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f46e)
  store %struct.Memory* %call_48f46e, %struct.Memory** %MEMORY

  ; Code: movq -0x108(%rbp), %r9	 RIP: 48f476	 Bytes: 7
  %loadMem_48f476 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f476 = call %struct.Memory* @routine_movq_MINUS0x108__rbp____r9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f476)
  store %struct.Memory* %call_48f476, %struct.Memory** %MEMORY

  ; Code: movq (%r9,%rsi,8), %rsi	 RIP: 48f47d	 Bytes: 4
  %loadMem_48f47d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f47d = call %struct.Memory* @routine_movq___r9__rsi_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f47d)
  store %struct.Memory* %call_48f47d, %struct.Memory** %MEMORY

  ; Code: movw (%rsi), %di	 RIP: 48f481	 Bytes: 3
  %loadMem_48f481 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f481 = call %struct.Memory* @routine_movw___rsi____di(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f481)
  store %struct.Memory* %call_48f481, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rsi	 RIP: 48f484	 Bytes: 8
  %loadMem_48f484 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f484 = call %struct.Memory* @routine_movq_0x70fcf0___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f484)
  store %struct.Memory* %call_48f484, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rsi), %rsi	 RIP: 48f48c	 Bytes: 7
  %loadMem_48f48c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f48c = call %struct.Memory* @routine_movq_0x1968__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f48c)
  store %struct.Memory* %call_48f48c, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rsi), %rsi	 RIP: 48f493	 Bytes: 4
  %loadMem_48f493 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f493 = call %struct.Memory* @routine_movq_0x8__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f493)
  store %struct.Memory* %call_48f493, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48f497	 Bytes: 8
  %loadMem_48f497 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f497 = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f497)
  store %struct.Memory* %call_48f497, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%r11), %eax	 RIP: 48f49f	 Bytes: 7
  %loadMem_48f49f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f49f = call %struct.Memory* @routine_movl_0x90__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f49f)
  store %struct.Memory* %call_48f49f, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %eax	 RIP: 48f4a6	 Bytes: 3
  %loadMem_48f4a6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4a6 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4a6)
  store %struct.Memory* %call_48f4a6, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48f4a9	 Bytes: 3
  %loadMem_48f4a9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4a9 = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4a9)
  store %struct.Memory* %call_48f4a9, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r11,8), %rsi	 RIP: 48f4ac	 Bytes: 4
  %loadMem_48f4ac = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4ac = call %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4ac)
  store %struct.Memory* %call_48f4ac, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %r11	 RIP: 48f4b0	 Bytes: 8
  %loadMem_48f4b0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4b0 = call %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4b0)
  store %struct.Memory* %call_48f4b0, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%r11), %eax	 RIP: 48f4b8	 Bytes: 7
  %loadMem_48f4b8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4b8 = call %struct.Memory* @routine_movl_0x94__r11____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4b8)
  store %struct.Memory* %call_48f4b8, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %eax	 RIP: 48f4bf	 Bytes: 3
  %loadMem_48f4bf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4bf = call %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4bf)
  store %struct.Memory* %call_48f4bf, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %r11	 RIP: 48f4c2	 Bytes: 3
  %loadMem_48f4c2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4c2 = call %struct.Memory* @routine_movslq__eax___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4c2)
  store %struct.Memory* %call_48f4c2, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r11,8), %rsi	 RIP: 48f4c5	 Bytes: 4
  %loadMem_48f4c5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4c5 = call %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4c5)
  store %struct.Memory* %call_48f4c5, %struct.Memory** %MEMORY

  ; Code: movw %di, (%rsi)	 RIP: 48f4c9	 Bytes: 3
  %loadMem_48f4c9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4c9 = call %struct.Memory* @routine_movw__di____rsi_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4c9)
  store %struct.Memory* %call_48f4c9, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48f4cc	 Bytes: 8
  %loadMem_48f4cc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4cc = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4cc)
  store %struct.Memory* %call_48f4cc, %struct.Memory** %MEMORY

  ; Code: movq 0x118f8(%rsi), %rsi	 RIP: 48f4d4	 Bytes: 7
  %loadMem_48f4d4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4d4 = call %struct.Memory* @routine_movq_0x118f8__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4d4)
  store %struct.Memory* %call_48f4d4, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %r11	 RIP: 48f4db	 Bytes: 4
  %loadMem_48f4db = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4db = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4db)
  store %struct.Memory* %call_48f4db, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r11,8), %rsi	 RIP: 48f4df	 Bytes: 4
  %loadMem_48f4df = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4df = call %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4df)
  store %struct.Memory* %call_48f4df, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %r11	 RIP: 48f4e3	 Bytes: 4
  %loadMem_48f4e3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4e3 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4e3)
  store %struct.Memory* %call_48f4e3, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%r11,8), %rsi	 RIP: 48f4e7	 Bytes: 4
  %loadMem_48f4e7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4e7 = call %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4e7)
  store %struct.Memory* %call_48f4e7, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rsi), %rsi	 RIP: 48f4eb	 Bytes: 4
  %loadMem_48f4eb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4eb = call %struct.Memory* @routine_movq_0x8__rsi____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4eb)
  store %struct.Memory* %call_48f4eb, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %r11	 RIP: 48f4ef	 Bytes: 4
  %loadMem_48f4ef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4ef = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4ef)
  store %struct.Memory* %call_48f4ef, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %r11	 RIP: 48f4f3	 Bytes: 4
  %loadMem_48f4f3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4f3 = call %struct.Memory* @routine_shlq__0x3___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4f3)
  store %struct.Memory* %call_48f4f3, %struct.Memory** %MEMORY

  ; Code: addq %r11, %rcx	 RIP: 48f4f7	 Bytes: 3
  %loadMem_48f4f7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4f7 = call %struct.Memory* @routine_addq__r11___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4f7)
  store %struct.Memory* %call_48f4f7, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %r11	 RIP: 48f4fa	 Bytes: 4
  %loadMem_48f4fa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4fa = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4fa)
  store %struct.Memory* %call_48f4fa, %struct.Memory** %MEMORY

  ; Code: movswq (%rcx,%r11,2), %rcx	 RIP: 48f4fe	 Bytes: 5
  %loadMem_48f4fe = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f4fe = call %struct.Memory* @routine_movswq___rcx__r11_2____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f4fe)
  store %struct.Memory* %call_48f4fe, %struct.Memory** %MEMORY

  ; Code: movq (%rsi,%rcx,8), %rcx	 RIP: 48f503	 Bytes: 4
  %loadMem_48f503 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f503 = call %struct.Memory* @routine_movq___rsi__rcx_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f503)
  store %struct.Memory* %call_48f503, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rsi	 RIP: 48f507	 Bytes: 4
  %loadMem_48f507 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f507 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f507)
  store %struct.Memory* %call_48f507, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f50b	 Bytes: 3
  %loadMem_48f50b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f50b = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f50b)
  store %struct.Memory* %call_48f50b, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f50e	 Bytes: 1
  %loadMem_48f50e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f50e = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f50e)
  store %struct.Memory* %call_48f50e, %struct.Memory** %MEMORY

  ; Code: idivl %r8d	 RIP: 48f50f	 Bytes: 3
  %loadMem_48f50f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f50f = call %struct.Memory* @routine_idivl__r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f50f)
  store %struct.Memory* %call_48f50f, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %r10d	 RIP: 48f512	 Bytes: 4
  %loadMem_48f512 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f512 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f512)
  store %struct.Memory* %call_48f512, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x110(%rbp)	 RIP: 48f516	 Bytes: 6
  %loadMem_48f516 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f516 = call %struct.Memory* @routine_movl__eax__MINUS0x110__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f516)
  store %struct.Memory* %call_48f516, %struct.Memory** %MEMORY

  ; Code: movl %r10d, %eax	 RIP: 48f51c	 Bytes: 3
  %loadMem_48f51c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f51c = call %struct.Memory* @routine_movl__r10d___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f51c)
  store %struct.Memory* %call_48f51c, %struct.Memory** %MEMORY

  ; Code: cltd	 RIP: 48f51f	 Bytes: 1
  %loadMem_48f51f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f51f = call %struct.Memory* @routine_cltd(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f51f)
  store %struct.Memory* %call_48f51f, %struct.Memory** %MEMORY

  ; Code: idivl %r8d	 RIP: 48f520	 Bytes: 3
  %loadMem_48f520 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f520 = call %struct.Memory* @routine_idivl__r8d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f520)
  store %struct.Memory* %call_48f520, %struct.Memory** %MEMORY

  ; Code: shll $0x1, %eax	 RIP: 48f523	 Bytes: 3
  %loadMem_48f523 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f523 = call %struct.Memory* @routine_shll__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f523)
  store %struct.Memory* %call_48f523, %struct.Memory** %MEMORY

  ; Code: movl -0x110(%rbp), %r10d	 RIP: 48f526	 Bytes: 7
  %loadMem_48f526 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f526 = call %struct.Memory* @routine_movl_MINUS0x110__rbp____r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f526)
  store %struct.Memory* %call_48f526, %struct.Memory** %MEMORY

  ; Code: addl %eax, %r10d	 RIP: 48f52d	 Bytes: 3
  %loadMem_48f52d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f52d = call %struct.Memory* @routine_addl__eax___r10d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f52d)
  store %struct.Memory* %call_48f52d, %struct.Memory** %MEMORY

  ; Code: movslq %r10d, %r11	 RIP: 48f530	 Bytes: 3
  %loadMem_48f530 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f530 = call %struct.Memory* @routine_movslq__r10d___r11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f530)
  store %struct.Memory* %call_48f530, %struct.Memory** %MEMORY

  ; Code: movslq 0x1d8(%rsi,%r11,4), %rsi	 RIP: 48f533	 Bytes: 8
  %loadMem_48f533 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f533 = call %struct.Memory* @routine_movslq_0x1d8__rsi__r11_4____rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f533)
  store %struct.Memory* %call_48f533, %struct.Memory** %MEMORY

  ; Code: movq (%rcx,%rsi,8), %rcx	 RIP: 48f53b	 Bytes: 4
  %loadMem_48f53b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f53b = call %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f53b)
  store %struct.Memory* %call_48f53b, %struct.Memory** %MEMORY

  ; Code: movw 0x2(%rcx), %di	 RIP: 48f53f	 Bytes: 4
  %loadMem_48f53f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f53f = call %struct.Memory* @routine_movw_0x2__rcx____di(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f53f)
  store %struct.Memory* %call_48f53f, %struct.Memory** %MEMORY

  ; Code: movq 0x70fcf0, %rcx	 RIP: 48f543	 Bytes: 8
  %loadMem_48f543 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f543 = call %struct.Memory* @routine_movq_0x70fcf0___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f543)
  store %struct.Memory* %call_48f543, %struct.Memory** %MEMORY

  ; Code: movq 0x1968(%rcx), %rcx	 RIP: 48f54b	 Bytes: 7
  %loadMem_48f54b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f54b = call %struct.Memory* @routine_movq_0x1968__rcx____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f54b)
  store %struct.Memory* %call_48f54b, %struct.Memory** %MEMORY

  ; Code: movq 0x8(%rcx), %rcx	 RIP: 48f552	 Bytes: 4
  %loadMem_48f552 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f552 = call %struct.Memory* @routine_movq_0x8__rcx____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f552)
  store %struct.Memory* %call_48f552, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48f556	 Bytes: 8
  %loadMem_48f556 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f556 = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f556)
  store %struct.Memory* %call_48f556, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rsi), %eax	 RIP: 48f55e	 Bytes: 6
  %loadMem_48f55e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f55e = call %struct.Memory* @routine_movl_0x90__rsi____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f55e)
  store %struct.Memory* %call_48f55e, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %eax	 RIP: 48f564	 Bytes: 3
  %loadMem_48f564 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f564 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f564)
  store %struct.Memory* %call_48f564, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %rsi	 RIP: 48f567	 Bytes: 3
  %loadMem_48f567 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f567 = call %struct.Memory* @routine_movslq__eax___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f567)
  store %struct.Memory* %call_48f567, %struct.Memory** %MEMORY

  ; Code: movq (%rcx,%rsi,8), %rcx	 RIP: 48f56a	 Bytes: 4
  %loadMem_48f56a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f56a = call %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f56a)
  store %struct.Memory* %call_48f56a, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rsi	 RIP: 48f56e	 Bytes: 8
  %loadMem_48f56e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f56e = call %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f56e)
  store %struct.Memory* %call_48f56e, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rsi), %eax	 RIP: 48f576	 Bytes: 6
  %loadMem_48f576 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f576 = call %struct.Memory* @routine_movl_0x94__rsi____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f576)
  store %struct.Memory* %call_48f576, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %eax	 RIP: 48f57c	 Bytes: 3
  %loadMem_48f57c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f57c = call %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f57c)
  store %struct.Memory* %call_48f57c, %struct.Memory** %MEMORY

  ; Code: movslq %eax, %rsi	 RIP: 48f57f	 Bytes: 3
  %loadMem_48f57f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f57f = call %struct.Memory* @routine_movslq__eax___rsi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f57f)
  store %struct.Memory* %call_48f57f, %struct.Memory** %MEMORY

  ; Code: movq (%rcx,%rsi,8), %rcx	 RIP: 48f582	 Bytes: 4
  %loadMem_48f582 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f582 = call %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f582)
  store %struct.Memory* %call_48f582, %struct.Memory** %MEMORY

  ; Code: movw %di, 0x2(%rcx)	 RIP: 48f586	 Bytes: 4
  %loadMem_48f586 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f586 = call %struct.Memory* @routine_movw__di__0x2__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f586)
  store %struct.Memory* %call_48f586, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f58a	 Bytes: 8
  %loadMem_48f58a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f58a = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f58a)
  store %struct.Memory* %call_48f58a, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rcx)	 RIP: 48f592	 Bytes: 7
  %loadMem_48f592 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f592 = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f592)
  store %struct.Memory* %call_48f592, %struct.Memory** %MEMORY

  ; Code: je .L_48f5e1	 RIP: 48f599	 Bytes: 6
  %loadMem_48f599 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f599 = call %struct.Memory* @routine_je_.L_48f5e1(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f599, i8* %BRANCH_TAKEN, i64 72, i64 6, i64 6)
  store %struct.Memory* %call_48f599, %struct.Memory** %MEMORY

  %loadBr_48f599 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f599 = icmp eq i8 %loadBr_48f599, 1
  br i1 %cmpBr_48f599, label %block_.L_48f5e1, label %block_48f59f

block_48f59f:
  ; Code: movq $0x7236a0, %rax	 RIP: 48f59f	 Bytes: 10
  %loadMem_48f59f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f59f = call %struct.Memory* @routine_movq__0x7236a0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f59f)
  store %struct.Memory* %call_48f59f, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48f5a9	 Bytes: 4
  %loadMem_48f5a9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5a9 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5a9)
  store %struct.Memory* %call_48f5a9, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48f5ad	 Bytes: 4
  %loadMem_48f5ad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5ad = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5ad)
  store %struct.Memory* %call_48f5ad, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48f5b1	 Bytes: 3
  %loadMem_48f5b1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5b1 = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5b1)
  store %struct.Memory* %call_48f5b1, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48f5b4	 Bytes: 4
  %loadMem_48f5b4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5b4 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5b4)
  store %struct.Memory* %call_48f5b4, %struct.Memory** %MEMORY

  ; Code: movw (%rax,%rcx,2), %dx	 RIP: 48f5b8	 Bytes: 4
  %loadMem_48f5b8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5b8 = call %struct.Memory* @routine_movw___rax__rcx_2____dx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5b8)
  store %struct.Memory* %call_48f5b8, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48f5bc	 Bytes: 8
  %loadMem_48f5bc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5bc = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5bc)
  store %struct.Memory* %call_48f5bc, %struct.Memory** %MEMORY

  ; Code: addq $0xcc0, %rax	 RIP: 48f5c4	 Bytes: 6
  %loadMem_48f5c4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5c4 = call %struct.Memory* @routine_addq__0xcc0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5c4)
  store %struct.Memory* %call_48f5c4, %struct.Memory** %MEMORY

  ; Code: addq $0x20, %rax	 RIP: 48f5ca	 Bytes: 4
  %loadMem_48f5ca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5ca = call %struct.Memory* @routine_addq__0x20___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5ca)
  store %struct.Memory* %call_48f5ca, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48f5ce	 Bytes: 4
  %loadMem_48f5ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5ce = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5ce)
  store %struct.Memory* %call_48f5ce, %struct.Memory** %MEMORY

  ; Code: shlq $0x3, %rcx	 RIP: 48f5d2	 Bytes: 4
  %loadMem_48f5d2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5d2 = call %struct.Memory* @routine_shlq__0x3___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5d2)
  store %struct.Memory* %call_48f5d2, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48f5d6	 Bytes: 3
  %loadMem_48f5d6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5d6 = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5d6)
  store %struct.Memory* %call_48f5d6, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48f5d9	 Bytes: 4
  %loadMem_48f5d9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5d9 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5d9)
  store %struct.Memory* %call_48f5d9, %struct.Memory** %MEMORY

  ; Code: movw %dx, (%rax,%rcx,2)	 RIP: 48f5dd	 Bytes: 4
  %loadMem_48f5dd = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5dd = call %struct.Memory* @routine_movw__dx____rax__rcx_2_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5dd)
  store %struct.Memory* %call_48f5dd, %struct.Memory** %MEMORY

  ; Code: .L_48f5e1:	 RIP: 48f5e1	 Bytes: 0
  br label %block_.L_48f5e1
block_.L_48f5e1:

  ; Code: jmpq .L_48f5e6	 RIP: 48f5e1	 Bytes: 5
  %loadMem_48f5e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5e1 = call %struct.Memory* @routine_jmpq_.L_48f5e6(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5e1, i64 5, i64 5)
  store %struct.Memory* %call_48f5e1, %struct.Memory** %MEMORY

  br label %block_.L_48f5e6

  ; Code: .L_48f5e6:	 RIP: 48f5e6	 Bytes: 0
block_.L_48f5e6:

  ; Code: jmpq .L_48f5eb	 RIP: 48f5e6	 Bytes: 5
  %loadMem_48f5e6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5e6 = call %struct.Memory* @routine_jmpq_.L_48f5eb(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5e6, i64 5, i64 5)
  store %struct.Memory* %call_48f5e6, %struct.Memory** %MEMORY

  br label %block_.L_48f5eb

  ; Code: .L_48f5eb:	 RIP: 48f5eb	 Bytes: 0
block_.L_48f5eb:

  ; Code: jmpq .L_48f5f0	 RIP: 48f5eb	 Bytes: 5
  %loadMem_48f5eb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5eb = call %struct.Memory* @routine_jmpq_.L_48f5f0(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5eb, i64 5, i64 5)
  store %struct.Memory* %call_48f5eb, %struct.Memory** %MEMORY

  br label %block_.L_48f5f0

  ; Code: .L_48f5f0:	 RIP: 48f5f0	 Bytes: 0
block_.L_48f5f0:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f5f0	 Bytes: 3
  %loadMem_48f5f0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5f0 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5f0)
  store %struct.Memory* %call_48f5f0, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f5f3	 Bytes: 3
  %loadMem_48f5f3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5f3 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5f3)
  store %struct.Memory* %call_48f5f3, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48f5f6	 Bytes: 3
  %loadMem_48f5f6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5f6 = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5f6)
  store %struct.Memory* %call_48f5f6, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48edfa	 RIP: 48f5f9	 Bytes: 5
  %loadMem_48f5f9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5f9 = call %struct.Memory* @routine_jmpq_.L_48edfa(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5f9, i64 -2047, i64 5)
  store %struct.Memory* %call_48f5f9, %struct.Memory** %MEMORY

  br label %block_.L_48edfa

  ; Code: .L_48f5fe:	 RIP: 48f5fe	 Bytes: 0
block_.L_48f5fe:

  ; Code: jmpq .L_48f603	 RIP: 48f5fe	 Bytes: 5
  %loadMem_48f5fe = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f5fe = call %struct.Memory* @routine_jmpq_.L_48f603(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f5fe, i64 5, i64 5)
  store %struct.Memory* %call_48f5fe, %struct.Memory** %MEMORY

  br label %block_.L_48f603

  ; Code: .L_48f603:	 RIP: 48f603	 Bytes: 0
block_.L_48f603:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48f603	 Bytes: 3
  %loadMem_48f603 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f603 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f603)
  store %struct.Memory* %call_48f603, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f606	 Bytes: 3
  %loadMem_48f606 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f606 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f606)
  store %struct.Memory* %call_48f606, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48f609	 Bytes: 3
  %loadMem_48f609 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f609 = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f609)
  store %struct.Memory* %call_48f609, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48ede9	 RIP: 48f60c	 Bytes: 5
  %loadMem_48f60c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f60c = call %struct.Memory* @routine_jmpq_.L_48ede9(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f60c, i64 -2083, i64 5)
  store %struct.Memory* %call_48f60c, %struct.Memory** %MEMORY

  br label %block_.L_48ede9

  ; Code: .L_48f611:	 RIP: 48f611	 Bytes: 0
block_.L_48f611:

  ; Code: jmpq .L_48f616	 RIP: 48f611	 Bytes: 5
  %loadMem_48f611 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f611 = call %struct.Memory* @routine_jmpq_.L_48f616(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f611, i64 5, i64 5)
  store %struct.Memory* %call_48f611, %struct.Memory** %MEMORY

  br label %block_.L_48f616

  ; Code: .L_48f616:	 RIP: 48f616	 Bytes: 0
block_.L_48f616:

  ; Code: movl 0x710a58, %eax	 RIP: 48f616	 Bytes: 7
  %loadMem_48f616 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f616 = call %struct.Memory* @routine_movl_0x710a58___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f616)
  store %struct.Memory* %call_48f616, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48f61d	 Bytes: 4
  %loadMem_48f61d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f61d = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f61d)
  store %struct.Memory* %call_48f61d, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0x20c(%rcx)	 RIP: 48f621	 Bytes: 6
  %loadMem_48f621 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f621 = call %struct.Memory* @routine_movl__eax__0x20c__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f621)
  store %struct.Memory* %call_48f621, %struct.Memory** %MEMORY

  ; Code: movl 0x70fd50, %eax	 RIP: 48f627	 Bytes: 7
  %loadMem_48f627 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f627 = call %struct.Memory* @routine_movl_0x70fd50___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f627)
  store %struct.Memory* %call_48f627, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f62e	 Bytes: 8
  %loadMem_48f62e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f62e = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f62e)
  store %struct.Memory* %call_48f62e, %struct.Memory** %MEMORY

  ; Code: movl %eax, 0x11abc(%rcx)	 RIP: 48f636	 Bytes: 6
  %loadMem_48f636 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f636 = call %struct.Memory* @routine_movl__eax__0x11abc__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f636)
  store %struct.Memory* %call_48f636, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rcx	 RIP: 48f63c	 Bytes: 4
  %loadMem_48f63c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f63c = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f63c)
  store %struct.Memory* %call_48f63c, %struct.Memory** %MEMORY

  ; Code: cmpl $0xd, 0x48(%rcx)	 RIP: 48f640	 Bytes: 4
  %loadMem_48f640 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f640 = call %struct.Memory* @routine_cmpl__0xd__0x48__rcx_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f640)
  store %struct.Memory* %call_48f640, %struct.Memory** %MEMORY

  ; Code: jne .L_48f736	 RIP: 48f644	 Bytes: 6
  %loadMem_48f644 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f644 = call %struct.Memory* @routine_jne_.L_48f736(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f644, i8* %BRANCH_TAKEN, i64 242, i64 6, i64 6)
  store %struct.Memory* %call_48f644, %struct.Memory** %MEMORY

  %loadBr_48f644 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f644 = icmp eq i8 %loadBr_48f644, 1
  br i1 %cmpBr_48f644, label %block_.L_48f736, label %block_48f64a

block_48f64a:
  ; Code: movl $0x0, -0x14(%rbp)	 RIP: 48f64a	 Bytes: 7
  %loadMem_48f64a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f64a = call %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f64a)
  store %struct.Memory* %call_48f64a, %struct.Memory** %MEMORY

  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48f651	 Bytes: 7
  %loadMem_48f651 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f651 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f651)
  store %struct.Memory* %call_48f651, %struct.Memory** %MEMORY

  ; Code: .L_48f658:	 RIP: 48f658	 Bytes: 0
  br label %block_.L_48f658
block_.L_48f658:

  ; Code: cmpl $0x4, -0xc(%rbp)	 RIP: 48f658	 Bytes: 4
  %loadMem_48f658 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f658 = call %struct.Memory* @routine_cmpl__0x4__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f658)
  store %struct.Memory* %call_48f658, %struct.Memory** %MEMORY

  ; Code: jge .L_48f731	 RIP: 48f65c	 Bytes: 6
  %loadMem_48f65c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f65c = call %struct.Memory* @routine_jge_.L_48f731(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f65c, i8* %BRANCH_TAKEN, i64 213, i64 6, i64 6)
  store %struct.Memory* %call_48f65c, %struct.Memory** %MEMORY

  %loadBr_48f65c = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f65c = icmp eq i8 %loadBr_48f65c, 1
  br i1 %cmpBr_48f65c, label %block_.L_48f731, label %block_48f662

block_48f662:
  ; Code: movl $0x0, -0x10(%rbp)	 RIP: 48f662	 Bytes: 7
  %loadMem_48f662 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f662 = call %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f662)
  store %struct.Memory* %call_48f662, %struct.Memory** %MEMORY

  ; Code: .L_48f669:	 RIP: 48f669	 Bytes: 0
  br label %block_.L_48f669
block_.L_48f669:

  ; Code: cmpl $0x4, -0x10(%rbp)	 RIP: 48f669	 Bytes: 4
  %loadMem_48f669 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f669 = call %struct.Memory* @routine_cmpl__0x4__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f669)
  store %struct.Memory* %call_48f669, %struct.Memory** %MEMORY

  ; Code: jge .L_48f71e	 RIP: 48f66d	 Bytes: 6
  %loadMem_48f66d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f66d = call %struct.Memory* @routine_jge_.L_48f71e(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f66d, i8* %BRANCH_TAKEN, i64 177, i64 6, i64 6)
  store %struct.Memory* %call_48f66d, %struct.Memory** %MEMORY

  %loadBr_48f66d = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f66d = icmp eq i8 %loadBr_48f66d, 1
  br i1 %cmpBr_48f66d, label %block_.L_48f71e, label %block_48f673

block_48f673:
  ; Code: movq 0x6cb900, %rax	 RIP: 48f673	 Bytes: 8
  %loadMem_48f673 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f673 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f673)
  store %struct.Memory* %call_48f673, %struct.Memory** %MEMORY

  ; Code: movq 0x70(%rax), %rax	 RIP: 48f67b	 Bytes: 4
  %loadMem_48f67b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f67b = call %struct.Memory* @routine_movq_0x70__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f67b)
  store %struct.Memory* %call_48f67b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f67f	 Bytes: 8
  %loadMem_48f67f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f67f = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f67f)
  store %struct.Memory* %call_48f67f, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48f687	 Bytes: 6
  %loadMem_48f687 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f687 = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f687)
  store %struct.Memory* %call_48f687, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %edx	 RIP: 48f68d	 Bytes: 3
  %loadMem_48f68d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f68d = call %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f68d)
  store %struct.Memory* %call_48f68d, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48f690	 Bytes: 3
  %loadMem_48f690 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f690 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f690)
  store %struct.Memory* %call_48f690, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48f693	 Bytes: 4
  %loadMem_48f693 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f693 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f693)
  store %struct.Memory* %call_48f693, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f697	 Bytes: 8
  %loadMem_48f697 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f697 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f697)
  store %struct.Memory* %call_48f697, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48f69f	 Bytes: 6
  %loadMem_48f69f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f69f = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f69f)
  store %struct.Memory* %call_48f69f, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %edx	 RIP: 48f6a5	 Bytes: 3
  %loadMem_48f6a5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6a5 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6a5)
  store %struct.Memory* %call_48f6a5, %struct.Memory** %MEMORY

  ; Code: movslq %edx, %rcx	 RIP: 48f6a8	 Bytes: 3
  %loadMem_48f6a8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6a8 = call %struct.Memory* @routine_movslq__edx___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6a8)
  store %struct.Memory* %call_48f6a8, %struct.Memory** %MEMORY

  ; Code: movl (%rax,%rcx,4), %edx	 RIP: 48f6ab	 Bytes: 3
  %loadMem_48f6ab = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6ab = call %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6ab)
  store %struct.Memory* %call_48f6ab, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48f6ae	 Bytes: 8
  %loadMem_48f6ae = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6ae = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6ae)
  store %struct.Memory* %call_48f6ae, %struct.Memory** %MEMORY

  ; Code: movq 0x68(%rax), %rax	 RIP: 48f6b6	 Bytes: 4
  %loadMem_48f6b6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6b6 = call %struct.Memory* @routine_movq_0x68__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6b6)
  store %struct.Memory* %call_48f6b6, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f6ba	 Bytes: 8
  %loadMem_48f6ba = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6ba = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6ba)
  store %struct.Memory* %call_48f6ba, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %esi	 RIP: 48f6c2	 Bytes: 6
  %loadMem_48f6c2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6c2 = call %struct.Memory* @routine_movl_0x90__rcx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6c2)
  store %struct.Memory* %call_48f6c2, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %esi	 RIP: 48f6c8	 Bytes: 3
  %loadMem_48f6c8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6c8 = call %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6c8)
  store %struct.Memory* %call_48f6c8, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rcx	 RIP: 48f6cb	 Bytes: 3
  %loadMem_48f6cb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6cb = call %struct.Memory* @routine_movslq__esi___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6cb)
  store %struct.Memory* %call_48f6cb, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48f6ce	 Bytes: 4
  %loadMem_48f6ce = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6ce = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6ce)
  store %struct.Memory* %call_48f6ce, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f6d2	 Bytes: 8
  %loadMem_48f6d2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6d2 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6d2)
  store %struct.Memory* %call_48f6d2, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %esi	 RIP: 48f6da	 Bytes: 6
  %loadMem_48f6da = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6da = call %struct.Memory* @routine_movl_0x94__rcx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6da)
  store %struct.Memory* %call_48f6da, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %esi	 RIP: 48f6e0	 Bytes: 3
  %loadMem_48f6e0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6e0 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6e0)
  store %struct.Memory* %call_48f6e0, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rcx	 RIP: 48f6e3	 Bytes: 3
  %loadMem_48f6e3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6e3 = call %struct.Memory* @routine_movslq__esi___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6e3)
  store %struct.Memory* %call_48f6e3, %struct.Memory** %MEMORY

  ; Code: movl %edx, (%rax,%rcx,4)	 RIP: 48f6e6	 Bytes: 3
  %loadMem_48f6e6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6e6 = call %struct.Memory* @routine_movl__edx____rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6e6)
  store %struct.Memory* %call_48f6e6, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48f6e9	 Bytes: 4
  %loadMem_48f6e9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6e9 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6e9)
  store %struct.Memory* %call_48f6e9, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48f6ed	 Bytes: 4
  %loadMem_48f6ed = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6ed = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6ed)
  store %struct.Memory* %call_48f6ed, %struct.Memory** %MEMORY

  ; Code: movl 0x18c(%rax,%rcx,4), %edx	 RIP: 48f6f1	 Bytes: 7
  %loadMem_48f6f1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6f1 = call %struct.Memory* @routine_movl_0x18c__rax__rcx_4____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6f1)
  store %struct.Memory* %call_48f6f1, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48f6f8	 Bytes: 4
  %loadMem_48f6f8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6f8 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6f8)
  store %struct.Memory* %call_48f6f8, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48f6fc	 Bytes: 4
  %loadMem_48f6fc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f6fc = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f6fc)
  store %struct.Memory* %call_48f6fc, %struct.Memory** %MEMORY

  ; Code: movl %edx, 0x14c(%rax,%rcx,4)	 RIP: 48f700	 Bytes: 7
  %loadMem_48f700 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f700 = call %struct.Memory* @routine_movl__edx__0x14c__rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f700)
  store %struct.Memory* %call_48f700, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48f707	 Bytes: 3
  %loadMem_48f707 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f707 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f707)
  store %struct.Memory* %call_48f707, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f70a	 Bytes: 3
  %loadMem_48f70a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f70a = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f70a)
  store %struct.Memory* %call_48f70a, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48f70d	 Bytes: 3
  %loadMem_48f70d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f70d = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f70d)
  store %struct.Memory* %call_48f70d, %struct.Memory** %MEMORY

  ; Code: movl -0x14(%rbp), %eax	 RIP: 48f710	 Bytes: 3
  %loadMem_48f710 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f710 = call %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f710)
  store %struct.Memory* %call_48f710, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f713	 Bytes: 3
  %loadMem_48f713 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f713 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f713)
  store %struct.Memory* %call_48f713, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x14(%rbp)	 RIP: 48f716	 Bytes: 3
  %loadMem_48f716 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f716 = call %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f716)
  store %struct.Memory* %call_48f716, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f669	 RIP: 48f719	 Bytes: 5
  %loadMem_48f719 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f719 = call %struct.Memory* @routine_jmpq_.L_48f669(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f719, i64 -176, i64 5)
  store %struct.Memory* %call_48f719, %struct.Memory** %MEMORY

  br label %block_.L_48f669

  ; Code: .L_48f71e:	 RIP: 48f71e	 Bytes: 0
block_.L_48f71e:

  ; Code: jmpq .L_48f723	 RIP: 48f71e	 Bytes: 5
  %loadMem_48f71e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f71e = call %struct.Memory* @routine_jmpq_.L_48f723(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f71e, i64 5, i64 5)
  store %struct.Memory* %call_48f71e, %struct.Memory** %MEMORY

  br label %block_.L_48f723

  ; Code: .L_48f723:	 RIP: 48f723	 Bytes: 0
block_.L_48f723:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f723	 Bytes: 3
  %loadMem_48f723 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f723 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f723)
  store %struct.Memory* %call_48f723, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f726	 Bytes: 3
  %loadMem_48f726 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f726 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f726)
  store %struct.Memory* %call_48f726, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48f729	 Bytes: 3
  %loadMem_48f729 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f729 = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f729)
  store %struct.Memory* %call_48f729, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f658	 RIP: 48f72c	 Bytes: 5
  %loadMem_48f72c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f72c = call %struct.Memory* @routine_jmpq_.L_48f658(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f72c, i64 -212, i64 5)
  store %struct.Memory* %call_48f72c, %struct.Memory** %MEMORY

  br label %block_.L_48f658

  ; Code: .L_48f731:	 RIP: 48f731	 Bytes: 0
block_.L_48f731:

  ; Code: jmpq .L_48f8e0	 RIP: 48f731	 Bytes: 5
  %loadMem_48f731 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f731 = call %struct.Memory* @routine_jmpq_.L_48f8e0(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f731, i64 431, i64 5)
  store %struct.Memory* %call_48f731, %struct.Memory** %MEMORY

  br label %block_.L_48f8e0

  ; Code: .L_48f736:	 RIP: 48f736	 Bytes: 0
block_.L_48f736:

  ; Code: cmpl $0x9, -0x3c(%rbp)	 RIP: 48f736	 Bytes: 4
  %loadMem_48f736 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f736 = call %struct.Memory* @routine_cmpl__0x9__MINUS0x3c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f736)
  store %struct.Memory* %call_48f736, %struct.Memory** %MEMORY

  ; Code: je .L_48f804	 RIP: 48f73a	 Bytes: 6
  %loadMem_48f73a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f73a = call %struct.Memory* @routine_je_.L_48f804(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f73a, i8* %BRANCH_TAKEN, i64 202, i64 6, i64 6)
  store %struct.Memory* %call_48f73a, %struct.Memory** %MEMORY

  %loadBr_48f73a = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f73a = icmp eq i8 %loadBr_48f73a, 1
  br i1 %cmpBr_48f73a, label %block_.L_48f804, label %block_48f740

block_48f740:
  ; Code: cmpl $0xd, -0x3c(%rbp)	 RIP: 48f740	 Bytes: 4
  %loadMem_48f740 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f740 = call %struct.Memory* @routine_cmpl__0xd__MINUS0x3c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f740)
  store %struct.Memory* %call_48f740, %struct.Memory** %MEMORY

  ; Code: je .L_48f804	 RIP: 48f744	 Bytes: 6
  %loadMem_48f744 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f744 = call %struct.Memory* @routine_je_.L_48f804(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f744, i8* %BRANCH_TAKEN, i64 192, i64 6, i64 6)
  store %struct.Memory* %call_48f744, %struct.Memory** %MEMORY

  %loadBr_48f744 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f744 = icmp eq i8 %loadBr_48f744, 1
  br i1 %cmpBr_48f744, label %block_.L_48f804, label %block_48f74a

block_48f74a:
  ; Code: movl $0x0, -0x14(%rbp)	 RIP: 48f74a	 Bytes: 7
  %loadMem_48f74a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f74a = call %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f74a)
  store %struct.Memory* %call_48f74a, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48f751	 Bytes: 8
  %loadMem_48f751 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f751 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f751)
  store %struct.Memory* %call_48f751, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rax), %ecx	 RIP: 48f759	 Bytes: 6
  %loadMem_48f759 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f759 = call %struct.Memory* @routine_movl_0x94__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f759)
  store %struct.Memory* %call_48f759, %struct.Memory** %MEMORY

  ; Code: movl %ecx, -0x10(%rbp)	 RIP: 48f75f	 Bytes: 3
  %loadMem_48f75f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f75f = call %struct.Memory* @routine_movl__ecx__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f75f)
  store %struct.Memory* %call_48f75f, %struct.Memory** %MEMORY

  ; Code: .L_48f762:	 RIP: 48f762	 Bytes: 0
  br label %block_.L_48f762
block_.L_48f762:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48f762	 Bytes: 3
  %loadMem_48f762 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f762 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f762)
  store %struct.Memory* %call_48f762, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f765	 Bytes: 8
  %loadMem_48f765 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f765 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f765)
  store %struct.Memory* %call_48f765, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48f76d	 Bytes: 6
  %loadMem_48f76d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f76d = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f76d)
  store %struct.Memory* %call_48f76d, %struct.Memory** %MEMORY

  ; Code: addl $0x4, %edx	 RIP: 48f773	 Bytes: 3
  %loadMem_48f773 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f773 = call %struct.Memory* @routine_addl__0x4___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f773)
  store %struct.Memory* %call_48f773, %struct.Memory** %MEMORY

  ; Code: cmpl %edx, %eax	 RIP: 48f776	 Bytes: 2
  %loadMem_48f776 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f776 = call %struct.Memory* @routine_cmpl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f776)
  store %struct.Memory* %call_48f776, %struct.Memory** %MEMORY

  ; Code: jge .L_48f7ff	 RIP: 48f778	 Bytes: 6
  %loadMem_48f778 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f778 = call %struct.Memory* @routine_jge_.L_48f7ff(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f778, i8* %BRANCH_TAKEN, i64 135, i64 6, i64 6)
  store %struct.Memory* %call_48f778, %struct.Memory** %MEMORY

  %loadBr_48f778 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f778 = icmp eq i8 %loadBr_48f778, 1
  br i1 %cmpBr_48f778, label %block_.L_48f7ff, label %block_48f77e

block_48f77e:
  ; Code: movq 0x6cb900, %rax	 RIP: 48f77e	 Bytes: 8
  %loadMem_48f77e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f77e = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f77e)
  store %struct.Memory* %call_48f77e, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rax), %ecx	 RIP: 48f786	 Bytes: 6
  %loadMem_48f786 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f786 = call %struct.Memory* @routine_movl_0x90__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f786)
  store %struct.Memory* %call_48f786, %struct.Memory** %MEMORY

  ; Code: movl %ecx, -0xc(%rbp)	 RIP: 48f78c	 Bytes: 3
  %loadMem_48f78c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f78c = call %struct.Memory* @routine_movl__ecx__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f78c)
  store %struct.Memory* %call_48f78c, %struct.Memory** %MEMORY

  ; Code: .L_48f78f:	 RIP: 48f78f	 Bytes: 0
  br label %block_.L_48f78f
block_.L_48f78f:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f78f	 Bytes: 3
  %loadMem_48f78f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f78f = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f78f)
  store %struct.Memory* %call_48f78f, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f792	 Bytes: 8
  %loadMem_48f792 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f792 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f792)
  store %struct.Memory* %call_48f792, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48f79a	 Bytes: 6
  %loadMem_48f79a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f79a = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f79a)
  store %struct.Memory* %call_48f79a, %struct.Memory** %MEMORY

  ; Code: addl $0x4, %edx	 RIP: 48f7a0	 Bytes: 3
  %loadMem_48f7a0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7a0 = call %struct.Memory* @routine_addl__0x4___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7a0)
  store %struct.Memory* %call_48f7a0, %struct.Memory** %MEMORY

  ; Code: cmpl %edx, %eax	 RIP: 48f7a3	 Bytes: 2
  %loadMem_48f7a3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7a3 = call %struct.Memory* @routine_cmpl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7a3)
  store %struct.Memory* %call_48f7a3, %struct.Memory** %MEMORY

  ; Code: jge .L_48f7ec	 RIP: 48f7a5	 Bytes: 6
  %loadMem_48f7a5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7a5 = call %struct.Memory* @routine_jge_.L_48f7ec(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7a5, i8* %BRANCH_TAKEN, i64 71, i64 6, i64 6)
  store %struct.Memory* %call_48f7a5, %struct.Memory** %MEMORY

  %loadBr_48f7a5 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f7a5 = icmp eq i8 %loadBr_48f7a5, 1
  br i1 %cmpBr_48f7a5, label %block_.L_48f7ec, label %block_48f7ab

block_48f7ab:
  ; Code: movq -0x48(%rbp), %rax	 RIP: 48f7ab	 Bytes: 4
  %loadMem_48f7ab = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7ab = call %struct.Memory* @routine_movq_MINUS0x48__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7ab)
  store %struct.Memory* %call_48f7ab, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48f7af	 Bytes: 4
  %loadMem_48f7af = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7af = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7af)
  store %struct.Memory* %call_48f7af, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48f7b3	 Bytes: 4
  %loadMem_48f7b3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7b3 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7b3)
  store %struct.Memory* %call_48f7b3, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48f7b7	 Bytes: 4
  %loadMem_48f7b7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7b7 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7b7)
  store %struct.Memory* %call_48f7b7, %struct.Memory** %MEMORY

  ; Code: movl $0x2, (%rax,%rcx,4)	 RIP: 48f7bb	 Bytes: 7
  %loadMem_48f7bb = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7bb = call %struct.Memory* @routine_movl__0x2____rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7bb)
  store %struct.Memory* %call_48f7bb, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48f7c2	 Bytes: 4
  %loadMem_48f7c2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7c2 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7c2)
  store %struct.Memory* %call_48f7c2, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48f7c6	 Bytes: 4
  %loadMem_48f7c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7c6 = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7c6)
  store %struct.Memory* %call_48f7c6, %struct.Memory** %MEMORY

  ; Code: movl $0x2, 0x14c(%rax,%rcx,4)	 RIP: 48f7ca	 Bytes: 11
  %loadMem_48f7ca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7ca = call %struct.Memory* @routine_movl__0x2__0x14c__rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7ca)
  store %struct.Memory* %call_48f7ca, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f7d5	 Bytes: 3
  %loadMem_48f7d5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7d5 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7d5)
  store %struct.Memory* %call_48f7d5, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f7d8	 Bytes: 3
  %loadMem_48f7d8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7d8 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7d8)
  store %struct.Memory* %call_48f7d8, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48f7db	 Bytes: 3
  %loadMem_48f7db = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7db = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7db)
  store %struct.Memory* %call_48f7db, %struct.Memory** %MEMORY

  ; Code: movl -0x14(%rbp), %eax	 RIP: 48f7de	 Bytes: 3
  %loadMem_48f7de = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7de = call %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7de)
  store %struct.Memory* %call_48f7de, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f7e1	 Bytes: 3
  %loadMem_48f7e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7e1 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7e1)
  store %struct.Memory* %call_48f7e1, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x14(%rbp)	 RIP: 48f7e4	 Bytes: 3
  %loadMem_48f7e4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7e4 = call %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7e4)
  store %struct.Memory* %call_48f7e4, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f78f	 RIP: 48f7e7	 Bytes: 5
  %loadMem_48f7e7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7e7 = call %struct.Memory* @routine_jmpq_.L_48f78f(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7e7, i64 -88, i64 5)
  store %struct.Memory* %call_48f7e7, %struct.Memory** %MEMORY

  br label %block_.L_48f78f

  ; Code: .L_48f7ec:	 RIP: 48f7ec	 Bytes: 0
block_.L_48f7ec:

  ; Code: jmpq .L_48f7f1	 RIP: 48f7ec	 Bytes: 5
  %loadMem_48f7ec = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7ec = call %struct.Memory* @routine_jmpq_.L_48f7f1(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7ec, i64 5, i64 5)
  store %struct.Memory* %call_48f7ec, %struct.Memory** %MEMORY

  br label %block_.L_48f7f1

  ; Code: .L_48f7f1:	 RIP: 48f7f1	 Bytes: 0
block_.L_48f7f1:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48f7f1	 Bytes: 3
  %loadMem_48f7f1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7f1 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7f1)
  store %struct.Memory* %call_48f7f1, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f7f4	 Bytes: 3
  %loadMem_48f7f4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7f4 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7f4)
  store %struct.Memory* %call_48f7f4, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48f7f7	 Bytes: 3
  %loadMem_48f7f7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7f7 = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7f7)
  store %struct.Memory* %call_48f7f7, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f762	 RIP: 48f7fa	 Bytes: 5
  %loadMem_48f7fa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7fa = call %struct.Memory* @routine_jmpq_.L_48f762(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7fa, i64 -152, i64 5)
  store %struct.Memory* %call_48f7fa, %struct.Memory** %MEMORY

  br label %block_.L_48f762

  ; Code: .L_48f7ff:	 RIP: 48f7ff	 Bytes: 0
block_.L_48f7ff:

  ; Code: jmpq .L_48f8db	 RIP: 48f7ff	 Bytes: 5
  %loadMem_48f7ff = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f7ff = call %struct.Memory* @routine_jmpq_.L_48f8db(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f7ff, i64 220, i64 5)
  store %struct.Memory* %call_48f7ff, %struct.Memory** %MEMORY

  br label %block_.L_48f8db

  ; Code: .L_48f804:	 RIP: 48f804	 Bytes: 0
block_.L_48f804:

  ; Code: cmpl $0x9, -0x3c(%rbp)	 RIP: 48f804	 Bytes: 4
  %loadMem_48f804 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f804 = call %struct.Memory* @routine_cmpl__0x9__MINUS0x3c__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f804)
  store %struct.Memory* %call_48f804, %struct.Memory** %MEMORY

  ; Code: jne .L_48f8d6	 RIP: 48f808	 Bytes: 6
  %loadMem_48f808 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f808 = call %struct.Memory* @routine_jne_.L_48f8d6(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f808, i8* %BRANCH_TAKEN, i64 206, i64 6, i64 6)
  store %struct.Memory* %call_48f808, %struct.Memory** %MEMORY

  %loadBr_48f808 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f808 = icmp eq i8 %loadBr_48f808, 1
  br i1 %cmpBr_48f808, label %block_.L_48f8d6, label %block_48f80e

block_48f80e:
  ; Code: movl $0x0, -0x14(%rbp)	 RIP: 48f80e	 Bytes: 7
  %loadMem_48f80e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f80e = call %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f80e)
  store %struct.Memory* %call_48f80e, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48f815	 Bytes: 8
  %loadMem_48f815 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f815 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f815)
  store %struct.Memory* %call_48f815, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rax), %ecx	 RIP: 48f81d	 Bytes: 6
  %loadMem_48f81d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f81d = call %struct.Memory* @routine_movl_0x94__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f81d)
  store %struct.Memory* %call_48f81d, %struct.Memory** %MEMORY

  ; Code: movl %ecx, -0x10(%rbp)	 RIP: 48f823	 Bytes: 3
  %loadMem_48f823 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f823 = call %struct.Memory* @routine_movl__ecx__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f823)
  store %struct.Memory* %call_48f823, %struct.Memory** %MEMORY

  ; Code: .L_48f826:	 RIP: 48f826	 Bytes: 0
  br label %block_.L_48f826
block_.L_48f826:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48f826	 Bytes: 3
  %loadMem_48f826 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f826 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f826)
  store %struct.Memory* %call_48f826, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f829	 Bytes: 8
  %loadMem_48f829 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f829 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f829)
  store %struct.Memory* %call_48f829, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48f831	 Bytes: 6
  %loadMem_48f831 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f831 = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f831)
  store %struct.Memory* %call_48f831, %struct.Memory** %MEMORY

  ; Code: addl $0x4, %edx	 RIP: 48f837	 Bytes: 3
  %loadMem_48f837 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f837 = call %struct.Memory* @routine_addl__0x4___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f837)
  store %struct.Memory* %call_48f837, %struct.Memory** %MEMORY

  ; Code: cmpl %edx, %eax	 RIP: 48f83a	 Bytes: 2
  %loadMem_48f83a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f83a = call %struct.Memory* @routine_cmpl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f83a)
  store %struct.Memory* %call_48f83a, %struct.Memory** %MEMORY

  ; Code: jge .L_48f8d1	 RIP: 48f83c	 Bytes: 6
  %loadMem_48f83c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f83c = call %struct.Memory* @routine_jge_.L_48f8d1(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f83c, i8* %BRANCH_TAKEN, i64 149, i64 6, i64 6)
  store %struct.Memory* %call_48f83c, %struct.Memory** %MEMORY

  %loadBr_48f83c = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f83c = icmp eq i8 %loadBr_48f83c, 1
  br i1 %cmpBr_48f83c, label %block_.L_48f8d1, label %block_48f842

block_48f842:
  ; Code: movq 0x6cb900, %rax	 RIP: 48f842	 Bytes: 8
  %loadMem_48f842 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f842 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f842)
  store %struct.Memory* %call_48f842, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rax), %ecx	 RIP: 48f84a	 Bytes: 6
  %loadMem_48f84a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f84a = call %struct.Memory* @routine_movl_0x90__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f84a)
  store %struct.Memory* %call_48f84a, %struct.Memory** %MEMORY

  ; Code: movl %ecx, -0xc(%rbp)	 RIP: 48f850	 Bytes: 3
  %loadMem_48f850 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f850 = call %struct.Memory* @routine_movl__ecx__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f850)
  store %struct.Memory* %call_48f850, %struct.Memory** %MEMORY

  ; Code: .L_48f853:	 RIP: 48f853	 Bytes: 0
  br label %block_.L_48f853
block_.L_48f853:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f853	 Bytes: 3
  %loadMem_48f853 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f853 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f853)
  store %struct.Memory* %call_48f853, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f856	 Bytes: 8
  %loadMem_48f856 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f856 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f856)
  store %struct.Memory* %call_48f856, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48f85e	 Bytes: 6
  %loadMem_48f85e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f85e = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f85e)
  store %struct.Memory* %call_48f85e, %struct.Memory** %MEMORY

  ; Code: addl $0x4, %edx	 RIP: 48f864	 Bytes: 3
  %loadMem_48f864 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f864 = call %struct.Memory* @routine_addl__0x4___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f864)
  store %struct.Memory* %call_48f864, %struct.Memory** %MEMORY

  ; Code: cmpl %edx, %eax	 RIP: 48f867	 Bytes: 2
  %loadMem_48f867 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f867 = call %struct.Memory* @routine_cmpl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f867)
  store %struct.Memory* %call_48f867, %struct.Memory** %MEMORY

  ; Code: jge .L_48f8be	 RIP: 48f869	 Bytes: 6
  %loadMem_48f869 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f869 = call %struct.Memory* @routine_jge_.L_48f8be(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f869, i8* %BRANCH_TAKEN, i64 85, i64 6, i64 6)
  store %struct.Memory* %call_48f869, %struct.Memory** %MEMORY

  %loadBr_48f869 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f869 = icmp eq i8 %loadBr_48f869, 1
  br i1 %cmpBr_48f869, label %block_.L_48f8be, label %block_48f86f

block_48f86f:
  ; Code: movslq -0x14(%rbp), %rax	 RIP: 48f86f	 Bytes: 4
  %loadMem_48f86f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f86f = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f86f)
  store %struct.Memory* %call_48f86f, %struct.Memory** %MEMORY

  ; Code: movl 0x7236d0(,%rax,4), %ecx	 RIP: 48f873	 Bytes: 7
  %loadMem_48f873 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f873 = call %struct.Memory* @routine_movl_0x7236d0___rax_4____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f873)
  store %struct.Memory* %call_48f873, %struct.Memory** %MEMORY

  ; Code: movq -0x48(%rbp), %rax	 RIP: 48f87a	 Bytes: 4
  %loadMem_48f87a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f87a = call %struct.Memory* @routine_movq_MINUS0x48__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f87a)
  store %struct.Memory* %call_48f87a, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rdx	 RIP: 48f87e	 Bytes: 4
  %loadMem_48f87e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f87e = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f87e)
  store %struct.Memory* %call_48f87e, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rdx,8), %rax	 RIP: 48f882	 Bytes: 4
  %loadMem_48f882 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f882 = call %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f882)
  store %struct.Memory* %call_48f882, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rdx	 RIP: 48f886	 Bytes: 4
  %loadMem_48f886 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f886 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f886)
  store %struct.Memory* %call_48f886, %struct.Memory** %MEMORY

  ; Code: movl %ecx, (%rax,%rdx,4)	 RIP: 48f88a	 Bytes: 3
  %loadMem_48f88a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f88a = call %struct.Memory* @routine_movl__ecx____rax__rdx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f88a)
  store %struct.Memory* %call_48f88a, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rax	 RIP: 48f88d	 Bytes: 4
  %loadMem_48f88d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f88d = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f88d)
  store %struct.Memory* %call_48f88d, %struct.Memory** %MEMORY

  ; Code: movl 0x70cfd0(,%rax,4), %ecx	 RIP: 48f891	 Bytes: 7
  %loadMem_48f891 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f891 = call %struct.Memory* @routine_movl_0x70cfd0___rax_4____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f891)
  store %struct.Memory* %call_48f891, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48f898	 Bytes: 4
  %loadMem_48f898 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f898 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f898)
  store %struct.Memory* %call_48f898, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rdx	 RIP: 48f89c	 Bytes: 4
  %loadMem_48f89c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f89c = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rdx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f89c)
  store %struct.Memory* %call_48f89c, %struct.Memory** %MEMORY

  ; Code: movl %ecx, 0x14c(%rax,%rdx,4)	 RIP: 48f8a0	 Bytes: 7
  %loadMem_48f8a0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8a0 = call %struct.Memory* @routine_movl__ecx__0x14c__rax__rdx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8a0)
  store %struct.Memory* %call_48f8a0, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f8a7	 Bytes: 3
  %loadMem_48f8a7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8a7 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8a7)
  store %struct.Memory* %call_48f8a7, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f8aa	 Bytes: 3
  %loadMem_48f8aa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8aa = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8aa)
  store %struct.Memory* %call_48f8aa, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48f8ad	 Bytes: 3
  %loadMem_48f8ad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8ad = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8ad)
  store %struct.Memory* %call_48f8ad, %struct.Memory** %MEMORY

  ; Code: movl -0x14(%rbp), %eax	 RIP: 48f8b0	 Bytes: 3
  %loadMem_48f8b0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8b0 = call %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8b0)
  store %struct.Memory* %call_48f8b0, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f8b3	 Bytes: 3
  %loadMem_48f8b3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8b3 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8b3)
  store %struct.Memory* %call_48f8b3, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x14(%rbp)	 RIP: 48f8b6	 Bytes: 3
  %loadMem_48f8b6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8b6 = call %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8b6)
  store %struct.Memory* %call_48f8b6, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f853	 RIP: 48f8b9	 Bytes: 5
  %loadMem_48f8b9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8b9 = call %struct.Memory* @routine_jmpq_.L_48f853(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8b9, i64 -102, i64 5)
  store %struct.Memory* %call_48f8b9, %struct.Memory** %MEMORY

  br label %block_.L_48f853

  ; Code: .L_48f8be:	 RIP: 48f8be	 Bytes: 0
block_.L_48f8be:

  ; Code: jmpq .L_48f8c3	 RIP: 48f8be	 Bytes: 5
  %loadMem_48f8be = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8be = call %struct.Memory* @routine_jmpq_.L_48f8c3(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8be, i64 5, i64 5)
  store %struct.Memory* %call_48f8be, %struct.Memory** %MEMORY

  br label %block_.L_48f8c3

  ; Code: .L_48f8c3:	 RIP: 48f8c3	 Bytes: 0
block_.L_48f8c3:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48f8c3	 Bytes: 3
  %loadMem_48f8c3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8c3 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8c3)
  store %struct.Memory* %call_48f8c3, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f8c6	 Bytes: 3
  %loadMem_48f8c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8c6 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8c6)
  store %struct.Memory* %call_48f8c6, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48f8c9	 Bytes: 3
  %loadMem_48f8c9 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8c9 = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8c9)
  store %struct.Memory* %call_48f8c9, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f826	 RIP: 48f8cc	 Bytes: 5
  %loadMem_48f8cc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8cc = call %struct.Memory* @routine_jmpq_.L_48f826(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8cc, i64 -166, i64 5)
  store %struct.Memory* %call_48f8cc, %struct.Memory** %MEMORY

  br label %block_.L_48f826

  ; Code: .L_48f8d1:	 RIP: 48f8d1	 Bytes: 0
block_.L_48f8d1:

  ; Code: jmpq .L_48f8d6	 RIP: 48f8d1	 Bytes: 5
  %loadMem_48f8d1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8d1 = call %struct.Memory* @routine_jmpq_.L_48f8d6(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8d1, i64 5, i64 5)
  store %struct.Memory* %call_48f8d1, %struct.Memory** %MEMORY

  br label %block_.L_48f8d6

  ; Code: .L_48f8d6:	 RIP: 48f8d6	 Bytes: 0
block_.L_48f8d6:

  ; Code: jmpq .L_48f8db	 RIP: 48f8d6	 Bytes: 5
  %loadMem_48f8d6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8d6 = call %struct.Memory* @routine_jmpq_.L_48f8db(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8d6, i64 5, i64 5)
  store %struct.Memory* %call_48f8d6, %struct.Memory** %MEMORY

  br label %block_.L_48f8db

  ; Code: .L_48f8db:	 RIP: 48f8db	 Bytes: 0
block_.L_48f8db:

  ; Code: jmpq .L_48f8e0	 RIP: 48f8db	 Bytes: 5
  %loadMem_48f8db = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8db = call %struct.Memory* @routine_jmpq_.L_48f8e0(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8db, i64 5, i64 5)
  store %struct.Memory* %call_48f8db, %struct.Memory** %MEMORY

  br label %block_.L_48f8e0

  ; Code: .L_48f8e0:	 RIP: 48f8e0	 Bytes: 0
block_.L_48f8e0:

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48f8e0	 Bytes: 4
  %loadMem_48f8e0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8e0 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8e0)
  store %struct.Memory* %call_48f8e0, %struct.Memory** %MEMORY

  ; Code: cmpl $0xd, 0x48(%rax)	 RIP: 48f8e4	 Bytes: 4
  %loadMem_48f8e4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8e4 = call %struct.Memory* @routine_cmpl__0xd__0x48__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8e4)
  store %struct.Memory* %call_48f8e4, %struct.Memory** %MEMORY

  ; Code: jne .L_48f9b7	 RIP: 48f8e8	 Bytes: 6
  %loadMem_48f8e8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8e8 = call %struct.Memory* @routine_jne_.L_48f9b7(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8e8, i8* %BRANCH_TAKEN, i64 207, i64 6, i64 6)
  store %struct.Memory* %call_48f8e8, %struct.Memory** %MEMORY

  %loadBr_48f8e8 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f8e8 = icmp eq i8 %loadBr_48f8e8, 1
  br i1 %cmpBr_48f8e8, label %block_.L_48f9b7, label %block_48f8ee

block_48f8ee:
  ; Code: movl $0x0, -0x14(%rbp)	 RIP: 48f8ee	 Bytes: 7
  %loadMem_48f8ee = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8ee = call %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8ee)
  store %struct.Memory* %call_48f8ee, %struct.Memory** %MEMORY

  ; Code: movl $0x0, -0xc(%rbp)	 RIP: 48f8f5	 Bytes: 7
  %loadMem_48f8f5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8f5 = call %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8f5)
  store %struct.Memory* %call_48f8f5, %struct.Memory** %MEMORY

  ; Code: .L_48f8fc:	 RIP: 48f8fc	 Bytes: 0
  br label %block_.L_48f8fc
block_.L_48f8fc:

  ; Code: cmpl $0x4, -0xc(%rbp)	 RIP: 48f8fc	 Bytes: 4
  %loadMem_48f8fc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f8fc = call %struct.Memory* @routine_cmpl__0x4__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f8fc)
  store %struct.Memory* %call_48f8fc, %struct.Memory** %MEMORY

  ; Code: jge .L_48f9b2	 RIP: 48f900	 Bytes: 6
  %loadMem_48f900 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f900 = call %struct.Memory* @routine_jge_.L_48f9b2(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f900, i8* %BRANCH_TAKEN, i64 178, i64 6, i64 6)
  store %struct.Memory* %call_48f900, %struct.Memory** %MEMORY

  %loadBr_48f900 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f900 = icmp eq i8 %loadBr_48f900, 1
  br i1 %cmpBr_48f900, label %block_.L_48f9b2, label %block_48f906

block_48f906:
  ; Code: movl $0x0, -0x10(%rbp)	 RIP: 48f906	 Bytes: 7
  %loadMem_48f906 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f906 = call %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f906)
  store %struct.Memory* %call_48f906, %struct.Memory** %MEMORY

  ; Code: .L_48f90d:	 RIP: 48f90d	 Bytes: 0
  br label %block_.L_48f90d
block_.L_48f90d:

  ; Code: cmpl $0x4, -0x10(%rbp)	 RIP: 48f90d	 Bytes: 4
  %loadMem_48f90d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f90d = call %struct.Memory* @routine_cmpl__0x4__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f90d)
  store %struct.Memory* %call_48f90d, %struct.Memory** %MEMORY

  ; Code: jge .L_48f99f	 RIP: 48f911	 Bytes: 6
  %loadMem_48f911 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f911 = call %struct.Memory* @routine_jge_.L_48f99f(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f911, i8* %BRANCH_TAKEN, i64 142, i64 6, i64 6)
  store %struct.Memory* %call_48f911, %struct.Memory** %MEMORY

  %loadBr_48f911 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f911 = icmp eq i8 %loadBr_48f911, 1
  br i1 %cmpBr_48f911, label %block_.L_48f99f, label %block_48f917

block_48f917:
  ; Code: movq $0x7242b0, %rax	 RIP: 48f917	 Bytes: 10
  %loadMem_48f917 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f917 = call %struct.Memory* @routine_movq__0x7242b0___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f917)
  store %struct.Memory* %call_48f917, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48f921	 Bytes: 4
  %loadMem_48f921 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f921 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f921)
  store %struct.Memory* %call_48f921, %struct.Memory** %MEMORY

  ; Code: shlq $0x4, %rcx	 RIP: 48f925	 Bytes: 4
  %loadMem_48f925 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f925 = call %struct.Memory* @routine_shlq__0x4___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f925)
  store %struct.Memory* %call_48f925, %struct.Memory** %MEMORY

  ; Code: addq %rcx, %rax	 RIP: 48f929	 Bytes: 3
  %loadMem_48f929 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f929 = call %struct.Memory* @routine_addq__rcx___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f929)
  store %struct.Memory* %call_48f929, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48f92c	 Bytes: 4
  %loadMem_48f92c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f92c = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f92c)
  store %struct.Memory* %call_48f92c, %struct.Memory** %MEMORY

  ; Code: movl (%rax,%rcx,4), %edx	 RIP: 48f930	 Bytes: 3
  %loadMem_48f930 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f930 = call %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f930)
  store %struct.Memory* %call_48f930, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48f933	 Bytes: 8
  %loadMem_48f933 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f933 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f933)
  store %struct.Memory* %call_48f933, %struct.Memory** %MEMORY

  ; Code: movq 0x68(%rax), %rax	 RIP: 48f93b	 Bytes: 4
  %loadMem_48f93b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f93b = call %struct.Memory* @routine_movq_0x68__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f93b)
  store %struct.Memory* %call_48f93b, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f93f	 Bytes: 8
  %loadMem_48f93f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f93f = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f93f)
  store %struct.Memory* %call_48f93f, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %esi	 RIP: 48f947	 Bytes: 6
  %loadMem_48f947 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f947 = call %struct.Memory* @routine_movl_0x90__rcx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f947)
  store %struct.Memory* %call_48f947, %struct.Memory** %MEMORY

  ; Code: addl -0xc(%rbp), %esi	 RIP: 48f94d	 Bytes: 3
  %loadMem_48f94d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f94d = call %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f94d)
  store %struct.Memory* %call_48f94d, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rcx	 RIP: 48f950	 Bytes: 3
  %loadMem_48f950 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f950 = call %struct.Memory* @routine_movslq__esi___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f950)
  store %struct.Memory* %call_48f950, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48f953	 Bytes: 4
  %loadMem_48f953 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f953 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f953)
  store %struct.Memory* %call_48f953, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f957	 Bytes: 8
  %loadMem_48f957 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f957 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f957)
  store %struct.Memory* %call_48f957, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %esi	 RIP: 48f95f	 Bytes: 6
  %loadMem_48f95f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f95f = call %struct.Memory* @routine_movl_0x94__rcx____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f95f)
  store %struct.Memory* %call_48f95f, %struct.Memory** %MEMORY

  ; Code: addl -0x10(%rbp), %esi	 RIP: 48f965	 Bytes: 3
  %loadMem_48f965 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f965 = call %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f965)
  store %struct.Memory* %call_48f965, %struct.Memory** %MEMORY

  ; Code: movslq %esi, %rcx	 RIP: 48f968	 Bytes: 3
  %loadMem_48f968 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f968 = call %struct.Memory* @routine_movslq__esi___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f968)
  store %struct.Memory* %call_48f968, %struct.Memory** %MEMORY

  ; Code: movl %edx, (%rax,%rcx,4)	 RIP: 48f96b	 Bytes: 3
  %loadMem_48f96b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f96b = call %struct.Memory* @routine_movl__edx____rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f96b)
  store %struct.Memory* %call_48f96b, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rax	 RIP: 48f96e	 Bytes: 4
  %loadMem_48f96e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f96e = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f96e)
  store %struct.Memory* %call_48f96e, %struct.Memory** %MEMORY

  ; Code: movl 0x6d18c0(,%rax,4), %edx	 RIP: 48f972	 Bytes: 7
  %loadMem_48f972 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f972 = call %struct.Memory* @routine_movl_0x6d18c0___rax_4____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f972)
  store %struct.Memory* %call_48f972, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48f979	 Bytes: 4
  %loadMem_48f979 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f979 = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f979)
  store %struct.Memory* %call_48f979, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48f97d	 Bytes: 4
  %loadMem_48f97d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f97d = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f97d)
  store %struct.Memory* %call_48f97d, %struct.Memory** %MEMORY

  ; Code: movl %edx, 0x14c(%rax,%rcx,4)	 RIP: 48f981	 Bytes: 7
  %loadMem_48f981 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f981 = call %struct.Memory* @routine_movl__edx__0x14c__rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f981)
  store %struct.Memory* %call_48f981, %struct.Memory** %MEMORY

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48f988	 Bytes: 3
  %loadMem_48f988 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f988 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f988)
  store %struct.Memory* %call_48f988, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f98b	 Bytes: 3
  %loadMem_48f98b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f98b = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f98b)
  store %struct.Memory* %call_48f98b, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48f98e	 Bytes: 3
  %loadMem_48f98e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f98e = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f98e)
  store %struct.Memory* %call_48f98e, %struct.Memory** %MEMORY

  ; Code: movl -0x14(%rbp), %eax	 RIP: 48f991	 Bytes: 3
  %loadMem_48f991 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f991 = call %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f991)
  store %struct.Memory* %call_48f991, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f994	 Bytes: 3
  %loadMem_48f994 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f994 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f994)
  store %struct.Memory* %call_48f994, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x14(%rbp)	 RIP: 48f997	 Bytes: 3
  %loadMem_48f997 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f997 = call %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f997)
  store %struct.Memory* %call_48f997, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f90d	 RIP: 48f99a	 Bytes: 5
  %loadMem_48f99a = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f99a = call %struct.Memory* @routine_jmpq_.L_48f90d(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f99a, i64 -141, i64 5)
  store %struct.Memory* %call_48f99a, %struct.Memory** %MEMORY

  br label %block_.L_48f90d

  ; Code: .L_48f99f:	 RIP: 48f99f	 Bytes: 0
block_.L_48f99f:

  ; Code: jmpq .L_48f9a4	 RIP: 48f99f	 Bytes: 5
  %loadMem_48f99f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f99f = call %struct.Memory* @routine_jmpq_.L_48f9a4(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f99f, i64 5, i64 5)
  store %struct.Memory* %call_48f99f, %struct.Memory** %MEMORY

  br label %block_.L_48f9a4

  ; Code: .L_48f9a4:	 RIP: 48f9a4	 Bytes: 0
block_.L_48f9a4:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48f9a4	 Bytes: 3
  %loadMem_48f9a4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9a4 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9a4)
  store %struct.Memory* %call_48f9a4, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48f9a7	 Bytes: 3
  %loadMem_48f9a7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9a7 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9a7)
  store %struct.Memory* %call_48f9a7, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48f9aa	 Bytes: 3
  %loadMem_48f9aa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9aa = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9aa)
  store %struct.Memory* %call_48f9aa, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f8fc	 RIP: 48f9ad	 Bytes: 5
  %loadMem_48f9ad = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9ad = call %struct.Memory* @routine_jmpq_.L_48f8fc(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9ad, i64 -177, i64 5)
  store %struct.Memory* %call_48f9ad, %struct.Memory** %MEMORY

  br label %block_.L_48f8fc

  ; Code: .L_48f9b2:	 RIP: 48f9b2	 Bytes: 0
block_.L_48f9b2:

  ; Code: jmpq .L_48f9b7	 RIP: 48f9b2	 Bytes: 5
  %loadMem_48f9b2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9b2 = call %struct.Memory* @routine_jmpq_.L_48f9b7(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9b2, i64 5, i64 5)
  store %struct.Memory* %call_48f9b2, %struct.Memory** %MEMORY

  br label %block_.L_48f9b7

  ; Code: .L_48f9b7:	 RIP: 48f9b7	 Bytes: 0
block_.L_48f9b7:

  ; Code: movq 0x6cb900, %rax	 RIP: 48f9b7	 Bytes: 8
  %loadMem_48f9b7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9b7 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9b7)
  store %struct.Memory* %call_48f9b7, %struct.Memory** %MEMORY

  ; Code: cmpl $0x0, 0x11ad0(%rax)	 RIP: 48f9bf	 Bytes: 7
  %loadMem_48f9bf = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9bf = call %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9bf)
  store %struct.Memory* %call_48f9bf, %struct.Memory** %MEMORY

  ; Code: je .L_48fade	 RIP: 48f9c6	 Bytes: 6
  %loadMem_48f9c6 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9c6 = call %struct.Memory* @routine_je_.L_48fade(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9c6, i8* %BRANCH_TAKEN, i64 280, i64 6, i64 6)
  store %struct.Memory* %call_48f9c6, %struct.Memory** %MEMORY

  %loadBr_48f9c6 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f9c6 = icmp eq i8 %loadBr_48f9c6, 1
  br i1 %cmpBr_48f9c6, label %block_.L_48fade, label %block_48f9cc

block_48f9cc:
  ; Code: movl $0x0, -0x14(%rbp)	 RIP: 48f9cc	 Bytes: 7
  %loadMem_48f9cc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9cc = call %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9cc)
  store %struct.Memory* %call_48f9cc, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48f9d3	 Bytes: 8
  %loadMem_48f9d3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9d3 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9d3)
  store %struct.Memory* %call_48f9d3, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rax), %ecx	 RIP: 48f9db	 Bytes: 6
  %loadMem_48f9db = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9db = call %struct.Memory* @routine_movl_0x94__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9db)
  store %struct.Memory* %call_48f9db, %struct.Memory** %MEMORY

  ; Code: movl %ecx, -0x10(%rbp)	 RIP: 48f9e1	 Bytes: 3
  %loadMem_48f9e1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9e1 = call %struct.Memory* @routine_movl__ecx__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9e1)
  store %struct.Memory* %call_48f9e1, %struct.Memory** %MEMORY

  ; Code: .L_48f9e4:	 RIP: 48f9e4	 Bytes: 0
  br label %block_.L_48f9e4
block_.L_48f9e4:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48f9e4	 Bytes: 3
  %loadMem_48f9e4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9e4 = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9e4)
  store %struct.Memory* %call_48f9e4, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48f9e7	 Bytes: 8
  %loadMem_48f9e7 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9e7 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9e7)
  store %struct.Memory* %call_48f9e7, %struct.Memory** %MEMORY

  ; Code: movl 0x94(%rcx), %edx	 RIP: 48f9ef	 Bytes: 6
  %loadMem_48f9ef = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9ef = call %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9ef)
  store %struct.Memory* %call_48f9ef, %struct.Memory** %MEMORY

  ; Code: addl $0x4, %edx	 RIP: 48f9f5	 Bytes: 3
  %loadMem_48f9f5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9f5 = call %struct.Memory* @routine_addl__0x4___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9f5)
  store %struct.Memory* %call_48f9f5, %struct.Memory** %MEMORY

  ; Code: cmpl %edx, %eax	 RIP: 48f9f8	 Bytes: 2
  %loadMem_48f9f8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9f8 = call %struct.Memory* @routine_cmpl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9f8)
  store %struct.Memory* %call_48f9f8, %struct.Memory** %MEMORY

  ; Code: jge .L_48faaa	 RIP: 48f9fa	 Bytes: 6
  %loadMem_48f9fa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48f9fa = call %struct.Memory* @routine_jge_.L_48faaa(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48f9fa, i8* %BRANCH_TAKEN, i64 176, i64 6, i64 6)
  store %struct.Memory* %call_48f9fa, %struct.Memory** %MEMORY

  %loadBr_48f9fa = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48f9fa = icmp eq i8 %loadBr_48f9fa, 1
  br i1 %cmpBr_48f9fa, label %block_.L_48faaa, label %block_48fa00

block_48fa00:
  ; Code: movq 0x6cb900, %rax	 RIP: 48fa00	 Bytes: 8
  %loadMem_48fa00 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa00 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa00)
  store %struct.Memory* %call_48fa00, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rax), %ecx	 RIP: 48fa08	 Bytes: 6
  %loadMem_48fa08 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa08 = call %struct.Memory* @routine_movl_0x90__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa08)
  store %struct.Memory* %call_48fa08, %struct.Memory** %MEMORY

  ; Code: movl %ecx, -0xc(%rbp)	 RIP: 48fa0e	 Bytes: 3
  %loadMem_48fa0e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa0e = call %struct.Memory* @routine_movl__ecx__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa0e)
  store %struct.Memory* %call_48fa0e, %struct.Memory** %MEMORY

  ; Code: .L_48fa11:	 RIP: 48fa11	 Bytes: 0
  br label %block_.L_48fa11
block_.L_48fa11:

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48fa11	 Bytes: 3
  %loadMem_48fa11 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa11 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa11)
  store %struct.Memory* %call_48fa11, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rcx	 RIP: 48fa14	 Bytes: 8
  %loadMem_48fa14 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa14 = call %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa14)
  store %struct.Memory* %call_48fa14, %struct.Memory** %MEMORY

  ; Code: movl 0x90(%rcx), %edx	 RIP: 48fa1c	 Bytes: 6
  %loadMem_48fa1c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa1c = call %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa1c)
  store %struct.Memory* %call_48fa1c, %struct.Memory** %MEMORY

  ; Code: addl $0x4, %edx	 RIP: 48fa22	 Bytes: 3
  %loadMem_48fa22 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa22 = call %struct.Memory* @routine_addl__0x4___edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa22)
  store %struct.Memory* %call_48fa22, %struct.Memory** %MEMORY

  ; Code: cmpl %edx, %eax	 RIP: 48fa25	 Bytes: 2
  %loadMem_48fa25 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa25 = call %struct.Memory* @routine_cmpl__edx___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa25)
  store %struct.Memory* %call_48fa25, %struct.Memory** %MEMORY

  ; Code: jge .L_48fa97	 RIP: 48fa27	 Bytes: 6
  %loadMem_48fa27 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa27 = call %struct.Memory* @routine_jge_.L_48fa97(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa27, i8* %BRANCH_TAKEN, i64 112, i64 6, i64 6)
  store %struct.Memory* %call_48fa27, %struct.Memory** %MEMORY

  %loadBr_48fa27 = load i8, i8* %BRANCH_TAKEN
  %cmpBr_48fa27 = icmp eq i8 %loadBr_48fa27, 1
  br i1 %cmpBr_48fa27, label %block_.L_48fa97, label %block_48fa2d

block_48fa2d:
  ; Code: movq -0x48(%rbp), %rax	 RIP: 48fa2d	 Bytes: 4
  %loadMem_48fa2d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa2d = call %struct.Memory* @routine_movq_MINUS0x48__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa2d)
  store %struct.Memory* %call_48fa2d, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48fa31	 Bytes: 4
  %loadMem_48fa31 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa31 = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa31)
  store %struct.Memory* %call_48fa31, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48fa35	 Bytes: 4
  %loadMem_48fa35 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa35 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa35)
  store %struct.Memory* %call_48fa35, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48fa39	 Bytes: 4
  %loadMem_48fa39 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa39 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa39)
  store %struct.Memory* %call_48fa39, %struct.Memory** %MEMORY

  ; Code: movl (%rax,%rcx,4), %edx	 RIP: 48fa3d	 Bytes: 3
  %loadMem_48fa3d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa3d = call %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa3d)
  store %struct.Memory* %call_48fa3d, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48fa40	 Bytes: 8
  %loadMem_48fa40 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa40 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa40)
  store %struct.Memory* %call_48fa40, %struct.Memory** %MEMORY

  ; Code: movq 0xc40(%rax), %rax	 RIP: 48fa48	 Bytes: 7
  %loadMem_48fa48 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa48 = call %struct.Memory* @routine_movq_0xc40__rax____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa48)
  store %struct.Memory* %call_48fa48, %struct.Memory** %MEMORY

  ; Code: movslq -0xc(%rbp), %rcx	 RIP: 48fa4f	 Bytes: 4
  %loadMem_48fa4f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa4f = call %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa4f)
  store %struct.Memory* %call_48fa4f, %struct.Memory** %MEMORY

  ; Code: movq (%rax,%rcx,8), %rax	 RIP: 48fa53	 Bytes: 4
  %loadMem_48fa53 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa53 = call %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa53)
  store %struct.Memory* %call_48fa53, %struct.Memory** %MEMORY

  ; Code: movslq -0x10(%rbp), %rcx	 RIP: 48fa57	 Bytes: 4
  %loadMem_48fa57 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa57 = call %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa57)
  store %struct.Memory* %call_48fa57, %struct.Memory** %MEMORY

  ; Code: movl %edx, (%rax,%rcx,4)	 RIP: 48fa5b	 Bytes: 3
  %loadMem_48fa5b = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa5b = call %struct.Memory* @routine_movl__edx____rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa5b)
  store %struct.Memory* %call_48fa5b, %struct.Memory** %MEMORY

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48fa5e	 Bytes: 4
  %loadMem_48fa5e = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa5e = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa5e)
  store %struct.Memory* %call_48fa5e, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48fa62	 Bytes: 4
  %loadMem_48fa62 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa62 = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa62)
  store %struct.Memory* %call_48fa62, %struct.Memory** %MEMORY

  ; Code: movl 0x14c(%rax,%rcx,4), %edx	 RIP: 48fa66	 Bytes: 7
  %loadMem_48fa66 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa66 = call %struct.Memory* @routine_movl_0x14c__rax__rcx_4____edx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa66)
  store %struct.Memory* %call_48fa66, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48fa6d	 Bytes: 8
  %loadMem_48fa6d = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa6d = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa6d)
  store %struct.Memory* %call_48fa6d, %struct.Memory** %MEMORY

  ; Code: movslq -0x14(%rbp), %rcx	 RIP: 48fa75	 Bytes: 4
  %loadMem_48fa75 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa75 = call %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa75)
  store %struct.Memory* %call_48fa75, %struct.Memory** %MEMORY

  ; Code: movl %edx, 0xc48(%rax,%rcx,4)	 RIP: 48fa79	 Bytes: 7
  %loadMem_48fa79 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa79 = call %struct.Memory* @routine_movl__edx__0xc48__rax__rcx_4_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa79)
  store %struct.Memory* %call_48fa79, %struct.Memory** %MEMORY

  ; Code: movl -0xc(%rbp), %eax	 RIP: 48fa80	 Bytes: 3
  %loadMem_48fa80 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa80 = call %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa80)
  store %struct.Memory* %call_48fa80, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48fa83	 Bytes: 3
  %loadMem_48fa83 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa83 = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa83)
  store %struct.Memory* %call_48fa83, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0xc(%rbp)	 RIP: 48fa86	 Bytes: 3
  %loadMem_48fa86 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa86 = call %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa86)
  store %struct.Memory* %call_48fa86, %struct.Memory** %MEMORY

  ; Code: movl -0x14(%rbp), %eax	 RIP: 48fa89	 Bytes: 3
  %loadMem_48fa89 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa89 = call %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa89)
  store %struct.Memory* %call_48fa89, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48fa8c	 Bytes: 3
  %loadMem_48fa8c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa8c = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa8c)
  store %struct.Memory* %call_48fa8c, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x14(%rbp)	 RIP: 48fa8f	 Bytes: 3
  %loadMem_48fa8f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa8f = call %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa8f)
  store %struct.Memory* %call_48fa8f, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48fa11	 RIP: 48fa92	 Bytes: 5
  %loadMem_48fa92 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa92 = call %struct.Memory* @routine_jmpq_.L_48fa11(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa92, i64 -129, i64 5)
  store %struct.Memory* %call_48fa92, %struct.Memory** %MEMORY

  br label %block_.L_48fa11

  ; Code: .L_48fa97:	 RIP: 48fa97	 Bytes: 0
block_.L_48fa97:

  ; Code: jmpq .L_48fa9c	 RIP: 48fa97	 Bytes: 5
  %loadMem_48fa97 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa97 = call %struct.Memory* @routine_jmpq_.L_48fa9c(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa97, i64 5, i64 5)
  store %struct.Memory* %call_48fa97, %struct.Memory** %MEMORY

  br label %block_.L_48fa9c

  ; Code: .L_48fa9c:	 RIP: 48fa9c	 Bytes: 0
block_.L_48fa9c:

  ; Code: movl -0x10(%rbp), %eax	 RIP: 48fa9c	 Bytes: 3
  %loadMem_48fa9c = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa9c = call %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa9c)
  store %struct.Memory* %call_48fa9c, %struct.Memory** %MEMORY

  ; Code: addl $0x1, %eax	 RIP: 48fa9f	 Bytes: 3
  %loadMem_48fa9f = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fa9f = call %struct.Memory* @routine_addl__0x1___eax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fa9f)
  store %struct.Memory* %call_48fa9f, %struct.Memory** %MEMORY

  ; Code: movl %eax, -0x10(%rbp)	 RIP: 48faa2	 Bytes: 3
  %loadMem_48faa2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faa2 = call %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faa2)
  store %struct.Memory* %call_48faa2, %struct.Memory** %MEMORY

  ; Code: jmpq .L_48f9e4	 RIP: 48faa5	 Bytes: 5
  %loadMem_48faa5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faa5 = call %struct.Memory* @routine_jmpq_.L_48f9e4(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faa5, i64 -193, i64 5)
  store %struct.Memory* %call_48faa5, %struct.Memory** %MEMORY

  br label %block_.L_48f9e4

  ; Code: .L_48faaa:	 RIP: 48faaa	 Bytes: 0
block_.L_48faaa:

  ; Code: movq -0x38(%rbp), %rax	 RIP: 48faaa	 Bytes: 4
  %loadMem_48faaa = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faaa = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faaa)
  store %struct.Memory* %call_48faaa, %struct.Memory** %MEMORY

  ; Code: movl 0x20c(%rax), %ecx	 RIP: 48faae	 Bytes: 6
  %loadMem_48faae = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faae = call %struct.Memory* @routine_movl_0x20c__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faae)
  store %struct.Memory* %call_48faae, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48fab4	 Bytes: 8
  %loadMem_48fab4 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fab4 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fab4)
  store %struct.Memory* %call_48fab4, %struct.Memory** %MEMORY

  ; Code: movl %ecx, 0xd04(%rax)	 RIP: 48fabc	 Bytes: 6
  %loadMem_48fabc = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fabc = call %struct.Memory* @routine_movl__ecx__0xd04__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fabc)
  store %struct.Memory* %call_48fabc, %struct.Memory** %MEMORY

  ; Code: movq 0x6cb900, %rax	 RIP: 48fac2	 Bytes: 8
  %loadMem_48fac2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fac2 = call %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fac2)
  store %struct.Memory* %call_48fac2, %struct.Memory** %MEMORY

  ; Code: movl 0x11abc(%rax), %ecx	 RIP: 48faca	 Bytes: 6
  %loadMem_48faca = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faca = call %struct.Memory* @routine_movl_0x11abc__rax____ecx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faca)
  store %struct.Memory* %call_48faca, %struct.Memory** %MEMORY

  ; Code: movq 0x6d4518, %rax	 RIP: 48fad0	 Bytes: 8
  %loadMem_48fad0 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fad0 = call %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fad0)
  store %struct.Memory* %call_48fad0, %struct.Memory** %MEMORY

  ; Code: movl %ecx, 0xd00(%rax)	 RIP: 48fad8	 Bytes: 6
  %loadMem_48fad8 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fad8 = call %struct.Memory* @routine_movl__ecx__0xd00__rax_(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fad8)
  store %struct.Memory* %call_48fad8, %struct.Memory** %MEMORY

  ; Code: .L_48fade:	 RIP: 48fade	 Bytes: 0
  br label %block_.L_48fade
block_.L_48fade:

  ; Code: movq -0x38(%rbp), %rdi	 RIP: 48fade	 Bytes: 4
  %loadMem_48fade = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fade = call %struct.Memory* @routine_movq_MINUS0x38__rbp____rdi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fade)
  store %struct.Memory* %call_48fade, %struct.Memory** %MEMORY

  ; Code: movl -0x40(%rbp), %esi	 RIP: 48fae2	 Bytes: 3
  %loadMem_48fae2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48fae2 = call %struct.Memory* @routine_movl_MINUS0x40__rbp____esi(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48fae2)
  store %struct.Memory* %call_48fae2, %struct.Memory** %MEMORY

  ; Code: callq .SetMotionVectorsMB	 RIP: 48fae5	 Bytes: 5
  %loadMem1_48fae5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call1_48fae5 = call %struct.Memory* @routine_callq_.SetMotionVectorsMB(%struct.State* %0, i64  0, %struct.Memory* %loadMem1_48fae5, i64 -16149, i64 5, i64 5)
  store %struct.Memory* %call1_48fae5, %struct.Memory** %MEMORY

  %loadMem2_48fae5 = load %struct.Memory*, %struct.Memory** %MEMORY
  %loadPC_48fae5 = load i64, i64* %3
  %call2_48fae5 = call %struct.Memory* @sub_48bbd0.SetMotionVectorsMB(%struct.State* %0, i64  %loadPC_48fae5, %struct.Memory* %loadMem2_48fae5)
  store %struct.Memory* %call2_48fae5, %struct.Memory** %MEMORY

  ; Code: addq $0x108, %rsp	 RIP: 48faea	 Bytes: 7
  %loadMem_48faea = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faea = call %struct.Memory* @routine_addq__0x108___rsp(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faea)
  store %struct.Memory* %call_48faea, %struct.Memory** %MEMORY

  ; Code: popq %rbx	 RIP: 48faf1	 Bytes: 1
  %loadMem_48faf1 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faf1 = call %struct.Memory* @routine_popq__rbx(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faf1)
  store %struct.Memory* %call_48faf1, %struct.Memory** %MEMORY

  ; Code: popq %rbp	 RIP: 48faf2	 Bytes: 1
  %loadMem_48faf2 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faf2 = call %struct.Memory* @routine_popq__rbp(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faf2)
  store %struct.Memory* %call_48faf2, %struct.Memory** %MEMORY

  ; Code: retq	 RIP: 48faf3	 Bytes: 1
  %loadMem_48faf3 = load %struct.Memory*, %struct.Memory** %MEMORY
  %call_48faf3 = call %struct.Memory* @routine_retq(%struct.State* %0, i64  0, %struct.Memory* %loadMem_48faf3)
  store %struct.Memory* %call_48faf3, %struct.Memory** %MEMORY

  ret %struct.Memory* %call_48faf3
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %2, i64* %7
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_pushq__rbp(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 1
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %9)
  ret %struct.Memory* %12
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #2 {
  store i64 %3, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movq__rsp___rbp(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 3
  store i64 %14, i64* %PC
  %15 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RBP, i64 %12)
  ret %struct.Memory* %15
}


define %struct.Memory* @routine_pushq__rbx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 3
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 1
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %9)
  ret %struct.Memory* %12
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = sub i64 %3, %4
  store i64 %6, i64* %2, align 8
  %7 = icmp ult i64 %3, %4
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #22
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %4, %3
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = lshr i64 %4, 63
  %31 = xor i64 %30, %29
  %32 = xor i64 %26, %29
  %33 = add   i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_subq__0x108___rsp(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSP, i64 %9, i64 264)
  ret %struct.Memory* %12
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #0 {
  %5 = inttoptr i64 %3 to i64*
  %6 = load i64, i64* %5
  store i64 %6, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x6cb900_type* @G_0x6cb900 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x3758__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 14168
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 ptrtoint( %G_0x6cb900_type* @G_0x6cb900 to i64))
  ret %struct.Memory* %11
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #0 {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = sext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movslq_0xc__rcx____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = add i64 %9, 12
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %10)
  ret %struct.Memory* %13
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = sext i64 %4 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %3 to i128
  %11 = or i128 %7, %10
  %12 = zext i64 %4 to i128
  %13 = or i128 %9, %12
  %14 = mul  i128 %13, %11
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %2, align 8
  %16 = sext i64 %15 to i128
  %17 = icmp ne i128 %16, %14
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = trunc i128 %14 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #22
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i64 %15, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %32, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_imulq__0x278___rcx___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %9, i64 632)
  ret %struct.Memory* %12
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = add i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = icmp ult i64 %6, %3
  %8 = icmp ult i64 %6, %4
  %9 = or i1 %7, %8
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #22
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %4, %3
  %20 = xor i64 %19, %6
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i64 %6, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %6, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %3, 63
  %32 = lshr i64 %4, 63
  %33 = xor i64 %28, %31
  %34 = xor i64 %28, %32
  %35 = add   i64 %33, %34
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_addq__rcx___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RCX
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %12, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64) #8 {
  %5 = inttoptr i64 %2 to i64*
  store i64 %3, i64* %5
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movq__rax__MINUS0x38__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 56
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #0 {
  %5 = inttoptr i64 %3 to i32*
  %6 = load i32, i32* %5
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movl_0x7247a0___edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 ptrtoint( %G_0x7247a0_type* @G_0x7247a0 to i64))
  ret %struct.Memory* %11
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64) #8 {
  %5 = trunc i64 %3 to i32
  %6 = inttoptr i64 %2 to i32*
  store i32 %5, i32* %6
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movl__edx__MINUS0x3c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 60
  %14 = load i32, i32* %EDX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}



define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64) #0 {
  %5 = inttoptr i64 %2 to i32*
  %6 = load i32, i32* %5
  %7 = trunc i64 %3 to i32
  %8 = sub i32 %6, %7
  %9 = icmp ult i32 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #22
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, %7
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %30, %31
  %33 = xor i32 %27, %30
  %34 = add   i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_cmpl__0x1__0x18__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 24
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 1)
  ret %struct.Memory* %13
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETZI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_sete__sil(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4SETZI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i8* %SIL)
  ret %struct.Memory* %12
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #22
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_andb__0x1___sil(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = load i8, i8* %SIL
  %11 = zext i8 %10 to i64
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 4
  store i64 %13, i64* %PC
  %14 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i8* %SIL, i64 %11, i64 1)
  ret %struct.Memory* %14
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 255
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movzbl__sil___edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RDX = bitcast %union.anon* %12 to i64*
  %13 = load i8, i8* %SIL
  %14 = zext i8 %13 to i64
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movl__edx__MINUS0x40__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 64
  %14 = load i32, i32* %EDX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movq_0x68__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 104
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq__rax__MINUS0x48__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 72
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x70fcf0_type* @G_0x70fcf0 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x1918__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 6424
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq__rax__MINUS0x50__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 80
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movq_0x1940__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 6464
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq__rax__MINUS0x58__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 88
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 72400
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %2, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_je_.L_48dc64(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 56
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_cmpl__0x0__0x214__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 532
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}



define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 4294967295
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movl__0x2___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 5
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 2)
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movl__0x4___ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 5
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 4)
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 ptrtoint( %G_0x6cb900_type* @G_0x6cb900 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movl_0xc__rdx____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = add i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__eax__MINUS0x74__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 116
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 4294967295
  store i64 %5, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movl__esi___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %ESI
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 2
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CDQ_EAXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = lshr i64 %7, 32
  store i64 %8, i64* %3, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_cltd(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 1
  store i64 %7, i64* %PC
  %8 = call %struct.Memory* @_ZN12_GLOBAL__N_1L7CDQ_EAXEP6MemoryR5State(%struct.Memory* %2, %struct.State* %0)
  ret %struct.Memory* %8
}


define %struct.Memory* @routine_movl_MINUS0x74__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 116
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(3376), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.anon* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.anon* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = shl i64 %2, 32
  %13 = ashr exact i64 %12, 32
  %14 = shl  i64 %11, 32
  %15 = or i64 %14, %7
  %16 = sdiv i64 %15, %13
  %17 = shl i64 %16, 32
  %18 = ashr exact i64 %17, 32
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %1, i64 %22, %struct.Memory* %0) #21
  br label %36

; <label>:24:                                     ; preds = %3
  %25 = srem i64 %15, %13
  %26 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %27 = and i64 %16, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %24, %20
  %37 = phi %struct.Memory* [ %23, %20 ], [ %0, %24 ]
  ret %struct.Memory* %37
}

define %struct.Memory* @routine_idivl__esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = load i32, i32* %ESI
  %10 = zext i32 %9 to i64
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %10)
  ret %struct.Memory* %13
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64) #0 {
  %5 = trunc i64 %2 to i32
  %6 = trunc i64 %3 to i32
  %7 = sub i32 %5, %6
  %8 = icmp ult i32 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #22
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i32
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = lshr i32 %6, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add   i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_cmpl__0x0___edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = load i32, i32* %EDX
  %10 = zext i32 %9 to i64
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 3
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(3376), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_cmovnel__ecx___esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %ECX
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__esi__MINUS0x78__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 120
  %14 = load i32, i32* %ESI
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %4, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_jmpq_.L_48dc6e(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #22
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_xorl__eax___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i32, i32* %EAX
  %14 = zext i32 %13 to i64
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movl__eax__MINUS0x78__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 120
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_MINUS0x78__rbp____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 120
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__eax__MINUS0x5c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 92
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64) #8 {
  %5 = trunc i64 %3 to i32
  %6 = inttoptr i64 %2 to i32*
  store i32 %5, i32* %6
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 16
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_cmpl__0x10__MINUS0x10__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 16
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 16)
  ret %struct.Memory* %13
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  %12 = xor i1 %8, %11
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %2, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = select i1 %12, i64 %4, i64 %3
  store i64 %16, i64* %15, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_jge_.L_48dd5d(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 12
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_cmpl__0x10__MINUS0xc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 12
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 16)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jge_.L_48dd4a(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #2 {
  store i64 %3, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movq__0x725320___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 10
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G__0x725320_type* @G__0x725320 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %12 [
    i6 0, label %41
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 1
  %9 = icmp slt i64 %3, 0
  %10 = icmp slt i64 %8, 0
  %11 = xor i1 %9, %10
  br label %19

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 63
  %14 = add  i64 %13, -1
  %15 = shl i64 %3, %14
  %16 = icmp slt i64 %15, 0
  %17 = icmp ne i8 0, 0
  %18 = shl i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %12, %7
  %20 = phi i1 [ %9, %7 ], [ %16, %12 ]
  %21 = phi i1 [ %11, %7 ], [ %17, %12 ]
  %22 = phi i64 [ %8, %7 ], [ %18, %12 ]
  store i64 %22, i64* %2, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = zext i1 %20 to i8
  store i8 %24, i8* %23, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %26 = trunc i64 %22 to i32
  %27 = and i32 %26, 254
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) #22
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %25, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = icmp eq i64 %22, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %37 = lshr i64 %22, 63
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* %36, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = zext i1 %21 to i8
  store i8 %40, i8* %39, align 1
  br label %41

; <label>:41:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_shlq__0x5___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %9, i64 5)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i16* nocapture, i64) #0 {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  store i16 %6, i16* %2, align 2
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movw___rax__rcx_2____dx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %DX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i16* %DX, i64 %18)
  ret %struct.Memory* %21
}


define %struct.Memory* @routine_movq_MINUS0x50__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 80
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl_0x9c__rcx____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 156
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7
  %9 = add i32 %8, %6
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %2, align 8
  %11 = icmp ult i32 %9, %6
  %12 = icmp ult i32 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %9, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #22
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %8, %6
  %23 = xor i32 %22, %9
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %9, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %9, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %6, 31
  %35 = lshr i32 %8, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add   i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 16
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %12, i64 %14)
  ret %struct.Memory* %17
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #2 {
  %5 = shl i64 %3, 32
  %6 = ashr exact i64 %5, 32
  store i64 %6, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movslq__esi___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %ESI
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RCX
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x98__rcx____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 152
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 12
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %12, i64 %14)
  ret %struct.Memory* %17
}



define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64) #8 {
  %5 = trunc i64 %3 to i16
  %6 = inttoptr i64 %2 to i16*
  store i16 %5, i16* %6
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movw__dx____rax__rcx_2_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %DX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i16, i16* %DX
  %20 = zext i16 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}






define %struct.Memory* @routine_je_.L_48dd37(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}











define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #0 {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = zext i16 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movzwl___rax__rcx_2____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %18)
  ret %struct.Memory* %21
}


define %struct.Memory* @routine_movq_0x6d4518___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x6d4518_type* @G_0x6d4518 to i64))
  ret %struct.Memory* %11
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = add i64 %4, %3
  store i64 %6, i64* %2, align 8
  %7 = icmp ult i64 %6, %3
  %8 = icmp ult i64 %6, %4
  %9 = or i1 %7, %8
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #22
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i64 %4, %3
  %20 = xor i64 %19, %6
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i64 %6, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %6, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %3, 63
  %32 = lshr i64 %4, 63
  %33 = xor i64 %28, %31
  %34 = xor i64 %28, %32
  %35 = add   i64 %33, %34
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_addq__0x8___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %9, i64 8)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_shlq__0x6___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %9, i64 6)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_movl__edx____rax__rcx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 4
  %18 = add i64 %17, %15
  %19 = load i32, i32* %EDX
  %20 = zext i32 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 3
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}


define %struct.Memory* @routine_jmpq_.L_48dd3c(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #22
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %8
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %6, 31
  %35 = lshr i32 %7, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add   i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_addl__0x1___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %9, i64 1)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jmpq_.L_48dc8c(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48dd4f(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jmpq_.L_48dc7b(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_cmpl__0x0__0x11bfc__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 72700
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_je_.L_48df12(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}







define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64, i64) #0 {
  %5 = trunc i64 %2 to i32
  %6 = inttoptr i64 %3 to i32*
  %7 = load i32, i32* %6
  %8 = sub i32 %5, %7
  %9 = icmp ult i32 %5, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #22
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %5
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add   i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_cmpl_0x11c08__rcx____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EAX
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %RCX
  %15 = add i64 %14, 72712
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jge_.L_48df0d(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}








define %struct.Memory* @routine_cmpl_0x11c04__rcx____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EAX
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %RCX
  %15 = add i64 %14, 72708
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jge_.L_48defa(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq__0x6f9360___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 10
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G__0x6f9360_type* @G__0x6f9360 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq__0x726210___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 10
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 ptrtoint( %G__0x726210_type* @G__0x726210 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_shlq__0x5___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %9, i64 5)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_addq__rdx___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %RDX
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %12, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movw___rcx__rdx_2____si(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %SI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RCX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i16* %SI, i64 %18)
  ret %struct.Memory* %21
}


define %struct.Memory* @routine_movq_MINUS0x58__rbp____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 88
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___rcx____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_movl_0xa4__rdx____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = add i64 %12, 164
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl_MINUS0x10__rbp____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 16
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movslq__edi___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EDI
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %RDX
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0xa0__rdx____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = add i64 %12, 160
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl_MINUS0xc__rbp____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 12
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %12, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movw__si____rcx__rdx_2_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %SI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RCX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i16, i16* %SI
  %20 = zext i16 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}










define %struct.Memory* @routine_movw___rax__rcx_2____si(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %SI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i16* %SI, i64 %18)
  ret %struct.Memory* %21
}


define %struct.Memory* @routine_movq_MINUS0x58__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 88
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 8
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}




define %struct.Memory* @routine_movl_0xa4__rcx____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 164
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movslq__edi___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EDI
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movl_0xa0__rcx____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 160
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movw__si____rax__rcx_2_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %SI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i16, i16* %SI
  %20 = zext i16 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}






define %struct.Memory* @routine_je_.L_48dee7(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}














define %struct.Memory* @routine_movzwl___rcx__rdx_2____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RCX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %18)
  ret %struct.Memory* %21
}


define %struct.Memory* @routine_movq_0x6d4518___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 ptrtoint( %G_0x6d4518_type* @G_0x6d4518 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_addq__0x408___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %9, i64 1032)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_shlq__0x6___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %9, i64 6)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_movl__esi____rcx__rdx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RCX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 4
  %18 = add i64 %17, %15
  %19 = load i32, i32* %ESI
  %20 = zext i32 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 3
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}










define %struct.Memory* @routine_movzwl___rax__rcx_2____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %18)
  ret %struct.Memory* %21
}




define %struct.Memory* @routine_addq__0x808___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 6
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %9, i64 2056)
  ret %struct.Memory* %12
}










define %struct.Memory* @routine_movl__esi____rax__rcx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 4
  %18 = add i64 %17, %15
  %19 = load i32, i32* %ESI
  %20 = zext i32 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 3
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}


define %struct.Memory* @routine_jmpq_.L_48deec(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48dd97(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48deff(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48dd79(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48df12(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_movq_0x6cc5f0___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x6cc5f0_type* @G_0x6cc5f0 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq__rax__MINUS0x20__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 32
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movq_0x3738__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 14136
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq__rax__0x6cc5f0(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 8
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 ptrtoint( %G_0x6cc5f0_type* @G_0x6cc5f0 to i64), i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq_MINUS0x20__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 32
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movq__rax__0x3738__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 14136
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movq_0x6cc600___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x6cc600_type* @G_0x6cc600 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq__rax__MINUS0x28__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 40
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movq_0x3740__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 14144
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq__rax__0x6cc600(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 8
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 ptrtoint( %G_0x6cc600_type* @G_0x6cc600 to i64), i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq_MINUS0x28__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 40
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movq__rax__0x3740__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 14144
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movl_0x6d4688___edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 ptrtoint( %G_0x6d4688_type* @G_0x6d4688 to i64))
  ret %struct.Memory* %11
}




define %struct.Memory* @routine_movl__edx__0x1cc__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 460
  %14 = load i32, i32* %EDX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movq_0x6f8f10___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x6f8f10_type* @G_0x6f8f10 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 56
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq__rax__0x1d0__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 464
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movl_MINUS0x3c__rbp____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 60
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__edx__0x48__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 72
  %14 = load i32, i32* %EDX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}






define %struct.Memory* @routine_je_.L_48e221(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 60
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__eax__0xc98__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 3224
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x11abc__rcx____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 72380
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__eax__0xd00__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 3328
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movl_0x6d4688___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x6d4688_type* @G_0x6d4688 to i64))
  ret %struct.Memory* %11
}




define %struct.Memory* @routine_movl__eax__0xc88__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 3208
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movq_0x6f8f10___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 ptrtoint( %G_0x6f8f10_type* @G_0x6f8f10 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x6d4518___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 ptrtoint( %G_0x6d4518_type* @G_0x6d4518 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq__rcx__0xc90__rdx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = add i64 %12, 3216
  %14 = load i64, i64* %RCX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}






define %struct.Memory* @routine_movl__eax__0xc18__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 3096
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x250__rcx____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 592
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__eax__0xd14__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 3348
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x254__rcx____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 596
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__eax__0xd18__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 3352
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0xc__rcx____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__eax__0xd10__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 3344
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}








define %struct.Memory* @routine_movl_0x11bf4__rcx____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 72692
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl__0x4___edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %9, i64 4)
  ret %struct.Memory* %12
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64, i64) #0 {
  %5 = trunc i64 %2 to i32
  %6 = trunc i64 %3 to i32
  %7 = sub i32 %5, %6
  %8 = icmp ult i32 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #22
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i32
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = lshr i32 %6, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add   i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_cmpl__edx___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = load i32, i32* %EAX
  %13 = zext i32 %12 to i64
  %14 = load i32, i32* %EDX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 2
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jge_.L_48e169(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_cmpl__0x4__MINUS0x10__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 16
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 4)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jge_.L_48e156(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 20
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_cmpl__0x2__MINUS0x14__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 20
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 2)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jge_.L_48e143(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl__0x0__MINUS0x2c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 44
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_cmpl__0x41__MINUS0x2c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 44
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 65)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jge_.L_48e130(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}














define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 20
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 44
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 4
  %18 = add i64 %17, %15
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 3
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %18)
  ret %struct.Memory* %21
}




define %struct.Memory* @routine_movq_0xc08__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 3080
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


















define %struct.Memory* @routine_movl_MINUS0x2c__rbp____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 44
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 44
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jmpq_.L_48e0bc(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48e135(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 20
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 20
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jmpq_.L_48e0ab(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48e148(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48e09a(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48e15b(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48e077(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_cmpl__0x3__MINUS0xc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 12
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 3)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jge_.L_48e21c(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_jge_.L_48e209(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_cmpl__0x12__MINUS0x2c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 44
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 18)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jge_.L_48e1f6(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




















define %struct.Memory* @routine_movq_0xc10__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 3088
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}




















define %struct.Memory* @routine_jmpq_.L_48e192(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48e1fb(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48e181(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48e20e(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48e170(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48e221(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_cmpl__0x4__MINUS0xc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 12
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 4)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jge_.L_48e2ce(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #0 {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = sext i16 %6 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movswl_0x6cea20___rax_2____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = mul i64 %12, 2
  %14 = add i64 %13, 7137824
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 8
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %14)
  ret %struct.Memory* %17
}






define %struct.Memory* @routine_movl__ecx__0x1d8__rax__rdx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 472
  %19 = add i64 %18, %17
  %20 = load i32, i32* %ECX
  %21 = zext i32 %20 to i64
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 7
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %19, i64 %21)
  ret %struct.Memory* %24
}




define %struct.Memory* @routine_movswl_0x6d452c___rax_2____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = mul i64 %12, 2
  %14 = add i64 %13, 7161132
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 8
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %14)
  ret %struct.Memory* %17
}






define %struct.Memory* @routine_movl__ecx__0x1e8__rax__rdx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 488
  %19 = add i64 %18, %17
  %20 = load i32, i32* %ECX
  %21 = zext i32 %20 to i64
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 7
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %19, i64 %21)
  ret %struct.Memory* %24
}






define %struct.Memory* @routine_je_.L_48e2bb(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}










define %struct.Memory* @routine_movl__ecx__0xc20__rax__rdx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 3104
  %19 = add i64 %18, %17
  %20 = load i32, i32* %ECX
  %21 = zext i32 %20 to i64
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 7
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %19, i64 %21)
  ret %struct.Memory* %24
}










define %struct.Memory* @routine_movl__ecx__0xc30__rax__rdx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 3120
  %19 = add i64 %18, %17
  %20 = load i32, i32* %ECX
  %21 = zext i32 %20 to i64
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 7
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %19, i64 %21)
  ret %struct.Memory* %24
}


define %struct.Memory* @routine_jmpq_.L_48e2c0(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48e228(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_cmpl__0x1__0x48__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 72
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 1)
  ret %struct.Memory* %13
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_jne_.L_48e2f2(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl_0x6d2080___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x6d2080_type* @G_0x6d2080 to i64))
  ret %struct.Memory* %11
}




define %struct.Memory* @routine_movl__eax__0x244__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 580
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jmpq_.L_48e300(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_movl__0x0__0x244__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 580
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 10
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_cmpl__0x8__MINUS0x3c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 60
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 8)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jne_.L_48e337(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_cmpl__0x0__0x723710(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC
  %8 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 ptrtoint( %G_0x723710_type* @G_0x723710 to i64), i64 0)
  ret %struct.Memory* %8
}




define %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x6cb8f8_type* @G_0x6cb8f8 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_cmpl__0x0__0xc94__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 3220
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_je_.L_48e337(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl__0x1___edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 5
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 1)
  ret %struct.Memory* %11
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8
  store i64 %7, i64* %5, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %9, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_callq_.RestoreMV8x8(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %2, %struct.State* %0, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_movl_0x1cc__rax____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 460
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #22
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_andl__0xf___ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %9, i64 15)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = load i32, i32* %ECX
  %10 = zext i32 %9 to i64
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 3
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jne_.L_48e37c(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_cmpl__0x9__0x48__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 72
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 9)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_je_.L_48e37c(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_cmpl__0xd__0x48__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 72
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 13)
  ret %struct.Memory* %13
}






define %struct.Memory* @routine_movl__0x0__0x23c__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 572
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 10
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jmpq_.L_48e38d(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_movl_0x723710___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x723710_type* @G_0x723710 to i64))
  ret %struct.Memory* %11
}




define %struct.Memory* @routine_movl__eax__0x23c__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 572
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x23c__rax____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 572
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__ecx__0xd08__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 3336
  %14 = load i32, i32* %ECX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_cmpl__0x2__0x9a0__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 2464
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 2)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jne_.L_48e402(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_je_.L_48e402(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}



define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(3376), i8* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i8
  store i8 %5, i8* %2, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movb__al___cl(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = load i8, i8* %AL
  %15 = zext i8 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 2
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i8* %CL, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movq_0x6cb918___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 ptrtoint( %G_0x6cb918_type* @G_0x6cb918 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x30__rdx____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = add i64 %9, 48
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 ptrtoint( %G_0x6cb900_type* @G_0x6cb900 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movslq_0x88__rsi____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = add i64 %9, 136
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = load i64, i64* %RSI
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movslq_0x8c__rsi____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = add i64 %9, 140
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %10)
  ret %struct.Memory* %13
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64) #8 {
  %5 = trunc i64 %3 to i8
  %6 = inttoptr i64 %2 to i8*
  store i8 %5, i8* %6
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movb__cl____rdx__rsi_1_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %RDX = bitcast %union.anon* %12 to i64*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RSI = bitcast %union.anon* %15 to i64*
  %16 = load i64, i64* %RDX
  %17 = load i64, i64* %RSI
  %18 = add i64 %17, %16
  %19 = load i8, i8* %CL
  %20 = zext i8 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 3
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}






define %struct.Memory* @routine_jge_.L_48edd8(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_jge_.L_48edc5(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__eax__MINUS0x7c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 124
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movl__edx___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EDX
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 2
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl_MINUS0x7c__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 124
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl_MINUS0x10__rbp____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__eax__MINUS0x80__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 128
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movl__edi___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EDI
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 2
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}





define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %13 [
    i5 0, label %45
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = shl i32 %8, 1
  %10 = icmp slt i32 %8, 0
  %11 = icmp slt i32 %9, 0
  %12 = xor i1 %10, %11
  br label %23

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add   i64 %14, 4294967295
  %16 = and i64 %3, 4294967295
  %17 = and i64 %15, 4294967295
  %18 = shl i64 %16, %17
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 0
  %21 = icmp ne i8 0, 0
  %22 = shl i32 %19, 1
  br label %23

; <label>:23:                                     ; preds = %13, %7
  %24 = phi i1 [ %10, %7 ], [ %20, %13 ]
  %25 = phi i1 [ %12, %7 ], [ %21, %13 ]
  %26 = phi i32 [ %9, %7 ], [ %22, %13 ]
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %2, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %29 = zext i1 %24 to i8
  store i8 %29, i8* %28, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 254
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #22
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %26, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %26, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = zext i1 %25 to i8
  store i8 %44, i8* %43, align 1
  br label %45

; <label>:45:                                     ; preds = %23, %5
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_shll__0x1___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 2
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %9, i64 1)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl_MINUS0x80__rbp____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 128
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(3376), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #22
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %8
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %6, 31
  %35 = lshr i32 %7, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add   i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_addl__eax___edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = load i32, i32* %EAX
  %14 = zext i32 %13 to i64
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movslq__edi___r8(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 17
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R8 = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EDI
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R8, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_cmpl__0x1__0x1e8__rcx__r8_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 17
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R8 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %R8
  %14 = mul i64 %13, 4
  %15 = add i64 %12, 488
  %16 = add i64 %15, %14
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 9
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %16, i64 1)
  ret %struct.Memory* %19
}


define %struct.Memory* @routine_je_.L_48e48a(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}










define %struct.Memory* @routine_cmpl__0xa__0x48__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 72
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 10)
  ret %struct.Memory* %13
}








define %struct.Memory* @routine_jne_.L_48e5e0(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 6480
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq___rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_movl_0x90__rcx____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 144
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 12
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movslq__edx___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EDX
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movl_0x94__rcx____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 148
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 16
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %12, i64 %14)
  ret %struct.Memory* %17
}



define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64) #8 {
  %5 = trunc i64 %3 to i16
  %6 = inttoptr i64 %2 to i16*
  store i16 %5, i16* %6
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RCX
  %14 = mul i64 %13, 2
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %15, i64 -1)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movq_0x1958__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 6488
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}





















define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(3376), i64, i64) #8 {
  %5 = inttoptr i64 %2 to i64*
  store i64 %3, i64* %5
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movq__0xffffffffffffffff____rax__rcx_8_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RCX
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 8
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %15, i64 -1)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 6504
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}
























define %struct.Memory* @routine_movw__0x0____rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 5
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %9, i64 0)
  ret %struct.Memory* %12
}




























define %struct.Memory* @routine_movw__0x0__0x2__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 2
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 6
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}






define %struct.Memory* @routine_je_.L_48e5db(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_addq__0xcc0___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 6
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %9, i64 3264)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_shlq__0x3___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %9, i64 3)
  ret %struct.Memory* %12
}








define %struct.Memory* @routine_jmpq_.L_48ebe2(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_cmpl__0x0__0x244__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 580
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_je_.L_48e8ce(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}








define %struct.Memory* @routine_movl__eax__MINUS0x84__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 132
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}






define %struct.Memory* @routine_movl_MINUS0x84__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 132
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movl__eax__MINUS0x88__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 136
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0x88__rbp____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 136
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_cmpl__0x2__0x1e8__rcx__r8_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 17
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R8 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %R8
  %14 = mul i64 %13, 4
  %15 = add i64 %12, 488
  %16 = add i64 %15, %14
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 9
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %16, i64 2)
  ret %struct.Memory* %19
}


define %struct.Memory* @routine_jne_.L_48e8ce(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}










define %struct.Memory* @routine_cmpl__0x1__0x244__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 580
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 1)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jne_.L_48e673(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_movq_0x11900__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 71936
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq__rax__MINUS0x90__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 144
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_jmpq_.L_48e689(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_movq_0x11908__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 71944
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}




define %struct.Memory* @routine_movq_MINUS0x90__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 144
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__0x2___ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 5
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 2)
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq__rax__MINUS0x68__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 104
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}










define %struct.Memory* @routine_movl_0x90__rdx____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = add i64 %12, 144
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movslq__esi___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %ESI
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RDX
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x94__rdx____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = add i64 %12, 148
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movw__0x0____rax__rdx_2_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RDX
  %14 = mul i64 %13, 2
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %15, i64 0)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_addq__0x18___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %9, i64 24)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl_MINUS0x5c__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 92
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl__0x0___esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %9, i64 0)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_imulq__0x108___rdx___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %9, i64 264)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_addq__rdx___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RDX
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %12, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 ptrtoint( %G_0x70fcf0_type* @G_0x70fcf0 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x1958__rdx____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = add i64 %9, 6488
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq___rdx____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 ptrtoint( %G_0x6cb900_type* @G_0x6cb900 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movl_0x90__rdi____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = add i64 %12, 144
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movslq__esi___rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %ESI
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___rdx__rdi_8____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = load i64, i64* %RDI
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x94__rdi____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = add i64 %12, 148
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movq__rax____rdx__rdi_8_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RDX
  %16 = load i64, i64* %RDI
  %17 = mul i64 %16, 8
  %18 = add i64 %17, %15
  %19 = load i64, i64* %RAX
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC
  %22 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %19)
  ret %struct.Memory* %22
}


define %struct.Memory* @routine_movq_MINUS0x68__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 104
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}














define %struct.Memory* @routine_movq_MINUS0x38__rbp____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 56
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl_MINUS0xc__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq__rax__MINUS0x98__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 152
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movq__rdx__MINUS0xa0__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 160
  %14 = load i64, i64* %RDX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_idivl__ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = load i32, i32* %ECX
  %10 = zext i32 %9 to i64
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movl_MINUS0x10__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__eax__MINUS0xa4__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 164
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0xa4__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 164
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl__eax___esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i32, i32* %EAX
  %14 = zext i32 %13 to i64
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %12, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movq_MINUS0xa0__rbp____r8(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 17
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R8 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 160
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R8, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movslq_0x1d8__r8__rdi_4____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 17
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R8 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %R8
  %13 = load i64, i64* %RDI
  %14 = mul i64 %13, 4
  %15 = add i64 %12, 472
  %16 = add i64 %15, %14
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 8
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %16)
  ret %struct.Memory* %19
}


define %struct.Memory* @routine_movq_MINUS0x98__rbp____r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 152
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___r9__rdi_8____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %R9
  %13 = load i64, i64* %RDI
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movw___rdi____r10w(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10W = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i16* %R10W, i64 %12)
  ret %struct.Memory* %15
}


define %struct.Memory* @routine_movq_0x70fcf0___rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 ptrtoint( %G_0x70fcf0_type* @G_0x70fcf0 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x1968__rdi____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDI
  %10 = add i64 %9, 6504
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq___rdi____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDI
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq_0x6cb900___r11(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 23
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R11 = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R11, i64 ptrtoint( %G_0x6cb900_type* @G_0x6cb900 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movl_0x90__r11____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %R11
  %13 = add i64 %12, 144
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 12
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movslq__eax___r11(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EAX
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R11, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___rdi__r11_8____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = load i64, i64* %R11
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x94__r11____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %R11
  %13 = add i64 %12, 148
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 16
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %12, i64 %14)
  ret %struct.Memory* %17
}






define %struct.Memory* @routine_movw__r10w____rdi_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10W = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = load i16, i16* %R10W
  %14 = zext i16 %13 to i64
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movq_MINUS0x68__rbp____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 104
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r11(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R11, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movslq_MINUS0x10__rbp____r11(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R11, i64 %13)
  ret %struct.Memory* %16
}








define %struct.Memory* @routine_movq_MINUS0x38__rbp____r11(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 56
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R11, i64 %13)
  ret %struct.Memory* %16
}










define %struct.Memory* @routine_movl__eax__MINUS0xa8__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 168
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0xa8__rbp____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 168
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_addl__eax___ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i32, i32* %EAX
  %14 = zext i32 %13 to i64
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movslq__ecx___rbx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %ECX
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RBX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movslq_0x1d8__r11__rbx_4____r11(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 3
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %R11
  %13 = load i64, i64* %RBX
  %14 = mul i64 %13, 4
  %15 = add i64 %12, 472
  %16 = add i64 %15, %14
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 8
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R11, i64 %16)
  ret %struct.Memory* %19
}




define %struct.Memory* @routine_movw_0x2__rdi____r10w(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10W = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = add i64 %12, 2
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 5
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i16* %R10W, i64 %13)
  ret %struct.Memory* %16
}




























define %struct.Memory* @routine_movw__r10w__0x2__rdi_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10W = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDI
  %13 = add i64 %12, 2
  %14 = load i16, i16* %R10W
  %15 = zext i16 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 5
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_cmpl__0x0__0x11ad0__rdi_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDI
  %10 = add i64 %9, 72400
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_je_.L_48e8c9(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}














define %struct.Memory* @routine_movw__0x0____rax__rcx_2_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RCX
  %14 = mul i64 %13, 2
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %15, i64 0)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_jmpq_.L_48ebdd(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_movq__0x6d1290___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 10
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 ptrtoint( %G__0x6d1290_type* @G__0x6d1290 to i64))
  ret %struct.Memory* %11
}




define %struct.Memory* @routine_shlq__0x3___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %9, i64 3)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq__rcx___rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 3
  store i64 %14, i64* %PC
  %15 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %12)
  ret %struct.Memory* %15
}


define %struct.Memory* @routine_addq__rdx___rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %RDX
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %12, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movw___rsi__rdx_2____di(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %DI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RSI
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i16* %DI, i64 %18)
  ret %struct.Memory* %21
}




define %struct.Memory* @routine_movq_0x1950__rdx____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = add i64 %9, 6480
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %10)
  ret %struct.Memory* %13
}






define %struct.Memory* @routine_movl_0x90__rsi____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i64, i64* %RSI
  %14 = add i64 %13, 144
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_addl_MINUS0xc__rbp____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i32, i32* %R8D
  %14 = zext i32 %13 to i64
  %15 = load i64, i64* %RBP
  %16 = sub i64 %15, 12
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14, i64 %16)
  ret %struct.Memory* %19
}


define %struct.Memory* @routine_movslq__r8d___rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %R8D
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movl_0x94__rsi____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i64, i64* %RSI
  %14 = add i64 %13, 148
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_addl_MINUS0x10__rbp____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i32, i32* %R8D
  %14 = zext i32 %13 to i64
  %15 = load i64, i64* %RBP
  %16 = sub i64 %15, 16
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14, i64 %16)
  ret %struct.Memory* %19
}




define %struct.Memory* @routine_movw__di____rdx__rsi_2_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %DI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RDX
  %16 = load i64, i64* %RSI
  %17 = mul i64 %16, 2
  %18 = add i64 %17, %15
  %19 = load i16, i16* %DI
  %20 = zext i16 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}




define %struct.Memory* @routine_addq__0x18___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %9, i64 24)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movl_MINUS0x5c__rbp____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 92
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_addl__0x0___r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = bitcast i32* %R8D to i64*
  %10 = load i32, i32* %R8D
  %11 = zext i32 %10 to i64
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 4
  store i64 %13, i64* %PC
  %14 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %9, i64 %11, i64 0)
  ret %struct.Memory* %14
}




define %struct.Memory* @routine_imulq__0x108___rsi___rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %9, i64 264)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_addq__rsi___rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RDX
  %13 = load i64, i64* %RSI
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %12, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq_0x70fcf0___rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 ptrtoint( %G_0x70fcf0_type* @G_0x70fcf0 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x1950__rsi____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = add i64 %9, 6480
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movq___rsi____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 19
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R9 = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 ptrtoint( %G_0x6cb900_type* @G_0x6cb900 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movl_0x90__r9____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i64, i64* %R9
  %14 = add i64 %13, 144
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movslq__r8d___r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %R8D
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___rsi__r9_8____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %R9
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x94__r9____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i64, i64* %R9
  %14 = add i64 %13, 148
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}





define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(3376), i64* nocapture, i64) #0 {
  %5 = inttoptr i64 %3 to i16*
  %6 = load i16, i16* %5
  %7 = sext i16 %6 to i64
  store i64 %7, i64* %2, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_movswq___rsi__r9_2____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %R9
  %14 = mul i64 %13, 2
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 5
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %15)
  ret %struct.Memory* %18
}






define %struct.Memory* @routine_movq_0x1958__rsi____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = add i64 %9, 6488
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %10)
  ret %struct.Memory* %13
}






















define %struct.Memory* @routine_movq__rdx____rsi__r9_8_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 19
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %R9 = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RSI
  %16 = load i64, i64* %R9
  %17 = mul i64 %16, 8
  %18 = add i64 %17, %15
  %19 = load i64, i64* %RDX
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC
  %22 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %19)
  ret %struct.Memory* %22
}




define %struct.Memory* @routine_movq_0x118f8__rdx____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = add i64 %9, 71928
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}








define %struct.Memory* @routine_shlq__0x3___rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %9, i64 3)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq__rcx___r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 3
  store i64 %14, i64* %PC
  %15 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 %12)
  ret %struct.Memory* %15
}


define %struct.Memory* @routine_addq__rsi___r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %R9
  %13 = load i64, i64* %RSI
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 %12, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movswq___r9__rsi_2____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %R9
  %13 = load i64, i64* %RSI
  %14 = mul i64 %13, 2
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 5
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movq_MINUS0x38__rbp____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 56
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl_MINUS0xc__rbp____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 12
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movl__eax__MINUS0xac__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 172
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movl__r8d___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %R8D
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq__rdx__MINUS0xb8__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 184
  %14 = load i64, i64* %RDX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movl_MINUS0xac__rbp____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 172
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_idivl__r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = load i32, i32* %R8D
  %10 = zext i32 %9 to i64
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 3
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %10)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_movl_MINUS0x10__rbp____r10d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R10D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 16
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_movl__eax__MINUS0xbc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 188
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movl__r10d___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %R10D
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}








define %struct.Memory* @routine_movl_MINUS0xbc__rbp____r10d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R10D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 188
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_addl__eax___r10d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 21
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R10D = bitcast %union.anon* %11 to i32*
  %12 = bitcast i32* %R10D to i64*
  %13 = load i32, i32* %R10D
  %14 = zext i32 %13 to i64
  %15 = load i32, i32* %EAX
  %16 = zext i32 %15 to i64
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 3
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14, i64 %16)
  ret %struct.Memory* %19
}


define %struct.Memory* @routine_movslq__r10d___r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %R10D
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movslq_0x1d8__rsi__r9_4____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %R9
  %14 = mul i64 %13, 4
  %15 = add i64 %12, 472
  %16 = add i64 %15, %14
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 8
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %16)
  ret %struct.Memory* %19
}


define %struct.Memory* @routine_movq_MINUS0xb8__rbp____r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 184
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq___r9__rsi_8____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %R9
  %13 = load i64, i64* %RSI
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movw___rsi____di(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %DI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 3
  store i64 %14, i64* %PC
  %15 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i16* %DI, i64 %12)
  ret %struct.Memory* %15
}




define %struct.Memory* @routine_movq_0x1968__rsi____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = add i64 %9, 6504
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %10)
  ret %struct.Memory* %13
}












define %struct.Memory* @routine_movq___rsi__r11_8____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %R11
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %15)
  ret %struct.Memory* %18
}












define %struct.Memory* @routine_movw__di____rsi_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %DI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i16, i16* %DI
  %14 = zext i16 %13 to i64
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 3
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %12, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movq_0x118f8__rsi____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = add i64 %9, 71928
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %10)
  ret %struct.Memory* %13
}














define %struct.Memory* @routine_shlq__0x3___r11(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 23
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R11 = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %R11
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %R11, i64 %9, i64 3)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_addq__r11___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %R11
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %12, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movswq___rcx__r11_2____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %R11
  %14 = mul i64 %13, 2
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 5
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movq___rsi__rcx_8____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %RCX
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %15)
  ret %struct.Memory* %18
}












define %struct.Memory* @routine_movl__eax__MINUS0xc0__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 192
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0xc0__rbp____r10d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R10D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 192
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movslq__r10d___r11(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %R10D
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R11, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movslq_0x1d8__rsi__r11_4____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 23
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R11 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = load i64, i64* %R11
  %14 = mul i64 %13, 4
  %15 = add i64 %12, 472
  %16 = add i64 %15, %14
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 8
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %16)
  ret %struct.Memory* %19
}


define %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %RSI
  %14 = mul i64 %13, 8
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movw_0x2__rcx____di(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %DI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 2
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i16* %DI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movq_0x70fcf0___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 ptrtoint( %G_0x70fcf0_type* @G_0x70fcf0 to i64))
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_movq_0x1968__rcx____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = add i64 %9, 6504
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %10)
  ret %struct.Memory* %13
}






define %struct.Memory* @routine_movl_0x90__rsi____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = add i64 %12, 144
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movslq__eax___rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i32, i32* %EAX
  %13 = zext i32 %12 to i64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movl_0x94__rsi____eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSI
  %13 = add i64 %12, 148
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}








define %struct.Memory* @routine_movw__di__0x2__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %DI = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 2
  %14 = load i16, i16* %DI
  %15 = zext i16 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_cmpl__0x0__0x11ad0__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = add i64 %9, 72400
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_je_.L_48ebd8(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq__0x6d1290___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 10
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G__0x6d1290_type* @G__0x6d1290 to i64))
  ret %struct.Memory* %11
}




































define %struct.Memory* @routine_movl__eax__MINUS0xc4__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 196
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}






define %struct.Memory* @routine_movl_MINUS0xc4__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 196
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movl__eax__MINUS0xc8__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 200
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0xc8__rbp____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 200
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_cmpl__0x0__0x1e8__rcx__r8_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 17
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R8 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = load i64, i64* %R8
  %14 = mul i64 %13, 4
  %15 = add i64 %12, 488
  %16 = add i64 %15, %14
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 9
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %16, i64 0)
  ret %struct.Memory* %19
}


define %struct.Memory* @routine_je_.L_48ec54(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


















define %struct.Memory* @routine_jne_.L_48edb2(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


















































































































define %struct.Memory* @routine_je_.L_48edad(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_addq__0x20___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %9, i64 32)
  ret %struct.Memory* %12
}












define %struct.Memory* @routine_jmpq_.L_48edb2(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48edb7(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48e41a(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48edca(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48e409(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_cmpl__0x0__MINUS0x40__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 64
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 0)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_je_.L_48f616(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_jge_.L_48f611(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_jge_.L_48f5fe(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_je_.L_48ee76(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




















define %struct.Memory* @routine_movl__eax__MINUS0xcc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 204
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}






define %struct.Memory* @routine_movl_MINUS0xcc__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 204
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movl__eax__MINUS0xd0__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 208
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0xd0__rbp____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 208
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}








define %struct.Memory* @routine_jne_.L_48efd4(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


















































































































define %struct.Memory* @routine_je_.L_48efcf(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


















define %struct.Memory* @routine_jmpq_.L_48f5eb(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}






define %struct.Memory* @routine_je_.L_48f2cc(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}








define %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 212
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}






define %struct.Memory* @routine_movl_MINUS0xd4__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 212
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movl__eax__MINUS0xd8__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 216
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0xd8__rbp____edi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 216
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}








define %struct.Memory* @routine_jne_.L_48f2cc(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}












define %struct.Memory* @routine_jne_.L_48f067(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_movq__rax__MINUS0xe0__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 224
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}


define %struct.Memory* @routine_jmpq_.L_48f07d(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_movq_MINUS0xe0__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 224
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movq__rax__MINUS0x70__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 112
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 4
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}


































define %struct.Memory* @routine_addl__0x1___esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %9, i64 1)
  ret %struct.Memory* %12
}














define %struct.Memory* @routine_movq_0x8__rdx____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDX
  %10 = add i64 %9, 8
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %10)
  ret %struct.Memory* %13
}






















define %struct.Memory* @routine_movq_MINUS0x70__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 112
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


















define %struct.Memory* @routine_movq__rax__MINUS0xe8__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 232
  %14 = load i64, i64* %RAX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movq__rdx__MINUS0xf0__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 240
  %14 = load i64, i64* %RDX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}








define %struct.Memory* @routine_movl__eax__MINUS0xf4__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 244
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0xf4__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 244
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}






define %struct.Memory* @routine_movq_MINUS0xf0__rbp____r8(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 17
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R8 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 240
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R8, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movq_MINUS0xe8__rbp____r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 232
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 %13)
  ret %struct.Memory* %16
}










define %struct.Memory* @routine_movq_0x8__rdi____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RDI
  %10 = add i64 %9, 8
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %10)
  ret %struct.Memory* %13
}
























define %struct.Memory* @routine_movq_MINUS0x70__rbp____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 112
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}
























define %struct.Memory* @routine_movl__eax__MINUS0xf8__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 248
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0xf8__rbp____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 248
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}












































define %struct.Memory* @routine_je_.L_48f2c7(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


















define %struct.Memory* @routine_jmpq_.L_48f5e6(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_movq__0x7236a0___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 10
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 ptrtoint( %G__0x7236a0_type* @G__0x7236a0 to i64))
  ret %struct.Memory* %11
}














































define %struct.Memory* @routine_addl__0x1___r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = bitcast i32* %R8D to i64*
  %10 = load i32, i32* %R8D
  %11 = zext i32 %10 to i64
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 4
  store i64 %13, i64* %PC
  %14 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %9, i64 %11, i64 1)
  ret %struct.Memory* %14
}












define %struct.Memory* @routine_movq_0x8__rsi____rsi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSI
  %10 = add i64 %9, 8
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %10)
  ret %struct.Memory* %13
}


















































































define %struct.Memory* @routine_movl__eax__MINUS0xfc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 252
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movq__rdx__MINUS0x108__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 264
  %14 = load i64, i64* %RDX
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movl_MINUS0xfc__rbp____r8d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 17
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R8D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R8D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 252
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}






define %struct.Memory* @routine_movl__eax__MINUS0x10c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 268
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0x10c__rbp____r10d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R10D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 268
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}








define %struct.Memory* @routine_movq_MINUS0x108__rbp____r9(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 19
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %R9 = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 264
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 7
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %R9, i64 %13)
  ret %struct.Memory* %16
}






































































define %struct.Memory* @routine_movl__eax__MINUS0x110__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 272
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}










define %struct.Memory* @routine_movl_MINUS0x110__rbp____r10d(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 21
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %R10D = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = bitcast i32* %R10D to i64*
  %13 = load i64, i64* %RBP
  %14 = sub i64 %13, 272
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %12, i64 %14)
  ret %struct.Memory* %17
}
















define %struct.Memory* @routine_movq_0x8__rcx____rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = add i64 %9, 8
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %10)
  ret %struct.Memory* %13
}




























define %struct.Memory* @routine_je_.L_48f5e1(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq__0x7236a0___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 10
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G__0x7236a0_type* @G__0x7236a0 to i64))
  ret %struct.Memory* %11
}
































define %struct.Memory* @routine_jmpq_.L_48f5f0(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48edfa(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f603(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48ede9(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f616(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_movl_0x710a58___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x710a58_type* @G_0x710a58 to i64))
  ret %struct.Memory* %11
}




define %struct.Memory* @routine_movl__eax__0x20c__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 524
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movl_0x70fd50___eax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G_0x70fd50_type* @G_0x70fd50 to i64))
  ret %struct.Memory* %11
}




define %struct.Memory* @routine_movl__eax__0x11abc__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 72380
  %14 = load i32, i32* %EAX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_cmpl__0xd__0x48__rcx_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = add i64 %9, 72
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 13)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_jne_.L_48f736(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}








define %struct.Memory* @routine_jge_.L_48f731(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_jge_.L_48f71e(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_movq_0x70__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 112
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}




























define %struct.Memory* @routine_movl_0x90__rcx____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 144
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}










define %struct.Memory* @routine_movl_0x94__rcx____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSI = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RCX
  %13 = add i64 %12, 148
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}












define %struct.Memory* @routine_movl_0x18c__rax__rcx_4____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 396
  %19 = add i64 %18, %17
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 7
  store i64 %21, i64* %PC
  %22 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %19)
  ret %struct.Memory* %22
}






define %struct.Memory* @routine_movl__edx__0x14c__rax__rcx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 332
  %19 = add i64 %18, %17
  %20 = load i32, i32* %EDX
  %21 = zext i32 %20 to i64
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 7
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %19, i64 %21)
  ret %struct.Memory* %24
}














define %struct.Memory* @routine_jmpq_.L_48f669(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f723(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48f658(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f8e0(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_cmpl__0x9__MINUS0x3c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 60
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 9)
  ret %struct.Memory* %13
}


define %struct.Memory* @routine_je_.L_48f804(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_cmpl__0xd__MINUS0x3c__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RBP
  %10 = sub i64 %9, 60
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 4
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %10, i64 13)
  ret %struct.Memory* %13
}








define %struct.Memory* @routine_movl_0x94__rax____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 148
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__ecx__MINUS0x10__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 16
  %14 = load i32, i32* %ECX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}












define %struct.Memory* @routine_jge_.L_48f7ff(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




define %struct.Memory* @routine_movl_0x90__rax____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 144
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__ecx__MINUS0xc__rbp_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 12
  %14 = load i32, i32* %ECX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 3
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}












define %struct.Memory* @routine_jge_.L_48f7ec(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq_MINUS0x48__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 72
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}








define %struct.Memory* @routine_movl__0x2____rax__rcx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RCX
  %14 = mul i64 %13, 4
  %15 = add i64 %14, %12
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 7
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %15, i64 2)
  ret %struct.Memory* %18
}






define %struct.Memory* @routine_movl__0x2__0x14c__rax__rcx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = load i64, i64* %RCX
  %14 = mul i64 %13, 4
  %15 = add i64 %12, 332
  %16 = add i64 %15, %14
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 11
  store i64 %18, i64* %PC
  %19 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %16, i64 2)
  ret %struct.Memory* %19
}














define %struct.Memory* @routine_jmpq_.L_48f78f(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f7f1(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48f762(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f8db(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_jne_.L_48f8d6(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




















define %struct.Memory* @routine_jge_.L_48f8d1(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


















define %struct.Memory* @routine_jge_.L_48f8be(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 20
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl_0x7236d0___rax_4____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = mul i64 %12, 4
  %14 = add i64 %13, 7485136
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %14)
  ret %struct.Memory* %17
}










define %struct.Memory* @routine_movl__ecx____rax__rdx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 4
  %18 = add i64 %17, %15
  %19 = load i32, i32* %ECX
  %20 = zext i32 %19 to i64
  %21 = load i64, i64* %PC
  %22 = add i64 %21, 3
  store i64 %22, i64* %PC
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %18, i64 %20)
  ret %struct.Memory* %23
}




define %struct.Memory* @routine_movl_0x70cfd0___rax_4____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = mul i64 %12, 4
  %14 = add i64 %13, 7393232
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %14)
  ret %struct.Memory* %17
}




define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rdx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 20
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl__ecx__0x14c__rax__rdx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RDX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 332
  %19 = add i64 %18, %17
  %20 = load i32, i32* %ECX
  %21 = zext i32 %20 to i64
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 7
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %19, i64 %21)
  ret %struct.Memory* %24
}














define %struct.Memory* @routine_jmpq_.L_48f853(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f8c3(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48f826(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f8d6(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}










define %struct.Memory* @routine_jne_.L_48f9b7(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}








define %struct.Memory* @routine_jge_.L_48f9b2(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}






define %struct.Memory* @routine_jge_.L_48f99f(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_movq__0x7242b0___rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 10
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 ptrtoint( %G__0x7242b0_type* @G__0x7242b0 to i64))
  ret %struct.Memory* %11
}




define %struct.Memory* @routine_shlq__0x4___rcx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RCX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RCX
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %9, i64 4)
  ret %struct.Memory* %12
}


































define %struct.Memory* @routine_movl_0x6d18c0___rax_4____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = mul i64 %12, 4
  %14 = add i64 %13, 7149760
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 7
  store i64 %16, i64* %PC
  %17 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %14)
  ret %struct.Memory* %17
}




















define %struct.Memory* @routine_jmpq_.L_48f90d(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f9a4(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48f8fc(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48f9b7(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}






define %struct.Memory* @routine_je_.L_48fade(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}




















define %struct.Memory* @routine_jge_.L_48faaa(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


















define %struct.Memory* @routine_jge_.L_48fa97(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i8* %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %2, %struct.State* %0, i8* %BRANCH_TAKEN, i64 %7, i64 %9)
  ret %struct.Memory* %12
}














define %struct.Memory* @routine_movq_0xc40__rax____rax(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RAX
  %10 = add i64 %9, 3136
  %11 = load i64, i64* %PC
  %12 = add i64 %11, 7
  store i64 %12, i64* %PC
  %13 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RAX, i64 %10)
  ret %struct.Memory* %13
}














define %struct.Memory* @routine_movl_0x14c__rax__rcx_4____edx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 332
  %19 = add i64 %18, %17
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 7
  store i64 %21, i64* %PC
  %22 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDX, i64 %19)
  ret %struct.Memory* %22
}






define %struct.Memory* @routine_movl__edx__0xc48__rax__rcx_4_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RAX
  %16 = load i64, i64* %RCX
  %17 = mul i64 %16, 4
  %18 = add i64 %15, 3144
  %19 = add i64 %18, %17
  %20 = load i32, i32* %EDX
  %21 = zext i32 %20 to i64
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 7
  store i64 %23, i64* %PC
  %24 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %19, i64 %21)
  ret %struct.Memory* %24
}














define %struct.Memory* @routine_jmpq_.L_48fa11(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}


define %struct.Memory* @routine_jmpq_.L_48fa9c(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}








define %struct.Memory* @routine_jmpq_.L_48f9e4(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  store i64 %9, i64* %PC
  %10 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64 %7)
  ret %struct.Memory* %10
}




define %struct.Memory* @routine_movl_0x20c__rax____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 524
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__ecx__0xd04__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 3332
  %14 = load i32, i32* %ECX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}




define %struct.Memory* @routine_movl_0x11abc__rax____ecx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 72380
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 6
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RCX, i64 %13)
  ret %struct.Memory* %16
}




define %struct.Memory* @routine_movl__ecx__0xd00__rax_(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RAX
  %13 = add i64 %12, 3328
  %14 = load i32, i32* %ECX
  %15 = zext i32 %14 to i64
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 6
  store i64 %17, i64* %PC
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64 %13, i64 %15)
  ret %struct.Memory* %18
}


define %struct.Memory* @routine_movq_MINUS0x38__rbp____rdi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RDI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 56
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 4
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RDI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_movl_MINUS0x40__rbp____esi(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSI = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = sub i64 %12, 64
  %14 = load i64, i64* %PC
  %15 = add i64 %14, 3
  store i64 %15, i64* %PC
  %16 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %2, %struct.State* %0, i64* %RSI, i64 %13)
  ret %struct.Memory* %16
}


define %struct.Memory* @routine_callq_.SetMotionVectorsMB(%struct.State*  dereferenceable(3376), i64, %struct.Memory*, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, %rel_off1
  %8 = load i64, i64* %PC
  %9 = add i64 %8, %rel_off2
  %10 = load i64, i64* %PC
  %11 = add i64 %10, %rel_off3
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %2, %struct.State* %0, i64 %7, i64 %9)
  ret %struct.Memory* %12
}


define %struct.Memory* @routine_addq__0x108___rsp(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC
  %12 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %2, %struct.State* %0, i64* %RSP, i64 %9, i64 264)
  ret %struct.Memory* %12
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(3376), i64* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 8
  %7 = inttoptr i64 %5 to i64*
  %8 = load i64, i64* %7
  store i64 %8, i64* %2, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_popq__rbx(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 3
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBX = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 1
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64* %RBX)
  ret %struct.Memory* %11
}


define %struct.Memory* @routine_popq__rbp(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RBP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %PC
  %10 = add i64 %9, 1
  store i64 %10, i64* %PC
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %2, %struct.State* %0, i64* %RBP)
  ret %struct.Memory* %11
}

define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* returned, %struct.State* nocapture dereferenceable(3376)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  store i64 %7, i64* %3, align 8
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8
  ret %struct.Memory* %0
}

define %struct.Memory* @routine_retq(%struct.State*  dereferenceable(3376), i64, %struct.Memory* ) #19 {
block_400488:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 1
  store i64 %7, i64* %PC
  %8 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %2, %struct.State* %0)
  ret %struct.Memory* %8
}

