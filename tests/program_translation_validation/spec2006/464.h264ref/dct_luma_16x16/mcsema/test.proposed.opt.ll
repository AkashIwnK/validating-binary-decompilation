; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x6cb8f8_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x6d4750_type = type <{ [1 x i8] }>
%G_0x70fcf0_type = type <{ [8 x i8] }>
%G_0x726418_type = type <{ [8 x i8] }>
%G__0x70d010_type = type <{ [8 x i8] }>
%G__0x70e8f0_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x6cb8f8 = local_unnamed_addr global %G_0x6cb8f8_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x6d4750 = local_unnamed_addr global %G_0x6d4750_type zeroinitializer
@G_0x70fcf0 = local_unnamed_addr global %G_0x70fcf0_type zeroinitializer
@G_0x726418 = local_unnamed_addr global %G_0x726418_type zeroinitializer
@G__0x70d010 = global %G__0x70d010_type zeroinitializer
@G__0x70e8f0 = global %G__0x70e8f0_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @abs(i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_475150.sign(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @dct_luma_16x16(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -2376
  store i64 %11, i64* %6, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX.i551 = bitcast %union.anon* %18 to i32*
  %RAX.i552 = getelementptr inbounds %union.anon, %union.anon* %18, i64 0, i32 0
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %AL.i = bitcast %union.anon* %18 to i8*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL.i = bitcast %union.anon* %19 to i8*
  store i8 0, i8* %CL.i, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI.i = bitcast %union.anon* %20 to i32*
  %21 = add i64 %7, -12
  %22 = load i32, i32* %EDI.i, align 4
  %23 = add i64 %10, 17
  store i64 %23, i64* %3, align 8
  %24 = inttoptr i64 %21 to i32*
  store i32 %22, i32* %24, align 4
  %25 = load i64, i64* %RBP.i, align 8
  %26 = add i64 %25, -2208
  %27 = load i64, i64* %3, align 8
  %28 = add i64 %27, 10
  store i64 %28, i64* %3, align 8
  %29 = inttoptr i64 %26 to i32*
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i658 = getelementptr inbounds %union.anon, %union.anon* %30, i64 0, i32 0
  %31 = load i64, i64* %3, align 8
  %32 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %32, i64* %RDX.i658, align 8
  %33 = add i64 %32, 14168
  %34 = add i64 %31, 15
  store i64 %34, i64* %3, align 8
  %35 = inttoptr i64 %33 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %RDX.i658, align 8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %RSI.i757 = getelementptr inbounds %union.anon, %union.anon* %37, i64 0, i32 0
  store i64 %32, i64* %RSI.i757, align 8
  %38 = add i64 %32, 12
  %39 = add i64 %31, 27
  store i64 %39, i64* %3, align 8
  %40 = inttoptr i64 %38 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %41 to i64
  %43 = mul nsw i64 %42, 632
  store i64 %43, i64* %RSI.i757, align 8
  %44 = lshr i64 %43, 63
  %45 = add i64 %43, %36
  %46 = icmp ult i64 %45, %36
  %47 = icmp ult i64 %45, %43
  %48 = or i1 %46, %47
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %12, align 1
  %50 = trunc i64 %45 to i32
  %51 = and i32 %50, 255
  %52 = tail call i32 @llvm.ctpop.i32(i32 %51)
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  store i8 %55, i8* %13, align 1
  %56 = xor i64 %43, %36
  %57 = xor i64 %56, %45
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  store i8 %60, i8* %14, align 1
  %61 = icmp eq i64 %45, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %15, align 1
  %63 = lshr i64 %45, 63
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* %16, align 1
  %65 = lshr i64 %36, 63
  %66 = xor i64 %63, %65
  %67 = xor i64 %63, %44
  %68 = add nuw nsw i64 %66, %67
  %69 = icmp eq i64 %68, 2
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %17, align 1
  %71 = load i64, i64* %RBP.i, align 8
  %72 = add i64 %71, -2216
  %73 = add i64 %31, 44
  store i64 %73, i64* %3, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %45, i64* %74, align 8
  %75 = load i64, i64* %3, align 8
  %76 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %76, i64* %RDX.i658, align 8
  %77 = add i64 %76, 14144
  %78 = add i64 %75, 15
  store i64 %78, i64* %3, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RDX.i658, align 8
  %81 = add i64 %75, 18
  store i64 %81, i64* %3, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RDX.i658, align 8
  %84 = add i64 %75, 21
  store i64 %84, i64* %3, align 8
  %85 = inttoptr i64 %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = load i64, i64* %RBP.i, align 8
  %88 = add i64 %87, -2232
  %89 = add i64 %75, 28
  store i64 %89, i64* %3, align 8
  %90 = inttoptr i64 %88 to i64*
  store i64 %86, i64* %90, align 8
  %91 = load i64, i64* %3, align 8
  %92 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %92, i64* %RDX.i658, align 8
  %93 = add i64 %92, 14144
  %94 = add i64 %91, 15
  store i64 %94, i64* %3, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RDX.i658, align 8
  %97 = add i64 %91, 18
  store i64 %97, i64* %3, align 8
  %98 = inttoptr i64 %96 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %RDX.i658, align 8
  %100 = add i64 %99, 8
  %101 = add i64 %91, 22
  store i64 %101, i64* %3, align 8
  %102 = inttoptr i64 %100 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RDX.i658, align 8
  %104 = load i64, i64* %RBP.i, align 8
  %105 = add i64 %104, -2240
  %106 = add i64 %91, 29
  store i64 %106, i64* %3, align 8
  %107 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %107, align 8
  %108 = load i64, i64* %RBP.i, align 8
  %109 = add i64 %108, -2216
  %110 = load i64, i64* %3, align 8
  %111 = add i64 %110, 7
  store i64 %111, i64* %3, align 8
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RDX.i658, align 8
  %114 = add i64 %113, 12
  %115 = add i64 %110, 10
  store i64 %115, i64* %3, align 8
  %116 = inttoptr i64 %114 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  store i64 %118, i64* %RAX.i552, align 8
  %119 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %119, i64* %RDX.i658, align 8
  %120 = add i64 %119, 72668
  %121 = add i64 %110, 24
  store i64 %121, i64* %3, align 8
  %122 = inttoptr i64 %120 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = add i32 %123, %117
  %125 = zext i32 %124 to i64
  store i64 %125, i64* %RAX.i552, align 8
  %126 = and i32 %124, 255
  %127 = tail call i32 @llvm.ctpop.i32(i32 %126)
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  %131 = icmp eq i32 %124, 0
  %132 = zext i1 %131 to i8
  %133 = lshr i32 %124, 31
  %134 = trunc i32 %133 to i8
  store i8 0, i8* %12, align 1
  store i8 %130, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 %132, i8* %15, align 1
  store i8 %134, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %135 = add i64 %108, -2261
  %136 = load i8, i8* %CL.i, align 1
  %137 = add i64 %110, 33
  store i64 %137, i64* %3, align 8
  %138 = inttoptr i64 %135 to i8*
  store i8 %136, i8* %138, align 1
  %139 = load i64, i64* %3, align 8
  %140 = add i64 %139, 30
  %141 = add i64 %139, 6
  %142 = load i8, i8* %15, align 1
  %143 = icmp eq i8 %142, 0
  %144 = select i1 %143, i64 %140, i64 %141
  store i64 %144, i64* %3, align 8
  br i1 %143, label %block_.L_4044a0, label %block_404488

block_404488:                                     ; preds = %entry
  %145 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %145, i64* %RAX.i552, align 8
  %146 = add i64 %145, 72704
  %147 = add i64 %144, 15
  store i64 %147, i64* %3, align 8
  %148 = inttoptr i64 %146 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = add i32 %149, -1
  %151 = icmp eq i32 %149, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %12, align 1
  %153 = and i32 %150, 255
  %154 = tail call i32 @llvm.ctpop.i32(i32 %153)
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  store i8 %157, i8* %13, align 1
  %158 = xor i32 %150, %149
  %159 = lshr i32 %158, 4
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  store i8 %161, i8* %14, align 1
  %162 = icmp eq i32 %150, 0
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %15, align 1
  %164 = lshr i32 %150, 31
  %165 = trunc i32 %164 to i8
  store i8 %165, i8* %16, align 1
  %166 = lshr i32 %149, 31
  %167 = xor i32 %164, %166
  %168 = add nuw nsw i32 %167, %166
  %169 = icmp eq i32 %168, 2
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %17, align 1
  store i8 %163, i8* %CL.i, align 1
  %171 = load i64, i64* %RBP.i, align 8
  %172 = add i64 %171, -2261
  %173 = add i64 %144, 24
  store i64 %173, i64* %3, align 8
  %174 = inttoptr i64 %172 to i8*
  store i8 %163, i8* %174, align 1
  %.pre = load i64, i64* %3, align 8
  br label %block_.L_4044a0

block_.L_4044a0:                                  ; preds = %block_404488, %entry
  %175 = phi i64 [ %.pre, %block_404488 ], [ %140, %entry ]
  %176 = load i64, i64* %RBP.i, align 8
  %177 = add i64 %176, -2261
  %178 = add i64 %175, 6
  store i64 %178, i64* %3, align 8
  %179 = inttoptr i64 %177 to i8*
  %180 = load i8, i8* %179, align 1
  %RCX.i4476 = getelementptr inbounds %union.anon, %union.anon* %19, i64 0, i32 0
  store i64 6, i64* %RCX.i4476, align 8
  %181 = and i8 %180, 1
  store i8 %181, i8* %AL.i, align 1
  store i8 0, i8* %12, align 1
  %182 = zext i8 %181 to i32
  %183 = tail call i32 @llvm.ctpop.i32(i32 %182)
  %184 = trunc i32 %183 to i8
  %185 = xor i8 %184, 1
  store i8 %185, i8* %13, align 1
  %186 = xor i8 %181, 1
  store i8 %186, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %187 = zext i8 %181 to i64
  store i64 %187, i64* %RDX.i658, align 8
  %EDX.i4468 = bitcast %union.anon* %30 to i32*
  %188 = add i64 %176, -2260
  %189 = zext i8 %181 to i32
  %190 = add i64 %175, 22
  store i64 %190, i64* %3, align 8
  %191 = inttoptr i64 %188 to i32*
  store i32 %189, i32* %191, align 4
  %192 = load i64, i64* %RBP.i, align 8
  %193 = add i64 %192, -2216
  %194 = load i64, i64* %3, align 8
  %195 = add i64 %194, 7
  store i64 %195, i64* %3, align 8
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RSI.i757, align 8
  %198 = add i64 %197, 12
  %199 = add i64 %194, 10
  store i64 %199, i64* %3, align 8
  %200 = inttoptr i64 %198 to i32*
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %RDX.i658, align 8
  %203 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %203, i64* %RSI.i757, align 8
  %204 = add i64 %203, 72668
  %205 = add i64 %194, 24
  store i64 %205, i64* %3, align 8
  %206 = inttoptr i64 %204 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = add i32 %207, %201
  %209 = and i32 %208, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209)
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  %214 = icmp eq i32 %208, 0
  %215 = zext i1 %214 to i8
  %216 = lshr i32 %208, 31
  %217 = trunc i32 %216 to i8
  store i8 0, i8* %12, align 1
  store i8 %213, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 %215, i8* %15, align 1
  store i8 %217, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %218 = zext i32 %208 to i64
  store i64 %218, i64* %RAX.i552, align 8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %220 = sext i32 %208 to i64
  %221 = lshr i64 %220, 32
  store i64 %221, i64* %219, align 8
  %ECX.i4446 = bitcast %union.anon* %19 to i32*
  %222 = load i32, i32* %ECX.i4446, align 4
  %223 = add i64 %194, 32
  store i64 %223, i64* %3, align 8
  %224 = sext i32 %222 to i64
  %225 = shl nuw i64 %221, 32
  %226 = or i64 %225, %218
  %227 = sdiv i64 %226, %224
  %228 = shl i64 %227, 32
  %229 = ashr exact i64 %228, 32
  %230 = icmp eq i64 %227, %229
  br i1 %230, label %233, label %231

; <label>:231:                                    ; preds = %block_.L_4044a0
  %232 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %223, %struct.Memory* %2)
  %.pre300 = load i64, i64* %RBP.i, align 8
  %.pre301 = load i32, i32* %EAX.i551, align 4
  %.pre302 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4447

; <label>:233:                                    ; preds = %block_.L_4044a0
  %234 = srem i64 %226, %224
  %235 = and i64 %227, 4294967295
  store i64 %235, i64* %RAX.i552, align 8
  %236 = and i64 %234, 4294967295
  store i64 %236, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %237 = trunc i64 %227 to i32
  br label %routine_idivl__ecx.exit4447

routine_idivl__ecx.exit4447:                      ; preds = %233, %231
  %238 = phi i64 [ %.pre302, %231 ], [ %223, %233 ]
  %239 = phi i32 [ %.pre301, %231 ], [ %237, %233 ]
  %240 = phi i64 [ %.pre300, %231 ], [ %192, %233 ]
  %241 = phi %struct.Memory* [ %232, %231 ], [ %2, %233 ]
  %242 = add i64 %240, -2196
  %243 = add i64 %238, 6
  store i64 %243, i64* %3, align 8
  %244 = inttoptr i64 %242 to i32*
  store i32 %239, i32* %244, align 4
  %245 = load i64, i64* %RBP.i, align 8
  %246 = add i64 %245, -2216
  %247 = load i64, i64* %3, align 8
  %248 = add i64 %247, 7
  store i64 %248, i64* %3, align 8
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RSI.i757, align 8
  %251 = add i64 %250, 12
  %252 = add i64 %247, 10
  store i64 %252, i64* %3, align 8
  %253 = inttoptr i64 %251 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = zext i32 %254 to i64
  store i64 %255, i64* %RAX.i552, align 8
  %256 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %256, i64* %RSI.i757, align 8
  %257 = add i64 %256, 72668
  %258 = add i64 %247, 24
  store i64 %258, i64* %3, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = add i32 %260, %254
  %262 = zext i32 %261 to i64
  %263 = and i32 %261, 255
  %264 = tail call i32 @llvm.ctpop.i32(i32 %263)
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  %267 = xor i8 %266, 1
  %268 = icmp eq i32 %261, 0
  %269 = zext i1 %268 to i8
  %270 = lshr i32 %261, 31
  %271 = trunc i32 %270 to i8
  store i64 %262, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 %267, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 %269, i8* %15, align 1
  store i8 %271, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %272 = sext i32 %261 to i64
  %273 = lshr i64 %272, 32
  store i64 %273, i64* %219, align 8
  %274 = load i32, i32* %ECX.i4446, align 4
  %275 = add i64 %247, 30
  store i64 %275, i64* %3, align 8
  %276 = zext i32 %261 to i64
  %277 = sext i32 %274 to i64
  %278 = shl nuw i64 %273, 32
  %279 = or i64 %278, %276
  %280 = sdiv i64 %279, %277
  %281 = shl i64 %280, 32
  %282 = ashr exact i64 %281, 32
  %283 = icmp eq i64 %280, %282
  br i1 %283, label %286, label %284

; <label>:284:                                    ; preds = %routine_idivl__ecx.exit4447
  %285 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %275, %struct.Memory* %241)
  %.pre303 = load i64, i64* %RBP.i, align 8
  %.pre304 = load i32, i32* %EDX.i4468, align 4
  %.pre305 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4424

; <label>:286:                                    ; preds = %routine_idivl__ecx.exit4447
  %287 = srem i64 %279, %277
  %288 = and i64 %280, 4294967295
  store i64 %288, i64* %RAX.i552, align 8
  %289 = and i64 %287, 4294967295
  store i64 %289, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %290 = trunc i64 %287 to i32
  br label %routine_idivl__ecx.exit4424

routine_idivl__ecx.exit4424:                      ; preds = %286, %284
  %291 = phi i64 [ %.pre305, %284 ], [ %275, %286 ]
  %292 = phi i32 [ %.pre304, %284 ], [ %290, %286 ]
  %293 = phi i64 [ %.pre303, %284 ], [ %245, %286 ]
  %294 = phi %struct.Memory* [ %285, %284 ], [ %241, %286 ]
  %295 = add i64 %293, -2200
  %296 = add i64 %291, 6
  store i64 %296, i64* %3, align 8
  %297 = inttoptr i64 %295 to i32*
  store i32 %292, i32* %297, align 4
  %298 = load i64, i64* %RBP.i, align 8
  %299 = add i64 %298, -2196
  %300 = load i64, i64* %3, align 8
  %301 = add i64 %300, 6
  store i64 %301, i64* %3, align 8
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = add i32 %303, 15
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %RCX.i4476, align 8
  %306 = icmp ugt i32 %303, -16
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %12, align 1
  %308 = and i32 %304, 255
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308)
  %310 = trunc i32 %309 to i8
  %311 = and i8 %310, 1
  %312 = xor i8 %311, 1
  store i8 %312, i8* %13, align 1
  %313 = xor i32 %304, %303
  %314 = lshr i32 %313, 4
  %315 = trunc i32 %314 to i8
  %316 = and i8 %315, 1
  store i8 %316, i8* %14, align 1
  %317 = icmp eq i32 %304, 0
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %15, align 1
  %319 = lshr i32 %304, 31
  %320 = trunc i32 %319 to i8
  store i8 %320, i8* %16, align 1
  %321 = lshr i32 %303, 31
  %322 = xor i32 %319, %321
  %323 = add nuw nsw i32 %322, %319
  %324 = icmp eq i32 %323, 2
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %17, align 1
  %326 = add i64 %298, -2204
  %327 = add i64 %300, 15
  store i64 %327, i64* %3, align 8
  %328 = inttoptr i64 %326 to i32*
  store i32 %304, i32* %328, align 4
  %329 = load i64, i64* %RBP.i, align 8
  %330 = add i64 %329, -12
  %331 = load i64, i64* %3, align 8
  %332 = add i64 %331, 7
  store i64 %332, i64* %3, align 8
  %333 = inttoptr i64 %330 to i32*
  store i32 0, i32* %333, align 4
  %ESI.i4280 = bitcast %union.anon* %37 to i32*
  %RDI.i4259 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D.i4254 = bitcast %union.anon* %334 to i32*
  %335 = getelementptr inbounds %union.anon, %union.anon* %334, i64 0, i32 0
  %.pre306 = load i64, i64* %3, align 8
  br label %block_.L_404516

block_.L_404516:                                  ; preds = %block_.L_40468d, %routine_idivl__ecx.exit4424
  %336 = phi i64 [ %.pre306, %routine_idivl__ecx.exit4424 ], [ %1107, %block_.L_40468d ]
  %MEMORY.1 = phi %struct.Memory* [ %294, %routine_idivl__ecx.exit4424 ], [ %MEMORY.2, %block_.L_40468d ]
  %337 = load i64, i64* %RBP.i, align 8
  %338 = add i64 %337, -12
  %339 = add i64 %336, 4
  store i64 %339, i64* %3, align 8
  %340 = inttoptr i64 %338 to i32*
  %341 = load i32, i32* %340, align 4
  %342 = add i32 %341, -16
  %343 = icmp ult i32 %341, 16
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %12, align 1
  %345 = and i32 %342, 255
  %346 = tail call i32 @llvm.ctpop.i32(i32 %345)
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  store i8 %349, i8* %13, align 1
  %350 = xor i32 %341, 16
  %351 = xor i32 %350, %342
  %352 = lshr i32 %351, 4
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  store i8 %354, i8* %14, align 1
  %355 = icmp eq i32 %342, 0
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %15, align 1
  %357 = lshr i32 %342, 31
  %358 = trunc i32 %357 to i8
  store i8 %358, i8* %16, align 1
  %359 = lshr i32 %341, 31
  %360 = xor i32 %357, %359
  %361 = add nuw nsw i32 %360, %359
  %362 = icmp eq i32 %361, 2
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %17, align 1
  %364 = icmp ne i8 %358, 0
  %365 = xor i1 %364, %362
  %.v475 = select i1 %365, i64 10, i64 394
  %366 = add i64 %336, %.v475
  store i64 %366, i64* %3, align 8
  br i1 %365, label %block_404520, label %block_.L_4046a0

block_404520:                                     ; preds = %block_.L_404516
  %367 = add i64 %337, -8
  %368 = add i64 %366, 7
  store i64 %368, i64* %3, align 8
  %369 = inttoptr i64 %367 to i32*
  store i32 0, i32* %369, align 4
  %.pre426 = load i64, i64* %3, align 8
  br label %block_.L_404527

block_.L_404527:                                  ; preds = %routine_idivl__r8d.exit, %block_404520
  %370 = phi i64 [ %.pre426, %block_404520 ], [ %1077, %routine_idivl__r8d.exit ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_404520 ], [ %1039, %routine_idivl__r8d.exit ]
  %371 = load i64, i64* %RBP.i, align 8
  %372 = add i64 %371, -8
  %373 = add i64 %370, 4
  store i64 %373, i64* %3, align 8
  %374 = inttoptr i64 %372 to i32*
  %375 = load i32, i32* %374, align 4
  %376 = add i32 %375, -16
  %377 = icmp ult i32 %375, 16
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %12, align 1
  %379 = and i32 %376, 255
  %380 = tail call i32 @llvm.ctpop.i32(i32 %379)
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  store i8 %383, i8* %13, align 1
  %384 = xor i32 %375, 16
  %385 = xor i32 %384, %376
  %386 = lshr i32 %385, 4
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  store i8 %388, i8* %14, align 1
  %389 = icmp eq i32 %376, 0
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %15, align 1
  %391 = lshr i32 %376, 31
  %392 = trunc i32 %391 to i8
  store i8 %392, i8* %16, align 1
  %393 = lshr i32 %375, 31
  %394 = xor i32 %391, %393
  %395 = add nuw nsw i32 %394, %393
  %396 = icmp eq i32 %395, 2
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %17, align 1
  %398 = icmp ne i8 %392, 0
  %399 = xor i1 %398, %396
  %.v473 = select i1 %399, i64 10, i64 358
  %400 = add i64 %370, %.v473
  store i64 %400, i64* %3, align 8
  br i1 %399, label %block_404531, label %block_.L_40468d

block_404531:                                     ; preds = %block_.L_404527
  %401 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %401, i64* %RAX.i552, align 8
  %402 = add i64 %401, 72724
  %403 = add i64 %400, 15
  store i64 %403, i64* %3, align 8
  %404 = inttoptr i64 %402 to i32*
  %405 = load i32, i32* %404, align 4
  store i8 0, i8* %12, align 1
  %406 = and i32 %405, 255
  %407 = tail call i32 @llvm.ctpop.i32(i32 %406)
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  %410 = xor i8 %409, 1
  store i8 %410, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %411 = icmp eq i32 %405, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %15, align 1
  %413 = lshr i32 %405, 31
  %414 = trunc i32 %413 to i8
  store i8 %414, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v474 = select i1 %411, i64 21, i64 154
  %415 = add i64 %400, %.v474
  %416 = add i64 %371, -1056
  store i64 %416, i64* %RAX.i552, align 8
  %417 = add i64 %415, 15
  store i64 %417, i64* %3, align 8
  br i1 %411, label %block_404546, label %block_.L_4045cb

block_404546:                                     ; preds = %block_404531
  %418 = load i64, i64* bitcast (%G_0x726418_type* @G_0x726418 to i64*), align 8
  store i64 %418, i64* %RCX.i4476, align 8
  store i64 %401, i64* %RDX.i658, align 8
  %419 = add i64 %401, 172
  %420 = add i64 %415, 29
  store i64 %420, i64* %3, align 8
  %421 = inttoptr i64 %419 to i32*
  %422 = load i32, i32* %421, align 4
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %RSI.i757, align 8
  %424 = add i64 %371, -12
  %425 = add i64 %415, 32
  store i64 %425, i64* %3, align 8
  %426 = inttoptr i64 %424 to i32*
  %427 = load i32, i32* %426, align 4
  %428 = add i32 %427, %422
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RSI.i757, align 8
  %430 = icmp ult i32 %428, %422
  %431 = icmp ult i32 %428, %427
  %432 = or i1 %430, %431
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %12, align 1
  %434 = and i32 %428, 255
  %435 = tail call i32 @llvm.ctpop.i32(i32 %434)
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  store i8 %438, i8* %13, align 1
  %439 = xor i32 %427, %422
  %440 = xor i32 %439, %428
  %441 = lshr i32 %440, 4
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %14, align 1
  %444 = icmp eq i32 %428, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %15, align 1
  %446 = lshr i32 %428, 31
  %447 = trunc i32 %446 to i8
  store i8 %447, i8* %16, align 1
  %448 = lshr i32 %422, 31
  %449 = lshr i32 %427, 31
  %450 = xor i32 %446, %448
  %451 = xor i32 %446, %449
  %452 = add nuw nsw i32 %450, %451
  %453 = icmp eq i32 %452, 2
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %17, align 1
  %455 = sext i32 %428 to i64
  store i64 %455, i64* %RDX.i658, align 8
  %456 = shl nsw i64 %455, 3
  %457 = add i64 %418, %456
  %458 = add i64 %415, 39
  store i64 %458, i64* %3, align 8
  %459 = inttoptr i64 %457 to i64*
  %460 = load i64, i64* %459, align 8
  store i64 %460, i64* %RCX.i4476, align 8
  store i64 %401, i64* %RDX.i658, align 8
  %461 = add i64 %401, 168
  %462 = add i64 %415, 53
  store i64 %462, i64* %3, align 8
  %463 = inttoptr i64 %461 to i32*
  %464 = load i32, i32* %463, align 4
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %RSI.i757, align 8
  %466 = add i64 %415, 56
  store i64 %466, i64* %3, align 8
  %467 = load i32, i32* %374, align 4
  %468 = add i32 %467, %464
  %469 = zext i32 %468 to i64
  store i64 %469, i64* %RSI.i757, align 8
  %470 = icmp ult i32 %468, %464
  %471 = icmp ult i32 %468, %467
  %472 = or i1 %470, %471
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %12, align 1
  %474 = and i32 %468, 255
  %475 = tail call i32 @llvm.ctpop.i32(i32 %474)
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  %478 = xor i8 %477, 1
  store i8 %478, i8* %13, align 1
  %479 = xor i32 %467, %464
  %480 = xor i32 %479, %468
  %481 = lshr i32 %480, 4
  %482 = trunc i32 %481 to i8
  %483 = and i8 %482, 1
  store i8 %483, i8* %14, align 1
  %484 = icmp eq i32 %468, 0
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %15, align 1
  %486 = lshr i32 %468, 31
  %487 = trunc i32 %486 to i8
  store i8 %487, i8* %16, align 1
  %488 = lshr i32 %464, 31
  %489 = lshr i32 %467, 31
  %490 = xor i32 %486, %488
  %491 = xor i32 %486, %489
  %492 = add nuw nsw i32 %490, %491
  %493 = icmp eq i32 %492, 2
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %17, align 1
  %495 = sext i32 %468 to i64
  store i64 %495, i64* %RDX.i658, align 8
  %496 = shl nsw i64 %495, 1
  %497 = add i64 %460, %496
  %498 = add i64 %415, 63
  store i64 %498, i64* %3, align 8
  %499 = inttoptr i64 %497 to i16*
  %500 = load i16, i16* %499, align 2
  %501 = zext i16 %500 to i64
  store i64 %501, i64* %RSI.i757, align 8
  %502 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %503 = add i64 %502, 4792
  store i64 %503, i64* %RCX.i4476, align 8
  %504 = icmp ugt i64 %502, -4793
  %505 = zext i1 %504 to i8
  store i8 %505, i8* %12, align 1
  %506 = trunc i64 %503 to i32
  %507 = and i32 %506, 255
  %508 = tail call i32 @llvm.ctpop.i32(i32 %507)
  %509 = trunc i32 %508 to i8
  %510 = and i8 %509, 1
  %511 = xor i8 %510, 1
  store i8 %511, i8* %13, align 1
  %512 = xor i64 %502, 16
  %513 = xor i64 %512, %503
  %514 = lshr i64 %513, 4
  %515 = trunc i64 %514 to i8
  %516 = and i8 %515, 1
  store i8 %516, i8* %14, align 1
  %517 = icmp eq i64 %503, 0
  %518 = zext i1 %517 to i8
  store i8 %518, i8* %15, align 1
  %519 = lshr i64 %503, 63
  %520 = trunc i64 %519 to i8
  store i8 %520, i8* %16, align 1
  %521 = lshr i64 %502, 63
  %522 = xor i64 %519, %521
  %523 = add nuw nsw i64 %522, %519
  %524 = icmp eq i64 %523, 2
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %17, align 1
  %526 = load i64, i64* %RBP.i, align 8
  %527 = add i64 %526, -4
  %528 = add i64 %415, 82
  store i64 %528, i64* %3, align 8
  %529 = inttoptr i64 %527 to i32*
  %530 = load i32, i32* %529, align 4
  %531 = sext i32 %530 to i64
  %532 = shl nsw i64 %531, 9
  store i64 %532, i64* %RDX.i658, align 8
  %533 = add i64 %532, %503
  store i64 %533, i64* %RCX.i4476, align 8
  %534 = icmp ult i64 %533, %503
  %535 = icmp ult i64 %533, %532
  %536 = or i1 %534, %535
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %12, align 1
  %538 = trunc i64 %533 to i32
  %539 = and i32 %538, 255
  %540 = tail call i32 @llvm.ctpop.i32(i32 %539)
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  %543 = xor i8 %542, 1
  store i8 %543, i8* %13, align 1
  %544 = xor i64 %503, %533
  %545 = lshr i64 %544, 4
  %546 = trunc i64 %545 to i8
  %547 = and i8 %546, 1
  store i8 %547, i8* %14, align 1
  %548 = icmp eq i64 %533, 0
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %15, align 1
  %550 = lshr i64 %533, 63
  %551 = trunc i64 %550 to i8
  store i8 %551, i8* %16, align 1
  %552 = lshr i64 %531, 54
  %553 = and i64 %552, 1
  %554 = xor i64 %550, %519
  %555 = xor i64 %550, %553
  %556 = add nuw nsw i64 %554, %555
  %557 = icmp eq i64 %556, 2
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %17, align 1
  %559 = add i64 %526, -12
  %560 = add i64 %415, 93
  store i64 %560, i64* %3, align 8
  %561 = inttoptr i64 %559 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = sext i32 %562 to i64
  %564 = shl nsw i64 %563, 5
  store i64 %564, i64* %RDX.i658, align 8
  %565 = add i64 %564, %533
  store i64 %565, i64* %RCX.i4476, align 8
  %566 = icmp ult i64 %565, %533
  %567 = icmp ult i64 %565, %564
  %568 = or i1 %566, %567
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %12, align 1
  %570 = trunc i64 %565 to i32
  %571 = and i32 %570, 255
  %572 = tail call i32 @llvm.ctpop.i32(i32 %571)
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  %575 = xor i8 %574, 1
  store i8 %575, i8* %13, align 1
  %576 = xor i64 %533, %565
  %577 = lshr i64 %576, 4
  %578 = trunc i64 %577 to i8
  %579 = and i8 %578, 1
  store i8 %579, i8* %14, align 1
  %580 = icmp eq i64 %565, 0
  %581 = zext i1 %580 to i8
  store i8 %581, i8* %15, align 1
  %582 = lshr i64 %565, 63
  %583 = trunc i64 %582 to i8
  store i8 %583, i8* %16, align 1
  %584 = lshr i64 %563, 58
  %585 = and i64 %584, 1
  %586 = xor i64 %582, %550
  %587 = xor i64 %582, %585
  %588 = add nuw nsw i64 %586, %587
  %589 = icmp eq i64 %588, 2
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %17, align 1
  %591 = load i64, i64* %RBP.i, align 8
  %592 = add i64 %591, -8
  %593 = add i64 %415, 104
  store i64 %593, i64* %3, align 8
  %594 = inttoptr i64 %592 to i32*
  %595 = load i32, i32* %594, align 4
  %596 = sext i32 %595 to i64
  store i64 %596, i64* %RDX.i658, align 8
  %597 = shl nsw i64 %596, 1
  %598 = add i64 %597, %565
  %599 = add i64 %415, 108
  store i64 %599, i64* %3, align 8
  %600 = inttoptr i64 %598 to i16*
  %601 = load i16, i16* %600, align 2
  %602 = zext i16 %601 to i64
  store i64 %602, i64* %RDI.i4259, align 8
  %603 = load i64, i64* %RSI.i757, align 8
  %604 = zext i16 %601 to i32
  %605 = zext i16 %601 to i64
  %606 = trunc i64 %603 to i32
  %607 = sub i32 %606, %604
  %608 = zext i32 %607 to i64
  store i64 %608, i64* %RSI.i757, align 8
  %609 = icmp ult i32 %606, %604
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %12, align 1
  %611 = and i32 %607, 255
  %612 = tail call i32 @llvm.ctpop.i32(i32 %611)
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = xor i8 %614, 1
  store i8 %615, i8* %13, align 1
  %616 = xor i64 %605, %603
  %617 = trunc i64 %616 to i32
  %618 = xor i32 %617, %607
  %619 = lshr i32 %618, 4
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  store i8 %621, i8* %14, align 1
  %622 = icmp eq i32 %607, 0
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %15, align 1
  %624 = lshr i32 %607, 31
  %625 = trunc i32 %624 to i8
  store i8 %625, i8* %16, align 1
  %626 = lshr i32 %606, 31
  %627 = xor i32 %624, %626
  %628 = add nuw nsw i32 %627, %626
  %629 = icmp eq i32 %628, 2
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %17, align 1
  %631 = add i64 %415, 114
  store i64 %631, i64* %3, align 8
  %632 = load i32, i32* %594, align 4
  %633 = sext i32 %632 to i64
  %634 = shl nsw i64 %633, 6
  store i64 %634, i64* %RCX.i4476, align 8
  %635 = load i64, i64* %RAX.i552, align 8
  %636 = add i64 %634, %635
  store i64 %636, i64* %RAX.i552, align 8
  %637 = icmp ult i64 %636, %635
  %638 = icmp ult i64 %636, %634
  %639 = or i1 %637, %638
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %12, align 1
  %641 = trunc i64 %636 to i32
  %642 = and i32 %641, 255
  %643 = tail call i32 @llvm.ctpop.i32(i32 %642)
  %644 = trunc i32 %643 to i8
  %645 = and i8 %644, 1
  %646 = xor i8 %645, 1
  store i8 %646, i8* %13, align 1
  %647 = xor i64 %635, %636
  %648 = lshr i64 %647, 4
  %649 = trunc i64 %648 to i8
  %650 = and i8 %649, 1
  store i8 %650, i8* %14, align 1
  %651 = icmp eq i64 %636, 0
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %15, align 1
  %653 = lshr i64 %636, 63
  %654 = trunc i64 %653 to i8
  store i8 %654, i8* %16, align 1
  %655 = lshr i64 %635, 63
  %656 = lshr i64 %633, 57
  %657 = and i64 %656, 1
  %658 = xor i64 %653, %655
  %659 = xor i64 %653, %657
  %660 = add nuw nsw i64 %658, %659
  %661 = icmp eq i64 %660, 2
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %17, align 1
  %663 = load i64, i64* %RBP.i, align 8
  %664 = add i64 %663, -12
  %665 = add i64 %415, 125
  store i64 %665, i64* %3, align 8
  %666 = inttoptr i64 %664 to i32*
  %667 = load i32, i32* %666, align 4
  %668 = sext i32 %667 to i64
  store i64 %668, i64* %RCX.i4476, align 8
  %669 = shl nsw i64 %668, 2
  %670 = add i64 %669, %636
  %671 = load i32, i32* %ESI.i4280, align 4
  %672 = add i64 %415, 128
  store i64 %672, i64* %3, align 8
  %673 = inttoptr i64 %670 to i32*
  store i32 %671, i32* %673, align 4
  %674 = load i64, i64* %3, align 8
  %675 = add i64 %674, 63
  store i64 %675, i64* %3, align 8
  br label %block_.L_404605

block_.L_4045cb:                                  ; preds = %block_404531
  %676 = add i64 %401, 13112
  store i64 %676, i64* %RCX.i4476, align 8
  %677 = icmp ugt i64 %401, -13113
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %12, align 1
  %679 = trunc i64 %676 to i32
  %680 = and i32 %679, 255
  %681 = tail call i32 @llvm.ctpop.i32(i32 %680)
  %682 = trunc i32 %681 to i8
  %683 = and i8 %682, 1
  %684 = xor i8 %683, 1
  store i8 %684, i8* %13, align 1
  %685 = xor i64 %401, 16
  %686 = xor i64 %685, %676
  %687 = lshr i64 %686, 4
  %688 = trunc i64 %687 to i8
  %689 = and i8 %688, 1
  store i8 %689, i8* %14, align 1
  %690 = icmp eq i64 %676, 0
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %15, align 1
  %692 = lshr i64 %676, 63
  %693 = trunc i64 %692 to i8
  store i8 %693, i8* %16, align 1
  %694 = lshr i64 %401, 63
  %695 = xor i64 %692, %694
  %696 = add nuw nsw i64 %695, %692
  %697 = icmp eq i64 %696, 2
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %17, align 1
  %699 = add i64 %415, 26
  store i64 %699, i64* %3, align 8
  %700 = load i32, i32* %374, align 4
  %701 = sext i32 %700 to i64
  %702 = shl nsw i64 %701, 6
  store i64 %702, i64* %RDX.i658, align 8
  %703 = add i64 %702, %676
  store i64 %703, i64* %RCX.i4476, align 8
  %704 = icmp ult i64 %703, %676
  %705 = icmp ult i64 %703, %702
  %706 = or i1 %704, %705
  %707 = zext i1 %706 to i8
  store i8 %707, i8* %12, align 1
  %708 = trunc i64 %703 to i32
  %709 = and i32 %708, 255
  %710 = tail call i32 @llvm.ctpop.i32(i32 %709)
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  %713 = xor i8 %712, 1
  store i8 %713, i8* %13, align 1
  %714 = xor i64 %676, %703
  %715 = lshr i64 %714, 4
  %716 = trunc i64 %715 to i8
  %717 = and i8 %716, 1
  store i8 %717, i8* %14, align 1
  %718 = icmp eq i64 %703, 0
  %719 = zext i1 %718 to i8
  store i8 %719, i8* %15, align 1
  %720 = lshr i64 %703, 63
  %721 = trunc i64 %720 to i8
  store i8 %721, i8* %16, align 1
  %722 = lshr i64 %701, 57
  %723 = and i64 %722, 1
  %724 = xor i64 %720, %692
  %725 = xor i64 %720, %723
  %726 = add nuw nsw i64 %724, %725
  %727 = icmp eq i64 %726, 2
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %17, align 1
  %729 = add i64 %371, -12
  %730 = add i64 %415, 37
  store i64 %730, i64* %3, align 8
  %731 = inttoptr i64 %729 to i32*
  %732 = load i32, i32* %731, align 4
  %733 = sext i32 %732 to i64
  store i64 %733, i64* %RDX.i658, align 8
  %734 = shl nsw i64 %733, 2
  %735 = add i64 %734, %703
  %736 = add i64 %415, 40
  store i64 %736, i64* %3, align 8
  %737 = inttoptr i64 %735 to i32*
  %738 = load i32, i32* %737, align 4
  %739 = zext i32 %738 to i64
  store i64 %739, i64* %RSI.i757, align 8
  %740 = load i64, i64* %RBP.i, align 8
  %741 = add i64 %740, -8
  %742 = add i64 %415, 44
  store i64 %742, i64* %3, align 8
  %743 = inttoptr i64 %741 to i32*
  %744 = load i32, i32* %743, align 4
  %745 = sext i32 %744 to i64
  %746 = shl nsw i64 %745, 6
  store i64 %746, i64* %RCX.i4476, align 8
  %747 = load i64, i64* %RAX.i552, align 8
  %748 = add i64 %746, %747
  store i64 %748, i64* %RAX.i552, align 8
  %749 = icmp ult i64 %748, %747
  %750 = icmp ult i64 %748, %746
  %751 = or i1 %749, %750
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %12, align 1
  %753 = trunc i64 %748 to i32
  %754 = and i32 %753, 255
  %755 = tail call i32 @llvm.ctpop.i32(i32 %754)
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  %758 = xor i8 %757, 1
  store i8 %758, i8* %13, align 1
  %759 = xor i64 %747, %748
  %760 = lshr i64 %759, 4
  %761 = trunc i64 %760 to i8
  %762 = and i8 %761, 1
  store i8 %762, i8* %14, align 1
  %763 = icmp eq i64 %748, 0
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %15, align 1
  %765 = lshr i64 %748, 63
  %766 = trunc i64 %765 to i8
  store i8 %766, i8* %16, align 1
  %767 = lshr i64 %747, 63
  %768 = lshr i64 %745, 57
  %769 = and i64 %768, 1
  %770 = xor i64 %765, %767
  %771 = xor i64 %765, %769
  %772 = add nuw nsw i64 %770, %771
  %773 = icmp eq i64 %772, 2
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %17, align 1
  %775 = add i64 %740, -12
  %776 = add i64 %415, 55
  store i64 %776, i64* %3, align 8
  %777 = inttoptr i64 %775 to i32*
  %778 = load i32, i32* %777, align 4
  %779 = sext i32 %778 to i64
  store i64 %779, i64* %RCX.i4476, align 8
  %780 = shl nsw i64 %779, 2
  %781 = add i64 %780, %748
  %782 = add i64 %415, 58
  store i64 %782, i64* %3, align 8
  %783 = inttoptr i64 %781 to i32*
  store i32 %738, i32* %783, align 4
  %.pre427 = load i64, i64* %3, align 8
  br label %block_.L_404605

block_.L_404605:                                  ; preds = %block_.L_4045cb, %block_404546
  %784 = phi i64 [ %.pre427, %block_.L_4045cb ], [ %675, %block_404546 ]
  store i64 4, i64* %RAX.i552, align 8
  %785 = load i64, i64* %RBP.i, align 8
  %786 = add i64 %785, -2176
  store i64 %786, i64* %RCX.i4476, align 8
  %787 = add i64 %785, -1056
  store i64 %787, i64* %RDX.i658, align 8
  %788 = add i64 %785, -8
  %789 = add i64 %784, 23
  store i64 %789, i64* %3, align 8
  %790 = inttoptr i64 %788 to i32*
  %791 = load i32, i32* %790, align 4
  %792 = sext i32 %791 to i64
  %793 = shl nsw i64 %792, 6
  store i64 %793, i64* %RSI.i757, align 8
  %794 = add i64 %793, %787
  store i64 %794, i64* %RDX.i658, align 8
  %795 = icmp ult i64 %794, %787
  %796 = icmp ult i64 %794, %793
  %797 = or i1 %795, %796
  %798 = zext i1 %797 to i8
  store i8 %798, i8* %12, align 1
  %799 = trunc i64 %794 to i32
  %800 = and i32 %799, 255
  %801 = tail call i32 @llvm.ctpop.i32(i32 %800)
  %802 = trunc i32 %801 to i8
  %803 = and i8 %802, 1
  %804 = xor i8 %803, 1
  store i8 %804, i8* %13, align 1
  %805 = xor i64 %787, %794
  %806 = lshr i64 %805, 4
  %807 = trunc i64 %806 to i8
  %808 = and i8 %807, 1
  store i8 %808, i8* %14, align 1
  %809 = icmp eq i64 %794, 0
  %810 = zext i1 %809 to i8
  store i8 %810, i8* %15, align 1
  %811 = lshr i64 %794, 63
  %812 = trunc i64 %811 to i8
  store i8 %812, i8* %16, align 1
  %813 = lshr i64 %787, 63
  %814 = lshr i64 %792, 57
  %815 = and i64 %814, 1
  %816 = xor i64 %811, %813
  %817 = xor i64 %811, %815
  %818 = add nuw nsw i64 %816, %817
  %819 = icmp eq i64 %818, 2
  %820 = zext i1 %819 to i8
  store i8 %820, i8* %17, align 1
  %821 = add i64 %785, -12
  %822 = add i64 %784, 34
  store i64 %822, i64* %3, align 8
  %823 = inttoptr i64 %821 to i32*
  %824 = load i32, i32* %823, align 4
  %825 = sext i32 %824 to i64
  store i64 %825, i64* %RSI.i757, align 8
  %826 = shl nsw i64 %825, 2
  %827 = add i64 %826, %794
  %828 = add i64 %784, 37
  store i64 %828, i64* %3, align 8
  %829 = inttoptr i64 %827 to i32*
  %830 = load i32, i32* %829, align 4
  %831 = zext i32 %830 to i64
  store i64 %831, i64* %RDI.i4259, align 8
  %832 = add i64 %784, 41
  store i64 %832, i64* %3, align 8
  %833 = load i32, i32* %790, align 4
  %834 = zext i32 %833 to i64
  store i64 %834, i64* %335, align 8
  %835 = add i64 %785, -2268
  %836 = add i64 %784, 47
  store i64 %836, i64* %3, align 8
  %837 = inttoptr i64 %835 to i32*
  store i32 4, i32* %837, align 4
  %838 = load i32, i32* %R8D.i4254, align 4
  %839 = zext i32 %838 to i64
  %840 = load i64, i64* %3, align 8
  store i64 %839, i64* %RAX.i552, align 8
  %841 = sext i32 %838 to i64
  %842 = lshr i64 %841, 32
  store i64 %842, i64* %219, align 8
  %843 = load i64, i64* %RBP.i, align 8
  %844 = add i64 %843, -2268
  %845 = add i64 %840, 11
  store i64 %845, i64* %3, align 8
  %846 = inttoptr i64 %844 to i32*
  %847 = load i32, i32* %846, align 4
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %335, align 8
  %849 = add i64 %840, 14
  store i64 %849, i64* %3, align 8
  %850 = sext i32 %847 to i64
  %851 = shl nuw i64 %842, 32
  %852 = or i64 %851, %839
  %853 = sdiv i64 %852, %850
  %854 = shl i64 %853, 32
  %855 = ashr exact i64 %854, 32
  %856 = icmp eq i64 %853, %855
  br i1 %856, label %859, label %857

; <label>:857:                                    ; preds = %block_.L_404605
  %858 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %849, %struct.Memory* %MEMORY.2)
  %.pre428 = load i32, i32* %EDX.i4468, align 4
  %.pre429 = load i64, i64* %3, align 8
  %.pre430 = load i64, i64* %RBP.i, align 8
  %.pre431 = load i32, i32* %R8D.i4254, align 4
  br label %routine_idivl__r8d.exit4239

; <label>:859:                                    ; preds = %block_.L_404605
  %860 = srem i64 %852, %850
  %861 = and i64 %853, 4294967295
  store i64 %861, i64* %RAX.i552, align 8
  %862 = and i64 %860, 4294967295
  store i64 %862, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %863 = trunc i64 %860 to i32
  br label %routine_idivl__r8d.exit4239

routine_idivl__r8d.exit4239:                      ; preds = %859, %857
  %864 = phi i32 [ %.pre431, %857 ], [ %847, %859 ]
  %865 = phi i64 [ %.pre430, %857 ], [ %843, %859 ]
  %866 = phi i64 [ %.pre429, %857 ], [ %849, %859 ]
  %867 = phi i32 [ %.pre428, %857 ], [ %863, %859 ]
  %868 = phi %struct.Memory* [ %858, %857 ], [ %MEMORY.2, %859 ]
  %869 = sext i32 %867 to i64
  %870 = shl nsw i64 %869, 8
  store i64 %870, i64* %RSI.i757, align 8
  %871 = load i64, i64* %RCX.i4476, align 8
  %872 = add i64 %870, %871
  store i64 %872, i64* %RCX.i4476, align 8
  %873 = icmp ult i64 %872, %871
  %874 = icmp ult i64 %872, %870
  %875 = or i1 %873, %874
  %876 = zext i1 %875 to i8
  store i8 %876, i8* %12, align 1
  %877 = trunc i64 %872 to i32
  %878 = and i32 %877, 255
  %879 = tail call i32 @llvm.ctpop.i32(i32 %878)
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  store i8 %882, i8* %13, align 1
  %883 = xor i64 %871, %872
  %884 = lshr i64 %883, 4
  %885 = trunc i64 %884 to i8
  %886 = and i8 %885, 1
  store i8 %886, i8* %14, align 1
  %887 = icmp eq i64 %872, 0
  %888 = zext i1 %887 to i8
  store i8 %888, i8* %15, align 1
  %889 = lshr i64 %872, 63
  %890 = trunc i64 %889 to i8
  store i8 %890, i8* %16, align 1
  %891 = lshr i64 %871, 63
  %892 = lshr i64 %869, 55
  %893 = and i64 %892, 1
  %894 = xor i64 %889, %891
  %895 = xor i64 %889, %893
  %896 = add nuw nsw i64 %894, %895
  %897 = icmp eq i64 %896, 2
  %898 = zext i1 %897 to i8
  store i8 %898, i8* %17, align 1
  %899 = add i64 %865, -8
  %900 = add i64 %866, 13
  store i64 %900, i64* %3, align 8
  %901 = inttoptr i64 %899 to i32*
  %902 = load i32, i32* %901, align 4
  %903 = zext i32 %902 to i64
  store i64 %903, i64* %RAX.i552, align 8
  %904 = sext i32 %902 to i64
  %905 = lshr i64 %904, 32
  store i64 %905, i64* %219, align 8
  %906 = add i64 %866, 19
  store i64 %906, i64* %3, align 8
  %907 = sext i32 %864 to i64
  %908 = shl nuw i64 %905, 32
  %909 = or i64 %908, %903
  %910 = sdiv i64 %909, %907
  %911 = shl i64 %910, 32
  %912 = ashr exact i64 %911, 32
  %913 = icmp eq i64 %910, %912
  br i1 %913, label %916, label %914

; <label>:914:                                    ; preds = %routine_idivl__r8d.exit4239
  %915 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %906, %struct.Memory* %868)
  %.pre432 = load i32, i32* %EAX.i551, align 4
  %.pre433 = load i64, i64* %3, align 8
  %.pre434 = load i64, i64* %RCX.i4476, align 8
  %.pre435 = load i64, i64* %RBP.i, align 8
  %.pre436 = load i32, i32* %R8D.i4254, align 4
  br label %routine_idivl__r8d.exit4218

; <label>:916:                                    ; preds = %routine_idivl__r8d.exit4239
  %917 = srem i64 %909, %907
  %918 = and i64 %910, 4294967295
  store i64 %918, i64* %RAX.i552, align 8
  %919 = and i64 %917, 4294967295
  store i64 %919, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %920 = trunc i64 %910 to i32
  br label %routine_idivl__r8d.exit4218

routine_idivl__r8d.exit4218:                      ; preds = %916, %914
  %921 = phi i32 [ %.pre436, %914 ], [ %864, %916 ]
  %922 = phi i64 [ %.pre435, %914 ], [ %865, %916 ]
  %923 = phi i64 [ %.pre434, %914 ], [ %872, %916 ]
  %924 = phi i64 [ %.pre433, %914 ], [ %906, %916 ]
  %925 = phi i32 [ %.pre432, %914 ], [ %920, %916 ]
  %926 = phi %struct.Memory* [ %915, %914 ], [ %868, %916 ]
  %927 = sext i32 %925 to i64
  %928 = shl nsw i64 %927, 6
  store i64 %928, i64* %RSI.i757, align 8
  %929 = add i64 %928, %923
  store i64 %929, i64* %RCX.i4476, align 8
  %930 = icmp ult i64 %929, %923
  %931 = icmp ult i64 %929, %928
  %932 = or i1 %930, %931
  %933 = zext i1 %932 to i8
  store i8 %933, i8* %12, align 1
  %934 = trunc i64 %929 to i32
  %935 = and i32 %934, 255
  %936 = tail call i32 @llvm.ctpop.i32(i32 %935)
  %937 = trunc i32 %936 to i8
  %938 = and i8 %937, 1
  %939 = xor i8 %938, 1
  store i8 %939, i8* %13, align 1
  %940 = xor i64 %923, %929
  %941 = lshr i64 %940, 4
  %942 = trunc i64 %941 to i8
  %943 = and i8 %942, 1
  store i8 %943, i8* %14, align 1
  %944 = icmp eq i64 %929, 0
  %945 = zext i1 %944 to i8
  store i8 %945, i8* %15, align 1
  %946 = lshr i64 %929, 63
  %947 = trunc i64 %946 to i8
  store i8 %947, i8* %16, align 1
  %948 = lshr i64 %923, 63
  %949 = lshr i64 %927, 57
  %950 = and i64 %949, 1
  %951 = xor i64 %946, %948
  %952 = xor i64 %946, %950
  %953 = add nuw nsw i64 %951, %952
  %954 = icmp eq i64 %953, 2
  %955 = zext i1 %954 to i8
  store i8 %955, i8* %17, align 1
  %956 = add i64 %922, -12
  %957 = add i64 %924, 13
  store i64 %957, i64* %3, align 8
  %958 = inttoptr i64 %956 to i32*
  %959 = load i32, i32* %958, align 4
  %960 = zext i32 %959 to i64
  store i64 %960, i64* %RAX.i552, align 8
  %961 = sext i32 %959 to i64
  %962 = lshr i64 %961, 32
  store i64 %962, i64* %219, align 8
  %963 = add i64 %924, 17
  store i64 %963, i64* %3, align 8
  %964 = sext i32 %921 to i64
  %965 = shl nuw i64 %962, 32
  %966 = or i64 %965, %960
  %967 = sdiv i64 %966, %964
  %968 = shl i64 %967, 32
  %969 = ashr exact i64 %968, 32
  %970 = icmp eq i64 %967, %969
  br i1 %970, label %973, label %971

; <label>:971:                                    ; preds = %routine_idivl__r8d.exit4218
  %972 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %963, %struct.Memory* %926)
  %.pre437 = load i32, i32* %EDX.i4468, align 4
  %.pre438 = load i64, i64* %3, align 8
  %.pre439 = load i64, i64* %RCX.i4476, align 8
  %.pre440 = load i64, i64* %RBP.i, align 8
  %.pre441 = load i32, i32* %R8D.i4254, align 4
  br label %routine_idivl__r8d.exit4201

; <label>:973:                                    ; preds = %routine_idivl__r8d.exit4218
  %974 = srem i64 %966, %964
  %975 = and i64 %967, 4294967295
  store i64 %975, i64* %RAX.i552, align 8
  %976 = and i64 %974, 4294967295
  store i64 %976, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %977 = trunc i64 %974 to i32
  br label %routine_idivl__r8d.exit4201

routine_idivl__r8d.exit4201:                      ; preds = %973, %971
  %978 = phi i32 [ %.pre441, %971 ], [ %921, %973 ]
  %979 = phi i64 [ %.pre440, %971 ], [ %922, %973 ]
  %980 = phi i64 [ %.pre439, %971 ], [ %929, %973 ]
  %981 = phi i64 [ %.pre438, %971 ], [ %963, %973 ]
  %982 = phi i32 [ %.pre437, %971 ], [ %977, %973 ]
  %983 = phi %struct.Memory* [ %972, %971 ], [ %926, %973 ]
  %984 = sext i32 %982 to i64
  %985 = shl nsw i64 %984, 4
  store i64 %985, i64* %RSI.i757, align 8
  %986 = add i64 %985, %980
  store i64 %986, i64* %RCX.i4476, align 8
  %987 = icmp ult i64 %986, %980
  %988 = icmp ult i64 %986, %985
  %989 = or i1 %987, %988
  %990 = zext i1 %989 to i8
  store i8 %990, i8* %12, align 1
  %991 = trunc i64 %986 to i32
  %992 = and i32 %991, 255
  %993 = tail call i32 @llvm.ctpop.i32(i32 %992)
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  %996 = xor i8 %995, 1
  store i8 %996, i8* %13, align 1
  %997 = xor i64 %985, %980
  %998 = xor i64 %997, %986
  %999 = lshr i64 %998, 4
  %1000 = trunc i64 %999 to i8
  %1001 = and i8 %1000, 1
  store i8 %1001, i8* %14, align 1
  %1002 = icmp eq i64 %986, 0
  %1003 = zext i1 %1002 to i8
  store i8 %1003, i8* %15, align 1
  %1004 = lshr i64 %986, 63
  %1005 = trunc i64 %1004 to i8
  store i8 %1005, i8* %16, align 1
  %1006 = lshr i64 %980, 63
  %1007 = lshr i64 %984, 59
  %1008 = and i64 %1007, 1
  %1009 = xor i64 %1004, %1006
  %1010 = xor i64 %1004, %1008
  %1011 = add nuw nsw i64 %1009, %1010
  %1012 = icmp eq i64 %1011, 2
  %1013 = zext i1 %1012 to i8
  store i8 %1013, i8* %17, align 1
  %1014 = add i64 %979, -12
  %1015 = add i64 %981, 13
  store i64 %1015, i64* %3, align 8
  %1016 = inttoptr i64 %1014 to i32*
  %1017 = load i32, i32* %1016, align 4
  %1018 = zext i32 %1017 to i64
  store i64 %1018, i64* %RAX.i552, align 8
  %1019 = sext i32 %1017 to i64
  %1020 = lshr i64 %1019, 32
  store i64 %1020, i64* %219, align 8
  %1021 = add i64 %981, 19
  store i64 %1021, i64* %3, align 8
  %1022 = sext i32 %978 to i64
  %1023 = shl nuw i64 %1020, 32
  %1024 = or i64 %1023, %1018
  %1025 = sdiv i64 %1024, %1022
  %1026 = shl i64 %1025, 32
  %1027 = ashr exact i64 %1026, 32
  %1028 = icmp eq i64 %1025, %1027
  br i1 %1028, label %1031, label %1029

; <label>:1029:                                   ; preds = %routine_idivl__r8d.exit4201
  %1030 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1021, %struct.Memory* %983)
  %.pre442 = load i32, i32* %EAX.i551, align 4
  %.pre443 = load i64, i64* %3, align 8
  %.pre444 = load i64, i64* %RCX.i4476, align 8
  br label %routine_idivl__r8d.exit

; <label>:1031:                                   ; preds = %routine_idivl__r8d.exit4201
  %1032 = srem i64 %1024, %1022
  %1033 = and i64 %1025, 4294967295
  store i64 %1033, i64* %RAX.i552, align 8
  %1034 = and i64 %1032, 4294967295
  store i64 %1034, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %1035 = trunc i64 %1025 to i32
  br label %routine_idivl__r8d.exit

routine_idivl__r8d.exit:                          ; preds = %1031, %1029
  %1036 = phi i64 [ %.pre444, %1029 ], [ %986, %1031 ]
  %1037 = phi i64 [ %.pre443, %1029 ], [ %1021, %1031 ]
  %1038 = phi i32 [ %.pre442, %1029 ], [ %1035, %1031 ]
  %1039 = phi %struct.Memory* [ %1030, %1029 ], [ %983, %1031 ]
  %1040 = sext i32 %1038 to i64
  store i64 %1040, i64* %RSI.i757, align 8
  %1041 = shl nsw i64 %1040, 2
  %1042 = add i64 %1036, %1041
  %1043 = load i32, i32* %EDI.i, align 4
  %1044 = add i64 %1037, 6
  store i64 %1044, i64* %3, align 8
  %1045 = inttoptr i64 %1042 to i32*
  store i32 %1043, i32* %1045, align 4
  %1046 = load i64, i64* %RBP.i, align 8
  %1047 = add i64 %1046, -8
  %1048 = load i64, i64* %3, align 8
  %1049 = add i64 %1048, 3
  store i64 %1049, i64* %3, align 8
  %1050 = inttoptr i64 %1047 to i32*
  %1051 = load i32, i32* %1050, align 4
  %1052 = add i32 %1051, 1
  %1053 = zext i32 %1052 to i64
  store i64 %1053, i64* %RAX.i552, align 8
  %1054 = icmp eq i32 %1051, -1
  %1055 = icmp eq i32 %1052, 0
  %1056 = or i1 %1054, %1055
  %1057 = zext i1 %1056 to i8
  store i8 %1057, i8* %12, align 1
  %1058 = and i32 %1052, 255
  %1059 = tail call i32 @llvm.ctpop.i32(i32 %1058)
  %1060 = trunc i32 %1059 to i8
  %1061 = and i8 %1060, 1
  %1062 = xor i8 %1061, 1
  store i8 %1062, i8* %13, align 1
  %1063 = xor i32 %1052, %1051
  %1064 = lshr i32 %1063, 4
  %1065 = trunc i32 %1064 to i8
  %1066 = and i8 %1065, 1
  store i8 %1066, i8* %14, align 1
  %1067 = zext i1 %1055 to i8
  store i8 %1067, i8* %15, align 1
  %1068 = lshr i32 %1052, 31
  %1069 = trunc i32 %1068 to i8
  store i8 %1069, i8* %16, align 1
  %1070 = lshr i32 %1051, 31
  %1071 = xor i32 %1068, %1070
  %1072 = add nuw nsw i32 %1071, %1068
  %1073 = icmp eq i32 %1072, 2
  %1074 = zext i1 %1073 to i8
  store i8 %1074, i8* %17, align 1
  %1075 = add i64 %1048, 9
  store i64 %1075, i64* %3, align 8
  store i32 %1052, i32* %1050, align 4
  %1076 = load i64, i64* %3, align 8
  %1077 = add i64 %1076, -353
  store i64 %1077, i64* %3, align 8
  br label %block_.L_404527

block_.L_40468d:                                  ; preds = %block_.L_404527
  %1078 = add i64 %371, -12
  %1079 = add i64 %400, 8
  store i64 %1079, i64* %3, align 8
  %1080 = inttoptr i64 %1078 to i32*
  %1081 = load i32, i32* %1080, align 4
  %1082 = add i32 %1081, 1
  %1083 = zext i32 %1082 to i64
  store i64 %1083, i64* %RAX.i552, align 8
  %1084 = icmp eq i32 %1081, -1
  %1085 = icmp eq i32 %1082, 0
  %1086 = or i1 %1084, %1085
  %1087 = zext i1 %1086 to i8
  store i8 %1087, i8* %12, align 1
  %1088 = and i32 %1082, 255
  %1089 = tail call i32 @llvm.ctpop.i32(i32 %1088)
  %1090 = trunc i32 %1089 to i8
  %1091 = and i8 %1090, 1
  %1092 = xor i8 %1091, 1
  store i8 %1092, i8* %13, align 1
  %1093 = xor i32 %1082, %1081
  %1094 = lshr i32 %1093, 4
  %1095 = trunc i32 %1094 to i8
  %1096 = and i8 %1095, 1
  store i8 %1096, i8* %14, align 1
  %1097 = zext i1 %1085 to i8
  store i8 %1097, i8* %15, align 1
  %1098 = lshr i32 %1082, 31
  %1099 = trunc i32 %1098 to i8
  store i8 %1099, i8* %16, align 1
  %1100 = lshr i32 %1081, 31
  %1101 = xor i32 %1098, %1100
  %1102 = add nuw nsw i32 %1101, %1098
  %1103 = icmp eq i32 %1102, 2
  %1104 = zext i1 %1103 to i8
  store i8 %1104, i8* %17, align 1
  %1105 = add i64 %400, 14
  store i64 %1105, i64* %3, align 8
  store i32 %1082, i32* %1080, align 4
  %1106 = load i64, i64* %3, align 8
  %1107 = add i64 %1106, -389
  store i64 %1107, i64* %3, align 8
  br label %block_.L_404516

block_.L_4046a0:                                  ; preds = %block_.L_404516
  %1108 = add i64 %337, -20
  %1109 = add i64 %366, 7
  store i64 %1109, i64* %3, align 8
  %1110 = inttoptr i64 %1108 to i32*
  store i32 0, i32* %1110, align 4
  %.pre307 = load i64, i64* %3, align 8
  br label %block_.L_4046a7

block_.L_4046a7:                                  ; preds = %block_.L_404ab1, %block_.L_4046a0
  %1111 = phi i64 [ %3582, %block_.L_404ab1 ], [ %.pre307, %block_.L_4046a0 ]
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %CL.i, align 1
  %1112 = load i64, i64* %RBP.i, align 8
  %1113 = add i64 %1112, -20
  %1114 = add i64 %1111, 8
  store i64 %1114, i64* %3, align 8
  %1115 = inttoptr i64 %1113 to i32*
  %1116 = load i32, i32* %1115, align 4
  %1117 = add i32 %1116, -4
  %1118 = icmp ult i32 %1116, 4
  %1119 = zext i1 %1118 to i8
  store i8 %1119, i8* %12, align 1
  %1120 = and i32 %1117, 255
  %1121 = tail call i32 @llvm.ctpop.i32(i32 %1120)
  %1122 = trunc i32 %1121 to i8
  %1123 = and i8 %1122, 1
  %1124 = xor i8 %1123, 1
  store i8 %1124, i8* %13, align 1
  %1125 = xor i32 %1117, %1116
  %1126 = lshr i32 %1125, 4
  %1127 = trunc i32 %1126 to i8
  %1128 = and i8 %1127, 1
  store i8 %1128, i8* %14, align 1
  %1129 = icmp eq i32 %1117, 0
  %1130 = zext i1 %1129 to i8
  store i8 %1130, i8* %15, align 1
  %1131 = lshr i32 %1117, 31
  %1132 = trunc i32 %1131 to i8
  store i8 %1132, i8* %16, align 1
  %1133 = lshr i32 %1116, 31
  %1134 = xor i32 %1131, %1133
  %1135 = add nuw nsw i32 %1134, %1133
  %1136 = icmp eq i32 %1135, 2
  %1137 = zext i1 %1136 to i8
  store i8 %1137, i8* %17, align 1
  %1138 = add i64 %1112, -2269
  %1139 = add i64 %1111, 14
  store i64 %1139, i64* %3, align 8
  %1140 = inttoptr i64 %1138 to i8*
  store i8 0, i8* %1140, align 1
  %1141 = load i64, i64* %3, align 8
  %1142 = add i64 %1141, 24
  %1143 = add i64 %1141, 6
  %1144 = load i8, i8* %16, align 1
  %1145 = icmp ne i8 %1144, 0
  %1146 = load i8, i8* %17, align 1
  %1147 = icmp ne i8 %1146, 0
  %1148 = xor i1 %1145, %1147
  %1149 = select i1 %1148, i64 %1143, i64 %1142
  store i64 %1149, i64* %3, align 8
  br i1 %1148, label %block_4046bb, label %block_.L_4046cd

block_4046bb:                                     ; preds = %block_.L_4046a7
  %1150 = load i64, i64* %RBP.i, align 8
  %1151 = add i64 %1150, -2260
  %1152 = add i64 %1149, 7
  store i64 %1152, i64* %3, align 8
  %1153 = inttoptr i64 %1151 to i32*
  %1154 = load i32, i32* %1153, align 4
  %1155 = icmp ne i32 %1154, 0
  %1156 = zext i1 %1155 to i64
  %1157 = xor i64 %1156, 255
  %1158 = trunc i64 %1157 to i8
  store i8 %1158, i8* %AL.i, align 1
  store i8 0, i8* %12, align 1
  %1159 = trunc i64 %1157 to i32
  %1160 = tail call i32 @llvm.ctpop.i32(i32 %1159)
  %1161 = trunc i32 %1160 to i8
  %1162 = and i8 %1161, 1
  %1163 = xor i8 %1162, 1
  store i8 %1163, i8* %13, align 1
  store i8 0, i8* %15, align 1
  store i8 1, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %1164 = add i64 %1150, -2269
  %1165 = add i64 %1149, 18
  store i64 %1165, i64* %3, align 8
  %1166 = inttoptr i64 %1164 to i8*
  store i8 %1158, i8* %1166, align 1
  %.pre308 = load i64, i64* %3, align 8
  br label %block_.L_4046cd

block_.L_4046cd:                                  ; preds = %block_.L_4046a7, %block_4046bb
  %1167 = phi i64 [ %1142, %block_.L_4046a7 ], [ %.pre308, %block_4046bb ]
  %1168 = load i64, i64* %RBP.i, align 8
  %1169 = add i64 %1168, -2269
  %1170 = add i64 %1167, 6
  store i64 %1170, i64* %3, align 8
  %1171 = inttoptr i64 %1169 to i8*
  %1172 = load i8, i8* %1171, align 1
  store i8 %1172, i8* %AL.i, align 1
  %1173 = and i8 %1172, 1
  store i8 0, i8* %12, align 1
  %1174 = zext i8 %1173 to i32
  %1175 = tail call i32 @llvm.ctpop.i32(i32 %1174)
  %1176 = trunc i32 %1175 to i8
  %1177 = xor i8 %1176, 1
  store i8 %1177, i8* %13, align 1
  %1178 = xor i8 %1173, 1
  store i8 %1178, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %1179 = icmp eq i8 %1178, 0
  %.v = select i1 %1179, i64 19, i64 14
  %1180 = add i64 %1167, %.v
  store i64 %1180, i64* %3, align 8
  br i1 %1179, label %block_.L_4046e0, label %block_4046db

block_4046db:                                     ; preds = %block_.L_4046cd
  %1181 = add i64 %1168, -12
  %1182 = add i64 %1180, 1008
  store i64 %1182, i64* %3, align 8
  %1183 = inttoptr i64 %1181 to i32*
  store i32 0, i32* %1183, align 4
  %.pre309 = load i64, i64* %3, align 8
  br label %block_.L_404acb

block_.L_4046e0:                                  ; preds = %block_.L_4046cd
  %1184 = add i64 %1168, -16
  %1185 = add i64 %1180, 7
  store i64 %1185, i64* %3, align 8
  %1186 = inttoptr i64 %1184 to i32*
  store i32 0, i32* %1186, align 4
  %.pre421 = load i64, i64* %3, align 8
  br label %block_.L_4046e7

block_.L_4046e7:                                  ; preds = %block_.L_404a9e, %block_.L_4046e0
  %1187 = phi i64 [ %3552, %block_.L_404a9e ], [ %.pre421, %block_.L_4046e0 ]
  %1188 = load i64, i64* %RBP.i, align 8
  %1189 = add i64 %1188, -16
  %1190 = add i64 %1187, 4
  store i64 %1190, i64* %3, align 8
  %1191 = inttoptr i64 %1189 to i32*
  %1192 = load i32, i32* %1191, align 4
  %1193 = add i32 %1192, -4
  %1194 = icmp ult i32 %1192, 4
  %1195 = zext i1 %1194 to i8
  store i8 %1195, i8* %12, align 1
  %1196 = and i32 %1193, 255
  %1197 = tail call i32 @llvm.ctpop.i32(i32 %1196)
  %1198 = trunc i32 %1197 to i8
  %1199 = and i8 %1198, 1
  %1200 = xor i8 %1199, 1
  store i8 %1200, i8* %13, align 1
  %1201 = xor i32 %1193, %1192
  %1202 = lshr i32 %1201, 4
  %1203 = trunc i32 %1202 to i8
  %1204 = and i8 %1203, 1
  store i8 %1204, i8* %14, align 1
  %1205 = icmp eq i32 %1193, 0
  %1206 = zext i1 %1205 to i8
  store i8 %1206, i8* %15, align 1
  %1207 = lshr i32 %1193, 31
  %1208 = trunc i32 %1207 to i8
  store i8 %1208, i8* %16, align 1
  %1209 = lshr i32 %1192, 31
  %1210 = xor i32 %1207, %1209
  %1211 = add nuw nsw i32 %1210, %1209
  %1212 = icmp eq i32 %1211, 2
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %17, align 1
  %1214 = icmp ne i8 %1208, 0
  %1215 = xor i1 %1214, %1212
  %.v468 = select i1 %1215, i64 10, i64 970
  %1216 = add i64 %1187, %.v468
  store i64 %1216, i64* %3, align 8
  br i1 %1215, label %block_4046f1, label %block_.L_404ab1

block_4046f1:                                     ; preds = %block_.L_4046e7
  %1217 = add i64 %1188, -12
  %1218 = add i64 %1216, 7
  store i64 %1218, i64* %3, align 8
  %1219 = inttoptr i64 %1217 to i32*
  store i32 0, i32* %1219, align 4
  %.pre422 = load i64, i64* %3, align 8
  br label %block_.L_4046f8

block_.L_4046f8:                                  ; preds = %block_.L_4047f2, %block_4046f1
  %1220 = phi i64 [ %2367, %block_.L_4047f2 ], [ %.pre422, %block_4046f1 ]
  %1221 = load i64, i64* %RBP.i, align 8
  %1222 = add i64 %1221, -12
  %1223 = add i64 %1220, 4
  store i64 %1223, i64* %3, align 8
  %1224 = inttoptr i64 %1222 to i32*
  %1225 = load i32, i32* %1224, align 4
  %1226 = add i32 %1225, -4
  %1227 = icmp ult i32 %1225, 4
  %1228 = zext i1 %1227 to i8
  store i8 %1228, i8* %12, align 1
  %1229 = and i32 %1226, 255
  %1230 = tail call i32 @llvm.ctpop.i32(i32 %1229)
  %1231 = trunc i32 %1230 to i8
  %1232 = and i8 %1231, 1
  %1233 = xor i8 %1232, 1
  store i8 %1233, i8* %13, align 1
  %1234 = xor i32 %1226, %1225
  %1235 = lshr i32 %1234, 4
  %1236 = trunc i32 %1235 to i8
  %1237 = and i8 %1236, 1
  store i8 %1237, i8* %14, align 1
  %1238 = icmp eq i32 %1226, 0
  %1239 = zext i1 %1238 to i8
  store i8 %1239, i8* %15, align 1
  %1240 = lshr i32 %1226, 31
  %1241 = trunc i32 %1240 to i8
  store i8 %1241, i8* %16, align 1
  %1242 = lshr i32 %1225, 31
  %1243 = xor i32 %1240, %1242
  %1244 = add nuw nsw i32 %1243, %1242
  %1245 = icmp eq i32 %1244, 2
  %1246 = zext i1 %1245 to i8
  store i8 %1246, i8* %17, align 1
  %1247 = icmp ne i8 %1241, 0
  %1248 = xor i1 %1247, %1245
  %.v469 = select i1 %1248, i64 10, i64 472
  %1249 = add i64 %1220, %.v469
  %1250 = add i64 %1221, -8
  %1251 = add i64 %1249, 7
  store i64 %1251, i64* %3, align 8
  %1252 = inttoptr i64 %1250 to i32*
  store i32 0, i32* %1252, align 4
  %.pre425 = load i64, i64* %3, align 8
  br i1 %1248, label %block_.L_404709.preheader, label %block_.L_4048d7.preheader

block_.L_4048d7.preheader:                        ; preds = %block_.L_4046f8
  br label %block_.L_4048d7

block_.L_404709.preheader:                        ; preds = %block_.L_4046f8
  br label %block_.L_404709

block_.L_404709:                                  ; preds = %block_.L_404709.preheader, %block_404713
  %1253 = phi i64 [ %1866, %block_404713 ], [ %.pre425, %block_.L_404709.preheader ]
  %1254 = load i64, i64* %RBP.i, align 8
  %1255 = add i64 %1254, -8
  %1256 = add i64 %1253, 4
  store i64 %1256, i64* %3, align 8
  %1257 = inttoptr i64 %1255 to i32*
  %1258 = load i32, i32* %1257, align 4
  %1259 = add i32 %1258, -2
  %1260 = icmp ult i32 %1258, 2
  %1261 = zext i1 %1260 to i8
  store i8 %1261, i8* %12, align 1
  %1262 = and i32 %1259, 255
  %1263 = tail call i32 @llvm.ctpop.i32(i32 %1262)
  %1264 = trunc i32 %1263 to i8
  %1265 = and i8 %1264, 1
  %1266 = xor i8 %1265, 1
  store i8 %1266, i8* %13, align 1
  %1267 = xor i32 %1259, %1258
  %1268 = lshr i32 %1267, 4
  %1269 = trunc i32 %1268 to i8
  %1270 = and i8 %1269, 1
  store i8 %1270, i8* %14, align 1
  %1271 = icmp eq i32 %1259, 0
  %1272 = zext i1 %1271 to i8
  store i8 %1272, i8* %15, align 1
  %1273 = lshr i32 %1259, 31
  %1274 = trunc i32 %1273 to i8
  store i8 %1274, i8* %16, align 1
  %1275 = lshr i32 %1258, 31
  %1276 = xor i32 %1273, %1275
  %1277 = add nuw nsw i32 %1276, %1275
  %1278 = icmp eq i32 %1277, 2
  %1279 = zext i1 %1278 to i8
  store i8 %1279, i8* %17, align 1
  %1280 = icmp ne i8 %1274, 0
  %1281 = xor i1 %1280, %1278
  %.v472 = select i1 %1281, i64 10, i64 233
  %1282 = add i64 %1253, %.v472
  %1283 = add i64 %1254, -2176
  %1284 = add i64 %1282, 7
  store i64 %1284, i64* %3, align 8
  store i64 %1283, i64* %RAX.i552, align 8
  br i1 %1281, label %block_404713, label %block_.L_4047f2

block_404713:                                     ; preds = %block_.L_404709
  store i64 3, i64* %RCX.i4476, align 8
  %1285 = add i64 %1282, 15
  store i64 %1285, i64* %3, align 8
  %1286 = load i32, i32* %1257, align 4
  %1287 = sub i32 3, %1286
  %1288 = zext i32 %1287 to i64
  store i64 %1288, i64* %RCX.i4476, align 8
  %1289 = icmp ugt i32 %1286, 3
  %1290 = zext i1 %1289 to i8
  store i8 %1290, i8* %12, align 1
  %1291 = and i32 %1287, 255
  %1292 = tail call i32 @llvm.ctpop.i32(i32 %1291)
  %1293 = trunc i32 %1292 to i8
  %1294 = and i8 %1293, 1
  %1295 = xor i8 %1294, 1
  store i8 %1295, i8* %13, align 1
  %1296 = xor i32 %1287, %1286
  %1297 = lshr i32 %1296, 4
  %1298 = trunc i32 %1297 to i8
  %1299 = and i8 %1298, 1
  store i8 %1299, i8* %14, align 1
  %1300 = icmp eq i32 %1287, 0
  %1301 = zext i1 %1300 to i8
  store i8 %1301, i8* %15, align 1
  %1302 = lshr i32 %1287, 31
  %1303 = trunc i32 %1302 to i8
  store i8 %1303, i8* %16, align 1
  %1304 = lshr i32 %1286, 31
  %1305 = add nuw nsw i32 %1302, %1304
  %1306 = icmp eq i32 %1305, 2
  %1307 = zext i1 %1306 to i8
  store i8 %1307, i8* %17, align 1
  %1308 = add i64 %1254, -24
  %1309 = add i64 %1282, 18
  store i64 %1309, i64* %3, align 8
  %1310 = inttoptr i64 %1308 to i32*
  store i32 %1287, i32* %1310, align 4
  %1311 = load i64, i64* %RBP.i, align 8
  %1312 = add i64 %1311, -8
  %1313 = load i64, i64* %3, align 8
  %1314 = add i64 %1313, 4
  store i64 %1314, i64* %3, align 8
  %1315 = inttoptr i64 %1312 to i32*
  %1316 = load i32, i32* %1315, align 4
  %1317 = sext i32 %1316 to i64
  %1318 = shl nsw i64 %1317, 8
  store i64 %1318, i64* %RDX.i658, align 8
  %1319 = load i64, i64* %RAX.i552, align 8
  %1320 = add i64 %1318, %1319
  store i64 %1320, i64* %RSI.i757, align 8
  %1321 = icmp ult i64 %1320, %1319
  %1322 = icmp ult i64 %1320, %1318
  %1323 = or i1 %1321, %1322
  %1324 = zext i1 %1323 to i8
  store i8 %1324, i8* %12, align 1
  %1325 = trunc i64 %1320 to i32
  %1326 = and i32 %1325, 255
  %1327 = tail call i32 @llvm.ctpop.i32(i32 %1326)
  %1328 = trunc i32 %1327 to i8
  %1329 = and i8 %1328, 1
  %1330 = xor i8 %1329, 1
  store i8 %1330, i8* %13, align 1
  %1331 = xor i64 %1319, %1320
  %1332 = lshr i64 %1331, 4
  %1333 = trunc i64 %1332 to i8
  %1334 = and i8 %1333, 1
  store i8 %1334, i8* %14, align 1
  %1335 = icmp eq i64 %1320, 0
  %1336 = zext i1 %1335 to i8
  store i8 %1336, i8* %15, align 1
  %1337 = lshr i64 %1320, 63
  %1338 = trunc i64 %1337 to i8
  store i8 %1338, i8* %16, align 1
  %1339 = lshr i64 %1319, 63
  %1340 = lshr i64 %1317, 55
  %1341 = and i64 %1340, 1
  %1342 = xor i64 %1337, %1339
  %1343 = xor i64 %1337, %1341
  %1344 = add nuw nsw i64 %1342, %1343
  %1345 = icmp eq i64 %1344, 2
  %1346 = zext i1 %1345 to i8
  store i8 %1346, i8* %17, align 1
  %1347 = add i64 %1311, -16
  %1348 = add i64 %1313, 18
  store i64 %1348, i64* %3, align 8
  %1349 = inttoptr i64 %1347 to i32*
  %1350 = load i32, i32* %1349, align 4
  %1351 = sext i32 %1350 to i64
  %1352 = shl nsw i64 %1351, 6
  store i64 %1352, i64* %RDX.i658, align 8
  %1353 = add i64 %1352, %1320
  store i64 %1353, i64* %RSI.i757, align 8
  %1354 = icmp ult i64 %1353, %1320
  %1355 = icmp ult i64 %1353, %1352
  %1356 = or i1 %1354, %1355
  %1357 = zext i1 %1356 to i8
  store i8 %1357, i8* %12, align 1
  %1358 = trunc i64 %1353 to i32
  %1359 = and i32 %1358, 255
  %1360 = tail call i32 @llvm.ctpop.i32(i32 %1359)
  %1361 = trunc i32 %1360 to i8
  %1362 = and i8 %1361, 1
  %1363 = xor i8 %1362, 1
  store i8 %1363, i8* %13, align 1
  %1364 = xor i64 %1320, %1353
  %1365 = lshr i64 %1364, 4
  %1366 = trunc i64 %1365 to i8
  %1367 = and i8 %1366, 1
  store i8 %1367, i8* %14, align 1
  %1368 = icmp eq i64 %1353, 0
  %1369 = zext i1 %1368 to i8
  store i8 %1369, i8* %15, align 1
  %1370 = lshr i64 %1353, 63
  %1371 = trunc i64 %1370 to i8
  store i8 %1371, i8* %16, align 1
  %1372 = lshr i64 %1351, 57
  %1373 = and i64 %1372, 1
  %1374 = xor i64 %1370, %1337
  %1375 = xor i64 %1370, %1373
  %1376 = add nuw nsw i64 %1374, %1375
  %1377 = icmp eq i64 %1376, 2
  %1378 = zext i1 %1377 to i8
  store i8 %1378, i8* %17, align 1
  %1379 = load i64, i64* %RBP.i, align 8
  %1380 = add i64 %1379, -12
  %1381 = add i64 %1313, 29
  store i64 %1381, i64* %3, align 8
  %1382 = inttoptr i64 %1380 to i32*
  %1383 = load i32, i32* %1382, align 4
  %1384 = sext i32 %1383 to i64
  %1385 = shl nsw i64 %1384, 4
  store i64 %1385, i64* %RDX.i658, align 8
  %1386 = add i64 %1385, %1353
  store i64 %1386, i64* %RSI.i757, align 8
  %1387 = icmp ult i64 %1386, %1353
  %1388 = icmp ult i64 %1386, %1385
  %1389 = or i1 %1387, %1388
  %1390 = zext i1 %1389 to i8
  store i8 %1390, i8* %12, align 1
  %1391 = trunc i64 %1386 to i32
  %1392 = and i32 %1391, 255
  %1393 = tail call i32 @llvm.ctpop.i32(i32 %1392)
  %1394 = trunc i32 %1393 to i8
  %1395 = and i8 %1394, 1
  %1396 = xor i8 %1395, 1
  store i8 %1396, i8* %13, align 1
  %1397 = xor i64 %1385, %1353
  %1398 = xor i64 %1397, %1386
  %1399 = lshr i64 %1398, 4
  %1400 = trunc i64 %1399 to i8
  %1401 = and i8 %1400, 1
  store i8 %1401, i8* %14, align 1
  %1402 = icmp eq i64 %1386, 0
  %1403 = zext i1 %1402 to i8
  store i8 %1403, i8* %15, align 1
  %1404 = lshr i64 %1386, 63
  %1405 = trunc i64 %1404 to i8
  store i8 %1405, i8* %16, align 1
  %1406 = lshr i64 %1384, 59
  %1407 = and i64 %1406, 1
  %1408 = xor i64 %1404, %1370
  %1409 = xor i64 %1404, %1407
  %1410 = add nuw nsw i64 %1408, %1409
  %1411 = icmp eq i64 %1410, 2
  %1412 = zext i1 %1411 to i8
  store i8 %1412, i8* %17, align 1
  %1413 = add i64 %1379, -20
  %1414 = add i64 %1313, 40
  store i64 %1414, i64* %3, align 8
  %1415 = inttoptr i64 %1413 to i32*
  %1416 = load i32, i32* %1415, align 4
  %1417 = sext i32 %1416 to i64
  store i64 %1417, i64* %RDX.i658, align 8
  %1418 = shl nsw i64 %1417, 2
  %1419 = add i64 %1418, %1386
  %1420 = add i64 %1313, 43
  store i64 %1420, i64* %3, align 8
  %1421 = inttoptr i64 %1419 to i32*
  %1422 = load i32, i32* %1421, align 4
  %1423 = zext i32 %1422 to i64
  store i64 %1423, i64* %RCX.i4476, align 8
  %1424 = add i64 %1379, -24
  %1425 = add i64 %1313, 47
  store i64 %1425, i64* %3, align 8
  %1426 = inttoptr i64 %1424 to i32*
  %1427 = load i32, i32* %1426, align 4
  %1428 = sext i32 %1427 to i64
  %1429 = shl nsw i64 %1428, 8
  store i64 %1429, i64* %RDX.i658, align 8
  %1430 = load i64, i64* %RAX.i552, align 8
  %1431 = add i64 %1429, %1430
  store i64 %1431, i64* %RSI.i757, align 8
  %1432 = icmp ult i64 %1431, %1430
  %1433 = icmp ult i64 %1431, %1429
  %1434 = or i1 %1432, %1433
  %1435 = zext i1 %1434 to i8
  store i8 %1435, i8* %12, align 1
  %1436 = trunc i64 %1431 to i32
  %1437 = and i32 %1436, 255
  %1438 = tail call i32 @llvm.ctpop.i32(i32 %1437)
  %1439 = trunc i32 %1438 to i8
  %1440 = and i8 %1439, 1
  %1441 = xor i8 %1440, 1
  store i8 %1441, i8* %13, align 1
  %1442 = xor i64 %1430, %1431
  %1443 = lshr i64 %1442, 4
  %1444 = trunc i64 %1443 to i8
  %1445 = and i8 %1444, 1
  store i8 %1445, i8* %14, align 1
  %1446 = icmp eq i64 %1431, 0
  %1447 = zext i1 %1446 to i8
  store i8 %1447, i8* %15, align 1
  %1448 = lshr i64 %1431, 63
  %1449 = trunc i64 %1448 to i8
  store i8 %1449, i8* %16, align 1
  %1450 = lshr i64 %1430, 63
  %1451 = lshr i64 %1428, 55
  %1452 = and i64 %1451, 1
  %1453 = xor i64 %1448, %1450
  %1454 = xor i64 %1448, %1452
  %1455 = add nuw nsw i64 %1453, %1454
  %1456 = icmp eq i64 %1455, 2
  %1457 = zext i1 %1456 to i8
  store i8 %1457, i8* %17, align 1
  %1458 = load i64, i64* %RBP.i, align 8
  %1459 = add i64 %1458, -16
  %1460 = add i64 %1313, 61
  store i64 %1460, i64* %3, align 8
  %1461 = inttoptr i64 %1459 to i32*
  %1462 = load i32, i32* %1461, align 4
  %1463 = sext i32 %1462 to i64
  %1464 = shl nsw i64 %1463, 6
  store i64 %1464, i64* %RDX.i658, align 8
  %1465 = add i64 %1464, %1431
  store i64 %1465, i64* %RSI.i757, align 8
  %1466 = icmp ult i64 %1465, %1431
  %1467 = icmp ult i64 %1465, %1464
  %1468 = or i1 %1466, %1467
  %1469 = zext i1 %1468 to i8
  store i8 %1469, i8* %12, align 1
  %1470 = trunc i64 %1465 to i32
  %1471 = and i32 %1470, 255
  %1472 = tail call i32 @llvm.ctpop.i32(i32 %1471)
  %1473 = trunc i32 %1472 to i8
  %1474 = and i8 %1473, 1
  %1475 = xor i8 %1474, 1
  store i8 %1475, i8* %13, align 1
  %1476 = xor i64 %1431, %1465
  %1477 = lshr i64 %1476, 4
  %1478 = trunc i64 %1477 to i8
  %1479 = and i8 %1478, 1
  store i8 %1479, i8* %14, align 1
  %1480 = icmp eq i64 %1465, 0
  %1481 = zext i1 %1480 to i8
  store i8 %1481, i8* %15, align 1
  %1482 = lshr i64 %1465, 63
  %1483 = trunc i64 %1482 to i8
  store i8 %1483, i8* %16, align 1
  %1484 = lshr i64 %1463, 57
  %1485 = and i64 %1484, 1
  %1486 = xor i64 %1482, %1448
  %1487 = xor i64 %1482, %1485
  %1488 = add nuw nsw i64 %1486, %1487
  %1489 = icmp eq i64 %1488, 2
  %1490 = zext i1 %1489 to i8
  store i8 %1490, i8* %17, align 1
  %1491 = add i64 %1458, -12
  %1492 = add i64 %1313, 72
  store i64 %1492, i64* %3, align 8
  %1493 = inttoptr i64 %1491 to i32*
  %1494 = load i32, i32* %1493, align 4
  %1495 = sext i32 %1494 to i64
  %1496 = shl nsw i64 %1495, 4
  store i64 %1496, i64* %RDX.i658, align 8
  %1497 = add i64 %1496, %1465
  store i64 %1497, i64* %RSI.i757, align 8
  %1498 = icmp ult i64 %1497, %1465
  %1499 = icmp ult i64 %1497, %1496
  %1500 = or i1 %1498, %1499
  %1501 = zext i1 %1500 to i8
  store i8 %1501, i8* %12, align 1
  %1502 = trunc i64 %1497 to i32
  %1503 = and i32 %1502, 255
  %1504 = tail call i32 @llvm.ctpop.i32(i32 %1503)
  %1505 = trunc i32 %1504 to i8
  %1506 = and i8 %1505, 1
  %1507 = xor i8 %1506, 1
  store i8 %1507, i8* %13, align 1
  %1508 = xor i64 %1496, %1465
  %1509 = xor i64 %1508, %1497
  %1510 = lshr i64 %1509, 4
  %1511 = trunc i64 %1510 to i8
  %1512 = and i8 %1511, 1
  store i8 %1512, i8* %14, align 1
  %1513 = icmp eq i64 %1497, 0
  %1514 = zext i1 %1513 to i8
  store i8 %1514, i8* %15, align 1
  %1515 = lshr i64 %1497, 63
  %1516 = trunc i64 %1515 to i8
  store i8 %1516, i8* %16, align 1
  %1517 = lshr i64 %1495, 59
  %1518 = and i64 %1517, 1
  %1519 = xor i64 %1515, %1482
  %1520 = xor i64 %1515, %1518
  %1521 = add nuw nsw i64 %1519, %1520
  %1522 = icmp eq i64 %1521, 2
  %1523 = zext i1 %1522 to i8
  store i8 %1523, i8* %17, align 1
  %1524 = load i64, i64* %RBP.i, align 8
  %1525 = add i64 %1524, -20
  %1526 = add i64 %1313, 83
  store i64 %1526, i64* %3, align 8
  %1527 = inttoptr i64 %1525 to i32*
  %1528 = load i32, i32* %1527, align 4
  %1529 = sext i32 %1528 to i64
  store i64 %1529, i64* %RDX.i658, align 8
  %1530 = load i64, i64* %RCX.i4476, align 8
  %1531 = shl nsw i64 %1529, 2
  %1532 = add i64 %1497, %1531
  %1533 = add i64 %1313, 86
  store i64 %1533, i64* %3, align 8
  %1534 = trunc i64 %1530 to i32
  %1535 = inttoptr i64 %1532 to i32*
  %1536 = load i32, i32* %1535, align 4
  %1537 = add i32 %1536, %1534
  %1538 = zext i32 %1537 to i64
  store i64 %1538, i64* %RCX.i4476, align 8
  %1539 = icmp ult i32 %1537, %1534
  %1540 = icmp ult i32 %1537, %1536
  %1541 = or i1 %1539, %1540
  %1542 = zext i1 %1541 to i8
  store i8 %1542, i8* %12, align 1
  %1543 = and i32 %1537, 255
  %1544 = tail call i32 @llvm.ctpop.i32(i32 %1543)
  %1545 = trunc i32 %1544 to i8
  %1546 = and i8 %1545, 1
  %1547 = xor i8 %1546, 1
  store i8 %1547, i8* %13, align 1
  %1548 = xor i32 %1536, %1534
  %1549 = xor i32 %1548, %1537
  %1550 = lshr i32 %1549, 4
  %1551 = trunc i32 %1550 to i8
  %1552 = and i8 %1551, 1
  store i8 %1552, i8* %14, align 1
  %1553 = icmp eq i32 %1537, 0
  %1554 = zext i1 %1553 to i8
  store i8 %1554, i8* %15, align 1
  %1555 = lshr i32 %1537, 31
  %1556 = trunc i32 %1555 to i8
  store i8 %1556, i8* %16, align 1
  %1557 = lshr i32 %1534, 31
  %1558 = lshr i32 %1536, 31
  %1559 = xor i32 %1555, %1557
  %1560 = xor i32 %1555, %1558
  %1561 = add nuw nsw i32 %1559, %1560
  %1562 = icmp eq i32 %1561, 2
  %1563 = zext i1 %1562 to i8
  store i8 %1563, i8* %17, align 1
  %1564 = add i64 %1524, -8
  %1565 = add i64 %1313, 90
  store i64 %1565, i64* %3, align 8
  %1566 = inttoptr i64 %1564 to i32*
  %1567 = load i32, i32* %1566, align 4
  %1568 = sext i32 %1567 to i64
  store i64 %1568, i64* %RDX.i658, align 8
  %1569 = shl nsw i64 %1568, 2
  %1570 = add i64 %1524, -1136
  %1571 = add i64 %1570, %1569
  %1572 = add i64 %1313, 97
  store i64 %1572, i64* %3, align 8
  %1573 = inttoptr i64 %1571 to i32*
  store i32 %1537, i32* %1573, align 4
  %1574 = load i64, i64* %RBP.i, align 8
  %1575 = add i64 %1574, -8
  %1576 = load i64, i64* %3, align 8
  %1577 = add i64 %1576, 4
  store i64 %1577, i64* %3, align 8
  %1578 = inttoptr i64 %1575 to i32*
  %1579 = load i32, i32* %1578, align 4
  %1580 = sext i32 %1579 to i64
  %1581 = shl nsw i64 %1580, 8
  store i64 %1581, i64* %RDX.i658, align 8
  %1582 = load i64, i64* %RAX.i552, align 8
  %1583 = add i64 %1581, %1582
  store i64 %1583, i64* %RSI.i757, align 8
  %1584 = icmp ult i64 %1583, %1582
  %1585 = icmp ult i64 %1583, %1581
  %1586 = or i1 %1584, %1585
  %1587 = zext i1 %1586 to i8
  store i8 %1587, i8* %12, align 1
  %1588 = trunc i64 %1583 to i32
  %1589 = and i32 %1588, 255
  %1590 = tail call i32 @llvm.ctpop.i32(i32 %1589)
  %1591 = trunc i32 %1590 to i8
  %1592 = and i8 %1591, 1
  %1593 = xor i8 %1592, 1
  store i8 %1593, i8* %13, align 1
  %1594 = xor i64 %1582, %1583
  %1595 = lshr i64 %1594, 4
  %1596 = trunc i64 %1595 to i8
  %1597 = and i8 %1596, 1
  store i8 %1597, i8* %14, align 1
  %1598 = icmp eq i64 %1583, 0
  %1599 = zext i1 %1598 to i8
  store i8 %1599, i8* %15, align 1
  %1600 = lshr i64 %1583, 63
  %1601 = trunc i64 %1600 to i8
  store i8 %1601, i8* %16, align 1
  %1602 = lshr i64 %1582, 63
  %1603 = lshr i64 %1580, 55
  %1604 = and i64 %1603, 1
  %1605 = xor i64 %1600, %1602
  %1606 = xor i64 %1600, %1604
  %1607 = add nuw nsw i64 %1605, %1606
  %1608 = icmp eq i64 %1607, 2
  %1609 = zext i1 %1608 to i8
  store i8 %1609, i8* %17, align 1
  %1610 = add i64 %1574, -16
  %1611 = add i64 %1576, 18
  store i64 %1611, i64* %3, align 8
  %1612 = inttoptr i64 %1610 to i32*
  %1613 = load i32, i32* %1612, align 4
  %1614 = sext i32 %1613 to i64
  %1615 = shl nsw i64 %1614, 6
  store i64 %1615, i64* %RDX.i658, align 8
  %1616 = add i64 %1615, %1583
  store i64 %1616, i64* %RSI.i757, align 8
  %1617 = icmp ult i64 %1616, %1583
  %1618 = icmp ult i64 %1616, %1615
  %1619 = or i1 %1617, %1618
  %1620 = zext i1 %1619 to i8
  store i8 %1620, i8* %12, align 1
  %1621 = trunc i64 %1616 to i32
  %1622 = and i32 %1621, 255
  %1623 = tail call i32 @llvm.ctpop.i32(i32 %1622)
  %1624 = trunc i32 %1623 to i8
  %1625 = and i8 %1624, 1
  %1626 = xor i8 %1625, 1
  store i8 %1626, i8* %13, align 1
  %1627 = xor i64 %1583, %1616
  %1628 = lshr i64 %1627, 4
  %1629 = trunc i64 %1628 to i8
  %1630 = and i8 %1629, 1
  store i8 %1630, i8* %14, align 1
  %1631 = icmp eq i64 %1616, 0
  %1632 = zext i1 %1631 to i8
  store i8 %1632, i8* %15, align 1
  %1633 = lshr i64 %1616, 63
  %1634 = trunc i64 %1633 to i8
  store i8 %1634, i8* %16, align 1
  %1635 = lshr i64 %1614, 57
  %1636 = and i64 %1635, 1
  %1637 = xor i64 %1633, %1600
  %1638 = xor i64 %1633, %1636
  %1639 = add nuw nsw i64 %1637, %1638
  %1640 = icmp eq i64 %1639, 2
  %1641 = zext i1 %1640 to i8
  store i8 %1641, i8* %17, align 1
  %1642 = load i64, i64* %RBP.i, align 8
  %1643 = add i64 %1642, -12
  %1644 = add i64 %1576, 29
  store i64 %1644, i64* %3, align 8
  %1645 = inttoptr i64 %1643 to i32*
  %1646 = load i32, i32* %1645, align 4
  %1647 = sext i32 %1646 to i64
  %1648 = shl nsw i64 %1647, 4
  store i64 %1648, i64* %RDX.i658, align 8
  %1649 = add i64 %1648, %1616
  store i64 %1649, i64* %RSI.i757, align 8
  %1650 = icmp ult i64 %1649, %1616
  %1651 = icmp ult i64 %1649, %1648
  %1652 = or i1 %1650, %1651
  %1653 = zext i1 %1652 to i8
  store i8 %1653, i8* %12, align 1
  %1654 = trunc i64 %1649 to i32
  %1655 = and i32 %1654, 255
  %1656 = tail call i32 @llvm.ctpop.i32(i32 %1655)
  %1657 = trunc i32 %1656 to i8
  %1658 = and i8 %1657, 1
  %1659 = xor i8 %1658, 1
  store i8 %1659, i8* %13, align 1
  %1660 = xor i64 %1648, %1616
  %1661 = xor i64 %1660, %1649
  %1662 = lshr i64 %1661, 4
  %1663 = trunc i64 %1662 to i8
  %1664 = and i8 %1663, 1
  store i8 %1664, i8* %14, align 1
  %1665 = icmp eq i64 %1649, 0
  %1666 = zext i1 %1665 to i8
  store i8 %1666, i8* %15, align 1
  %1667 = lshr i64 %1649, 63
  %1668 = trunc i64 %1667 to i8
  store i8 %1668, i8* %16, align 1
  %1669 = lshr i64 %1647, 59
  %1670 = and i64 %1669, 1
  %1671 = xor i64 %1667, %1633
  %1672 = xor i64 %1667, %1670
  %1673 = add nuw nsw i64 %1671, %1672
  %1674 = icmp eq i64 %1673, 2
  %1675 = zext i1 %1674 to i8
  store i8 %1675, i8* %17, align 1
  %1676 = add i64 %1642, -20
  %1677 = add i64 %1576, 40
  store i64 %1677, i64* %3, align 8
  %1678 = inttoptr i64 %1676 to i32*
  %1679 = load i32, i32* %1678, align 4
  %1680 = sext i32 %1679 to i64
  store i64 %1680, i64* %RDX.i658, align 8
  %1681 = shl nsw i64 %1680, 2
  %1682 = add i64 %1681, %1649
  %1683 = add i64 %1576, 43
  store i64 %1683, i64* %3, align 8
  %1684 = inttoptr i64 %1682 to i32*
  %1685 = load i32, i32* %1684, align 4
  %1686 = zext i32 %1685 to i64
  store i64 %1686, i64* %RCX.i4476, align 8
  %1687 = add i64 %1642, -24
  %1688 = add i64 %1576, 47
  store i64 %1688, i64* %3, align 8
  %1689 = inttoptr i64 %1687 to i32*
  %1690 = load i32, i32* %1689, align 4
  %1691 = sext i32 %1690 to i64
  %1692 = shl nsw i64 %1691, 8
  store i64 %1692, i64* %RDX.i658, align 8
  %1693 = load i64, i64* %RAX.i552, align 8
  %1694 = add i64 %1692, %1693
  store i64 %1694, i64* %RAX.i552, align 8
  %1695 = icmp ult i64 %1694, %1693
  %1696 = icmp ult i64 %1694, %1692
  %1697 = or i1 %1695, %1696
  %1698 = zext i1 %1697 to i8
  store i8 %1698, i8* %12, align 1
  %1699 = trunc i64 %1694 to i32
  %1700 = and i32 %1699, 255
  %1701 = tail call i32 @llvm.ctpop.i32(i32 %1700)
  %1702 = trunc i32 %1701 to i8
  %1703 = and i8 %1702, 1
  %1704 = xor i8 %1703, 1
  store i8 %1704, i8* %13, align 1
  %1705 = xor i64 %1693, %1694
  %1706 = lshr i64 %1705, 4
  %1707 = trunc i64 %1706 to i8
  %1708 = and i8 %1707, 1
  store i8 %1708, i8* %14, align 1
  %1709 = icmp eq i64 %1694, 0
  %1710 = zext i1 %1709 to i8
  store i8 %1710, i8* %15, align 1
  %1711 = lshr i64 %1694, 63
  %1712 = trunc i64 %1711 to i8
  store i8 %1712, i8* %16, align 1
  %1713 = lshr i64 %1693, 63
  %1714 = lshr i64 %1691, 55
  %1715 = and i64 %1714, 1
  %1716 = xor i64 %1711, %1713
  %1717 = xor i64 %1711, %1715
  %1718 = add nuw nsw i64 %1716, %1717
  %1719 = icmp eq i64 %1718, 2
  %1720 = zext i1 %1719 to i8
  store i8 %1720, i8* %17, align 1
  %1721 = load i64, i64* %RBP.i, align 8
  %1722 = add i64 %1721, -16
  %1723 = add i64 %1576, 58
  store i64 %1723, i64* %3, align 8
  %1724 = inttoptr i64 %1722 to i32*
  %1725 = load i32, i32* %1724, align 4
  %1726 = sext i32 %1725 to i64
  %1727 = shl nsw i64 %1726, 6
  store i64 %1727, i64* %RDX.i658, align 8
  %1728 = add i64 %1727, %1694
  store i64 %1728, i64* %RAX.i552, align 8
  %1729 = icmp ult i64 %1728, %1694
  %1730 = icmp ult i64 %1728, %1727
  %1731 = or i1 %1729, %1730
  %1732 = zext i1 %1731 to i8
  store i8 %1732, i8* %12, align 1
  %1733 = trunc i64 %1728 to i32
  %1734 = and i32 %1733, 255
  %1735 = tail call i32 @llvm.ctpop.i32(i32 %1734)
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = xor i8 %1737, 1
  store i8 %1738, i8* %13, align 1
  %1739 = xor i64 %1694, %1728
  %1740 = lshr i64 %1739, 4
  %1741 = trunc i64 %1740 to i8
  %1742 = and i8 %1741, 1
  store i8 %1742, i8* %14, align 1
  %1743 = icmp eq i64 %1728, 0
  %1744 = zext i1 %1743 to i8
  store i8 %1744, i8* %15, align 1
  %1745 = lshr i64 %1728, 63
  %1746 = trunc i64 %1745 to i8
  store i8 %1746, i8* %16, align 1
  %1747 = lshr i64 %1726, 57
  %1748 = and i64 %1747, 1
  %1749 = xor i64 %1745, %1711
  %1750 = xor i64 %1745, %1748
  %1751 = add nuw nsw i64 %1749, %1750
  %1752 = icmp eq i64 %1751, 2
  %1753 = zext i1 %1752 to i8
  store i8 %1753, i8* %17, align 1
  %1754 = add i64 %1721, -12
  %1755 = add i64 %1576, 69
  store i64 %1755, i64* %3, align 8
  %1756 = inttoptr i64 %1754 to i32*
  %1757 = load i32, i32* %1756, align 4
  %1758 = sext i32 %1757 to i64
  %1759 = shl nsw i64 %1758, 4
  store i64 %1759, i64* %RDX.i658, align 8
  %1760 = add i64 %1759, %1728
  store i64 %1760, i64* %RAX.i552, align 8
  %1761 = icmp ult i64 %1760, %1728
  %1762 = icmp ult i64 %1760, %1759
  %1763 = or i1 %1761, %1762
  %1764 = zext i1 %1763 to i8
  store i8 %1764, i8* %12, align 1
  %1765 = trunc i64 %1760 to i32
  %1766 = and i32 %1765, 255
  %1767 = tail call i32 @llvm.ctpop.i32(i32 %1766)
  %1768 = trunc i32 %1767 to i8
  %1769 = and i8 %1768, 1
  %1770 = xor i8 %1769, 1
  store i8 %1770, i8* %13, align 1
  %1771 = xor i64 %1759, %1728
  %1772 = xor i64 %1771, %1760
  %1773 = lshr i64 %1772, 4
  %1774 = trunc i64 %1773 to i8
  %1775 = and i8 %1774, 1
  store i8 %1775, i8* %14, align 1
  %1776 = icmp eq i64 %1760, 0
  %1777 = zext i1 %1776 to i8
  store i8 %1777, i8* %15, align 1
  %1778 = lshr i64 %1760, 63
  %1779 = trunc i64 %1778 to i8
  store i8 %1779, i8* %16, align 1
  %1780 = lshr i64 %1758, 59
  %1781 = and i64 %1780, 1
  %1782 = xor i64 %1778, %1745
  %1783 = xor i64 %1778, %1781
  %1784 = add nuw nsw i64 %1782, %1783
  %1785 = icmp eq i64 %1784, 2
  %1786 = zext i1 %1785 to i8
  store i8 %1786, i8* %17, align 1
  %1787 = load i64, i64* %RBP.i, align 8
  %1788 = add i64 %1787, -20
  %1789 = add i64 %1576, 80
  store i64 %1789, i64* %3, align 8
  %1790 = inttoptr i64 %1788 to i32*
  %1791 = load i32, i32* %1790, align 4
  %1792 = sext i32 %1791 to i64
  store i64 %1792, i64* %RDX.i658, align 8
  %1793 = load i64, i64* %RCX.i4476, align 8
  %1794 = shl nsw i64 %1792, 2
  %1795 = add i64 %1760, %1794
  %1796 = add i64 %1576, 83
  store i64 %1796, i64* %3, align 8
  %1797 = trunc i64 %1793 to i32
  %1798 = inttoptr i64 %1795 to i32*
  %1799 = load i32, i32* %1798, align 4
  %1800 = sub i32 %1797, %1799
  %1801 = zext i32 %1800 to i64
  store i64 %1801, i64* %RCX.i4476, align 8
  %1802 = icmp ult i32 %1797, %1799
  %1803 = zext i1 %1802 to i8
  store i8 %1803, i8* %12, align 1
  %1804 = and i32 %1800, 255
  %1805 = tail call i32 @llvm.ctpop.i32(i32 %1804)
  %1806 = trunc i32 %1805 to i8
  %1807 = and i8 %1806, 1
  %1808 = xor i8 %1807, 1
  store i8 %1808, i8* %13, align 1
  %1809 = xor i32 %1799, %1797
  %1810 = xor i32 %1809, %1800
  %1811 = lshr i32 %1810, 4
  %1812 = trunc i32 %1811 to i8
  %1813 = and i8 %1812, 1
  store i8 %1813, i8* %14, align 1
  %1814 = icmp eq i32 %1800, 0
  %1815 = zext i1 %1814 to i8
  store i8 %1815, i8* %15, align 1
  %1816 = lshr i32 %1800, 31
  %1817 = trunc i32 %1816 to i8
  store i8 %1817, i8* %16, align 1
  %1818 = lshr i32 %1797, 31
  %1819 = lshr i32 %1799, 31
  %1820 = xor i32 %1819, %1818
  %1821 = xor i32 %1816, %1818
  %1822 = add nuw nsw i32 %1821, %1820
  %1823 = icmp eq i32 %1822, 2
  %1824 = zext i1 %1823 to i8
  store i8 %1824, i8* %17, align 1
  %1825 = add i64 %1787, -24
  %1826 = add i64 %1576, 87
  store i64 %1826, i64* %3, align 8
  %1827 = inttoptr i64 %1825 to i32*
  %1828 = load i32, i32* %1827, align 4
  %1829 = sext i32 %1828 to i64
  store i64 %1829, i64* %RAX.i552, align 8
  %1830 = shl nsw i64 %1829, 2
  %1831 = add i64 %1787, -1136
  %1832 = add i64 %1831, %1830
  %1833 = add i64 %1576, 94
  store i64 %1833, i64* %3, align 8
  %1834 = inttoptr i64 %1832 to i32*
  store i32 %1800, i32* %1834, align 4
  %1835 = load i64, i64* %RBP.i, align 8
  %1836 = add i64 %1835, -8
  %1837 = load i64, i64* %3, align 8
  %1838 = add i64 %1837, 3
  store i64 %1838, i64* %3, align 8
  %1839 = inttoptr i64 %1836 to i32*
  %1840 = load i32, i32* %1839, align 4
  %1841 = add i32 %1840, 1
  %1842 = zext i32 %1841 to i64
  store i64 %1842, i64* %RAX.i552, align 8
  %1843 = icmp eq i32 %1840, -1
  %1844 = icmp eq i32 %1841, 0
  %1845 = or i1 %1843, %1844
  %1846 = zext i1 %1845 to i8
  store i8 %1846, i8* %12, align 1
  %1847 = and i32 %1841, 255
  %1848 = tail call i32 @llvm.ctpop.i32(i32 %1847)
  %1849 = trunc i32 %1848 to i8
  %1850 = and i8 %1849, 1
  %1851 = xor i8 %1850, 1
  store i8 %1851, i8* %13, align 1
  %1852 = xor i32 %1841, %1840
  %1853 = lshr i32 %1852, 4
  %1854 = trunc i32 %1853 to i8
  %1855 = and i8 %1854, 1
  store i8 %1855, i8* %14, align 1
  %1856 = zext i1 %1844 to i8
  store i8 %1856, i8* %15, align 1
  %1857 = lshr i32 %1841, 31
  %1858 = trunc i32 %1857 to i8
  store i8 %1858, i8* %16, align 1
  %1859 = lshr i32 %1840, 31
  %1860 = xor i32 %1857, %1859
  %1861 = add nuw nsw i32 %1860, %1857
  %1862 = icmp eq i32 %1861, 2
  %1863 = zext i1 %1862 to i8
  store i8 %1863, i8* %17, align 1
  %1864 = add i64 %1837, 9
  store i64 %1864, i64* %3, align 8
  store i32 %1841, i32* %1839, align 4
  %1865 = load i64, i64* %3, align 8
  %1866 = add i64 %1865, -228
  store i64 %1866, i64* %3, align 8
  br label %block_.L_404709

block_.L_4047f2:                                  ; preds = %block_.L_404709
  %1867 = add i64 %1254, -1136
  %1868 = add i64 %1282, 13
  store i64 %1868, i64* %3, align 8
  %1869 = inttoptr i64 %1867 to i32*
  %1870 = load i32, i32* %1869, align 4
  %1871 = zext i32 %1870 to i64
  store i64 %1871, i64* %RCX.i4476, align 8
  %1872 = add i64 %1254, -1132
  %1873 = add i64 %1282, 19
  store i64 %1873, i64* %3, align 8
  %1874 = inttoptr i64 %1872 to i32*
  %1875 = load i32, i32* %1874, align 4
  %1876 = add i32 %1875, %1870
  %1877 = zext i32 %1876 to i64
  store i64 %1877, i64* %RCX.i4476, align 8
  %1878 = icmp ult i32 %1876, %1870
  %1879 = icmp ult i32 %1876, %1875
  %1880 = or i1 %1878, %1879
  %1881 = zext i1 %1880 to i8
  store i8 %1881, i8* %12, align 1
  %1882 = and i32 %1876, 255
  %1883 = tail call i32 @llvm.ctpop.i32(i32 %1882)
  %1884 = trunc i32 %1883 to i8
  %1885 = and i8 %1884, 1
  %1886 = xor i8 %1885, 1
  store i8 %1886, i8* %13, align 1
  %1887 = xor i32 %1875, %1870
  %1888 = xor i32 %1887, %1876
  %1889 = lshr i32 %1888, 4
  %1890 = trunc i32 %1889 to i8
  %1891 = and i8 %1890, 1
  store i8 %1891, i8* %14, align 1
  %1892 = icmp eq i32 %1876, 0
  %1893 = zext i1 %1892 to i8
  store i8 %1893, i8* %15, align 1
  %1894 = lshr i32 %1876, 31
  %1895 = trunc i32 %1894 to i8
  store i8 %1895, i8* %16, align 1
  %1896 = lshr i32 %1870, 31
  %1897 = lshr i32 %1875, 31
  %1898 = xor i32 %1894, %1896
  %1899 = xor i32 %1894, %1897
  %1900 = add nuw nsw i32 %1898, %1899
  %1901 = icmp eq i32 %1900, 2
  %1902 = zext i1 %1901 to i8
  store i8 %1902, i8* %17, align 1
  %1903 = add i64 %1254, -16
  %1904 = add i64 %1282, 23
  store i64 %1904, i64* %3, align 8
  %1905 = inttoptr i64 %1903 to i32*
  %1906 = load i32, i32* %1905, align 4
  %1907 = sext i32 %1906 to i64
  %1908 = shl nsw i64 %1907, 6
  store i64 %1908, i64* %RDX.i658, align 8
  %1909 = add i64 %1908, %1283
  store i64 %1909, i64* %RSI.i757, align 8
  %1910 = icmp ult i64 %1909, %1283
  %1911 = icmp ult i64 %1909, %1908
  %1912 = or i1 %1910, %1911
  %1913 = zext i1 %1912 to i8
  store i8 %1913, i8* %12, align 1
  %1914 = trunc i64 %1909 to i32
  %1915 = and i32 %1914, 255
  %1916 = tail call i32 @llvm.ctpop.i32(i32 %1915)
  %1917 = trunc i32 %1916 to i8
  %1918 = and i8 %1917, 1
  %1919 = xor i8 %1918, 1
  store i8 %1919, i8* %13, align 1
  %1920 = xor i64 %1283, %1909
  %1921 = lshr i64 %1920, 4
  %1922 = trunc i64 %1921 to i8
  %1923 = and i8 %1922, 1
  store i8 %1923, i8* %14, align 1
  %1924 = icmp eq i64 %1909, 0
  %1925 = zext i1 %1924 to i8
  store i8 %1925, i8* %15, align 1
  %1926 = lshr i64 %1909, 63
  %1927 = trunc i64 %1926 to i8
  store i8 %1927, i8* %16, align 1
  %1928 = lshr i64 %1283, 63
  %1929 = lshr i64 %1907, 57
  %1930 = and i64 %1929, 1
  %1931 = xor i64 %1926, %1928
  %1932 = xor i64 %1926, %1930
  %1933 = add nuw nsw i64 %1931, %1932
  %1934 = icmp eq i64 %1933, 2
  %1935 = zext i1 %1934 to i8
  store i8 %1935, i8* %17, align 1
  %1936 = load i64, i64* %RBP.i, align 8
  %1937 = add i64 %1936, -12
  %1938 = add i64 %1282, 37
  store i64 %1938, i64* %3, align 8
  %1939 = inttoptr i64 %1937 to i32*
  %1940 = load i32, i32* %1939, align 4
  %1941 = sext i32 %1940 to i64
  %1942 = shl nsw i64 %1941, 4
  store i64 %1942, i64* %RDX.i658, align 8
  %1943 = add i64 %1942, %1909
  store i64 %1943, i64* %RSI.i757, align 8
  %1944 = icmp ult i64 %1943, %1909
  %1945 = icmp ult i64 %1943, %1942
  %1946 = or i1 %1944, %1945
  %1947 = zext i1 %1946 to i8
  store i8 %1947, i8* %12, align 1
  %1948 = trunc i64 %1943 to i32
  %1949 = and i32 %1948, 255
  %1950 = tail call i32 @llvm.ctpop.i32(i32 %1949)
  %1951 = trunc i32 %1950 to i8
  %1952 = and i8 %1951, 1
  %1953 = xor i8 %1952, 1
  store i8 %1953, i8* %13, align 1
  %1954 = xor i64 %1942, %1909
  %1955 = xor i64 %1954, %1943
  %1956 = lshr i64 %1955, 4
  %1957 = trunc i64 %1956 to i8
  %1958 = and i8 %1957, 1
  store i8 %1958, i8* %14, align 1
  %1959 = icmp eq i64 %1943, 0
  %1960 = zext i1 %1959 to i8
  store i8 %1960, i8* %15, align 1
  %1961 = lshr i64 %1943, 63
  %1962 = trunc i64 %1961 to i8
  store i8 %1962, i8* %16, align 1
  %1963 = lshr i64 %1941, 59
  %1964 = and i64 %1963, 1
  %1965 = xor i64 %1961, %1926
  %1966 = xor i64 %1961, %1964
  %1967 = add nuw nsw i64 %1965, %1966
  %1968 = icmp eq i64 %1967, 2
  %1969 = zext i1 %1968 to i8
  store i8 %1969, i8* %17, align 1
  %1970 = add i64 %1936, -20
  %1971 = add i64 %1282, 48
  store i64 %1971, i64* %3, align 8
  %1972 = inttoptr i64 %1970 to i32*
  %1973 = load i32, i32* %1972, align 4
  %1974 = sext i32 %1973 to i64
  store i64 %1974, i64* %RDX.i658, align 8
  %1975 = shl nsw i64 %1974, 2
  %1976 = add i64 %1975, %1943
  %1977 = load i32, i32* %ECX.i4446, align 4
  %1978 = add i64 %1282, 51
  store i64 %1978, i64* %3, align 8
  %1979 = inttoptr i64 %1976 to i32*
  store i32 %1977, i32* %1979, align 4
  %1980 = load i64, i64* %RBP.i, align 8
  %1981 = add i64 %1980, -1136
  %1982 = load i64, i64* %3, align 8
  %1983 = add i64 %1982, 6
  store i64 %1983, i64* %3, align 8
  %1984 = inttoptr i64 %1981 to i32*
  %1985 = load i32, i32* %1984, align 4
  %1986 = zext i32 %1985 to i64
  store i64 %1986, i64* %RCX.i4476, align 8
  %1987 = add i64 %1980, -1132
  %1988 = add i64 %1982, 12
  store i64 %1988, i64* %3, align 8
  %1989 = inttoptr i64 %1987 to i32*
  %1990 = load i32, i32* %1989, align 4
  %1991 = sub i32 %1985, %1990
  %1992 = zext i32 %1991 to i64
  store i64 %1992, i64* %RCX.i4476, align 8
  %1993 = load i64, i64* %RAX.i552, align 8
  %1994 = add i64 %1993, 512
  store i64 %1994, i64* %RDX.i658, align 8
  %1995 = icmp ugt i64 %1993, -513
  %1996 = zext i1 %1995 to i8
  store i8 %1996, i8* %12, align 1
  %1997 = trunc i64 %1994 to i32
  %1998 = and i32 %1997, 255
  %1999 = tail call i32 @llvm.ctpop.i32(i32 %1998)
  %2000 = trunc i32 %1999 to i8
  %2001 = and i8 %2000, 1
  %2002 = xor i8 %2001, 1
  store i8 %2002, i8* %13, align 1
  %2003 = xor i64 %1994, %1993
  %2004 = lshr i64 %2003, 4
  %2005 = trunc i64 %2004 to i8
  %2006 = and i8 %2005, 1
  store i8 %2006, i8* %14, align 1
  %2007 = icmp eq i64 %1994, 0
  %2008 = zext i1 %2007 to i8
  store i8 %2008, i8* %15, align 1
  %2009 = lshr i64 %1994, 63
  %2010 = trunc i64 %2009 to i8
  store i8 %2010, i8* %16, align 1
  %2011 = lshr i64 %1993, 63
  %2012 = xor i64 %2009, %2011
  %2013 = add nuw nsw i64 %2012, %2009
  %2014 = icmp eq i64 %2013, 2
  %2015 = zext i1 %2014 to i8
  store i8 %2015, i8* %17, align 1
  %2016 = add i64 %1980, -16
  %2017 = add i64 %1982, 26
  store i64 %2017, i64* %3, align 8
  %2018 = inttoptr i64 %2016 to i32*
  %2019 = load i32, i32* %2018, align 4
  %2020 = sext i32 %2019 to i64
  %2021 = shl nsw i64 %2020, 6
  store i64 %2021, i64* %RSI.i757, align 8
  %2022 = add i64 %2021, %1994
  store i64 %2022, i64* %RDX.i658, align 8
  %2023 = icmp ult i64 %2022, %1994
  %2024 = icmp ult i64 %2022, %2021
  %2025 = or i1 %2023, %2024
  %2026 = zext i1 %2025 to i8
  store i8 %2026, i8* %12, align 1
  %2027 = trunc i64 %2022 to i32
  %2028 = and i32 %2027, 255
  %2029 = tail call i32 @llvm.ctpop.i32(i32 %2028)
  %2030 = trunc i32 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = xor i8 %2031, 1
  store i8 %2032, i8* %13, align 1
  %2033 = xor i64 %1994, %2022
  %2034 = lshr i64 %2033, 4
  %2035 = trunc i64 %2034 to i8
  %2036 = and i8 %2035, 1
  store i8 %2036, i8* %14, align 1
  %2037 = icmp eq i64 %2022, 0
  %2038 = zext i1 %2037 to i8
  store i8 %2038, i8* %15, align 1
  %2039 = lshr i64 %2022, 63
  %2040 = trunc i64 %2039 to i8
  store i8 %2040, i8* %16, align 1
  %2041 = lshr i64 %2020, 57
  %2042 = and i64 %2041, 1
  %2043 = xor i64 %2039, %2009
  %2044 = xor i64 %2039, %2042
  %2045 = add nuw nsw i64 %2043, %2044
  %2046 = icmp eq i64 %2045, 2
  %2047 = zext i1 %2046 to i8
  store i8 %2047, i8* %17, align 1
  %2048 = load i64, i64* %RBP.i, align 8
  %2049 = add i64 %2048, -12
  %2050 = add i64 %1982, 37
  store i64 %2050, i64* %3, align 8
  %2051 = inttoptr i64 %2049 to i32*
  %2052 = load i32, i32* %2051, align 4
  %2053 = sext i32 %2052 to i64
  %2054 = shl nsw i64 %2053, 4
  store i64 %2054, i64* %RSI.i757, align 8
  %2055 = add i64 %2054, %2022
  store i64 %2055, i64* %RDX.i658, align 8
  %2056 = icmp ult i64 %2055, %2022
  %2057 = icmp ult i64 %2055, %2054
  %2058 = or i1 %2056, %2057
  %2059 = zext i1 %2058 to i8
  store i8 %2059, i8* %12, align 1
  %2060 = trunc i64 %2055 to i32
  %2061 = and i32 %2060, 255
  %2062 = tail call i32 @llvm.ctpop.i32(i32 %2061)
  %2063 = trunc i32 %2062 to i8
  %2064 = and i8 %2063, 1
  %2065 = xor i8 %2064, 1
  store i8 %2065, i8* %13, align 1
  %2066 = xor i64 %2054, %2022
  %2067 = xor i64 %2066, %2055
  %2068 = lshr i64 %2067, 4
  %2069 = trunc i64 %2068 to i8
  %2070 = and i8 %2069, 1
  store i8 %2070, i8* %14, align 1
  %2071 = icmp eq i64 %2055, 0
  %2072 = zext i1 %2071 to i8
  store i8 %2072, i8* %15, align 1
  %2073 = lshr i64 %2055, 63
  %2074 = trunc i64 %2073 to i8
  store i8 %2074, i8* %16, align 1
  %2075 = lshr i64 %2053, 59
  %2076 = and i64 %2075, 1
  %2077 = xor i64 %2073, %2039
  %2078 = xor i64 %2073, %2076
  %2079 = add nuw nsw i64 %2077, %2078
  %2080 = icmp eq i64 %2079, 2
  %2081 = zext i1 %2080 to i8
  store i8 %2081, i8* %17, align 1
  %2082 = add i64 %2048, -20
  %2083 = add i64 %1982, 48
  store i64 %2083, i64* %3, align 8
  %2084 = inttoptr i64 %2082 to i32*
  %2085 = load i32, i32* %2084, align 4
  %2086 = sext i32 %2085 to i64
  store i64 %2086, i64* %RSI.i757, align 8
  %2087 = shl nsw i64 %2086, 2
  %2088 = add i64 %2087, %2055
  %2089 = load i32, i32* %ECX.i4446, align 4
  %2090 = add i64 %1982, 51
  store i64 %2090, i64* %3, align 8
  %2091 = inttoptr i64 %2088 to i32*
  store i32 %2089, i32* %2091, align 4
  %2092 = load i64, i64* %RBP.i, align 8
  %2093 = add i64 %2092, -1124
  %2094 = load i64, i64* %3, align 8
  %2095 = add i64 %2094, 6
  store i64 %2095, i64* %3, align 8
  %2096 = inttoptr i64 %2093 to i32*
  %2097 = load i32, i32* %2096, align 4
  %2098 = shl i32 %2097, 1
  %2099 = icmp slt i32 %2097, 0
  %2100 = icmp slt i32 %2098, 0
  %2101 = xor i1 %2099, %2100
  %2102 = zext i32 %2098 to i64
  store i64 %2102, i64* %RCX.i4476, align 8
  %.lobit196 = lshr i32 %2097, 31
  %2103 = trunc i32 %.lobit196 to i8
  store i8 %2103, i8* %12, align 1
  %2104 = and i32 %2098, 254
  %2105 = tail call i32 @llvm.ctpop.i32(i32 %2104)
  %2106 = trunc i32 %2105 to i8
  %2107 = and i8 %2106, 1
  %2108 = xor i8 %2107, 1
  store i8 %2108, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %2109 = icmp eq i32 %2098, 0
  %2110 = zext i1 %2109 to i8
  store i8 %2110, i8* %15, align 1
  %2111 = lshr i32 %2097, 30
  %2112 = trunc i32 %2111 to i8
  %2113 = and i8 %2112, 1
  store i8 %2113, i8* %16, align 1
  %2114 = zext i1 %2101 to i8
  store i8 %2114, i8* %17, align 1
  %2115 = add i64 %2092, -1128
  %2116 = add i64 %2094, 14
  store i64 %2116, i64* %3, align 8
  %2117 = inttoptr i64 %2115 to i32*
  %2118 = load i32, i32* %2117, align 4
  %2119 = add i32 %2118, %2098
  %2120 = zext i32 %2119 to i64
  store i64 %2120, i64* %RCX.i4476, align 8
  %2121 = load i64, i64* %RAX.i552, align 8
  %2122 = add i64 %2121, 256
  store i64 %2122, i64* %RDX.i658, align 8
  %2123 = icmp ugt i64 %2121, -257
  %2124 = zext i1 %2123 to i8
  store i8 %2124, i8* %12, align 1
  %2125 = trunc i64 %2122 to i32
  %2126 = and i32 %2125, 255
  %2127 = tail call i32 @llvm.ctpop.i32(i32 %2126)
  %2128 = trunc i32 %2127 to i8
  %2129 = and i8 %2128, 1
  %2130 = xor i8 %2129, 1
  store i8 %2130, i8* %13, align 1
  %2131 = xor i64 %2122, %2121
  %2132 = lshr i64 %2131, 4
  %2133 = trunc i64 %2132 to i8
  %2134 = and i8 %2133, 1
  store i8 %2134, i8* %14, align 1
  %2135 = icmp eq i64 %2122, 0
  %2136 = zext i1 %2135 to i8
  store i8 %2136, i8* %15, align 1
  %2137 = lshr i64 %2122, 63
  %2138 = trunc i64 %2137 to i8
  store i8 %2138, i8* %16, align 1
  %2139 = lshr i64 %2121, 63
  %2140 = xor i64 %2137, %2139
  %2141 = add nuw nsw i64 %2140, %2137
  %2142 = icmp eq i64 %2141, 2
  %2143 = zext i1 %2142 to i8
  store i8 %2143, i8* %17, align 1
  %2144 = load i64, i64* %RBP.i, align 8
  %2145 = add i64 %2144, -16
  %2146 = add i64 %2094, 28
  store i64 %2146, i64* %3, align 8
  %2147 = inttoptr i64 %2145 to i32*
  %2148 = load i32, i32* %2147, align 4
  %2149 = sext i32 %2148 to i64
  %2150 = shl nsw i64 %2149, 6
  store i64 %2150, i64* %RSI.i757, align 8
  %2151 = add i64 %2150, %2122
  store i64 %2151, i64* %RDX.i658, align 8
  %2152 = icmp ult i64 %2151, %2122
  %2153 = icmp ult i64 %2151, %2150
  %2154 = or i1 %2152, %2153
  %2155 = zext i1 %2154 to i8
  store i8 %2155, i8* %12, align 1
  %2156 = trunc i64 %2151 to i32
  %2157 = and i32 %2156, 255
  %2158 = tail call i32 @llvm.ctpop.i32(i32 %2157)
  %2159 = trunc i32 %2158 to i8
  %2160 = and i8 %2159, 1
  %2161 = xor i8 %2160, 1
  store i8 %2161, i8* %13, align 1
  %2162 = xor i64 %2122, %2151
  %2163 = lshr i64 %2162, 4
  %2164 = trunc i64 %2163 to i8
  %2165 = and i8 %2164, 1
  store i8 %2165, i8* %14, align 1
  %2166 = icmp eq i64 %2151, 0
  %2167 = zext i1 %2166 to i8
  store i8 %2167, i8* %15, align 1
  %2168 = lshr i64 %2151, 63
  %2169 = trunc i64 %2168 to i8
  store i8 %2169, i8* %16, align 1
  %2170 = lshr i64 %2149, 57
  %2171 = and i64 %2170, 1
  %2172 = xor i64 %2168, %2137
  %2173 = xor i64 %2168, %2171
  %2174 = add nuw nsw i64 %2172, %2173
  %2175 = icmp eq i64 %2174, 2
  %2176 = zext i1 %2175 to i8
  store i8 %2176, i8* %17, align 1
  %2177 = add i64 %2144, -12
  %2178 = add i64 %2094, 39
  store i64 %2178, i64* %3, align 8
  %2179 = inttoptr i64 %2177 to i32*
  %2180 = load i32, i32* %2179, align 4
  %2181 = sext i32 %2180 to i64
  %2182 = shl nsw i64 %2181, 4
  store i64 %2182, i64* %RSI.i757, align 8
  %2183 = add i64 %2182, %2151
  store i64 %2183, i64* %RDX.i658, align 8
  %2184 = icmp ult i64 %2183, %2151
  %2185 = icmp ult i64 %2183, %2182
  %2186 = or i1 %2184, %2185
  %2187 = zext i1 %2186 to i8
  store i8 %2187, i8* %12, align 1
  %2188 = trunc i64 %2183 to i32
  %2189 = and i32 %2188, 255
  %2190 = tail call i32 @llvm.ctpop.i32(i32 %2189)
  %2191 = trunc i32 %2190 to i8
  %2192 = and i8 %2191, 1
  %2193 = xor i8 %2192, 1
  store i8 %2193, i8* %13, align 1
  %2194 = xor i64 %2182, %2151
  %2195 = xor i64 %2194, %2183
  %2196 = lshr i64 %2195, 4
  %2197 = trunc i64 %2196 to i8
  %2198 = and i8 %2197, 1
  store i8 %2198, i8* %14, align 1
  %2199 = icmp eq i64 %2183, 0
  %2200 = zext i1 %2199 to i8
  store i8 %2200, i8* %15, align 1
  %2201 = lshr i64 %2183, 63
  %2202 = trunc i64 %2201 to i8
  store i8 %2202, i8* %16, align 1
  %2203 = lshr i64 %2181, 59
  %2204 = and i64 %2203, 1
  %2205 = xor i64 %2201, %2168
  %2206 = xor i64 %2201, %2204
  %2207 = add nuw nsw i64 %2205, %2206
  %2208 = icmp eq i64 %2207, 2
  %2209 = zext i1 %2208 to i8
  store i8 %2209, i8* %17, align 1
  %2210 = load i64, i64* %RBP.i, align 8
  %2211 = add i64 %2210, -20
  %2212 = add i64 %2094, 50
  store i64 %2212, i64* %3, align 8
  %2213 = inttoptr i64 %2211 to i32*
  %2214 = load i32, i32* %2213, align 4
  %2215 = sext i32 %2214 to i64
  store i64 %2215, i64* %RSI.i757, align 8
  %2216 = shl nsw i64 %2215, 2
  %2217 = add i64 %2216, %2183
  %2218 = load i32, i32* %ECX.i4446, align 4
  %2219 = add i64 %2094, 53
  store i64 %2219, i64* %3, align 8
  %2220 = inttoptr i64 %2217 to i32*
  store i32 %2218, i32* %2220, align 4
  %2221 = load i64, i64* %RBP.i, align 8
  %2222 = add i64 %2221, -1124
  %2223 = load i64, i64* %3, align 8
  %2224 = add i64 %2223, 6
  store i64 %2224, i64* %3, align 8
  %2225 = inttoptr i64 %2222 to i32*
  %2226 = load i32, i32* %2225, align 4
  %2227 = zext i32 %2226 to i64
  store i64 %2227, i64* %RCX.i4476, align 8
  %2228 = add i64 %2221, -1128
  %2229 = add i64 %2223, 12
  store i64 %2229, i64* %3, align 8
  %2230 = inttoptr i64 %2228 to i32*
  %2231 = load i32, i32* %2230, align 4
  %2232 = shl i32 %2231, 1
  %2233 = zext i32 %2232 to i64
  store i64 %2233, i64* %RDI.i4259, align 8
  %2234 = sub i32 %2226, %2232
  %2235 = zext i32 %2234 to i64
  store i64 %2235, i64* %RCX.i4476, align 8
  %2236 = load i64, i64* %RAX.i552, align 8
  %2237 = add i64 %2236, 768
  store i64 %2237, i64* %RAX.i552, align 8
  %2238 = icmp ugt i64 %2236, -769
  %2239 = zext i1 %2238 to i8
  store i8 %2239, i8* %12, align 1
  %2240 = trunc i64 %2237 to i32
  %2241 = and i32 %2240, 255
  %2242 = tail call i32 @llvm.ctpop.i32(i32 %2241)
  %2243 = trunc i32 %2242 to i8
  %2244 = and i8 %2243, 1
  %2245 = xor i8 %2244, 1
  store i8 %2245, i8* %13, align 1
  %2246 = xor i64 %2237, %2236
  %2247 = lshr i64 %2246, 4
  %2248 = trunc i64 %2247 to i8
  %2249 = and i8 %2248, 1
  store i8 %2249, i8* %14, align 1
  %2250 = icmp eq i64 %2237, 0
  %2251 = zext i1 %2250 to i8
  store i8 %2251, i8* %15, align 1
  %2252 = lshr i64 %2237, 63
  %2253 = trunc i64 %2252 to i8
  store i8 %2253, i8* %16, align 1
  %2254 = lshr i64 %2236, 63
  %2255 = xor i64 %2252, %2254
  %2256 = add nuw nsw i64 %2255, %2252
  %2257 = icmp eq i64 %2256, 2
  %2258 = zext i1 %2257 to i8
  store i8 %2258, i8* %17, align 1
  %2259 = load i64, i64* %RBP.i, align 8
  %2260 = add i64 %2259, -16
  %2261 = add i64 %2223, 26
  store i64 %2261, i64* %3, align 8
  %2262 = inttoptr i64 %2260 to i32*
  %2263 = load i32, i32* %2262, align 4
  %2264 = sext i32 %2263 to i64
  %2265 = shl nsw i64 %2264, 6
  store i64 %2265, i64* %RDX.i658, align 8
  %2266 = add i64 %2265, %2237
  store i64 %2266, i64* %RAX.i552, align 8
  %2267 = icmp ult i64 %2266, %2237
  %2268 = icmp ult i64 %2266, %2265
  %2269 = or i1 %2267, %2268
  %2270 = zext i1 %2269 to i8
  store i8 %2270, i8* %12, align 1
  %2271 = trunc i64 %2266 to i32
  %2272 = and i32 %2271, 255
  %2273 = tail call i32 @llvm.ctpop.i32(i32 %2272)
  %2274 = trunc i32 %2273 to i8
  %2275 = and i8 %2274, 1
  %2276 = xor i8 %2275, 1
  store i8 %2276, i8* %13, align 1
  %2277 = xor i64 %2237, %2266
  %2278 = lshr i64 %2277, 4
  %2279 = trunc i64 %2278 to i8
  %2280 = and i8 %2279, 1
  store i8 %2280, i8* %14, align 1
  %2281 = icmp eq i64 %2266, 0
  %2282 = zext i1 %2281 to i8
  store i8 %2282, i8* %15, align 1
  %2283 = lshr i64 %2266, 63
  %2284 = trunc i64 %2283 to i8
  store i8 %2284, i8* %16, align 1
  %2285 = lshr i64 %2264, 57
  %2286 = and i64 %2285, 1
  %2287 = xor i64 %2283, %2252
  %2288 = xor i64 %2283, %2286
  %2289 = add nuw nsw i64 %2287, %2288
  %2290 = icmp eq i64 %2289, 2
  %2291 = zext i1 %2290 to i8
  store i8 %2291, i8* %17, align 1
  %2292 = add i64 %2259, -12
  %2293 = add i64 %2223, 37
  store i64 %2293, i64* %3, align 8
  %2294 = inttoptr i64 %2292 to i32*
  %2295 = load i32, i32* %2294, align 4
  %2296 = sext i32 %2295 to i64
  %2297 = shl nsw i64 %2296, 4
  store i64 %2297, i64* %RDX.i658, align 8
  %2298 = add i64 %2297, %2266
  store i64 %2298, i64* %RAX.i552, align 8
  %2299 = icmp ult i64 %2298, %2266
  %2300 = icmp ult i64 %2298, %2297
  %2301 = or i1 %2299, %2300
  %2302 = zext i1 %2301 to i8
  store i8 %2302, i8* %12, align 1
  %2303 = trunc i64 %2298 to i32
  %2304 = and i32 %2303, 255
  %2305 = tail call i32 @llvm.ctpop.i32(i32 %2304)
  %2306 = trunc i32 %2305 to i8
  %2307 = and i8 %2306, 1
  %2308 = xor i8 %2307, 1
  store i8 %2308, i8* %13, align 1
  %2309 = xor i64 %2297, %2266
  %2310 = xor i64 %2309, %2298
  %2311 = lshr i64 %2310, 4
  %2312 = trunc i64 %2311 to i8
  %2313 = and i8 %2312, 1
  store i8 %2313, i8* %14, align 1
  %2314 = icmp eq i64 %2298, 0
  %2315 = zext i1 %2314 to i8
  store i8 %2315, i8* %15, align 1
  %2316 = lshr i64 %2298, 63
  %2317 = trunc i64 %2316 to i8
  store i8 %2317, i8* %16, align 1
  %2318 = lshr i64 %2296, 59
  %2319 = and i64 %2318, 1
  %2320 = xor i64 %2316, %2283
  %2321 = xor i64 %2316, %2319
  %2322 = add nuw nsw i64 %2320, %2321
  %2323 = icmp eq i64 %2322, 2
  %2324 = zext i1 %2323 to i8
  store i8 %2324, i8* %17, align 1
  %2325 = load i64, i64* %RBP.i, align 8
  %2326 = add i64 %2325, -20
  %2327 = add i64 %2223, 48
  store i64 %2327, i64* %3, align 8
  %2328 = inttoptr i64 %2326 to i32*
  %2329 = load i32, i32* %2328, align 4
  %2330 = sext i32 %2329 to i64
  store i64 %2330, i64* %RDX.i658, align 8
  %2331 = shl nsw i64 %2330, 2
  %2332 = add i64 %2331, %2298
  %2333 = load i32, i32* %ECX.i4446, align 4
  %2334 = add i64 %2223, 51
  store i64 %2334, i64* %3, align 8
  %2335 = inttoptr i64 %2332 to i32*
  store i32 %2333, i32* %2335, align 4
  %2336 = load i64, i64* %RBP.i, align 8
  %2337 = add i64 %2336, -12
  %2338 = load i64, i64* %3, align 8
  %2339 = add i64 %2338, 3
  store i64 %2339, i64* %3, align 8
  %2340 = inttoptr i64 %2337 to i32*
  %2341 = load i32, i32* %2340, align 4
  %2342 = add i32 %2341, 1
  %2343 = zext i32 %2342 to i64
  store i64 %2343, i64* %RAX.i552, align 8
  %2344 = icmp eq i32 %2341, -1
  %2345 = icmp eq i32 %2342, 0
  %2346 = or i1 %2344, %2345
  %2347 = zext i1 %2346 to i8
  store i8 %2347, i8* %12, align 1
  %2348 = and i32 %2342, 255
  %2349 = tail call i32 @llvm.ctpop.i32(i32 %2348)
  %2350 = trunc i32 %2349 to i8
  %2351 = and i8 %2350, 1
  %2352 = xor i8 %2351, 1
  store i8 %2352, i8* %13, align 1
  %2353 = xor i32 %2342, %2341
  %2354 = lshr i32 %2353, 4
  %2355 = trunc i32 %2354 to i8
  %2356 = and i8 %2355, 1
  store i8 %2356, i8* %14, align 1
  %2357 = zext i1 %2345 to i8
  store i8 %2357, i8* %15, align 1
  %2358 = lshr i32 %2342, 31
  %2359 = trunc i32 %2358 to i8
  store i8 %2359, i8* %16, align 1
  %2360 = lshr i32 %2341, 31
  %2361 = xor i32 %2358, %2360
  %2362 = add nuw nsw i32 %2361, %2358
  %2363 = icmp eq i32 %2362, 2
  %2364 = zext i1 %2363 to i8
  store i8 %2364, i8* %17, align 1
  %2365 = add i64 %2338, 9
  store i64 %2365, i64* %3, align 8
  store i32 %2342, i32* %2340, align 4
  %2366 = load i64, i64* %3, align 8
  %2367 = add i64 %2366, -467
  store i64 %2367, i64* %3, align 8
  br label %block_.L_4046f8

block_.L_4048d7:                                  ; preds = %block_.L_4048d7.preheader, %block_.L_4049d1
  %2368 = phi i64 [ %3522, %block_.L_4049d1 ], [ %.pre425, %block_.L_4048d7.preheader ]
  %2369 = load i64, i64* %RBP.i, align 8
  %2370 = add i64 %2369, -8
  %2371 = add i64 %2368, 4
  store i64 %2371, i64* %3, align 8
  %2372 = inttoptr i64 %2370 to i32*
  %2373 = load i32, i32* %2372, align 4
  %2374 = add i32 %2373, -4
  %2375 = icmp ult i32 %2373, 4
  %2376 = zext i1 %2375 to i8
  store i8 %2376, i8* %12, align 1
  %2377 = and i32 %2374, 255
  %2378 = tail call i32 @llvm.ctpop.i32(i32 %2377)
  %2379 = trunc i32 %2378 to i8
  %2380 = and i8 %2379, 1
  %2381 = xor i8 %2380, 1
  store i8 %2381, i8* %13, align 1
  %2382 = xor i32 %2374, %2373
  %2383 = lshr i32 %2382, 4
  %2384 = trunc i32 %2383 to i8
  %2385 = and i8 %2384, 1
  store i8 %2385, i8* %14, align 1
  %2386 = icmp eq i32 %2374, 0
  %2387 = zext i1 %2386 to i8
  store i8 %2387, i8* %15, align 1
  %2388 = lshr i32 %2374, 31
  %2389 = trunc i32 %2388 to i8
  store i8 %2389, i8* %16, align 1
  %2390 = lshr i32 %2373, 31
  %2391 = xor i32 %2388, %2390
  %2392 = add nuw nsw i32 %2391, %2390
  %2393 = icmp eq i32 %2392, 2
  %2394 = zext i1 %2393 to i8
  store i8 %2394, i8* %17, align 1
  %2395 = icmp ne i8 %2389, 0
  %2396 = xor i1 %2395, %2393
  %.v470 = select i1 %2396, i64 10, i64 455
  %2397 = add i64 %2368, %.v470
  store i64 %2397, i64* %3, align 8
  br i1 %2396, label %block_4048e1, label %block_.L_404a9e

block_4048e1:                                     ; preds = %block_.L_4048d7
  %2398 = add i64 %2369, -12
  %2399 = add i64 %2397, 7
  store i64 %2399, i64* %3, align 8
  %2400 = inttoptr i64 %2398 to i32*
  store i32 0, i32* %2400, align 4
  %.pre424 = load i64, i64* %3, align 8
  br label %block_.L_4048e8

block_.L_4048e8:                                  ; preds = %block_4048f2, %block_4048e1
  %2401 = phi i64 [ %3014, %block_4048f2 ], [ %.pre424, %block_4048e1 ]
  %2402 = load i64, i64* %RBP.i, align 8
  %2403 = add i64 %2402, -12
  %2404 = add i64 %2401, 4
  store i64 %2404, i64* %3, align 8
  %2405 = inttoptr i64 %2403 to i32*
  %2406 = load i32, i32* %2405, align 4
  %2407 = add i32 %2406, -2
  %2408 = icmp ult i32 %2406, 2
  %2409 = zext i1 %2408 to i8
  store i8 %2409, i8* %12, align 1
  %2410 = and i32 %2407, 255
  %2411 = tail call i32 @llvm.ctpop.i32(i32 %2410)
  %2412 = trunc i32 %2411 to i8
  %2413 = and i8 %2412, 1
  %2414 = xor i8 %2413, 1
  store i8 %2414, i8* %13, align 1
  %2415 = xor i32 %2407, %2406
  %2416 = lshr i32 %2415, 4
  %2417 = trunc i32 %2416 to i8
  %2418 = and i8 %2417, 1
  store i8 %2418, i8* %14, align 1
  %2419 = icmp eq i32 %2407, 0
  %2420 = zext i1 %2419 to i8
  store i8 %2420, i8* %15, align 1
  %2421 = lshr i32 %2407, 31
  %2422 = trunc i32 %2421 to i8
  store i8 %2422, i8* %16, align 1
  %2423 = lshr i32 %2406, 31
  %2424 = xor i32 %2421, %2423
  %2425 = add nuw nsw i32 %2424, %2423
  %2426 = icmp eq i32 %2425, 2
  %2427 = zext i1 %2426 to i8
  store i8 %2427, i8* %17, align 1
  %2428 = icmp ne i8 %2422, 0
  %2429 = xor i1 %2428, %2426
  %.v471 = select i1 %2429, i64 10, i64 233
  %2430 = add i64 %2401, %.v471
  %2431 = add i64 %2402, -2176
  %2432 = add i64 %2430, 7
  store i64 %2432, i64* %3, align 8
  store i64 %2431, i64* %RAX.i552, align 8
  br i1 %2429, label %block_4048f2, label %block_.L_4049d1

block_4048f2:                                     ; preds = %block_.L_4048e8
  store i64 3, i64* %RCX.i4476, align 8
  %2433 = add i64 %2430, 15
  store i64 %2433, i64* %3, align 8
  %2434 = load i32, i32* %2405, align 4
  %2435 = sub i32 3, %2434
  %2436 = zext i32 %2435 to i64
  store i64 %2436, i64* %RCX.i4476, align 8
  %2437 = icmp ugt i32 %2434, 3
  %2438 = zext i1 %2437 to i8
  store i8 %2438, i8* %12, align 1
  %2439 = and i32 %2435, 255
  %2440 = tail call i32 @llvm.ctpop.i32(i32 %2439)
  %2441 = trunc i32 %2440 to i8
  %2442 = and i8 %2441, 1
  %2443 = xor i8 %2442, 1
  store i8 %2443, i8* %13, align 1
  %2444 = xor i32 %2435, %2434
  %2445 = lshr i32 %2444, 4
  %2446 = trunc i32 %2445 to i8
  %2447 = and i8 %2446, 1
  store i8 %2447, i8* %14, align 1
  %2448 = icmp eq i32 %2435, 0
  %2449 = zext i1 %2448 to i8
  store i8 %2449, i8* %15, align 1
  %2450 = lshr i32 %2435, 31
  %2451 = trunc i32 %2450 to i8
  store i8 %2451, i8* %16, align 1
  %2452 = lshr i32 %2434, 31
  %2453 = add nuw nsw i32 %2450, %2452
  %2454 = icmp eq i32 %2453, 2
  %2455 = zext i1 %2454 to i8
  store i8 %2455, i8* %17, align 1
  %2456 = add i64 %2402, -28
  %2457 = add i64 %2430, 18
  store i64 %2457, i64* %3, align 8
  %2458 = inttoptr i64 %2456 to i32*
  store i32 %2435, i32* %2458, align 4
  %2459 = load i64, i64* %RBP.i, align 8
  %2460 = add i64 %2459, -8
  %2461 = load i64, i64* %3, align 8
  %2462 = add i64 %2461, 4
  store i64 %2462, i64* %3, align 8
  %2463 = inttoptr i64 %2460 to i32*
  %2464 = load i32, i32* %2463, align 4
  %2465 = sext i32 %2464 to i64
  %2466 = shl nsw i64 %2465, 8
  store i64 %2466, i64* %RDX.i658, align 8
  %2467 = load i64, i64* %RAX.i552, align 8
  %2468 = add i64 %2466, %2467
  store i64 %2468, i64* %RSI.i757, align 8
  %2469 = icmp ult i64 %2468, %2467
  %2470 = icmp ult i64 %2468, %2466
  %2471 = or i1 %2469, %2470
  %2472 = zext i1 %2471 to i8
  store i8 %2472, i8* %12, align 1
  %2473 = trunc i64 %2468 to i32
  %2474 = and i32 %2473, 255
  %2475 = tail call i32 @llvm.ctpop.i32(i32 %2474)
  %2476 = trunc i32 %2475 to i8
  %2477 = and i8 %2476, 1
  %2478 = xor i8 %2477, 1
  store i8 %2478, i8* %13, align 1
  %2479 = xor i64 %2467, %2468
  %2480 = lshr i64 %2479, 4
  %2481 = trunc i64 %2480 to i8
  %2482 = and i8 %2481, 1
  store i8 %2482, i8* %14, align 1
  %2483 = icmp eq i64 %2468, 0
  %2484 = zext i1 %2483 to i8
  store i8 %2484, i8* %15, align 1
  %2485 = lshr i64 %2468, 63
  %2486 = trunc i64 %2485 to i8
  store i8 %2486, i8* %16, align 1
  %2487 = lshr i64 %2467, 63
  %2488 = lshr i64 %2465, 55
  %2489 = and i64 %2488, 1
  %2490 = xor i64 %2485, %2487
  %2491 = xor i64 %2485, %2489
  %2492 = add nuw nsw i64 %2490, %2491
  %2493 = icmp eq i64 %2492, 2
  %2494 = zext i1 %2493 to i8
  store i8 %2494, i8* %17, align 1
  %2495 = add i64 %2459, -16
  %2496 = add i64 %2461, 18
  store i64 %2496, i64* %3, align 8
  %2497 = inttoptr i64 %2495 to i32*
  %2498 = load i32, i32* %2497, align 4
  %2499 = sext i32 %2498 to i64
  %2500 = shl nsw i64 %2499, 6
  store i64 %2500, i64* %RDX.i658, align 8
  %2501 = add i64 %2500, %2468
  store i64 %2501, i64* %RSI.i757, align 8
  %2502 = icmp ult i64 %2501, %2468
  %2503 = icmp ult i64 %2501, %2500
  %2504 = or i1 %2502, %2503
  %2505 = zext i1 %2504 to i8
  store i8 %2505, i8* %12, align 1
  %2506 = trunc i64 %2501 to i32
  %2507 = and i32 %2506, 255
  %2508 = tail call i32 @llvm.ctpop.i32(i32 %2507)
  %2509 = trunc i32 %2508 to i8
  %2510 = and i8 %2509, 1
  %2511 = xor i8 %2510, 1
  store i8 %2511, i8* %13, align 1
  %2512 = xor i64 %2468, %2501
  %2513 = lshr i64 %2512, 4
  %2514 = trunc i64 %2513 to i8
  %2515 = and i8 %2514, 1
  store i8 %2515, i8* %14, align 1
  %2516 = icmp eq i64 %2501, 0
  %2517 = zext i1 %2516 to i8
  store i8 %2517, i8* %15, align 1
  %2518 = lshr i64 %2501, 63
  %2519 = trunc i64 %2518 to i8
  store i8 %2519, i8* %16, align 1
  %2520 = lshr i64 %2499, 57
  %2521 = and i64 %2520, 1
  %2522 = xor i64 %2518, %2485
  %2523 = xor i64 %2518, %2521
  %2524 = add nuw nsw i64 %2522, %2523
  %2525 = icmp eq i64 %2524, 2
  %2526 = zext i1 %2525 to i8
  store i8 %2526, i8* %17, align 1
  %2527 = load i64, i64* %RBP.i, align 8
  %2528 = add i64 %2527, -12
  %2529 = add i64 %2461, 29
  store i64 %2529, i64* %3, align 8
  %2530 = inttoptr i64 %2528 to i32*
  %2531 = load i32, i32* %2530, align 4
  %2532 = sext i32 %2531 to i64
  %2533 = shl nsw i64 %2532, 4
  store i64 %2533, i64* %RDX.i658, align 8
  %2534 = add i64 %2533, %2501
  store i64 %2534, i64* %RSI.i757, align 8
  %2535 = icmp ult i64 %2534, %2501
  %2536 = icmp ult i64 %2534, %2533
  %2537 = or i1 %2535, %2536
  %2538 = zext i1 %2537 to i8
  store i8 %2538, i8* %12, align 1
  %2539 = trunc i64 %2534 to i32
  %2540 = and i32 %2539, 255
  %2541 = tail call i32 @llvm.ctpop.i32(i32 %2540)
  %2542 = trunc i32 %2541 to i8
  %2543 = and i8 %2542, 1
  %2544 = xor i8 %2543, 1
  store i8 %2544, i8* %13, align 1
  %2545 = xor i64 %2533, %2501
  %2546 = xor i64 %2545, %2534
  %2547 = lshr i64 %2546, 4
  %2548 = trunc i64 %2547 to i8
  %2549 = and i8 %2548, 1
  store i8 %2549, i8* %14, align 1
  %2550 = icmp eq i64 %2534, 0
  %2551 = zext i1 %2550 to i8
  store i8 %2551, i8* %15, align 1
  %2552 = lshr i64 %2534, 63
  %2553 = trunc i64 %2552 to i8
  store i8 %2553, i8* %16, align 1
  %2554 = lshr i64 %2532, 59
  %2555 = and i64 %2554, 1
  %2556 = xor i64 %2552, %2518
  %2557 = xor i64 %2552, %2555
  %2558 = add nuw nsw i64 %2556, %2557
  %2559 = icmp eq i64 %2558, 2
  %2560 = zext i1 %2559 to i8
  store i8 %2560, i8* %17, align 1
  %2561 = add i64 %2527, -20
  %2562 = add i64 %2461, 40
  store i64 %2562, i64* %3, align 8
  %2563 = inttoptr i64 %2561 to i32*
  %2564 = load i32, i32* %2563, align 4
  %2565 = sext i32 %2564 to i64
  store i64 %2565, i64* %RDX.i658, align 8
  %2566 = shl nsw i64 %2565, 2
  %2567 = add i64 %2566, %2534
  %2568 = add i64 %2461, 43
  store i64 %2568, i64* %3, align 8
  %2569 = inttoptr i64 %2567 to i32*
  %2570 = load i32, i32* %2569, align 4
  %2571 = zext i32 %2570 to i64
  store i64 %2571, i64* %RCX.i4476, align 8
  %2572 = add i64 %2527, -8
  %2573 = add i64 %2461, 47
  store i64 %2573, i64* %3, align 8
  %2574 = inttoptr i64 %2572 to i32*
  %2575 = load i32, i32* %2574, align 4
  %2576 = sext i32 %2575 to i64
  %2577 = shl nsw i64 %2576, 8
  store i64 %2577, i64* %RDX.i658, align 8
  %2578 = load i64, i64* %RAX.i552, align 8
  %2579 = add i64 %2577, %2578
  store i64 %2579, i64* %RSI.i757, align 8
  %2580 = icmp ult i64 %2579, %2578
  %2581 = icmp ult i64 %2579, %2577
  %2582 = or i1 %2580, %2581
  %2583 = zext i1 %2582 to i8
  store i8 %2583, i8* %12, align 1
  %2584 = trunc i64 %2579 to i32
  %2585 = and i32 %2584, 255
  %2586 = tail call i32 @llvm.ctpop.i32(i32 %2585)
  %2587 = trunc i32 %2586 to i8
  %2588 = and i8 %2587, 1
  %2589 = xor i8 %2588, 1
  store i8 %2589, i8* %13, align 1
  %2590 = xor i64 %2578, %2579
  %2591 = lshr i64 %2590, 4
  %2592 = trunc i64 %2591 to i8
  %2593 = and i8 %2592, 1
  store i8 %2593, i8* %14, align 1
  %2594 = icmp eq i64 %2579, 0
  %2595 = zext i1 %2594 to i8
  store i8 %2595, i8* %15, align 1
  %2596 = lshr i64 %2579, 63
  %2597 = trunc i64 %2596 to i8
  store i8 %2597, i8* %16, align 1
  %2598 = lshr i64 %2578, 63
  %2599 = lshr i64 %2576, 55
  %2600 = and i64 %2599, 1
  %2601 = xor i64 %2596, %2598
  %2602 = xor i64 %2596, %2600
  %2603 = add nuw nsw i64 %2601, %2602
  %2604 = icmp eq i64 %2603, 2
  %2605 = zext i1 %2604 to i8
  store i8 %2605, i8* %17, align 1
  %2606 = load i64, i64* %RBP.i, align 8
  %2607 = add i64 %2606, -16
  %2608 = add i64 %2461, 61
  store i64 %2608, i64* %3, align 8
  %2609 = inttoptr i64 %2607 to i32*
  %2610 = load i32, i32* %2609, align 4
  %2611 = sext i32 %2610 to i64
  %2612 = shl nsw i64 %2611, 6
  store i64 %2612, i64* %RDX.i658, align 8
  %2613 = add i64 %2612, %2579
  store i64 %2613, i64* %RSI.i757, align 8
  %2614 = icmp ult i64 %2613, %2579
  %2615 = icmp ult i64 %2613, %2612
  %2616 = or i1 %2614, %2615
  %2617 = zext i1 %2616 to i8
  store i8 %2617, i8* %12, align 1
  %2618 = trunc i64 %2613 to i32
  %2619 = and i32 %2618, 255
  %2620 = tail call i32 @llvm.ctpop.i32(i32 %2619)
  %2621 = trunc i32 %2620 to i8
  %2622 = and i8 %2621, 1
  %2623 = xor i8 %2622, 1
  store i8 %2623, i8* %13, align 1
  %2624 = xor i64 %2579, %2613
  %2625 = lshr i64 %2624, 4
  %2626 = trunc i64 %2625 to i8
  %2627 = and i8 %2626, 1
  store i8 %2627, i8* %14, align 1
  %2628 = icmp eq i64 %2613, 0
  %2629 = zext i1 %2628 to i8
  store i8 %2629, i8* %15, align 1
  %2630 = lshr i64 %2613, 63
  %2631 = trunc i64 %2630 to i8
  store i8 %2631, i8* %16, align 1
  %2632 = lshr i64 %2611, 57
  %2633 = and i64 %2632, 1
  %2634 = xor i64 %2630, %2596
  %2635 = xor i64 %2630, %2633
  %2636 = add nuw nsw i64 %2634, %2635
  %2637 = icmp eq i64 %2636, 2
  %2638 = zext i1 %2637 to i8
  store i8 %2638, i8* %17, align 1
  %2639 = add i64 %2606, -28
  %2640 = add i64 %2461, 72
  store i64 %2640, i64* %3, align 8
  %2641 = inttoptr i64 %2639 to i32*
  %2642 = load i32, i32* %2641, align 4
  %2643 = sext i32 %2642 to i64
  %2644 = shl nsw i64 %2643, 4
  store i64 %2644, i64* %RDX.i658, align 8
  %2645 = add i64 %2644, %2613
  store i64 %2645, i64* %RSI.i757, align 8
  %2646 = icmp ult i64 %2645, %2613
  %2647 = icmp ult i64 %2645, %2644
  %2648 = or i1 %2646, %2647
  %2649 = zext i1 %2648 to i8
  store i8 %2649, i8* %12, align 1
  %2650 = trunc i64 %2645 to i32
  %2651 = and i32 %2650, 255
  %2652 = tail call i32 @llvm.ctpop.i32(i32 %2651)
  %2653 = trunc i32 %2652 to i8
  %2654 = and i8 %2653, 1
  %2655 = xor i8 %2654, 1
  store i8 %2655, i8* %13, align 1
  %2656 = xor i64 %2644, %2613
  %2657 = xor i64 %2656, %2645
  %2658 = lshr i64 %2657, 4
  %2659 = trunc i64 %2658 to i8
  %2660 = and i8 %2659, 1
  store i8 %2660, i8* %14, align 1
  %2661 = icmp eq i64 %2645, 0
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %15, align 1
  %2663 = lshr i64 %2645, 63
  %2664 = trunc i64 %2663 to i8
  store i8 %2664, i8* %16, align 1
  %2665 = lshr i64 %2643, 59
  %2666 = and i64 %2665, 1
  %2667 = xor i64 %2663, %2630
  %2668 = xor i64 %2663, %2666
  %2669 = add nuw nsw i64 %2667, %2668
  %2670 = icmp eq i64 %2669, 2
  %2671 = zext i1 %2670 to i8
  store i8 %2671, i8* %17, align 1
  %2672 = load i64, i64* %RBP.i, align 8
  %2673 = add i64 %2672, -20
  %2674 = add i64 %2461, 83
  store i64 %2674, i64* %3, align 8
  %2675 = inttoptr i64 %2673 to i32*
  %2676 = load i32, i32* %2675, align 4
  %2677 = sext i32 %2676 to i64
  store i64 %2677, i64* %RDX.i658, align 8
  %2678 = load i64, i64* %RCX.i4476, align 8
  %2679 = shl nsw i64 %2677, 2
  %2680 = add i64 %2645, %2679
  %2681 = add i64 %2461, 86
  store i64 %2681, i64* %3, align 8
  %2682 = trunc i64 %2678 to i32
  %2683 = inttoptr i64 %2680 to i32*
  %2684 = load i32, i32* %2683, align 4
  %2685 = add i32 %2684, %2682
  %2686 = zext i32 %2685 to i64
  store i64 %2686, i64* %RCX.i4476, align 8
  %2687 = icmp ult i32 %2685, %2682
  %2688 = icmp ult i32 %2685, %2684
  %2689 = or i1 %2687, %2688
  %2690 = zext i1 %2689 to i8
  store i8 %2690, i8* %12, align 1
  %2691 = and i32 %2685, 255
  %2692 = tail call i32 @llvm.ctpop.i32(i32 %2691)
  %2693 = trunc i32 %2692 to i8
  %2694 = and i8 %2693, 1
  %2695 = xor i8 %2694, 1
  store i8 %2695, i8* %13, align 1
  %2696 = xor i32 %2684, %2682
  %2697 = xor i32 %2696, %2685
  %2698 = lshr i32 %2697, 4
  %2699 = trunc i32 %2698 to i8
  %2700 = and i8 %2699, 1
  store i8 %2700, i8* %14, align 1
  %2701 = icmp eq i32 %2685, 0
  %2702 = zext i1 %2701 to i8
  store i8 %2702, i8* %15, align 1
  %2703 = lshr i32 %2685, 31
  %2704 = trunc i32 %2703 to i8
  store i8 %2704, i8* %16, align 1
  %2705 = lshr i32 %2682, 31
  %2706 = lshr i32 %2684, 31
  %2707 = xor i32 %2703, %2705
  %2708 = xor i32 %2703, %2706
  %2709 = add nuw nsw i32 %2707, %2708
  %2710 = icmp eq i32 %2709, 2
  %2711 = zext i1 %2710 to i8
  store i8 %2711, i8* %17, align 1
  %2712 = add i64 %2672, -12
  %2713 = add i64 %2461, 90
  store i64 %2713, i64* %3, align 8
  %2714 = inttoptr i64 %2712 to i32*
  %2715 = load i32, i32* %2714, align 4
  %2716 = sext i32 %2715 to i64
  store i64 %2716, i64* %RDX.i658, align 8
  %2717 = shl nsw i64 %2716, 2
  %2718 = add i64 %2672, -1136
  %2719 = add i64 %2718, %2717
  %2720 = add i64 %2461, 97
  store i64 %2720, i64* %3, align 8
  %2721 = inttoptr i64 %2719 to i32*
  store i32 %2685, i32* %2721, align 4
  %2722 = load i64, i64* %RBP.i, align 8
  %2723 = add i64 %2722, -8
  %2724 = load i64, i64* %3, align 8
  %2725 = add i64 %2724, 4
  store i64 %2725, i64* %3, align 8
  %2726 = inttoptr i64 %2723 to i32*
  %2727 = load i32, i32* %2726, align 4
  %2728 = sext i32 %2727 to i64
  %2729 = shl nsw i64 %2728, 8
  store i64 %2729, i64* %RDX.i658, align 8
  %2730 = load i64, i64* %RAX.i552, align 8
  %2731 = add i64 %2729, %2730
  store i64 %2731, i64* %RSI.i757, align 8
  %2732 = icmp ult i64 %2731, %2730
  %2733 = icmp ult i64 %2731, %2729
  %2734 = or i1 %2732, %2733
  %2735 = zext i1 %2734 to i8
  store i8 %2735, i8* %12, align 1
  %2736 = trunc i64 %2731 to i32
  %2737 = and i32 %2736, 255
  %2738 = tail call i32 @llvm.ctpop.i32(i32 %2737)
  %2739 = trunc i32 %2738 to i8
  %2740 = and i8 %2739, 1
  %2741 = xor i8 %2740, 1
  store i8 %2741, i8* %13, align 1
  %2742 = xor i64 %2730, %2731
  %2743 = lshr i64 %2742, 4
  %2744 = trunc i64 %2743 to i8
  %2745 = and i8 %2744, 1
  store i8 %2745, i8* %14, align 1
  %2746 = icmp eq i64 %2731, 0
  %2747 = zext i1 %2746 to i8
  store i8 %2747, i8* %15, align 1
  %2748 = lshr i64 %2731, 63
  %2749 = trunc i64 %2748 to i8
  store i8 %2749, i8* %16, align 1
  %2750 = lshr i64 %2730, 63
  %2751 = lshr i64 %2728, 55
  %2752 = and i64 %2751, 1
  %2753 = xor i64 %2748, %2750
  %2754 = xor i64 %2748, %2752
  %2755 = add nuw nsw i64 %2753, %2754
  %2756 = icmp eq i64 %2755, 2
  %2757 = zext i1 %2756 to i8
  store i8 %2757, i8* %17, align 1
  %2758 = add i64 %2722, -16
  %2759 = add i64 %2724, 18
  store i64 %2759, i64* %3, align 8
  %2760 = inttoptr i64 %2758 to i32*
  %2761 = load i32, i32* %2760, align 4
  %2762 = sext i32 %2761 to i64
  %2763 = shl nsw i64 %2762, 6
  store i64 %2763, i64* %RDX.i658, align 8
  %2764 = add i64 %2763, %2731
  store i64 %2764, i64* %RSI.i757, align 8
  %2765 = icmp ult i64 %2764, %2731
  %2766 = icmp ult i64 %2764, %2763
  %2767 = or i1 %2765, %2766
  %2768 = zext i1 %2767 to i8
  store i8 %2768, i8* %12, align 1
  %2769 = trunc i64 %2764 to i32
  %2770 = and i32 %2769, 255
  %2771 = tail call i32 @llvm.ctpop.i32(i32 %2770)
  %2772 = trunc i32 %2771 to i8
  %2773 = and i8 %2772, 1
  %2774 = xor i8 %2773, 1
  store i8 %2774, i8* %13, align 1
  %2775 = xor i64 %2731, %2764
  %2776 = lshr i64 %2775, 4
  %2777 = trunc i64 %2776 to i8
  %2778 = and i8 %2777, 1
  store i8 %2778, i8* %14, align 1
  %2779 = icmp eq i64 %2764, 0
  %2780 = zext i1 %2779 to i8
  store i8 %2780, i8* %15, align 1
  %2781 = lshr i64 %2764, 63
  %2782 = trunc i64 %2781 to i8
  store i8 %2782, i8* %16, align 1
  %2783 = lshr i64 %2762, 57
  %2784 = and i64 %2783, 1
  %2785 = xor i64 %2781, %2748
  %2786 = xor i64 %2781, %2784
  %2787 = add nuw nsw i64 %2785, %2786
  %2788 = icmp eq i64 %2787, 2
  %2789 = zext i1 %2788 to i8
  store i8 %2789, i8* %17, align 1
  %2790 = load i64, i64* %RBP.i, align 8
  %2791 = add i64 %2790, -12
  %2792 = add i64 %2724, 29
  store i64 %2792, i64* %3, align 8
  %2793 = inttoptr i64 %2791 to i32*
  %2794 = load i32, i32* %2793, align 4
  %2795 = sext i32 %2794 to i64
  %2796 = shl nsw i64 %2795, 4
  store i64 %2796, i64* %RDX.i658, align 8
  %2797 = add i64 %2796, %2764
  store i64 %2797, i64* %RSI.i757, align 8
  %2798 = icmp ult i64 %2797, %2764
  %2799 = icmp ult i64 %2797, %2796
  %2800 = or i1 %2798, %2799
  %2801 = zext i1 %2800 to i8
  store i8 %2801, i8* %12, align 1
  %2802 = trunc i64 %2797 to i32
  %2803 = and i32 %2802, 255
  %2804 = tail call i32 @llvm.ctpop.i32(i32 %2803)
  %2805 = trunc i32 %2804 to i8
  %2806 = and i8 %2805, 1
  %2807 = xor i8 %2806, 1
  store i8 %2807, i8* %13, align 1
  %2808 = xor i64 %2796, %2764
  %2809 = xor i64 %2808, %2797
  %2810 = lshr i64 %2809, 4
  %2811 = trunc i64 %2810 to i8
  %2812 = and i8 %2811, 1
  store i8 %2812, i8* %14, align 1
  %2813 = icmp eq i64 %2797, 0
  %2814 = zext i1 %2813 to i8
  store i8 %2814, i8* %15, align 1
  %2815 = lshr i64 %2797, 63
  %2816 = trunc i64 %2815 to i8
  store i8 %2816, i8* %16, align 1
  %2817 = lshr i64 %2795, 59
  %2818 = and i64 %2817, 1
  %2819 = xor i64 %2815, %2781
  %2820 = xor i64 %2815, %2818
  %2821 = add nuw nsw i64 %2819, %2820
  %2822 = icmp eq i64 %2821, 2
  %2823 = zext i1 %2822 to i8
  store i8 %2823, i8* %17, align 1
  %2824 = add i64 %2790, -20
  %2825 = add i64 %2724, 40
  store i64 %2825, i64* %3, align 8
  %2826 = inttoptr i64 %2824 to i32*
  %2827 = load i32, i32* %2826, align 4
  %2828 = sext i32 %2827 to i64
  store i64 %2828, i64* %RDX.i658, align 8
  %2829 = shl nsw i64 %2828, 2
  %2830 = add i64 %2829, %2797
  %2831 = add i64 %2724, 43
  store i64 %2831, i64* %3, align 8
  %2832 = inttoptr i64 %2830 to i32*
  %2833 = load i32, i32* %2832, align 4
  %2834 = zext i32 %2833 to i64
  store i64 %2834, i64* %RCX.i4476, align 8
  %2835 = add i64 %2790, -8
  %2836 = add i64 %2724, 47
  store i64 %2836, i64* %3, align 8
  %2837 = inttoptr i64 %2835 to i32*
  %2838 = load i32, i32* %2837, align 4
  %2839 = sext i32 %2838 to i64
  %2840 = shl nsw i64 %2839, 8
  store i64 %2840, i64* %RDX.i658, align 8
  %2841 = load i64, i64* %RAX.i552, align 8
  %2842 = add i64 %2840, %2841
  store i64 %2842, i64* %RAX.i552, align 8
  %2843 = icmp ult i64 %2842, %2841
  %2844 = icmp ult i64 %2842, %2840
  %2845 = or i1 %2843, %2844
  %2846 = zext i1 %2845 to i8
  store i8 %2846, i8* %12, align 1
  %2847 = trunc i64 %2842 to i32
  %2848 = and i32 %2847, 255
  %2849 = tail call i32 @llvm.ctpop.i32(i32 %2848)
  %2850 = trunc i32 %2849 to i8
  %2851 = and i8 %2850, 1
  %2852 = xor i8 %2851, 1
  store i8 %2852, i8* %13, align 1
  %2853 = xor i64 %2841, %2842
  %2854 = lshr i64 %2853, 4
  %2855 = trunc i64 %2854 to i8
  %2856 = and i8 %2855, 1
  store i8 %2856, i8* %14, align 1
  %2857 = icmp eq i64 %2842, 0
  %2858 = zext i1 %2857 to i8
  store i8 %2858, i8* %15, align 1
  %2859 = lshr i64 %2842, 63
  %2860 = trunc i64 %2859 to i8
  store i8 %2860, i8* %16, align 1
  %2861 = lshr i64 %2841, 63
  %2862 = lshr i64 %2839, 55
  %2863 = and i64 %2862, 1
  %2864 = xor i64 %2859, %2861
  %2865 = xor i64 %2859, %2863
  %2866 = add nuw nsw i64 %2864, %2865
  %2867 = icmp eq i64 %2866, 2
  %2868 = zext i1 %2867 to i8
  store i8 %2868, i8* %17, align 1
  %2869 = load i64, i64* %RBP.i, align 8
  %2870 = add i64 %2869, -16
  %2871 = add i64 %2724, 58
  store i64 %2871, i64* %3, align 8
  %2872 = inttoptr i64 %2870 to i32*
  %2873 = load i32, i32* %2872, align 4
  %2874 = sext i32 %2873 to i64
  %2875 = shl nsw i64 %2874, 6
  store i64 %2875, i64* %RDX.i658, align 8
  %2876 = add i64 %2875, %2842
  store i64 %2876, i64* %RAX.i552, align 8
  %2877 = icmp ult i64 %2876, %2842
  %2878 = icmp ult i64 %2876, %2875
  %2879 = or i1 %2877, %2878
  %2880 = zext i1 %2879 to i8
  store i8 %2880, i8* %12, align 1
  %2881 = trunc i64 %2876 to i32
  %2882 = and i32 %2881, 255
  %2883 = tail call i32 @llvm.ctpop.i32(i32 %2882)
  %2884 = trunc i32 %2883 to i8
  %2885 = and i8 %2884, 1
  %2886 = xor i8 %2885, 1
  store i8 %2886, i8* %13, align 1
  %2887 = xor i64 %2842, %2876
  %2888 = lshr i64 %2887, 4
  %2889 = trunc i64 %2888 to i8
  %2890 = and i8 %2889, 1
  store i8 %2890, i8* %14, align 1
  %2891 = icmp eq i64 %2876, 0
  %2892 = zext i1 %2891 to i8
  store i8 %2892, i8* %15, align 1
  %2893 = lshr i64 %2876, 63
  %2894 = trunc i64 %2893 to i8
  store i8 %2894, i8* %16, align 1
  %2895 = lshr i64 %2874, 57
  %2896 = and i64 %2895, 1
  %2897 = xor i64 %2893, %2859
  %2898 = xor i64 %2893, %2896
  %2899 = add nuw nsw i64 %2897, %2898
  %2900 = icmp eq i64 %2899, 2
  %2901 = zext i1 %2900 to i8
  store i8 %2901, i8* %17, align 1
  %2902 = add i64 %2869, -28
  %2903 = add i64 %2724, 69
  store i64 %2903, i64* %3, align 8
  %2904 = inttoptr i64 %2902 to i32*
  %2905 = load i32, i32* %2904, align 4
  %2906 = sext i32 %2905 to i64
  %2907 = shl nsw i64 %2906, 4
  store i64 %2907, i64* %RDX.i658, align 8
  %2908 = add i64 %2907, %2876
  store i64 %2908, i64* %RAX.i552, align 8
  %2909 = icmp ult i64 %2908, %2876
  %2910 = icmp ult i64 %2908, %2907
  %2911 = or i1 %2909, %2910
  %2912 = zext i1 %2911 to i8
  store i8 %2912, i8* %12, align 1
  %2913 = trunc i64 %2908 to i32
  %2914 = and i32 %2913, 255
  %2915 = tail call i32 @llvm.ctpop.i32(i32 %2914)
  %2916 = trunc i32 %2915 to i8
  %2917 = and i8 %2916, 1
  %2918 = xor i8 %2917, 1
  store i8 %2918, i8* %13, align 1
  %2919 = xor i64 %2907, %2876
  %2920 = xor i64 %2919, %2908
  %2921 = lshr i64 %2920, 4
  %2922 = trunc i64 %2921 to i8
  %2923 = and i8 %2922, 1
  store i8 %2923, i8* %14, align 1
  %2924 = icmp eq i64 %2908, 0
  %2925 = zext i1 %2924 to i8
  store i8 %2925, i8* %15, align 1
  %2926 = lshr i64 %2908, 63
  %2927 = trunc i64 %2926 to i8
  store i8 %2927, i8* %16, align 1
  %2928 = lshr i64 %2906, 59
  %2929 = and i64 %2928, 1
  %2930 = xor i64 %2926, %2893
  %2931 = xor i64 %2926, %2929
  %2932 = add nuw nsw i64 %2930, %2931
  %2933 = icmp eq i64 %2932, 2
  %2934 = zext i1 %2933 to i8
  store i8 %2934, i8* %17, align 1
  %2935 = load i64, i64* %RBP.i, align 8
  %2936 = add i64 %2935, -20
  %2937 = add i64 %2724, 80
  store i64 %2937, i64* %3, align 8
  %2938 = inttoptr i64 %2936 to i32*
  %2939 = load i32, i32* %2938, align 4
  %2940 = sext i32 %2939 to i64
  store i64 %2940, i64* %RDX.i658, align 8
  %2941 = load i64, i64* %RCX.i4476, align 8
  %2942 = shl nsw i64 %2940, 2
  %2943 = add i64 %2908, %2942
  %2944 = add i64 %2724, 83
  store i64 %2944, i64* %3, align 8
  %2945 = trunc i64 %2941 to i32
  %2946 = inttoptr i64 %2943 to i32*
  %2947 = load i32, i32* %2946, align 4
  %2948 = sub i32 %2945, %2947
  %2949 = zext i32 %2948 to i64
  store i64 %2949, i64* %RCX.i4476, align 8
  %2950 = icmp ult i32 %2945, %2947
  %2951 = zext i1 %2950 to i8
  store i8 %2951, i8* %12, align 1
  %2952 = and i32 %2948, 255
  %2953 = tail call i32 @llvm.ctpop.i32(i32 %2952)
  %2954 = trunc i32 %2953 to i8
  %2955 = and i8 %2954, 1
  %2956 = xor i8 %2955, 1
  store i8 %2956, i8* %13, align 1
  %2957 = xor i32 %2947, %2945
  %2958 = xor i32 %2957, %2948
  %2959 = lshr i32 %2958, 4
  %2960 = trunc i32 %2959 to i8
  %2961 = and i8 %2960, 1
  store i8 %2961, i8* %14, align 1
  %2962 = icmp eq i32 %2948, 0
  %2963 = zext i1 %2962 to i8
  store i8 %2963, i8* %15, align 1
  %2964 = lshr i32 %2948, 31
  %2965 = trunc i32 %2964 to i8
  store i8 %2965, i8* %16, align 1
  %2966 = lshr i32 %2945, 31
  %2967 = lshr i32 %2947, 31
  %2968 = xor i32 %2967, %2966
  %2969 = xor i32 %2964, %2966
  %2970 = add nuw nsw i32 %2969, %2968
  %2971 = icmp eq i32 %2970, 2
  %2972 = zext i1 %2971 to i8
  store i8 %2972, i8* %17, align 1
  %2973 = add i64 %2935, -28
  %2974 = add i64 %2724, 87
  store i64 %2974, i64* %3, align 8
  %2975 = inttoptr i64 %2973 to i32*
  %2976 = load i32, i32* %2975, align 4
  %2977 = sext i32 %2976 to i64
  store i64 %2977, i64* %RAX.i552, align 8
  %2978 = shl nsw i64 %2977, 2
  %2979 = add i64 %2935, -1136
  %2980 = add i64 %2979, %2978
  %2981 = add i64 %2724, 94
  store i64 %2981, i64* %3, align 8
  %2982 = inttoptr i64 %2980 to i32*
  store i32 %2948, i32* %2982, align 4
  %2983 = load i64, i64* %RBP.i, align 8
  %2984 = add i64 %2983, -12
  %2985 = load i64, i64* %3, align 8
  %2986 = add i64 %2985, 3
  store i64 %2986, i64* %3, align 8
  %2987 = inttoptr i64 %2984 to i32*
  %2988 = load i32, i32* %2987, align 4
  %2989 = add i32 %2988, 1
  %2990 = zext i32 %2989 to i64
  store i64 %2990, i64* %RAX.i552, align 8
  %2991 = icmp eq i32 %2988, -1
  %2992 = icmp eq i32 %2989, 0
  %2993 = or i1 %2991, %2992
  %2994 = zext i1 %2993 to i8
  store i8 %2994, i8* %12, align 1
  %2995 = and i32 %2989, 255
  %2996 = tail call i32 @llvm.ctpop.i32(i32 %2995)
  %2997 = trunc i32 %2996 to i8
  %2998 = and i8 %2997, 1
  %2999 = xor i8 %2998, 1
  store i8 %2999, i8* %13, align 1
  %3000 = xor i32 %2989, %2988
  %3001 = lshr i32 %3000, 4
  %3002 = trunc i32 %3001 to i8
  %3003 = and i8 %3002, 1
  store i8 %3003, i8* %14, align 1
  %3004 = zext i1 %2992 to i8
  store i8 %3004, i8* %15, align 1
  %3005 = lshr i32 %2989, 31
  %3006 = trunc i32 %3005 to i8
  store i8 %3006, i8* %16, align 1
  %3007 = lshr i32 %2988, 31
  %3008 = xor i32 %3005, %3007
  %3009 = add nuw nsw i32 %3008, %3005
  %3010 = icmp eq i32 %3009, 2
  %3011 = zext i1 %3010 to i8
  store i8 %3011, i8* %17, align 1
  %3012 = add i64 %2985, 9
  store i64 %3012, i64* %3, align 8
  store i32 %2989, i32* %2987, align 4
  %3013 = load i64, i64* %3, align 8
  %3014 = add i64 %3013, -228
  store i64 %3014, i64* %3, align 8
  br label %block_.L_4048e8

block_.L_4049d1:                                  ; preds = %block_.L_4048e8
  %3015 = add i64 %2402, -1136
  %3016 = add i64 %2430, 13
  store i64 %3016, i64* %3, align 8
  %3017 = inttoptr i64 %3015 to i32*
  %3018 = load i32, i32* %3017, align 4
  %3019 = zext i32 %3018 to i64
  store i64 %3019, i64* %RCX.i4476, align 8
  %3020 = add i64 %2402, -1132
  %3021 = add i64 %2430, 19
  store i64 %3021, i64* %3, align 8
  %3022 = inttoptr i64 %3020 to i32*
  %3023 = load i32, i32* %3022, align 4
  %3024 = add i32 %3023, %3018
  %3025 = zext i32 %3024 to i64
  store i64 %3025, i64* %RCX.i4476, align 8
  %3026 = icmp ult i32 %3024, %3018
  %3027 = icmp ult i32 %3024, %3023
  %3028 = or i1 %3026, %3027
  %3029 = zext i1 %3028 to i8
  store i8 %3029, i8* %12, align 1
  %3030 = and i32 %3024, 255
  %3031 = tail call i32 @llvm.ctpop.i32(i32 %3030)
  %3032 = trunc i32 %3031 to i8
  %3033 = and i8 %3032, 1
  %3034 = xor i8 %3033, 1
  store i8 %3034, i8* %13, align 1
  %3035 = xor i32 %3023, %3018
  %3036 = xor i32 %3035, %3024
  %3037 = lshr i32 %3036, 4
  %3038 = trunc i32 %3037 to i8
  %3039 = and i8 %3038, 1
  store i8 %3039, i8* %14, align 1
  %3040 = icmp eq i32 %3024, 0
  %3041 = zext i1 %3040 to i8
  store i8 %3041, i8* %15, align 1
  %3042 = lshr i32 %3024, 31
  %3043 = trunc i32 %3042 to i8
  store i8 %3043, i8* %16, align 1
  %3044 = lshr i32 %3018, 31
  %3045 = lshr i32 %3023, 31
  %3046 = xor i32 %3042, %3044
  %3047 = xor i32 %3042, %3045
  %3048 = add nuw nsw i32 %3046, %3047
  %3049 = icmp eq i32 %3048, 2
  %3050 = zext i1 %3049 to i8
  store i8 %3050, i8* %17, align 1
  %3051 = add i64 %2402, -8
  %3052 = add i64 %2430, 23
  store i64 %3052, i64* %3, align 8
  %3053 = inttoptr i64 %3051 to i32*
  %3054 = load i32, i32* %3053, align 4
  %3055 = sext i32 %3054 to i64
  %3056 = shl nsw i64 %3055, 8
  store i64 %3056, i64* %RDX.i658, align 8
  %3057 = add i64 %3056, %2431
  store i64 %3057, i64* %RSI.i757, align 8
  %3058 = icmp ult i64 %3057, %2431
  %3059 = icmp ult i64 %3057, %3056
  %3060 = or i1 %3058, %3059
  %3061 = zext i1 %3060 to i8
  store i8 %3061, i8* %12, align 1
  %3062 = trunc i64 %3057 to i32
  %3063 = and i32 %3062, 255
  %3064 = tail call i32 @llvm.ctpop.i32(i32 %3063)
  %3065 = trunc i32 %3064 to i8
  %3066 = and i8 %3065, 1
  %3067 = xor i8 %3066, 1
  store i8 %3067, i8* %13, align 1
  %3068 = xor i64 %2431, %3057
  %3069 = lshr i64 %3068, 4
  %3070 = trunc i64 %3069 to i8
  %3071 = and i8 %3070, 1
  store i8 %3071, i8* %14, align 1
  %3072 = icmp eq i64 %3057, 0
  %3073 = zext i1 %3072 to i8
  store i8 %3073, i8* %15, align 1
  %3074 = lshr i64 %3057, 63
  %3075 = trunc i64 %3074 to i8
  store i8 %3075, i8* %16, align 1
  %3076 = lshr i64 %2431, 63
  %3077 = lshr i64 %3055, 55
  %3078 = and i64 %3077, 1
  %3079 = xor i64 %3074, %3076
  %3080 = xor i64 %3074, %3078
  %3081 = add nuw nsw i64 %3079, %3080
  %3082 = icmp eq i64 %3081, 2
  %3083 = zext i1 %3082 to i8
  store i8 %3083, i8* %17, align 1
  %3084 = load i64, i64* %RBP.i, align 8
  %3085 = add i64 %3084, -16
  %3086 = add i64 %2430, 37
  store i64 %3086, i64* %3, align 8
  %3087 = inttoptr i64 %3085 to i32*
  %3088 = load i32, i32* %3087, align 4
  %3089 = sext i32 %3088 to i64
  %3090 = shl nsw i64 %3089, 6
  store i64 %3090, i64* %RDX.i658, align 8
  %3091 = add i64 %3090, %3057
  store i64 %3091, i64* %RSI.i757, align 8
  %3092 = icmp ult i64 %3091, %3057
  %3093 = icmp ult i64 %3091, %3090
  %3094 = or i1 %3092, %3093
  %3095 = zext i1 %3094 to i8
  store i8 %3095, i8* %12, align 1
  %3096 = trunc i64 %3091 to i32
  %3097 = and i32 %3096, 255
  %3098 = tail call i32 @llvm.ctpop.i32(i32 %3097)
  %3099 = trunc i32 %3098 to i8
  %3100 = and i8 %3099, 1
  %3101 = xor i8 %3100, 1
  store i8 %3101, i8* %13, align 1
  %3102 = xor i64 %3057, %3091
  %3103 = lshr i64 %3102, 4
  %3104 = trunc i64 %3103 to i8
  %3105 = and i8 %3104, 1
  store i8 %3105, i8* %14, align 1
  %3106 = icmp eq i64 %3091, 0
  %3107 = zext i1 %3106 to i8
  store i8 %3107, i8* %15, align 1
  %3108 = lshr i64 %3091, 63
  %3109 = trunc i64 %3108 to i8
  store i8 %3109, i8* %16, align 1
  %3110 = lshr i64 %3089, 57
  %3111 = and i64 %3110, 1
  %3112 = xor i64 %3108, %3074
  %3113 = xor i64 %3108, %3111
  %3114 = add nuw nsw i64 %3112, %3113
  %3115 = icmp eq i64 %3114, 2
  %3116 = zext i1 %3115 to i8
  store i8 %3116, i8* %17, align 1
  %3117 = add i64 %3084, -20
  %3118 = add i64 %2430, 48
  store i64 %3118, i64* %3, align 8
  %3119 = inttoptr i64 %3117 to i32*
  %3120 = load i32, i32* %3119, align 4
  %3121 = sext i32 %3120 to i64
  store i64 %3121, i64* %RDX.i658, align 8
  %3122 = shl nsw i64 %3121, 2
  %3123 = add i64 %3122, %3091
  %3124 = load i32, i32* %ECX.i4446, align 4
  %3125 = add i64 %2430, 51
  store i64 %3125, i64* %3, align 8
  %3126 = inttoptr i64 %3123 to i32*
  store i32 %3124, i32* %3126, align 4
  %3127 = load i64, i64* %RBP.i, align 8
  %3128 = add i64 %3127, -1136
  %3129 = load i64, i64* %3, align 8
  %3130 = add i64 %3129, 6
  store i64 %3130, i64* %3, align 8
  %3131 = inttoptr i64 %3128 to i32*
  %3132 = load i32, i32* %3131, align 4
  %3133 = zext i32 %3132 to i64
  store i64 %3133, i64* %RCX.i4476, align 8
  %3134 = add i64 %3127, -1132
  %3135 = add i64 %3129, 12
  store i64 %3135, i64* %3, align 8
  %3136 = inttoptr i64 %3134 to i32*
  %3137 = load i32, i32* %3136, align 4
  %3138 = sub i32 %3132, %3137
  %3139 = zext i32 %3138 to i64
  store i64 %3139, i64* %RCX.i4476, align 8
  %3140 = icmp ult i32 %3132, %3137
  %3141 = zext i1 %3140 to i8
  store i8 %3141, i8* %12, align 1
  %3142 = and i32 %3138, 255
  %3143 = tail call i32 @llvm.ctpop.i32(i32 %3142)
  %3144 = trunc i32 %3143 to i8
  %3145 = and i8 %3144, 1
  %3146 = xor i8 %3145, 1
  store i8 %3146, i8* %13, align 1
  %3147 = xor i32 %3137, %3132
  %3148 = xor i32 %3147, %3138
  %3149 = lshr i32 %3148, 4
  %3150 = trunc i32 %3149 to i8
  %3151 = and i8 %3150, 1
  store i8 %3151, i8* %14, align 1
  %3152 = icmp eq i32 %3138, 0
  %3153 = zext i1 %3152 to i8
  store i8 %3153, i8* %15, align 1
  %3154 = lshr i32 %3138, 31
  %3155 = trunc i32 %3154 to i8
  store i8 %3155, i8* %16, align 1
  %3156 = lshr i32 %3132, 31
  %3157 = lshr i32 %3137, 31
  %3158 = xor i32 %3157, %3156
  %3159 = xor i32 %3154, %3156
  %3160 = add nuw nsw i32 %3159, %3158
  %3161 = icmp eq i32 %3160, 2
  %3162 = zext i1 %3161 to i8
  store i8 %3162, i8* %17, align 1
  %3163 = add i64 %3127, -8
  %3164 = add i64 %3129, 16
  store i64 %3164, i64* %3, align 8
  %3165 = inttoptr i64 %3163 to i32*
  %3166 = load i32, i32* %3165, align 4
  %3167 = sext i32 %3166 to i64
  %3168 = shl nsw i64 %3167, 8
  store i64 %3168, i64* %RDX.i658, align 8
  %3169 = load i64, i64* %RAX.i552, align 8
  %3170 = add i64 %3168, %3169
  store i64 %3170, i64* %RSI.i757, align 8
  %3171 = icmp ult i64 %3170, %3169
  %3172 = icmp ult i64 %3170, %3168
  %3173 = or i1 %3171, %3172
  %3174 = zext i1 %3173 to i8
  store i8 %3174, i8* %12, align 1
  %3175 = trunc i64 %3170 to i32
  %3176 = and i32 %3175, 255
  %3177 = tail call i32 @llvm.ctpop.i32(i32 %3176)
  %3178 = trunc i32 %3177 to i8
  %3179 = and i8 %3178, 1
  %3180 = xor i8 %3179, 1
  store i8 %3180, i8* %13, align 1
  %3181 = xor i64 %3169, %3170
  %3182 = lshr i64 %3181, 4
  %3183 = trunc i64 %3182 to i8
  %3184 = and i8 %3183, 1
  store i8 %3184, i8* %14, align 1
  %3185 = icmp eq i64 %3170, 0
  %3186 = zext i1 %3185 to i8
  store i8 %3186, i8* %15, align 1
  %3187 = lshr i64 %3170, 63
  %3188 = trunc i64 %3187 to i8
  store i8 %3188, i8* %16, align 1
  %3189 = lshr i64 %3169, 63
  %3190 = lshr i64 %3167, 55
  %3191 = and i64 %3190, 1
  %3192 = xor i64 %3187, %3189
  %3193 = xor i64 %3187, %3191
  %3194 = add nuw nsw i64 %3192, %3193
  %3195 = icmp eq i64 %3194, 2
  %3196 = zext i1 %3195 to i8
  store i8 %3196, i8* %17, align 1
  %3197 = load i64, i64* %RBP.i, align 8
  %3198 = add i64 %3197, -16
  %3199 = add i64 %3129, 30
  store i64 %3199, i64* %3, align 8
  %3200 = inttoptr i64 %3198 to i32*
  %3201 = load i32, i32* %3200, align 4
  %3202 = sext i32 %3201 to i64
  %3203 = shl nsw i64 %3202, 6
  store i64 %3203, i64* %RDX.i658, align 8
  %3204 = add i64 %3203, %3170
  store i64 %3204, i64* %RSI.i757, align 8
  %3205 = icmp ult i64 %3204, %3170
  %3206 = icmp ult i64 %3204, %3203
  %3207 = or i1 %3205, %3206
  %3208 = zext i1 %3207 to i8
  store i8 %3208, i8* %12, align 1
  %3209 = trunc i64 %3204 to i32
  %3210 = and i32 %3209, 255
  %3211 = tail call i32 @llvm.ctpop.i32(i32 %3210)
  %3212 = trunc i32 %3211 to i8
  %3213 = and i8 %3212, 1
  %3214 = xor i8 %3213, 1
  store i8 %3214, i8* %13, align 1
  %3215 = xor i64 %3170, %3204
  %3216 = lshr i64 %3215, 4
  %3217 = trunc i64 %3216 to i8
  %3218 = and i8 %3217, 1
  store i8 %3218, i8* %14, align 1
  %3219 = icmp eq i64 %3204, 0
  %3220 = zext i1 %3219 to i8
  store i8 %3220, i8* %15, align 1
  %3221 = lshr i64 %3204, 63
  %3222 = trunc i64 %3221 to i8
  store i8 %3222, i8* %16, align 1
  %3223 = lshr i64 %3202, 57
  %3224 = and i64 %3223, 1
  %3225 = xor i64 %3221, %3187
  %3226 = xor i64 %3221, %3224
  %3227 = add nuw nsw i64 %3225, %3226
  %3228 = icmp eq i64 %3227, 2
  %3229 = zext i1 %3228 to i8
  store i8 %3229, i8* %17, align 1
  %3230 = add i64 %3197, -20
  %3231 = add i64 %3129, 41
  store i64 %3231, i64* %3, align 8
  %3232 = inttoptr i64 %3230 to i32*
  %3233 = load i32, i32* %3232, align 4
  %3234 = sext i32 %3233 to i64
  store i64 %3234, i64* %RDX.i658, align 8
  %3235 = shl nsw i64 %3234, 2
  %3236 = add i64 %3204, 32
  %3237 = add i64 %3236, %3235
  %3238 = load i32, i32* %ECX.i4446, align 4
  %3239 = add i64 %3129, 45
  store i64 %3239, i64* %3, align 8
  %3240 = inttoptr i64 %3237 to i32*
  store i32 %3238, i32* %3240, align 4
  %3241 = load i64, i64* %RBP.i, align 8
  %3242 = add i64 %3241, -1124
  %3243 = load i64, i64* %3, align 8
  %3244 = add i64 %3243, 6
  store i64 %3244, i64* %3, align 8
  %3245 = inttoptr i64 %3242 to i32*
  %3246 = load i32, i32* %3245, align 4
  %3247 = shl i32 %3246, 1
  %3248 = icmp slt i32 %3246, 0
  %3249 = icmp slt i32 %3247, 0
  %3250 = xor i1 %3248, %3249
  %3251 = zext i32 %3247 to i64
  store i64 %3251, i64* %RCX.i4476, align 8
  %.lobit218 = lshr i32 %3246, 31
  %3252 = trunc i32 %.lobit218 to i8
  store i8 %3252, i8* %12, align 1
  %3253 = and i32 %3247, 254
  %3254 = tail call i32 @llvm.ctpop.i32(i32 %3253)
  %3255 = trunc i32 %3254 to i8
  %3256 = and i8 %3255, 1
  %3257 = xor i8 %3256, 1
  store i8 %3257, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %3258 = icmp eq i32 %3247, 0
  %3259 = zext i1 %3258 to i8
  store i8 %3259, i8* %15, align 1
  %3260 = lshr i32 %3246, 30
  %3261 = trunc i32 %3260 to i8
  %3262 = and i8 %3261, 1
  store i8 %3262, i8* %16, align 1
  %3263 = zext i1 %3250 to i8
  store i8 %3263, i8* %17, align 1
  %3264 = add i64 %3241, -1128
  %3265 = add i64 %3243, 14
  store i64 %3265, i64* %3, align 8
  %3266 = inttoptr i64 %3264 to i32*
  %3267 = load i32, i32* %3266, align 4
  %3268 = add i32 %3267, %3247
  %3269 = zext i32 %3268 to i64
  store i64 %3269, i64* %RCX.i4476, align 8
  %3270 = icmp ult i32 %3268, %3247
  %3271 = icmp ult i32 %3268, %3267
  %3272 = or i1 %3270, %3271
  %3273 = zext i1 %3272 to i8
  store i8 %3273, i8* %12, align 1
  %3274 = and i32 %3268, 255
  %3275 = tail call i32 @llvm.ctpop.i32(i32 %3274)
  %3276 = trunc i32 %3275 to i8
  %3277 = and i8 %3276, 1
  %3278 = xor i8 %3277, 1
  store i8 %3278, i8* %13, align 1
  %3279 = xor i32 %3267, %3247
  %3280 = xor i32 %3279, %3268
  %3281 = lshr i32 %3280, 4
  %3282 = trunc i32 %3281 to i8
  %3283 = and i8 %3282, 1
  store i8 %3283, i8* %14, align 1
  %3284 = icmp eq i32 %3268, 0
  %3285 = zext i1 %3284 to i8
  store i8 %3285, i8* %15, align 1
  %3286 = lshr i32 %3268, 31
  %3287 = trunc i32 %3286 to i8
  store i8 %3287, i8* %16, align 1
  %3288 = lshr i32 %3246, 30
  %3289 = and i32 %3288, 1
  %3290 = lshr i32 %3267, 31
  %3291 = xor i32 %3286, %3289
  %3292 = xor i32 %3286, %3290
  %3293 = add nuw nsw i32 %3291, %3292
  %3294 = icmp eq i32 %3293, 2
  %3295 = zext i1 %3294 to i8
  store i8 %3295, i8* %17, align 1
  %3296 = add i64 %3241, -8
  %3297 = add i64 %3243, 18
  store i64 %3297, i64* %3, align 8
  %3298 = inttoptr i64 %3296 to i32*
  %3299 = load i32, i32* %3298, align 4
  %3300 = sext i32 %3299 to i64
  %3301 = shl nsw i64 %3300, 8
  store i64 %3301, i64* %RDX.i658, align 8
  %3302 = load i64, i64* %RAX.i552, align 8
  %3303 = add i64 %3301, %3302
  store i64 %3303, i64* %RSI.i757, align 8
  %3304 = icmp ult i64 %3303, %3302
  %3305 = icmp ult i64 %3303, %3301
  %3306 = or i1 %3304, %3305
  %3307 = zext i1 %3306 to i8
  store i8 %3307, i8* %12, align 1
  %3308 = trunc i64 %3303 to i32
  %3309 = and i32 %3308, 255
  %3310 = tail call i32 @llvm.ctpop.i32(i32 %3309)
  %3311 = trunc i32 %3310 to i8
  %3312 = and i8 %3311, 1
  %3313 = xor i8 %3312, 1
  store i8 %3313, i8* %13, align 1
  %3314 = xor i64 %3302, %3303
  %3315 = lshr i64 %3314, 4
  %3316 = trunc i64 %3315 to i8
  %3317 = and i8 %3316, 1
  store i8 %3317, i8* %14, align 1
  %3318 = icmp eq i64 %3303, 0
  %3319 = zext i1 %3318 to i8
  store i8 %3319, i8* %15, align 1
  %3320 = lshr i64 %3303, 63
  %3321 = trunc i64 %3320 to i8
  store i8 %3321, i8* %16, align 1
  %3322 = lshr i64 %3302, 63
  %3323 = lshr i64 %3300, 55
  %3324 = and i64 %3323, 1
  %3325 = xor i64 %3320, %3322
  %3326 = xor i64 %3320, %3324
  %3327 = add nuw nsw i64 %3325, %3326
  %3328 = icmp eq i64 %3327, 2
  %3329 = zext i1 %3328 to i8
  store i8 %3329, i8* %17, align 1
  %3330 = load i64, i64* %RBP.i, align 8
  %3331 = add i64 %3330, -16
  %3332 = add i64 %3243, 32
  store i64 %3332, i64* %3, align 8
  %3333 = inttoptr i64 %3331 to i32*
  %3334 = load i32, i32* %3333, align 4
  %3335 = sext i32 %3334 to i64
  %3336 = shl nsw i64 %3335, 6
  store i64 %3336, i64* %RDX.i658, align 8
  %3337 = add i64 %3336, %3303
  store i64 %3337, i64* %RSI.i757, align 8
  %3338 = icmp ult i64 %3337, %3303
  %3339 = icmp ult i64 %3337, %3336
  %3340 = or i1 %3338, %3339
  %3341 = zext i1 %3340 to i8
  store i8 %3341, i8* %12, align 1
  %3342 = trunc i64 %3337 to i32
  %3343 = and i32 %3342, 255
  %3344 = tail call i32 @llvm.ctpop.i32(i32 %3343)
  %3345 = trunc i32 %3344 to i8
  %3346 = and i8 %3345, 1
  %3347 = xor i8 %3346, 1
  store i8 %3347, i8* %13, align 1
  %3348 = xor i64 %3303, %3337
  %3349 = lshr i64 %3348, 4
  %3350 = trunc i64 %3349 to i8
  %3351 = and i8 %3350, 1
  store i8 %3351, i8* %14, align 1
  %3352 = icmp eq i64 %3337, 0
  %3353 = zext i1 %3352 to i8
  store i8 %3353, i8* %15, align 1
  %3354 = lshr i64 %3337, 63
  %3355 = trunc i64 %3354 to i8
  store i8 %3355, i8* %16, align 1
  %3356 = lshr i64 %3335, 57
  %3357 = and i64 %3356, 1
  %3358 = xor i64 %3354, %3320
  %3359 = xor i64 %3354, %3357
  %3360 = add nuw nsw i64 %3358, %3359
  %3361 = icmp eq i64 %3360, 2
  %3362 = zext i1 %3361 to i8
  store i8 %3362, i8* %17, align 1
  %3363 = add i64 %3330, -20
  %3364 = add i64 %3243, 43
  store i64 %3364, i64* %3, align 8
  %3365 = inttoptr i64 %3363 to i32*
  %3366 = load i32, i32* %3365, align 4
  %3367 = sext i32 %3366 to i64
  store i64 %3367, i64* %RDX.i658, align 8
  %3368 = shl nsw i64 %3367, 2
  %3369 = add i64 %3337, 16
  %3370 = add i64 %3369, %3368
  %3371 = load i32, i32* %ECX.i4446, align 4
  %3372 = add i64 %3243, 47
  store i64 %3372, i64* %3, align 8
  %3373 = inttoptr i64 %3370 to i32*
  store i32 %3371, i32* %3373, align 4
  %3374 = load i64, i64* %RBP.i, align 8
  %3375 = add i64 %3374, -1124
  %3376 = load i64, i64* %3, align 8
  %3377 = add i64 %3376, 6
  store i64 %3377, i64* %3, align 8
  %3378 = inttoptr i64 %3375 to i32*
  %3379 = load i32, i32* %3378, align 4
  %3380 = zext i32 %3379 to i64
  store i64 %3380, i64* %RCX.i4476, align 8
  %3381 = add i64 %3374, -1128
  %3382 = add i64 %3376, 12
  store i64 %3382, i64* %3, align 8
  %3383 = inttoptr i64 %3381 to i32*
  %3384 = load i32, i32* %3383, align 4
  %3385 = shl i32 %3384, 1
  %3386 = zext i32 %3385 to i64
  store i64 %3386, i64* %RDI.i4259, align 8
  %3387 = sub i32 %3379, %3385
  %3388 = zext i32 %3387 to i64
  store i64 %3388, i64* %RCX.i4476, align 8
  %3389 = icmp ult i32 %3379, %3385
  %3390 = zext i1 %3389 to i8
  store i8 %3390, i8* %12, align 1
  %3391 = and i32 %3387, 255
  %3392 = tail call i32 @llvm.ctpop.i32(i32 %3391)
  %3393 = trunc i32 %3392 to i8
  %3394 = and i8 %3393, 1
  %3395 = xor i8 %3394, 1
  store i8 %3395, i8* %13, align 1
  %3396 = xor i32 %3385, %3379
  %3397 = xor i32 %3396, %3387
  %3398 = lshr i32 %3397, 4
  %3399 = trunc i32 %3398 to i8
  %3400 = and i8 %3399, 1
  store i8 %3400, i8* %14, align 1
  %3401 = icmp eq i32 %3387, 0
  %3402 = zext i1 %3401 to i8
  store i8 %3402, i8* %15, align 1
  %3403 = lshr i32 %3387, 31
  %3404 = trunc i32 %3403 to i8
  store i8 %3404, i8* %16, align 1
  %3405 = lshr i32 %3379, 31
  %3406 = lshr i32 %3384, 30
  %3407 = and i32 %3406, 1
  %3408 = xor i32 %3407, %3405
  %3409 = xor i32 %3403, %3405
  %3410 = add nuw nsw i32 %3409, %3408
  %3411 = icmp eq i32 %3410, 2
  %3412 = zext i1 %3411 to i8
  store i8 %3412, i8* %17, align 1
  %3413 = add i64 %3374, -8
  %3414 = add i64 %3376, 20
  store i64 %3414, i64* %3, align 8
  %3415 = inttoptr i64 %3413 to i32*
  %3416 = load i32, i32* %3415, align 4
  %3417 = sext i32 %3416 to i64
  %3418 = shl nsw i64 %3417, 8
  store i64 %3418, i64* %RDX.i658, align 8
  %3419 = load i64, i64* %RAX.i552, align 8
  %3420 = add i64 %3418, %3419
  store i64 %3420, i64* %RAX.i552, align 8
  %3421 = icmp ult i64 %3420, %3419
  %3422 = icmp ult i64 %3420, %3418
  %3423 = or i1 %3421, %3422
  %3424 = zext i1 %3423 to i8
  store i8 %3424, i8* %12, align 1
  %3425 = trunc i64 %3420 to i32
  %3426 = and i32 %3425, 255
  %3427 = tail call i32 @llvm.ctpop.i32(i32 %3426)
  %3428 = trunc i32 %3427 to i8
  %3429 = and i8 %3428, 1
  %3430 = xor i8 %3429, 1
  store i8 %3430, i8* %13, align 1
  %3431 = xor i64 %3419, %3420
  %3432 = lshr i64 %3431, 4
  %3433 = trunc i64 %3432 to i8
  %3434 = and i8 %3433, 1
  store i8 %3434, i8* %14, align 1
  %3435 = icmp eq i64 %3420, 0
  %3436 = zext i1 %3435 to i8
  store i8 %3436, i8* %15, align 1
  %3437 = lshr i64 %3420, 63
  %3438 = trunc i64 %3437 to i8
  store i8 %3438, i8* %16, align 1
  %3439 = lshr i64 %3419, 63
  %3440 = lshr i64 %3417, 55
  %3441 = and i64 %3440, 1
  %3442 = xor i64 %3437, %3439
  %3443 = xor i64 %3437, %3441
  %3444 = add nuw nsw i64 %3442, %3443
  %3445 = icmp eq i64 %3444, 2
  %3446 = zext i1 %3445 to i8
  store i8 %3446, i8* %17, align 1
  %3447 = load i64, i64* %RBP.i, align 8
  %3448 = add i64 %3447, -16
  %3449 = add i64 %3376, 31
  store i64 %3449, i64* %3, align 8
  %3450 = inttoptr i64 %3448 to i32*
  %3451 = load i32, i32* %3450, align 4
  %3452 = sext i32 %3451 to i64
  %3453 = shl nsw i64 %3452, 6
  store i64 %3453, i64* %RDX.i658, align 8
  %3454 = add i64 %3453, %3420
  store i64 %3454, i64* %RAX.i552, align 8
  %3455 = icmp ult i64 %3454, %3420
  %3456 = icmp ult i64 %3454, %3453
  %3457 = or i1 %3455, %3456
  %3458 = zext i1 %3457 to i8
  store i8 %3458, i8* %12, align 1
  %3459 = trunc i64 %3454 to i32
  %3460 = and i32 %3459, 255
  %3461 = tail call i32 @llvm.ctpop.i32(i32 %3460)
  %3462 = trunc i32 %3461 to i8
  %3463 = and i8 %3462, 1
  %3464 = xor i8 %3463, 1
  store i8 %3464, i8* %13, align 1
  %3465 = xor i64 %3420, %3454
  %3466 = lshr i64 %3465, 4
  %3467 = trunc i64 %3466 to i8
  %3468 = and i8 %3467, 1
  store i8 %3468, i8* %14, align 1
  %3469 = icmp eq i64 %3454, 0
  %3470 = zext i1 %3469 to i8
  store i8 %3470, i8* %15, align 1
  %3471 = lshr i64 %3454, 63
  %3472 = trunc i64 %3471 to i8
  store i8 %3472, i8* %16, align 1
  %3473 = lshr i64 %3452, 57
  %3474 = and i64 %3473, 1
  %3475 = xor i64 %3471, %3437
  %3476 = xor i64 %3471, %3474
  %3477 = add nuw nsw i64 %3475, %3476
  %3478 = icmp eq i64 %3477, 2
  %3479 = zext i1 %3478 to i8
  store i8 %3479, i8* %17, align 1
  %3480 = add i64 %3447, -20
  %3481 = add i64 %3376, 42
  store i64 %3481, i64* %3, align 8
  %3482 = inttoptr i64 %3480 to i32*
  %3483 = load i32, i32* %3482, align 4
  %3484 = sext i32 %3483 to i64
  store i64 %3484, i64* %RDX.i658, align 8
  %3485 = shl nsw i64 %3484, 2
  %3486 = add i64 %3454, 48
  %3487 = add i64 %3486, %3485
  %3488 = load i32, i32* %ECX.i4446, align 4
  %3489 = add i64 %3376, 46
  store i64 %3489, i64* %3, align 8
  %3490 = inttoptr i64 %3487 to i32*
  store i32 %3488, i32* %3490, align 4
  %3491 = load i64, i64* %RBP.i, align 8
  %3492 = add i64 %3491, -8
  %3493 = load i64, i64* %3, align 8
  %3494 = add i64 %3493, 3
  store i64 %3494, i64* %3, align 8
  %3495 = inttoptr i64 %3492 to i32*
  %3496 = load i32, i32* %3495, align 4
  %3497 = add i32 %3496, 1
  %3498 = zext i32 %3497 to i64
  store i64 %3498, i64* %RAX.i552, align 8
  %3499 = icmp eq i32 %3496, -1
  %3500 = icmp eq i32 %3497, 0
  %3501 = or i1 %3499, %3500
  %3502 = zext i1 %3501 to i8
  store i8 %3502, i8* %12, align 1
  %3503 = and i32 %3497, 255
  %3504 = tail call i32 @llvm.ctpop.i32(i32 %3503)
  %3505 = trunc i32 %3504 to i8
  %3506 = and i8 %3505, 1
  %3507 = xor i8 %3506, 1
  store i8 %3507, i8* %13, align 1
  %3508 = xor i32 %3497, %3496
  %3509 = lshr i32 %3508, 4
  %3510 = trunc i32 %3509 to i8
  %3511 = and i8 %3510, 1
  store i8 %3511, i8* %14, align 1
  %3512 = zext i1 %3500 to i8
  store i8 %3512, i8* %15, align 1
  %3513 = lshr i32 %3497, 31
  %3514 = trunc i32 %3513 to i8
  store i8 %3514, i8* %16, align 1
  %3515 = lshr i32 %3496, 31
  %3516 = xor i32 %3513, %3515
  %3517 = add nuw nsw i32 %3516, %3513
  %3518 = icmp eq i32 %3517, 2
  %3519 = zext i1 %3518 to i8
  store i8 %3519, i8* %17, align 1
  %3520 = add i64 %3493, 9
  store i64 %3520, i64* %3, align 8
  store i32 %3497, i32* %3495, align 4
  %3521 = load i64, i64* %3, align 8
  %3522 = add i64 %3521, -450
  store i64 %3522, i64* %3, align 8
  br label %block_.L_4048d7

block_.L_404a9e:                                  ; preds = %block_.L_4048d7
  %3523 = add i64 %2369, -16
  %3524 = add i64 %2397, 8
  store i64 %3524, i64* %3, align 8
  %3525 = inttoptr i64 %3523 to i32*
  %3526 = load i32, i32* %3525, align 4
  %3527 = add i32 %3526, 1
  %3528 = zext i32 %3527 to i64
  store i64 %3528, i64* %RAX.i552, align 8
  %3529 = icmp eq i32 %3526, -1
  %3530 = icmp eq i32 %3527, 0
  %3531 = or i1 %3529, %3530
  %3532 = zext i1 %3531 to i8
  store i8 %3532, i8* %12, align 1
  %3533 = and i32 %3527, 255
  %3534 = tail call i32 @llvm.ctpop.i32(i32 %3533)
  %3535 = trunc i32 %3534 to i8
  %3536 = and i8 %3535, 1
  %3537 = xor i8 %3536, 1
  store i8 %3537, i8* %13, align 1
  %3538 = xor i32 %3527, %3526
  %3539 = lshr i32 %3538, 4
  %3540 = trunc i32 %3539 to i8
  %3541 = and i8 %3540, 1
  store i8 %3541, i8* %14, align 1
  %3542 = zext i1 %3530 to i8
  store i8 %3542, i8* %15, align 1
  %3543 = lshr i32 %3527, 31
  %3544 = trunc i32 %3543 to i8
  store i8 %3544, i8* %16, align 1
  %3545 = lshr i32 %3526, 31
  %3546 = xor i32 %3543, %3545
  %3547 = add nuw nsw i32 %3546, %3543
  %3548 = icmp eq i32 %3547, 2
  %3549 = zext i1 %3548 to i8
  store i8 %3549, i8* %17, align 1
  %3550 = add i64 %2397, 14
  store i64 %3550, i64* %3, align 8
  store i32 %3527, i32* %3525, align 4
  %3551 = load i64, i64* %3, align 8
  %3552 = add i64 %3551, -965
  store i64 %3552, i64* %3, align 8
  br label %block_.L_4046e7

block_.L_404ab1:                                  ; preds = %block_.L_4046e7
  %3553 = add i64 %1188, -20
  %3554 = add i64 %1216, 8
  store i64 %3554, i64* %3, align 8
  %3555 = inttoptr i64 %3553 to i32*
  %3556 = load i32, i32* %3555, align 4
  %3557 = add i32 %3556, 1
  %3558 = zext i32 %3557 to i64
  store i64 %3558, i64* %RAX.i552, align 8
  %3559 = icmp eq i32 %3556, -1
  %3560 = icmp eq i32 %3557, 0
  %3561 = or i1 %3559, %3560
  %3562 = zext i1 %3561 to i8
  store i8 %3562, i8* %12, align 1
  %3563 = and i32 %3557, 255
  %3564 = tail call i32 @llvm.ctpop.i32(i32 %3563)
  %3565 = trunc i32 %3564 to i8
  %3566 = and i8 %3565, 1
  %3567 = xor i8 %3566, 1
  store i8 %3567, i8* %13, align 1
  %3568 = xor i32 %3557, %3556
  %3569 = lshr i32 %3568, 4
  %3570 = trunc i32 %3569 to i8
  %3571 = and i8 %3570, 1
  store i8 %3571, i8* %14, align 1
  %3572 = zext i1 %3560 to i8
  store i8 %3572, i8* %15, align 1
  %3573 = lshr i32 %3557, 31
  %3574 = trunc i32 %3573 to i8
  store i8 %3574, i8* %16, align 1
  %3575 = lshr i32 %3556, 31
  %3576 = xor i32 %3573, %3575
  %3577 = add nuw nsw i32 %3576, %3573
  %3578 = icmp eq i32 %3577, 2
  %3579 = zext i1 %3578 to i8
  store i8 %3579, i8* %17, align 1
  %3580 = add i64 %1216, 14
  store i64 %3580, i64* %3, align 8
  store i32 %3557, i32* %3555, align 4
  %3581 = load i64, i64* %3, align 8
  %3582 = add i64 %3581, -1048
  store i64 %3582, i64* %3, align 8
  br label %block_.L_4046a7

block_.L_404acb:                                  ; preds = %block_.L_404b26, %block_4046db
  %3583 = phi i64 [ %3794, %block_.L_404b26 ], [ %.pre309, %block_4046db ]
  %3584 = load i64, i64* %RBP.i, align 8
  %3585 = add i64 %3584, -12
  %3586 = add i64 %3583, 4
  store i64 %3586, i64* %3, align 8
  %3587 = inttoptr i64 %3585 to i32*
  %3588 = load i32, i32* %3587, align 4
  %3589 = add i32 %3588, -4
  %3590 = icmp ult i32 %3588, 4
  %3591 = zext i1 %3590 to i8
  store i8 %3591, i8* %12, align 1
  %3592 = and i32 %3589, 255
  %3593 = tail call i32 @llvm.ctpop.i32(i32 %3592)
  %3594 = trunc i32 %3593 to i8
  %3595 = and i8 %3594, 1
  %3596 = xor i8 %3595, 1
  store i8 %3596, i8* %13, align 1
  %3597 = xor i32 %3589, %3588
  %3598 = lshr i32 %3597, 4
  %3599 = trunc i32 %3598 to i8
  %3600 = and i8 %3599, 1
  store i8 %3600, i8* %14, align 1
  %3601 = icmp eq i32 %3589, 0
  %3602 = zext i1 %3601 to i8
  store i8 %3602, i8* %15, align 1
  %3603 = lshr i32 %3589, 31
  %3604 = trunc i32 %3603 to i8
  store i8 %3604, i8* %16, align 1
  %3605 = lshr i32 %3588, 31
  %3606 = xor i32 %3603, %3605
  %3607 = add nuw nsw i32 %3606, %3605
  %3608 = icmp eq i32 %3607, 2
  %3609 = zext i1 %3608 to i8
  store i8 %3609, i8* %17, align 1
  %3610 = icmp ne i8 %3604, 0
  %3611 = xor i1 %3610, %3608
  %.v476 = select i1 %3611, i64 10, i64 110
  %3612 = add i64 %3583, %.v476
  store i64 %3612, i64* %3, align 8
  br i1 %3611, label %block_404ad5, label %block_.L_404b39

block_404ad5:                                     ; preds = %block_.L_404acb
  %3613 = add i64 %3584, -8
  %3614 = add i64 %3612, 7
  store i64 %3614, i64* %3, align 8
  %3615 = inttoptr i64 %3613 to i32*
  store i32 0, i32* %3615, align 4
  %.pre420 = load i64, i64* %3, align 8
  br label %block_.L_404adc

block_.L_404adc:                                  ; preds = %block_404ae6, %block_404ad5
  %3616 = phi i64 [ %3764, %block_404ae6 ], [ %.pre420, %block_404ad5 ]
  %3617 = load i64, i64* %RBP.i, align 8
  %3618 = add i64 %3617, -8
  %3619 = add i64 %3616, 4
  store i64 %3619, i64* %3, align 8
  %3620 = inttoptr i64 %3618 to i32*
  %3621 = load i32, i32* %3620, align 4
  %3622 = add i32 %3621, -4
  %3623 = icmp ult i32 %3621, 4
  %3624 = zext i1 %3623 to i8
  store i8 %3624, i8* %12, align 1
  %3625 = and i32 %3622, 255
  %3626 = tail call i32 @llvm.ctpop.i32(i32 %3625)
  %3627 = trunc i32 %3626 to i8
  %3628 = and i8 %3627, 1
  %3629 = xor i8 %3628, 1
  store i8 %3629, i8* %13, align 1
  %3630 = xor i32 %3622, %3621
  %3631 = lshr i32 %3630, 4
  %3632 = trunc i32 %3631 to i8
  %3633 = and i8 %3632, 1
  store i8 %3633, i8* %14, align 1
  %3634 = icmp eq i32 %3622, 0
  %3635 = zext i1 %3634 to i8
  store i8 %3635, i8* %15, align 1
  %3636 = lshr i32 %3622, 31
  %3637 = trunc i32 %3636 to i8
  store i8 %3637, i8* %16, align 1
  %3638 = lshr i32 %3621, 31
  %3639 = xor i32 %3636, %3638
  %3640 = add nuw nsw i32 %3639, %3638
  %3641 = icmp eq i32 %3640, 2
  %3642 = zext i1 %3641 to i8
  store i8 %3642, i8* %17, align 1
  %3643 = icmp ne i8 %3637, 0
  %3644 = xor i1 %3643, %3641
  %.v467 = select i1 %3644, i64 10, i64 74
  %3645 = add i64 %3616, %.v467
  store i64 %3645, i64* %3, align 8
  br i1 %3644, label %block_404ae6, label %block_.L_404b26

block_404ae6:                                     ; preds = %block_.L_404adc
  %3646 = add i64 %3617, -1120
  store i64 %3646, i64* %RAX.i552, align 8
  %3647 = add i64 %3617, -2176
  store i64 %3647, i64* %RCX.i4476, align 8
  %3648 = add i64 %3645, 18
  store i64 %3648, i64* %3, align 8
  %3649 = load i32, i32* %3620, align 4
  %3650 = sext i32 %3649 to i64
  %3651 = shl nsw i64 %3650, 6
  store i64 %3651, i64* %RDX.i658, align 8
  %3652 = add i64 %3651, %3647
  store i64 %3652, i64* %RCX.i4476, align 8
  %3653 = icmp ult i64 %3652, %3647
  %3654 = icmp ult i64 %3652, %3651
  %3655 = or i1 %3653, %3654
  %3656 = zext i1 %3655 to i8
  store i8 %3656, i8* %12, align 1
  %3657 = trunc i64 %3652 to i32
  %3658 = and i32 %3657, 255
  %3659 = tail call i32 @llvm.ctpop.i32(i32 %3658)
  %3660 = trunc i32 %3659 to i8
  %3661 = and i8 %3660, 1
  %3662 = xor i8 %3661, 1
  store i8 %3662, i8* %13, align 1
  %3663 = xor i64 %3647, %3652
  %3664 = lshr i64 %3663, 4
  %3665 = trunc i64 %3664 to i8
  %3666 = and i8 %3665, 1
  store i8 %3666, i8* %14, align 1
  %3667 = icmp eq i64 %3652, 0
  %3668 = zext i1 %3667 to i8
  store i8 %3668, i8* %15, align 1
  %3669 = lshr i64 %3652, 63
  %3670 = trunc i64 %3669 to i8
  store i8 %3670, i8* %16, align 1
  %3671 = lshr i64 %3647, 63
  %3672 = lshr i64 %3650, 57
  %3673 = and i64 %3672, 1
  %3674 = xor i64 %3669, %3671
  %3675 = xor i64 %3669, %3673
  %3676 = add nuw nsw i64 %3674, %3675
  %3677 = icmp eq i64 %3676, 2
  %3678 = zext i1 %3677 to i8
  store i8 %3678, i8* %17, align 1
  %3679 = add i64 %3617, -12
  %3680 = add i64 %3645, 29
  store i64 %3680, i64* %3, align 8
  %3681 = inttoptr i64 %3679 to i32*
  %3682 = load i32, i32* %3681, align 4
  %3683 = sext i32 %3682 to i64
  store i64 %3683, i64* %RDX.i658, align 8
  %3684 = shl nsw i64 %3683, 2
  %3685 = add i64 %3684, %3652
  %3686 = add i64 %3645, 32
  store i64 %3686, i64* %3, align 8
  %3687 = inttoptr i64 %3685 to i32*
  %3688 = load i32, i32* %3687, align 4
  %3689 = zext i32 %3688 to i64
  store i64 %3689, i64* %RSI.i757, align 8
  %3690 = add i64 %3645, 36
  store i64 %3690, i64* %3, align 8
  %3691 = load i32, i32* %3620, align 4
  %3692 = sext i32 %3691 to i64
  %3693 = shl nsw i64 %3692, 4
  store i64 %3693, i64* %RCX.i4476, align 8
  %3694 = load i64, i64* %RAX.i552, align 8
  %3695 = add i64 %3693, %3694
  store i64 %3695, i64* %RAX.i552, align 8
  %3696 = icmp ult i64 %3695, %3694
  %3697 = icmp ult i64 %3695, %3693
  %3698 = or i1 %3696, %3697
  %3699 = zext i1 %3698 to i8
  store i8 %3699, i8* %12, align 1
  %3700 = trunc i64 %3695 to i32
  %3701 = and i32 %3700, 255
  %3702 = tail call i32 @llvm.ctpop.i32(i32 %3701)
  %3703 = trunc i32 %3702 to i8
  %3704 = and i8 %3703, 1
  %3705 = xor i8 %3704, 1
  store i8 %3705, i8* %13, align 1
  %3706 = xor i64 %3693, %3694
  %3707 = xor i64 %3706, %3695
  %3708 = lshr i64 %3707, 4
  %3709 = trunc i64 %3708 to i8
  %3710 = and i8 %3709, 1
  store i8 %3710, i8* %14, align 1
  %3711 = icmp eq i64 %3695, 0
  %3712 = zext i1 %3711 to i8
  store i8 %3712, i8* %15, align 1
  %3713 = lshr i64 %3695, 63
  %3714 = trunc i64 %3713 to i8
  store i8 %3714, i8* %16, align 1
  %3715 = lshr i64 %3694, 63
  %3716 = lshr i64 %3692, 59
  %3717 = and i64 %3716, 1
  %3718 = xor i64 %3713, %3715
  %3719 = xor i64 %3713, %3717
  %3720 = add nuw nsw i64 %3718, %3719
  %3721 = icmp eq i64 %3720, 2
  %3722 = zext i1 %3721 to i8
  store i8 %3722, i8* %17, align 1
  %3723 = load i64, i64* %RBP.i, align 8
  %3724 = add i64 %3723, -12
  %3725 = add i64 %3645, 47
  store i64 %3725, i64* %3, align 8
  %3726 = inttoptr i64 %3724 to i32*
  %3727 = load i32, i32* %3726, align 4
  %3728 = sext i32 %3727 to i64
  store i64 %3728, i64* %RCX.i4476, align 8
  %3729 = shl nsw i64 %3728, 2
  %3730 = add i64 %3729, %3695
  %3731 = add i64 %3645, 50
  store i64 %3731, i64* %3, align 8
  %3732 = inttoptr i64 %3730 to i32*
  store i32 %3688, i32* %3732, align 4
  %3733 = load i64, i64* %RBP.i, align 8
  %3734 = add i64 %3733, -8
  %3735 = load i64, i64* %3, align 8
  %3736 = add i64 %3735, 3
  store i64 %3736, i64* %3, align 8
  %3737 = inttoptr i64 %3734 to i32*
  %3738 = load i32, i32* %3737, align 4
  %3739 = add i32 %3738, 1
  %3740 = zext i32 %3739 to i64
  store i64 %3740, i64* %RAX.i552, align 8
  %3741 = icmp eq i32 %3738, -1
  %3742 = icmp eq i32 %3739, 0
  %3743 = or i1 %3741, %3742
  %3744 = zext i1 %3743 to i8
  store i8 %3744, i8* %12, align 1
  %3745 = and i32 %3739, 255
  %3746 = tail call i32 @llvm.ctpop.i32(i32 %3745)
  %3747 = trunc i32 %3746 to i8
  %3748 = and i8 %3747, 1
  %3749 = xor i8 %3748, 1
  store i8 %3749, i8* %13, align 1
  %3750 = xor i32 %3739, %3738
  %3751 = lshr i32 %3750, 4
  %3752 = trunc i32 %3751 to i8
  %3753 = and i8 %3752, 1
  store i8 %3753, i8* %14, align 1
  %3754 = zext i1 %3742 to i8
  store i8 %3754, i8* %15, align 1
  %3755 = lshr i32 %3739, 31
  %3756 = trunc i32 %3755 to i8
  store i8 %3756, i8* %16, align 1
  %3757 = lshr i32 %3738, 31
  %3758 = xor i32 %3755, %3757
  %3759 = add nuw nsw i32 %3758, %3755
  %3760 = icmp eq i32 %3759, 2
  %3761 = zext i1 %3760 to i8
  store i8 %3761, i8* %17, align 1
  %3762 = add i64 %3735, 9
  store i64 %3762, i64* %3, align 8
  store i32 %3739, i32* %3737, align 4
  %3763 = load i64, i64* %3, align 8
  %3764 = add i64 %3763, -69
  store i64 %3764, i64* %3, align 8
  br label %block_.L_404adc

block_.L_404b26:                                  ; preds = %block_.L_404adc
  %3765 = add i64 %3617, -12
  %3766 = add i64 %3645, 8
  store i64 %3766, i64* %3, align 8
  %3767 = inttoptr i64 %3765 to i32*
  %3768 = load i32, i32* %3767, align 4
  %3769 = add i32 %3768, 1
  %3770 = zext i32 %3769 to i64
  store i64 %3770, i64* %RAX.i552, align 8
  %3771 = icmp eq i32 %3768, -1
  %3772 = icmp eq i32 %3769, 0
  %3773 = or i1 %3771, %3772
  %3774 = zext i1 %3773 to i8
  store i8 %3774, i8* %12, align 1
  %3775 = and i32 %3769, 255
  %3776 = tail call i32 @llvm.ctpop.i32(i32 %3775)
  %3777 = trunc i32 %3776 to i8
  %3778 = and i8 %3777, 1
  %3779 = xor i8 %3778, 1
  store i8 %3779, i8* %13, align 1
  %3780 = xor i32 %3769, %3768
  %3781 = lshr i32 %3780, 4
  %3782 = trunc i32 %3781 to i8
  %3783 = and i8 %3782, 1
  store i8 %3783, i8* %14, align 1
  %3784 = zext i1 %3772 to i8
  store i8 %3784, i8* %15, align 1
  %3785 = lshr i32 %3769, 31
  %3786 = trunc i32 %3785 to i8
  store i8 %3786, i8* %16, align 1
  %3787 = lshr i32 %3768, 31
  %3788 = xor i32 %3785, %3787
  %3789 = add nuw nsw i32 %3788, %3785
  %3790 = icmp eq i32 %3789, 2
  %3791 = zext i1 %3790 to i8
  store i8 %3791, i8* %17, align 1
  %3792 = add i64 %3645, 14
  store i64 %3792, i64* %3, align 8
  store i32 %3769, i32* %3767, align 4
  %3793 = load i64, i64* %3, align 8
  %3794 = add i64 %3793, -105
  store i64 %3794, i64* %3, align 8
  br label %block_.L_404acb

block_.L_404b39:                                  ; preds = %block_.L_404acb
  %3795 = add i64 %3612, 7
  store i64 %3795, i64* %3, align 8
  store i32 0, i32* %3587, align 4
  %.pre310 = load i64, i64* %3, align 8
  br label %block_.L_404b40

block_.L_404b40:                                  ; preds = %block_.L_404c11, %block_.L_404b39
  %3796 = phi i64 [ %4433, %block_.L_404c11 ], [ %.pre310, %block_.L_404b39 ]
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %CL.i, align 1
  %3797 = load i64, i64* %RBP.i, align 8
  %3798 = add i64 %3797, -12
  %3799 = add i64 %3796, 8
  store i64 %3799, i64* %3, align 8
  %3800 = inttoptr i64 %3798 to i32*
  %3801 = load i32, i32* %3800, align 4
  %3802 = add i32 %3801, -4
  %3803 = icmp ult i32 %3801, 4
  %3804 = zext i1 %3803 to i8
  store i8 %3804, i8* %12, align 1
  %3805 = and i32 %3802, 255
  %3806 = tail call i32 @llvm.ctpop.i32(i32 %3805)
  %3807 = trunc i32 %3806 to i8
  %3808 = and i8 %3807, 1
  %3809 = xor i8 %3808, 1
  store i8 %3809, i8* %13, align 1
  %3810 = xor i32 %3802, %3801
  %3811 = lshr i32 %3810, 4
  %3812 = trunc i32 %3811 to i8
  %3813 = and i8 %3812, 1
  store i8 %3813, i8* %14, align 1
  %3814 = icmp eq i32 %3802, 0
  %3815 = zext i1 %3814 to i8
  store i8 %3815, i8* %15, align 1
  %3816 = lshr i32 %3802, 31
  %3817 = trunc i32 %3816 to i8
  store i8 %3817, i8* %16, align 1
  %3818 = lshr i32 %3801, 31
  %3819 = xor i32 %3816, %3818
  %3820 = add nuw nsw i32 %3819, %3818
  %3821 = icmp eq i32 %3820, 2
  %3822 = zext i1 %3821 to i8
  store i8 %3822, i8* %17, align 1
  %3823 = add i64 %3797, -2270
  %3824 = add i64 %3796, 14
  store i64 %3824, i64* %3, align 8
  %3825 = inttoptr i64 %3823 to i8*
  store i8 0, i8* %3825, align 1
  %3826 = load i64, i64* %3, align 8
  %3827 = add i64 %3826, 24
  %3828 = add i64 %3826, 6
  %3829 = load i8, i8* %16, align 1
  %3830 = icmp ne i8 %3829, 0
  %3831 = load i8, i8* %17, align 1
  %3832 = icmp ne i8 %3831, 0
  %3833 = xor i1 %3830, %3832
  %3834 = select i1 %3833, i64 %3828, i64 %3827
  store i64 %3834, i64* %3, align 8
  br i1 %3833, label %block_404b54, label %block_.L_404b66

block_404b54:                                     ; preds = %block_.L_404b40
  %3835 = load i64, i64* %RBP.i, align 8
  %3836 = add i64 %3835, -2260
  %3837 = add i64 %3834, 7
  store i64 %3837, i64* %3, align 8
  %3838 = inttoptr i64 %3836 to i32*
  %3839 = load i32, i32* %3838, align 4
  %3840 = icmp ne i32 %3839, 0
  %3841 = zext i1 %3840 to i64
  %3842 = xor i64 %3841, 255
  %3843 = trunc i64 %3842 to i8
  store i8 %3843, i8* %AL.i, align 1
  store i8 0, i8* %12, align 1
  %3844 = trunc i64 %3842 to i32
  %3845 = tail call i32 @llvm.ctpop.i32(i32 %3844)
  %3846 = trunc i32 %3845 to i8
  %3847 = and i8 %3846, 1
  %3848 = xor i8 %3847, 1
  store i8 %3848, i8* %13, align 1
  store i8 0, i8* %15, align 1
  store i8 1, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %3849 = add i64 %3835, -2270
  %3850 = add i64 %3834, 18
  store i64 %3850, i64* %3, align 8
  %3851 = inttoptr i64 %3849 to i8*
  store i8 %3843, i8* %3851, align 1
  %.pre311 = load i64, i64* %3, align 8
  br label %block_.L_404b66

block_.L_404b66:                                  ; preds = %block_.L_404b40, %block_404b54
  %3852 = phi i64 [ %3827, %block_.L_404b40 ], [ %.pre311, %block_404b54 ]
  %3853 = load i64, i64* %RBP.i, align 8
  %3854 = add i64 %3853, -2270
  %3855 = add i64 %3852, 6
  store i64 %3855, i64* %3, align 8
  %3856 = inttoptr i64 %3854 to i8*
  %3857 = load i8, i8* %3856, align 1
  store i8 %3857, i8* %AL.i, align 1
  %3858 = and i8 %3857, 1
  store i8 0, i8* %12, align 1
  %3859 = zext i8 %3858 to i32
  %3860 = tail call i32 @llvm.ctpop.i32(i32 %3859)
  %3861 = trunc i32 %3860 to i8
  %3862 = xor i8 %3861, 1
  store i8 %3862, i8* %13, align 1
  %3863 = xor i8 %3858, 1
  store i8 %3863, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %3864 = icmp eq i8 %3863, 0
  %.v448 = select i1 %3864, i64 19, i64 14
  %3865 = add i64 %3852, %.v448
  store i64 %3865, i64* %3, align 8
  %3866 = add i64 %3853, -8
  br i1 %3864, label %block_.L_404b79, label %block_404b74

block_404b74:                                     ; preds = %block_.L_404b66
  %3867 = add i64 %3865, 270
  store i64 %3867, i64* %3, align 8
  %3868 = inttoptr i64 %3866 to i32*
  store i32 0, i32* %3868, align 4
  %.pre312 = load i64, i64* %3, align 8
  br label %block_.L_404c82

block_.L_404b79:                                  ; preds = %block_.L_404b66
  %3869 = add i64 %3865, 7
  store i64 %3869, i64* %3, align 8
  %3870 = inttoptr i64 %3866 to i32*
  store i32 0, i32* %3870, align 4
  %.pre419 = load i64, i64* %3, align 8
  br label %block_.L_404b80

block_.L_404b80:                                  ; preds = %block_404b8a, %block_.L_404b79
  %3871 = phi i64 [ %4215, %block_404b8a ], [ %.pre419, %block_.L_404b79 ]
  %3872 = load i64, i64* %RBP.i, align 8
  %3873 = add i64 %3872, -8
  %3874 = add i64 %3871, 4
  store i64 %3874, i64* %3, align 8
  %3875 = inttoptr i64 %3873 to i32*
  %3876 = load i32, i32* %3875, align 4
  %3877 = add i32 %3876, -2
  %3878 = icmp ult i32 %3876, 2
  %3879 = zext i1 %3878 to i8
  store i8 %3879, i8* %12, align 1
  %3880 = and i32 %3877, 255
  %3881 = tail call i32 @llvm.ctpop.i32(i32 %3880)
  %3882 = trunc i32 %3881 to i8
  %3883 = and i8 %3882, 1
  %3884 = xor i8 %3883, 1
  store i8 %3884, i8* %13, align 1
  %3885 = xor i32 %3877, %3876
  %3886 = lshr i32 %3885, 4
  %3887 = trunc i32 %3886 to i8
  %3888 = and i8 %3887, 1
  store i8 %3888, i8* %14, align 1
  %3889 = icmp eq i32 %3877, 0
  %3890 = zext i1 %3889 to i8
  store i8 %3890, i8* %15, align 1
  %3891 = lshr i32 %3877, 31
  %3892 = trunc i32 %3891 to i8
  store i8 %3892, i8* %16, align 1
  %3893 = lshr i32 %3876, 31
  %3894 = xor i32 %3891, %3893
  %3895 = add nuw nsw i32 %3894, %3893
  %3896 = icmp eq i32 %3895, 2
  %3897 = zext i1 %3896 to i8
  store i8 %3897, i8* %17, align 1
  %3898 = icmp ne i8 %3892, 0
  %3899 = xor i1 %3898, %3896
  %.v506 = select i1 %3899, i64 10, i64 145
  %3900 = add i64 %3871, %.v506
  store i64 %3900, i64* %3, align 8
  br i1 %3899, label %block_404b8a, label %block_.L_404c11

block_404b8a:                                     ; preds = %block_.L_404b80
  %3901 = add i64 %3872, -1120
  store i64 %3901, i64* %RAX.i552, align 8
  store i64 3, i64* %RCX.i4476, align 8
  %3902 = add i64 %3900, 15
  store i64 %3902, i64* %3, align 8
  %3903 = load i32, i32* %3875, align 4
  %3904 = sub i32 3, %3903
  %3905 = zext i32 %3904 to i64
  store i64 %3905, i64* %RCX.i4476, align 8
  %3906 = icmp ugt i32 %3903, 3
  %3907 = zext i1 %3906 to i8
  store i8 %3907, i8* %12, align 1
  %3908 = and i32 %3904, 255
  %3909 = tail call i32 @llvm.ctpop.i32(i32 %3908)
  %3910 = trunc i32 %3909 to i8
  %3911 = and i8 %3910, 1
  %3912 = xor i8 %3911, 1
  store i8 %3912, i8* %13, align 1
  %3913 = xor i32 %3904, %3903
  %3914 = lshr i32 %3913, 4
  %3915 = trunc i32 %3914 to i8
  %3916 = and i8 %3915, 1
  store i8 %3916, i8* %14, align 1
  %3917 = icmp eq i32 %3904, 0
  %3918 = zext i1 %3917 to i8
  store i8 %3918, i8* %15, align 1
  %3919 = lshr i32 %3904, 31
  %3920 = trunc i32 %3919 to i8
  store i8 %3920, i8* %16, align 1
  %3921 = lshr i32 %3903, 31
  %3922 = add nuw nsw i32 %3919, %3921
  %3923 = icmp eq i32 %3922, 2
  %3924 = zext i1 %3923 to i8
  store i8 %3924, i8* %17, align 1
  %3925 = add i64 %3872, -24
  %3926 = add i64 %3900, 18
  store i64 %3926, i64* %3, align 8
  %3927 = inttoptr i64 %3925 to i32*
  store i32 %3904, i32* %3927, align 4
  %3928 = load i64, i64* %RBP.i, align 8
  %3929 = add i64 %3928, -8
  %3930 = load i64, i64* %3, align 8
  %3931 = add i64 %3930, 4
  store i64 %3931, i64* %3, align 8
  %3932 = inttoptr i64 %3929 to i32*
  %3933 = load i32, i32* %3932, align 4
  %3934 = sext i32 %3933 to i64
  %3935 = shl nsw i64 %3934, 4
  store i64 %3935, i64* %RDX.i658, align 8
  %3936 = load i64, i64* %RAX.i552, align 8
  %3937 = add i64 %3935, %3936
  store i64 %3937, i64* %RSI.i757, align 8
  %3938 = icmp ult i64 %3937, %3936
  %3939 = icmp ult i64 %3937, %3935
  %3940 = or i1 %3938, %3939
  %3941 = zext i1 %3940 to i8
  store i8 %3941, i8* %12, align 1
  %3942 = trunc i64 %3937 to i32
  %3943 = and i32 %3942, 255
  %3944 = tail call i32 @llvm.ctpop.i32(i32 %3943)
  %3945 = trunc i32 %3944 to i8
  %3946 = and i8 %3945, 1
  %3947 = xor i8 %3946, 1
  store i8 %3947, i8* %13, align 1
  %3948 = xor i64 %3935, %3936
  %3949 = xor i64 %3948, %3937
  %3950 = lshr i64 %3949, 4
  %3951 = trunc i64 %3950 to i8
  %3952 = and i8 %3951, 1
  store i8 %3952, i8* %14, align 1
  %3953 = icmp eq i64 %3937, 0
  %3954 = zext i1 %3953 to i8
  store i8 %3954, i8* %15, align 1
  %3955 = lshr i64 %3937, 63
  %3956 = trunc i64 %3955 to i8
  store i8 %3956, i8* %16, align 1
  %3957 = lshr i64 %3936, 63
  %3958 = lshr i64 %3934, 59
  %3959 = and i64 %3958, 1
  %3960 = xor i64 %3955, %3957
  %3961 = xor i64 %3955, %3959
  %3962 = add nuw nsw i64 %3960, %3961
  %3963 = icmp eq i64 %3962, 2
  %3964 = zext i1 %3963 to i8
  store i8 %3964, i8* %17, align 1
  %3965 = add i64 %3928, -12
  %3966 = add i64 %3930, 18
  store i64 %3966, i64* %3, align 8
  %3967 = inttoptr i64 %3965 to i32*
  %3968 = load i32, i32* %3967, align 4
  %3969 = sext i32 %3968 to i64
  store i64 %3969, i64* %RDX.i658, align 8
  %3970 = shl nsw i64 %3969, 2
  %3971 = add i64 %3970, %3937
  %3972 = add i64 %3930, 21
  store i64 %3972, i64* %3, align 8
  %3973 = inttoptr i64 %3971 to i32*
  %3974 = load i32, i32* %3973, align 4
  %3975 = zext i32 %3974 to i64
  store i64 %3975, i64* %RCX.i4476, align 8
  %3976 = add i64 %3928, -24
  %3977 = add i64 %3930, 25
  store i64 %3977, i64* %3, align 8
  %3978 = inttoptr i64 %3976 to i32*
  %3979 = load i32, i32* %3978, align 4
  %3980 = sext i32 %3979 to i64
  %3981 = shl nsw i64 %3980, 4
  store i64 %3981, i64* %RDX.i658, align 8
  %3982 = add i64 %3981, %3936
  store i64 %3982, i64* %RSI.i757, align 8
  %3983 = icmp ult i64 %3982, %3936
  %3984 = icmp ult i64 %3982, %3981
  %3985 = or i1 %3983, %3984
  %3986 = zext i1 %3985 to i8
  store i8 %3986, i8* %12, align 1
  %3987 = trunc i64 %3982 to i32
  %3988 = and i32 %3987, 255
  %3989 = tail call i32 @llvm.ctpop.i32(i32 %3988)
  %3990 = trunc i32 %3989 to i8
  %3991 = and i8 %3990, 1
  %3992 = xor i8 %3991, 1
  store i8 %3992, i8* %13, align 1
  %3993 = xor i64 %3981, %3936
  %3994 = xor i64 %3993, %3982
  %3995 = lshr i64 %3994, 4
  %3996 = trunc i64 %3995 to i8
  %3997 = and i8 %3996, 1
  store i8 %3997, i8* %14, align 1
  %3998 = icmp eq i64 %3982, 0
  %3999 = zext i1 %3998 to i8
  store i8 %3999, i8* %15, align 1
  %4000 = lshr i64 %3982, 63
  %4001 = trunc i64 %4000 to i8
  store i8 %4001, i8* %16, align 1
  %4002 = lshr i64 %3980, 59
  %4003 = and i64 %4002, 1
  %4004 = xor i64 %4000, %3957
  %4005 = xor i64 %4000, %4003
  %4006 = add nuw nsw i64 %4004, %4005
  %4007 = icmp eq i64 %4006, 2
  %4008 = zext i1 %4007 to i8
  store i8 %4008, i8* %17, align 1
  %4009 = load i64, i64* %RBP.i, align 8
  %4010 = add i64 %4009, -12
  %4011 = add i64 %3930, 39
  store i64 %4011, i64* %3, align 8
  %4012 = inttoptr i64 %4010 to i32*
  %4013 = load i32, i32* %4012, align 4
  %4014 = sext i32 %4013 to i64
  store i64 %4014, i64* %RDX.i658, align 8
  %4015 = shl nsw i64 %4014, 2
  %4016 = add i64 %3982, %4015
  %4017 = add i64 %3930, 42
  store i64 %4017, i64* %3, align 8
  %4018 = inttoptr i64 %4016 to i32*
  %4019 = load i32, i32* %4018, align 4
  %4020 = add i32 %4019, %3974
  %4021 = zext i32 %4020 to i64
  store i64 %4021, i64* %RCX.i4476, align 8
  %4022 = icmp ult i32 %4020, %3974
  %4023 = icmp ult i32 %4020, %4019
  %4024 = or i1 %4022, %4023
  %4025 = zext i1 %4024 to i8
  store i8 %4025, i8* %12, align 1
  %4026 = and i32 %4020, 255
  %4027 = tail call i32 @llvm.ctpop.i32(i32 %4026)
  %4028 = trunc i32 %4027 to i8
  %4029 = and i8 %4028, 1
  %4030 = xor i8 %4029, 1
  store i8 %4030, i8* %13, align 1
  %4031 = xor i32 %4019, %3974
  %4032 = xor i32 %4031, %4020
  %4033 = lshr i32 %4032, 4
  %4034 = trunc i32 %4033 to i8
  %4035 = and i8 %4034, 1
  store i8 %4035, i8* %14, align 1
  %4036 = icmp eq i32 %4020, 0
  %4037 = zext i1 %4036 to i8
  store i8 %4037, i8* %15, align 1
  %4038 = lshr i32 %4020, 31
  %4039 = trunc i32 %4038 to i8
  store i8 %4039, i8* %16, align 1
  %4040 = lshr i32 %3974, 31
  %4041 = lshr i32 %4019, 31
  %4042 = xor i32 %4038, %4040
  %4043 = xor i32 %4038, %4041
  %4044 = add nuw nsw i32 %4042, %4043
  %4045 = icmp eq i32 %4044, 2
  %4046 = zext i1 %4045 to i8
  store i8 %4046, i8* %17, align 1
  %4047 = add i64 %4009, -8
  %4048 = add i64 %3930, 46
  store i64 %4048, i64* %3, align 8
  %4049 = inttoptr i64 %4047 to i32*
  %4050 = load i32, i32* %4049, align 4
  %4051 = sext i32 %4050 to i64
  store i64 %4051, i64* %RDX.i658, align 8
  %4052 = shl nsw i64 %4051, 2
  %4053 = add i64 %4009, -1136
  %4054 = add i64 %4053, %4052
  %4055 = add i64 %3930, 53
  store i64 %4055, i64* %3, align 8
  %4056 = inttoptr i64 %4054 to i32*
  store i32 %4020, i32* %4056, align 4
  %4057 = load i64, i64* %RBP.i, align 8
  %4058 = add i64 %4057, -8
  %4059 = load i64, i64* %3, align 8
  %4060 = add i64 %4059, 4
  store i64 %4060, i64* %3, align 8
  %4061 = inttoptr i64 %4058 to i32*
  %4062 = load i32, i32* %4061, align 4
  %4063 = sext i32 %4062 to i64
  %4064 = shl nsw i64 %4063, 4
  store i64 %4064, i64* %RDX.i658, align 8
  %4065 = load i64, i64* %RAX.i552, align 8
  %4066 = add i64 %4064, %4065
  store i64 %4066, i64* %RSI.i757, align 8
  %4067 = icmp ult i64 %4066, %4065
  %4068 = icmp ult i64 %4066, %4064
  %4069 = or i1 %4067, %4068
  %4070 = zext i1 %4069 to i8
  store i8 %4070, i8* %12, align 1
  %4071 = trunc i64 %4066 to i32
  %4072 = and i32 %4071, 255
  %4073 = tail call i32 @llvm.ctpop.i32(i32 %4072)
  %4074 = trunc i32 %4073 to i8
  %4075 = and i8 %4074, 1
  %4076 = xor i8 %4075, 1
  store i8 %4076, i8* %13, align 1
  %4077 = xor i64 %4064, %4065
  %4078 = xor i64 %4077, %4066
  %4079 = lshr i64 %4078, 4
  %4080 = trunc i64 %4079 to i8
  %4081 = and i8 %4080, 1
  store i8 %4081, i8* %14, align 1
  %4082 = icmp eq i64 %4066, 0
  %4083 = zext i1 %4082 to i8
  store i8 %4083, i8* %15, align 1
  %4084 = lshr i64 %4066, 63
  %4085 = trunc i64 %4084 to i8
  store i8 %4085, i8* %16, align 1
  %4086 = lshr i64 %4065, 63
  %4087 = lshr i64 %4063, 59
  %4088 = and i64 %4087, 1
  %4089 = xor i64 %4084, %4086
  %4090 = xor i64 %4084, %4088
  %4091 = add nuw nsw i64 %4089, %4090
  %4092 = icmp eq i64 %4091, 2
  %4093 = zext i1 %4092 to i8
  store i8 %4093, i8* %17, align 1
  %4094 = add i64 %4057, -12
  %4095 = add i64 %4059, 18
  store i64 %4095, i64* %3, align 8
  %4096 = inttoptr i64 %4094 to i32*
  %4097 = load i32, i32* %4096, align 4
  %4098 = sext i32 %4097 to i64
  store i64 %4098, i64* %RDX.i658, align 8
  %4099 = shl nsw i64 %4098, 2
  %4100 = add i64 %4099, %4066
  %4101 = add i64 %4059, 21
  store i64 %4101, i64* %3, align 8
  %4102 = inttoptr i64 %4100 to i32*
  %4103 = load i32, i32* %4102, align 4
  %4104 = zext i32 %4103 to i64
  store i64 %4104, i64* %RCX.i4476, align 8
  %4105 = add i64 %4057, -24
  %4106 = add i64 %4059, 25
  store i64 %4106, i64* %3, align 8
  %4107 = inttoptr i64 %4105 to i32*
  %4108 = load i32, i32* %4107, align 4
  %4109 = sext i32 %4108 to i64
  %4110 = shl nsw i64 %4109, 4
  store i64 %4110, i64* %RDX.i658, align 8
  %4111 = add i64 %4110, %4065
  store i64 %4111, i64* %RAX.i552, align 8
  %4112 = icmp ult i64 %4111, %4065
  %4113 = icmp ult i64 %4111, %4110
  %4114 = or i1 %4112, %4113
  %4115 = zext i1 %4114 to i8
  store i8 %4115, i8* %12, align 1
  %4116 = trunc i64 %4111 to i32
  %4117 = and i32 %4116, 255
  %4118 = tail call i32 @llvm.ctpop.i32(i32 %4117)
  %4119 = trunc i32 %4118 to i8
  %4120 = and i8 %4119, 1
  %4121 = xor i8 %4120, 1
  store i8 %4121, i8* %13, align 1
  %4122 = xor i64 %4110, %4065
  %4123 = xor i64 %4122, %4111
  %4124 = lshr i64 %4123, 4
  %4125 = trunc i64 %4124 to i8
  %4126 = and i8 %4125, 1
  store i8 %4126, i8* %14, align 1
  %4127 = icmp eq i64 %4111, 0
  %4128 = zext i1 %4127 to i8
  store i8 %4128, i8* %15, align 1
  %4129 = lshr i64 %4111, 63
  %4130 = trunc i64 %4129 to i8
  store i8 %4130, i8* %16, align 1
  %4131 = lshr i64 %4109, 59
  %4132 = and i64 %4131, 1
  %4133 = xor i64 %4129, %4086
  %4134 = xor i64 %4129, %4132
  %4135 = add nuw nsw i64 %4133, %4134
  %4136 = icmp eq i64 %4135, 2
  %4137 = zext i1 %4136 to i8
  store i8 %4137, i8* %17, align 1
  %4138 = load i64, i64* %RBP.i, align 8
  %4139 = add i64 %4138, -12
  %4140 = add i64 %4059, 36
  store i64 %4140, i64* %3, align 8
  %4141 = inttoptr i64 %4139 to i32*
  %4142 = load i32, i32* %4141, align 4
  %4143 = sext i32 %4142 to i64
  store i64 %4143, i64* %RDX.i658, align 8
  %4144 = shl nsw i64 %4143, 2
  %4145 = add i64 %4111, %4144
  %4146 = add i64 %4059, 39
  store i64 %4146, i64* %3, align 8
  %4147 = inttoptr i64 %4145 to i32*
  %4148 = load i32, i32* %4147, align 4
  %4149 = sub i32 %4103, %4148
  %4150 = zext i32 %4149 to i64
  store i64 %4150, i64* %RCX.i4476, align 8
  %4151 = icmp ult i32 %4103, %4148
  %4152 = zext i1 %4151 to i8
  store i8 %4152, i8* %12, align 1
  %4153 = and i32 %4149, 255
  %4154 = tail call i32 @llvm.ctpop.i32(i32 %4153)
  %4155 = trunc i32 %4154 to i8
  %4156 = and i8 %4155, 1
  %4157 = xor i8 %4156, 1
  store i8 %4157, i8* %13, align 1
  %4158 = xor i32 %4148, %4103
  %4159 = xor i32 %4158, %4149
  %4160 = lshr i32 %4159, 4
  %4161 = trunc i32 %4160 to i8
  %4162 = and i8 %4161, 1
  store i8 %4162, i8* %14, align 1
  %4163 = icmp eq i32 %4149, 0
  %4164 = zext i1 %4163 to i8
  store i8 %4164, i8* %15, align 1
  %4165 = lshr i32 %4149, 31
  %4166 = trunc i32 %4165 to i8
  store i8 %4166, i8* %16, align 1
  %4167 = lshr i32 %4103, 31
  %4168 = lshr i32 %4148, 31
  %4169 = xor i32 %4168, %4167
  %4170 = xor i32 %4165, %4167
  %4171 = add nuw nsw i32 %4170, %4169
  %4172 = icmp eq i32 %4171, 2
  %4173 = zext i1 %4172 to i8
  store i8 %4173, i8* %17, align 1
  %4174 = add i64 %4138, -24
  %4175 = add i64 %4059, 43
  store i64 %4175, i64* %3, align 8
  %4176 = inttoptr i64 %4174 to i32*
  %4177 = load i32, i32* %4176, align 4
  %4178 = sext i32 %4177 to i64
  store i64 %4178, i64* %RAX.i552, align 8
  %4179 = shl nsw i64 %4178, 2
  %4180 = add i64 %4138, -1136
  %4181 = add i64 %4180, %4179
  %4182 = add i64 %4059, 50
  store i64 %4182, i64* %3, align 8
  %4183 = inttoptr i64 %4181 to i32*
  store i32 %4149, i32* %4183, align 4
  %4184 = load i64, i64* %RBP.i, align 8
  %4185 = add i64 %4184, -8
  %4186 = load i64, i64* %3, align 8
  %4187 = add i64 %4186, 3
  store i64 %4187, i64* %3, align 8
  %4188 = inttoptr i64 %4185 to i32*
  %4189 = load i32, i32* %4188, align 4
  %4190 = add i32 %4189, 1
  %4191 = zext i32 %4190 to i64
  store i64 %4191, i64* %RAX.i552, align 8
  %4192 = icmp eq i32 %4189, -1
  %4193 = icmp eq i32 %4190, 0
  %4194 = or i1 %4192, %4193
  %4195 = zext i1 %4194 to i8
  store i8 %4195, i8* %12, align 1
  %4196 = and i32 %4190, 255
  %4197 = tail call i32 @llvm.ctpop.i32(i32 %4196)
  %4198 = trunc i32 %4197 to i8
  %4199 = and i8 %4198, 1
  %4200 = xor i8 %4199, 1
  store i8 %4200, i8* %13, align 1
  %4201 = xor i32 %4190, %4189
  %4202 = lshr i32 %4201, 4
  %4203 = trunc i32 %4202 to i8
  %4204 = and i8 %4203, 1
  store i8 %4204, i8* %14, align 1
  %4205 = zext i1 %4193 to i8
  store i8 %4205, i8* %15, align 1
  %4206 = lshr i32 %4190, 31
  %4207 = trunc i32 %4206 to i8
  store i8 %4207, i8* %16, align 1
  %4208 = lshr i32 %4189, 31
  %4209 = xor i32 %4206, %4208
  %4210 = add nuw nsw i32 %4209, %4206
  %4211 = icmp eq i32 %4210, 2
  %4212 = zext i1 %4211 to i8
  store i8 %4212, i8* %17, align 1
  %4213 = add i64 %4186, 9
  store i64 %4213, i64* %3, align 8
  store i32 %4190, i32* %4188, align 4
  %4214 = load i64, i64* %3, align 8
  %4215 = add i64 %4214, -140
  store i64 %4215, i64* %3, align 8
  br label %block_.L_404b80

block_.L_404c11:                                  ; preds = %block_.L_404b80
  %4216 = add i64 %3872, -1136
  %4217 = add i64 %3900, 6
  store i64 %4217, i64* %3, align 8
  %4218 = inttoptr i64 %4216 to i32*
  %4219 = load i32, i32* %4218, align 4
  %4220 = zext i32 %4219 to i64
  store i64 %4220, i64* %RAX.i552, align 8
  %4221 = add i64 %3872, -1132
  %4222 = add i64 %3900, 12
  store i64 %4222, i64* %3, align 8
  %4223 = inttoptr i64 %4221 to i32*
  %4224 = load i32, i32* %4223, align 4
  %4225 = add i32 %4224, %4219
  %4226 = zext i32 %4225 to i64
  store i64 %4226, i64* %RAX.i552, align 8
  %4227 = icmp ult i32 %4225, %4219
  %4228 = icmp ult i32 %4225, %4224
  %4229 = or i1 %4227, %4228
  %4230 = zext i1 %4229 to i8
  store i8 %4230, i8* %12, align 1
  %4231 = and i32 %4225, 255
  %4232 = tail call i32 @llvm.ctpop.i32(i32 %4231)
  %4233 = trunc i32 %4232 to i8
  %4234 = and i8 %4233, 1
  %4235 = xor i8 %4234, 1
  store i8 %4235, i8* %13, align 1
  %4236 = xor i32 %4224, %4219
  %4237 = xor i32 %4236, %4225
  %4238 = lshr i32 %4237, 4
  %4239 = trunc i32 %4238 to i8
  %4240 = and i8 %4239, 1
  store i8 %4240, i8* %14, align 1
  %4241 = icmp eq i32 %4225, 0
  %4242 = zext i1 %4241 to i8
  store i8 %4242, i8* %15, align 1
  %4243 = lshr i32 %4225, 31
  %4244 = trunc i32 %4243 to i8
  store i8 %4244, i8* %16, align 1
  %4245 = lshr i32 %4219, 31
  %4246 = lshr i32 %4224, 31
  %4247 = xor i32 %4243, %4245
  %4248 = xor i32 %4243, %4246
  %4249 = add nuw nsw i32 %4247, %4248
  %4250 = icmp eq i32 %4249, 2
  %4251 = zext i1 %4250 to i8
  store i8 %4251, i8* %17, align 1
  %4252 = add i64 %3872, -12
  %4253 = add i64 %3900, 16
  store i64 %4253, i64* %3, align 8
  %4254 = inttoptr i64 %4252 to i32*
  %4255 = load i32, i32* %4254, align 4
  %4256 = sext i32 %4255 to i64
  store i64 %4256, i64* %RCX.i4476, align 8
  %4257 = shl nsw i64 %4256, 2
  %4258 = add i64 %3872, -1120
  %4259 = add i64 %4258, %4257
  %4260 = add i64 %3900, 23
  store i64 %4260, i64* %3, align 8
  %4261 = inttoptr i64 %4259 to i32*
  store i32 %4225, i32* %4261, align 4
  %4262 = load i64, i64* %RBP.i, align 8
  %4263 = add i64 %4262, -1136
  %4264 = load i64, i64* %3, align 8
  %4265 = add i64 %4264, 6
  store i64 %4265, i64* %3, align 8
  %4266 = inttoptr i64 %4263 to i32*
  %4267 = load i32, i32* %4266, align 4
  %4268 = zext i32 %4267 to i64
  store i64 %4268, i64* %RAX.i552, align 8
  %4269 = add i64 %4262, -1132
  %4270 = add i64 %4264, 12
  store i64 %4270, i64* %3, align 8
  %4271 = inttoptr i64 %4269 to i32*
  %4272 = load i32, i32* %4271, align 4
  %4273 = sub i32 %4267, %4272
  %4274 = zext i32 %4273 to i64
  store i64 %4274, i64* %RAX.i552, align 8
  %4275 = icmp ult i32 %4267, %4272
  %4276 = zext i1 %4275 to i8
  store i8 %4276, i8* %12, align 1
  %4277 = and i32 %4273, 255
  %4278 = tail call i32 @llvm.ctpop.i32(i32 %4277)
  %4279 = trunc i32 %4278 to i8
  %4280 = and i8 %4279, 1
  %4281 = xor i8 %4280, 1
  store i8 %4281, i8* %13, align 1
  %4282 = xor i32 %4272, %4267
  %4283 = xor i32 %4282, %4273
  %4284 = lshr i32 %4283, 4
  %4285 = trunc i32 %4284 to i8
  %4286 = and i8 %4285, 1
  store i8 %4286, i8* %14, align 1
  %4287 = icmp eq i32 %4273, 0
  %4288 = zext i1 %4287 to i8
  store i8 %4288, i8* %15, align 1
  %4289 = lshr i32 %4273, 31
  %4290 = trunc i32 %4289 to i8
  store i8 %4290, i8* %16, align 1
  %4291 = lshr i32 %4267, 31
  %4292 = lshr i32 %4272, 31
  %4293 = xor i32 %4292, %4291
  %4294 = xor i32 %4289, %4291
  %4295 = add nuw nsw i32 %4294, %4293
  %4296 = icmp eq i32 %4295, 2
  %4297 = zext i1 %4296 to i8
  store i8 %4297, i8* %17, align 1
  %4298 = add i64 %4262, -12
  %4299 = add i64 %4264, 16
  store i64 %4299, i64* %3, align 8
  %4300 = inttoptr i64 %4298 to i32*
  %4301 = load i32, i32* %4300, align 4
  %4302 = sext i32 %4301 to i64
  store i64 %4302, i64* %RCX.i4476, align 8
  %4303 = shl nsw i64 %4302, 2
  %4304 = add i64 %4262, -1088
  %4305 = add i64 %4304, %4303
  %4306 = add i64 %4264, 23
  store i64 %4306, i64* %3, align 8
  %4307 = inttoptr i64 %4305 to i32*
  store i32 %4273, i32* %4307, align 4
  %4308 = load i64, i64* %RBP.i, align 8
  %4309 = add i64 %4308, -1124
  %4310 = load i64, i64* %3, align 8
  %4311 = add i64 %4310, 6
  store i64 %4311, i64* %3, align 8
  %4312 = inttoptr i64 %4309 to i32*
  %4313 = load i32, i32* %4312, align 4
  %4314 = zext i32 %4313 to i64
  store i64 %4314, i64* %RAX.i552, align 8
  %4315 = add i64 %4308, -1128
  %4316 = add i64 %4310, 12
  store i64 %4316, i64* %3, align 8
  %4317 = inttoptr i64 %4315 to i32*
  %4318 = load i32, i32* %4317, align 4
  %4319 = add i32 %4318, %4313
  %4320 = zext i32 %4319 to i64
  store i64 %4320, i64* %RAX.i552, align 8
  %4321 = icmp ult i32 %4319, %4313
  %4322 = icmp ult i32 %4319, %4318
  %4323 = or i1 %4321, %4322
  %4324 = zext i1 %4323 to i8
  store i8 %4324, i8* %12, align 1
  %4325 = and i32 %4319, 255
  %4326 = tail call i32 @llvm.ctpop.i32(i32 %4325)
  %4327 = trunc i32 %4326 to i8
  %4328 = and i8 %4327, 1
  %4329 = xor i8 %4328, 1
  store i8 %4329, i8* %13, align 1
  %4330 = xor i32 %4318, %4313
  %4331 = xor i32 %4330, %4319
  %4332 = lshr i32 %4331, 4
  %4333 = trunc i32 %4332 to i8
  %4334 = and i8 %4333, 1
  store i8 %4334, i8* %14, align 1
  %4335 = icmp eq i32 %4319, 0
  %4336 = zext i1 %4335 to i8
  store i8 %4336, i8* %15, align 1
  %4337 = lshr i32 %4319, 31
  %4338 = trunc i32 %4337 to i8
  store i8 %4338, i8* %16, align 1
  %4339 = lshr i32 %4313, 31
  %4340 = lshr i32 %4318, 31
  %4341 = xor i32 %4337, %4339
  %4342 = xor i32 %4337, %4340
  %4343 = add nuw nsw i32 %4341, %4342
  %4344 = icmp eq i32 %4343, 2
  %4345 = zext i1 %4344 to i8
  store i8 %4345, i8* %17, align 1
  %4346 = add i64 %4308, -12
  %4347 = add i64 %4310, 16
  store i64 %4347, i64* %3, align 8
  %4348 = inttoptr i64 %4346 to i32*
  %4349 = load i32, i32* %4348, align 4
  %4350 = sext i32 %4349 to i64
  store i64 %4350, i64* %RCX.i4476, align 8
  %4351 = shl nsw i64 %4350, 2
  %4352 = add i64 %4308, -1104
  %4353 = add i64 %4352, %4351
  %4354 = add i64 %4310, 23
  store i64 %4354, i64* %3, align 8
  %4355 = inttoptr i64 %4353 to i32*
  store i32 %4319, i32* %4355, align 4
  %4356 = load i64, i64* %RBP.i, align 8
  %4357 = add i64 %4356, -1124
  %4358 = load i64, i64* %3, align 8
  %4359 = add i64 %4358, 6
  store i64 %4359, i64* %3, align 8
  %4360 = inttoptr i64 %4357 to i32*
  %4361 = load i32, i32* %4360, align 4
  %4362 = zext i32 %4361 to i64
  store i64 %4362, i64* %RAX.i552, align 8
  %4363 = add i64 %4356, -1128
  %4364 = add i64 %4358, 12
  store i64 %4364, i64* %3, align 8
  %4365 = inttoptr i64 %4363 to i32*
  %4366 = load i32, i32* %4365, align 4
  %4367 = sub i32 %4361, %4366
  %4368 = zext i32 %4367 to i64
  store i64 %4368, i64* %RAX.i552, align 8
  %4369 = icmp ult i32 %4361, %4366
  %4370 = zext i1 %4369 to i8
  store i8 %4370, i8* %12, align 1
  %4371 = and i32 %4367, 255
  %4372 = tail call i32 @llvm.ctpop.i32(i32 %4371)
  %4373 = trunc i32 %4372 to i8
  %4374 = and i8 %4373, 1
  %4375 = xor i8 %4374, 1
  store i8 %4375, i8* %13, align 1
  %4376 = xor i32 %4366, %4361
  %4377 = xor i32 %4376, %4367
  %4378 = lshr i32 %4377, 4
  %4379 = trunc i32 %4378 to i8
  %4380 = and i8 %4379, 1
  store i8 %4380, i8* %14, align 1
  %4381 = icmp eq i32 %4367, 0
  %4382 = zext i1 %4381 to i8
  store i8 %4382, i8* %15, align 1
  %4383 = lshr i32 %4367, 31
  %4384 = trunc i32 %4383 to i8
  store i8 %4384, i8* %16, align 1
  %4385 = lshr i32 %4361, 31
  %4386 = lshr i32 %4366, 31
  %4387 = xor i32 %4386, %4385
  %4388 = xor i32 %4383, %4385
  %4389 = add nuw nsw i32 %4388, %4387
  %4390 = icmp eq i32 %4389, 2
  %4391 = zext i1 %4390 to i8
  store i8 %4391, i8* %17, align 1
  %4392 = add i64 %4356, -12
  %4393 = add i64 %4358, 16
  store i64 %4393, i64* %3, align 8
  %4394 = inttoptr i64 %4392 to i32*
  %4395 = load i32, i32* %4394, align 4
  %4396 = sext i32 %4395 to i64
  store i64 %4396, i64* %RCX.i4476, align 8
  %4397 = shl nsw i64 %4396, 2
  %4398 = add i64 %4356, -1072
  %4399 = add i64 %4398, %4397
  %4400 = add i64 %4358, 23
  store i64 %4400, i64* %3, align 8
  %4401 = inttoptr i64 %4399 to i32*
  store i32 %4367, i32* %4401, align 4
  %4402 = load i64, i64* %RBP.i, align 8
  %4403 = add i64 %4402, -12
  %4404 = load i64, i64* %3, align 8
  %4405 = add i64 %4404, 3
  store i64 %4405, i64* %3, align 8
  %4406 = inttoptr i64 %4403 to i32*
  %4407 = load i32, i32* %4406, align 4
  %4408 = add i32 %4407, 1
  %4409 = zext i32 %4408 to i64
  store i64 %4409, i64* %RAX.i552, align 8
  %4410 = icmp eq i32 %4407, -1
  %4411 = icmp eq i32 %4408, 0
  %4412 = or i1 %4410, %4411
  %4413 = zext i1 %4412 to i8
  store i8 %4413, i8* %12, align 1
  %4414 = and i32 %4408, 255
  %4415 = tail call i32 @llvm.ctpop.i32(i32 %4414)
  %4416 = trunc i32 %4415 to i8
  %4417 = and i8 %4416, 1
  %4418 = xor i8 %4417, 1
  store i8 %4418, i8* %13, align 1
  %4419 = xor i32 %4408, %4407
  %4420 = lshr i32 %4419, 4
  %4421 = trunc i32 %4420 to i8
  %4422 = and i8 %4421, 1
  store i8 %4422, i8* %14, align 1
  %4423 = zext i1 %4411 to i8
  store i8 %4423, i8* %15, align 1
  %4424 = lshr i32 %4408, 31
  %4425 = trunc i32 %4424 to i8
  store i8 %4425, i8* %16, align 1
  %4426 = lshr i32 %4407, 31
  %4427 = xor i32 %4424, %4426
  %4428 = add nuw nsw i32 %4427, %4424
  %4429 = icmp eq i32 %4428, 2
  %4430 = zext i1 %4429 to i8
  store i8 %4430, i8* %17, align 1
  %4431 = add i64 %4404, 9
  store i64 %4431, i64* %3, align 8
  store i32 %4408, i32* %4406, align 4
  %4432 = load i64, i64* %3, align 8
  %4433 = add i64 %4432, -310
  store i64 %4433, i64* %3, align 8
  br label %block_.L_404b40

block_.L_404c82:                                  ; preds = %block_.L_404d53, %block_404b74
  %4434 = phi i64 [ %5160, %block_.L_404d53 ], [ %.pre312, %block_404b74 ]
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %CL.i, align 1
  %4435 = load i64, i64* %RBP.i, align 8
  %4436 = add i64 %4435, -8
  %4437 = add i64 %4434, 8
  store i64 %4437, i64* %3, align 8
  %4438 = inttoptr i64 %4436 to i32*
  %4439 = load i32, i32* %4438, align 4
  %4440 = add i32 %4439, -4
  %4441 = icmp ult i32 %4439, 4
  %4442 = zext i1 %4441 to i8
  store i8 %4442, i8* %12, align 1
  %4443 = and i32 %4440, 255
  %4444 = tail call i32 @llvm.ctpop.i32(i32 %4443)
  %4445 = trunc i32 %4444 to i8
  %4446 = and i8 %4445, 1
  %4447 = xor i8 %4446, 1
  store i8 %4447, i8* %13, align 1
  %4448 = xor i32 %4440, %4439
  %4449 = lshr i32 %4448, 4
  %4450 = trunc i32 %4449 to i8
  %4451 = and i8 %4450, 1
  store i8 %4451, i8* %14, align 1
  %4452 = icmp eq i32 %4440, 0
  %4453 = zext i1 %4452 to i8
  store i8 %4453, i8* %15, align 1
  %4454 = lshr i32 %4440, 31
  %4455 = trunc i32 %4454 to i8
  store i8 %4455, i8* %16, align 1
  %4456 = lshr i32 %4439, 31
  %4457 = xor i32 %4454, %4456
  %4458 = add nuw nsw i32 %4457, %4456
  %4459 = icmp eq i32 %4458, 2
  %4460 = zext i1 %4459 to i8
  store i8 %4460, i8* %17, align 1
  %4461 = add i64 %4435, -2271
  %4462 = add i64 %4434, 14
  store i64 %4462, i64* %3, align 8
  %4463 = inttoptr i64 %4461 to i8*
  store i8 0, i8* %4463, align 1
  %4464 = load i64, i64* %3, align 8
  %4465 = add i64 %4464, 24
  %4466 = add i64 %4464, 6
  %4467 = load i8, i8* %16, align 1
  %4468 = icmp ne i8 %4467, 0
  %4469 = load i8, i8* %17, align 1
  %4470 = icmp ne i8 %4469, 0
  %4471 = xor i1 %4468, %4470
  %4472 = select i1 %4471, i64 %4466, i64 %4465
  store i64 %4472, i64* %3, align 8
  br i1 %4471, label %block_404c96, label %block_.L_404ca8

block_404c96:                                     ; preds = %block_.L_404c82
  %4473 = load i64, i64* %RBP.i, align 8
  %4474 = add i64 %4473, -2260
  %4475 = add i64 %4472, 7
  store i64 %4475, i64* %3, align 8
  %4476 = inttoptr i64 %4474 to i32*
  %4477 = load i32, i32* %4476, align 4
  %4478 = icmp ne i32 %4477, 0
  %4479 = zext i1 %4478 to i64
  %4480 = xor i64 %4479, 255
  %4481 = trunc i64 %4480 to i8
  store i8 %4481, i8* %AL.i, align 1
  store i8 0, i8* %12, align 1
  %4482 = trunc i64 %4480 to i32
  %4483 = tail call i32 @llvm.ctpop.i32(i32 %4482)
  %4484 = trunc i32 %4483 to i8
  %4485 = and i8 %4484, 1
  %4486 = xor i8 %4485, 1
  store i8 %4486, i8* %13, align 1
  store i8 0, i8* %15, align 1
  store i8 1, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %4487 = add i64 %4473, -2271
  %4488 = add i64 %4472, 18
  store i64 %4488, i64* %3, align 8
  %4489 = inttoptr i64 %4487 to i8*
  store i8 %4481, i8* %4489, align 1
  %.pre313 = load i64, i64* %3, align 8
  br label %block_.L_404ca8

block_.L_404ca8:                                  ; preds = %block_.L_404c82, %block_404c96
  %4490 = phi i64 [ %4465, %block_.L_404c82 ], [ %.pre313, %block_404c96 ]
  %4491 = load i64, i64* %RBP.i, align 8
  %4492 = add i64 %4491, -2271
  %4493 = add i64 %4490, 6
  store i64 %4493, i64* %3, align 8
  %4494 = inttoptr i64 %4492 to i8*
  %4495 = load i8, i8* %4494, align 1
  store i8 %4495, i8* %AL.i, align 1
  %4496 = and i8 %4495, 1
  store i8 0, i8* %12, align 1
  %4497 = zext i8 %4496 to i32
  %4498 = tail call i32 @llvm.ctpop.i32(i32 %4497)
  %4499 = trunc i32 %4498 to i8
  %4500 = xor i8 %4499, 1
  store i8 %4500, i8* %13, align 1
  %4501 = xor i8 %4496, 1
  store i8 %4501, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %4502 = icmp eq i8 %4501, 0
  %.v449 = select i1 %4502, i64 19, i64 14
  %4503 = add i64 %4490, %.v449
  store i64 %4503, i64* %3, align 8
  br i1 %4502, label %block_.L_404cbb, label %block_404cb6

block_404cb6:                                     ; preds = %block_.L_404ca8
  %4504 = add i64 %4491, -2180
  %4505 = add i64 %4503, 312
  store i64 %4505, i64* %3, align 8
  %4506 = inttoptr i64 %4504 to i32*
  store i32 -1, i32* %4506, align 4
  %4507 = load i64, i64* %RBP.i, align 8
  %4508 = add i64 %4507, -2184
  %4509 = load i64, i64* %3, align 8
  %4510 = add i64 %4509, 10
  store i64 %4510, i64* %3, align 8
  %4511 = inttoptr i64 %4508 to i32*
  store i32 0, i32* %4511, align 4
  %4512 = load i64, i64* %RBP.i, align 8
  %4513 = add i64 %4512, -2188
  %4514 = load i64, i64* %3, align 8
  %4515 = add i64 %4514, 10
  store i64 %4515, i64* %3, align 8
  %4516 = inttoptr i64 %4513 to i32*
  store i32 0, i32* %4516, align 4
  %.pre314 = load i64, i64* %3, align 8
  br label %block_.L_404e02

block_.L_404cbb:                                  ; preds = %block_.L_404ca8
  %4517 = add i64 %4491, -12
  %4518 = add i64 %4503, 7
  store i64 %4518, i64* %3, align 8
  %4519 = inttoptr i64 %4517 to i32*
  store i32 0, i32* %4519, align 4
  %.pre418 = load i64, i64* %3, align 8
  br label %block_.L_404cc2

block_.L_404cc2:                                  ; preds = %block_404ccc, %block_.L_404cbb
  %4520 = phi i64 [ %4859, %block_404ccc ], [ %.pre418, %block_.L_404cbb ]
  %4521 = load i64, i64* %RBP.i, align 8
  %4522 = add i64 %4521, -12
  %4523 = add i64 %4520, 4
  store i64 %4523, i64* %3, align 8
  %4524 = inttoptr i64 %4522 to i32*
  %4525 = load i32, i32* %4524, align 4
  %4526 = add i32 %4525, -2
  %4527 = icmp ult i32 %4525, 2
  %4528 = zext i1 %4527 to i8
  store i8 %4528, i8* %12, align 1
  %4529 = and i32 %4526, 255
  %4530 = tail call i32 @llvm.ctpop.i32(i32 %4529)
  %4531 = trunc i32 %4530 to i8
  %4532 = and i8 %4531, 1
  %4533 = xor i8 %4532, 1
  store i8 %4533, i8* %13, align 1
  %4534 = xor i32 %4526, %4525
  %4535 = lshr i32 %4534, 4
  %4536 = trunc i32 %4535 to i8
  %4537 = and i8 %4536, 1
  store i8 %4537, i8* %14, align 1
  %4538 = icmp eq i32 %4526, 0
  %4539 = zext i1 %4538 to i8
  store i8 %4539, i8* %15, align 1
  %4540 = lshr i32 %4526, 31
  %4541 = trunc i32 %4540 to i8
  store i8 %4541, i8* %16, align 1
  %4542 = lshr i32 %4525, 31
  %4543 = xor i32 %4540, %4542
  %4544 = add nuw nsw i32 %4543, %4542
  %4545 = icmp eq i32 %4544, 2
  %4546 = zext i1 %4545 to i8
  store i8 %4546, i8* %17, align 1
  %4547 = icmp ne i8 %4541, 0
  %4548 = xor i1 %4547, %4545
  %.v466 = select i1 %4548, i64 10, i64 145
  %4549 = add i64 %4520, %.v466
  %4550 = add i64 %4521, -1120
  %4551 = add i64 %4549, 7
  store i64 %4551, i64* %3, align 8
  store i64 %4550, i64* %RAX.i552, align 8
  br i1 %4548, label %block_404ccc, label %block_.L_404d53

block_404ccc:                                     ; preds = %block_.L_404cc2
  store i64 3, i64* %RCX.i4476, align 8
  %4552 = add i64 %4549, 15
  store i64 %4552, i64* %3, align 8
  %4553 = load i32, i32* %4524, align 4
  %4554 = sub i32 3, %4553
  %4555 = zext i32 %4554 to i64
  store i64 %4555, i64* %RCX.i4476, align 8
  %4556 = icmp ugt i32 %4553, 3
  %4557 = zext i1 %4556 to i8
  store i8 %4557, i8* %12, align 1
  %4558 = and i32 %4554, 255
  %4559 = tail call i32 @llvm.ctpop.i32(i32 %4558)
  %4560 = trunc i32 %4559 to i8
  %4561 = and i8 %4560, 1
  %4562 = xor i8 %4561, 1
  store i8 %4562, i8* %13, align 1
  %4563 = xor i32 %4554, %4553
  %4564 = lshr i32 %4563, 4
  %4565 = trunc i32 %4564 to i8
  %4566 = and i8 %4565, 1
  store i8 %4566, i8* %14, align 1
  %4567 = icmp eq i32 %4554, 0
  %4568 = zext i1 %4567 to i8
  store i8 %4568, i8* %15, align 1
  %4569 = lshr i32 %4554, 31
  %4570 = trunc i32 %4569 to i8
  store i8 %4570, i8* %16, align 1
  %4571 = lshr i32 %4553, 31
  %4572 = add nuw nsw i32 %4569, %4571
  %4573 = icmp eq i32 %4572, 2
  %4574 = zext i1 %4573 to i8
  store i8 %4574, i8* %17, align 1
  %4575 = add i64 %4521, -28
  %4576 = add i64 %4549, 18
  store i64 %4576, i64* %3, align 8
  %4577 = inttoptr i64 %4575 to i32*
  store i32 %4554, i32* %4577, align 4
  %4578 = load i64, i64* %RBP.i, align 8
  %4579 = add i64 %4578, -8
  %4580 = load i64, i64* %3, align 8
  %4581 = add i64 %4580, 4
  store i64 %4581, i64* %3, align 8
  %4582 = inttoptr i64 %4579 to i32*
  %4583 = load i32, i32* %4582, align 4
  %4584 = sext i32 %4583 to i64
  %4585 = shl nsw i64 %4584, 4
  store i64 %4585, i64* %RDX.i658, align 8
  %4586 = load i64, i64* %RAX.i552, align 8
  %4587 = add i64 %4585, %4586
  store i64 %4587, i64* %RSI.i757, align 8
  %4588 = icmp ult i64 %4587, %4586
  %4589 = icmp ult i64 %4587, %4585
  %4590 = or i1 %4588, %4589
  %4591 = zext i1 %4590 to i8
  store i8 %4591, i8* %12, align 1
  %4592 = trunc i64 %4587 to i32
  %4593 = and i32 %4592, 255
  %4594 = tail call i32 @llvm.ctpop.i32(i32 %4593)
  %4595 = trunc i32 %4594 to i8
  %4596 = and i8 %4595, 1
  %4597 = xor i8 %4596, 1
  store i8 %4597, i8* %13, align 1
  %4598 = xor i64 %4585, %4586
  %4599 = xor i64 %4598, %4587
  %4600 = lshr i64 %4599, 4
  %4601 = trunc i64 %4600 to i8
  %4602 = and i8 %4601, 1
  store i8 %4602, i8* %14, align 1
  %4603 = icmp eq i64 %4587, 0
  %4604 = zext i1 %4603 to i8
  store i8 %4604, i8* %15, align 1
  %4605 = lshr i64 %4587, 63
  %4606 = trunc i64 %4605 to i8
  store i8 %4606, i8* %16, align 1
  %4607 = lshr i64 %4586, 63
  %4608 = lshr i64 %4584, 59
  %4609 = and i64 %4608, 1
  %4610 = xor i64 %4605, %4607
  %4611 = xor i64 %4605, %4609
  %4612 = add nuw nsw i64 %4610, %4611
  %4613 = icmp eq i64 %4612, 2
  %4614 = zext i1 %4613 to i8
  store i8 %4614, i8* %17, align 1
  %4615 = add i64 %4578, -12
  %4616 = add i64 %4580, 18
  store i64 %4616, i64* %3, align 8
  %4617 = inttoptr i64 %4615 to i32*
  %4618 = load i32, i32* %4617, align 4
  %4619 = sext i32 %4618 to i64
  store i64 %4619, i64* %RDX.i658, align 8
  %4620 = shl nsw i64 %4619, 2
  %4621 = add i64 %4620, %4587
  %4622 = add i64 %4580, 21
  store i64 %4622, i64* %3, align 8
  %4623 = inttoptr i64 %4621 to i32*
  %4624 = load i32, i32* %4623, align 4
  %4625 = zext i32 %4624 to i64
  store i64 %4625, i64* %RCX.i4476, align 8
  %4626 = add i64 %4580, 25
  store i64 %4626, i64* %3, align 8
  %4627 = load i32, i32* %4582, align 4
  %4628 = sext i32 %4627 to i64
  %4629 = shl nsw i64 %4628, 4
  store i64 %4629, i64* %RDX.i658, align 8
  %4630 = add i64 %4629, %4586
  store i64 %4630, i64* %RSI.i757, align 8
  %4631 = icmp ult i64 %4630, %4586
  %4632 = icmp ult i64 %4630, %4629
  %4633 = or i1 %4631, %4632
  %4634 = zext i1 %4633 to i8
  store i8 %4634, i8* %12, align 1
  %4635 = trunc i64 %4630 to i32
  %4636 = and i32 %4635, 255
  %4637 = tail call i32 @llvm.ctpop.i32(i32 %4636)
  %4638 = trunc i32 %4637 to i8
  %4639 = and i8 %4638, 1
  %4640 = xor i8 %4639, 1
  store i8 %4640, i8* %13, align 1
  %4641 = xor i64 %4629, %4586
  %4642 = xor i64 %4641, %4630
  %4643 = lshr i64 %4642, 4
  %4644 = trunc i64 %4643 to i8
  %4645 = and i8 %4644, 1
  store i8 %4645, i8* %14, align 1
  %4646 = icmp eq i64 %4630, 0
  %4647 = zext i1 %4646 to i8
  store i8 %4647, i8* %15, align 1
  %4648 = lshr i64 %4630, 63
  %4649 = trunc i64 %4648 to i8
  store i8 %4649, i8* %16, align 1
  %4650 = lshr i64 %4628, 59
  %4651 = and i64 %4650, 1
  %4652 = xor i64 %4648, %4607
  %4653 = xor i64 %4648, %4651
  %4654 = add nuw nsw i64 %4652, %4653
  %4655 = icmp eq i64 %4654, 2
  %4656 = zext i1 %4655 to i8
  store i8 %4656, i8* %17, align 1
  %4657 = load i64, i64* %RBP.i, align 8
  %4658 = add i64 %4657, -28
  %4659 = add i64 %4580, 39
  store i64 %4659, i64* %3, align 8
  %4660 = inttoptr i64 %4658 to i32*
  %4661 = load i32, i32* %4660, align 4
  %4662 = sext i32 %4661 to i64
  store i64 %4662, i64* %RDX.i658, align 8
  %4663 = shl nsw i64 %4662, 2
  %4664 = add i64 %4630, %4663
  %4665 = add i64 %4580, 42
  store i64 %4665, i64* %3, align 8
  %4666 = inttoptr i64 %4664 to i32*
  %4667 = load i32, i32* %4666, align 4
  %4668 = add i32 %4667, %4624
  %4669 = zext i32 %4668 to i64
  store i64 %4669, i64* %RCX.i4476, align 8
  %4670 = icmp ult i32 %4668, %4624
  %4671 = icmp ult i32 %4668, %4667
  %4672 = or i1 %4670, %4671
  %4673 = zext i1 %4672 to i8
  store i8 %4673, i8* %12, align 1
  %4674 = and i32 %4668, 255
  %4675 = tail call i32 @llvm.ctpop.i32(i32 %4674)
  %4676 = trunc i32 %4675 to i8
  %4677 = and i8 %4676, 1
  %4678 = xor i8 %4677, 1
  store i8 %4678, i8* %13, align 1
  %4679 = xor i32 %4667, %4624
  %4680 = xor i32 %4679, %4668
  %4681 = lshr i32 %4680, 4
  %4682 = trunc i32 %4681 to i8
  %4683 = and i8 %4682, 1
  store i8 %4683, i8* %14, align 1
  %4684 = icmp eq i32 %4668, 0
  %4685 = zext i1 %4684 to i8
  store i8 %4685, i8* %15, align 1
  %4686 = lshr i32 %4668, 31
  %4687 = trunc i32 %4686 to i8
  store i8 %4687, i8* %16, align 1
  %4688 = lshr i32 %4624, 31
  %4689 = lshr i32 %4667, 31
  %4690 = xor i32 %4686, %4688
  %4691 = xor i32 %4686, %4689
  %4692 = add nuw nsw i32 %4690, %4691
  %4693 = icmp eq i32 %4692, 2
  %4694 = zext i1 %4693 to i8
  store i8 %4694, i8* %17, align 1
  %4695 = add i64 %4657, -12
  %4696 = add i64 %4580, 46
  store i64 %4696, i64* %3, align 8
  %4697 = inttoptr i64 %4695 to i32*
  %4698 = load i32, i32* %4697, align 4
  %4699 = sext i32 %4698 to i64
  store i64 %4699, i64* %RDX.i658, align 8
  %4700 = shl nsw i64 %4699, 2
  %4701 = add i64 %4657, -1136
  %4702 = add i64 %4701, %4700
  %4703 = add i64 %4580, 53
  store i64 %4703, i64* %3, align 8
  %4704 = inttoptr i64 %4702 to i32*
  store i32 %4668, i32* %4704, align 4
  %4705 = load i64, i64* %RBP.i, align 8
  %4706 = add i64 %4705, -8
  %4707 = load i64, i64* %3, align 8
  %4708 = add i64 %4707, 4
  store i64 %4708, i64* %3, align 8
  %4709 = inttoptr i64 %4706 to i32*
  %4710 = load i32, i32* %4709, align 4
  %4711 = sext i32 %4710 to i64
  %4712 = shl nsw i64 %4711, 4
  store i64 %4712, i64* %RDX.i658, align 8
  %4713 = load i64, i64* %RAX.i552, align 8
  %4714 = add i64 %4712, %4713
  store i64 %4714, i64* %RSI.i757, align 8
  %4715 = icmp ult i64 %4714, %4713
  %4716 = icmp ult i64 %4714, %4712
  %4717 = or i1 %4715, %4716
  %4718 = zext i1 %4717 to i8
  store i8 %4718, i8* %12, align 1
  %4719 = trunc i64 %4714 to i32
  %4720 = and i32 %4719, 255
  %4721 = tail call i32 @llvm.ctpop.i32(i32 %4720)
  %4722 = trunc i32 %4721 to i8
  %4723 = and i8 %4722, 1
  %4724 = xor i8 %4723, 1
  store i8 %4724, i8* %13, align 1
  %4725 = xor i64 %4712, %4713
  %4726 = xor i64 %4725, %4714
  %4727 = lshr i64 %4726, 4
  %4728 = trunc i64 %4727 to i8
  %4729 = and i8 %4728, 1
  store i8 %4729, i8* %14, align 1
  %4730 = icmp eq i64 %4714, 0
  %4731 = zext i1 %4730 to i8
  store i8 %4731, i8* %15, align 1
  %4732 = lshr i64 %4714, 63
  %4733 = trunc i64 %4732 to i8
  store i8 %4733, i8* %16, align 1
  %4734 = lshr i64 %4713, 63
  %4735 = lshr i64 %4711, 59
  %4736 = and i64 %4735, 1
  %4737 = xor i64 %4732, %4734
  %4738 = xor i64 %4732, %4736
  %4739 = add nuw nsw i64 %4737, %4738
  %4740 = icmp eq i64 %4739, 2
  %4741 = zext i1 %4740 to i8
  store i8 %4741, i8* %17, align 1
  %4742 = add i64 %4705, -12
  %4743 = add i64 %4707, 18
  store i64 %4743, i64* %3, align 8
  %4744 = inttoptr i64 %4742 to i32*
  %4745 = load i32, i32* %4744, align 4
  %4746 = sext i32 %4745 to i64
  store i64 %4746, i64* %RDX.i658, align 8
  %4747 = shl nsw i64 %4746, 2
  %4748 = add i64 %4747, %4714
  %4749 = add i64 %4707, 21
  store i64 %4749, i64* %3, align 8
  %4750 = inttoptr i64 %4748 to i32*
  %4751 = load i32, i32* %4750, align 4
  %4752 = zext i32 %4751 to i64
  store i64 %4752, i64* %RCX.i4476, align 8
  %4753 = add i64 %4707, 25
  store i64 %4753, i64* %3, align 8
  %4754 = load i32, i32* %4709, align 4
  %4755 = sext i32 %4754 to i64
  %4756 = shl nsw i64 %4755, 4
  store i64 %4756, i64* %RDX.i658, align 8
  %4757 = add i64 %4756, %4713
  store i64 %4757, i64* %RAX.i552, align 8
  %4758 = icmp ult i64 %4757, %4713
  %4759 = icmp ult i64 %4757, %4756
  %4760 = or i1 %4758, %4759
  %4761 = zext i1 %4760 to i8
  store i8 %4761, i8* %12, align 1
  %4762 = trunc i64 %4757 to i32
  %4763 = and i32 %4762, 255
  %4764 = tail call i32 @llvm.ctpop.i32(i32 %4763)
  %4765 = trunc i32 %4764 to i8
  %4766 = and i8 %4765, 1
  %4767 = xor i8 %4766, 1
  store i8 %4767, i8* %13, align 1
  %4768 = xor i64 %4756, %4713
  %4769 = xor i64 %4768, %4757
  %4770 = lshr i64 %4769, 4
  %4771 = trunc i64 %4770 to i8
  %4772 = and i8 %4771, 1
  store i8 %4772, i8* %14, align 1
  %4773 = icmp eq i64 %4757, 0
  %4774 = zext i1 %4773 to i8
  store i8 %4774, i8* %15, align 1
  %4775 = lshr i64 %4757, 63
  %4776 = trunc i64 %4775 to i8
  store i8 %4776, i8* %16, align 1
  %4777 = lshr i64 %4755, 59
  %4778 = and i64 %4777, 1
  %4779 = xor i64 %4775, %4734
  %4780 = xor i64 %4775, %4778
  %4781 = add nuw nsw i64 %4779, %4780
  %4782 = icmp eq i64 %4781, 2
  %4783 = zext i1 %4782 to i8
  store i8 %4783, i8* %17, align 1
  %4784 = load i64, i64* %RBP.i, align 8
  %4785 = add i64 %4784, -28
  %4786 = add i64 %4707, 36
  store i64 %4786, i64* %3, align 8
  %4787 = inttoptr i64 %4785 to i32*
  %4788 = load i32, i32* %4787, align 4
  %4789 = sext i32 %4788 to i64
  store i64 %4789, i64* %RDX.i658, align 8
  %4790 = shl nsw i64 %4789, 2
  %4791 = add i64 %4757, %4790
  %4792 = add i64 %4707, 39
  store i64 %4792, i64* %3, align 8
  %4793 = inttoptr i64 %4791 to i32*
  %4794 = load i32, i32* %4793, align 4
  %4795 = sub i32 %4751, %4794
  %4796 = zext i32 %4795 to i64
  store i64 %4796, i64* %RCX.i4476, align 8
  %4797 = icmp ult i32 %4751, %4794
  %4798 = zext i1 %4797 to i8
  store i8 %4798, i8* %12, align 1
  %4799 = and i32 %4795, 255
  %4800 = tail call i32 @llvm.ctpop.i32(i32 %4799)
  %4801 = trunc i32 %4800 to i8
  %4802 = and i8 %4801, 1
  %4803 = xor i8 %4802, 1
  store i8 %4803, i8* %13, align 1
  %4804 = xor i32 %4794, %4751
  %4805 = xor i32 %4804, %4795
  %4806 = lshr i32 %4805, 4
  %4807 = trunc i32 %4806 to i8
  %4808 = and i8 %4807, 1
  store i8 %4808, i8* %14, align 1
  %4809 = icmp eq i32 %4795, 0
  %4810 = zext i1 %4809 to i8
  store i8 %4810, i8* %15, align 1
  %4811 = lshr i32 %4795, 31
  %4812 = trunc i32 %4811 to i8
  store i8 %4812, i8* %16, align 1
  %4813 = lshr i32 %4751, 31
  %4814 = lshr i32 %4794, 31
  %4815 = xor i32 %4814, %4813
  %4816 = xor i32 %4811, %4813
  %4817 = add nuw nsw i32 %4816, %4815
  %4818 = icmp eq i32 %4817, 2
  %4819 = zext i1 %4818 to i8
  store i8 %4819, i8* %17, align 1
  %4820 = add i64 %4707, 43
  store i64 %4820, i64* %3, align 8
  %4821 = load i32, i32* %4787, align 4
  %4822 = sext i32 %4821 to i64
  store i64 %4822, i64* %RAX.i552, align 8
  %4823 = shl nsw i64 %4822, 2
  %4824 = add i64 %4784, -1136
  %4825 = add i64 %4824, %4823
  %4826 = add i64 %4707, 50
  store i64 %4826, i64* %3, align 8
  %4827 = inttoptr i64 %4825 to i32*
  store i32 %4795, i32* %4827, align 4
  %4828 = load i64, i64* %RBP.i, align 8
  %4829 = add i64 %4828, -12
  %4830 = load i64, i64* %3, align 8
  %4831 = add i64 %4830, 3
  store i64 %4831, i64* %3, align 8
  %4832 = inttoptr i64 %4829 to i32*
  %4833 = load i32, i32* %4832, align 4
  %4834 = add i32 %4833, 1
  %4835 = zext i32 %4834 to i64
  store i64 %4835, i64* %RAX.i552, align 8
  %4836 = icmp eq i32 %4833, -1
  %4837 = icmp eq i32 %4834, 0
  %4838 = or i1 %4836, %4837
  %4839 = zext i1 %4838 to i8
  store i8 %4839, i8* %12, align 1
  %4840 = and i32 %4834, 255
  %4841 = tail call i32 @llvm.ctpop.i32(i32 %4840)
  %4842 = trunc i32 %4841 to i8
  %4843 = and i8 %4842, 1
  %4844 = xor i8 %4843, 1
  store i8 %4844, i8* %13, align 1
  %4845 = xor i32 %4834, %4833
  %4846 = lshr i32 %4845, 4
  %4847 = trunc i32 %4846 to i8
  %4848 = and i8 %4847, 1
  store i8 %4848, i8* %14, align 1
  %4849 = zext i1 %4837 to i8
  store i8 %4849, i8* %15, align 1
  %4850 = lshr i32 %4834, 31
  %4851 = trunc i32 %4850 to i8
  store i8 %4851, i8* %16, align 1
  %4852 = lshr i32 %4833, 31
  %4853 = xor i32 %4850, %4852
  %4854 = add nuw nsw i32 %4853, %4850
  %4855 = icmp eq i32 %4854, 2
  %4856 = zext i1 %4855 to i8
  store i8 %4856, i8* %17, align 1
  %4857 = add i64 %4830, 9
  store i64 %4857, i64* %3, align 8
  store i32 %4834, i32* %4832, align 4
  %4858 = load i64, i64* %3, align 8
  %4859 = add i64 %4858, -140
  store i64 %4859, i64* %3, align 8
  br label %block_.L_404cc2

block_.L_404d53:                                  ; preds = %block_.L_404cc2
  %4860 = add i64 %4521, -1136
  %4861 = add i64 %4549, 13
  store i64 %4861, i64* %3, align 8
  %4862 = inttoptr i64 %4860 to i32*
  %4863 = load i32, i32* %4862, align 4
  %4864 = zext i32 %4863 to i64
  store i64 %4864, i64* %RCX.i4476, align 8
  %4865 = add i64 %4521, -1132
  %4866 = add i64 %4549, 19
  store i64 %4866, i64* %3, align 8
  %4867 = inttoptr i64 %4865 to i32*
  %4868 = load i32, i32* %4867, align 4
  %4869 = add i32 %4868, %4863
  %4870 = zext i32 %4869 to i64
  %4871 = shl nuw i64 %4870, 32
  %4872 = ashr i64 %4871, 33
  %4873 = trunc i32 %4869 to i8
  %4874 = and i8 %4873, 1
  %4875 = trunc i64 %4872 to i32
  %4876 = and i64 %4872, 4294967295
  store i64 %4876, i64* %RCX.i4476, align 8
  store i8 %4874, i8* %12, align 1
  %4877 = and i32 %4875, 255
  %4878 = tail call i32 @llvm.ctpop.i32(i32 %4877)
  %4879 = trunc i32 %4878 to i8
  %4880 = and i8 %4879, 1
  %4881 = xor i8 %4880, 1
  store i8 %4881, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %4882 = icmp eq i32 %4875, 0
  %4883 = zext i1 %4882 to i8
  store i8 %4883, i8* %15, align 1
  %4884 = lshr i64 %4872, 31
  %4885 = trunc i64 %4884 to i8
  %4886 = and i8 %4885, 1
  store i8 %4886, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %4887 = add i64 %4521, -8
  %4888 = add i64 %4549, 25
  store i64 %4888, i64* %3, align 8
  %4889 = inttoptr i64 %4887 to i32*
  %4890 = load i32, i32* %4889, align 4
  %4891 = sext i32 %4890 to i64
  %4892 = shl nsw i64 %4891, 4
  store i64 %4892, i64* %RDX.i658, align 8
  %4893 = load i64, i64* %RAX.i552, align 8
  %4894 = add i64 %4892, %4893
  store i64 %4894, i64* %RSI.i757, align 8
  %4895 = icmp ult i64 %4894, %4893
  %4896 = icmp ult i64 %4894, %4892
  %4897 = or i1 %4895, %4896
  %4898 = zext i1 %4897 to i8
  store i8 %4898, i8* %12, align 1
  %4899 = trunc i64 %4894 to i32
  %4900 = and i32 %4899, 255
  %4901 = tail call i32 @llvm.ctpop.i32(i32 %4900)
  %4902 = trunc i32 %4901 to i8
  %4903 = and i8 %4902, 1
  %4904 = xor i8 %4903, 1
  store i8 %4904, i8* %13, align 1
  %4905 = xor i64 %4892, %4893
  %4906 = xor i64 %4905, %4894
  %4907 = lshr i64 %4906, 4
  %4908 = trunc i64 %4907 to i8
  %4909 = and i8 %4908, 1
  store i8 %4909, i8* %14, align 1
  %4910 = icmp eq i64 %4894, 0
  %4911 = zext i1 %4910 to i8
  store i8 %4911, i8* %15, align 1
  %4912 = lshr i64 %4894, 63
  %4913 = trunc i64 %4912 to i8
  store i8 %4913, i8* %16, align 1
  %4914 = lshr i64 %4893, 63
  %4915 = lshr i64 %4891, 59
  %4916 = and i64 %4915, 1
  %4917 = xor i64 %4912, %4914
  %4918 = xor i64 %4912, %4916
  %4919 = add nuw nsw i64 %4917, %4918
  %4920 = icmp eq i64 %4919, 2
  %4921 = zext i1 %4920 to i8
  store i8 %4921, i8* %17, align 1
  %4922 = inttoptr i64 %4894 to i32*
  %4923 = trunc i64 %4872 to i32
  %4924 = add i64 %4549, 37
  store i64 %4924, i64* %3, align 8
  store i32 %4923, i32* %4922, align 4
  %4925 = load i64, i64* %RBP.i, align 8
  %4926 = add i64 %4925, -1136
  %4927 = load i64, i64* %3, align 8
  %4928 = add i64 %4927, 6
  store i64 %4928, i64* %3, align 8
  %4929 = inttoptr i64 %4926 to i32*
  %4930 = load i32, i32* %4929, align 4
  %4931 = zext i32 %4930 to i64
  store i64 %4931, i64* %RCX.i4476, align 8
  %4932 = add i64 %4925, -1132
  %4933 = add i64 %4927, 12
  store i64 %4933, i64* %3, align 8
  %4934 = inttoptr i64 %4932 to i32*
  %4935 = load i32, i32* %4934, align 4
  %4936 = sub i32 %4930, %4935
  %4937 = zext i32 %4936 to i64
  %4938 = shl nuw i64 %4937, 32
  %4939 = ashr i64 %4938, 33
  %4940 = trunc i32 %4936 to i8
  %4941 = and i8 %4940, 1
  %4942 = trunc i64 %4939 to i32
  %4943 = and i64 %4939, 4294967295
  store i64 %4943, i64* %RCX.i4476, align 8
  store i8 %4941, i8* %12, align 1
  %4944 = and i32 %4942, 255
  %4945 = tail call i32 @llvm.ctpop.i32(i32 %4944)
  %4946 = trunc i32 %4945 to i8
  %4947 = and i8 %4946, 1
  %4948 = xor i8 %4947, 1
  store i8 %4948, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %4949 = icmp eq i32 %4942, 0
  %4950 = zext i1 %4949 to i8
  store i8 %4950, i8* %15, align 1
  %4951 = lshr i64 %4939, 31
  %4952 = trunc i64 %4951 to i8
  %4953 = and i8 %4952, 1
  store i8 %4953, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %4954 = add i64 %4925, -8
  %4955 = add i64 %4927, 18
  store i64 %4955, i64* %3, align 8
  %4956 = inttoptr i64 %4954 to i32*
  %4957 = load i32, i32* %4956, align 4
  %4958 = sext i32 %4957 to i64
  %4959 = shl nsw i64 %4958, 4
  store i64 %4959, i64* %RDX.i658, align 8
  %4960 = load i64, i64* %RAX.i552, align 8
  %4961 = add i64 %4959, %4960
  store i64 %4961, i64* %RSI.i757, align 8
  %4962 = icmp ult i64 %4961, %4960
  %4963 = icmp ult i64 %4961, %4959
  %4964 = or i1 %4962, %4963
  %4965 = zext i1 %4964 to i8
  store i8 %4965, i8* %12, align 1
  %4966 = trunc i64 %4961 to i32
  %4967 = and i32 %4966, 255
  %4968 = tail call i32 @llvm.ctpop.i32(i32 %4967)
  %4969 = trunc i32 %4968 to i8
  %4970 = and i8 %4969, 1
  %4971 = xor i8 %4970, 1
  store i8 %4971, i8* %13, align 1
  %4972 = xor i64 %4959, %4960
  %4973 = xor i64 %4972, %4961
  %4974 = lshr i64 %4973, 4
  %4975 = trunc i64 %4974 to i8
  %4976 = and i8 %4975, 1
  store i8 %4976, i8* %14, align 1
  %4977 = icmp eq i64 %4961, 0
  %4978 = zext i1 %4977 to i8
  store i8 %4978, i8* %15, align 1
  %4979 = lshr i64 %4961, 63
  %4980 = trunc i64 %4979 to i8
  store i8 %4980, i8* %16, align 1
  %4981 = lshr i64 %4960, 63
  %4982 = lshr i64 %4958, 59
  %4983 = and i64 %4982, 1
  %4984 = xor i64 %4979, %4981
  %4985 = xor i64 %4979, %4983
  %4986 = add nuw nsw i64 %4984, %4985
  %4987 = icmp eq i64 %4986, 2
  %4988 = zext i1 %4987 to i8
  store i8 %4988, i8* %17, align 1
  %4989 = add i64 %4961, 8
  %4990 = trunc i64 %4939 to i32
  %4991 = add i64 %4927, 31
  store i64 %4991, i64* %3, align 8
  %4992 = inttoptr i64 %4989 to i32*
  store i32 %4990, i32* %4992, align 4
  %4993 = load i64, i64* %RBP.i, align 8
  %4994 = add i64 %4993, -1124
  %4995 = load i64, i64* %3, align 8
  %4996 = add i64 %4995, 6
  store i64 %4996, i64* %3, align 8
  %4997 = inttoptr i64 %4994 to i32*
  %4998 = load i32, i32* %4997, align 4
  %4999 = zext i32 %4998 to i64
  store i64 %4999, i64* %RCX.i4476, align 8
  %5000 = add i64 %4993, -1128
  %5001 = add i64 %4995, 12
  store i64 %5001, i64* %3, align 8
  %5002 = inttoptr i64 %5000 to i32*
  %5003 = load i32, i32* %5002, align 4
  %5004 = add i32 %5003, %4998
  %5005 = zext i32 %5004 to i64
  %5006 = shl nuw i64 %5005, 32
  %5007 = ashr i64 %5006, 33
  %5008 = trunc i32 %5004 to i8
  %5009 = and i8 %5008, 1
  %5010 = trunc i64 %5007 to i32
  %5011 = and i64 %5007, 4294967295
  store i64 %5011, i64* %RCX.i4476, align 8
  store i8 %5009, i8* %12, align 1
  %5012 = and i32 %5010, 255
  %5013 = tail call i32 @llvm.ctpop.i32(i32 %5012)
  %5014 = trunc i32 %5013 to i8
  %5015 = and i8 %5014, 1
  %5016 = xor i8 %5015, 1
  store i8 %5016, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5017 = icmp eq i32 %5010, 0
  %5018 = zext i1 %5017 to i8
  store i8 %5018, i8* %15, align 1
  %5019 = lshr i64 %5007, 31
  %5020 = trunc i64 %5019 to i8
  %5021 = and i8 %5020, 1
  store i8 %5021, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %5022 = add i64 %4993, -8
  %5023 = add i64 %4995, 18
  store i64 %5023, i64* %3, align 8
  %5024 = inttoptr i64 %5022 to i32*
  %5025 = load i32, i32* %5024, align 4
  %5026 = sext i32 %5025 to i64
  %5027 = shl nsw i64 %5026, 4
  store i64 %5027, i64* %RDX.i658, align 8
  %5028 = load i64, i64* %RAX.i552, align 8
  %5029 = add i64 %5027, %5028
  store i64 %5029, i64* %RSI.i757, align 8
  %5030 = icmp ult i64 %5029, %5028
  %5031 = icmp ult i64 %5029, %5027
  %5032 = or i1 %5030, %5031
  %5033 = zext i1 %5032 to i8
  store i8 %5033, i8* %12, align 1
  %5034 = trunc i64 %5029 to i32
  %5035 = and i32 %5034, 255
  %5036 = tail call i32 @llvm.ctpop.i32(i32 %5035)
  %5037 = trunc i32 %5036 to i8
  %5038 = and i8 %5037, 1
  %5039 = xor i8 %5038, 1
  store i8 %5039, i8* %13, align 1
  %5040 = xor i64 %5027, %5028
  %5041 = xor i64 %5040, %5029
  %5042 = lshr i64 %5041, 4
  %5043 = trunc i64 %5042 to i8
  %5044 = and i8 %5043, 1
  store i8 %5044, i8* %14, align 1
  %5045 = icmp eq i64 %5029, 0
  %5046 = zext i1 %5045 to i8
  store i8 %5046, i8* %15, align 1
  %5047 = lshr i64 %5029, 63
  %5048 = trunc i64 %5047 to i8
  store i8 %5048, i8* %16, align 1
  %5049 = lshr i64 %5028, 63
  %5050 = lshr i64 %5026, 59
  %5051 = and i64 %5050, 1
  %5052 = xor i64 %5047, %5049
  %5053 = xor i64 %5047, %5051
  %5054 = add nuw nsw i64 %5052, %5053
  %5055 = icmp eq i64 %5054, 2
  %5056 = zext i1 %5055 to i8
  store i8 %5056, i8* %17, align 1
  %5057 = add i64 %5029, 4
  %5058 = trunc i64 %5007 to i32
  %5059 = add i64 %4995, 31
  store i64 %5059, i64* %3, align 8
  %5060 = inttoptr i64 %5057 to i32*
  store i32 %5058, i32* %5060, align 4
  %5061 = load i64, i64* %RBP.i, align 8
  %5062 = add i64 %5061, -1124
  %5063 = load i64, i64* %3, align 8
  %5064 = add i64 %5063, 6
  store i64 %5064, i64* %3, align 8
  %5065 = inttoptr i64 %5062 to i32*
  %5066 = load i32, i32* %5065, align 4
  %5067 = zext i32 %5066 to i64
  store i64 %5067, i64* %RCX.i4476, align 8
  %5068 = add i64 %5061, -1128
  %5069 = add i64 %5063, 12
  store i64 %5069, i64* %3, align 8
  %5070 = inttoptr i64 %5068 to i32*
  %5071 = load i32, i32* %5070, align 4
  %5072 = sub i32 %5066, %5071
  %5073 = zext i32 %5072 to i64
  %5074 = shl nuw i64 %5073, 32
  %5075 = ashr i64 %5074, 33
  %5076 = trunc i32 %5072 to i8
  %5077 = and i8 %5076, 1
  %5078 = trunc i64 %5075 to i32
  %5079 = and i64 %5075, 4294967295
  store i64 %5079, i64* %RCX.i4476, align 8
  store i8 %5077, i8* %12, align 1
  %5080 = and i32 %5078, 255
  %5081 = tail call i32 @llvm.ctpop.i32(i32 %5080)
  %5082 = trunc i32 %5081 to i8
  %5083 = and i8 %5082, 1
  %5084 = xor i8 %5083, 1
  store i8 %5084, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5085 = icmp eq i32 %5078, 0
  %5086 = zext i1 %5085 to i8
  store i8 %5086, i8* %15, align 1
  %5087 = lshr i64 %5075, 31
  %5088 = trunc i64 %5087 to i8
  %5089 = and i8 %5088, 1
  store i8 %5089, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %5090 = add i64 %5061, -8
  %5091 = add i64 %5063, 18
  store i64 %5091, i64* %3, align 8
  %5092 = inttoptr i64 %5090 to i32*
  %5093 = load i32, i32* %5092, align 4
  %5094 = sext i32 %5093 to i64
  %5095 = shl nsw i64 %5094, 4
  store i64 %5095, i64* %RDX.i658, align 8
  %5096 = load i64, i64* %RAX.i552, align 8
  %5097 = add i64 %5095, %5096
  store i64 %5097, i64* %RAX.i552, align 8
  %5098 = icmp ult i64 %5097, %5096
  %5099 = icmp ult i64 %5097, %5095
  %5100 = or i1 %5098, %5099
  %5101 = zext i1 %5100 to i8
  store i8 %5101, i8* %12, align 1
  %5102 = trunc i64 %5097 to i32
  %5103 = and i32 %5102, 255
  %5104 = tail call i32 @llvm.ctpop.i32(i32 %5103)
  %5105 = trunc i32 %5104 to i8
  %5106 = and i8 %5105, 1
  %5107 = xor i8 %5106, 1
  store i8 %5107, i8* %13, align 1
  %5108 = xor i64 %5095, %5096
  %5109 = xor i64 %5108, %5097
  %5110 = lshr i64 %5109, 4
  %5111 = trunc i64 %5110 to i8
  %5112 = and i8 %5111, 1
  store i8 %5112, i8* %14, align 1
  %5113 = icmp eq i64 %5097, 0
  %5114 = zext i1 %5113 to i8
  store i8 %5114, i8* %15, align 1
  %5115 = lshr i64 %5097, 63
  %5116 = trunc i64 %5115 to i8
  store i8 %5116, i8* %16, align 1
  %5117 = lshr i64 %5096, 63
  %5118 = lshr i64 %5094, 59
  %5119 = and i64 %5118, 1
  %5120 = xor i64 %5115, %5117
  %5121 = xor i64 %5115, %5119
  %5122 = add nuw nsw i64 %5120, %5121
  %5123 = icmp eq i64 %5122, 2
  %5124 = zext i1 %5123 to i8
  store i8 %5124, i8* %17, align 1
  %5125 = add i64 %5097, 12
  %5126 = trunc i64 %5075 to i32
  %5127 = add i64 %5063, 28
  store i64 %5127, i64* %3, align 8
  %5128 = inttoptr i64 %5125 to i32*
  store i32 %5126, i32* %5128, align 4
  %5129 = load i64, i64* %RBP.i, align 8
  %5130 = add i64 %5129, -8
  %5131 = load i64, i64* %3, align 8
  %5132 = add i64 %5131, 3
  store i64 %5132, i64* %3, align 8
  %5133 = inttoptr i64 %5130 to i32*
  %5134 = load i32, i32* %5133, align 4
  %5135 = add i32 %5134, 1
  %5136 = zext i32 %5135 to i64
  store i64 %5136, i64* %RAX.i552, align 8
  %5137 = icmp eq i32 %5134, -1
  %5138 = icmp eq i32 %5135, 0
  %5139 = or i1 %5137, %5138
  %5140 = zext i1 %5139 to i8
  store i8 %5140, i8* %12, align 1
  %5141 = and i32 %5135, 255
  %5142 = tail call i32 @llvm.ctpop.i32(i32 %5141)
  %5143 = trunc i32 %5142 to i8
  %5144 = and i8 %5143, 1
  %5145 = xor i8 %5144, 1
  store i8 %5145, i8* %13, align 1
  %5146 = xor i32 %5135, %5134
  %5147 = lshr i32 %5146, 4
  %5148 = trunc i32 %5147 to i8
  %5149 = and i8 %5148, 1
  store i8 %5149, i8* %14, align 1
  %5150 = zext i1 %5138 to i8
  store i8 %5150, i8* %15, align 1
  %5151 = lshr i32 %5135, 31
  %5152 = trunc i32 %5151 to i8
  store i8 %5152, i8* %16, align 1
  %5153 = lshr i32 %5134, 31
  %5154 = xor i32 %5151, %5153
  %5155 = add nuw nsw i32 %5154, %5151
  %5156 = icmp eq i32 %5155, 2
  %5157 = zext i1 %5156 to i8
  store i8 %5157, i8* %17, align 1
  %5158 = add i64 %5131, 9
  store i64 %5158, i64* %3, align 8
  store i32 %5135, i32* %5133, align 4
  %5159 = load i64, i64* %3, align 8
  %5160 = add i64 %5159, -349
  store i64 %5160, i64* %3, align 8
  br label %block_.L_404c82

block_.L_404e02:                                  ; preds = %block_.L_405046, %block_404cb6
  %5161 = phi i64 [ %.pre314, %block_404cb6 ], [ %5963, %block_.L_405046 ]
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.1, %block_404cb6 ], [ %MEMORY.27, %block_.L_405046 ]
  %5162 = load i64, i64* %RBP.i, align 8
  %5163 = add i64 %5162, -2188
  %5164 = add i64 %5161, 7
  store i64 %5164, i64* %3, align 8
  %5165 = inttoptr i64 %5163 to i32*
  %5166 = load i32, i32* %5165, align 4
  %5167 = add i32 %5166, -16
  %5168 = icmp ult i32 %5166, 16
  %5169 = zext i1 %5168 to i8
  store i8 %5169, i8* %12, align 1
  %5170 = and i32 %5167, 255
  %5171 = tail call i32 @llvm.ctpop.i32(i32 %5170)
  %5172 = trunc i32 %5171 to i8
  %5173 = and i8 %5172, 1
  %5174 = xor i8 %5173, 1
  store i8 %5174, i8* %13, align 1
  %5175 = xor i32 %5166, 16
  %5176 = xor i32 %5175, %5167
  %5177 = lshr i32 %5176, 4
  %5178 = trunc i32 %5177 to i8
  %5179 = and i8 %5178, 1
  store i8 %5179, i8* %14, align 1
  %5180 = icmp eq i32 %5167, 0
  %5181 = zext i1 %5180 to i8
  store i8 %5181, i8* %15, align 1
  %5182 = lshr i32 %5167, 31
  %5183 = trunc i32 %5182 to i8
  store i8 %5183, i8* %16, align 1
  %5184 = lshr i32 %5166, 31
  %5185 = xor i32 %5182, %5184
  %5186 = add nuw nsw i32 %5185, %5184
  %5187 = icmp eq i32 %5186, 2
  %5188 = zext i1 %5187 to i8
  store i8 %5188, i8* %17, align 1
  %5189 = icmp ne i8 %5183, 0
  %5190 = xor i1 %5189, %5187
  %.v477 = select i1 %5190, i64 13, i64 605
  %5191 = add i64 %5161, %.v477
  store i64 %5191, i64* %3, align 8
  br i1 %5190, label %block_404e0f, label %block_.L_40505f

block_404e0f:                                     ; preds = %block_.L_404e02
  %5192 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5192, i64* %RAX.i552, align 8
  %5193 = add i64 %5192, 72444
  %5194 = add i64 %5191, 15
  store i64 %5194, i64* %3, align 8
  %5195 = inttoptr i64 %5193 to i32*
  %5196 = load i32, i32* %5195, align 4
  store i8 0, i8* %12, align 1
  %5197 = and i32 %5196, 255
  %5198 = tail call i32 @llvm.ctpop.i32(i32 %5197)
  %5199 = trunc i32 %5198 to i8
  %5200 = and i8 %5199, 1
  %5201 = xor i8 %5200, 1
  store i8 %5201, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5202 = icmp eq i32 %5196, 0
  %5203 = zext i1 %5202 to i8
  store i8 %5203, i8* %15, align 1
  %5204 = lshr i32 %5196, 31
  %5205 = trunc i32 %5204 to i8
  store i8 %5205, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v498 = select i1 %5202, i64 21, i64 56
  %5206 = add i64 %5191, %.v498
  store i64 %5206, i64* %3, align 8
  br i1 %5202, label %block_404e24, label %block_.L_404e47

block_404e24:                                     ; preds = %block_404e0f
  %5207 = load i32, i32* bitcast (%G_0x6d4750_type* @G_0x6d4750 to i32*), align 8
  store i8 0, i8* %12, align 1
  %5208 = and i32 %5207, 255
  %5209 = tail call i32 @llvm.ctpop.i32(i32 %5208)
  %5210 = trunc i32 %5209 to i8
  %5211 = and i8 %5210, 1
  %5212 = xor i8 %5211, 1
  store i8 %5212, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5213 = icmp eq i32 %5207, 0
  %5214 = zext i1 %5213 to i8
  store i8 %5214, i8* %15, align 1
  %5215 = lshr i32 %5207, 31
  %5216 = trunc i32 %5215 to i8
  store i8 %5216, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v504 = select i1 %5213, i64 76, i64 14
  %5217 = add i64 %5206, %.v504
  store i64 %5217, i64* %3, align 8
  br i1 %5213, label %block_.L_404e70, label %block_404e32

block_404e32:                                     ; preds = %block_404e24
  store i64 %5192, i64* %RAX.i552, align 8
  %5218 = add i64 %5192, 72008
  %5219 = add i64 %5217, 15
  store i64 %5219, i64* %3, align 8
  %5220 = inttoptr i64 %5218 to i32*
  %5221 = load i32, i32* %5220, align 4
  store i8 0, i8* %12, align 1
  %5222 = and i32 %5221, 255
  %5223 = tail call i32 @llvm.ctpop.i32(i32 %5222)
  %5224 = trunc i32 %5223 to i8
  %5225 = and i8 %5224, 1
  %5226 = xor i8 %5225, 1
  store i8 %5226, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5227 = icmp eq i32 %5221, 0
  %5228 = zext i1 %5227 to i8
  store i8 %5228, i8* %15, align 1
  %5229 = lshr i32 %5221, 31
  %5230 = trunc i32 %5229 to i8
  store i8 %5230, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v505 = select i1 %5227, i64 62, i64 21
  %5231 = add i64 %5217, %.v505
  store i64 %5231, i64* %3, align 8
  br i1 %5227, label %block_.L_404e70, label %block_.L_404e47

block_.L_404e47:                                  ; preds = %block_404e0f, %block_404e32
  %5232 = phi i64 [ %5231, %block_404e32 ], [ %5206, %block_404e0f ]
  %5233 = add i64 %5232, 7
  store i64 %5233, i64* %3, align 8
  %5234 = load i32, i32* %5165, align 4
  %5235 = sext i32 %5234 to i64
  store i64 %5235, i64* %RAX.i552, align 8
  %5236 = shl nsw i64 %5235, 1
  %5237 = add nsw i64 %5236, 4924288
  %5238 = add i64 %5232, 15
  store i64 %5238, i64* %3, align 8
  %5239 = inttoptr i64 %5237 to i8*
  %5240 = load i8, i8* %5239, align 2
  %5241 = zext i8 %5240 to i64
  store i64 %5241, i64* %RCX.i4476, align 8
  %5242 = add i64 %5162, -8
  %5243 = zext i8 %5240 to i32
  %5244 = add i64 %5232, 18
  store i64 %5244, i64* %3, align 8
  %5245 = inttoptr i64 %5242 to i32*
  store i32 %5243, i32* %5245, align 4
  %5246 = load i64, i64* %RBP.i, align 8
  %5247 = add i64 %5246, -2188
  %5248 = load i64, i64* %3, align 8
  %5249 = add i64 %5248, 7
  store i64 %5249, i64* %3, align 8
  %5250 = inttoptr i64 %5247 to i32*
  %5251 = load i32, i32* %5250, align 4
  %5252 = sext i32 %5251 to i64
  store i64 %5252, i64* %RAX.i552, align 8
  %5253 = shl nsw i64 %5252, 1
  %5254 = add nsw i64 %5253, 4924289
  %5255 = add i64 %5248, 15
  store i64 %5255, i64* %3, align 8
  %5256 = inttoptr i64 %5254 to i8*
  %5257 = load i8, i8* %5256, align 1
  %5258 = zext i8 %5257 to i64
  store i64 %5258, i64* %RCX.i4476, align 8
  %5259 = add i64 %5246, -12
  %5260 = zext i8 %5257 to i32
  %5261 = add i64 %5248, 18
  store i64 %5261, i64* %3, align 8
  %5262 = inttoptr i64 %5259 to i32*
  store i32 %5260, i32* %5262, align 4
  %5263 = load i64, i64* %3, align 8
  %5264 = add i64 %5263, 41
  store i64 %5264, i64* %3, align 8
  br label %block_.L_404e94

block_.L_404e70:                                  ; preds = %block_404e32, %block_404e24
  %5265 = phi i64 [ %5231, %block_404e32 ], [ %5217, %block_404e24 ]
  %5266 = add i64 %5265, 7
  store i64 %5266, i64* %3, align 8
  %5267 = load i32, i32* %5165, align 4
  %5268 = sext i32 %5267 to i64
  store i64 %5268, i64* %RAX.i552, align 8
  %5269 = shl nsw i64 %5268, 1
  %5270 = add nsw i64 %5269, 4924256
  %5271 = add i64 %5265, 15
  store i64 %5271, i64* %3, align 8
  %5272 = inttoptr i64 %5270 to i8*
  %5273 = load i8, i8* %5272, align 2
  %5274 = zext i8 %5273 to i64
  store i64 %5274, i64* %RCX.i4476, align 8
  %5275 = add i64 %5162, -8
  %5276 = zext i8 %5273 to i32
  %5277 = add i64 %5265, 18
  store i64 %5277, i64* %3, align 8
  %5278 = inttoptr i64 %5275 to i32*
  store i32 %5276, i32* %5278, align 4
  %5279 = load i64, i64* %RBP.i, align 8
  %5280 = add i64 %5279, -2188
  %5281 = load i64, i64* %3, align 8
  %5282 = add i64 %5281, 7
  store i64 %5282, i64* %3, align 8
  %5283 = inttoptr i64 %5280 to i32*
  %5284 = load i32, i32* %5283, align 4
  %5285 = sext i32 %5284 to i64
  store i64 %5285, i64* %RAX.i552, align 8
  %5286 = shl nsw i64 %5285, 1
  %5287 = add nsw i64 %5286, 4924257
  %5288 = add i64 %5281, 15
  store i64 %5288, i64* %3, align 8
  %5289 = inttoptr i64 %5287 to i8*
  %5290 = load i8, i8* %5289, align 1
  %5291 = zext i8 %5290 to i64
  store i64 %5291, i64* %RCX.i4476, align 8
  %5292 = add i64 %5279, -12
  %5293 = zext i8 %5290 to i32
  %5294 = add i64 %5281, 18
  store i64 %5294, i64* %3, align 8
  %5295 = inttoptr i64 %5292 to i32*
  store i32 %5293, i32* %5295, align 4
  %.pre411 = load i64, i64* %3, align 8
  br label %block_.L_404e94

block_.L_404e94:                                  ; preds = %block_.L_404e70, %block_.L_404e47
  %5296 = phi i64 [ %.pre411, %block_.L_404e70 ], [ %5264, %block_.L_404e47 ]
  %5297 = load i64, i64* %RBP.i, align 8
  %5298 = add i64 %5297, -2180
  %5299 = add i64 %5296, 6
  store i64 %5299, i64* %3, align 8
  %5300 = inttoptr i64 %5298 to i32*
  %5301 = load i32, i32* %5300, align 4
  %5302 = add i32 %5301, 1
  %5303 = zext i32 %5302 to i64
  store i64 %5303, i64* %RAX.i552, align 8
  %5304 = icmp eq i32 %5301, -1
  %5305 = icmp eq i32 %5302, 0
  %5306 = or i1 %5304, %5305
  %5307 = zext i1 %5306 to i8
  store i8 %5307, i8* %12, align 1
  %5308 = and i32 %5302, 255
  %5309 = tail call i32 @llvm.ctpop.i32(i32 %5308)
  %5310 = trunc i32 %5309 to i8
  %5311 = and i8 %5310, 1
  %5312 = xor i8 %5311, 1
  store i8 %5312, i8* %13, align 1
  %5313 = xor i32 %5302, %5301
  %5314 = lshr i32 %5313, 4
  %5315 = trunc i32 %5314 to i8
  %5316 = and i8 %5315, 1
  store i8 %5316, i8* %14, align 1
  %5317 = zext i1 %5305 to i8
  store i8 %5317, i8* %15, align 1
  %5318 = lshr i32 %5302, 31
  %5319 = trunc i32 %5318 to i8
  store i8 %5319, i8* %16, align 1
  %5320 = lshr i32 %5301, 31
  %5321 = xor i32 %5318, %5320
  %5322 = add nuw nsw i32 %5321, %5318
  %5323 = icmp eq i32 %5322, 2
  %5324 = zext i1 %5323 to i8
  store i8 %5324, i8* %17, align 1
  %5325 = add i64 %5296, 15
  store i64 %5325, i64* %3, align 8
  store i32 %5302, i32* %5300, align 4
  %5326 = load i64, i64* %RBP.i, align 8
  %5327 = add i64 %5326, -2260
  %5328 = load i64, i64* %3, align 8
  %5329 = add i64 %5328, 7
  store i64 %5329, i64* %3, align 8
  %5330 = inttoptr i64 %5327 to i32*
  %5331 = load i32, i32* %5330, align 4
  store i8 0, i8* %12, align 1
  %5332 = and i32 %5331, 255
  %5333 = tail call i32 @llvm.ctpop.i32(i32 %5332)
  %5334 = trunc i32 %5333 to i8
  %5335 = and i8 %5334, 1
  %5336 = xor i8 %5335, 1
  store i8 %5336, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5337 = icmp eq i32 %5331, 0
  %5338 = zext i1 %5337 to i8
  store i8 %5338, i8* %15, align 1
  %5339 = lshr i32 %5331, 31
  %5340 = trunc i32 %5339 to i8
  store i8 %5340, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v465 = select i1 %5337, i64 54, i64 13
  %5341 = add i64 %5328, %.v465
  %5342 = add i64 %5326, -1120
  store i64 %5342, i64* %RAX.i552, align 8
  %5343 = add i64 %5326, -8
  %5344 = add i64 %5341, 11
  store i64 %5344, i64* %3, align 8
  %5345 = inttoptr i64 %5343 to i32*
  %5346 = load i32, i32* %5345, align 4
  %5347 = sext i32 %5346 to i64
  %5348 = shl nsw i64 %5347, 4
  store i64 %5348, i64* %RCX.i4476, align 8
  %5349 = add i64 %5348, %5342
  store i64 %5349, i64* %RAX.i552, align 8
  %5350 = icmp ult i64 %5349, %5342
  %5351 = icmp ult i64 %5349, %5348
  %5352 = or i1 %5350, %5351
  %5353 = zext i1 %5352 to i8
  store i8 %5353, i8* %12, align 1
  %5354 = trunc i64 %5349 to i32
  %5355 = and i32 %5354, 255
  %5356 = tail call i32 @llvm.ctpop.i32(i32 %5355)
  %5357 = trunc i32 %5356 to i8
  %5358 = and i8 %5357, 1
  %5359 = xor i8 %5358, 1
  store i8 %5359, i8* %13, align 1
  %5360 = xor i64 %5348, %5342
  %5361 = xor i64 %5360, %5349
  %5362 = lshr i64 %5361, 4
  %5363 = trunc i64 %5362 to i8
  %5364 = and i8 %5363, 1
  store i8 %5364, i8* %14, align 1
  %5365 = icmp eq i64 %5349, 0
  %5366 = zext i1 %5365 to i8
  store i8 %5366, i8* %15, align 1
  %5367 = lshr i64 %5349, 63
  %5368 = trunc i64 %5367 to i8
  store i8 %5368, i8* %16, align 1
  %5369 = lshr i64 %5342, 63
  %5370 = lshr i64 %5347, 59
  %5371 = and i64 %5370, 1
  %5372 = xor i64 %5367, %5369
  %5373 = xor i64 %5367, %5371
  %5374 = add nuw nsw i64 %5372, %5373
  %5375 = icmp eq i64 %5374, 2
  %5376 = zext i1 %5375 to i8
  store i8 %5376, i8* %17, align 1
  %5377 = add i64 %5326, -12
  %5378 = add i64 %5341, 22
  store i64 %5378, i64* %3, align 8
  %5379 = inttoptr i64 %5377 to i32*
  %5380 = load i32, i32* %5379, align 4
  %5381 = sext i32 %5380 to i64
  store i64 %5381, i64* %RCX.i4476, align 8
  %5382 = shl nsw i64 %5381, 2
  %5383 = add i64 %5382, %5349
  %5384 = add i64 %5341, 25
  store i64 %5384, i64* %3, align 8
  %5385 = inttoptr i64 %5383 to i32*
  %5386 = load i32, i32* %5385, align 4
  %5387 = zext i32 %5386 to i64
  store i64 %5387, i64* %RDI.i4259, align 8
  br i1 %5337, label %block_.L_404ed9, label %block_404eb0

block_404eb0:                                     ; preds = %block_.L_404e94
  %5388 = add i64 %5341, -16048
  %5389 = add i64 %5341, 30
  %5390 = load i64, i64* %6, align 8
  %5391 = add i64 %5390, -8
  %5392 = inttoptr i64 %5391 to i64*
  store i64 %5389, i64* %5392, align 8
  store i64 %5391, i64* %6, align 8
  store i64 %5388, i64* %3, align 8
  %5393 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.19)
  %5394 = load i64, i64* %RBP.i, align 8
  %5395 = add i64 %5394, -2192
  %5396 = load i32, i32* %EAX.i551, align 4
  %5397 = load i64, i64* %3, align 8
  %5398 = add i64 %5397, 6
  store i64 %5398, i64* %3, align 8
  %5399 = inttoptr i64 %5395 to i32*
  store i32 %5396, i32* %5399, align 4
  %5400 = load i64, i64* %3, align 8
  %5401 = add i64 %5400, 112
  store i64 %5401, i64* %3, align 8
  br label %block_.L_404f44

block_.L_404ed9:                                  ; preds = %block_.L_404e94
  %5402 = add i64 %5341, -16089
  %5403 = add i64 %5341, 30
  %5404 = load i64, i64* %6, align 8
  %5405 = add i64 %5404, -8
  %5406 = inttoptr i64 %5405 to i64*
  store i64 %5403, i64* %5406, align 8
  store i64 %5405, i64* %6, align 8
  store i64 %5402, i64* %3, align 8
  %5407 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.19)
  %5408 = load i64, i64* %3, align 8
  store i64 7405600, i64* %RCX.i4476, align 8
  store i64 ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64), i64* %RDX.i658, align 8
  %5409 = load i64, i64* %RBP.i, align 8
  %5410 = add i64 %5409, -2200
  %5411 = add i64 %5408, 27
  store i64 %5411, i64* %3, align 8
  %5412 = inttoptr i64 %5410 to i32*
  %5413 = load i32, i32* %5412, align 4
  %5414 = sext i32 %5413 to i64
  %5415 = shl nsw i64 %5414, 6
  store i64 %5415, i64* %RSI.i757, align 8
  %5416 = add i64 %5415, ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64)
  store i64 %5416, i64* %RDX.i658, align 8
  %5417 = icmp ult i64 %5416, ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64)
  %5418 = icmp ult i64 %5416, %5415
  %5419 = or i1 %5417, %5418
  %5420 = zext i1 %5419 to i8
  store i8 %5420, i8* %12, align 1
  %5421 = trunc i64 %5416 to i32
  %5422 = and i32 %5421, 248
  %5423 = tail call i32 @llvm.ctpop.i32(i32 %5422)
  %5424 = trunc i32 %5423 to i8
  %5425 = and i8 %5424, 1
  %5426 = xor i8 %5425, 1
  store i8 %5426, i8* %13, align 1
  %5427 = xor i64 %5416, ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64)
  %5428 = lshr i64 %5427, 4
  %5429 = trunc i64 %5428 to i8
  %5430 = and i8 %5429, 1
  store i8 %5430, i8* %14, align 1
  %5431 = icmp eq i64 %5416, 0
  %5432 = zext i1 %5431 to i8
  store i8 %5432, i8* %15, align 1
  %5433 = lshr i64 %5416, 63
  %5434 = trunc i64 %5433 to i8
  store i8 %5434, i8* %16, align 1
  %5435 = lshr i64 %5414, 57
  %5436 = and i64 %5435, 1
  %5437 = xor i64 %5433, lshr (i64 ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64), i64 63)
  %5438 = xor i64 %5433, %5436
  %5439 = add nuw nsw i64 %5437, %5438
  %5440 = icmp eq i64 %5439, 2
  %5441 = zext i1 %5440 to i8
  store i8 %5441, i8* %17, align 1
  %5442 = load i64, i64* %RAX.i552, align 8
  %5443 = inttoptr i64 %5416 to i32*
  %5444 = add i64 %5408, 37
  store i64 %5444, i64* %3, align 8
  %5445 = load i32, i32* %5443, align 8
  %5446 = shl i64 %5442, 32
  %5447 = ashr exact i64 %5446, 32
  %5448 = sext i32 %5445 to i64
  %5449 = mul nsw i64 %5448, %5447
  %5450 = trunc i64 %5449 to i32
  %5451 = and i64 %5449, 4294967295
  store i64 %5451, i64* %RAX.i552, align 8
  %5452 = shl i64 %5449, 32
  %5453 = ashr exact i64 %5452, 32
  %5454 = icmp ne i64 %5453, %5449
  %5455 = zext i1 %5454 to i8
  store i8 %5455, i8* %12, align 1
  %5456 = and i32 %5450, 255
  %5457 = tail call i32 @llvm.ctpop.i32(i32 %5456)
  %5458 = trunc i32 %5457 to i8
  %5459 = and i8 %5458, 1
  %5460 = xor i8 %5459, 1
  store i8 %5460, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %5461 = lshr i32 %5450, 31
  %5462 = trunc i32 %5461 to i8
  store i8 %5462, i8* %16, align 1
  store i8 %5455, i8* %17, align 1
  %5463 = add i64 %5409, -2196
  %5464 = add i64 %5408, 44
  store i64 %5464, i64* %3, align 8
  %5465 = inttoptr i64 %5463 to i32*
  %5466 = load i32, i32* %5465, align 4
  %5467 = sext i32 %5466 to i64
  %5468 = shl nsw i64 %5467, 6
  store i64 %5468, i64* %RDX.i658, align 8
  %5469 = load i64, i64* %RCX.i4476, align 8
  %5470 = add i64 %5468, %5469
  store i64 %5470, i64* %RCX.i4476, align 8
  %5471 = icmp ult i64 %5470, %5469
  %5472 = icmp ult i64 %5470, %5468
  %5473 = or i1 %5471, %5472
  %5474 = zext i1 %5473 to i8
  store i8 %5474, i8* %12, align 1
  %5475 = trunc i64 %5470 to i32
  %5476 = and i32 %5475, 255
  %5477 = tail call i32 @llvm.ctpop.i32(i32 %5476)
  %5478 = trunc i32 %5477 to i8
  %5479 = and i8 %5478, 1
  %5480 = xor i8 %5479, 1
  store i8 %5480, i8* %13, align 1
  %5481 = xor i64 %5469, %5470
  %5482 = lshr i64 %5481, 4
  %5483 = trunc i64 %5482 to i8
  %5484 = and i8 %5483, 1
  store i8 %5484, i8* %14, align 1
  %5485 = icmp eq i64 %5470, 0
  %5486 = zext i1 %5485 to i8
  store i8 %5486, i8* %15, align 1
  %5487 = lshr i64 %5470, 63
  %5488 = trunc i64 %5487 to i8
  store i8 %5488, i8* %16, align 1
  %5489 = lshr i64 %5469, 63
  %5490 = lshr i64 %5467, 57
  %5491 = and i64 %5490, 1
  %5492 = xor i64 %5487, %5489
  %5493 = xor i64 %5487, %5491
  %5494 = add nuw nsw i64 %5492, %5493
  %5495 = icmp eq i64 %5494, 2
  %5496 = zext i1 %5495 to i8
  store i8 %5496, i8* %17, align 1
  %5497 = inttoptr i64 %5470 to i32*
  %5498 = add i64 %5408, 53
  store i64 %5498, i64* %3, align 8
  %5499 = load i32, i32* %5497, align 4
  %5500 = shl i32 %5499, 1
  %5501 = zext i32 %5500 to i64
  store i64 %5501, i64* %RDI.i4259, align 8
  %5502 = load i64, i64* %RAX.i552, align 8
  %5503 = trunc i64 %5502 to i32
  %5504 = add i32 %5500, %5503
  %5505 = zext i32 %5504 to i64
  store i64 %5505, i64* %RAX.i552, align 8
  %5506 = icmp ult i32 %5504, %5503
  %5507 = icmp ult i32 %5504, %5500
  %5508 = or i1 %5506, %5507
  %5509 = zext i1 %5508 to i8
  store i8 %5509, i8* %12, align 1
  %5510 = and i32 %5504, 255
  %5511 = tail call i32 @llvm.ctpop.i32(i32 %5510)
  %5512 = trunc i32 %5511 to i8
  %5513 = and i8 %5512, 1
  %5514 = xor i8 %5513, 1
  store i8 %5514, i8* %13, align 1
  %5515 = xor i64 %5501, %5502
  %5516 = trunc i64 %5515 to i32
  %5517 = xor i32 %5516, %5504
  %5518 = lshr i32 %5517, 4
  %5519 = trunc i32 %5518 to i8
  %5520 = and i8 %5519, 1
  store i8 %5520, i8* %14, align 1
  %5521 = icmp eq i32 %5504, 0
  %5522 = zext i1 %5521 to i8
  store i8 %5522, i8* %15, align 1
  %5523 = lshr i32 %5504, 31
  %5524 = trunc i32 %5523 to i8
  store i8 %5524, i8* %16, align 1
  %5525 = lshr i32 %5503, 31
  %5526 = lshr i32 %5499, 30
  %5527 = and i32 %5526, 1
  %5528 = xor i32 %5523, %5525
  %5529 = xor i32 %5523, %5527
  %5530 = add nuw nsw i32 %5528, %5529
  %5531 = icmp eq i32 %5530, 2
  %5532 = zext i1 %5531 to i8
  store i8 %5532, i8* %17, align 1
  %5533 = load i64, i64* %RBP.i, align 8
  %5534 = add i64 %5533, -2204
  %5535 = add i64 %5408, 63
  store i64 %5535, i64* %3, align 8
  %5536 = inttoptr i64 %5534 to i32*
  %5537 = load i32, i32* %5536, align 4
  %5538 = add i32 %5537, 1
  %5539 = zext i32 %5538 to i64
  store i64 %5539, i64* %RDI.i4259, align 8
  %5540 = icmp eq i32 %5537, -1
  %5541 = icmp eq i32 %5538, 0
  %5542 = or i1 %5540, %5541
  %5543 = zext i1 %5542 to i8
  store i8 %5543, i8* %12, align 1
  %5544 = and i32 %5538, 255
  %5545 = tail call i32 @llvm.ctpop.i32(i32 %5544)
  %5546 = trunc i32 %5545 to i8
  %5547 = and i8 %5546, 1
  %5548 = xor i8 %5547, 1
  store i8 %5548, i8* %13, align 1
  %5549 = xor i32 %5538, %5537
  %5550 = lshr i32 %5549, 4
  %5551 = trunc i32 %5550 to i8
  %5552 = and i8 %5551, 1
  store i8 %5552, i8* %14, align 1
  %5553 = zext i1 %5541 to i8
  store i8 %5553, i8* %15, align 1
  %5554 = lshr i32 %5538, 31
  %5555 = trunc i32 %5554 to i8
  store i8 %5555, i8* %16, align 1
  %5556 = lshr i32 %5537, 31
  %5557 = xor i32 %5554, %5556
  %5558 = add nuw nsw i32 %5557, %5554
  %5559 = icmp eq i32 %5558, 2
  %5560 = zext i1 %5559 to i8
  store i8 %5560, i8* %17, align 1
  store i64 %5539, i64* %RCX.i4476, align 8
  %5561 = add i64 %5408, 70
  store i64 %5561, i64* %3, align 8
  %5562 = trunc i32 %5538 to i5
  switch i5 %5562, label %5566 [
    i5 0, label %routine_sarl__cl___eax.exit2797
    i5 1, label %5563
  ]

; <label>:5563:                                   ; preds = %block_.L_404ed9
  %5564 = shl nuw i64 %5505, 32
  %5565 = ashr i64 %5564, 33
  br label %5573

; <label>:5566:                                   ; preds = %block_.L_404ed9
  %5567 = and i32 %5538, 31
  %5568 = zext i32 %5567 to i64
  %5569 = add nsw i64 %5568, -1
  %5570 = sext i32 %5504 to i64
  %5571 = ashr i64 %5570, %5569
  %5572 = lshr i64 %5571, 1
  br label %5573

; <label>:5573:                                   ; preds = %5566, %5563
  %5574 = phi i64 [ %5572, %5566 ], [ %5565, %5563 ]
  %5575 = phi i64 [ %5571, %5566 ], [ %5505, %5563 ]
  %5576 = trunc i64 %5575 to i8
  %5577 = and i8 %5576, 1
  %5578 = trunc i64 %5574 to i32
  %5579 = and i64 %5574, 4294967295
  store i64 %5579, i64* %RAX.i552, align 8
  store i8 %5577, i8* %12, align 1
  %5580 = and i32 %5578, 255
  %5581 = tail call i32 @llvm.ctpop.i32(i32 %5580)
  %5582 = trunc i32 %5581 to i8
  %5583 = and i8 %5582, 1
  %5584 = xor i8 %5583, 1
  store i8 %5584, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5585 = icmp eq i32 %5578, 0
  %5586 = zext i1 %5585 to i8
  store i8 %5586, i8* %15, align 1
  %5587 = lshr i32 %5578, 31
  %5588 = trunc i32 %5587 to i8
  store i8 %5588, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %5589 = trunc i64 %5574 to i32
  br label %routine_sarl__cl___eax.exit2797

routine_sarl__cl___eax.exit2797:                  ; preds = %5573, %block_.L_404ed9
  %5590 = phi i32 [ %5589, %5573 ], [ %5504, %block_.L_404ed9 ]
  %5591 = add i64 %5533, -2192
  %5592 = add i64 %5408, 76
  store i64 %5592, i64* %3, align 8
  %5593 = inttoptr i64 %5591 to i32*
  store i32 %5590, i32* %5593, align 4
  %.pre412 = load i64, i64* %3, align 8
  br label %block_.L_404f44

block_.L_404f44:                                  ; preds = %routine_sarl__cl___eax.exit2797, %block_404eb0
  %5594 = phi i64 [ %.pre412, %routine_sarl__cl___eax.exit2797 ], [ %5401, %block_404eb0 ]
  %MEMORY.23 = phi %struct.Memory* [ %5407, %routine_sarl__cl___eax.exit2797 ], [ %5393, %block_404eb0 ]
  %5595 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5595, i64* %RAX.i552, align 8
  %5596 = add i64 %5595, 2356
  %5597 = add i64 %5594, 15
  store i64 %5597, i64* %3, align 8
  %5598 = inttoptr i64 %5596 to i32*
  %5599 = load i32, i32* %5598, align 4
  store i8 0, i8* %12, align 1
  %5600 = and i32 %5599, 255
  %5601 = tail call i32 @llvm.ctpop.i32(i32 %5600)
  %5602 = trunc i32 %5601 to i8
  %5603 = and i8 %5602, 1
  %5604 = xor i8 %5603, 1
  store i8 %5604, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5605 = icmp eq i32 %5599, 0
  %5606 = zext i1 %5605 to i8
  store i8 %5606, i8* %15, align 1
  %5607 = lshr i32 %5599, 31
  %5608 = trunc i32 %5607 to i8
  store i8 %5608, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v499 = select i1 %5605, i64 21, i64 70
  %5609 = add i64 %5594, %.v499
  store i64 %5609, i64* %3, align 8
  br i1 %5605, label %block_404f59, label %block_.L_404f8a

block_404f59:                                     ; preds = %block_.L_404f44
  %5610 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5610, i64* %RAX.i552, align 8
  %5611 = add i64 %5610, 40
  %5612 = add i64 %5609, 12
  store i64 %5612, i64* %3, align 8
  %5613 = inttoptr i64 %5611 to i32*
  %5614 = load i32, i32* %5613, align 4
  %5615 = add i32 %5614, -10
  %5616 = icmp ult i32 %5614, 10
  %5617 = zext i1 %5616 to i8
  store i8 %5617, i8* %12, align 1
  %5618 = and i32 %5615, 255
  %5619 = tail call i32 @llvm.ctpop.i32(i32 %5618)
  %5620 = trunc i32 %5619 to i8
  %5621 = and i8 %5620, 1
  %5622 = xor i8 %5621, 1
  store i8 %5622, i8* %13, align 1
  %5623 = xor i32 %5615, %5614
  %5624 = lshr i32 %5623, 4
  %5625 = trunc i32 %5624 to i8
  %5626 = and i8 %5625, 1
  store i8 %5626, i8* %14, align 1
  %5627 = icmp eq i32 %5615, 0
  %5628 = zext i1 %5627 to i8
  store i8 %5628, i8* %15, align 1
  %5629 = lshr i32 %5615, 31
  %5630 = trunc i32 %5629 to i8
  store i8 %5630, i8* %16, align 1
  %5631 = lshr i32 %5614, 31
  %5632 = xor i32 %5629, %5631
  %5633 = add nuw nsw i32 %5632, %5631
  %5634 = icmp eq i32 %5633, 2
  %5635 = zext i1 %5634 to i8
  store i8 %5635, i8* %17, align 1
  %5636 = icmp ne i8 %5630, 0
  %5637 = xor i1 %5636, %5634
  %.v502 = select i1 %5637, i64 18, i64 49
  %5638 = add i64 %5609, %.v502
  store i64 %5638, i64* %3, align 8
  br i1 %5637, label %block_404f6b, label %block_.L_404f8a

block_404f6b:                                     ; preds = %block_404f59
  %5639 = load i64, i64* %RBP.i, align 8
  %5640 = add i64 %5639, -2192
  %5641 = add i64 %5638, 10
  store i64 %5641, i64* %3, align 8
  %5642 = inttoptr i64 %5640 to i32*
  %5643 = load i32, i32* %5642, align 4
  %5644 = add i32 %5643, -2063
  %5645 = icmp ult i32 %5643, 2063
  %5646 = zext i1 %5645 to i8
  store i8 %5646, i8* %12, align 1
  %5647 = and i32 %5644, 255
  %5648 = tail call i32 @llvm.ctpop.i32(i32 %5647)
  %5649 = trunc i32 %5648 to i8
  %5650 = and i8 %5649, 1
  %5651 = xor i8 %5650, 1
  store i8 %5651, i8* %13, align 1
  %5652 = xor i32 %5644, %5643
  %5653 = lshr i32 %5652, 4
  %5654 = trunc i32 %5653 to i8
  %5655 = and i8 %5654, 1
  store i8 %5655, i8* %14, align 1
  %5656 = icmp eq i32 %5644, 0
  %5657 = zext i1 %5656 to i8
  store i8 %5657, i8* %15, align 1
  %5658 = lshr i32 %5644, 31
  %5659 = trunc i32 %5658 to i8
  store i8 %5659, i8* %16, align 1
  %5660 = lshr i32 %5643, 31
  %5661 = xor i32 %5658, %5660
  %5662 = add nuw nsw i32 %5661, %5660
  %5663 = icmp eq i32 %5662, 2
  %5664 = zext i1 %5663 to i8
  store i8 %5664, i8* %17, align 1
  %5665 = icmp ne i8 %5659, 0
  %5666 = xor i1 %5665, %5663
  %5667 = or i1 %5656, %5666
  %.v503 = select i1 %5667, i64 26, i64 16
  %5668 = add i64 %5638, %.v503
  store i64 %5668, i64* %3, align 8
  br i1 %5667, label %block_.L_404f85, label %block_404f7b

block_404f7b:                                     ; preds = %block_404f6b
  %5669 = add i64 %5668, 10
  store i64 %5669, i64* %3, align 8
  store i32 2063, i32* %5642, align 4
  %.pre413 = load i64, i64* %3, align 8
  br label %block_.L_404f85

block_.L_404f85:                                  ; preds = %block_404f7b, %block_404f6b
  %5670 = phi i64 [ %.pre413, %block_404f7b ], [ %5668, %block_404f6b ]
  %5671 = add i64 %5670, 5
  store i64 %5671, i64* %3, align 8
  br label %block_.L_404f8a

block_.L_404f8a:                                  ; preds = %block_.L_404f44, %block_404f59, %block_.L_404f85
  %5672 = phi i64 [ %5638, %block_404f59 ], [ %5671, %block_.L_404f85 ], [ %5609, %block_.L_404f44 ]
  %5673 = load i64, i64* %RBP.i, align 8
  %5674 = add i64 %5673, -2192
  %5675 = add i64 %5672, 7
  store i64 %5675, i64* %3, align 8
  %5676 = inttoptr i64 %5674 to i32*
  %5677 = load i32, i32* %5676, align 4
  store i8 0, i8* %12, align 1
  %5678 = and i32 %5677, 255
  %5679 = tail call i32 @llvm.ctpop.i32(i32 %5678)
  %5680 = trunc i32 %5679 to i8
  %5681 = and i8 %5680, 1
  %5682 = xor i8 %5681, 1
  store i8 %5682, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5683 = icmp eq i32 %5677, 0
  %5684 = zext i1 %5683 to i8
  store i8 %5684, i8* %15, align 1
  %5685 = lshr i32 %5677, 31
  %5686 = trunc i32 %5685 to i8
  store i8 %5686, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v500 = select i1 %5683, i64 114, i64 13
  %5687 = add i64 %5672, %.v500
  store i64 %5687, i64* %3, align 8
  br i1 %5683, label %block_.L_404ffc, label %block_404f97

block_404f97:                                     ; preds = %block_.L_404f8a
  %5688 = add i64 %5673, -1120
  store i64 %5688, i64* %RAX.i552, align 8
  %5689 = add i64 %5687, 13
  store i64 %5689, i64* %3, align 8
  %5690 = load i32, i32* %5676, align 4
  %5691 = zext i32 %5690 to i64
  store i64 %5691, i64* %RDI.i4259, align 8
  %5692 = add i64 %5673, -8
  %5693 = add i64 %5687, 17
  store i64 %5693, i64* %3, align 8
  %5694 = inttoptr i64 %5692 to i32*
  %5695 = load i32, i32* %5694, align 4
  %5696 = sext i32 %5695 to i64
  %5697 = shl nsw i64 %5696, 4
  store i64 %5697, i64* %RCX.i4476, align 8
  %5698 = add i64 %5697, %5688
  store i64 %5698, i64* %RAX.i552, align 8
  %5699 = icmp ult i64 %5698, %5688
  %5700 = icmp ult i64 %5698, %5697
  %5701 = or i1 %5699, %5700
  %5702 = zext i1 %5701 to i8
  store i8 %5702, i8* %12, align 1
  %5703 = trunc i64 %5698 to i32
  %5704 = and i32 %5703, 255
  %5705 = tail call i32 @llvm.ctpop.i32(i32 %5704)
  %5706 = trunc i32 %5705 to i8
  %5707 = and i8 %5706, 1
  %5708 = xor i8 %5707, 1
  store i8 %5708, i8* %13, align 1
  %5709 = xor i64 %5697, %5688
  %5710 = xor i64 %5709, %5698
  %5711 = lshr i64 %5710, 4
  %5712 = trunc i64 %5711 to i8
  %5713 = and i8 %5712, 1
  store i8 %5713, i8* %14, align 1
  %5714 = icmp eq i64 %5698, 0
  %5715 = zext i1 %5714 to i8
  store i8 %5715, i8* %15, align 1
  %5716 = lshr i64 %5698, 63
  %5717 = trunc i64 %5716 to i8
  store i8 %5717, i8* %16, align 1
  %5718 = lshr i64 %5688, 63
  %5719 = lshr i64 %5696, 59
  %5720 = and i64 %5719, 1
  %5721 = xor i64 %5716, %5718
  %5722 = xor i64 %5716, %5720
  %5723 = add nuw nsw i64 %5721, %5722
  %5724 = icmp eq i64 %5723, 2
  %5725 = zext i1 %5724 to i8
  store i8 %5725, i8* %17, align 1
  %5726 = add i64 %5673, -12
  %5727 = add i64 %5687, 28
  store i64 %5727, i64* %3, align 8
  %5728 = inttoptr i64 %5726 to i32*
  %5729 = load i32, i32* %5728, align 4
  %5730 = sext i32 %5729 to i64
  store i64 %5730, i64* %RCX.i4476, align 8
  %5731 = shl nsw i64 %5730, 2
  %5732 = add i64 %5731, %5698
  %5733 = add i64 %5687, 31
  store i64 %5733, i64* %3, align 8
  %5734 = inttoptr i64 %5732 to i32*
  %5735 = load i32, i32* %5734, align 4
  %5736 = zext i32 %5735 to i64
  store i64 %5736, i64* %RSI.i757, align 8
  %5737 = add i64 %5687, 459193
  %5738 = add i64 %5687, 36
  %5739 = load i64, i64* %6, align 8
  %5740 = add i64 %5739, -8
  %5741 = inttoptr i64 %5740 to i64*
  store i64 %5738, i64* %5741, align 8
  store i64 %5740, i64* %6, align 8
  store i64 %5737, i64* %3, align 8
  %call2_404fb6 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %5737, %struct.Memory* %MEMORY.23)
  %5742 = load i64, i64* %RBP.i, align 8
  %5743 = add i64 %5742, -2232
  %5744 = load i64, i64* %3, align 8
  %5745 = add i64 %5744, 7
  store i64 %5745, i64* %3, align 8
  %5746 = inttoptr i64 %5743 to i64*
  %5747 = load i64, i64* %5746, align 8
  store i64 %5747, i64* %RCX.i4476, align 8
  %5748 = add i64 %5742, -2184
  %5749 = add i64 %5744, 14
  store i64 %5749, i64* %3, align 8
  %5750 = inttoptr i64 %5748 to i32*
  %5751 = load i32, i32* %5750, align 4
  %5752 = sext i32 %5751 to i64
  store i64 %5752, i64* %RDX.i658, align 8
  %5753 = shl nsw i64 %5752, 2
  %5754 = add i64 %5753, %5747
  %5755 = load i32, i32* %EAX.i551, align 4
  %5756 = add i64 %5744, 17
  store i64 %5756, i64* %3, align 8
  %5757 = inttoptr i64 %5754 to i32*
  store i32 %5755, i32* %5757, align 4
  %5758 = load i64, i64* %RBP.i, align 8
  %5759 = add i64 %5758, -2180
  %5760 = load i64, i64* %3, align 8
  %5761 = add i64 %5760, 6
  store i64 %5761, i64* %3, align 8
  %5762 = inttoptr i64 %5759 to i32*
  %5763 = load i32, i32* %5762, align 4
  %5764 = zext i32 %5763 to i64
  store i64 %5764, i64* %RAX.i552, align 8
  %5765 = add i64 %5758, -2240
  %5766 = add i64 %5760, 13
  store i64 %5766, i64* %3, align 8
  %5767 = inttoptr i64 %5765 to i64*
  %5768 = load i64, i64* %5767, align 8
  store i64 %5768, i64* %RCX.i4476, align 8
  %5769 = add i64 %5758, -2184
  %5770 = add i64 %5760, 20
  store i64 %5770, i64* %3, align 8
  %5771 = inttoptr i64 %5769 to i32*
  %5772 = load i32, i32* %5771, align 4
  %5773 = sext i32 %5772 to i64
  store i64 %5773, i64* %RDX.i658, align 8
  %5774 = shl nsw i64 %5773, 2
  %5775 = add i64 %5774, %5768
  %5776 = add i64 %5760, 23
  store i64 %5776, i64* %3, align 8
  %5777 = inttoptr i64 %5775 to i32*
  store i32 %5763, i32* %5777, align 4
  %5778 = load i64, i64* %RBP.i, align 8
  %5779 = add i64 %5778, -2184
  %5780 = load i64, i64* %3, align 8
  %5781 = add i64 %5780, 6
  store i64 %5781, i64* %3, align 8
  %5782 = inttoptr i64 %5779 to i32*
  %5783 = load i32, i32* %5782, align 4
  %5784 = add i32 %5783, 1
  %5785 = zext i32 %5784 to i64
  store i64 %5785, i64* %RAX.i552, align 8
  %5786 = icmp eq i32 %5783, -1
  %5787 = icmp eq i32 %5784, 0
  %5788 = or i1 %5786, %5787
  %5789 = zext i1 %5788 to i8
  store i8 %5789, i8* %12, align 1
  %5790 = and i32 %5784, 255
  %5791 = tail call i32 @llvm.ctpop.i32(i32 %5790)
  %5792 = trunc i32 %5791 to i8
  %5793 = and i8 %5792, 1
  %5794 = xor i8 %5793, 1
  store i8 %5794, i8* %13, align 1
  %5795 = xor i32 %5784, %5783
  %5796 = lshr i32 %5795, 4
  %5797 = trunc i32 %5796 to i8
  %5798 = and i8 %5797, 1
  store i8 %5798, i8* %14, align 1
  %5799 = zext i1 %5787 to i8
  store i8 %5799, i8* %15, align 1
  %5800 = lshr i32 %5784, 31
  %5801 = trunc i32 %5800 to i8
  store i8 %5801, i8* %16, align 1
  %5802 = lshr i32 %5783, 31
  %5803 = xor i32 %5800, %5802
  %5804 = add nuw nsw i32 %5803, %5800
  %5805 = icmp eq i32 %5804, 2
  %5806 = zext i1 %5805 to i8
  store i8 %5806, i8* %17, align 1
  %5807 = add i64 %5780, 15
  store i64 %5807, i64* %3, align 8
  store i32 %5784, i32* %5782, align 4
  %5808 = load i64, i64* %RBP.i, align 8
  %5809 = add i64 %5808, -2180
  %5810 = load i64, i64* %3, align 8
  %5811 = add i64 %5810, 10
  store i64 %5811, i64* %3, align 8
  %5812 = inttoptr i64 %5809 to i32*
  store i32 -1, i32* %5812, align 4
  %.pre414 = load i64, i64* %RBP.i, align 8
  %.pre415 = load i64, i64* %3, align 8
  br label %block_.L_404ffc

block_.L_404ffc:                                  ; preds = %block_404f97, %block_.L_404f8a
  %5813 = phi i64 [ %5687, %block_.L_404f8a ], [ %.pre415, %block_404f97 ]
  %5814 = phi i64 [ %5673, %block_.L_404f8a ], [ %.pre414, %block_404f97 ]
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.23, %block_.L_404f8a ], [ %call2_404fb6, %block_404f97 ]
  %5815 = add i64 %5814, -2260
  %5816 = add i64 %5813, 7
  store i64 %5816, i64* %3, align 8
  %5817 = inttoptr i64 %5815 to i32*
  %5818 = load i32, i32* %5817, align 4
  store i8 0, i8* %12, align 1
  %5819 = and i32 %5818, 255
  %5820 = tail call i32 @llvm.ctpop.i32(i32 %5819)
  %5821 = trunc i32 %5820 to i8
  %5822 = and i8 %5821, 1
  %5823 = xor i8 %5822, 1
  store i8 %5823, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5824 = icmp eq i32 %5818, 0
  %5825 = zext i1 %5824 to i8
  store i8 %5825, i8* %15, align 1
  %5826 = lshr i32 %5818, 31
  %5827 = trunc i32 %5826 to i8
  store i8 %5827, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v501 = select i1 %5824, i64 13, i64 74
  %5828 = add i64 %5813, %.v501
  store i64 %5828, i64* %3, align 8
  br i1 %5824, label %block_405009, label %block_.L_405046

block_405009:                                     ; preds = %block_.L_404ffc
  %5829 = add i64 %5814, -1120
  store i64 %5829, i64* %RAX.i552, align 8
  %5830 = add i64 %5814, -2192
  %5831 = add i64 %5828, 13
  store i64 %5831, i64* %3, align 8
  %5832 = inttoptr i64 %5830 to i32*
  %5833 = load i32, i32* %5832, align 4
  %5834 = zext i32 %5833 to i64
  store i64 %5834, i64* %RDI.i4259, align 8
  %5835 = add i64 %5814, -8
  %5836 = add i64 %5828, 17
  store i64 %5836, i64* %3, align 8
  %5837 = inttoptr i64 %5835 to i32*
  %5838 = load i32, i32* %5837, align 4
  %5839 = sext i32 %5838 to i64
  %5840 = shl nsw i64 %5839, 4
  store i64 %5840, i64* %RCX.i4476, align 8
  %5841 = add i64 %5840, %5829
  store i64 %5841, i64* %RAX.i552, align 8
  %5842 = icmp ult i64 %5841, %5829
  %5843 = icmp ult i64 %5841, %5840
  %5844 = or i1 %5842, %5843
  %5845 = zext i1 %5844 to i8
  store i8 %5845, i8* %12, align 1
  %5846 = trunc i64 %5841 to i32
  %5847 = and i32 %5846, 255
  %5848 = tail call i32 @llvm.ctpop.i32(i32 %5847)
  %5849 = trunc i32 %5848 to i8
  %5850 = and i8 %5849, 1
  %5851 = xor i8 %5850, 1
  store i8 %5851, i8* %13, align 1
  %5852 = xor i64 %5840, %5829
  %5853 = xor i64 %5852, %5841
  %5854 = lshr i64 %5853, 4
  %5855 = trunc i64 %5854 to i8
  %5856 = and i8 %5855, 1
  store i8 %5856, i8* %14, align 1
  %5857 = icmp eq i64 %5841, 0
  %5858 = zext i1 %5857 to i8
  store i8 %5858, i8* %15, align 1
  %5859 = lshr i64 %5841, 63
  %5860 = trunc i64 %5859 to i8
  store i8 %5860, i8* %16, align 1
  %5861 = lshr i64 %5829, 63
  %5862 = lshr i64 %5839, 59
  %5863 = and i64 %5862, 1
  %5864 = xor i64 %5859, %5861
  %5865 = xor i64 %5859, %5863
  %5866 = add nuw nsw i64 %5864, %5865
  %5867 = icmp eq i64 %5866, 2
  %5868 = zext i1 %5867 to i8
  store i8 %5868, i8* %17, align 1
  %5869 = add i64 %5814, -12
  %5870 = add i64 %5828, 28
  store i64 %5870, i64* %3, align 8
  %5871 = inttoptr i64 %5869 to i32*
  %5872 = load i32, i32* %5871, align 4
  %5873 = sext i32 %5872 to i64
  store i64 %5873, i64* %RCX.i4476, align 8
  %5874 = shl nsw i64 %5873, 2
  %5875 = add i64 %5874, %5841
  %5876 = add i64 %5828, 31
  store i64 %5876, i64* %3, align 8
  %5877 = inttoptr i64 %5875 to i32*
  %5878 = load i32, i32* %5877, align 4
  %5879 = zext i32 %5878 to i64
  store i64 %5879, i64* %RSI.i757, align 8
  %5880 = add i64 %5828, 459079
  %5881 = add i64 %5828, 36
  %5882 = load i64, i64* %6, align 8
  %5883 = add i64 %5882, -8
  %5884 = inttoptr i64 %5883 to i64*
  store i64 %5881, i64* %5884, align 8
  store i64 %5883, i64* %6, align 8
  store i64 %5880, i64* %3, align 8
  %call2_405028 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %5880, %struct.Memory* %MEMORY.26)
  %5885 = load i64, i64* %RBP.i, align 8
  %5886 = add i64 %5885, -1120
  %5887 = load i64, i64* %3, align 8
  store i64 %5886, i64* %RCX.i4476, align 8
  %5888 = add i64 %5885, -8
  %5889 = add i64 %5887, 11
  store i64 %5889, i64* %3, align 8
  %5890 = inttoptr i64 %5888 to i32*
  %5891 = load i32, i32* %5890, align 4
  %5892 = sext i32 %5891 to i64
  %5893 = shl nsw i64 %5892, 4
  store i64 %5893, i64* %RDX.i658, align 8
  %5894 = add i64 %5893, %5886
  store i64 %5894, i64* %RCX.i4476, align 8
  %5895 = icmp ult i64 %5894, %5886
  %5896 = icmp ult i64 %5894, %5893
  %5897 = or i1 %5895, %5896
  %5898 = zext i1 %5897 to i8
  store i8 %5898, i8* %12, align 1
  %5899 = trunc i64 %5894 to i32
  %5900 = and i32 %5899, 255
  %5901 = tail call i32 @llvm.ctpop.i32(i32 %5900)
  %5902 = trunc i32 %5901 to i8
  %5903 = and i8 %5902, 1
  %5904 = xor i8 %5903, 1
  store i8 %5904, i8* %13, align 1
  %5905 = xor i64 %5893, %5886
  %5906 = xor i64 %5905, %5894
  %5907 = lshr i64 %5906, 4
  %5908 = trunc i64 %5907 to i8
  %5909 = and i8 %5908, 1
  store i8 %5909, i8* %14, align 1
  %5910 = icmp eq i64 %5894, 0
  %5911 = zext i1 %5910 to i8
  store i8 %5911, i8* %15, align 1
  %5912 = lshr i64 %5894, 63
  %5913 = trunc i64 %5912 to i8
  store i8 %5913, i8* %16, align 1
  %5914 = lshr i64 %5886, 63
  %5915 = lshr i64 %5892, 59
  %5916 = and i64 %5915, 1
  %5917 = xor i64 %5912, %5914
  %5918 = xor i64 %5912, %5916
  %5919 = add nuw nsw i64 %5917, %5918
  %5920 = icmp eq i64 %5919, 2
  %5921 = zext i1 %5920 to i8
  store i8 %5921, i8* %17, align 1
  %5922 = add i64 %5885, -12
  %5923 = add i64 %5887, 22
  store i64 %5923, i64* %3, align 8
  %5924 = inttoptr i64 %5922 to i32*
  %5925 = load i32, i32* %5924, align 4
  %5926 = sext i32 %5925 to i64
  store i64 %5926, i64* %RDX.i658, align 8
  %5927 = shl nsw i64 %5926, 2
  %5928 = add i64 %5927, %5894
  %5929 = load i32, i32* %EAX.i551, align 4
  %5930 = add i64 %5887, 25
  store i64 %5930, i64* %3, align 8
  %5931 = inttoptr i64 %5928 to i32*
  store i32 %5929, i32* %5931, align 4
  %.pre416 = load i64, i64* %3, align 8
  %.pre417 = load i64, i64* %RBP.i, align 8
  br label %block_.L_405046

block_.L_405046:                                  ; preds = %block_.L_404ffc, %block_405009
  %5932 = phi i64 [ %5814, %block_.L_404ffc ], [ %.pre417, %block_405009 ]
  %5933 = phi i64 [ %5828, %block_.L_404ffc ], [ %.pre416, %block_405009 ]
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.26, %block_.L_404ffc ], [ %call2_405028, %block_405009 ]
  %5934 = add i64 %5932, -2188
  %5935 = add i64 %5933, 11
  store i64 %5935, i64* %3, align 8
  %5936 = inttoptr i64 %5934 to i32*
  %5937 = load i32, i32* %5936, align 4
  %5938 = add i32 %5937, 1
  %5939 = zext i32 %5938 to i64
  store i64 %5939, i64* %RAX.i552, align 8
  %5940 = icmp eq i32 %5937, -1
  %5941 = icmp eq i32 %5938, 0
  %5942 = or i1 %5940, %5941
  %5943 = zext i1 %5942 to i8
  store i8 %5943, i8* %12, align 1
  %5944 = and i32 %5938, 255
  %5945 = tail call i32 @llvm.ctpop.i32(i32 %5944)
  %5946 = trunc i32 %5945 to i8
  %5947 = and i8 %5946, 1
  %5948 = xor i8 %5947, 1
  store i8 %5948, i8* %13, align 1
  %5949 = xor i32 %5938, %5937
  %5950 = lshr i32 %5949, 4
  %5951 = trunc i32 %5950 to i8
  %5952 = and i8 %5951, 1
  store i8 %5952, i8* %14, align 1
  %5953 = zext i1 %5941 to i8
  store i8 %5953, i8* %15, align 1
  %5954 = lshr i32 %5938, 31
  %5955 = trunc i32 %5954 to i8
  store i8 %5955, i8* %16, align 1
  %5956 = lshr i32 %5937, 31
  %5957 = xor i32 %5954, %5956
  %5958 = add nuw nsw i32 %5957, %5954
  %5959 = icmp eq i32 %5958, 2
  %5960 = zext i1 %5959 to i8
  store i8 %5960, i8* %17, align 1
  %5961 = add i64 %5933, 20
  store i64 %5961, i64* %3, align 8
  store i32 %5938, i32* %5936, align 4
  %5962 = load i64, i64* %3, align 8
  %5963 = add i64 %5962, -600
  store i64 %5963, i64* %3, align 8
  br label %block_.L_404e02

block_.L_40505f:                                  ; preds = %block_.L_404e02
  %5964 = add i64 %5162, -2232
  %5965 = add i64 %5191, 7
  store i64 %5965, i64* %3, align 8
  %5966 = inttoptr i64 %5964 to i64*
  %5967 = load i64, i64* %5966, align 8
  store i64 %5967, i64* %RAX.i552, align 8
  %5968 = add i64 %5162, -2184
  %5969 = add i64 %5191, 14
  store i64 %5969, i64* %3, align 8
  %5970 = inttoptr i64 %5968 to i32*
  %5971 = load i32, i32* %5970, align 4
  %5972 = sext i32 %5971 to i64
  store i64 %5972, i64* %RCX.i4476, align 8
  %5973 = shl nsw i64 %5972, 2
  %5974 = add i64 %5973, %5967
  %5975 = add i64 %5191, 21
  store i64 %5975, i64* %3, align 8
  %5976 = inttoptr i64 %5974 to i32*
  store i32 0, i32* %5976, align 4
  %5977 = load i64, i64* %RBP.i, align 8
  %5978 = add i64 %5977, -12
  %5979 = load i64, i64* %3, align 8
  %5980 = add i64 %5979, 7
  store i64 %5980, i64* %3, align 8
  %5981 = inttoptr i64 %5978 to i32*
  store i32 0, i32* %5981, align 4
  %.pre315 = load i64, i64* %3, align 8
  br label %block_.L_40507b

block_.L_40507b:                                  ; preds = %block_.L_4051c3, %block_.L_40505f
  %5982 = phi i64 [ %6646, %block_.L_4051c3 ], [ %.pre315, %block_.L_40505f ]
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %CL.i, align 1
  %5983 = load i64, i64* %RBP.i, align 8
  %5984 = add i64 %5983, -12
  %5985 = add i64 %5982, 8
  store i64 %5985, i64* %3, align 8
  %5986 = inttoptr i64 %5984 to i32*
  %5987 = load i32, i32* %5986, align 4
  %5988 = add i32 %5987, -4
  %5989 = icmp ult i32 %5987, 4
  %5990 = zext i1 %5989 to i8
  store i8 %5990, i8* %12, align 1
  %5991 = and i32 %5988, 255
  %5992 = tail call i32 @llvm.ctpop.i32(i32 %5991)
  %5993 = trunc i32 %5992 to i8
  %5994 = and i8 %5993, 1
  %5995 = xor i8 %5994, 1
  store i8 %5995, i8* %13, align 1
  %5996 = xor i32 %5988, %5987
  %5997 = lshr i32 %5996, 4
  %5998 = trunc i32 %5997 to i8
  %5999 = and i8 %5998, 1
  store i8 %5999, i8* %14, align 1
  %6000 = icmp eq i32 %5988, 0
  %6001 = zext i1 %6000 to i8
  store i8 %6001, i8* %15, align 1
  %6002 = lshr i32 %5988, 31
  %6003 = trunc i32 %6002 to i8
  store i8 %6003, i8* %16, align 1
  %6004 = lshr i32 %5987, 31
  %6005 = xor i32 %6002, %6004
  %6006 = add nuw nsw i32 %6005, %6004
  %6007 = icmp eq i32 %6006, 2
  %6008 = zext i1 %6007 to i8
  store i8 %6008, i8* %17, align 1
  %6009 = add i64 %5983, -2272
  %6010 = add i64 %5982, 14
  store i64 %6010, i64* %3, align 8
  %6011 = inttoptr i64 %6009 to i8*
  store i8 0, i8* %6011, align 1
  %6012 = load i64, i64* %3, align 8
  %6013 = add i64 %6012, 24
  %6014 = add i64 %6012, 6
  %6015 = load i8, i8* %16, align 1
  %6016 = icmp ne i8 %6015, 0
  %6017 = load i8, i8* %17, align 1
  %6018 = icmp ne i8 %6017, 0
  %6019 = xor i1 %6016, %6018
  %6020 = select i1 %6019, i64 %6014, i64 %6013
  store i64 %6020, i64* %3, align 8
  br i1 %6019, label %block_40508f, label %block_.L_4050a1

block_40508f:                                     ; preds = %block_.L_40507b
  %6021 = load i64, i64* %RBP.i, align 8
  %6022 = add i64 %6021, -2260
  %6023 = add i64 %6020, 7
  store i64 %6023, i64* %3, align 8
  %6024 = inttoptr i64 %6022 to i32*
  %6025 = load i32, i32* %6024, align 4
  %6026 = icmp ne i32 %6025, 0
  %6027 = zext i1 %6026 to i64
  %6028 = xor i64 %6027, 255
  %6029 = trunc i64 %6028 to i8
  store i8 %6029, i8* %AL.i, align 1
  store i8 0, i8* %12, align 1
  %6030 = trunc i64 %6028 to i32
  %6031 = tail call i32 @llvm.ctpop.i32(i32 %6030)
  %6032 = trunc i32 %6031 to i8
  %6033 = and i8 %6032, 1
  %6034 = xor i8 %6033, 1
  store i8 %6034, i8* %13, align 1
  store i8 0, i8* %15, align 1
  store i8 1, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %6035 = add i64 %6021, -2272
  %6036 = add i64 %6020, 18
  store i64 %6036, i64* %3, align 8
  %6037 = inttoptr i64 %6035 to i8*
  store i8 %6029, i8* %6037, align 1
  %.pre316 = load i64, i64* %3, align 8
  br label %block_.L_4050a1

block_.L_4050a1:                                  ; preds = %block_.L_40507b, %block_40508f
  %6038 = phi i64 [ %6013, %block_.L_40507b ], [ %.pre316, %block_40508f ]
  %6039 = load i64, i64* %RBP.i, align 8
  %6040 = add i64 %6039, -2272
  %6041 = add i64 %6038, 6
  store i64 %6041, i64* %3, align 8
  %6042 = inttoptr i64 %6040 to i8*
  %6043 = load i8, i8* %6042, align 1
  store i8 %6043, i8* %AL.i, align 1
  %6044 = and i8 %6043, 1
  store i8 0, i8* %12, align 1
  %6045 = zext i8 %6044 to i32
  %6046 = tail call i32 @llvm.ctpop.i32(i32 %6045)
  %6047 = trunc i32 %6046 to i8
  %6048 = xor i8 %6047, 1
  store i8 %6048, i8* %13, align 1
  %6049 = xor i8 %6044, 1
  store i8 %6049, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %6050 = icmp eq i8 %6049, 0
  %.v450 = select i1 %6050, i64 19, i64 14
  %6051 = add i64 %6038, %.v450
  store i64 %6051, i64* %3, align 8
  %6052 = add i64 %6039, -8
  br i1 %6050, label %block_.L_4050b4, label %block_4050af

block_4050af:                                     ; preds = %block_.L_4050a1
  %6053 = add i64 %6051, 302
  store i64 %6053, i64* %3, align 8
  %6054 = inttoptr i64 %6052 to i32*
  store i32 0, i32* %6054, align 4
  %R8.i2321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %6055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D.i2316 = bitcast %union.anon* %6055 to i32*
  %6056 = getelementptr inbounds %union.anon, %union.anon* %6055, i64 0, i32 0
  %R10.i2302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %6057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D.i2293 = bitcast %union.anon* %6057 to i32*
  %6058 = getelementptr inbounds %union.anon, %union.anon* %6057, i64 0, i32 0
  %.pre317 = load i64, i64* %3, align 8
  br label %block_.L_4051dd

block_.L_4050b4:                                  ; preds = %block_.L_4050a1
  %6059 = add i64 %6051, 7
  store i64 %6059, i64* %3, align 8
  %6060 = inttoptr i64 %6052 to i32*
  store i32 0, i32* %6060, align 4
  %.pre409 = load i64, i64* %3, align 8
  br label %block_.L_4050bb

block_.L_4050bb:                                  ; preds = %block_4050c5, %block_.L_4050b4
  %6061 = phi i64 [ %6174, %block_4050c5 ], [ %.pre409, %block_.L_4050b4 ]
  %6062 = load i64, i64* %RBP.i, align 8
  %6063 = add i64 %6062, -8
  %6064 = add i64 %6061, 4
  store i64 %6064, i64* %3, align 8
  %6065 = inttoptr i64 %6063 to i32*
  %6066 = load i32, i32* %6065, align 4
  %6067 = add i32 %6066, -4
  %6068 = icmp ult i32 %6066, 4
  %6069 = zext i1 %6068 to i8
  store i8 %6069, i8* %12, align 1
  %6070 = and i32 %6067, 255
  %6071 = tail call i32 @llvm.ctpop.i32(i32 %6070)
  %6072 = trunc i32 %6071 to i8
  %6073 = and i8 %6072, 1
  %6074 = xor i8 %6073, 1
  store i8 %6074, i8* %13, align 1
  %6075 = xor i32 %6067, %6066
  %6076 = lshr i32 %6075, 4
  %6077 = trunc i32 %6076 to i8
  %6078 = and i8 %6077, 1
  store i8 %6078, i8* %14, align 1
  %6079 = icmp eq i32 %6067, 0
  %6080 = zext i1 %6079 to i8
  store i8 %6080, i8* %15, align 1
  %6081 = lshr i32 %6067, 31
  %6082 = trunc i32 %6081 to i8
  store i8 %6082, i8* %16, align 1
  %6083 = lshr i32 %6066, 31
  %6084 = xor i32 %6081, %6083
  %6085 = add nuw nsw i32 %6084, %6083
  %6086 = icmp eq i32 %6085, 2
  %6087 = zext i1 %6086 to i8
  store i8 %6087, i8* %17, align 1
  %6088 = icmp ne i8 %6082, 0
  %6089 = xor i1 %6088, %6086
  %.v497 = select i1 %6089, i64 10, i64 60
  %6090 = add i64 %6061, %.v497
  store i64 %6090, i64* %3, align 8
  br i1 %6089, label %block_4050c5, label %block_.L_4050f7

block_4050c5:                                     ; preds = %block_.L_4050bb
  %6091 = add i64 %6062, -1120
  store i64 %6091, i64* %RAX.i552, align 8
  %6092 = add i64 %6090, 11
  store i64 %6092, i64* %3, align 8
  %6093 = load i32, i32* %6065, align 4
  %6094 = sext i32 %6093 to i64
  %6095 = shl nsw i64 %6094, 4
  store i64 %6095, i64* %RCX.i4476, align 8
  %6096 = add i64 %6095, %6091
  store i64 %6096, i64* %RAX.i552, align 8
  %6097 = icmp ult i64 %6096, %6091
  %6098 = icmp ult i64 %6096, %6095
  %6099 = or i1 %6097, %6098
  %6100 = zext i1 %6099 to i8
  store i8 %6100, i8* %12, align 1
  %6101 = trunc i64 %6096 to i32
  %6102 = and i32 %6101, 255
  %6103 = tail call i32 @llvm.ctpop.i32(i32 %6102)
  %6104 = trunc i32 %6103 to i8
  %6105 = and i8 %6104, 1
  %6106 = xor i8 %6105, 1
  store i8 %6106, i8* %13, align 1
  %6107 = xor i64 %6095, %6091
  %6108 = xor i64 %6107, %6096
  %6109 = lshr i64 %6108, 4
  %6110 = trunc i64 %6109 to i8
  %6111 = and i8 %6110, 1
  store i8 %6111, i8* %14, align 1
  %6112 = icmp eq i64 %6096, 0
  %6113 = zext i1 %6112 to i8
  store i8 %6113, i8* %15, align 1
  %6114 = lshr i64 %6096, 63
  %6115 = trunc i64 %6114 to i8
  store i8 %6115, i8* %16, align 1
  %6116 = lshr i64 %6091, 63
  %6117 = lshr i64 %6094, 59
  %6118 = and i64 %6117, 1
  %6119 = xor i64 %6114, %6116
  %6120 = xor i64 %6114, %6118
  %6121 = add nuw nsw i64 %6119, %6120
  %6122 = icmp eq i64 %6121, 2
  %6123 = zext i1 %6122 to i8
  store i8 %6123, i8* %17, align 1
  %6124 = add i64 %6062, -12
  %6125 = add i64 %6090, 22
  store i64 %6125, i64* %3, align 8
  %6126 = inttoptr i64 %6124 to i32*
  %6127 = load i32, i32* %6126, align 4
  %6128 = sext i32 %6127 to i64
  store i64 %6128, i64* %RCX.i4476, align 8
  %6129 = shl nsw i64 %6128, 2
  %6130 = add i64 %6129, %6096
  %6131 = add i64 %6090, 25
  store i64 %6131, i64* %3, align 8
  %6132 = inttoptr i64 %6130 to i32*
  %6133 = load i32, i32* %6132, align 4
  %6134 = zext i32 %6133 to i64
  store i64 %6134, i64* %RDX.i658, align 8
  %6135 = add i64 %6090, 29
  store i64 %6135, i64* %3, align 8
  %6136 = load i32, i32* %6065, align 4
  %6137 = sext i32 %6136 to i64
  store i64 %6137, i64* %RAX.i552, align 8
  %6138 = shl nsw i64 %6137, 2
  %6139 = add i64 %6062, -1136
  %6140 = add i64 %6139, %6138
  %6141 = add i64 %6090, 36
  store i64 %6141, i64* %3, align 8
  %6142 = inttoptr i64 %6140 to i32*
  store i32 %6133, i32* %6142, align 4
  %6143 = load i64, i64* %RBP.i, align 8
  %6144 = add i64 %6143, -8
  %6145 = load i64, i64* %3, align 8
  %6146 = add i64 %6145, 3
  store i64 %6146, i64* %3, align 8
  %6147 = inttoptr i64 %6144 to i32*
  %6148 = load i32, i32* %6147, align 4
  %6149 = add i32 %6148, 1
  %6150 = zext i32 %6149 to i64
  store i64 %6150, i64* %RAX.i552, align 8
  %6151 = icmp eq i32 %6148, -1
  %6152 = icmp eq i32 %6149, 0
  %6153 = or i1 %6151, %6152
  %6154 = zext i1 %6153 to i8
  store i8 %6154, i8* %12, align 1
  %6155 = and i32 %6149, 255
  %6156 = tail call i32 @llvm.ctpop.i32(i32 %6155)
  %6157 = trunc i32 %6156 to i8
  %6158 = and i8 %6157, 1
  %6159 = xor i8 %6158, 1
  store i8 %6159, i8* %13, align 1
  %6160 = xor i32 %6149, %6148
  %6161 = lshr i32 %6160, 4
  %6162 = trunc i32 %6161 to i8
  %6163 = and i8 %6162, 1
  store i8 %6163, i8* %14, align 1
  %6164 = zext i1 %6152 to i8
  store i8 %6164, i8* %15, align 1
  %6165 = lshr i32 %6149, 31
  %6166 = trunc i32 %6165 to i8
  store i8 %6166, i8* %16, align 1
  %6167 = lshr i32 %6148, 31
  %6168 = xor i32 %6165, %6167
  %6169 = add nuw nsw i32 %6168, %6165
  %6170 = icmp eq i32 %6169, 2
  %6171 = zext i1 %6170 to i8
  store i8 %6171, i8* %17, align 1
  %6172 = add i64 %6145, 9
  store i64 %6172, i64* %3, align 8
  store i32 %6149, i32* %6147, align 4
  %6173 = load i64, i64* %3, align 8
  %6174 = add i64 %6173, -55
  store i64 %6174, i64* %3, align 8
  br label %block_.L_4050bb

block_.L_4050f7:                                  ; preds = %block_.L_4050bb
  %6175 = add i64 %6062, -1136
  %6176 = add i64 %6090, 6
  store i64 %6176, i64* %3, align 8
  %6177 = inttoptr i64 %6175 to i32*
  %6178 = load i32, i32* %6177, align 4
  %6179 = zext i32 %6178 to i64
  store i64 %6179, i64* %RAX.i552, align 8
  %6180 = add i64 %6062, -1128
  %6181 = add i64 %6090, 12
  store i64 %6181, i64* %3, align 8
  %6182 = inttoptr i64 %6180 to i32*
  %6183 = load i32, i32* %6182, align 4
  %6184 = add i32 %6183, %6178
  %6185 = zext i32 %6184 to i64
  store i64 %6185, i64* %RAX.i552, align 8
  %6186 = icmp ult i32 %6184, %6178
  %6187 = icmp ult i32 %6184, %6183
  %6188 = or i1 %6186, %6187
  %6189 = zext i1 %6188 to i8
  store i8 %6189, i8* %12, align 1
  %6190 = and i32 %6184, 255
  %6191 = tail call i32 @llvm.ctpop.i32(i32 %6190)
  %6192 = trunc i32 %6191 to i8
  %6193 = and i8 %6192, 1
  %6194 = xor i8 %6193, 1
  store i8 %6194, i8* %13, align 1
  %6195 = xor i32 %6183, %6178
  %6196 = xor i32 %6195, %6184
  %6197 = lshr i32 %6196, 4
  %6198 = trunc i32 %6197 to i8
  %6199 = and i8 %6198, 1
  store i8 %6199, i8* %14, align 1
  %6200 = icmp eq i32 %6184, 0
  %6201 = zext i1 %6200 to i8
  store i8 %6201, i8* %15, align 1
  %6202 = lshr i32 %6184, 31
  %6203 = trunc i32 %6202 to i8
  store i8 %6203, i8* %16, align 1
  %6204 = lshr i32 %6178, 31
  %6205 = lshr i32 %6183, 31
  %6206 = xor i32 %6202, %6204
  %6207 = xor i32 %6202, %6205
  %6208 = add nuw nsw i32 %6206, %6207
  %6209 = icmp eq i32 %6208, 2
  %6210 = zext i1 %6209 to i8
  store i8 %6210, i8* %17, align 1
  %6211 = add i64 %6062, -1152
  %6212 = add i64 %6090, 18
  store i64 %6212, i64* %3, align 8
  %6213 = inttoptr i64 %6211 to i32*
  store i32 %6184, i32* %6213, align 4
  %6214 = load i64, i64* %RBP.i, align 8
  %6215 = add i64 %6214, -1136
  %6216 = load i64, i64* %3, align 8
  %6217 = add i64 %6216, 6
  store i64 %6217, i64* %3, align 8
  %6218 = inttoptr i64 %6215 to i32*
  %6219 = load i32, i32* %6218, align 4
  %6220 = zext i32 %6219 to i64
  store i64 %6220, i64* %RAX.i552, align 8
  %6221 = add i64 %6214, -1128
  %6222 = add i64 %6216, 12
  store i64 %6222, i64* %3, align 8
  %6223 = inttoptr i64 %6221 to i32*
  %6224 = load i32, i32* %6223, align 4
  %6225 = sub i32 %6219, %6224
  %6226 = zext i32 %6225 to i64
  store i64 %6226, i64* %RAX.i552, align 8
  %6227 = icmp ult i32 %6219, %6224
  %6228 = zext i1 %6227 to i8
  store i8 %6228, i8* %12, align 1
  %6229 = and i32 %6225, 255
  %6230 = tail call i32 @llvm.ctpop.i32(i32 %6229)
  %6231 = trunc i32 %6230 to i8
  %6232 = and i8 %6231, 1
  %6233 = xor i8 %6232, 1
  store i8 %6233, i8* %13, align 1
  %6234 = xor i32 %6224, %6219
  %6235 = xor i32 %6234, %6225
  %6236 = lshr i32 %6235, 4
  %6237 = trunc i32 %6236 to i8
  %6238 = and i8 %6237, 1
  store i8 %6238, i8* %14, align 1
  %6239 = icmp eq i32 %6225, 0
  %6240 = zext i1 %6239 to i8
  store i8 %6240, i8* %15, align 1
  %6241 = lshr i32 %6225, 31
  %6242 = trunc i32 %6241 to i8
  store i8 %6242, i8* %16, align 1
  %6243 = lshr i32 %6219, 31
  %6244 = lshr i32 %6224, 31
  %6245 = xor i32 %6244, %6243
  %6246 = xor i32 %6241, %6243
  %6247 = add nuw nsw i32 %6246, %6245
  %6248 = icmp eq i32 %6247, 2
  %6249 = zext i1 %6248 to i8
  store i8 %6249, i8* %17, align 1
  %6250 = add i64 %6214, -1148
  %6251 = add i64 %6216, 18
  store i64 %6251, i64* %3, align 8
  %6252 = inttoptr i64 %6250 to i32*
  store i32 %6225, i32* %6252, align 4
  %6253 = load i64, i64* %RBP.i, align 8
  %6254 = add i64 %6253, -1132
  %6255 = load i64, i64* %3, align 8
  %6256 = add i64 %6255, 6
  store i64 %6256, i64* %3, align 8
  %6257 = inttoptr i64 %6254 to i32*
  %6258 = load i32, i32* %6257, align 4
  %6259 = zext i32 %6258 to i64
  store i64 %6259, i64* %RAX.i552, align 8
  %6260 = add i64 %6253, -1124
  %6261 = add i64 %6255, 12
  store i64 %6261, i64* %3, align 8
  %6262 = inttoptr i64 %6260 to i32*
  %6263 = load i32, i32* %6262, align 4
  %6264 = sub i32 %6258, %6263
  %6265 = zext i32 %6264 to i64
  store i64 %6265, i64* %RAX.i552, align 8
  %6266 = icmp ult i32 %6258, %6263
  %6267 = zext i1 %6266 to i8
  store i8 %6267, i8* %12, align 1
  %6268 = and i32 %6264, 255
  %6269 = tail call i32 @llvm.ctpop.i32(i32 %6268)
  %6270 = trunc i32 %6269 to i8
  %6271 = and i8 %6270, 1
  %6272 = xor i8 %6271, 1
  store i8 %6272, i8* %13, align 1
  %6273 = xor i32 %6263, %6258
  %6274 = xor i32 %6273, %6264
  %6275 = lshr i32 %6274, 4
  %6276 = trunc i32 %6275 to i8
  %6277 = and i8 %6276, 1
  store i8 %6277, i8* %14, align 1
  %6278 = icmp eq i32 %6264, 0
  %6279 = zext i1 %6278 to i8
  store i8 %6279, i8* %15, align 1
  %6280 = lshr i32 %6264, 31
  %6281 = trunc i32 %6280 to i8
  store i8 %6281, i8* %16, align 1
  %6282 = lshr i32 %6258, 31
  %6283 = lshr i32 %6263, 31
  %6284 = xor i32 %6283, %6282
  %6285 = xor i32 %6280, %6282
  %6286 = add nuw nsw i32 %6285, %6284
  %6287 = icmp eq i32 %6286, 2
  %6288 = zext i1 %6287 to i8
  store i8 %6288, i8* %17, align 1
  %6289 = add i64 %6253, -1144
  %6290 = add i64 %6255, 18
  store i64 %6290, i64* %3, align 8
  %6291 = inttoptr i64 %6289 to i32*
  store i32 %6264, i32* %6291, align 4
  %6292 = load i64, i64* %RBP.i, align 8
  %6293 = add i64 %6292, -1132
  %6294 = load i64, i64* %3, align 8
  %6295 = add i64 %6294, 6
  store i64 %6295, i64* %3, align 8
  %6296 = inttoptr i64 %6293 to i32*
  %6297 = load i32, i32* %6296, align 4
  %6298 = zext i32 %6297 to i64
  store i64 %6298, i64* %RAX.i552, align 8
  %6299 = add i64 %6292, -1124
  %6300 = add i64 %6294, 12
  store i64 %6300, i64* %3, align 8
  %6301 = inttoptr i64 %6299 to i32*
  %6302 = load i32, i32* %6301, align 4
  %6303 = add i32 %6302, %6297
  %6304 = zext i32 %6303 to i64
  store i64 %6304, i64* %RAX.i552, align 8
  %6305 = icmp ult i32 %6303, %6297
  %6306 = icmp ult i32 %6303, %6302
  %6307 = or i1 %6305, %6306
  %6308 = zext i1 %6307 to i8
  store i8 %6308, i8* %12, align 1
  %6309 = and i32 %6303, 255
  %6310 = tail call i32 @llvm.ctpop.i32(i32 %6309)
  %6311 = trunc i32 %6310 to i8
  %6312 = and i8 %6311, 1
  %6313 = xor i8 %6312, 1
  store i8 %6313, i8* %13, align 1
  %6314 = xor i32 %6302, %6297
  %6315 = xor i32 %6314, %6303
  %6316 = lshr i32 %6315, 4
  %6317 = trunc i32 %6316 to i8
  %6318 = and i8 %6317, 1
  store i8 %6318, i8* %14, align 1
  %6319 = icmp eq i32 %6303, 0
  %6320 = zext i1 %6319 to i8
  store i8 %6320, i8* %15, align 1
  %6321 = lshr i32 %6303, 31
  %6322 = trunc i32 %6321 to i8
  store i8 %6322, i8* %16, align 1
  %6323 = lshr i32 %6297, 31
  %6324 = lshr i32 %6302, 31
  %6325 = xor i32 %6321, %6323
  %6326 = xor i32 %6321, %6324
  %6327 = add nuw nsw i32 %6325, %6326
  %6328 = icmp eq i32 %6327, 2
  %6329 = zext i1 %6328 to i8
  store i8 %6329, i8* %17, align 1
  %6330 = add i64 %6292, -1140
  %6331 = add i64 %6294, 18
  store i64 %6331, i64* %3, align 8
  %6332 = inttoptr i64 %6330 to i32*
  store i32 %6303, i32* %6332, align 4
  %6333 = load i64, i64* %RBP.i, align 8
  %6334 = add i64 %6333, -8
  %6335 = load i64, i64* %3, align 8
  %6336 = add i64 %6335, 7
  store i64 %6336, i64* %3, align 8
  %6337 = inttoptr i64 %6334 to i32*
  store i32 0, i32* %6337, align 4
  %.pre410 = load i64, i64* %3, align 8
  br label %block_.L_405146

block_.L_405146:                                  ; preds = %block_405150, %block_.L_4050f7
  %6338 = phi i64 [ %6616, %block_405150 ], [ %.pre410, %block_.L_4050f7 ]
  %6339 = load i64, i64* %RBP.i, align 8
  %6340 = add i64 %6339, -8
  %6341 = add i64 %6338, 4
  store i64 %6341, i64* %3, align 8
  %6342 = inttoptr i64 %6340 to i32*
  %6343 = load i32, i32* %6342, align 4
  %6344 = add i32 %6343, -2
  %6345 = icmp ult i32 %6343, 2
  %6346 = zext i1 %6345 to i8
  store i8 %6346, i8* %12, align 1
  %6347 = and i32 %6344, 255
  %6348 = tail call i32 @llvm.ctpop.i32(i32 %6347)
  %6349 = trunc i32 %6348 to i8
  %6350 = and i8 %6349, 1
  %6351 = xor i8 %6350, 1
  store i8 %6351, i8* %13, align 1
  %6352 = xor i32 %6344, %6343
  %6353 = lshr i32 %6352, 4
  %6354 = trunc i32 %6353 to i8
  %6355 = and i8 %6354, 1
  store i8 %6355, i8* %14, align 1
  %6356 = icmp eq i32 %6344, 0
  %6357 = zext i1 %6356 to i8
  store i8 %6357, i8* %15, align 1
  %6358 = lshr i32 %6344, 31
  %6359 = trunc i32 %6358 to i8
  store i8 %6359, i8* %16, align 1
  %6360 = lshr i32 %6343, 31
  %6361 = xor i32 %6358, %6360
  %6362 = add nuw nsw i32 %6361, %6360
  %6363 = icmp eq i32 %6362, 2
  %6364 = zext i1 %6363 to i8
  store i8 %6364, i8* %17, align 1
  %6365 = icmp ne i8 %6359, 0
  %6366 = xor i1 %6365, %6363
  %.v464 = select i1 %6366, i64 10, i64 125
  %6367 = add i64 %6338, %.v464
  store i64 %6367, i64* %3, align 8
  br i1 %6366, label %block_405150, label %block_.L_4051c3

block_405150:                                     ; preds = %block_.L_405146
  %6368 = add i64 %6339, -1120
  store i64 %6368, i64* %RAX.i552, align 8
  store i64 3, i64* %RCX.i4476, align 8
  %6369 = add i64 %6367, 15
  store i64 %6369, i64* %3, align 8
  %6370 = load i32, i32* %6342, align 4
  %6371 = sub i32 3, %6370
  %6372 = zext i32 %6371 to i64
  store i64 %6372, i64* %RCX.i4476, align 8
  %6373 = icmp ugt i32 %6370, 3
  %6374 = zext i1 %6373 to i8
  store i8 %6374, i8* %12, align 1
  %6375 = and i32 %6371, 255
  %6376 = tail call i32 @llvm.ctpop.i32(i32 %6375)
  %6377 = trunc i32 %6376 to i8
  %6378 = and i8 %6377, 1
  %6379 = xor i8 %6378, 1
  store i8 %6379, i8* %13, align 1
  %6380 = xor i32 %6371, %6370
  %6381 = lshr i32 %6380, 4
  %6382 = trunc i32 %6381 to i8
  %6383 = and i8 %6382, 1
  store i8 %6383, i8* %14, align 1
  %6384 = icmp eq i32 %6371, 0
  %6385 = zext i1 %6384 to i8
  store i8 %6385, i8* %15, align 1
  %6386 = lshr i32 %6371, 31
  %6387 = trunc i32 %6386 to i8
  store i8 %6387, i8* %16, align 1
  %6388 = lshr i32 %6370, 31
  %6389 = add nuw nsw i32 %6386, %6388
  %6390 = icmp eq i32 %6389, 2
  %6391 = zext i1 %6390 to i8
  store i8 %6391, i8* %17, align 1
  %6392 = add i64 %6339, -24
  %6393 = add i64 %6367, 18
  store i64 %6393, i64* %3, align 8
  %6394 = inttoptr i64 %6392 to i32*
  store i32 %6371, i32* %6394, align 4
  %6395 = load i64, i64* %RBP.i, align 8
  %6396 = add i64 %6395, -8
  %6397 = load i64, i64* %3, align 8
  %6398 = add i64 %6397, 4
  store i64 %6398, i64* %3, align 8
  %6399 = inttoptr i64 %6396 to i32*
  %6400 = load i32, i32* %6399, align 4
  %6401 = sext i32 %6400 to i64
  store i64 %6401, i64* %RDX.i658, align 8
  %6402 = shl nsw i64 %6401, 2
  %6403 = add i64 %6395, -1152
  %6404 = add i64 %6403, %6402
  %6405 = add i64 %6397, 11
  store i64 %6405, i64* %3, align 8
  %6406 = inttoptr i64 %6404 to i32*
  %6407 = load i32, i32* %6406, align 4
  %6408 = zext i32 %6407 to i64
  store i64 %6408, i64* %RCX.i4476, align 8
  %6409 = add i64 %6395, -24
  %6410 = add i64 %6397, 15
  store i64 %6410, i64* %3, align 8
  %6411 = inttoptr i64 %6409 to i32*
  %6412 = load i32, i32* %6411, align 4
  %6413 = sext i32 %6412 to i64
  store i64 %6413, i64* %RDX.i658, align 8
  %6414 = shl nsw i64 %6413, 2
  %6415 = add nsw i64 %6414, -1152
  %6416 = add i64 %6415, %6395
  %6417 = add i64 %6397, 22
  store i64 %6417, i64* %3, align 8
  %6418 = inttoptr i64 %6416 to i32*
  %6419 = load i32, i32* %6418, align 4
  %6420 = add i32 %6419, %6407
  %6421 = zext i32 %6420 to i64
  store i64 %6421, i64* %RCX.i4476, align 8
  %6422 = icmp ult i32 %6420, %6407
  %6423 = icmp ult i32 %6420, %6419
  %6424 = or i1 %6422, %6423
  %6425 = zext i1 %6424 to i8
  store i8 %6425, i8* %12, align 1
  %6426 = and i32 %6420, 255
  %6427 = tail call i32 @llvm.ctpop.i32(i32 %6426)
  %6428 = trunc i32 %6427 to i8
  %6429 = and i8 %6428, 1
  %6430 = xor i8 %6429, 1
  store i8 %6430, i8* %13, align 1
  %6431 = xor i32 %6419, %6407
  %6432 = xor i32 %6431, %6420
  %6433 = lshr i32 %6432, 4
  %6434 = trunc i32 %6433 to i8
  %6435 = and i8 %6434, 1
  store i8 %6435, i8* %14, align 1
  %6436 = icmp eq i32 %6420, 0
  %6437 = zext i1 %6436 to i8
  store i8 %6437, i8* %15, align 1
  %6438 = lshr i32 %6420, 31
  %6439 = trunc i32 %6438 to i8
  store i8 %6439, i8* %16, align 1
  %6440 = lshr i32 %6407, 31
  %6441 = lshr i32 %6419, 31
  %6442 = xor i32 %6438, %6440
  %6443 = xor i32 %6438, %6441
  %6444 = add nuw nsw i32 %6442, %6443
  %6445 = icmp eq i32 %6444, 2
  %6446 = zext i1 %6445 to i8
  store i8 %6446, i8* %17, align 1
  %6447 = add i64 %6397, 26
  store i64 %6447, i64* %3, align 8
  %6448 = load i32, i32* %6399, align 4
  %6449 = sext i32 %6448 to i64
  %6450 = shl nsw i64 %6449, 4
  store i64 %6450, i64* %RDX.i658, align 8
  %6451 = load i64, i64* %RAX.i552, align 8
  %6452 = add i64 %6450, %6451
  store i64 %6452, i64* %RSI.i757, align 8
  %6453 = icmp ult i64 %6452, %6451
  %6454 = icmp ult i64 %6452, %6450
  %6455 = or i1 %6453, %6454
  %6456 = zext i1 %6455 to i8
  store i8 %6456, i8* %12, align 1
  %6457 = trunc i64 %6452 to i32
  %6458 = and i32 %6457, 255
  %6459 = tail call i32 @llvm.ctpop.i32(i32 %6458)
  %6460 = trunc i32 %6459 to i8
  %6461 = and i8 %6460, 1
  %6462 = xor i8 %6461, 1
  store i8 %6462, i8* %13, align 1
  %6463 = xor i64 %6450, %6451
  %6464 = xor i64 %6463, %6452
  %6465 = lshr i64 %6464, 4
  %6466 = trunc i64 %6465 to i8
  %6467 = and i8 %6466, 1
  store i8 %6467, i8* %14, align 1
  %6468 = icmp eq i64 %6452, 0
  %6469 = zext i1 %6468 to i8
  store i8 %6469, i8* %15, align 1
  %6470 = lshr i64 %6452, 63
  %6471 = trunc i64 %6470 to i8
  store i8 %6471, i8* %16, align 1
  %6472 = lshr i64 %6451, 63
  %6473 = lshr i64 %6449, 59
  %6474 = and i64 %6473, 1
  %6475 = xor i64 %6470, %6472
  %6476 = xor i64 %6470, %6474
  %6477 = add nuw nsw i64 %6475, %6476
  %6478 = icmp eq i64 %6477, 2
  %6479 = zext i1 %6478 to i8
  store i8 %6479, i8* %17, align 1
  %6480 = load i64, i64* %RBP.i, align 8
  %6481 = add i64 %6480, -12
  %6482 = add i64 %6397, 40
  store i64 %6482, i64* %3, align 8
  %6483 = inttoptr i64 %6481 to i32*
  %6484 = load i32, i32* %6483, align 4
  %6485 = sext i32 %6484 to i64
  store i64 %6485, i64* %RDX.i658, align 8
  %6486 = shl nsw i64 %6485, 2
  %6487 = add i64 %6486, %6452
  %6488 = load i32, i32* %ECX.i4446, align 4
  %6489 = add i64 %6397, 43
  store i64 %6489, i64* %3, align 8
  %6490 = inttoptr i64 %6487 to i32*
  store i32 %6488, i32* %6490, align 4
  %6491 = load i64, i64* %RBP.i, align 8
  %6492 = add i64 %6491, -8
  %6493 = load i64, i64* %3, align 8
  %6494 = add i64 %6493, 4
  store i64 %6494, i64* %3, align 8
  %6495 = inttoptr i64 %6492 to i32*
  %6496 = load i32, i32* %6495, align 4
  %6497 = sext i32 %6496 to i64
  store i64 %6497, i64* %RDX.i658, align 8
  %6498 = shl nsw i64 %6497, 2
  %6499 = add i64 %6491, -1152
  %6500 = add i64 %6499, %6498
  %6501 = add i64 %6493, 11
  store i64 %6501, i64* %3, align 8
  %6502 = inttoptr i64 %6500 to i32*
  %6503 = load i32, i32* %6502, align 4
  %6504 = zext i32 %6503 to i64
  store i64 %6504, i64* %RCX.i4476, align 8
  %6505 = add i64 %6491, -24
  %6506 = add i64 %6493, 15
  store i64 %6506, i64* %3, align 8
  %6507 = inttoptr i64 %6505 to i32*
  %6508 = load i32, i32* %6507, align 4
  %6509 = sext i32 %6508 to i64
  store i64 %6509, i64* %RDX.i658, align 8
  %6510 = shl nsw i64 %6509, 2
  %6511 = add nsw i64 %6510, -1152
  %6512 = add i64 %6511, %6491
  %6513 = add i64 %6493, 22
  store i64 %6513, i64* %3, align 8
  %6514 = inttoptr i64 %6512 to i32*
  %6515 = load i32, i32* %6514, align 4
  %6516 = sub i32 %6503, %6515
  %6517 = zext i32 %6516 to i64
  store i64 %6517, i64* %RCX.i4476, align 8
  %6518 = icmp ult i32 %6503, %6515
  %6519 = zext i1 %6518 to i8
  store i8 %6519, i8* %12, align 1
  %6520 = and i32 %6516, 255
  %6521 = tail call i32 @llvm.ctpop.i32(i32 %6520)
  %6522 = trunc i32 %6521 to i8
  %6523 = and i8 %6522, 1
  %6524 = xor i8 %6523, 1
  store i8 %6524, i8* %13, align 1
  %6525 = xor i32 %6515, %6503
  %6526 = xor i32 %6525, %6516
  %6527 = lshr i32 %6526, 4
  %6528 = trunc i32 %6527 to i8
  %6529 = and i8 %6528, 1
  store i8 %6529, i8* %14, align 1
  %6530 = icmp eq i32 %6516, 0
  %6531 = zext i1 %6530 to i8
  store i8 %6531, i8* %15, align 1
  %6532 = lshr i32 %6516, 31
  %6533 = trunc i32 %6532 to i8
  store i8 %6533, i8* %16, align 1
  %6534 = lshr i32 %6503, 31
  %6535 = lshr i32 %6515, 31
  %6536 = xor i32 %6535, %6534
  %6537 = xor i32 %6532, %6534
  %6538 = add nuw nsw i32 %6537, %6536
  %6539 = icmp eq i32 %6538, 2
  %6540 = zext i1 %6539 to i8
  store i8 %6540, i8* %17, align 1
  %6541 = add i64 %6493, 26
  store i64 %6541, i64* %3, align 8
  %6542 = load i32, i32* %6507, align 4
  %6543 = sext i32 %6542 to i64
  %6544 = shl nsw i64 %6543, 4
  store i64 %6544, i64* %RDX.i658, align 8
  %6545 = load i64, i64* %RAX.i552, align 8
  %6546 = add i64 %6544, %6545
  store i64 %6546, i64* %RAX.i552, align 8
  %6547 = icmp ult i64 %6546, %6545
  %6548 = icmp ult i64 %6546, %6544
  %6549 = or i1 %6547, %6548
  %6550 = zext i1 %6549 to i8
  store i8 %6550, i8* %12, align 1
  %6551 = trunc i64 %6546 to i32
  %6552 = and i32 %6551, 255
  %6553 = tail call i32 @llvm.ctpop.i32(i32 %6552)
  %6554 = trunc i32 %6553 to i8
  %6555 = and i8 %6554, 1
  %6556 = xor i8 %6555, 1
  store i8 %6556, i8* %13, align 1
  %6557 = xor i64 %6544, %6545
  %6558 = xor i64 %6557, %6546
  %6559 = lshr i64 %6558, 4
  %6560 = trunc i64 %6559 to i8
  %6561 = and i8 %6560, 1
  store i8 %6561, i8* %14, align 1
  %6562 = icmp eq i64 %6546, 0
  %6563 = zext i1 %6562 to i8
  store i8 %6563, i8* %15, align 1
  %6564 = lshr i64 %6546, 63
  %6565 = trunc i64 %6564 to i8
  store i8 %6565, i8* %16, align 1
  %6566 = lshr i64 %6545, 63
  %6567 = lshr i64 %6543, 59
  %6568 = and i64 %6567, 1
  %6569 = xor i64 %6564, %6566
  %6570 = xor i64 %6564, %6568
  %6571 = add nuw nsw i64 %6569, %6570
  %6572 = icmp eq i64 %6571, 2
  %6573 = zext i1 %6572 to i8
  store i8 %6573, i8* %17, align 1
  %6574 = load i64, i64* %RBP.i, align 8
  %6575 = add i64 %6574, -12
  %6576 = add i64 %6493, 37
  store i64 %6576, i64* %3, align 8
  %6577 = inttoptr i64 %6575 to i32*
  %6578 = load i32, i32* %6577, align 4
  %6579 = sext i32 %6578 to i64
  store i64 %6579, i64* %RDX.i658, align 8
  %6580 = shl nsw i64 %6579, 2
  %6581 = add i64 %6580, %6546
  %6582 = load i32, i32* %ECX.i4446, align 4
  %6583 = add i64 %6493, 40
  store i64 %6583, i64* %3, align 8
  %6584 = inttoptr i64 %6581 to i32*
  store i32 %6582, i32* %6584, align 4
  %6585 = load i64, i64* %RBP.i, align 8
  %6586 = add i64 %6585, -8
  %6587 = load i64, i64* %3, align 8
  %6588 = add i64 %6587, 3
  store i64 %6588, i64* %3, align 8
  %6589 = inttoptr i64 %6586 to i32*
  %6590 = load i32, i32* %6589, align 4
  %6591 = add i32 %6590, 1
  %6592 = zext i32 %6591 to i64
  store i64 %6592, i64* %RAX.i552, align 8
  %6593 = icmp eq i32 %6590, -1
  %6594 = icmp eq i32 %6591, 0
  %6595 = or i1 %6593, %6594
  %6596 = zext i1 %6595 to i8
  store i8 %6596, i8* %12, align 1
  %6597 = and i32 %6591, 255
  %6598 = tail call i32 @llvm.ctpop.i32(i32 %6597)
  %6599 = trunc i32 %6598 to i8
  %6600 = and i8 %6599, 1
  %6601 = xor i8 %6600, 1
  store i8 %6601, i8* %13, align 1
  %6602 = xor i32 %6591, %6590
  %6603 = lshr i32 %6602, 4
  %6604 = trunc i32 %6603 to i8
  %6605 = and i8 %6604, 1
  store i8 %6605, i8* %14, align 1
  %6606 = zext i1 %6594 to i8
  store i8 %6606, i8* %15, align 1
  %6607 = lshr i32 %6591, 31
  %6608 = trunc i32 %6607 to i8
  store i8 %6608, i8* %16, align 1
  %6609 = lshr i32 %6590, 31
  %6610 = xor i32 %6607, %6609
  %6611 = add nuw nsw i32 %6610, %6607
  %6612 = icmp eq i32 %6611, 2
  %6613 = zext i1 %6612 to i8
  store i8 %6613, i8* %17, align 1
  %6614 = add i64 %6587, 9
  store i64 %6614, i64* %3, align 8
  store i32 %6591, i32* %6589, align 4
  %6615 = load i64, i64* %3, align 8
  %6616 = add i64 %6615, -120
  store i64 %6616, i64* %3, align 8
  br label %block_.L_405146

block_.L_4051c3:                                  ; preds = %block_.L_405146
  %6617 = add i64 %6339, -12
  %6618 = add i64 %6367, 8
  store i64 %6618, i64* %3, align 8
  %6619 = inttoptr i64 %6617 to i32*
  %6620 = load i32, i32* %6619, align 4
  %6621 = add i32 %6620, 1
  %6622 = zext i32 %6621 to i64
  store i64 %6622, i64* %RAX.i552, align 8
  %6623 = icmp eq i32 %6620, -1
  %6624 = icmp eq i32 %6621, 0
  %6625 = or i1 %6623, %6624
  %6626 = zext i1 %6625 to i8
  store i8 %6626, i8* %12, align 1
  %6627 = and i32 %6621, 255
  %6628 = tail call i32 @llvm.ctpop.i32(i32 %6627)
  %6629 = trunc i32 %6628 to i8
  %6630 = and i8 %6629, 1
  %6631 = xor i8 %6630, 1
  store i8 %6631, i8* %13, align 1
  %6632 = xor i32 %6621, %6620
  %6633 = lshr i32 %6632, 4
  %6634 = trunc i32 %6633 to i8
  %6635 = and i8 %6634, 1
  store i8 %6635, i8* %14, align 1
  %6636 = zext i1 %6624 to i8
  store i8 %6636, i8* %15, align 1
  %6637 = lshr i32 %6621, 31
  %6638 = trunc i32 %6637 to i8
  store i8 %6638, i8* %16, align 1
  %6639 = lshr i32 %6620, 31
  %6640 = xor i32 %6637, %6639
  %6641 = add nuw nsw i32 %6640, %6637
  %6642 = icmp eq i32 %6641, 2
  %6643 = zext i1 %6642 to i8
  store i8 %6643, i8* %17, align 1
  %6644 = add i64 %6367, 14
  store i64 %6644, i64* %3, align 8
  store i32 %6621, i32* %6619, align 4
  %6645 = load i64, i64* %3, align 8
  %6646 = add i64 %6645, -342
  store i64 %6646, i64* %3, align 8
  br label %block_.L_40507b

block_.L_4051dd:                                  ; preds = %block_.L_405487, %block_4050af
  %6647 = phi i64 [ %8209, %block_.L_405487 ], [ %.pre317, %block_4050af ]
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %CL.i, align 1
  %6648 = load i64, i64* %RBP.i, align 8
  %6649 = add i64 %6648, -8
  %6650 = add i64 %6647, 8
  store i64 %6650, i64* %3, align 8
  %6651 = inttoptr i64 %6649 to i32*
  %6652 = load i32, i32* %6651, align 4
  %6653 = add i32 %6652, -4
  %6654 = icmp ult i32 %6652, 4
  %6655 = zext i1 %6654 to i8
  store i8 %6655, i8* %12, align 1
  %6656 = and i32 %6653, 255
  %6657 = tail call i32 @llvm.ctpop.i32(i32 %6656)
  %6658 = trunc i32 %6657 to i8
  %6659 = and i8 %6658, 1
  %6660 = xor i8 %6659, 1
  store i8 %6660, i8* %13, align 1
  %6661 = xor i32 %6653, %6652
  %6662 = lshr i32 %6661, 4
  %6663 = trunc i32 %6662 to i8
  %6664 = and i8 %6663, 1
  store i8 %6664, i8* %14, align 1
  %6665 = icmp eq i32 %6653, 0
  %6666 = zext i1 %6665 to i8
  store i8 %6666, i8* %15, align 1
  %6667 = lshr i32 %6653, 31
  %6668 = trunc i32 %6667 to i8
  store i8 %6668, i8* %16, align 1
  %6669 = lshr i32 %6652, 31
  %6670 = xor i32 %6667, %6669
  %6671 = add nuw nsw i32 %6670, %6669
  %6672 = icmp eq i32 %6671, 2
  %6673 = zext i1 %6672 to i8
  store i8 %6673, i8* %17, align 1
  %6674 = add i64 %6648, -2273
  %6675 = add i64 %6647, 14
  store i64 %6675, i64* %3, align 8
  %6676 = inttoptr i64 %6674 to i8*
  store i8 0, i8* %6676, align 1
  %6677 = load i64, i64* %3, align 8
  %6678 = add i64 %6677, 24
  %6679 = add i64 %6677, 6
  %6680 = load i8, i8* %16, align 1
  %6681 = icmp ne i8 %6680, 0
  %6682 = load i8, i8* %17, align 1
  %6683 = icmp ne i8 %6682, 0
  %6684 = xor i1 %6681, %6683
  %6685 = select i1 %6684, i64 %6679, i64 %6678
  store i64 %6685, i64* %3, align 8
  br i1 %6684, label %block_4051f1, label %block_.L_405203

block_4051f1:                                     ; preds = %block_.L_4051dd
  %6686 = load i64, i64* %RBP.i, align 8
  %6687 = add i64 %6686, -2260
  %6688 = add i64 %6685, 7
  store i64 %6688, i64* %3, align 8
  %6689 = inttoptr i64 %6687 to i32*
  %6690 = load i32, i32* %6689, align 4
  %6691 = icmp ne i32 %6690, 0
  %6692 = zext i1 %6691 to i64
  %6693 = xor i64 %6692, 255
  %6694 = trunc i64 %6693 to i8
  store i8 %6694, i8* %AL.i, align 1
  store i8 0, i8* %12, align 1
  %6695 = trunc i64 %6693 to i32
  %6696 = tail call i32 @llvm.ctpop.i32(i32 %6695)
  %6697 = trunc i32 %6696 to i8
  %6698 = and i8 %6697, 1
  %6699 = xor i8 %6698, 1
  store i8 %6699, i8* %13, align 1
  store i8 0, i8* %15, align 1
  store i8 1, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %6700 = add i64 %6686, -2273
  %6701 = add i64 %6685, 18
  store i64 %6701, i64* %3, align 8
  %6702 = inttoptr i64 %6700 to i8*
  store i8 %6694, i8* %6702, align 1
  %.pre318 = load i64, i64* %3, align 8
  br label %block_.L_405203

block_.L_405203:                                  ; preds = %block_.L_4051dd, %block_4051f1
  %6703 = phi i64 [ %6678, %block_.L_4051dd ], [ %.pre318, %block_4051f1 ]
  %6704 = load i64, i64* %RBP.i, align 8
  %6705 = add i64 %6704, -2273
  %6706 = add i64 %6703, 6
  store i64 %6706, i64* %3, align 8
  %6707 = inttoptr i64 %6705 to i8*
  %6708 = load i8, i8* %6707, align 1
  store i8 %6708, i8* %AL.i, align 1
  %6709 = and i8 %6708, 1
  store i8 0, i8* %12, align 1
  %6710 = zext i8 %6709 to i32
  %6711 = tail call i32 @llvm.ctpop.i32(i32 %6710)
  %6712 = trunc i32 %6711 to i8
  %6713 = xor i8 %6712, 1
  store i8 %6713, i8* %13, align 1
  %6714 = xor i8 %6709, 1
  store i8 %6714, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %6715 = icmp eq i8 %6714, 0
  %.v451 = select i1 %6715, i64 19, i64 14
  %6716 = add i64 %6703, %.v451
  store i64 %6716, i64* %3, align 8
  br i1 %6715, label %block_.L_405216, label %block_405211

block_405211:                                     ; preds = %block_.L_405203
  %6717 = add i64 %6704, -20
  %6718 = add i64 %6716, 656
  store i64 %6718, i64* %3, align 8
  %6719 = inttoptr i64 %6717 to i32*
  store i32 0, i32* %6719, align 4
  %R9.i1560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %.pre319 = load i64, i64* %3, align 8
  br label %block_.L_4054a1

block_.L_405216:                                  ; preds = %block_.L_405203
  %6720 = add i64 %6704, -12
  %6721 = add i64 %6716, 7
  store i64 %6721, i64* %3, align 8
  %6722 = inttoptr i64 %6720 to i32*
  store i32 0, i32* %6722, align 4
  %.pre406 = load i64, i64* %3, align 8
  br label %block_.L_40521d

block_.L_40521d:                                  ; preds = %block_405227, %block_.L_405216
  %6723 = phi i64 [ %6836, %block_405227 ], [ %.pre406, %block_.L_405216 ]
  %6724 = load i64, i64* %RBP.i, align 8
  %6725 = add i64 %6724, -12
  %6726 = add i64 %6723, 4
  store i64 %6726, i64* %3, align 8
  %6727 = inttoptr i64 %6725 to i32*
  %6728 = load i32, i32* %6727, align 4
  %6729 = add i32 %6728, -4
  %6730 = icmp ult i32 %6728, 4
  %6731 = zext i1 %6730 to i8
  store i8 %6731, i8* %12, align 1
  %6732 = and i32 %6729, 255
  %6733 = tail call i32 @llvm.ctpop.i32(i32 %6732)
  %6734 = trunc i32 %6733 to i8
  %6735 = and i8 %6734, 1
  %6736 = xor i8 %6735, 1
  store i8 %6736, i8* %13, align 1
  %6737 = xor i32 %6729, %6728
  %6738 = lshr i32 %6737, 4
  %6739 = trunc i32 %6738 to i8
  %6740 = and i8 %6739, 1
  store i8 %6740, i8* %14, align 1
  %6741 = icmp eq i32 %6729, 0
  %6742 = zext i1 %6741 to i8
  store i8 %6742, i8* %15, align 1
  %6743 = lshr i32 %6729, 31
  %6744 = trunc i32 %6743 to i8
  store i8 %6744, i8* %16, align 1
  %6745 = lshr i32 %6728, 31
  %6746 = xor i32 %6743, %6745
  %6747 = add nuw nsw i32 %6746, %6745
  %6748 = icmp eq i32 %6747, 2
  %6749 = zext i1 %6748 to i8
  store i8 %6749, i8* %17, align 1
  %6750 = icmp ne i8 %6744, 0
  %6751 = xor i1 %6750, %6748
  %.v495 = select i1 %6751, i64 10, i64 60
  %6752 = add i64 %6723, %.v495
  store i64 %6752, i64* %3, align 8
  br i1 %6751, label %block_405227, label %block_.L_405259

block_405227:                                     ; preds = %block_.L_40521d
  %6753 = add i64 %6724, -1120
  store i64 %6753, i64* %RAX.i552, align 8
  %6754 = add i64 %6724, -8
  %6755 = add i64 %6752, 11
  store i64 %6755, i64* %3, align 8
  %6756 = inttoptr i64 %6754 to i32*
  %6757 = load i32, i32* %6756, align 4
  %6758 = sext i32 %6757 to i64
  %6759 = shl nsw i64 %6758, 4
  store i64 %6759, i64* %RCX.i4476, align 8
  %6760 = add i64 %6759, %6753
  store i64 %6760, i64* %RAX.i552, align 8
  %6761 = icmp ult i64 %6760, %6753
  %6762 = icmp ult i64 %6760, %6759
  %6763 = or i1 %6761, %6762
  %6764 = zext i1 %6763 to i8
  store i8 %6764, i8* %12, align 1
  %6765 = trunc i64 %6760 to i32
  %6766 = and i32 %6765, 255
  %6767 = tail call i32 @llvm.ctpop.i32(i32 %6766)
  %6768 = trunc i32 %6767 to i8
  %6769 = and i8 %6768, 1
  %6770 = xor i8 %6769, 1
  store i8 %6770, i8* %13, align 1
  %6771 = xor i64 %6759, %6753
  %6772 = xor i64 %6771, %6760
  %6773 = lshr i64 %6772, 4
  %6774 = trunc i64 %6773 to i8
  %6775 = and i8 %6774, 1
  store i8 %6775, i8* %14, align 1
  %6776 = icmp eq i64 %6760, 0
  %6777 = zext i1 %6776 to i8
  store i8 %6777, i8* %15, align 1
  %6778 = lshr i64 %6760, 63
  %6779 = trunc i64 %6778 to i8
  store i8 %6779, i8* %16, align 1
  %6780 = lshr i64 %6753, 63
  %6781 = lshr i64 %6758, 59
  %6782 = and i64 %6781, 1
  %6783 = xor i64 %6778, %6780
  %6784 = xor i64 %6778, %6782
  %6785 = add nuw nsw i64 %6783, %6784
  %6786 = icmp eq i64 %6785, 2
  %6787 = zext i1 %6786 to i8
  store i8 %6787, i8* %17, align 1
  %6788 = add i64 %6752, 22
  store i64 %6788, i64* %3, align 8
  %6789 = load i32, i32* %6727, align 4
  %6790 = sext i32 %6789 to i64
  store i64 %6790, i64* %RCX.i4476, align 8
  %6791 = shl nsw i64 %6790, 2
  %6792 = add i64 %6791, %6760
  %6793 = add i64 %6752, 25
  store i64 %6793, i64* %3, align 8
  %6794 = inttoptr i64 %6792 to i32*
  %6795 = load i32, i32* %6794, align 4
  %6796 = zext i32 %6795 to i64
  store i64 %6796, i64* %RDX.i658, align 8
  %6797 = add i64 %6752, 29
  store i64 %6797, i64* %3, align 8
  %6798 = load i32, i32* %6727, align 4
  %6799 = sext i32 %6798 to i64
  store i64 %6799, i64* %RAX.i552, align 8
  %6800 = shl nsw i64 %6799, 2
  %6801 = add i64 %6724, -1136
  %6802 = add i64 %6801, %6800
  %6803 = add i64 %6752, 36
  store i64 %6803, i64* %3, align 8
  %6804 = inttoptr i64 %6802 to i32*
  store i32 %6795, i32* %6804, align 4
  %6805 = load i64, i64* %RBP.i, align 8
  %6806 = add i64 %6805, -12
  %6807 = load i64, i64* %3, align 8
  %6808 = add i64 %6807, 3
  store i64 %6808, i64* %3, align 8
  %6809 = inttoptr i64 %6806 to i32*
  %6810 = load i32, i32* %6809, align 4
  %6811 = add i32 %6810, 1
  %6812 = zext i32 %6811 to i64
  store i64 %6812, i64* %RAX.i552, align 8
  %6813 = icmp eq i32 %6810, -1
  %6814 = icmp eq i32 %6811, 0
  %6815 = or i1 %6813, %6814
  %6816 = zext i1 %6815 to i8
  store i8 %6816, i8* %12, align 1
  %6817 = and i32 %6811, 255
  %6818 = tail call i32 @llvm.ctpop.i32(i32 %6817)
  %6819 = trunc i32 %6818 to i8
  %6820 = and i8 %6819, 1
  %6821 = xor i8 %6820, 1
  store i8 %6821, i8* %13, align 1
  %6822 = xor i32 %6811, %6810
  %6823 = lshr i32 %6822, 4
  %6824 = trunc i32 %6823 to i8
  %6825 = and i8 %6824, 1
  store i8 %6825, i8* %14, align 1
  %6826 = zext i1 %6814 to i8
  store i8 %6826, i8* %15, align 1
  %6827 = lshr i32 %6811, 31
  %6828 = trunc i32 %6827 to i8
  store i8 %6828, i8* %16, align 1
  %6829 = lshr i32 %6810, 31
  %6830 = xor i32 %6827, %6829
  %6831 = add nuw nsw i32 %6830, %6827
  %6832 = icmp eq i32 %6831, 2
  %6833 = zext i1 %6832 to i8
  store i8 %6833, i8* %17, align 1
  %6834 = add i64 %6807, 9
  store i64 %6834, i64* %3, align 8
  store i32 %6811, i32* %6809, align 4
  %6835 = load i64, i64* %3, align 8
  %6836 = add i64 %6835, -55
  store i64 %6836, i64* %3, align 8
  br label %block_.L_40521d

block_.L_405259:                                  ; preds = %block_.L_40521d
  %6837 = add i64 %6724, -1136
  %6838 = add i64 %6752, 6
  store i64 %6838, i64* %3, align 8
  %6839 = inttoptr i64 %6837 to i32*
  %6840 = load i32, i32* %6839, align 4
  %6841 = zext i32 %6840 to i64
  store i64 %6841, i64* %RAX.i552, align 8
  %6842 = add i64 %6724, -1128
  %6843 = add i64 %6752, 12
  store i64 %6843, i64* %3, align 8
  %6844 = inttoptr i64 %6842 to i32*
  %6845 = load i32, i32* %6844, align 4
  %6846 = add i32 %6845, %6840
  %6847 = zext i32 %6846 to i64
  store i64 %6847, i64* %RAX.i552, align 8
  %6848 = icmp ult i32 %6846, %6840
  %6849 = icmp ult i32 %6846, %6845
  %6850 = or i1 %6848, %6849
  %6851 = zext i1 %6850 to i8
  store i8 %6851, i8* %12, align 1
  %6852 = and i32 %6846, 255
  %6853 = tail call i32 @llvm.ctpop.i32(i32 %6852)
  %6854 = trunc i32 %6853 to i8
  %6855 = and i8 %6854, 1
  %6856 = xor i8 %6855, 1
  store i8 %6856, i8* %13, align 1
  %6857 = xor i32 %6845, %6840
  %6858 = xor i32 %6857, %6846
  %6859 = lshr i32 %6858, 4
  %6860 = trunc i32 %6859 to i8
  %6861 = and i8 %6860, 1
  store i8 %6861, i8* %14, align 1
  %6862 = icmp eq i32 %6846, 0
  %6863 = zext i1 %6862 to i8
  store i8 %6863, i8* %15, align 1
  %6864 = lshr i32 %6846, 31
  %6865 = trunc i32 %6864 to i8
  store i8 %6865, i8* %16, align 1
  %6866 = lshr i32 %6840, 31
  %6867 = lshr i32 %6845, 31
  %6868 = xor i32 %6864, %6866
  %6869 = xor i32 %6864, %6867
  %6870 = add nuw nsw i32 %6868, %6869
  %6871 = icmp eq i32 %6870, 2
  %6872 = zext i1 %6871 to i8
  store i8 %6872, i8* %17, align 1
  %6873 = add i64 %6724, -1152
  %6874 = add i64 %6752, 18
  store i64 %6874, i64* %3, align 8
  %6875 = inttoptr i64 %6873 to i32*
  store i32 %6846, i32* %6875, align 4
  %6876 = load i64, i64* %RBP.i, align 8
  %6877 = add i64 %6876, -1136
  %6878 = load i64, i64* %3, align 8
  %6879 = add i64 %6878, 6
  store i64 %6879, i64* %3, align 8
  %6880 = inttoptr i64 %6877 to i32*
  %6881 = load i32, i32* %6880, align 4
  %6882 = zext i32 %6881 to i64
  store i64 %6882, i64* %RAX.i552, align 8
  %6883 = add i64 %6876, -1128
  %6884 = add i64 %6878, 12
  store i64 %6884, i64* %3, align 8
  %6885 = inttoptr i64 %6883 to i32*
  %6886 = load i32, i32* %6885, align 4
  %6887 = sub i32 %6881, %6886
  %6888 = zext i32 %6887 to i64
  store i64 %6888, i64* %RAX.i552, align 8
  %6889 = icmp ult i32 %6881, %6886
  %6890 = zext i1 %6889 to i8
  store i8 %6890, i8* %12, align 1
  %6891 = and i32 %6887, 255
  %6892 = tail call i32 @llvm.ctpop.i32(i32 %6891)
  %6893 = trunc i32 %6892 to i8
  %6894 = and i8 %6893, 1
  %6895 = xor i8 %6894, 1
  store i8 %6895, i8* %13, align 1
  %6896 = xor i32 %6886, %6881
  %6897 = xor i32 %6896, %6887
  %6898 = lshr i32 %6897, 4
  %6899 = trunc i32 %6898 to i8
  %6900 = and i8 %6899, 1
  store i8 %6900, i8* %14, align 1
  %6901 = icmp eq i32 %6887, 0
  %6902 = zext i1 %6901 to i8
  store i8 %6902, i8* %15, align 1
  %6903 = lshr i32 %6887, 31
  %6904 = trunc i32 %6903 to i8
  store i8 %6904, i8* %16, align 1
  %6905 = lshr i32 %6881, 31
  %6906 = lshr i32 %6886, 31
  %6907 = xor i32 %6906, %6905
  %6908 = xor i32 %6903, %6905
  %6909 = add nuw nsw i32 %6908, %6907
  %6910 = icmp eq i32 %6909, 2
  %6911 = zext i1 %6910 to i8
  store i8 %6911, i8* %17, align 1
  %6912 = add i64 %6876, -1148
  %6913 = add i64 %6878, 18
  store i64 %6913, i64* %3, align 8
  %6914 = inttoptr i64 %6912 to i32*
  store i32 %6887, i32* %6914, align 4
  %6915 = load i64, i64* %RBP.i, align 8
  %6916 = add i64 %6915, -1132
  %6917 = load i64, i64* %3, align 8
  %6918 = add i64 %6917, 6
  store i64 %6918, i64* %3, align 8
  %6919 = inttoptr i64 %6916 to i32*
  %6920 = load i32, i32* %6919, align 4
  %6921 = zext i32 %6920 to i64
  store i64 %6921, i64* %RAX.i552, align 8
  %6922 = add i64 %6915, -1124
  %6923 = add i64 %6917, 12
  store i64 %6923, i64* %3, align 8
  %6924 = inttoptr i64 %6922 to i32*
  %6925 = load i32, i32* %6924, align 4
  %6926 = sub i32 %6920, %6925
  %6927 = zext i32 %6926 to i64
  store i64 %6927, i64* %RAX.i552, align 8
  %6928 = icmp ult i32 %6920, %6925
  %6929 = zext i1 %6928 to i8
  store i8 %6929, i8* %12, align 1
  %6930 = and i32 %6926, 255
  %6931 = tail call i32 @llvm.ctpop.i32(i32 %6930)
  %6932 = trunc i32 %6931 to i8
  %6933 = and i8 %6932, 1
  %6934 = xor i8 %6933, 1
  store i8 %6934, i8* %13, align 1
  %6935 = xor i32 %6925, %6920
  %6936 = xor i32 %6935, %6926
  %6937 = lshr i32 %6936, 4
  %6938 = trunc i32 %6937 to i8
  %6939 = and i8 %6938, 1
  store i8 %6939, i8* %14, align 1
  %6940 = icmp eq i32 %6926, 0
  %6941 = zext i1 %6940 to i8
  store i8 %6941, i8* %15, align 1
  %6942 = lshr i32 %6926, 31
  %6943 = trunc i32 %6942 to i8
  store i8 %6943, i8* %16, align 1
  %6944 = lshr i32 %6920, 31
  %6945 = lshr i32 %6925, 31
  %6946 = xor i32 %6945, %6944
  %6947 = xor i32 %6942, %6944
  %6948 = add nuw nsw i32 %6947, %6946
  %6949 = icmp eq i32 %6948, 2
  %6950 = zext i1 %6949 to i8
  store i8 %6950, i8* %17, align 1
  %6951 = add i64 %6915, -1144
  %6952 = add i64 %6917, 18
  store i64 %6952, i64* %3, align 8
  %6953 = inttoptr i64 %6951 to i32*
  store i32 %6926, i32* %6953, align 4
  %6954 = load i64, i64* %RBP.i, align 8
  %6955 = add i64 %6954, -1132
  %6956 = load i64, i64* %3, align 8
  %6957 = add i64 %6956, 6
  store i64 %6957, i64* %3, align 8
  %6958 = inttoptr i64 %6955 to i32*
  %6959 = load i32, i32* %6958, align 4
  %6960 = zext i32 %6959 to i64
  store i64 %6960, i64* %RAX.i552, align 8
  %6961 = add i64 %6954, -1124
  %6962 = add i64 %6956, 12
  store i64 %6962, i64* %3, align 8
  %6963 = inttoptr i64 %6961 to i32*
  %6964 = load i32, i32* %6963, align 4
  %6965 = add i32 %6964, %6959
  %6966 = zext i32 %6965 to i64
  store i64 %6966, i64* %RAX.i552, align 8
  %6967 = icmp ult i32 %6965, %6959
  %6968 = icmp ult i32 %6965, %6964
  %6969 = or i1 %6967, %6968
  %6970 = zext i1 %6969 to i8
  store i8 %6970, i8* %12, align 1
  %6971 = and i32 %6965, 255
  %6972 = tail call i32 @llvm.ctpop.i32(i32 %6971)
  %6973 = trunc i32 %6972 to i8
  %6974 = and i8 %6973, 1
  %6975 = xor i8 %6974, 1
  store i8 %6975, i8* %13, align 1
  %6976 = xor i32 %6964, %6959
  %6977 = xor i32 %6976, %6965
  %6978 = lshr i32 %6977, 4
  %6979 = trunc i32 %6978 to i8
  %6980 = and i8 %6979, 1
  store i8 %6980, i8* %14, align 1
  %6981 = icmp eq i32 %6965, 0
  %6982 = zext i1 %6981 to i8
  store i8 %6982, i8* %15, align 1
  %6983 = lshr i32 %6965, 31
  %6984 = trunc i32 %6983 to i8
  store i8 %6984, i8* %16, align 1
  %6985 = lshr i32 %6959, 31
  %6986 = lshr i32 %6964, 31
  %6987 = xor i32 %6983, %6985
  %6988 = xor i32 %6983, %6986
  %6989 = add nuw nsw i32 %6987, %6988
  %6990 = icmp eq i32 %6989, 2
  %6991 = zext i1 %6990 to i8
  store i8 %6991, i8* %17, align 1
  %6992 = add i64 %6954, -1140
  %6993 = add i64 %6956, 18
  store i64 %6993, i64* %3, align 8
  %6994 = inttoptr i64 %6992 to i32*
  store i32 %6965, i32* %6994, align 4
  %6995 = load i64, i64* %RBP.i, align 8
  %6996 = add i64 %6995, -12
  %6997 = load i64, i64* %3, align 8
  %6998 = add i64 %6997, 7
  store i64 %6998, i64* %3, align 8
  %6999 = inttoptr i64 %6996 to i32*
  store i32 0, i32* %6999, align 4
  %.pre407 = load i64, i64* %3, align 8
  br label %block_.L_4052a8

block_.L_4052a8:                                  ; preds = %block_.L_405474, %block_.L_405259
  %7000 = phi i64 [ %8179, %block_.L_405474 ], [ %.pre407, %block_.L_405259 ]
  %7001 = load i64, i64* %RBP.i, align 8
  %7002 = add i64 %7001, -12
  %7003 = add i64 %7000, 4
  store i64 %7003, i64* %3, align 8
  %7004 = inttoptr i64 %7002 to i32*
  %7005 = load i32, i32* %7004, align 4
  %7006 = add i32 %7005, -2
  %7007 = icmp ult i32 %7005, 2
  %7008 = zext i1 %7007 to i8
  store i8 %7008, i8* %12, align 1
  %7009 = and i32 %7006, 255
  %7010 = tail call i32 @llvm.ctpop.i32(i32 %7009)
  %7011 = trunc i32 %7010 to i8
  %7012 = and i8 %7011, 1
  %7013 = xor i8 %7012, 1
  store i8 %7013, i8* %13, align 1
  %7014 = xor i32 %7006, %7005
  %7015 = lshr i32 %7014, 4
  %7016 = trunc i32 %7015 to i8
  %7017 = and i8 %7016, 1
  store i8 %7017, i8* %14, align 1
  %7018 = icmp eq i32 %7006, 0
  %7019 = zext i1 %7018 to i8
  store i8 %7019, i8* %15, align 1
  %7020 = lshr i32 %7006, 31
  %7021 = trunc i32 %7020 to i8
  store i8 %7021, i8* %16, align 1
  %7022 = lshr i32 %7005, 31
  %7023 = xor i32 %7020, %7022
  %7024 = add nuw nsw i32 %7023, %7022
  %7025 = icmp eq i32 %7024, 2
  %7026 = zext i1 %7025 to i8
  store i8 %7026, i8* %17, align 1
  %7027 = icmp ne i8 %7021, 0
  %7028 = xor i1 %7027, %7025
  %.v496 = select i1 %7028, i64 10, i64 479
  %7029 = add i64 %7000, %.v496
  %7030 = add i64 %7029, 5
  store i64 %7030, i64* %3, align 8
  br i1 %7028, label %block_4052b2, label %block_.L_405487

block_4052b2:                                     ; preds = %block_.L_4052a8
  store i64 3, i64* %RAX.i552, align 8
  %7031 = add i64 %7029, 8
  store i64 %7031, i64* %3, align 8
  %7032 = load i32, i32* %7004, align 4
  %7033 = sub i32 3, %7032
  %7034 = zext i32 %7033 to i64
  store i64 %7034, i64* %RAX.i552, align 8
  %7035 = icmp ugt i32 %7032, 3
  %7036 = zext i1 %7035 to i8
  store i8 %7036, i8* %12, align 1
  %7037 = and i32 %7033, 255
  %7038 = tail call i32 @llvm.ctpop.i32(i32 %7037)
  %7039 = trunc i32 %7038 to i8
  %7040 = and i8 %7039, 1
  %7041 = xor i8 %7040, 1
  store i8 %7041, i8* %13, align 1
  %7042 = xor i32 %7033, %7032
  %7043 = lshr i32 %7042, 4
  %7044 = trunc i32 %7043 to i8
  %7045 = and i8 %7044, 1
  store i8 %7045, i8* %14, align 1
  %7046 = icmp eq i32 %7033, 0
  %7047 = zext i1 %7046 to i8
  store i8 %7047, i8* %15, align 1
  %7048 = lshr i32 %7033, 31
  %7049 = trunc i32 %7048 to i8
  store i8 %7049, i8* %16, align 1
  %7050 = lshr i32 %7032, 31
  %7051 = add nuw nsw i32 %7048, %7050
  %7052 = icmp eq i32 %7051, 2
  %7053 = zext i1 %7052 to i8
  store i8 %7053, i8* %17, align 1
  %7054 = add i64 %7001, -28
  %7055 = add i64 %7029, 11
  store i64 %7055, i64* %3, align 8
  %7056 = inttoptr i64 %7054 to i32*
  store i32 %7033, i32* %7056, align 4
  %7057 = load i64, i64* %RBP.i, align 8
  %7058 = add i64 %7057, -2196
  %7059 = load i64, i64* %3, align 8
  %7060 = add i64 %7059, 7
  store i64 %7060, i64* %3, align 8
  %7061 = inttoptr i64 %7058 to i32*
  %7062 = load i32, i32* %7061, align 4
  %7063 = add i32 %7062, -6
  %7064 = icmp ult i32 %7062, 6
  %7065 = zext i1 %7064 to i8
  store i8 %7065, i8* %12, align 1
  %7066 = and i32 %7063, 255
  %7067 = tail call i32 @llvm.ctpop.i32(i32 %7066)
  %7068 = trunc i32 %7067 to i8
  %7069 = and i8 %7068, 1
  %7070 = xor i8 %7069, 1
  store i8 %7070, i8* %13, align 1
  %7071 = xor i32 %7063, %7062
  %7072 = lshr i32 %7071, 4
  %7073 = trunc i32 %7072 to i8
  %7074 = and i8 %7073, 1
  store i8 %7074, i8* %14, align 1
  %7075 = icmp eq i32 %7063, 0
  %7076 = zext i1 %7075 to i8
  store i8 %7076, i8* %15, align 1
  %7077 = lshr i32 %7063, 31
  %7078 = trunc i32 %7077 to i8
  store i8 %7078, i8* %16, align 1
  %7079 = lshr i32 %7062, 31
  %7080 = xor i32 %7077, %7079
  %7081 = add nuw nsw i32 %7080, %7079
  %7082 = icmp eq i32 %7081, 2
  %7083 = zext i1 %7082 to i8
  store i8 %7083, i8* %17, align 1
  %7084 = icmp ne i8 %7078, 0
  %7085 = xor i1 %7084, %7082
  %.v463 = select i1 %7085, i64 13, i64 256
  %7086 = add i64 %7059, %.v463
  %7087 = add i64 %7057, -2176
  %7088 = add i64 %7086, 7
  store i64 %7088, i64* %3, align 8
  store i64 %7087, i64* %RAX.i552, align 8
  br i1 %7085, label %block_4052ca, label %block_.L_4053bd

block_4052ca:                                     ; preds = %block_4052b2
  store i64 6, i64* %RCX.i4476, align 8
  store i64 1, i64* %RDX.i658, align 8
  store i64 5, i64* %RSI.i757, align 8
  store i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64* %RDI.i4259, align 8
  %7089 = add i64 %7057, -12
  %7090 = add i64 %7086, 36
  store i64 %7090, i64* %3, align 8
  %7091 = inttoptr i64 %7089 to i32*
  %7092 = load i32, i32* %7091, align 4
  %7093 = sext i32 %7092 to i64
  store i64 %7093, i64* %R8.i2321, align 8
  %7094 = shl nsw i64 %7093, 2
  %7095 = add i64 %7057, -1152
  %7096 = add i64 %7095, %7094
  %7097 = add i64 %7086, 44
  store i64 %7097, i64* %3, align 8
  %7098 = inttoptr i64 %7096 to i32*
  %7099 = load i32, i32* %7098, align 4
  %7100 = zext i32 %7099 to i64
  store i64 %7100, i64* %6056, align 8
  %7101 = add i64 %7057, -28
  %7102 = add i64 %7086, 48
  store i64 %7102, i64* %3, align 8
  %7103 = inttoptr i64 %7101 to i32*
  %7104 = load i32, i32* %7103, align 4
  %7105 = sext i32 %7104 to i64
  store i64 %7105, i64* %R8.i2321, align 8
  %7106 = shl nsw i64 %7105, 2
  %7107 = add nsw i64 %7106, -1152
  %7108 = add i64 %7107, %7057
  %7109 = add i64 %7086, 56
  store i64 %7109, i64* %3, align 8
  %7110 = inttoptr i64 %7108 to i32*
  %7111 = load i32, i32* %7110, align 4
  %7112 = add i32 %7111, %7099
  %7113 = zext i32 %7112 to i64
  store i64 %7113, i64* %6056, align 8
  %7114 = icmp ult i32 %7112, %7099
  %7115 = icmp ult i32 %7112, %7111
  %7116 = or i1 %7114, %7115
  %7117 = zext i1 %7116 to i8
  store i8 %7117, i8* %12, align 1
  %7118 = and i32 %7112, 255
  %7119 = tail call i32 @llvm.ctpop.i32(i32 %7118)
  %7120 = trunc i32 %7119 to i8
  %7121 = and i8 %7120, 1
  %7122 = xor i8 %7121, 1
  store i8 %7122, i8* %13, align 1
  %7123 = xor i32 %7111, %7099
  %7124 = xor i32 %7123, %7112
  %7125 = lshr i32 %7124, 4
  %7126 = trunc i32 %7125 to i8
  %7127 = and i8 %7126, 1
  store i8 %7127, i8* %14, align 1
  %7128 = icmp eq i32 %7112, 0
  %7129 = zext i1 %7128 to i8
  store i8 %7129, i8* %15, align 1
  %7130 = lshr i32 %7112, 31
  %7131 = trunc i32 %7130 to i8
  store i8 %7131, i8* %16, align 1
  %7132 = lshr i32 %7099, 31
  %7133 = lshr i32 %7111, 31
  %7134 = xor i32 %7130, %7132
  %7135 = xor i32 %7130, %7133
  %7136 = add nuw nsw i32 %7134, %7135
  %7137 = icmp eq i32 %7136, 2
  %7138 = zext i1 %7137 to i8
  store i8 %7138, i8* %17, align 1
  %7139 = add i64 %7057, -2200
  %7140 = add i64 %7086, 63
  store i64 %7140, i64* %3, align 8
  %7141 = inttoptr i64 %7139 to i32*
  %7142 = load i32, i32* %7141, align 4
  %7143 = sext i32 %7142 to i64
  %7144 = shl nsw i64 %7143, 6
  store i64 %7144, i64* %R8.i2321, align 8
  %7145 = add i64 %7144, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  store i64 %7145, i64* %R10.i2302, align 8
  %7146 = icmp ult i64 %7145, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  %7147 = icmp ult i64 %7145, %7144
  %7148 = or i1 %7146, %7147
  %7149 = zext i1 %7148 to i8
  store i8 %7149, i8* %12, align 1
  %7150 = trunc i64 %7145 to i32
  %7151 = and i32 %7150, 248
  %7152 = tail call i32 @llvm.ctpop.i32(i32 %7151)
  %7153 = trunc i32 %7152 to i8
  %7154 = and i8 %7153, 1
  %7155 = xor i8 %7154, 1
  store i8 %7155, i8* %13, align 1
  %7156 = xor i64 %7145, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  %7157 = lshr i64 %7156, 4
  %7158 = trunc i64 %7157 to i8
  %7159 = and i8 %7158, 1
  store i8 %7159, i8* %14, align 1
  %7160 = icmp eq i64 %7145, 0
  %7161 = zext i1 %7160 to i8
  store i8 %7161, i8* %15, align 1
  %7162 = lshr i64 %7145, 63
  %7163 = trunc i64 %7162 to i8
  store i8 %7163, i8* %16, align 1
  %7164 = lshr i64 %7143, 57
  %7165 = and i64 %7164, 1
  %7166 = xor i64 %7162, lshr (i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64 63)
  %7167 = xor i64 %7162, %7165
  %7168 = add nuw nsw i64 %7166, %7167
  %7169 = icmp eq i64 %7168, 2
  %7170 = zext i1 %7169 to i8
  store i8 %7170, i8* %17, align 1
  %7171 = load i32, i32* %R9D.i2316, align 4
  %7172 = inttoptr i64 %7145 to i32*
  %7173 = add i64 %7086, 77
  store i64 %7173, i64* %3, align 8
  %7174 = load i32, i32* %7172, align 8
  %7175 = sext i32 %7171 to i64
  %7176 = sext i32 %7174 to i64
  %7177 = mul nsw i64 %7176, %7175
  %7178 = trunc i64 %7177 to i32
  %7179 = and i64 %7177, 4294967295
  store i64 %7179, i64* %6056, align 8
  %7180 = shl i64 %7177, 32
  %7181 = ashr exact i64 %7180, 32
  %7182 = icmp ne i64 %7181, %7177
  %7183 = zext i1 %7182 to i8
  store i8 %7183, i8* %12, align 1
  %7184 = and i32 %7178, 255
  %7185 = tail call i32 @llvm.ctpop.i32(i32 %7184)
  %7186 = trunc i32 %7185 to i8
  %7187 = and i8 %7186, 1
  %7188 = xor i8 %7187, 1
  store i8 %7188, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %7189 = lshr i32 %7178, 31
  %7190 = trunc i32 %7189 to i8
  store i8 %7190, i8* %16, align 1
  store i8 %7183, i8* %17, align 1
  %7191 = load i32, i32* %ESI.i4280, align 4
  %7192 = zext i32 %7191 to i64
  store i64 %7192, i64* %6058, align 8
  %7193 = load i64, i64* %RBP.i, align 8
  %7194 = add i64 %7193, -2196
  %7195 = add i64 %7086, 87
  store i64 %7195, i64* %3, align 8
  %7196 = inttoptr i64 %7194 to i32*
  %7197 = load i32, i32* %7196, align 4
  %7198 = sub i32 %7191, %7197
  %7199 = zext i32 %7198 to i64
  store i64 %7199, i64* %6058, align 8
  %7200 = icmp ult i32 %7191, %7197
  %7201 = zext i1 %7200 to i8
  store i8 %7201, i8* %12, align 1
  %7202 = and i32 %7198, 255
  %7203 = tail call i32 @llvm.ctpop.i32(i32 %7202)
  %7204 = trunc i32 %7203 to i8
  %7205 = and i8 %7204, 1
  %7206 = xor i8 %7205, 1
  store i8 %7206, i8* %13, align 1
  %7207 = xor i32 %7197, %7191
  %7208 = xor i32 %7207, %7198
  %7209 = lshr i32 %7208, 4
  %7210 = trunc i32 %7209 to i8
  %7211 = and i8 %7210, 1
  store i8 %7211, i8* %14, align 1
  %7212 = icmp eq i32 %7198, 0
  %7213 = zext i1 %7212 to i8
  store i8 %7213, i8* %15, align 1
  %7214 = lshr i32 %7198, 31
  %7215 = trunc i32 %7214 to i8
  store i8 %7215, i8* %16, align 1
  %7216 = lshr i32 %7191, 31
  %7217 = lshr i32 %7197, 31
  %7218 = xor i32 %7217, %7216
  %7219 = xor i32 %7214, %7216
  %7220 = add nuw nsw i32 %7219, %7218
  %7221 = icmp eq i32 %7220, 2
  %7222 = zext i1 %7221 to i8
  store i8 %7222, i8* %17, align 1
  %7223 = add i64 %7193, -2280
  %7224 = load i32, i32* %ECX.i4446, align 4
  %7225 = add i64 %7086, 93
  store i64 %7225, i64* %3, align 8
  %7226 = inttoptr i64 %7223 to i32*
  store i32 %7224, i32* %7226, align 4
  %7227 = load i32, i32* %R11D.i2293, align 4
  %7228 = zext i32 %7227 to i64
  %7229 = load i64, i64* %3, align 8
  store i64 %7228, i64* %RCX.i4476, align 8
  %7230 = load i32, i32* %EDX.i4468, align 4
  %7231 = zext i32 %7230 to i64
  store i64 %7231, i64* %6058, align 8
  %7232 = add i64 %7229, 9
  store i64 %7232, i64* %3, align 8
  %7233 = trunc i32 %7227 to i5
  switch i5 %7233, label %7239 [
    i5 0, label %routine_shll__cl___r11d.exit
    i5 1, label %7234
  ]

; <label>:7234:                                   ; preds = %block_4052ca
  %7235 = shl i32 %7230, 1
  %7236 = icmp slt i32 %7230, 0
  %7237 = icmp slt i32 %7235, 0
  %7238 = xor i1 %7236, %7237
  br label %7248

; <label>:7239:                                   ; preds = %block_4052ca
  %7240 = and i32 %7227, 31
  %7241 = zext i32 %7240 to i64
  %7242 = add nuw nsw i64 %7241, 4294967295
  %7243 = and i64 %7242, 4294967295
  %7244 = shl i64 %7231, %7243
  %7245 = trunc i64 %7244 to i32
  %7246 = icmp slt i32 %7245, 0
  %7247 = shl i32 %7245, 1
  br label %7248

; <label>:7248:                                   ; preds = %7239, %7234
  %7249 = phi i1 [ %7236, %7234 ], [ %7246, %7239 ]
  %7250 = phi i1 [ %7238, %7234 ], [ false, %7239 ]
  %7251 = phi i32 [ %7235, %7234 ], [ %7247, %7239 ]
  %7252 = zext i32 %7251 to i64
  store i64 %7252, i64* %6058, align 8
  %7253 = zext i1 %7249 to i8
  store i8 %7253, i8* %12, align 1
  %7254 = and i32 %7251, 254
  %7255 = tail call i32 @llvm.ctpop.i32(i32 %7254)
  %7256 = trunc i32 %7255 to i8
  %7257 = and i8 %7256, 1
  %7258 = xor i8 %7257, 1
  store i8 %7258, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %7259 = icmp eq i32 %7251, 0
  %7260 = zext i1 %7259 to i8
  store i8 %7260, i8* %15, align 1
  %7261 = lshr i32 %7251, 31
  %7262 = trunc i32 %7261 to i8
  store i8 %7262, i8* %16, align 1
  %7263 = zext i1 %7250 to i8
  store i8 %7263, i8* %17, align 1
  br label %routine_shll__cl___r11d.exit

routine_shll__cl___r11d.exit:                     ; preds = %7248, %block_4052ca
  %7264 = phi i32 [ %7251, %7248 ], [ %7230, %block_4052ca ]
  %7265 = load i32, i32* %R9D.i2316, align 4
  %7266 = add i32 %7264, %7265
  %7267 = zext i32 %7266 to i64
  store i64 %7267, i64* %6056, align 8
  %7268 = icmp ult i32 %7266, %7265
  %7269 = icmp ult i32 %7266, %7264
  %7270 = or i1 %7268, %7269
  %7271 = zext i1 %7270 to i8
  store i8 %7271, i8* %12, align 1
  %7272 = and i32 %7266, 255
  %7273 = tail call i32 @llvm.ctpop.i32(i32 %7272)
  %7274 = trunc i32 %7273 to i8
  %7275 = and i8 %7274, 1
  %7276 = xor i8 %7275, 1
  store i8 %7276, i8* %13, align 1
  %7277 = xor i32 %7264, %7265
  %7278 = xor i32 %7277, %7266
  %7279 = lshr i32 %7278, 4
  %7280 = trunc i32 %7279 to i8
  %7281 = and i8 %7280, 1
  store i8 %7281, i8* %14, align 1
  %7282 = icmp eq i32 %7266, 0
  %7283 = zext i1 %7282 to i8
  store i8 %7283, i8* %15, align 1
  %7284 = lshr i32 %7266, 31
  %7285 = trunc i32 %7284 to i8
  store i8 %7285, i8* %16, align 1
  %7286 = lshr i32 %7265, 31
  %7287 = lshr i32 %7264, 31
  %7288 = xor i32 %7284, %7286
  %7289 = xor i32 %7284, %7287
  %7290 = add nuw nsw i32 %7288, %7289
  %7291 = icmp eq i32 %7290, 2
  %7292 = zext i1 %7291 to i8
  store i8 %7292, i8* %17, align 1
  %7293 = load i64, i64* %RBP.i, align 8
  %7294 = add i64 %7293, -2280
  %7295 = add i64 %7229, 19
  store i64 %7295, i64* %3, align 8
  %7296 = inttoptr i64 %7294 to i32*
  %7297 = load i32, i32* %7296, align 4
  %7298 = zext i32 %7297 to i64
  store i64 %7298, i64* %6058, align 8
  %7299 = add i64 %7293, -2196
  %7300 = add i64 %7229, 26
  store i64 %7300, i64* %3, align 8
  %7301 = inttoptr i64 %7299 to i32*
  %7302 = load i32, i32* %7301, align 4
  %7303 = sub i32 %7297, %7302
  %7304 = zext i32 %7303 to i64
  store i64 %7304, i64* %6058, align 8
  %7305 = icmp ult i32 %7297, %7302
  %7306 = zext i1 %7305 to i8
  store i8 %7306, i8* %12, align 1
  %7307 = and i32 %7303, 255
  %7308 = tail call i32 @llvm.ctpop.i32(i32 %7307)
  %7309 = trunc i32 %7308 to i8
  %7310 = and i8 %7309, 1
  %7311 = xor i8 %7310, 1
  store i8 %7311, i8* %13, align 1
  %7312 = xor i32 %7302, %7297
  %7313 = xor i32 %7312, %7303
  %7314 = lshr i32 %7313, 4
  %7315 = trunc i32 %7314 to i8
  %7316 = and i8 %7315, 1
  store i8 %7316, i8* %14, align 1
  %7317 = icmp eq i32 %7303, 0
  %7318 = zext i1 %7317 to i8
  store i8 %7318, i8* %15, align 1
  %7319 = lshr i32 %7303, 31
  %7320 = trunc i32 %7319 to i8
  store i8 %7320, i8* %16, align 1
  %7321 = lshr i32 %7297, 31
  %7322 = lshr i32 %7302, 31
  %7323 = xor i32 %7322, %7321
  %7324 = xor i32 %7319, %7321
  %7325 = add nuw nsw i32 %7324, %7323
  %7326 = icmp eq i32 %7325, 2
  %7327 = zext i1 %7326 to i8
  store i8 %7327, i8* %17, align 1
  store i64 %7304, i64* %RCX.i4476, align 8
  %7328 = add i64 %7229, 32
  store i64 %7328, i64* %3, align 8
  %7329 = trunc i32 %7303 to i5
  switch i5 %7329, label %7333 [
    i5 0, label %routine_sarl__cl___r9d.exit2264
    i5 1, label %7330
  ]

; <label>:7330:                                   ; preds = %routine_shll__cl___r11d.exit
  %7331 = shl nuw i64 %7267, 32
  %7332 = ashr i64 %7331, 33
  br label %7340

; <label>:7333:                                   ; preds = %routine_shll__cl___r11d.exit
  %7334 = and i32 %7303, 31
  %7335 = zext i32 %7334 to i64
  %7336 = add nsw i64 %7335, -1
  %7337 = sext i32 %7266 to i64
  %7338 = ashr i64 %7337, %7336
  %7339 = lshr i64 %7338, 1
  br label %7340

; <label>:7340:                                   ; preds = %7333, %7330
  %7341 = phi i64 [ %7339, %7333 ], [ %7332, %7330 ]
  %7342 = phi i64 [ %7338, %7333 ], [ %7267, %7330 ]
  %7343 = trunc i64 %7342 to i8
  %7344 = and i8 %7343, 1
  %7345 = trunc i64 %7341 to i32
  %7346 = and i64 %7341, 4294967295
  store i64 %7346, i64* %6056, align 8
  store i8 %7344, i8* %12, align 1
  %7347 = and i32 %7345, 255
  %7348 = tail call i32 @llvm.ctpop.i32(i32 %7347)
  %7349 = trunc i32 %7348 to i8
  %7350 = and i8 %7349, 1
  %7351 = xor i8 %7350, 1
  store i8 %7351, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %7352 = icmp eq i32 %7345, 0
  %7353 = zext i1 %7352 to i8
  store i8 %7353, i8* %15, align 1
  %7354 = lshr i32 %7345, 31
  %7355 = trunc i32 %7354 to i8
  store i8 %7355, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %7356 = trunc i64 %7341 to i32
  br label %routine_sarl__cl___r9d.exit2264

routine_sarl__cl___r9d.exit2264:                  ; preds = %7340, %routine_shll__cl___r11d.exit
  %7357 = phi i32 [ %7356, %7340 ], [ %7266, %routine_shll__cl___r11d.exit ]
  %7358 = add i64 %7293, -8
  %7359 = add i64 %7229, 36
  store i64 %7359, i64* %3, align 8
  %7360 = inttoptr i64 %7358 to i32*
  %7361 = load i32, i32* %7360, align 4
  %7362 = sext i32 %7361 to i64
  %7363 = shl nsw i64 %7362, 6
  store i64 %7363, i64* %R8.i2321, align 8
  %7364 = load i64, i64* %RAX.i552, align 8
  %7365 = add i64 %7363, %7364
  store i64 %7365, i64* %R10.i2302, align 8
  %7366 = icmp ult i64 %7365, %7364
  %7367 = icmp ult i64 %7365, %7363
  %7368 = or i1 %7366, %7367
  %7369 = zext i1 %7368 to i8
  store i8 %7369, i8* %12, align 1
  %7370 = trunc i64 %7365 to i32
  %7371 = and i32 %7370, 255
  %7372 = tail call i32 @llvm.ctpop.i32(i32 %7371)
  %7373 = trunc i32 %7372 to i8
  %7374 = and i8 %7373, 1
  %7375 = xor i8 %7374, 1
  store i8 %7375, i8* %13, align 1
  %7376 = xor i64 %7364, %7365
  %7377 = lshr i64 %7376, 4
  %7378 = trunc i64 %7377 to i8
  %7379 = and i8 %7378, 1
  store i8 %7379, i8* %14, align 1
  %7380 = icmp eq i64 %7365, 0
  %7381 = zext i1 %7380 to i8
  store i8 %7381, i8* %15, align 1
  %7382 = lshr i64 %7365, 63
  %7383 = trunc i64 %7382 to i8
  store i8 %7383, i8* %16, align 1
  %7384 = lshr i64 %7364, 63
  %7385 = lshr i64 %7362, 57
  %7386 = and i64 %7385, 1
  %7387 = xor i64 %7382, %7384
  %7388 = xor i64 %7382, %7386
  %7389 = add nuw nsw i64 %7387, %7388
  %7390 = icmp eq i64 %7389, 2
  %7391 = zext i1 %7390 to i8
  store i8 %7391, i8* %17, align 1
  %7392 = add i64 %7293, -12
  %7393 = add i64 %7229, 50
  store i64 %7393, i64* %3, align 8
  %7394 = inttoptr i64 %7392 to i32*
  %7395 = load i32, i32* %7394, align 4
  %7396 = sext i32 %7395 to i64
  store i64 %7396, i64* %R8.i2321, align 8
  %7397 = shl nsw i64 %7396, 2
  %7398 = add i64 %7397, %7365
  %7399 = add i64 %7229, 54
  store i64 %7399, i64* %3, align 8
  %7400 = inttoptr i64 %7398 to i32*
  store i32 %7357, i32* %7400, align 4
  %7401 = load i64, i64* %RBP.i, align 8
  %7402 = add i64 %7401, -12
  %7403 = load i64, i64* %3, align 8
  %7404 = add i64 %7403, 4
  store i64 %7404, i64* %3, align 8
  %7405 = inttoptr i64 %7402 to i32*
  %7406 = load i32, i32* %7405, align 4
  %7407 = sext i32 %7406 to i64
  store i64 %7407, i64* %R8.i2321, align 8
  %7408 = shl nsw i64 %7407, 2
  %7409 = add i64 %7401, -1152
  %7410 = add i64 %7409, %7408
  %7411 = add i64 %7403, 12
  store i64 %7411, i64* %3, align 8
  %7412 = inttoptr i64 %7410 to i32*
  %7413 = load i32, i32* %7412, align 4
  %7414 = zext i32 %7413 to i64
  store i64 %7414, i64* %6056, align 8
  %7415 = add i64 %7401, -28
  %7416 = add i64 %7403, 16
  store i64 %7416, i64* %3, align 8
  %7417 = inttoptr i64 %7415 to i32*
  %7418 = load i32, i32* %7417, align 4
  %7419 = sext i32 %7418 to i64
  store i64 %7419, i64* %R8.i2321, align 8
  %7420 = shl nsw i64 %7419, 2
  %7421 = add nsw i64 %7420, -1152
  %7422 = add i64 %7421, %7401
  %7423 = add i64 %7403, 24
  store i64 %7423, i64* %3, align 8
  %7424 = inttoptr i64 %7422 to i32*
  %7425 = load i32, i32* %7424, align 4
  %7426 = sub i32 %7413, %7425
  %7427 = zext i32 %7426 to i64
  store i64 %7427, i64* %6056, align 8
  %7428 = icmp ult i32 %7413, %7425
  %7429 = zext i1 %7428 to i8
  store i8 %7429, i8* %12, align 1
  %7430 = and i32 %7426, 255
  %7431 = tail call i32 @llvm.ctpop.i32(i32 %7430)
  %7432 = trunc i32 %7431 to i8
  %7433 = and i8 %7432, 1
  %7434 = xor i8 %7433, 1
  store i8 %7434, i8* %13, align 1
  %7435 = xor i32 %7425, %7413
  %7436 = xor i32 %7435, %7426
  %7437 = lshr i32 %7436, 4
  %7438 = trunc i32 %7437 to i8
  %7439 = and i8 %7438, 1
  store i8 %7439, i8* %14, align 1
  %7440 = icmp eq i32 %7426, 0
  %7441 = zext i1 %7440 to i8
  store i8 %7441, i8* %15, align 1
  %7442 = lshr i32 %7426, 31
  %7443 = trunc i32 %7442 to i8
  store i8 %7443, i8* %16, align 1
  %7444 = lshr i32 %7413, 31
  %7445 = lshr i32 %7425, 31
  %7446 = xor i32 %7445, %7444
  %7447 = xor i32 %7442, %7444
  %7448 = add nuw nsw i32 %7447, %7446
  %7449 = icmp eq i32 %7448, 2
  %7450 = zext i1 %7449 to i8
  store i8 %7450, i8* %17, align 1
  %7451 = add i64 %7401, -2200
  %7452 = add i64 %7403, 31
  store i64 %7452, i64* %3, align 8
  %7453 = inttoptr i64 %7451 to i32*
  %7454 = load i32, i32* %7453, align 4
  %7455 = sext i32 %7454 to i64
  %7456 = shl nsw i64 %7455, 6
  store i64 %7456, i64* %R8.i2321, align 8
  %7457 = load i64, i64* %RDI.i4259, align 8
  %7458 = add i64 %7456, %7457
  store i64 %7458, i64* %RDI.i4259, align 8
  %7459 = icmp ult i64 %7458, %7457
  %7460 = icmp ult i64 %7458, %7456
  %7461 = or i1 %7459, %7460
  %7462 = zext i1 %7461 to i8
  store i8 %7462, i8* %12, align 1
  %7463 = trunc i64 %7458 to i32
  %7464 = and i32 %7463, 255
  %7465 = tail call i32 @llvm.ctpop.i32(i32 %7464)
  %7466 = trunc i32 %7465 to i8
  %7467 = and i8 %7466, 1
  %7468 = xor i8 %7467, 1
  store i8 %7468, i8* %13, align 1
  %7469 = xor i64 %7457, %7458
  %7470 = lshr i64 %7469, 4
  %7471 = trunc i64 %7470 to i8
  %7472 = and i8 %7471, 1
  store i8 %7472, i8* %14, align 1
  %7473 = icmp eq i64 %7458, 0
  %7474 = zext i1 %7473 to i8
  store i8 %7474, i8* %15, align 1
  %7475 = lshr i64 %7458, 63
  %7476 = trunc i64 %7475 to i8
  store i8 %7476, i8* %16, align 1
  %7477 = lshr i64 %7457, 63
  %7478 = lshr i64 %7455, 57
  %7479 = and i64 %7478, 1
  %7480 = xor i64 %7475, %7477
  %7481 = xor i64 %7475, %7479
  %7482 = add nuw nsw i64 %7480, %7481
  %7483 = icmp eq i64 %7482, 2
  %7484 = zext i1 %7483 to i8
  store i8 %7484, i8* %17, align 1
  %7485 = inttoptr i64 %7458 to i32*
  %7486 = add i64 %7403, 42
  store i64 %7486, i64* %3, align 8
  %7487 = load i32, i32* %7485, align 4
  %7488 = sext i32 %7426 to i64
  %7489 = sext i32 %7487 to i64
  %7490 = mul nsw i64 %7489, %7488
  %7491 = trunc i64 %7490 to i32
  %7492 = and i64 %7490, 4294967295
  store i64 %7492, i64* %6056, align 8
  %7493 = shl i64 %7490, 32
  %7494 = ashr exact i64 %7493, 32
  %7495 = icmp ne i64 %7494, %7490
  %7496 = zext i1 %7495 to i8
  store i8 %7496, i8* %12, align 1
  %7497 = and i32 %7491, 255
  %7498 = tail call i32 @llvm.ctpop.i32(i32 %7497)
  %7499 = trunc i32 %7498 to i8
  %7500 = and i8 %7499, 1
  %7501 = xor i8 %7500, 1
  store i8 %7501, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %7502 = lshr i32 %7491, 31
  %7503 = trunc i32 %7502 to i8
  store i8 %7503, i8* %16, align 1
  store i8 %7496, i8* %17, align 1
  %7504 = load i64, i64* %RSI.i757, align 8
  %7505 = load i64, i64* %RBP.i, align 8
  %7506 = add i64 %7505, -2196
  %7507 = add i64 %7403, 48
  store i64 %7507, i64* %3, align 8
  %7508 = trunc i64 %7504 to i32
  %7509 = inttoptr i64 %7506 to i32*
  %7510 = load i32, i32* %7509, align 4
  %7511 = sub i32 %7508, %7510
  %7512 = zext i32 %7511 to i64
  store i64 %7512, i64* %RSI.i757, align 8
  %7513 = icmp ult i32 %7508, %7510
  %7514 = zext i1 %7513 to i8
  store i8 %7514, i8* %12, align 1
  %7515 = and i32 %7511, 255
  %7516 = tail call i32 @llvm.ctpop.i32(i32 %7515)
  %7517 = trunc i32 %7516 to i8
  %7518 = and i8 %7517, 1
  %7519 = xor i8 %7518, 1
  store i8 %7519, i8* %13, align 1
  %7520 = xor i32 %7510, %7508
  %7521 = xor i32 %7520, %7511
  %7522 = lshr i32 %7521, 4
  %7523 = trunc i32 %7522 to i8
  %7524 = and i8 %7523, 1
  store i8 %7524, i8* %14, align 1
  %7525 = icmp eq i32 %7511, 0
  %7526 = zext i1 %7525 to i8
  store i8 %7526, i8* %15, align 1
  %7527 = lshr i32 %7511, 31
  %7528 = trunc i32 %7527 to i8
  store i8 %7528, i8* %16, align 1
  %7529 = lshr i32 %7508, 31
  %7530 = lshr i32 %7510, 31
  %7531 = xor i32 %7530, %7529
  %7532 = xor i32 %7527, %7529
  %7533 = add nuw nsw i32 %7532, %7531
  %7534 = icmp eq i32 %7533, 2
  %7535 = zext i1 %7534 to i8
  store i8 %7535, i8* %17, align 1
  store i64 %7512, i64* %RCX.i4476, align 8
  %7536 = load i64, i64* %RDX.i658, align 8
  %7537 = add i64 %7403, 52
  store i64 %7537, i64* %3, align 8
  %7538 = trunc i32 %7511 to i5
  %7539 = trunc i64 %7490 to i32
  %7540 = trunc i64 %7536 to i32
  switch i5 %7538, label %7546 [
    i5 0, label %routine_shll__cl___edx.exit2212
    i5 1, label %7541
  ]

; <label>:7541:                                   ; preds = %routine_sarl__cl___r9d.exit2264
  %7542 = shl i32 %7540, 1
  %7543 = icmp slt i32 %7540, 0
  %7544 = icmp slt i32 %7542, 0
  %7545 = xor i1 %7543, %7544
  br label %7556

; <label>:7546:                                   ; preds = %routine_sarl__cl___r9d.exit2264
  %7547 = and i32 %7511, 31
  %7548 = zext i32 %7547 to i64
  %7549 = add nuw nsw i64 %7548, 4294967295
  %7550 = and i64 %7536, 4294967295
  %7551 = and i64 %7549, 4294967295
  %7552 = shl i64 %7550, %7551
  %7553 = trunc i64 %7552 to i32
  %7554 = icmp slt i32 %7553, 0
  %7555 = shl i32 %7553, 1
  br label %7556

; <label>:7556:                                   ; preds = %7546, %7541
  %7557 = phi i1 [ %7543, %7541 ], [ %7554, %7546 ]
  %7558 = phi i1 [ %7545, %7541 ], [ false, %7546 ]
  %7559 = phi i32 [ %7542, %7541 ], [ %7555, %7546 ]
  %7560 = zext i32 %7559 to i64
  store i64 %7560, i64* %RDX.i658, align 8
  %7561 = zext i1 %7557 to i8
  store i8 %7561, i8* %12, align 1
  %7562 = and i32 %7559, 254
  %7563 = tail call i32 @llvm.ctpop.i32(i32 %7562)
  %7564 = trunc i32 %7563 to i8
  %7565 = and i8 %7564, 1
  %7566 = xor i8 %7565, 1
  store i8 %7566, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %7567 = icmp eq i32 %7559, 0
  %7568 = zext i1 %7567 to i8
  store i8 %7568, i8* %15, align 1
  %7569 = lshr i32 %7559, 31
  %7570 = trunc i32 %7569 to i8
  store i8 %7570, i8* %16, align 1
  %7571 = zext i1 %7558 to i8
  store i8 %7571, i8* %17, align 1
  br label %routine_shll__cl___edx.exit2212

routine_shll__cl___edx.exit2212:                  ; preds = %7556, %routine_sarl__cl___r9d.exit2264
  %7572 = phi i32 [ %7559, %7556 ], [ %7540, %routine_sarl__cl___r9d.exit2264 ]
  %7573 = add i32 %7572, %7539
  %7574 = zext i32 %7573 to i64
  store i64 %7574, i64* %6056, align 8
  %7575 = icmp ult i32 %7573, %7539
  %7576 = icmp ult i32 %7573, %7572
  %7577 = or i1 %7575, %7576
  %7578 = zext i1 %7577 to i8
  store i8 %7578, i8* %12, align 1
  %7579 = and i32 %7573, 255
  %7580 = tail call i32 @llvm.ctpop.i32(i32 %7579)
  %7581 = trunc i32 %7580 to i8
  %7582 = and i8 %7581, 1
  %7583 = xor i8 %7582, 1
  store i8 %7583, i8* %13, align 1
  %7584 = xor i32 %7572, %7539
  %7585 = xor i32 %7584, %7573
  %7586 = lshr i32 %7585, 4
  %7587 = trunc i32 %7586 to i8
  %7588 = and i8 %7587, 1
  store i8 %7588, i8* %14, align 1
  %7589 = icmp eq i32 %7573, 0
  %7590 = zext i1 %7589 to i8
  store i8 %7590, i8* %15, align 1
  %7591 = lshr i32 %7573, 31
  %7592 = trunc i32 %7591 to i8
  store i8 %7592, i8* %16, align 1
  %7593 = lshr i32 %7539, 31
  %7594 = lshr i32 %7572, 31
  %7595 = xor i32 %7591, %7593
  %7596 = xor i32 %7591, %7594
  %7597 = add nuw nsw i32 %7595, %7596
  %7598 = icmp eq i32 %7597, 2
  %7599 = zext i1 %7598 to i8
  store i8 %7599, i8* %17, align 1
  %7600 = add i64 %7505, -2280
  %7601 = add i64 %7403, 61
  store i64 %7601, i64* %3, align 8
  %7602 = inttoptr i64 %7600 to i32*
  %7603 = load i32, i32* %7602, align 4
  %7604 = zext i32 %7603 to i64
  store i64 %7604, i64* %RDX.i658, align 8
  %7605 = add i64 %7403, 67
  store i64 %7605, i64* %3, align 8
  %7606 = load i32, i32* %7509, align 4
  %7607 = sub i32 %7603, %7606
  %7608 = zext i32 %7607 to i64
  store i64 %7608, i64* %RDX.i658, align 8
  %7609 = icmp ult i32 %7603, %7606
  %7610 = zext i1 %7609 to i8
  store i8 %7610, i8* %12, align 1
  %7611 = and i32 %7607, 255
  %7612 = tail call i32 @llvm.ctpop.i32(i32 %7611)
  %7613 = trunc i32 %7612 to i8
  %7614 = and i8 %7613, 1
  %7615 = xor i8 %7614, 1
  store i8 %7615, i8* %13, align 1
  %7616 = xor i32 %7606, %7603
  %7617 = xor i32 %7616, %7607
  %7618 = lshr i32 %7617, 4
  %7619 = trunc i32 %7618 to i8
  %7620 = and i8 %7619, 1
  store i8 %7620, i8* %14, align 1
  %7621 = icmp eq i32 %7607, 0
  %7622 = zext i1 %7621 to i8
  store i8 %7622, i8* %15, align 1
  %7623 = lshr i32 %7607, 31
  %7624 = trunc i32 %7623 to i8
  store i8 %7624, i8* %16, align 1
  %7625 = lshr i32 %7603, 31
  %7626 = lshr i32 %7606, 31
  %7627 = xor i32 %7626, %7625
  %7628 = xor i32 %7623, %7625
  %7629 = add nuw nsw i32 %7628, %7627
  %7630 = icmp eq i32 %7629, 2
  %7631 = zext i1 %7630 to i8
  store i8 %7631, i8* %17, align 1
  store i64 %7608, i64* %RCX.i4476, align 8
  %7632 = add i64 %7403, 72
  store i64 %7632, i64* %3, align 8
  %7633 = trunc i32 %7607 to i5
  switch i5 %7633, label %7637 [
    i5 0, label %routine_sarl__cl___r9d.exit
    i5 1, label %7634
  ]

; <label>:7634:                                   ; preds = %routine_shll__cl___edx.exit2212
  %7635 = shl nuw i64 %7574, 32
  %7636 = ashr i64 %7635, 33
  br label %7644

; <label>:7637:                                   ; preds = %routine_shll__cl___edx.exit2212
  %7638 = and i32 %7607, 31
  %7639 = zext i32 %7638 to i64
  %7640 = add nsw i64 %7639, -1
  %7641 = sext i32 %7573 to i64
  %7642 = ashr i64 %7641, %7640
  %7643 = lshr i64 %7642, 1
  br label %7644

; <label>:7644:                                   ; preds = %7637, %7634
  %7645 = phi i64 [ %7643, %7637 ], [ %7636, %7634 ]
  %7646 = phi i64 [ %7642, %7637 ], [ %7574, %7634 ]
  %7647 = trunc i64 %7646 to i8
  %7648 = and i8 %7647, 1
  %7649 = trunc i64 %7645 to i32
  %7650 = and i64 %7645, 4294967295
  store i64 %7650, i64* %6056, align 8
  store i8 %7648, i8* %12, align 1
  %7651 = and i32 %7649, 255
  %7652 = tail call i32 @llvm.ctpop.i32(i32 %7651)
  %7653 = trunc i32 %7652 to i8
  %7654 = and i8 %7653, 1
  %7655 = xor i8 %7654, 1
  store i8 %7655, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %7656 = icmp eq i32 %7649, 0
  %7657 = zext i1 %7656 to i8
  store i8 %7657, i8* %15, align 1
  %7658 = lshr i32 %7649, 31
  %7659 = trunc i32 %7658 to i8
  store i8 %7659, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %7660 = trunc i64 %7645 to i32
  br label %routine_sarl__cl___r9d.exit

routine_sarl__cl___r9d.exit:                      ; preds = %7644, %routine_shll__cl___edx.exit2212
  %7661 = phi i32 [ %7660, %7644 ], [ %7573, %routine_shll__cl___edx.exit2212 ]
  %7662 = add i64 %7505, -8
  %7663 = add i64 %7403, 76
  store i64 %7663, i64* %3, align 8
  %7664 = inttoptr i64 %7662 to i32*
  %7665 = load i32, i32* %7664, align 4
  %7666 = sext i32 %7665 to i64
  %7667 = shl nsw i64 %7666, 6
  store i64 %7667, i64* %RDI.i4259, align 8
  %7668 = load i64, i64* %RAX.i552, align 8
  %7669 = add i64 %7667, %7668
  store i64 %7669, i64* %RAX.i552, align 8
  %7670 = icmp ult i64 %7669, %7668
  %7671 = icmp ult i64 %7669, %7667
  %7672 = or i1 %7670, %7671
  %7673 = zext i1 %7672 to i8
  store i8 %7673, i8* %12, align 1
  %7674 = trunc i64 %7669 to i32
  %7675 = and i32 %7674, 255
  %7676 = tail call i32 @llvm.ctpop.i32(i32 %7675)
  %7677 = trunc i32 %7676 to i8
  %7678 = and i8 %7677, 1
  %7679 = xor i8 %7678, 1
  store i8 %7679, i8* %13, align 1
  %7680 = xor i64 %7668, %7669
  %7681 = lshr i64 %7680, 4
  %7682 = trunc i64 %7681 to i8
  %7683 = and i8 %7682, 1
  store i8 %7683, i8* %14, align 1
  %7684 = icmp eq i64 %7669, 0
  %7685 = zext i1 %7684 to i8
  store i8 %7685, i8* %15, align 1
  %7686 = lshr i64 %7669, 63
  %7687 = trunc i64 %7686 to i8
  store i8 %7687, i8* %16, align 1
  %7688 = lshr i64 %7668, 63
  %7689 = lshr i64 %7666, 57
  %7690 = and i64 %7689, 1
  %7691 = xor i64 %7686, %7688
  %7692 = xor i64 %7686, %7690
  %7693 = add nuw nsw i64 %7691, %7692
  %7694 = icmp eq i64 %7693, 2
  %7695 = zext i1 %7694 to i8
  store i8 %7695, i8* %17, align 1
  %7696 = add i64 %7505, -28
  %7697 = add i64 %7403, 87
  store i64 %7697, i64* %3, align 8
  %7698 = inttoptr i64 %7696 to i32*
  %7699 = load i32, i32* %7698, align 4
  %7700 = sext i32 %7699 to i64
  store i64 %7700, i64* %RDI.i4259, align 8
  %7701 = shl nsw i64 %7700, 2
  %7702 = add i64 %7701, %7669
  %7703 = add i64 %7403, 91
  store i64 %7703, i64* %3, align 8
  %7704 = inttoptr i64 %7702 to i32*
  store i32 %7661, i32* %7704, align 4
  %7705 = load i64, i64* %3, align 8
  %7706 = add i64 %7705, 188
  store i64 %7706, i64* %3, align 8
  br label %block_.L_405474

block_.L_4053bd:                                  ; preds = %block_4052b2
  store i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64* %RCX.i4476, align 8
  %7707 = add i64 %7057, -12
  %7708 = add i64 %7086, 21
  store i64 %7708, i64* %3, align 8
  %7709 = inttoptr i64 %7707 to i32*
  %7710 = load i32, i32* %7709, align 4
  %7711 = sext i32 %7710 to i64
  store i64 %7711, i64* %RDX.i658, align 8
  %7712 = shl nsw i64 %7711, 2
  %7713 = add i64 %7057, -1152
  %7714 = add i64 %7713, %7712
  %7715 = add i64 %7086, 28
  store i64 %7715, i64* %3, align 8
  %7716 = inttoptr i64 %7714 to i32*
  %7717 = load i32, i32* %7716, align 4
  %7718 = zext i32 %7717 to i64
  store i64 %7718, i64* %RSI.i757, align 8
  %7719 = add i64 %7057, -28
  %7720 = add i64 %7086, 32
  store i64 %7720, i64* %3, align 8
  %7721 = inttoptr i64 %7719 to i32*
  %7722 = load i32, i32* %7721, align 4
  %7723 = sext i32 %7722 to i64
  store i64 %7723, i64* %RDX.i658, align 8
  %7724 = shl nsw i64 %7723, 2
  %7725 = add nsw i64 %7724, -1152
  %7726 = add i64 %7725, %7057
  %7727 = add i64 %7086, 39
  store i64 %7727, i64* %3, align 8
  %7728 = inttoptr i64 %7726 to i32*
  %7729 = load i32, i32* %7728, align 4
  %7730 = add i32 %7729, %7717
  %7731 = zext i32 %7730 to i64
  store i64 %7731, i64* %RSI.i757, align 8
  %7732 = icmp ult i32 %7730, %7717
  %7733 = icmp ult i32 %7730, %7729
  %7734 = or i1 %7732, %7733
  %7735 = zext i1 %7734 to i8
  store i8 %7735, i8* %12, align 1
  %7736 = and i32 %7730, 255
  %7737 = tail call i32 @llvm.ctpop.i32(i32 %7736)
  %7738 = trunc i32 %7737 to i8
  %7739 = and i8 %7738, 1
  %7740 = xor i8 %7739, 1
  store i8 %7740, i8* %13, align 1
  %7741 = xor i32 %7729, %7717
  %7742 = xor i32 %7741, %7730
  %7743 = lshr i32 %7742, 4
  %7744 = trunc i32 %7743 to i8
  %7745 = and i8 %7744, 1
  store i8 %7745, i8* %14, align 1
  %7746 = icmp eq i32 %7730, 0
  %7747 = zext i1 %7746 to i8
  store i8 %7747, i8* %15, align 1
  %7748 = lshr i32 %7730, 31
  %7749 = trunc i32 %7748 to i8
  store i8 %7749, i8* %16, align 1
  %7750 = lshr i32 %7717, 31
  %7751 = lshr i32 %7729, 31
  %7752 = xor i32 %7748, %7750
  %7753 = xor i32 %7748, %7751
  %7754 = add nuw nsw i32 %7752, %7753
  %7755 = icmp eq i32 %7754, 2
  %7756 = zext i1 %7755 to i8
  store i8 %7756, i8* %17, align 1
  %7757 = add i64 %7057, -2200
  %7758 = add i64 %7086, 46
  store i64 %7758, i64* %3, align 8
  %7759 = inttoptr i64 %7757 to i32*
  %7760 = load i32, i32* %7759, align 4
  %7761 = sext i32 %7760 to i64
  %7762 = shl nsw i64 %7761, 6
  store i64 %7762, i64* %RDX.i658, align 8
  %7763 = add i64 %7762, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  store i64 %7763, i64* %RDI.i4259, align 8
  %7764 = icmp ult i64 %7763, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  %7765 = icmp ult i64 %7763, %7762
  %7766 = or i1 %7764, %7765
  %7767 = zext i1 %7766 to i8
  store i8 %7767, i8* %12, align 1
  %7768 = trunc i64 %7763 to i32
  %7769 = and i32 %7768, 248
  %7770 = tail call i32 @llvm.ctpop.i32(i32 %7769)
  %7771 = trunc i32 %7770 to i8
  %7772 = and i8 %7771, 1
  %7773 = xor i8 %7772, 1
  store i8 %7773, i8* %13, align 1
  %7774 = xor i64 %7763, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  %7775 = lshr i64 %7774, 4
  %7776 = trunc i64 %7775 to i8
  %7777 = and i8 %7776, 1
  store i8 %7777, i8* %14, align 1
  %7778 = icmp eq i64 %7763, 0
  %7779 = zext i1 %7778 to i8
  store i8 %7779, i8* %15, align 1
  %7780 = lshr i64 %7763, 63
  %7781 = trunc i64 %7780 to i8
  store i8 %7781, i8* %16, align 1
  %7782 = lshr i64 %7761, 57
  %7783 = and i64 %7782, 1
  %7784 = xor i64 %7780, lshr (i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64 63)
  %7785 = xor i64 %7780, %7783
  %7786 = add nuw nsw i64 %7784, %7785
  %7787 = icmp eq i64 %7786, 2
  %7788 = zext i1 %7787 to i8
  store i8 %7788, i8* %17, align 1
  %7789 = load i64, i64* %RSI.i757, align 8
  %7790 = inttoptr i64 %7763 to i32*
  %7791 = add i64 %7086, 59
  store i64 %7791, i64* %3, align 8
  %7792 = load i32, i32* %7790, align 8
  %7793 = shl i64 %7789, 32
  %7794 = ashr exact i64 %7793, 32
  %7795 = sext i32 %7792 to i64
  %7796 = mul nsw i64 %7795, %7794
  %7797 = trunc i64 %7796 to i32
  %7798 = and i64 %7796, 4294967295
  store i64 %7798, i64* %RSI.i757, align 8
  %7799 = shl i64 %7796, 32
  %7800 = ashr exact i64 %7799, 32
  %7801 = icmp ne i64 %7800, %7796
  %7802 = zext i1 %7801 to i8
  store i8 %7802, i8* %12, align 1
  %7803 = and i32 %7797, 255
  %7804 = tail call i32 @llvm.ctpop.i32(i32 %7803)
  %7805 = trunc i32 %7804 to i8
  %7806 = and i8 %7805, 1
  %7807 = xor i8 %7806, 1
  store i8 %7807, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %7808 = lshr i32 %7797, 31
  %7809 = trunc i32 %7808 to i8
  store i8 %7809, i8* %16, align 1
  store i8 %7802, i8* %17, align 1
  %7810 = load i64, i64* %RBP.i, align 8
  %7811 = add i64 %7810, -2196
  %7812 = add i64 %7086, 66
  store i64 %7812, i64* %3, align 8
  %7813 = inttoptr i64 %7811 to i32*
  %7814 = load i32, i32* %7813, align 4
  %7815 = add i32 %7814, -6
  %7816 = zext i32 %7815 to i64
  store i64 %7816, i64* %335, align 8
  %7817 = icmp ult i32 %7814, 6
  %7818 = zext i1 %7817 to i8
  store i8 %7818, i8* %12, align 1
  %7819 = and i32 %7815, 255
  %7820 = tail call i32 @llvm.ctpop.i32(i32 %7819)
  %7821 = trunc i32 %7820 to i8
  %7822 = and i8 %7821, 1
  %7823 = xor i8 %7822, 1
  store i8 %7823, i8* %13, align 1
  %7824 = xor i32 %7815, %7814
  %7825 = lshr i32 %7824, 4
  %7826 = trunc i32 %7825 to i8
  %7827 = and i8 %7826, 1
  store i8 %7827, i8* %14, align 1
  %7828 = icmp eq i32 %7815, 0
  %7829 = zext i1 %7828 to i8
  store i8 %7829, i8* %15, align 1
  %7830 = lshr i32 %7815, 31
  %7831 = trunc i32 %7830 to i8
  store i8 %7831, i8* %16, align 1
  %7832 = lshr i32 %7814, 31
  %7833 = xor i32 %7830, %7832
  %7834 = add nuw nsw i32 %7833, %7832
  %7835 = icmp eq i32 %7834, 2
  %7836 = zext i1 %7835 to i8
  store i8 %7836, i8* %17, align 1
  %7837 = add i64 %7810, -2288
  %7838 = load i64, i64* %RCX.i4476, align 8
  %7839 = add i64 %7086, 77
  store i64 %7839, i64* %3, align 8
  %7840 = inttoptr i64 %7837 to i64*
  store i64 %7838, i64* %7840, align 8
  %7841 = load i32, i32* %R8D.i4254, align 4
  %7842 = zext i32 %7841 to i64
  %7843 = load i64, i64* %3, align 8
  store i64 %7842, i64* %RCX.i4476, align 8
  %7844 = load i64, i64* %RSI.i757, align 8
  %7845 = add i64 %7843, 5
  store i64 %7845, i64* %3, align 8
  %7846 = trunc i32 %7841 to i5
  %7847 = trunc i64 %7844 to i32
  switch i5 %7846, label %7853 [
    i5 0, label %routine_shll__cl___esi.exit2134
    i5 1, label %7848
  ]

; <label>:7848:                                   ; preds = %block_.L_4053bd
  %7849 = shl i32 %7847, 1
  %7850 = icmp slt i32 %7847, 0
  %7851 = icmp slt i32 %7849, 0
  %7852 = xor i1 %7850, %7851
  br label %7863

; <label>:7853:                                   ; preds = %block_.L_4053bd
  %7854 = and i32 %7841, 31
  %7855 = zext i32 %7854 to i64
  %7856 = add nuw nsw i64 %7855, 4294967295
  %7857 = and i64 %7844, 4294967295
  %7858 = and i64 %7856, 4294967295
  %7859 = shl i64 %7857, %7858
  %7860 = trunc i64 %7859 to i32
  %7861 = icmp slt i32 %7860, 0
  %7862 = shl i32 %7860, 1
  br label %7863

; <label>:7863:                                   ; preds = %7853, %7848
  %7864 = phi i1 [ %7850, %7848 ], [ %7861, %7853 ]
  %7865 = phi i1 [ %7852, %7848 ], [ false, %7853 ]
  %7866 = phi i32 [ %7849, %7848 ], [ %7862, %7853 ]
  %7867 = zext i32 %7866 to i64
  store i64 %7867, i64* %RSI.i757, align 8
  %7868 = zext i1 %7864 to i8
  store i8 %7868, i8* %12, align 1
  %7869 = and i32 %7866, 254
  %7870 = tail call i32 @llvm.ctpop.i32(i32 %7869)
  %7871 = trunc i32 %7870 to i8
  %7872 = and i8 %7871, 1
  %7873 = xor i8 %7872, 1
  store i8 %7873, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %7874 = icmp eq i32 %7866, 0
  %7875 = zext i1 %7874 to i8
  store i8 %7875, i8* %15, align 1
  %7876 = lshr i32 %7866, 31
  %7877 = trunc i32 %7876 to i8
  store i8 %7877, i8* %16, align 1
  %7878 = zext i1 %7865 to i8
  store i8 %7878, i8* %17, align 1
  br label %routine_shll__cl___esi.exit2134

routine_shll__cl___esi.exit2134:                  ; preds = %7863, %block_.L_4053bd
  %7879 = phi i32 [ %7866, %7863 ], [ %7847, %block_.L_4053bd ]
  %7880 = load i64, i64* %RBP.i, align 8
  %7881 = add i64 %7880, -8
  %7882 = add i64 %7843, 9
  store i64 %7882, i64* %3, align 8
  %7883 = inttoptr i64 %7881 to i32*
  %7884 = load i32, i32* %7883, align 4
  %7885 = sext i32 %7884 to i64
  %7886 = shl nsw i64 %7885, 6
  store i64 %7886, i64* %RDX.i658, align 8
  %7887 = load i64, i64* %RAX.i552, align 8
  %7888 = add i64 %7886, %7887
  store i64 %7888, i64* %RDI.i4259, align 8
  %7889 = icmp ult i64 %7888, %7887
  %7890 = icmp ult i64 %7888, %7886
  %7891 = or i1 %7889, %7890
  %7892 = zext i1 %7891 to i8
  store i8 %7892, i8* %12, align 1
  %7893 = trunc i64 %7888 to i32
  %7894 = and i32 %7893, 255
  %7895 = tail call i32 @llvm.ctpop.i32(i32 %7894)
  %7896 = trunc i32 %7895 to i8
  %7897 = and i8 %7896, 1
  %7898 = xor i8 %7897, 1
  store i8 %7898, i8* %13, align 1
  %7899 = xor i64 %7887, %7888
  %7900 = lshr i64 %7899, 4
  %7901 = trunc i64 %7900 to i8
  %7902 = and i8 %7901, 1
  store i8 %7902, i8* %14, align 1
  %7903 = icmp eq i64 %7888, 0
  %7904 = zext i1 %7903 to i8
  store i8 %7904, i8* %15, align 1
  %7905 = lshr i64 %7888, 63
  %7906 = trunc i64 %7905 to i8
  store i8 %7906, i8* %16, align 1
  %7907 = lshr i64 %7887, 63
  %7908 = lshr i64 %7885, 57
  %7909 = and i64 %7908, 1
  %7910 = xor i64 %7905, %7907
  %7911 = xor i64 %7905, %7909
  %7912 = add nuw nsw i64 %7910, %7911
  %7913 = icmp eq i64 %7912, 2
  %7914 = zext i1 %7913 to i8
  store i8 %7914, i8* %17, align 1
  %7915 = add i64 %7880, -12
  %7916 = add i64 %7843, 23
  store i64 %7916, i64* %3, align 8
  %7917 = inttoptr i64 %7915 to i32*
  %7918 = load i32, i32* %7917, align 4
  %7919 = sext i32 %7918 to i64
  store i64 %7919, i64* %RDX.i658, align 8
  %7920 = shl nsw i64 %7919, 2
  %7921 = add i64 %7920, %7888
  %7922 = add i64 %7843, 26
  store i64 %7922, i64* %3, align 8
  %7923 = inttoptr i64 %7921 to i32*
  store i32 %7879, i32* %7923, align 4
  %7924 = load i64, i64* %RBP.i, align 8
  %7925 = add i64 %7924, -12
  %7926 = load i64, i64* %3, align 8
  %7927 = add i64 %7926, 4
  store i64 %7927, i64* %3, align 8
  %7928 = inttoptr i64 %7925 to i32*
  %7929 = load i32, i32* %7928, align 4
  %7930 = sext i32 %7929 to i64
  store i64 %7930, i64* %RDX.i658, align 8
  %7931 = shl nsw i64 %7930, 2
  %7932 = add i64 %7924, -1152
  %7933 = add i64 %7932, %7931
  %7934 = add i64 %7926, 11
  store i64 %7934, i64* %3, align 8
  %7935 = inttoptr i64 %7933 to i32*
  %7936 = load i32, i32* %7935, align 4
  %7937 = zext i32 %7936 to i64
  store i64 %7937, i64* %RSI.i757, align 8
  %7938 = add i64 %7924, -28
  %7939 = add i64 %7926, 15
  store i64 %7939, i64* %3, align 8
  %7940 = inttoptr i64 %7938 to i32*
  %7941 = load i32, i32* %7940, align 4
  %7942 = sext i32 %7941 to i64
  store i64 %7942, i64* %RDX.i658, align 8
  %7943 = shl nsw i64 %7942, 2
  %7944 = add nsw i64 %7943, -1152
  %7945 = add i64 %7944, %7924
  %7946 = add i64 %7926, 22
  store i64 %7946, i64* %3, align 8
  %7947 = inttoptr i64 %7945 to i32*
  %7948 = load i32, i32* %7947, align 4
  %7949 = sub i32 %7936, %7948
  %7950 = zext i32 %7949 to i64
  store i64 %7950, i64* %RSI.i757, align 8
  %7951 = icmp ult i32 %7936, %7948
  %7952 = zext i1 %7951 to i8
  store i8 %7952, i8* %12, align 1
  %7953 = and i32 %7949, 255
  %7954 = tail call i32 @llvm.ctpop.i32(i32 %7953)
  %7955 = trunc i32 %7954 to i8
  %7956 = and i8 %7955, 1
  %7957 = xor i8 %7956, 1
  store i8 %7957, i8* %13, align 1
  %7958 = xor i32 %7948, %7936
  %7959 = xor i32 %7958, %7949
  %7960 = lshr i32 %7959, 4
  %7961 = trunc i32 %7960 to i8
  %7962 = and i8 %7961, 1
  store i8 %7962, i8* %14, align 1
  %7963 = icmp eq i32 %7949, 0
  %7964 = zext i1 %7963 to i8
  store i8 %7964, i8* %15, align 1
  %7965 = lshr i32 %7949, 31
  %7966 = trunc i32 %7965 to i8
  store i8 %7966, i8* %16, align 1
  %7967 = lshr i32 %7936, 31
  %7968 = lshr i32 %7948, 31
  %7969 = xor i32 %7968, %7967
  %7970 = xor i32 %7965, %7967
  %7971 = add nuw nsw i32 %7970, %7969
  %7972 = icmp eq i32 %7971, 2
  %7973 = zext i1 %7972 to i8
  store i8 %7973, i8* %17, align 1
  %7974 = add i64 %7924, -2200
  %7975 = add i64 %7926, 29
  store i64 %7975, i64* %3, align 8
  %7976 = inttoptr i64 %7974 to i32*
  %7977 = load i32, i32* %7976, align 4
  %7978 = sext i32 %7977 to i64
  %7979 = shl nsw i64 %7978, 6
  store i64 %7979, i64* %RDX.i658, align 8
  %.lobit163 = lshr i32 %7977, 31
  %7980 = trunc i32 %.lobit163 to i8
  store i8 %7980, i8* %12, align 1
  %7981 = trunc i64 %7979 to i32
  %7982 = and i32 %7981, 192
  %7983 = tail call i32 @llvm.ctpop.i32(i32 %7982)
  %7984 = trunc i32 %7983 to i8
  %7985 = and i8 %7984, 1
  %7986 = xor i8 %7985, 1
  store i8 %7986, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %7987 = icmp eq i32 %7977, 0
  %7988 = zext i1 %7987 to i8
  store i8 %7988, i8* %15, align 1
  %7989 = lshr i64 %7978, 57
  %7990 = trunc i64 %7989 to i8
  %7991 = and i8 %7990, 1
  store i8 %7991, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %7992 = add i64 %7924, -2288
  %7993 = add i64 %7926, 40
  store i64 %7993, i64* %3, align 8
  %7994 = inttoptr i64 %7992 to i64*
  %7995 = load i64, i64* %7994, align 8
  %7996 = add i64 %7979, %7995
  store i64 %7996, i64* %RDI.i4259, align 8
  %7997 = icmp ult i64 %7996, %7995
  %7998 = icmp ult i64 %7996, %7979
  %7999 = or i1 %7997, %7998
  %8000 = zext i1 %7999 to i8
  store i8 %8000, i8* %12, align 1
  %8001 = trunc i64 %7996 to i32
  %8002 = and i32 %8001, 255
  %8003 = tail call i32 @llvm.ctpop.i32(i32 %8002)
  %8004 = trunc i32 %8003 to i8
  %8005 = and i8 %8004, 1
  %8006 = xor i8 %8005, 1
  store i8 %8006, i8* %13, align 1
  %8007 = xor i64 %7995, %7996
  %8008 = lshr i64 %8007, 4
  %8009 = trunc i64 %8008 to i8
  %8010 = and i8 %8009, 1
  store i8 %8010, i8* %14, align 1
  %8011 = icmp eq i64 %7996, 0
  %8012 = zext i1 %8011 to i8
  store i8 %8012, i8* %15, align 1
  %8013 = lshr i64 %7996, 63
  %8014 = trunc i64 %8013 to i8
  store i8 %8014, i8* %16, align 1
  %8015 = lshr i64 %7995, 63
  %8016 = lshr i64 %7978, 57
  %8017 = and i64 %8016, 1
  %8018 = xor i64 %8013, %8015
  %8019 = xor i64 %8013, %8017
  %8020 = add nuw nsw i64 %8018, %8019
  %8021 = icmp eq i64 %8020, 2
  %8022 = zext i1 %8021 to i8
  store i8 %8022, i8* %17, align 1
  %8023 = load i64, i64* %RSI.i757, align 8
  %8024 = inttoptr i64 %7996 to i32*
  %8025 = add i64 %7926, 46
  store i64 %8025, i64* %3, align 8
  %8026 = load i32, i32* %8024, align 4
  %8027 = shl i64 %8023, 32
  %8028 = ashr exact i64 %8027, 32
  %8029 = sext i32 %8026 to i64
  %8030 = mul nsw i64 %8029, %8028
  %8031 = trunc i64 %8030 to i32
  %8032 = and i64 %8030, 4294967295
  store i64 %8032, i64* %RSI.i757, align 8
  %8033 = shl i64 %8030, 32
  %8034 = ashr exact i64 %8033, 32
  %8035 = icmp ne i64 %8034, %8030
  %8036 = zext i1 %8035 to i8
  store i8 %8036, i8* %12, align 1
  %8037 = and i32 %8031, 255
  %8038 = tail call i32 @llvm.ctpop.i32(i32 %8037)
  %8039 = trunc i32 %8038 to i8
  %8040 = and i8 %8039, 1
  %8041 = xor i8 %8040, 1
  store i8 %8041, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %8042 = lshr i32 %8031, 31
  %8043 = trunc i32 %8042 to i8
  store i8 %8043, i8* %16, align 1
  store i8 %8036, i8* %17, align 1
  %8044 = load i64, i64* %RBP.i, align 8
  %8045 = add i64 %8044, -2196
  %8046 = add i64 %7926, 53
  store i64 %8046, i64* %3, align 8
  %8047 = inttoptr i64 %8045 to i32*
  %8048 = load i32, i32* %8047, align 4
  %8049 = add i32 %8048, -6
  %8050 = zext i32 %8049 to i64
  store i64 %8050, i64* %335, align 8
  %8051 = icmp ult i32 %8048, 6
  %8052 = zext i1 %8051 to i8
  store i8 %8052, i8* %12, align 1
  %8053 = and i32 %8049, 255
  %8054 = tail call i32 @llvm.ctpop.i32(i32 %8053)
  %8055 = trunc i32 %8054 to i8
  %8056 = and i8 %8055, 1
  %8057 = xor i8 %8056, 1
  store i8 %8057, i8* %13, align 1
  %8058 = xor i32 %8049, %8048
  %8059 = lshr i32 %8058, 4
  %8060 = trunc i32 %8059 to i8
  %8061 = and i8 %8060, 1
  store i8 %8061, i8* %14, align 1
  %8062 = icmp eq i32 %8049, 0
  %8063 = zext i1 %8062 to i8
  store i8 %8063, i8* %15, align 1
  %8064 = lshr i32 %8049, 31
  %8065 = trunc i32 %8064 to i8
  store i8 %8065, i8* %16, align 1
  %8066 = lshr i32 %8048, 31
  %8067 = xor i32 %8064, %8066
  %8068 = add nuw nsw i32 %8067, %8066
  %8069 = icmp eq i32 %8068, 2
  %8070 = zext i1 %8069 to i8
  store i8 %8070, i8* %17, align 1
  store i64 %8050, i64* %RCX.i4476, align 8
  %8071 = add i64 %7926, 62
  store i64 %8071, i64* %3, align 8
  %8072 = trunc i32 %8049 to i5
  %8073 = trunc i64 %8030 to i32
  switch i5 %8072, label %8079 [
    i5 0, label %routine_shll__cl___esi.exit
    i5 1, label %8074
  ]

; <label>:8074:                                   ; preds = %routine_shll__cl___esi.exit2134
  %8075 = shl i32 %8073, 1
  %8076 = icmp slt i32 %8073, 0
  %8077 = icmp slt i32 %8075, 0
  %8078 = xor i1 %8076, %8077
  br label %8088

; <label>:8079:                                   ; preds = %routine_shll__cl___esi.exit2134
  %8080 = and i32 %8049, 31
  %8081 = zext i32 %8080 to i64
  %8082 = add nuw nsw i64 %8081, 4294967295
  %8083 = and i64 %8082, 4294967295
  %8084 = shl i64 %8032, %8083
  %8085 = trunc i64 %8084 to i32
  %8086 = icmp slt i32 %8085, 0
  %8087 = shl i32 %8085, 1
  br label %8088

; <label>:8088:                                   ; preds = %8079, %8074
  %8089 = phi i1 [ %8076, %8074 ], [ %8086, %8079 ]
  %8090 = phi i1 [ %8078, %8074 ], [ false, %8079 ]
  %8091 = phi i32 [ %8075, %8074 ], [ %8087, %8079 ]
  %8092 = zext i32 %8091 to i64
  store i64 %8092, i64* %RSI.i757, align 8
  %8093 = zext i1 %8089 to i8
  store i8 %8093, i8* %12, align 1
  %8094 = and i32 %8091, 254
  %8095 = tail call i32 @llvm.ctpop.i32(i32 %8094)
  %8096 = trunc i32 %8095 to i8
  %8097 = and i8 %8096, 1
  %8098 = xor i8 %8097, 1
  store i8 %8098, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8099 = icmp eq i32 %8091, 0
  %8100 = zext i1 %8099 to i8
  store i8 %8100, i8* %15, align 1
  %8101 = lshr i32 %8091, 31
  %8102 = trunc i32 %8101 to i8
  store i8 %8102, i8* %16, align 1
  %8103 = zext i1 %8090 to i8
  store i8 %8103, i8* %17, align 1
  br label %routine_shll__cl___esi.exit

routine_shll__cl___esi.exit:                      ; preds = %8088, %routine_shll__cl___esi.exit2134
  %8104 = phi i32 [ %8091, %8088 ], [ %8073, %routine_shll__cl___esi.exit2134 ]
  %8105 = add i64 %8044, -8
  %8106 = add i64 %7926, 66
  store i64 %8106, i64* %3, align 8
  %8107 = inttoptr i64 %8105 to i32*
  %8108 = load i32, i32* %8107, align 4
  %8109 = sext i32 %8108 to i64
  %8110 = shl nsw i64 %8109, 6
  store i64 %8110, i64* %RDX.i658, align 8
  %8111 = load i64, i64* %RAX.i552, align 8
  %8112 = add i64 %8110, %8111
  store i64 %8112, i64* %RAX.i552, align 8
  %8113 = icmp ult i64 %8112, %8111
  %8114 = icmp ult i64 %8112, %8110
  %8115 = or i1 %8113, %8114
  %8116 = zext i1 %8115 to i8
  store i8 %8116, i8* %12, align 1
  %8117 = trunc i64 %8112 to i32
  %8118 = and i32 %8117, 255
  %8119 = tail call i32 @llvm.ctpop.i32(i32 %8118)
  %8120 = trunc i32 %8119 to i8
  %8121 = and i8 %8120, 1
  %8122 = xor i8 %8121, 1
  store i8 %8122, i8* %13, align 1
  %8123 = xor i64 %8111, %8112
  %8124 = lshr i64 %8123, 4
  %8125 = trunc i64 %8124 to i8
  %8126 = and i8 %8125, 1
  store i8 %8126, i8* %14, align 1
  %8127 = icmp eq i64 %8112, 0
  %8128 = zext i1 %8127 to i8
  store i8 %8128, i8* %15, align 1
  %8129 = lshr i64 %8112, 63
  %8130 = trunc i64 %8129 to i8
  store i8 %8130, i8* %16, align 1
  %8131 = lshr i64 %8111, 63
  %8132 = lshr i64 %8109, 57
  %8133 = and i64 %8132, 1
  %8134 = xor i64 %8129, %8131
  %8135 = xor i64 %8129, %8133
  %8136 = add nuw nsw i64 %8134, %8135
  %8137 = icmp eq i64 %8136, 2
  %8138 = zext i1 %8137 to i8
  store i8 %8138, i8* %17, align 1
  %8139 = add i64 %8044, -28
  %8140 = add i64 %7926, 77
  store i64 %8140, i64* %3, align 8
  %8141 = inttoptr i64 %8139 to i32*
  %8142 = load i32, i32* %8141, align 4
  %8143 = sext i32 %8142 to i64
  store i64 %8143, i64* %RDX.i658, align 8
  %8144 = shl nsw i64 %8143, 2
  %8145 = add i64 %8144, %8112
  %8146 = add i64 %7926, 80
  store i64 %8146, i64* %3, align 8
  %8147 = inttoptr i64 %8145 to i32*
  store i32 %8104, i32* %8147, align 4
  %.pre408 = load i64, i64* %3, align 8
  br label %block_.L_405474

block_.L_405474:                                  ; preds = %routine_shll__cl___esi.exit, %routine_sarl__cl___r9d.exit
  %8148 = phi i64 [ %.pre408, %routine_shll__cl___esi.exit ], [ %7706, %routine_sarl__cl___r9d.exit ]
  %8149 = load i64, i64* %RBP.i, align 8
  %8150 = add i64 %8149, -12
  %8151 = add i64 %8148, 8
  store i64 %8151, i64* %3, align 8
  %8152 = inttoptr i64 %8150 to i32*
  %8153 = load i32, i32* %8152, align 4
  %8154 = add i32 %8153, 1
  %8155 = zext i32 %8154 to i64
  store i64 %8155, i64* %RAX.i552, align 8
  %8156 = icmp eq i32 %8153, -1
  %8157 = icmp eq i32 %8154, 0
  %8158 = or i1 %8156, %8157
  %8159 = zext i1 %8158 to i8
  store i8 %8159, i8* %12, align 1
  %8160 = and i32 %8154, 255
  %8161 = tail call i32 @llvm.ctpop.i32(i32 %8160)
  %8162 = trunc i32 %8161 to i8
  %8163 = and i8 %8162, 1
  %8164 = xor i8 %8163, 1
  store i8 %8164, i8* %13, align 1
  %8165 = xor i32 %8154, %8153
  %8166 = lshr i32 %8165, 4
  %8167 = trunc i32 %8166 to i8
  %8168 = and i8 %8167, 1
  store i8 %8168, i8* %14, align 1
  %8169 = zext i1 %8157 to i8
  store i8 %8169, i8* %15, align 1
  %8170 = lshr i32 %8154, 31
  %8171 = trunc i32 %8170 to i8
  store i8 %8171, i8* %16, align 1
  %8172 = lshr i32 %8153, 31
  %8173 = xor i32 %8170, %8172
  %8174 = add nuw nsw i32 %8173, %8170
  %8175 = icmp eq i32 %8174, 2
  %8176 = zext i1 %8175 to i8
  store i8 %8176, i8* %17, align 1
  %8177 = add i64 %8148, 14
  store i64 %8177, i64* %3, align 8
  store i32 %8154, i32* %8152, align 4
  %8178 = load i64, i64* %3, align 8
  %8179 = add i64 %8178, -474
  store i64 %8179, i64* %3, align 8
  br label %block_.L_4052a8

block_.L_405487:                                  ; preds = %block_.L_4052a8
  %8180 = add i64 %7001, -8
  %8181 = add i64 %7029, 8
  store i64 %8181, i64* %3, align 8
  %8182 = inttoptr i64 %8180 to i32*
  %8183 = load i32, i32* %8182, align 4
  %8184 = add i32 %8183, 1
  %8185 = zext i32 %8184 to i64
  store i64 %8185, i64* %RAX.i552, align 8
  %8186 = icmp eq i32 %8183, -1
  %8187 = icmp eq i32 %8184, 0
  %8188 = or i1 %8186, %8187
  %8189 = zext i1 %8188 to i8
  store i8 %8189, i8* %12, align 1
  %8190 = and i32 %8184, 255
  %8191 = tail call i32 @llvm.ctpop.i32(i32 %8190)
  %8192 = trunc i32 %8191 to i8
  %8193 = and i8 %8192, 1
  %8194 = xor i8 %8193, 1
  store i8 %8194, i8* %13, align 1
  %8195 = xor i32 %8184, %8183
  %8196 = lshr i32 %8195, 4
  %8197 = trunc i32 %8196 to i8
  %8198 = and i8 %8197, 1
  store i8 %8198, i8* %14, align 1
  %8199 = zext i1 %8187 to i8
  store i8 %8199, i8* %15, align 1
  %8200 = lshr i32 %8184, 31
  %8201 = trunc i32 %8200 to i8
  store i8 %8201, i8* %16, align 1
  %8202 = lshr i32 %8183, 31
  %8203 = xor i32 %8200, %8202
  %8204 = add nuw nsw i32 %8203, %8200
  %8205 = icmp eq i32 %8204, 2
  %8206 = zext i1 %8205 to i8
  store i8 %8206, i8* %17, align 1
  %8207 = add i64 %7029, 14
  store i64 %8207, i64* %3, align 8
  store i32 %8184, i32* %8182, align 4
  %8208 = load i64, i64* %3, align 8
  %8209 = add i64 %8208, -696
  store i64 %8209, i64* %3, align 8
  br label %block_.L_4051dd

block_.L_4054a1:                                  ; preds = %block_.L_405cac, %block_405211
  %8210 = phi i64 [ %.pre319, %block_405211 ], [ %12061, %block_.L_405cac ]
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.19, %block_405211 ], [ %MEMORY.38, %block_.L_405cac ]
  %8211 = load i64, i64* %RBP.i, align 8
  %8212 = add i64 %8211, -20
  %8213 = add i64 %8210, 4
  store i64 %8213, i64* %3, align 8
  %8214 = inttoptr i64 %8212 to i32*
  %8215 = load i32, i32* %8214, align 4
  %8216 = add i32 %8215, -4
  %8217 = icmp ult i32 %8215, 4
  %8218 = zext i1 %8217 to i8
  store i8 %8218, i8* %12, align 1
  %8219 = and i32 %8216, 255
  %8220 = tail call i32 @llvm.ctpop.i32(i32 %8219)
  %8221 = trunc i32 %8220 to i8
  %8222 = and i8 %8221, 1
  %8223 = xor i8 %8222, 1
  store i8 %8223, i8* %13, align 1
  %8224 = xor i32 %8216, %8215
  %8225 = lshr i32 %8224, 4
  %8226 = trunc i32 %8225 to i8
  %8227 = and i8 %8226, 1
  store i8 %8227, i8* %14, align 1
  %8228 = icmp eq i32 %8216, 0
  %8229 = zext i1 %8228 to i8
  store i8 %8229, i8* %15, align 1
  %8230 = lshr i32 %8216, 31
  %8231 = trunc i32 %8230 to i8
  store i8 %8231, i8* %16, align 1
  %8232 = lshr i32 %8215, 31
  %8233 = xor i32 %8230, %8232
  %8234 = add nuw nsw i32 %8233, %8232
  %8235 = icmp eq i32 %8234, 2
  %8236 = zext i1 %8235 to i8
  store i8 %8236, i8* %17, align 1
  %8237 = icmp ne i8 %8231, 0
  %8238 = xor i1 %8237, %8235
  %.v453 = select i1 %8238, i64 10, i64 2078
  %8239 = add i64 %8210, %.v453
  store i64 %8239, i64* %3, align 8
  br i1 %8238, label %block_4054ab, label %block_.L_405cbf

block_4054ab:                                     ; preds = %block_.L_4054a1
  %8240 = add i64 %8211, -16
  %8241 = add i64 %8239, 7
  store i64 %8241, i64* %3, align 8
  %8242 = inttoptr i64 %8240 to i32*
  store i32 0, i32* %8242, align 4
  %.pre380 = load i64, i64* %3, align 8
  br label %block_.L_4054b2

block_.L_4054b2:                                  ; preds = %block_405b28, %block_4054ab
  %8243 = phi i64 [ %.pre380, %block_4054ab ], [ %11214, %block_405b28 ]
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.37, %block_4054ab ], [ %MEMORY.39, %block_405b28 ]
  %8244 = load i64, i64* %RBP.i, align 8
  %8245 = add i64 %8244, -16
  %8246 = add i64 %8243, 4
  store i64 %8246, i64* %3, align 8
  %8247 = inttoptr i64 %8245 to i32*
  %8248 = load i32, i32* %8247, align 4
  %8249 = add i32 %8248, -4
  %8250 = icmp ult i32 %8248, 4
  %8251 = zext i1 %8250 to i8
  store i8 %8251, i8* %12, align 1
  %8252 = and i32 %8249, 255
  %8253 = tail call i32 @llvm.ctpop.i32(i32 %8252)
  %8254 = trunc i32 %8253 to i8
  %8255 = and i8 %8254, 1
  %8256 = xor i8 %8255, 1
  store i8 %8256, i8* %13, align 1
  %8257 = xor i32 %8249, %8248
  %8258 = lshr i32 %8257, 4
  %8259 = trunc i32 %8258 to i8
  %8260 = and i8 %8259, 1
  store i8 %8260, i8* %14, align 1
  %8261 = icmp eq i32 %8249, 0
  %8262 = zext i1 %8261 to i8
  store i8 %8262, i8* %15, align 1
  %8263 = lshr i32 %8249, 31
  %8264 = trunc i32 %8263 to i8
  store i8 %8264, i8* %16, align 1
  %8265 = lshr i32 %8248, 31
  %8266 = xor i32 %8263, %8265
  %8267 = add nuw nsw i32 %8266, %8265
  %8268 = icmp eq i32 %8267, 2
  %8269 = zext i1 %8268 to i8
  store i8 %8269, i8* %17, align 1
  %8270 = icmp ne i8 %8264, 0
  %8271 = xor i1 %8270, %8268
  %.v486 = select i1 %8271, i64 10, i64 2042
  %8272 = add i64 %8243, %.v486
  %8273 = add i64 %8272, 5
  store i64 %8273, i64* %3, align 8
  br i1 %8271, label %block_4054bc, label %block_.L_405cac

block_4054bc:                                     ; preds = %block_.L_4054b2
  store i64 2, i64* %RAX.i552, align 8
  %8274 = add i64 %8244, -2180
  %8275 = add i64 %8272, 15
  store i64 %8275, i64* %3, align 8
  %8276 = inttoptr i64 %8274 to i32*
  store i32 -1, i32* %8276, align 4
  %8277 = load i64, i64* %RBP.i, align 8
  %8278 = add i64 %8277, -2184
  %8279 = load i64, i64* %3, align 8
  %8280 = add i64 %8279, 10
  store i64 %8280, i64* %3, align 8
  %8281 = inttoptr i64 %8278 to i32*
  store i32 0, i32* %8281, align 4
  %8282 = load i64, i64* %RBP.i, align 8
  %8283 = add i64 %8282, -20
  %8284 = load i64, i64* %3, align 8
  %8285 = add i64 %8284, 3
  store i64 %8285, i64* %3, align 8
  %8286 = inttoptr i64 %8283 to i32*
  %8287 = load i32, i32* %8286, align 4
  %8288 = zext i32 %8287 to i64
  store i64 %8288, i64* %RCX.i4476, align 8
  %8289 = add i64 %8282, -2292
  %8290 = load i32, i32* %EAX.i551, align 4
  %8291 = add i64 %8284, 9
  store i64 %8291, i64* %3, align 8
  %8292 = inttoptr i64 %8289 to i32*
  store i32 %8290, i32* %8292, align 4
  %8293 = load i32, i32* %ECX.i4446, align 4
  %8294 = zext i32 %8293 to i64
  %8295 = load i64, i64* %3, align 8
  store i64 %8294, i64* %RAX.i552, align 8
  %8296 = sext i32 %8293 to i64
  %8297 = lshr i64 %8296, 32
  store i64 %8297, i64* %219, align 8
  %8298 = load i64, i64* %RBP.i, align 8
  %8299 = add i64 %8298, -2292
  %8300 = add i64 %8295, 9
  store i64 %8300, i64* %3, align 8
  %8301 = inttoptr i64 %8299 to i32*
  %8302 = load i32, i32* %8301, align 4
  %8303 = zext i32 %8302 to i64
  store i64 %8303, i64* %RCX.i4476, align 8
  %8304 = add i64 %8295, 11
  store i64 %8304, i64* %3, align 8
  %8305 = sext i32 %8302 to i64
  %8306 = shl nuw i64 %8297, 32
  %8307 = or i64 %8306, %8294
  %8308 = sdiv i64 %8307, %8305
  %8309 = shl i64 %8308, 32
  %8310 = ashr exact i64 %8309, 32
  %8311 = icmp eq i64 %8308, %8310
  br i1 %8311, label %8314, label %8312

; <label>:8312:                                   ; preds = %block_4054bc
  %8313 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8304, %struct.Memory* %MEMORY.38)
  %.pre381 = load i64, i64* %RAX.i552, align 8
  %.pre382 = load i64, i64* %3, align 8
  %.pre383 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2006

; <label>:8314:                                   ; preds = %block_4054bc
  %8315 = srem i64 %8307, %8305
  %8316 = and i64 %8308, 4294967295
  store i64 %8316, i64* %RAX.i552, align 8
  %8317 = and i64 %8315, 4294967295
  store i64 %8317, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit2006

routine_idivl__ecx.exit2006:                      ; preds = %8314, %8312
  %8318 = phi i64 [ %.pre383, %8312 ], [ %8298, %8314 ]
  %8319 = phi i64 [ %.pre382, %8312 ], [ %8304, %8314 ]
  %8320 = phi i64 [ %.pre381, %8312 ], [ %8316, %8314 ]
  %8321 = phi %struct.Memory* [ %8313, %8312 ], [ %MEMORY.38, %8314 ]
  %8322 = trunc i64 %8320 to i32
  %8323 = shl i32 %8322, 1
  %8324 = icmp slt i32 %8322, 0
  %8325 = icmp slt i32 %8323, 0
  %8326 = xor i1 %8324, %8325
  %8327 = zext i32 %8323 to i64
  store i64 %8327, i64* %RAX.i552, align 8
  %.lobit86 = lshr i32 %8322, 31
  %8328 = trunc i32 %.lobit86 to i8
  store i8 %8328, i8* %12, align 1
  %8329 = and i32 %8323, 254
  %8330 = tail call i32 @llvm.ctpop.i32(i32 %8329)
  %8331 = trunc i32 %8330 to i8
  %8332 = and i8 %8331, 1
  %8333 = xor i8 %8332, 1
  store i8 %8333, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8334 = icmp eq i32 %8323, 0
  %8335 = zext i1 %8334 to i8
  store i8 %8335, i8* %15, align 1
  %8336 = lshr i32 %8322, 30
  %8337 = trunc i32 %8336 to i8
  %8338 = and i8 %8337, 1
  store i8 %8338, i8* %16, align 1
  %8339 = zext i1 %8326 to i8
  store i8 %8339, i8* %17, align 1
  %8340 = add i64 %8318, -16
  %8341 = add i64 %8319, 5
  store i64 %8341, i64* %3, align 8
  %8342 = inttoptr i64 %8340 to i32*
  %8343 = load i32, i32* %8342, align 4
  %8344 = zext i32 %8343 to i64
  store i64 %8344, i64* %RSI.i757, align 8
  %8345 = add i64 %8318, -2296
  %8346 = add i64 %8319, 11
  store i64 %8346, i64* %3, align 8
  %8347 = inttoptr i64 %8345 to i32*
  store i32 %8323, i32* %8347, align 4
  %8348 = load i32, i32* %ESI.i4280, align 4
  %8349 = zext i32 %8348 to i64
  %8350 = load i64, i64* %3, align 8
  store i64 %8349, i64* %RAX.i552, align 8
  %8351 = sext i32 %8348 to i64
  %8352 = lshr i64 %8351, 32
  store i64 %8352, i64* %219, align 8
  %8353 = load i32, i32* %ECX.i4446, align 4
  %8354 = add i64 %8350, 5
  store i64 %8354, i64* %3, align 8
  %8355 = sext i32 %8353 to i64
  %8356 = shl nuw i64 %8352, 32
  %8357 = or i64 %8356, %8349
  %8358 = sdiv i64 %8357, %8355
  %8359 = shl i64 %8358, 32
  %8360 = ashr exact i64 %8359, 32
  %8361 = icmp eq i64 %8358, %8360
  br i1 %8361, label %8364, label %8362

; <label>:8362:                                   ; preds = %routine_idivl__ecx.exit2006
  %8363 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8354, %struct.Memory* %8321)
  %.pre384 = load i64, i64* %3, align 8
  %.pre385 = load i32, i32* %EAX.i551, align 4
  br label %routine_idivl__ecx.exit1989

; <label>:8364:                                   ; preds = %routine_idivl__ecx.exit2006
  %8365 = srem i64 %8357, %8355
  %8366 = and i64 %8358, 4294967295
  store i64 %8366, i64* %RAX.i552, align 8
  %8367 = and i64 %8365, 4294967295
  store i64 %8367, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %8368 = trunc i64 %8358 to i32
  br label %routine_idivl__ecx.exit1989

routine_idivl__ecx.exit1989:                      ; preds = %8364, %8362
  %8369 = phi i32 [ %.pre385, %8362 ], [ %8368, %8364 ]
  %8370 = phi i64 [ %.pre384, %8362 ], [ %8354, %8364 ]
  %8371 = phi %struct.Memory* [ %8363, %8362 ], [ %8321, %8364 ]
  %8372 = load i64, i64* %RBP.i, align 8
  %8373 = add i64 %8372, -2296
  %8374 = add i64 %8370, 6
  store i64 %8374, i64* %3, align 8
  %8375 = inttoptr i64 %8373 to i32*
  %8376 = load i32, i32* %8375, align 4
  %8377 = add i32 %8369, %8376
  %8378 = zext i32 %8377 to i64
  store i64 %8378, i64* %RSI.i757, align 8
  %8379 = icmp ult i32 %8377, %8376
  %8380 = icmp ult i32 %8377, %8369
  %8381 = or i1 %8379, %8380
  %8382 = zext i1 %8381 to i8
  store i8 %8382, i8* %12, align 1
  %8383 = and i32 %8377, 255
  %8384 = tail call i32 @llvm.ctpop.i32(i32 %8383)
  %8385 = trunc i32 %8384 to i8
  %8386 = and i8 %8385, 1
  %8387 = xor i8 %8386, 1
  store i8 %8387, i8* %13, align 1
  %8388 = xor i32 %8369, %8376
  %8389 = xor i32 %8388, %8377
  %8390 = lshr i32 %8389, 4
  %8391 = trunc i32 %8390 to i8
  %8392 = and i8 %8391, 1
  store i8 %8392, i8* %14, align 1
  %8393 = icmp eq i32 %8377, 0
  %8394 = zext i1 %8393 to i8
  store i8 %8394, i8* %15, align 1
  %8395 = lshr i32 %8377, 31
  %8396 = trunc i32 %8395 to i8
  store i8 %8396, i8* %16, align 1
  %8397 = lshr i32 %8376, 31
  %8398 = lshr i32 %8369, 31
  %8399 = xor i32 %8395, %8397
  %8400 = xor i32 %8395, %8398
  %8401 = add nuw nsw i32 %8399, %8400
  %8402 = icmp eq i32 %8401, 2
  %8403 = zext i1 %8402 to i8
  store i8 %8403, i8* %17, align 1
  %8404 = add i64 %8372, -2220
  %8405 = add i64 %8370, 14
  store i64 %8405, i64* %3, align 8
  %8406 = inttoptr i64 %8404 to i32*
  store i32 %8377, i32* %8406, align 4
  %8407 = load i64, i64* %RBP.i, align 8
  %8408 = add i64 %8407, -20
  %8409 = load i64, i64* %3, align 8
  %8410 = add i64 %8409, 3
  store i64 %8410, i64* %3, align 8
  %8411 = inttoptr i64 %8408 to i32*
  %8412 = load i32, i32* %8411, align 4
  %8413 = zext i32 %8412 to i64
  store i64 %8413, i64* %RAX.i552, align 8
  %8414 = sext i32 %8412 to i64
  %8415 = lshr i64 %8414, 32
  store i64 %8415, i64* %219, align 8
  %8416 = load i32, i32* %ECX.i4446, align 4
  %8417 = add i64 %8409, 6
  store i64 %8417, i64* %3, align 8
  %8418 = sext i32 %8416 to i64
  %8419 = shl nuw i64 %8415, 32
  %8420 = or i64 %8419, %8413
  %8421 = sdiv i64 %8420, %8418
  %8422 = shl i64 %8421, 32
  %8423 = ashr exact i64 %8422, 32
  %8424 = icmp eq i64 %8421, %8423
  br i1 %8424, label %8427, label %8425

; <label>:8425:                                   ; preds = %routine_idivl__ecx.exit1989
  %8426 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8417, %struct.Memory* %8371)
  %.pre386 = load i64, i64* %RDX.i658, align 8
  %.pre387 = load i64, i64* %3, align 8
  %.pre388 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1971

; <label>:8427:                                   ; preds = %routine_idivl__ecx.exit1989
  %8428 = srem i64 %8420, %8418
  %8429 = and i64 %8421, 4294967295
  store i64 %8429, i64* %RAX.i552, align 8
  %8430 = and i64 %8428, 4294967295
  store i64 %8430, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1971

routine_idivl__ecx.exit1971:                      ; preds = %8427, %8425
  %8431 = phi i64 [ %.pre388, %8425 ], [ %8407, %8427 ]
  %8432 = phi i64 [ %.pre387, %8425 ], [ %8417, %8427 ]
  %8433 = phi i64 [ %.pre386, %8425 ], [ %8430, %8427 ]
  %8434 = phi %struct.Memory* [ %8426, %8425 ], [ %8371, %8427 ]
  %8435 = trunc i64 %8433 to i32
  %8436 = shl i32 %8435, 1
  %8437 = icmp slt i32 %8435, 0
  %8438 = icmp slt i32 %8436, 0
  %8439 = xor i1 %8437, %8438
  %8440 = zext i32 %8436 to i64
  store i64 %8440, i64* %RDX.i658, align 8
  %.lobit87 = lshr i32 %8435, 31
  %8441 = trunc i32 %.lobit87 to i8
  store i8 %8441, i8* %12, align 1
  %8442 = and i32 %8436, 254
  %8443 = tail call i32 @llvm.ctpop.i32(i32 %8442)
  %8444 = trunc i32 %8443 to i8
  %8445 = and i8 %8444, 1
  %8446 = xor i8 %8445, 1
  store i8 %8446, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8447 = icmp eq i32 %8436, 0
  %8448 = zext i1 %8447 to i8
  store i8 %8448, i8* %15, align 1
  %8449 = lshr i32 %8435, 30
  %8450 = trunc i32 %8449 to i8
  %8451 = and i8 %8450, 1
  store i8 %8451, i8* %16, align 1
  %8452 = zext i1 %8439 to i8
  store i8 %8452, i8* %17, align 1
  %8453 = add i64 %8431, -16
  %8454 = add i64 %8432, 5
  store i64 %8454, i64* %3, align 8
  %8455 = inttoptr i64 %8453 to i32*
  %8456 = load i32, i32* %8455, align 4
  %8457 = zext i32 %8456 to i64
  store i64 %8457, i64* %RSI.i757, align 8
  store i64 %8457, i64* %RAX.i552, align 8
  %8458 = add i64 %8431, -2300
  %8459 = add i64 %8432, 13
  store i64 %8459, i64* %3, align 8
  %8460 = inttoptr i64 %8458 to i32*
  store i32 %8436, i32* %8460, align 4
  %8461 = load i64, i64* %3, align 8
  %8462 = load i32, i32* %EAX.i551, align 8
  %8463 = sext i32 %8462 to i64
  %8464 = lshr i64 %8463, 32
  store i64 %8464, i64* %219, align 8
  %8465 = load i32, i32* %ECX.i4446, align 4
  %8466 = add i64 %8461, 3
  store i64 %8466, i64* %3, align 8
  %8467 = zext i32 %8462 to i64
  %8468 = sext i32 %8465 to i64
  %8469 = shl nuw i64 %8464, 32
  %8470 = or i64 %8469, %8467
  %8471 = sdiv i64 %8470, %8468
  %8472 = shl i64 %8471, 32
  %8473 = ashr exact i64 %8472, 32
  %8474 = icmp eq i64 %8471, %8473
  br i1 %8474, label %8477, label %8475

; <label>:8475:                                   ; preds = %routine_idivl__ecx.exit1971
  %8476 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8466, %struct.Memory* %8434)
  %.pre389 = load i64, i64* %3, align 8
  %.pre390 = load i32, i32* %EDX.i4468, align 4
  br label %routine_idivl__ecx.exit1954

; <label>:8477:                                   ; preds = %routine_idivl__ecx.exit1971
  %8478 = srem i64 %8470, %8468
  %8479 = and i64 %8471, 4294967295
  store i64 %8479, i64* %RAX.i552, align 8
  %8480 = and i64 %8478, 4294967295
  store i64 %8480, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %8481 = trunc i64 %8478 to i32
  br label %routine_idivl__ecx.exit1954

routine_idivl__ecx.exit1954:                      ; preds = %8477, %8475
  %8482 = phi i32 [ %.pre390, %8475 ], [ %8481, %8477 ]
  %8483 = phi i64 [ %.pre389, %8475 ], [ %8466, %8477 ]
  %8484 = phi %struct.Memory* [ %8476, %8475 ], [ %8434, %8477 ]
  %8485 = load i64, i64* %RBP.i, align 8
  %8486 = add i64 %8485, -2300
  %8487 = add i64 %8483, 6
  store i64 %8487, i64* %3, align 8
  %8488 = inttoptr i64 %8486 to i32*
  %8489 = load i32, i32* %8488, align 4
  %8490 = add i32 %8482, %8489
  %8491 = zext i32 %8490 to i64
  store i64 %8491, i64* %RSI.i757, align 8
  %8492 = icmp ult i32 %8490, %8489
  %8493 = icmp ult i32 %8490, %8482
  %8494 = or i1 %8492, %8493
  %8495 = zext i1 %8494 to i8
  store i8 %8495, i8* %12, align 1
  %8496 = and i32 %8490, 255
  %8497 = tail call i32 @llvm.ctpop.i32(i32 %8496)
  %8498 = trunc i32 %8497 to i8
  %8499 = and i8 %8498, 1
  %8500 = xor i8 %8499, 1
  store i8 %8500, i8* %13, align 1
  %8501 = xor i32 %8482, %8489
  %8502 = xor i32 %8501, %8490
  %8503 = lshr i32 %8502, 4
  %8504 = trunc i32 %8503 to i8
  %8505 = and i8 %8504, 1
  store i8 %8505, i8* %14, align 1
  %8506 = icmp eq i32 %8490, 0
  %8507 = zext i1 %8506 to i8
  store i8 %8507, i8* %15, align 1
  %8508 = lshr i32 %8490, 31
  %8509 = trunc i32 %8508 to i8
  store i8 %8509, i8* %16, align 1
  %8510 = lshr i32 %8489, 31
  %8511 = lshr i32 %8482, 31
  %8512 = xor i32 %8508, %8510
  %8513 = xor i32 %8508, %8511
  %8514 = add nuw nsw i32 %8512, %8513
  %8515 = icmp eq i32 %8514, 2
  %8516 = zext i1 %8515 to i8
  store i8 %8516, i8* %17, align 1
  %8517 = add i64 %8485, -2224
  %8518 = add i64 %8483, 14
  store i64 %8518, i64* %3, align 8
  %8519 = inttoptr i64 %8517 to i32*
  store i32 %8490, i32* %8519, align 4
  %8520 = load i64, i64* %3, align 8
  %8521 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8521, i64* %RDI.i4259, align 8
  %8522 = add i64 %8521, 14136
  %8523 = add i64 %8520, 15
  store i64 %8523, i64* %3, align 8
  %8524 = inttoptr i64 %8522 to i64*
  %8525 = load i64, i64* %8524, align 8
  store i64 %8525, i64* %RDI.i4259, align 8
  %8526 = load i64, i64* %RBP.i, align 8
  %8527 = add i64 %8526, -2220
  %8528 = add i64 %8520, 22
  store i64 %8528, i64* %3, align 8
  %8529 = inttoptr i64 %8527 to i32*
  %8530 = load i32, i32* %8529, align 4
  %8531 = sext i32 %8530 to i64
  store i64 %8531, i64* %335, align 8
  %8532 = shl nsw i64 %8531, 3
  %8533 = add i64 %8532, %8525
  %8534 = add i64 %8520, 26
  store i64 %8534, i64* %3, align 8
  %8535 = inttoptr i64 %8533 to i64*
  %8536 = load i64, i64* %8535, align 8
  store i64 %8536, i64* %RDI.i4259, align 8
  %8537 = add i64 %8526, -2224
  %8538 = add i64 %8520, 33
  store i64 %8538, i64* %3, align 8
  %8539 = inttoptr i64 %8537 to i32*
  %8540 = load i32, i32* %8539, align 4
  %8541 = sext i32 %8540 to i64
  store i64 %8541, i64* %335, align 8
  %8542 = shl nsw i64 %8541, 3
  %8543 = add i64 %8542, %8536
  %8544 = add i64 %8520, 37
  store i64 %8544, i64* %3, align 8
  %8545 = inttoptr i64 %8543 to i64*
  %8546 = load i64, i64* %8545, align 8
  store i64 %8546, i64* %RDI.i4259, align 8
  %8547 = add i64 %8520, 40
  store i64 %8547, i64* %3, align 8
  %8548 = inttoptr i64 %8546 to i64*
  %8549 = load i64, i64* %8548, align 8
  %8550 = add i64 %8526, -2248
  %8551 = add i64 %8520, 47
  store i64 %8551, i64* %3, align 8
  %8552 = inttoptr i64 %8550 to i64*
  store i64 %8549, i64* %8552, align 8
  %8553 = load i64, i64* %3, align 8
  %8554 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8554, i64* %RDI.i4259, align 8
  %8555 = add i64 %8554, 14136
  %8556 = add i64 %8553, 15
  store i64 %8556, i64* %3, align 8
  %8557 = inttoptr i64 %8555 to i64*
  %8558 = load i64, i64* %8557, align 8
  store i64 %8558, i64* %RDI.i4259, align 8
  %8559 = load i64, i64* %RBP.i, align 8
  %8560 = add i64 %8559, -2220
  %8561 = add i64 %8553, 22
  store i64 %8561, i64* %3, align 8
  %8562 = inttoptr i64 %8560 to i32*
  %8563 = load i32, i32* %8562, align 4
  %8564 = sext i32 %8563 to i64
  store i64 %8564, i64* %335, align 8
  %8565 = shl nsw i64 %8564, 3
  %8566 = add i64 %8565, %8558
  %8567 = add i64 %8553, 26
  store i64 %8567, i64* %3, align 8
  %8568 = inttoptr i64 %8566 to i64*
  %8569 = load i64, i64* %8568, align 8
  store i64 %8569, i64* %RDI.i4259, align 8
  %8570 = add i64 %8559, -2224
  %8571 = add i64 %8553, 33
  store i64 %8571, i64* %3, align 8
  %8572 = inttoptr i64 %8570 to i32*
  %8573 = load i32, i32* %8572, align 4
  %8574 = sext i32 %8573 to i64
  store i64 %8574, i64* %335, align 8
  %8575 = shl nsw i64 %8574, 3
  %8576 = add i64 %8575, %8569
  %8577 = add i64 %8553, 37
  store i64 %8577, i64* %3, align 8
  %8578 = inttoptr i64 %8576 to i64*
  %8579 = load i64, i64* %8578, align 8
  store i64 %8579, i64* %RDI.i4259, align 8
  %8580 = add i64 %8579, 8
  %8581 = add i64 %8553, 41
  store i64 %8581, i64* %3, align 8
  %8582 = inttoptr i64 %8580 to i64*
  %8583 = load i64, i64* %8582, align 8
  store i64 %8583, i64* %RDI.i4259, align 8
  %8584 = add i64 %8559, -2256
  %8585 = add i64 %8553, 48
  store i64 %8585, i64* %3, align 8
  %8586 = inttoptr i64 %8584 to i64*
  store i64 %8583, i64* %8586, align 8
  %8587 = load i64, i64* %RBP.i, align 8
  %8588 = add i64 %8587, -2188
  %8589 = load i64, i64* %3, align 8
  %8590 = add i64 %8589, 10
  store i64 %8590, i64* %3, align 8
  %8591 = inttoptr i64 %8588 to i32*
  store i32 1, i32* %8591, align 4
  %.pre391 = load i64, i64* %3, align 8
  br label %block_.L_405596

block_.L_405596:                                  ; preds = %block_.L_405913, %routine_idivl__ecx.exit1954
  %8592 = phi i64 [ %.pre391, %routine_idivl__ecx.exit1954 ], [ %10211, %block_.L_405913 ]
  %MEMORY.39 = phi %struct.Memory* [ %8484, %routine_idivl__ecx.exit1954 ], [ %MEMORY.46, %block_.L_405913 ]
  %8593 = load i64, i64* %RBP.i, align 8
  %8594 = add i64 %8593, -2188
  %8595 = add i64 %8592, 7
  store i64 %8595, i64* %3, align 8
  %8596 = inttoptr i64 %8594 to i32*
  %8597 = load i32, i32* %8596, align 4
  %8598 = add i32 %8597, -16
  %8599 = icmp ult i32 %8597, 16
  %8600 = zext i1 %8599 to i8
  store i8 %8600, i8* %12, align 1
  %8601 = and i32 %8598, 255
  %8602 = tail call i32 @llvm.ctpop.i32(i32 %8601)
  %8603 = trunc i32 %8602 to i8
  %8604 = and i8 %8603, 1
  %8605 = xor i8 %8604, 1
  store i8 %8605, i8* %13, align 1
  %8606 = xor i32 %8597, 16
  %8607 = xor i32 %8606, %8598
  %8608 = lshr i32 %8607, 4
  %8609 = trunc i32 %8608 to i8
  %8610 = and i8 %8609, 1
  store i8 %8610, i8* %14, align 1
  %8611 = icmp eq i32 %8598, 0
  %8612 = zext i1 %8611 to i8
  store i8 %8612, i8* %15, align 1
  %8613 = lshr i32 %8598, 31
  %8614 = trunc i32 %8613 to i8
  store i8 %8614, i8* %16, align 1
  %8615 = lshr i32 %8597, 31
  %8616 = xor i32 %8613, %8615
  %8617 = add nuw nsw i32 %8616, %8615
  %8618 = icmp eq i32 %8617, 2
  %8619 = zext i1 %8618 to i8
  store i8 %8619, i8* %17, align 1
  %8620 = icmp ne i8 %8614, 0
  %8621 = xor i1 %8620, %8618
  %.v487 = select i1 %8621, i64 13, i64 918
  %8622 = add i64 %8592, %.v487
  store i64 %8622, i64* %3, align 8
  br i1 %8621, label %block_4055a3, label %block_.L_40592c

block_4055a3:                                     ; preds = %block_.L_405596
  %8623 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8623, i64* %RAX.i552, align 8
  %8624 = add i64 %8623, 72444
  %8625 = add i64 %8622, 15
  store i64 %8625, i64* %3, align 8
  %8626 = inttoptr i64 %8624 to i32*
  %8627 = load i32, i32* %8626, align 4
  store i8 0, i8* %12, align 1
  %8628 = and i32 %8627, 255
  %8629 = tail call i32 @llvm.ctpop.i32(i32 %8628)
  %8630 = trunc i32 %8629 to i8
  %8631 = and i8 %8630, 1
  %8632 = xor i8 %8631, 1
  store i8 %8632, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8633 = icmp eq i32 %8627, 0
  %8634 = zext i1 %8633 to i8
  store i8 %8634, i8* %15, align 1
  %8635 = lshr i32 %8627, 31
  %8636 = trunc i32 %8635 to i8
  store i8 %8636, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v490 = select i1 %8633, i64 21, i64 56
  %8637 = add i64 %8622, %.v490
  store i64 %8637, i64* %3, align 8
  br i1 %8633, label %block_4055b8, label %block_.L_4055db

block_4055b8:                                     ; preds = %block_4055a3
  %8638 = load i32, i32* bitcast (%G_0x6d4750_type* @G_0x6d4750 to i32*), align 8
  store i8 0, i8* %12, align 1
  %8639 = and i32 %8638, 255
  %8640 = tail call i32 @llvm.ctpop.i32(i32 %8639)
  %8641 = trunc i32 %8640 to i8
  %8642 = and i8 %8641, 1
  %8643 = xor i8 %8642, 1
  store i8 %8643, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8644 = icmp eq i32 %8638, 0
  %8645 = zext i1 %8644 to i8
  store i8 %8645, i8* %15, align 1
  %8646 = lshr i32 %8638, 31
  %8647 = trunc i32 %8646 to i8
  store i8 %8647, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v493 = select i1 %8644, i64 76, i64 14
  %8648 = add i64 %8637, %.v493
  store i64 %8648, i64* %3, align 8
  br i1 %8644, label %block_.L_405604, label %block_4055c6

block_4055c6:                                     ; preds = %block_4055b8
  store i64 %8623, i64* %RAX.i552, align 8
  %8649 = add i64 %8623, 72008
  %8650 = add i64 %8648, 15
  store i64 %8650, i64* %3, align 8
  %8651 = inttoptr i64 %8649 to i32*
  %8652 = load i32, i32* %8651, align 4
  store i8 0, i8* %12, align 1
  %8653 = and i32 %8652, 255
  %8654 = tail call i32 @llvm.ctpop.i32(i32 %8653)
  %8655 = trunc i32 %8654 to i8
  %8656 = and i8 %8655, 1
  %8657 = xor i8 %8656, 1
  store i8 %8657, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8658 = icmp eq i32 %8652, 0
  %8659 = zext i1 %8658 to i8
  store i8 %8659, i8* %15, align 1
  %8660 = lshr i32 %8652, 31
  %8661 = trunc i32 %8660 to i8
  store i8 %8661, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v494 = select i1 %8658, i64 62, i64 21
  %8662 = add i64 %8648, %.v494
  store i64 %8662, i64* %3, align 8
  br i1 %8658, label %block_.L_405604, label %block_.L_4055db

block_.L_4055db:                                  ; preds = %block_4055a3, %block_4055c6
  %8663 = phi i64 [ %8662, %block_4055c6 ], [ %8637, %block_4055a3 ]
  %8664 = add i64 %8663, 7
  store i64 %8664, i64* %3, align 8
  %8665 = load i32, i32* %8596, align 4
  %8666 = sext i32 %8665 to i64
  store i64 %8666, i64* %RAX.i552, align 8
  %8667 = shl nsw i64 %8666, 1
  %8668 = add nsw i64 %8667, 4924288
  %8669 = add i64 %8663, 15
  store i64 %8669, i64* %3, align 8
  %8670 = inttoptr i64 %8668 to i8*
  %8671 = load i8, i8* %8670, align 2
  %8672 = zext i8 %8671 to i64
  store i64 %8672, i64* %RCX.i4476, align 8
  %8673 = add i64 %8593, -8
  %8674 = zext i8 %8671 to i32
  %8675 = add i64 %8663, 18
  store i64 %8675, i64* %3, align 8
  %8676 = inttoptr i64 %8673 to i32*
  store i32 %8674, i32* %8676, align 4
  %8677 = load i64, i64* %RBP.i, align 8
  %8678 = add i64 %8677, -2188
  %8679 = load i64, i64* %3, align 8
  %8680 = add i64 %8679, 7
  store i64 %8680, i64* %3, align 8
  %8681 = inttoptr i64 %8678 to i32*
  %8682 = load i32, i32* %8681, align 4
  %8683 = sext i32 %8682 to i64
  store i64 %8683, i64* %RAX.i552, align 8
  %8684 = shl nsw i64 %8683, 1
  %8685 = add nsw i64 %8684, 4924289
  %8686 = add i64 %8679, 15
  store i64 %8686, i64* %3, align 8
  %8687 = inttoptr i64 %8685 to i8*
  %8688 = load i8, i8* %8687, align 1
  %8689 = zext i8 %8688 to i64
  store i64 %8689, i64* %RCX.i4476, align 8
  %8690 = add i64 %8677, -12
  %8691 = zext i8 %8688 to i32
  %8692 = add i64 %8679, 18
  store i64 %8692, i64* %3, align 8
  %8693 = inttoptr i64 %8690 to i32*
  store i32 %8691, i32* %8693, align 4
  %8694 = load i64, i64* %3, align 8
  %8695 = add i64 %8694, 41
  store i64 %8695, i64* %3, align 8
  br label %block_.L_405628

block_.L_405604:                                  ; preds = %block_4055c6, %block_4055b8
  %8696 = phi i64 [ %8662, %block_4055c6 ], [ %8648, %block_4055b8 ]
  %8697 = add i64 %8696, 7
  store i64 %8697, i64* %3, align 8
  %8698 = load i32, i32* %8596, align 4
  %8699 = sext i32 %8698 to i64
  store i64 %8699, i64* %RAX.i552, align 8
  %8700 = shl nsw i64 %8699, 1
  %8701 = add nsw i64 %8700, 4924256
  %8702 = add i64 %8696, 15
  store i64 %8702, i64* %3, align 8
  %8703 = inttoptr i64 %8701 to i8*
  %8704 = load i8, i8* %8703, align 2
  %8705 = zext i8 %8704 to i64
  store i64 %8705, i64* %RCX.i4476, align 8
  %8706 = add i64 %8593, -8
  %8707 = zext i8 %8704 to i32
  %8708 = add i64 %8696, 18
  store i64 %8708, i64* %3, align 8
  %8709 = inttoptr i64 %8706 to i32*
  store i32 %8707, i32* %8709, align 4
  %8710 = load i64, i64* %RBP.i, align 8
  %8711 = add i64 %8710, -2188
  %8712 = load i64, i64* %3, align 8
  %8713 = add i64 %8712, 7
  store i64 %8713, i64* %3, align 8
  %8714 = inttoptr i64 %8711 to i32*
  %8715 = load i32, i32* %8714, align 4
  %8716 = sext i32 %8715 to i64
  store i64 %8716, i64* %RAX.i552, align 8
  %8717 = shl nsw i64 %8716, 1
  %8718 = add nsw i64 %8717, 4924257
  %8719 = add i64 %8712, 15
  store i64 %8719, i64* %3, align 8
  %8720 = inttoptr i64 %8718 to i8*
  %8721 = load i8, i8* %8720, align 1
  %8722 = zext i8 %8721 to i64
  store i64 %8722, i64* %RCX.i4476, align 8
  %8723 = add i64 %8710, -12
  %8724 = zext i8 %8721 to i32
  %8725 = add i64 %8712, 18
  store i64 %8725, i64* %3, align 8
  %8726 = inttoptr i64 %8723 to i32*
  store i32 %8724, i32* %8726, align 4
  %.pre400 = load i64, i64* %3, align 8
  br label %block_.L_405628

block_.L_405628:                                  ; preds = %block_.L_405604, %block_.L_4055db
  %8727 = phi i64 [ %.pre400, %block_.L_405604 ], [ %8695, %block_.L_4055db ]
  %8728 = load i64, i64* %RBP.i, align 8
  %8729 = add i64 %8728, -2180
  %8730 = add i64 %8727, 6
  store i64 %8730, i64* %3, align 8
  %8731 = inttoptr i64 %8729 to i32*
  %8732 = load i32, i32* %8731, align 4
  %8733 = add i32 %8732, 1
  %8734 = zext i32 %8733 to i64
  store i64 %8734, i64* %RAX.i552, align 8
  %8735 = icmp eq i32 %8732, -1
  %8736 = icmp eq i32 %8733, 0
  %8737 = or i1 %8735, %8736
  %8738 = zext i1 %8737 to i8
  store i8 %8738, i8* %12, align 1
  %8739 = and i32 %8733, 255
  %8740 = tail call i32 @llvm.ctpop.i32(i32 %8739)
  %8741 = trunc i32 %8740 to i8
  %8742 = and i8 %8741, 1
  %8743 = xor i8 %8742, 1
  store i8 %8743, i8* %13, align 1
  %8744 = xor i32 %8733, %8732
  %8745 = lshr i32 %8744, 4
  %8746 = trunc i32 %8745 to i8
  %8747 = and i8 %8746, 1
  store i8 %8747, i8* %14, align 1
  %8748 = zext i1 %8736 to i8
  store i8 %8748, i8* %15, align 1
  %8749 = lshr i32 %8733, 31
  %8750 = trunc i32 %8749 to i8
  store i8 %8750, i8* %16, align 1
  %8751 = lshr i32 %8732, 31
  %8752 = xor i32 %8749, %8751
  %8753 = add nuw nsw i32 %8752, %8749
  %8754 = icmp eq i32 %8753, 2
  %8755 = zext i1 %8754 to i8
  store i8 %8755, i8* %17, align 1
  %8756 = add i64 %8727, 15
  store i64 %8756, i64* %3, align 8
  store i32 %8733, i32* %8731, align 4
  %8757 = load i64, i64* %RBP.i, align 8
  %8758 = add i64 %8757, -2260
  %8759 = load i64, i64* %3, align 8
  %8760 = add i64 %8759, 7
  store i64 %8760, i64* %3, align 8
  %8761 = inttoptr i64 %8758 to i32*
  %8762 = load i32, i32* %8761, align 4
  store i8 0, i8* %12, align 1
  %8763 = and i32 %8762, 255
  %8764 = tail call i32 @llvm.ctpop.i32(i32 %8763)
  %8765 = trunc i32 %8764 to i8
  %8766 = and i8 %8765, 1
  %8767 = xor i8 %8766, 1
  store i8 %8767, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8768 = icmp eq i32 %8762, 0
  %8769 = zext i1 %8768 to i8
  store i8 %8769, i8* %15, align 1
  %8770 = lshr i32 %8762, 31
  %8771 = trunc i32 %8770 to i8
  store i8 %8771, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v461 = select i1 %8768, i64 76, i64 13
  %8772 = add i64 %8759, %.v461
  %8773 = add i64 %8757, -2176
  store i64 %8773, i64* %RAX.i552, align 8
  %8774 = add i64 %8757, -8
  %8775 = add i64 %8772, 11
  store i64 %8775, i64* %3, align 8
  %8776 = inttoptr i64 %8774 to i32*
  %8777 = load i32, i32* %8776, align 4
  %8778 = sext i32 %8777 to i64
  %8779 = shl nsw i64 %8778, 8
  store i64 %8779, i64* %RCX.i4476, align 8
  %8780 = add i64 %8779, %8773
  store i64 %8780, i64* %RAX.i552, align 8
  %8781 = icmp ult i64 %8780, %8773
  %8782 = icmp ult i64 %8780, %8779
  %8783 = or i1 %8781, %8782
  %8784 = zext i1 %8783 to i8
  store i8 %8784, i8* %12, align 1
  %8785 = trunc i64 %8780 to i32
  %8786 = and i32 %8785, 255
  %8787 = tail call i32 @llvm.ctpop.i32(i32 %8786)
  %8788 = trunc i32 %8787 to i8
  %8789 = and i8 %8788, 1
  %8790 = xor i8 %8789, 1
  store i8 %8790, i8* %13, align 1
  %8791 = xor i64 %8773, %8780
  %8792 = lshr i64 %8791, 4
  %8793 = trunc i64 %8792 to i8
  %8794 = and i8 %8793, 1
  store i8 %8794, i8* %14, align 1
  %8795 = icmp eq i64 %8780, 0
  %8796 = zext i1 %8795 to i8
  store i8 %8796, i8* %15, align 1
  %8797 = lshr i64 %8780, 63
  %8798 = trunc i64 %8797 to i8
  store i8 %8798, i8* %16, align 1
  %8799 = lshr i64 %8773, 63
  %8800 = lshr i64 %8778, 55
  %8801 = and i64 %8800, 1
  %8802 = xor i64 %8797, %8799
  %8803 = xor i64 %8797, %8801
  %8804 = add nuw nsw i64 %8802, %8803
  %8805 = icmp eq i64 %8804, 2
  %8806 = zext i1 %8805 to i8
  store i8 %8806, i8* %17, align 1
  %8807 = add i64 %8757, -16
  %8808 = add i64 %8772, 22
  store i64 %8808, i64* %3, align 8
  %8809 = inttoptr i64 %8807 to i32*
  %8810 = load i32, i32* %8809, align 4
  %8811 = sext i32 %8810 to i64
  %8812 = shl nsw i64 %8811, 6
  store i64 %8812, i64* %RCX.i4476, align 8
  %8813 = add i64 %8812, %8780
  store i64 %8813, i64* %RAX.i552, align 8
  %8814 = icmp ult i64 %8813, %8780
  %8815 = icmp ult i64 %8813, %8812
  %8816 = or i1 %8814, %8815
  %8817 = zext i1 %8816 to i8
  store i8 %8817, i8* %12, align 1
  %8818 = trunc i64 %8813 to i32
  %8819 = and i32 %8818, 255
  %8820 = tail call i32 @llvm.ctpop.i32(i32 %8819)
  %8821 = trunc i32 %8820 to i8
  %8822 = and i8 %8821, 1
  %8823 = xor i8 %8822, 1
  store i8 %8823, i8* %13, align 1
  %8824 = xor i64 %8780, %8813
  %8825 = lshr i64 %8824, 4
  %8826 = trunc i64 %8825 to i8
  %8827 = and i8 %8826, 1
  store i8 %8827, i8* %14, align 1
  %8828 = icmp eq i64 %8813, 0
  %8829 = zext i1 %8828 to i8
  store i8 %8829, i8* %15, align 1
  %8830 = lshr i64 %8813, 63
  %8831 = trunc i64 %8830 to i8
  store i8 %8831, i8* %16, align 1
  %8832 = lshr i64 %8811, 57
  %8833 = and i64 %8832, 1
  %8834 = xor i64 %8830, %8797
  %8835 = xor i64 %8830, %8833
  %8836 = add nuw nsw i64 %8834, %8835
  %8837 = icmp eq i64 %8836, 2
  %8838 = zext i1 %8837 to i8
  store i8 %8838, i8* %17, align 1
  %8839 = load i64, i64* %RBP.i, align 8
  %8840 = add i64 %8839, -12
  %8841 = add i64 %8772, 33
  store i64 %8841, i64* %3, align 8
  %8842 = inttoptr i64 %8840 to i32*
  %8843 = load i32, i32* %8842, align 4
  %8844 = sext i32 %8843 to i64
  %8845 = shl nsw i64 %8844, 4
  store i64 %8845, i64* %RCX.i4476, align 8
  %8846 = add i64 %8845, %8813
  store i64 %8846, i64* %RAX.i552, align 8
  %8847 = icmp ult i64 %8846, %8813
  %8848 = icmp ult i64 %8846, %8845
  %8849 = or i1 %8847, %8848
  %8850 = zext i1 %8849 to i8
  store i8 %8850, i8* %12, align 1
  %8851 = trunc i64 %8846 to i32
  %8852 = and i32 %8851, 255
  %8853 = tail call i32 @llvm.ctpop.i32(i32 %8852)
  %8854 = trunc i32 %8853 to i8
  %8855 = and i8 %8854, 1
  %8856 = xor i8 %8855, 1
  store i8 %8856, i8* %13, align 1
  %8857 = xor i64 %8845, %8813
  %8858 = xor i64 %8857, %8846
  %8859 = lshr i64 %8858, 4
  %8860 = trunc i64 %8859 to i8
  %8861 = and i8 %8860, 1
  store i8 %8861, i8* %14, align 1
  %8862 = icmp eq i64 %8846, 0
  %8863 = zext i1 %8862 to i8
  store i8 %8863, i8* %15, align 1
  %8864 = lshr i64 %8846, 63
  %8865 = trunc i64 %8864 to i8
  store i8 %8865, i8* %16, align 1
  %8866 = lshr i64 %8844, 59
  %8867 = and i64 %8866, 1
  %8868 = xor i64 %8864, %8830
  %8869 = xor i64 %8864, %8867
  %8870 = add nuw nsw i64 %8868, %8869
  %8871 = icmp eq i64 %8870, 2
  %8872 = zext i1 %8871 to i8
  store i8 %8872, i8* %17, align 1
  %8873 = add i64 %8839, -20
  %8874 = add i64 %8772, 44
  store i64 %8874, i64* %3, align 8
  %8875 = inttoptr i64 %8873 to i32*
  %8876 = load i32, i32* %8875, align 4
  %8877 = sext i32 %8876 to i64
  store i64 %8877, i64* %RCX.i4476, align 8
  %8878 = shl nsw i64 %8877, 2
  %8879 = add i64 %8878, %8846
  %8880 = add i64 %8772, 47
  store i64 %8880, i64* %3, align 8
  %8881 = inttoptr i64 %8879 to i32*
  %8882 = load i32, i32* %8881, align 4
  %8883 = zext i32 %8882 to i64
  store i64 %8883, i64* %RDI.i4259, align 8
  br i1 %8768, label %block_.L_405683, label %block_405644

block_405644:                                     ; preds = %block_.L_405628
  %8884 = add i64 %8772, -17988
  %8885 = add i64 %8772, 52
  %8886 = load i64, i64* %6, align 8
  %8887 = add i64 %8886, -8
  %8888 = inttoptr i64 %8887 to i64*
  store i64 %8885, i64* %8888, align 8
  store i64 %8887, i64* %6, align 8
  store i64 %8884, i64* %3, align 8
  %8889 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.39)
  %8890 = load i64, i64* %RBP.i, align 8
  %8891 = add i64 %8890, -2192
  %8892 = load i32, i32* %EAX.i551, align 4
  %8893 = load i64, i64* %3, align 8
  %8894 = add i64 %8893, 6
  store i64 %8894, i64* %3, align 8
  %8895 = inttoptr i64 %8891 to i32*
  store i32 %8892, i32* %8895, align 4
  %8896 = load i64, i64* %3, align 8
  %8897 = add i64 %8896, 156
  store i64 %8897, i64* %3, align 8
  br label %block_.L_40571a

block_.L_405683:                                  ; preds = %block_.L_405628
  %8898 = add i64 %8772, -18051
  %8899 = add i64 %8772, 52
  %8900 = load i64, i64* %6, align 8
  %8901 = add i64 %8900, -8
  %8902 = inttoptr i64 %8901 to i64*
  store i64 %8899, i64* %8902, align 8
  store i64 %8901, i64* %6, align 8
  store i64 %8898, i64* %3, align 8
  %8903 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.39)
  %8904 = load i64, i64* %3, align 8
  store i64 7405600, i64* %RCX.i4476, align 8
  store i64 ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64), i64* %RDX.i658, align 8
  %8905 = load i64, i64* %RBP.i, align 8
  %8906 = add i64 %8905, -2200
  %8907 = add i64 %8904, 27
  store i64 %8907, i64* %3, align 8
  %8908 = inttoptr i64 %8906 to i32*
  %8909 = load i32, i32* %8908, align 4
  %8910 = sext i32 %8909 to i64
  %8911 = shl nsw i64 %8910, 6
  store i64 %8911, i64* %RSI.i757, align 8
  %8912 = add i64 %8911, ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64)
  store i64 %8912, i64* %RDX.i658, align 8
  %8913 = icmp ult i64 %8912, ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64)
  %8914 = icmp ult i64 %8912, %8911
  %8915 = or i1 %8913, %8914
  %8916 = zext i1 %8915 to i8
  store i8 %8916, i8* %12, align 1
  %8917 = trunc i64 %8912 to i32
  %8918 = and i32 %8917, 248
  %8919 = tail call i32 @llvm.ctpop.i32(i32 %8918)
  %8920 = trunc i32 %8919 to i8
  %8921 = and i8 %8920, 1
  %8922 = xor i8 %8921, 1
  store i8 %8922, i8* %13, align 1
  %8923 = xor i64 %8912, ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64)
  %8924 = lshr i64 %8923, 4
  %8925 = trunc i64 %8924 to i8
  %8926 = and i8 %8925, 1
  store i8 %8926, i8* %14, align 1
  %8927 = icmp eq i64 %8912, 0
  %8928 = zext i1 %8927 to i8
  store i8 %8928, i8* %15, align 1
  %8929 = lshr i64 %8912, 63
  %8930 = trunc i64 %8929 to i8
  store i8 %8930, i8* %16, align 1
  %8931 = lshr i64 %8910, 57
  %8932 = and i64 %8931, 1
  %8933 = xor i64 %8929, lshr (i64 ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64), i64 63)
  %8934 = xor i64 %8929, %8932
  %8935 = add nuw nsw i64 %8933, %8934
  %8936 = icmp eq i64 %8935, 2
  %8937 = zext i1 %8936 to i8
  store i8 %8937, i8* %17, align 1
  %8938 = add i64 %8905, -8
  %8939 = add i64 %8904, 38
  store i64 %8939, i64* %3, align 8
  %8940 = inttoptr i64 %8938 to i32*
  %8941 = load i32, i32* %8940, align 4
  %8942 = sext i32 %8941 to i64
  %8943 = shl nsw i64 %8942, 4
  store i64 %8943, i64* %RSI.i757, align 8
  %8944 = add i64 %8943, %8912
  store i64 %8944, i64* %RDX.i658, align 8
  %8945 = icmp ult i64 %8944, %8912
  %8946 = icmp ult i64 %8944, %8943
  %8947 = or i1 %8945, %8946
  %8948 = zext i1 %8947 to i8
  store i8 %8948, i8* %12, align 1
  %8949 = trunc i64 %8944 to i32
  %8950 = and i32 %8949, 248
  %8951 = tail call i32 @llvm.ctpop.i32(i32 %8950)
  %8952 = trunc i32 %8951 to i8
  %8953 = and i8 %8952, 1
  %8954 = xor i8 %8953, 1
  store i8 %8954, i8* %13, align 1
  %8955 = xor i64 %8943, %8912
  %8956 = xor i64 %8955, %8944
  %8957 = lshr i64 %8956, 4
  %8958 = trunc i64 %8957 to i8
  %8959 = and i8 %8958, 1
  store i8 %8959, i8* %14, align 1
  %8960 = icmp eq i64 %8944, 0
  %8961 = zext i1 %8960 to i8
  store i8 %8961, i8* %15, align 1
  %8962 = lshr i64 %8944, 63
  %8963 = trunc i64 %8962 to i8
  store i8 %8963, i8* %16, align 1
  %8964 = lshr i64 %8942, 59
  %8965 = and i64 %8964, 1
  %8966 = xor i64 %8962, %8929
  %8967 = xor i64 %8962, %8965
  %8968 = add nuw nsw i64 %8966, %8967
  %8969 = icmp eq i64 %8968, 2
  %8970 = zext i1 %8969 to i8
  store i8 %8970, i8* %17, align 1
  %8971 = load i64, i64* %RBP.i, align 8
  %8972 = add i64 %8971, -12
  %8973 = add i64 %8904, 49
  store i64 %8973, i64* %3, align 8
  %8974 = inttoptr i64 %8972 to i32*
  %8975 = load i32, i32* %8974, align 4
  %8976 = sext i32 %8975 to i64
  store i64 %8976, i64* %RSI.i757, align 8
  %8977 = load i64, i64* %RAX.i552, align 8
  %8978 = shl nsw i64 %8976, 2
  %8979 = add i64 %8944, %8978
  %8980 = add i64 %8904, 53
  store i64 %8980, i64* %3, align 8
  %8981 = inttoptr i64 %8979 to i32*
  %8982 = load i32, i32* %8981, align 4
  %8983 = shl i64 %8977, 32
  %8984 = ashr exact i64 %8983, 32
  %8985 = sext i32 %8982 to i64
  %8986 = mul nsw i64 %8985, %8984
  %8987 = trunc i64 %8986 to i32
  %8988 = and i64 %8986, 4294967295
  store i64 %8988, i64* %RAX.i552, align 8
  %8989 = shl i64 %8986, 32
  %8990 = ashr exact i64 %8989, 32
  %8991 = icmp ne i64 %8990, %8986
  %8992 = zext i1 %8991 to i8
  store i8 %8992, i8* %12, align 1
  %8993 = and i32 %8987, 255
  %8994 = tail call i32 @llvm.ctpop.i32(i32 %8993)
  %8995 = trunc i32 %8994 to i8
  %8996 = and i8 %8995, 1
  %8997 = xor i8 %8996, 1
  store i8 %8997, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %8998 = lshr i32 %8987, 31
  %8999 = trunc i32 %8998 to i8
  store i8 %8999, i8* %16, align 1
  store i8 %8992, i8* %17, align 1
  %9000 = add i64 %8971, -2196
  %9001 = add i64 %8904, 60
  store i64 %9001, i64* %3, align 8
  %9002 = inttoptr i64 %9000 to i32*
  %9003 = load i32, i32* %9002, align 4
  %9004 = sext i32 %9003 to i64
  %9005 = shl nsw i64 %9004, 6
  store i64 %9005, i64* %RDX.i658, align 8
  %9006 = load i64, i64* %RCX.i4476, align 8
  %9007 = add i64 %9005, %9006
  store i64 %9007, i64* %RCX.i4476, align 8
  %9008 = icmp ult i64 %9007, %9006
  %9009 = icmp ult i64 %9007, %9005
  %9010 = or i1 %9008, %9009
  %9011 = zext i1 %9010 to i8
  store i8 %9011, i8* %12, align 1
  %9012 = trunc i64 %9007 to i32
  %9013 = and i32 %9012, 255
  %9014 = tail call i32 @llvm.ctpop.i32(i32 %9013)
  %9015 = trunc i32 %9014 to i8
  %9016 = and i8 %9015, 1
  %9017 = xor i8 %9016, 1
  store i8 %9017, i8* %13, align 1
  %9018 = xor i64 %9006, %9007
  %9019 = lshr i64 %9018, 4
  %9020 = trunc i64 %9019 to i8
  %9021 = and i8 %9020, 1
  store i8 %9021, i8* %14, align 1
  %9022 = icmp eq i64 %9007, 0
  %9023 = zext i1 %9022 to i8
  store i8 %9023, i8* %15, align 1
  %9024 = lshr i64 %9007, 63
  %9025 = trunc i64 %9024 to i8
  store i8 %9025, i8* %16, align 1
  %9026 = lshr i64 %9006, 63
  %9027 = lshr i64 %9004, 57
  %9028 = and i64 %9027, 1
  %9029 = xor i64 %9024, %9026
  %9030 = xor i64 %9024, %9028
  %9031 = add nuw nsw i64 %9029, %9030
  %9032 = icmp eq i64 %9031, 2
  %9033 = zext i1 %9032 to i8
  store i8 %9033, i8* %17, align 1
  %9034 = load i64, i64* %RBP.i, align 8
  %9035 = add i64 %9034, -8
  %9036 = add i64 %8904, 71
  store i64 %9036, i64* %3, align 8
  %9037 = inttoptr i64 %9035 to i32*
  %9038 = load i32, i32* %9037, align 4
  %9039 = sext i32 %9038 to i64
  %9040 = shl nsw i64 %9039, 4
  store i64 %9040, i64* %RDX.i658, align 8
  %9041 = add i64 %9040, %9007
  store i64 %9041, i64* %RCX.i4476, align 8
  %9042 = icmp ult i64 %9041, %9007
  %9043 = icmp ult i64 %9041, %9040
  %9044 = or i1 %9042, %9043
  %9045 = zext i1 %9044 to i8
  store i8 %9045, i8* %12, align 1
  %9046 = trunc i64 %9041 to i32
  %9047 = and i32 %9046, 255
  %9048 = tail call i32 @llvm.ctpop.i32(i32 %9047)
  %9049 = trunc i32 %9048 to i8
  %9050 = and i8 %9049, 1
  %9051 = xor i8 %9050, 1
  store i8 %9051, i8* %13, align 1
  %9052 = xor i64 %9040, %9007
  %9053 = xor i64 %9052, %9041
  %9054 = lshr i64 %9053, 4
  %9055 = trunc i64 %9054 to i8
  %9056 = and i8 %9055, 1
  store i8 %9056, i8* %14, align 1
  %9057 = icmp eq i64 %9041, 0
  %9058 = zext i1 %9057 to i8
  store i8 %9058, i8* %15, align 1
  %9059 = lshr i64 %9041, 63
  %9060 = trunc i64 %9059 to i8
  store i8 %9060, i8* %16, align 1
  %9061 = lshr i64 %9039, 59
  %9062 = and i64 %9061, 1
  %9063 = xor i64 %9059, %9024
  %9064 = xor i64 %9059, %9062
  %9065 = add nuw nsw i64 %9063, %9064
  %9066 = icmp eq i64 %9065, 2
  %9067 = zext i1 %9066 to i8
  store i8 %9067, i8* %17, align 1
  %9068 = add i64 %9034, -12
  %9069 = add i64 %8904, 82
  store i64 %9069, i64* %3, align 8
  %9070 = inttoptr i64 %9068 to i32*
  %9071 = load i32, i32* %9070, align 4
  %9072 = sext i32 %9071 to i64
  store i64 %9072, i64* %RDX.i658, align 8
  %9073 = load i64, i64* %RAX.i552, align 8
  %9074 = shl nsw i64 %9072, 2
  %9075 = add i64 %9041, %9074
  %9076 = add i64 %8904, 85
  store i64 %9076, i64* %3, align 8
  %9077 = trunc i64 %9073 to i32
  %9078 = inttoptr i64 %9075 to i32*
  %9079 = load i32, i32* %9078, align 4
  %9080 = add i32 %9079, %9077
  %9081 = zext i32 %9080 to i64
  store i64 %9081, i64* %RAX.i552, align 8
  %9082 = icmp ult i32 %9080, %9077
  %9083 = icmp ult i32 %9080, %9079
  %9084 = or i1 %9082, %9083
  %9085 = zext i1 %9084 to i8
  store i8 %9085, i8* %12, align 1
  %9086 = and i32 %9080, 255
  %9087 = tail call i32 @llvm.ctpop.i32(i32 %9086)
  %9088 = trunc i32 %9087 to i8
  %9089 = and i8 %9088, 1
  %9090 = xor i8 %9089, 1
  store i8 %9090, i8* %13, align 1
  %9091 = xor i32 %9079, %9077
  %9092 = xor i32 %9091, %9080
  %9093 = lshr i32 %9092, 4
  %9094 = trunc i32 %9093 to i8
  %9095 = and i8 %9094, 1
  store i8 %9095, i8* %14, align 1
  %9096 = icmp eq i32 %9080, 0
  %9097 = zext i1 %9096 to i8
  store i8 %9097, i8* %15, align 1
  %9098 = lshr i32 %9080, 31
  %9099 = trunc i32 %9098 to i8
  store i8 %9099, i8* %16, align 1
  %9100 = lshr i32 %9077, 31
  %9101 = lshr i32 %9079, 31
  %9102 = xor i32 %9098, %9100
  %9103 = xor i32 %9098, %9101
  %9104 = add nuw nsw i32 %9102, %9103
  %9105 = icmp eq i32 %9104, 2
  %9106 = zext i1 %9105 to i8
  store i8 %9106, i8* %17, align 1
  %9107 = load i64, i64* %RBP.i, align 8
  %9108 = add i64 %9107, -2204
  %9109 = add i64 %8904, 91
  store i64 %9109, i64* %3, align 8
  %9110 = inttoptr i64 %9108 to i32*
  %9111 = load i32, i32* %9110, align 4
  %9112 = zext i32 %9111 to i64
  store i64 %9112, i64* %RCX.i4476, align 8
  %9113 = add i64 %8904, 93
  store i64 %9113, i64* %3, align 8
  %9114 = trunc i32 %9111 to i5
  switch i5 %9114, label %9118 [
    i5 0, label %routine_sarl__cl___eax.exit
    i5 1, label %9115
  ]

; <label>:9115:                                   ; preds = %block_.L_405683
  %9116 = shl nuw i64 %9081, 32
  %9117 = ashr i64 %9116, 33
  br label %9125

; <label>:9118:                                   ; preds = %block_.L_405683
  %9119 = and i32 %9111, 31
  %9120 = zext i32 %9119 to i64
  %9121 = add nsw i64 %9120, -1
  %9122 = sext i32 %9080 to i64
  %9123 = ashr i64 %9122, %9121
  %9124 = lshr i64 %9123, 1
  br label %9125

; <label>:9125:                                   ; preds = %9118, %9115
  %9126 = phi i64 [ %9124, %9118 ], [ %9117, %9115 ]
  %9127 = phi i64 [ %9123, %9118 ], [ %9081, %9115 ]
  %9128 = trunc i64 %9127 to i8
  %9129 = and i8 %9128, 1
  %9130 = trunc i64 %9126 to i32
  %9131 = and i64 %9126, 4294967295
  store i64 %9131, i64* %RAX.i552, align 8
  store i8 %9129, i8* %12, align 1
  %9132 = and i32 %9130, 255
  %9133 = tail call i32 @llvm.ctpop.i32(i32 %9132)
  %9134 = trunc i32 %9133 to i8
  %9135 = and i8 %9134, 1
  %9136 = xor i8 %9135, 1
  store i8 %9136, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9137 = icmp eq i32 %9130, 0
  %9138 = zext i1 %9137 to i8
  store i8 %9138, i8* %15, align 1
  %9139 = lshr i32 %9130, 31
  %9140 = trunc i32 %9139 to i8
  store i8 %9140, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %9141 = trunc i64 %9126 to i32
  br label %routine_sarl__cl___eax.exit

routine_sarl__cl___eax.exit:                      ; preds = %9125, %block_.L_405683
  %9142 = phi i32 [ %9141, %9125 ], [ %9080, %block_.L_405683 ]
  %9143 = add i64 %9107, -2192
  %9144 = add i64 %8904, 99
  store i64 %9144, i64* %3, align 8
  %9145 = inttoptr i64 %9143 to i32*
  store i32 %9142, i32* %9145, align 4
  %.pre401 = load i64, i64* %3, align 8
  br label %block_.L_40571a

block_.L_40571a:                                  ; preds = %routine_sarl__cl___eax.exit, %block_405644
  %9146 = phi i64 [ %.pre401, %routine_sarl__cl___eax.exit ], [ %8897, %block_405644 ]
  %MEMORY.43 = phi %struct.Memory* [ %8903, %routine_sarl__cl___eax.exit ], [ %8889, %block_405644 ]
  %9147 = load i64, i64* %RBP.i, align 8
  %9148 = add i64 %9147, -2192
  %9149 = add i64 %9146, 7
  store i64 %9149, i64* %3, align 8
  %9150 = inttoptr i64 %9148 to i32*
  %9151 = load i32, i32* %9150, align 4
  store i8 0, i8* %12, align 1
  %9152 = and i32 %9151, 255
  %9153 = tail call i32 @llvm.ctpop.i32(i32 %9152)
  %9154 = trunc i32 %9153 to i8
  %9155 = and i8 %9154, 1
  %9156 = xor i8 %9155, 1
  store i8 %9156, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9157 = icmp eq i32 %9151, 0
  %9158 = zext i1 %9157 to i8
  store i8 %9158, i8* %15, align 1
  %9159 = lshr i32 %9151, 31
  %9160 = trunc i32 %9159 to i8
  store i8 %9160, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v491 = select i1 %9157, i64 146, i64 13
  %9161 = add i64 %9146, %.v491
  store i64 %9161, i64* %3, align 8
  br i1 %9157, label %block_.L_4057ac, label %block_405727

block_405727:                                     ; preds = %block_.L_40571a
  %9162 = add i64 %9147, -2176
  store i64 %9162, i64* %RAX.i552, align 8
  %9163 = add i64 %9147, -2208
  %9164 = add i64 %9161, 17
  store i64 %9164, i64* %3, align 8
  %9165 = inttoptr i64 %9163 to i32*
  store i32 15, i32* %9165, align 4
  %9166 = load i64, i64* %RBP.i, align 8
  %9167 = add i64 %9166, -2192
  %9168 = load i64, i64* %3, align 8
  %9169 = add i64 %9168, 6
  store i64 %9169, i64* %3, align 8
  %9170 = inttoptr i64 %9167 to i32*
  %9171 = load i32, i32* %9170, align 4
  %9172 = zext i32 %9171 to i64
  store i64 %9172, i64* %RDI.i4259, align 8
  %9173 = add i64 %9166, -8
  %9174 = add i64 %9168, 10
  store i64 %9174, i64* %3, align 8
  %9175 = inttoptr i64 %9173 to i32*
  %9176 = load i32, i32* %9175, align 4
  %9177 = sext i32 %9176 to i64
  %9178 = shl nsw i64 %9177, 8
  store i64 %9178, i64* %RCX.i4476, align 8
  %9179 = load i64, i64* %RAX.i552, align 8
  %9180 = add i64 %9178, %9179
  store i64 %9180, i64* %RAX.i552, align 8
  %9181 = icmp ult i64 %9180, %9179
  %9182 = icmp ult i64 %9180, %9178
  %9183 = or i1 %9181, %9182
  %9184 = zext i1 %9183 to i8
  store i8 %9184, i8* %12, align 1
  %9185 = trunc i64 %9180 to i32
  %9186 = and i32 %9185, 255
  %9187 = tail call i32 @llvm.ctpop.i32(i32 %9186)
  %9188 = trunc i32 %9187 to i8
  %9189 = and i8 %9188, 1
  %9190 = xor i8 %9189, 1
  store i8 %9190, i8* %13, align 1
  %9191 = xor i64 %9179, %9180
  %9192 = lshr i64 %9191, 4
  %9193 = trunc i64 %9192 to i8
  %9194 = and i8 %9193, 1
  store i8 %9194, i8* %14, align 1
  %9195 = icmp eq i64 %9180, 0
  %9196 = zext i1 %9195 to i8
  store i8 %9196, i8* %15, align 1
  %9197 = lshr i64 %9180, 63
  %9198 = trunc i64 %9197 to i8
  store i8 %9198, i8* %16, align 1
  %9199 = lshr i64 %9179, 63
  %9200 = lshr i64 %9177, 55
  %9201 = and i64 %9200, 1
  %9202 = xor i64 %9197, %9199
  %9203 = xor i64 %9197, %9201
  %9204 = add nuw nsw i64 %9202, %9203
  %9205 = icmp eq i64 %9204, 2
  %9206 = zext i1 %9205 to i8
  store i8 %9206, i8* %17, align 1
  %9207 = add i64 %9166, -16
  %9208 = add i64 %9168, 21
  store i64 %9208, i64* %3, align 8
  %9209 = inttoptr i64 %9207 to i32*
  %9210 = load i32, i32* %9209, align 4
  %9211 = sext i32 %9210 to i64
  %9212 = shl nsw i64 %9211, 6
  store i64 %9212, i64* %RCX.i4476, align 8
  %9213 = add i64 %9212, %9180
  store i64 %9213, i64* %RAX.i552, align 8
  %9214 = icmp ult i64 %9213, %9180
  %9215 = icmp ult i64 %9213, %9212
  %9216 = or i1 %9214, %9215
  %9217 = zext i1 %9216 to i8
  store i8 %9217, i8* %12, align 1
  %9218 = trunc i64 %9213 to i32
  %9219 = and i32 %9218, 255
  %9220 = tail call i32 @llvm.ctpop.i32(i32 %9219)
  %9221 = trunc i32 %9220 to i8
  %9222 = and i8 %9221, 1
  %9223 = xor i8 %9222, 1
  store i8 %9223, i8* %13, align 1
  %9224 = xor i64 %9180, %9213
  %9225 = lshr i64 %9224, 4
  %9226 = trunc i64 %9225 to i8
  %9227 = and i8 %9226, 1
  store i8 %9227, i8* %14, align 1
  %9228 = icmp eq i64 %9213, 0
  %9229 = zext i1 %9228 to i8
  store i8 %9229, i8* %15, align 1
  %9230 = lshr i64 %9213, 63
  %9231 = trunc i64 %9230 to i8
  store i8 %9231, i8* %16, align 1
  %9232 = lshr i64 %9211, 57
  %9233 = and i64 %9232, 1
  %9234 = xor i64 %9230, %9197
  %9235 = xor i64 %9230, %9233
  %9236 = add nuw nsw i64 %9234, %9235
  %9237 = icmp eq i64 %9236, 2
  %9238 = zext i1 %9237 to i8
  store i8 %9238, i8* %17, align 1
  %9239 = load i64, i64* %RBP.i, align 8
  %9240 = add i64 %9239, -12
  %9241 = add i64 %9168, 32
  store i64 %9241, i64* %3, align 8
  %9242 = inttoptr i64 %9240 to i32*
  %9243 = load i32, i32* %9242, align 4
  %9244 = sext i32 %9243 to i64
  %9245 = shl nsw i64 %9244, 4
  store i64 %9245, i64* %RCX.i4476, align 8
  %9246 = add i64 %9245, %9213
  store i64 %9246, i64* %RAX.i552, align 8
  %9247 = icmp ult i64 %9246, %9213
  %9248 = icmp ult i64 %9246, %9245
  %9249 = or i1 %9247, %9248
  %9250 = zext i1 %9249 to i8
  store i8 %9250, i8* %12, align 1
  %9251 = trunc i64 %9246 to i32
  %9252 = and i32 %9251, 255
  %9253 = tail call i32 @llvm.ctpop.i32(i32 %9252)
  %9254 = trunc i32 %9253 to i8
  %9255 = and i8 %9254, 1
  %9256 = xor i8 %9255, 1
  store i8 %9256, i8* %13, align 1
  %9257 = xor i64 %9245, %9213
  %9258 = xor i64 %9257, %9246
  %9259 = lshr i64 %9258, 4
  %9260 = trunc i64 %9259 to i8
  %9261 = and i8 %9260, 1
  store i8 %9261, i8* %14, align 1
  %9262 = icmp eq i64 %9246, 0
  %9263 = zext i1 %9262 to i8
  store i8 %9263, i8* %15, align 1
  %9264 = lshr i64 %9246, 63
  %9265 = trunc i64 %9264 to i8
  store i8 %9265, i8* %16, align 1
  %9266 = lshr i64 %9244, 59
  %9267 = and i64 %9266, 1
  %9268 = xor i64 %9264, %9230
  %9269 = xor i64 %9264, %9267
  %9270 = add nuw nsw i64 %9268, %9269
  %9271 = icmp eq i64 %9270, 2
  %9272 = zext i1 %9271 to i8
  store i8 %9272, i8* %17, align 1
  %9273 = add i64 %9239, -20
  %9274 = add i64 %9168, 43
  store i64 %9274, i64* %3, align 8
  %9275 = inttoptr i64 %9273 to i32*
  %9276 = load i32, i32* %9275, align 4
  %9277 = sext i32 %9276 to i64
  store i64 %9277, i64* %RCX.i4476, align 8
  %9278 = shl nsw i64 %9277, 2
  %9279 = add i64 %9278, %9246
  %9280 = add i64 %9168, 46
  store i64 %9280, i64* %3, align 8
  %9281 = inttoptr i64 %9279 to i32*
  %9282 = load i32, i32* %9281, align 4
  %9283 = zext i32 %9282 to i64
  store i64 %9283, i64* %RSI.i757, align 8
  %9284 = add i64 %9168, 457240
  %9285 = add i64 %9168, 51
  %9286 = load i64, i64* %6, align 8
  %9287 = add i64 %9286, -8
  %9288 = inttoptr i64 %9287 to i64*
  store i64 %9285, i64* %9288, align 8
  store i64 %9287, i64* %6, align 8
  store i64 %9284, i64* %3, align 8
  %call2_405766 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %9284, %struct.Memory* %MEMORY.43)
  %9289 = load i64, i64* %RBP.i, align 8
  %9290 = add i64 %9289, -2248
  %9291 = load i64, i64* %3, align 8
  %9292 = add i64 %9291, 7
  store i64 %9292, i64* %3, align 8
  %9293 = inttoptr i64 %9290 to i64*
  %9294 = load i64, i64* %9293, align 8
  store i64 %9294, i64* %RCX.i4476, align 8
  %9295 = add i64 %9289, -2184
  %9296 = add i64 %9291, 14
  store i64 %9296, i64* %3, align 8
  %9297 = inttoptr i64 %9295 to i32*
  %9298 = load i32, i32* %9297, align 4
  %9299 = sext i32 %9298 to i64
  store i64 %9299, i64* %RDX.i658, align 8
  %9300 = shl nsw i64 %9299, 2
  %9301 = add i64 %9300, %9294
  %9302 = load i32, i32* %EAX.i551, align 4
  %9303 = add i64 %9291, 17
  store i64 %9303, i64* %3, align 8
  %9304 = inttoptr i64 %9301 to i32*
  store i32 %9302, i32* %9304, align 4
  %9305 = load i64, i64* %RBP.i, align 8
  %9306 = add i64 %9305, -2180
  %9307 = load i64, i64* %3, align 8
  %9308 = add i64 %9307, 6
  store i64 %9308, i64* %3, align 8
  %9309 = inttoptr i64 %9306 to i32*
  %9310 = load i32, i32* %9309, align 4
  %9311 = zext i32 %9310 to i64
  store i64 %9311, i64* %RAX.i552, align 8
  %9312 = add i64 %9305, -2256
  %9313 = add i64 %9307, 13
  store i64 %9313, i64* %3, align 8
  %9314 = inttoptr i64 %9312 to i64*
  %9315 = load i64, i64* %9314, align 8
  store i64 %9315, i64* %RCX.i4476, align 8
  %9316 = add i64 %9305, -2184
  %9317 = add i64 %9307, 20
  store i64 %9317, i64* %3, align 8
  %9318 = inttoptr i64 %9316 to i32*
  %9319 = load i32, i32* %9318, align 4
  %9320 = sext i32 %9319 to i64
  store i64 %9320, i64* %RDX.i658, align 8
  %9321 = shl nsw i64 %9320, 2
  %9322 = add i64 %9321, %9315
  %9323 = add i64 %9307, 23
  store i64 %9323, i64* %3, align 8
  %9324 = inttoptr i64 %9322 to i32*
  store i32 %9310, i32* %9324, align 4
  %9325 = load i64, i64* %RBP.i, align 8
  %9326 = add i64 %9325, -2184
  %9327 = load i64, i64* %3, align 8
  %9328 = add i64 %9327, 6
  store i64 %9328, i64* %3, align 8
  %9329 = inttoptr i64 %9326 to i32*
  %9330 = load i32, i32* %9329, align 4
  %9331 = add i32 %9330, 1
  %9332 = zext i32 %9331 to i64
  store i64 %9332, i64* %RAX.i552, align 8
  %9333 = icmp eq i32 %9330, -1
  %9334 = icmp eq i32 %9331, 0
  %9335 = or i1 %9333, %9334
  %9336 = zext i1 %9335 to i8
  store i8 %9336, i8* %12, align 1
  %9337 = and i32 %9331, 255
  %9338 = tail call i32 @llvm.ctpop.i32(i32 %9337)
  %9339 = trunc i32 %9338 to i8
  %9340 = and i8 %9339, 1
  %9341 = xor i8 %9340, 1
  store i8 %9341, i8* %13, align 1
  %9342 = xor i32 %9331, %9330
  %9343 = lshr i32 %9342, 4
  %9344 = trunc i32 %9343 to i8
  %9345 = and i8 %9344, 1
  store i8 %9345, i8* %14, align 1
  %9346 = zext i1 %9334 to i8
  store i8 %9346, i8* %15, align 1
  %9347 = lshr i32 %9331, 31
  %9348 = trunc i32 %9347 to i8
  store i8 %9348, i8* %16, align 1
  %9349 = lshr i32 %9330, 31
  %9350 = xor i32 %9347, %9349
  %9351 = add nuw nsw i32 %9350, %9347
  %9352 = icmp eq i32 %9351, 2
  %9353 = zext i1 %9352 to i8
  store i8 %9353, i8* %17, align 1
  %9354 = add i64 %9327, 15
  store i64 %9354, i64* %3, align 8
  store i32 %9331, i32* %9329, align 4
  %9355 = load i64, i64* %RBP.i, align 8
  %9356 = add i64 %9355, -2180
  %9357 = load i64, i64* %3, align 8
  %9358 = add i64 %9357, 10
  store i64 %9358, i64* %3, align 8
  %9359 = inttoptr i64 %9356 to i32*
  store i32 -1, i32* %9359, align 4
  %.pre402 = load i64, i64* %RBP.i, align 8
  %.pre403 = load i64, i64* %3, align 8
  br label %block_.L_4057ac

block_.L_4057ac:                                  ; preds = %block_405727, %block_.L_40571a
  %9360 = phi i64 [ %9161, %block_.L_40571a ], [ %.pre403, %block_405727 ]
  %9361 = phi i64 [ %9147, %block_.L_40571a ], [ %.pre402, %block_405727 ]
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.43, %block_.L_40571a ], [ %call2_405766, %block_405727 ]
  %9362 = add i64 %9361, -2260
  %9363 = add i64 %9360, 7
  store i64 %9363, i64* %3, align 8
  %9364 = inttoptr i64 %9362 to i32*
  %9365 = load i32, i32* %9364, align 4
  store i8 0, i8* %12, align 1
  %9366 = and i32 %9365, 255
  %9367 = tail call i32 @llvm.ctpop.i32(i32 %9366)
  %9368 = trunc i32 %9367 to i8
  %9369 = and i8 %9368, 1
  %9370 = xor i8 %9369, 1
  store i8 %9370, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9371 = icmp eq i32 %9365, 0
  %9372 = zext i1 %9371 to i8
  store i8 %9372, i8* %15, align 1
  %9373 = lshr i32 %9365, 31
  %9374 = trunc i32 %9373 to i8
  store i8 %9374, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v492 = select i1 %9371, i64 13, i64 359
  %9375 = add i64 %9360, %.v492
  store i64 %9375, i64* %3, align 8
  br i1 %9371, label %block_4057b9, label %block_.L_405913

block_4057b9:                                     ; preds = %block_.L_4057ac
  %9376 = add i64 %9361, -2176
  store i64 %9376, i64* %RAX.i552, align 8
  %9377 = add i64 %9361, -2192
  %9378 = add i64 %9375, 13
  store i64 %9378, i64* %3, align 8
  %9379 = inttoptr i64 %9377 to i32*
  %9380 = load i32, i32* %9379, align 4
  %9381 = zext i32 %9380 to i64
  store i64 %9381, i64* %RDI.i4259, align 8
  %9382 = add i64 %9361, -8
  %9383 = add i64 %9375, 17
  store i64 %9383, i64* %3, align 8
  %9384 = inttoptr i64 %9382 to i32*
  %9385 = load i32, i32* %9384, align 4
  %9386 = sext i32 %9385 to i64
  %9387 = shl nsw i64 %9386, 8
  store i64 %9387, i64* %RCX.i4476, align 8
  %9388 = add i64 %9387, %9376
  store i64 %9388, i64* %RAX.i552, align 8
  %9389 = icmp ult i64 %9388, %9376
  %9390 = icmp ult i64 %9388, %9387
  %9391 = or i1 %9389, %9390
  %9392 = zext i1 %9391 to i8
  store i8 %9392, i8* %12, align 1
  %9393 = trunc i64 %9388 to i32
  %9394 = and i32 %9393, 255
  %9395 = tail call i32 @llvm.ctpop.i32(i32 %9394)
  %9396 = trunc i32 %9395 to i8
  %9397 = and i8 %9396, 1
  %9398 = xor i8 %9397, 1
  store i8 %9398, i8* %13, align 1
  %9399 = xor i64 %9376, %9388
  %9400 = lshr i64 %9399, 4
  %9401 = trunc i64 %9400 to i8
  %9402 = and i8 %9401, 1
  store i8 %9402, i8* %14, align 1
  %9403 = icmp eq i64 %9388, 0
  %9404 = zext i1 %9403 to i8
  store i8 %9404, i8* %15, align 1
  %9405 = lshr i64 %9388, 63
  %9406 = trunc i64 %9405 to i8
  store i8 %9406, i8* %16, align 1
  %9407 = lshr i64 %9376, 63
  %9408 = lshr i64 %9386, 55
  %9409 = and i64 %9408, 1
  %9410 = xor i64 %9405, %9407
  %9411 = xor i64 %9405, %9409
  %9412 = add nuw nsw i64 %9410, %9411
  %9413 = icmp eq i64 %9412, 2
  %9414 = zext i1 %9413 to i8
  store i8 %9414, i8* %17, align 1
  %9415 = add i64 %9361, -16
  %9416 = add i64 %9375, 28
  store i64 %9416, i64* %3, align 8
  %9417 = inttoptr i64 %9415 to i32*
  %9418 = load i32, i32* %9417, align 4
  %9419 = sext i32 %9418 to i64
  %9420 = shl nsw i64 %9419, 6
  store i64 %9420, i64* %RCX.i4476, align 8
  %9421 = add i64 %9420, %9388
  store i64 %9421, i64* %RAX.i552, align 8
  %9422 = icmp ult i64 %9421, %9388
  %9423 = icmp ult i64 %9421, %9420
  %9424 = or i1 %9422, %9423
  %9425 = zext i1 %9424 to i8
  store i8 %9425, i8* %12, align 1
  %9426 = trunc i64 %9421 to i32
  %9427 = and i32 %9426, 255
  %9428 = tail call i32 @llvm.ctpop.i32(i32 %9427)
  %9429 = trunc i32 %9428 to i8
  %9430 = and i8 %9429, 1
  %9431 = xor i8 %9430, 1
  store i8 %9431, i8* %13, align 1
  %9432 = xor i64 %9388, %9421
  %9433 = lshr i64 %9432, 4
  %9434 = trunc i64 %9433 to i8
  %9435 = and i8 %9434, 1
  store i8 %9435, i8* %14, align 1
  %9436 = icmp eq i64 %9421, 0
  %9437 = zext i1 %9436 to i8
  store i8 %9437, i8* %15, align 1
  %9438 = lshr i64 %9421, 63
  %9439 = trunc i64 %9438 to i8
  store i8 %9439, i8* %16, align 1
  %9440 = lshr i64 %9419, 57
  %9441 = and i64 %9440, 1
  %9442 = xor i64 %9438, %9405
  %9443 = xor i64 %9438, %9441
  %9444 = add nuw nsw i64 %9442, %9443
  %9445 = icmp eq i64 %9444, 2
  %9446 = zext i1 %9445 to i8
  store i8 %9446, i8* %17, align 1
  %9447 = load i64, i64* %RBP.i, align 8
  %9448 = add i64 %9447, -12
  %9449 = add i64 %9375, 39
  store i64 %9449, i64* %3, align 8
  %9450 = inttoptr i64 %9448 to i32*
  %9451 = load i32, i32* %9450, align 4
  %9452 = sext i32 %9451 to i64
  %9453 = shl nsw i64 %9452, 4
  store i64 %9453, i64* %RCX.i4476, align 8
  %9454 = add i64 %9453, %9421
  store i64 %9454, i64* %RAX.i552, align 8
  %9455 = icmp ult i64 %9454, %9421
  %9456 = icmp ult i64 %9454, %9453
  %9457 = or i1 %9455, %9456
  %9458 = zext i1 %9457 to i8
  store i8 %9458, i8* %12, align 1
  %9459 = trunc i64 %9454 to i32
  %9460 = and i32 %9459, 255
  %9461 = tail call i32 @llvm.ctpop.i32(i32 %9460)
  %9462 = trunc i32 %9461 to i8
  %9463 = and i8 %9462, 1
  %9464 = xor i8 %9463, 1
  store i8 %9464, i8* %13, align 1
  %9465 = xor i64 %9453, %9421
  %9466 = xor i64 %9465, %9454
  %9467 = lshr i64 %9466, 4
  %9468 = trunc i64 %9467 to i8
  %9469 = and i8 %9468, 1
  store i8 %9469, i8* %14, align 1
  %9470 = icmp eq i64 %9454, 0
  %9471 = zext i1 %9470 to i8
  store i8 %9471, i8* %15, align 1
  %9472 = lshr i64 %9454, 63
  %9473 = trunc i64 %9472 to i8
  store i8 %9473, i8* %16, align 1
  %9474 = lshr i64 %9452, 59
  %9475 = and i64 %9474, 1
  %9476 = xor i64 %9472, %9438
  %9477 = xor i64 %9472, %9475
  %9478 = add nuw nsw i64 %9476, %9477
  %9479 = icmp eq i64 %9478, 2
  %9480 = zext i1 %9479 to i8
  store i8 %9480, i8* %17, align 1
  %9481 = add i64 %9447, -20
  %9482 = add i64 %9375, 50
  store i64 %9482, i64* %3, align 8
  %9483 = inttoptr i64 %9481 to i32*
  %9484 = load i32, i32* %9483, align 4
  %9485 = sext i32 %9484 to i64
  store i64 %9485, i64* %RCX.i4476, align 8
  %9486 = shl nsw i64 %9485, 2
  %9487 = add i64 %9486, %9454
  %9488 = add i64 %9375, 53
  store i64 %9488, i64* %3, align 8
  %9489 = inttoptr i64 %9487 to i32*
  %9490 = load i32, i32* %9489, align 4
  %9491 = zext i32 %9490 to i64
  store i64 %9491, i64* %RSI.i757, align 8
  %9492 = add i64 %9375, 457111
  %9493 = add i64 %9375, 58
  %9494 = load i64, i64* %6, align 8
  %9495 = add i64 %9494, -8
  %9496 = inttoptr i64 %9495 to i64*
  store i64 %9493, i64* %9496, align 8
  store i64 %9495, i64* %6, align 8
  store i64 %9492, i64* %3, align 8
  %call2_4057ee = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %9492, %struct.Memory* %MEMORY.44)
  %9497 = load i64, i64* %RBP.i, align 8
  %9498 = add i64 %9497, -2192
  %9499 = load i32, i32* %EAX.i551, align 4
  %9500 = load i64, i64* %3, align 8
  %9501 = add i64 %9500, 6
  store i64 %9501, i64* %3, align 8
  %9502 = inttoptr i64 %9498 to i32*
  store i32 %9499, i32* %9502, align 4
  %9503 = load i64, i64* %RBP.i, align 8
  %9504 = add i64 %9503, -2196
  %9505 = load i64, i64* %3, align 8
  %9506 = add i64 %9505, 7
  store i64 %9506, i64* %3, align 8
  %9507 = inttoptr i64 %9504 to i32*
  %9508 = load i32, i32* %9507, align 4
  %9509 = add i32 %9508, -4
  %9510 = icmp ult i32 %9508, 4
  %9511 = zext i1 %9510 to i8
  store i8 %9511, i8* %12, align 1
  %9512 = and i32 %9509, 255
  %9513 = tail call i32 @llvm.ctpop.i32(i32 %9512)
  %9514 = trunc i32 %9513 to i8
  %9515 = and i8 %9514, 1
  %9516 = xor i8 %9515, 1
  store i8 %9516, i8* %13, align 1
  %9517 = xor i32 %9509, %9508
  %9518 = lshr i32 %9517, 4
  %9519 = trunc i32 %9518 to i8
  %9520 = and i8 %9519, 1
  store i8 %9520, i8* %14, align 1
  %9521 = icmp eq i32 %9509, 0
  %9522 = zext i1 %9521 to i8
  store i8 %9522, i8* %15, align 1
  %9523 = lshr i32 %9509, 31
  %9524 = trunc i32 %9523 to i8
  store i8 %9524, i8* %16, align 1
  %9525 = lshr i32 %9508, 31
  %9526 = xor i32 %9523, %9525
  %9527 = add nuw nsw i32 %9526, %9525
  %9528 = icmp eq i32 %9527, 2
  %9529 = zext i1 %9528 to i8
  store i8 %9529, i8* %17, align 1
  %9530 = icmp ne i8 %9524, 0
  %9531 = xor i1 %9530, %9528
  %.v462 = select i1 %9531, i64 13, i64 168
  %9532 = add i64 %9505, %.v462
  %9533 = add i64 %9503, -2176
  %9534 = add i64 %9532, 7
  store i64 %9534, i64* %3, align 8
  store i64 %9533, i64* %RAX.i552, align 8
  br i1 %9531, label %block_405806, label %block_.L_4058a1

block_405806:                                     ; preds = %block_4057b9
  store i64 4, i64* %RCX.i4476, align 8
  store i64 1, i64* %RDX.i658, align 8
  store i64 3, i64* %RSI.i757, align 8
  store i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64* %RDI.i4259, align 8
  %9535 = add i64 %9503, -2192
  %9536 = add i64 %9532, 39
  store i64 %9536, i64* %3, align 8
  %9537 = inttoptr i64 %9535 to i32*
  %9538 = load i32, i32* %9537, align 4
  %9539 = zext i32 %9538 to i64
  store i64 %9539, i64* %335, align 8
  %9540 = add i64 %9503, -2200
  %9541 = add i64 %9532, 46
  store i64 %9541, i64* %3, align 8
  %9542 = inttoptr i64 %9540 to i32*
  %9543 = load i32, i32* %9542, align 4
  %9544 = sext i32 %9543 to i64
  %9545 = shl nsw i64 %9544, 6
  store i64 %9545, i64* %R9.i1560, align 8
  %9546 = add i64 %9545, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  store i64 %9546, i64* %RDI.i4259, align 8
  %9547 = icmp ult i64 %9546, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  %9548 = icmp ult i64 %9546, %9545
  %9549 = or i1 %9547, %9548
  %9550 = zext i1 %9549 to i8
  store i8 %9550, i8* %12, align 1
  %9551 = trunc i64 %9546 to i32
  %9552 = and i32 %9551, 248
  %9553 = tail call i32 @llvm.ctpop.i32(i32 %9552)
  %9554 = trunc i32 %9553 to i8
  %9555 = and i8 %9554, 1
  %9556 = xor i8 %9555, 1
  store i8 %9556, i8* %13, align 1
  %9557 = xor i64 %9546, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  %9558 = lshr i64 %9557, 4
  %9559 = trunc i64 %9558 to i8
  %9560 = and i8 %9559, 1
  store i8 %9560, i8* %14, align 1
  %9561 = icmp eq i64 %9546, 0
  %9562 = zext i1 %9561 to i8
  store i8 %9562, i8* %15, align 1
  %9563 = lshr i64 %9546, 63
  %9564 = trunc i64 %9563 to i8
  store i8 %9564, i8* %16, align 1
  %9565 = lshr i64 %9544, 57
  %9566 = and i64 %9565, 1
  %9567 = xor i64 %9563, lshr (i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64 63)
  %9568 = xor i64 %9563, %9566
  %9569 = add nuw nsw i64 %9567, %9568
  %9570 = icmp eq i64 %9569, 2
  %9571 = zext i1 %9570 to i8
  store i8 %9571, i8* %17, align 1
  %9572 = add i64 %9503, -8
  %9573 = add i64 %9532, 57
  store i64 %9573, i64* %3, align 8
  %9574 = inttoptr i64 %9572 to i32*
  %9575 = load i32, i32* %9574, align 4
  %9576 = sext i32 %9575 to i64
  %9577 = shl nsw i64 %9576, 4
  store i64 %9577, i64* %R9.i1560, align 8
  %9578 = add i64 %9577, %9546
  store i64 %9578, i64* %RDI.i4259, align 8
  %9579 = icmp ult i64 %9578, %9546
  %9580 = icmp ult i64 %9578, %9577
  %9581 = or i1 %9579, %9580
  %9582 = zext i1 %9581 to i8
  store i8 %9582, i8* %12, align 1
  %9583 = trunc i64 %9578 to i32
  %9584 = and i32 %9583, 248
  %9585 = tail call i32 @llvm.ctpop.i32(i32 %9584)
  %9586 = trunc i32 %9585 to i8
  %9587 = and i8 %9586, 1
  %9588 = xor i8 %9587, 1
  store i8 %9588, i8* %13, align 1
  %9589 = xor i64 %9577, %9546
  %9590 = xor i64 %9589, %9578
  %9591 = lshr i64 %9590, 4
  %9592 = trunc i64 %9591 to i8
  %9593 = and i8 %9592, 1
  store i8 %9593, i8* %14, align 1
  %9594 = icmp eq i64 %9578, 0
  %9595 = zext i1 %9594 to i8
  store i8 %9595, i8* %15, align 1
  %9596 = lshr i64 %9578, 63
  %9597 = trunc i64 %9596 to i8
  store i8 %9597, i8* %16, align 1
  %9598 = lshr i64 %9576, 59
  %9599 = and i64 %9598, 1
  %9600 = xor i64 %9596, %9563
  %9601 = xor i64 %9596, %9599
  %9602 = add nuw nsw i64 %9600, %9601
  %9603 = icmp eq i64 %9602, 2
  %9604 = zext i1 %9603 to i8
  store i8 %9604, i8* %17, align 1
  %9605 = load i64, i64* %RBP.i, align 8
  %9606 = add i64 %9605, -12
  %9607 = add i64 %9532, 68
  store i64 %9607, i64* %3, align 8
  %9608 = inttoptr i64 %9606 to i32*
  %9609 = load i32, i32* %9608, align 4
  %9610 = sext i32 %9609 to i64
  store i64 %9610, i64* %R9.i1560, align 8
  %9611 = load i32, i32* %R8D.i4254, align 4
  %9612 = shl nsw i64 %9610, 2
  %9613 = add i64 %9578, %9612
  %9614 = add i64 %9532, 73
  store i64 %9614, i64* %3, align 8
  %9615 = inttoptr i64 %9613 to i32*
  %9616 = load i32, i32* %9615, align 4
  %9617 = sext i32 %9611 to i64
  %9618 = sext i32 %9616 to i64
  %9619 = mul nsw i64 %9618, %9617
  %9620 = trunc i64 %9619 to i32
  %9621 = and i64 %9619, 4294967295
  store i64 %9621, i64* %335, align 8
  %9622 = shl i64 %9619, 32
  %9623 = ashr exact i64 %9622, 32
  %9624 = icmp ne i64 %9623, %9619
  %9625 = zext i1 %9624 to i8
  store i8 %9625, i8* %12, align 1
  %9626 = and i32 %9620, 255
  %9627 = tail call i32 @llvm.ctpop.i32(i32 %9626)
  %9628 = trunc i32 %9627 to i8
  %9629 = and i8 %9628, 1
  %9630 = xor i8 %9629, 1
  store i8 %9630, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9631 = lshr i32 %9620, 31
  %9632 = trunc i32 %9631 to i8
  store i8 %9632, i8* %16, align 1
  store i8 %9625, i8* %17, align 1
  %9633 = load i64, i64* %RSI.i757, align 8
  %9634 = add i64 %9605, -2196
  %9635 = add i64 %9532, 79
  store i64 %9635, i64* %3, align 8
  %9636 = trunc i64 %9633 to i32
  %9637 = inttoptr i64 %9634 to i32*
  %9638 = load i32, i32* %9637, align 4
  %9639 = sub i32 %9636, %9638
  %9640 = zext i32 %9639 to i64
  store i64 %9640, i64* %RSI.i757, align 8
  %9641 = icmp ult i32 %9636, %9638
  %9642 = zext i1 %9641 to i8
  store i8 %9642, i8* %12, align 1
  %9643 = and i32 %9639, 255
  %9644 = tail call i32 @llvm.ctpop.i32(i32 %9643)
  %9645 = trunc i32 %9644 to i8
  %9646 = and i8 %9645, 1
  %9647 = xor i8 %9646, 1
  store i8 %9647, i8* %13, align 1
  %9648 = xor i32 %9638, %9636
  %9649 = xor i32 %9648, %9639
  %9650 = lshr i32 %9649, 4
  %9651 = trunc i32 %9650 to i8
  %9652 = and i8 %9651, 1
  store i8 %9652, i8* %14, align 1
  %9653 = icmp eq i32 %9639, 0
  %9654 = zext i1 %9653 to i8
  store i8 %9654, i8* %15, align 1
  %9655 = lshr i32 %9639, 31
  %9656 = trunc i32 %9655 to i8
  store i8 %9656, i8* %16, align 1
  %9657 = lshr i32 %9636, 31
  %9658 = lshr i32 %9638, 31
  %9659 = xor i32 %9658, %9657
  %9660 = xor i32 %9655, %9657
  %9661 = add nuw nsw i32 %9660, %9659
  %9662 = icmp eq i32 %9661, 2
  %9663 = zext i1 %9662 to i8
  store i8 %9663, i8* %17, align 1
  %9664 = add i64 %9605, -2304
  %9665 = load i32, i32* %ECX.i4446, align 4
  %9666 = add i64 %9532, 85
  store i64 %9666, i64* %3, align 8
  %9667 = inttoptr i64 %9664 to i32*
  store i32 %9665, i32* %9667, align 4
  %9668 = load i32, i32* %ESI.i4280, align 4
  %9669 = zext i32 %9668 to i64
  %9670 = load i64, i64* %3, align 8
  store i64 %9669, i64* %RCX.i4476, align 8
  %9671 = load i64, i64* %RDX.i658, align 8
  %9672 = add i64 %9670, 4
  store i64 %9672, i64* %3, align 8
  %9673 = trunc i32 %9668 to i5
  %9674 = trunc i64 %9671 to i32
  switch i5 %9673, label %9680 [
    i5 0, label %routine_shll__cl___edx.exit1529
    i5 1, label %9675
  ]

; <label>:9675:                                   ; preds = %block_405806
  %9676 = shl i32 %9674, 1
  %9677 = icmp slt i32 %9674, 0
  %9678 = icmp slt i32 %9676, 0
  %9679 = xor i1 %9677, %9678
  br label %9690

; <label>:9680:                                   ; preds = %block_405806
  %9681 = and i32 %9668, 31
  %9682 = zext i32 %9681 to i64
  %9683 = add nuw nsw i64 %9682, 4294967295
  %9684 = and i64 %9671, 4294967295
  %9685 = and i64 %9683, 4294967295
  %9686 = shl i64 %9684, %9685
  %9687 = trunc i64 %9686 to i32
  %9688 = icmp slt i32 %9687, 0
  %9689 = shl i32 %9687, 1
  br label %9690

; <label>:9690:                                   ; preds = %9680, %9675
  %9691 = phi i1 [ %9677, %9675 ], [ %9688, %9680 ]
  %9692 = phi i1 [ %9679, %9675 ], [ false, %9680 ]
  %9693 = phi i32 [ %9676, %9675 ], [ %9689, %9680 ]
  %9694 = zext i32 %9693 to i64
  store i64 %9694, i64* %RDX.i658, align 8
  %9695 = zext i1 %9691 to i8
  store i8 %9695, i8* %12, align 1
  %9696 = and i32 %9693, 254
  %9697 = tail call i32 @llvm.ctpop.i32(i32 %9696)
  %9698 = trunc i32 %9697 to i8
  %9699 = and i8 %9698, 1
  %9700 = xor i8 %9699, 1
  store i8 %9700, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9701 = icmp eq i32 %9693, 0
  %9702 = zext i1 %9701 to i8
  store i8 %9702, i8* %15, align 1
  %9703 = lshr i32 %9693, 31
  %9704 = trunc i32 %9703 to i8
  store i8 %9704, i8* %16, align 1
  %9705 = zext i1 %9692 to i8
  store i8 %9705, i8* %17, align 1
  br label %routine_shll__cl___edx.exit1529

routine_shll__cl___edx.exit1529:                  ; preds = %9690, %block_405806
  %9706 = phi i32 [ %9693, %9690 ], [ %9674, %block_405806 ]
  %9707 = load i32, i32* %R8D.i4254, align 4
  %9708 = add i32 %9706, %9707
  %9709 = zext i32 %9708 to i64
  store i64 %9709, i64* %335, align 8
  %9710 = icmp ult i32 %9708, %9707
  %9711 = icmp ult i32 %9708, %9706
  %9712 = or i1 %9710, %9711
  %9713 = zext i1 %9712 to i8
  store i8 %9713, i8* %12, align 1
  %9714 = and i32 %9708, 255
  %9715 = tail call i32 @llvm.ctpop.i32(i32 %9714)
  %9716 = trunc i32 %9715 to i8
  %9717 = and i8 %9716, 1
  %9718 = xor i8 %9717, 1
  store i8 %9718, i8* %13, align 1
  %9719 = xor i32 %9706, %9707
  %9720 = xor i32 %9719, %9708
  %9721 = lshr i32 %9720, 4
  %9722 = trunc i32 %9721 to i8
  %9723 = and i8 %9722, 1
  store i8 %9723, i8* %14, align 1
  %9724 = icmp eq i32 %9708, 0
  %9725 = zext i1 %9724 to i8
  store i8 %9725, i8* %15, align 1
  %9726 = lshr i32 %9708, 31
  %9727 = trunc i32 %9726 to i8
  store i8 %9727, i8* %16, align 1
  %9728 = lshr i32 %9707, 31
  %9729 = lshr i32 %9706, 31
  %9730 = xor i32 %9726, %9728
  %9731 = xor i32 %9726, %9729
  %9732 = add nuw nsw i32 %9730, %9731
  %9733 = icmp eq i32 %9732, 2
  %9734 = zext i1 %9733 to i8
  store i8 %9734, i8* %17, align 1
  %9735 = load i64, i64* %RBP.i, align 8
  %9736 = add i64 %9735, -2304
  %9737 = add i64 %9670, 13
  store i64 %9737, i64* %3, align 8
  %9738 = inttoptr i64 %9736 to i32*
  %9739 = load i32, i32* %9738, align 4
  %9740 = zext i32 %9739 to i64
  store i64 %9740, i64* %RDX.i658, align 8
  %9741 = add i64 %9735, -2196
  %9742 = add i64 %9670, 19
  store i64 %9742, i64* %3, align 8
  %9743 = inttoptr i64 %9741 to i32*
  %9744 = load i32, i32* %9743, align 4
  %9745 = sub i32 %9739, %9744
  %9746 = zext i32 %9745 to i64
  store i64 %9746, i64* %RDX.i658, align 8
  %9747 = icmp ult i32 %9739, %9744
  %9748 = zext i1 %9747 to i8
  store i8 %9748, i8* %12, align 1
  %9749 = and i32 %9745, 255
  %9750 = tail call i32 @llvm.ctpop.i32(i32 %9749)
  %9751 = trunc i32 %9750 to i8
  %9752 = and i8 %9751, 1
  %9753 = xor i8 %9752, 1
  store i8 %9753, i8* %13, align 1
  %9754 = xor i32 %9744, %9739
  %9755 = xor i32 %9754, %9745
  %9756 = lshr i32 %9755, 4
  %9757 = trunc i32 %9756 to i8
  %9758 = and i8 %9757, 1
  store i8 %9758, i8* %14, align 1
  %9759 = icmp eq i32 %9745, 0
  %9760 = zext i1 %9759 to i8
  store i8 %9760, i8* %15, align 1
  %9761 = lshr i32 %9745, 31
  %9762 = trunc i32 %9761 to i8
  store i8 %9762, i8* %16, align 1
  %9763 = lshr i32 %9739, 31
  %9764 = lshr i32 %9744, 31
  %9765 = xor i32 %9764, %9763
  %9766 = xor i32 %9761, %9763
  %9767 = add nuw nsw i32 %9766, %9765
  %9768 = icmp eq i32 %9767, 2
  %9769 = zext i1 %9768 to i8
  store i8 %9769, i8* %17, align 1
  store i64 %9746, i64* %RCX.i4476, align 8
  %9770 = add i64 %9670, 24
  store i64 %9770, i64* %3, align 8
  %9771 = trunc i32 %9745 to i5
  switch i5 %9771, label %9775 [
    i5 0, label %routine_sarl__cl___r8d.exit
    i5 1, label %9772
  ]

; <label>:9772:                                   ; preds = %routine_shll__cl___edx.exit1529
  %9773 = shl nuw i64 %9709, 32
  %9774 = ashr i64 %9773, 33
  br label %9782

; <label>:9775:                                   ; preds = %routine_shll__cl___edx.exit1529
  %9776 = and i32 %9745, 31
  %9777 = zext i32 %9776 to i64
  %9778 = add nsw i64 %9777, -1
  %9779 = sext i32 %9708 to i64
  %9780 = ashr i64 %9779, %9778
  %9781 = lshr i64 %9780, 1
  br label %9782

; <label>:9782:                                   ; preds = %9775, %9772
  %9783 = phi i64 [ %9781, %9775 ], [ %9774, %9772 ]
  %9784 = phi i64 [ %9780, %9775 ], [ %9709, %9772 ]
  %9785 = trunc i64 %9784 to i8
  %9786 = and i8 %9785, 1
  %9787 = trunc i64 %9783 to i32
  %9788 = and i64 %9783, 4294967295
  store i64 %9788, i64* %335, align 8
  store i8 %9786, i8* %12, align 1
  %9789 = and i32 %9787, 255
  %9790 = tail call i32 @llvm.ctpop.i32(i32 %9789)
  %9791 = trunc i32 %9790 to i8
  %9792 = and i8 %9791, 1
  %9793 = xor i8 %9792, 1
  store i8 %9793, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9794 = icmp eq i32 %9787, 0
  %9795 = zext i1 %9794 to i8
  store i8 %9795, i8* %15, align 1
  %9796 = lshr i32 %9787, 31
  %9797 = trunc i32 %9796 to i8
  store i8 %9797, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_sarl__cl___r8d.exit

routine_sarl__cl___r8d.exit:                      ; preds = %9782, %routine_shll__cl___edx.exit1529
  %9798 = add i64 %9735, -8
  %9799 = add i64 %9670, 28
  store i64 %9799, i64* %3, align 8
  %9800 = inttoptr i64 %9798 to i32*
  %9801 = load i32, i32* %9800, align 4
  %9802 = sext i32 %9801 to i64
  %9803 = shl nsw i64 %9802, 8
  store i64 %9803, i64* %RDI.i4259, align 8
  %9804 = load i64, i64* %RAX.i552, align 8
  %9805 = add i64 %9803, %9804
  store i64 %9805, i64* %RAX.i552, align 8
  %9806 = icmp ult i64 %9805, %9804
  %9807 = icmp ult i64 %9805, %9803
  %9808 = or i1 %9806, %9807
  %9809 = zext i1 %9808 to i8
  store i8 %9809, i8* %12, align 1
  %9810 = trunc i64 %9805 to i32
  %9811 = and i32 %9810, 255
  %9812 = tail call i32 @llvm.ctpop.i32(i32 %9811)
  %9813 = trunc i32 %9812 to i8
  %9814 = and i8 %9813, 1
  %9815 = xor i8 %9814, 1
  store i8 %9815, i8* %13, align 1
  %9816 = xor i64 %9804, %9805
  %9817 = lshr i64 %9816, 4
  %9818 = trunc i64 %9817 to i8
  %9819 = and i8 %9818, 1
  store i8 %9819, i8* %14, align 1
  %9820 = icmp eq i64 %9805, 0
  %9821 = zext i1 %9820 to i8
  store i8 %9821, i8* %15, align 1
  %9822 = lshr i64 %9805, 63
  %9823 = trunc i64 %9822 to i8
  store i8 %9823, i8* %16, align 1
  %9824 = lshr i64 %9804, 63
  %9825 = lshr i64 %9802, 55
  %9826 = and i64 %9825, 1
  %9827 = xor i64 %9822, %9824
  %9828 = xor i64 %9822, %9826
  %9829 = add nuw nsw i64 %9827, %9828
  %9830 = icmp eq i64 %9829, 2
  %9831 = zext i1 %9830 to i8
  store i8 %9831, i8* %17, align 1
  %9832 = add i64 %9735, -16
  %9833 = add i64 %9670, 39
  store i64 %9833, i64* %3, align 8
  %9834 = inttoptr i64 %9832 to i32*
  %9835 = load i32, i32* %9834, align 4
  %9836 = sext i32 %9835 to i64
  %9837 = shl nsw i64 %9836, 6
  store i64 %9837, i64* %RDI.i4259, align 8
  %9838 = add i64 %9837, %9805
  store i64 %9838, i64* %RAX.i552, align 8
  %9839 = icmp ult i64 %9838, %9805
  %9840 = icmp ult i64 %9838, %9837
  %9841 = or i1 %9839, %9840
  %9842 = zext i1 %9841 to i8
  store i8 %9842, i8* %12, align 1
  %9843 = trunc i64 %9838 to i32
  %9844 = and i32 %9843, 255
  %9845 = tail call i32 @llvm.ctpop.i32(i32 %9844)
  %9846 = trunc i32 %9845 to i8
  %9847 = and i8 %9846, 1
  %9848 = xor i8 %9847, 1
  store i8 %9848, i8* %13, align 1
  %9849 = xor i64 %9805, %9838
  %9850 = lshr i64 %9849, 4
  %9851 = trunc i64 %9850 to i8
  %9852 = and i8 %9851, 1
  store i8 %9852, i8* %14, align 1
  %9853 = icmp eq i64 %9838, 0
  %9854 = zext i1 %9853 to i8
  store i8 %9854, i8* %15, align 1
  %9855 = lshr i64 %9838, 63
  %9856 = trunc i64 %9855 to i8
  store i8 %9856, i8* %16, align 1
  %9857 = lshr i64 %9836, 57
  %9858 = and i64 %9857, 1
  %9859 = xor i64 %9855, %9822
  %9860 = xor i64 %9855, %9858
  %9861 = add nuw nsw i64 %9859, %9860
  %9862 = icmp eq i64 %9861, 2
  %9863 = zext i1 %9862 to i8
  store i8 %9863, i8* %17, align 1
  %9864 = load i64, i64* %RBP.i, align 8
  %9865 = add i64 %9864, -12
  %9866 = add i64 %9670, 50
  store i64 %9866, i64* %3, align 8
  %9867 = inttoptr i64 %9865 to i32*
  %9868 = load i32, i32* %9867, align 4
  %9869 = sext i32 %9868 to i64
  %9870 = shl nsw i64 %9869, 4
  store i64 %9870, i64* %RDI.i4259, align 8
  %9871 = add i64 %9870, %9838
  store i64 %9871, i64* %RAX.i552, align 8
  %9872 = icmp ult i64 %9871, %9838
  %9873 = icmp ult i64 %9871, %9870
  %9874 = or i1 %9872, %9873
  %9875 = zext i1 %9874 to i8
  store i8 %9875, i8* %12, align 1
  %9876 = trunc i64 %9871 to i32
  %9877 = and i32 %9876, 255
  %9878 = tail call i32 @llvm.ctpop.i32(i32 %9877)
  %9879 = trunc i32 %9878 to i8
  %9880 = and i8 %9879, 1
  %9881 = xor i8 %9880, 1
  store i8 %9881, i8* %13, align 1
  %9882 = xor i64 %9870, %9838
  %9883 = xor i64 %9882, %9871
  %9884 = lshr i64 %9883, 4
  %9885 = trunc i64 %9884 to i8
  %9886 = and i8 %9885, 1
  store i8 %9886, i8* %14, align 1
  %9887 = icmp eq i64 %9871, 0
  %9888 = zext i1 %9887 to i8
  store i8 %9888, i8* %15, align 1
  %9889 = lshr i64 %9871, 63
  %9890 = trunc i64 %9889 to i8
  store i8 %9890, i8* %16, align 1
  %9891 = lshr i64 %9869, 59
  %9892 = and i64 %9891, 1
  %9893 = xor i64 %9889, %9855
  %9894 = xor i64 %9889, %9892
  %9895 = add nuw nsw i64 %9893, %9894
  %9896 = icmp eq i64 %9895, 2
  %9897 = zext i1 %9896 to i8
  store i8 %9897, i8* %17, align 1
  %9898 = add i64 %9864, -20
  %9899 = add i64 %9670, 61
  store i64 %9899, i64* %3, align 8
  %9900 = inttoptr i64 %9898 to i32*
  %9901 = load i32, i32* %9900, align 4
  %9902 = sext i32 %9901 to i64
  store i64 %9902, i64* %RDI.i4259, align 8
  %9903 = shl nsw i64 %9902, 2
  %9904 = add i64 %9903, %9871
  %9905 = load i32, i32* %R8D.i4254, align 4
  %9906 = add i64 %9670, 65
  store i64 %9906, i64* %3, align 8
  %9907 = inttoptr i64 %9904 to i32*
  store i32 %9905, i32* %9907, align 4
  %9908 = load i64, i64* %3, align 8
  %9909 = add i64 %9908, 114
  store i64 %9909, i64* %3, align 8
  br label %block_.L_40590e

block_.L_4058a1:                                  ; preds = %block_4057b9
  store i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64* %RCX.i4476, align 8
  %9910 = add i64 %9503, -2192
  %9911 = add i64 %9532, 23
  store i64 %9911, i64* %3, align 8
  %9912 = inttoptr i64 %9910 to i32*
  %9913 = load i32, i32* %9912, align 4
  %9914 = zext i32 %9913 to i64
  store i64 %9914, i64* %RDX.i658, align 8
  %9915 = add i64 %9503, -2200
  %9916 = add i64 %9532, 30
  store i64 %9916, i64* %3, align 8
  %9917 = inttoptr i64 %9915 to i32*
  %9918 = load i32, i32* %9917, align 4
  %9919 = sext i32 %9918 to i64
  %9920 = shl nsw i64 %9919, 6
  store i64 %9920, i64* %RSI.i757, align 8
  %9921 = add i64 %9920, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  store i64 %9921, i64* %RCX.i4476, align 8
  %9922 = icmp ult i64 %9921, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  %9923 = icmp ult i64 %9921, %9920
  %9924 = or i1 %9922, %9923
  %9925 = zext i1 %9924 to i8
  store i8 %9925, i8* %12, align 1
  %9926 = trunc i64 %9921 to i32
  %9927 = and i32 %9926, 248
  %9928 = tail call i32 @llvm.ctpop.i32(i32 %9927)
  %9929 = trunc i32 %9928 to i8
  %9930 = and i8 %9929, 1
  %9931 = xor i8 %9930, 1
  store i8 %9931, i8* %13, align 1
  %9932 = xor i64 %9921, ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64)
  %9933 = lshr i64 %9932, 4
  %9934 = trunc i64 %9933 to i8
  %9935 = and i8 %9934, 1
  store i8 %9935, i8* %14, align 1
  %9936 = icmp eq i64 %9921, 0
  %9937 = zext i1 %9936 to i8
  store i8 %9937, i8* %15, align 1
  %9938 = lshr i64 %9921, 63
  %9939 = trunc i64 %9938 to i8
  store i8 %9939, i8* %16, align 1
  %9940 = lshr i64 %9919, 57
  %9941 = and i64 %9940, 1
  %9942 = xor i64 %9938, lshr (i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64 63)
  %9943 = xor i64 %9938, %9941
  %9944 = add nuw nsw i64 %9942, %9943
  %9945 = icmp eq i64 %9944, 2
  %9946 = zext i1 %9945 to i8
  store i8 %9946, i8* %17, align 1
  %9947 = add i64 %9503, -8
  %9948 = add i64 %9532, 41
  store i64 %9948, i64* %3, align 8
  %9949 = inttoptr i64 %9947 to i32*
  %9950 = load i32, i32* %9949, align 4
  %9951 = sext i32 %9950 to i64
  %9952 = shl nsw i64 %9951, 4
  store i64 %9952, i64* %RSI.i757, align 8
  %9953 = add i64 %9952, %9921
  store i64 %9953, i64* %RCX.i4476, align 8
  %9954 = icmp ult i64 %9953, %9921
  %9955 = icmp ult i64 %9953, %9952
  %9956 = or i1 %9954, %9955
  %9957 = zext i1 %9956 to i8
  store i8 %9957, i8* %12, align 1
  %9958 = trunc i64 %9953 to i32
  %9959 = and i32 %9958, 248
  %9960 = tail call i32 @llvm.ctpop.i32(i32 %9959)
  %9961 = trunc i32 %9960 to i8
  %9962 = and i8 %9961, 1
  %9963 = xor i8 %9962, 1
  store i8 %9963, i8* %13, align 1
  %9964 = xor i64 %9952, %9921
  %9965 = xor i64 %9964, %9953
  %9966 = lshr i64 %9965, 4
  %9967 = trunc i64 %9966 to i8
  %9968 = and i8 %9967, 1
  store i8 %9968, i8* %14, align 1
  %9969 = icmp eq i64 %9953, 0
  %9970 = zext i1 %9969 to i8
  store i8 %9970, i8* %15, align 1
  %9971 = lshr i64 %9953, 63
  %9972 = trunc i64 %9971 to i8
  store i8 %9972, i8* %16, align 1
  %9973 = lshr i64 %9951, 59
  %9974 = and i64 %9973, 1
  %9975 = xor i64 %9971, %9938
  %9976 = xor i64 %9971, %9974
  %9977 = add nuw nsw i64 %9975, %9976
  %9978 = icmp eq i64 %9977, 2
  %9979 = zext i1 %9978 to i8
  store i8 %9979, i8* %17, align 1
  %9980 = load i64, i64* %RBP.i, align 8
  %9981 = add i64 %9980, -12
  %9982 = add i64 %9532, 52
  store i64 %9982, i64* %3, align 8
  %9983 = inttoptr i64 %9981 to i32*
  %9984 = load i32, i32* %9983, align 4
  %9985 = sext i32 %9984 to i64
  store i64 %9985, i64* %RSI.i757, align 8
  %9986 = load i64, i64* %RDX.i658, align 8
  %9987 = shl nsw i64 %9985, 2
  %9988 = add i64 %9953, %9987
  %9989 = add i64 %9532, 56
  store i64 %9989, i64* %3, align 8
  %9990 = inttoptr i64 %9988 to i32*
  %9991 = load i32, i32* %9990, align 4
  %9992 = shl i64 %9986, 32
  %9993 = ashr exact i64 %9992, 32
  %9994 = sext i32 %9991 to i64
  %9995 = mul nsw i64 %9994, %9993
  %9996 = trunc i64 %9995 to i32
  %9997 = and i64 %9995, 4294967295
  store i64 %9997, i64* %RDX.i658, align 8
  %9998 = shl i64 %9995, 32
  %9999 = ashr exact i64 %9998, 32
  %10000 = icmp ne i64 %9999, %9995
  %10001 = zext i1 %10000 to i8
  store i8 %10001, i8* %12, align 1
  %10002 = and i32 %9996, 255
  %10003 = tail call i32 @llvm.ctpop.i32(i32 %10002)
  %10004 = trunc i32 %10003 to i8
  %10005 = and i8 %10004, 1
  %10006 = xor i8 %10005, 1
  store i8 %10006, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %10007 = lshr i32 %9996, 31
  %10008 = trunc i32 %10007 to i8
  store i8 %10008, i8* %16, align 1
  store i8 %10001, i8* %17, align 1
  %10009 = add i64 %9980, -2196
  %10010 = add i64 %9532, 62
  store i64 %10010, i64* %3, align 8
  %10011 = inttoptr i64 %10009 to i32*
  %10012 = load i32, i32* %10011, align 4
  %10013 = add i32 %10012, -4
  %10014 = zext i32 %10013 to i64
  store i64 %10014, i64* %RDI.i4259, align 8
  %10015 = icmp ult i32 %10012, 4
  %10016 = zext i1 %10015 to i8
  store i8 %10016, i8* %12, align 1
  %10017 = and i32 %10013, 255
  %10018 = tail call i32 @llvm.ctpop.i32(i32 %10017)
  %10019 = trunc i32 %10018 to i8
  %10020 = and i8 %10019, 1
  %10021 = xor i8 %10020, 1
  store i8 %10021, i8* %13, align 1
  %10022 = xor i32 %10013, %10012
  %10023 = lshr i32 %10022, 4
  %10024 = trunc i32 %10023 to i8
  %10025 = and i8 %10024, 1
  store i8 %10025, i8* %14, align 1
  %10026 = icmp eq i32 %10013, 0
  %10027 = zext i1 %10026 to i8
  store i8 %10027, i8* %15, align 1
  %10028 = lshr i32 %10013, 31
  %10029 = trunc i32 %10028 to i8
  store i8 %10029, i8* %16, align 1
  %10030 = lshr i32 %10012, 31
  %10031 = xor i32 %10028, %10030
  %10032 = add nuw nsw i32 %10031, %10030
  %10033 = icmp eq i32 %10032, 2
  %10034 = zext i1 %10033 to i8
  store i8 %10034, i8* %17, align 1
  store i64 %10014, i64* %RCX.i4476, align 8
  %10035 = add i64 %9532, 69
  store i64 %10035, i64* %3, align 8
  %10036 = trunc i32 %10013 to i5
  switch i5 %10036, label %10043 [
    i5 0, label %routine_shll__cl___edx.exit
    i5 1, label %10037
  ]

; <label>:10037:                                  ; preds = %block_.L_4058a1
  %10038 = trunc i64 %9995 to i32
  %10039 = shl i32 %10038, 1
  %10040 = icmp slt i32 %10038, 0
  %10041 = icmp slt i32 %10039, 0
  %10042 = xor i1 %10040, %10041
  br label %10052

; <label>:10043:                                  ; preds = %block_.L_4058a1
  %10044 = and i32 %10013, 31
  %10045 = zext i32 %10044 to i64
  %10046 = add nuw nsw i64 %10045, 4294967295
  %10047 = and i64 %10046, 4294967295
  %10048 = shl i64 %9997, %10047
  %10049 = trunc i64 %10048 to i32
  %10050 = icmp slt i32 %10049, 0
  %10051 = shl i32 %10049, 1
  br label %10052

; <label>:10052:                                  ; preds = %10043, %10037
  %10053 = phi i1 [ %10040, %10037 ], [ %10050, %10043 ]
  %10054 = phi i1 [ %10042, %10037 ], [ false, %10043 ]
  %10055 = phi i32 [ %10039, %10037 ], [ %10051, %10043 ]
  %10056 = zext i32 %10055 to i64
  store i64 %10056, i64* %RDX.i658, align 8
  %10057 = zext i1 %10053 to i8
  store i8 %10057, i8* %12, align 1
  %10058 = and i32 %10055, 254
  %10059 = tail call i32 @llvm.ctpop.i32(i32 %10058)
  %10060 = trunc i32 %10059 to i8
  %10061 = and i8 %10060, 1
  %10062 = xor i8 %10061, 1
  store i8 %10062, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %10063 = icmp eq i32 %10055, 0
  %10064 = zext i1 %10063 to i8
  store i8 %10064, i8* %15, align 1
  %10065 = lshr i32 %10055, 31
  %10066 = trunc i32 %10065 to i8
  store i8 %10066, i8* %16, align 1
  %10067 = zext i1 %10054 to i8
  store i8 %10067, i8* %17, align 1
  br label %routine_shll__cl___edx.exit

routine_shll__cl___edx.exit:                      ; preds = %10052, %block_.L_4058a1
  %10068 = add i64 %9980, -8
  %10069 = add i64 %9532, 73
  store i64 %10069, i64* %3, align 8
  %10070 = inttoptr i64 %10068 to i32*
  %10071 = load i32, i32* %10070, align 4
  %10072 = sext i32 %10071 to i64
  %10073 = shl nsw i64 %10072, 8
  store i64 %10073, i64* %RSI.i757, align 8
  %10074 = load i64, i64* %RAX.i552, align 8
  %10075 = add i64 %10073, %10074
  store i64 %10075, i64* %RAX.i552, align 8
  %10076 = icmp ult i64 %10075, %10074
  %10077 = icmp ult i64 %10075, %10073
  %10078 = or i1 %10076, %10077
  %10079 = zext i1 %10078 to i8
  store i8 %10079, i8* %12, align 1
  %10080 = trunc i64 %10075 to i32
  %10081 = and i32 %10080, 255
  %10082 = tail call i32 @llvm.ctpop.i32(i32 %10081)
  %10083 = trunc i32 %10082 to i8
  %10084 = and i8 %10083, 1
  %10085 = xor i8 %10084, 1
  store i8 %10085, i8* %13, align 1
  %10086 = xor i64 %10074, %10075
  %10087 = lshr i64 %10086, 4
  %10088 = trunc i64 %10087 to i8
  %10089 = and i8 %10088, 1
  store i8 %10089, i8* %14, align 1
  %10090 = icmp eq i64 %10075, 0
  %10091 = zext i1 %10090 to i8
  store i8 %10091, i8* %15, align 1
  %10092 = lshr i64 %10075, 63
  %10093 = trunc i64 %10092 to i8
  store i8 %10093, i8* %16, align 1
  %10094 = lshr i64 %10074, 63
  %10095 = lshr i64 %10072, 55
  %10096 = and i64 %10095, 1
  %10097 = xor i64 %10092, %10094
  %10098 = xor i64 %10092, %10096
  %10099 = add nuw nsw i64 %10097, %10098
  %10100 = icmp eq i64 %10099, 2
  %10101 = zext i1 %10100 to i8
  store i8 %10101, i8* %17, align 1
  %10102 = add i64 %9980, -16
  %10103 = add i64 %9532, 84
  store i64 %10103, i64* %3, align 8
  %10104 = inttoptr i64 %10102 to i32*
  %10105 = load i32, i32* %10104, align 4
  %10106 = sext i32 %10105 to i64
  %10107 = shl nsw i64 %10106, 6
  store i64 %10107, i64* %RSI.i757, align 8
  %10108 = add i64 %10107, %10075
  store i64 %10108, i64* %RAX.i552, align 8
  %10109 = icmp ult i64 %10108, %10075
  %10110 = icmp ult i64 %10108, %10107
  %10111 = or i1 %10109, %10110
  %10112 = zext i1 %10111 to i8
  store i8 %10112, i8* %12, align 1
  %10113 = trunc i64 %10108 to i32
  %10114 = and i32 %10113, 255
  %10115 = tail call i32 @llvm.ctpop.i32(i32 %10114)
  %10116 = trunc i32 %10115 to i8
  %10117 = and i8 %10116, 1
  %10118 = xor i8 %10117, 1
  store i8 %10118, i8* %13, align 1
  %10119 = xor i64 %10075, %10108
  %10120 = lshr i64 %10119, 4
  %10121 = trunc i64 %10120 to i8
  %10122 = and i8 %10121, 1
  store i8 %10122, i8* %14, align 1
  %10123 = icmp eq i64 %10108, 0
  %10124 = zext i1 %10123 to i8
  store i8 %10124, i8* %15, align 1
  %10125 = lshr i64 %10108, 63
  %10126 = trunc i64 %10125 to i8
  store i8 %10126, i8* %16, align 1
  %10127 = lshr i64 %10106, 57
  %10128 = and i64 %10127, 1
  %10129 = xor i64 %10125, %10092
  %10130 = xor i64 %10125, %10128
  %10131 = add nuw nsw i64 %10129, %10130
  %10132 = icmp eq i64 %10131, 2
  %10133 = zext i1 %10132 to i8
  store i8 %10133, i8* %17, align 1
  %10134 = load i64, i64* %RBP.i, align 8
  %10135 = add i64 %10134, -12
  %10136 = add i64 %9532, 95
  store i64 %10136, i64* %3, align 8
  %10137 = inttoptr i64 %10135 to i32*
  %10138 = load i32, i32* %10137, align 4
  %10139 = sext i32 %10138 to i64
  %10140 = shl nsw i64 %10139, 4
  store i64 %10140, i64* %RSI.i757, align 8
  %10141 = add i64 %10140, %10108
  store i64 %10141, i64* %RAX.i552, align 8
  %10142 = icmp ult i64 %10141, %10108
  %10143 = icmp ult i64 %10141, %10140
  %10144 = or i1 %10142, %10143
  %10145 = zext i1 %10144 to i8
  store i8 %10145, i8* %12, align 1
  %10146 = trunc i64 %10141 to i32
  %10147 = and i32 %10146, 255
  %10148 = tail call i32 @llvm.ctpop.i32(i32 %10147)
  %10149 = trunc i32 %10148 to i8
  %10150 = and i8 %10149, 1
  %10151 = xor i8 %10150, 1
  store i8 %10151, i8* %13, align 1
  %10152 = xor i64 %10140, %10108
  %10153 = xor i64 %10152, %10141
  %10154 = lshr i64 %10153, 4
  %10155 = trunc i64 %10154 to i8
  %10156 = and i8 %10155, 1
  store i8 %10156, i8* %14, align 1
  %10157 = icmp eq i64 %10141, 0
  %10158 = zext i1 %10157 to i8
  store i8 %10158, i8* %15, align 1
  %10159 = lshr i64 %10141, 63
  %10160 = trunc i64 %10159 to i8
  store i8 %10160, i8* %16, align 1
  %10161 = lshr i64 %10139, 59
  %10162 = and i64 %10161, 1
  %10163 = xor i64 %10159, %10125
  %10164 = xor i64 %10159, %10162
  %10165 = add nuw nsw i64 %10163, %10164
  %10166 = icmp eq i64 %10165, 2
  %10167 = zext i1 %10166 to i8
  store i8 %10167, i8* %17, align 1
  %10168 = add i64 %10134, -20
  %10169 = add i64 %9532, 106
  store i64 %10169, i64* %3, align 8
  %10170 = inttoptr i64 %10168 to i32*
  %10171 = load i32, i32* %10170, align 4
  %10172 = sext i32 %10171 to i64
  store i64 %10172, i64* %RSI.i757, align 8
  %10173 = shl nsw i64 %10172, 2
  %10174 = add i64 %10173, %10141
  %10175 = load i32, i32* %EDX.i4468, align 4
  %10176 = add i64 %9532, 109
  store i64 %10176, i64* %3, align 8
  %10177 = inttoptr i64 %10174 to i32*
  store i32 %10175, i32* %10177, align 4
  %.pre404 = load i64, i64* %3, align 8
  br label %block_.L_40590e

block_.L_40590e:                                  ; preds = %routine_shll__cl___edx.exit, %routine_sarl__cl___r8d.exit
  %10178 = phi i64 [ %.pre404, %routine_shll__cl___edx.exit ], [ %9909, %routine_sarl__cl___r8d.exit ]
  %10179 = add i64 %10178, 5
  store i64 %10179, i64* %3, align 8
  %.pre405 = load i64, i64* %RBP.i, align 8
  br label %block_.L_405913

block_.L_405913:                                  ; preds = %block_.L_4057ac, %block_.L_40590e
  %10180 = phi i64 [ %9361, %block_.L_4057ac ], [ %.pre405, %block_.L_40590e ]
  %10181 = phi i64 [ %9375, %block_.L_4057ac ], [ %10179, %block_.L_40590e ]
  %MEMORY.46 = phi %struct.Memory* [ %MEMORY.44, %block_.L_4057ac ], [ %call2_4057ee, %block_.L_40590e ]
  %10182 = add i64 %10180, -2188
  %10183 = add i64 %10181, 11
  store i64 %10183, i64* %3, align 8
  %10184 = inttoptr i64 %10182 to i32*
  %10185 = load i32, i32* %10184, align 4
  %10186 = add i32 %10185, 1
  %10187 = zext i32 %10186 to i64
  store i64 %10187, i64* %RAX.i552, align 8
  %10188 = icmp eq i32 %10185, -1
  %10189 = icmp eq i32 %10186, 0
  %10190 = or i1 %10188, %10189
  %10191 = zext i1 %10190 to i8
  store i8 %10191, i8* %12, align 1
  %10192 = and i32 %10186, 255
  %10193 = tail call i32 @llvm.ctpop.i32(i32 %10192)
  %10194 = trunc i32 %10193 to i8
  %10195 = and i8 %10194, 1
  %10196 = xor i8 %10195, 1
  store i8 %10196, i8* %13, align 1
  %10197 = xor i32 %10186, %10185
  %10198 = lshr i32 %10197, 4
  %10199 = trunc i32 %10198 to i8
  %10200 = and i8 %10199, 1
  store i8 %10200, i8* %14, align 1
  %10201 = zext i1 %10189 to i8
  store i8 %10201, i8* %15, align 1
  %10202 = lshr i32 %10186, 31
  %10203 = trunc i32 %10202 to i8
  store i8 %10203, i8* %16, align 1
  %10204 = lshr i32 %10185, 31
  %10205 = xor i32 %10202, %10204
  %10206 = add nuw nsw i32 %10205, %10202
  %10207 = icmp eq i32 %10206, 2
  %10208 = zext i1 %10207 to i8
  store i8 %10208, i8* %17, align 1
  %10209 = add i64 %10181, 20
  store i64 %10209, i64* %3, align 8
  store i32 %10186, i32* %10184, align 4
  %10210 = load i64, i64* %3, align 8
  %10211 = add i64 %10210, -913
  store i64 %10211, i64* %3, align 8
  br label %block_.L_405596

block_.L_40592c:                                  ; preds = %block_.L_405596
  %10212 = add i64 %8593, -2248
  %10213 = add i64 %8622, 7
  store i64 %10213, i64* %3, align 8
  %10214 = inttoptr i64 %10212 to i64*
  %10215 = load i64, i64* %10214, align 8
  store i64 %10215, i64* %RAX.i552, align 8
  %10216 = add i64 %8593, -2184
  %10217 = add i64 %8622, 14
  store i64 %10217, i64* %3, align 8
  %10218 = inttoptr i64 %10216 to i32*
  %10219 = load i32, i32* %10218, align 4
  %10220 = sext i32 %10219 to i64
  store i64 %10220, i64* %RCX.i4476, align 8
  %10221 = shl nsw i64 %10220, 2
  %10222 = add i64 %10221, %10215
  %10223 = add i64 %8622, 21
  store i64 %10223, i64* %3, align 8
  %10224 = inttoptr i64 %10222 to i32*
  store i32 0, i32* %10224, align 4
  %10225 = load i64, i64* %RBP.i, align 8
  %10226 = add i64 %10225, -12
  %10227 = load i64, i64* %3, align 8
  %10228 = add i64 %10227, 7
  store i64 %10228, i64* %3, align 8
  %10229 = inttoptr i64 %10226 to i32*
  store i32 0, i32* %10229, align 4
  %.pre392 = load i64, i64* %3, align 8
  br label %block_.L_405948

block_.L_405948:                                  ; preds = %block_.L_405ada, %block_.L_40592c
  %10230 = phi i64 [ %11114, %block_.L_405ada ], [ %.pre392, %block_.L_40592c ]
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %CL.i, align 1
  %10231 = load i64, i64* %RBP.i, align 8
  %10232 = add i64 %10231, -12
  %10233 = add i64 %10230, 8
  store i64 %10233, i64* %3, align 8
  %10234 = inttoptr i64 %10232 to i32*
  %10235 = load i32, i32* %10234, align 4
  %10236 = add i32 %10235, -4
  %10237 = icmp ult i32 %10235, 4
  %10238 = zext i1 %10237 to i8
  store i8 %10238, i8* %12, align 1
  %10239 = and i32 %10236, 255
  %10240 = tail call i32 @llvm.ctpop.i32(i32 %10239)
  %10241 = trunc i32 %10240 to i8
  %10242 = and i8 %10241, 1
  %10243 = xor i8 %10242, 1
  store i8 %10243, i8* %13, align 1
  %10244 = xor i32 %10236, %10235
  %10245 = lshr i32 %10244, 4
  %10246 = trunc i32 %10245 to i8
  %10247 = and i8 %10246, 1
  store i8 %10247, i8* %14, align 1
  %10248 = icmp eq i32 %10236, 0
  %10249 = zext i1 %10248 to i8
  store i8 %10249, i8* %15, align 1
  %10250 = lshr i32 %10236, 31
  %10251 = trunc i32 %10250 to i8
  store i8 %10251, i8* %16, align 1
  %10252 = lshr i32 %10235, 31
  %10253 = xor i32 %10250, %10252
  %10254 = add nuw nsw i32 %10253, %10252
  %10255 = icmp eq i32 %10254, 2
  %10256 = zext i1 %10255 to i8
  store i8 %10256, i8* %17, align 1
  %10257 = add i64 %10231, -2305
  %10258 = add i64 %10230, 14
  store i64 %10258, i64* %3, align 8
  %10259 = inttoptr i64 %10257 to i8*
  store i8 0, i8* %10259, align 1
  %10260 = load i64, i64* %3, align 8
  %10261 = add i64 %10260, 24
  %10262 = add i64 %10260, 6
  %10263 = load i8, i8* %16, align 1
  %10264 = icmp ne i8 %10263, 0
  %10265 = load i8, i8* %17, align 1
  %10266 = icmp ne i8 %10265, 0
  %10267 = xor i1 %10264, %10266
  %10268 = select i1 %10267, i64 %10262, i64 %10261
  store i64 %10268, i64* %3, align 8
  br i1 %10267, label %block_40595c, label %block_.L_40596e

block_40595c:                                     ; preds = %block_.L_405948
  %10269 = load i64, i64* %RBP.i, align 8
  %10270 = add i64 %10269, -2260
  %10271 = add i64 %10268, 7
  store i64 %10271, i64* %3, align 8
  %10272 = inttoptr i64 %10270 to i32*
  %10273 = load i32, i32* %10272, align 4
  %10274 = icmp ne i32 %10273, 0
  %10275 = zext i1 %10274 to i64
  %10276 = xor i64 %10275, 255
  %10277 = trunc i64 %10276 to i8
  store i8 %10277, i8* %AL.i, align 1
  store i8 0, i8* %12, align 1
  %10278 = trunc i64 %10276 to i32
  %10279 = tail call i32 @llvm.ctpop.i32(i32 %10278)
  %10280 = trunc i32 %10279 to i8
  %10281 = and i8 %10280, 1
  %10282 = xor i8 %10281, 1
  store i8 %10282, i8* %13, align 1
  store i8 0, i8* %15, align 1
  store i8 1, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %10283 = add i64 %10269, -2305
  %10284 = add i64 %10268, 18
  store i64 %10284, i64* %3, align 8
  %10285 = inttoptr i64 %10283 to i8*
  store i8 %10277, i8* %10285, align 1
  %.pre393 = load i64, i64* %3, align 8
  br label %block_.L_40596e

block_.L_40596e:                                  ; preds = %block_.L_405948, %block_40595c
  %10286 = phi i64 [ %10261, %block_.L_405948 ], [ %.pre393, %block_40595c ]
  %10287 = load i64, i64* %RBP.i, align 8
  %10288 = add i64 %10287, -2305
  %10289 = add i64 %10286, 6
  store i64 %10289, i64* %3, align 8
  %10290 = inttoptr i64 %10288 to i8*
  %10291 = load i8, i8* %10290, align 1
  store i8 %10291, i8* %AL.i, align 1
  %10292 = and i8 %10291, 1
  store i8 0, i8* %12, align 1
  %10293 = zext i8 %10292 to i32
  %10294 = tail call i32 @llvm.ctpop.i32(i32 %10293)
  %10295 = trunc i32 %10294 to i8
  %10296 = xor i8 %10295, 1
  store i8 %10296, i8* %13, align 1
  %10297 = xor i8 %10292, 1
  store i8 %10297, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %10298 = icmp eq i8 %10297, 0
  %.v457 = select i1 %10298, i64 19, i64 14
  %10299 = add i64 %10286, %.v457
  store i64 %10299, i64* %3, align 8
  %10300 = add i64 %10287, -8
  br i1 %10298, label %block_.L_405981, label %block_40597c

block_40597c:                                     ; preds = %block_.L_40596e
  %10301 = add i64 %10299, 376
  store i64 %10301, i64* %3, align 8
  %10302 = inttoptr i64 %10300 to i32*
  store i32 0, i32* %10302, align 4
  %.pre394 = load i64, i64* %3, align 8
  br label %block_.L_405af4

block_.L_405981:                                  ; preds = %block_.L_40596e
  %10303 = add i64 %10299, 7
  store i64 %10303, i64* %3, align 8
  %10304 = inttoptr i64 %10300 to i32*
  store i32 0, i32* %10304, align 4
  %.pre398 = load i64, i64* %3, align 8
  br label %block_.L_405988

block_.L_405988:                                  ; preds = %block_405992, %block_.L_405981
  %10305 = phi i64 [ %10485, %block_405992 ], [ %.pre398, %block_.L_405981 ]
  %10306 = load i64, i64* %RBP.i, align 8
  %10307 = add i64 %10306, -8
  %10308 = add i64 %10305, 4
  store i64 %10308, i64* %3, align 8
  %10309 = inttoptr i64 %10307 to i32*
  %10310 = load i32, i32* %10309, align 4
  %10311 = add i32 %10310, -4
  %10312 = icmp ult i32 %10310, 4
  %10313 = zext i1 %10312 to i8
  store i8 %10313, i8* %12, align 1
  %10314 = and i32 %10311, 255
  %10315 = tail call i32 @llvm.ctpop.i32(i32 %10314)
  %10316 = trunc i32 %10315 to i8
  %10317 = and i8 %10316, 1
  %10318 = xor i8 %10317, 1
  store i8 %10318, i8* %13, align 1
  %10319 = xor i32 %10311, %10310
  %10320 = lshr i32 %10319, 4
  %10321 = trunc i32 %10320 to i8
  %10322 = and i8 %10321, 1
  store i8 %10322, i8* %14, align 1
  %10323 = icmp eq i32 %10311, 0
  %10324 = zext i1 %10323 to i8
  store i8 %10324, i8* %15, align 1
  %10325 = lshr i32 %10311, 31
  %10326 = trunc i32 %10325 to i8
  store i8 %10326, i8* %16, align 1
  %10327 = lshr i32 %10310, 31
  %10328 = xor i32 %10325, %10327
  %10329 = add nuw nsw i32 %10328, %10327
  %10330 = icmp eq i32 %10329, 2
  %10331 = zext i1 %10330 to i8
  store i8 %10331, i8* %17, align 1
  %10332 = icmp ne i8 %10326, 0
  %10333 = xor i1 %10332, %10330
  %.v489 = select i1 %10333, i64 10, i64 82
  %10334 = add i64 %10305, %.v489
  store i64 %10334, i64* %3, align 8
  br i1 %10333, label %block_405992, label %block_.L_4059da

block_405992:                                     ; preds = %block_.L_405988
  %10335 = add i64 %10306, -2176
  store i64 %10335, i64* %RAX.i552, align 8
  %10336 = add i64 %10334, 11
  store i64 %10336, i64* %3, align 8
  %10337 = load i32, i32* %10309, align 4
  %10338 = sext i32 %10337 to i64
  %10339 = shl nsw i64 %10338, 8
  store i64 %10339, i64* %RCX.i4476, align 8
  %10340 = add i64 %10339, %10335
  store i64 %10340, i64* %RAX.i552, align 8
  %10341 = icmp ult i64 %10340, %10335
  %10342 = icmp ult i64 %10340, %10339
  %10343 = or i1 %10341, %10342
  %10344 = zext i1 %10343 to i8
  store i8 %10344, i8* %12, align 1
  %10345 = trunc i64 %10340 to i32
  %10346 = and i32 %10345, 255
  %10347 = tail call i32 @llvm.ctpop.i32(i32 %10346)
  %10348 = trunc i32 %10347 to i8
  %10349 = and i8 %10348, 1
  %10350 = xor i8 %10349, 1
  store i8 %10350, i8* %13, align 1
  %10351 = xor i64 %10335, %10340
  %10352 = lshr i64 %10351, 4
  %10353 = trunc i64 %10352 to i8
  %10354 = and i8 %10353, 1
  store i8 %10354, i8* %14, align 1
  %10355 = icmp eq i64 %10340, 0
  %10356 = zext i1 %10355 to i8
  store i8 %10356, i8* %15, align 1
  %10357 = lshr i64 %10340, 63
  %10358 = trunc i64 %10357 to i8
  store i8 %10358, i8* %16, align 1
  %10359 = lshr i64 %10335, 63
  %10360 = lshr i64 %10338, 55
  %10361 = and i64 %10360, 1
  %10362 = xor i64 %10357, %10359
  %10363 = xor i64 %10357, %10361
  %10364 = add nuw nsw i64 %10362, %10363
  %10365 = icmp eq i64 %10364, 2
  %10366 = zext i1 %10365 to i8
  store i8 %10366, i8* %17, align 1
  %10367 = add i64 %10306, -16
  %10368 = add i64 %10334, 22
  store i64 %10368, i64* %3, align 8
  %10369 = inttoptr i64 %10367 to i32*
  %10370 = load i32, i32* %10369, align 4
  %10371 = sext i32 %10370 to i64
  %10372 = shl nsw i64 %10371, 6
  store i64 %10372, i64* %RCX.i4476, align 8
  %10373 = add i64 %10372, %10340
  store i64 %10373, i64* %RAX.i552, align 8
  %10374 = icmp ult i64 %10373, %10340
  %10375 = icmp ult i64 %10373, %10372
  %10376 = or i1 %10374, %10375
  %10377 = zext i1 %10376 to i8
  store i8 %10377, i8* %12, align 1
  %10378 = trunc i64 %10373 to i32
  %10379 = and i32 %10378, 255
  %10380 = tail call i32 @llvm.ctpop.i32(i32 %10379)
  %10381 = trunc i32 %10380 to i8
  %10382 = and i8 %10381, 1
  %10383 = xor i8 %10382, 1
  store i8 %10383, i8* %13, align 1
  %10384 = xor i64 %10340, %10373
  %10385 = lshr i64 %10384, 4
  %10386 = trunc i64 %10385 to i8
  %10387 = and i8 %10386, 1
  store i8 %10387, i8* %14, align 1
  %10388 = icmp eq i64 %10373, 0
  %10389 = zext i1 %10388 to i8
  store i8 %10389, i8* %15, align 1
  %10390 = lshr i64 %10373, 63
  %10391 = trunc i64 %10390 to i8
  store i8 %10391, i8* %16, align 1
  %10392 = lshr i64 %10371, 57
  %10393 = and i64 %10392, 1
  %10394 = xor i64 %10390, %10357
  %10395 = xor i64 %10390, %10393
  %10396 = add nuw nsw i64 %10394, %10395
  %10397 = icmp eq i64 %10396, 2
  %10398 = zext i1 %10397 to i8
  store i8 %10398, i8* %17, align 1
  %10399 = load i64, i64* %RBP.i, align 8
  %10400 = add i64 %10399, -12
  %10401 = add i64 %10334, 33
  store i64 %10401, i64* %3, align 8
  %10402 = inttoptr i64 %10400 to i32*
  %10403 = load i32, i32* %10402, align 4
  %10404 = sext i32 %10403 to i64
  %10405 = shl nsw i64 %10404, 4
  store i64 %10405, i64* %RCX.i4476, align 8
  %10406 = add i64 %10405, %10373
  store i64 %10406, i64* %RAX.i552, align 8
  %10407 = icmp ult i64 %10406, %10373
  %10408 = icmp ult i64 %10406, %10405
  %10409 = or i1 %10407, %10408
  %10410 = zext i1 %10409 to i8
  store i8 %10410, i8* %12, align 1
  %10411 = trunc i64 %10406 to i32
  %10412 = and i32 %10411, 255
  %10413 = tail call i32 @llvm.ctpop.i32(i32 %10412)
  %10414 = trunc i32 %10413 to i8
  %10415 = and i8 %10414, 1
  %10416 = xor i8 %10415, 1
  store i8 %10416, i8* %13, align 1
  %10417 = xor i64 %10405, %10373
  %10418 = xor i64 %10417, %10406
  %10419 = lshr i64 %10418, 4
  %10420 = trunc i64 %10419 to i8
  %10421 = and i8 %10420, 1
  store i8 %10421, i8* %14, align 1
  %10422 = icmp eq i64 %10406, 0
  %10423 = zext i1 %10422 to i8
  store i8 %10423, i8* %15, align 1
  %10424 = lshr i64 %10406, 63
  %10425 = trunc i64 %10424 to i8
  store i8 %10425, i8* %16, align 1
  %10426 = lshr i64 %10404, 59
  %10427 = and i64 %10426, 1
  %10428 = xor i64 %10424, %10390
  %10429 = xor i64 %10424, %10427
  %10430 = add nuw nsw i64 %10428, %10429
  %10431 = icmp eq i64 %10430, 2
  %10432 = zext i1 %10431 to i8
  store i8 %10432, i8* %17, align 1
  %10433 = add i64 %10399, -20
  %10434 = add i64 %10334, 44
  store i64 %10434, i64* %3, align 8
  %10435 = inttoptr i64 %10433 to i32*
  %10436 = load i32, i32* %10435, align 4
  %10437 = sext i32 %10436 to i64
  store i64 %10437, i64* %RCX.i4476, align 8
  %10438 = shl nsw i64 %10437, 2
  %10439 = add i64 %10438, %10406
  %10440 = add i64 %10334, 47
  store i64 %10440, i64* %3, align 8
  %10441 = inttoptr i64 %10439 to i32*
  %10442 = load i32, i32* %10441, align 4
  %10443 = zext i32 %10442 to i64
  store i64 %10443, i64* %RDX.i658, align 8
  %10444 = add i64 %10399, -8
  %10445 = add i64 %10334, 51
  store i64 %10445, i64* %3, align 8
  %10446 = inttoptr i64 %10444 to i32*
  %10447 = load i32, i32* %10446, align 4
  %10448 = sext i32 %10447 to i64
  store i64 %10448, i64* %RAX.i552, align 8
  %10449 = shl nsw i64 %10448, 2
  %10450 = add i64 %10399, -1136
  %10451 = add i64 %10450, %10449
  %10452 = add i64 %10334, 58
  store i64 %10452, i64* %3, align 8
  %10453 = inttoptr i64 %10451 to i32*
  store i32 %10442, i32* %10453, align 4
  %10454 = load i64, i64* %RBP.i, align 8
  %10455 = add i64 %10454, -8
  %10456 = load i64, i64* %3, align 8
  %10457 = add i64 %10456, 3
  store i64 %10457, i64* %3, align 8
  %10458 = inttoptr i64 %10455 to i32*
  %10459 = load i32, i32* %10458, align 4
  %10460 = add i32 %10459, 1
  %10461 = zext i32 %10460 to i64
  store i64 %10461, i64* %RAX.i552, align 8
  %10462 = icmp eq i32 %10459, -1
  %10463 = icmp eq i32 %10460, 0
  %10464 = or i1 %10462, %10463
  %10465 = zext i1 %10464 to i8
  store i8 %10465, i8* %12, align 1
  %10466 = and i32 %10460, 255
  %10467 = tail call i32 @llvm.ctpop.i32(i32 %10466)
  %10468 = trunc i32 %10467 to i8
  %10469 = and i8 %10468, 1
  %10470 = xor i8 %10469, 1
  store i8 %10470, i8* %13, align 1
  %10471 = xor i32 %10460, %10459
  %10472 = lshr i32 %10471, 4
  %10473 = trunc i32 %10472 to i8
  %10474 = and i8 %10473, 1
  store i8 %10474, i8* %14, align 1
  %10475 = zext i1 %10463 to i8
  store i8 %10475, i8* %15, align 1
  %10476 = lshr i32 %10460, 31
  %10477 = trunc i32 %10476 to i8
  store i8 %10477, i8* %16, align 1
  %10478 = lshr i32 %10459, 31
  %10479 = xor i32 %10476, %10478
  %10480 = add nuw nsw i32 %10479, %10476
  %10481 = icmp eq i32 %10480, 2
  %10482 = zext i1 %10481 to i8
  store i8 %10482, i8* %17, align 1
  %10483 = add i64 %10456, 9
  store i64 %10483, i64* %3, align 8
  store i32 %10460, i32* %10458, align 4
  %10484 = load i64, i64* %3, align 8
  %10485 = add i64 %10484, -77
  store i64 %10485, i64* %3, align 8
  br label %block_.L_405988

block_.L_4059da:                                  ; preds = %block_.L_405988
  %10486 = add i64 %10306, -1136
  %10487 = add i64 %10334, 6
  store i64 %10487, i64* %3, align 8
  %10488 = inttoptr i64 %10486 to i32*
  %10489 = load i32, i32* %10488, align 4
  %10490 = zext i32 %10489 to i64
  store i64 %10490, i64* %RAX.i552, align 8
  %10491 = add i64 %10306, -1128
  %10492 = add i64 %10334, 12
  store i64 %10492, i64* %3, align 8
  %10493 = inttoptr i64 %10491 to i32*
  %10494 = load i32, i32* %10493, align 4
  %10495 = add i32 %10494, %10489
  %10496 = zext i32 %10495 to i64
  store i64 %10496, i64* %RAX.i552, align 8
  %10497 = icmp ult i32 %10495, %10489
  %10498 = icmp ult i32 %10495, %10494
  %10499 = or i1 %10497, %10498
  %10500 = zext i1 %10499 to i8
  store i8 %10500, i8* %12, align 1
  %10501 = and i32 %10495, 255
  %10502 = tail call i32 @llvm.ctpop.i32(i32 %10501)
  %10503 = trunc i32 %10502 to i8
  %10504 = and i8 %10503, 1
  %10505 = xor i8 %10504, 1
  store i8 %10505, i8* %13, align 1
  %10506 = xor i32 %10494, %10489
  %10507 = xor i32 %10506, %10495
  %10508 = lshr i32 %10507, 4
  %10509 = trunc i32 %10508 to i8
  %10510 = and i8 %10509, 1
  store i8 %10510, i8* %14, align 1
  %10511 = icmp eq i32 %10495, 0
  %10512 = zext i1 %10511 to i8
  store i8 %10512, i8* %15, align 1
  %10513 = lshr i32 %10495, 31
  %10514 = trunc i32 %10513 to i8
  store i8 %10514, i8* %16, align 1
  %10515 = lshr i32 %10489, 31
  %10516 = lshr i32 %10494, 31
  %10517 = xor i32 %10513, %10515
  %10518 = xor i32 %10513, %10516
  %10519 = add nuw nsw i32 %10517, %10518
  %10520 = icmp eq i32 %10519, 2
  %10521 = zext i1 %10520 to i8
  store i8 %10521, i8* %17, align 1
  %10522 = add i64 %10306, -1152
  %10523 = add i64 %10334, 18
  store i64 %10523, i64* %3, align 8
  %10524 = inttoptr i64 %10522 to i32*
  store i32 %10495, i32* %10524, align 4
  %10525 = load i64, i64* %RBP.i, align 8
  %10526 = add i64 %10525, -1136
  %10527 = load i64, i64* %3, align 8
  %10528 = add i64 %10527, 6
  store i64 %10528, i64* %3, align 8
  %10529 = inttoptr i64 %10526 to i32*
  %10530 = load i32, i32* %10529, align 4
  %10531 = zext i32 %10530 to i64
  store i64 %10531, i64* %RAX.i552, align 8
  %10532 = add i64 %10525, -1128
  %10533 = add i64 %10527, 12
  store i64 %10533, i64* %3, align 8
  %10534 = inttoptr i64 %10532 to i32*
  %10535 = load i32, i32* %10534, align 4
  %10536 = sub i32 %10530, %10535
  %10537 = zext i32 %10536 to i64
  store i64 %10537, i64* %RAX.i552, align 8
  %10538 = icmp ult i32 %10530, %10535
  %10539 = zext i1 %10538 to i8
  store i8 %10539, i8* %12, align 1
  %10540 = and i32 %10536, 255
  %10541 = tail call i32 @llvm.ctpop.i32(i32 %10540)
  %10542 = trunc i32 %10541 to i8
  %10543 = and i8 %10542, 1
  %10544 = xor i8 %10543, 1
  store i8 %10544, i8* %13, align 1
  %10545 = xor i32 %10535, %10530
  %10546 = xor i32 %10545, %10536
  %10547 = lshr i32 %10546, 4
  %10548 = trunc i32 %10547 to i8
  %10549 = and i8 %10548, 1
  store i8 %10549, i8* %14, align 1
  %10550 = icmp eq i32 %10536, 0
  %10551 = zext i1 %10550 to i8
  store i8 %10551, i8* %15, align 1
  %10552 = lshr i32 %10536, 31
  %10553 = trunc i32 %10552 to i8
  store i8 %10553, i8* %16, align 1
  %10554 = lshr i32 %10530, 31
  %10555 = lshr i32 %10535, 31
  %10556 = xor i32 %10555, %10554
  %10557 = xor i32 %10552, %10554
  %10558 = add nuw nsw i32 %10557, %10556
  %10559 = icmp eq i32 %10558, 2
  %10560 = zext i1 %10559 to i8
  store i8 %10560, i8* %17, align 1
  %10561 = add i64 %10525, -1148
  %10562 = add i64 %10527, 18
  store i64 %10562, i64* %3, align 8
  %10563 = inttoptr i64 %10561 to i32*
  store i32 %10536, i32* %10563, align 4
  %10564 = load i64, i64* %RBP.i, align 8
  %10565 = add i64 %10564, -1132
  %10566 = load i64, i64* %3, align 8
  %10567 = add i64 %10566, 6
  store i64 %10567, i64* %3, align 8
  %10568 = inttoptr i64 %10565 to i32*
  %10569 = load i32, i32* %10568, align 4
  %10570 = zext i32 %10569 to i64
  %10571 = shl nuw i64 %10570, 32
  %10572 = ashr i64 %10571, 33
  %10573 = trunc i32 %10569 to i8
  %10574 = and i8 %10573, 1
  %10575 = trunc i64 %10572 to i32
  %10576 = and i64 %10572, 4294967295
  store i64 %10576, i64* %RAX.i552, align 8
  store i8 %10574, i8* %12, align 1
  %10577 = and i32 %10575, 255
  %10578 = tail call i32 @llvm.ctpop.i32(i32 %10577)
  %10579 = trunc i32 %10578 to i8
  %10580 = and i8 %10579, 1
  %10581 = xor i8 %10580, 1
  store i8 %10581, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %10582 = icmp eq i32 %10575, 0
  %10583 = zext i1 %10582 to i8
  store i8 %10583, i8* %15, align 1
  %10584 = lshr i64 %10572, 31
  %10585 = trunc i64 %10584 to i8
  %10586 = and i8 %10585, 1
  store i8 %10586, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %10587 = add i64 %10564, -1124
  %10588 = add i64 %10566, 14
  store i64 %10588, i64* %3, align 8
  %10589 = trunc i64 %10572 to i32
  %10590 = inttoptr i64 %10587 to i32*
  %10591 = load i32, i32* %10590, align 4
  %10592 = sub i32 %10589, %10591
  %10593 = zext i32 %10592 to i64
  store i64 %10593, i64* %RAX.i552, align 8
  %10594 = icmp ult i32 %10589, %10591
  %10595 = zext i1 %10594 to i8
  store i8 %10595, i8* %12, align 1
  %10596 = and i32 %10592, 255
  %10597 = tail call i32 @llvm.ctpop.i32(i32 %10596)
  %10598 = trunc i32 %10597 to i8
  %10599 = and i8 %10598, 1
  %10600 = xor i8 %10599, 1
  store i8 %10600, i8* %13, align 1
  %10601 = xor i32 %10591, %10589
  %10602 = xor i32 %10601, %10592
  %10603 = lshr i32 %10602, 4
  %10604 = trunc i32 %10603 to i8
  %10605 = and i8 %10604, 1
  store i8 %10605, i8* %14, align 1
  %10606 = icmp eq i32 %10592, 0
  %10607 = zext i1 %10606 to i8
  store i8 %10607, i8* %15, align 1
  %10608 = lshr i32 %10592, 31
  %10609 = trunc i32 %10608 to i8
  store i8 %10609, i8* %16, align 1
  %10610 = lshr i64 %10572, 31
  %10611 = trunc i64 %10610 to i32
  %10612 = and i32 %10611, 1
  %10613 = lshr i32 %10591, 31
  %10614 = xor i32 %10613, %10612
  %10615 = xor i32 %10608, %10612
  %10616 = add nuw nsw i32 %10615, %10614
  %10617 = icmp eq i32 %10616, 2
  %10618 = zext i1 %10617 to i8
  store i8 %10618, i8* %17, align 1
  %10619 = add i64 %10564, -1144
  %10620 = add i64 %10566, 20
  store i64 %10620, i64* %3, align 8
  %10621 = inttoptr i64 %10619 to i32*
  store i32 %10592, i32* %10621, align 4
  %10622 = load i64, i64* %RBP.i, align 8
  %10623 = add i64 %10622, -1132
  %10624 = load i64, i64* %3, align 8
  %10625 = add i64 %10624, 6
  store i64 %10625, i64* %3, align 8
  %10626 = inttoptr i64 %10623 to i32*
  %10627 = load i32, i32* %10626, align 4
  %10628 = zext i32 %10627 to i64
  store i64 %10628, i64* %RAX.i552, align 8
  %10629 = add i64 %10622, -1124
  %10630 = add i64 %10624, 12
  store i64 %10630, i64* %3, align 8
  %10631 = inttoptr i64 %10629 to i32*
  %10632 = load i32, i32* %10631, align 4
  %10633 = zext i32 %10632 to i64
  %10634 = shl nuw i64 %10633, 32
  %10635 = ashr i64 %10634, 33
  %10636 = and i64 %10635, 4294967295
  store i64 %10636, i64* %RCX.i4476, align 8
  %10637 = trunc i64 %10635 to i32
  %10638 = add i32 %10637, %10627
  %10639 = zext i32 %10638 to i64
  store i64 %10639, i64* %RAX.i552, align 8
  %10640 = icmp ult i32 %10638, %10627
  %10641 = icmp ult i32 %10638, %10637
  %10642 = or i1 %10640, %10641
  %10643 = zext i1 %10642 to i8
  store i8 %10643, i8* %12, align 1
  %10644 = and i32 %10638, 255
  %10645 = tail call i32 @llvm.ctpop.i32(i32 %10644)
  %10646 = trunc i32 %10645 to i8
  %10647 = and i8 %10646, 1
  %10648 = xor i8 %10647, 1
  store i8 %10648, i8* %13, align 1
  %10649 = xor i64 %10635, %10628
  %10650 = trunc i64 %10649 to i32
  %10651 = xor i32 %10650, %10638
  %10652 = lshr i32 %10651, 4
  %10653 = trunc i32 %10652 to i8
  %10654 = and i8 %10653, 1
  store i8 %10654, i8* %14, align 1
  %10655 = icmp eq i32 %10638, 0
  %10656 = zext i1 %10655 to i8
  store i8 %10656, i8* %15, align 1
  %10657 = lshr i32 %10638, 31
  %10658 = trunc i32 %10657 to i8
  store i8 %10658, i8* %16, align 1
  %10659 = lshr i32 %10627, 31
  %10660 = lshr i64 %10635, 31
  %10661 = trunc i64 %10660 to i32
  %10662 = and i32 %10661, 1
  %10663 = xor i32 %10657, %10659
  %10664 = xor i32 %10657, %10662
  %10665 = add nuw nsw i32 %10663, %10664
  %10666 = icmp eq i32 %10665, 2
  %10667 = zext i1 %10666 to i8
  store i8 %10667, i8* %17, align 1
  %10668 = add i64 %10622, -1140
  %10669 = add i64 %10624, 22
  store i64 %10669, i64* %3, align 8
  %10670 = inttoptr i64 %10668 to i32*
  store i32 %10638, i32* %10670, align 4
  %10671 = load i64, i64* %RBP.i, align 8
  %10672 = add i64 %10671, -8
  %10673 = load i64, i64* %3, align 8
  %10674 = add i64 %10673, 7
  store i64 %10674, i64* %3, align 8
  %10675 = inttoptr i64 %10672 to i32*
  store i32 0, i32* %10675, align 4
  %.pre399 = load i64, i64* %3, align 8
  br label %block_.L_405a31

block_.L_405a31:                                  ; preds = %block_405a3b, %block_.L_4059da
  %10676 = phi i64 [ %11084, %block_405a3b ], [ %.pre399, %block_.L_4059da ]
  %10677 = load i64, i64* %RBP.i, align 8
  %10678 = add i64 %10677, -8
  %10679 = add i64 %10676, 4
  store i64 %10679, i64* %3, align 8
  %10680 = inttoptr i64 %10678 to i32*
  %10681 = load i32, i32* %10680, align 4
  %10682 = add i32 %10681, -2
  %10683 = icmp ult i32 %10681, 2
  %10684 = zext i1 %10683 to i8
  store i8 %10684, i8* %12, align 1
  %10685 = and i32 %10682, 255
  %10686 = tail call i32 @llvm.ctpop.i32(i32 %10685)
  %10687 = trunc i32 %10686 to i8
  %10688 = and i8 %10687, 1
  %10689 = xor i8 %10688, 1
  store i8 %10689, i8* %13, align 1
  %10690 = xor i32 %10682, %10681
  %10691 = lshr i32 %10690, 4
  %10692 = trunc i32 %10691 to i8
  %10693 = and i8 %10692, 1
  store i8 %10693, i8* %14, align 1
  %10694 = icmp eq i32 %10682, 0
  %10695 = zext i1 %10694 to i8
  store i8 %10695, i8* %15, align 1
  %10696 = lshr i32 %10682, 31
  %10697 = trunc i32 %10696 to i8
  store i8 %10697, i8* %16, align 1
  %10698 = lshr i32 %10681, 31
  %10699 = xor i32 %10696, %10698
  %10700 = add nuw nsw i32 %10699, %10698
  %10701 = icmp eq i32 %10700, 2
  %10702 = zext i1 %10701 to i8
  store i8 %10702, i8* %17, align 1
  %10703 = icmp ne i8 %10697, 0
  %10704 = xor i1 %10703, %10701
  %.v460 = select i1 %10704, i64 10, i64 169
  %10705 = add i64 %10676, %.v460
  store i64 %10705, i64* %3, align 8
  br i1 %10704, label %block_405a3b, label %block_.L_405ada

block_405a3b:                                     ; preds = %block_.L_405a31
  %10706 = add i64 %10677, -2176
  store i64 %10706, i64* %RAX.i552, align 8
  store i64 3, i64* %RCX.i4476, align 8
  %10707 = add i64 %10705, 15
  store i64 %10707, i64* %3, align 8
  %10708 = load i32, i32* %10680, align 4
  %10709 = sub i32 3, %10708
  %10710 = zext i32 %10709 to i64
  store i64 %10710, i64* %RCX.i4476, align 8
  %10711 = icmp ugt i32 %10708, 3
  %10712 = zext i1 %10711 to i8
  store i8 %10712, i8* %12, align 1
  %10713 = and i32 %10709, 255
  %10714 = tail call i32 @llvm.ctpop.i32(i32 %10713)
  %10715 = trunc i32 %10714 to i8
  %10716 = and i8 %10715, 1
  %10717 = xor i8 %10716, 1
  store i8 %10717, i8* %13, align 1
  %10718 = xor i32 %10709, %10708
  %10719 = lshr i32 %10718, 4
  %10720 = trunc i32 %10719 to i8
  %10721 = and i8 %10720, 1
  store i8 %10721, i8* %14, align 1
  %10722 = icmp eq i32 %10709, 0
  %10723 = zext i1 %10722 to i8
  store i8 %10723, i8* %15, align 1
  %10724 = lshr i32 %10709, 31
  %10725 = trunc i32 %10724 to i8
  store i8 %10725, i8* %16, align 1
  %10726 = lshr i32 %10708, 31
  %10727 = add nuw nsw i32 %10724, %10726
  %10728 = icmp eq i32 %10727, 2
  %10729 = zext i1 %10728 to i8
  store i8 %10729, i8* %17, align 1
  %10730 = add i64 %10677, -24
  %10731 = add i64 %10705, 18
  store i64 %10731, i64* %3, align 8
  %10732 = inttoptr i64 %10730 to i32*
  store i32 %10709, i32* %10732, align 4
  %10733 = load i64, i64* %RBP.i, align 8
  %10734 = add i64 %10733, -8
  %10735 = load i64, i64* %3, align 8
  %10736 = add i64 %10735, 4
  store i64 %10736, i64* %3, align 8
  %10737 = inttoptr i64 %10734 to i32*
  %10738 = load i32, i32* %10737, align 4
  %10739 = sext i32 %10738 to i64
  store i64 %10739, i64* %RDX.i658, align 8
  %10740 = shl nsw i64 %10739, 2
  %10741 = add i64 %10733, -1152
  %10742 = add i64 %10741, %10740
  %10743 = add i64 %10735, 11
  store i64 %10743, i64* %3, align 8
  %10744 = inttoptr i64 %10742 to i32*
  %10745 = load i32, i32* %10744, align 4
  %10746 = zext i32 %10745 to i64
  store i64 %10746, i64* %RCX.i4476, align 8
  %10747 = add i64 %10733, -24
  %10748 = add i64 %10735, 15
  store i64 %10748, i64* %3, align 8
  %10749 = inttoptr i64 %10747 to i32*
  %10750 = load i32, i32* %10749, align 4
  %10751 = sext i32 %10750 to i64
  store i64 %10751, i64* %RDX.i658, align 8
  %10752 = shl nsw i64 %10751, 2
  %10753 = add nsw i64 %10752, -1152
  %10754 = add i64 %10753, %10733
  %10755 = add i64 %10735, 22
  store i64 %10755, i64* %3, align 8
  %10756 = inttoptr i64 %10754 to i32*
  %10757 = load i32, i32* %10756, align 4
  %10758 = add i32 %10757, %10745
  %10759 = zext i32 %10758 to i64
  store i64 %10759, i64* %RCX.i4476, align 8
  %10760 = icmp ult i32 %10758, %10745
  %10761 = icmp ult i32 %10758, %10757
  %10762 = or i1 %10760, %10761
  %10763 = zext i1 %10762 to i8
  store i8 %10763, i8* %12, align 1
  %10764 = and i32 %10758, 255
  %10765 = tail call i32 @llvm.ctpop.i32(i32 %10764)
  %10766 = trunc i32 %10765 to i8
  %10767 = and i8 %10766, 1
  %10768 = xor i8 %10767, 1
  store i8 %10768, i8* %13, align 1
  %10769 = xor i32 %10757, %10745
  %10770 = xor i32 %10769, %10758
  %10771 = lshr i32 %10770, 4
  %10772 = trunc i32 %10771 to i8
  %10773 = and i8 %10772, 1
  store i8 %10773, i8* %14, align 1
  %10774 = icmp eq i32 %10758, 0
  %10775 = zext i1 %10774 to i8
  store i8 %10775, i8* %15, align 1
  %10776 = lshr i32 %10758, 31
  %10777 = trunc i32 %10776 to i8
  store i8 %10777, i8* %16, align 1
  %10778 = lshr i32 %10745, 31
  %10779 = lshr i32 %10757, 31
  %10780 = xor i32 %10776, %10778
  %10781 = xor i32 %10776, %10779
  %10782 = add nuw nsw i32 %10780, %10781
  %10783 = icmp eq i32 %10782, 2
  %10784 = zext i1 %10783 to i8
  store i8 %10784, i8* %17, align 1
  %10785 = add i64 %10735, 26
  store i64 %10785, i64* %3, align 8
  %10786 = load i32, i32* %10737, align 4
  %10787 = sext i32 %10786 to i64
  %10788 = shl nsw i64 %10787, 8
  store i64 %10788, i64* %RDX.i658, align 8
  %10789 = load i64, i64* %RAX.i552, align 8
  %10790 = add i64 %10788, %10789
  store i64 %10790, i64* %RSI.i757, align 8
  %10791 = icmp ult i64 %10790, %10789
  %10792 = icmp ult i64 %10790, %10788
  %10793 = or i1 %10791, %10792
  %10794 = zext i1 %10793 to i8
  store i8 %10794, i8* %12, align 1
  %10795 = trunc i64 %10790 to i32
  %10796 = and i32 %10795, 255
  %10797 = tail call i32 @llvm.ctpop.i32(i32 %10796)
  %10798 = trunc i32 %10797 to i8
  %10799 = and i8 %10798, 1
  %10800 = xor i8 %10799, 1
  store i8 %10800, i8* %13, align 1
  %10801 = xor i64 %10789, %10790
  %10802 = lshr i64 %10801, 4
  %10803 = trunc i64 %10802 to i8
  %10804 = and i8 %10803, 1
  store i8 %10804, i8* %14, align 1
  %10805 = icmp eq i64 %10790, 0
  %10806 = zext i1 %10805 to i8
  store i8 %10806, i8* %15, align 1
  %10807 = lshr i64 %10790, 63
  %10808 = trunc i64 %10807 to i8
  store i8 %10808, i8* %16, align 1
  %10809 = lshr i64 %10789, 63
  %10810 = lshr i64 %10787, 55
  %10811 = and i64 %10810, 1
  %10812 = xor i64 %10807, %10809
  %10813 = xor i64 %10807, %10811
  %10814 = add nuw nsw i64 %10812, %10813
  %10815 = icmp eq i64 %10814, 2
  %10816 = zext i1 %10815 to i8
  store i8 %10816, i8* %17, align 1
  %10817 = load i64, i64* %RBP.i, align 8
  %10818 = add i64 %10817, -16
  %10819 = add i64 %10735, 40
  store i64 %10819, i64* %3, align 8
  %10820 = inttoptr i64 %10818 to i32*
  %10821 = load i32, i32* %10820, align 4
  %10822 = sext i32 %10821 to i64
  %10823 = shl nsw i64 %10822, 6
  store i64 %10823, i64* %RDX.i658, align 8
  %10824 = add i64 %10823, %10790
  store i64 %10824, i64* %RSI.i757, align 8
  %10825 = icmp ult i64 %10824, %10790
  %10826 = icmp ult i64 %10824, %10823
  %10827 = or i1 %10825, %10826
  %10828 = zext i1 %10827 to i8
  store i8 %10828, i8* %12, align 1
  %10829 = trunc i64 %10824 to i32
  %10830 = and i32 %10829, 255
  %10831 = tail call i32 @llvm.ctpop.i32(i32 %10830)
  %10832 = trunc i32 %10831 to i8
  %10833 = and i8 %10832, 1
  %10834 = xor i8 %10833, 1
  store i8 %10834, i8* %13, align 1
  %10835 = xor i64 %10790, %10824
  %10836 = lshr i64 %10835, 4
  %10837 = trunc i64 %10836 to i8
  %10838 = and i8 %10837, 1
  store i8 %10838, i8* %14, align 1
  %10839 = icmp eq i64 %10824, 0
  %10840 = zext i1 %10839 to i8
  store i8 %10840, i8* %15, align 1
  %10841 = lshr i64 %10824, 63
  %10842 = trunc i64 %10841 to i8
  store i8 %10842, i8* %16, align 1
  %10843 = lshr i64 %10822, 57
  %10844 = and i64 %10843, 1
  %10845 = xor i64 %10841, %10807
  %10846 = xor i64 %10841, %10844
  %10847 = add nuw nsw i64 %10845, %10846
  %10848 = icmp eq i64 %10847, 2
  %10849 = zext i1 %10848 to i8
  store i8 %10849, i8* %17, align 1
  %10850 = add i64 %10817, -12
  %10851 = add i64 %10735, 51
  store i64 %10851, i64* %3, align 8
  %10852 = inttoptr i64 %10850 to i32*
  %10853 = load i32, i32* %10852, align 4
  %10854 = sext i32 %10853 to i64
  %10855 = shl nsw i64 %10854, 4
  store i64 %10855, i64* %RDX.i658, align 8
  %10856 = add i64 %10855, %10824
  store i64 %10856, i64* %RSI.i757, align 8
  %10857 = icmp ult i64 %10856, %10824
  %10858 = icmp ult i64 %10856, %10855
  %10859 = or i1 %10857, %10858
  %10860 = zext i1 %10859 to i8
  store i8 %10860, i8* %12, align 1
  %10861 = trunc i64 %10856 to i32
  %10862 = and i32 %10861, 255
  %10863 = tail call i32 @llvm.ctpop.i32(i32 %10862)
  %10864 = trunc i32 %10863 to i8
  %10865 = and i8 %10864, 1
  %10866 = xor i8 %10865, 1
  store i8 %10866, i8* %13, align 1
  %10867 = xor i64 %10855, %10824
  %10868 = xor i64 %10867, %10856
  %10869 = lshr i64 %10868, 4
  %10870 = trunc i64 %10869 to i8
  %10871 = and i8 %10870, 1
  store i8 %10871, i8* %14, align 1
  %10872 = icmp eq i64 %10856, 0
  %10873 = zext i1 %10872 to i8
  store i8 %10873, i8* %15, align 1
  %10874 = lshr i64 %10856, 63
  %10875 = trunc i64 %10874 to i8
  store i8 %10875, i8* %16, align 1
  %10876 = lshr i64 %10854, 59
  %10877 = and i64 %10876, 1
  %10878 = xor i64 %10874, %10841
  %10879 = xor i64 %10874, %10877
  %10880 = add nuw nsw i64 %10878, %10879
  %10881 = icmp eq i64 %10880, 2
  %10882 = zext i1 %10881 to i8
  store i8 %10882, i8* %17, align 1
  %10883 = load i64, i64* %RBP.i, align 8
  %10884 = add i64 %10883, -20
  %10885 = add i64 %10735, 62
  store i64 %10885, i64* %3, align 8
  %10886 = inttoptr i64 %10884 to i32*
  %10887 = load i32, i32* %10886, align 4
  %10888 = sext i32 %10887 to i64
  store i64 %10888, i64* %RDX.i658, align 8
  %10889 = shl nsw i64 %10888, 2
  %10890 = add i64 %10889, %10856
  %10891 = load i32, i32* %ECX.i4446, align 4
  %10892 = add i64 %10735, 65
  store i64 %10892, i64* %3, align 8
  %10893 = inttoptr i64 %10890 to i32*
  store i32 %10891, i32* %10893, align 4
  %10894 = load i64, i64* %RBP.i, align 8
  %10895 = add i64 %10894, -8
  %10896 = load i64, i64* %3, align 8
  %10897 = add i64 %10896, 4
  store i64 %10897, i64* %3, align 8
  %10898 = inttoptr i64 %10895 to i32*
  %10899 = load i32, i32* %10898, align 4
  %10900 = sext i32 %10899 to i64
  store i64 %10900, i64* %RDX.i658, align 8
  %10901 = shl nsw i64 %10900, 2
  %10902 = add i64 %10894, -1152
  %10903 = add i64 %10902, %10901
  %10904 = add i64 %10896, 11
  store i64 %10904, i64* %3, align 8
  %10905 = inttoptr i64 %10903 to i32*
  %10906 = load i32, i32* %10905, align 4
  %10907 = zext i32 %10906 to i64
  store i64 %10907, i64* %RCX.i4476, align 8
  %10908 = add i64 %10894, -24
  %10909 = add i64 %10896, 15
  store i64 %10909, i64* %3, align 8
  %10910 = inttoptr i64 %10908 to i32*
  %10911 = load i32, i32* %10910, align 4
  %10912 = sext i32 %10911 to i64
  store i64 %10912, i64* %RDX.i658, align 8
  %10913 = shl nsw i64 %10912, 2
  %10914 = add nsw i64 %10913, -1152
  %10915 = add i64 %10914, %10894
  %10916 = add i64 %10896, 22
  store i64 %10916, i64* %3, align 8
  %10917 = inttoptr i64 %10915 to i32*
  %10918 = load i32, i32* %10917, align 4
  %10919 = sub i32 %10906, %10918
  %10920 = zext i32 %10919 to i64
  store i64 %10920, i64* %RCX.i4476, align 8
  %10921 = icmp ult i32 %10906, %10918
  %10922 = zext i1 %10921 to i8
  store i8 %10922, i8* %12, align 1
  %10923 = and i32 %10919, 255
  %10924 = tail call i32 @llvm.ctpop.i32(i32 %10923)
  %10925 = trunc i32 %10924 to i8
  %10926 = and i8 %10925, 1
  %10927 = xor i8 %10926, 1
  store i8 %10927, i8* %13, align 1
  %10928 = xor i32 %10918, %10906
  %10929 = xor i32 %10928, %10919
  %10930 = lshr i32 %10929, 4
  %10931 = trunc i32 %10930 to i8
  %10932 = and i8 %10931, 1
  store i8 %10932, i8* %14, align 1
  %10933 = icmp eq i32 %10919, 0
  %10934 = zext i1 %10933 to i8
  store i8 %10934, i8* %15, align 1
  %10935 = lshr i32 %10919, 31
  %10936 = trunc i32 %10935 to i8
  store i8 %10936, i8* %16, align 1
  %10937 = lshr i32 %10906, 31
  %10938 = lshr i32 %10918, 31
  %10939 = xor i32 %10938, %10937
  %10940 = xor i32 %10935, %10937
  %10941 = add nuw nsw i32 %10940, %10939
  %10942 = icmp eq i32 %10941, 2
  %10943 = zext i1 %10942 to i8
  store i8 %10943, i8* %17, align 1
  %10944 = add i64 %10896, 26
  store i64 %10944, i64* %3, align 8
  %10945 = load i32, i32* %10910, align 4
  %10946 = sext i32 %10945 to i64
  %10947 = shl nsw i64 %10946, 8
  store i64 %10947, i64* %RDX.i658, align 8
  %10948 = load i64, i64* %RAX.i552, align 8
  %10949 = add i64 %10947, %10948
  store i64 %10949, i64* %RAX.i552, align 8
  %10950 = icmp ult i64 %10949, %10948
  %10951 = icmp ult i64 %10949, %10947
  %10952 = or i1 %10950, %10951
  %10953 = zext i1 %10952 to i8
  store i8 %10953, i8* %12, align 1
  %10954 = trunc i64 %10949 to i32
  %10955 = and i32 %10954, 255
  %10956 = tail call i32 @llvm.ctpop.i32(i32 %10955)
  %10957 = trunc i32 %10956 to i8
  %10958 = and i8 %10957, 1
  %10959 = xor i8 %10958, 1
  store i8 %10959, i8* %13, align 1
  %10960 = xor i64 %10948, %10949
  %10961 = lshr i64 %10960, 4
  %10962 = trunc i64 %10961 to i8
  %10963 = and i8 %10962, 1
  store i8 %10963, i8* %14, align 1
  %10964 = icmp eq i64 %10949, 0
  %10965 = zext i1 %10964 to i8
  store i8 %10965, i8* %15, align 1
  %10966 = lshr i64 %10949, 63
  %10967 = trunc i64 %10966 to i8
  store i8 %10967, i8* %16, align 1
  %10968 = lshr i64 %10948, 63
  %10969 = lshr i64 %10946, 55
  %10970 = and i64 %10969, 1
  %10971 = xor i64 %10966, %10968
  %10972 = xor i64 %10966, %10970
  %10973 = add nuw nsw i64 %10971, %10972
  %10974 = icmp eq i64 %10973, 2
  %10975 = zext i1 %10974 to i8
  store i8 %10975, i8* %17, align 1
  %10976 = load i64, i64* %RBP.i, align 8
  %10977 = add i64 %10976, -16
  %10978 = add i64 %10896, 37
  store i64 %10978, i64* %3, align 8
  %10979 = inttoptr i64 %10977 to i32*
  %10980 = load i32, i32* %10979, align 4
  %10981 = sext i32 %10980 to i64
  %10982 = shl nsw i64 %10981, 6
  store i64 %10982, i64* %RDX.i658, align 8
  %10983 = add i64 %10982, %10949
  store i64 %10983, i64* %RAX.i552, align 8
  %10984 = icmp ult i64 %10983, %10949
  %10985 = icmp ult i64 %10983, %10982
  %10986 = or i1 %10984, %10985
  %10987 = zext i1 %10986 to i8
  store i8 %10987, i8* %12, align 1
  %10988 = trunc i64 %10983 to i32
  %10989 = and i32 %10988, 255
  %10990 = tail call i32 @llvm.ctpop.i32(i32 %10989)
  %10991 = trunc i32 %10990 to i8
  %10992 = and i8 %10991, 1
  %10993 = xor i8 %10992, 1
  store i8 %10993, i8* %13, align 1
  %10994 = xor i64 %10949, %10983
  %10995 = lshr i64 %10994, 4
  %10996 = trunc i64 %10995 to i8
  %10997 = and i8 %10996, 1
  store i8 %10997, i8* %14, align 1
  %10998 = icmp eq i64 %10983, 0
  %10999 = zext i1 %10998 to i8
  store i8 %10999, i8* %15, align 1
  %11000 = lshr i64 %10983, 63
  %11001 = trunc i64 %11000 to i8
  store i8 %11001, i8* %16, align 1
  %11002 = lshr i64 %10981, 57
  %11003 = and i64 %11002, 1
  %11004 = xor i64 %11000, %10966
  %11005 = xor i64 %11000, %11003
  %11006 = add nuw nsw i64 %11004, %11005
  %11007 = icmp eq i64 %11006, 2
  %11008 = zext i1 %11007 to i8
  store i8 %11008, i8* %17, align 1
  %11009 = add i64 %10976, -12
  %11010 = add i64 %10896, 48
  store i64 %11010, i64* %3, align 8
  %11011 = inttoptr i64 %11009 to i32*
  %11012 = load i32, i32* %11011, align 4
  %11013 = sext i32 %11012 to i64
  %11014 = shl nsw i64 %11013, 4
  store i64 %11014, i64* %RDX.i658, align 8
  %11015 = add i64 %11014, %10983
  store i64 %11015, i64* %RAX.i552, align 8
  %11016 = icmp ult i64 %11015, %10983
  %11017 = icmp ult i64 %11015, %11014
  %11018 = or i1 %11016, %11017
  %11019 = zext i1 %11018 to i8
  store i8 %11019, i8* %12, align 1
  %11020 = trunc i64 %11015 to i32
  %11021 = and i32 %11020, 255
  %11022 = tail call i32 @llvm.ctpop.i32(i32 %11021)
  %11023 = trunc i32 %11022 to i8
  %11024 = and i8 %11023, 1
  %11025 = xor i8 %11024, 1
  store i8 %11025, i8* %13, align 1
  %11026 = xor i64 %11014, %10983
  %11027 = xor i64 %11026, %11015
  %11028 = lshr i64 %11027, 4
  %11029 = trunc i64 %11028 to i8
  %11030 = and i8 %11029, 1
  store i8 %11030, i8* %14, align 1
  %11031 = icmp eq i64 %11015, 0
  %11032 = zext i1 %11031 to i8
  store i8 %11032, i8* %15, align 1
  %11033 = lshr i64 %11015, 63
  %11034 = trunc i64 %11033 to i8
  store i8 %11034, i8* %16, align 1
  %11035 = lshr i64 %11013, 59
  %11036 = and i64 %11035, 1
  %11037 = xor i64 %11033, %11000
  %11038 = xor i64 %11033, %11036
  %11039 = add nuw nsw i64 %11037, %11038
  %11040 = icmp eq i64 %11039, 2
  %11041 = zext i1 %11040 to i8
  store i8 %11041, i8* %17, align 1
  %11042 = load i64, i64* %RBP.i, align 8
  %11043 = add i64 %11042, -20
  %11044 = add i64 %10896, 59
  store i64 %11044, i64* %3, align 8
  %11045 = inttoptr i64 %11043 to i32*
  %11046 = load i32, i32* %11045, align 4
  %11047 = sext i32 %11046 to i64
  store i64 %11047, i64* %RDX.i658, align 8
  %11048 = shl nsw i64 %11047, 2
  %11049 = add i64 %11048, %11015
  %11050 = load i32, i32* %ECX.i4446, align 4
  %11051 = add i64 %10896, 62
  store i64 %11051, i64* %3, align 8
  %11052 = inttoptr i64 %11049 to i32*
  store i32 %11050, i32* %11052, align 4
  %11053 = load i64, i64* %RBP.i, align 8
  %11054 = add i64 %11053, -8
  %11055 = load i64, i64* %3, align 8
  %11056 = add i64 %11055, 3
  store i64 %11056, i64* %3, align 8
  %11057 = inttoptr i64 %11054 to i32*
  %11058 = load i32, i32* %11057, align 4
  %11059 = add i32 %11058, 1
  %11060 = zext i32 %11059 to i64
  store i64 %11060, i64* %RAX.i552, align 8
  %11061 = icmp eq i32 %11058, -1
  %11062 = icmp eq i32 %11059, 0
  %11063 = or i1 %11061, %11062
  %11064 = zext i1 %11063 to i8
  store i8 %11064, i8* %12, align 1
  %11065 = and i32 %11059, 255
  %11066 = tail call i32 @llvm.ctpop.i32(i32 %11065)
  %11067 = trunc i32 %11066 to i8
  %11068 = and i8 %11067, 1
  %11069 = xor i8 %11068, 1
  store i8 %11069, i8* %13, align 1
  %11070 = xor i32 %11059, %11058
  %11071 = lshr i32 %11070, 4
  %11072 = trunc i32 %11071 to i8
  %11073 = and i8 %11072, 1
  store i8 %11073, i8* %14, align 1
  %11074 = zext i1 %11062 to i8
  store i8 %11074, i8* %15, align 1
  %11075 = lshr i32 %11059, 31
  %11076 = trunc i32 %11075 to i8
  store i8 %11076, i8* %16, align 1
  %11077 = lshr i32 %11058, 31
  %11078 = xor i32 %11075, %11077
  %11079 = add nuw nsw i32 %11078, %11075
  %11080 = icmp eq i32 %11079, 2
  %11081 = zext i1 %11080 to i8
  store i8 %11081, i8* %17, align 1
  %11082 = add i64 %11055, 9
  store i64 %11082, i64* %3, align 8
  store i32 %11059, i32* %11057, align 4
  %11083 = load i64, i64* %3, align 8
  %11084 = add i64 %11083, -164
  store i64 %11084, i64* %3, align 8
  br label %block_.L_405a31

block_.L_405ada:                                  ; preds = %block_.L_405a31
  %11085 = add i64 %10677, -12
  %11086 = add i64 %10705, 8
  store i64 %11086, i64* %3, align 8
  %11087 = inttoptr i64 %11085 to i32*
  %11088 = load i32, i32* %11087, align 4
  %11089 = add i32 %11088, 1
  %11090 = zext i32 %11089 to i64
  store i64 %11090, i64* %RAX.i552, align 8
  %11091 = icmp eq i32 %11088, -1
  %11092 = icmp eq i32 %11089, 0
  %11093 = or i1 %11091, %11092
  %11094 = zext i1 %11093 to i8
  store i8 %11094, i8* %12, align 1
  %11095 = and i32 %11089, 255
  %11096 = tail call i32 @llvm.ctpop.i32(i32 %11095)
  %11097 = trunc i32 %11096 to i8
  %11098 = and i8 %11097, 1
  %11099 = xor i8 %11098, 1
  store i8 %11099, i8* %13, align 1
  %11100 = xor i32 %11089, %11088
  %11101 = lshr i32 %11100, 4
  %11102 = trunc i32 %11101 to i8
  %11103 = and i8 %11102, 1
  store i8 %11103, i8* %14, align 1
  %11104 = zext i1 %11092 to i8
  store i8 %11104, i8* %15, align 1
  %11105 = lshr i32 %11089, 31
  %11106 = trunc i32 %11105 to i8
  store i8 %11106, i8* %16, align 1
  %11107 = lshr i32 %11088, 31
  %11108 = xor i32 %11105, %11107
  %11109 = add nuw nsw i32 %11108, %11105
  %11110 = icmp eq i32 %11109, 2
  %11111 = zext i1 %11110 to i8
  store i8 %11111, i8* %17, align 1
  %11112 = add i64 %10705, 14
  store i64 %11112, i64* %3, align 8
  store i32 %11089, i32* %11087, align 4
  %11113 = load i64, i64* %3, align 8
  %11114 = add i64 %11113, -416
  store i64 %11114, i64* %3, align 8
  br label %block_.L_405948

block_.L_405af4:                                  ; preds = %block_.L_405c86, %block_40597c
  %11115 = phi i64 [ %12031, %block_.L_405c86 ], [ %.pre394, %block_40597c ]
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %CL.i, align 1
  %11116 = load i64, i64* %RBP.i, align 8
  %11117 = add i64 %11116, -8
  %11118 = add i64 %11115, 8
  store i64 %11118, i64* %3, align 8
  %11119 = inttoptr i64 %11117 to i32*
  %11120 = load i32, i32* %11119, align 4
  %11121 = add i32 %11120, -4
  %11122 = icmp ult i32 %11120, 4
  %11123 = zext i1 %11122 to i8
  store i8 %11123, i8* %12, align 1
  %11124 = and i32 %11121, 255
  %11125 = tail call i32 @llvm.ctpop.i32(i32 %11124)
  %11126 = trunc i32 %11125 to i8
  %11127 = and i8 %11126, 1
  %11128 = xor i8 %11127, 1
  store i8 %11128, i8* %13, align 1
  %11129 = xor i32 %11121, %11120
  %11130 = lshr i32 %11129, 4
  %11131 = trunc i32 %11130 to i8
  %11132 = and i8 %11131, 1
  store i8 %11132, i8* %14, align 1
  %11133 = icmp eq i32 %11121, 0
  %11134 = zext i1 %11133 to i8
  store i8 %11134, i8* %15, align 1
  %11135 = lshr i32 %11121, 31
  %11136 = trunc i32 %11135 to i8
  store i8 %11136, i8* %16, align 1
  %11137 = lshr i32 %11120, 31
  %11138 = xor i32 %11135, %11137
  %11139 = add nuw nsw i32 %11138, %11137
  %11140 = icmp eq i32 %11139, 2
  %11141 = zext i1 %11140 to i8
  store i8 %11141, i8* %17, align 1
  %11142 = add i64 %11116, -2306
  %11143 = add i64 %11115, 14
  store i64 %11143, i64* %3, align 8
  %11144 = inttoptr i64 %11142 to i8*
  store i8 0, i8* %11144, align 1
  %11145 = load i64, i64* %3, align 8
  %11146 = add i64 %11145, 24
  %11147 = add i64 %11145, 6
  %11148 = load i8, i8* %16, align 1
  %11149 = icmp ne i8 %11148, 0
  %11150 = load i8, i8* %17, align 1
  %11151 = icmp ne i8 %11150, 0
  %11152 = xor i1 %11149, %11151
  %11153 = select i1 %11152, i64 %11147, i64 %11146
  store i64 %11153, i64* %3, align 8
  br i1 %11152, label %block_405b08, label %block_.L_405b1a

block_405b08:                                     ; preds = %block_.L_405af4
  %11154 = load i64, i64* %RBP.i, align 8
  %11155 = add i64 %11154, -2260
  %11156 = add i64 %11153, 7
  store i64 %11156, i64* %3, align 8
  %11157 = inttoptr i64 %11155 to i32*
  %11158 = load i32, i32* %11157, align 4
  %11159 = icmp ne i32 %11158, 0
  %11160 = zext i1 %11159 to i64
  %11161 = xor i64 %11160, 255
  %11162 = trunc i64 %11161 to i8
  store i8 %11162, i8* %AL.i, align 1
  store i8 0, i8* %12, align 1
  %11163 = trunc i64 %11161 to i32
  %11164 = tail call i32 @llvm.ctpop.i32(i32 %11163)
  %11165 = trunc i32 %11164 to i8
  %11166 = and i8 %11165, 1
  %11167 = xor i8 %11166, 1
  store i8 %11167, i8* %13, align 1
  store i8 0, i8* %15, align 1
  store i8 1, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %11168 = add i64 %11154, -2306
  %11169 = add i64 %11153, 18
  store i64 %11169, i64* %3, align 8
  %11170 = inttoptr i64 %11168 to i8*
  store i8 %11162, i8* %11170, align 1
  %.pre395 = load i64, i64* %3, align 8
  br label %block_.L_405b1a

block_.L_405b1a:                                  ; preds = %block_.L_405af4, %block_405b08
  %11171 = phi i64 [ %11146, %block_.L_405af4 ], [ %.pre395, %block_405b08 ]
  %11172 = load i64, i64* %RBP.i, align 8
  %11173 = add i64 %11172, -2306
  %11174 = add i64 %11171, 6
  store i64 %11174, i64* %3, align 8
  %11175 = inttoptr i64 %11173 to i8*
  %11176 = load i8, i8* %11175, align 1
  store i8 %11176, i8* %AL.i, align 1
  %11177 = and i8 %11176, 1
  store i8 0, i8* %12, align 1
  %11178 = zext i8 %11177 to i32
  %11179 = tail call i32 @llvm.ctpop.i32(i32 %11178)
  %11180 = trunc i32 %11179 to i8
  %11181 = xor i8 %11180, 1
  store i8 %11181, i8* %13, align 1
  %11182 = xor i8 %11177, 1
  store i8 %11182, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %11183 = icmp eq i8 %11182, 0
  %.v458 = select i1 %11183, i64 19, i64 14
  %11184 = add i64 %11171, %.v458
  store i64 %11184, i64* %3, align 8
  br i1 %11183, label %block_.L_405b2d, label %block_405b28

block_405b28:                                     ; preds = %block_.L_405b1a
  %11185 = add i64 %11172, -16
  %11186 = add i64 %11184, 377
  store i64 %11186, i64* %3, align 8
  %11187 = inttoptr i64 %11185 to i32*
  %11188 = load i32, i32* %11187, align 4
  %11189 = add i32 %11188, 1
  %11190 = zext i32 %11189 to i64
  store i64 %11190, i64* %RAX.i552, align 8
  %11191 = icmp eq i32 %11188, -1
  %11192 = icmp eq i32 %11189, 0
  %11193 = or i1 %11191, %11192
  %11194 = zext i1 %11193 to i8
  store i8 %11194, i8* %12, align 1
  %11195 = and i32 %11189, 255
  %11196 = tail call i32 @llvm.ctpop.i32(i32 %11195)
  %11197 = trunc i32 %11196 to i8
  %11198 = and i8 %11197, 1
  %11199 = xor i8 %11198, 1
  store i8 %11199, i8* %13, align 1
  %11200 = xor i32 %11189, %11188
  %11201 = lshr i32 %11200, 4
  %11202 = trunc i32 %11201 to i8
  %11203 = and i8 %11202, 1
  store i8 %11203, i8* %14, align 1
  %11204 = zext i1 %11192 to i8
  store i8 %11204, i8* %15, align 1
  %11205 = lshr i32 %11189, 31
  %11206 = trunc i32 %11205 to i8
  store i8 %11206, i8* %16, align 1
  %11207 = lshr i32 %11188, 31
  %11208 = xor i32 %11205, %11207
  %11209 = add nuw nsw i32 %11208, %11205
  %11210 = icmp eq i32 %11209, 2
  %11211 = zext i1 %11210 to i8
  store i8 %11211, i8* %17, align 1
  %11212 = add i64 %11184, 383
  store i64 %11212, i64* %3, align 8
  store i32 %11189, i32* %11187, align 4
  %11213 = load i64, i64* %3, align 8
  %11214 = add i64 %11213, -2037
  store i64 %11214, i64* %3, align 8
  br label %block_.L_4054b2

block_.L_405b2d:                                  ; preds = %block_.L_405b1a
  %11215 = add i64 %11172, -12
  %11216 = add i64 %11184, 7
  store i64 %11216, i64* %3, align 8
  %11217 = inttoptr i64 %11215 to i32*
  store i32 0, i32* %11217, align 4
  %.pre396 = load i64, i64* %3, align 8
  br label %block_.L_405b34

block_.L_405b34:                                  ; preds = %block_405b3e, %block_.L_405b2d
  %11218 = phi i64 [ %11398, %block_405b3e ], [ %.pre396, %block_.L_405b2d ]
  %11219 = load i64, i64* %RBP.i, align 8
  %11220 = add i64 %11219, -12
  %11221 = add i64 %11218, 4
  store i64 %11221, i64* %3, align 8
  %11222 = inttoptr i64 %11220 to i32*
  %11223 = load i32, i32* %11222, align 4
  %11224 = add i32 %11223, -4
  %11225 = icmp ult i32 %11223, 4
  %11226 = zext i1 %11225 to i8
  store i8 %11226, i8* %12, align 1
  %11227 = and i32 %11224, 255
  %11228 = tail call i32 @llvm.ctpop.i32(i32 %11227)
  %11229 = trunc i32 %11228 to i8
  %11230 = and i8 %11229, 1
  %11231 = xor i8 %11230, 1
  store i8 %11231, i8* %13, align 1
  %11232 = xor i32 %11224, %11223
  %11233 = lshr i32 %11232, 4
  %11234 = trunc i32 %11233 to i8
  %11235 = and i8 %11234, 1
  store i8 %11235, i8* %14, align 1
  %11236 = icmp eq i32 %11224, 0
  %11237 = zext i1 %11236 to i8
  store i8 %11237, i8* %15, align 1
  %11238 = lshr i32 %11224, 31
  %11239 = trunc i32 %11238 to i8
  store i8 %11239, i8* %16, align 1
  %11240 = lshr i32 %11223, 31
  %11241 = xor i32 %11238, %11240
  %11242 = add nuw nsw i32 %11241, %11240
  %11243 = icmp eq i32 %11242, 2
  %11244 = zext i1 %11243 to i8
  store i8 %11244, i8* %17, align 1
  %11245 = icmp ne i8 %11239, 0
  %11246 = xor i1 %11245, %11243
  %.v488 = select i1 %11246, i64 10, i64 82
  %11247 = add i64 %11218, %.v488
  store i64 %11247, i64* %3, align 8
  br i1 %11246, label %block_405b3e, label %block_.L_405b86

block_405b3e:                                     ; preds = %block_.L_405b34
  %11248 = add i64 %11219, -2176
  store i64 %11248, i64* %RAX.i552, align 8
  %11249 = add i64 %11219, -8
  %11250 = add i64 %11247, 11
  store i64 %11250, i64* %3, align 8
  %11251 = inttoptr i64 %11249 to i32*
  %11252 = load i32, i32* %11251, align 4
  %11253 = sext i32 %11252 to i64
  %11254 = shl nsw i64 %11253, 8
  store i64 %11254, i64* %RCX.i4476, align 8
  %11255 = add i64 %11254, %11248
  store i64 %11255, i64* %RAX.i552, align 8
  %11256 = icmp ult i64 %11255, %11248
  %11257 = icmp ult i64 %11255, %11254
  %11258 = or i1 %11256, %11257
  %11259 = zext i1 %11258 to i8
  store i8 %11259, i8* %12, align 1
  %11260 = trunc i64 %11255 to i32
  %11261 = and i32 %11260, 255
  %11262 = tail call i32 @llvm.ctpop.i32(i32 %11261)
  %11263 = trunc i32 %11262 to i8
  %11264 = and i8 %11263, 1
  %11265 = xor i8 %11264, 1
  store i8 %11265, i8* %13, align 1
  %11266 = xor i64 %11248, %11255
  %11267 = lshr i64 %11266, 4
  %11268 = trunc i64 %11267 to i8
  %11269 = and i8 %11268, 1
  store i8 %11269, i8* %14, align 1
  %11270 = icmp eq i64 %11255, 0
  %11271 = zext i1 %11270 to i8
  store i8 %11271, i8* %15, align 1
  %11272 = lshr i64 %11255, 63
  %11273 = trunc i64 %11272 to i8
  store i8 %11273, i8* %16, align 1
  %11274 = lshr i64 %11248, 63
  %11275 = lshr i64 %11253, 55
  %11276 = and i64 %11275, 1
  %11277 = xor i64 %11272, %11274
  %11278 = xor i64 %11272, %11276
  %11279 = add nuw nsw i64 %11277, %11278
  %11280 = icmp eq i64 %11279, 2
  %11281 = zext i1 %11280 to i8
  store i8 %11281, i8* %17, align 1
  %11282 = add i64 %11219, -16
  %11283 = add i64 %11247, 22
  store i64 %11283, i64* %3, align 8
  %11284 = inttoptr i64 %11282 to i32*
  %11285 = load i32, i32* %11284, align 4
  %11286 = sext i32 %11285 to i64
  %11287 = shl nsw i64 %11286, 6
  store i64 %11287, i64* %RCX.i4476, align 8
  %11288 = add i64 %11287, %11255
  store i64 %11288, i64* %RAX.i552, align 8
  %11289 = icmp ult i64 %11288, %11255
  %11290 = icmp ult i64 %11288, %11287
  %11291 = or i1 %11289, %11290
  %11292 = zext i1 %11291 to i8
  store i8 %11292, i8* %12, align 1
  %11293 = trunc i64 %11288 to i32
  %11294 = and i32 %11293, 255
  %11295 = tail call i32 @llvm.ctpop.i32(i32 %11294)
  %11296 = trunc i32 %11295 to i8
  %11297 = and i8 %11296, 1
  %11298 = xor i8 %11297, 1
  store i8 %11298, i8* %13, align 1
  %11299 = xor i64 %11255, %11288
  %11300 = lshr i64 %11299, 4
  %11301 = trunc i64 %11300 to i8
  %11302 = and i8 %11301, 1
  store i8 %11302, i8* %14, align 1
  %11303 = icmp eq i64 %11288, 0
  %11304 = zext i1 %11303 to i8
  store i8 %11304, i8* %15, align 1
  %11305 = lshr i64 %11288, 63
  %11306 = trunc i64 %11305 to i8
  store i8 %11306, i8* %16, align 1
  %11307 = lshr i64 %11286, 57
  %11308 = and i64 %11307, 1
  %11309 = xor i64 %11305, %11272
  %11310 = xor i64 %11305, %11308
  %11311 = add nuw nsw i64 %11309, %11310
  %11312 = icmp eq i64 %11311, 2
  %11313 = zext i1 %11312 to i8
  store i8 %11313, i8* %17, align 1
  %11314 = load i64, i64* %RBP.i, align 8
  %11315 = add i64 %11314, -12
  %11316 = add i64 %11247, 33
  store i64 %11316, i64* %3, align 8
  %11317 = inttoptr i64 %11315 to i32*
  %11318 = load i32, i32* %11317, align 4
  %11319 = sext i32 %11318 to i64
  %11320 = shl nsw i64 %11319, 4
  store i64 %11320, i64* %RCX.i4476, align 8
  %11321 = add i64 %11320, %11288
  store i64 %11321, i64* %RAX.i552, align 8
  %11322 = icmp ult i64 %11321, %11288
  %11323 = icmp ult i64 %11321, %11320
  %11324 = or i1 %11322, %11323
  %11325 = zext i1 %11324 to i8
  store i8 %11325, i8* %12, align 1
  %11326 = trunc i64 %11321 to i32
  %11327 = and i32 %11326, 255
  %11328 = tail call i32 @llvm.ctpop.i32(i32 %11327)
  %11329 = trunc i32 %11328 to i8
  %11330 = and i8 %11329, 1
  %11331 = xor i8 %11330, 1
  store i8 %11331, i8* %13, align 1
  %11332 = xor i64 %11320, %11288
  %11333 = xor i64 %11332, %11321
  %11334 = lshr i64 %11333, 4
  %11335 = trunc i64 %11334 to i8
  %11336 = and i8 %11335, 1
  store i8 %11336, i8* %14, align 1
  %11337 = icmp eq i64 %11321, 0
  %11338 = zext i1 %11337 to i8
  store i8 %11338, i8* %15, align 1
  %11339 = lshr i64 %11321, 63
  %11340 = trunc i64 %11339 to i8
  store i8 %11340, i8* %16, align 1
  %11341 = lshr i64 %11319, 59
  %11342 = and i64 %11341, 1
  %11343 = xor i64 %11339, %11305
  %11344 = xor i64 %11339, %11342
  %11345 = add nuw nsw i64 %11343, %11344
  %11346 = icmp eq i64 %11345, 2
  %11347 = zext i1 %11346 to i8
  store i8 %11347, i8* %17, align 1
  %11348 = add i64 %11314, -20
  %11349 = add i64 %11247, 44
  store i64 %11349, i64* %3, align 8
  %11350 = inttoptr i64 %11348 to i32*
  %11351 = load i32, i32* %11350, align 4
  %11352 = sext i32 %11351 to i64
  store i64 %11352, i64* %RCX.i4476, align 8
  %11353 = shl nsw i64 %11352, 2
  %11354 = add i64 %11353, %11321
  %11355 = add i64 %11247, 47
  store i64 %11355, i64* %3, align 8
  %11356 = inttoptr i64 %11354 to i32*
  %11357 = load i32, i32* %11356, align 4
  %11358 = zext i32 %11357 to i64
  store i64 %11358, i64* %RDX.i658, align 8
  %11359 = add i64 %11247, 51
  store i64 %11359, i64* %3, align 8
  %11360 = load i32, i32* %11317, align 4
  %11361 = sext i32 %11360 to i64
  store i64 %11361, i64* %RAX.i552, align 8
  %11362 = shl nsw i64 %11361, 2
  %11363 = add i64 %11314, -1136
  %11364 = add i64 %11363, %11362
  %11365 = add i64 %11247, 58
  store i64 %11365, i64* %3, align 8
  %11366 = inttoptr i64 %11364 to i32*
  store i32 %11357, i32* %11366, align 4
  %11367 = load i64, i64* %RBP.i, align 8
  %11368 = add i64 %11367, -12
  %11369 = load i64, i64* %3, align 8
  %11370 = add i64 %11369, 3
  store i64 %11370, i64* %3, align 8
  %11371 = inttoptr i64 %11368 to i32*
  %11372 = load i32, i32* %11371, align 4
  %11373 = add i32 %11372, 1
  %11374 = zext i32 %11373 to i64
  store i64 %11374, i64* %RAX.i552, align 8
  %11375 = icmp eq i32 %11372, -1
  %11376 = icmp eq i32 %11373, 0
  %11377 = or i1 %11375, %11376
  %11378 = zext i1 %11377 to i8
  store i8 %11378, i8* %12, align 1
  %11379 = and i32 %11373, 255
  %11380 = tail call i32 @llvm.ctpop.i32(i32 %11379)
  %11381 = trunc i32 %11380 to i8
  %11382 = and i8 %11381, 1
  %11383 = xor i8 %11382, 1
  store i8 %11383, i8* %13, align 1
  %11384 = xor i32 %11373, %11372
  %11385 = lshr i32 %11384, 4
  %11386 = trunc i32 %11385 to i8
  %11387 = and i8 %11386, 1
  store i8 %11387, i8* %14, align 1
  %11388 = zext i1 %11376 to i8
  store i8 %11388, i8* %15, align 1
  %11389 = lshr i32 %11373, 31
  %11390 = trunc i32 %11389 to i8
  store i8 %11390, i8* %16, align 1
  %11391 = lshr i32 %11372, 31
  %11392 = xor i32 %11389, %11391
  %11393 = add nuw nsw i32 %11392, %11389
  %11394 = icmp eq i32 %11393, 2
  %11395 = zext i1 %11394 to i8
  store i8 %11395, i8* %17, align 1
  %11396 = add i64 %11369, 9
  store i64 %11396, i64* %3, align 8
  store i32 %11373, i32* %11371, align 4
  %11397 = load i64, i64* %3, align 8
  %11398 = add i64 %11397, -77
  store i64 %11398, i64* %3, align 8
  br label %block_.L_405b34

block_.L_405b86:                                  ; preds = %block_.L_405b34
  %11399 = add i64 %11219, -1136
  %11400 = add i64 %11247, 6
  store i64 %11400, i64* %3, align 8
  %11401 = inttoptr i64 %11399 to i32*
  %11402 = load i32, i32* %11401, align 4
  %11403 = zext i32 %11402 to i64
  store i64 %11403, i64* %RAX.i552, align 8
  %11404 = add i64 %11219, -1128
  %11405 = add i64 %11247, 12
  store i64 %11405, i64* %3, align 8
  %11406 = inttoptr i64 %11404 to i32*
  %11407 = load i32, i32* %11406, align 4
  %11408 = add i32 %11407, %11402
  %11409 = zext i32 %11408 to i64
  store i64 %11409, i64* %RAX.i552, align 8
  %11410 = icmp ult i32 %11408, %11402
  %11411 = icmp ult i32 %11408, %11407
  %11412 = or i1 %11410, %11411
  %11413 = zext i1 %11412 to i8
  store i8 %11413, i8* %12, align 1
  %11414 = and i32 %11408, 255
  %11415 = tail call i32 @llvm.ctpop.i32(i32 %11414)
  %11416 = trunc i32 %11415 to i8
  %11417 = and i8 %11416, 1
  %11418 = xor i8 %11417, 1
  store i8 %11418, i8* %13, align 1
  %11419 = xor i32 %11407, %11402
  %11420 = xor i32 %11419, %11408
  %11421 = lshr i32 %11420, 4
  %11422 = trunc i32 %11421 to i8
  %11423 = and i8 %11422, 1
  store i8 %11423, i8* %14, align 1
  %11424 = icmp eq i32 %11408, 0
  %11425 = zext i1 %11424 to i8
  store i8 %11425, i8* %15, align 1
  %11426 = lshr i32 %11408, 31
  %11427 = trunc i32 %11426 to i8
  store i8 %11427, i8* %16, align 1
  %11428 = lshr i32 %11402, 31
  %11429 = lshr i32 %11407, 31
  %11430 = xor i32 %11426, %11428
  %11431 = xor i32 %11426, %11429
  %11432 = add nuw nsw i32 %11430, %11431
  %11433 = icmp eq i32 %11432, 2
  %11434 = zext i1 %11433 to i8
  store i8 %11434, i8* %17, align 1
  %11435 = add i64 %11219, -1152
  %11436 = add i64 %11247, 18
  store i64 %11436, i64* %3, align 8
  %11437 = inttoptr i64 %11435 to i32*
  store i32 %11408, i32* %11437, align 4
  %11438 = load i64, i64* %RBP.i, align 8
  %11439 = add i64 %11438, -1136
  %11440 = load i64, i64* %3, align 8
  %11441 = add i64 %11440, 6
  store i64 %11441, i64* %3, align 8
  %11442 = inttoptr i64 %11439 to i32*
  %11443 = load i32, i32* %11442, align 4
  %11444 = zext i32 %11443 to i64
  store i64 %11444, i64* %RAX.i552, align 8
  %11445 = add i64 %11438, -1128
  %11446 = add i64 %11440, 12
  store i64 %11446, i64* %3, align 8
  %11447 = inttoptr i64 %11445 to i32*
  %11448 = load i32, i32* %11447, align 4
  %11449 = sub i32 %11443, %11448
  %11450 = zext i32 %11449 to i64
  store i64 %11450, i64* %RAX.i552, align 8
  %11451 = icmp ult i32 %11443, %11448
  %11452 = zext i1 %11451 to i8
  store i8 %11452, i8* %12, align 1
  %11453 = and i32 %11449, 255
  %11454 = tail call i32 @llvm.ctpop.i32(i32 %11453)
  %11455 = trunc i32 %11454 to i8
  %11456 = and i8 %11455, 1
  %11457 = xor i8 %11456, 1
  store i8 %11457, i8* %13, align 1
  %11458 = xor i32 %11448, %11443
  %11459 = xor i32 %11458, %11449
  %11460 = lshr i32 %11459, 4
  %11461 = trunc i32 %11460 to i8
  %11462 = and i8 %11461, 1
  store i8 %11462, i8* %14, align 1
  %11463 = icmp eq i32 %11449, 0
  %11464 = zext i1 %11463 to i8
  store i8 %11464, i8* %15, align 1
  %11465 = lshr i32 %11449, 31
  %11466 = trunc i32 %11465 to i8
  store i8 %11466, i8* %16, align 1
  %11467 = lshr i32 %11443, 31
  %11468 = lshr i32 %11448, 31
  %11469 = xor i32 %11468, %11467
  %11470 = xor i32 %11465, %11467
  %11471 = add nuw nsw i32 %11470, %11469
  %11472 = icmp eq i32 %11471, 2
  %11473 = zext i1 %11472 to i8
  store i8 %11473, i8* %17, align 1
  %11474 = add i64 %11438, -1148
  %11475 = add i64 %11440, 18
  store i64 %11475, i64* %3, align 8
  %11476 = inttoptr i64 %11474 to i32*
  store i32 %11449, i32* %11476, align 4
  %11477 = load i64, i64* %RBP.i, align 8
  %11478 = add i64 %11477, -1132
  %11479 = load i64, i64* %3, align 8
  %11480 = add i64 %11479, 6
  store i64 %11480, i64* %3, align 8
  %11481 = inttoptr i64 %11478 to i32*
  %11482 = load i32, i32* %11481, align 4
  %11483 = zext i32 %11482 to i64
  %11484 = shl nuw i64 %11483, 32
  %11485 = ashr i64 %11484, 33
  %11486 = trunc i32 %11482 to i8
  %11487 = and i8 %11486, 1
  %11488 = trunc i64 %11485 to i32
  %11489 = and i64 %11485, 4294967295
  store i64 %11489, i64* %RAX.i552, align 8
  store i8 %11487, i8* %12, align 1
  %11490 = and i32 %11488, 255
  %11491 = tail call i32 @llvm.ctpop.i32(i32 %11490)
  %11492 = trunc i32 %11491 to i8
  %11493 = and i8 %11492, 1
  %11494 = xor i8 %11493, 1
  store i8 %11494, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %11495 = icmp eq i32 %11488, 0
  %11496 = zext i1 %11495 to i8
  store i8 %11496, i8* %15, align 1
  %11497 = lshr i64 %11485, 31
  %11498 = trunc i64 %11497 to i8
  %11499 = and i8 %11498, 1
  store i8 %11499, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %11500 = add i64 %11477, -1124
  %11501 = add i64 %11479, 14
  store i64 %11501, i64* %3, align 8
  %11502 = trunc i64 %11485 to i32
  %11503 = inttoptr i64 %11500 to i32*
  %11504 = load i32, i32* %11503, align 4
  %11505 = sub i32 %11502, %11504
  %11506 = zext i32 %11505 to i64
  store i64 %11506, i64* %RAX.i552, align 8
  %11507 = icmp ult i32 %11502, %11504
  %11508 = zext i1 %11507 to i8
  store i8 %11508, i8* %12, align 1
  %11509 = and i32 %11505, 255
  %11510 = tail call i32 @llvm.ctpop.i32(i32 %11509)
  %11511 = trunc i32 %11510 to i8
  %11512 = and i8 %11511, 1
  %11513 = xor i8 %11512, 1
  store i8 %11513, i8* %13, align 1
  %11514 = xor i32 %11504, %11502
  %11515 = xor i32 %11514, %11505
  %11516 = lshr i32 %11515, 4
  %11517 = trunc i32 %11516 to i8
  %11518 = and i8 %11517, 1
  store i8 %11518, i8* %14, align 1
  %11519 = icmp eq i32 %11505, 0
  %11520 = zext i1 %11519 to i8
  store i8 %11520, i8* %15, align 1
  %11521 = lshr i32 %11505, 31
  %11522 = trunc i32 %11521 to i8
  store i8 %11522, i8* %16, align 1
  %11523 = lshr i64 %11485, 31
  %11524 = trunc i64 %11523 to i32
  %11525 = and i32 %11524, 1
  %11526 = lshr i32 %11504, 31
  %11527 = xor i32 %11526, %11525
  %11528 = xor i32 %11521, %11525
  %11529 = add nuw nsw i32 %11528, %11527
  %11530 = icmp eq i32 %11529, 2
  %11531 = zext i1 %11530 to i8
  store i8 %11531, i8* %17, align 1
  %11532 = add i64 %11477, -1144
  %11533 = add i64 %11479, 20
  store i64 %11533, i64* %3, align 8
  %11534 = inttoptr i64 %11532 to i32*
  store i32 %11505, i32* %11534, align 4
  %11535 = load i64, i64* %RBP.i, align 8
  %11536 = add i64 %11535, -1132
  %11537 = load i64, i64* %3, align 8
  %11538 = add i64 %11537, 6
  store i64 %11538, i64* %3, align 8
  %11539 = inttoptr i64 %11536 to i32*
  %11540 = load i32, i32* %11539, align 4
  %11541 = zext i32 %11540 to i64
  store i64 %11541, i64* %RAX.i552, align 8
  %11542 = add i64 %11535, -1124
  %11543 = add i64 %11537, 12
  store i64 %11543, i64* %3, align 8
  %11544 = inttoptr i64 %11542 to i32*
  %11545 = load i32, i32* %11544, align 4
  %11546 = zext i32 %11545 to i64
  %11547 = shl nuw i64 %11546, 32
  %11548 = ashr i64 %11547, 33
  %11549 = and i64 %11548, 4294967295
  store i64 %11549, i64* %RCX.i4476, align 8
  %11550 = trunc i64 %11548 to i32
  %11551 = add i32 %11550, %11540
  %11552 = zext i32 %11551 to i64
  store i64 %11552, i64* %RAX.i552, align 8
  %11553 = icmp ult i32 %11551, %11540
  %11554 = icmp ult i32 %11551, %11550
  %11555 = or i1 %11553, %11554
  %11556 = zext i1 %11555 to i8
  store i8 %11556, i8* %12, align 1
  %11557 = and i32 %11551, 255
  %11558 = tail call i32 @llvm.ctpop.i32(i32 %11557)
  %11559 = trunc i32 %11558 to i8
  %11560 = and i8 %11559, 1
  %11561 = xor i8 %11560, 1
  store i8 %11561, i8* %13, align 1
  %11562 = xor i64 %11548, %11541
  %11563 = trunc i64 %11562 to i32
  %11564 = xor i32 %11563, %11551
  %11565 = lshr i32 %11564, 4
  %11566 = trunc i32 %11565 to i8
  %11567 = and i8 %11566, 1
  store i8 %11567, i8* %14, align 1
  %11568 = icmp eq i32 %11551, 0
  %11569 = zext i1 %11568 to i8
  store i8 %11569, i8* %15, align 1
  %11570 = lshr i32 %11551, 31
  %11571 = trunc i32 %11570 to i8
  store i8 %11571, i8* %16, align 1
  %11572 = lshr i32 %11540, 31
  %11573 = lshr i64 %11548, 31
  %11574 = trunc i64 %11573 to i32
  %11575 = and i32 %11574, 1
  %11576 = xor i32 %11570, %11572
  %11577 = xor i32 %11570, %11575
  %11578 = add nuw nsw i32 %11576, %11577
  %11579 = icmp eq i32 %11578, 2
  %11580 = zext i1 %11579 to i8
  store i8 %11580, i8* %17, align 1
  %11581 = add i64 %11535, -1140
  %11582 = add i64 %11537, 22
  store i64 %11582, i64* %3, align 8
  %11583 = inttoptr i64 %11581 to i32*
  store i32 %11551, i32* %11583, align 4
  %11584 = load i64, i64* %RBP.i, align 8
  %11585 = add i64 %11584, -12
  %11586 = load i64, i64* %3, align 8
  %11587 = add i64 %11586, 7
  store i64 %11587, i64* %3, align 8
  %11588 = inttoptr i64 %11585 to i32*
  store i32 0, i32* %11588, align 4
  %.pre397 = load i64, i64* %3, align 8
  br label %block_.L_405bdd

block_.L_405bdd:                                  ; preds = %block_405be7, %block_.L_405b86
  %11589 = phi i64 [ %12001, %block_405be7 ], [ %.pre397, %block_.L_405b86 ]
  %11590 = load i64, i64* %RBP.i, align 8
  %11591 = add i64 %11590, -12
  %11592 = add i64 %11589, 4
  store i64 %11592, i64* %3, align 8
  %11593 = inttoptr i64 %11591 to i32*
  %11594 = load i32, i32* %11593, align 4
  %11595 = add i32 %11594, -2
  %11596 = icmp ult i32 %11594, 2
  %11597 = zext i1 %11596 to i8
  store i8 %11597, i8* %12, align 1
  %11598 = and i32 %11595, 255
  %11599 = tail call i32 @llvm.ctpop.i32(i32 %11598)
  %11600 = trunc i32 %11599 to i8
  %11601 = and i8 %11600, 1
  %11602 = xor i8 %11601, 1
  store i8 %11602, i8* %13, align 1
  %11603 = xor i32 %11595, %11594
  %11604 = lshr i32 %11603, 4
  %11605 = trunc i32 %11604 to i8
  %11606 = and i8 %11605, 1
  store i8 %11606, i8* %14, align 1
  %11607 = icmp eq i32 %11595, 0
  %11608 = zext i1 %11607 to i8
  store i8 %11608, i8* %15, align 1
  %11609 = lshr i32 %11595, 31
  %11610 = trunc i32 %11609 to i8
  store i8 %11610, i8* %16, align 1
  %11611 = lshr i32 %11594, 31
  %11612 = xor i32 %11609, %11611
  %11613 = add nuw nsw i32 %11612, %11611
  %11614 = icmp eq i32 %11613, 2
  %11615 = zext i1 %11614 to i8
  store i8 %11615, i8* %17, align 1
  %11616 = icmp ne i8 %11610, 0
  %11617 = xor i1 %11616, %11614
  %.v459 = select i1 %11617, i64 10, i64 169
  %11618 = add i64 %11589, %.v459
  store i64 %11618, i64* %3, align 8
  br i1 %11617, label %block_405be7, label %block_.L_405c86

block_405be7:                                     ; preds = %block_.L_405bdd
  %11619 = add i64 %11590, -2176
  store i64 %11619, i64* %RAX.i552, align 8
  store i64 3, i64* %RCX.i4476, align 8
  %11620 = add i64 %11618, 15
  store i64 %11620, i64* %3, align 8
  %11621 = load i32, i32* %11593, align 4
  %11622 = sub i32 3, %11621
  %11623 = zext i32 %11622 to i64
  store i64 %11623, i64* %RCX.i4476, align 8
  %11624 = icmp ugt i32 %11621, 3
  %11625 = zext i1 %11624 to i8
  store i8 %11625, i8* %12, align 1
  %11626 = and i32 %11622, 255
  %11627 = tail call i32 @llvm.ctpop.i32(i32 %11626)
  %11628 = trunc i32 %11627 to i8
  %11629 = and i8 %11628, 1
  %11630 = xor i8 %11629, 1
  store i8 %11630, i8* %13, align 1
  %11631 = xor i32 %11622, %11621
  %11632 = lshr i32 %11631, 4
  %11633 = trunc i32 %11632 to i8
  %11634 = and i8 %11633, 1
  store i8 %11634, i8* %14, align 1
  %11635 = icmp eq i32 %11622, 0
  %11636 = zext i1 %11635 to i8
  store i8 %11636, i8* %15, align 1
  %11637 = lshr i32 %11622, 31
  %11638 = trunc i32 %11637 to i8
  store i8 %11638, i8* %16, align 1
  %11639 = lshr i32 %11621, 31
  %11640 = add nuw nsw i32 %11637, %11639
  %11641 = icmp eq i32 %11640, 2
  %11642 = zext i1 %11641 to i8
  store i8 %11642, i8* %17, align 1
  %11643 = add i64 %11590, -28
  %11644 = add i64 %11618, 18
  store i64 %11644, i64* %3, align 8
  %11645 = inttoptr i64 %11643 to i32*
  store i32 %11622, i32* %11645, align 4
  %11646 = load i64, i64* %RBP.i, align 8
  %11647 = add i64 %11646, -12
  %11648 = load i64, i64* %3, align 8
  %11649 = add i64 %11648, 4
  store i64 %11649, i64* %3, align 8
  %11650 = inttoptr i64 %11647 to i32*
  %11651 = load i32, i32* %11650, align 4
  %11652 = sext i32 %11651 to i64
  store i64 %11652, i64* %RDX.i658, align 8
  %11653 = shl nsw i64 %11652, 2
  %11654 = add i64 %11646, -1152
  %11655 = add i64 %11654, %11653
  %11656 = add i64 %11648, 11
  store i64 %11656, i64* %3, align 8
  %11657 = inttoptr i64 %11655 to i32*
  %11658 = load i32, i32* %11657, align 4
  %11659 = zext i32 %11658 to i64
  store i64 %11659, i64* %RCX.i4476, align 8
  %11660 = add i64 %11646, -28
  %11661 = add i64 %11648, 15
  store i64 %11661, i64* %3, align 8
  %11662 = inttoptr i64 %11660 to i32*
  %11663 = load i32, i32* %11662, align 4
  %11664 = sext i32 %11663 to i64
  store i64 %11664, i64* %RDX.i658, align 8
  %11665 = shl nsw i64 %11664, 2
  %11666 = add nsw i64 %11665, -1152
  %11667 = add i64 %11666, %11646
  %11668 = add i64 %11648, 22
  store i64 %11668, i64* %3, align 8
  %11669 = inttoptr i64 %11667 to i32*
  %11670 = load i32, i32* %11669, align 4
  %11671 = add i32 %11670, %11658
  %11672 = zext i32 %11671 to i64
  store i64 %11672, i64* %RCX.i4476, align 8
  %11673 = icmp ult i32 %11671, %11658
  %11674 = icmp ult i32 %11671, %11670
  %11675 = or i1 %11673, %11674
  %11676 = zext i1 %11675 to i8
  store i8 %11676, i8* %12, align 1
  %11677 = and i32 %11671, 255
  %11678 = tail call i32 @llvm.ctpop.i32(i32 %11677)
  %11679 = trunc i32 %11678 to i8
  %11680 = and i8 %11679, 1
  %11681 = xor i8 %11680, 1
  store i8 %11681, i8* %13, align 1
  %11682 = xor i32 %11670, %11658
  %11683 = xor i32 %11682, %11671
  %11684 = lshr i32 %11683, 4
  %11685 = trunc i32 %11684 to i8
  %11686 = and i8 %11685, 1
  store i8 %11686, i8* %14, align 1
  %11687 = icmp eq i32 %11671, 0
  %11688 = zext i1 %11687 to i8
  store i8 %11688, i8* %15, align 1
  %11689 = lshr i32 %11671, 31
  %11690 = trunc i32 %11689 to i8
  store i8 %11690, i8* %16, align 1
  %11691 = lshr i32 %11658, 31
  %11692 = lshr i32 %11670, 31
  %11693 = xor i32 %11689, %11691
  %11694 = xor i32 %11689, %11692
  %11695 = add nuw nsw i32 %11693, %11694
  %11696 = icmp eq i32 %11695, 2
  %11697 = zext i1 %11696 to i8
  store i8 %11697, i8* %17, align 1
  %11698 = add i64 %11646, -8
  %11699 = add i64 %11648, 26
  store i64 %11699, i64* %3, align 8
  %11700 = inttoptr i64 %11698 to i32*
  %11701 = load i32, i32* %11700, align 4
  %11702 = sext i32 %11701 to i64
  %11703 = shl nsw i64 %11702, 8
  store i64 %11703, i64* %RDX.i658, align 8
  %11704 = load i64, i64* %RAX.i552, align 8
  %11705 = add i64 %11703, %11704
  store i64 %11705, i64* %RSI.i757, align 8
  %11706 = icmp ult i64 %11705, %11704
  %11707 = icmp ult i64 %11705, %11703
  %11708 = or i1 %11706, %11707
  %11709 = zext i1 %11708 to i8
  store i8 %11709, i8* %12, align 1
  %11710 = trunc i64 %11705 to i32
  %11711 = and i32 %11710, 255
  %11712 = tail call i32 @llvm.ctpop.i32(i32 %11711)
  %11713 = trunc i32 %11712 to i8
  %11714 = and i8 %11713, 1
  %11715 = xor i8 %11714, 1
  store i8 %11715, i8* %13, align 1
  %11716 = xor i64 %11704, %11705
  %11717 = lshr i64 %11716, 4
  %11718 = trunc i64 %11717 to i8
  %11719 = and i8 %11718, 1
  store i8 %11719, i8* %14, align 1
  %11720 = icmp eq i64 %11705, 0
  %11721 = zext i1 %11720 to i8
  store i8 %11721, i8* %15, align 1
  %11722 = lshr i64 %11705, 63
  %11723 = trunc i64 %11722 to i8
  store i8 %11723, i8* %16, align 1
  %11724 = lshr i64 %11704, 63
  %11725 = lshr i64 %11702, 55
  %11726 = and i64 %11725, 1
  %11727 = xor i64 %11722, %11724
  %11728 = xor i64 %11722, %11726
  %11729 = add nuw nsw i64 %11727, %11728
  %11730 = icmp eq i64 %11729, 2
  %11731 = zext i1 %11730 to i8
  store i8 %11731, i8* %17, align 1
  %11732 = load i64, i64* %RBP.i, align 8
  %11733 = add i64 %11732, -16
  %11734 = add i64 %11648, 40
  store i64 %11734, i64* %3, align 8
  %11735 = inttoptr i64 %11733 to i32*
  %11736 = load i32, i32* %11735, align 4
  %11737 = sext i32 %11736 to i64
  %11738 = shl nsw i64 %11737, 6
  store i64 %11738, i64* %RDX.i658, align 8
  %11739 = add i64 %11738, %11705
  store i64 %11739, i64* %RSI.i757, align 8
  %11740 = icmp ult i64 %11739, %11705
  %11741 = icmp ult i64 %11739, %11738
  %11742 = or i1 %11740, %11741
  %11743 = zext i1 %11742 to i8
  store i8 %11743, i8* %12, align 1
  %11744 = trunc i64 %11739 to i32
  %11745 = and i32 %11744, 255
  %11746 = tail call i32 @llvm.ctpop.i32(i32 %11745)
  %11747 = trunc i32 %11746 to i8
  %11748 = and i8 %11747, 1
  %11749 = xor i8 %11748, 1
  store i8 %11749, i8* %13, align 1
  %11750 = xor i64 %11705, %11739
  %11751 = lshr i64 %11750, 4
  %11752 = trunc i64 %11751 to i8
  %11753 = and i8 %11752, 1
  store i8 %11753, i8* %14, align 1
  %11754 = icmp eq i64 %11739, 0
  %11755 = zext i1 %11754 to i8
  store i8 %11755, i8* %15, align 1
  %11756 = lshr i64 %11739, 63
  %11757 = trunc i64 %11756 to i8
  store i8 %11757, i8* %16, align 1
  %11758 = lshr i64 %11737, 57
  %11759 = and i64 %11758, 1
  %11760 = xor i64 %11756, %11722
  %11761 = xor i64 %11756, %11759
  %11762 = add nuw nsw i64 %11760, %11761
  %11763 = icmp eq i64 %11762, 2
  %11764 = zext i1 %11763 to i8
  store i8 %11764, i8* %17, align 1
  %11765 = add i64 %11732, -12
  %11766 = add i64 %11648, 51
  store i64 %11766, i64* %3, align 8
  %11767 = inttoptr i64 %11765 to i32*
  %11768 = load i32, i32* %11767, align 4
  %11769 = sext i32 %11768 to i64
  %11770 = shl nsw i64 %11769, 4
  store i64 %11770, i64* %RDX.i658, align 8
  %11771 = add i64 %11770, %11739
  store i64 %11771, i64* %RSI.i757, align 8
  %11772 = icmp ult i64 %11771, %11739
  %11773 = icmp ult i64 %11771, %11770
  %11774 = or i1 %11772, %11773
  %11775 = zext i1 %11774 to i8
  store i8 %11775, i8* %12, align 1
  %11776 = trunc i64 %11771 to i32
  %11777 = and i32 %11776, 255
  %11778 = tail call i32 @llvm.ctpop.i32(i32 %11777)
  %11779 = trunc i32 %11778 to i8
  %11780 = and i8 %11779, 1
  %11781 = xor i8 %11780, 1
  store i8 %11781, i8* %13, align 1
  %11782 = xor i64 %11770, %11739
  %11783 = xor i64 %11782, %11771
  %11784 = lshr i64 %11783, 4
  %11785 = trunc i64 %11784 to i8
  %11786 = and i8 %11785, 1
  store i8 %11786, i8* %14, align 1
  %11787 = icmp eq i64 %11771, 0
  %11788 = zext i1 %11787 to i8
  store i8 %11788, i8* %15, align 1
  %11789 = lshr i64 %11771, 63
  %11790 = trunc i64 %11789 to i8
  store i8 %11790, i8* %16, align 1
  %11791 = lshr i64 %11769, 59
  %11792 = and i64 %11791, 1
  %11793 = xor i64 %11789, %11756
  %11794 = xor i64 %11789, %11792
  %11795 = add nuw nsw i64 %11793, %11794
  %11796 = icmp eq i64 %11795, 2
  %11797 = zext i1 %11796 to i8
  store i8 %11797, i8* %17, align 1
  %11798 = load i64, i64* %RBP.i, align 8
  %11799 = add i64 %11798, -20
  %11800 = add i64 %11648, 62
  store i64 %11800, i64* %3, align 8
  %11801 = inttoptr i64 %11799 to i32*
  %11802 = load i32, i32* %11801, align 4
  %11803 = sext i32 %11802 to i64
  store i64 %11803, i64* %RDX.i658, align 8
  %11804 = shl nsw i64 %11803, 2
  %11805 = add i64 %11804, %11771
  %11806 = load i32, i32* %ECX.i4446, align 4
  %11807 = add i64 %11648, 65
  store i64 %11807, i64* %3, align 8
  %11808 = inttoptr i64 %11805 to i32*
  store i32 %11806, i32* %11808, align 4
  %11809 = load i64, i64* %RBP.i, align 8
  %11810 = add i64 %11809, -12
  %11811 = load i64, i64* %3, align 8
  %11812 = add i64 %11811, 4
  store i64 %11812, i64* %3, align 8
  %11813 = inttoptr i64 %11810 to i32*
  %11814 = load i32, i32* %11813, align 4
  %11815 = sext i32 %11814 to i64
  store i64 %11815, i64* %RDX.i658, align 8
  %11816 = shl nsw i64 %11815, 2
  %11817 = add i64 %11809, -1152
  %11818 = add i64 %11817, %11816
  %11819 = add i64 %11811, 11
  store i64 %11819, i64* %3, align 8
  %11820 = inttoptr i64 %11818 to i32*
  %11821 = load i32, i32* %11820, align 4
  %11822 = zext i32 %11821 to i64
  store i64 %11822, i64* %RCX.i4476, align 8
  %11823 = add i64 %11809, -28
  %11824 = add i64 %11811, 15
  store i64 %11824, i64* %3, align 8
  %11825 = inttoptr i64 %11823 to i32*
  %11826 = load i32, i32* %11825, align 4
  %11827 = sext i32 %11826 to i64
  store i64 %11827, i64* %RDX.i658, align 8
  %11828 = shl nsw i64 %11827, 2
  %11829 = add nsw i64 %11828, -1152
  %11830 = add i64 %11829, %11809
  %11831 = add i64 %11811, 22
  store i64 %11831, i64* %3, align 8
  %11832 = inttoptr i64 %11830 to i32*
  %11833 = load i32, i32* %11832, align 4
  %11834 = sub i32 %11821, %11833
  %11835 = zext i32 %11834 to i64
  store i64 %11835, i64* %RCX.i4476, align 8
  %11836 = icmp ult i32 %11821, %11833
  %11837 = zext i1 %11836 to i8
  store i8 %11837, i8* %12, align 1
  %11838 = and i32 %11834, 255
  %11839 = tail call i32 @llvm.ctpop.i32(i32 %11838)
  %11840 = trunc i32 %11839 to i8
  %11841 = and i8 %11840, 1
  %11842 = xor i8 %11841, 1
  store i8 %11842, i8* %13, align 1
  %11843 = xor i32 %11833, %11821
  %11844 = xor i32 %11843, %11834
  %11845 = lshr i32 %11844, 4
  %11846 = trunc i32 %11845 to i8
  %11847 = and i8 %11846, 1
  store i8 %11847, i8* %14, align 1
  %11848 = icmp eq i32 %11834, 0
  %11849 = zext i1 %11848 to i8
  store i8 %11849, i8* %15, align 1
  %11850 = lshr i32 %11834, 31
  %11851 = trunc i32 %11850 to i8
  store i8 %11851, i8* %16, align 1
  %11852 = lshr i32 %11821, 31
  %11853 = lshr i32 %11833, 31
  %11854 = xor i32 %11853, %11852
  %11855 = xor i32 %11850, %11852
  %11856 = add nuw nsw i32 %11855, %11854
  %11857 = icmp eq i32 %11856, 2
  %11858 = zext i1 %11857 to i8
  store i8 %11858, i8* %17, align 1
  %11859 = add i64 %11809, -8
  %11860 = add i64 %11811, 26
  store i64 %11860, i64* %3, align 8
  %11861 = inttoptr i64 %11859 to i32*
  %11862 = load i32, i32* %11861, align 4
  %11863 = sext i32 %11862 to i64
  %11864 = shl nsw i64 %11863, 8
  store i64 %11864, i64* %RDX.i658, align 8
  %11865 = load i64, i64* %RAX.i552, align 8
  %11866 = add i64 %11864, %11865
  store i64 %11866, i64* %RAX.i552, align 8
  %11867 = icmp ult i64 %11866, %11865
  %11868 = icmp ult i64 %11866, %11864
  %11869 = or i1 %11867, %11868
  %11870 = zext i1 %11869 to i8
  store i8 %11870, i8* %12, align 1
  %11871 = trunc i64 %11866 to i32
  %11872 = and i32 %11871, 255
  %11873 = tail call i32 @llvm.ctpop.i32(i32 %11872)
  %11874 = trunc i32 %11873 to i8
  %11875 = and i8 %11874, 1
  %11876 = xor i8 %11875, 1
  store i8 %11876, i8* %13, align 1
  %11877 = xor i64 %11865, %11866
  %11878 = lshr i64 %11877, 4
  %11879 = trunc i64 %11878 to i8
  %11880 = and i8 %11879, 1
  store i8 %11880, i8* %14, align 1
  %11881 = icmp eq i64 %11866, 0
  %11882 = zext i1 %11881 to i8
  store i8 %11882, i8* %15, align 1
  %11883 = lshr i64 %11866, 63
  %11884 = trunc i64 %11883 to i8
  store i8 %11884, i8* %16, align 1
  %11885 = lshr i64 %11865, 63
  %11886 = lshr i64 %11863, 55
  %11887 = and i64 %11886, 1
  %11888 = xor i64 %11883, %11885
  %11889 = xor i64 %11883, %11887
  %11890 = add nuw nsw i64 %11888, %11889
  %11891 = icmp eq i64 %11890, 2
  %11892 = zext i1 %11891 to i8
  store i8 %11892, i8* %17, align 1
  %11893 = load i64, i64* %RBP.i, align 8
  %11894 = add i64 %11893, -16
  %11895 = add i64 %11811, 37
  store i64 %11895, i64* %3, align 8
  %11896 = inttoptr i64 %11894 to i32*
  %11897 = load i32, i32* %11896, align 4
  %11898 = sext i32 %11897 to i64
  %11899 = shl nsw i64 %11898, 6
  store i64 %11899, i64* %RDX.i658, align 8
  %11900 = add i64 %11899, %11866
  store i64 %11900, i64* %RAX.i552, align 8
  %11901 = icmp ult i64 %11900, %11866
  %11902 = icmp ult i64 %11900, %11899
  %11903 = or i1 %11901, %11902
  %11904 = zext i1 %11903 to i8
  store i8 %11904, i8* %12, align 1
  %11905 = trunc i64 %11900 to i32
  %11906 = and i32 %11905, 255
  %11907 = tail call i32 @llvm.ctpop.i32(i32 %11906)
  %11908 = trunc i32 %11907 to i8
  %11909 = and i8 %11908, 1
  %11910 = xor i8 %11909, 1
  store i8 %11910, i8* %13, align 1
  %11911 = xor i64 %11866, %11900
  %11912 = lshr i64 %11911, 4
  %11913 = trunc i64 %11912 to i8
  %11914 = and i8 %11913, 1
  store i8 %11914, i8* %14, align 1
  %11915 = icmp eq i64 %11900, 0
  %11916 = zext i1 %11915 to i8
  store i8 %11916, i8* %15, align 1
  %11917 = lshr i64 %11900, 63
  %11918 = trunc i64 %11917 to i8
  store i8 %11918, i8* %16, align 1
  %11919 = lshr i64 %11898, 57
  %11920 = and i64 %11919, 1
  %11921 = xor i64 %11917, %11883
  %11922 = xor i64 %11917, %11920
  %11923 = add nuw nsw i64 %11921, %11922
  %11924 = icmp eq i64 %11923, 2
  %11925 = zext i1 %11924 to i8
  store i8 %11925, i8* %17, align 1
  %11926 = add i64 %11893, -28
  %11927 = add i64 %11811, 48
  store i64 %11927, i64* %3, align 8
  %11928 = inttoptr i64 %11926 to i32*
  %11929 = load i32, i32* %11928, align 4
  %11930 = sext i32 %11929 to i64
  %11931 = shl nsw i64 %11930, 4
  store i64 %11931, i64* %RDX.i658, align 8
  %11932 = add i64 %11931, %11900
  store i64 %11932, i64* %RAX.i552, align 8
  %11933 = icmp ult i64 %11932, %11900
  %11934 = icmp ult i64 %11932, %11931
  %11935 = or i1 %11933, %11934
  %11936 = zext i1 %11935 to i8
  store i8 %11936, i8* %12, align 1
  %11937 = trunc i64 %11932 to i32
  %11938 = and i32 %11937, 255
  %11939 = tail call i32 @llvm.ctpop.i32(i32 %11938)
  %11940 = trunc i32 %11939 to i8
  %11941 = and i8 %11940, 1
  %11942 = xor i8 %11941, 1
  store i8 %11942, i8* %13, align 1
  %11943 = xor i64 %11931, %11900
  %11944 = xor i64 %11943, %11932
  %11945 = lshr i64 %11944, 4
  %11946 = trunc i64 %11945 to i8
  %11947 = and i8 %11946, 1
  store i8 %11947, i8* %14, align 1
  %11948 = icmp eq i64 %11932, 0
  %11949 = zext i1 %11948 to i8
  store i8 %11949, i8* %15, align 1
  %11950 = lshr i64 %11932, 63
  %11951 = trunc i64 %11950 to i8
  store i8 %11951, i8* %16, align 1
  %11952 = lshr i64 %11930, 59
  %11953 = and i64 %11952, 1
  %11954 = xor i64 %11950, %11917
  %11955 = xor i64 %11950, %11953
  %11956 = add nuw nsw i64 %11954, %11955
  %11957 = icmp eq i64 %11956, 2
  %11958 = zext i1 %11957 to i8
  store i8 %11958, i8* %17, align 1
  %11959 = load i64, i64* %RBP.i, align 8
  %11960 = add i64 %11959, -20
  %11961 = add i64 %11811, 59
  store i64 %11961, i64* %3, align 8
  %11962 = inttoptr i64 %11960 to i32*
  %11963 = load i32, i32* %11962, align 4
  %11964 = sext i32 %11963 to i64
  store i64 %11964, i64* %RDX.i658, align 8
  %11965 = shl nsw i64 %11964, 2
  %11966 = add i64 %11965, %11932
  %11967 = load i32, i32* %ECX.i4446, align 4
  %11968 = add i64 %11811, 62
  store i64 %11968, i64* %3, align 8
  %11969 = inttoptr i64 %11966 to i32*
  store i32 %11967, i32* %11969, align 4
  %11970 = load i64, i64* %RBP.i, align 8
  %11971 = add i64 %11970, -12
  %11972 = load i64, i64* %3, align 8
  %11973 = add i64 %11972, 3
  store i64 %11973, i64* %3, align 8
  %11974 = inttoptr i64 %11971 to i32*
  %11975 = load i32, i32* %11974, align 4
  %11976 = add i32 %11975, 1
  %11977 = zext i32 %11976 to i64
  store i64 %11977, i64* %RAX.i552, align 8
  %11978 = icmp eq i32 %11975, -1
  %11979 = icmp eq i32 %11976, 0
  %11980 = or i1 %11978, %11979
  %11981 = zext i1 %11980 to i8
  store i8 %11981, i8* %12, align 1
  %11982 = and i32 %11976, 255
  %11983 = tail call i32 @llvm.ctpop.i32(i32 %11982)
  %11984 = trunc i32 %11983 to i8
  %11985 = and i8 %11984, 1
  %11986 = xor i8 %11985, 1
  store i8 %11986, i8* %13, align 1
  %11987 = xor i32 %11976, %11975
  %11988 = lshr i32 %11987, 4
  %11989 = trunc i32 %11988 to i8
  %11990 = and i8 %11989, 1
  store i8 %11990, i8* %14, align 1
  %11991 = zext i1 %11979 to i8
  store i8 %11991, i8* %15, align 1
  %11992 = lshr i32 %11976, 31
  %11993 = trunc i32 %11992 to i8
  store i8 %11993, i8* %16, align 1
  %11994 = lshr i32 %11975, 31
  %11995 = xor i32 %11992, %11994
  %11996 = add nuw nsw i32 %11995, %11992
  %11997 = icmp eq i32 %11996, 2
  %11998 = zext i1 %11997 to i8
  store i8 %11998, i8* %17, align 1
  %11999 = add i64 %11972, 9
  store i64 %11999, i64* %3, align 8
  store i32 %11976, i32* %11974, align 4
  %12000 = load i64, i64* %3, align 8
  %12001 = add i64 %12000, -164
  store i64 %12001, i64* %3, align 8
  br label %block_.L_405bdd

block_.L_405c86:                                  ; preds = %block_.L_405bdd
  %12002 = add i64 %11590, -8
  %12003 = add i64 %11618, 8
  store i64 %12003, i64* %3, align 8
  %12004 = inttoptr i64 %12002 to i32*
  %12005 = load i32, i32* %12004, align 4
  %12006 = add i32 %12005, 1
  %12007 = zext i32 %12006 to i64
  store i64 %12007, i64* %RAX.i552, align 8
  %12008 = icmp eq i32 %12005, -1
  %12009 = icmp eq i32 %12006, 0
  %12010 = or i1 %12008, %12009
  %12011 = zext i1 %12010 to i8
  store i8 %12011, i8* %12, align 1
  %12012 = and i32 %12006, 255
  %12013 = tail call i32 @llvm.ctpop.i32(i32 %12012)
  %12014 = trunc i32 %12013 to i8
  %12015 = and i8 %12014, 1
  %12016 = xor i8 %12015, 1
  store i8 %12016, i8* %13, align 1
  %12017 = xor i32 %12006, %12005
  %12018 = lshr i32 %12017, 4
  %12019 = trunc i32 %12018 to i8
  %12020 = and i8 %12019, 1
  store i8 %12020, i8* %14, align 1
  %12021 = zext i1 %12009 to i8
  store i8 %12021, i8* %15, align 1
  %12022 = lshr i32 %12006, 31
  %12023 = trunc i32 %12022 to i8
  store i8 %12023, i8* %16, align 1
  %12024 = lshr i32 %12005, 31
  %12025 = xor i32 %12022, %12024
  %12026 = add nuw nsw i32 %12025, %12022
  %12027 = icmp eq i32 %12026, 2
  %12028 = zext i1 %12027 to i8
  store i8 %12028, i8* %17, align 1
  %12029 = add i64 %11618, 14
  store i64 %12029, i64* %3, align 8
  store i32 %12006, i32* %12004, align 4
  %12030 = load i64, i64* %3, align 8
  %12031 = add i64 %12030, -416
  store i64 %12031, i64* %3, align 8
  br label %block_.L_405af4

block_.L_405cac:                                  ; preds = %block_.L_4054b2
  %12032 = add i64 %8244, -20
  %12033 = add i64 %8272, 8
  store i64 %12033, i64* %3, align 8
  %12034 = inttoptr i64 %12032 to i32*
  %12035 = load i32, i32* %12034, align 4
  %12036 = add i32 %12035, 1
  %12037 = zext i32 %12036 to i64
  store i64 %12037, i64* %RAX.i552, align 8
  %12038 = icmp eq i32 %12035, -1
  %12039 = icmp eq i32 %12036, 0
  %12040 = or i1 %12038, %12039
  %12041 = zext i1 %12040 to i8
  store i8 %12041, i8* %12, align 1
  %12042 = and i32 %12036, 255
  %12043 = tail call i32 @llvm.ctpop.i32(i32 %12042)
  %12044 = trunc i32 %12043 to i8
  %12045 = and i8 %12044, 1
  %12046 = xor i8 %12045, 1
  store i8 %12046, i8* %13, align 1
  %12047 = xor i32 %12036, %12035
  %12048 = lshr i32 %12047, 4
  %12049 = trunc i32 %12048 to i8
  %12050 = and i8 %12049, 1
  store i8 %12050, i8* %14, align 1
  %12051 = zext i1 %12039 to i8
  store i8 %12051, i8* %15, align 1
  %12052 = lshr i32 %12036, 31
  %12053 = trunc i32 %12052 to i8
  store i8 %12053, i8* %16, align 1
  %12054 = lshr i32 %12035, 31
  %12055 = xor i32 %12052, %12054
  %12056 = add nuw nsw i32 %12055, %12052
  %12057 = icmp eq i32 %12056, 2
  %12058 = zext i1 %12057 to i8
  store i8 %12058, i8* %17, align 1
  %12059 = add i64 %8272, 14
  store i64 %12059, i64* %3, align 8
  store i32 %12036, i32* %12034, align 4
  %12060 = load i64, i64* %3, align 8
  %12061 = add i64 %12060, -2073
  store i64 %12061, i64* %3, align 8
  br label %block_.L_4054a1

block_.L_405cbf:                                  ; preds = %block_.L_4054a1
  %12062 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %12062, i64* %RAX.i552, align 8
  %12063 = add i64 %12062, 72724
  %12064 = add i64 %8239, 15
  store i64 %12064, i64* %3, align 8
  %12065 = inttoptr i64 %12063 to i32*
  %12066 = load i32, i32* %12065, align 4
  store i8 0, i8* %12, align 1
  %12067 = and i32 %12066, 255
  %12068 = tail call i32 @llvm.ctpop.i32(i32 %12067)
  %12069 = trunc i32 %12068 to i8
  %12070 = and i8 %12069, 1
  %12071 = xor i8 %12070, 1
  store i8 %12071, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %12072 = icmp eq i32 %12066, 0
  %12073 = zext i1 %12072 to i8
  store i8 %12073, i8* %15, align 1
  %12074 = lshr i32 %12066, 31
  %12075 = trunc i32 %12074 to i8
  store i8 %12075, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v452 = select i1 %12072, i64 21, i64 226
  %12076 = add i64 %8239, %.v452
  %12077 = add i64 %8211, -12
  %12078 = add i64 %12076, 7
  store i64 %12078, i64* %3, align 8
  %12079 = inttoptr i64 %12077 to i32*
  store i32 0, i32* %12079, align 4
  %.pre320 = load i64, i64* %3, align 8
  br i1 %12072, label %block_.L_405cdb.preheader, label %block_.L_405da8.preheader

block_.L_405da8.preheader:                        ; preds = %block_.L_405cbf
  br label %block_.L_405da8

block_.L_405cdb.preheader:                        ; preds = %block_.L_405cbf
  br label %block_.L_405cdb

block_.L_405cdb:                                  ; preds = %block_.L_405cdb.preheader, %block_.L_405d89
  %12080 = phi i64 [ %12494, %block_.L_405d89 ], [ %.pre320, %block_.L_405cdb.preheader ]
  %MEMORY.55 = phi %struct.Memory* [ %MEMORY.56, %block_.L_405d89 ], [ %MEMORY.37, %block_.L_405cdb.preheader ]
  %12081 = load i64, i64* %RBP.i, align 8
  %12082 = add i64 %12081, -12
  %12083 = add i64 %12080, 4
  store i64 %12083, i64* %3, align 8
  %12084 = inttoptr i64 %12082 to i32*
  %12085 = load i32, i32* %12084, align 4
  %12086 = add i32 %12085, -16
  %12087 = icmp ult i32 %12085, 16
  %12088 = zext i1 %12087 to i8
  store i8 %12088, i8* %12, align 1
  %12089 = and i32 %12086, 255
  %12090 = tail call i32 @llvm.ctpop.i32(i32 %12089)
  %12091 = trunc i32 %12090 to i8
  %12092 = and i8 %12091, 1
  %12093 = xor i8 %12092, 1
  store i8 %12093, i8* %13, align 1
  %12094 = xor i32 %12085, 16
  %12095 = xor i32 %12094, %12086
  %12096 = lshr i32 %12095, 4
  %12097 = trunc i32 %12096 to i8
  %12098 = and i8 %12097, 1
  store i8 %12098, i8* %14, align 1
  %12099 = icmp eq i32 %12086, 0
  %12100 = zext i1 %12099 to i8
  store i8 %12100, i8* %15, align 1
  %12101 = lshr i32 %12086, 31
  %12102 = trunc i32 %12101 to i8
  store i8 %12102, i8* %16, align 1
  %12103 = lshr i32 %12085, 31
  %12104 = xor i32 %12101, %12103
  %12105 = add nuw nsw i32 %12104, %12103
  %12106 = icmp eq i32 %12105, 2
  %12107 = zext i1 %12106 to i8
  store i8 %12107, i8* %17, align 1
  %12108 = icmp ne i8 %12102, 0
  %12109 = xor i1 %12108, %12106
  %.v485 = select i1 %12109, i64 10, i64 193
  %12110 = add i64 %12080, %.v485
  store i64 %12110, i64* %3, align 8
  br i1 %12109, label %block_405ce5, label %block_.L_405d9c

block_405ce5:                                     ; preds = %block_.L_405cdb
  %12111 = add i64 %12081, -8
  %12112 = add i64 %12110, 7
  store i64 %12112, i64* %3, align 8
  %12113 = inttoptr i64 %12111 to i32*
  store i32 0, i32* %12113, align 4
  %.pre321 = load i64, i64* %3, align 8
  br label %block_.L_405cec

block_.L_405cec:                                  ; preds = %routine_idivl__ecx.exit, %block_405ce5
  %12114 = phi i64 [ %.pre321, %block_405ce5 ], [ %12464, %routine_idivl__ecx.exit ]
  %MEMORY.56 = phi %struct.Memory* [ %MEMORY.55, %block_405ce5 ], [ %12367, %routine_idivl__ecx.exit ]
  %12115 = load i64, i64* %RBP.i, align 8
  %12116 = add i64 %12115, -8
  %12117 = add i64 %12114, 4
  store i64 %12117, i64* %3, align 8
  %12118 = inttoptr i64 %12116 to i32*
  %12119 = load i32, i32* %12118, align 4
  %12120 = add i32 %12119, -16
  %12121 = icmp ult i32 %12119, 16
  %12122 = zext i1 %12121 to i8
  store i8 %12122, i8* %12, align 1
  %12123 = and i32 %12120, 255
  %12124 = tail call i32 @llvm.ctpop.i32(i32 %12123)
  %12125 = trunc i32 %12124 to i8
  %12126 = and i8 %12125, 1
  %12127 = xor i8 %12126, 1
  store i8 %12127, i8* %13, align 1
  %12128 = xor i32 %12119, 16
  %12129 = xor i32 %12128, %12120
  %12130 = lshr i32 %12129, 4
  %12131 = trunc i32 %12130 to i8
  %12132 = and i8 %12131, 1
  store i8 %12132, i8* %14, align 1
  %12133 = icmp eq i32 %12120, 0
  %12134 = zext i1 %12133 to i8
  store i8 %12134, i8* %15, align 1
  %12135 = lshr i32 %12120, 31
  %12136 = trunc i32 %12135 to i8
  store i8 %12136, i8* %16, align 1
  %12137 = lshr i32 %12119, 31
  %12138 = xor i32 %12135, %12137
  %12139 = add nuw nsw i32 %12138, %12137
  %12140 = icmp eq i32 %12139, 2
  %12141 = zext i1 %12140 to i8
  store i8 %12141, i8* %17, align 1
  %12142 = icmp ne i8 %12136, 0
  %12143 = xor i1 %12142, %12140
  %.v455 = select i1 %12143, i64 10, i64 157
  %12144 = add i64 %12114, %.v455
  store i64 %12144, i64* %3, align 8
  br i1 %12143, label %block_405cf6, label %block_.L_405d89

block_405cf6:                                     ; preds = %block_.L_405cec
  %12145 = add i64 %12115, -1056
  store i64 %12145, i64* %RAX.i552, align 8
  store i64 4, i64* %RCX.i4476, align 8
  %12146 = add i64 %12115, -2176
  store i64 %12146, i64* %RDX.i658, align 8
  %12147 = add i64 %12144, 22
  store i64 %12147, i64* %3, align 8
  %12148 = load i32, i32* %12118, align 4
  %12149 = zext i32 %12148 to i64
  store i64 %12149, i64* %RSI.i757, align 8
  %12150 = add i64 %12115, -2320
  %12151 = add i64 %12144, 29
  store i64 %12151, i64* %3, align 8
  %12152 = inttoptr i64 %12150 to i64*
  store i64 %12145, i64* %12152, align 8
  %12153 = load i32, i32* %ESI.i4280, align 4
  %12154 = zext i32 %12153 to i64
  %12155 = load i64, i64* %3, align 8
  store i64 %12154, i64* %RAX.i552, align 8
  %12156 = load i64, i64* %RBP.i, align 8
  %12157 = add i64 %12156, -2328
  %12158 = load i64, i64* %RDX.i658, align 8
  %12159 = add i64 %12155, 9
  store i64 %12159, i64* %3, align 8
  %12160 = inttoptr i64 %12157 to i64*
  store i64 %12158, i64* %12160, align 8
  %12161 = load i64, i64* %3, align 8
  %12162 = load i32, i32* %EAX.i551, align 8
  %12163 = sext i32 %12162 to i64
  %12164 = lshr i64 %12163, 32
  store i64 %12164, i64* %219, align 8
  %12165 = load i32, i32* %ECX.i4446, align 4
  %12166 = add i64 %12161, 3
  store i64 %12166, i64* %3, align 8
  %12167 = zext i32 %12162 to i64
  %12168 = sext i32 %12165 to i64
  %12169 = shl nuw i64 %12164, 32
  %12170 = or i64 %12169, %12167
  %12171 = sdiv i64 %12170, %12168
  %12172 = shl i64 %12171, 32
  %12173 = ashr exact i64 %12172, 32
  %12174 = icmp eq i64 %12171, %12173
  br i1 %12174, label %12177, label %12175

; <label>:12175:                                  ; preds = %block_405cf6
  %12176 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12166, %struct.Memory* %MEMORY.56)
  %.pre322 = load i32, i32* %EDX.i4468, align 4
  %.pre323 = load i64, i64* %3, align 8
  %.pre324 = load i32, i32* %ECX.i4446, align 4
  br label %routine_idivl__ecx.exit815

; <label>:12177:                                  ; preds = %block_405cf6
  %12178 = srem i64 %12170, %12168
  %12179 = and i64 %12171, 4294967295
  store i64 %12179, i64* %RAX.i552, align 8
  %12180 = and i64 %12178, 4294967295
  store i64 %12180, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12181 = trunc i64 %12178 to i32
  br label %routine_idivl__ecx.exit815

routine_idivl__ecx.exit815:                       ; preds = %12177, %12175
  %12182 = phi i32 [ %.pre324, %12175 ], [ %12165, %12177 ]
  %12183 = phi i64 [ %.pre323, %12175 ], [ %12166, %12177 ]
  %12184 = phi i32 [ %.pre322, %12175 ], [ %12181, %12177 ]
  %12185 = phi %struct.Memory* [ %12176, %12175 ], [ %MEMORY.56, %12177 ]
  %12186 = sext i32 %12184 to i64
  %12187 = shl nsw i64 %12186, 8
  store i64 %12187, i64* %RDI.i4259, align 8
  %.lobit129 = lshr i32 %12184, 31
  %12188 = trunc i32 %.lobit129 to i8
  store i8 %12188, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %12189 = icmp eq i32 %12184, 0
  %12190 = zext i1 %12189 to i8
  store i8 %12190, i8* %15, align 1
  %12191 = lshr i64 %12186, 55
  %12192 = trunc i64 %12191 to i8
  %12193 = and i8 %12192, 1
  store i8 %12193, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12194 = load i64, i64* %RBP.i, align 8
  %12195 = add i64 %12194, -2328
  %12196 = add i64 %12183, 14
  store i64 %12196, i64* %3, align 8
  %12197 = inttoptr i64 %12195 to i64*
  %12198 = load i64, i64* %12197, align 8
  %12199 = add i64 %12187, %12198
  store i64 %12199, i64* %R8.i2321, align 8
  %12200 = icmp ult i64 %12199, %12198
  %12201 = icmp ult i64 %12199, %12187
  %12202 = or i1 %12200, %12201
  %12203 = zext i1 %12202 to i8
  store i8 %12203, i8* %12, align 1
  %12204 = trunc i64 %12199 to i32
  %12205 = and i32 %12204, 255
  %12206 = tail call i32 @llvm.ctpop.i32(i32 %12205)
  %12207 = trunc i32 %12206 to i8
  %12208 = and i8 %12207, 1
  %12209 = xor i8 %12208, 1
  store i8 %12209, i8* %13, align 1
  %12210 = xor i64 %12198, %12199
  %12211 = lshr i64 %12210, 4
  %12212 = trunc i64 %12211 to i8
  %12213 = and i8 %12212, 1
  store i8 %12213, i8* %14, align 1
  %12214 = icmp eq i64 %12199, 0
  %12215 = zext i1 %12214 to i8
  store i8 %12215, i8* %15, align 1
  %12216 = lshr i64 %12199, 63
  %12217 = trunc i64 %12216 to i8
  store i8 %12217, i8* %16, align 1
  %12218 = lshr i64 %12198, 63
  %12219 = lshr i64 %12186, 55
  %12220 = and i64 %12219, 1
  %12221 = xor i64 %12216, %12218
  %12222 = xor i64 %12216, %12220
  %12223 = add nuw nsw i64 %12221, %12222
  %12224 = icmp eq i64 %12223, 2
  %12225 = zext i1 %12224 to i8
  store i8 %12225, i8* %17, align 1
  %12226 = add i64 %12194, -8
  %12227 = add i64 %12183, 20
  store i64 %12227, i64* %3, align 8
  %12228 = inttoptr i64 %12226 to i32*
  %12229 = load i32, i32* %12228, align 4
  %12230 = zext i32 %12229 to i64
  store i64 %12230, i64* %RAX.i552, align 8
  %12231 = sext i32 %12229 to i64
  %12232 = lshr i64 %12231, 32
  store i64 %12232, i64* %219, align 8
  %12233 = add i64 %12183, 25
  store i64 %12233, i64* %3, align 8
  %12234 = sext i32 %12182 to i64
  %12235 = shl nuw i64 %12232, 32
  %12236 = or i64 %12235, %12230
  %12237 = sdiv i64 %12236, %12234
  %12238 = shl i64 %12237, 32
  %12239 = ashr exact i64 %12238, 32
  %12240 = icmp eq i64 %12237, %12239
  br i1 %12240, label %12243, label %12241

; <label>:12241:                                  ; preds = %routine_idivl__ecx.exit815
  %12242 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12233, %struct.Memory* %12185)
  %.pre325 = load i32, i32* %EAX.i551, align 4
  %.pre326 = load i64, i64* %3, align 8
  %.pre327 = load i64, i64* %R8.i2321, align 8
  %.pre328 = load i64, i64* %RBP.i, align 8
  %.pre445 = load i32, i32* %ECX.i4446, align 4
  br label %routine_idivl__ecx.exit792

; <label>:12243:                                  ; preds = %routine_idivl__ecx.exit815
  %12244 = srem i64 %12236, %12234
  %12245 = and i64 %12237, 4294967295
  store i64 %12245, i64* %RAX.i552, align 8
  %12246 = and i64 %12244, 4294967295
  store i64 %12246, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12247 = trunc i64 %12237 to i32
  br label %routine_idivl__ecx.exit792

routine_idivl__ecx.exit792:                       ; preds = %12243, %12241
  %12248 = phi i32 [ %.pre445, %12241 ], [ %12182, %12243 ]
  %12249 = phi i64 [ %.pre328, %12241 ], [ %12194, %12243 ]
  %12250 = phi i64 [ %.pre327, %12241 ], [ %12199, %12243 ]
  %12251 = phi i64 [ %.pre326, %12241 ], [ %12233, %12243 ]
  %12252 = phi i32 [ %.pre325, %12241 ], [ %12247, %12243 ]
  %12253 = phi %struct.Memory* [ %12242, %12241 ], [ %12185, %12243 ]
  %12254 = sext i32 %12252 to i64
  %12255 = shl nsw i64 %12254, 6
  store i64 %12255, i64* %RDI.i4259, align 8
  %12256 = add i64 %12255, %12250
  store i64 %12256, i64* %R8.i2321, align 8
  %12257 = icmp ult i64 %12256, %12250
  %12258 = icmp ult i64 %12256, %12255
  %12259 = or i1 %12257, %12258
  %12260 = zext i1 %12259 to i8
  store i8 %12260, i8* %12, align 1
  %12261 = trunc i64 %12256 to i32
  %12262 = and i32 %12261, 255
  %12263 = tail call i32 @llvm.ctpop.i32(i32 %12262)
  %12264 = trunc i32 %12263 to i8
  %12265 = and i8 %12264, 1
  %12266 = xor i8 %12265, 1
  store i8 %12266, i8* %13, align 1
  %12267 = xor i64 %12250, %12256
  %12268 = lshr i64 %12267, 4
  %12269 = trunc i64 %12268 to i8
  %12270 = and i8 %12269, 1
  store i8 %12270, i8* %14, align 1
  %12271 = icmp eq i64 %12256, 0
  %12272 = zext i1 %12271 to i8
  store i8 %12272, i8* %15, align 1
  %12273 = lshr i64 %12256, 63
  %12274 = trunc i64 %12273 to i8
  store i8 %12274, i8* %16, align 1
  %12275 = lshr i64 %12250, 63
  %12276 = lshr i64 %12254, 57
  %12277 = and i64 %12276, 1
  %12278 = xor i64 %12273, %12275
  %12279 = xor i64 %12273, %12277
  %12280 = add nuw nsw i64 %12278, %12279
  %12281 = icmp eq i64 %12280, 2
  %12282 = zext i1 %12281 to i8
  store i8 %12282, i8* %17, align 1
  %12283 = add i64 %12249, -12
  %12284 = add i64 %12251, 13
  store i64 %12284, i64* %3, align 8
  %12285 = inttoptr i64 %12283 to i32*
  %12286 = load i32, i32* %12285, align 4
  %12287 = zext i32 %12286 to i64
  store i64 %12287, i64* %RAX.i552, align 8
  %12288 = sext i32 %12286 to i64
  %12289 = lshr i64 %12288, 32
  store i64 %12289, i64* %219, align 8
  %12290 = add i64 %12251, 16
  store i64 %12290, i64* %3, align 8
  %12291 = sext i32 %12248 to i64
  %12292 = shl nuw i64 %12289, 32
  %12293 = or i64 %12292, %12287
  %12294 = sdiv i64 %12293, %12291
  %12295 = shl i64 %12294, 32
  %12296 = ashr exact i64 %12295, 32
  %12297 = icmp eq i64 %12294, %12296
  br i1 %12297, label %12300, label %12298

; <label>:12298:                                  ; preds = %routine_idivl__ecx.exit792
  %12299 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12290, %struct.Memory* %12253)
  %.pre329 = load i32, i32* %EDX.i4468, align 4
  %.pre330 = load i64, i64* %3, align 8
  %.pre331 = load i64, i64* %R8.i2321, align 8
  %.pre332 = load i64, i64* %RBP.i, align 8
  %.pre333 = load i32, i32* %ECX.i4446, align 4
  br label %routine_idivl__ecx.exit775

; <label>:12300:                                  ; preds = %routine_idivl__ecx.exit792
  %12301 = srem i64 %12293, %12291
  %12302 = and i64 %12294, 4294967295
  store i64 %12302, i64* %RAX.i552, align 8
  %12303 = and i64 %12301, 4294967295
  store i64 %12303, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12304 = trunc i64 %12301 to i32
  br label %routine_idivl__ecx.exit775

routine_idivl__ecx.exit775:                       ; preds = %12300, %12298
  %12305 = phi i32 [ %.pre333, %12298 ], [ %12248, %12300 ]
  %12306 = phi i64 [ %.pre332, %12298 ], [ %12249, %12300 ]
  %12307 = phi i64 [ %.pre331, %12298 ], [ %12256, %12300 ]
  %12308 = phi i64 [ %.pre330, %12298 ], [ %12290, %12300 ]
  %12309 = phi i32 [ %.pre329, %12298 ], [ %12304, %12300 ]
  %12310 = phi %struct.Memory* [ %12299, %12298 ], [ %12253, %12300 ]
  %12311 = sext i32 %12309 to i64
  %12312 = shl nsw i64 %12311, 4
  store i64 %12312, i64* %RDI.i4259, align 8
  %12313 = add i64 %12312, %12307
  store i64 %12313, i64* %R8.i2321, align 8
  %12314 = icmp ult i64 %12313, %12307
  %12315 = icmp ult i64 %12313, %12312
  %12316 = or i1 %12314, %12315
  %12317 = zext i1 %12316 to i8
  store i8 %12317, i8* %12, align 1
  %12318 = trunc i64 %12313 to i32
  %12319 = and i32 %12318, 255
  %12320 = tail call i32 @llvm.ctpop.i32(i32 %12319)
  %12321 = trunc i32 %12320 to i8
  %12322 = and i8 %12321, 1
  %12323 = xor i8 %12322, 1
  store i8 %12323, i8* %13, align 1
  %12324 = xor i64 %12312, %12307
  %12325 = xor i64 %12324, %12313
  %12326 = lshr i64 %12325, 4
  %12327 = trunc i64 %12326 to i8
  %12328 = and i8 %12327, 1
  store i8 %12328, i8* %14, align 1
  %12329 = icmp eq i64 %12313, 0
  %12330 = zext i1 %12329 to i8
  store i8 %12330, i8* %15, align 1
  %12331 = lshr i64 %12313, 63
  %12332 = trunc i64 %12331 to i8
  store i8 %12332, i8* %16, align 1
  %12333 = lshr i64 %12307, 63
  %12334 = lshr i64 %12311, 59
  %12335 = and i64 %12334, 1
  %12336 = xor i64 %12331, %12333
  %12337 = xor i64 %12331, %12335
  %12338 = add nuw nsw i64 %12336, %12337
  %12339 = icmp eq i64 %12338, 2
  %12340 = zext i1 %12339 to i8
  store i8 %12340, i8* %17, align 1
  %12341 = add i64 %12306, -12
  %12342 = add i64 %12308, 13
  store i64 %12342, i64* %3, align 8
  %12343 = inttoptr i64 %12341 to i32*
  %12344 = load i32, i32* %12343, align 4
  %12345 = zext i32 %12344 to i64
  store i64 %12345, i64* %RAX.i552, align 8
  %12346 = sext i32 %12344 to i64
  %12347 = lshr i64 %12346, 32
  store i64 %12347, i64* %219, align 8
  %12348 = add i64 %12308, 18
  store i64 %12348, i64* %3, align 8
  %12349 = sext i32 %12305 to i64
  %12350 = shl nuw i64 %12347, 32
  %12351 = or i64 %12350, %12345
  %12352 = sdiv i64 %12351, %12349
  %12353 = shl i64 %12352, 32
  %12354 = ashr exact i64 %12353, 32
  %12355 = icmp eq i64 %12352, %12354
  br i1 %12355, label %12358, label %12356

; <label>:12356:                                  ; preds = %routine_idivl__ecx.exit775
  %12357 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12348, %struct.Memory* %12310)
  %.pre334 = load i32, i32* %EAX.i551, align 4
  %.pre335 = load i64, i64* %3, align 8
  %.pre336 = load i64, i64* %R8.i2321, align 8
  %.pre446 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit

; <label>:12358:                                  ; preds = %routine_idivl__ecx.exit775
  %12359 = srem i64 %12351, %12349
  %12360 = and i64 %12352, 4294967295
  store i64 %12360, i64* %RAX.i552, align 8
  %12361 = and i64 %12359, 4294967295
  store i64 %12361, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12362 = trunc i64 %12352 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %12358, %12356
  %12363 = phi i64 [ %.pre446, %12356 ], [ %12306, %12358 ]
  %12364 = phi i64 [ %.pre336, %12356 ], [ %12313, %12358 ]
  %12365 = phi i64 [ %.pre335, %12356 ], [ %12348, %12358 ]
  %12366 = phi i32 [ %.pre334, %12356 ], [ %12362, %12358 ]
  %12367 = phi %struct.Memory* [ %12357, %12356 ], [ %12310, %12358 ]
  %12368 = sext i32 %12366 to i64
  store i64 %12368, i64* %RDI.i4259, align 8
  %12369 = shl nsw i64 %12368, 2
  %12370 = add i64 %12364, %12369
  %12371 = add i64 %12365, 7
  store i64 %12371, i64* %3, align 8
  %12372 = inttoptr i64 %12370 to i32*
  %12373 = load i32, i32* %12372, align 4
  %12374 = zext i32 %12373 to i64
  store i64 %12374, i64* %RAX.i552, align 8
  %12375 = add i64 %12363, -8
  %12376 = add i64 %12365, 11
  store i64 %12376, i64* %3, align 8
  %12377 = inttoptr i64 %12375 to i32*
  %12378 = load i32, i32* %12377, align 4
  %12379 = sext i32 %12378 to i64
  %12380 = shl nsw i64 %12379, 6
  store i64 %12380, i64* %RDI.i4259, align 8
  %.lobit132 = lshr i32 %12378, 31
  %12381 = trunc i32 %.lobit132 to i8
  store i8 %12381, i8* %12, align 1
  %12382 = trunc i64 %12380 to i32
  %12383 = and i32 %12382, 192
  %12384 = tail call i32 @llvm.ctpop.i32(i32 %12383)
  %12385 = trunc i32 %12384 to i8
  %12386 = and i8 %12385, 1
  %12387 = xor i8 %12386, 1
  store i8 %12387, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %12388 = icmp eq i32 %12378, 0
  %12389 = zext i1 %12388 to i8
  store i8 %12389, i8* %15, align 1
  %12390 = lshr i64 %12379, 57
  %12391 = trunc i64 %12390 to i8
  %12392 = and i8 %12391, 1
  store i8 %12392, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12393 = add i64 %12363, -2320
  %12394 = add i64 %12365, 22
  store i64 %12394, i64* %3, align 8
  %12395 = inttoptr i64 %12393 to i64*
  %12396 = load i64, i64* %12395, align 8
  %12397 = add i64 %12380, %12396
  store i64 %12397, i64* %R8.i2321, align 8
  %12398 = icmp ult i64 %12397, %12396
  %12399 = icmp ult i64 %12397, %12380
  %12400 = or i1 %12398, %12399
  %12401 = zext i1 %12400 to i8
  store i8 %12401, i8* %12, align 1
  %12402 = trunc i64 %12397 to i32
  %12403 = and i32 %12402, 255
  %12404 = tail call i32 @llvm.ctpop.i32(i32 %12403)
  %12405 = trunc i32 %12404 to i8
  %12406 = and i8 %12405, 1
  %12407 = xor i8 %12406, 1
  store i8 %12407, i8* %13, align 1
  %12408 = xor i64 %12396, %12397
  %12409 = lshr i64 %12408, 4
  %12410 = trunc i64 %12409 to i8
  %12411 = and i8 %12410, 1
  store i8 %12411, i8* %14, align 1
  %12412 = icmp eq i64 %12397, 0
  %12413 = zext i1 %12412 to i8
  store i8 %12413, i8* %15, align 1
  %12414 = lshr i64 %12397, 63
  %12415 = trunc i64 %12414 to i8
  store i8 %12415, i8* %16, align 1
  %12416 = lshr i64 %12396, 63
  %12417 = lshr i64 %12379, 57
  %12418 = and i64 %12417, 1
  %12419 = xor i64 %12414, %12416
  %12420 = xor i64 %12414, %12418
  %12421 = add nuw nsw i64 %12419, %12420
  %12422 = icmp eq i64 %12421, 2
  %12423 = zext i1 %12422 to i8
  store i8 %12423, i8* %17, align 1
  %12424 = add i64 %12363, -12
  %12425 = add i64 %12365, 29
  store i64 %12425, i64* %3, align 8
  %12426 = inttoptr i64 %12424 to i32*
  %12427 = load i32, i32* %12426, align 4
  %12428 = sext i32 %12427 to i64
  store i64 %12428, i64* %RDI.i4259, align 8
  %12429 = shl nsw i64 %12428, 2
  %12430 = add i64 %12429, %12397
  %12431 = add i64 %12365, 33
  store i64 %12431, i64* %3, align 8
  %12432 = inttoptr i64 %12430 to i32*
  store i32 %12373, i32* %12432, align 4
  %12433 = load i64, i64* %RBP.i, align 8
  %12434 = add i64 %12433, -8
  %12435 = load i64, i64* %3, align 8
  %12436 = add i64 %12435, 3
  store i64 %12436, i64* %3, align 8
  %12437 = inttoptr i64 %12434 to i32*
  %12438 = load i32, i32* %12437, align 4
  %12439 = add i32 %12438, 1
  %12440 = zext i32 %12439 to i64
  store i64 %12440, i64* %RAX.i552, align 8
  %12441 = icmp eq i32 %12438, -1
  %12442 = icmp eq i32 %12439, 0
  %12443 = or i1 %12441, %12442
  %12444 = zext i1 %12443 to i8
  store i8 %12444, i8* %12, align 1
  %12445 = and i32 %12439, 255
  %12446 = tail call i32 @llvm.ctpop.i32(i32 %12445)
  %12447 = trunc i32 %12446 to i8
  %12448 = and i8 %12447, 1
  %12449 = xor i8 %12448, 1
  store i8 %12449, i8* %13, align 1
  %12450 = xor i32 %12439, %12438
  %12451 = lshr i32 %12450, 4
  %12452 = trunc i32 %12451 to i8
  %12453 = and i8 %12452, 1
  store i8 %12453, i8* %14, align 1
  %12454 = zext i1 %12442 to i8
  store i8 %12454, i8* %15, align 1
  %12455 = lshr i32 %12439, 31
  %12456 = trunc i32 %12455 to i8
  store i8 %12456, i8* %16, align 1
  %12457 = lshr i32 %12438, 31
  %12458 = xor i32 %12455, %12457
  %12459 = add nuw nsw i32 %12458, %12455
  %12460 = icmp eq i32 %12459, 2
  %12461 = zext i1 %12460 to i8
  store i8 %12461, i8* %17, align 1
  %12462 = add i64 %12435, 9
  store i64 %12462, i64* %3, align 8
  store i32 %12439, i32* %12437, align 4
  %12463 = load i64, i64* %3, align 8
  %12464 = add i64 %12463, -152
  store i64 %12464, i64* %3, align 8
  br label %block_.L_405cec

block_.L_405d89:                                  ; preds = %block_.L_405cec
  %12465 = add i64 %12115, -12
  %12466 = add i64 %12144, 8
  store i64 %12466, i64* %3, align 8
  %12467 = inttoptr i64 %12465 to i32*
  %12468 = load i32, i32* %12467, align 4
  %12469 = add i32 %12468, 1
  %12470 = zext i32 %12469 to i64
  store i64 %12470, i64* %RAX.i552, align 8
  %12471 = icmp eq i32 %12468, -1
  %12472 = icmp eq i32 %12469, 0
  %12473 = or i1 %12471, %12472
  %12474 = zext i1 %12473 to i8
  store i8 %12474, i8* %12, align 1
  %12475 = and i32 %12469, 255
  %12476 = tail call i32 @llvm.ctpop.i32(i32 %12475)
  %12477 = trunc i32 %12476 to i8
  %12478 = and i8 %12477, 1
  %12479 = xor i8 %12478, 1
  store i8 %12479, i8* %13, align 1
  %12480 = xor i32 %12469, %12468
  %12481 = lshr i32 %12480, 4
  %12482 = trunc i32 %12481 to i8
  %12483 = and i8 %12482, 1
  store i8 %12483, i8* %14, align 1
  %12484 = zext i1 %12472 to i8
  store i8 %12484, i8* %15, align 1
  %12485 = lshr i32 %12469, 31
  %12486 = trunc i32 %12485 to i8
  store i8 %12486, i8* %16, align 1
  %12487 = lshr i32 %12468, 31
  %12488 = xor i32 %12485, %12487
  %12489 = add nuw nsw i32 %12488, %12485
  %12490 = icmp eq i32 %12489, 2
  %12491 = zext i1 %12490 to i8
  store i8 %12491, i8* %17, align 1
  %12492 = add i64 %12144, 14
  store i64 %12492, i64* %3, align 8
  store i32 %12469, i32* %12467, align 4
  %12493 = load i64, i64* %3, align 8
  %12494 = add i64 %12493, -188
  store i64 %12494, i64* %3, align 8
  br label %block_.L_405cdb

block_.L_405d9c:                                  ; preds = %block_.L_405cdb
  %12495 = add i64 %12110, 352
  br label %block_.L_405efc

block_.L_405da8:                                  ; preds = %block_.L_405da8.preheader, %block_.L_405ee4
  %12496 = phi i64 [ %13205, %block_.L_405ee4 ], [ %.pre320, %block_.L_405da8.preheader ]
  %MEMORY.57 = phi %struct.Memory* [ %MEMORY.58, %block_.L_405ee4 ], [ %MEMORY.37, %block_.L_405da8.preheader ]
  %12497 = load i64, i64* %RBP.i, align 8
  %12498 = add i64 %12497, -12
  %12499 = add i64 %12496, 4
  store i64 %12499, i64* %3, align 8
  %12500 = inttoptr i64 %12498 to i32*
  %12501 = load i32, i32* %12500, align 4
  %12502 = add i32 %12501, -16
  %12503 = icmp ult i32 %12501, 16
  %12504 = zext i1 %12503 to i8
  store i8 %12504, i8* %12, align 1
  %12505 = and i32 %12502, 255
  %12506 = tail call i32 @llvm.ctpop.i32(i32 %12505)
  %12507 = trunc i32 %12506 to i8
  %12508 = and i8 %12507, 1
  %12509 = xor i8 %12508, 1
  store i8 %12509, i8* %13, align 1
  %12510 = xor i32 %12501, 16
  %12511 = xor i32 %12510, %12502
  %12512 = lshr i32 %12511, 4
  %12513 = trunc i32 %12512 to i8
  %12514 = and i8 %12513, 1
  store i8 %12514, i8* %14, align 1
  %12515 = icmp eq i32 %12502, 0
  %12516 = zext i1 %12515 to i8
  store i8 %12516, i8* %15, align 1
  %12517 = lshr i32 %12502, 31
  %12518 = trunc i32 %12517 to i8
  store i8 %12518, i8* %16, align 1
  %12519 = lshr i32 %12501, 31
  %12520 = xor i32 %12517, %12519
  %12521 = add nuw nsw i32 %12520, %12519
  %12522 = icmp eq i32 %12521, 2
  %12523 = zext i1 %12522 to i8
  store i8 %12523, i8* %17, align 1
  %12524 = icmp ne i8 %12518, 0
  %12525 = xor i1 %12524, %12522
  %.v478 = select i1 %12525, i64 10, i64 335
  %12526 = add i64 %12496, %.v478
  store i64 %12526, i64* %3, align 8
  br i1 %12525, label %block_405db2, label %block_.L_405ef7

block_405db2:                                     ; preds = %block_.L_405da8
  %12527 = add i64 %12497, -8
  %12528 = add i64 %12526, 7
  store i64 %12528, i64* %3, align 8
  %12529 = inttoptr i64 %12527 to i32*
  store i32 0, i32* %12529, align 4
  %.pre344 = load i64, i64* %3, align 8
  br label %block_.L_405db9

block_.L_405db9:                                  ; preds = %block_.L_405ed1, %block_405db2
  %12530 = phi i64 [ %.pre344, %block_405db2 ], [ %13175, %block_.L_405ed1 ]
  %MEMORY.58 = phi %struct.Memory* [ %MEMORY.57, %block_405db2 ], [ %MEMORY.59, %block_.L_405ed1 ]
  %12531 = load i64, i64* %RBP.i, align 8
  %12532 = add i64 %12531, -8
  %12533 = add i64 %12530, 4
  store i64 %12533, i64* %3, align 8
  %12534 = inttoptr i64 %12532 to i32*
  %12535 = load i32, i32* %12534, align 4
  %12536 = add i32 %12535, -16
  %12537 = icmp ult i32 %12535, 16
  %12538 = zext i1 %12537 to i8
  store i8 %12538, i8* %12, align 1
  %12539 = and i32 %12536, 255
  %12540 = tail call i32 @llvm.ctpop.i32(i32 %12539)
  %12541 = trunc i32 %12540 to i8
  %12542 = and i8 %12541, 1
  %12543 = xor i8 %12542, 1
  store i8 %12543, i8* %13, align 1
  %12544 = xor i32 %12535, 16
  %12545 = xor i32 %12544, %12536
  %12546 = lshr i32 %12545, 4
  %12547 = trunc i32 %12546 to i8
  %12548 = and i8 %12547, 1
  store i8 %12548, i8* %14, align 1
  %12549 = icmp eq i32 %12536, 0
  %12550 = zext i1 %12549 to i8
  store i8 %12550, i8* %15, align 1
  %12551 = lshr i32 %12536, 31
  %12552 = trunc i32 %12551 to i8
  store i8 %12552, i8* %16, align 1
  %12553 = lshr i32 %12535, 31
  %12554 = xor i32 %12551, %12553
  %12555 = add nuw nsw i32 %12554, %12553
  %12556 = icmp eq i32 %12555, 2
  %12557 = zext i1 %12556 to i8
  store i8 %12557, i8* %17, align 1
  %12558 = icmp ne i8 %12552, 0
  %12559 = xor i1 %12558, %12556
  %.v456 = select i1 %12559, i64 10, i64 299
  %12560 = add i64 %12530, %.v456
  store i64 %12560, i64* %3, align 8
  br i1 %12559, label %block_405dc3, label %block_.L_405ee4

block_405dc3:                                     ; preds = %block_.L_405db9
  %12561 = add i64 %12531, -2260
  %12562 = add i64 %12560, 7
  store i64 %12562, i64* %3, align 8
  %12563 = inttoptr i64 %12561 to i32*
  %12564 = load i32, i32* %12563, align 4
  store i8 0, i8* %12, align 1
  %12565 = and i32 %12564, 255
  %12566 = tail call i32 @llvm.ctpop.i32(i32 %12565)
  %12567 = trunc i32 %12566 to i8
  %12568 = and i8 %12567, 1
  %12569 = xor i8 %12568, 1
  store i8 %12569, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %12570 = icmp eq i32 %12564, 0
  %12571 = zext i1 %12570 to i8
  store i8 %12571, i8* %15, align 1
  %12572 = lshr i32 %12564, 31
  %12573 = trunc i32 %12572 to i8
  store i8 %12573, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v484 = select i1 %12570, i64 141, i64 13
  %12574 = add i64 %12560, %.v484
  store i64 4, i64* %RAX.i552, align 8
  %12575 = add i64 %12531, -2176
  store i64 %12575, i64* %RCX.i4476, align 8
  %12576 = add i64 %12574, 15
  store i64 %12576, i64* %3, align 8
  %12577 = load i32, i32* %12534, align 4
  %12578 = zext i32 %12577 to i64
  store i64 %12578, i64* %RDX.i658, align 8
  br i1 %12570, label %block_.L_405e50, label %block_405dd0

block_405dd0:                                     ; preds = %block_405dc3
  %12579 = add i64 %12531, -2332
  %12580 = add i64 %12574, 21
  store i64 %12580, i64* %3, align 8
  %12581 = inttoptr i64 %12579 to i32*
  store i32 4, i32* %12581, align 4
  %12582 = load i32, i32* %EDX.i4468, align 4
  %12583 = zext i32 %12582 to i64
  %12584 = load i64, i64* %3, align 8
  store i64 %12583, i64* %RAX.i552, align 8
  %12585 = sext i32 %12582 to i64
  %12586 = lshr i64 %12585, 32
  store i64 %12586, i64* %219, align 8
  %12587 = load i64, i64* %RBP.i, align 8
  %12588 = add i64 %12587, -2332
  %12589 = add i64 %12584, 9
  store i64 %12589, i64* %3, align 8
  %12590 = inttoptr i64 %12588 to i32*
  %12591 = load i32, i32* %12590, align 4
  %12592 = zext i32 %12591 to i64
  store i64 %12592, i64* %RSI.i757, align 8
  %12593 = add i64 %12584, 11
  store i64 %12593, i64* %3, align 8
  %12594 = sext i32 %12591 to i64
  %12595 = shl nuw i64 %12586, 32
  %12596 = or i64 %12595, %12583
  %12597 = sdiv i64 %12596, %12594
  %12598 = shl i64 %12597, 32
  %12599 = ashr exact i64 %12598, 32
  %12600 = icmp eq i64 %12597, %12599
  br i1 %12600, label %12603, label %12601

; <label>:12601:                                  ; preds = %block_405dd0
  %12602 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12593, %struct.Memory* %MEMORY.58)
  %.pre345 = load i32, i32* %EDX.i4468, align 4
  %.pre346 = load i64, i64* %3, align 8
  %.pre347 = load i64, i64* %RBP.i, align 8
  %.pre348 = load i32, i32* %ESI.i4280, align 4
  br label %routine_idivl__esi.exit676

; <label>:12603:                                  ; preds = %block_405dd0
  %12604 = srem i64 %12596, %12594
  %12605 = and i64 %12597, 4294967295
  store i64 %12605, i64* %RAX.i552, align 8
  %12606 = and i64 %12604, 4294967295
  store i64 %12606, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12607 = trunc i64 %12604 to i32
  br label %routine_idivl__esi.exit676

routine_idivl__esi.exit676:                       ; preds = %12603, %12601
  %12608 = phi i32 [ %.pre348, %12601 ], [ %12591, %12603 ]
  %12609 = phi i64 [ %.pre347, %12601 ], [ %12587, %12603 ]
  %12610 = phi i64 [ %.pre346, %12601 ], [ %12593, %12603 ]
  %12611 = phi i32 [ %.pre345, %12601 ], [ %12607, %12603 ]
  %12612 = phi %struct.Memory* [ %12602, %12601 ], [ %MEMORY.58, %12603 ]
  %12613 = sext i32 %12611 to i64
  %12614 = shl nsw i64 %12613, 8
  store i64 %12614, i64* %RDI.i4259, align 8
  %12615 = load i64, i64* %RCX.i4476, align 8
  %12616 = add i64 %12614, %12615
  store i64 %12616, i64* %RCX.i4476, align 8
  %12617 = icmp ult i64 %12616, %12615
  %12618 = icmp ult i64 %12616, %12614
  %12619 = or i1 %12617, %12618
  %12620 = zext i1 %12619 to i8
  store i8 %12620, i8* %12, align 1
  %12621 = trunc i64 %12616 to i32
  %12622 = and i32 %12621, 255
  %12623 = tail call i32 @llvm.ctpop.i32(i32 %12622)
  %12624 = trunc i32 %12623 to i8
  %12625 = and i8 %12624, 1
  %12626 = xor i8 %12625, 1
  store i8 %12626, i8* %13, align 1
  %12627 = xor i64 %12615, %12616
  %12628 = lshr i64 %12627, 4
  %12629 = trunc i64 %12628 to i8
  %12630 = and i8 %12629, 1
  store i8 %12630, i8* %14, align 1
  %12631 = icmp eq i64 %12616, 0
  %12632 = zext i1 %12631 to i8
  store i8 %12632, i8* %15, align 1
  %12633 = lshr i64 %12616, 63
  %12634 = trunc i64 %12633 to i8
  store i8 %12634, i8* %16, align 1
  %12635 = lshr i64 %12615, 63
  %12636 = lshr i64 %12613, 55
  %12637 = and i64 %12636, 1
  %12638 = xor i64 %12633, %12635
  %12639 = xor i64 %12633, %12637
  %12640 = add nuw nsw i64 %12638, %12639
  %12641 = icmp eq i64 %12640, 2
  %12642 = zext i1 %12641 to i8
  store i8 %12642, i8* %17, align 1
  %12643 = add i64 %12609, -8
  %12644 = add i64 %12610, 13
  store i64 %12644, i64* %3, align 8
  %12645 = inttoptr i64 %12643 to i32*
  %12646 = load i32, i32* %12645, align 4
  %12647 = zext i32 %12646 to i64
  store i64 %12647, i64* %RAX.i552, align 8
  %12648 = sext i32 %12646 to i64
  %12649 = lshr i64 %12648, 32
  store i64 %12649, i64* %219, align 8
  %12650 = add i64 %12610, 18
  store i64 %12650, i64* %3, align 8
  %12651 = sext i32 %12608 to i64
  %12652 = shl nuw i64 %12649, 32
  %12653 = or i64 %12652, %12647
  %12654 = sdiv i64 %12653, %12651
  %12655 = shl i64 %12654, 32
  %12656 = ashr exact i64 %12655, 32
  %12657 = icmp eq i64 %12654, %12656
  br i1 %12657, label %12660, label %12658

; <label>:12658:                                  ; preds = %routine_idivl__esi.exit676
  %12659 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12650, %struct.Memory* %12612)
  %.pre349 = load i32, i32* %EAX.i551, align 4
  %.pre350 = load i64, i64* %3, align 8
  %.pre351 = load i64, i64* %RCX.i4476, align 8
  %.pre352 = load i64, i64* %RBP.i, align 8
  %.pre353 = load i32, i32* %ESI.i4280, align 4
  br label %routine_idivl__esi.exit656

; <label>:12660:                                  ; preds = %routine_idivl__esi.exit676
  %12661 = srem i64 %12653, %12651
  %12662 = and i64 %12654, 4294967295
  store i64 %12662, i64* %RAX.i552, align 8
  %12663 = and i64 %12661, 4294967295
  store i64 %12663, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12664 = trunc i64 %12654 to i32
  br label %routine_idivl__esi.exit656

routine_idivl__esi.exit656:                       ; preds = %12660, %12658
  %12665 = phi i32 [ %.pre353, %12658 ], [ %12608, %12660 ]
  %12666 = phi i64 [ %.pre352, %12658 ], [ %12609, %12660 ]
  %12667 = phi i64 [ %.pre351, %12658 ], [ %12616, %12660 ]
  %12668 = phi i64 [ %.pre350, %12658 ], [ %12650, %12660 ]
  %12669 = phi i32 [ %.pre349, %12658 ], [ %12664, %12660 ]
  %12670 = phi %struct.Memory* [ %12659, %12658 ], [ %12612, %12660 ]
  %12671 = sext i32 %12669 to i64
  %12672 = shl nsw i64 %12671, 6
  store i64 %12672, i64* %RDI.i4259, align 8
  %12673 = add i64 %12672, %12667
  store i64 %12673, i64* %RCX.i4476, align 8
  %12674 = icmp ult i64 %12673, %12667
  %12675 = icmp ult i64 %12673, %12672
  %12676 = or i1 %12674, %12675
  %12677 = zext i1 %12676 to i8
  store i8 %12677, i8* %12, align 1
  %12678 = trunc i64 %12673 to i32
  %12679 = and i32 %12678, 255
  %12680 = tail call i32 @llvm.ctpop.i32(i32 %12679)
  %12681 = trunc i32 %12680 to i8
  %12682 = and i8 %12681, 1
  %12683 = xor i8 %12682, 1
  store i8 %12683, i8* %13, align 1
  %12684 = xor i64 %12667, %12673
  %12685 = lshr i64 %12684, 4
  %12686 = trunc i64 %12685 to i8
  %12687 = and i8 %12686, 1
  store i8 %12687, i8* %14, align 1
  %12688 = icmp eq i64 %12673, 0
  %12689 = zext i1 %12688 to i8
  store i8 %12689, i8* %15, align 1
  %12690 = lshr i64 %12673, 63
  %12691 = trunc i64 %12690 to i8
  store i8 %12691, i8* %16, align 1
  %12692 = lshr i64 %12667, 63
  %12693 = lshr i64 %12671, 57
  %12694 = and i64 %12693, 1
  %12695 = xor i64 %12690, %12692
  %12696 = xor i64 %12690, %12694
  %12697 = add nuw nsw i64 %12695, %12696
  %12698 = icmp eq i64 %12697, 2
  %12699 = zext i1 %12698 to i8
  store i8 %12699, i8* %17, align 1
  %12700 = add i64 %12666, -12
  %12701 = add i64 %12668, 13
  store i64 %12701, i64* %3, align 8
  %12702 = inttoptr i64 %12700 to i32*
  %12703 = load i32, i32* %12702, align 4
  %12704 = zext i32 %12703 to i64
  store i64 %12704, i64* %RAX.i552, align 8
  %12705 = sext i32 %12703 to i64
  %12706 = lshr i64 %12705, 32
  store i64 %12706, i64* %219, align 8
  %12707 = add i64 %12668, 16
  store i64 %12707, i64* %3, align 8
  %12708 = sext i32 %12665 to i64
  %12709 = shl nuw i64 %12706, 32
  %12710 = or i64 %12709, %12704
  %12711 = sdiv i64 %12710, %12708
  %12712 = shl i64 %12711, 32
  %12713 = ashr exact i64 %12712, 32
  %12714 = icmp eq i64 %12711, %12713
  br i1 %12714, label %12717, label %12715

; <label>:12715:                                  ; preds = %routine_idivl__esi.exit656
  %12716 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12707, %struct.Memory* %12670)
  %.pre354 = load i32, i32* %EDX.i4468, align 4
  %.pre355 = load i64, i64* %3, align 8
  %.pre356 = load i64, i64* %RCX.i4476, align 8
  %.pre357 = load i64, i64* %RBP.i, align 8
  %.pre358 = load i32, i32* %ESI.i4280, align 4
  br label %routine_idivl__esi.exit639

; <label>:12717:                                  ; preds = %routine_idivl__esi.exit656
  %12718 = srem i64 %12710, %12708
  %12719 = and i64 %12711, 4294967295
  store i64 %12719, i64* %RAX.i552, align 8
  %12720 = and i64 %12718, 4294967295
  store i64 %12720, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12721 = trunc i64 %12718 to i32
  br label %routine_idivl__esi.exit639

routine_idivl__esi.exit639:                       ; preds = %12717, %12715
  %12722 = phi i32 [ %.pre358, %12715 ], [ %12665, %12717 ]
  %12723 = phi i64 [ %.pre357, %12715 ], [ %12666, %12717 ]
  %12724 = phi i64 [ %.pre356, %12715 ], [ %12673, %12717 ]
  %12725 = phi i64 [ %.pre355, %12715 ], [ %12707, %12717 ]
  %12726 = phi i32 [ %.pre354, %12715 ], [ %12721, %12717 ]
  %12727 = phi %struct.Memory* [ %12716, %12715 ], [ %12670, %12717 ]
  %12728 = sext i32 %12726 to i64
  %12729 = shl nsw i64 %12728, 4
  store i64 %12729, i64* %RDI.i4259, align 8
  %12730 = add i64 %12729, %12724
  store i64 %12730, i64* %RCX.i4476, align 8
  %12731 = icmp ult i64 %12730, %12724
  %12732 = icmp ult i64 %12730, %12729
  %12733 = or i1 %12731, %12732
  %12734 = zext i1 %12733 to i8
  store i8 %12734, i8* %12, align 1
  %12735 = trunc i64 %12730 to i32
  %12736 = and i32 %12735, 255
  %12737 = tail call i32 @llvm.ctpop.i32(i32 %12736)
  %12738 = trunc i32 %12737 to i8
  %12739 = and i8 %12738, 1
  %12740 = xor i8 %12739, 1
  store i8 %12740, i8* %13, align 1
  %12741 = xor i64 %12729, %12724
  %12742 = xor i64 %12741, %12730
  %12743 = lshr i64 %12742, 4
  %12744 = trunc i64 %12743 to i8
  %12745 = and i8 %12744, 1
  store i8 %12745, i8* %14, align 1
  %12746 = icmp eq i64 %12730, 0
  %12747 = zext i1 %12746 to i8
  store i8 %12747, i8* %15, align 1
  %12748 = lshr i64 %12730, 63
  %12749 = trunc i64 %12748 to i8
  store i8 %12749, i8* %16, align 1
  %12750 = lshr i64 %12724, 63
  %12751 = lshr i64 %12728, 59
  %12752 = and i64 %12751, 1
  %12753 = xor i64 %12748, %12750
  %12754 = xor i64 %12748, %12752
  %12755 = add nuw nsw i64 %12753, %12754
  %12756 = icmp eq i64 %12755, 2
  %12757 = zext i1 %12756 to i8
  store i8 %12757, i8* %17, align 1
  %12758 = add i64 %12723, -12
  %12759 = add i64 %12725, 13
  store i64 %12759, i64* %3, align 8
  %12760 = inttoptr i64 %12758 to i32*
  %12761 = load i32, i32* %12760, align 4
  %12762 = zext i32 %12761 to i64
  store i64 %12762, i64* %RAX.i552, align 8
  %12763 = sext i32 %12761 to i64
  %12764 = lshr i64 %12763, 32
  store i64 %12764, i64* %219, align 8
  %12765 = add i64 %12725, 18
  store i64 %12765, i64* %3, align 8
  %12766 = sext i32 %12722 to i64
  %12767 = shl nuw i64 %12764, 32
  %12768 = or i64 %12767, %12762
  %12769 = sdiv i64 %12768, %12766
  %12770 = shl i64 %12769, 32
  %12771 = ashr exact i64 %12770, 32
  %12772 = icmp eq i64 %12769, %12771
  br i1 %12772, label %12775, label %12773

; <label>:12773:                                  ; preds = %routine_idivl__esi.exit639
  %12774 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12765, %struct.Memory* %12727)
  %.pre359 = load i32, i32* %EAX.i551, align 4
  %.pre360 = load i64, i64* %3, align 8
  %.pre361 = load i64, i64* %RCX.i4476, align 8
  %.pre447 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit619

; <label>:12775:                                  ; preds = %routine_idivl__esi.exit639
  %12776 = srem i64 %12768, %12766
  %12777 = and i64 %12769, 4294967295
  store i64 %12777, i64* %RAX.i552, align 8
  %12778 = and i64 %12776, 4294967295
  store i64 %12778, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12779 = trunc i64 %12769 to i32
  br label %routine_idivl__esi.exit619

routine_idivl__esi.exit619:                       ; preds = %12775, %12773
  %12780 = phi i64 [ %.pre447, %12773 ], [ %12723, %12775 ]
  %12781 = phi i64 [ %.pre361, %12773 ], [ %12730, %12775 ]
  %12782 = phi i64 [ %.pre360, %12773 ], [ %12765, %12775 ]
  %12783 = phi i32 [ %.pre359, %12773 ], [ %12779, %12775 ]
  %12784 = phi %struct.Memory* [ %12774, %12773 ], [ %12727, %12775 ]
  %12785 = sext i32 %12783 to i64
  store i64 %12785, i64* %RDI.i4259, align 8
  %12786 = shl nsw i64 %12785, 2
  %12787 = add i64 %12781, %12786
  %12788 = add i64 %12782, 6
  store i64 %12788, i64* %3, align 8
  %12789 = inttoptr i64 %12787 to i32*
  %12790 = load i32, i32* %12789, align 4
  %12791 = zext i32 %12790 to i64
  store i64 %12791, i64* %RAX.i552, align 8
  %12792 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %12793 = add i64 %12792, 13112
  store i64 %12793, i64* %RCX.i4476, align 8
  %12794 = icmp ugt i64 %12792, -13113
  %12795 = zext i1 %12794 to i8
  store i8 %12795, i8* %12, align 1
  %12796 = trunc i64 %12793 to i32
  %12797 = and i32 %12796, 255
  %12798 = tail call i32 @llvm.ctpop.i32(i32 %12797)
  %12799 = trunc i32 %12798 to i8
  %12800 = and i8 %12799, 1
  %12801 = xor i8 %12800, 1
  store i8 %12801, i8* %13, align 1
  %12802 = xor i64 %12792, 16
  %12803 = xor i64 %12802, %12793
  %12804 = lshr i64 %12803, 4
  %12805 = trunc i64 %12804 to i8
  %12806 = and i8 %12805, 1
  store i8 %12806, i8* %14, align 1
  %12807 = icmp eq i64 %12793, 0
  %12808 = zext i1 %12807 to i8
  store i8 %12808, i8* %15, align 1
  %12809 = lshr i64 %12793, 63
  %12810 = trunc i64 %12809 to i8
  store i8 %12810, i8* %16, align 1
  %12811 = lshr i64 %12792, 63
  %12812 = xor i64 %12809, %12811
  %12813 = add nuw nsw i64 %12812, %12809
  %12814 = icmp eq i64 %12813, 2
  %12815 = zext i1 %12814 to i8
  store i8 %12815, i8* %17, align 1
  %12816 = add i64 %12780, -8
  %12817 = add i64 %12782, 25
  store i64 %12817, i64* %3, align 8
  %12818 = inttoptr i64 %12816 to i32*
  %12819 = load i32, i32* %12818, align 4
  %12820 = sext i32 %12819 to i64
  %12821 = shl nsw i64 %12820, 6
  store i64 %12821, i64* %RDI.i4259, align 8
  %12822 = add i64 %12821, %12793
  store i64 %12822, i64* %RCX.i4476, align 8
  %12823 = icmp ult i64 %12822, %12793
  %12824 = icmp ult i64 %12822, %12821
  %12825 = or i1 %12823, %12824
  %12826 = zext i1 %12825 to i8
  store i8 %12826, i8* %12, align 1
  %12827 = trunc i64 %12822 to i32
  %12828 = and i32 %12827, 255
  %12829 = tail call i32 @llvm.ctpop.i32(i32 %12828)
  %12830 = trunc i32 %12829 to i8
  %12831 = and i8 %12830, 1
  %12832 = xor i8 %12831, 1
  store i8 %12832, i8* %13, align 1
  %12833 = xor i64 %12793, %12822
  %12834 = lshr i64 %12833, 4
  %12835 = trunc i64 %12834 to i8
  %12836 = and i8 %12835, 1
  store i8 %12836, i8* %14, align 1
  %12837 = icmp eq i64 %12822, 0
  %12838 = zext i1 %12837 to i8
  store i8 %12838, i8* %15, align 1
  %12839 = lshr i64 %12822, 63
  %12840 = trunc i64 %12839 to i8
  store i8 %12840, i8* %16, align 1
  %12841 = lshr i64 %12820, 57
  %12842 = and i64 %12841, 1
  %12843 = xor i64 %12839, %12809
  %12844 = xor i64 %12839, %12842
  %12845 = add nuw nsw i64 %12843, %12844
  %12846 = icmp eq i64 %12845, 2
  %12847 = zext i1 %12846 to i8
  store i8 %12847, i8* %17, align 1
  %12848 = add i64 %12780, -12
  %12849 = add i64 %12782, 36
  store i64 %12849, i64* %3, align 8
  %12850 = inttoptr i64 %12848 to i32*
  %12851 = load i32, i32* %12850, align 4
  %12852 = sext i32 %12851 to i64
  store i64 %12852, i64* %RDI.i4259, align 8
  %12853 = shl nsw i64 %12852, 2
  %12854 = add i64 %12853, %12822
  %12855 = load i32, i32* %EAX.i551, align 4
  %12856 = add i64 %12782, 39
  store i64 %12856, i64* %3, align 8
  %12857 = inttoptr i64 %12854 to i32*
  store i32 %12855, i32* %12857, align 4
  %12858 = load i64, i64* %3, align 8
  %12859 = add i64 %12858, 134
  store i64 %12859, i64* %3, align 8
  br label %block_.L_405ed1

block_.L_405e50:                                  ; preds = %block_405dc3
  %12860 = add i64 %12531, -2336
  %12861 = add i64 %12574, 21
  store i64 %12861, i64* %3, align 8
  %12862 = inttoptr i64 %12860 to i32*
  store i32 4, i32* %12862, align 4
  %12863 = load i32, i32* %EDX.i4468, align 4
  %12864 = zext i32 %12863 to i64
  %12865 = load i64, i64* %3, align 8
  store i64 %12864, i64* %RAX.i552, align 8
  %12866 = sext i32 %12863 to i64
  %12867 = lshr i64 %12866, 32
  store i64 %12867, i64* %219, align 8
  %12868 = load i64, i64* %RBP.i, align 8
  %12869 = add i64 %12868, -2336
  %12870 = add i64 %12865, 9
  store i64 %12870, i64* %3, align 8
  %12871 = inttoptr i64 %12869 to i32*
  %12872 = load i32, i32* %12871, align 4
  %12873 = zext i32 %12872 to i64
  store i64 %12873, i64* %RSI.i757, align 8
  %12874 = add i64 %12865, 11
  store i64 %12874, i64* %3, align 8
  %12875 = sext i32 %12872 to i64
  %12876 = shl nuw i64 %12867, 32
  %12877 = or i64 %12876, %12864
  %12878 = sdiv i64 %12877, %12875
  %12879 = shl i64 %12878, 32
  %12880 = ashr exact i64 %12879, 32
  %12881 = icmp eq i64 %12878, %12880
  br i1 %12881, label %12884, label %12882

; <label>:12882:                                  ; preds = %block_.L_405e50
  %12883 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12874, %struct.Memory* %MEMORY.58)
  %.pre362 = load i32, i32* %EDX.i4468, align 4
  %.pre363 = load i64, i64* %3, align 8
  %.pre364 = load i64, i64* %RBP.i, align 8
  %.pre365 = load i32, i32* %ESI.i4280, align 4
  br label %routine_idivl__esi.exit570

; <label>:12884:                                  ; preds = %block_.L_405e50
  %12885 = srem i64 %12877, %12875
  %12886 = and i64 %12878, 4294967295
  store i64 %12886, i64* %RAX.i552, align 8
  %12887 = and i64 %12885, 4294967295
  store i64 %12887, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12888 = trunc i64 %12885 to i32
  br label %routine_idivl__esi.exit570

routine_idivl__esi.exit570:                       ; preds = %12884, %12882
  %12889 = phi i32 [ %.pre365, %12882 ], [ %12872, %12884 ]
  %12890 = phi i64 [ %.pre364, %12882 ], [ %12868, %12884 ]
  %12891 = phi i64 [ %.pre363, %12882 ], [ %12874, %12884 ]
  %12892 = phi i32 [ %.pre362, %12882 ], [ %12888, %12884 ]
  %12893 = phi %struct.Memory* [ %12883, %12882 ], [ %MEMORY.58, %12884 ]
  %12894 = sext i32 %12892 to i64
  %12895 = shl nsw i64 %12894, 8
  store i64 %12895, i64* %RDI.i4259, align 8
  %12896 = load i64, i64* %RCX.i4476, align 8
  %12897 = add i64 %12895, %12896
  store i64 %12897, i64* %RCX.i4476, align 8
  %12898 = icmp ult i64 %12897, %12896
  %12899 = icmp ult i64 %12897, %12895
  %12900 = or i1 %12898, %12899
  %12901 = zext i1 %12900 to i8
  store i8 %12901, i8* %12, align 1
  %12902 = trunc i64 %12897 to i32
  %12903 = and i32 %12902, 255
  %12904 = tail call i32 @llvm.ctpop.i32(i32 %12903)
  %12905 = trunc i32 %12904 to i8
  %12906 = and i8 %12905, 1
  %12907 = xor i8 %12906, 1
  store i8 %12907, i8* %13, align 1
  %12908 = xor i64 %12896, %12897
  %12909 = lshr i64 %12908, 4
  %12910 = trunc i64 %12909 to i8
  %12911 = and i8 %12910, 1
  store i8 %12911, i8* %14, align 1
  %12912 = icmp eq i64 %12897, 0
  %12913 = zext i1 %12912 to i8
  store i8 %12913, i8* %15, align 1
  %12914 = lshr i64 %12897, 63
  %12915 = trunc i64 %12914 to i8
  store i8 %12915, i8* %16, align 1
  %12916 = lshr i64 %12896, 63
  %12917 = lshr i64 %12894, 55
  %12918 = and i64 %12917, 1
  %12919 = xor i64 %12914, %12916
  %12920 = xor i64 %12914, %12918
  %12921 = add nuw nsw i64 %12919, %12920
  %12922 = icmp eq i64 %12921, 2
  %12923 = zext i1 %12922 to i8
  store i8 %12923, i8* %17, align 1
  %12924 = add i64 %12890, -8
  %12925 = add i64 %12891, 13
  store i64 %12925, i64* %3, align 8
  %12926 = inttoptr i64 %12924 to i32*
  %12927 = load i32, i32* %12926, align 4
  %12928 = zext i32 %12927 to i64
  store i64 %12928, i64* %RAX.i552, align 8
  %12929 = sext i32 %12927 to i64
  %12930 = lshr i64 %12929, 32
  store i64 %12930, i64* %219, align 8
  %12931 = add i64 %12891, 18
  store i64 %12931, i64* %3, align 8
  %12932 = sext i32 %12889 to i64
  %12933 = shl nuw i64 %12930, 32
  %12934 = or i64 %12933, %12928
  %12935 = sdiv i64 %12934, %12932
  %12936 = shl i64 %12935, 32
  %12937 = ashr exact i64 %12936, 32
  %12938 = icmp eq i64 %12935, %12937
  br i1 %12938, label %12941, label %12939

; <label>:12939:                                  ; preds = %routine_idivl__esi.exit570
  %12940 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12931, %struct.Memory* %12893)
  %.pre366 = load i32, i32* %EAX.i551, align 4
  %.pre367 = load i64, i64* %3, align 8
  %.pre368 = load i64, i64* %RCX.i4476, align 8
  %.pre369 = load i64, i64* %RBP.i, align 8
  %.pre370 = load i32, i32* %ESI.i4280, align 4
  br label %routine_idivl__esi.exit549

; <label>:12941:                                  ; preds = %routine_idivl__esi.exit570
  %12942 = srem i64 %12934, %12932
  %12943 = and i64 %12935, 4294967295
  store i64 %12943, i64* %RAX.i552, align 8
  %12944 = and i64 %12942, 4294967295
  store i64 %12944, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %12945 = trunc i64 %12935 to i32
  br label %routine_idivl__esi.exit549

routine_idivl__esi.exit549:                       ; preds = %12941, %12939
  %12946 = phi i32 [ %.pre370, %12939 ], [ %12889, %12941 ]
  %12947 = phi i64 [ %.pre369, %12939 ], [ %12890, %12941 ]
  %12948 = phi i64 [ %.pre368, %12939 ], [ %12897, %12941 ]
  %12949 = phi i64 [ %.pre367, %12939 ], [ %12931, %12941 ]
  %12950 = phi i32 [ %.pre366, %12939 ], [ %12945, %12941 ]
  %12951 = phi %struct.Memory* [ %12940, %12939 ], [ %12893, %12941 ]
  %12952 = sext i32 %12950 to i64
  %12953 = shl nsw i64 %12952, 6
  store i64 %12953, i64* %RDI.i4259, align 8
  %12954 = add i64 %12953, %12948
  store i64 %12954, i64* %RCX.i4476, align 8
  %12955 = icmp ult i64 %12954, %12948
  %12956 = icmp ult i64 %12954, %12953
  %12957 = or i1 %12955, %12956
  %12958 = zext i1 %12957 to i8
  store i8 %12958, i8* %12, align 1
  %12959 = trunc i64 %12954 to i32
  %12960 = and i32 %12959, 255
  %12961 = tail call i32 @llvm.ctpop.i32(i32 %12960)
  %12962 = trunc i32 %12961 to i8
  %12963 = and i8 %12962, 1
  %12964 = xor i8 %12963, 1
  store i8 %12964, i8* %13, align 1
  %12965 = xor i64 %12948, %12954
  %12966 = lshr i64 %12965, 4
  %12967 = trunc i64 %12966 to i8
  %12968 = and i8 %12967, 1
  store i8 %12968, i8* %14, align 1
  %12969 = icmp eq i64 %12954, 0
  %12970 = zext i1 %12969 to i8
  store i8 %12970, i8* %15, align 1
  %12971 = lshr i64 %12954, 63
  %12972 = trunc i64 %12971 to i8
  store i8 %12972, i8* %16, align 1
  %12973 = lshr i64 %12948, 63
  %12974 = lshr i64 %12952, 57
  %12975 = and i64 %12974, 1
  %12976 = xor i64 %12971, %12973
  %12977 = xor i64 %12971, %12975
  %12978 = add nuw nsw i64 %12976, %12977
  %12979 = icmp eq i64 %12978, 2
  %12980 = zext i1 %12979 to i8
  store i8 %12980, i8* %17, align 1
  %12981 = add i64 %12947, -12
  %12982 = add i64 %12949, 13
  store i64 %12982, i64* %3, align 8
  %12983 = inttoptr i64 %12981 to i32*
  %12984 = load i32, i32* %12983, align 4
  %12985 = zext i32 %12984 to i64
  store i64 %12985, i64* %RAX.i552, align 8
  %12986 = sext i32 %12984 to i64
  %12987 = lshr i64 %12986, 32
  store i64 %12987, i64* %219, align 8
  %12988 = add i64 %12949, 16
  store i64 %12988, i64* %3, align 8
  %12989 = sext i32 %12946 to i64
  %12990 = shl nuw i64 %12987, 32
  %12991 = or i64 %12990, %12985
  %12992 = sdiv i64 %12991, %12989
  %12993 = shl i64 %12992, 32
  %12994 = ashr exact i64 %12993, 32
  %12995 = icmp eq i64 %12992, %12994
  br i1 %12995, label %12998, label %12996

; <label>:12996:                                  ; preds = %routine_idivl__esi.exit549
  %12997 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12988, %struct.Memory* %12951)
  %.pre371 = load i32, i32* %EDX.i4468, align 4
  %.pre372 = load i64, i64* %3, align 8
  %.pre373 = load i64, i64* %RCX.i4476, align 8
  %.pre374 = load i64, i64* %RBP.i, align 8
  %.pre375 = load i32, i32* %ESI.i4280, align 4
  br label %routine_idivl__esi.exit532

; <label>:12998:                                  ; preds = %routine_idivl__esi.exit549
  %12999 = srem i64 %12991, %12989
  %13000 = and i64 %12992, 4294967295
  store i64 %13000, i64* %RAX.i552, align 8
  %13001 = and i64 %12999, 4294967295
  store i64 %13001, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %13002 = trunc i64 %12999 to i32
  br label %routine_idivl__esi.exit532

routine_idivl__esi.exit532:                       ; preds = %12998, %12996
  %13003 = phi i32 [ %.pre375, %12996 ], [ %12946, %12998 ]
  %13004 = phi i64 [ %.pre374, %12996 ], [ %12947, %12998 ]
  %13005 = phi i64 [ %.pre373, %12996 ], [ %12954, %12998 ]
  %13006 = phi i64 [ %.pre372, %12996 ], [ %12988, %12998 ]
  %13007 = phi i32 [ %.pre371, %12996 ], [ %13002, %12998 ]
  %13008 = phi %struct.Memory* [ %12997, %12996 ], [ %12951, %12998 ]
  %13009 = sext i32 %13007 to i64
  %13010 = shl nsw i64 %13009, 4
  store i64 %13010, i64* %RDI.i4259, align 8
  %13011 = add i64 %13010, %13005
  store i64 %13011, i64* %RCX.i4476, align 8
  %13012 = icmp ult i64 %13011, %13005
  %13013 = icmp ult i64 %13011, %13010
  %13014 = or i1 %13012, %13013
  %13015 = zext i1 %13014 to i8
  store i8 %13015, i8* %12, align 1
  %13016 = trunc i64 %13011 to i32
  %13017 = and i32 %13016, 255
  %13018 = tail call i32 @llvm.ctpop.i32(i32 %13017)
  %13019 = trunc i32 %13018 to i8
  %13020 = and i8 %13019, 1
  %13021 = xor i8 %13020, 1
  store i8 %13021, i8* %13, align 1
  %13022 = xor i64 %13010, %13005
  %13023 = xor i64 %13022, %13011
  %13024 = lshr i64 %13023, 4
  %13025 = trunc i64 %13024 to i8
  %13026 = and i8 %13025, 1
  store i8 %13026, i8* %14, align 1
  %13027 = icmp eq i64 %13011, 0
  %13028 = zext i1 %13027 to i8
  store i8 %13028, i8* %15, align 1
  %13029 = lshr i64 %13011, 63
  %13030 = trunc i64 %13029 to i8
  store i8 %13030, i8* %16, align 1
  %13031 = lshr i64 %13005, 63
  %13032 = lshr i64 %13009, 59
  %13033 = and i64 %13032, 1
  %13034 = xor i64 %13029, %13031
  %13035 = xor i64 %13029, %13033
  %13036 = add nuw nsw i64 %13034, %13035
  %13037 = icmp eq i64 %13036, 2
  %13038 = zext i1 %13037 to i8
  store i8 %13038, i8* %17, align 1
  %13039 = add i64 %13004, -12
  %13040 = add i64 %13006, 13
  store i64 %13040, i64* %3, align 8
  %13041 = inttoptr i64 %13039 to i32*
  %13042 = load i32, i32* %13041, align 4
  %13043 = zext i32 %13042 to i64
  store i64 %13043, i64* %RAX.i552, align 8
  %13044 = sext i32 %13042 to i64
  %13045 = lshr i64 %13044, 32
  store i64 %13045, i64* %219, align 8
  %13046 = add i64 %13006, 18
  store i64 %13046, i64* %3, align 8
  %13047 = sext i32 %13003 to i64
  %13048 = shl nuw i64 %13045, 32
  %13049 = or i64 %13048, %13043
  %13050 = sdiv i64 %13049, %13047
  %13051 = shl i64 %13050, 32
  %13052 = ashr exact i64 %13051, 32
  %13053 = icmp eq i64 %13050, %13052
  br i1 %13053, label %13056, label %13054

; <label>:13054:                                  ; preds = %routine_idivl__esi.exit532
  %13055 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %13046, %struct.Memory* %13008)
  %.pre376 = load i32, i32* %EAX.i551, align 4
  %.pre377 = load i64, i64* %3, align 8
  %.pre378 = load i64, i64* %RCX.i4476, align 8
  br label %routine_idivl__esi.exit

; <label>:13056:                                  ; preds = %routine_idivl__esi.exit532
  %13057 = srem i64 %13049, %13047
  %13058 = and i64 %13050, 4294967295
  store i64 %13058, i64* %RAX.i552, align 8
  %13059 = and i64 %13057, 4294967295
  store i64 %13059, i64* %RDX.i658, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %13060 = trunc i64 %13050 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %13056, %13054
  %13061 = phi i64 [ %.pre378, %13054 ], [ %13011, %13056 ]
  %13062 = phi i64 [ %.pre377, %13054 ], [ %13046, %13056 ]
  %13063 = phi i32 [ %.pre376, %13054 ], [ %13060, %13056 ]
  %13064 = phi %struct.Memory* [ %13055, %13054 ], [ %13008, %13056 ]
  %13065 = sext i32 %13063 to i64
  store i64 %13065, i64* %RDI.i4259, align 8
  %13066 = shl nsw i64 %13065, 2
  %13067 = add i64 %13061, %13066
  %13068 = add i64 %13062, 6
  store i64 %13068, i64* %3, align 8
  %13069 = inttoptr i64 %13067 to i32*
  %13070 = load i32, i32* %13069, align 4
  %13071 = add i32 %13070, 32
  %13072 = zext i32 %13071 to i64
  %13073 = shl nuw i64 %13072, 32
  %13074 = ashr i64 %13073, 37
  %13075 = lshr i64 %13074, 1
  %13076 = and i64 %13075, 4294967295
  store i64 %13076, i64* %RAX.i552, align 8
  %13077 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %13078 = add i64 %13077, 13112
  store i64 %13078, i64* %RCX.i4476, align 8
  %13079 = icmp ugt i64 %13077, -13113
  %13080 = zext i1 %13079 to i8
  store i8 %13080, i8* %12, align 1
  %13081 = trunc i64 %13078 to i32
  %13082 = and i32 %13081, 255
  %13083 = tail call i32 @llvm.ctpop.i32(i32 %13082)
  %13084 = trunc i32 %13083 to i8
  %13085 = and i8 %13084, 1
  %13086 = xor i8 %13085, 1
  store i8 %13086, i8* %13, align 1
  %13087 = xor i64 %13077, 16
  %13088 = xor i64 %13087, %13078
  %13089 = lshr i64 %13088, 4
  %13090 = trunc i64 %13089 to i8
  %13091 = and i8 %13090, 1
  store i8 %13091, i8* %14, align 1
  %13092 = icmp eq i64 %13078, 0
  %13093 = zext i1 %13092 to i8
  store i8 %13093, i8* %15, align 1
  %13094 = lshr i64 %13078, 63
  %13095 = trunc i64 %13094 to i8
  store i8 %13095, i8* %16, align 1
  %13096 = lshr i64 %13077, 63
  %13097 = xor i64 %13094, %13096
  %13098 = add nuw nsw i64 %13097, %13094
  %13099 = icmp eq i64 %13098, 2
  %13100 = zext i1 %13099 to i8
  store i8 %13100, i8* %17, align 1
  %13101 = load i64, i64* %RBP.i, align 8
  %13102 = add i64 %13101, -8
  %13103 = add i64 %13062, 31
  store i64 %13103, i64* %3, align 8
  %13104 = inttoptr i64 %13102 to i32*
  %13105 = load i32, i32* %13104, align 4
  %13106 = sext i32 %13105 to i64
  %13107 = shl nsw i64 %13106, 6
  store i64 %13107, i64* %RDI.i4259, align 8
  %13108 = add i64 %13107, %13078
  store i64 %13108, i64* %RCX.i4476, align 8
  %13109 = icmp ult i64 %13108, %13078
  %13110 = icmp ult i64 %13108, %13107
  %13111 = or i1 %13109, %13110
  %13112 = zext i1 %13111 to i8
  store i8 %13112, i8* %12, align 1
  %13113 = trunc i64 %13108 to i32
  %13114 = and i32 %13113, 255
  %13115 = tail call i32 @llvm.ctpop.i32(i32 %13114)
  %13116 = trunc i32 %13115 to i8
  %13117 = and i8 %13116, 1
  %13118 = xor i8 %13117, 1
  store i8 %13118, i8* %13, align 1
  %13119 = xor i64 %13078, %13108
  %13120 = lshr i64 %13119, 4
  %13121 = trunc i64 %13120 to i8
  %13122 = and i8 %13121, 1
  store i8 %13122, i8* %14, align 1
  %13123 = icmp eq i64 %13108, 0
  %13124 = zext i1 %13123 to i8
  store i8 %13124, i8* %15, align 1
  %13125 = lshr i64 %13108, 63
  %13126 = trunc i64 %13125 to i8
  store i8 %13126, i8* %16, align 1
  %13127 = lshr i64 %13106, 57
  %13128 = and i64 %13127, 1
  %13129 = xor i64 %13125, %13094
  %13130 = xor i64 %13125, %13128
  %13131 = add nuw nsw i64 %13129, %13130
  %13132 = icmp eq i64 %13131, 2
  %13133 = zext i1 %13132 to i8
  store i8 %13133, i8* %17, align 1
  %13134 = add i64 %13101, -12
  %13135 = add i64 %13062, 42
  store i64 %13135, i64* %3, align 8
  %13136 = inttoptr i64 %13134 to i32*
  %13137 = load i32, i32* %13136, align 4
  %13138 = sext i32 %13137 to i64
  store i64 %13138, i64* %RDI.i4259, align 8
  %13139 = shl nsw i64 %13138, 2
  %13140 = add i64 %13139, %13108
  %13141 = load i32, i32* %EAX.i551, align 4
  %13142 = add i64 %13062, 45
  store i64 %13142, i64* %3, align 8
  %13143 = inttoptr i64 %13140 to i32*
  store i32 %13141, i32* %13143, align 4
  %.pre379 = load i64, i64* %3, align 8
  br label %block_.L_405ed1

block_.L_405ed1:                                  ; preds = %routine_idivl__esi.exit, %routine_idivl__esi.exit619
  %13144 = phi i64 [ %.pre379, %routine_idivl__esi.exit ], [ %12859, %routine_idivl__esi.exit619 ]
  %MEMORY.59 = phi %struct.Memory* [ %13064, %routine_idivl__esi.exit ], [ %12784, %routine_idivl__esi.exit619 ]
  %13145 = load i64, i64* %RBP.i, align 8
  %13146 = add i64 %13145, -8
  %13147 = add i64 %13144, 8
  store i64 %13147, i64* %3, align 8
  %13148 = inttoptr i64 %13146 to i32*
  %13149 = load i32, i32* %13148, align 4
  %13150 = add i32 %13149, 1
  %13151 = zext i32 %13150 to i64
  store i64 %13151, i64* %RAX.i552, align 8
  %13152 = icmp eq i32 %13149, -1
  %13153 = icmp eq i32 %13150, 0
  %13154 = or i1 %13152, %13153
  %13155 = zext i1 %13154 to i8
  store i8 %13155, i8* %12, align 1
  %13156 = and i32 %13150, 255
  %13157 = tail call i32 @llvm.ctpop.i32(i32 %13156)
  %13158 = trunc i32 %13157 to i8
  %13159 = and i8 %13158, 1
  %13160 = xor i8 %13159, 1
  store i8 %13160, i8* %13, align 1
  %13161 = xor i32 %13150, %13149
  %13162 = lshr i32 %13161, 4
  %13163 = trunc i32 %13162 to i8
  %13164 = and i8 %13163, 1
  store i8 %13164, i8* %14, align 1
  %13165 = zext i1 %13153 to i8
  store i8 %13165, i8* %15, align 1
  %13166 = lshr i32 %13150, 31
  %13167 = trunc i32 %13166 to i8
  store i8 %13167, i8* %16, align 1
  %13168 = lshr i32 %13149, 31
  %13169 = xor i32 %13166, %13168
  %13170 = add nuw nsw i32 %13169, %13166
  %13171 = icmp eq i32 %13170, 2
  %13172 = zext i1 %13171 to i8
  store i8 %13172, i8* %17, align 1
  %13173 = add i64 %13144, 14
  store i64 %13173, i64* %3, align 8
  store i32 %13150, i32* %13148, align 4
  %13174 = load i64, i64* %3, align 8
  %13175 = add i64 %13174, -294
  store i64 %13175, i64* %3, align 8
  br label %block_.L_405db9

block_.L_405ee4:                                  ; preds = %block_.L_405db9
  %13176 = add i64 %12531, -12
  %13177 = add i64 %12560, 8
  store i64 %13177, i64* %3, align 8
  %13178 = inttoptr i64 %13176 to i32*
  %13179 = load i32, i32* %13178, align 4
  %13180 = add i32 %13179, 1
  %13181 = zext i32 %13180 to i64
  store i64 %13181, i64* %RAX.i552, align 8
  %13182 = icmp eq i32 %13179, -1
  %13183 = icmp eq i32 %13180, 0
  %13184 = or i1 %13182, %13183
  %13185 = zext i1 %13184 to i8
  store i8 %13185, i8* %12, align 1
  %13186 = and i32 %13180, 255
  %13187 = tail call i32 @llvm.ctpop.i32(i32 %13186)
  %13188 = trunc i32 %13187 to i8
  %13189 = and i8 %13188, 1
  %13190 = xor i8 %13189, 1
  store i8 %13190, i8* %13, align 1
  %13191 = xor i32 %13180, %13179
  %13192 = lshr i32 %13191, 4
  %13193 = trunc i32 %13192 to i8
  %13194 = and i8 %13193, 1
  store i8 %13194, i8* %14, align 1
  %13195 = zext i1 %13183 to i8
  store i8 %13195, i8* %15, align 1
  %13196 = lshr i32 %13180, 31
  %13197 = trunc i32 %13196 to i8
  store i8 %13197, i8* %16, align 1
  %13198 = lshr i32 %13179, 31
  %13199 = xor i32 %13196, %13198
  %13200 = add nuw nsw i32 %13199, %13196
  %13201 = icmp eq i32 %13200, 2
  %13202 = zext i1 %13201 to i8
  store i8 %13202, i8* %17, align 1
  %13203 = add i64 %12560, 14
  store i64 %13203, i64* %3, align 8
  store i32 %13180, i32* %13178, align 4
  %13204 = load i64, i64* %3, align 8
  %13205 = add i64 %13204, -330
  store i64 %13205, i64* %3, align 8
  br label %block_.L_405da8

block_.L_405ef7:                                  ; preds = %block_.L_405da8
  %13206 = add i64 %12526, 5
  store i64 %13206, i64* %3, align 8
  br label %block_.L_405efc

block_.L_405efc:                                  ; preds = %block_.L_405ef7, %block_.L_405d9c
  %13207 = phi i64 [ %12081, %block_.L_405d9c ], [ %12497, %block_.L_405ef7 ]
  %storemerge = phi i64 [ %12495, %block_.L_405d9c ], [ %13206, %block_.L_405ef7 ]
  %MEMORY.60 = phi %struct.Memory* [ %MEMORY.55, %block_.L_405d9c ], [ %MEMORY.57, %block_.L_405ef7 ]
  %13208 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %13208, i64* %RAX.i552, align 8
  %13209 = add i64 %13208, 72724
  %13210 = add i64 %storemerge, 15
  store i64 %13210, i64* %3, align 8
  %13211 = inttoptr i64 %13209 to i32*
  %13212 = load i32, i32* %13211, align 4
  store i8 0, i8* %12, align 1
  %13213 = and i32 %13212, 255
  %13214 = tail call i32 @llvm.ctpop.i32(i32 %13213)
  %13215 = trunc i32 %13214 to i8
  %13216 = and i8 %13215, 1
  %13217 = xor i8 %13216, 1
  store i8 %13217, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %13218 = icmp eq i32 %13212, 0
  %13219 = zext i1 %13218 to i8
  store i8 %13219, i8* %15, align 1
  %13220 = lshr i32 %13212, 31
  %13221 = trunc i32 %13220 to i8
  store i8 %13221, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v479 = select i1 %13218, i64 21, i64 837
  %13222 = add i64 %storemerge, %.v479
  store i64 %13222, i64* %3, align 8
  br i1 %13218, label %block_405f11, label %block_.L_406241

block_405f11:                                     ; preds = %block_.L_405efc
  %13223 = add i64 %13207, -12
  %13224 = add i64 %13222, 7
  store i64 %13224, i64* %3, align 8
  %13225 = inttoptr i64 %13223 to i32*
  store i32 0, i32* %13225, align 4
  %CX.i57 = bitcast %union.anon* %19 to i16*
  %DI.i392 = bitcast %union.anon* %20 to i16*
  %.pre338 = load i64, i64* %3, align 8
  br label %block_.L_405f18

block_.L_405f18:                                  ; preds = %block_.L_406229, %block_405f11
  %13226 = phi i64 [ %14519, %block_.L_406229 ], [ %.pre338, %block_405f11 ]
  %13227 = load i64, i64* %RBP.i, align 8
  %13228 = add i64 %13227, -12
  %13229 = add i64 %13226, 4
  store i64 %13229, i64* %3, align 8
  %13230 = inttoptr i64 %13228 to i32*
  %13231 = load i32, i32* %13230, align 4
  %13232 = add i32 %13231, -16
  %13233 = icmp ult i32 %13231, 16
  %13234 = zext i1 %13233 to i8
  store i8 %13234, i8* %12, align 1
  %13235 = and i32 %13232, 255
  %13236 = tail call i32 @llvm.ctpop.i32(i32 %13235)
  %13237 = trunc i32 %13236 to i8
  %13238 = and i8 %13237, 1
  %13239 = xor i8 %13238, 1
  store i8 %13239, i8* %13, align 1
  %13240 = xor i32 %13231, 16
  %13241 = xor i32 %13240, %13232
  %13242 = lshr i32 %13241, 4
  %13243 = trunc i32 %13242 to i8
  %13244 = and i8 %13243, 1
  store i8 %13244, i8* %14, align 1
  %13245 = icmp eq i32 %13232, 0
  %13246 = zext i1 %13245 to i8
  store i8 %13246, i8* %15, align 1
  %13247 = lshr i32 %13232, 31
  %13248 = trunc i32 %13247 to i8
  store i8 %13248, i8* %16, align 1
  %13249 = lshr i32 %13231, 31
  %13250 = xor i32 %13247, %13249
  %13251 = add nuw nsw i32 %13250, %13249
  %13252 = icmp eq i32 %13251, 2
  %13253 = zext i1 %13252 to i8
  store i8 %13253, i8* %17, align 1
  %13254 = icmp ne i8 %13248, 0
  %13255 = xor i1 %13254, %13252
  %.v480 = select i1 %13255, i64 10, i64 804
  %13256 = add i64 %13226, %.v480
  store i64 %13256, i64* %3, align 8
  br i1 %13255, label %block_405f22, label %block_.L_40623c

block_405f22:                                     ; preds = %block_.L_405f18
  %13257 = add i64 %13227, -8
  %13258 = add i64 %13256, 7
  store i64 %13258, i64* %3, align 8
  %13259 = inttoptr i64 %13257 to i32*
  store i32 0, i32* %13259, align 4
  %.pre339 = load i64, i64* %3, align 8
  br label %block_.L_405f29

block_.L_405f29:                                  ; preds = %block_.L_406216, %block_405f22
  %13260 = phi i64 [ %14489, %block_.L_406216 ], [ %.pre339, %block_405f22 ]
  %13261 = load i64, i64* %RBP.i, align 8
  %13262 = add i64 %13261, -8
  %13263 = add i64 %13260, 4
  store i64 %13263, i64* %3, align 8
  %13264 = inttoptr i64 %13262 to i32*
  %13265 = load i32, i32* %13264, align 4
  %13266 = add i32 %13265, -16
  %13267 = icmp ult i32 %13265, 16
  %13268 = zext i1 %13267 to i8
  store i8 %13268, i8* %12, align 1
  %13269 = and i32 %13266, 255
  %13270 = tail call i32 @llvm.ctpop.i32(i32 %13269)
  %13271 = trunc i32 %13270 to i8
  %13272 = and i8 %13271, 1
  %13273 = xor i8 %13272, 1
  store i8 %13273, i8* %13, align 1
  %13274 = xor i32 %13265, 16
  %13275 = xor i32 %13274, %13266
  %13276 = lshr i32 %13275, 4
  %13277 = trunc i32 %13276 to i8
  %13278 = and i8 %13277, 1
  store i8 %13278, i8* %14, align 1
  %13279 = icmp eq i32 %13266, 0
  %13280 = zext i1 %13279 to i8
  store i8 %13280, i8* %15, align 1
  %13281 = lshr i32 %13266, 31
  %13282 = trunc i32 %13281 to i8
  store i8 %13282, i8* %16, align 1
  %13283 = lshr i32 %13265, 31
  %13284 = xor i32 %13281, %13283
  %13285 = add nuw nsw i32 %13284, %13283
  %13286 = icmp eq i32 %13285, 2
  %13287 = zext i1 %13286 to i8
  store i8 %13287, i8* %17, align 1
  %13288 = icmp ne i8 %13282, 0
  %13289 = xor i1 %13288, %13286
  %.v454 = select i1 %13289, i64 10, i64 768
  %13290 = add i64 %13260, %.v454
  store i64 %13290, i64* %3, align 8
  br i1 %13289, label %block_405f33, label %block_.L_406229

block_405f33:                                     ; preds = %block_.L_405f29
  %13291 = add i64 %13261, -2260
  %13292 = add i64 %13290, 7
  store i64 %13292, i64* %3, align 8
  %13293 = inttoptr i64 %13291 to i32*
  %13294 = load i32, i32* %13293, align 4
  store i8 0, i8* %12, align 1
  %13295 = and i32 %13294, 255
  %13296 = tail call i32 @llvm.ctpop.i32(i32 %13295)
  %13297 = trunc i32 %13296 to i8
  %13298 = and i8 %13297, 1
  %13299 = xor i8 %13298, 1
  store i8 %13299, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %13300 = icmp eq i32 %13294, 0
  %13301 = zext i1 %13300 to i8
  store i8 %13301, i8* %15, align 1
  %13302 = lshr i32 %13294, 31
  %13303 = trunc i32 %13302 to i8
  store i8 %13303, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v481 = select i1 %13300, i64 155, i64 13
  %13304 = add i64 %13290, %.v481
  store i64 %13304, i64* %3, align 8
  br i1 %13300, label %block_.L_405fce, label %block_405f40

block_405f40:                                     ; preds = %block_405f33
  %13305 = add i64 %13261, -1056
  store i64 %13305, i64* %RAX.i552, align 8
  %13306 = add i64 %13304, 11
  store i64 %13306, i64* %3, align 8
  %13307 = load i32, i32* %13264, align 4
  %13308 = sext i32 %13307 to i64
  %13309 = shl nsw i64 %13308, 6
  store i64 %13309, i64* %RCX.i4476, align 8
  %13310 = add i64 %13309, %13305
  store i64 %13310, i64* %RAX.i552, align 8
  %13311 = icmp ult i64 %13310, %13305
  %13312 = icmp ult i64 %13310, %13309
  %13313 = or i1 %13311, %13312
  %13314 = zext i1 %13313 to i8
  store i8 %13314, i8* %12, align 1
  %13315 = trunc i64 %13310 to i32
  %13316 = and i32 %13315, 255
  %13317 = tail call i32 @llvm.ctpop.i32(i32 %13316)
  %13318 = trunc i32 %13317 to i8
  %13319 = and i8 %13318, 1
  %13320 = xor i8 %13319, 1
  store i8 %13320, i8* %13, align 1
  %13321 = xor i64 %13305, %13310
  %13322 = lshr i64 %13321, 4
  %13323 = trunc i64 %13322 to i8
  %13324 = and i8 %13323, 1
  store i8 %13324, i8* %14, align 1
  %13325 = icmp eq i64 %13310, 0
  %13326 = zext i1 %13325 to i8
  store i8 %13326, i8* %15, align 1
  %13327 = lshr i64 %13310, 63
  %13328 = trunc i64 %13327 to i8
  store i8 %13328, i8* %16, align 1
  %13329 = lshr i64 %13305, 63
  %13330 = lshr i64 %13308, 57
  %13331 = and i64 %13330, 1
  %13332 = xor i64 %13327, %13329
  %13333 = xor i64 %13327, %13331
  %13334 = add nuw nsw i64 %13332, %13333
  %13335 = icmp eq i64 %13334, 2
  %13336 = zext i1 %13335 to i8
  store i8 %13336, i8* %17, align 1
  %13337 = add i64 %13261, -12
  %13338 = add i64 %13304, 22
  store i64 %13338, i64* %3, align 8
  %13339 = inttoptr i64 %13337 to i32*
  %13340 = load i32, i32* %13339, align 4
  %13341 = sext i32 %13340 to i64
  store i64 %13341, i64* %RCX.i4476, align 8
  %13342 = shl nsw i64 %13341, 2
  %13343 = add i64 %13342, %13310
  %13344 = add i64 %13304, 25
  store i64 %13344, i64* %3, align 8
  %13345 = inttoptr i64 %13343 to i32*
  %13346 = load i32, i32* %13345, align 4
  %13347 = zext i32 %13346 to i64
  store i64 %13347, i64* %RDX.i658, align 8
  %13348 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %13349 = add i64 %13348, 4792
  store i64 %13349, i64* %RAX.i552, align 8
  %13350 = icmp ugt i64 %13348, -4793
  %13351 = zext i1 %13350 to i8
  store i8 %13351, i8* %12, align 1
  %13352 = trunc i64 %13349 to i32
  %13353 = and i32 %13352, 255
  %13354 = tail call i32 @llvm.ctpop.i32(i32 %13353)
  %13355 = trunc i32 %13354 to i8
  %13356 = and i8 %13355, 1
  %13357 = xor i8 %13356, 1
  store i8 %13357, i8* %13, align 1
  %13358 = xor i64 %13348, 16
  %13359 = xor i64 %13358, %13349
  %13360 = lshr i64 %13359, 4
  %13361 = trunc i64 %13360 to i8
  %13362 = and i8 %13361, 1
  store i8 %13362, i8* %14, align 1
  %13363 = icmp eq i64 %13349, 0
  %13364 = zext i1 %13363 to i8
  store i8 %13364, i8* %15, align 1
  %13365 = lshr i64 %13349, 63
  %13366 = trunc i64 %13365 to i8
  store i8 %13366, i8* %16, align 1
  %13367 = lshr i64 %13348, 63
  %13368 = xor i64 %13365, %13367
  %13369 = add nuw nsw i64 %13368, %13365
  %13370 = icmp eq i64 %13369, 2
  %13371 = zext i1 %13370 to i8
  store i8 %13371, i8* %17, align 1
  %13372 = load i64, i64* %RBP.i, align 8
  %13373 = add i64 %13372, -4
  %13374 = add i64 %13304, 43
  store i64 %13374, i64* %3, align 8
  %13375 = inttoptr i64 %13373 to i32*
  %13376 = load i32, i32* %13375, align 4
  %13377 = sext i32 %13376 to i64
  %13378 = shl nsw i64 %13377, 9
  store i64 %13378, i64* %RCX.i4476, align 8
  %13379 = add i64 %13378, %13349
  store i64 %13379, i64* %RAX.i552, align 8
  %13380 = icmp ult i64 %13379, %13349
  %13381 = icmp ult i64 %13379, %13378
  %13382 = or i1 %13380, %13381
  %13383 = zext i1 %13382 to i8
  store i8 %13383, i8* %12, align 1
  %13384 = trunc i64 %13379 to i32
  %13385 = and i32 %13384, 255
  %13386 = tail call i32 @llvm.ctpop.i32(i32 %13385)
  %13387 = trunc i32 %13386 to i8
  %13388 = and i8 %13387, 1
  %13389 = xor i8 %13388, 1
  store i8 %13389, i8* %13, align 1
  %13390 = xor i64 %13349, %13379
  %13391 = lshr i64 %13390, 4
  %13392 = trunc i64 %13391 to i8
  %13393 = and i8 %13392, 1
  store i8 %13393, i8* %14, align 1
  %13394 = icmp eq i64 %13379, 0
  %13395 = zext i1 %13394 to i8
  store i8 %13395, i8* %15, align 1
  %13396 = lshr i64 %13379, 63
  %13397 = trunc i64 %13396 to i8
  store i8 %13397, i8* %16, align 1
  %13398 = lshr i64 %13377, 54
  %13399 = and i64 %13398, 1
  %13400 = xor i64 %13396, %13365
  %13401 = xor i64 %13396, %13399
  %13402 = add nuw nsw i64 %13400, %13401
  %13403 = icmp eq i64 %13402, 2
  %13404 = zext i1 %13403 to i8
  store i8 %13404, i8* %17, align 1
  %13405 = add i64 %13372, -12
  %13406 = add i64 %13304, 54
  store i64 %13406, i64* %3, align 8
  %13407 = inttoptr i64 %13405 to i32*
  %13408 = load i32, i32* %13407, align 4
  %13409 = sext i32 %13408 to i64
  %13410 = shl nsw i64 %13409, 5
  store i64 %13410, i64* %RCX.i4476, align 8
  %13411 = add i64 %13410, %13379
  store i64 %13411, i64* %RAX.i552, align 8
  %13412 = icmp ult i64 %13411, %13379
  %13413 = icmp ult i64 %13411, %13410
  %13414 = or i1 %13412, %13413
  %13415 = zext i1 %13414 to i8
  store i8 %13415, i8* %12, align 1
  %13416 = trunc i64 %13411 to i32
  %13417 = and i32 %13416, 255
  %13418 = tail call i32 @llvm.ctpop.i32(i32 %13417)
  %13419 = trunc i32 %13418 to i8
  %13420 = and i8 %13419, 1
  %13421 = xor i8 %13420, 1
  store i8 %13421, i8* %13, align 1
  %13422 = xor i64 %13379, %13411
  %13423 = lshr i64 %13422, 4
  %13424 = trunc i64 %13423 to i8
  %13425 = and i8 %13424, 1
  store i8 %13425, i8* %14, align 1
  %13426 = icmp eq i64 %13411, 0
  %13427 = zext i1 %13426 to i8
  store i8 %13427, i8* %15, align 1
  %13428 = lshr i64 %13411, 63
  %13429 = trunc i64 %13428 to i8
  store i8 %13429, i8* %16, align 1
  %13430 = lshr i64 %13409, 58
  %13431 = and i64 %13430, 1
  %13432 = xor i64 %13428, %13396
  %13433 = xor i64 %13428, %13431
  %13434 = add nuw nsw i64 %13432, %13433
  %13435 = icmp eq i64 %13434, 2
  %13436 = zext i1 %13435 to i8
  store i8 %13436, i8* %17, align 1
  %13437 = load i64, i64* %RBP.i, align 8
  %13438 = add i64 %13437, -8
  %13439 = add i64 %13304, 65
  store i64 %13439, i64* %3, align 8
  %13440 = inttoptr i64 %13438 to i32*
  %13441 = load i32, i32* %13440, align 4
  %13442 = sext i32 %13441 to i64
  store i64 %13442, i64* %RCX.i4476, align 8
  %13443 = shl nsw i64 %13442, 1
  %13444 = add i64 %13443, %13411
  %13445 = add i64 %13304, 69
  store i64 %13445, i64* %3, align 8
  %13446 = inttoptr i64 %13444 to i16*
  %13447 = load i16, i16* %13446, align 2
  %13448 = zext i16 %13447 to i64
  store i64 %13448, i64* %RSI.i757, align 8
  %13449 = load i64, i64* %RDX.i658, align 8
  %13450 = zext i16 %13447 to i32
  %13451 = zext i16 %13447 to i64
  %13452 = trunc i64 %13449 to i32
  %13453 = add i32 %13450, %13452
  %13454 = zext i32 %13453 to i64
  store i64 %13454, i64* %RDX.i658, align 8
  %13455 = icmp ult i32 %13453, %13452
  %13456 = icmp ult i32 %13453, %13450
  %13457 = or i1 %13455, %13456
  %13458 = zext i1 %13457 to i8
  store i8 %13458, i8* %12, align 1
  %13459 = and i32 %13453, 255
  %13460 = tail call i32 @llvm.ctpop.i32(i32 %13459)
  %13461 = trunc i32 %13460 to i8
  %13462 = and i8 %13461, 1
  %13463 = xor i8 %13462, 1
  store i8 %13463, i8* %13, align 1
  %13464 = xor i64 %13451, %13449
  %13465 = trunc i64 %13464 to i32
  %13466 = xor i32 %13465, %13453
  %13467 = lshr i32 %13466, 4
  %13468 = trunc i32 %13467 to i8
  %13469 = and i8 %13468, 1
  store i8 %13469, i8* %14, align 1
  %13470 = icmp eq i32 %13453, 0
  %13471 = zext i1 %13470 to i8
  store i8 %13471, i8* %15, align 1
  %13472 = lshr i32 %13453, 31
  %13473 = trunc i32 %13472 to i8
  store i8 %13473, i8* %16, align 1
  %13474 = lshr i32 %13452, 31
  %13475 = xor i32 %13472, %13474
  %13476 = add nuw nsw i32 %13475, %13472
  %13477 = icmp eq i32 %13476, 2
  %13478 = zext i1 %13477 to i8
  store i8 %13478, i8* %17, align 1
  %13479 = trunc i32 %13453 to i16
  store i16 %13479, i16* %DI.i392, align 2
  %13480 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %13480, i64* %RAX.i552, align 8
  %13481 = add i64 %13480, 6424
  %13482 = add i64 %13304, 89
  store i64 %13482, i64* %3, align 8
  %13483 = inttoptr i64 %13481 to i64*
  %13484 = load i64, i64* %13483, align 8
  store i64 %13484, i64* %RAX.i552, align 8
  %13485 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %13485, i64* %RCX.i4476, align 8
  %13486 = add i64 %13485, 156
  %13487 = add i64 %13304, 103
  store i64 %13487, i64* %3, align 8
  %13488 = inttoptr i64 %13486 to i32*
  %13489 = load i32, i32* %13488, align 4
  %13490 = zext i32 %13489 to i64
  store i64 %13490, i64* %RDX.i658, align 8
  %13491 = add i64 %13437, -12
  %13492 = add i64 %13304, 106
  store i64 %13492, i64* %3, align 8
  %13493 = inttoptr i64 %13491 to i32*
  %13494 = load i32, i32* %13493, align 4
  %13495 = add i32 %13494, %13489
  %13496 = zext i32 %13495 to i64
  store i64 %13496, i64* %RDX.i658, align 8
  %13497 = icmp ult i32 %13495, %13489
  %13498 = icmp ult i32 %13495, %13494
  %13499 = or i1 %13497, %13498
  %13500 = zext i1 %13499 to i8
  store i8 %13500, i8* %12, align 1
  %13501 = and i32 %13495, 255
  %13502 = tail call i32 @llvm.ctpop.i32(i32 %13501)
  %13503 = trunc i32 %13502 to i8
  %13504 = and i8 %13503, 1
  %13505 = xor i8 %13504, 1
  store i8 %13505, i8* %13, align 1
  %13506 = xor i32 %13494, %13489
  %13507 = xor i32 %13506, %13495
  %13508 = lshr i32 %13507, 4
  %13509 = trunc i32 %13508 to i8
  %13510 = and i8 %13509, 1
  store i8 %13510, i8* %14, align 1
  %13511 = icmp eq i32 %13495, 0
  %13512 = zext i1 %13511 to i8
  store i8 %13512, i8* %15, align 1
  %13513 = lshr i32 %13495, 31
  %13514 = trunc i32 %13513 to i8
  store i8 %13514, i8* %16, align 1
  %13515 = lshr i32 %13489, 31
  %13516 = lshr i32 %13494, 31
  %13517 = xor i32 %13513, %13515
  %13518 = xor i32 %13513, %13516
  %13519 = add nuw nsw i32 %13517, %13518
  %13520 = icmp eq i32 %13519, 2
  %13521 = zext i1 %13520 to i8
  store i8 %13521, i8* %17, align 1
  %13522 = sext i32 %13495 to i64
  store i64 %13522, i64* %RCX.i4476, align 8
  %13523 = shl nsw i64 %13522, 3
  %13524 = add i64 %13484, %13523
  %13525 = add i64 %13304, 113
  store i64 %13525, i64* %3, align 8
  %13526 = inttoptr i64 %13524 to i64*
  %13527 = load i64, i64* %13526, align 8
  store i64 %13527, i64* %RAX.i552, align 8
  store i64 %13485, i64* %RCX.i4476, align 8
  %13528 = add i64 %13485, 152
  %13529 = add i64 %13304, 127
  store i64 %13529, i64* %3, align 8
  %13530 = inttoptr i64 %13528 to i32*
  %13531 = load i32, i32* %13530, align 4
  %13532 = zext i32 %13531 to i64
  store i64 %13532, i64* %RDX.i658, align 8
  %13533 = load i64, i64* %RBP.i, align 8
  %13534 = add i64 %13533, -8
  %13535 = add i64 %13304, 130
  store i64 %13535, i64* %3, align 8
  %13536 = inttoptr i64 %13534 to i32*
  %13537 = load i32, i32* %13536, align 4
  %13538 = add i32 %13537, %13531
  %13539 = zext i32 %13538 to i64
  store i64 %13539, i64* %RDX.i658, align 8
  %13540 = icmp ult i32 %13538, %13531
  %13541 = icmp ult i32 %13538, %13537
  %13542 = or i1 %13540, %13541
  %13543 = zext i1 %13542 to i8
  store i8 %13543, i8* %12, align 1
  %13544 = and i32 %13538, 255
  %13545 = tail call i32 @llvm.ctpop.i32(i32 %13544)
  %13546 = trunc i32 %13545 to i8
  %13547 = and i8 %13546, 1
  %13548 = xor i8 %13547, 1
  store i8 %13548, i8* %13, align 1
  %13549 = xor i32 %13537, %13531
  %13550 = xor i32 %13549, %13538
  %13551 = lshr i32 %13550, 4
  %13552 = trunc i32 %13551 to i8
  %13553 = and i8 %13552, 1
  store i8 %13553, i8* %14, align 1
  %13554 = icmp eq i32 %13538, 0
  %13555 = zext i1 %13554 to i8
  store i8 %13555, i8* %15, align 1
  %13556 = lshr i32 %13538, 31
  %13557 = trunc i32 %13556 to i8
  store i8 %13557, i8* %16, align 1
  %13558 = lshr i32 %13531, 31
  %13559 = lshr i32 %13537, 31
  %13560 = xor i32 %13556, %13558
  %13561 = xor i32 %13556, %13559
  %13562 = add nuw nsw i32 %13560, %13561
  %13563 = icmp eq i32 %13562, 2
  %13564 = zext i1 %13563 to i8
  store i8 %13564, i8* %17, align 1
  %13565 = sext i32 %13538 to i64
  store i64 %13565, i64* %RCX.i4476, align 8
  %13566 = shl nsw i64 %13565, 1
  %13567 = add i64 %13527, %13566
  %13568 = load i16, i16* %DI.i392, align 2
  %13569 = add i64 %13304, 137
  store i64 %13569, i64* %3, align 8
  %13570 = inttoptr i64 %13567 to i16*
  store i16 %13568, i16* %13570, align 2
  %13571 = load i64, i64* %3, align 8
  %13572 = add i64 %13571, 589
  store i64 %13572, i64* %3, align 8
  br label %block_.L_406216

block_.L_405fce:                                  ; preds = %block_405f33
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i64 0, i64* %RCX.i4476, align 8
  %13573 = add i64 %13261, -1056
  store i64 %13573, i64* %RDX.i658, align 8
  %13574 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %13574, i64* %RSI.i757, align 8
  %13575 = add i64 %13574, 72684
  %13576 = add i64 %13304, 26
  store i64 %13576, i64* %3, align 8
  %13577 = inttoptr i64 %13575 to i32*
  %13578 = load i32, i32* %13577, align 4
  %13579 = sext i32 %13578 to i64
  store i64 %13579, i64* %RSI.i757, align 8
  %13580 = add i64 %13304, 30
  store i64 %13580, i64* %3, align 8
  %13581 = load i32, i32* %13264, align 4
  %13582 = sext i32 %13581 to i64
  %13583 = shl nsw i64 %13582, 6
  store i64 %13583, i64* %RDI.i4259, align 8
  %13584 = add i64 %13583, %13573
  store i64 %13584, i64* %RDX.i658, align 8
  %13585 = icmp ult i64 %13584, %13573
  %13586 = icmp ult i64 %13584, %13583
  %13587 = or i1 %13585, %13586
  %13588 = zext i1 %13587 to i8
  store i8 %13588, i8* %12, align 1
  %13589 = trunc i64 %13584 to i32
  %13590 = and i32 %13589, 255
  %13591 = tail call i32 @llvm.ctpop.i32(i32 %13590)
  %13592 = trunc i32 %13591 to i8
  %13593 = and i8 %13592, 1
  %13594 = xor i8 %13593, 1
  store i8 %13594, i8* %13, align 1
  %13595 = xor i64 %13573, %13584
  %13596 = lshr i64 %13595, 4
  %13597 = trunc i64 %13596 to i8
  %13598 = and i8 %13597, 1
  store i8 %13598, i8* %14, align 1
  %13599 = icmp eq i64 %13584, 0
  %13600 = zext i1 %13599 to i8
  store i8 %13600, i8* %15, align 1
  %13601 = lshr i64 %13584, 63
  %13602 = trunc i64 %13601 to i8
  store i8 %13602, i8* %16, align 1
  %13603 = lshr i64 %13573, 63
  %13604 = lshr i64 %13582, 57
  %13605 = and i64 %13604, 1
  %13606 = xor i64 %13601, %13603
  %13607 = xor i64 %13601, %13605
  %13608 = add nuw nsw i64 %13606, %13607
  %13609 = icmp eq i64 %13608, 2
  %13610 = zext i1 %13609 to i8
  store i8 %13610, i8* %17, align 1
  %13611 = load i64, i64* %RBP.i, align 8
  %13612 = add i64 %13611, -12
  %13613 = add i64 %13304, 41
  store i64 %13613, i64* %3, align 8
  %13614 = inttoptr i64 %13612 to i32*
  %13615 = load i32, i32* %13614, align 4
  %13616 = sext i32 %13615 to i64
  store i64 %13616, i64* %RDI.i4259, align 8
  %13617 = shl nsw i64 %13616, 2
  %13618 = add i64 %13617, %13584
  %13619 = add i64 %13304, 45
  store i64 %13619, i64* %3, align 8
  %13620 = inttoptr i64 %13618 to i32*
  %13621 = load i32, i32* %13620, align 4
  %13622 = sext i32 %13621 to i64
  store i64 %13622, i64* %RDX.i658, align 8
  %13623 = add i64 %13574, 4792
  store i64 %13623, i64* %RDI.i4259, align 8
  %13624 = icmp ugt i64 %13574, -4793
  %13625 = zext i1 %13624 to i8
  store i8 %13625, i8* %12, align 1
  %13626 = trunc i64 %13623 to i32
  %13627 = and i32 %13626, 255
  %13628 = tail call i32 @llvm.ctpop.i32(i32 %13627)
  %13629 = trunc i32 %13628 to i8
  %13630 = and i8 %13629, 1
  %13631 = xor i8 %13630, 1
  store i8 %13631, i8* %13, align 1
  %13632 = xor i64 %13574, 16
  %13633 = xor i64 %13632, %13623
  %13634 = lshr i64 %13633, 4
  %13635 = trunc i64 %13634 to i8
  %13636 = and i8 %13635, 1
  store i8 %13636, i8* %14, align 1
  %13637 = icmp eq i64 %13623, 0
  %13638 = zext i1 %13637 to i8
  store i8 %13638, i8* %15, align 1
  %13639 = lshr i64 %13623, 63
  %13640 = trunc i64 %13639 to i8
  store i8 %13640, i8* %16, align 1
  %13641 = lshr i64 %13574, 63
  %13642 = xor i64 %13639, %13641
  %13643 = add nuw nsw i64 %13642, %13639
  %13644 = icmp eq i64 %13643, 2
  %13645 = zext i1 %13644 to i8
  store i8 %13645, i8* %17, align 1
  %13646 = add i64 %13611, -4
  %13647 = add i64 %13304, 64
  store i64 %13647, i64* %3, align 8
  %13648 = inttoptr i64 %13646 to i32*
  %13649 = load i32, i32* %13648, align 4
  %13650 = sext i32 %13649 to i64
  %13651 = shl nsw i64 %13650, 9
  store i64 %13651, i64* %R8.i2321, align 8
  %13652 = add i64 %13651, %13623
  store i64 %13652, i64* %RDI.i4259, align 8
  %13653 = icmp ult i64 %13652, %13623
  %13654 = icmp ult i64 %13652, %13651
  %13655 = or i1 %13653, %13654
  %13656 = zext i1 %13655 to i8
  store i8 %13656, i8* %12, align 1
  %13657 = trunc i64 %13652 to i32
  %13658 = and i32 %13657, 255
  %13659 = tail call i32 @llvm.ctpop.i32(i32 %13658)
  %13660 = trunc i32 %13659 to i8
  %13661 = and i8 %13660, 1
  %13662 = xor i8 %13661, 1
  store i8 %13662, i8* %13, align 1
  %13663 = xor i64 %13623, %13652
  %13664 = lshr i64 %13663, 4
  %13665 = trunc i64 %13664 to i8
  %13666 = and i8 %13665, 1
  store i8 %13666, i8* %14, align 1
  %13667 = icmp eq i64 %13652, 0
  %13668 = zext i1 %13667 to i8
  store i8 %13668, i8* %15, align 1
  %13669 = lshr i64 %13652, 63
  %13670 = trunc i64 %13669 to i8
  store i8 %13670, i8* %16, align 1
  %13671 = lshr i64 %13650, 54
  %13672 = and i64 %13671, 1
  %13673 = xor i64 %13669, %13639
  %13674 = xor i64 %13669, %13672
  %13675 = add nuw nsw i64 %13673, %13674
  %13676 = icmp eq i64 %13675, 2
  %13677 = zext i1 %13676 to i8
  store i8 %13677, i8* %17, align 1
  %13678 = load i64, i64* %RBP.i, align 8
  %13679 = add i64 %13678, -12
  %13680 = add i64 %13304, 75
  store i64 %13680, i64* %3, align 8
  %13681 = inttoptr i64 %13679 to i32*
  %13682 = load i32, i32* %13681, align 4
  %13683 = sext i32 %13682 to i64
  %13684 = shl nsw i64 %13683, 5
  store i64 %13684, i64* %R8.i2321, align 8
  %13685 = add i64 %13684, %13652
  store i64 %13685, i64* %RDI.i4259, align 8
  %13686 = icmp ult i64 %13685, %13652
  %13687 = icmp ult i64 %13685, %13684
  %13688 = or i1 %13686, %13687
  %13689 = zext i1 %13688 to i8
  store i8 %13689, i8* %12, align 1
  %13690 = trunc i64 %13685 to i32
  %13691 = and i32 %13690, 255
  %13692 = tail call i32 @llvm.ctpop.i32(i32 %13691)
  %13693 = trunc i32 %13692 to i8
  %13694 = and i8 %13693, 1
  %13695 = xor i8 %13694, 1
  store i8 %13695, i8* %13, align 1
  %13696 = xor i64 %13652, %13685
  %13697 = lshr i64 %13696, 4
  %13698 = trunc i64 %13697 to i8
  %13699 = and i8 %13698, 1
  store i8 %13699, i8* %14, align 1
  %13700 = icmp eq i64 %13685, 0
  %13701 = zext i1 %13700 to i8
  store i8 %13701, i8* %15, align 1
  %13702 = lshr i64 %13685, 63
  %13703 = trunc i64 %13702 to i8
  store i8 %13703, i8* %16, align 1
  %13704 = lshr i64 %13683, 58
  %13705 = and i64 %13704, 1
  %13706 = xor i64 %13702, %13669
  %13707 = xor i64 %13702, %13705
  %13708 = add nuw nsw i64 %13706, %13707
  %13709 = icmp eq i64 %13708, 2
  %13710 = zext i1 %13709 to i8
  store i8 %13710, i8* %17, align 1
  %13711 = add i64 %13678, -8
  %13712 = add i64 %13304, 86
  store i64 %13712, i64* %3, align 8
  %13713 = inttoptr i64 %13711 to i32*
  %13714 = load i32, i32* %13713, align 4
  %13715 = sext i32 %13714 to i64
  store i64 %13715, i64* %R8.i2321, align 8
  %13716 = shl nsw i64 %13715, 1
  %13717 = add i64 %13716, %13685
  %13718 = add i64 %13304, 91
  store i64 %13718, i64* %3, align 8
  %13719 = inttoptr i64 %13717 to i16*
  %13720 = load i16, i16* %13719, align 2
  %13721 = zext i16 %13720 to i64
  store i64 %13721, i64* %RAX.i552, align 8
  %13722 = zext i16 %13720 to i64
  %13723 = shl nuw nsw i64 %13722, 6
  store i64 %13723, i64* %RDI.i4259, align 8
  %13724 = load i64, i64* %RDX.i658, align 8
  %13725 = add i64 %13723, %13724
  %13726 = add i64 %13725, 32
  %13727 = ashr i64 %13726, 6
  store i64 %13727, i64* %RDX.i658, align 8
  %13728 = lshr i64 %13727, 63
  %13729 = load i64, i64* %RCX.i4476, align 8
  %13730 = sub i64 %13729, %13727
  %13731 = icmp ult i64 %13729, %13727
  %13732 = zext i1 %13731 to i8
  store i8 %13732, i8* %12, align 1
  %13733 = trunc i64 %13730 to i32
  %13734 = and i32 %13733, 255
  %13735 = tail call i32 @llvm.ctpop.i32(i32 %13734)
  %13736 = trunc i32 %13735 to i8
  %13737 = and i8 %13736, 1
  %13738 = xor i8 %13737, 1
  store i8 %13738, i8* %13, align 1
  %13739 = xor i64 %13727, %13729
  %13740 = xor i64 %13739, %13730
  %13741 = lshr i64 %13740, 4
  %13742 = trunc i64 %13741 to i8
  %13743 = and i8 %13742, 1
  store i8 %13743, i8* %14, align 1
  %13744 = icmp eq i64 %13730, 0
  %13745 = zext i1 %13744 to i8
  store i8 %13745, i8* %15, align 1
  %13746 = lshr i64 %13730, 63
  %13747 = trunc i64 %13746 to i8
  store i8 %13747, i8* %16, align 1
  %13748 = lshr i64 %13729, 63
  %13749 = xor i64 %13728, %13748
  %13750 = xor i64 %13746, %13748
  %13751 = add nuw nsw i64 %13750, %13749
  %13752 = icmp eq i64 %13751, 2
  %13753 = zext i1 %13752 to i8
  store i8 %13753, i8* %17, align 1
  %13754 = load i64, i64* %RBP.i, align 8
  %13755 = add i64 %13754, -2344
  %13756 = load i64, i64* %RSI.i757, align 8
  %13757 = add i64 %13304, 118
  store i64 %13757, i64* %3, align 8
  %13758 = inttoptr i64 %13755 to i64*
  store i64 %13756, i64* %13758, align 8
  %13759 = load i64, i64* %3, align 8
  %13760 = load i8, i8* %15, align 1
  %13761 = icmp ne i8 %13760, 0
  %13762 = load i8, i8* %16, align 1
  %13763 = icmp ne i8 %13762, 0
  %13764 = load i8, i8* %17, align 1
  %13765 = icmp ne i8 %13764, 0
  %13766 = xor i1 %13763, %13765
  %13767 = or i1 %13761, %13766
  %.v578 = select i1 %13767, i64 22, i64 6
  %13768 = add i64 %13759, %.v578
  store i64 %13768, i64* %3, align 8
  br i1 %13767, label %block_.L_40605a, label %block_40604a

block_40604a:                                     ; preds = %block_.L_405fce
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i64 0, i64* %RCX.i4476, align 8
  %13769 = load i64, i64* %RBP.i, align 8
  %13770 = add i64 %13769, -2352
  %13771 = add i64 %13768, 11
  store i64 %13771, i64* %3, align 8
  %13772 = inttoptr i64 %13770 to i64*
  store i64 0, i64* %13772, align 8
  %13773 = load i64, i64* %3, align 8
  %13774 = add i64 %13773, 100
  store i64 %13774, i64* %3, align 8
  br label %block_.L_4060b9

block_.L_40605a:                                  ; preds = %block_.L_405fce
  %13775 = load i64, i64* %RBP.i, align 8
  %13776 = add i64 %13775, -1056
  store i64 %13776, i64* %RAX.i552, align 8
  %13777 = add i64 %13775, -8
  %13778 = add i64 %13768, 11
  store i64 %13778, i64* %3, align 8
  %13779 = inttoptr i64 %13777 to i32*
  %13780 = load i32, i32* %13779, align 4
  %13781 = sext i32 %13780 to i64
  %13782 = shl nsw i64 %13781, 6
  store i64 %13782, i64* %RCX.i4476, align 8
  %13783 = add i64 %13782, %13776
  store i64 %13783, i64* %RAX.i552, align 8
  %13784 = icmp ult i64 %13783, %13776
  %13785 = icmp ult i64 %13783, %13782
  %13786 = or i1 %13784, %13785
  %13787 = zext i1 %13786 to i8
  store i8 %13787, i8* %12, align 1
  %13788 = trunc i64 %13783 to i32
  %13789 = and i32 %13788, 255
  %13790 = tail call i32 @llvm.ctpop.i32(i32 %13789)
  %13791 = trunc i32 %13790 to i8
  %13792 = and i8 %13791, 1
  %13793 = xor i8 %13792, 1
  store i8 %13793, i8* %13, align 1
  %13794 = xor i64 %13776, %13783
  %13795 = lshr i64 %13794, 4
  %13796 = trunc i64 %13795 to i8
  %13797 = and i8 %13796, 1
  store i8 %13797, i8* %14, align 1
  %13798 = icmp eq i64 %13783, 0
  %13799 = zext i1 %13798 to i8
  store i8 %13799, i8* %15, align 1
  %13800 = lshr i64 %13783, 63
  %13801 = trunc i64 %13800 to i8
  store i8 %13801, i8* %16, align 1
  %13802 = lshr i64 %13776, 63
  %13803 = lshr i64 %13781, 57
  %13804 = and i64 %13803, 1
  %13805 = xor i64 %13800, %13802
  %13806 = xor i64 %13800, %13804
  %13807 = add nuw nsw i64 %13805, %13806
  %13808 = icmp eq i64 %13807, 2
  %13809 = zext i1 %13808 to i8
  store i8 %13809, i8* %17, align 1
  %13810 = add i64 %13775, -12
  %13811 = add i64 %13768, 22
  store i64 %13811, i64* %3, align 8
  %13812 = inttoptr i64 %13810 to i32*
  %13813 = load i32, i32* %13812, align 4
  %13814 = sext i32 %13813 to i64
  store i64 %13814, i64* %RCX.i4476, align 8
  %13815 = shl nsw i64 %13814, 2
  %13816 = add i64 %13815, %13783
  %13817 = add i64 %13768, 26
  store i64 %13817, i64* %3, align 8
  %13818 = inttoptr i64 %13816 to i32*
  %13819 = load i32, i32* %13818, align 4
  %13820 = sext i32 %13819 to i64
  store i64 %13820, i64* %RAX.i552, align 8
  %13821 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %13822 = add i64 %13821, 4792
  store i64 %13822, i64* %RCX.i4476, align 8
  %13823 = icmp ugt i64 %13821, -4793
  %13824 = zext i1 %13823 to i8
  store i8 %13824, i8* %12, align 1
  %13825 = trunc i64 %13822 to i32
  %13826 = and i32 %13825, 255
  %13827 = tail call i32 @llvm.ctpop.i32(i32 %13826)
  %13828 = trunc i32 %13827 to i8
  %13829 = and i8 %13828, 1
  %13830 = xor i8 %13829, 1
  store i8 %13830, i8* %13, align 1
  %13831 = xor i64 %13821, 16
  %13832 = xor i64 %13831, %13822
  %13833 = lshr i64 %13832, 4
  %13834 = trunc i64 %13833 to i8
  %13835 = and i8 %13834, 1
  store i8 %13835, i8* %14, align 1
  %13836 = icmp eq i64 %13822, 0
  %13837 = zext i1 %13836 to i8
  store i8 %13837, i8* %15, align 1
  %13838 = lshr i64 %13822, 63
  %13839 = trunc i64 %13838 to i8
  store i8 %13839, i8* %16, align 1
  %13840 = lshr i64 %13821, 63
  %13841 = xor i64 %13838, %13840
  %13842 = add nuw nsw i64 %13841, %13838
  %13843 = icmp eq i64 %13842, 2
  %13844 = zext i1 %13843 to i8
  store i8 %13844, i8* %17, align 1
  %13845 = load i64, i64* %RBP.i, align 8
  %13846 = add i64 %13845, -4
  %13847 = add i64 %13768, 45
  store i64 %13847, i64* %3, align 8
  %13848 = inttoptr i64 %13846 to i32*
  %13849 = load i32, i32* %13848, align 4
  %13850 = sext i32 %13849 to i64
  %13851 = shl nsw i64 %13850, 9
  store i64 %13851, i64* %RDX.i658, align 8
  %13852 = add i64 %13851, %13822
  store i64 %13852, i64* %RCX.i4476, align 8
  %13853 = icmp ult i64 %13852, %13822
  %13854 = icmp ult i64 %13852, %13851
  %13855 = or i1 %13853, %13854
  %13856 = zext i1 %13855 to i8
  store i8 %13856, i8* %12, align 1
  %13857 = trunc i64 %13852 to i32
  %13858 = and i32 %13857, 255
  %13859 = tail call i32 @llvm.ctpop.i32(i32 %13858)
  %13860 = trunc i32 %13859 to i8
  %13861 = and i8 %13860, 1
  %13862 = xor i8 %13861, 1
  store i8 %13862, i8* %13, align 1
  %13863 = xor i64 %13822, %13852
  %13864 = lshr i64 %13863, 4
  %13865 = trunc i64 %13864 to i8
  %13866 = and i8 %13865, 1
  store i8 %13866, i8* %14, align 1
  %13867 = icmp eq i64 %13852, 0
  %13868 = zext i1 %13867 to i8
  store i8 %13868, i8* %15, align 1
  %13869 = lshr i64 %13852, 63
  %13870 = trunc i64 %13869 to i8
  store i8 %13870, i8* %16, align 1
  %13871 = lshr i64 %13850, 54
  %13872 = and i64 %13871, 1
  %13873 = xor i64 %13869, %13838
  %13874 = xor i64 %13869, %13872
  %13875 = add nuw nsw i64 %13873, %13874
  %13876 = icmp eq i64 %13875, 2
  %13877 = zext i1 %13876 to i8
  store i8 %13877, i8* %17, align 1
  %13878 = add i64 %13845, -12
  %13879 = add i64 %13768, 56
  store i64 %13879, i64* %3, align 8
  %13880 = inttoptr i64 %13878 to i32*
  %13881 = load i32, i32* %13880, align 4
  %13882 = sext i32 %13881 to i64
  %13883 = shl nsw i64 %13882, 5
  store i64 %13883, i64* %RDX.i658, align 8
  %13884 = add i64 %13883, %13852
  store i64 %13884, i64* %RCX.i4476, align 8
  %13885 = icmp ult i64 %13884, %13852
  %13886 = icmp ult i64 %13884, %13883
  %13887 = or i1 %13885, %13886
  %13888 = zext i1 %13887 to i8
  store i8 %13888, i8* %12, align 1
  %13889 = trunc i64 %13884 to i32
  %13890 = and i32 %13889, 255
  %13891 = tail call i32 @llvm.ctpop.i32(i32 %13890)
  %13892 = trunc i32 %13891 to i8
  %13893 = and i8 %13892, 1
  %13894 = xor i8 %13893, 1
  store i8 %13894, i8* %13, align 1
  %13895 = xor i64 %13852, %13884
  %13896 = lshr i64 %13895, 4
  %13897 = trunc i64 %13896 to i8
  %13898 = and i8 %13897, 1
  store i8 %13898, i8* %14, align 1
  %13899 = icmp eq i64 %13884, 0
  %13900 = zext i1 %13899 to i8
  store i8 %13900, i8* %15, align 1
  %13901 = lshr i64 %13884, 63
  %13902 = trunc i64 %13901 to i8
  store i8 %13902, i8* %16, align 1
  %13903 = lshr i64 %13882, 58
  %13904 = and i64 %13903, 1
  %13905 = xor i64 %13901, %13869
  %13906 = xor i64 %13901, %13904
  %13907 = add nuw nsw i64 %13905, %13906
  %13908 = icmp eq i64 %13907, 2
  %13909 = zext i1 %13908 to i8
  store i8 %13909, i8* %17, align 1
  %13910 = load i64, i64* %RBP.i, align 8
  %13911 = add i64 %13910, -8
  %13912 = add i64 %13768, 67
  store i64 %13912, i64* %3, align 8
  %13913 = inttoptr i64 %13911 to i32*
  %13914 = load i32, i32* %13913, align 4
  %13915 = sext i32 %13914 to i64
  store i64 %13915, i64* %RDX.i658, align 8
  %13916 = shl nsw i64 %13915, 1
  %13917 = add i64 %13916, %13884
  %13918 = add i64 %13768, 71
  store i64 %13918, i64* %3, align 8
  %13919 = inttoptr i64 %13917 to i16*
  %13920 = load i16, i16* %13919, align 2
  %13921 = zext i16 %13920 to i64
  store i64 %13921, i64* %RSI.i757, align 8
  %13922 = zext i16 %13920 to i64
  %13923 = shl nuw nsw i64 %13922, 6
  store i64 %13923, i64* %RCX.i4476, align 8
  %13924 = load i64, i64* %RAX.i552, align 8
  %13925 = add i64 %13923, %13924
  %13926 = add i64 %13925, 32
  %13927 = lshr i64 %13926, 5
  %13928 = trunc i64 %13927 to i8
  %13929 = and i8 %13928, 1
  %13930 = ashr i64 %13926, 6
  store i64 %13930, i64* %RAX.i552, align 8
  store i8 %13929, i8* %12, align 1
  %13931 = trunc i64 %13930 to i32
  %13932 = and i32 %13931, 255
  %13933 = tail call i32 @llvm.ctpop.i32(i32 %13932)
  %13934 = trunc i32 %13933 to i8
  %13935 = and i8 %13934, 1
  %13936 = xor i8 %13935, 1
  store i8 %13936, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %13937 = icmp eq i64 %13930, 0
  %13938 = zext i1 %13937 to i8
  store i8 %13938, i8* %15, align 1
  %13939 = lshr i64 %13930, 63
  %13940 = trunc i64 %13939 to i8
  store i8 %13940, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %13941 = load i64, i64* %RBP.i, align 8
  %13942 = add i64 %13941, -2352
  %13943 = add i64 %13768, 95
  store i64 %13943, i64* %3, align 8
  %13944 = inttoptr i64 %13942 to i64*
  store i64 %13930, i64* %13944, align 8
  %.pre340 = load i64, i64* %3, align 8
  br label %block_.L_4060b9

block_.L_4060b9:                                  ; preds = %block_.L_40605a, %block_40604a
  %13945 = phi i64 [ %.pre340, %block_.L_40605a ], [ %13774, %block_40604a ]
  %13946 = load i64, i64* %RBP.i, align 8
  %13947 = add i64 %13946, -2352
  %13948 = add i64 %13945, 7
  store i64 %13948, i64* %3, align 8
  %13949 = inttoptr i64 %13947 to i64*
  %13950 = load i64, i64* %13949, align 8
  store i64 %13950, i64* %RAX.i552, align 8
  %13951 = add i64 %13946, -2344
  %13952 = add i64 %13945, 14
  store i64 %13952, i64* %3, align 8
  %13953 = inttoptr i64 %13951 to i64*
  %13954 = load i64, i64* %13953, align 8
  store i64 %13954, i64* %RCX.i4476, align 8
  %13955 = sub i64 %13954, %13950
  %13956 = icmp ult i64 %13954, %13950
  %13957 = zext i1 %13956 to i8
  store i8 %13957, i8* %12, align 1
  %13958 = trunc i64 %13955 to i32
  %13959 = and i32 %13958, 255
  %13960 = tail call i32 @llvm.ctpop.i32(i32 %13959)
  %13961 = trunc i32 %13960 to i8
  %13962 = and i8 %13961, 1
  %13963 = xor i8 %13962, 1
  store i8 %13963, i8* %13, align 1
  %13964 = xor i64 %13950, %13954
  %13965 = xor i64 %13964, %13955
  %13966 = lshr i64 %13965, 4
  %13967 = trunc i64 %13966 to i8
  %13968 = and i8 %13967, 1
  store i8 %13968, i8* %14, align 1
  %13969 = icmp eq i64 %13955, 0
  %13970 = zext i1 %13969 to i8
  store i8 %13970, i8* %15, align 1
  %13971 = lshr i64 %13955, 63
  %13972 = trunc i64 %13971 to i8
  store i8 %13972, i8* %16, align 1
  %13973 = lshr i64 %13954, 63
  %13974 = lshr i64 %13950, 63
  %13975 = xor i64 %13974, %13973
  %13976 = xor i64 %13971, %13973
  %13977 = add nuw nsw i64 %13976, %13975
  %13978 = icmp eq i64 %13977, 2
  %13979 = zext i1 %13978 to i8
  store i8 %13979, i8* %17, align 1
  %13980 = icmp ne i8 %13972, 0
  %13981 = xor i1 %13980, %13978
  %.v482 = select i1 %13981, i64 23, i64 50
  %13982 = add i64 %13945, %.v482
  store i64 %13982, i64* %3, align 8
  br i1 %13981, label %block_4060d0, label %block_.L_4060eb

block_4060d0:                                     ; preds = %block_.L_4060b9
  %13983 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %13983, i64* %RAX.i552, align 8
  %13984 = add i64 %13983, 72684
  %13985 = add i64 %13982, 15
  store i64 %13985, i64* %3, align 8
  %13986 = inttoptr i64 %13984 to i32*
  %13987 = load i32, i32* %13986, align 4
  %13988 = sext i32 %13987 to i64
  store i64 %13988, i64* %RAX.i552, align 8
  %13989 = add i64 %13946, -2360
  %13990 = add i64 %13982, 22
  store i64 %13990, i64* %3, align 8
  %13991 = inttoptr i64 %13989 to i64*
  store i64 %13988, i64* %13991, align 8
  %13992 = load i64, i64* %3, align 8
  %13993 = add i64 %13992, 231
  store i64 %13993, i64* %3, align 8
  br label %block_.L_4061cd

block_.L_4060eb:                                  ; preds = %block_.L_4060b9
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i64 0, i64* %RCX.i4476, align 8
  %13994 = add i64 %13946, -1056
  store i64 %13994, i64* %RDX.i658, align 8
  %13995 = add i64 %13946, -8
  %13996 = add i64 %13982, 15
  store i64 %13996, i64* %3, align 8
  %13997 = inttoptr i64 %13995 to i32*
  %13998 = load i32, i32* %13997, align 4
  %13999 = sext i32 %13998 to i64
  %14000 = shl nsw i64 %13999, 6
  store i64 %14000, i64* %RSI.i757, align 8
  %14001 = add i64 %14000, %13994
  store i64 %14001, i64* %RDX.i658, align 8
  %14002 = icmp ult i64 %14001, %13994
  %14003 = icmp ult i64 %14001, %14000
  %14004 = or i1 %14002, %14003
  %14005 = zext i1 %14004 to i8
  store i8 %14005, i8* %12, align 1
  %14006 = trunc i64 %14001 to i32
  %14007 = and i32 %14006, 255
  %14008 = tail call i32 @llvm.ctpop.i32(i32 %14007)
  %14009 = trunc i32 %14008 to i8
  %14010 = and i8 %14009, 1
  %14011 = xor i8 %14010, 1
  store i8 %14011, i8* %13, align 1
  %14012 = xor i64 %13994, %14001
  %14013 = lshr i64 %14012, 4
  %14014 = trunc i64 %14013 to i8
  %14015 = and i8 %14014, 1
  store i8 %14015, i8* %14, align 1
  %14016 = icmp eq i64 %14001, 0
  %14017 = zext i1 %14016 to i8
  store i8 %14017, i8* %15, align 1
  %14018 = lshr i64 %14001, 63
  %14019 = trunc i64 %14018 to i8
  store i8 %14019, i8* %16, align 1
  %14020 = lshr i64 %13994, 63
  %14021 = lshr i64 %13999, 57
  %14022 = and i64 %14021, 1
  %14023 = xor i64 %14018, %14020
  %14024 = xor i64 %14018, %14022
  %14025 = add nuw nsw i64 %14023, %14024
  %14026 = icmp eq i64 %14025, 2
  %14027 = zext i1 %14026 to i8
  store i8 %14027, i8* %17, align 1
  %14028 = add i64 %13946, -12
  %14029 = add i64 %13982, 26
  store i64 %14029, i64* %3, align 8
  %14030 = inttoptr i64 %14028 to i32*
  %14031 = load i32, i32* %14030, align 4
  %14032 = sext i32 %14031 to i64
  store i64 %14032, i64* %RSI.i757, align 8
  %14033 = shl nsw i64 %14032, 2
  %14034 = add i64 %14033, %14001
  %14035 = add i64 %13982, 30
  store i64 %14035, i64* %3, align 8
  %14036 = inttoptr i64 %14034 to i32*
  %14037 = load i32, i32* %14036, align 4
  %14038 = sext i32 %14037 to i64
  store i64 %14038, i64* %RDX.i658, align 8
  %14039 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %14040 = add i64 %14039, 4792
  store i64 %14040, i64* %RSI.i757, align 8
  %14041 = icmp ugt i64 %14039, -4793
  %14042 = zext i1 %14041 to i8
  store i8 %14042, i8* %12, align 1
  %14043 = trunc i64 %14040 to i32
  %14044 = and i32 %14043, 255
  %14045 = tail call i32 @llvm.ctpop.i32(i32 %14044)
  %14046 = trunc i32 %14045 to i8
  %14047 = and i8 %14046, 1
  %14048 = xor i8 %14047, 1
  store i8 %14048, i8* %13, align 1
  %14049 = xor i64 %14039, 16
  %14050 = xor i64 %14049, %14040
  %14051 = lshr i64 %14050, 4
  %14052 = trunc i64 %14051 to i8
  %14053 = and i8 %14052, 1
  store i8 %14053, i8* %14, align 1
  %14054 = icmp eq i64 %14040, 0
  %14055 = zext i1 %14054 to i8
  store i8 %14055, i8* %15, align 1
  %14056 = lshr i64 %14040, 63
  %14057 = trunc i64 %14056 to i8
  store i8 %14057, i8* %16, align 1
  %14058 = lshr i64 %14039, 63
  %14059 = xor i64 %14056, %14058
  %14060 = add nuw nsw i64 %14059, %14056
  %14061 = icmp eq i64 %14060, 2
  %14062 = zext i1 %14061 to i8
  store i8 %14062, i8* %17, align 1
  %14063 = load i64, i64* %RBP.i, align 8
  %14064 = add i64 %14063, -4
  %14065 = add i64 %13982, 49
  store i64 %14065, i64* %3, align 8
  %14066 = inttoptr i64 %14064 to i32*
  %14067 = load i32, i32* %14066, align 4
  %14068 = sext i32 %14067 to i64
  %14069 = shl nsw i64 %14068, 9
  store i64 %14069, i64* %RDI.i4259, align 8
  %14070 = add i64 %14069, %14040
  store i64 %14070, i64* %RSI.i757, align 8
  %14071 = icmp ult i64 %14070, %14040
  %14072 = icmp ult i64 %14070, %14069
  %14073 = or i1 %14071, %14072
  %14074 = zext i1 %14073 to i8
  store i8 %14074, i8* %12, align 1
  %14075 = trunc i64 %14070 to i32
  %14076 = and i32 %14075, 255
  %14077 = tail call i32 @llvm.ctpop.i32(i32 %14076)
  %14078 = trunc i32 %14077 to i8
  %14079 = and i8 %14078, 1
  %14080 = xor i8 %14079, 1
  store i8 %14080, i8* %13, align 1
  %14081 = xor i64 %14040, %14070
  %14082 = lshr i64 %14081, 4
  %14083 = trunc i64 %14082 to i8
  %14084 = and i8 %14083, 1
  store i8 %14084, i8* %14, align 1
  %14085 = icmp eq i64 %14070, 0
  %14086 = zext i1 %14085 to i8
  store i8 %14086, i8* %15, align 1
  %14087 = lshr i64 %14070, 63
  %14088 = trunc i64 %14087 to i8
  store i8 %14088, i8* %16, align 1
  %14089 = lshr i64 %14068, 54
  %14090 = and i64 %14089, 1
  %14091 = xor i64 %14087, %14056
  %14092 = xor i64 %14087, %14090
  %14093 = add nuw nsw i64 %14091, %14092
  %14094 = icmp eq i64 %14093, 2
  %14095 = zext i1 %14094 to i8
  store i8 %14095, i8* %17, align 1
  %14096 = add i64 %14063, -12
  %14097 = add i64 %13982, 60
  store i64 %14097, i64* %3, align 8
  %14098 = inttoptr i64 %14096 to i32*
  %14099 = load i32, i32* %14098, align 4
  %14100 = sext i32 %14099 to i64
  %14101 = shl nsw i64 %14100, 5
  store i64 %14101, i64* %RDI.i4259, align 8
  %14102 = add i64 %14101, %14070
  store i64 %14102, i64* %RSI.i757, align 8
  %14103 = icmp ult i64 %14102, %14070
  %14104 = icmp ult i64 %14102, %14101
  %14105 = or i1 %14103, %14104
  %14106 = zext i1 %14105 to i8
  store i8 %14106, i8* %12, align 1
  %14107 = trunc i64 %14102 to i32
  %14108 = and i32 %14107, 255
  %14109 = tail call i32 @llvm.ctpop.i32(i32 %14108)
  %14110 = trunc i32 %14109 to i8
  %14111 = and i8 %14110, 1
  %14112 = xor i8 %14111, 1
  store i8 %14112, i8* %13, align 1
  %14113 = xor i64 %14070, %14102
  %14114 = lshr i64 %14113, 4
  %14115 = trunc i64 %14114 to i8
  %14116 = and i8 %14115, 1
  store i8 %14116, i8* %14, align 1
  %14117 = icmp eq i64 %14102, 0
  %14118 = zext i1 %14117 to i8
  store i8 %14118, i8* %15, align 1
  %14119 = lshr i64 %14102, 63
  %14120 = trunc i64 %14119 to i8
  store i8 %14120, i8* %16, align 1
  %14121 = lshr i64 %14100, 58
  %14122 = and i64 %14121, 1
  %14123 = xor i64 %14119, %14087
  %14124 = xor i64 %14119, %14122
  %14125 = add nuw nsw i64 %14123, %14124
  %14126 = icmp eq i64 %14125, 2
  %14127 = zext i1 %14126 to i8
  store i8 %14127, i8* %17, align 1
  %14128 = load i64, i64* %RBP.i, align 8
  %14129 = add i64 %14128, -8
  %14130 = add i64 %13982, 71
  store i64 %14130, i64* %3, align 8
  %14131 = inttoptr i64 %14129 to i32*
  %14132 = load i32, i32* %14131, align 4
  %14133 = sext i32 %14132 to i64
  store i64 %14133, i64* %RDI.i4259, align 8
  %14134 = shl nsw i64 %14133, 1
  %14135 = add i64 %14134, %14102
  %14136 = add i64 %13982, 75
  store i64 %14136, i64* %3, align 8
  %14137 = inttoptr i64 %14135 to i16*
  %14138 = load i16, i16* %14137, align 2
  %14139 = zext i16 %14138 to i64
  store i64 %14139, i64* %RAX.i552, align 8
  %14140 = zext i16 %14138 to i64
  %14141 = shl nuw nsw i64 %14140, 6
  store i64 %14141, i64* %RSI.i757, align 8
  %14142 = load i64, i64* %RDX.i658, align 8
  %14143 = add i64 %14141, %14142
  %14144 = add i64 %14143, 32
  %14145 = ashr i64 %14144, 6
  store i64 %14145, i64* %RDX.i658, align 8
  %14146 = lshr i64 %14145, 63
  %14147 = load i64, i64* %RCX.i4476, align 8
  %14148 = sub i64 %14147, %14145
  %14149 = icmp ult i64 %14147, %14145
  %14150 = zext i1 %14149 to i8
  store i8 %14150, i8* %12, align 1
  %14151 = trunc i64 %14148 to i32
  %14152 = and i32 %14151, 255
  %14153 = tail call i32 @llvm.ctpop.i32(i32 %14152)
  %14154 = trunc i32 %14153 to i8
  %14155 = and i8 %14154, 1
  %14156 = xor i8 %14155, 1
  store i8 %14156, i8* %13, align 1
  %14157 = xor i64 %14145, %14147
  %14158 = xor i64 %14157, %14148
  %14159 = lshr i64 %14158, 4
  %14160 = trunc i64 %14159 to i8
  %14161 = and i8 %14160, 1
  store i8 %14161, i8* %14, align 1
  %14162 = icmp eq i64 %14148, 0
  %14163 = zext i1 %14162 to i8
  store i8 %14163, i8* %15, align 1
  %14164 = lshr i64 %14148, 63
  %14165 = trunc i64 %14164 to i8
  store i8 %14165, i8* %16, align 1
  %14166 = lshr i64 %14147, 63
  %14167 = xor i64 %14146, %14166
  %14168 = xor i64 %14164, %14166
  %14169 = add nuw nsw i64 %14168, %14167
  %14170 = icmp eq i64 %14169, 2
  %14171 = zext i1 %14170 to i8
  store i8 %14171, i8* %17, align 1
  %14172 = icmp ne i8 %14165, 0
  %14173 = xor i1 %14172, %14170
  %14174 = or i1 %14162, %14173
  %.v483 = select i1 %14174, i64 117, i64 101
  %14175 = add i64 %13982, %.v483
  store i64 %14175, i64* %3, align 8
  br i1 %14174, label %block_.L_406160, label %block_406150

block_406150:                                     ; preds = %block_.L_4060eb
  store i64 0, i64* %RAX.i552, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i64 0, i64* %RCX.i4476, align 8
  %14176 = load i64, i64* %RBP.i, align 8
  %14177 = add i64 %14176, -2368
  %14178 = add i64 %14175, 11
  store i64 %14178, i64* %3, align 8
  %14179 = inttoptr i64 %14177 to i64*
  store i64 0, i64* %14179, align 8
  %14180 = load i64, i64* %3, align 8
  %14181 = add i64 %14180, 100
  store i64 %14181, i64* %3, align 8
  br label %block_.L_4061bf

block_.L_406160:                                  ; preds = %block_.L_4060eb
  %14182 = load i64, i64* %RBP.i, align 8
  %14183 = add i64 %14182, -1056
  store i64 %14183, i64* %RAX.i552, align 8
  %14184 = add i64 %14182, -8
  %14185 = add i64 %14175, 11
  store i64 %14185, i64* %3, align 8
  %14186 = inttoptr i64 %14184 to i32*
  %14187 = load i32, i32* %14186, align 4
  %14188 = sext i32 %14187 to i64
  %14189 = shl nsw i64 %14188, 6
  store i64 %14189, i64* %RCX.i4476, align 8
  %14190 = add i64 %14189, %14183
  store i64 %14190, i64* %RAX.i552, align 8
  %14191 = icmp ult i64 %14190, %14183
  %14192 = icmp ult i64 %14190, %14189
  %14193 = or i1 %14191, %14192
  %14194 = zext i1 %14193 to i8
  store i8 %14194, i8* %12, align 1
  %14195 = trunc i64 %14190 to i32
  %14196 = and i32 %14195, 255
  %14197 = tail call i32 @llvm.ctpop.i32(i32 %14196)
  %14198 = trunc i32 %14197 to i8
  %14199 = and i8 %14198, 1
  %14200 = xor i8 %14199, 1
  store i8 %14200, i8* %13, align 1
  %14201 = xor i64 %14183, %14190
  %14202 = lshr i64 %14201, 4
  %14203 = trunc i64 %14202 to i8
  %14204 = and i8 %14203, 1
  store i8 %14204, i8* %14, align 1
  %14205 = icmp eq i64 %14190, 0
  %14206 = zext i1 %14205 to i8
  store i8 %14206, i8* %15, align 1
  %14207 = lshr i64 %14190, 63
  %14208 = trunc i64 %14207 to i8
  store i8 %14208, i8* %16, align 1
  %14209 = lshr i64 %14183, 63
  %14210 = lshr i64 %14188, 57
  %14211 = and i64 %14210, 1
  %14212 = xor i64 %14207, %14209
  %14213 = xor i64 %14207, %14211
  %14214 = add nuw nsw i64 %14212, %14213
  %14215 = icmp eq i64 %14214, 2
  %14216 = zext i1 %14215 to i8
  store i8 %14216, i8* %17, align 1
  %14217 = add i64 %14182, -12
  %14218 = add i64 %14175, 22
  store i64 %14218, i64* %3, align 8
  %14219 = inttoptr i64 %14217 to i32*
  %14220 = load i32, i32* %14219, align 4
  %14221 = sext i32 %14220 to i64
  store i64 %14221, i64* %RCX.i4476, align 8
  %14222 = shl nsw i64 %14221, 2
  %14223 = add i64 %14222, %14190
  %14224 = add i64 %14175, 26
  store i64 %14224, i64* %3, align 8
  %14225 = inttoptr i64 %14223 to i32*
  %14226 = load i32, i32* %14225, align 4
  %14227 = sext i32 %14226 to i64
  store i64 %14227, i64* %RAX.i552, align 8
  %14228 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %14229 = add i64 %14228, 4792
  store i64 %14229, i64* %RCX.i4476, align 8
  %14230 = icmp ugt i64 %14228, -4793
  %14231 = zext i1 %14230 to i8
  store i8 %14231, i8* %12, align 1
  %14232 = trunc i64 %14229 to i32
  %14233 = and i32 %14232, 255
  %14234 = tail call i32 @llvm.ctpop.i32(i32 %14233)
  %14235 = trunc i32 %14234 to i8
  %14236 = and i8 %14235, 1
  %14237 = xor i8 %14236, 1
  store i8 %14237, i8* %13, align 1
  %14238 = xor i64 %14228, 16
  %14239 = xor i64 %14238, %14229
  %14240 = lshr i64 %14239, 4
  %14241 = trunc i64 %14240 to i8
  %14242 = and i8 %14241, 1
  store i8 %14242, i8* %14, align 1
  %14243 = icmp eq i64 %14229, 0
  %14244 = zext i1 %14243 to i8
  store i8 %14244, i8* %15, align 1
  %14245 = lshr i64 %14229, 63
  %14246 = trunc i64 %14245 to i8
  store i8 %14246, i8* %16, align 1
  %14247 = lshr i64 %14228, 63
  %14248 = xor i64 %14245, %14247
  %14249 = add nuw nsw i64 %14248, %14245
  %14250 = icmp eq i64 %14249, 2
  %14251 = zext i1 %14250 to i8
  store i8 %14251, i8* %17, align 1
  %14252 = load i64, i64* %RBP.i, align 8
  %14253 = add i64 %14252, -4
  %14254 = add i64 %14175, 45
  store i64 %14254, i64* %3, align 8
  %14255 = inttoptr i64 %14253 to i32*
  %14256 = load i32, i32* %14255, align 4
  %14257 = sext i32 %14256 to i64
  %14258 = shl nsw i64 %14257, 9
  store i64 %14258, i64* %RDX.i658, align 8
  %14259 = add i64 %14258, %14229
  store i64 %14259, i64* %RCX.i4476, align 8
  %14260 = icmp ult i64 %14259, %14229
  %14261 = icmp ult i64 %14259, %14258
  %14262 = or i1 %14260, %14261
  %14263 = zext i1 %14262 to i8
  store i8 %14263, i8* %12, align 1
  %14264 = trunc i64 %14259 to i32
  %14265 = and i32 %14264, 255
  %14266 = tail call i32 @llvm.ctpop.i32(i32 %14265)
  %14267 = trunc i32 %14266 to i8
  %14268 = and i8 %14267, 1
  %14269 = xor i8 %14268, 1
  store i8 %14269, i8* %13, align 1
  %14270 = xor i64 %14229, %14259
  %14271 = lshr i64 %14270, 4
  %14272 = trunc i64 %14271 to i8
  %14273 = and i8 %14272, 1
  store i8 %14273, i8* %14, align 1
  %14274 = icmp eq i64 %14259, 0
  %14275 = zext i1 %14274 to i8
  store i8 %14275, i8* %15, align 1
  %14276 = lshr i64 %14259, 63
  %14277 = trunc i64 %14276 to i8
  store i8 %14277, i8* %16, align 1
  %14278 = lshr i64 %14257, 54
  %14279 = and i64 %14278, 1
  %14280 = xor i64 %14276, %14245
  %14281 = xor i64 %14276, %14279
  %14282 = add nuw nsw i64 %14280, %14281
  %14283 = icmp eq i64 %14282, 2
  %14284 = zext i1 %14283 to i8
  store i8 %14284, i8* %17, align 1
  %14285 = add i64 %14252, -12
  %14286 = add i64 %14175, 56
  store i64 %14286, i64* %3, align 8
  %14287 = inttoptr i64 %14285 to i32*
  %14288 = load i32, i32* %14287, align 4
  %14289 = sext i32 %14288 to i64
  %14290 = shl nsw i64 %14289, 5
  store i64 %14290, i64* %RDX.i658, align 8
  %14291 = add i64 %14290, %14259
  store i64 %14291, i64* %RCX.i4476, align 8
  %14292 = icmp ult i64 %14291, %14259
  %14293 = icmp ult i64 %14291, %14290
  %14294 = or i1 %14292, %14293
  %14295 = zext i1 %14294 to i8
  store i8 %14295, i8* %12, align 1
  %14296 = trunc i64 %14291 to i32
  %14297 = and i32 %14296, 255
  %14298 = tail call i32 @llvm.ctpop.i32(i32 %14297)
  %14299 = trunc i32 %14298 to i8
  %14300 = and i8 %14299, 1
  %14301 = xor i8 %14300, 1
  store i8 %14301, i8* %13, align 1
  %14302 = xor i64 %14259, %14291
  %14303 = lshr i64 %14302, 4
  %14304 = trunc i64 %14303 to i8
  %14305 = and i8 %14304, 1
  store i8 %14305, i8* %14, align 1
  %14306 = icmp eq i64 %14291, 0
  %14307 = zext i1 %14306 to i8
  store i8 %14307, i8* %15, align 1
  %14308 = lshr i64 %14291, 63
  %14309 = trunc i64 %14308 to i8
  store i8 %14309, i8* %16, align 1
  %14310 = lshr i64 %14289, 58
  %14311 = and i64 %14310, 1
  %14312 = xor i64 %14308, %14276
  %14313 = xor i64 %14308, %14311
  %14314 = add nuw nsw i64 %14312, %14313
  %14315 = icmp eq i64 %14314, 2
  %14316 = zext i1 %14315 to i8
  store i8 %14316, i8* %17, align 1
  %14317 = load i64, i64* %RBP.i, align 8
  %14318 = add i64 %14317, -8
  %14319 = add i64 %14175, 67
  store i64 %14319, i64* %3, align 8
  %14320 = inttoptr i64 %14318 to i32*
  %14321 = load i32, i32* %14320, align 4
  %14322 = sext i32 %14321 to i64
  store i64 %14322, i64* %RDX.i658, align 8
  %14323 = shl nsw i64 %14322, 1
  %14324 = add i64 %14323, %14291
  %14325 = add i64 %14175, 71
  store i64 %14325, i64* %3, align 8
  %14326 = inttoptr i64 %14324 to i16*
  %14327 = load i16, i16* %14326, align 2
  %14328 = zext i16 %14327 to i64
  store i64 %14328, i64* %RSI.i757, align 8
  %14329 = zext i16 %14327 to i64
  %14330 = shl nuw nsw i64 %14329, 6
  store i64 %14330, i64* %RCX.i4476, align 8
  %14331 = load i64, i64* %RAX.i552, align 8
  %14332 = add i64 %14330, %14331
  %14333 = add i64 %14332, 32
  %14334 = lshr i64 %14333, 5
  %14335 = trunc i64 %14334 to i8
  %14336 = and i8 %14335, 1
  %14337 = ashr i64 %14333, 6
  store i64 %14337, i64* %RAX.i552, align 8
  store i8 %14336, i8* %12, align 1
  %14338 = trunc i64 %14337 to i32
  %14339 = and i32 %14338, 255
  %14340 = tail call i32 @llvm.ctpop.i32(i32 %14339)
  %14341 = trunc i32 %14340 to i8
  %14342 = and i8 %14341, 1
  %14343 = xor i8 %14342, 1
  store i8 %14343, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %14344 = icmp eq i64 %14337, 0
  %14345 = zext i1 %14344 to i8
  store i8 %14345, i8* %15, align 1
  %14346 = lshr i64 %14337, 63
  %14347 = trunc i64 %14346 to i8
  store i8 %14347, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %14348 = load i64, i64* %RBP.i, align 8
  %14349 = add i64 %14348, -2368
  %14350 = add i64 %14175, 95
  store i64 %14350, i64* %3, align 8
  %14351 = inttoptr i64 %14349 to i64*
  store i64 %14337, i64* %14351, align 8
  %.pre341 = load i64, i64* %3, align 8
  br label %block_.L_4061bf

block_.L_4061bf:                                  ; preds = %block_.L_406160, %block_406150
  %14352 = phi i64 [ %.pre341, %block_.L_406160 ], [ %14181, %block_406150 ]
  %14353 = load i64, i64* %RBP.i, align 8
  %14354 = add i64 %14353, -2368
  %14355 = add i64 %14352, 7
  store i64 %14355, i64* %3, align 8
  %14356 = inttoptr i64 %14354 to i64*
  %14357 = load i64, i64* %14356, align 8
  store i64 %14357, i64* %RAX.i552, align 8
  %14358 = add i64 %14353, -2360
  %14359 = add i64 %14352, 14
  store i64 %14359, i64* %3, align 8
  %14360 = inttoptr i64 %14358 to i64*
  store i64 %14357, i64* %14360, align 8
  %.pre342 = load i64, i64* %3, align 8
  br label %block_.L_4061cd

block_.L_4061cd:                                  ; preds = %block_.L_4061bf, %block_4060d0
  %14361 = phi i64 [ %.pre342, %block_.L_4061bf ], [ %13993, %block_4060d0 ]
  %14362 = load i64, i64* %RBP.i, align 8
  %14363 = add i64 %14362, -2360
  %14364 = add i64 %14361, 7
  store i64 %14364, i64* %3, align 8
  %14365 = inttoptr i64 %14363 to i64*
  %14366 = load i64, i64* %14365, align 8
  %14367 = trunc i64 %14366 to i16
  store i16 %14367, i16* %CX.i57, align 2
  %14368 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %14368, i64* %RAX.i552, align 8
  %14369 = add i64 %14368, 6424
  %14370 = add i64 %14361, 25
  store i64 %14370, i64* %3, align 8
  %14371 = inttoptr i64 %14369 to i64*
  %14372 = load i64, i64* %14371, align 8
  store i64 %14372, i64* %RAX.i552, align 8
  %14373 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %14373, i64* %RDX.i658, align 8
  %14374 = add i64 %14373, 156
  %14375 = add i64 %14361, 39
  store i64 %14375, i64* %3, align 8
  %14376 = inttoptr i64 %14374 to i32*
  %14377 = load i32, i32* %14376, align 4
  %14378 = zext i32 %14377 to i64
  store i64 %14378, i64* %RSI.i757, align 8
  %14379 = add i64 %14362, -12
  %14380 = add i64 %14361, 42
  store i64 %14380, i64* %3, align 8
  %14381 = inttoptr i64 %14379 to i32*
  %14382 = load i32, i32* %14381, align 4
  %14383 = add i32 %14382, %14377
  %14384 = zext i32 %14383 to i64
  store i64 %14384, i64* %RSI.i757, align 8
  %14385 = icmp ult i32 %14383, %14377
  %14386 = icmp ult i32 %14383, %14382
  %14387 = or i1 %14385, %14386
  %14388 = zext i1 %14387 to i8
  store i8 %14388, i8* %12, align 1
  %14389 = and i32 %14383, 255
  %14390 = tail call i32 @llvm.ctpop.i32(i32 %14389)
  %14391 = trunc i32 %14390 to i8
  %14392 = and i8 %14391, 1
  %14393 = xor i8 %14392, 1
  store i8 %14393, i8* %13, align 1
  %14394 = xor i32 %14382, %14377
  %14395 = xor i32 %14394, %14383
  %14396 = lshr i32 %14395, 4
  %14397 = trunc i32 %14396 to i8
  %14398 = and i8 %14397, 1
  store i8 %14398, i8* %14, align 1
  %14399 = icmp eq i32 %14383, 0
  %14400 = zext i1 %14399 to i8
  store i8 %14400, i8* %15, align 1
  %14401 = lshr i32 %14383, 31
  %14402 = trunc i32 %14401 to i8
  store i8 %14402, i8* %16, align 1
  %14403 = lshr i32 %14377, 31
  %14404 = lshr i32 %14382, 31
  %14405 = xor i32 %14401, %14403
  %14406 = xor i32 %14401, %14404
  %14407 = add nuw nsw i32 %14405, %14406
  %14408 = icmp eq i32 %14407, 2
  %14409 = zext i1 %14408 to i8
  store i8 %14409, i8* %17, align 1
  %14410 = sext i32 %14383 to i64
  store i64 %14410, i64* %RDX.i658, align 8
  %14411 = shl nsw i64 %14410, 3
  %14412 = add i64 %14372, %14411
  %14413 = add i64 %14361, 49
  store i64 %14413, i64* %3, align 8
  %14414 = inttoptr i64 %14412 to i64*
  %14415 = load i64, i64* %14414, align 8
  store i64 %14415, i64* %RAX.i552, align 8
  store i64 %14373, i64* %RDX.i658, align 8
  %14416 = add i64 %14373, 152
  %14417 = add i64 %14361, 63
  store i64 %14417, i64* %3, align 8
  %14418 = inttoptr i64 %14416 to i32*
  %14419 = load i32, i32* %14418, align 4
  %14420 = zext i32 %14419 to i64
  store i64 %14420, i64* %RSI.i757, align 8
  %14421 = add i64 %14362, -8
  %14422 = add i64 %14361, 66
  store i64 %14422, i64* %3, align 8
  %14423 = inttoptr i64 %14421 to i32*
  %14424 = load i32, i32* %14423, align 4
  %14425 = add i32 %14424, %14419
  %14426 = zext i32 %14425 to i64
  store i64 %14426, i64* %RSI.i757, align 8
  %14427 = icmp ult i32 %14425, %14419
  %14428 = icmp ult i32 %14425, %14424
  %14429 = or i1 %14427, %14428
  %14430 = zext i1 %14429 to i8
  store i8 %14430, i8* %12, align 1
  %14431 = and i32 %14425, 255
  %14432 = tail call i32 @llvm.ctpop.i32(i32 %14431)
  %14433 = trunc i32 %14432 to i8
  %14434 = and i8 %14433, 1
  %14435 = xor i8 %14434, 1
  store i8 %14435, i8* %13, align 1
  %14436 = xor i32 %14424, %14419
  %14437 = xor i32 %14436, %14425
  %14438 = lshr i32 %14437, 4
  %14439 = trunc i32 %14438 to i8
  %14440 = and i8 %14439, 1
  store i8 %14440, i8* %14, align 1
  %14441 = icmp eq i32 %14425, 0
  %14442 = zext i1 %14441 to i8
  store i8 %14442, i8* %15, align 1
  %14443 = lshr i32 %14425, 31
  %14444 = trunc i32 %14443 to i8
  store i8 %14444, i8* %16, align 1
  %14445 = lshr i32 %14419, 31
  %14446 = lshr i32 %14424, 31
  %14447 = xor i32 %14443, %14445
  %14448 = xor i32 %14443, %14446
  %14449 = add nuw nsw i32 %14447, %14448
  %14450 = icmp eq i32 %14449, 2
  %14451 = zext i1 %14450 to i8
  store i8 %14451, i8* %17, align 1
  %14452 = sext i32 %14425 to i64
  store i64 %14452, i64* %RDX.i658, align 8
  %14453 = shl nsw i64 %14452, 1
  %14454 = add i64 %14415, %14453
  %14455 = load i16, i16* %CX.i57, align 2
  %14456 = add i64 %14361, 73
  store i64 %14456, i64* %3, align 8
  %14457 = inttoptr i64 %14454 to i16*
  store i16 %14455, i16* %14457, align 2
  %.pre343 = load i64, i64* %3, align 8
  br label %block_.L_406216

block_.L_406216:                                  ; preds = %block_.L_4061cd, %block_405f40
  %14458 = phi i64 [ %.pre343, %block_.L_4061cd ], [ %13572, %block_405f40 ]
  %14459 = load i64, i64* %RBP.i, align 8
  %14460 = add i64 %14459, -8
  %14461 = add i64 %14458, 8
  store i64 %14461, i64* %3, align 8
  %14462 = inttoptr i64 %14460 to i32*
  %14463 = load i32, i32* %14462, align 4
  %14464 = add i32 %14463, 1
  %14465 = zext i32 %14464 to i64
  store i64 %14465, i64* %RAX.i552, align 8
  %14466 = icmp eq i32 %14463, -1
  %14467 = icmp eq i32 %14464, 0
  %14468 = or i1 %14466, %14467
  %14469 = zext i1 %14468 to i8
  store i8 %14469, i8* %12, align 1
  %14470 = and i32 %14464, 255
  %14471 = tail call i32 @llvm.ctpop.i32(i32 %14470)
  %14472 = trunc i32 %14471 to i8
  %14473 = and i8 %14472, 1
  %14474 = xor i8 %14473, 1
  store i8 %14474, i8* %13, align 1
  %14475 = xor i32 %14464, %14463
  %14476 = lshr i32 %14475, 4
  %14477 = trunc i32 %14476 to i8
  %14478 = and i8 %14477, 1
  store i8 %14478, i8* %14, align 1
  %14479 = zext i1 %14467 to i8
  store i8 %14479, i8* %15, align 1
  %14480 = lshr i32 %14464, 31
  %14481 = trunc i32 %14480 to i8
  store i8 %14481, i8* %16, align 1
  %14482 = lshr i32 %14463, 31
  %14483 = xor i32 %14480, %14482
  %14484 = add nuw nsw i32 %14483, %14480
  %14485 = icmp eq i32 %14484, 2
  %14486 = zext i1 %14485 to i8
  store i8 %14486, i8* %17, align 1
  %14487 = add i64 %14458, 14
  store i64 %14487, i64* %3, align 8
  store i32 %14464, i32* %14462, align 4
  %14488 = load i64, i64* %3, align 8
  %14489 = add i64 %14488, -763
  store i64 %14489, i64* %3, align 8
  br label %block_.L_405f29

block_.L_406229:                                  ; preds = %block_.L_405f29
  %14490 = add i64 %13261, -12
  %14491 = add i64 %13290, 8
  store i64 %14491, i64* %3, align 8
  %14492 = inttoptr i64 %14490 to i32*
  %14493 = load i32, i32* %14492, align 4
  %14494 = add i32 %14493, 1
  %14495 = zext i32 %14494 to i64
  store i64 %14495, i64* %RAX.i552, align 8
  %14496 = icmp eq i32 %14493, -1
  %14497 = icmp eq i32 %14494, 0
  %14498 = or i1 %14496, %14497
  %14499 = zext i1 %14498 to i8
  store i8 %14499, i8* %12, align 1
  %14500 = and i32 %14494, 255
  %14501 = tail call i32 @llvm.ctpop.i32(i32 %14500)
  %14502 = trunc i32 %14501 to i8
  %14503 = and i8 %14502, 1
  %14504 = xor i8 %14503, 1
  store i8 %14504, i8* %13, align 1
  %14505 = xor i32 %14494, %14493
  %14506 = lshr i32 %14505, 4
  %14507 = trunc i32 %14506 to i8
  %14508 = and i8 %14507, 1
  store i8 %14508, i8* %14, align 1
  %14509 = zext i1 %14497 to i8
  store i8 %14509, i8* %15, align 1
  %14510 = lshr i32 %14494, 31
  %14511 = trunc i32 %14510 to i8
  store i8 %14511, i8* %16, align 1
  %14512 = lshr i32 %14493, 31
  %14513 = xor i32 %14510, %14512
  %14514 = add nuw nsw i32 %14513, %14510
  %14515 = icmp eq i32 %14514, 2
  %14516 = zext i1 %14515 to i8
  store i8 %14516, i8* %17, align 1
  %14517 = add i64 %13290, 14
  store i64 %14517, i64* %3, align 8
  store i32 %14494, i32* %14492, align 4
  %14518 = load i64, i64* %3, align 8
  %14519 = add i64 %14518, -799
  store i64 %14519, i64* %3, align 8
  br label %block_.L_405f18

block_.L_40623c:                                  ; preds = %block_.L_405f18
  %14520 = add i64 %13256, 5
  store i64 %14520, i64* %3, align 8
  br label %block_.L_406241

block_.L_406241:                                  ; preds = %block_.L_405efc, %block_.L_40623c
  %14521 = phi i64 [ %14520, %block_.L_40623c ], [ %13222, %block_.L_405efc ]
  %14522 = phi i64 [ %13227, %block_.L_40623c ], [ %13207, %block_.L_405efc ]
  %14523 = add i64 %14522, -2208
  %14524 = add i64 %14521, 6
  store i64 %14524, i64* %3, align 8
  %14525 = inttoptr i64 %14523 to i32*
  %14526 = load i32, i32* %14525, align 4
  %14527 = zext i32 %14526 to i64
  store i64 %14527, i64* %RAX.i552, align 8
  %14528 = load i64, i64* %6, align 8
  %14529 = add i64 %14528, 2368
  store i64 %14529, i64* %6, align 8
  %14530 = icmp ugt i64 %14528, -2369
  %14531 = zext i1 %14530 to i8
  store i8 %14531, i8* %12, align 1
  %14532 = trunc i64 %14529 to i32
  %14533 = and i32 %14532, 255
  %14534 = tail call i32 @llvm.ctpop.i32(i32 %14533)
  %14535 = trunc i32 %14534 to i8
  %14536 = and i8 %14535, 1
  %14537 = xor i8 %14536, 1
  store i8 %14537, i8* %13, align 1
  %14538 = xor i64 %14529, %14528
  %14539 = lshr i64 %14538, 4
  %14540 = trunc i64 %14539 to i8
  %14541 = and i8 %14540, 1
  store i8 %14541, i8* %14, align 1
  %14542 = icmp eq i64 %14529, 0
  %14543 = zext i1 %14542 to i8
  store i8 %14543, i8* %15, align 1
  %14544 = lshr i64 %14529, 63
  %14545 = trunc i64 %14544 to i8
  store i8 %14545, i8* %16, align 1
  %14546 = lshr i64 %14528, 63
  %14547 = xor i64 %14544, %14546
  %14548 = add nuw nsw i64 %14547, %14544
  %14549 = icmp eq i64 %14548, 2
  %14550 = zext i1 %14549 to i8
  store i8 %14550, i8* %17, align 1
  %14551 = add i64 %14521, 14
  store i64 %14551, i64* %3, align 8
  %14552 = add i64 %14528, 2376
  %14553 = inttoptr i64 %14529 to i64*
  %14554 = load i64, i64* %14553, align 8
  store i64 %14554, i64* %RBP.i, align 8
  store i64 %14552, i64* %6, align 8
  %14555 = add i64 %14521, 15
  store i64 %14555, i64* %3, align 8
  %14556 = inttoptr i64 %14552 to i64*
  %14557 = load i64, i64* %14556, align 8
  store i64 %14557, i64* %3, align 8
  %14558 = add i64 %14528, 2384
  store i64 %14558, i64* %6, align 8
  ret %struct.Memory* %MEMORY.60
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x940___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -2368
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 2368
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %28
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al___cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %AL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x8a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3758__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 14168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0xc__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x278___rsi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 632
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x8a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2216
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3740__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 14144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RDX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x8b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2232
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x8c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2240
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8a8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x11bdc__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 72668
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x8d5__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2261
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4044a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x11c00__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_sete__cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x8d5__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2261
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x6___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andb__0x1___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = and i8 %4, 1
  store i8 %7, i8* %AL, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i8 %7, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl__al___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i8, i8* %AL, align 1
  %5 = zext i8 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x8d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2260
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8a8__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rsi____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x11bdc__rsi____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 72668
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x894__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2196
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rsi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x11bdc__rsi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 72668
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x898__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2200
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x894__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xf___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 15
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -16
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x89c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2204
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x10__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -16
  %10 = icmp ult i32 %8, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4046a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x10__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -16
  %10 = icmp ult i32 %8, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40468d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11c14__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72724
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4045cb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x420__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x726418___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x726418_type* @G_0x726418 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xac__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xa8__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rcx__rdx_2____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x12b8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 4792
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -4793
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shlq__0x9___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 9
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 55
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %3, 54
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rcx__rdx_2____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__edi___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EDI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ESI, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404605(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x880__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x420__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rdx__rsi_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2268
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8dc__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2268
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__r8d(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %R8D, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shlq__0x8___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 8
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 56
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %3, 55
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi____rcx__rsi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EDI, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404527(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404692(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404516(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x8dd__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2269
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4046cd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x8d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_setne__al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorb__0xff___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = xor i8 %4, -1
  store i8 %7, i8* %AL, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i8 %4, -1
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i8 %7, 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x8dd__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2269
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x8dd__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2269
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_testb__0x1___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = and i8 %4, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i8 %7, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4046e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404ac4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404ab1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4048d0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4047f2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x880__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shlq__0x8___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 8
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 56
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %3, 55
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rsi__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rsi__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RCX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x470__rbp__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1136
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___rax__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RCX, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x470__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1136
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404709(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x470__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x46c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1132
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rsi__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ECX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x46c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1132
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x200___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 512
  store i64 %6, i64* %RDX, align 8
  %7 = icmp ugt i64 %3, -513
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rdx__rsi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ECX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x464__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1124
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x468__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1128
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x100___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 256
  store i64 %6, i64* %RDX, align 8
  %7 = icmp ugt i64 %3, -257
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x468__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDI, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__edi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EDI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x300___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 768
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -769
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rax__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ECX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4046f8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404a9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4049d1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4048e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x20__rsi__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, 32
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x10__rsi__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, 16
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x30__rax__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, 48
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4048d7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404aa3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4046e7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404ab6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4046a7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404b39(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404b26(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x460__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404adc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404b2b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404acb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x8de__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2270
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404b66(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x8de__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2270
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x8de__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2270
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404b79(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404c7b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404c11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404b80(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x470__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x46c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1132
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x460__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1120
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x46c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1132
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x440__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1088
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x464__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1124
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x468__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1128
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x450__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1104
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x468__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1128
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x430__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1072
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404b40(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x8df__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2271
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404ca8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x8df__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2271
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x8df__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2271
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404cbb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404de4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404d53(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404cc2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = bitcast i64* %RSI to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x8__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x4__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x468__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1128
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0xc__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 12
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404c82(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x884__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x888__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x88c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x10__MINUS0x88c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -16
  %10 = icmp ult i32 %8, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40505f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11afc__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404e47(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x6d4750(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d4750_type* @G_0x6d4750 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_404e70(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11948__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72008
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x88c__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2380___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924288
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 2
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2381___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924289
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404e94(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2360___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924256
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 2
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2361___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924257
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x884__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x884__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_404ed9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rcx_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.abs_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x890__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2192
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404f44(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x710020___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 7405600, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x70e8f0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x70e8f0_type* @G__0x70e8f0 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x898__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = bitcast i64* %RDX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i32, i32* %5, align 4
  %9 = shl i64 %3, 32
  %10 = ashr exact i64 %9, 32
  %11 = sext i32 %8 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %RAX, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x894__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = bitcast i64* %RCX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %EDI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x89c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__cl___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %12 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = shl i64 %4, 32
  %11 = ashr i64 %10, 33
  br label %20

; <label>:12:                                     ; preds = %block_400488
  %13 = and i8 %5, 31
  %14 = zext i8 %13 to i64
  %15 = add nsw i64 %14, -1
  %16 = shl i64 %4, 32
  %17 = ashr exact i64 %16, 32
  %18 = ashr i64 %17, %15
  %19 = lshr i64 %18, 1
  br label %20

; <label>:20:                                     ; preds = %12, %9
  %21 = phi i64 [ %19, %12 ], [ %11, %9 ]
  %22 = phi i64 [ %18, %12 ], [ %4, %9 ]
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = trunc i64 %21 to i32
  %26 = and i64 %21, 4294967295
  store i64 %26, i64* %RAX, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %24, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = and i32 %25, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29)
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %28, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %36 = icmp eq i32 %25, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %39 = lshr i32 %25, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %38, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %41, align 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %20, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x934__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2356
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404f8a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xa__0x28__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -10
  %10 = icmp ult i32 %8, 10
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404f8a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x80f__MINUS0x890__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2063
  %10 = icmp ult i32 %8, 2063
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_404f85(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x80f__MINUS0x890__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2063, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404f8a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x890__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_404ffc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x890__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rcx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.sign(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8b8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x888__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8c0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x888__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x888__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2184
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405046(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x460__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40504b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x88c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x88c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2188
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404e02(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8b8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x888__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  store i32 0, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x8e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2272
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4050a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x8e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2272
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x8e0__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2272
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4050b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4051d6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4050f7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x470__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1136
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EDX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4050bb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x480__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1152
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x47c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1148
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x46c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x464__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1124
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x478__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1144
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x464__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1124
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x474__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1140
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4051c3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x480__rbp__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1152
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x480__rbp__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1152
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RCX, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x480__rbp__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1152
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RCX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405146(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4051c8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40507b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x8e1__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2273
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405203(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x8e1__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2273
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x8e1__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2273
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405216(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40549a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405259(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40521d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405487(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6__MINUS0x894__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -6
  %10 = icmp ult i32 %8, 6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4053bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x5___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x70d010___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x480__rbp__r8_4____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1152
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %8 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x480__rbp__r8_4____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = load i64, i64* %RBP, align 8
  %7 = load i64, i64* %R8, align 8
  %8 = shl i64 %7, 2
  %9 = add i64 %6, -1152
  %10 = add i64 %9, %8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 8
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, %5
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %4, align 8
  %17 = icmp ult i32 %15, %5
  %18 = icmp ult i32 %15, %14
  %19 = or i1 %17, %18
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = and i32 %15, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22)
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = xor i32 %14, %5
  %29 = xor i32 %28, %15
  %30 = lshr i32 %29, 4
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1
  %34 = icmp eq i32 %15, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %15, 31
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1
  %40 = lshr i32 %5, 31
  %41 = lshr i32 %14, 31
  %42 = xor i32 %37, %40
  %43 = xor i32 %37, %41
  %44 = add nuw nsw i32 %42, %43
  %45 = icmp eq i32 %44, 2
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %46, i8* %47, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x898__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R8, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R10, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r10____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = bitcast i64* %R10 to i32**
  %7 = load i32*, i32** %6, align 8
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = load i32, i32* %7, align 4
  %11 = sext i32 %5 to i64
  %12 = sext i32 %10 to i64
  %13 = mul nsw i64 %12, %11
  %14 = trunc i64 %13 to i32
  %15 = and i64 %13, 4294967295
  store i64 %15, i64* %4, align 8
  %16 = shl i64 %13, 32
  %17 = ashr exact i64 %16, 32
  %18 = icmp ne i64 %17, %13
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i32 %14, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %5 = load i32, i32* %ESI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x894__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R11D, align 4
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %6, -2196
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %5, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %4, align 8
  %14 = icmp ult i32 %5, %11
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %12, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %11, %5
  %24 = xor i32 %23, %12
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %12, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %5, 31
  %36 = lshr i32 %11, 31
  %37 = xor i32 %36, %35
  %38 = xor i32 %32, %35
  %39 = add nuw nsw i32 %38, %37
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x8e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2280
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R11D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R11D, align 4
  %7 = load i8, i8* %CL, align 1
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i8 %7 to i5
  switch i5 %10, label %16 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %11
  ]

; <label>:11:                                     ; preds = %block_400488
  %12 = shl i32 %6, 1
  %13 = icmp slt i32 %6, 0
  %14 = icmp slt i32 %12, 0
  %15 = xor i1 %13, %14
  br label %26

; <label>:16:                                     ; preds = %block_400488
  %17 = zext i32 %6 to i64
  %18 = and i8 %7, 31
  %19 = zext i8 %18 to i64
  %20 = add nuw nsw i64 %19, 4294967295
  %21 = and i64 %20, 4294967295
  %22 = shl i64 %17, %21
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %23, 0
  %25 = shl i32 %23, 1
  br label %26

; <label>:26:                                     ; preds = %16, %11
  %27 = phi i1 [ %13, %11 ], [ %24, %16 ]
  %28 = phi i1 [ %15, %11 ], [ false, %16 ]
  %29 = phi i32 [ %12, %11 ], [ %25, %16 ]
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %5, align 8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %32 = zext i1 %27 to i8
  store i8 %32, i8* %31, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %34 = and i32 %29, 254
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34)
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %33, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = icmp eq i32 %29, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %44 = lshr i32 %29, 31
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %43, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %47 = zext i1 %28 to i8
  store i8 %47, i8* %46, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %26, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__r11d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %6 = load i32, i32* %R9D, align 4
  %7 = load i32, i32* %R11D, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = add i32 %7, %6
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %5, align 8
  %12 = icmp ult i32 %10, %6
  %13 = icmp ult i32 %10, %7
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %7, %6
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %6, 31
  %36 = lshr i32 %7, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8e8__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2280
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__cl___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R9D, align 4
  %7 = zext i32 %6 to i64
  %8 = load i8, i8* %CL, align 1
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = trunc i8 %8 to i5
  switch i5 %11, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %12
  ]

; <label>:12:                                     ; preds = %block_400488
  %13 = shl nuw i64 %7, 32
  %14 = ashr i64 %13, 33
  br label %22

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %8, 31
  %17 = zext i8 %16 to i64
  %18 = add nsw i64 %17, -1
  %19 = sext i32 %6 to i64
  %20 = ashr i64 %19, %18
  %21 = lshr i64 %20, 1
  br label %22

; <label>:22:                                     ; preds = %15, %12
  %23 = phi i64 [ %21, %15 ], [ %14, %12 ]
  %24 = phi i64 [ %20, %15 ], [ %7, %12 ]
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = trunc i64 %23 to i32
  %28 = and i64 %23, 4294967295
  store i64 %28, i64* %5, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %26, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %31 = and i32 %27, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31)
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %27, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %41 = lshr i32 %27, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %43, align 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %22, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d____r10__r8_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %R10, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %R9D, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x480__rbp__r8_4____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = load i64, i64* %RBP, align 8
  %7 = load i64, i64* %R8, align 8
  %8 = shl i64 %7, 2
  %9 = add i64 %6, -1152
  %10 = add i64 %9, %8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 8
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = sub i32 %5, %14
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %4, align 8
  %17 = icmp ult i32 %5, %14
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %15, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %14, %5
  %27 = xor i32 %26, %15
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %15, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %5, 31
  %39 = lshr i32 %14, 31
  %40 = xor i32 %39, %38
  %41 = xor i32 %35, %38
  %42 = add nuw nsw i32 %41, %40
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdi____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = bitcast i64* %RDI to i32**
  %7 = load i32*, i32** %6, align 8
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = load i32, i32* %7, align 4
  %11 = sext i32 %5 to i64
  %12 = sext i32 %10 to i64
  %13 = mul nsw i64 %12, %11
  %14 = trunc i64 %13 to i32
  %15 = and i64 %13, 4294967295
  store i64 %15, i64* %4, align 8
  %16 = shl i64 %13, 32
  %17 = ashr exact i64 %16, 32
  %18 = icmp ne i64 %17, %13
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i32 %14, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x894__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2196
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RDX, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R9D, align 4
  %7 = load i32, i32* %EDX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = add i32 %7, %6
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %5, align 8
  %12 = icmp ult i32 %10, %6
  %13 = icmp ult i32 %10, %7
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %7, %6
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %6, 31
  %36 = lshr i32 %7, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8e8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x894__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2196
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RDI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdi___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d____rax__rdi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %R9D, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405474(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x70d010___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x70d010_type* @G__0x70d010 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x480__rbp__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1152
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x480__rbp__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1152
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RSI, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x898__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdi____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = bitcast i64* %RDI to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i32, i32* %5, align 4
  %9 = shl i64 %3, 32
  %10 = ashr exact i64 %9, 32
  %11 = sext i32 %8 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %RSI, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x894__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2196
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x6___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, -6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ult i32 %5, 6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x8f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2288
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RSI, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi____rdi__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ESI, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x480__rbp__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1152
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RSI, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8f0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi____rax__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ESI, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405479(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4052a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40548c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4051dd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405cbf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405cac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2292
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8f4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2296
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8f8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x8ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2220
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x8fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2300
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8fc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2300
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x8b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2224
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3738__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 14136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8ac__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdi__r8_8____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8b0__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = bitcast i64* %RDI to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x8c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2248
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x8d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2256
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x88c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40592c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4055db(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405604(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405628(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405683(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shlq__0x8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 8
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 56
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %3, 55
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40571a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdx__rsi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x89c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4057ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xf__MINUS0x8a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 15, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8c8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8d0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405913(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x894__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4058a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x890__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2192
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x898__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R9, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r9___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R9, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdi__r9_4____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %RDI, align 8
  %7 = load i64, i64* %R9, align 8
  %8 = shl i64 %7, 2
  %9 = add i64 %8, %6
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 5
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %9 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %5 to i64
  %15 = sext i32 %13 to i64
  %16 = mul nsw i64 %15, %14
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %4, align 8
  %19 = shl i64 %16, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp ne i64 %20, %16
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %22, i8* %23, align 1
  %24 = and i32 %17, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24)
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %31, align 1
  %32 = lshr i32 %17, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %22, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x900__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2304
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R8D, align 4
  %7 = load i32, i32* %EDX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = add i32 %7, %6
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %5, align 8
  %12 = icmp ult i32 %10, %6
  %13 = icmp ult i32 %10, %7
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %7, %6
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %6, 31
  %36 = lshr i32 %7, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x900__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__cl___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R8D, align 4
  %7 = zext i32 %6 to i64
  %8 = load i8, i8* %CL, align 1
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = trunc i8 %8 to i5
  switch i5 %11, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %12
  ]

; <label>:12:                                     ; preds = %block_400488
  %13 = shl nuw i64 %7, 32
  %14 = ashr i64 %13, 33
  br label %22

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %8, 31
  %17 = zext i8 %16 to i64
  %18 = add nsw i64 %17, -1
  %19 = sext i32 %6 to i64
  %20 = ashr i64 %19, %18
  %21 = lshr i64 %20, 1
  br label %22

; <label>:22:                                     ; preds = %15, %12
  %23 = phi i64 [ %21, %15 ], [ %14, %12 ]
  %24 = phi i64 [ %20, %15 ], [ %7, %12 ]
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = trunc i64 %23 to i32
  %28 = and i64 %23, 4294967295
  store i64 %28, i64* %5, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %26, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %31 = and i32 %27, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31)
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %27, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %41 = lshr i32 %27, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %43, align 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %22, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shlq__0x8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 8
  store i64 %6, i64* %RDI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 56
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %3, 55
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RDI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d____rax__rdi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %R8D, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40590e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x890__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rcx__rsi_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RDX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x894__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x4___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp ult i32 %6, 4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx____rax__rsi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EDX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405913(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405918(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405596(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8c8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x901__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2305
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40596e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x901__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2305
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x901__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2305
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405981(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405aed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4059da(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405988(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ECX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405ada(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405a31(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405adf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405948(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x902__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2306
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405b1a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x902__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2306
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x902__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2306
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405b2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405c99(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405b86(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405b34(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405c86(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405bdd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405c8b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405af4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405c9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4054b2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405cb1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4054a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405da1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405d9c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405d89(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x880__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x910__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2320
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x918__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2328
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x918__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2328
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdi___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R8, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___r8__rdi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x910__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2320
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____r8__rdi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405cec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405d8e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405cdb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405efc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405ef7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405ee4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405e50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x91c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2332
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x91c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2332
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx__rdi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx__rdi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405ed1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x920__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -2336
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x920__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2336
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405ed6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405db9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405ee9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405da8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406241(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40623c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_406229(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405fce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x12b8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 4792
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -4793
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shlq__0x9___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 9
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 55
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %3, 54
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rax__rcx_2____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__esi___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx___di(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %DX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %DI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1918__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__di____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %DI, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406216(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x11bec__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq___rdx__rdi_4____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x12b8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 4792
  store i64 %6, i64* %RDI, align 8
  %7 = icmp ugt i64 %3, -4793
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shlq__0x9___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 9
  store i64 %6, i64* %R8, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 55
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %3, 54
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %R8, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rdi__r8_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x20___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 32
  store i64 %6, i64* %RDX, align 8
  %7 = icmp ugt i64 %3, -33
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarq__0x6___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = lshr i64 %3, 5
  %7 = trunc i64 %6 to i8
  %8 = and i8 %7, 1
  %9 = ashr i64 %3, 6
  store i64 %9, i64* %RDX, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %9 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %9, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %9, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %22, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__rdx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sub i64 %3, %4
  %8 = icmp ult i64 %3, %4
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %4, %3
  %19 = xor i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i64 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %3, 63
  %31 = lshr i64 %4, 63
  %32 = xor i64 %31, %30
  %33 = xor i64 %27, %30
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x928__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2344
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40605a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x930__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2352
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4060b9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq___rax__rcx_4____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x20___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 32
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -33
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarq__0x6___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = lshr i64 %3, 5
  %7 = trunc i64 %6 to i8
  %8 = and i8 %7, 1
  %9 = ashr i64 %3, 6
  store i64 %9, i64* %RAX, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %9 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %9, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %9, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %22, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x930__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2352
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x930__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2352
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x928__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2344
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__rax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sub i64 %3, %4
  %8 = icmp ult i64 %3, %4
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %4, %3
  %19 = xor i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i64 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %3, 63
  %31 = lshr i64 %4, 63
  %32 = xor i64 %31, %30
  %33 = xor i64 %27, %30
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4060eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x11bec__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x938__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2360
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4061cd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq___rdx__rsi_4____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x12b8___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 4792
  store i64 %6, i64* %RSI, align 8
  %7 = icmp ugt i64 %3, -4793
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shlq__0x9___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 9
  store i64 %6, i64* %RDI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 55
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = lshr i64 %3, 54
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RDI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rsi__rdi_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_406160(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x940__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2368
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4061bf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x940__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2368
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x940__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2368
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x938__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2360
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx____rax__rdx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %CX, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40621b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405f29(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40622e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405f18(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406241(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8a0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -2208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x940___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 2368
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -2369
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
