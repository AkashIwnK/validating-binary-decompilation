; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x31266__rip__type = type <{ [8 x i8] }>
%G_0x31296__rip__type = type <{ [8 x i8] }>
%G_0x312b8__rip__type = type <{ [8 x i8] }>
%G_0x312e8__rip__type = type <{ [8 x i8] }>
%G_0x313a9__rip__type = type <{ [8 x i8] }>
%G_0x313d9__rip__type = type <{ [8 x i8] }>
%G_0x31721__rip__type = type <{ [8 x i8] }>
%G_0x31801__rip__type = type <{ [8 x i8] }>
%G_0x31b5e__rip__type = type <{ [8 x i8] }>
%G_0x31b8e__rip__type = type <{ [8 x i8] }>
%G_0x31bb0__rip__type = type <{ [8 x i8] }>
%G_0x31be0__rip__type = type <{ [8 x i8] }>
%G_0x31d38__rip__type = type <{ [8 x i8] }>
%G_0x31d68__rip__type = type <{ [8 x i8] }>
%G_0x32d03__rip__type = type <{ [8 x i8] }>
%G_0x32ddd__rip__type = type <{ [8 x i8] }>
%G_0x6cb8f8_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x6ccae0_type = type <{ [16 x i8] }>
%G_0x6ccf88_type = type <{ [8 x i8] }>
%G_0x6cd300_type = type <{ [8 x i8] }>
%G_0x6cd3a8_type = type <{ [4 x i8] }>
%G_0x6cd474_type = type <{ [4 x i8] }>
%G_0x6cea28_type = type <{ [8 x i8] }>
%G_0x6cea30_type = type <{ [16 x i8] }>
%G_0x6cea38_type = type <{ [8 x i8] }>
%G_0x6cfc68_type = type <{ [8 x i8] }>
%G_0x6d0708_type = type <{ [16 x i8] }>
%G_0x6d1278_type = type <{ [4 x i8] }>
%G_0x6d1280_type = type <{ [16 x i8] }>
%G_0x6d1f88_type = type <{ [4 x i8] }>
%G_0x6d1fb0_type = type <{ [8 x i8] }>
%G_0x6d32cc_type = type <{ [4 x i8] }>
%G_0x6d33e0_type = type <{ [16 x i8] }>
%G_0x6d4510_type = type <{ [4 x i8] }>
%G_0x6e51e0_type = type <{ [4 x i8] }>
%G_0x6f80a0_type = type <{ [4 x i8] }>
%G_0x6f80c8_type = type <{ [4 x i8] }>
%G_0x6f8ed8_type = type <{ [4 x i8] }>
%G_0x6f9348_type = type <{ [4 x i8] }>
%G_0x6f9350_type = type <{ [8 x i8] }>
%G_0x6f9358_type = type <{ [8 x i8] }>
%G_0x6f9688_type = type <{ [4 x i8] }>
%G_0x6f9708_type = type <{ [4 x i8] }>
%G_0x6f9720_type = type <{ [4 x i8] }>
%G_0x70d190_type = type <{ [4 x i8] }>
%G_0x70fce0_type = type <{ [4 x i8] }>
%G_0x70fce4_type = type <{ [4 x i8] }>
%G_0x710000_type = type <{ [4 x i8] }>
%G_0x710008_type = type <{ [16 x i8] }>
%G_0x710360_type = type <{ [4 x i8] }>
%G_0x710364_type = type <{ [4 x i8] }>
%G_0x710798_type = type <{ [8 x i8] }>
%G_0x7107a4_type = type <{ [4 x i8] }>
%G_0x721df8_type = type <{ [16 x i8] }>
%G_0x722b78_type = type <{ [4 x i8] }>
%G_0x722c78_type = type <{ [4 x i8] }>
%G_0x722cb0_type = type <{ [8 x i8] }>
%G_0x723640_type = type <{ [16 x i8] }>
%G_0x723648_type = type <{ [8 x i8] }>
%G_0x723690_type = type <{ [4 x i8] }>
%G_0x723698_type = type <{ [4 x i8] }>
%G_0x7236c0_type = type <{ [4 x i8] }>
%G_0x724744_type = type <{ [4 x i8] }>
%G_0x725318_type = type <{ [4 x i8] }>
%G_0x7255f8_type = type <{ [16 x i8] }>
%G_0x726420_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x31266__rip_ = global %G_0x31266__rip__type zeroinitializer
@G_0x31296__rip_ = global %G_0x31296__rip__type zeroinitializer
@G_0x312b8__rip_ = global %G_0x312b8__rip__type zeroinitializer
@G_0x312e8__rip_ = global %G_0x312e8__rip__type zeroinitializer
@G_0x313a9__rip_ = global %G_0x313a9__rip__type zeroinitializer
@G_0x313d9__rip_ = global %G_0x313d9__rip__type zeroinitializer
@G_0x31721__rip_ = global %G_0x31721__rip__type zeroinitializer
@G_0x31801__rip_ = global %G_0x31801__rip__type zeroinitializer
@G_0x31b5e__rip_ = global %G_0x31b5e__rip__type zeroinitializer
@G_0x31b8e__rip_ = global %G_0x31b8e__rip__type zeroinitializer
@G_0x31bb0__rip_ = global %G_0x31bb0__rip__type zeroinitializer
@G_0x31be0__rip_ = global %G_0x31be0__rip__type zeroinitializer
@G_0x31d38__rip_ = global %G_0x31d38__rip__type zeroinitializer
@G_0x31d68__rip_ = global %G_0x31d68__rip__type zeroinitializer
@G_0x32d03__rip_ = global %G_0x32d03__rip__type zeroinitializer
@G_0x32ddd__rip_ = global %G_0x32ddd__rip__type zeroinitializer
@G_0x6cb8f8 = local_unnamed_addr global %G_0x6cb8f8_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x6ccae0 = local_unnamed_addr global %G_0x6ccae0_type zeroinitializer
@G_0x6ccf88 = local_unnamed_addr global %G_0x6ccf88_type zeroinitializer
@G_0x6cd300 = local_unnamed_addr global %G_0x6cd300_type zeroinitializer
@G_0x6cd3a8 = local_unnamed_addr global %G_0x6cd3a8_type zeroinitializer
@G_0x6cd474 = local_unnamed_addr global %G_0x6cd474_type zeroinitializer
@G_0x6cea28 = local_unnamed_addr global %G_0x6cea28_type zeroinitializer
@G_0x6cea30 = local_unnamed_addr global %G_0x6cea30_type zeroinitializer
@G_0x6cea38 = local_unnamed_addr global %G_0x6cea38_type zeroinitializer
@G_0x6cfc68 = local_unnamed_addr global %G_0x6cfc68_type zeroinitializer
@G_0x6d0708 = local_unnamed_addr global %G_0x6d0708_type zeroinitializer
@G_0x6d1278 = local_unnamed_addr global %G_0x6d1278_type zeroinitializer
@G_0x6d1280 = local_unnamed_addr global %G_0x6d1280_type zeroinitializer
@G_0x6d1f88 = local_unnamed_addr global %G_0x6d1f88_type zeroinitializer
@G_0x6d1fb0 = local_unnamed_addr global %G_0x6d1fb0_type zeroinitializer
@G_0x6d32cc = local_unnamed_addr global %G_0x6d32cc_type zeroinitializer
@G_0x6d33e0 = local_unnamed_addr global %G_0x6d33e0_type zeroinitializer
@G_0x6d4510 = local_unnamed_addr global %G_0x6d4510_type zeroinitializer
@G_0x6e51e0 = local_unnamed_addr global %G_0x6e51e0_type zeroinitializer
@G_0x6f80a0 = local_unnamed_addr global %G_0x6f80a0_type zeroinitializer
@G_0x6f80c8 = local_unnamed_addr global %G_0x6f80c8_type zeroinitializer
@G_0x6f8ed8 = local_unnamed_addr global %G_0x6f8ed8_type zeroinitializer
@G_0x6f9348 = local_unnamed_addr global %G_0x6f9348_type zeroinitializer
@G_0x6f9350 = local_unnamed_addr global %G_0x6f9350_type zeroinitializer
@G_0x6f9358 = local_unnamed_addr global %G_0x6f9358_type zeroinitializer
@G_0x6f9688 = local_unnamed_addr global %G_0x6f9688_type zeroinitializer
@G_0x6f9708 = local_unnamed_addr global %G_0x6f9708_type zeroinitializer
@G_0x6f9720 = local_unnamed_addr global %G_0x6f9720_type zeroinitializer
@G_0x70d190 = local_unnamed_addr global %G_0x70d190_type zeroinitializer
@G_0x70fce0 = local_unnamed_addr global %G_0x70fce0_type zeroinitializer
@G_0x70fce4 = local_unnamed_addr global %G_0x70fce4_type zeroinitializer
@G_0x710000 = local_unnamed_addr global %G_0x710000_type zeroinitializer
@G_0x710008 = local_unnamed_addr global %G_0x710008_type zeroinitializer
@G_0x710360 = local_unnamed_addr global %G_0x710360_type zeroinitializer
@G_0x710364 = local_unnamed_addr global %G_0x710364_type zeroinitializer
@G_0x710798 = local_unnamed_addr global %G_0x710798_type zeroinitializer
@G_0x7107a4 = local_unnamed_addr global %G_0x7107a4_type zeroinitializer
@G_0x721df8 = local_unnamed_addr global %G_0x721df8_type zeroinitializer
@G_0x722b78 = local_unnamed_addr global %G_0x722b78_type zeroinitializer
@G_0x722c78 = local_unnamed_addr global %G_0x722c78_type zeroinitializer
@G_0x722cb0 = local_unnamed_addr global %G_0x722cb0_type zeroinitializer
@G_0x723640 = local_unnamed_addr global %G_0x723640_type zeroinitializer
@G_0x723648 = local_unnamed_addr global %G_0x723648_type zeroinitializer
@G_0x723690 = local_unnamed_addr global %G_0x723690_type zeroinitializer
@G_0x723698 = local_unnamed_addr global %G_0x723698_type zeroinitializer
@G_0x7236c0 = local_unnamed_addr global %G_0x7236c0_type zeroinitializer
@G_0x724744 = local_unnamed_addr global %G_0x724744_type zeroinitializer
@G_0x725318 = local_unnamed_addr global %G_0x725318_type zeroinitializer
@G_0x7255f8 = local_unnamed_addr global %G_0x7255f8_type zeroinitializer
@G_0x726420 = local_unnamed_addr global %G_0x726420_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

declare %struct.Memory* @ext_sqrt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr

declare %struct.Memory* @sub_480690.Qstep2QP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @updateQuantizationParameter(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -248
  store i64 %11, i64* %6, align 8
  %12 = icmp ult i64 %8, 240
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI.i = bitcast %union.anon* %40 to i32*
  %41 = add i64 %7, -16
  %42 = load i32, i32* %EDI.i, align 4
  %43 = add i64 %10, 13
  store i64 %43, i64* %3, align 8
  %44 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %44, align 4
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i1321 = getelementptr inbounds %union.anon, %union.anon* %45, i64 0, i32 0
  %46 = load i64, i64* %3, align 8
  %47 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %47, i64* %RAX.i1321, align 8
  %RDI.i = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
  %48 = add i64 %47, 72620
  %49 = add i64 %46, 14
  store i64 %49, i64* %3, align 8
  %50 = inttoptr i64 %48 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %RDI.i, align 8
  store i64 %47, i64* %RAX.i1321, align 8
  %53 = add i64 %47, 72608
  %54 = add i64 %46, 28
  store i64 %54, i64* %3, align 8
  %55 = inttoptr i64 %53 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 %51, %56
  %58 = icmp ult i32 %51, %56
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %14, align 1
  %60 = and i32 %57, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60)
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %21, align 1
  %65 = xor i32 %56, %51
  %66 = xor i32 %65, %57
  %67 = lshr i32 %66, 4
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %27, align 1
  %70 = icmp eq i32 %57, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %30, align 1
  %72 = lshr i32 %57, 31
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %33, align 1
  %74 = lshr i32 %51, 31
  %75 = lshr i32 %56, 31
  %76 = xor i32 %75, %74
  %77 = xor i32 %72, %74
  %78 = add nuw nsw i32 %77, %76
  %79 = icmp eq i32 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %39, align 1
  %.v322 = select i1 %70, i64 34, i64 3193
  %81 = add i64 %46, %.v322
  store i64 %81, i64* %3, align 8
  br i1 %70, label %block_47e190, label %block_.L_47ede7

block_47e190:                                     ; preds = %entry
  %82 = load i64, i64* %RBP.i, align 8
  %83 = add i64 %82, -8
  %84 = add i64 %81, 4
  store i64 %84, i64* %3, align 8
  %85 = inttoptr i64 %83 to i32*
  %86 = load i32, i32* %85, align 4
  store i8 0, i8* %14, align 1
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87)
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %92 = icmp eq i32 %86, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %30, align 1
  %94 = lshr i32 %86, 31
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v421 = select i1 %92, i64 10, i64 31
  %96 = add i64 %81, %.v421
  store i64 %96, i64* %3, align 8
  br i1 %92, label %block_47e19a, label %block_.L_47e1af

block_47e19a:                                     ; preds = %block_47e190
  store i64 %47, i64* %RAX.i1321, align 8
  %97 = add i64 %47, 72600
  %98 = add i64 %96, 15
  store i64 %98, i64* %3, align 8
  %99 = inttoptr i64 %97 to i32*
  %100 = load i32, i32* %99, align 4
  store i8 0, i8* %14, align 1
  %101 = and i32 %100, 255
  %102 = tail call i32 @llvm.ctpop.i32(i32 %101)
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  store i8 %105, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %106 = icmp eq i32 %100, 0
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %30, align 1
  %108 = lshr i32 %100, 31
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v462 = select i1 %106, i64 21, i64 2978
  %110 = add i64 %96, %.v462
  store i64 %110, i64* %3, align 8
  br i1 %106, label %block_.L_47e1af, label %block_.L_47ed3c

block_.L_47e1af:                                  ; preds = %block_47e19a, %block_47e190
  %111 = phi i64 [ %110, %block_47e19a ], [ %96, %block_47e190 ]
  store i64 %47, i64* %RAX.i1321, align 8
  %112 = add i64 %47, 24
  %113 = add i64 %111, 12
  store i64 %113, i64* %3, align 8
  %114 = inttoptr i64 %112 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, -2
  %117 = icmp ult i32 %115, 2
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %14, align 1
  %119 = and i32 %116, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119)
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %21, align 1
  %124 = xor i32 %116, %115
  %125 = lshr i32 %124, 4
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %27, align 1
  %128 = icmp eq i32 %116, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %30, align 1
  %130 = lshr i32 %116, 31
  %131 = trunc i32 %130 to i8
  store i8 %131, i8* %33, align 1
  %132 = lshr i32 %115, 31
  %133 = xor i32 %130, %132
  %134 = add nuw nsw i32 %133, %132
  %135 = icmp eq i32 %134, 2
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %39, align 1
  %.v422 = select i1 %128, i64 18, i64 47
  %137 = add i64 %111, %.v422
  store i64 %137, i64* %3, align 8
  br i1 %128, label %block_47e1c1, label %block_.L_47e1de

block_47e1c1:                                     ; preds = %block_.L_47e1af
  %138 = load i32, i32* bitcast (%G_0x6cd474_type* @G_0x6cd474 to i32*), align 8
  %139 = zext i32 %138 to i64
  store i32 %138, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i64 %139, i64* %RAX.i1321, align 8
  %140 = add i64 %82, -4
  %141 = add i64 %137, 24
  store i64 %141, i64* %3, align 8
  %142 = inttoptr i64 %140 to i32*
  store i32 %138, i32* %142, align 4
  %143 = load i64, i64* %3, align 8
  %144 = add i64 %143, 9380
  store i64 %144, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47e1de:                                  ; preds = %block_.L_47e1af
  store i64 %47, i64* %RAX.i1321, align 8
  %145 = add i64 %137, 12
  store i64 %145, i64* %3, align 8
  %146 = load i32, i32* %114, align 4
  %147 = add i32 %146, -1
  %148 = icmp eq i32 %146, 0
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %14, align 1
  %150 = and i32 %147, 255
  %151 = tail call i32 @llvm.ctpop.i32(i32 %150)
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  store i8 %154, i8* %21, align 1
  %155 = xor i32 %147, %146
  %156 = lshr i32 %155, 4
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  store i8 %158, i8* %27, align 1
  %159 = icmp eq i32 %147, 0
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %30, align 1
  %161 = lshr i32 %147, 31
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %33, align 1
  %163 = lshr i32 %146, 31
  %164 = xor i32 %161, %163
  %165 = add nuw nsw i32 %164, %163
  %166 = icmp eq i32 %165, 2
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %39, align 1
  %.v423 = select i1 %159, i64 18, i64 1397
  %168 = add i64 %137, %.v423
  %169 = add i64 %168, 8
  store i64 %169, i64* %3, align 8
  br i1 %159, label %block_47e1f0, label %block_.L_47e753

block_47e1f0:                                     ; preds = %block_.L_47e1de
  %170 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %170, i64* %RAX.i1321, align 8
  %171 = add i64 %170, 1236
  %172 = add i64 %168, 15
  store i64 %172, i64* %3, align 8
  %173 = inttoptr i64 %171 to i32*
  %174 = load i32, i32* %173, align 4
  %175 = add i32 %174, -1
  %176 = icmp eq i32 %174, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %14, align 1
  %178 = and i32 %175, 255
  %179 = tail call i32 @llvm.ctpop.i32(i32 %178)
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = xor i8 %181, 1
  store i8 %182, i8* %21, align 1
  %183 = xor i32 %175, %174
  %184 = lshr i32 %183, 4
  %185 = trunc i32 %184 to i8
  %186 = and i8 %185, 1
  store i8 %186, i8* %27, align 1
  %187 = icmp eq i32 %175, 0
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %30, align 1
  %189 = lshr i32 %175, 31
  %190 = trunc i32 %189 to i8
  store i8 %190, i8* %33, align 1
  %191 = lshr i32 %174, 31
  %192 = xor i32 %189, %191
  %193 = add nuw nsw i32 %192, %191
  %194 = icmp eq i32 %193, 2
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %39, align 1
  %.v440 = select i1 %187, i64 21, i64 373
  %196 = add i64 %168, %.v440
  store i64 %196, i64* %3, align 8
  br i1 %187, label %block_47e205, label %block_.L_47e365

block_47e205:                                     ; preds = %block_47e1f0
  store i64 %170, i64* %RAX.i1321, align 8
  %197 = add i64 %170, 2880
  %198 = add i64 %196, 15
  store i64 %198, i64* %3, align 8
  %199 = inttoptr i64 %197 to i32*
  %200 = load i32, i32* %199, align 4
  %201 = add i32 %200, -2
  %202 = icmp ult i32 %200, 2
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %14, align 1
  %204 = and i32 %201, 255
  %205 = tail call i32 @llvm.ctpop.i32(i32 %204)
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = xor i8 %207, 1
  store i8 %208, i8* %21, align 1
  %209 = xor i32 %201, %200
  %210 = lshr i32 %209, 4
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  store i8 %212, i8* %27, align 1
  %213 = icmp eq i32 %201, 0
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %30, align 1
  %215 = lshr i32 %201, 31
  %216 = trunc i32 %215 to i8
  store i8 %216, i8* %33, align 1
  %217 = lshr i32 %200, 31
  %218 = xor i32 %215, %217
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %39, align 1
  %.v455 = select i1 %213, i64 42, i64 21
  %222 = add i64 %196, %.v455
  store i64 %222, i64* %3, align 8
  br i1 %213, label %block_.L_47e22f, label %block_47e21a

block_47e21a:                                     ; preds = %block_47e205
  store i64 %170, i64* %RAX.i1321, align 8
  %223 = add i64 %170, 2884
  %224 = add i64 %222, 15
  store i64 %224, i64* %3, align 8
  %225 = inttoptr i64 %223 to i32*
  %226 = load i32, i32* %225, align 4
  store i8 0, i8* %14, align 1
  %227 = and i32 %226, 255
  %228 = tail call i32 @llvm.ctpop.i32(i32 %227)
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  store i8 %231, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %232 = icmp eq i32 %226, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %30, align 1
  %234 = lshr i32 %226, 31
  %235 = trunc i32 %234 to i8
  store i8 %235, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v456 = select i1 %232, i64 134, i64 21
  %236 = add i64 %222, %.v456
  store i64 %236, i64* %3, align 8
  br i1 %232, label %block_.L_47e2a0, label %block_.L_47e22f

block_.L_47e22f:                                  ; preds = %block_47e21a, %block_47e205
  %237 = phi i64 [ %236, %block_47e21a ], [ %222, %block_47e205 ]
  store i64 %47, i64* %RAX.i1321, align 8
  %238 = add i64 %47, 72600
  %239 = add i64 %237, 15
  store i64 %239, i64* %3, align 8
  %240 = inttoptr i64 %238 to i32*
  %241 = load i32, i32* %240, align 4
  store i8 0, i8* %14, align 1
  %242 = and i32 %241, 255
  %243 = tail call i32 @llvm.ctpop.i32(i32 %242)
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  store i8 %246, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %247 = icmp eq i32 %241, 0
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %30, align 1
  %249 = lshr i32 %241, 31
  %250 = trunc i32 %249 to i8
  store i8 %250, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v457 = select i1 %247, i64 21, i64 108
  %251 = add i64 %237, %.v457
  store i64 %251, i64* %3, align 8
  br i1 %247, label %block_47e244, label %block_.L_47e29b

block_47e244:                                     ; preds = %block_.L_47e22f
  store i64 %47, i64* %RAX.i1321, align 8
  %252 = add i64 %47, 72604
  %253 = add i64 %251, 15
  store i64 %253, i64* %3, align 8
  %254 = inttoptr i64 %252 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = add i32 %255, -1
  %257 = icmp eq i32 %255, 0
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %14, align 1
  %259 = and i32 %256, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259)
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %21, align 1
  %264 = xor i32 %256, %255
  %265 = lshr i32 %264, 4
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %27, align 1
  %268 = icmp eq i32 %256, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %30, align 1
  %270 = lshr i32 %256, 31
  %271 = trunc i32 %270 to i8
  store i8 %271, i8* %33, align 1
  %272 = lshr i32 %255, 31
  %273 = xor i32 %270, %272
  %274 = add nuw nsw i32 %273, %272
  %275 = icmp eq i32 %274, 2
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %39, align 1
  %.v461 = select i1 %268, i64 21, i64 54
  %277 = add i64 %251, %.v461
  %278 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %279 = zext i32 %278 to i64
  store i64 %279, i64* %RAX.i1321, align 8
  store i32 %278, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %280 = add i64 %277, 21
  store i64 %280, i64* %3, align 8
  br i1 %268, label %block_47e259, label %block_.L_47e27a

block_47e259:                                     ; preds = %block_47e244
  %281 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %RAX.i1321, align 8
  store i32 %281, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %283 = add i64 %277, 61
  store i64 %283, i64* %3, align 8
  br label %block_.L_47e296

block_.L_47e27a:                                  ; preds = %block_47e244
  %284 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %RAX.i1321, align 8
  %286 = add i64 %277, 28
  store i64 %286, i64* %3, align 8
  store i32 %284, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  br label %block_.L_47e296

block_.L_47e296:                                  ; preds = %block_.L_47e27a, %block_47e259
  %287 = phi i64 [ %286, %block_.L_47e27a ], [ %283, %block_47e259 ]
  %288 = add i64 %287, 5
  store i64 %288, i64* %3, align 8
  br label %block_.L_47e29b

block_.L_47e29b:                                  ; preds = %block_.L_47e22f, %block_.L_47e296
  %289 = phi i64 [ %288, %block_.L_47e296 ], [ %251, %block_.L_47e22f ]
  %290 = add i64 %289, 5
  store i64 %290, i64* %3, align 8
  br label %block_.L_47e2a0

block_.L_47e2a0:                                  ; preds = %block_.L_47e29b, %block_47e21a
  %291 = phi i64 [ %290, %block_.L_47e29b ], [ %236, %block_47e21a ]
  %292 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %293 = zext i32 %292 to i64
  store i64 %293, i64* %RAX.i1321, align 8
  %294 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %295 = sub i32 %292, %294
  %296 = icmp ult i32 %292, %294
  %297 = zext i1 %296 to i8
  store i8 %297, i8* %14, align 1
  %298 = and i32 %295, 255
  %299 = tail call i32 @llvm.ctpop.i32(i32 %298)
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = xor i8 %301, 1
  store i8 %302, i8* %21, align 1
  %303 = xor i32 %294, %292
  %304 = xor i32 %303, %295
  %305 = lshr i32 %304, 4
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  store i8 %307, i8* %27, align 1
  %308 = icmp eq i32 %295, 0
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %30, align 1
  %310 = lshr i32 %295, 31
  %311 = trunc i32 %310 to i8
  store i8 %311, i8* %33, align 1
  %312 = lshr i32 %292, 31
  %313 = lshr i32 %294, 31
  %314 = xor i32 %313, %312
  %315 = xor i32 %310, %312
  %316 = add nuw nsw i32 %315, %314
  %317 = icmp eq i32 %316, 2
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %39, align 1
  %.v458 = select i1 %308, i64 20, i64 42
  %319 = add i64 %291, %.v458
  store i64 %319, i64* %3, align 8
  br i1 %308, label %block_47e2b4, label %block_.L_47e2ca

block_47e2b4:                                     ; preds = %block_.L_47e2a0
  %320 = add i32 %292, 2
  %321 = zext i32 %320 to i64
  store i64 %321, i64* %RAX.i1321, align 8
  %322 = icmp ugt i32 %292, -3
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %14, align 1
  %324 = and i32 %320, 255
  %325 = tail call i32 @llvm.ctpop.i32(i32 %324)
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = xor i8 %327, 1
  store i8 %328, i8* %21, align 1
  %329 = xor i32 %320, %292
  %330 = lshr i32 %329, 4
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  store i8 %332, i8* %27, align 1
  %333 = icmp eq i32 %320, 0
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %30, align 1
  %335 = lshr i32 %320, 31
  %336 = trunc i32 %335 to i8
  store i8 %336, i8* %33, align 1
  %337 = xor i32 %335, %312
  %338 = add nuw nsw i32 %337, %335
  %339 = icmp eq i32 %338, 2
  %340 = zext i1 %339 to i8
  store i8 %340, i8* %39, align 1
  store i32 %320, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %341 = add i64 %319, 62
  store i64 %341, i64* %3, align 8
  br label %block_.L_47e2f2

block_.L_47e2ca:                                  ; preds = %block_.L_47e2a0
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i3192 = getelementptr inbounds %union.anon, %union.anon* %342, i64 0, i32 0
  %343 = add i32 %294, %292
  %344 = zext i32 %343 to i64
  store i64 %344, i64* %RCX.i3192, align 8
  %345 = icmp ult i32 %343, %292
  %346 = icmp ult i32 %343, %294
  %347 = or i1 %345, %346
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %14, align 1
  %349 = and i32 %343, 255
  %350 = tail call i32 @llvm.ctpop.i32(i32 %349)
  %351 = trunc i32 %350 to i8
  %352 = and i8 %351, 1
  %353 = xor i8 %352, 1
  store i8 %353, i8* %21, align 1
  %354 = xor i32 %303, %343
  %355 = lshr i32 %354, 4
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  store i8 %357, i8* %27, align 1
  %358 = icmp eq i32 %343, 0
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %30, align 1
  %360 = lshr i32 %343, 31
  %361 = trunc i32 %360 to i8
  store i8 %361, i8* %33, align 1
  %362 = xor i32 %360, %312
  %363 = xor i32 %360, %313
  %364 = add nuw nsw i32 %362, %363
  %365 = icmp eq i32 %364, 2
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %39, align 1
  %367 = add i64 %82, -44
  %368 = add i64 %319, 22
  store i64 %368, i64* %3, align 8
  %369 = inttoptr i64 %367 to i32*
  store i32 2, i32* %369, align 4
  %ECX.i3184 = bitcast %union.anon* %342 to i32*
  %370 = load i32, i32* %ECX.i3184, align 4
  %371 = zext i32 %370 to i64
  %372 = load i64, i64* %3, align 8
  store i64 %371, i64* %RAX.i1321, align 8
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %374 = sext i32 %370 to i64
  %375 = lshr i64 %374, 32
  store i64 %375, i64* %373, align 8
  %376 = load i64, i64* %RBP.i, align 8
  %377 = add i64 %376, -44
  %378 = add i64 %372, 6
  store i64 %378, i64* %3, align 8
  %379 = inttoptr i64 %377 to i32*
  %380 = load i32, i32* %379, align 4
  %381 = zext i32 %380 to i64
  store i64 %381, i64* %RCX.i3192, align 8
  %382 = add i64 %372, 8
  store i64 %382, i64* %3, align 8
  %383 = sext i32 %380 to i64
  %384 = shl nuw i64 %375, 32
  %385 = or i64 %384, %371
  %386 = sdiv i64 %385, %383
  %387 = shl i64 %386, 32
  %388 = ashr exact i64 %387, 32
  %389 = icmp eq i64 %386, %388
  br i1 %389, label %392, label %390

; <label>:390:                                    ; preds = %block_.L_47e2ca
  %391 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %382, %struct.Memory* %2)
  %.pre210 = load i64, i64* %RAX.i1321, align 8
  %.pre211 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3176

; <label>:392:                                    ; preds = %block_.L_47e2ca
  %393 = srem i64 %385, %383
  %394 = and i64 %386, 4294967295
  store i64 %394, i64* %RAX.i1321, align 8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %396 = and i64 %393, 4294967295
  store i64 %396, i64* %395, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__ecx.exit3176

routine_idivl__ecx.exit3176:                      ; preds = %392, %390
  %397 = phi i64 [ %.pre211, %390 ], [ %382, %392 ]
  %398 = phi i64 [ %.pre210, %390 ], [ %394, %392 ]
  %399 = phi %struct.Memory* [ %391, %390 ], [ %2, %392 ]
  %400 = trunc i64 %398 to i32
  %401 = add i32 %400, 1
  %402 = zext i32 %401 to i64
  store i64 %402, i64* %RAX.i1321, align 8
  %403 = icmp eq i32 %400, -1
  %404 = icmp eq i32 %401, 0
  %405 = or i1 %403, %404
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %14, align 1
  %407 = and i32 %401, 255
  %408 = tail call i32 @llvm.ctpop.i32(i32 %407)
  %409 = trunc i32 %408 to i8
  %410 = and i8 %409, 1
  %411 = xor i8 %410, 1
  store i8 %411, i8* %21, align 1
  %412 = xor i32 %401, %400
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  store i8 %415, i8* %27, align 1
  %416 = zext i1 %404 to i8
  store i8 %416, i8* %30, align 1
  %417 = lshr i32 %401, 31
  %418 = trunc i32 %417 to i8
  store i8 %418, i8* %33, align 1
  %419 = lshr i32 %400, 31
  %420 = xor i32 %417, %419
  %421 = add nuw nsw i32 %420, %417
  %422 = icmp eq i32 %421, 2
  %423 = zext i1 %422 to i8
  store i8 %423, i8* %39, align 1
  %424 = add i64 %397, 10
  store i64 %424, i64* %3, align 8
  store i32 %401, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47e2f2

block_.L_47e2f2:                                  ; preds = %routine_idivl__ecx.exit3176, %block_47e2b4
  %425 = phi i32 [ %401, %routine_idivl__ecx.exit3176 ], [ %320, %block_47e2b4 ]
  %426 = phi i64 [ %424, %routine_idivl__ecx.exit3176 ], [ %341, %block_47e2b4 ]
  %MEMORY.5 = phi %struct.Memory* [ %399, %routine_idivl__ecx.exit3176 ], [ %2, %block_47e2b4 ]
  %427 = zext i32 %425 to i64
  store i64 %427, i64* %RAX.i1321, align 8
  %428 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %429 = sub i32 %425, %428
  %430 = icmp ult i32 %425, %428
  %431 = zext i1 %430 to i8
  store i8 %431, i8* %14, align 1
  %432 = and i32 %429, 255
  %433 = tail call i32 @llvm.ctpop.i32(i32 %432)
  %434 = trunc i32 %433 to i8
  %435 = and i8 %434, 1
  %436 = xor i8 %435, 1
  store i8 %436, i8* %21, align 1
  %437 = xor i32 %428, %425
  %438 = xor i32 %437, %429
  %439 = lshr i32 %438, 4
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  store i8 %441, i8* %27, align 1
  %442 = icmp eq i32 %429, 0
  %443 = zext i1 %442 to i8
  store i8 %443, i8* %30, align 1
  %444 = lshr i32 %429, 31
  %445 = trunc i32 %444 to i8
  store i8 %445, i8* %33, align 1
  %446 = lshr i32 %425, 31
  %447 = lshr i32 %428, 31
  %448 = xor i32 %447, %446
  %449 = xor i32 %444, %446
  %450 = add nuw nsw i32 %449, %448
  %451 = icmp eq i32 %450, 2
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %39, align 1
  %453 = icmp ne i8 %445, 0
  %454 = xor i1 %453, %451
  %.v459 = select i1 %454, i64 20, i64 35
  %455 = add i64 %426, %.v459
  %456 = add i64 %455, 7
  store i64 %456, i64* %3, align 8
  br i1 %454, label %block_47e306, label %block_.L_47e315

block_47e306:                                     ; preds = %block_.L_47e2f2
  store i64 %427, i64* %RAX.i1321, align 8
  %457 = load i64, i64* %RBP.i, align 8
  %458 = add i64 %457, -48
  %459 = add i64 %455, 10
  store i64 %459, i64* %3, align 8
  %460 = inttoptr i64 %458 to i32*
  store i32 %425, i32* %460, align 4
  %461 = load i64, i64* %3, align 8
  %462 = add i64 %461, 15
  store i64 %462, i64* %3, align 8
  br label %block_.L_47e31f

block_.L_47e315:                                  ; preds = %block_.L_47e2f2
  %463 = zext i32 %428 to i64
  store i64 %463, i64* %RAX.i1321, align 8
  %464 = load i64, i64* %RBP.i, align 8
  %465 = add i64 %464, -48
  %466 = add i64 %455, 10
  store i64 %466, i64* %3, align 8
  %467 = inttoptr i64 %465 to i32*
  store i32 %428, i32* %467, align 4
  %.pre212 = load i64, i64* %3, align 8
  br label %block_.L_47e31f

block_.L_47e31f:                                  ; preds = %block_.L_47e315, %block_47e306
  %468 = phi i64 [ %.pre212, %block_.L_47e315 ], [ %462, %block_47e306 ]
  %469 = load i64, i64* %RBP.i, align 8
  %470 = add i64 %469, -48
  %471 = add i64 %468, 3
  store i64 %471, i64* %3, align 8
  %472 = inttoptr i64 %470 to i32*
  %473 = load i32, i32* %472, align 4
  store i32 %473, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %474 = load i32, i32* bitcast (%G_0x710364_type* @G_0x710364 to i32*), align 8
  %475 = zext i32 %474 to i64
  store i64 %475, i64* %RAX.i1321, align 8
  %476 = sub i32 %474, %473
  %477 = icmp ult i32 %474, %473
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %14, align 1
  %479 = and i32 %476, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479)
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %21, align 1
  %484 = xor i32 %473, %474
  %485 = xor i32 %484, %476
  %486 = lshr i32 %485, 4
  %487 = trunc i32 %486 to i8
  %488 = and i8 %487, 1
  store i8 %488, i8* %27, align 1
  %489 = icmp eq i32 %476, 0
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %30, align 1
  %491 = lshr i32 %476, 31
  %492 = trunc i32 %491 to i8
  store i8 %492, i8* %33, align 1
  %493 = lshr i32 %474, 31
  %494 = lshr i32 %473, 31
  %495 = xor i32 %494, %493
  %496 = xor i32 %491, %493
  %497 = add nuw nsw i32 %496, %495
  %498 = icmp eq i32 %497, 2
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %39, align 1
  %500 = icmp ne i8 %492, 0
  %501 = xor i1 %500, %498
  %.v460 = select i1 %501, i64 30, i64 45
  %502 = add i64 %468, %.v460
  %503 = add i64 %502, 7
  store i64 %503, i64* %3, align 8
  br i1 %501, label %block_47e33d, label %block_.L_47e34c

block_47e33d:                                     ; preds = %block_.L_47e31f
  %504 = zext i32 %473 to i64
  store i64 %504, i64* %RAX.i1321, align 8
  %505 = add i64 %469, -52
  %506 = add i64 %502, 10
  store i64 %506, i64* %3, align 8
  %507 = inttoptr i64 %505 to i32*
  store i32 %473, i32* %507, align 4
  %508 = load i64, i64* %3, align 8
  %509 = add i64 %508, 15
  store i64 %509, i64* %3, align 8
  br label %block_.L_47e356

block_.L_47e34c:                                  ; preds = %block_.L_47e31f
  store i64 %475, i64* %RAX.i1321, align 8
  %510 = add i64 %469, -52
  %511 = add i64 %502, 10
  store i64 %511, i64* %3, align 8
  %512 = inttoptr i64 %510 to i32*
  store i32 %474, i32* %512, align 4
  %.pre213 = load i64, i64* %3, align 8
  br label %block_.L_47e356

block_.L_47e356:                                  ; preds = %block_.L_47e34c, %block_47e33d
  %513 = phi i64 [ %.pre213, %block_.L_47e34c ], [ %509, %block_47e33d ]
  %514 = load i64, i64* %RBP.i, align 8
  %515 = add i64 %514, -52
  %516 = add i64 %513, 3
  store i64 %516, i64* %3, align 8
  %517 = inttoptr i64 %515 to i32*
  %518 = load i32, i32* %517, align 4
  %519 = zext i32 %518 to i64
  store i64 %519, i64* %RAX.i1321, align 8
  store i32 %518, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %520 = add i64 %513, 1006
  store i64 %520, i64* %3, align 8
  br label %block_.L_47e744

block_.L_47e365:                                  ; preds = %block_47e1f0
  %521 = load i32, i32* bitcast (%G_0x70fce0_type* @G_0x70fce0 to i32*), align 8
  %522 = add i32 %521, 1
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %RAX.i1321, align 8
  %524 = icmp eq i32 %521, -1
  %525 = icmp eq i32 %522, 0
  %526 = or i1 %524, %525
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %14, align 1
  %528 = and i32 %522, 255
  %529 = tail call i32 @llvm.ctpop.i32(i32 %528)
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  store i8 %532, i8* %21, align 1
  %533 = xor i32 %522, %521
  %534 = lshr i32 %533, 4
  %535 = trunc i32 %534 to i8
  %536 = and i8 %535, 1
  store i8 %536, i8* %27, align 1
  %537 = zext i1 %525 to i8
  store i8 %537, i8* %30, align 1
  %538 = lshr i32 %522, 31
  %539 = trunc i32 %538 to i8
  store i8 %539, i8* %33, align 1
  %540 = lshr i32 %521, 31
  %541 = xor i32 %538, %540
  %542 = add nuw nsw i32 %541, %538
  %543 = icmp eq i32 %542, 2
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %39, align 1
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i3122 = getelementptr inbounds %union.anon, %union.anon* %545, i64 0, i32 0
  store i64 %170, i64* %RCX.i3122, align 8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %547 = bitcast %union.anon* %45 to i32*
  %548 = sext i32 %522 to i64
  %549 = lshr i64 %548, 32
  store i64 %549, i64* %546, align 8
  %550 = add i64 %196, 25
  store i64 %550, i64* %3, align 8
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %552 = bitcast %union.anon* %551 to i32*
  %553 = load i32, i32* %173, align 4
  %554 = sext i32 %553 to i64
  %555 = shl nuw i64 %549, 32
  %556 = or i64 %555, %523
  %557 = sdiv i64 %556, %554
  %558 = shl i64 %557, 32
  %559 = ashr exact i64 %558, 32
  %560 = icmp eq i64 %557, %559
  br i1 %560, label %563, label %561

; <label>:561:                                    ; preds = %block_.L_47e365
  %562 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %550, %struct.Memory* %2)
  %.pre214 = load i64, i64* %RBP.i, align 8
  %.pre215 = load i32, i32* %552, align 4
  %.pre216 = load i64, i64* %3, align 8
  br label %routine_idivl_0x4d4__rcx_.exit3117

; <label>:563:                                    ; preds = %block_.L_47e365
  %564 = srem i64 %556, %554
  %565 = and i64 %557, 4294967295
  store i64 %565, i64* %RAX.i1321, align 8
  %566 = getelementptr inbounds %union.anon, %union.anon* %551, i64 0, i32 0
  %567 = and i64 %564, 4294967295
  store i64 %567, i64* %566, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %568 = trunc i64 %564 to i32
  br label %routine_idivl_0x4d4__rcx_.exit3117

routine_idivl_0x4d4__rcx_.exit3117:               ; preds = %563, %561
  %569 = phi i64 [ %.pre216, %561 ], [ %550, %563 ]
  %570 = phi i32 [ %.pre215, %561 ], [ %568, %563 ]
  %571 = phi i64 [ %.pre214, %561 ], [ %82, %563 ]
  %572 = phi %struct.Memory* [ %562, %561 ], [ %2, %563 ]
  %573 = add i64 %571, -24
  %574 = add i64 %569, 3
  store i64 %574, i64* %3, align 8
  %575 = inttoptr i64 %573 to i32*
  store i32 %570, i32* %575, align 4
  %576 = load i64, i64* %RBP.i, align 8
  %577 = add i64 %576, -24
  %578 = load i64, i64* %3, align 8
  %579 = add i64 %578, 4
  store i64 %579, i64* %3, align 8
  %580 = inttoptr i64 %577 to i32*
  %581 = load i32, i32* %580, align 4
  store i8 0, i8* %14, align 1
  %582 = and i32 %581, 255
  %583 = tail call i32 @llvm.ctpop.i32(i32 %582)
  %584 = trunc i32 %583 to i8
  %585 = and i8 %584, 1
  %586 = xor i8 %585, 1
  store i8 %586, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %587 = icmp eq i32 %581, 0
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %30, align 1
  %589 = lshr i32 %581, 31
  %590 = trunc i32 %589 to i8
  store i8 %590, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v441 = select i1 %587, i64 10, i64 27
  %591 = add i64 %578, %.v441
  store i64 %591, i64* %3, align 8
  br i1 %587, label %block_47e38b, label %block_.L_47e39c

block_47e38b:                                     ; preds = %routine_idivl_0x4d4__rcx_.exit3117
  %592 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %592, i64* %RAX.i1321, align 8
  %593 = add i64 %592, 1236
  %594 = add i64 %591, 14
  store i64 %594, i64* %3, align 8
  %595 = inttoptr i64 %593 to i32*
  %596 = load i32, i32* %595, align 4
  %597 = zext i32 %596 to i64
  store i64 %597, i64* %RCX.i3122, align 8
  %598 = add i64 %591, 17
  store i64 %598, i64* %3, align 8
  store i32 %596, i32* %580, align 4
  %.pre217 = load i64, i64* %RBP.i, align 8
  %.pre218 = load i64, i64* %3, align 8
  br label %block_.L_47e39c

block_.L_47e39c:                                  ; preds = %routine_idivl_0x4d4__rcx_.exit3117, %block_47e38b
  %599 = phi i64 [ %.pre218, %block_47e38b ], [ %591, %routine_idivl_0x4d4__rcx_.exit3117 ]
  %600 = phi i64 [ %.pre217, %block_47e38b ], [ %576, %routine_idivl_0x4d4__rcx_.exit3117 ]
  %601 = add i64 %600, -24
  %602 = add i64 %599, 4
  store i64 %602, i64* %3, align 8
  %603 = inttoptr i64 %601 to i32*
  %604 = load i32, i32* %603, align 4
  %605 = add i32 %604, -1
  %606 = icmp eq i32 %604, 0
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %14, align 1
  %608 = and i32 %605, 255
  %609 = tail call i32 @llvm.ctpop.i32(i32 %608)
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  %612 = xor i8 %611, 1
  store i8 %612, i8* %21, align 1
  %613 = xor i32 %605, %604
  %614 = lshr i32 %613, 4
  %615 = trunc i32 %614 to i8
  %616 = and i8 %615, 1
  store i8 %616, i8* %27, align 1
  %617 = icmp eq i32 %605, 0
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %30, align 1
  %619 = lshr i32 %605, 31
  %620 = trunc i32 %619 to i8
  store i8 %620, i8* %33, align 1
  %621 = lshr i32 %604, 31
  %622 = xor i32 %619, %621
  %623 = add nuw nsw i32 %622, %621
  %624 = icmp eq i32 %623, 2
  %625 = zext i1 %624 to i8
  store i8 %625, i8* %39, align 1
  %.v442 = select i1 %617, i64 10, i64 170
  %626 = add i64 %599, %.v442
  store i64 %626, i64* %3, align 8
  %627 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  br i1 %617, label %block_47e3a6, label %block_.L_47e446

block_47e3a6:                                     ; preds = %block_.L_47e39c
  store i64 %627, i64* %RAX.i1321, align 8
  %628 = add i64 %627, 2880
  %629 = add i64 %626, 15
  store i64 %629, i64* %3, align 8
  %630 = inttoptr i64 %628 to i32*
  %631 = load i32, i32* %630, align 4
  %632 = add i32 %631, -2
  %633 = icmp ult i32 %631, 2
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %14, align 1
  %635 = and i32 %632, 255
  %636 = tail call i32 @llvm.ctpop.i32(i32 %635)
  %637 = trunc i32 %636 to i8
  %638 = and i8 %637, 1
  %639 = xor i8 %638, 1
  store i8 %639, i8* %21, align 1
  %640 = xor i32 %632, %631
  %641 = lshr i32 %640, 4
  %642 = trunc i32 %641 to i8
  %643 = and i8 %642, 1
  store i8 %643, i8* %27, align 1
  %644 = icmp eq i32 %632, 0
  %645 = zext i1 %644 to i8
  store i8 %645, i8* %30, align 1
  %646 = lshr i32 %632, 31
  %647 = trunc i32 %646 to i8
  store i8 %647, i8* %33, align 1
  %648 = lshr i32 %631, 31
  %649 = xor i32 %646, %648
  %650 = add nuw nsw i32 %649, %648
  %651 = icmp eq i32 %650, 2
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %39, align 1
  %.v451 = select i1 %644, i64 42, i64 21
  %653 = add i64 %626, %.v451
  store i64 %653, i64* %3, align 8
  br i1 %644, label %block_.L_47e3d0, label %block_47e3bb

block_47e3bb:                                     ; preds = %block_47e3a6
  store i64 %627, i64* %RAX.i1321, align 8
  %654 = add i64 %627, 2884
  %655 = add i64 %653, 15
  store i64 %655, i64* %3, align 8
  %656 = inttoptr i64 %654 to i32*
  %657 = load i32, i32* %656, align 4
  store i8 0, i8* %14, align 1
  %658 = and i32 %657, 255
  %659 = tail call i32 @llvm.ctpop.i32(i32 %658)
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  store i8 %662, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %663 = icmp eq i32 %657, 0
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %30, align 1
  %665 = lshr i32 %657, 31
  %666 = trunc i32 %665 to i8
  store i8 %666, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v452 = select i1 %663, i64 134, i64 21
  %667 = add i64 %653, %.v452
  store i64 %667, i64* %3, align 8
  br i1 %663, label %block_.L_47e441, label %block_.L_47e3d0

block_.L_47e3d0:                                  ; preds = %block_47e3bb, %block_47e3a6
  %668 = phi i64 [ %667, %block_47e3bb ], [ %653, %block_47e3a6 ]
  %669 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %669, i64* %RAX.i1321, align 8
  %670 = add i64 %669, 72600
  %671 = add i64 %668, 15
  store i64 %671, i64* %3, align 8
  %672 = inttoptr i64 %670 to i32*
  %673 = load i32, i32* %672, align 4
  store i8 0, i8* %14, align 1
  %674 = and i32 %673, 255
  %675 = tail call i32 @llvm.ctpop.i32(i32 %674)
  %676 = trunc i32 %675 to i8
  %677 = and i8 %676, 1
  %678 = xor i8 %677, 1
  store i8 %678, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %679 = icmp eq i32 %673, 0
  %680 = zext i1 %679 to i8
  store i8 %680, i8* %30, align 1
  %681 = lshr i32 %673, 31
  %682 = trunc i32 %681 to i8
  store i8 %682, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v453 = select i1 %679, i64 21, i64 108
  %683 = add i64 %668, %.v453
  store i64 %683, i64* %3, align 8
  br i1 %679, label %block_47e3e5, label %block_.L_47e43c

block_47e3e5:                                     ; preds = %block_.L_47e3d0
  store i64 %669, i64* %RAX.i1321, align 8
  %684 = add i64 %669, 72604
  %685 = add i64 %683, 15
  store i64 %685, i64* %3, align 8
  %686 = inttoptr i64 %684 to i32*
  %687 = load i32, i32* %686, align 4
  %688 = add i32 %687, -1
  %689 = icmp eq i32 %687, 0
  %690 = zext i1 %689 to i8
  store i8 %690, i8* %14, align 1
  %691 = and i32 %688, 255
  %692 = tail call i32 @llvm.ctpop.i32(i32 %691)
  %693 = trunc i32 %692 to i8
  %694 = and i8 %693, 1
  %695 = xor i8 %694, 1
  store i8 %695, i8* %21, align 1
  %696 = xor i32 %688, %687
  %697 = lshr i32 %696, 4
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  store i8 %699, i8* %27, align 1
  %700 = icmp eq i32 %688, 0
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %30, align 1
  %702 = lshr i32 %688, 31
  %703 = trunc i32 %702 to i8
  store i8 %703, i8* %33, align 1
  %704 = lshr i32 %687, 31
  %705 = xor i32 %702, %704
  %706 = add nuw nsw i32 %705, %704
  %707 = icmp eq i32 %706, 2
  %708 = zext i1 %707 to i8
  store i8 %708, i8* %39, align 1
  %.v454 = select i1 %700, i64 21, i64 54
  %709 = add i64 %683, %.v454
  %710 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %711 = zext i32 %710 to i64
  store i64 %711, i64* %RAX.i1321, align 8
  store i32 %710, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %712 = add i64 %709, 21
  store i64 %712, i64* %3, align 8
  br i1 %700, label %block_47e3fa, label %block_.L_47e41b

block_47e3fa:                                     ; preds = %block_47e3e5
  %713 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %714 = zext i32 %713 to i64
  store i64 %714, i64* %RAX.i1321, align 8
  store i32 %713, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %715 = add i64 %709, 61
  store i64 %715, i64* %3, align 8
  br label %block_.L_47e437

block_.L_47e41b:                                  ; preds = %block_47e3e5
  %716 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %717 = zext i32 %716 to i64
  store i64 %717, i64* %RAX.i1321, align 8
  %718 = add i64 %709, 28
  store i64 %718, i64* %3, align 8
  store i32 %716, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  br label %block_.L_47e437

block_.L_47e437:                                  ; preds = %block_.L_47e41b, %block_47e3fa
  %719 = phi i64 [ %718, %block_.L_47e41b ], [ %715, %block_47e3fa ]
  %720 = add i64 %719, 5
  store i64 %720, i64* %3, align 8
  br label %block_.L_47e43c

block_.L_47e43c:                                  ; preds = %block_.L_47e3d0, %block_.L_47e437
  %721 = phi i64 [ %720, %block_.L_47e437 ], [ %683, %block_.L_47e3d0 ]
  %722 = add i64 %721, 5
  store i64 %722, i64* %3, align 8
  br label %block_.L_47e441

block_.L_47e441:                                  ; preds = %block_.L_47e43c, %block_47e3bb
  %723 = phi i64 [ %722, %block_.L_47e43c ], [ %667, %block_47e3bb ]
  %724 = add i64 %723, 5
  store i64 %724, i64* %3, align 8
  br label %block_.L_47e446

block_.L_47e446:                                  ; preds = %block_.L_47e39c, %block_.L_47e441
  %725 = phi i64 [ %724, %block_.L_47e441 ], [ %626, %block_.L_47e39c ]
  %726 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %727 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %728 = sub i32 %726, %727
  %729 = zext i32 %728 to i64
  store i64 %729, i64* %RAX.i1321, align 8
  %730 = icmp ult i32 %726, %727
  %731 = zext i1 %730 to i8
  store i8 %731, i8* %14, align 1
  %732 = and i32 %728, 255
  %733 = tail call i32 @llvm.ctpop.i32(i32 %732)
  %734 = trunc i32 %733 to i8
  %735 = and i8 %734, 1
  %736 = xor i8 %735, 1
  store i8 %736, i8* %21, align 1
  %737 = xor i32 %727, %726
  %738 = xor i32 %737, %728
  %739 = lshr i32 %738, 4
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  store i8 %741, i8* %27, align 1
  %742 = icmp eq i32 %728, 0
  %743 = zext i1 %742 to i8
  store i8 %743, i8* %30, align 1
  %744 = lshr i32 %728, 31
  %745 = trunc i32 %744 to i8
  store i8 %745, i8* %33, align 1
  %746 = lshr i32 %726, 31
  %747 = lshr i32 %727, 31
  %748 = xor i32 %747, %746
  %749 = xor i32 %744, %746
  %750 = add nuw nsw i32 %749, %748
  %751 = icmp eq i32 %750, 2
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %39, align 1
  store i64 %627, i64* %RCX.i3122, align 8
  %RDX.i3051 = getelementptr inbounds %union.anon, %union.anon* %551, i64 0, i32 0
  %753 = add i64 %627, 1236
  %754 = add i64 %725, 29
  store i64 %754, i64* %3, align 8
  %755 = inttoptr i64 %753 to i32*
  %756 = load i32, i32* %755, align 4
  %757 = mul i32 %756, -2
  %758 = add i32 %757, -3
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RDX.i3051, align 8
  %760 = lshr i32 %758, 31
  %761 = sub i32 %728, %758
  %762 = icmp ult i32 %728, %758
  %763 = zext i1 %762 to i8
  store i8 %763, i8* %14, align 1
  %764 = and i32 %761, 255
  %765 = tail call i32 @llvm.ctpop.i32(i32 %764)
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  store i8 %768, i8* %21, align 1
  %769 = xor i32 %758, %728
  %770 = xor i32 %769, %761
  %771 = lshr i32 %770, 4
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  store i8 %773, i8* %27, align 1
  %774 = icmp eq i32 %761, 0
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %30, align 1
  %776 = lshr i32 %761, 31
  %777 = trunc i32 %776 to i8
  store i8 %777, i8* %33, align 1
  %778 = xor i32 %760, %744
  %779 = xor i32 %776, %744
  %780 = add nuw nsw i32 %779, %778
  %781 = icmp eq i32 %780, 2
  %782 = zext i1 %781 to i8
  store i8 %782, i8* %39, align 1
  %783 = icmp ne i8 %777, 0
  %784 = xor i1 %783, %781
  %.demorgan = or i1 %774, %784
  %.v443 = select i1 %.demorgan, i64 40, i64 52
  %785 = add i64 %725, %.v443
  store i64 %785, i64* %3, align 8
  br i1 %.demorgan, label %block_47e471, label %block_.L_47e47d

block_47e471:                                     ; preds = %block_.L_47e446
  %786 = load i64, i64* %RBP.i, align 8
  %787 = add i64 %786, -28
  %788 = add i64 %785, 7
  store i64 %788, i64* %3, align 8
  %789 = inttoptr i64 %787 to i32*
  store i32 -3, i32* %789, align 4
  %790 = load i64, i64* %3, align 8
  %791 = add i64 %790, 249
  br label %block_.L_47e571

block_.L_47e47d:                                  ; preds = %block_.L_47e446
  %792 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %793 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %794 = sub i32 %792, %793
  %795 = zext i32 %794 to i64
  store i64 %795, i64* %RAX.i1321, align 8
  %796 = icmp ult i32 %792, %793
  %797 = zext i1 %796 to i8
  store i8 %797, i8* %14, align 1
  %798 = and i32 %794, 255
  %799 = tail call i32 @llvm.ctpop.i32(i32 %798)
  %800 = trunc i32 %799 to i8
  %801 = and i8 %800, 1
  %802 = xor i8 %801, 1
  store i8 %802, i8* %21, align 1
  %803 = xor i32 %793, %792
  %804 = xor i32 %803, %794
  %805 = lshr i32 %804, 4
  %806 = trunc i32 %805 to i8
  %807 = and i8 %806, 1
  store i8 %807, i8* %27, align 1
  %808 = icmp eq i32 %794, 0
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %30, align 1
  %810 = lshr i32 %794, 31
  %811 = trunc i32 %810 to i8
  store i8 %811, i8* %33, align 1
  %812 = lshr i32 %792, 31
  %813 = lshr i32 %793, 31
  %814 = xor i32 %813, %812
  %815 = xor i32 %810, %812
  %816 = add nuw nsw i32 %815, %814
  %817 = icmp eq i32 %816, 2
  %818 = zext i1 %817 to i8
  store i8 %818, i8* %39, align 1
  %819 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %819, i64* %RCX.i3122, align 8
  %820 = add i64 %819, 1236
  %821 = add i64 %785, 29
  store i64 %821, i64* %3, align 8
  %822 = inttoptr i64 %820 to i32*
  %823 = load i32, i32* %822, align 4
  %824 = mul i32 %823, -2
  %825 = add i32 %824, -2
  %826 = zext i32 %825 to i64
  store i64 %826, i64* %RDX.i3051, align 8
  %827 = lshr i32 %825, 31
  %828 = sub i32 %794, %825
  %829 = icmp ult i32 %794, %825
  %830 = zext i1 %829 to i8
  store i8 %830, i8* %14, align 1
  %831 = and i32 %828, 255
  %832 = tail call i32 @llvm.ctpop.i32(i32 %831)
  %833 = trunc i32 %832 to i8
  %834 = and i8 %833, 1
  %835 = xor i8 %834, 1
  store i8 %835, i8* %21, align 1
  %836 = xor i32 %825, %794
  %837 = xor i32 %836, %828
  %838 = lshr i32 %837, 4
  %839 = trunc i32 %838 to i8
  %840 = and i8 %839, 1
  store i8 %840, i8* %27, align 1
  %841 = icmp eq i32 %828, 0
  %842 = zext i1 %841 to i8
  store i8 %842, i8* %30, align 1
  %843 = lshr i32 %828, 31
  %844 = trunc i32 %843 to i8
  store i8 %844, i8* %33, align 1
  %845 = xor i32 %827, %810
  %846 = xor i32 %843, %810
  %847 = add nuw nsw i32 %846, %845
  %848 = icmp eq i32 %847, 2
  %849 = zext i1 %848 to i8
  store i8 %849, i8* %39, align 1
  %.v444 = select i1 %841, i64 40, i64 52
  %850 = add i64 %785, %.v444
  store i64 %850, i64* %3, align 8
  br i1 %841, label %block_47e4a8, label %block_.L_47e4b4

block_47e4a8:                                     ; preds = %block_.L_47e47d
  %851 = load i64, i64* %RBP.i, align 8
  %852 = add i64 %851, -28
  %853 = add i64 %850, 7
  store i64 %853, i64* %3, align 8
  %854 = inttoptr i64 %852 to i32*
  store i32 -2, i32* %854, align 4
  %855 = load i64, i64* %3, align 8
  %856 = add i64 %855, 189
  br label %block_.L_47e56c

block_.L_47e4b4:                                  ; preds = %block_.L_47e47d
  %857 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %858 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %859 = sub i32 %857, %858
  %860 = zext i32 %859 to i64
  store i64 %860, i64* %RAX.i1321, align 8
  %861 = icmp ult i32 %857, %858
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %14, align 1
  %863 = and i32 %859, 255
  %864 = tail call i32 @llvm.ctpop.i32(i32 %863)
  %865 = trunc i32 %864 to i8
  %866 = and i8 %865, 1
  %867 = xor i8 %866, 1
  store i8 %867, i8* %21, align 1
  %868 = xor i32 %858, %857
  %869 = xor i32 %868, %859
  %870 = lshr i32 %869, 4
  %871 = trunc i32 %870 to i8
  %872 = and i8 %871, 1
  store i8 %872, i8* %27, align 1
  %873 = icmp eq i32 %859, 0
  %874 = zext i1 %873 to i8
  store i8 %874, i8* %30, align 1
  %875 = lshr i32 %859, 31
  %876 = trunc i32 %875 to i8
  store i8 %876, i8* %33, align 1
  %877 = lshr i32 %857, 31
  %878 = lshr i32 %858, 31
  %879 = xor i32 %878, %877
  %880 = xor i32 %875, %877
  %881 = add nuw nsw i32 %880, %879
  %882 = icmp eq i32 %881, 2
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %39, align 1
  store i64 %819, i64* %RCX.i3122, align 8
  %884 = add i64 %850, 29
  store i64 %884, i64* %3, align 8
  %885 = load i32, i32* %822, align 4
  %886 = mul i32 %885, -2
  %887 = add i32 %886, -1
  %888 = zext i32 %887 to i64
  store i64 %888, i64* %RDX.i3051, align 8
  %889 = lshr i32 %887, 31
  %890 = sub i32 %859, %887
  %891 = icmp ult i32 %859, %887
  %892 = zext i1 %891 to i8
  store i8 %892, i8* %14, align 1
  %893 = and i32 %890, 255
  %894 = tail call i32 @llvm.ctpop.i32(i32 %893)
  %895 = trunc i32 %894 to i8
  %896 = and i8 %895, 1
  %897 = xor i8 %896, 1
  store i8 %897, i8* %21, align 1
  %898 = xor i32 %887, %859
  %899 = xor i32 %898, %890
  %900 = lshr i32 %899, 4
  %901 = trunc i32 %900 to i8
  %902 = and i8 %901, 1
  store i8 %902, i8* %27, align 1
  %903 = icmp eq i32 %890, 0
  %904 = zext i1 %903 to i8
  store i8 %904, i8* %30, align 1
  %905 = lshr i32 %890, 31
  %906 = trunc i32 %905 to i8
  store i8 %906, i8* %33, align 1
  %907 = xor i32 %889, %875
  %908 = xor i32 %905, %875
  %909 = add nuw nsw i32 %908, %907
  %910 = icmp eq i32 %909, 2
  %911 = zext i1 %910 to i8
  store i8 %911, i8* %39, align 1
  %.v445 = select i1 %903, i64 40, i64 52
  %912 = add i64 %850, %.v445
  store i64 %912, i64* %3, align 8
  br i1 %903, label %block_47e4df, label %block_.L_47e4eb

block_47e4df:                                     ; preds = %block_.L_47e4b4
  %913 = load i64, i64* %RBP.i, align 8
  %914 = add i64 %913, -28
  %915 = add i64 %912, 7
  store i64 %915, i64* %3, align 8
  %916 = inttoptr i64 %914 to i32*
  store i32 -1, i32* %916, align 4
  %917 = load i64, i64* %3, align 8
  %918 = add i64 %917, 129
  br label %block_.L_47e567

block_.L_47e4eb:                                  ; preds = %block_.L_47e4b4
  %919 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %920 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %921 = sub i32 %919, %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RAX.i1321, align 8
  %923 = icmp ult i32 %919, %920
  %924 = zext i1 %923 to i8
  store i8 %924, i8* %14, align 1
  %925 = and i32 %921, 255
  %926 = tail call i32 @llvm.ctpop.i32(i32 %925)
  %927 = trunc i32 %926 to i8
  %928 = and i8 %927, 1
  %929 = xor i8 %928, 1
  store i8 %929, i8* %21, align 1
  %930 = xor i32 %920, %919
  %931 = xor i32 %930, %921
  %932 = lshr i32 %931, 4
  %933 = trunc i32 %932 to i8
  %934 = and i8 %933, 1
  store i8 %934, i8* %27, align 1
  %935 = icmp eq i32 %921, 0
  %936 = zext i1 %935 to i8
  store i8 %936, i8* %30, align 1
  %937 = lshr i32 %921, 31
  %938 = trunc i32 %937 to i8
  store i8 %938, i8* %33, align 1
  %939 = lshr i32 %919, 31
  %940 = lshr i32 %920, 31
  %941 = xor i32 %940, %939
  %942 = xor i32 %937, %939
  %943 = add nuw nsw i32 %942, %941
  %944 = icmp eq i32 %943, 2
  %945 = zext i1 %944 to i8
  store i8 %945, i8* %39, align 1
  %946 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %946, i64* %RCX.i3122, align 8
  %947 = add i64 %946, 1236
  %948 = add i64 %912, 29
  store i64 %948, i64* %3, align 8
  %949 = inttoptr i64 %947 to i32*
  %950 = load i32, i32* %949, align 4
  %951 = sext i32 %950 to i64
  %952 = mul nsw i64 %951, -2
  %953 = and i64 %952, 4294967294
  store i64 %953, i64* %RDX.i3051, align 8
  %954 = trunc i64 %952 to i32
  %955 = sub i32 %921, %954
  %956 = icmp ult i32 %921, %954
  %957 = zext i1 %956 to i8
  store i8 %957, i8* %14, align 1
  %958 = and i32 %955, 255
  %959 = tail call i32 @llvm.ctpop.i32(i32 %958)
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  %962 = xor i8 %961, 1
  store i8 %962, i8* %21, align 1
  %963 = xor i32 %954, %921
  %964 = xor i32 %963, %955
  %965 = lshr i32 %964, 4
  %966 = trunc i32 %965 to i8
  %967 = and i8 %966, 1
  store i8 %967, i8* %27, align 1
  %968 = icmp eq i32 %955, 0
  %969 = zext i1 %968 to i8
  store i8 %969, i8* %30, align 1
  %970 = lshr i32 %955, 31
  %971 = trunc i32 %970 to i8
  store i8 %971, i8* %33, align 1
  %972 = lshr i32 %954, 31
  %973 = xor i32 %972, %937
  %974 = xor i32 %970, %937
  %975 = add nuw nsw i32 %974, %973
  %976 = icmp eq i32 %975, 2
  %977 = zext i1 %976 to i8
  store i8 %977, i8* %39, align 1
  %.v446 = select i1 %968, i64 37, i64 49
  %978 = add i64 %912, %.v446
  store i64 %978, i64* %3, align 8
  br i1 %968, label %block_47e513, label %block_.L_47e51f

block_47e513:                                     ; preds = %block_.L_47e4eb
  %979 = load i64, i64* %RBP.i, align 8
  %980 = add i64 %979, -28
  %981 = add i64 %978, 7
  store i64 %981, i64* %3, align 8
  %982 = inttoptr i64 %980 to i32*
  store i32 0, i32* %982, align 4
  %983 = load i64, i64* %3, align 8
  %984 = add i64 %983, 72
  br label %block_.L_47e562

block_.L_47e51f:                                  ; preds = %block_.L_47e4eb
  %985 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %986 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %987 = sub i32 %985, %986
  %988 = zext i32 %987 to i64
  store i64 %988, i64* %RAX.i1321, align 8
  %989 = icmp ult i32 %985, %986
  %990 = zext i1 %989 to i8
  store i8 %990, i8* %14, align 1
  %991 = and i32 %987, 255
  %992 = tail call i32 @llvm.ctpop.i32(i32 %991)
  %993 = trunc i32 %992 to i8
  %994 = and i8 %993, 1
  %995 = xor i8 %994, 1
  store i8 %995, i8* %21, align 1
  %996 = xor i32 %986, %985
  %997 = xor i32 %996, %987
  %998 = lshr i32 %997, 4
  %999 = trunc i32 %998 to i8
  %1000 = and i8 %999, 1
  store i8 %1000, i8* %27, align 1
  %1001 = icmp eq i32 %987, 0
  %1002 = zext i1 %1001 to i8
  store i8 %1002, i8* %30, align 1
  %1003 = lshr i32 %987, 31
  %1004 = trunc i32 %1003 to i8
  store i8 %1004, i8* %33, align 1
  %1005 = lshr i32 %985, 31
  %1006 = lshr i32 %986, 31
  %1007 = xor i32 %1006, %1005
  %1008 = xor i32 %1003, %1005
  %1009 = add nuw nsw i32 %1008, %1007
  %1010 = icmp eq i32 %1009, 2
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %39, align 1
  store i64 %946, i64* %RCX.i3122, align 8
  %1012 = add i64 %978, 29
  store i64 %1012, i64* %3, align 8
  %1013 = load i32, i32* %949, align 4
  %1014 = mul i32 %1013, -2
  %1015 = or i32 %1014, 1
  %1016 = zext i32 %1015 to i64
  store i64 %1016, i64* %RDX.i3051, align 8
  %1017 = lshr i32 %1014, 31
  %1018 = sub i32 %987, %1015
  %1019 = icmp ult i32 %987, %1015
  %1020 = zext i1 %1019 to i8
  store i8 %1020, i8* %14, align 1
  %1021 = and i32 %1018, 255
  %1022 = tail call i32 @llvm.ctpop.i32(i32 %1021)
  %1023 = trunc i32 %1022 to i8
  %1024 = and i8 %1023, 1
  %1025 = xor i8 %1024, 1
  store i8 %1025, i8* %21, align 1
  %1026 = xor i32 %1014, %987
  %1027 = xor i32 %1026, %1018
  %1028 = lshr i32 %1027, 4
  %1029 = trunc i32 %1028 to i8
  %1030 = and i8 %1029, 1
  store i8 %1030, i8* %27, align 1
  %1031 = icmp eq i32 %1018, 0
  %1032 = zext i1 %1031 to i8
  store i8 %1032, i8* %30, align 1
  %1033 = lshr i32 %1018, 31
  %1034 = trunc i32 %1033 to i8
  store i8 %1034, i8* %33, align 1
  %1035 = xor i32 %1017, %1003
  %1036 = xor i32 %1033, %1003
  %1037 = add nuw nsw i32 %1036, %1035
  %1038 = icmp eq i32 %1037, 2
  %1039 = zext i1 %1038 to i8
  store i8 %1039, i8* %39, align 1
  %.v447 = select i1 %1031, i64 40, i64 52
  %1040 = add i64 %978, %.v447
  %1041 = load i64, i64* %RBP.i, align 8
  %1042 = add i64 %1041, -28
  %1043 = add i64 %1040, 7
  store i64 %1043, i64* %3, align 8
  %1044 = inttoptr i64 %1042 to i32*
  br i1 %1031, label %block_47e54a, label %block_.L_47e556

block_47e54a:                                     ; preds = %block_.L_47e51f
  store i32 1, i32* %1044, align 4
  %1045 = load i64, i64* %3, align 8
  %1046 = add i64 %1045, 12
  store i64 %1046, i64* %3, align 8
  br label %block_.L_47e55d

block_.L_47e556:                                  ; preds = %block_.L_47e51f
  store i32 2, i32* %1044, align 4
  %.pre220 = load i64, i64* %3, align 8
  br label %block_.L_47e55d

block_.L_47e55d:                                  ; preds = %block_.L_47e556, %block_47e54a
  %1047 = phi i64 [ %.pre220, %block_.L_47e556 ], [ %1046, %block_47e54a ]
  %1048 = add i64 %1047, 5
  store i64 %1048, i64* %3, align 8
  br label %block_.L_47e562

block_.L_47e562:                                  ; preds = %block_.L_47e55d, %block_47e513
  %storemerge161 = phi i64 [ %984, %block_47e513 ], [ %1048, %block_.L_47e55d ]
  %1049 = add i64 %storemerge161, 5
  store i64 %1049, i64* %3, align 8
  br label %block_.L_47e567

block_.L_47e567:                                  ; preds = %block_.L_47e562, %block_47e4df
  %storemerge160 = phi i64 [ %918, %block_47e4df ], [ %1049, %block_.L_47e562 ]
  %1050 = add i64 %storemerge160, 5
  store i64 %1050, i64* %3, align 8
  br label %block_.L_47e56c

block_.L_47e56c:                                  ; preds = %block_.L_47e567, %block_47e4a8
  %storemerge159 = phi i64 [ %856, %block_47e4a8 ], [ %1050, %block_.L_47e567 ]
  %1051 = add i64 %storemerge159, 5
  store i64 %1051, i64* %3, align 8
  br label %block_.L_47e571

block_.L_47e571:                                  ; preds = %block_.L_47e56c, %block_47e471
  %storemerge = phi i64 [ %791, %block_47e471 ], [ %1051, %block_.L_47e56c ]
  %1052 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %1053 = zext i32 %1052 to i64
  store i64 %1053, i64* %RAX.i1321, align 8
  %1054 = load i64, i64* %RBP.i, align 8
  %1055 = add i64 %1054, -28
  %1056 = add i64 %storemerge, 10
  store i64 %1056, i64* %3, align 8
  %1057 = inttoptr i64 %1055 to i32*
  %1058 = load i32, i32* %1057, align 4
  %1059 = add i32 %1058, %1052
  %1060 = zext i32 %1059 to i64
  store i64 %1060, i64* %RAX.i1321, align 8
  %1061 = icmp ult i32 %1059, %1052
  %1062 = icmp ult i32 %1059, %1058
  %1063 = or i1 %1061, %1062
  %1064 = zext i1 %1063 to i8
  store i8 %1064, i8* %14, align 1
  %1065 = and i32 %1059, 255
  %1066 = tail call i32 @llvm.ctpop.i32(i32 %1065)
  %1067 = trunc i32 %1066 to i8
  %1068 = and i8 %1067, 1
  %1069 = xor i8 %1068, 1
  store i8 %1069, i8* %21, align 1
  %1070 = xor i32 %1058, %1052
  %1071 = xor i32 %1070, %1059
  %1072 = lshr i32 %1071, 4
  %1073 = trunc i32 %1072 to i8
  %1074 = and i8 %1073, 1
  store i8 %1074, i8* %27, align 1
  %1075 = icmp eq i32 %1059, 0
  %1076 = zext i1 %1075 to i8
  store i8 %1076, i8* %30, align 1
  %1077 = lshr i32 %1059, 31
  %1078 = trunc i32 %1077 to i8
  store i8 %1078, i8* %33, align 1
  %1079 = lshr i32 %1052, 31
  %1080 = lshr i32 %1058, 31
  %1081 = xor i32 %1077, %1079
  %1082 = xor i32 %1077, %1080
  %1083 = add nuw nsw i32 %1081, %1082
  %1084 = icmp eq i32 %1083, 2
  %1085 = zext i1 %1084 to i8
  store i8 %1085, i8* %39, align 1
  store i32 %1059, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %1086 = add i64 %1054, -24
  %1087 = add i64 %storemerge, 20
  store i64 %1087, i64* %3, align 8
  %1088 = inttoptr i64 %1086 to i32*
  %1089 = load i32, i32* %1088, align 4
  %1090 = add i32 %1089, -1
  %1091 = lshr i32 %1090, 31
  %1092 = trunc i32 %1091 to i8
  %1093 = shl i32 %1090, 1
  %1094 = icmp slt i32 %1090, 0
  %1095 = icmp slt i32 %1093, 0
  %1096 = xor i1 %1094, %1095
  %1097 = zext i32 %1093 to i64
  store i64 %1097, i64* %RAX.i1321, align 8
  store i8 %1092, i8* %14, align 1
  %1098 = and i32 %1093, 254
  %1099 = tail call i32 @llvm.ctpop.i32(i32 %1098)
  %1100 = trunc i32 %1099 to i8
  %1101 = and i8 %1100, 1
  %1102 = xor i8 %1101, 1
  store i8 %1102, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1103 = icmp eq i32 %1093, 0
  %1104 = zext i1 %1103 to i8
  store i8 %1104, i8* %30, align 1
  %1105 = lshr i32 %1090, 30
  %1106 = trunc i32 %1105 to i8
  %1107 = and i8 %1106, 1
  store i8 %1107, i8* %33, align 1
  %1108 = zext i1 %1096 to i8
  store i8 %1108, i8* %39, align 1
  %1109 = load i64, i64* %RBP.i, align 8
  %1110 = add i64 %1109, -24
  %1111 = add i64 %storemerge, 28
  store i64 %1111, i64* %3, align 8
  %1112 = inttoptr i64 %1110 to i32*
  %1113 = load i32, i32* %1112, align 4
  %1114 = add i32 %1113, -1
  %ECX.i2943 = bitcast %union.anon* %545 to i32*
  %1115 = sext i32 %1114 to i64
  %1116 = mul nsw i64 %1115, -2
  %1117 = trunc i64 %1116 to i32
  %1118 = and i64 %1116, 4294967294
  store i64 %1118, i64* %RCX.i3122, align 8
  %1119 = mul i64 %1115, -8589934592
  %1120 = ashr exact i64 %1119, 32
  %1121 = icmp ne i64 %1120, %1116
  %1122 = zext i1 %1121 to i8
  store i8 %1122, i8* %14, align 1
  %1123 = and i32 %1117, 254
  %1124 = tail call i32 @llvm.ctpop.i32(i32 %1123)
  %1125 = trunc i32 %1124 to i8
  %1126 = and i8 %1125, 1
  %1127 = xor i8 %1126, 1
  store i8 %1127, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1128 = lshr i32 %1117, 31
  %1129 = trunc i32 %1128 to i8
  store i8 %1129, i8* %33, align 1
  store i8 %1122, i8* %39, align 1
  %1130 = add i64 %storemerge, 37
  store i64 %1130, i64* %3, align 8
  %1131 = load i32, i32* %1112, align 4
  %1132 = add i32 %1131, -1
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %RSI.i2936 = getelementptr inbounds %union.anon, %union.anon* %1133, i64 0, i32 0
  %1134 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %1135 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %1136 = sub i32 %1134, %1135
  %1137 = zext i32 %1136 to i64
  store i64 %1137, i64* %RSI.i2936, align 8
  %ESI.i2931 = bitcast %union.anon* %1133 to i32*
  %1138 = sext i32 %1132 to i64
  %1139 = sext i32 %1136 to i64
  %1140 = mul nsw i64 %1139, %1138
  %1141 = trunc i64 %1140 to i32
  %1142 = and i64 %1140, 4294967295
  store i64 %1142, i64* %RDX.i3051, align 8
  %1143 = shl i64 %1140, 32
  %1144 = ashr exact i64 %1143, 32
  %1145 = icmp ne i64 %1144, %1140
  %1146 = zext i1 %1145 to i8
  store i8 %1146, i8* %14, align 1
  %1147 = and i32 %1141, 255
  %1148 = tail call i32 @llvm.ctpop.i32(i32 %1147)
  %1149 = trunc i32 %1148 to i8
  %1150 = and i8 %1149, 1
  %1151 = xor i8 %1150, 1
  store i8 %1151, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1152 = lshr i32 %1141, 31
  %1153 = trunc i32 %1152 to i8
  store i8 %1153, i8* %33, align 1
  store i8 %1146, i8* %39, align 1
  %1154 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %1154, i64* %RDI.i, align 8
  %1155 = add i64 %1154, 1236
  %1156 = add i64 %storemerge, 71
  store i64 %1156, i64* %3, align 8
  %1157 = inttoptr i64 %1155 to i32*
  %1158 = load i32, i32* %1157, align 4
  %1159 = add i32 %1158, -1
  %1160 = zext i32 %1159 to i64
  store i64 %1160, i64* %RSI.i2936, align 8
  %1161 = icmp eq i32 %1158, 0
  %1162 = zext i1 %1161 to i8
  store i8 %1162, i8* %14, align 1
  %1163 = and i32 %1159, 255
  %1164 = tail call i32 @llvm.ctpop.i32(i32 %1163)
  %1165 = trunc i32 %1164 to i8
  %1166 = and i8 %1165, 1
  %1167 = xor i8 %1166, 1
  store i8 %1167, i8* %21, align 1
  %1168 = xor i32 %1159, %1158
  %1169 = lshr i32 %1168, 4
  %1170 = trunc i32 %1169 to i8
  %1171 = and i8 %1170, 1
  store i8 %1171, i8* %27, align 1
  %1172 = icmp eq i32 %1159, 0
  %1173 = zext i1 %1172 to i8
  store i8 %1173, i8* %30, align 1
  %1174 = lshr i32 %1159, 31
  %1175 = trunc i32 %1174 to i8
  store i8 %1175, i8* %33, align 1
  %1176 = lshr i32 %1158, 31
  %1177 = xor i32 %1174, %1176
  %1178 = add nuw nsw i32 %1177, %1176
  %1179 = icmp eq i32 %1178, 2
  %1180 = zext i1 %1179 to i8
  store i8 %1180, i8* %39, align 1
  %1181 = load i64, i64* %RBP.i, align 8
  %1182 = add i64 %1181, -56
  %1183 = load i32, i32* %547, align 4
  %1184 = add i64 %storemerge, 77
  store i64 %1184, i64* %3, align 8
  %1185 = inttoptr i64 %1182 to i32*
  store i32 %1183, i32* %1185, align 4
  %1186 = load i32, i32* %552, align 4
  %1187 = zext i32 %1186 to i64
  %1188 = load i64, i64* %3, align 8
  store i64 %1187, i64* %RAX.i1321, align 8
  %1189 = sext i32 %1186 to i64
  %1190 = lshr i64 %1189, 32
  store i64 %1190, i64* %546, align 8
  %1191 = load i32, i32* %ESI.i2931, align 4
  %1192 = add i64 %1188, 5
  store i64 %1192, i64* %3, align 8
  %1193 = sext i32 %1191 to i64
  %1194 = shl nuw i64 %1190, 32
  %1195 = or i64 %1194, %1187
  %1196 = sdiv i64 %1195, %1193
  %1197 = shl i64 %1196, 32
  %1198 = ashr exact i64 %1197, 32
  %1199 = icmp eq i64 %1196, %1198
  br i1 %1199, label %1202, label %1200

; <label>:1200:                                   ; preds = %block_.L_47e571
  %1201 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1192, %struct.Memory* %572)
  %.pre221 = load i32, i32* %547, align 4
  %.pre222 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit2913

; <label>:1202:                                   ; preds = %block_.L_47e571
  %1203 = srem i64 %1195, %1193
  %1204 = and i64 %1196, 4294967295
  store i64 %1204, i64* %RAX.i1321, align 8
  %1205 = and i64 %1203, 4294967295
  store i64 %1205, i64* %RDX.i3051, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1206 = trunc i64 %1196 to i32
  br label %routine_idivl__esi.exit2913

routine_idivl__esi.exit2913:                      ; preds = %1202, %1200
  %1207 = phi i64 [ %.pre222, %1200 ], [ %1192, %1202 ]
  %1208 = phi i32 [ %.pre221, %1200 ], [ %1206, %1202 ]
  %1209 = phi %struct.Memory* [ %1201, %1200 ], [ %572, %1202 ]
  %1210 = load i32, i32* %ECX.i2943, align 4
  %1211 = sub i32 %1210, %1208
  %1212 = icmp ult i32 %1210, %1208
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %14, align 1
  %1214 = and i32 %1211, 255
  %1215 = tail call i32 @llvm.ctpop.i32(i32 %1214)
  %1216 = trunc i32 %1215 to i8
  %1217 = and i8 %1216, 1
  %1218 = xor i8 %1217, 1
  store i8 %1218, i8* %21, align 1
  %1219 = xor i32 %1208, %1210
  %1220 = xor i32 %1219, %1211
  %1221 = lshr i32 %1220, 4
  %1222 = trunc i32 %1221 to i8
  %1223 = and i8 %1222, 1
  store i8 %1223, i8* %27, align 1
  %1224 = icmp eq i32 %1211, 0
  %1225 = zext i1 %1224 to i8
  store i8 %1225, i8* %30, align 1
  %1226 = lshr i32 %1211, 31
  %1227 = trunc i32 %1226 to i8
  store i8 %1227, i8* %33, align 1
  %1228 = lshr i32 %1210, 31
  %1229 = lshr i32 %1208, 31
  %1230 = xor i32 %1229, %1228
  %1231 = xor i32 %1226, %1228
  %1232 = add nuw nsw i32 %1231, %1230
  %1233 = icmp eq i32 %1232, 2
  %1234 = zext i1 %1233 to i8
  store i8 %1234, i8* %39, align 1
  %1235 = icmp ne i8 %1227, 0
  %1236 = xor i1 %1235, %1233
  %.v448 = select i1 %1236, i64 8, i64 59
  %1237 = add i64 %1207, %.v448
  %1238 = load i64, i64* %RBP.i, align 8
  %1239 = add i64 %1238, -24
  %1240 = add i64 %1237, 3
  store i64 %1240, i64* %3, align 8
  %1241 = inttoptr i64 %1239 to i32*
  %1242 = load i32, i32* %1241, align 4
  %1243 = add i64 %1237, 6
  store i64 %1243, i64* %3, align 8
  %1244 = add i32 %1242, -1
  %1245 = zext i32 %1244 to i64
  store i64 %1245, i64* %RAX.i1321, align 8
  %1246 = icmp eq i32 %1242, 0
  %1247 = zext i1 %1246 to i8
  store i8 %1247, i8* %14, align 1
  %1248 = and i32 %1244, 255
  %1249 = tail call i32 @llvm.ctpop.i32(i32 %1248)
  %1250 = trunc i32 %1249 to i8
  %1251 = and i8 %1250, 1
  %1252 = xor i8 %1251, 1
  store i8 %1252, i8* %21, align 1
  %1253 = xor i32 %1244, %1242
  %1254 = lshr i32 %1253, 4
  %1255 = trunc i32 %1254 to i8
  %1256 = and i8 %1255, 1
  store i8 %1256, i8* %27, align 1
  %1257 = icmp eq i32 %1244, 0
  %1258 = zext i1 %1257 to i8
  store i8 %1258, i8* %30, align 1
  %1259 = lshr i32 %1244, 31
  %1260 = trunc i32 %1259 to i8
  store i8 %1260, i8* %33, align 1
  %1261 = lshr i32 %1242, 31
  %1262 = xor i32 %1259, %1261
  %1263 = add nuw nsw i32 %1262, %1261
  %1264 = icmp eq i32 %1263, 2
  %1265 = zext i1 %1264 to i8
  store i8 %1265, i8* %39, align 1
  br i1 %1236, label %block_47e5cf, label %block_.L_47e602

block_47e5cf:                                     ; preds = %routine_idivl__esi.exit2913
  %1266 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %1267 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %1268 = sub i32 %1266, %1267
  %1269 = zext i32 %1268 to i64
  store i64 %1269, i64* %RCX.i3122, align 8
  %1270 = sext i32 %1244 to i64
  %1271 = sext i32 %1268 to i64
  %1272 = mul nsw i64 %1271, %1270
  %1273 = trunc i64 %1272 to i32
  %1274 = and i64 %1272, 4294967295
  store i64 %1274, i64* %RAX.i1321, align 8
  %1275 = shl i64 %1272, 32
  %1276 = ashr exact i64 %1275, 32
  %1277 = icmp ne i64 %1276, %1272
  %1278 = zext i1 %1277 to i8
  store i8 %1278, i8* %14, align 1
  %1279 = and i32 %1273, 255
  %1280 = tail call i32 @llvm.ctpop.i32(i32 %1279)
  %1281 = trunc i32 %1280 to i8
  %1282 = and i8 %1281, 1
  %1283 = xor i8 %1282, 1
  store i8 %1283, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1284 = lshr i32 %1273, 31
  %1285 = trunc i32 %1284 to i8
  store i8 %1285, i8* %33, align 1
  store i8 %1278, i8* %39, align 1
  %1286 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %1286, i64* %RDX.i3051, align 8
  %1287 = add i64 %1286, 1236
  %1288 = add i64 %1237, 37
  store i64 %1288, i64* %3, align 8
  %1289 = inttoptr i64 %1287 to i32*
  %1290 = load i32, i32* %1289, align 4
  %1291 = add i32 %1290, -1
  %1292 = zext i32 %1291 to i64
  store i64 %1292, i64* %RCX.i3122, align 8
  %1293 = icmp eq i32 %1290, 0
  %1294 = zext i1 %1293 to i8
  store i8 %1294, i8* %14, align 1
  %1295 = and i32 %1291, 255
  %1296 = tail call i32 @llvm.ctpop.i32(i32 %1295)
  %1297 = trunc i32 %1296 to i8
  %1298 = and i8 %1297, 1
  %1299 = xor i8 %1298, 1
  store i8 %1299, i8* %21, align 1
  %1300 = xor i32 %1291, %1290
  %1301 = lshr i32 %1300, 4
  %1302 = trunc i32 %1301 to i8
  %1303 = and i8 %1302, 1
  store i8 %1303, i8* %27, align 1
  %1304 = icmp eq i32 %1291, 0
  %1305 = zext i1 %1304 to i8
  store i8 %1305, i8* %30, align 1
  %1306 = lshr i32 %1291, 31
  %1307 = trunc i32 %1306 to i8
  store i8 %1307, i8* %33, align 1
  %1308 = lshr i32 %1290, 31
  %1309 = xor i32 %1306, %1308
  %1310 = add nuw nsw i32 %1309, %1308
  %1311 = icmp eq i32 %1310, 2
  %1312 = zext i1 %1311 to i8
  store i8 %1312, i8* %39, align 1
  %sext315 = shl i64 %1272, 32
  %1313 = ashr exact i64 %sext315, 32
  %1314 = lshr i64 %1313, 32
  store i64 %1314, i64* %546, align 8
  %1315 = add i64 %1237, 43
  store i64 %1315, i64* %3, align 8
  %1316 = and i64 %1272, 4294967295
  %1317 = sext i32 %1291 to i64
  %1318 = shl nuw i64 %1314, 32
  %1319 = or i64 %1318, %1316
  %1320 = sdiv i64 %1319, %1317
  %1321 = shl i64 %1320, 32
  %1322 = ashr exact i64 %1321, 32
  %1323 = icmp eq i64 %1320, %1322
  br i1 %1323, label %1326, label %1324

; <label>:1324:                                   ; preds = %block_47e5cf
  %1325 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1315, %struct.Memory* %1209)
  %.pre223 = load i32, i32* %547, align 4
  %.pre224 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2885

; <label>:1326:                                   ; preds = %block_47e5cf
  %1327 = srem i64 %1319, %1317
  %1328 = and i64 %1320, 4294967295
  store i64 %1328, i64* %RAX.i1321, align 8
  %1329 = and i64 %1327, 4294967295
  store i64 %1329, i64* %RDX.i3051, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1330 = trunc i64 %1320 to i32
  br label %routine_idivl__ecx.exit2885

routine_idivl__ecx.exit2885:                      ; preds = %1326, %1324
  %1331 = phi i64 [ %.pre224, %1324 ], [ %1315, %1326 ]
  %1332 = phi i32 [ %.pre223, %1324 ], [ %1330, %1326 ]
  %1333 = phi %struct.Memory* [ %1325, %1324 ], [ %1209, %1326 ]
  %1334 = load i64, i64* %RBP.i, align 8
  %1335 = add i64 %1334, -60
  %1336 = add i64 %1331, 3
  store i64 %1336, i64* %3, align 8
  %1337 = inttoptr i64 %1335 to i32*
  store i32 %1332, i32* %1337, align 4
  %1338 = load i64, i64* %3, align 8
  %1339 = add i64 %1338, 20
  store i64 %1339, i64* %3, align 8
  br label %block_.L_47e611

block_.L_47e602:                                  ; preds = %routine_idivl__esi.exit2913
  %1340 = sext i32 %1244 to i64
  %1341 = mul nsw i64 %1340, -2
  %1342 = trunc i64 %1341 to i32
  %1343 = and i64 %1341, 4294967294
  store i64 %1343, i64* %RAX.i1321, align 8
  %1344 = mul i64 %1340, -8589934592
  %1345 = ashr exact i64 %1344, 32
  %1346 = icmp ne i64 %1345, %1341
  %1347 = zext i1 %1346 to i8
  store i8 %1347, i8* %14, align 1
  %1348 = and i32 %1342, 254
  %1349 = tail call i32 @llvm.ctpop.i32(i32 %1348)
  %1350 = trunc i32 %1349 to i8
  %1351 = and i8 %1350, 1
  %1352 = xor i8 %1351, 1
  store i8 %1352, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1353 = lshr i32 %1342, 31
  %1354 = trunc i32 %1353 to i8
  store i8 %1354, i8* %33, align 1
  store i8 %1347, i8* %39, align 1
  %1355 = add i64 %1238, -60
  %1356 = trunc i64 %1341 to i32
  %1357 = add i64 %1237, 12
  store i64 %1357, i64* %3, align 8
  %1358 = inttoptr i64 %1355 to i32*
  store i32 %1356, i32* %1358, align 4
  %.pre225 = load i64, i64* %3, align 8
  br label %block_.L_47e611

block_.L_47e611:                                  ; preds = %block_.L_47e602, %routine_idivl__ecx.exit2885
  %1359 = phi i64 [ %.pre225, %block_.L_47e602 ], [ %1339, %routine_idivl__ecx.exit2885 ]
  %MEMORY.19 = phi %struct.Memory* [ %1209, %block_.L_47e602 ], [ %1333, %routine_idivl__ecx.exit2885 ]
  %1360 = load i64, i64* %RBP.i, align 8
  %1361 = add i64 %1360, -60
  %1362 = add i64 %1359, 3
  store i64 %1362, i64* %3, align 8
  %1363 = inttoptr i64 %1361 to i32*
  %1364 = load i32, i32* %1363, align 4
  %1365 = zext i32 %1364 to i64
  store i64 %1365, i64* %RAX.i1321, align 8
  %1366 = add i64 %1360, -56
  %1367 = add i64 %1359, 6
  store i64 %1367, i64* %3, align 8
  %1368 = inttoptr i64 %1366 to i32*
  %1369 = load i32, i32* %1368, align 4
  %1370 = zext i32 %1369 to i64
  store i64 %1370, i64* %RCX.i3122, align 8
  %1371 = sub i32 %1369, %1364
  %1372 = icmp ult i32 %1369, %1364
  %1373 = zext i1 %1372 to i8
  store i8 %1373, i8* %14, align 1
  %1374 = and i32 %1371, 255
  %1375 = tail call i32 @llvm.ctpop.i32(i32 %1374)
  %1376 = trunc i32 %1375 to i8
  %1377 = and i8 %1376, 1
  %1378 = xor i8 %1377, 1
  store i8 %1378, i8* %21, align 1
  %1379 = xor i32 %1364, %1369
  %1380 = xor i32 %1379, %1371
  %1381 = lshr i32 %1380, 4
  %1382 = trunc i32 %1381 to i8
  %1383 = and i8 %1382, 1
  store i8 %1383, i8* %27, align 1
  %1384 = icmp eq i32 %1371, 0
  %1385 = zext i1 %1384 to i8
  store i8 %1385, i8* %30, align 1
  %1386 = lshr i32 %1371, 31
  %1387 = trunc i32 %1386 to i8
  store i8 %1387, i8* %33, align 1
  %1388 = lshr i32 %1369, 31
  %1389 = lshr i32 %1364, 31
  %1390 = xor i32 %1389, %1388
  %1391 = xor i32 %1386, %1388
  %1392 = add nuw nsw i32 %1391, %1390
  %1393 = icmp eq i32 %1392, 2
  %1394 = zext i1 %1393 to i8
  store i8 %1394, i8* %39, align 1
  %1395 = icmp ne i8 %1387, 0
  %1396 = xor i1 %1395, %1393
  %.v313 = select i1 %1396, i64 14, i64 31
  %1397 = add i64 %1359, %.v313
  %1398 = add i64 %1360, -24
  %1399 = add i64 %1397, 3
  store i64 %1399, i64* %3, align 8
  %1400 = inttoptr i64 %1398 to i32*
  %1401 = load i32, i32* %1400, align 4
  %1402 = add i64 %1397, 6
  store i64 %1402, i64* %3, align 8
  %1403 = add i32 %1401, -1
  %1404 = zext i32 %1403 to i64
  store i64 %1404, i64* %RAX.i1321, align 8
  %1405 = icmp eq i32 %1401, 0
  %1406 = zext i1 %1405 to i8
  store i8 %1406, i8* %14, align 1
  %1407 = and i32 %1403, 255
  %1408 = tail call i32 @llvm.ctpop.i32(i32 %1407)
  %1409 = trunc i32 %1408 to i8
  %1410 = and i8 %1409, 1
  %1411 = xor i8 %1410, 1
  store i8 %1411, i8* %21, align 1
  %1412 = xor i32 %1403, %1401
  %1413 = lshr i32 %1412, 4
  %1414 = trunc i32 %1413 to i8
  %1415 = and i8 %1414, 1
  store i8 %1415, i8* %27, align 1
  %1416 = icmp eq i32 %1403, 0
  %1417 = zext i1 %1416 to i8
  store i8 %1417, i8* %30, align 1
  %1418 = lshr i32 %1403, 31
  %1419 = trunc i32 %1418 to i8
  store i8 %1419, i8* %33, align 1
  %1420 = lshr i32 %1401, 31
  %1421 = xor i32 %1418, %1420
  %1422 = add nuw nsw i32 %1421, %1420
  %1423 = icmp eq i32 %1422, 2
  %1424 = zext i1 %1423 to i8
  store i8 %1424, i8* %39, align 1
  br i1 %1396, label %block_47e61f, label %block_.L_47e630

block_47e61f:                                     ; preds = %block_.L_47e611
  %1425 = shl i32 %1403, 1
  %1426 = icmp slt i32 %1403, 0
  %1427 = icmp slt i32 %1425, 0
  %1428 = xor i1 %1426, %1427
  %1429 = zext i32 %1425 to i64
  store i64 %1429, i64* %RAX.i1321, align 8
  store i8 %1419, i8* %14, align 1
  %1430 = and i32 %1425, 254
  %1431 = tail call i32 @llvm.ctpop.i32(i32 %1430)
  %1432 = trunc i32 %1431 to i8
  %1433 = and i8 %1432, 1
  %1434 = xor i8 %1433, 1
  store i8 %1434, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1435 = icmp eq i32 %1425, 0
  %1436 = zext i1 %1435 to i8
  store i8 %1436, i8* %30, align 1
  %1437 = lshr i32 %1403, 30
  %1438 = trunc i32 %1437 to i8
  %1439 = and i8 %1438, 1
  store i8 %1439, i8* %33, align 1
  %1440 = zext i1 %1428 to i8
  store i8 %1440, i8* %39, align 1
  %1441 = add i64 %1360, -64
  %1442 = add i64 %1397, 11
  store i64 %1442, i64* %3, align 8
  %1443 = inttoptr i64 %1441 to i32*
  store i32 %1425, i32* %1443, align 4
  %1444 = load i64, i64* %3, align 8
  %1445 = add i64 %1444, 154
  store i64 %1445, i64* %3, align 8
  br label %block_.L_47e6c5

block_.L_47e630:                                  ; preds = %block_.L_47e611
  %1446 = sext i32 %1403 to i64
  %1447 = mul nsw i64 %1446, -2
  %1448 = trunc i64 %1447 to i32
  %1449 = and i64 %1447, 4294967294
  store i64 %1449, i64* %RAX.i1321, align 8
  %1450 = mul i64 %1446, -8589934592
  %1451 = ashr exact i64 %1450, 32
  %1452 = icmp ne i64 %1451, %1447
  %1453 = zext i1 %1452 to i8
  store i8 %1453, i8* %14, align 1
  %1454 = and i32 %1448, 254
  %1455 = tail call i32 @llvm.ctpop.i32(i32 %1454)
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = xor i8 %1457, 1
  store i8 %1458, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1459 = lshr i32 %1448, 31
  %1460 = trunc i32 %1459 to i8
  store i8 %1460, i8* %33, align 1
  store i8 %1453, i8* %39, align 1
  %1461 = add i64 %1397, 12
  store i64 %1461, i64* %3, align 8
  %1462 = load i32, i32* %1400, align 4
  %1463 = add i32 %1462, -1
  %1464 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %1465 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %1466 = sub i32 %1464, %1465
  %1467 = zext i32 %1466 to i64
  store i64 %1467, i64* %RDX.i3051, align 8
  %1468 = sext i32 %1463 to i64
  %1469 = sext i32 %1466 to i64
  %1470 = mul nsw i64 %1469, %1468
  %1471 = trunc i64 %1470 to i32
  %1472 = and i64 %1470, 4294967295
  store i64 %1472, i64* %RCX.i3122, align 8
  %1473 = shl i64 %1470, 32
  %1474 = ashr exact i64 %1473, 32
  %1475 = icmp ne i64 %1474, %1470
  %1476 = zext i1 %1475 to i8
  store i8 %1476, i8* %14, align 1
  %1477 = and i32 %1471, 255
  %1478 = tail call i32 @llvm.ctpop.i32(i32 %1477)
  %1479 = trunc i32 %1478 to i8
  %1480 = and i8 %1479, 1
  %1481 = xor i8 %1480, 1
  store i8 %1481, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1482 = lshr i32 %1471, 31
  %1483 = trunc i32 %1482 to i8
  store i8 %1483, i8* %33, align 1
  store i8 %1476, i8* %39, align 1
  %1484 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %1484, i64* %RSI.i2936, align 8
  %1485 = add i64 %1484, 1236
  %1486 = add i64 %1397, 46
  store i64 %1486, i64* %3, align 8
  %1487 = inttoptr i64 %1485 to i32*
  %1488 = load i32, i32* %1487, align 4
  %1489 = add i32 %1488, -1
  %1490 = zext i32 %1489 to i64
  store i64 %1490, i64* %RDX.i3051, align 8
  %1491 = icmp eq i32 %1488, 0
  %1492 = zext i1 %1491 to i8
  store i8 %1492, i8* %14, align 1
  %1493 = and i32 %1489, 255
  %1494 = tail call i32 @llvm.ctpop.i32(i32 %1493)
  %1495 = trunc i32 %1494 to i8
  %1496 = and i8 %1495, 1
  %1497 = xor i8 %1496, 1
  store i8 %1497, i8* %21, align 1
  %1498 = xor i32 %1489, %1488
  %1499 = lshr i32 %1498, 4
  %1500 = trunc i32 %1499 to i8
  %1501 = and i8 %1500, 1
  store i8 %1501, i8* %27, align 1
  %1502 = icmp eq i32 %1489, 0
  %1503 = zext i1 %1502 to i8
  store i8 %1503, i8* %30, align 1
  %1504 = lshr i32 %1489, 31
  %1505 = trunc i32 %1504 to i8
  store i8 %1505, i8* %33, align 1
  %1506 = lshr i32 %1488, 31
  %1507 = xor i32 %1504, %1506
  %1508 = add nuw nsw i32 %1507, %1506
  %1509 = icmp eq i32 %1508, 2
  %1510 = zext i1 %1509 to i8
  store i8 %1510, i8* %39, align 1
  %1511 = load i64, i64* %RBP.i, align 8
  %1512 = add i64 %1511, -68
  %1513 = load i32, i32* %547, align 4
  %1514 = add i64 %1397, 52
  store i64 %1514, i64* %3, align 8
  %1515 = inttoptr i64 %1512 to i32*
  store i32 %1513, i32* %1515, align 4
  %1516 = load i32, i32* %ECX.i2943, align 4
  %1517 = zext i32 %1516 to i64
  %1518 = load i64, i64* %3, align 8
  store i64 %1517, i64* %RAX.i1321, align 8
  %1519 = load i64, i64* %RBP.i, align 8
  %1520 = add i64 %1519, -72
  %1521 = load i32, i32* %552, align 4
  %1522 = add i64 %1518, 5
  store i64 %1522, i64* %3, align 8
  %1523 = inttoptr i64 %1520 to i32*
  store i32 %1521, i32* %1523, align 4
  %1524 = load i64, i64* %3, align 8
  %1525 = load i32, i32* %547, align 8
  %1526 = sext i32 %1525 to i64
  %1527 = lshr i64 %1526, 32
  store i64 %1527, i64* %546, align 8
  %1528 = load i64, i64* %RBP.i, align 8
  %1529 = add i64 %1528, -72
  %1530 = add i64 %1524, 4
  store i64 %1530, i64* %3, align 8
  %1531 = inttoptr i64 %1529 to i32*
  %1532 = load i32, i32* %1531, align 4
  %1533 = zext i32 %1532 to i64
  store i64 %1533, i64* %RCX.i3122, align 8
  %1534 = add i64 %1524, 6
  store i64 %1534, i64* %3, align 8
  %1535 = zext i32 %1525 to i64
  %1536 = sext i32 %1532 to i64
  %1537 = shl nuw i64 %1527, 32
  %1538 = or i64 %1537, %1535
  %1539 = sdiv i64 %1538, %1536
  %1540 = shl i64 %1539, 32
  %1541 = ashr exact i64 %1540, 32
  %1542 = icmp eq i64 %1539, %1541
  br i1 %1542, label %1545, label %1543

; <label>:1543:                                   ; preds = %block_.L_47e630
  %1544 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1534, %struct.Memory* %MEMORY.19)
  %.pre226 = load i64, i64* %RBP.i, align 8
  %.pre227 = load i64, i64* %3, align 8
  %.pre228 = load i32, i32* %547, align 4
  br label %routine_idivl__ecx.exit2804

; <label>:1545:                                   ; preds = %block_.L_47e630
  %1546 = srem i64 %1538, %1536
  %1547 = and i64 %1539, 4294967295
  store i64 %1547, i64* %RAX.i1321, align 8
  %1548 = and i64 %1546, 4294967295
  store i64 %1548, i64* %RDX.i3051, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1549 = trunc i64 %1539 to i32
  br label %routine_idivl__ecx.exit2804

routine_idivl__ecx.exit2804:                      ; preds = %1545, %1543
  %1550 = phi i32 [ %.pre228, %1543 ], [ %1549, %1545 ]
  %1551 = phi i64 [ %.pre227, %1543 ], [ %1534, %1545 ]
  %1552 = phi i64 [ %.pre226, %1543 ], [ %1528, %1545 ]
  %1553 = phi %struct.Memory* [ %1544, %1543 ], [ %MEMORY.19, %1545 ]
  %1554 = add i64 %1552, -68
  %1555 = add i64 %1551, 3
  store i64 %1555, i64* %3, align 8
  %1556 = inttoptr i64 %1554 to i32*
  %1557 = load i32, i32* %1556, align 4
  %1558 = zext i32 %1557 to i64
  store i64 %1558, i64* %RDI.i, align 8
  %1559 = sub i32 %1557, %1550
  %1560 = icmp ult i32 %1557, %1550
  %1561 = zext i1 %1560 to i8
  store i8 %1561, i8* %14, align 1
  %1562 = and i32 %1559, 255
  %1563 = tail call i32 @llvm.ctpop.i32(i32 %1562)
  %1564 = trunc i32 %1563 to i8
  %1565 = and i8 %1564, 1
  %1566 = xor i8 %1565, 1
  store i8 %1566, i8* %21, align 1
  %1567 = xor i32 %1550, %1557
  %1568 = xor i32 %1567, %1559
  %1569 = lshr i32 %1568, 4
  %1570 = trunc i32 %1569 to i8
  %1571 = and i8 %1570, 1
  store i8 %1571, i8* %27, align 1
  %1572 = icmp eq i32 %1559, 0
  %1573 = zext i1 %1572 to i8
  store i8 %1573, i8* %30, align 1
  %1574 = lshr i32 %1559, 31
  %1575 = trunc i32 %1574 to i8
  store i8 %1575, i8* %33, align 1
  %1576 = lshr i32 %1557, 31
  %1577 = lshr i32 %1550, 31
  %1578 = xor i32 %1577, %1576
  %1579 = xor i32 %1574, %1576
  %1580 = add nuw nsw i32 %1579, %1578
  %1581 = icmp eq i32 %1580, 2
  %1582 = zext i1 %1581 to i8
  store i8 %1582, i8* %39, align 1
  %1583 = icmp ne i8 %1575, 0
  %1584 = xor i1 %1583, %1581
  %.v314 = select i1 %1584, i64 11, i64 62
  %1585 = add i64 %1551, %.v314
  %1586 = add i64 %1552, -24
  %1587 = add i64 %1585, 3
  store i64 %1587, i64* %3, align 8
  %1588 = inttoptr i64 %1586 to i32*
  %1589 = load i32, i32* %1588, align 4
  %1590 = add i64 %1585, 6
  store i64 %1590, i64* %3, align 8
  %1591 = add i32 %1589, -1
  %1592 = zext i32 %1591 to i64
  store i64 %1592, i64* %RAX.i1321, align 8
  %1593 = icmp eq i32 %1589, 0
  %1594 = zext i1 %1593 to i8
  store i8 %1594, i8* %14, align 1
  %1595 = and i32 %1591, 255
  %1596 = tail call i32 @llvm.ctpop.i32(i32 %1595)
  %1597 = trunc i32 %1596 to i8
  %1598 = and i8 %1597, 1
  %1599 = xor i8 %1598, 1
  store i8 %1599, i8* %21, align 1
  %1600 = xor i32 %1591, %1589
  %1601 = lshr i32 %1600, 4
  %1602 = trunc i32 %1601 to i8
  %1603 = and i8 %1602, 1
  store i8 %1603, i8* %27, align 1
  %1604 = icmp eq i32 %1591, 0
  %1605 = zext i1 %1604 to i8
  store i8 %1605, i8* %30, align 1
  %1606 = lshr i32 %1591, 31
  %1607 = trunc i32 %1606 to i8
  store i8 %1607, i8* %33, align 1
  %1608 = lshr i32 %1589, 31
  %1609 = xor i32 %1606, %1608
  %1610 = add nuw nsw i32 %1609, %1608
  %1611 = icmp eq i32 %1610, 2
  %1612 = zext i1 %1611 to i8
  store i8 %1612, i8* %39, align 1
  br i1 %1584, label %block_47e67d, label %block_.L_47e6b0

block_47e67d:                                     ; preds = %routine_idivl__ecx.exit2804
  %1613 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %1614 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %1615 = sub i32 %1613, %1614
  %1616 = zext i32 %1615 to i64
  store i64 %1616, i64* %RCX.i3122, align 8
  %1617 = sext i32 %1591 to i64
  %1618 = sext i32 %1615 to i64
  %1619 = mul nsw i64 %1618, %1617
  %1620 = trunc i64 %1619 to i32
  %1621 = and i64 %1619, 4294967295
  store i64 %1621, i64* %RAX.i1321, align 8
  %1622 = shl i64 %1619, 32
  %1623 = ashr exact i64 %1622, 32
  %1624 = icmp ne i64 %1623, %1619
  %1625 = zext i1 %1624 to i8
  store i8 %1625, i8* %14, align 1
  %1626 = and i32 %1620, 255
  %1627 = tail call i32 @llvm.ctpop.i32(i32 %1626)
  %1628 = trunc i32 %1627 to i8
  %1629 = and i8 %1628, 1
  %1630 = xor i8 %1629, 1
  store i8 %1630, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1631 = lshr i32 %1620, 31
  %1632 = trunc i32 %1631 to i8
  store i8 %1632, i8* %33, align 1
  store i8 %1625, i8* %39, align 1
  %1633 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %1633, i64* %RDX.i3051, align 8
  %1634 = add i64 %1633, 1236
  %1635 = add i64 %1585, 37
  store i64 %1635, i64* %3, align 8
  %1636 = inttoptr i64 %1634 to i32*
  %1637 = load i32, i32* %1636, align 4
  %1638 = add i32 %1637, -1
  %1639 = zext i32 %1638 to i64
  store i64 %1639, i64* %RCX.i3122, align 8
  %1640 = icmp eq i32 %1637, 0
  %1641 = zext i1 %1640 to i8
  store i8 %1641, i8* %14, align 1
  %1642 = and i32 %1638, 255
  %1643 = tail call i32 @llvm.ctpop.i32(i32 %1642)
  %1644 = trunc i32 %1643 to i8
  %1645 = and i8 %1644, 1
  %1646 = xor i8 %1645, 1
  store i8 %1646, i8* %21, align 1
  %1647 = xor i32 %1638, %1637
  %1648 = lshr i32 %1647, 4
  %1649 = trunc i32 %1648 to i8
  %1650 = and i8 %1649, 1
  store i8 %1650, i8* %27, align 1
  %1651 = icmp eq i32 %1638, 0
  %1652 = zext i1 %1651 to i8
  store i8 %1652, i8* %30, align 1
  %1653 = lshr i32 %1638, 31
  %1654 = trunc i32 %1653 to i8
  store i8 %1654, i8* %33, align 1
  %1655 = lshr i32 %1637, 31
  %1656 = xor i32 %1653, %1655
  %1657 = add nuw nsw i32 %1656, %1655
  %1658 = icmp eq i32 %1657, 2
  %1659 = zext i1 %1658 to i8
  store i8 %1659, i8* %39, align 1
  %sext = shl i64 %1619, 32
  %1660 = ashr exact i64 %sext, 32
  %1661 = lshr i64 %1660, 32
  store i64 %1661, i64* %546, align 8
  %1662 = add i64 %1585, 43
  store i64 %1662, i64* %3, align 8
  %1663 = and i64 %1619, 4294967295
  %1664 = sext i32 %1638 to i64
  %1665 = shl nuw i64 %1661, 32
  %1666 = or i64 %1665, %1663
  %1667 = sdiv i64 %1666, %1664
  %1668 = shl i64 %1667, 32
  %1669 = ashr exact i64 %1668, 32
  %1670 = icmp eq i64 %1667, %1669
  br i1 %1670, label %1673, label %1671

; <label>:1671:                                   ; preds = %block_47e67d
  %1672 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1662, %struct.Memory* %1553)
  %.pre229 = load i32, i32* %547, align 4
  %.pre230 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2772

; <label>:1673:                                   ; preds = %block_47e67d
  %1674 = srem i64 %1666, %1664
  %1675 = and i64 %1667, 4294967295
  store i64 %1675, i64* %RAX.i1321, align 8
  %1676 = and i64 %1674, 4294967295
  store i64 %1676, i64* %RDX.i3051, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1677 = trunc i64 %1667 to i32
  br label %routine_idivl__ecx.exit2772

routine_idivl__ecx.exit2772:                      ; preds = %1673, %1671
  %1678 = phi i64 [ %.pre230, %1671 ], [ %1662, %1673 ]
  %1679 = phi i32 [ %.pre229, %1671 ], [ %1677, %1673 ]
  %1680 = phi %struct.Memory* [ %1672, %1671 ], [ %1553, %1673 ]
  %1681 = load i64, i64* %RBP.i, align 8
  %1682 = add i64 %1681, -76
  %1683 = add i64 %1678, 3
  store i64 %1683, i64* %3, align 8
  %1684 = inttoptr i64 %1682 to i32*
  store i32 %1679, i32* %1684, align 4
  %1685 = load i64, i64* %3, align 8
  %1686 = add i64 %1685, 20
  store i64 %1686, i64* %3, align 8
  br label %block_.L_47e6bf

block_.L_47e6b0:                                  ; preds = %routine_idivl__ecx.exit2804
  %1687 = sext i32 %1591 to i64
  %1688 = mul nsw i64 %1687, -2
  %1689 = trunc i64 %1688 to i32
  %1690 = and i64 %1688, 4294967294
  store i64 %1690, i64* %RAX.i1321, align 8
  %1691 = mul i64 %1687, -8589934592
  %1692 = ashr exact i64 %1691, 32
  %1693 = icmp ne i64 %1692, %1688
  %1694 = zext i1 %1693 to i8
  store i8 %1694, i8* %14, align 1
  %1695 = and i32 %1689, 254
  %1696 = tail call i32 @llvm.ctpop.i32(i32 %1695)
  %1697 = trunc i32 %1696 to i8
  %1698 = and i8 %1697, 1
  %1699 = xor i8 %1698, 1
  store i8 %1699, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1700 = lshr i32 %1689, 31
  %1701 = trunc i32 %1700 to i8
  store i8 %1701, i8* %33, align 1
  store i8 %1694, i8* %39, align 1
  %1702 = add i64 %1552, -76
  %1703 = trunc i64 %1688 to i32
  %1704 = add i64 %1585, 12
  store i64 %1704, i64* %3, align 8
  %1705 = inttoptr i64 %1702 to i32*
  store i32 %1703, i32* %1705, align 4
  %.pre231 = load i64, i64* %3, align 8
  br label %block_.L_47e6bf

block_.L_47e6bf:                                  ; preds = %block_.L_47e6b0, %routine_idivl__ecx.exit2772
  %1706 = phi i64 [ %.pre231, %block_.L_47e6b0 ], [ %1686, %routine_idivl__ecx.exit2772 ]
  %MEMORY.20 = phi %struct.Memory* [ %1553, %block_.L_47e6b0 ], [ %1680, %routine_idivl__ecx.exit2772 ]
  %1707 = load i64, i64* %RBP.i, align 8
  %1708 = add i64 %1707, -76
  %1709 = add i64 %1706, 3
  store i64 %1709, i64* %3, align 8
  %1710 = inttoptr i64 %1708 to i32*
  %1711 = load i32, i32* %1710, align 4
  %1712 = zext i32 %1711 to i64
  store i64 %1712, i64* %RAX.i1321, align 8
  %1713 = add i64 %1707, -64
  %1714 = add i64 %1706, 6
  store i64 %1714, i64* %3, align 8
  %1715 = inttoptr i64 %1713 to i32*
  store i32 %1711, i32* %1715, align 4
  %.pre232 = load i64, i64* %3, align 8
  br label %block_.L_47e6c5

block_.L_47e6c5:                                  ; preds = %block_.L_47e6bf, %block_47e61f
  %1716 = phi i64 [ %.pre232, %block_.L_47e6bf ], [ %1445, %block_47e61f ]
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.20, %block_.L_47e6bf ], [ %MEMORY.19, %block_47e61f ]
  %1717 = load i64, i64* %RBP.i, align 8
  %1718 = add i64 %1717, -64
  %1719 = add i64 %1716, 3
  store i64 %1719, i64* %3, align 8
  %1720 = inttoptr i64 %1718 to i32*
  %1721 = load i32, i32* %1720, align 4
  %1722 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %1723 = add i32 %1722, %1721
  %1724 = zext i32 %1723 to i64
  %1725 = lshr i32 %1723, 31
  store i32 %1723, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i64 %1724, i64* %RAX.i1321, align 8
  %1726 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %1727 = sub i32 %1723, %1726
  %1728 = icmp ult i32 %1723, %1726
  %1729 = zext i1 %1728 to i8
  store i8 %1729, i8* %14, align 1
  %1730 = and i32 %1727, 255
  %1731 = tail call i32 @llvm.ctpop.i32(i32 %1730)
  %1732 = trunc i32 %1731 to i8
  %1733 = and i8 %1732, 1
  %1734 = xor i8 %1733, 1
  store i8 %1734, i8* %21, align 1
  %1735 = xor i32 %1726, %1723
  %1736 = xor i32 %1735, %1727
  %1737 = lshr i32 %1736, 4
  %1738 = trunc i32 %1737 to i8
  %1739 = and i8 %1738, 1
  store i8 %1739, i8* %27, align 1
  %1740 = icmp eq i32 %1727, 0
  %1741 = zext i1 %1740 to i8
  store i8 %1741, i8* %30, align 1
  %1742 = lshr i32 %1727, 31
  %1743 = trunc i32 %1742 to i8
  store i8 %1743, i8* %33, align 1
  %1744 = lshr i32 %1726, 31
  %1745 = xor i32 %1744, %1725
  %1746 = xor i32 %1742, %1725
  %1747 = add nuw nsw i32 %1746, %1745
  %1748 = icmp eq i32 %1747, 2
  %1749 = zext i1 %1748 to i8
  store i8 %1749, i8* %39, align 1
  %1750 = icmp ne i8 %1743, 0
  %1751 = xor i1 %1750, %1748
  %.v449 = select i1 %1751, i64 37, i64 52
  %1752 = add i64 %1716, %.v449
  %1753 = add i64 %1752, 7
  store i64 %1753, i64* %3, align 8
  br i1 %1751, label %block_47e6ea, label %block_.L_47e6f9

block_47e6ea:                                     ; preds = %block_.L_47e6c5
  store i64 %1724, i64* %RAX.i1321, align 8
  %1754 = add i64 %1717, -80
  %1755 = add i64 %1752, 10
  store i64 %1755, i64* %3, align 8
  %1756 = inttoptr i64 %1754 to i32*
  store i32 %1723, i32* %1756, align 4
  %1757 = load i64, i64* %3, align 8
  %1758 = add i64 %1757, 15
  store i64 %1758, i64* %3, align 8
  br label %block_.L_47e703

block_.L_47e6f9:                                  ; preds = %block_.L_47e6c5
  %1759 = zext i32 %1726 to i64
  store i64 %1759, i64* %RAX.i1321, align 8
  %1760 = add i64 %1717, -80
  %1761 = add i64 %1752, 10
  store i64 %1761, i64* %3, align 8
  %1762 = inttoptr i64 %1760 to i32*
  store i32 %1726, i32* %1762, align 4
  %.pre233 = load i64, i64* %3, align 8
  br label %block_.L_47e703

block_.L_47e703:                                  ; preds = %block_.L_47e6f9, %block_47e6ea
  %1763 = phi i64 [ %.pre233, %block_.L_47e6f9 ], [ %1758, %block_47e6ea ]
  %1764 = load i64, i64* %RBP.i, align 8
  %1765 = add i64 %1764, -80
  %1766 = add i64 %1763, 3
  store i64 %1766, i64* %3, align 8
  %1767 = inttoptr i64 %1765 to i32*
  %1768 = load i32, i32* %1767, align 4
  store i32 %1768, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %1769 = load i32, i32* bitcast (%G_0x710364_type* @G_0x710364 to i32*), align 8
  %1770 = zext i32 %1769 to i64
  store i64 %1770, i64* %RAX.i1321, align 8
  %1771 = sub i32 %1769, %1768
  %1772 = icmp ult i32 %1769, %1768
  %1773 = zext i1 %1772 to i8
  store i8 %1773, i8* %14, align 1
  %1774 = and i32 %1771, 255
  %1775 = tail call i32 @llvm.ctpop.i32(i32 %1774)
  %1776 = trunc i32 %1775 to i8
  %1777 = and i8 %1776, 1
  %1778 = xor i8 %1777, 1
  store i8 %1778, i8* %21, align 1
  %1779 = xor i32 %1768, %1769
  %1780 = xor i32 %1779, %1771
  %1781 = lshr i32 %1780, 4
  %1782 = trunc i32 %1781 to i8
  %1783 = and i8 %1782, 1
  store i8 %1783, i8* %27, align 1
  %1784 = icmp eq i32 %1771, 0
  %1785 = zext i1 %1784 to i8
  store i8 %1785, i8* %30, align 1
  %1786 = lshr i32 %1771, 31
  %1787 = trunc i32 %1786 to i8
  store i8 %1787, i8* %33, align 1
  %1788 = lshr i32 %1769, 31
  %1789 = lshr i32 %1768, 31
  %1790 = xor i32 %1789, %1788
  %1791 = xor i32 %1786, %1788
  %1792 = add nuw nsw i32 %1791, %1790
  %1793 = icmp eq i32 %1792, 2
  %1794 = zext i1 %1793 to i8
  store i8 %1794, i8* %39, align 1
  %1795 = icmp ne i8 %1787, 0
  %1796 = xor i1 %1795, %1793
  %.v450 = select i1 %1796, i64 30, i64 45
  %1797 = add i64 %1763, %.v450
  %1798 = add i64 %1797, 7
  store i64 %1798, i64* %3, align 8
  br i1 %1796, label %block_47e721, label %block_.L_47e730

block_47e721:                                     ; preds = %block_.L_47e703
  %1799 = zext i32 %1768 to i64
  store i64 %1799, i64* %RAX.i1321, align 8
  %1800 = add i64 %1764, -84
  %1801 = add i64 %1797, 10
  store i64 %1801, i64* %3, align 8
  %1802 = inttoptr i64 %1800 to i32*
  store i32 %1768, i32* %1802, align 4
  %1803 = load i64, i64* %3, align 8
  %1804 = add i64 %1803, 15
  store i64 %1804, i64* %3, align 8
  br label %block_.L_47e73a

block_.L_47e730:                                  ; preds = %block_.L_47e703
  store i64 %1770, i64* %RAX.i1321, align 8
  %1805 = add i64 %1764, -84
  %1806 = add i64 %1797, 10
  store i64 %1806, i64* %3, align 8
  %1807 = inttoptr i64 %1805 to i32*
  store i32 %1769, i32* %1807, align 4
  %.pre234 = load i64, i64* %3, align 8
  br label %block_.L_47e73a

block_.L_47e73a:                                  ; preds = %block_.L_47e730, %block_47e721
  %1808 = phi i64 [ %.pre234, %block_.L_47e730 ], [ %1804, %block_47e721 ]
  %1809 = load i64, i64* %RBP.i, align 8
  %1810 = add i64 %1809, -84
  %1811 = add i64 %1808, 3
  store i64 %1811, i64* %3, align 8
  %1812 = inttoptr i64 %1810 to i32*
  %1813 = load i32, i32* %1812, align 4
  %1814 = zext i32 %1813 to i64
  store i64 %1814, i64* %RAX.i1321, align 8
  %1815 = add i64 %1808, 10
  store i64 %1815, i64* %3, align 8
  store i32 %1813, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47e744

block_.L_47e744:                                  ; preds = %block_.L_47e73a, %block_.L_47e356
  %1816 = phi i64 [ %1809, %block_.L_47e73a ], [ %514, %block_.L_47e356 ]
  %1817 = phi i32 [ %1813, %block_.L_47e73a ], [ %518, %block_.L_47e356 ]
  %1818 = phi i64 [ %1815, %block_.L_47e73a ], [ %520, %block_.L_47e356 ]
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.21, %block_.L_47e73a ], [ %MEMORY.5, %block_.L_47e356 ]
  %1819 = zext i32 %1817 to i64
  store i64 %1819, i64* %RAX.i1321, align 8
  %1820 = add i64 %1816, -4
  %1821 = add i64 %1818, 10
  store i64 %1821, i64* %3, align 8
  %1822 = inttoptr i64 %1820 to i32*
  store i32 %1817, i32* %1822, align 4
  %1823 = load i64, i64* %3, align 8
  %1824 = add i64 %1823, 7983
  store i64 %1824, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47e753:                                  ; preds = %block_.L_47e1de
  store i64 %47, i64* %RAX.i1321, align 8
  %1825 = add i64 %168, 12
  store i64 %1825, i64* %3, align 8
  %1826 = load i32, i32* %114, align 4
  store i8 0, i8* %14, align 1
  %1827 = and i32 %1826, 255
  %1828 = tail call i32 @llvm.ctpop.i32(i32 %1827)
  %1829 = trunc i32 %1828 to i8
  %1830 = and i8 %1829, 1
  %1831 = xor i8 %1830, 1
  store i8 %1831, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1832 = icmp eq i32 %1826, 0
  %1833 = zext i1 %1832 to i8
  store i8 %1833, i8* %30, align 1
  %1834 = lshr i32 %1826, 31
  %1835 = trunc i32 %1834 to i8
  store i8 %1835, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v424 = select i1 %1832, i64 18, i64 203
  %1836 = add i64 %168, %.v424
  store i64 %1836, i64* %3, align 8
  br i1 %1832, label %block_47e765, label %block_.L_47e81e

block_47e765:                                     ; preds = %block_.L_47e753
  store i64 %47, i64* %RAX.i1321, align 8
  %1837 = add i64 %47, 72576
  %1838 = add i64 %1836, 15
  store i64 %1838, i64* %3, align 8
  %1839 = inttoptr i64 %1837 to i32*
  %1840 = load i32, i32* %1839, align 4
  store i8 0, i8* %14, align 1
  %1841 = and i32 %1840, 255
  %1842 = tail call i32 @llvm.ctpop.i32(i32 %1841)
  %1843 = trunc i32 %1842 to i8
  %1844 = and i8 %1843, 1
  %1845 = xor i8 %1844, 1
  store i8 %1845, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1846 = icmp eq i32 %1840, 0
  %1847 = zext i1 %1846 to i8
  store i8 %1847, i8* %30, align 1
  %1848 = lshr i32 %1840, 31
  %1849 = trunc i32 %1848 to i8
  store i8 %1849, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v437 = select i1 %1846, i64 21, i64 185
  %1850 = add i64 %1836, %.v437
  store i64 %1850, i64* %3, align 8
  br i1 %1846, label %block_47e77a, label %block_.L_47e81e

block_47e77a:                                     ; preds = %block_47e765
  %1851 = load i32, i32* bitcast (%G_0x6cd474_type* @G_0x6cd474 to i32*), align 8
  %1852 = zext i32 %1851 to i64
  store i64 %1852, i64* %RAX.i1321, align 8
  store i32 %1851, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %RCX.i2679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 %47, i64* %RCX.i2679, align 8
  %1853 = add i64 %47, 72600
  %1854 = add i64 %1850, 29
  store i64 %1854, i64* %3, align 8
  %1855 = inttoptr i64 %1853 to i32*
  %1856 = load i32, i32* %1855, align 4
  store i8 0, i8* %14, align 1
  %1857 = and i32 %1856, 255
  %1858 = tail call i32 @llvm.ctpop.i32(i32 %1857)
  %1859 = trunc i32 %1858 to i8
  %1860 = and i8 %1859, 1
  %1861 = xor i8 %1860, 1
  store i8 %1861, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1862 = icmp eq i32 %1856, 0
  %1863 = zext i1 %1862 to i8
  store i8 %1863, i8* %30, align 1
  %1864 = lshr i32 %1856, 31
  %1865 = trunc i32 %1864 to i8
  store i8 %1865, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v438 = select i1 %1862, i64 35, i64 149
  %1866 = add i64 %1850, %.v438
  store i64 %1866, i64* %3, align 8
  br i1 %1862, label %block_47e79d, label %block_.L_47e80f

block_47e79d:                                     ; preds = %block_47e77a
  %1867 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %1867, i64* %RAX.i1321, align 8
  %1868 = add i64 %1867, 1148
  %1869 = add i64 %1866, 15
  store i64 %1869, i64* %3, align 8
  %1870 = inttoptr i64 %1868 to i32*
  %1871 = load i32, i32* %1870, align 4
  store i8 0, i8* %14, align 1
  %1872 = and i32 %1871, 255
  %1873 = tail call i32 @llvm.ctpop.i32(i32 %1872)
  %1874 = trunc i32 %1873 to i8
  %1875 = and i8 %1874, 1
  %1876 = xor i8 %1875, 1
  store i8 %1876, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1877 = icmp eq i32 %1871, 0
  %1878 = zext i1 %1877 to i8
  store i8 %1878, i8* %30, align 1
  %1879 = lshr i32 %1871, 31
  %1880 = trunc i32 %1879 to i8
  store i8 %1880, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v439 = select i1 %1877, i64 95, i64 21
  %1881 = add i64 %1866, %.v439
  %1882 = add i64 %1881, 7
  store i64 %1882, i64* %3, align 8
  store i64 %1852, i64* %RAX.i1321, align 8
  br i1 %1877, label %block_.L_47e7fc, label %block_47e7b2

block_47e7b2:                                     ; preds = %block_47e79d
  store i64 %47, i64* %RCX.i2679, align 8
  %1883 = add i64 %47, 72572
  %1884 = add i64 %1881, 21
  store i64 %1884, i64* %3, align 8
  %1885 = inttoptr i64 %1883 to i32*
  %1886 = load i32, i32* %1885, align 4
  %1887 = add i32 %1886, %1851
  %1888 = icmp ult i32 %1887, %1851
  %1889 = icmp ult i32 %1887, %1886
  %1890 = or i1 %1888, %1889
  %1891 = zext i1 %1890 to i8
  store i8 %1891, i8* %14, align 1
  %1892 = and i32 %1887, 255
  %1893 = tail call i32 @llvm.ctpop.i32(i32 %1892)
  %1894 = trunc i32 %1893 to i8
  %1895 = and i8 %1894, 1
  %1896 = xor i8 %1895, 1
  store i8 %1896, i8* %21, align 1
  %1897 = xor i32 %1886, %1851
  %1898 = xor i32 %1897, %1887
  %1899 = lshr i32 %1898, 4
  %1900 = trunc i32 %1899 to i8
  %1901 = and i8 %1900, 1
  store i8 %1901, i8* %27, align 1
  %1902 = icmp eq i32 %1887, 0
  %1903 = zext i1 %1902 to i8
  store i8 %1903, i8* %30, align 1
  %1904 = lshr i32 %1887, 31
  %1905 = trunc i32 %1904 to i8
  store i8 %1905, i8* %33, align 1
  %1906 = lshr i32 %1851, 31
  %1907 = lshr i32 %1886, 31
  %1908 = xor i32 %1904, %1906
  %1909 = xor i32 %1904, %1907
  %1910 = add nuw nsw i32 %1908, %1909
  %1911 = icmp eq i32 %1910, 2
  %1912 = zext i1 %1911 to i8
  store i8 %1912, i8* %39, align 1
  %1913 = add i64 %1881, 27
  store i64 %1913, i64* %3, align 8
  store i32 %1887, i32* %1885, align 4
  %1914 = load i64, i64* %3, align 8
  %1915 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  store i32 %1915, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %1916 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %1917 = zext i32 %1916 to i64
  store i32 %1916, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  store i64 %1917, i64* %RAX.i1321, align 8
  store i32 %1916, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  %1918 = add i64 %1914, 61
  store i64 %1918, i64* %3, align 8
  %.pre235.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_47e80a

block_.L_47e7fc:                                  ; preds = %block_47e79d
  %1919 = add i64 %1881, 14
  store i64 %1919, i64* %3, align 8
  store i32 %1851, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  br label %block_.L_47e80a

block_.L_47e80a:                                  ; preds = %block_.L_47e7fc, %block_47e7b2
  %.pre235 = phi i64 [ %82, %block_.L_47e7fc ], [ %.pre235.pre, %block_47e7b2 ]
  %1920 = phi i32 [ %1851, %block_.L_47e7fc ], [ %1916, %block_47e7b2 ]
  %1921 = phi i64 [ %1919, %block_.L_47e7fc ], [ %1918, %block_47e7b2 ]
  %1922 = add i64 %1921, 5
  store i64 %1922, i64* %3, align 8
  br label %block_.L_47e80f

block_.L_47e80f:                                  ; preds = %block_47e77a, %block_.L_47e80a
  %1923 = phi i64 [ %.pre235, %block_.L_47e80a ], [ %82, %block_47e77a ]
  %1924 = phi i32 [ %1920, %block_.L_47e80a ], [ %1851, %block_47e77a ]
  %1925 = phi i64 [ %1922, %block_.L_47e80a ], [ %1866, %block_47e77a ]
  %1926 = zext i32 %1924 to i64
  store i64 %1926, i64* %RAX.i1321, align 8
  %1927 = add i64 %1923, -4
  %1928 = add i64 %1925, 10
  store i64 %1928, i64* %3, align 8
  %1929 = inttoptr i64 %1927 to i32*
  store i32 %1924, i32* %1929, align 4
  %1930 = load i64, i64* %3, align 8
  %1931 = add i64 %1930, 7780
  store i64 %1931, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47e81e:                                  ; preds = %block_47e765, %block_.L_47e753
  %1932 = phi i64 [ %1850, %block_47e765 ], [ %1836, %block_.L_47e753 ]
  %1933 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %1933, i64* %RAX.i1321, align 8
  %1934 = add i64 %1933, 2880
  %1935 = add i64 %1932, 15
  store i64 %1935, i64* %3, align 8
  %1936 = inttoptr i64 %1934 to i32*
  %1937 = load i32, i32* %1936, align 4
  %1938 = add i32 %1937, -2
  %1939 = icmp ult i32 %1937, 2
  %1940 = zext i1 %1939 to i8
  store i8 %1940, i8* %14, align 1
  %1941 = and i32 %1938, 255
  %1942 = tail call i32 @llvm.ctpop.i32(i32 %1941)
  %1943 = trunc i32 %1942 to i8
  %1944 = and i8 %1943, 1
  %1945 = xor i8 %1944, 1
  store i8 %1945, i8* %21, align 1
  %1946 = xor i32 %1938, %1937
  %1947 = lshr i32 %1946, 4
  %1948 = trunc i32 %1947 to i8
  %1949 = and i8 %1948, 1
  store i8 %1949, i8* %27, align 1
  %1950 = icmp eq i32 %1938, 0
  %1951 = zext i1 %1950 to i8
  store i8 %1951, i8* %30, align 1
  %1952 = lshr i32 %1938, 31
  %1953 = trunc i32 %1952 to i8
  store i8 %1953, i8* %33, align 1
  %1954 = lshr i32 %1937, 31
  %1955 = xor i32 %1952, %1954
  %1956 = add nuw nsw i32 %1955, %1954
  %1957 = icmp eq i32 %1956, 2
  %1958 = zext i1 %1957 to i8
  store i8 %1958, i8* %39, align 1
  %.v425 = select i1 %1950, i64 42, i64 21
  %1959 = add i64 %1932, %.v425
  store i64 %1959, i64* %3, align 8
  br i1 %1950, label %block_.L_47e848, label %block_47e833

block_47e833:                                     ; preds = %block_.L_47e81e
  store i64 %1933, i64* %RAX.i1321, align 8
  %1960 = add i64 %1933, 2884
  %1961 = add i64 %1959, 15
  store i64 %1961, i64* %3, align 8
  %1962 = inttoptr i64 %1960 to i32*
  %1963 = load i32, i32* %1962, align 4
  store i8 0, i8* %14, align 1
  %1964 = and i32 %1963, 255
  %1965 = tail call i32 @llvm.ctpop.i32(i32 %1964)
  %1966 = trunc i32 %1965 to i8
  %1967 = and i8 %1966, 1
  %1968 = xor i8 %1967, 1
  store i8 %1968, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1969 = icmp eq i32 %1963, 0
  %1970 = zext i1 %1969 to i8
  store i8 %1970, i8* %30, align 1
  %1971 = lshr i32 %1963, 31
  %1972 = trunc i32 %1971 to i8
  store i8 %1972, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v426 = select i1 %1969, i64 155, i64 21
  %1973 = add i64 %1959, %.v426
  store i64 %1973, i64* %3, align 8
  br i1 %1969, label %block_.L_47e8ce, label %block_.L_47e848

block_.L_47e848:                                  ; preds = %block_47e833, %block_.L_47e81e
  %1974 = phi i64 [ %1973, %block_47e833 ], [ %1959, %block_.L_47e81e ]
  store i64 %47, i64* %RAX.i1321, align 8
  %1975 = add i64 %47, 72600
  %1976 = add i64 %1974, 15
  store i64 %1976, i64* %3, align 8
  %1977 = inttoptr i64 %1975 to i32*
  %1978 = load i32, i32* %1977, align 4
  store i8 0, i8* %14, align 1
  %1979 = and i32 %1978, 255
  %1980 = tail call i32 @llvm.ctpop.i32(i32 %1979)
  %1981 = trunc i32 %1980 to i8
  %1982 = and i8 %1981, 1
  %1983 = xor i8 %1982, 1
  store i8 %1983, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1984 = icmp eq i32 %1978, 0
  %1985 = zext i1 %1984 to i8
  store i8 %1985, i8* %30, align 1
  %1986 = lshr i32 %1978, 31
  %1987 = trunc i32 %1986 to i8
  store i8 %1987, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v427 = select i1 %1984, i64 21, i64 134
  %1988 = add i64 %1974, %.v427
  store i64 %1988, i64* %3, align 8
  br i1 %1984, label %block_47e85d, label %block_.L_47e8ce

block_47e85d:                                     ; preds = %block_.L_47e848
  store i64 %47, i64* %RAX.i1321, align 8
  %1989 = add i64 %47, 72604
  %1990 = add i64 %1988, 15
  store i64 %1990, i64* %3, align 8
  %1991 = inttoptr i64 %1989 to i32*
  %1992 = load i32, i32* %1991, align 4
  %1993 = add i32 %1992, -1
  %1994 = icmp eq i32 %1992, 0
  %1995 = zext i1 %1994 to i8
  store i8 %1995, i8* %14, align 1
  %1996 = and i32 %1993, 255
  %1997 = tail call i32 @llvm.ctpop.i32(i32 %1996)
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  store i8 %2000, i8* %21, align 1
  %2001 = xor i32 %1993, %1992
  %2002 = lshr i32 %2001, 4
  %2003 = trunc i32 %2002 to i8
  %2004 = and i8 %2003, 1
  store i8 %2004, i8* %27, align 1
  %2005 = icmp eq i32 %1993, 0
  %2006 = zext i1 %2005 to i8
  store i8 %2006, i8* %30, align 1
  %2007 = lshr i32 %1993, 31
  %2008 = trunc i32 %2007 to i8
  store i8 %2008, i8* %33, align 1
  %2009 = lshr i32 %1992, 31
  %2010 = xor i32 %2007, %2009
  %2011 = add nuw nsw i32 %2010, %2009
  %2012 = icmp eq i32 %2011, 2
  %2013 = zext i1 %2012 to i8
  store i8 %2013, i8* %39, align 1
  %.v436 = select i1 %2005, i64 21, i64 67
  %2014 = add i64 %1988, %.v436
  %2015 = add i64 %2014, 7
  store i64 %2015, i64* %3, align 8
  br i1 %2005, label %block_47e872, label %block_.L_47e8a0

block_47e872:                                     ; preds = %block_47e85d
  %2016 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %2017 = zext i32 %2016 to i64
  store i64 %2017, i64* %RAX.i1321, align 8
  %RCX.i2613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 %47, i64* %RCX.i2613, align 8
  %2018 = add i64 %47, 72572
  %2019 = add i64 %2014, 21
  store i64 %2019, i64* %3, align 8
  %2020 = inttoptr i64 %2018 to i32*
  %2021 = load i32, i32* %2020, align 4
  %2022 = add i32 %2021, %2016
  %2023 = icmp ult i32 %2022, %2016
  %2024 = icmp ult i32 %2022, %2021
  %2025 = or i1 %2023, %2024
  %2026 = zext i1 %2025 to i8
  store i8 %2026, i8* %14, align 1
  %2027 = and i32 %2022, 255
  %2028 = tail call i32 @llvm.ctpop.i32(i32 %2027)
  %2029 = trunc i32 %2028 to i8
  %2030 = and i8 %2029, 1
  %2031 = xor i8 %2030, 1
  store i8 %2031, i8* %21, align 1
  %2032 = xor i32 %2021, %2016
  %2033 = xor i32 %2032, %2022
  %2034 = lshr i32 %2033, 4
  %2035 = trunc i32 %2034 to i8
  %2036 = and i8 %2035, 1
  store i8 %2036, i8* %27, align 1
  %2037 = icmp eq i32 %2022, 0
  %2038 = zext i1 %2037 to i8
  store i8 %2038, i8* %30, align 1
  %2039 = lshr i32 %2022, 31
  %2040 = trunc i32 %2039 to i8
  store i8 %2040, i8* %33, align 1
  %2041 = lshr i32 %2016, 31
  %2042 = lshr i32 %2021, 31
  %2043 = xor i32 %2039, %2041
  %2044 = xor i32 %2039, %2042
  %2045 = add nuw nsw i32 %2043, %2044
  %2046 = icmp eq i32 %2045, 2
  %2047 = zext i1 %2046 to i8
  store i8 %2047, i8* %39, align 1
  %2048 = add i64 %2014, 27
  store i64 %2048, i64* %3, align 8
  store i32 %2022, i32* %2020, align 4
  %2049 = load i64, i64* %3, align 8
  %2050 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %2051 = zext i32 %2050 to i64
  store i64 %2051, i64* %RAX.i1321, align 8
  store i32 %2050, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  %2052 = add i64 %2049, 60
  store i64 %2052, i64* %3, align 8
  br label %block_.L_47e8c9

block_.L_47e8a0:                                  ; preds = %block_47e85d
  %2053 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %2054 = zext i32 %2053 to i64
  store i64 %2054, i64* %RAX.i1321, align 8
  %RCX.i2598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 %47, i64* %RCX.i2598, align 8
  %2055 = add i64 %47, 72572
  %2056 = add i64 %2014, 21
  store i64 %2056, i64* %3, align 8
  %2057 = inttoptr i64 %2055 to i32*
  %2058 = load i32, i32* %2057, align 4
  %2059 = add i32 %2058, %2053
  %2060 = icmp ult i32 %2059, %2053
  %2061 = icmp ult i32 %2059, %2058
  %2062 = or i1 %2060, %2061
  %2063 = zext i1 %2062 to i8
  store i8 %2063, i8* %14, align 1
  %2064 = and i32 %2059, 255
  %2065 = tail call i32 @llvm.ctpop.i32(i32 %2064)
  %2066 = trunc i32 %2065 to i8
  %2067 = and i8 %2066, 1
  %2068 = xor i8 %2067, 1
  store i8 %2068, i8* %21, align 1
  %2069 = xor i32 %2058, %2053
  %2070 = xor i32 %2069, %2059
  %2071 = lshr i32 %2070, 4
  %2072 = trunc i32 %2071 to i8
  %2073 = and i8 %2072, 1
  store i8 %2073, i8* %27, align 1
  %2074 = icmp eq i32 %2059, 0
  %2075 = zext i1 %2074 to i8
  store i8 %2075, i8* %30, align 1
  %2076 = lshr i32 %2059, 31
  %2077 = trunc i32 %2076 to i8
  store i8 %2077, i8* %33, align 1
  %2078 = lshr i32 %2053, 31
  %2079 = lshr i32 %2058, 31
  %2080 = xor i32 %2076, %2078
  %2081 = xor i32 %2076, %2079
  %2082 = add nuw nsw i32 %2080, %2081
  %2083 = icmp eq i32 %2082, 2
  %2084 = zext i1 %2083 to i8
  store i8 %2084, i8* %39, align 1
  %2085 = add i64 %2014, 27
  store i64 %2085, i64* %3, align 8
  store i32 %2059, i32* %2057, align 4
  %2086 = load i64, i64* %3, align 8
  %2087 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %2088 = zext i32 %2087 to i64
  store i64 %2088, i64* %RAX.i1321, align 8
  %2089 = add i64 %2086, 14
  store i64 %2089, i64* %3, align 8
  store i32 %2087, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  br label %block_.L_47e8c9

block_.L_47e8c9:                                  ; preds = %block_.L_47e8a0, %block_47e872
  %2090 = phi i64 [ %2089, %block_.L_47e8a0 ], [ %2052, %block_47e872 ]
  %2091 = add i64 %2090, 5
  store i64 %2091, i64* %3, align 8
  br label %block_.L_47e8ce

block_.L_47e8ce:                                  ; preds = %block_.L_47e848, %block_.L_47e8c9, %block_47e833
  %2092 = phi i64 [ %2091, %block_.L_47e8c9 ], [ %1988, %block_.L_47e848 ], [ %1973, %block_47e833 ]
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %2094 = bitcast [32 x %union.VectorReg]* %2093 to i8*
  %2095 = load i64, i64* bitcast (%G_0x726420_type* @G_0x726420 to i64*), align 8
  %2096 = bitcast [32 x %union.VectorReg]* %2093 to double*
  %2097 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2093, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %2099 = bitcast i64* %2098 to double*
  store i64 %2095, i64* bitcast (%G_0x723640_type* @G_0x723640 to i64*), align 8
  %2100 = load i64, i64* bitcast (%G_0x6f9358_type* @G_0x6f9358 to i64*), align 8
  store i64 %2100, i64* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to i64*), align 8
  %2101 = load i32, i32* bitcast (%G_0x6f9720_type* @G_0x6f9720 to i32*), align 8
  %EAX.i2575 = bitcast %union.anon* %45 to i32*
  store i32 %2101, i32* bitcast (%G_0x6d4510_type* @G_0x6d4510 to i32*), align 8
  %2102 = load i32, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  store i32 %2102, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  %2103 = load i32, i32* bitcast (%G_0x6f80c8_type* @G_0x6f80c8 to i32*), align 8
  %2104 = zext i32 %2103 to i64
  store i64 %2104, i64* %RAX.i1321, align 8
  store i32 %2103, i32* bitcast (%G_0x6e51e0_type* @G_0x6e51e0 to i32*), align 8
  %2105 = load i64, i64* bitcast (%G_0x6cfc68_type* @G_0x6cfc68 to i64*), align 8
  store i64 %2105, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  %2106 = load i64, i64* bitcast (%G_0x710798_type* @G_0x710798 to i64*), align 8
  store i64 %2106, i64* bitcast (%G_0x710008_type* @G_0x710008 to i64*), align 8
  %2107 = load i64, i64* bitcast (%G_0x6cd300_type* @G_0x6cd300 to i64*), align 8
  store i64 %2107, i64* bitcast (%G_0x721df8_type* @G_0x721df8 to i64*), align 8
  %.cast = bitcast i64 %2105 to double
  %2108 = bitcast i64 %2107 to double
  %2109 = fmul double %.cast, %2108
  %2110 = bitcast i64 %2106 to double
  %2111 = fadd double %2109, %2110
  store double %2111, double* %2096, align 1
  store i64 0, i64* %2098, align 1
  store double %2111, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %2112 = add i64 %2092, 177
  %2113 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  store i8 0, i8* %14, align 1
  %2114 = trunc i64 %2113 to i32
  %2115 = and i32 %2114, 255
  %2116 = tail call i32 @llvm.ctpop.i32(i32 %2115)
  %2117 = trunc i32 %2116 to i8
  %2118 = and i8 %2117, 1
  %2119 = xor i8 %2118, 1
  store i8 %2119, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2120 = icmp eq i64 %2113, 0
  %2121 = zext i1 %2120 to i8
  store i8 %2121, i8* %30, align 1
  %2122 = lshr i64 %2113, 63
  %2123 = trunc i64 %2122 to i8
  store i8 %2123, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2124 = icmp ne i8 %2123, 0
  %.v = select i1 %2124, i64 6, i64 87
  %2125 = add i64 %2112, %.v
  store i64 %2125, i64* %3, align 8
  br i1 %2124, label %block_47e985, label %block_.L_47e9d6

block_47e985:                                     ; preds = %block_.L_47e8ce
  %2126 = add i32 %2103, %2102
  %2127 = zext i32 %2126 to i64
  %2128 = lshr i32 %2126, 31
  store i32 %2126, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i64 %2127, i64* %RAX.i1321, align 8
  %2129 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %2130 = sub i32 %2126, %2129
  %2131 = icmp ult i32 %2126, %2129
  %2132 = zext i1 %2131 to i8
  store i8 %2132, i8* %14, align 1
  %2133 = and i32 %2130, 255
  %2134 = tail call i32 @llvm.ctpop.i32(i32 %2133)
  %2135 = trunc i32 %2134 to i8
  %2136 = and i8 %2135, 1
  %2137 = xor i8 %2136, 1
  store i8 %2137, i8* %21, align 1
  %2138 = xor i32 %2129, %2126
  %2139 = xor i32 %2138, %2130
  %2140 = lshr i32 %2139, 4
  %2141 = trunc i32 %2140 to i8
  %2142 = and i8 %2141, 1
  store i8 %2142, i8* %27, align 1
  %2143 = icmp eq i32 %2130, 0
  %2144 = zext i1 %2143 to i8
  store i8 %2144, i8* %30, align 1
  %2145 = lshr i32 %2130, 31
  %2146 = trunc i32 %2145 to i8
  store i8 %2146, i8* %33, align 1
  %2147 = lshr i32 %2129, 31
  %2148 = xor i32 %2147, %2128
  %2149 = xor i32 %2145, %2128
  %2150 = add nuw nsw i32 %2149, %2148
  %2151 = icmp eq i32 %2150, 2
  %2152 = zext i1 %2151 to i8
  store i8 %2152, i8* %39, align 1
  %2153 = icmp ne i8 %2146, 0
  %2154 = xor i1 %2153, %2151
  %.v435 = select i1 %2154, i64 41, i64 56
  %2155 = add i64 %2125, %.v435
  %2156 = add i64 %2155, 7
  store i64 %2156, i64* %3, align 8
  br i1 %2154, label %block_47e9ae, label %block_.L_47e9bd

block_47e9ae:                                     ; preds = %block_47e985
  store i64 %2127, i64* %RAX.i1321, align 8
  %2157 = load i64, i64* %RBP.i, align 8
  %2158 = add i64 %2157, -88
  %2159 = add i64 %2155, 10
  store i64 %2159, i64* %3, align 8
  %2160 = inttoptr i64 %2158 to i32*
  store i32 %2126, i32* %2160, align 4
  %2161 = load i64, i64* %3, align 8
  %2162 = add i64 %2161, 15
  store i64 %2162, i64* %3, align 8
  br label %block_.L_47e9c7

block_.L_47e9bd:                                  ; preds = %block_47e985
  %2163 = zext i32 %2129 to i64
  store i64 %2163, i64* %RAX.i1321, align 8
  %2164 = load i64, i64* %RBP.i, align 8
  %2165 = add i64 %2164, -88
  %2166 = add i64 %2155, 10
  store i64 %2166, i64* %3, align 8
  %2167 = inttoptr i64 %2165 to i32*
  store i32 %2129, i32* %2167, align 4
  %.pre245 = load i64, i64* %3, align 8
  br label %block_.L_47e9c7

block_.L_47e9c7:                                  ; preds = %block_.L_47e9bd, %block_47e9ae
  %2168 = phi i64 [ %.pre245, %block_.L_47e9bd ], [ %2162, %block_47e9ae ]
  %2169 = load i64, i64* %RBP.i, align 8
  %2170 = add i64 %2169, -88
  %2171 = add i64 %2168, 3
  store i64 %2171, i64* %3, align 8
  %2172 = inttoptr i64 %2170 to i32*
  %2173 = load i32, i32* %2172, align 4
  %2174 = zext i32 %2173 to i64
  store i64 %2174, i64* %RAX.i1321, align 8
  store i32 %2173, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %2175 = add i64 %2168, 735
  store i64 %2175, i64* %3, align 8
  br label %block_.L_47eca6

block_.L_47e9d6:                                  ; preds = %block_.L_47e8ce
  %RCX.i2513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %2176 = sext i32 %2101 to i64
  store i64 %2176, i64* %RCX.i2513, align 8
  %2177 = sub i64 %2113, %2176
  store i64 %2177, i64* %RAX.i1321, align 8
  %2178 = icmp ult i64 %2113, %2176
  %2179 = zext i1 %2178 to i8
  store i8 %2179, i8* %14, align 1
  %2180 = trunc i64 %2177 to i32
  %2181 = and i32 %2180, 255
  %2182 = tail call i32 @llvm.ctpop.i32(i32 %2181)
  %2183 = trunc i32 %2182 to i8
  %2184 = and i8 %2183, 1
  %2185 = xor i8 %2184, 1
  store i8 %2185, i8* %21, align 1
  %2186 = xor i64 %2113, %2176
  %2187 = xor i64 %2186, %2177
  %2188 = lshr i64 %2187, 4
  %2189 = trunc i64 %2188 to i8
  %2190 = and i8 %2189, 1
  store i8 %2190, i8* %27, align 1
  %2191 = icmp eq i64 %2177, 0
  %2192 = zext i1 %2191 to i8
  store i8 %2192, i8* %30, align 1
  %2193 = lshr i64 %2177, 63
  %2194 = trunc i64 %2193 to i8
  store i8 %2194, i8* %33, align 1
  %2195 = lshr i64 %2176, 63
  %2196 = xor i64 %2122, %2195
  %2197 = xor i64 %2193, %2122
  %2198 = add nuw nsw i64 %2197, %2196
  %2199 = icmp eq i64 %2198, 2
  %2200 = zext i1 %2199 to i8
  store i8 %2200, i8* %39, align 1
  %RDX.i2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2201 = and i64 %2177, 4294967295
  store i64 %2201, i64* %RDX.i2508, align 8
  %2202 = load i64, i64* %RBP.i, align 8
  %2203 = add i64 %2202, -20
  %2204 = add i64 %2125, 24
  store i64 %2204, i64* %3, align 8
  %2205 = inttoptr i64 %2203 to i32*
  store i32 %2180, i32* %2205, align 4
  %2206 = load i64, i64* %RBP.i, align 8
  %2207 = add i64 %2206, -20
  %2208 = load i64, i64* %3, align 8
  %2209 = add i64 %2208, 3
  store i64 %2209, i64* %3, align 8
  %2210 = inttoptr i64 %2207 to i32*
  %2211 = load i32, i32* %2210, align 4
  %2212 = zext i32 %2211 to i64
  store i64 %2212, i64* %RDX.i2508, align 8
  %2213 = load double, double* bitcast (%G_0x6ccf88_type* @G_0x6ccf88 to double*), align 8
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %2215 = load double, double* bitcast (%G_0x723648_type* @G_0x723648 to double*), align 8
  %2216 = bitcast %union.VectorReg* %2214 to double*
  %2217 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %2214, i64 0, i32 0, i32 0, i32 0, i64 0
  %2218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %2219 = bitcast i64* %2218 to double*
  %2220 = load double, double* bitcast (%G_0x6d1fb0_type* @G_0x6d1fb0 to double*), align 8
  %2221 = fmul double %2215, %2220
  store double %2221, double* %2216, align 1
  store i64 0, i64* %2218, align 1
  %2222 = fdiv double %2213, %2221
  store double %2222, double* %2096, align 1
  store i64 0, i64* %2098, align 1
  %RSI.i2489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %2223 = tail call double @llvm.trunc.f64(double %2222)
  %2224 = tail call double @llvm.fabs.f64(double %2223)
  %2225 = fcmp ogt double %2224, 0x41DFFFFFFFC00000
  %2226 = fptosi double %2223 to i32
  %2227 = zext i32 %2226 to i64
  %2228 = select i1 %2225, i64 2147483648, i64 %2227
  store i64 %2228, i64* %RSI.i2489, align 8
  %2229 = trunc i64 %2228 to i32
  %2230 = sub i32 %2211, %2229
  %2231 = icmp ult i32 %2211, %2229
  %2232 = zext i1 %2231 to i8
  store i8 %2232, i8* %14, align 1
  %2233 = and i32 %2230, 255
  %2234 = tail call i32 @llvm.ctpop.i32(i32 %2233)
  %2235 = trunc i32 %2234 to i8
  %2236 = and i8 %2235, 1
  %2237 = xor i8 %2236, 1
  store i8 %2237, i8* %21, align 1
  %2238 = xor i32 %2229, %2211
  %2239 = xor i32 %2238, %2230
  %2240 = lshr i32 %2239, 4
  %2241 = trunc i32 %2240 to i8
  %2242 = and i8 %2241, 1
  store i8 %2242, i8* %27, align 1
  %2243 = icmp eq i32 %2230, 0
  %2244 = zext i1 %2243 to i8
  store i8 %2244, i8* %30, align 1
  %2245 = lshr i32 %2230, 31
  %2246 = trunc i32 %2245 to i8
  store i8 %2246, i8* %33, align 1
  %2247 = lshr i32 %2211, 31
  %2248 = lshr i32 %2229, 31
  %2249 = xor i32 %2248, %2247
  %2250 = xor i32 %2245, %2247
  %2251 = add nuw nsw i32 %2250, %2249
  %2252 = icmp eq i32 %2251, 2
  %2253 = zext i1 %2252 to i8
  store i8 %2253, i8* %39, align 1
  %2254 = icmp ne i8 %2246, 0
  %2255 = xor i1 %2254, %2252
  %.v428 = select i1 %2255, i64 46, i64 89
  %2256 = add i64 %2208, %.v428
  store i64 %2256, i64* %3, align 8
  br i1 %2255, label %block_47ea1c, label %block_.L_47ea47

block_47ea1c:                                     ; preds = %block_.L_47e9d6
  store double %2221, double* %2216, align 1
  store i64 0, i64* %2218, align 1
  store double %2222, double* %2096, align 1
  store i64 0, i64* %2098, align 1
  store i64 %2228, i64* %RAX.i1321, align 8
  %2257 = add i64 %2206, -92
  %2258 = add i64 %2256, 38
  store i64 %2258, i64* %3, align 8
  %2259 = inttoptr i64 %2257 to i32*
  store i32 %2229, i32* %2259, align 4
  %2260 = load i64, i64* %3, align 8
  %2261 = add i64 %2260, 11
  store i64 %2261, i64* %3, align 8
  br label %block_.L_47ea4d

block_.L_47ea47:                                  ; preds = %block_.L_47e9d6
  %2262 = add i64 %2256, 3
  store i64 %2262, i64* %3, align 8
  %2263 = load i32, i32* %2210, align 4
  %2264 = zext i32 %2263 to i64
  store i64 %2264, i64* %RAX.i1321, align 8
  %2265 = add i64 %2206, -92
  %2266 = add i64 %2256, 6
  store i64 %2266, i64* %3, align 8
  %2267 = inttoptr i64 %2265 to i32*
  store i32 %2263, i32* %2267, align 4
  %.pre236 = load i64, i64* %3, align 8
  br label %block_.L_47ea4d

block_.L_47ea4d:                                  ; preds = %block_.L_47ea47, %block_47ea1c
  %2268 = phi i64 [ %.pre236, %block_.L_47ea47 ], [ %2261, %block_47ea1c ]
  %2269 = load i64, i64* %RBP.i, align 8
  %2270 = add i64 %2269, -92
  %2271 = add i64 %2268, 3
  store i64 %2271, i64* %3, align 8
  %2272 = inttoptr i64 %2270 to i32*
  %2273 = load i32, i32* %2272, align 4
  %2274 = zext i32 %2273 to i64
  store i64 %2274, i64* %RAX.i1321, align 8
  %2275 = bitcast [32 x %union.VectorReg]* %2093 to i32*
  %2276 = getelementptr inbounds i8, i8* %2094, i64 4
  %2277 = bitcast i8* %2276 to i32*
  %2278 = bitcast i64* %2098 to i32*
  %2279 = getelementptr inbounds i8, i8* %2094, i64 12
  %2280 = bitcast i8* %2279 to i32*
  %2281 = bitcast [32 x %union.VectorReg]* %2093 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2281, align 1
  %2282 = add i64 %2268, add (i64 ptrtoint (%G_0x32ddd__rip__type* @G_0x32ddd__rip_ to i64), i64 6)
  %2283 = add i64 %2268, 14
  store i64 %2283, i64* %3, align 8
  %2284 = inttoptr i64 %2282 to i64*
  %2285 = load i64, i64* %2284, align 8
  store i64 %2285, i64* %2217, align 1
  store double 0.000000e+00, double* %2219, align 1
  %2286 = add i64 %2269, -20
  %2287 = add i64 %2268, 17
  store i64 %2287, i64* %3, align 8
  %2288 = inttoptr i64 %2286 to i32*
  store i32 %2273, i32* %2288, align 4
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %2290 = load i64, i64* %3, align 8
  %2291 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %2292 = bitcast %union.VectorReg* %2289 to double*
  %2293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %2294 = load double, double* bitcast (%G_0x723640_type* @G_0x723640 to double*), align 8
  %2295 = fmul double %2291, %2294
  %2296 = fmul double %2295, %2291
  %2297 = fmul double %2296, %2294
  store double %2297, double* %2292, align 1
  store i64 0, i64* %2293, align 1
  %2298 = load double, double* %2216, align 1
  %2299 = load double, double* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to double*), align 8
  %2300 = fmul double %2298, %2299
  %2301 = fmul double %2300, %2291
  store double %2301, double* %2216, align 1
  %2302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %2303 = load i64, i64* %RBP.i, align 8
  %2304 = add i64 %2303, -20
  %2305 = add i64 %2290, 59
  store i64 %2305, i64* %3, align 8
  %2306 = inttoptr i64 %2304 to i32*
  %2307 = load i32, i32* %2306, align 4
  %2308 = sitofp i32 %2307 to double
  %2309 = bitcast %union.VectorReg* %2302 to double*
  store double %2308, double* %2309, align 1
  %2310 = fmul double %2308, %2301
  %2311 = fadd double %2310, %2297
  store double %2311, double* %2292, align 1
  store i64 0, i64* %2293, align 1
  %2312 = add i64 %2303, -16
  %2313 = add i64 %2290, 72
  store i64 %2313, i64* %3, align 8
  %2314 = inttoptr i64 %2312 to double*
  store double %2311, double* %2314, align 8
  %2315 = load i64, i64* %3, align 8
  %2316 = load i64, i64* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to i64*), align 8
  store i64 %2316, i64* %2217, align 1
  store double 0.000000e+00, double* %2219, align 1
  %2317 = add i64 %2315, 13
  store i64 %2317, i64* %3, align 8
  %.cast164 = bitcast i64 %2316 to double
  %2318 = load double, double* %2096, align 1
  %2319 = fcmp uno double %.cast164, %2318
  br i1 %2319, label %2320, label %2330

; <label>:2320:                                   ; preds = %block_.L_47ea4d
  %2321 = fadd double %.cast164, %2318
  %2322 = bitcast double %2321 to i64
  %2323 = and i64 %2322, 9221120237041090560
  %2324 = icmp eq i64 %2323, 9218868437227405312
  %2325 = and i64 %2322, 2251799813685247
  %2326 = icmp ne i64 %2325, 0
  %2327 = and i1 %2324, %2326
  br i1 %2327, label %2328, label %2336

; <label>:2328:                                   ; preds = %2320
  %2329 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2317, %struct.Memory* %2)
  %.pre237 = load i64, i64* %3, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit2423

; <label>:2330:                                   ; preds = %block_.L_47ea4d
  %2331 = fcmp ogt double %.cast164, %2318
  br i1 %2331, label %2336, label %2332

; <label>:2332:                                   ; preds = %2330
  %2333 = fcmp olt double %.cast164, %2318
  br i1 %2333, label %2336, label %2334

; <label>:2334:                                   ; preds = %2332
  %2335 = fcmp oeq double %.cast164, %2318
  br i1 %2335, label %2336, label %2340

; <label>:2336:                                   ; preds = %2334, %2332, %2330, %2320
  %2337 = phi i8 [ 0, %2330 ], [ 0, %2332 ], [ 1, %2334 ], [ 1, %2320 ]
  %2338 = phi i8 [ 0, %2330 ], [ 0, %2332 ], [ 0, %2334 ], [ 1, %2320 ]
  %2339 = phi i8 [ 0, %2330 ], [ 1, %2332 ], [ 0, %2334 ], [ 1, %2320 ]
  store i8 %2337, i8* %30, align 1
  store i8 %2338, i8* %21, align 1
  store i8 %2339, i8* %14, align 1
  br label %2340

; <label>:2340:                                   ; preds = %2336, %2334
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit2423

routine_ucomisd__xmm0___xmm1.exit2423:            ; preds = %2340, %2328
  %2341 = phi i64 [ %.pre237, %2328 ], [ %2317, %2340 ]
  %2342 = phi %struct.Memory* [ %2329, %2328 ], [ %2, %2340 ]
  %2343 = add i64 %2341, 17
  %2344 = add i64 %2341, 6
  %2345 = load i8, i8* %30, align 1
  %2346 = icmp eq i8 %2345, 0
  %2347 = select i1 %2346, i64 %2343, i64 %2344
  store i64 %2347, i64* %3, align 8
  br i1 %2346, label %block_.L_47eac4, label %block_47eab9

block_47eab9:                                     ; preds = %routine_ucomisd__xmm0___xmm1.exit2423
  %2348 = load i8, i8* %21, align 1
  %2349 = icmp ne i8 %2348, 0
  %.v471 = select i1 %2349, i64 11, i64 6
  %2350 = add i64 %2347, %.v471
  store i64 %2350, i64* %3, align 8
  %cmpBr_47eab9 = icmp eq i8 %2348, 1
  br i1 %cmpBr_47eab9, label %block_.L_47eac4, label %block_47eabf

block_47eabf:                                     ; preds = %block_47eab9
  %2351 = add i64 %2350, 77
  store i64 %2351, i64* %3, align 8
  br label %block_.L_47eb0c

block_.L_47eac4:                                  ; preds = %block_47eab9, %routine_ucomisd__xmm0___xmm1.exit2423
  %2352 = phi i64 [ %2350, %block_47eab9 ], [ %2343, %routine_ucomisd__xmm0___xmm1.exit2423 ]
  %2353 = bitcast [32 x %union.VectorReg]* %2093 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2353, align 1
  %2354 = load i64, i64* %RBP.i, align 8
  %2355 = add i64 %2354, -16
  %2356 = add i64 %2352, 8
  store i64 %2356, i64* %3, align 8
  %2357 = load double, double* %2096, align 1
  %2358 = inttoptr i64 %2355 to double*
  %2359 = load double, double* %2358, align 8
  %2360 = fcmp uno double %2357, %2359
  br i1 %2360, label %2361, label %2371

; <label>:2361:                                   ; preds = %block_.L_47eac4
  %2362 = fadd double %2357, %2359
  %2363 = bitcast double %2362 to i64
  %2364 = and i64 %2363, 9221120237041090560
  %2365 = icmp eq i64 %2364, 9218868437227405312
  %2366 = and i64 %2363, 2251799813685247
  %2367 = icmp ne i64 %2366, 0
  %2368 = and i1 %2365, %2367
  br i1 %2368, label %2369, label %2377

; <label>:2369:                                   ; preds = %2361
  %2370 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2356, %struct.Memory* %2342)
  %.pre238 = load i64, i64* %3, align 8
  %.pre239 = load i8, i8* %30, align 1
  br label %routine_ucomisd_MINUS0x10__rbp____xmm0.exit2411

; <label>:2371:                                   ; preds = %block_.L_47eac4
  %2372 = fcmp ogt double %2357, %2359
  br i1 %2372, label %2377, label %2373

; <label>:2373:                                   ; preds = %2371
  %2374 = fcmp olt double %2357, %2359
  br i1 %2374, label %2377, label %2375

; <label>:2375:                                   ; preds = %2373
  %2376 = fcmp oeq double %2357, %2359
  br i1 %2376, label %2377, label %2381

; <label>:2377:                                   ; preds = %2375, %2373, %2371, %2361
  %2378 = phi i8 [ 0, %2371 ], [ 0, %2373 ], [ 1, %2375 ], [ 1, %2361 ]
  %2379 = phi i8 [ 0, %2371 ], [ 0, %2373 ], [ 0, %2375 ], [ 1, %2361 ]
  %2380 = phi i8 [ 0, %2371 ], [ 1, %2373 ], [ 0, %2375 ], [ 1, %2361 ]
  store i8 %2378, i8* %30, align 1
  store i8 %2379, i8* %21, align 1
  store i8 %2380, i8* %14, align 1
  br label %2381

; <label>:2381:                                   ; preds = %2377, %2375
  %2382 = phi i8 [ %2378, %2377 ], [ %2345, %2375 ]
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd_MINUS0x10__rbp____xmm0.exit2411

routine_ucomisd_MINUS0x10__rbp____xmm0.exit2411:  ; preds = %2381, %2369
  %2383 = phi i8 [ %.pre239, %2369 ], [ %2382, %2381 ]
  %2384 = phi i64 [ %.pre238, %2369 ], [ %2356, %2381 ]
  %2385 = phi %struct.Memory* [ %2370, %2369 ], [ %2342, %2381 ]
  %2386 = add i64 %2384, 64
  %2387 = add i64 %2384, 6
  %2388 = load i8, i8* %14, align 1
  %2389 = or i8 %2383, %2388
  %2390 = icmp eq i8 %2389, 0
  %2391 = select i1 %2390, i64 %2386, i64 %2387
  store i64 %2391, i64* %3, align 8
  br i1 %2390, label %block_.L_47eb0c, label %block_47ead2

block_47ead2:                                     ; preds = %routine_ucomisd_MINUS0x10__rbp____xmm0.exit2411
  %2392 = bitcast [32 x %union.VectorReg]* %2093 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2392, align 1
  %2393 = load i64, i64* %RBP.i, align 8
  %2394 = add i64 %2393, -16
  %2395 = add i64 %2391, 8
  store i64 %2395, i64* %3, align 8
  %2396 = inttoptr i64 %2394 to i64*
  %2397 = load i64, i64* %2396, align 8
  store i64 %2397, i64* %2217, align 1
  store double 0.000000e+00, double* %2219, align 1
  %2398 = add i64 %2393, -104
  %2399 = add i64 %2391, 13
  store i64 %2399, i64* %3, align 8
  %2400 = load i64, i64* %2097, align 1
  %2401 = inttoptr i64 %2398 to i64*
  store i64 %2400, i64* %2401, align 8
  %2402 = load i64, i64* %3, align 8
  %2403 = bitcast %union.VectorReg* %2214 to <2 x i32>*
  %2404 = load <2 x i32>, <2 x i32>* %2403, align 1
  %2405 = bitcast i64* %2218 to <2 x i32>*
  %2406 = load <2 x i32>, <2 x i32>* %2405, align 1
  %2407 = extractelement <2 x i32> %2404, i32 0
  store i32 %2407, i32* %2275, align 1
  %2408 = extractelement <2 x i32> %2404, i32 1
  store i32 %2408, i32* %2277, align 1
  %2409 = extractelement <2 x i32> %2406, i32 0
  store i32 %2409, i32* %2278, align 1
  %2410 = extractelement <2 x i32> %2406, i32 1
  store i32 %2410, i32* %2280, align 1
  %2411 = add i64 %2402, -514287
  %2412 = add i64 %2402, 8
  %2413 = load i64, i64* %6, align 8
  %2414 = add i64 %2413, -8
  %2415 = inttoptr i64 %2414 to i64*
  store i64 %2412, i64* %2415, align 8
  store i64 %2414, i64* %6, align 8
  store i64 %2411, i64* %3, align 8
  %call2_47eae2 = tail call %struct.Memory* @ext_sqrt(%struct.State* nonnull %0, i64 %2411, %struct.Memory* %2385)
  %2416 = load i64, i64* %3, align 8
  %2417 = load double, double* bitcast (%G_0x723640_type* @G_0x723640 to double*), align 8
  %2418 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %2419 = fmul double %2417, %2418
  store double %2419, double* %2216, align 1
  store i64 0, i64* %2218, align 1
  %2420 = load double, double* %2096, align 1
  %2421 = fsub double %2420, %2419
  store double %2421, double* %2096, align 1
  %2422 = load i64, i64* %RBP.i, align 8
  %2423 = add i64 %2422, -104
  %2424 = add i64 %2416, 27
  store i64 %2424, i64* %3, align 8
  %2425 = inttoptr i64 %2423 to i64*
  %2426 = load i64, i64* %2425, align 8
  store i64 %2426, i64* %2217, align 1
  store double 0.000000e+00, double* %2219, align 1
  %2427 = add i64 %2416, 31
  store i64 %2427, i64* %3, align 8
  %.cast170 = bitcast i64 %2426 to double
  %2428 = fcmp uno double %.cast170, %2421
  br i1 %2428, label %2429, label %2439

; <label>:2429:                                   ; preds = %block_47ead2
  %2430 = fadd double %.cast170, %2421
  %2431 = bitcast double %2430 to i64
  %2432 = and i64 %2431, 9221120237041090560
  %2433 = icmp eq i64 %2432, 9218868437227405312
  %2434 = and i64 %2431, 2251799813685247
  %2435 = icmp ne i64 %2434, 0
  %2436 = and i1 %2433, %2435
  br i1 %2436, label %2437, label %2445

; <label>:2437:                                   ; preds = %2429
  %2438 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2427, %struct.Memory* %call2_47eae2)
  %.pre240 = load i64, i64* %3, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit2381

; <label>:2439:                                   ; preds = %block_47ead2
  %2440 = fcmp ogt double %.cast170, %2421
  br i1 %2440, label %2445, label %2441

; <label>:2441:                                   ; preds = %2439
  %2442 = fcmp olt double %.cast170, %2421
  br i1 %2442, label %2445, label %2443

; <label>:2443:                                   ; preds = %2441
  %2444 = fcmp oeq double %.cast170, %2421
  br i1 %2444, label %2445, label %2449

; <label>:2445:                                   ; preds = %2443, %2441, %2439, %2429
  %2446 = phi i8 [ 0, %2439 ], [ 0, %2441 ], [ 1, %2443 ], [ 1, %2429 ]
  %2447 = phi i8 [ 0, %2439 ], [ 0, %2441 ], [ 0, %2443 ], [ 1, %2429 ]
  %2448 = phi i8 [ 0, %2439 ], [ 1, %2441 ], [ 0, %2443 ], [ 1, %2429 ]
  store i8 %2446, i8* %30, align 1
  store i8 %2447, i8* %21, align 1
  store i8 %2448, i8* %14, align 1
  br label %2449

; <label>:2449:                                   ; preds = %2445, %2443
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit2381

routine_ucomisd__xmm0___xmm1.exit2381:            ; preds = %2449, %2437
  %2450 = phi i64 [ %.pre240, %2437 ], [ %2427, %2449 ]
  %2451 = phi %struct.Memory* [ %2438, %2437 ], [ %call2_47eae2, %2449 ]
  %2452 = load i8, i8* %14, align 1
  %2453 = icmp ne i8 %2452, 0
  %.v472 = select i1 %2453, i64 55, i64 6
  %2454 = add i64 %2450, %.v472
  store i64 %2454, i64* %3, align 8
  %cmpBr_47eb06 = icmp eq i8 %2452, 1
  br i1 %cmpBr_47eb06, label %block_.L_47eb3d, label %block_.L_47eb0c

block_.L_47eb0c:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit2381, %routine_ucomisd_MINUS0x10__rbp____xmm0.exit2411, %block_47eabf
  %2455 = phi i64 [ %2386, %routine_ucomisd_MINUS0x10__rbp____xmm0.exit2411 ], [ %2454, %routine_ucomisd__xmm0___xmm1.exit2381 ], [ %2351, %block_47eabf ]
  %MEMORY.34 = phi %struct.Memory* [ %2385, %routine_ucomisd_MINUS0x10__rbp____xmm0.exit2411 ], [ %2451, %routine_ucomisd__xmm0___xmm1.exit2381 ], [ %2342, %block_47eabf ]
  %2456 = load double, double* bitcast (%G_0x723640_type* @G_0x723640 to double*), align 8
  %2457 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %2458 = fmul double %2456, %2457
  store double %2458, double* %2096, align 1
  store i64 0, i64* %2098, align 1
  %2459 = load i64, i64* %RBP.i, align 8
  %2460 = add i64 %2459, -20
  %2461 = add i64 %2455, 23
  store i64 %2461, i64* %3, align 8
  %2462 = inttoptr i64 %2460 to i32*
  %2463 = load i32, i32* %2462, align 4
  %2464 = sitofp i32 %2463 to double
  store double %2464, double* %2216, align 1
  %2465 = fdiv double %2458, %2464
  %.cast166 = bitcast double %2465 to <2 x i32>
  %2466 = fptrunc double %2465 to float
  %2467 = bitcast [32 x %union.VectorReg]* %2093 to float*
  store float %2466, float* %2467, align 1
  %2468 = extractelement <2 x i32> %.cast166, i32 1
  store i32 %2468, i32* %2277, align 1
  store i32 0, i32* %2278, align 1
  store i32 0, i32* %2280, align 1
  %2469 = bitcast [32 x %union.VectorReg]* %2093 to <2 x float>*
  %2470 = load <2 x float>, <2 x float>* %2469, align 1
  %2471 = extractelement <2 x float> %2470, i32 0
  %2472 = fpext float %2471 to double
  store double %2472, double* %2096, align 1
  store double %2472, double* bitcast (%G_0x6ccae0_type* @G_0x6ccae0 to double*), align 8
  %2473 = add i64 %2455, 141
  store i64 %2473, i64* %3, align 8
  br label %block_.L_47eb99

block_.L_47eb3d:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit2381
  %2474 = add i64 %2454, ptrtoint (%G_0x32d03__rip__type* @G_0x32d03__rip_ to i64)
  %2475 = add i64 %2454, 8
  store i64 %2475, i64* %3, align 8
  %2476 = inttoptr i64 %2474 to double*
  %2477 = load double, double* %2476, align 8
  %2478 = load double, double* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to double*), align 8
  %2479 = fmul double %2477, %2478
  %2480 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %2481 = fmul double %2479, %2480
  store double %2481, double* %2096, align 1
  store i64 0, i64* %2098, align 1
  %2482 = load i64, i64* %RBP.i, align 8
  %2483 = add i64 %2482, -16
  %2484 = add i64 %2454, 31
  store i64 %2484, i64* %3, align 8
  %2485 = inttoptr i64 %2483 to i64*
  %2486 = load i64, i64* %2485, align 8
  store i64 %2486, i64* %2217, align 1
  store double 0.000000e+00, double* %2219, align 1
  %2487 = add i64 %2482, -112
  %2488 = add i64 %2454, 36
  store i64 %2488, i64* %3, align 8
  %2489 = inttoptr i64 %2487 to double*
  store double %2481, double* %2489, align 8
  %2490 = load i64, i64* %3, align 8
  %2491 = load <2 x i32>, <2 x i32>* %2403, align 1
  %2492 = load <2 x i32>, <2 x i32>* %2405, align 1
  %2493 = extractelement <2 x i32> %2491, i32 0
  store i32 %2493, i32* %2275, align 1
  %2494 = extractelement <2 x i32> %2491, i32 1
  store i32 %2494, i32* %2277, align 1
  %2495 = extractelement <2 x i32> %2492, i32 0
  store i32 %2495, i32* %2278, align 1
  %2496 = extractelement <2 x i32> %2492, i32 1
  store i32 %2496, i32* %2280, align 1
  %2497 = add i64 %2490, -514417
  %2498 = add i64 %2490, 8
  %2499 = load i64, i64* %6, align 8
  %2500 = add i64 %2499, -8
  %2501 = inttoptr i64 %2500 to i64*
  store i64 %2498, i64* %2501, align 8
  store i64 %2500, i64* %6, align 8
  store i64 %2497, i64* %3, align 8
  %call2_47eb64 = tail call %struct.Memory* @ext_sqrt(%struct.State* nonnull %0, i64 %2497, %struct.Memory* %2451)
  %2502 = load i64, i64* %3, align 8
  %2503 = load double, double* bitcast (%G_0x723640_type* @G_0x723640 to double*), align 8
  %2504 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %2505 = fmul double %2503, %2504
  store double %2505, double* %2216, align 1
  store i64 0, i64* %2218, align 1
  %2506 = load double, double* %2096, align 1
  %2507 = bitcast i64* %2098 to <2 x i32>*
  %2508 = load <2 x i32>, <2 x i32>* %2507, align 1
  %2509 = fsub double %2506, %2505
  store double %2509, double* %2096, align 1
  %2510 = load i64, i64* %RBP.i, align 8
  %2511 = add i64 %2510, -112
  %2512 = add i64 %2502, 27
  store i64 %2512, i64* %3, align 8
  %2513 = inttoptr i64 %2511 to double*
  %2514 = load double, double* %2513, align 8
  %2515 = fdiv double %2514, %2509
  store double %2515, double* %2216, align 1
  store i64 0, i64* %2218, align 1
  %2516 = bitcast double %2509 to <2 x i32>
  %2517 = fptrunc double %2515 to float
  %2518 = bitcast [32 x %union.VectorReg]* %2093 to float*
  store float %2517, float* %2518, align 1
  %2519 = extractelement <2 x i32> %2516, i32 1
  store i32 %2519, i32* %2277, align 1
  %2520 = extractelement <2 x i32> %2508, i32 0
  store i32 %2520, i32* %2278, align 1
  %2521 = extractelement <2 x i32> %2508, i32 1
  store i32 %2521, i32* %2280, align 1
  %2522 = bitcast [32 x %union.VectorReg]* %2093 to <2 x float>*
  %2523 = load <2 x float>, <2 x float>* %2522, align 1
  %2524 = extractelement <2 x float> %2523, i32 0
  %2525 = fpext float %2524 to double
  store double %2525, double* %2096, align 1
  %2526 = add i64 %2502, 48
  store i64 %2526, i64* %3, align 8
  store double %2525, double* bitcast (%G_0x6ccae0_type* @G_0x6ccae0 to double*), align 8
  br label %block_.L_47eb99

block_.L_47eb99:                                  ; preds = %block_.L_47eb3d, %block_.L_47eb0c
  %.in = phi double [ %2472, %block_.L_47eb0c ], [ %2525, %block_.L_47eb3d ]
  %2527 = phi i64 [ %2473, %block_.L_47eb0c ], [ %2526, %block_.L_47eb3d ]
  %MEMORY.35 = phi %struct.Memory* [ %MEMORY.34, %block_.L_47eb0c ], [ %call2_47eb64, %block_.L_47eb3d ]
  %2528 = bitcast [32 x %union.VectorReg]* %2093 to double*
  store double %.in, double* %2528, align 1
  store double 0.000000e+00, double* %2099, align 1
  %2529 = add i64 %2527, 6903
  %2530 = add i64 %2527, 14
  %2531 = load i64, i64* %6, align 8
  %2532 = add i64 %2531, -8
  %2533 = inttoptr i64 %2532 to i64*
  store i64 %2530, i64* %2533, align 8
  store i64 %2532, i64* %6, align 8
  store i64 %2529, i64* %3, align 8
  %call2_47eba2 = tail call %struct.Memory* @sub_480690.Qstep2QP(%struct.State* nonnull %0, i64 %2529, %struct.Memory* %MEMORY.35)
  %2534 = load i32, i32* %EAX.i2575, align 4
  %2535 = load i64, i64* %3, align 8
  store i32 %2534, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %2536 = load i32, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  %2537 = load i32, i32* bitcast (%G_0x6e51e0_type* @G_0x6e51e0 to i32*), align 8
  %2538 = add i32 %2537, %2536
  %2539 = zext i32 %2538 to i64
  store i64 %2539, i64* %RAX.i1321, align 8
  %2540 = lshr i32 %2538, 31
  %2541 = sub i32 %2538, %2534
  %2542 = icmp ult i32 %2538, %2534
  %2543 = zext i1 %2542 to i8
  store i8 %2543, i8* %14, align 1
  %2544 = and i32 %2541, 255
  %2545 = tail call i32 @llvm.ctpop.i32(i32 %2544)
  %2546 = trunc i32 %2545 to i8
  %2547 = and i8 %2546, 1
  %2548 = xor i8 %2547, 1
  store i8 %2548, i8* %21, align 1
  %2549 = xor i32 %2534, %2538
  %2550 = xor i32 %2549, %2541
  %2551 = lshr i32 %2550, 4
  %2552 = trunc i32 %2551 to i8
  %2553 = and i8 %2552, 1
  store i8 %2553, i8* %27, align 1
  %2554 = icmp eq i32 %2541, 0
  %2555 = zext i1 %2554 to i8
  store i8 %2555, i8* %30, align 1
  %2556 = lshr i32 %2541, 31
  %2557 = trunc i32 %2556 to i8
  store i8 %2557, i8* %33, align 1
  %2558 = lshr i32 %2534, 31
  %2559 = xor i32 %2558, %2540
  %2560 = xor i32 %2556, %2540
  %2561 = add nuw nsw i32 %2560, %2559
  %2562 = icmp eq i32 %2561, 2
  %2563 = zext i1 %2562 to i8
  store i8 %2563, i8* %39, align 1
  %2564 = icmp ne i8 %2557, 0
  %2565 = xor i1 %2564, %2562
  %.v429 = select i1 %2565, i64 34, i64 56
  %2566 = add i64 %2535, %.v429
  %2567 = add i64 %2566, 7
  store i64 %2567, i64* %3, align 8
  br i1 %2565, label %block_47ebc9, label %block_.L_47ebdf

block_47ebc9:                                     ; preds = %block_.L_47eb99
  %2568 = lshr i32 %2536, 31
  %2569 = xor i32 %2540, %2568
  %2570 = lshr i32 %2537, 31
  %2571 = xor i32 %2540, %2570
  %2572 = add nuw nsw i32 %2569, %2571
  %2573 = icmp eq i32 %2572, 2
  %2574 = zext i1 %2573 to i8
  %2575 = trunc i32 %2540 to i8
  %2576 = icmp eq i32 %2538, 0
  %2577 = zext i1 %2576 to i8
  %2578 = xor i32 %2537, %2536
  %2579 = xor i32 %2578, %2538
  %2580 = lshr i32 %2579, 4
  %2581 = trunc i32 %2580 to i8
  %2582 = and i8 %2581, 1
  %2583 = and i32 %2538, 255
  %2584 = tail call i32 @llvm.ctpop.i32(i32 %2583)
  %2585 = trunc i32 %2584 to i8
  %2586 = and i8 %2585, 1
  %2587 = xor i8 %2586, 1
  %2588 = icmp ult i32 %2538, %2536
  %2589 = icmp ult i32 %2538, %2537
  %2590 = or i1 %2588, %2589
  %2591 = zext i1 %2590 to i8
  store i64 %2539, i64* %RAX.i1321, align 8
  store i8 %2591, i8* %14, align 1
  store i8 %2587, i8* %21, align 1
  store i8 %2582, i8* %27, align 1
  store i8 %2577, i8* %30, align 1
  store i8 %2575, i8* %33, align 1
  store i8 %2574, i8* %39, align 1
  %2592 = load i64, i64* %RBP.i, align 8
  %2593 = add i64 %2592, -116
  %2594 = add i64 %2566, 17
  store i64 %2594, i64* %3, align 8
  %2595 = inttoptr i64 %2593 to i32*
  store i32 %2538, i32* %2595, align 4
  %2596 = load i64, i64* %3, align 8
  %2597 = add i64 %2596, 15
  store i64 %2597, i64* %3, align 8
  br label %block_.L_47ebe9

block_.L_47ebdf:                                  ; preds = %block_.L_47eb99
  %2598 = zext i32 %2534 to i64
  store i64 %2598, i64* %RAX.i1321, align 8
  %2599 = load i64, i64* %RBP.i, align 8
  %2600 = add i64 %2599, -116
  %2601 = add i64 %2566, 10
  store i64 %2601, i64* %3, align 8
  %2602 = inttoptr i64 %2600 to i32*
  store i32 %2534, i32* %2602, align 4
  %.pre241 = load i64, i64* %3, align 8
  br label %block_.L_47ebe9

block_.L_47ebe9:                                  ; preds = %block_.L_47ebdf, %block_47ebc9
  %2603 = phi i64 [ %.pre241, %block_.L_47ebdf ], [ %2597, %block_47ebc9 ]
  %2604 = load i64, i64* %RBP.i, align 8
  %2605 = add i64 %2604, -116
  %2606 = add i64 %2603, 3
  store i64 %2606, i64* %3, align 8
  %2607 = inttoptr i64 %2605 to i32*
  %2608 = load i32, i32* %2607, align 4
  %2609 = zext i32 %2608 to i64
  store i32 %2608, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i64 %2609, i64* %RAX.i1321, align 8
  %2610 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %2611 = sub i32 %2608, %2610
  %2612 = icmp ult i32 %2608, %2610
  %2613 = zext i1 %2612 to i8
  store i8 %2613, i8* %14, align 1
  %2614 = and i32 %2611, 255
  %2615 = tail call i32 @llvm.ctpop.i32(i32 %2614)
  %2616 = trunc i32 %2615 to i8
  %2617 = and i8 %2616, 1
  %2618 = xor i8 %2617, 1
  store i8 %2618, i8* %21, align 1
  %2619 = xor i32 %2610, %2608
  %2620 = xor i32 %2619, %2611
  %2621 = lshr i32 %2620, 4
  %2622 = trunc i32 %2621 to i8
  %2623 = and i8 %2622, 1
  store i8 %2623, i8* %27, align 1
  %2624 = icmp eq i32 %2611, 0
  %2625 = zext i1 %2624 to i8
  store i8 %2625, i8* %30, align 1
  %2626 = lshr i32 %2611, 31
  %2627 = trunc i32 %2626 to i8
  store i8 %2627, i8* %33, align 1
  %2628 = lshr i32 %2608, 31
  %2629 = lshr i32 %2610, 31
  %2630 = xor i32 %2629, %2628
  %2631 = xor i32 %2626, %2628
  %2632 = add nuw nsw i32 %2631, %2630
  %2633 = icmp eq i32 %2632, 2
  %2634 = zext i1 %2633 to i8
  store i8 %2634, i8* %39, align 1
  %2635 = icmp ne i8 %2627, 0
  %2636 = xor i1 %2635, %2633
  %.v430 = select i1 %2636, i64 30, i64 45
  %2637 = add i64 %2603, %.v430
  %2638 = add i64 %2637, 7
  store i64 %2638, i64* %3, align 8
  br i1 %2636, label %block_47ec07, label %block_.L_47ec16

block_47ec07:                                     ; preds = %block_.L_47ebe9
  store i64 %2609, i64* %RAX.i1321, align 8
  %2639 = add i64 %2604, -120
  %2640 = add i64 %2637, 10
  store i64 %2640, i64* %3, align 8
  %2641 = inttoptr i64 %2639 to i32*
  store i32 %2608, i32* %2641, align 4
  %2642 = load i64, i64* %3, align 8
  %2643 = add i64 %2642, 15
  store i64 %2643, i64* %3, align 8
  br label %block_.L_47ec20

block_.L_47ec16:                                  ; preds = %block_.L_47ebe9
  %2644 = zext i32 %2610 to i64
  store i64 %2644, i64* %RAX.i1321, align 8
  %2645 = add i64 %2604, -120
  %2646 = add i64 %2637, 10
  store i64 %2646, i64* %3, align 8
  %2647 = inttoptr i64 %2645 to i32*
  store i32 %2610, i32* %2647, align 4
  %.pre242 = load i64, i64* %3, align 8
  br label %block_.L_47ec20

block_.L_47ec20:                                  ; preds = %block_.L_47ec16, %block_47ec07
  %2648 = phi i64 [ %.pre242, %block_.L_47ec16 ], [ %2643, %block_47ec07 ]
  %2649 = load i64, i64* %RBP.i, align 8
  %2650 = add i64 %2649, -120
  %2651 = add i64 %2648, 3
  store i64 %2651, i64* %3, align 8
  %2652 = inttoptr i64 %2650 to i32*
  %2653 = load i32, i32* %2652, align 4
  store i32 %2653, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %2654 = load i32, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  %2655 = load i32, i32* bitcast (%G_0x6e51e0_type* @G_0x6e51e0 to i32*), align 8
  %2656 = sub i32 %2654, %2655
  %2657 = zext i32 %2656 to i64
  store i64 %2657, i64* %RAX.i1321, align 8
  %2658 = lshr i32 %2656, 31
  %2659 = lshr i32 %2654, 31
  %2660 = sub i32 %2656, %2653
  %2661 = icmp ult i32 %2656, %2653
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %14, align 1
  %2663 = and i32 %2660, 255
  %2664 = tail call i32 @llvm.ctpop.i32(i32 %2663)
  %2665 = trunc i32 %2664 to i8
  %2666 = and i8 %2665, 1
  %2667 = xor i8 %2666, 1
  store i8 %2667, i8* %21, align 1
  %2668 = xor i32 %2653, %2656
  %2669 = xor i32 %2668, %2660
  %2670 = lshr i32 %2669, 4
  %2671 = trunc i32 %2670 to i8
  %2672 = and i8 %2671, 1
  store i8 %2672, i8* %27, align 1
  %2673 = icmp eq i32 %2660, 0
  %2674 = zext i1 %2673 to i8
  store i8 %2674, i8* %30, align 1
  %2675 = lshr i32 %2660, 31
  %2676 = trunc i32 %2675 to i8
  store i8 %2676, i8* %33, align 1
  %2677 = lshr i32 %2653, 31
  %2678 = xor i32 %2677, %2658
  %2679 = xor i32 %2675, %2658
  %2680 = add nuw nsw i32 %2679, %2678
  %2681 = icmp eq i32 %2680, 2
  %2682 = zext i1 %2681 to i8
  store i8 %2682, i8* %39, align 1
  %2683 = icmp ne i8 %2676, 0
  %2684 = xor i1 %2683, %2681
  %.v431 = select i1 %2684, i64 37, i64 52
  %2685 = add i64 %2648, %.v431
  %2686 = add i64 %2685, 7
  store i64 %2686, i64* %3, align 8
  br i1 %2684, label %block_47ec45, label %block_.L_47ec54

block_47ec45:                                     ; preds = %block_.L_47ec20
  %2687 = zext i32 %2653 to i64
  store i64 %2687, i64* %RAX.i1321, align 8
  %2688 = add i64 %2649, -124
  %2689 = add i64 %2685, 10
  store i64 %2689, i64* %3, align 8
  %2690 = inttoptr i64 %2688 to i32*
  store i32 %2653, i32* %2690, align 4
  %2691 = load i64, i64* %3, align 8
  %2692 = add i64 %2691, 22
  store i64 %2692, i64* %3, align 8
  br label %block_.L_47ec65

block_.L_47ec54:                                  ; preds = %block_.L_47ec20
  %2693 = xor i32 %2658, %2659
  %2694 = lshr i32 %2655, 31
  %2695 = xor i32 %2694, %2659
  %2696 = add nuw nsw i32 %2693, %2695
  %2697 = icmp eq i32 %2696, 2
  %2698 = zext i1 %2697 to i8
  %2699 = trunc i32 %2658 to i8
  %2700 = icmp eq i32 %2656, 0
  %2701 = zext i1 %2700 to i8
  %2702 = xor i32 %2655, %2654
  %2703 = xor i32 %2702, %2656
  %2704 = lshr i32 %2703, 4
  %2705 = trunc i32 %2704 to i8
  %2706 = and i8 %2705, 1
  %2707 = and i32 %2656, 255
  %2708 = tail call i32 @llvm.ctpop.i32(i32 %2707)
  %2709 = trunc i32 %2708 to i8
  %2710 = and i8 %2709, 1
  %2711 = xor i8 %2710, 1
  %2712 = icmp ult i32 %2654, %2655
  %2713 = zext i1 %2712 to i8
  store i64 %2657, i64* %RAX.i1321, align 8
  store i8 %2713, i8* %14, align 1
  store i8 %2711, i8* %21, align 1
  store i8 %2706, i8* %27, align 1
  store i8 %2701, i8* %30, align 1
  store i8 %2699, i8* %33, align 1
  store i8 %2698, i8* %39, align 1
  %2714 = add i64 %2649, -124
  %2715 = add i64 %2685, 17
  store i64 %2715, i64* %3, align 8
  %2716 = inttoptr i64 %2714 to i32*
  store i32 %2656, i32* %2716, align 4
  %.pre243 = load i64, i64* %3, align 8
  br label %block_.L_47ec65

block_.L_47ec65:                                  ; preds = %block_.L_47ec54, %block_47ec45
  %2717 = phi i64 [ %.pre243, %block_.L_47ec54 ], [ %2692, %block_47ec45 ]
  %2718 = load i64, i64* %RBP.i, align 8
  %2719 = add i64 %2718, -124
  %2720 = add i64 %2717, 3
  store i64 %2720, i64* %3, align 8
  %2721 = inttoptr i64 %2719 to i32*
  %2722 = load i32, i32* %2721, align 4
  store i32 %2722, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %2723 = load i32, i32* bitcast (%G_0x710364_type* @G_0x710364 to i32*), align 8
  %2724 = zext i32 %2723 to i64
  store i64 %2724, i64* %RAX.i1321, align 8
  %2725 = sub i32 %2723, %2722
  %2726 = icmp ult i32 %2723, %2722
  %2727 = zext i1 %2726 to i8
  store i8 %2727, i8* %14, align 1
  %2728 = and i32 %2725, 255
  %2729 = tail call i32 @llvm.ctpop.i32(i32 %2728)
  %2730 = trunc i32 %2729 to i8
  %2731 = and i8 %2730, 1
  %2732 = xor i8 %2731, 1
  store i8 %2732, i8* %21, align 1
  %2733 = xor i32 %2722, %2723
  %2734 = xor i32 %2733, %2725
  %2735 = lshr i32 %2734, 4
  %2736 = trunc i32 %2735 to i8
  %2737 = and i8 %2736, 1
  store i8 %2737, i8* %27, align 1
  %2738 = icmp eq i32 %2725, 0
  %2739 = zext i1 %2738 to i8
  store i8 %2739, i8* %30, align 1
  %2740 = lshr i32 %2725, 31
  %2741 = trunc i32 %2740 to i8
  store i8 %2741, i8* %33, align 1
  %2742 = lshr i32 %2723, 31
  %2743 = lshr i32 %2722, 31
  %2744 = xor i32 %2743, %2742
  %2745 = xor i32 %2740, %2742
  %2746 = add nuw nsw i32 %2745, %2744
  %2747 = icmp eq i32 %2746, 2
  %2748 = zext i1 %2747 to i8
  store i8 %2748, i8* %39, align 1
  %2749 = icmp ne i8 %2741, 0
  %2750 = xor i1 %2749, %2747
  %.v432 = select i1 %2750, i64 30, i64 45
  %2751 = add i64 %2717, %.v432
  %2752 = add i64 %2751, 7
  store i64 %2752, i64* %3, align 8
  br i1 %2750, label %block_47ec83, label %block_.L_47ec92

block_47ec83:                                     ; preds = %block_.L_47ec65
  %2753 = zext i32 %2722 to i64
  store i64 %2753, i64* %RAX.i1321, align 8
  %2754 = add i64 %2718, -128
  %2755 = add i64 %2751, 10
  store i64 %2755, i64* %3, align 8
  %2756 = inttoptr i64 %2754 to i32*
  store i32 %2722, i32* %2756, align 4
  %2757 = load i64, i64* %3, align 8
  %2758 = add i64 %2757, 15
  store i64 %2758, i64* %3, align 8
  br label %block_.L_47ec9c

block_.L_47ec92:                                  ; preds = %block_.L_47ec65
  store i64 %2724, i64* %RAX.i1321, align 8
  %2759 = add i64 %2718, -128
  %2760 = add i64 %2751, 10
  store i64 %2760, i64* %3, align 8
  %2761 = inttoptr i64 %2759 to i32*
  store i32 %2723, i32* %2761, align 4
  %.pre244 = load i64, i64* %3, align 8
  br label %block_.L_47ec9c

block_.L_47ec9c:                                  ; preds = %block_.L_47ec92, %block_47ec83
  %2762 = phi i64 [ %.pre244, %block_.L_47ec92 ], [ %2758, %block_47ec83 ]
  %2763 = load i64, i64* %RBP.i, align 8
  %2764 = add i64 %2763, -128
  %2765 = add i64 %2762, 3
  store i64 %2765, i64* %3, align 8
  %2766 = inttoptr i64 %2764 to i32*
  %2767 = load i32, i32* %2766, align 4
  %2768 = zext i32 %2767 to i64
  store i64 %2768, i64* %RAX.i1321, align 8
  %2769 = add i64 %2762, 10
  store i64 %2769, i64* %3, align 8
  store i32 %2767, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47eca6

block_.L_47eca6:                                  ; preds = %block_.L_47ec9c, %block_.L_47e9c7
  %2770 = phi i64 [ %2763, %block_.L_47ec9c ], [ %2169, %block_.L_47e9c7 ]
  %2771 = phi i32 [ %2767, %block_.L_47ec9c ], [ %2173, %block_.L_47e9c7 ]
  %2772 = phi i64 [ %2769, %block_.L_47ec9c ], [ %2175, %block_.L_47e9c7 ]
  %MEMORY.40 = phi %struct.Memory* [ %call2_47eba2, %block_.L_47ec9c ], [ %2, %block_.L_47e9c7 ]
  %2773 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2773, i64* %RAX.i1321, align 8
  %2774 = add i64 %2773, 72600
  %2775 = add i64 %2772, 15
  store i64 %2775, i64* %3, align 8
  %2776 = inttoptr i64 %2774 to i32*
  %2777 = load i32, i32* %2776, align 4
  store i8 0, i8* %14, align 1
  %2778 = and i32 %2777, 255
  %2779 = tail call i32 @llvm.ctpop.i32(i32 %2778)
  %2780 = trunc i32 %2779 to i8
  %2781 = and i8 %2780, 1
  %2782 = xor i8 %2781, 1
  store i8 %2782, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2783 = icmp eq i32 %2777, 0
  %2784 = zext i1 %2783 to i8
  store i8 %2784, i8* %30, align 1
  %2785 = lshr i32 %2777, 31
  %2786 = trunc i32 %2785 to i8
  store i8 %2786, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v433 = select i1 %2783, i64 21, i64 135
  %2787 = add i64 %2772, %.v433
  store i64 %2787, i64* %3, align 8
  br i1 %2783, label %block_47ecbb, label %block_.L_47ed2d

block_47ecbb:                                     ; preds = %block_.L_47eca6
  %2788 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %2788, i64* %RAX.i1321, align 8
  %2789 = add i64 %2788, 1148
  %2790 = add i64 %2787, 15
  store i64 %2790, i64* %3, align 8
  %2791 = inttoptr i64 %2789 to i32*
  %2792 = load i32, i32* %2791, align 4
  store i8 0, i8* %14, align 1
  %2793 = and i32 %2792, 255
  %2794 = tail call i32 @llvm.ctpop.i32(i32 %2793)
  %2795 = trunc i32 %2794 to i8
  %2796 = and i8 %2795, 1
  %2797 = xor i8 %2796, 1
  store i8 %2797, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2798 = icmp eq i32 %2792, 0
  %2799 = zext i1 %2798 to i8
  store i8 %2799, i8* %30, align 1
  %2800 = lshr i32 %2792, 31
  %2801 = trunc i32 %2800 to i8
  store i8 %2801, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v434 = select i1 %2798, i64 95, i64 21
  %2802 = add i64 %2787, %.v434
  %2803 = add i64 %2802, 7
  store i64 %2803, i64* %3, align 8
  %2804 = zext i32 %2771 to i64
  store i64 %2804, i64* %RAX.i1321, align 8
  br i1 %2798, label %block_.L_47ed1a, label %block_47ecd0

block_47ecd0:                                     ; preds = %block_47ecbb
  %RCX.i2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 %2773, i64* %RCX.i2211, align 8
  %2805 = add i64 %2773, 72572
  %2806 = add i64 %2802, 21
  store i64 %2806, i64* %3, align 8
  %2807 = inttoptr i64 %2805 to i32*
  %2808 = load i32, i32* %2807, align 4
  %2809 = add i32 %2808, %2771
  %2810 = icmp ult i32 %2809, %2771
  %2811 = icmp ult i32 %2809, %2808
  %2812 = or i1 %2810, %2811
  %2813 = zext i1 %2812 to i8
  store i8 %2813, i8* %14, align 1
  %2814 = and i32 %2809, 255
  %2815 = tail call i32 @llvm.ctpop.i32(i32 %2814)
  %2816 = trunc i32 %2815 to i8
  %2817 = and i8 %2816, 1
  %2818 = xor i8 %2817, 1
  store i8 %2818, i8* %21, align 1
  %2819 = xor i32 %2808, %2771
  %2820 = xor i32 %2819, %2809
  %2821 = lshr i32 %2820, 4
  %2822 = trunc i32 %2821 to i8
  %2823 = and i8 %2822, 1
  store i8 %2823, i8* %27, align 1
  %2824 = icmp eq i32 %2809, 0
  %2825 = zext i1 %2824 to i8
  store i8 %2825, i8* %30, align 1
  %2826 = lshr i32 %2809, 31
  %2827 = trunc i32 %2826 to i8
  store i8 %2827, i8* %33, align 1
  %2828 = lshr i32 %2771, 31
  %2829 = lshr i32 %2808, 31
  %2830 = xor i32 %2826, %2828
  %2831 = xor i32 %2826, %2829
  %2832 = add nuw nsw i32 %2830, %2831
  %2833 = icmp eq i32 %2832, 2
  %2834 = zext i1 %2833 to i8
  store i8 %2834, i8* %39, align 1
  %2835 = add i64 %2802, 27
  store i64 %2835, i64* %3, align 8
  store i32 %2809, i32* %2807, align 4
  %2836 = load i64, i64* %3, align 8
  %2837 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  store i32 %2837, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %2838 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %2839 = zext i32 %2838 to i64
  store i32 %2838, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  store i64 %2839, i64* %RAX.i1321, align 8
  store i32 %2838, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  %2840 = add i64 %2836, 61
  store i64 %2840, i64* %3, align 8
  %.pre246.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_47ed28

block_.L_47ed1a:                                  ; preds = %block_47ecbb
  %2841 = add i64 %2802, 14
  store i64 %2841, i64* %3, align 8
  store i32 %2771, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  br label %block_.L_47ed28

block_.L_47ed28:                                  ; preds = %block_.L_47ed1a, %block_47ecd0
  %.pre246 = phi i64 [ %2770, %block_.L_47ed1a ], [ %.pre246.pre, %block_47ecd0 ]
  %2842 = phi i32 [ %2771, %block_.L_47ed1a ], [ %2838, %block_47ecd0 ]
  %2843 = phi i64 [ %2841, %block_.L_47ed1a ], [ %2840, %block_47ecd0 ]
  %2844 = add i64 %2843, 5
  store i64 %2844, i64* %3, align 8
  br label %block_.L_47ed2d

block_.L_47ed2d:                                  ; preds = %block_.L_47eca6, %block_.L_47ed28
  %2845 = phi i64 [ %.pre246, %block_.L_47ed28 ], [ %2770, %block_.L_47eca6 ]
  %2846 = phi i32 [ %2842, %block_.L_47ed28 ], [ %2771, %block_.L_47eca6 ]
  %2847 = phi i64 [ %2844, %block_.L_47ed28 ], [ %2787, %block_.L_47eca6 ]
  %2848 = zext i32 %2846 to i64
  store i64 %2848, i64* %RAX.i1321, align 8
  %2849 = add i64 %2845, -4
  %2850 = add i64 %2847, 10
  store i64 %2850, i64* %3, align 8
  %2851 = inttoptr i64 %2849 to i32*
  store i32 %2846, i32* %2851, align 4
  %2852 = load i64, i64* %3, align 8
  %2853 = add i64 %2852, 6470
  store i64 %2853, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47ed3c:                                  ; preds = %block_47e19a
  store i64 %47, i64* %RAX.i1321, align 8
  %2854 = add i64 %47, 24
  %2855 = add i64 %110, 12
  store i64 %2855, i64* %3, align 8
  %2856 = inttoptr i64 %2854 to i32*
  %2857 = load i32, i32* %2856, align 4
  store i8 0, i8* %14, align 1
  %2858 = and i32 %2857, 255
  %2859 = tail call i32 @llvm.ctpop.i32(i32 %2858)
  %2860 = trunc i32 %2859 to i8
  %2861 = and i8 %2860, 1
  %2862 = xor i8 %2861, 1
  store i8 %2862, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2863 = icmp eq i32 %2857, 0
  %2864 = zext i1 %2863 to i8
  store i8 %2864, i8* %30, align 1
  %2865 = lshr i32 %2857, 31
  %2866 = trunc i32 %2865 to i8
  store i8 %2866, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v463 = select i1 %2863, i64 18, i64 156
  %2867 = add i64 %110, %.v463
  store i64 %2867, i64* %3, align 8
  br i1 %2863, label %block_47ed4e, label %block_.L_47edd8

block_47ed4e:                                     ; preds = %block_.L_47ed3c
  store i64 %47, i64* %RAX.i1321, align 8
  %2868 = add i64 %47, 72612
  %2869 = add i64 %2867, 15
  store i64 %2869, i64* %3, align 8
  %2870 = inttoptr i64 %2868 to i32*
  %2871 = load i32, i32* %2870, align 4
  store i8 0, i8* %14, align 1
  %2872 = and i32 %2871, 255
  %2873 = tail call i32 @llvm.ctpop.i32(i32 %2872)
  %2874 = trunc i32 %2873 to i8
  %2875 = and i8 %2874, 1
  %2876 = xor i8 %2875, 1
  store i8 %2876, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2877 = icmp eq i32 %2871, 0
  %2878 = zext i1 %2877 to i8
  store i8 %2878, i8* %30, align 1
  %2879 = lshr i32 %2871, 31
  %2880 = trunc i32 %2879 to i8
  store i8 %2880, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v464 = select i1 %2877, i64 21, i64 138
  %2881 = add i64 %2867, %.v464
  store i64 %2881, i64* %3, align 8
  br i1 %2877, label %block_47ed63, label %block_.L_47edd8

block_47ed63:                                     ; preds = %block_47ed4e
  %2882 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %2882, i64* %RAX.i1321, align 8
  %2883 = add i64 %2882, 2880
  %2884 = add i64 %2881, 15
  store i64 %2884, i64* %3, align 8
  %2885 = inttoptr i64 %2883 to i32*
  %2886 = load i32, i32* %2885, align 4
  %2887 = add i32 %2886, -1
  %2888 = icmp eq i32 %2886, 0
  %2889 = zext i1 %2888 to i8
  store i8 %2889, i8* %14, align 1
  %2890 = and i32 %2887, 255
  %2891 = tail call i32 @llvm.ctpop.i32(i32 %2890)
  %2892 = trunc i32 %2891 to i8
  %2893 = and i8 %2892, 1
  %2894 = xor i8 %2893, 1
  store i8 %2894, i8* %21, align 1
  %2895 = xor i32 %2887, %2886
  %2896 = lshr i32 %2895, 4
  %2897 = trunc i32 %2896 to i8
  %2898 = and i8 %2897, 1
  store i8 %2898, i8* %27, align 1
  %2899 = icmp eq i32 %2887, 0
  %2900 = zext i1 %2899 to i8
  store i8 %2900, i8* %30, align 1
  %2901 = lshr i32 %2887, 31
  %2902 = trunc i32 %2901 to i8
  store i8 %2902, i8* %33, align 1
  %2903 = lshr i32 %2886, 31
  %2904 = xor i32 %2901, %2903
  %2905 = add nuw nsw i32 %2904, %2903
  %2906 = icmp eq i32 %2905, 2
  %2907 = zext i1 %2906 to i8
  store i8 %2907, i8* %39, align 1
  %.v465 = select i1 %2899, i64 21, i64 98
  %2908 = add i64 %2881, %.v465
  %2909 = add i64 %2908, 7
  store i64 %2909, i64* %3, align 8
  %2910 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %2911 = zext i32 %2910 to i64
  store i64 %2911, i64* %RAX.i1321, align 8
  br i1 %2899, label %block_47ed78, label %block_.L_47edc5

block_47ed78:                                     ; preds = %block_47ed63
  %RCX.i2162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 %47, i64* %RCX.i2162, align 8
  %2912 = add i64 %47, 72572
  %2913 = add i64 %2908, 21
  store i64 %2913, i64* %3, align 8
  %2914 = inttoptr i64 %2912 to i32*
  %2915 = load i32, i32* %2914, align 4
  %2916 = add i32 %2915, %2910
  %2917 = add i64 %2908, 27
  store i64 %2917, i64* %3, align 8
  store i32 %2916, i32* %2914, align 4
  %2918 = load i64, i64* %3, align 8
  %2919 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %2920 = add i32 %2919, 1
  %2921 = icmp eq i32 %2919, -1
  %2922 = icmp eq i32 %2920, 0
  %2923 = or i1 %2921, %2922
  %2924 = zext i1 %2923 to i8
  store i8 %2924, i8* %14, align 1
  %2925 = and i32 %2920, 255
  %2926 = tail call i32 @llvm.ctpop.i32(i32 %2925)
  %2927 = trunc i32 %2926 to i8
  %2928 = and i8 %2927, 1
  %2929 = xor i8 %2928, 1
  store i8 %2929, i8* %21, align 1
  %2930 = xor i32 %2920, %2919
  %2931 = lshr i32 %2930, 4
  %2932 = trunc i32 %2931 to i8
  %2933 = and i8 %2932, 1
  store i8 %2933, i8* %27, align 1
  %2934 = zext i1 %2922 to i8
  store i8 %2934, i8* %30, align 1
  %2935 = lshr i32 %2920, 31
  %2936 = trunc i32 %2935 to i8
  store i8 %2936, i8* %33, align 1
  %2937 = lshr i32 %2919, 31
  %2938 = xor i32 %2935, %2937
  %2939 = add nuw nsw i32 %2938, %2935
  %2940 = icmp eq i32 %2939, 2
  %2941 = zext i1 %2940 to i8
  store i8 %2941, i8* %39, align 1
  store i32 %2920, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %2942 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %2943 = zext i32 %2942 to i64
  store i32 %2942, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  store i64 %2943, i64* %RAX.i1321, align 8
  store i32 %2942, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  %2944 = add i64 %2918, 64
  store i64 %2944, i64* %3, align 8
  %.pre.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_47edd3

block_.L_47edc5:                                  ; preds = %block_47ed63
  %2945 = add i64 %2908, 14
  store i64 %2945, i64* %3, align 8
  store i32 %2910, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  br label %block_.L_47edd3

block_.L_47edd3:                                  ; preds = %block_.L_47edc5, %block_47ed78
  %.pre = phi i64 [ %82, %block_.L_47edc5 ], [ %.pre.pre, %block_47ed78 ]
  %2946 = phi i64 [ %2945, %block_.L_47edc5 ], [ %2944, %block_47ed78 ]
  %2947 = add i64 %2946, 5
  store i64 %2947, i64* %3, align 8
  br label %block_.L_47edd8

block_.L_47edd8:                                  ; preds = %block_47ed4e, %block_.L_47ed3c, %block_.L_47edd3
  %2948 = phi i64 [ %.pre, %block_.L_47edd3 ], [ %82, %block_47ed4e ], [ %82, %block_.L_47ed3c ]
  %2949 = phi i64 [ %2947, %block_.L_47edd3 ], [ %2881, %block_47ed4e ], [ %2867, %block_.L_47ed3c ]
  %2950 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %2951 = zext i32 %2950 to i64
  store i64 %2951, i64* %RAX.i1321, align 8
  %2952 = add i64 %2948, -4
  %2953 = add i64 %2949, 10
  store i64 %2953, i64* %3, align 8
  %2954 = inttoptr i64 %2952 to i32*
  store i32 %2950, i32* %2954, align 4
  %2955 = load i64, i64* %3, align 8
  %2956 = add i64 %2955, 6299
  store i64 %2956, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47ede7:                                  ; preds = %entry
  store i64 %47, i64* %RAX.i1321, align 8
  %2957 = add i64 %47, 24
  %2958 = add i64 %81, 12
  store i64 %2958, i64* %3, align 8
  %2959 = inttoptr i64 %2957 to i32*
  %2960 = load i32, i32* %2959, align 4
  %2961 = add i32 %2960, -2
  %2962 = icmp ult i32 %2960, 2
  %2963 = zext i1 %2962 to i8
  store i8 %2963, i8* %14, align 1
  %2964 = and i32 %2961, 255
  %2965 = tail call i32 @llvm.ctpop.i32(i32 %2964)
  %2966 = trunc i32 %2965 to i8
  %2967 = and i8 %2966, 1
  %2968 = xor i8 %2967, 1
  store i8 %2968, i8* %21, align 1
  %2969 = xor i32 %2961, %2960
  %2970 = lshr i32 %2969, 4
  %2971 = trunc i32 %2970 to i8
  %2972 = and i8 %2971, 1
  store i8 %2972, i8* %27, align 1
  %2973 = icmp eq i32 %2961, 0
  %2974 = zext i1 %2973 to i8
  store i8 %2974, i8* %30, align 1
  %2975 = lshr i32 %2961, 31
  %2976 = trunc i32 %2975 to i8
  store i8 %2976, i8* %33, align 1
  %2977 = lshr i32 %2960, 31
  %2978 = xor i32 %2975, %2977
  %2979 = add nuw nsw i32 %2978, %2977
  %2980 = icmp eq i32 %2979, 2
  %2981 = zext i1 %2980 to i8
  store i8 %2981, i8* %39, align 1
  %.v323 = select i1 %2973, i64 18, i64 47
  %2982 = add i64 %81, %.v323
  store i64 %2982, i64* %3, align 8
  br i1 %2973, label %block_47edf9, label %block_.L_47ee16

block_47edf9:                                     ; preds = %block_.L_47ede7
  %2983 = load i32, i32* bitcast (%G_0x6cd474_type* @G_0x6cd474 to i32*), align 8
  %2984 = zext i32 %2983 to i64
  store i32 %2983, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i64 %2984, i64* %RAX.i1321, align 8
  %2985 = load i64, i64* %RBP.i, align 8
  %2986 = add i64 %2985, -4
  %2987 = add i64 %2982, 24
  store i64 %2987, i64* %3, align 8
  %2988 = inttoptr i64 %2986 to i32*
  store i32 %2983, i32* %2988, align 4
  %2989 = load i64, i64* %3, align 8
  %2990 = add i64 %2989, 6252
  store i64 %2990, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47ee16:                                  ; preds = %block_.L_47ede7
  store i64 %47, i64* %RAX.i1321, align 8
  %2991 = add i64 %2982, 12
  store i64 %2991, i64* %3, align 8
  %2992 = load i32, i32* %2959, align 4
  store i8 0, i8* %14, align 1
  %2993 = and i32 %2992, 255
  %2994 = tail call i32 @llvm.ctpop.i32(i32 %2993)
  %2995 = trunc i32 %2994 to i8
  %2996 = and i8 %2995, 1
  %2997 = xor i8 %2996, 1
  store i8 %2997, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2998 = icmp eq i32 %2992, 0
  %2999 = zext i1 %2998 to i8
  store i8 %2999, i8* %30, align 1
  %3000 = lshr i32 %2992, 31
  %3001 = trunc i32 %3000 to i8
  store i8 %3001, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v324 = select i1 %2998, i64 18, i64 89
  %3002 = add i64 %2982, %.v324
  store i64 %3002, i64* %3, align 8
  br i1 %2998, label %block_47ee28, label %block_.L_47ee6f

block_47ee28:                                     ; preds = %block_.L_47ee16
  store i64 %47, i64* %RAX.i1321, align 8
  %3003 = add i64 %47, 72612
  %3004 = add i64 %3002, 15
  store i64 %3004, i64* %3, align 8
  %3005 = inttoptr i64 %3003 to i32*
  %3006 = load i32, i32* %3005, align 4
  %3007 = add i32 %3006, -1
  %3008 = icmp eq i32 %3006, 0
  %3009 = zext i1 %3008 to i8
  store i8 %3009, i8* %14, align 1
  %3010 = and i32 %3007, 255
  %3011 = tail call i32 @llvm.ctpop.i32(i32 %3010)
  %3012 = trunc i32 %3011 to i8
  %3013 = and i8 %3012, 1
  %3014 = xor i8 %3013, 1
  store i8 %3014, i8* %21, align 1
  %3015 = xor i32 %3007, %3006
  %3016 = lshr i32 %3015, 4
  %3017 = trunc i32 %3016 to i8
  %3018 = and i8 %3017, 1
  store i8 %3018, i8* %27, align 1
  %3019 = icmp eq i32 %3007, 0
  %3020 = zext i1 %3019 to i8
  store i8 %3020, i8* %30, align 1
  %3021 = lshr i32 %3007, 31
  %3022 = trunc i32 %3021 to i8
  store i8 %3022, i8* %33, align 1
  %3023 = lshr i32 %3006, 31
  %3024 = xor i32 %3021, %3023
  %3025 = add nuw nsw i32 %3024, %3023
  %3026 = icmp eq i32 %3025, 2
  %3027 = zext i1 %3026 to i8
  store i8 %3027, i8* %39, align 1
  %.v419 = select i1 %3019, i64 21, i64 71
  %3028 = add i64 %3002, %.v419
  store i64 %3028, i64* %3, align 8
  br i1 %3019, label %block_47ee3d, label %block_.L_47ee6f

block_47ee3d:                                     ; preds = %block_47ee28
  store i64 %47, i64* %RAX.i1321, align 8
  %3029 = add i64 %47, 72600
  %3030 = add i64 %3028, 15
  store i64 %3030, i64* %3, align 8
  %3031 = inttoptr i64 %3029 to i32*
  %3032 = load i32, i32* %3031, align 4
  %3033 = add i32 %3032, -1
  %3034 = icmp eq i32 %3032, 0
  %3035 = zext i1 %3034 to i8
  store i8 %3035, i8* %14, align 1
  %3036 = and i32 %3033, 255
  %3037 = tail call i32 @llvm.ctpop.i32(i32 %3036)
  %3038 = trunc i32 %3037 to i8
  %3039 = and i8 %3038, 1
  %3040 = xor i8 %3039, 1
  store i8 %3040, i8* %21, align 1
  %3041 = xor i32 %3033, %3032
  %3042 = lshr i32 %3041, 4
  %3043 = trunc i32 %3042 to i8
  %3044 = and i8 %3043, 1
  store i8 %3044, i8* %27, align 1
  %3045 = icmp eq i32 %3033, 0
  %3046 = zext i1 %3045 to i8
  store i8 %3046, i8* %30, align 1
  %3047 = lshr i32 %3033, 31
  %3048 = trunc i32 %3047 to i8
  store i8 %3048, i8* %33, align 1
  %3049 = lshr i32 %3032, 31
  %3050 = xor i32 %3047, %3049
  %3051 = add nuw nsw i32 %3050, %3049
  %3052 = icmp eq i32 %3051, 2
  %3053 = zext i1 %3052 to i8
  store i8 %3053, i8* %39, align 1
  %.v420 = select i1 %3045, i64 21, i64 50
  %3054 = add i64 %3028, %.v420
  store i64 %3054, i64* %3, align 8
  br i1 %3045, label %block_47ee52, label %block_.L_47ee6f

block_47ee52:                                     ; preds = %block_47ee3d
  %3055 = load i32, i32* bitcast (%G_0x6cd474_type* @G_0x6cd474 to i32*), align 8
  %3056 = zext i32 %3055 to i64
  store i32 %3055, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i64 %3056, i64* %RAX.i1321, align 8
  %3057 = load i64, i64* %RBP.i, align 8
  %3058 = add i64 %3057, -4
  %3059 = add i64 %3054, 24
  store i64 %3059, i64* %3, align 8
  %3060 = inttoptr i64 %3058 to i32*
  store i32 %3055, i32* %3060, align 4
  %3061 = load i64, i64* %3, align 8
  %3062 = add i64 %3061, 6163
  store i64 %3062, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47ee6f:                                  ; preds = %block_47ee3d, %block_47ee28, %block_.L_47ee16
  %3063 = phi i64 [ %3054, %block_47ee3d ], [ %3028, %block_47ee28 ], [ %3002, %block_.L_47ee16 ]
  store i64 %47, i64* %RAX.i1321, align 8
  %3064 = add i64 %3063, 12
  store i64 %3064, i64* %3, align 8
  %3065 = load i32, i32* %2959, align 4
  %3066 = add i32 %3065, -1
  %3067 = icmp eq i32 %3065, 0
  %3068 = zext i1 %3067 to i8
  store i8 %3068, i8* %14, align 1
  %3069 = and i32 %3066, 255
  %3070 = tail call i32 @llvm.ctpop.i32(i32 %3069)
  %3071 = trunc i32 %3070 to i8
  %3072 = and i8 %3071, 1
  %3073 = xor i8 %3072, 1
  store i8 %3073, i8* %21, align 1
  %3074 = xor i32 %3066, %3065
  %3075 = lshr i32 %3074, 4
  %3076 = trunc i32 %3075 to i8
  %3077 = and i8 %3076, 1
  store i8 %3077, i8* %27, align 1
  %3078 = icmp eq i32 %3066, 0
  %3079 = zext i1 %3078 to i8
  store i8 %3079, i8* %30, align 1
  %3080 = lshr i32 %3066, 31
  %3081 = trunc i32 %3080 to i8
  store i8 %3081, i8* %33, align 1
  %3082 = lshr i32 %3065, 31
  %3083 = xor i32 %3080, %3082
  %3084 = add nuw nsw i32 %3083, %3082
  %3085 = icmp eq i32 %3084, 2
  %3086 = zext i1 %3085 to i8
  store i8 %3086, i8* %39, align 1
  %.v325 = select i1 %3078, i64 18, i64 1530
  %3087 = add i64 %3063, %.v325
  store i64 %3087, i64* %3, align 8
  br i1 %3078, label %block_47ee81, label %block_.L_47f469

block_47ee81:                                     ; preds = %block_.L_47ee6f
  %3088 = load i64, i64* %RBP.i, align 8
  %3089 = add i64 %3088, -8
  %3090 = add i64 %3087, 4
  store i64 %3090, i64* %3, align 8
  %3091 = inttoptr i64 %3089 to i32*
  %3092 = load i32, i32* %3091, align 4
  store i8 0, i8* %14, align 1
  %3093 = and i32 %3092, 255
  %3094 = tail call i32 @llvm.ctpop.i32(i32 %3093)
  %3095 = trunc i32 %3094 to i8
  %3096 = and i8 %3095, 1
  %3097 = xor i8 %3096, 1
  store i8 %3097, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3098 = icmp eq i32 %3092, 0
  %3099 = zext i1 %3098 to i8
  store i8 %3099, i8* %30, align 1
  %3100 = lshr i32 %3092, 31
  %3101 = trunc i32 %3100 to i8
  store i8 %3101, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v395 = select i1 %3098, i64 10, i64 31
  %3102 = add i64 %3087, %.v395
  store i64 %3102, i64* %3, align 8
  br i1 %3098, label %block_47ee8b, label %block_.L_47eea0

block_47ee8b:                                     ; preds = %block_47ee81
  store i64 %47, i64* %RAX.i1321, align 8
  %3103 = add i64 %47, 72600
  %3104 = add i64 %3102, 15
  store i64 %3104, i64* %3, align 8
  %3105 = inttoptr i64 %3103 to i32*
  %3106 = load i32, i32* %3105, align 4
  store i8 0, i8* %14, align 1
  %3107 = and i32 %3106, 255
  %3108 = tail call i32 @llvm.ctpop.i32(i32 %3107)
  %3109 = trunc i32 %3108 to i8
  %3110 = and i8 %3109, 1
  %3111 = xor i8 %3110, 1
  store i8 %3111, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3112 = icmp eq i32 %3106, 0
  %3113 = zext i1 %3112 to i8
  store i8 %3113, i8* %30, align 1
  %3114 = lshr i32 %3106, 31
  %3115 = trunc i32 %3114 to i8
  store i8 %3115, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v418 = select i1 %3112, i64 21, i64 1487
  %3116 = add i64 %3102, %.v418
  store i64 %3116, i64* %3, align 8
  br i1 %3112, label %block_.L_47eea0, label %block_.L_47f45a

block_.L_47eea0:                                  ; preds = %block_47ee8b, %block_47ee81
  %3117 = phi i64 [ %3116, %block_47ee8b ], [ %3102, %block_47ee81 ]
  %3118 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %3118, i64* %RAX.i1321, align 8
  %3119 = add i64 %3118, 1236
  %3120 = add i64 %3117, 15
  store i64 %3120, i64* %3, align 8
  %3121 = inttoptr i64 %3119 to i32*
  %3122 = load i32, i32* %3121, align 4
  %3123 = add i32 %3122, -1
  %3124 = icmp eq i32 %3122, 0
  %3125 = zext i1 %3124 to i8
  store i8 %3125, i8* %14, align 1
  %3126 = and i32 %3123, 255
  %3127 = tail call i32 @llvm.ctpop.i32(i32 %3126)
  %3128 = trunc i32 %3127 to i8
  %3129 = and i8 %3128, 1
  %3130 = xor i8 %3129, 1
  store i8 %3130, i8* %21, align 1
  %3131 = xor i32 %3123, %3122
  %3132 = lshr i32 %3131, 4
  %3133 = trunc i32 %3132 to i8
  %3134 = and i8 %3133, 1
  store i8 %3134, i8* %27, align 1
  %3135 = icmp eq i32 %3123, 0
  %3136 = zext i1 %3135 to i8
  store i8 %3136, i8* %30, align 1
  %3137 = lshr i32 %3123, 31
  %3138 = trunc i32 %3137 to i8
  store i8 %3138, i8* %33, align 1
  %3139 = lshr i32 %3122, 31
  %3140 = xor i32 %3137, %3139
  %3141 = add nuw nsw i32 %3140, %3139
  %3142 = icmp eq i32 %3141, 2
  %3143 = zext i1 %3142 to i8
  store i8 %3143, i8* %39, align 1
  %.v396 = select i1 %3135, i64 21, i64 397
  %3144 = add i64 %3117, %.v396
  store i64 %3144, i64* %3, align 8
  br i1 %3135, label %block_47eeb5, label %block_.L_47f02d

block_47eeb5:                                     ; preds = %block_.L_47eea0
  store i64 %3118, i64* %RAX.i1321, align 8
  %3145 = add i64 %3118, 2880
  %3146 = add i64 %3144, 15
  store i64 %3146, i64* %3, align 8
  %3147 = inttoptr i64 %3145 to i32*
  %3148 = load i32, i32* %3147, align 4
  %3149 = add i32 %3148, -2
  %3150 = icmp ult i32 %3148, 2
  %3151 = zext i1 %3150 to i8
  store i8 %3151, i8* %14, align 1
  %3152 = and i32 %3149, 255
  %3153 = tail call i32 @llvm.ctpop.i32(i32 %3152)
  %3154 = trunc i32 %3153 to i8
  %3155 = and i8 %3154, 1
  %3156 = xor i8 %3155, 1
  store i8 %3156, i8* %21, align 1
  %3157 = xor i32 %3149, %3148
  %3158 = lshr i32 %3157, 4
  %3159 = trunc i32 %3158 to i8
  %3160 = and i8 %3159, 1
  store i8 %3160, i8* %27, align 1
  %3161 = icmp eq i32 %3149, 0
  %3162 = zext i1 %3161 to i8
  store i8 %3162, i8* %30, align 1
  %3163 = lshr i32 %3149, 31
  %3164 = trunc i32 %3163 to i8
  store i8 %3164, i8* %33, align 1
  %3165 = lshr i32 %3148, 31
  %3166 = xor i32 %3163, %3165
  %3167 = add nuw nsw i32 %3166, %3165
  %3168 = icmp eq i32 %3167, 2
  %3169 = zext i1 %3168 to i8
  store i8 %3169, i8* %39, align 1
  %.v411 = select i1 %3161, i64 42, i64 21
  %3170 = add i64 %3144, %.v411
  store i64 %3170, i64* %3, align 8
  br i1 %3161, label %block_.L_47eedf, label %block_47eeca

block_47eeca:                                     ; preds = %block_47eeb5
  store i64 %3118, i64* %RAX.i1321, align 8
  %3171 = add i64 %3118, 2884
  %3172 = add i64 %3170, 15
  store i64 %3172, i64* %3, align 8
  %3173 = inttoptr i64 %3171 to i32*
  %3174 = load i32, i32* %3173, align 4
  store i8 0, i8* %14, align 1
  %3175 = and i32 %3174, 255
  %3176 = tail call i32 @llvm.ctpop.i32(i32 %3175)
  %3177 = trunc i32 %3176 to i8
  %3178 = and i8 %3177, 1
  %3179 = xor i8 %3178, 1
  store i8 %3179, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3180 = icmp eq i32 %3174, 0
  %3181 = zext i1 %3180 to i8
  store i8 %3181, i8* %30, align 1
  %3182 = lshr i32 %3174, 31
  %3183 = trunc i32 %3182 to i8
  store i8 %3183, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v412 = select i1 %3180, i64 134, i64 21
  %3184 = add i64 %3170, %.v412
  store i64 %3184, i64* %3, align 8
  br i1 %3180, label %block_.L_47ef50, label %block_.L_47eedf

block_.L_47eedf:                                  ; preds = %block_47eeca, %block_47eeb5
  %3185 = phi i64 [ %3184, %block_47eeca ], [ %3170, %block_47eeb5 ]
  store i64 %47, i64* %RAX.i1321, align 8
  %3186 = add i64 %47, 72600
  %3187 = add i64 %3185, 15
  store i64 %3187, i64* %3, align 8
  %3188 = inttoptr i64 %3186 to i32*
  %3189 = load i32, i32* %3188, align 4
  store i8 0, i8* %14, align 1
  %3190 = and i32 %3189, 255
  %3191 = tail call i32 @llvm.ctpop.i32(i32 %3190)
  %3192 = trunc i32 %3191 to i8
  %3193 = and i8 %3192, 1
  %3194 = xor i8 %3193, 1
  store i8 %3194, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3195 = icmp eq i32 %3189, 0
  %3196 = zext i1 %3195 to i8
  store i8 %3196, i8* %30, align 1
  %3197 = lshr i32 %3189, 31
  %3198 = trunc i32 %3197 to i8
  store i8 %3198, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v413 = select i1 %3195, i64 21, i64 108
  %3199 = add i64 %3185, %.v413
  store i64 %3199, i64* %3, align 8
  br i1 %3195, label %block_47eef4, label %block_.L_47ef4b

block_47eef4:                                     ; preds = %block_.L_47eedf
  store i64 %47, i64* %RAX.i1321, align 8
  %3200 = add i64 %47, 72604
  %3201 = add i64 %3199, 15
  store i64 %3201, i64* %3, align 8
  %3202 = inttoptr i64 %3200 to i32*
  %3203 = load i32, i32* %3202, align 4
  %3204 = add i32 %3203, -1
  %3205 = icmp eq i32 %3203, 0
  %3206 = zext i1 %3205 to i8
  store i8 %3206, i8* %14, align 1
  %3207 = and i32 %3204, 255
  %3208 = tail call i32 @llvm.ctpop.i32(i32 %3207)
  %3209 = trunc i32 %3208 to i8
  %3210 = and i8 %3209, 1
  %3211 = xor i8 %3210, 1
  store i8 %3211, i8* %21, align 1
  %3212 = xor i32 %3204, %3203
  %3213 = lshr i32 %3212, 4
  %3214 = trunc i32 %3213 to i8
  %3215 = and i8 %3214, 1
  store i8 %3215, i8* %27, align 1
  %3216 = icmp eq i32 %3204, 0
  %3217 = zext i1 %3216 to i8
  store i8 %3217, i8* %30, align 1
  %3218 = lshr i32 %3204, 31
  %3219 = trunc i32 %3218 to i8
  store i8 %3219, i8* %33, align 1
  %3220 = lshr i32 %3203, 31
  %3221 = xor i32 %3218, %3220
  %3222 = add nuw nsw i32 %3221, %3220
  %3223 = icmp eq i32 %3222, 2
  %3224 = zext i1 %3223 to i8
  store i8 %3224, i8* %39, align 1
  %.v417 = select i1 %3216, i64 21, i64 54
  %3225 = add i64 %3199, %.v417
  %3226 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3227 = zext i32 %3226 to i64
  store i64 %3227, i64* %RAX.i1321, align 8
  store i32 %3226, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %3228 = add i64 %3225, 21
  store i64 %3228, i64* %3, align 8
  br i1 %3216, label %block_47ef09, label %block_.L_47ef2a

block_47ef09:                                     ; preds = %block_47eef4
  %3229 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %3230 = zext i32 %3229 to i64
  store i64 %3230, i64* %RAX.i1321, align 8
  store i32 %3229, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3231 = add i64 %3225, 61
  store i64 %3231, i64* %3, align 8
  br label %block_.L_47ef46

block_.L_47ef2a:                                  ; preds = %block_47eef4
  %3232 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %3233 = zext i32 %3232 to i64
  store i64 %3233, i64* %RAX.i1321, align 8
  %3234 = add i64 %3225, 28
  store i64 %3234, i64* %3, align 8
  store i32 %3232, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  br label %block_.L_47ef46

block_.L_47ef46:                                  ; preds = %block_.L_47ef2a, %block_47ef09
  %3235 = phi i64 [ %3234, %block_.L_47ef2a ], [ %3231, %block_47ef09 ]
  %3236 = add i64 %3235, 5
  store i64 %3236, i64* %3, align 8
  br label %block_.L_47ef4b

block_.L_47ef4b:                                  ; preds = %block_.L_47eedf, %block_.L_47ef46
  %3237 = phi i64 [ %3236, %block_.L_47ef46 ], [ %3199, %block_.L_47eedf ]
  %3238 = add i64 %3237, 5
  store i64 %3238, i64* %3, align 8
  br label %block_.L_47ef50

block_.L_47ef50:                                  ; preds = %block_.L_47ef4b, %block_47eeca
  %3239 = phi i64 [ %3238, %block_.L_47ef4b ], [ %3184, %block_47eeca ]
  %3240 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %3241 = zext i32 %3240 to i64
  store i64 %3241, i64* %RAX.i1321, align 8
  %3242 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3243 = sub i32 %3240, %3242
  %3244 = icmp ult i32 %3240, %3242
  %3245 = zext i1 %3244 to i8
  store i8 %3245, i8* %14, align 1
  %3246 = and i32 %3243, 255
  %3247 = tail call i32 @llvm.ctpop.i32(i32 %3246)
  %3248 = trunc i32 %3247 to i8
  %3249 = and i8 %3248, 1
  %3250 = xor i8 %3249, 1
  store i8 %3250, i8* %21, align 1
  %3251 = xor i32 %3242, %3240
  %3252 = xor i32 %3251, %3243
  %3253 = lshr i32 %3252, 4
  %3254 = trunc i32 %3253 to i8
  %3255 = and i8 %3254, 1
  store i8 %3255, i8* %27, align 1
  %3256 = icmp eq i32 %3243, 0
  %3257 = zext i1 %3256 to i8
  store i8 %3257, i8* %30, align 1
  %3258 = lshr i32 %3243, 31
  %3259 = trunc i32 %3258 to i8
  store i8 %3259, i8* %33, align 1
  %3260 = lshr i32 %3240, 31
  %3261 = lshr i32 %3242, 31
  %3262 = xor i32 %3261, %3260
  %3263 = xor i32 %3258, %3260
  %3264 = add nuw nsw i32 %3263, %3262
  %3265 = icmp eq i32 %3264, 2
  %3266 = zext i1 %3265 to i8
  store i8 %3266, i8* %39, align 1
  %.v414 = select i1 %3256, i64 20, i64 42
  %3267 = add i64 %3239, %.v414
  store i64 %3267, i64* %3, align 8
  br i1 %3256, label %block_47ef64, label %block_.L_47ef7a

block_47ef64:                                     ; preds = %block_.L_47ef50
  %3268 = add i32 %3240, 2
  %3269 = zext i32 %3268 to i64
  store i64 %3269, i64* %RAX.i1321, align 8
  %3270 = icmp ugt i32 %3240, -3
  %3271 = zext i1 %3270 to i8
  store i8 %3271, i8* %14, align 1
  %3272 = and i32 %3268, 255
  %3273 = tail call i32 @llvm.ctpop.i32(i32 %3272)
  %3274 = trunc i32 %3273 to i8
  %3275 = and i8 %3274, 1
  %3276 = xor i8 %3275, 1
  store i8 %3276, i8* %21, align 1
  %3277 = xor i32 %3268, %3240
  %3278 = lshr i32 %3277, 4
  %3279 = trunc i32 %3278 to i8
  %3280 = and i8 %3279, 1
  store i8 %3280, i8* %27, align 1
  %3281 = icmp eq i32 %3268, 0
  %3282 = zext i1 %3281 to i8
  store i8 %3282, i8* %30, align 1
  %3283 = lshr i32 %3268, 31
  %3284 = trunc i32 %3283 to i8
  store i8 %3284, i8* %33, align 1
  %3285 = xor i32 %3283, %3260
  %3286 = add nuw nsw i32 %3285, %3283
  %3287 = icmp eq i32 %3286, 2
  %3288 = zext i1 %3287 to i8
  store i8 %3288, i8* %39, align 1
  store i32 %3268, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %3289 = add i64 %3267, 68
  store i64 %3289, i64* %3, align 8
  br label %block_.L_47efa8

block_.L_47ef7a:                                  ; preds = %block_.L_47ef50
  %3290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i2017 = getelementptr inbounds %union.anon, %union.anon* %3290, i64 0, i32 0
  %3291 = add i32 %3242, %3240
  %3292 = zext i32 %3291 to i64
  store i64 %3292, i64* %RCX.i2017, align 8
  %3293 = icmp ult i32 %3291, %3240
  %3294 = icmp ult i32 %3291, %3242
  %3295 = or i1 %3293, %3294
  %3296 = zext i1 %3295 to i8
  store i8 %3296, i8* %14, align 1
  %3297 = and i32 %3291, 255
  %3298 = tail call i32 @llvm.ctpop.i32(i32 %3297)
  %3299 = trunc i32 %3298 to i8
  %3300 = and i8 %3299, 1
  %3301 = xor i8 %3300, 1
  store i8 %3301, i8* %21, align 1
  %3302 = xor i32 %3251, %3291
  %3303 = lshr i32 %3302, 4
  %3304 = trunc i32 %3303 to i8
  %3305 = and i8 %3304, 1
  store i8 %3305, i8* %27, align 1
  %3306 = icmp eq i32 %3291, 0
  %3307 = zext i1 %3306 to i8
  store i8 %3307, i8* %30, align 1
  %3308 = lshr i32 %3291, 31
  %3309 = trunc i32 %3308 to i8
  store i8 %3309, i8* %33, align 1
  %3310 = xor i32 %3308, %3260
  %3311 = xor i32 %3308, %3261
  %3312 = add nuw nsw i32 %3310, %3311
  %3313 = icmp eq i32 %3312, 2
  %3314 = zext i1 %3313 to i8
  store i8 %3314, i8* %39, align 1
  %3315 = add i64 %3088, -132
  %3316 = add i64 %3267, 25
  store i64 %3316, i64* %3, align 8
  %3317 = inttoptr i64 %3315 to i32*
  store i32 2, i32* %3317, align 4
  %ECX.i2009 = bitcast %union.anon* %3290 to i32*
  %3318 = load i32, i32* %ECX.i2009, align 4
  %3319 = zext i32 %3318 to i64
  %3320 = load i64, i64* %3, align 8
  store i64 %3319, i64* %RAX.i1321, align 8
  %3321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3322 = sext i32 %3318 to i64
  %3323 = lshr i64 %3322, 32
  store i64 %3323, i64* %3321, align 8
  %3324 = load i64, i64* %RBP.i, align 8
  %3325 = add i64 %3324, -132
  %3326 = add i64 %3320, 9
  store i64 %3326, i64* %3, align 8
  %3327 = inttoptr i64 %3325 to i32*
  %3328 = load i32, i32* %3327, align 4
  %3329 = zext i32 %3328 to i64
  store i64 %3329, i64* %RCX.i2017, align 8
  %3330 = add i64 %3320, 11
  store i64 %3330, i64* %3, align 8
  %3331 = sext i32 %3328 to i64
  %3332 = shl nuw i64 %3323, 32
  %3333 = or i64 %3332, %3319
  %3334 = sdiv i64 %3333, %3331
  %3335 = shl i64 %3334, 32
  %3336 = ashr exact i64 %3335, 32
  %3337 = icmp eq i64 %3334, %3336
  br i1 %3337, label %3340, label %3338

; <label>:3338:                                   ; preds = %block_.L_47ef7a
  %3339 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3330, %struct.Memory* %2)
  %.pre247 = load i64, i64* %RAX.i1321, align 8
  %.pre248 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2002

; <label>:3340:                                   ; preds = %block_.L_47ef7a
  %3341 = srem i64 %3333, %3331
  %3342 = and i64 %3334, 4294967295
  store i64 %3342, i64* %RAX.i1321, align 8
  %3343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3344 = and i64 %3341, 4294967295
  store i64 %3344, i64* %3343, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__ecx.exit2002

routine_idivl__ecx.exit2002:                      ; preds = %3340, %3338
  %3345 = phi i64 [ %.pre248, %3338 ], [ %3330, %3340 ]
  %3346 = phi i64 [ %.pre247, %3338 ], [ %3342, %3340 ]
  %3347 = phi %struct.Memory* [ %3339, %3338 ], [ %2, %3340 ]
  %3348 = trunc i64 %3346 to i32
  %3349 = add i32 %3348, 1
  %3350 = zext i32 %3349 to i64
  store i64 %3350, i64* %RAX.i1321, align 8
  %3351 = icmp eq i32 %3348, -1
  %3352 = icmp eq i32 %3349, 0
  %3353 = or i1 %3351, %3352
  %3354 = zext i1 %3353 to i8
  store i8 %3354, i8* %14, align 1
  %3355 = and i32 %3349, 255
  %3356 = tail call i32 @llvm.ctpop.i32(i32 %3355)
  %3357 = trunc i32 %3356 to i8
  %3358 = and i8 %3357, 1
  %3359 = xor i8 %3358, 1
  store i8 %3359, i8* %21, align 1
  %3360 = xor i32 %3349, %3348
  %3361 = lshr i32 %3360, 4
  %3362 = trunc i32 %3361 to i8
  %3363 = and i8 %3362, 1
  store i8 %3363, i8* %27, align 1
  %3364 = zext i1 %3352 to i8
  store i8 %3364, i8* %30, align 1
  %3365 = lshr i32 %3349, 31
  %3366 = trunc i32 %3365 to i8
  store i8 %3366, i8* %33, align 1
  %3367 = lshr i32 %3348, 31
  %3368 = xor i32 %3365, %3367
  %3369 = add nuw nsw i32 %3368, %3365
  %3370 = icmp eq i32 %3369, 2
  %3371 = zext i1 %3370 to i8
  store i8 %3371, i8* %39, align 1
  %3372 = add i64 %3345, 10
  store i64 %3372, i64* %3, align 8
  store i32 %3349, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47efa8

block_.L_47efa8:                                  ; preds = %routine_idivl__ecx.exit2002, %block_47ef64
  %3373 = phi i32 [ %3349, %routine_idivl__ecx.exit2002 ], [ %3268, %block_47ef64 ]
  %3374 = phi i64 [ %3372, %routine_idivl__ecx.exit2002 ], [ %3289, %block_47ef64 ]
  %MEMORY.51 = phi %struct.Memory* [ %3347, %routine_idivl__ecx.exit2002 ], [ %2, %block_47ef64 ]
  %3375 = zext i32 %3373 to i64
  store i64 %3375, i64* %RAX.i1321, align 8
  %3376 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %3377 = sub i32 %3373, %3376
  %3378 = icmp ult i32 %3373, %3376
  %3379 = zext i1 %3378 to i8
  store i8 %3379, i8* %14, align 1
  %3380 = and i32 %3377, 255
  %3381 = tail call i32 @llvm.ctpop.i32(i32 %3380)
  %3382 = trunc i32 %3381 to i8
  %3383 = and i8 %3382, 1
  %3384 = xor i8 %3383, 1
  store i8 %3384, i8* %21, align 1
  %3385 = xor i32 %3376, %3373
  %3386 = xor i32 %3385, %3377
  %3387 = lshr i32 %3386, 4
  %3388 = trunc i32 %3387 to i8
  %3389 = and i8 %3388, 1
  store i8 %3389, i8* %27, align 1
  %3390 = icmp eq i32 %3377, 0
  %3391 = zext i1 %3390 to i8
  store i8 %3391, i8* %30, align 1
  %3392 = lshr i32 %3377, 31
  %3393 = trunc i32 %3392 to i8
  store i8 %3393, i8* %33, align 1
  %3394 = lshr i32 %3373, 31
  %3395 = lshr i32 %3376, 31
  %3396 = xor i32 %3395, %3394
  %3397 = xor i32 %3392, %3394
  %3398 = add nuw nsw i32 %3397, %3396
  %3399 = icmp eq i32 %3398, 2
  %3400 = zext i1 %3399 to i8
  store i8 %3400, i8* %39, align 1
  %3401 = icmp ne i8 %3393, 0
  %3402 = xor i1 %3401, %3399
  %.v415 = select i1 %3402, i64 20, i64 38
  %3403 = add i64 %3374, %.v415
  %3404 = add i64 %3403, 7
  store i64 %3404, i64* %3, align 8
  br i1 %3402, label %block_47efbc, label %block_.L_47efce

block_47efbc:                                     ; preds = %block_.L_47efa8
  store i64 %3375, i64* %RAX.i1321, align 8
  %3405 = load i64, i64* %RBP.i, align 8
  %3406 = add i64 %3405, -136
  %3407 = add i64 %3403, 13
  store i64 %3407, i64* %3, align 8
  %3408 = inttoptr i64 %3406 to i32*
  store i32 %3373, i32* %3408, align 4
  %3409 = load i64, i64* %3, align 8
  %3410 = add i64 %3409, 18
  store i64 %3410, i64* %3, align 8
  br label %block_.L_47efdb

block_.L_47efce:                                  ; preds = %block_.L_47efa8
  %3411 = zext i32 %3376 to i64
  store i64 %3411, i64* %RAX.i1321, align 8
  %3412 = load i64, i64* %RBP.i, align 8
  %3413 = add i64 %3412, -136
  %3414 = add i64 %3403, 13
  store i64 %3414, i64* %3, align 8
  %3415 = inttoptr i64 %3413 to i32*
  store i32 %3376, i32* %3415, align 4
  %.pre249 = load i64, i64* %3, align 8
  br label %block_.L_47efdb

block_.L_47efdb:                                  ; preds = %block_.L_47efce, %block_47efbc
  %3416 = phi i64 [ %.pre249, %block_.L_47efce ], [ %3410, %block_47efbc ]
  %3417 = load i64, i64* %RBP.i, align 8
  %3418 = add i64 %3417, -136
  %3419 = add i64 %3416, 6
  store i64 %3419, i64* %3, align 8
  %3420 = inttoptr i64 %3418 to i32*
  %3421 = load i32, i32* %3420, align 4
  store i32 %3421, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %3422 = load i32, i32* bitcast (%G_0x710364_type* @G_0x710364 to i32*), align 8
  %3423 = zext i32 %3422 to i64
  store i64 %3423, i64* %RAX.i1321, align 8
  %3424 = sub i32 %3422, %3421
  %3425 = icmp ult i32 %3422, %3421
  %3426 = zext i1 %3425 to i8
  store i8 %3426, i8* %14, align 1
  %3427 = and i32 %3424, 255
  %3428 = tail call i32 @llvm.ctpop.i32(i32 %3427)
  %3429 = trunc i32 %3428 to i8
  %3430 = and i8 %3429, 1
  %3431 = xor i8 %3430, 1
  store i8 %3431, i8* %21, align 1
  %3432 = xor i32 %3421, %3422
  %3433 = xor i32 %3432, %3424
  %3434 = lshr i32 %3433, 4
  %3435 = trunc i32 %3434 to i8
  %3436 = and i8 %3435, 1
  store i8 %3436, i8* %27, align 1
  %3437 = icmp eq i32 %3424, 0
  %3438 = zext i1 %3437 to i8
  store i8 %3438, i8* %30, align 1
  %3439 = lshr i32 %3424, 31
  %3440 = trunc i32 %3439 to i8
  store i8 %3440, i8* %33, align 1
  %3441 = lshr i32 %3422, 31
  %3442 = lshr i32 %3421, 31
  %3443 = xor i32 %3442, %3441
  %3444 = xor i32 %3439, %3441
  %3445 = add nuw nsw i32 %3444, %3443
  %3446 = icmp eq i32 %3445, 2
  %3447 = zext i1 %3446 to i8
  store i8 %3447, i8* %39, align 1
  %3448 = icmp ne i8 %3440, 0
  %3449 = xor i1 %3448, %3446
  %.v416 = select i1 %3449, i64 33, i64 51
  %3450 = add i64 %3416, %.v416
  %3451 = add i64 %3450, 7
  store i64 %3451, i64* %3, align 8
  br i1 %3449, label %block_47effc, label %block_.L_47f00e

block_47effc:                                     ; preds = %block_.L_47efdb
  %3452 = zext i32 %3421 to i64
  store i64 %3452, i64* %RAX.i1321, align 8
  %3453 = add i64 %3417, -140
  %3454 = add i64 %3450, 13
  store i64 %3454, i64* %3, align 8
  %3455 = inttoptr i64 %3453 to i32*
  store i32 %3421, i32* %3455, align 4
  %3456 = load i64, i64* %3, align 8
  %3457 = add i64 %3456, 18
  store i64 %3457, i64* %3, align 8
  br label %block_.L_47f01b

block_.L_47f00e:                                  ; preds = %block_.L_47efdb
  store i64 %3423, i64* %RAX.i1321, align 8
  %3458 = add i64 %3417, -140
  %3459 = add i64 %3450, 13
  store i64 %3459, i64* %3, align 8
  %3460 = inttoptr i64 %3458 to i32*
  store i32 %3422, i32* %3460, align 4
  %.pre250 = load i64, i64* %3, align 8
  br label %block_.L_47f01b

block_.L_47f01b:                                  ; preds = %block_.L_47f00e, %block_47effc
  %3461 = phi i64 [ %.pre250, %block_.L_47f00e ], [ %3457, %block_47effc ]
  %3462 = load i64, i64* %RBP.i, align 8
  %3463 = add i64 %3462, -140
  %3464 = add i64 %3461, 6
  store i64 %3464, i64* %3, align 8
  %3465 = inttoptr i64 %3463 to i32*
  %3466 = load i32, i32* %3465, align 4
  %3467 = zext i32 %3466 to i64
  store i64 %3467, i64* %RAX.i1321, align 8
  store i32 %3466, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %3468 = add i64 %3461, 1072
  store i64 %3468, i64* %3, align 8
  br label %block_.L_47f44b

block_.L_47f02d:                                  ; preds = %block_.L_47eea0
  %3469 = load i32, i32* bitcast (%G_0x70fce0_type* @G_0x70fce0 to i32*), align 8
  %3470 = add i32 %3469, 1
  %3471 = zext i32 %3470 to i64
  store i64 %3471, i64* %RAX.i1321, align 8
  %3472 = icmp eq i32 %3469, -1
  %3473 = icmp eq i32 %3470, 0
  %3474 = or i1 %3472, %3473
  %3475 = zext i1 %3474 to i8
  store i8 %3475, i8* %14, align 1
  %3476 = and i32 %3470, 255
  %3477 = tail call i32 @llvm.ctpop.i32(i32 %3476)
  %3478 = trunc i32 %3477 to i8
  %3479 = and i8 %3478, 1
  %3480 = xor i8 %3479, 1
  store i8 %3480, i8* %21, align 1
  %3481 = xor i32 %3470, %3469
  %3482 = lshr i32 %3481, 4
  %3483 = trunc i32 %3482 to i8
  %3484 = and i8 %3483, 1
  store i8 %3484, i8* %27, align 1
  %3485 = zext i1 %3473 to i8
  store i8 %3485, i8* %30, align 1
  %3486 = lshr i32 %3470, 31
  %3487 = trunc i32 %3486 to i8
  store i8 %3487, i8* %33, align 1
  %3488 = lshr i32 %3469, 31
  %3489 = xor i32 %3486, %3488
  %3490 = add nuw nsw i32 %3489, %3486
  %3491 = icmp eq i32 %3490, 2
  %3492 = zext i1 %3491 to i8
  store i8 %3492, i8* %39, align 1
  %3493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i1948 = getelementptr inbounds %union.anon, %union.anon* %3493, i64 0, i32 0
  store i64 %3118, i64* %RCX.i1948, align 8
  %3494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3495 = bitcast %union.anon* %45 to i32*
  %3496 = sext i32 %3470 to i64
  %3497 = lshr i64 %3496, 32
  store i64 %3497, i64* %3494, align 8
  %3498 = add i64 %3144, 25
  store i64 %3498, i64* %3, align 8
  %3499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %3500 = bitcast %union.anon* %3499 to i32*
  %3501 = load i32, i32* %3121, align 4
  %3502 = sext i32 %3501 to i64
  %3503 = shl nuw i64 %3497, 32
  %3504 = or i64 %3503, %3471
  %3505 = sdiv i64 %3504, %3502
  %3506 = shl i64 %3505, 32
  %3507 = ashr exact i64 %3506, 32
  %3508 = icmp eq i64 %3505, %3507
  br i1 %3508, label %3511, label %3509

; <label>:3509:                                   ; preds = %block_.L_47f02d
  %3510 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3498, %struct.Memory* %2)
  %.pre251 = load i64, i64* %RBP.i, align 8
  %.pre252 = load i32, i32* %3500, align 4
  %.pre253 = load i64, i64* %3, align 8
  br label %routine_idivl_0x4d4__rcx_.exit

; <label>:3511:                                   ; preds = %block_.L_47f02d
  %3512 = srem i64 %3504, %3502
  %3513 = and i64 %3505, 4294967295
  store i64 %3513, i64* %RAX.i1321, align 8
  %3514 = getelementptr inbounds %union.anon, %union.anon* %3499, i64 0, i32 0
  %3515 = and i64 %3512, 4294967295
  store i64 %3515, i64* %3514, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3516 = trunc i64 %3512 to i32
  br label %routine_idivl_0x4d4__rcx_.exit

routine_idivl_0x4d4__rcx_.exit:                   ; preds = %3511, %3509
  %3517 = phi i64 [ %.pre253, %3509 ], [ %3498, %3511 ]
  %3518 = phi i32 [ %.pre252, %3509 ], [ %3516, %3511 ]
  %3519 = phi i64 [ %.pre251, %3509 ], [ %3088, %3511 ]
  %3520 = phi %struct.Memory* [ %3510, %3509 ], [ %2, %3511 ]
  %3521 = add i64 %3519, -24
  %3522 = add i64 %3517, 3
  store i64 %3522, i64* %3, align 8
  %3523 = inttoptr i64 %3521 to i32*
  store i32 %3518, i32* %3523, align 4
  %3524 = load i64, i64* %RBP.i, align 8
  %3525 = add i64 %3524, -24
  %3526 = load i64, i64* %3, align 8
  %3527 = add i64 %3526, 4
  store i64 %3527, i64* %3, align 8
  %3528 = inttoptr i64 %3525 to i32*
  %3529 = load i32, i32* %3528, align 4
  store i8 0, i8* %14, align 1
  %3530 = and i32 %3529, 255
  %3531 = tail call i32 @llvm.ctpop.i32(i32 %3530)
  %3532 = trunc i32 %3531 to i8
  %3533 = and i8 %3532, 1
  %3534 = xor i8 %3533, 1
  store i8 %3534, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3535 = icmp eq i32 %3529, 0
  %3536 = zext i1 %3535 to i8
  store i8 %3536, i8* %30, align 1
  %3537 = lshr i32 %3529, 31
  %3538 = trunc i32 %3537 to i8
  store i8 %3538, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v397 = select i1 %3535, i64 10, i64 27
  %3539 = add i64 %3526, %.v397
  store i64 %3539, i64* %3, align 8
  br i1 %3535, label %block_47f053, label %block_.L_47f064

block_47f053:                                     ; preds = %routine_idivl_0x4d4__rcx_.exit
  %3540 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %3540, i64* %RAX.i1321, align 8
  %3541 = add i64 %3540, 1236
  %3542 = add i64 %3539, 14
  store i64 %3542, i64* %3, align 8
  %3543 = inttoptr i64 %3541 to i32*
  %3544 = load i32, i32* %3543, align 4
  %3545 = zext i32 %3544 to i64
  store i64 %3545, i64* %RCX.i1948, align 8
  %3546 = add i64 %3539, 17
  store i64 %3546, i64* %3, align 8
  store i32 %3544, i32* %3528, align 4
  %.pre254 = load i64, i64* %RBP.i, align 8
  %.pre255 = load i64, i64* %3, align 8
  br label %block_.L_47f064

block_.L_47f064:                                  ; preds = %routine_idivl_0x4d4__rcx_.exit, %block_47f053
  %3547 = phi i64 [ %.pre255, %block_47f053 ], [ %3539, %routine_idivl_0x4d4__rcx_.exit ]
  %3548 = phi i64 [ %.pre254, %block_47f053 ], [ %3524, %routine_idivl_0x4d4__rcx_.exit ]
  %3549 = add i64 %3548, -24
  %3550 = add i64 %3547, 4
  store i64 %3550, i64* %3, align 8
  %3551 = inttoptr i64 %3549 to i32*
  %3552 = load i32, i32* %3551, align 4
  %3553 = add i32 %3552, -1
  %3554 = icmp eq i32 %3552, 0
  %3555 = zext i1 %3554 to i8
  store i8 %3555, i8* %14, align 1
  %3556 = and i32 %3553, 255
  %3557 = tail call i32 @llvm.ctpop.i32(i32 %3556)
  %3558 = trunc i32 %3557 to i8
  %3559 = and i8 %3558, 1
  %3560 = xor i8 %3559, 1
  store i8 %3560, i8* %21, align 1
  %3561 = xor i32 %3553, %3552
  %3562 = lshr i32 %3561, 4
  %3563 = trunc i32 %3562 to i8
  %3564 = and i8 %3563, 1
  store i8 %3564, i8* %27, align 1
  %3565 = icmp eq i32 %3553, 0
  %3566 = zext i1 %3565 to i8
  store i8 %3566, i8* %30, align 1
  %3567 = lshr i32 %3553, 31
  %3568 = trunc i32 %3567 to i8
  store i8 %3568, i8* %33, align 1
  %3569 = lshr i32 %3552, 31
  %3570 = xor i32 %3567, %3569
  %3571 = add nuw nsw i32 %3570, %3569
  %3572 = icmp eq i32 %3571, 2
  %3573 = zext i1 %3572 to i8
  store i8 %3573, i8* %39, align 1
  %.v398 = select i1 %3565, i64 10, i64 170
  %3574 = add i64 %3547, %.v398
  store i64 %3574, i64* %3, align 8
  %3575 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  br i1 %3565, label %block_47f06e, label %block_.L_47f10e

block_47f06e:                                     ; preds = %block_.L_47f064
  store i64 %3575, i64* %RAX.i1321, align 8
  %3576 = add i64 %3575, 2880
  %3577 = add i64 %3574, 15
  store i64 %3577, i64* %3, align 8
  %3578 = inttoptr i64 %3576 to i32*
  %3579 = load i32, i32* %3578, align 4
  %3580 = add i32 %3579, -2
  %3581 = icmp ult i32 %3579, 2
  %3582 = zext i1 %3581 to i8
  store i8 %3582, i8* %14, align 1
  %3583 = and i32 %3580, 255
  %3584 = tail call i32 @llvm.ctpop.i32(i32 %3583)
  %3585 = trunc i32 %3584 to i8
  %3586 = and i8 %3585, 1
  %3587 = xor i8 %3586, 1
  store i8 %3587, i8* %21, align 1
  %3588 = xor i32 %3580, %3579
  %3589 = lshr i32 %3588, 4
  %3590 = trunc i32 %3589 to i8
  %3591 = and i8 %3590, 1
  store i8 %3591, i8* %27, align 1
  %3592 = icmp eq i32 %3580, 0
  %3593 = zext i1 %3592 to i8
  store i8 %3593, i8* %30, align 1
  %3594 = lshr i32 %3580, 31
  %3595 = trunc i32 %3594 to i8
  store i8 %3595, i8* %33, align 1
  %3596 = lshr i32 %3579, 31
  %3597 = xor i32 %3594, %3596
  %3598 = add nuw nsw i32 %3597, %3596
  %3599 = icmp eq i32 %3598, 2
  %3600 = zext i1 %3599 to i8
  store i8 %3600, i8* %39, align 1
  %.v407 = select i1 %3592, i64 42, i64 21
  %3601 = add i64 %3574, %.v407
  store i64 %3601, i64* %3, align 8
  br i1 %3592, label %block_.L_47f098, label %block_47f083

block_47f083:                                     ; preds = %block_47f06e
  store i64 %3575, i64* %RAX.i1321, align 8
  %3602 = add i64 %3575, 2884
  %3603 = add i64 %3601, 15
  store i64 %3603, i64* %3, align 8
  %3604 = inttoptr i64 %3602 to i32*
  %3605 = load i32, i32* %3604, align 4
  store i8 0, i8* %14, align 1
  %3606 = and i32 %3605, 255
  %3607 = tail call i32 @llvm.ctpop.i32(i32 %3606)
  %3608 = trunc i32 %3607 to i8
  %3609 = and i8 %3608, 1
  %3610 = xor i8 %3609, 1
  store i8 %3610, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3611 = icmp eq i32 %3605, 0
  %3612 = zext i1 %3611 to i8
  store i8 %3612, i8* %30, align 1
  %3613 = lshr i32 %3605, 31
  %3614 = trunc i32 %3613 to i8
  store i8 %3614, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v408 = select i1 %3611, i64 134, i64 21
  %3615 = add i64 %3601, %.v408
  store i64 %3615, i64* %3, align 8
  br i1 %3611, label %block_.L_47f109, label %block_.L_47f098

block_.L_47f098:                                  ; preds = %block_47f083, %block_47f06e
  %3616 = phi i64 [ %3615, %block_47f083 ], [ %3601, %block_47f06e ]
  %3617 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3617, i64* %RAX.i1321, align 8
  %3618 = add i64 %3617, 72600
  %3619 = add i64 %3616, 15
  store i64 %3619, i64* %3, align 8
  %3620 = inttoptr i64 %3618 to i32*
  %3621 = load i32, i32* %3620, align 4
  store i8 0, i8* %14, align 1
  %3622 = and i32 %3621, 255
  %3623 = tail call i32 @llvm.ctpop.i32(i32 %3622)
  %3624 = trunc i32 %3623 to i8
  %3625 = and i8 %3624, 1
  %3626 = xor i8 %3625, 1
  store i8 %3626, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3627 = icmp eq i32 %3621, 0
  %3628 = zext i1 %3627 to i8
  store i8 %3628, i8* %30, align 1
  %3629 = lshr i32 %3621, 31
  %3630 = trunc i32 %3629 to i8
  store i8 %3630, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v409 = select i1 %3627, i64 21, i64 108
  %3631 = add i64 %3616, %.v409
  store i64 %3631, i64* %3, align 8
  br i1 %3627, label %block_47f0ad, label %block_.L_47f104

block_47f0ad:                                     ; preds = %block_.L_47f098
  store i64 %3617, i64* %RAX.i1321, align 8
  %3632 = add i64 %3617, 72604
  %3633 = add i64 %3631, 15
  store i64 %3633, i64* %3, align 8
  %3634 = inttoptr i64 %3632 to i32*
  %3635 = load i32, i32* %3634, align 4
  %3636 = add i32 %3635, -1
  %3637 = icmp eq i32 %3635, 0
  %3638 = zext i1 %3637 to i8
  store i8 %3638, i8* %14, align 1
  %3639 = and i32 %3636, 255
  %3640 = tail call i32 @llvm.ctpop.i32(i32 %3639)
  %3641 = trunc i32 %3640 to i8
  %3642 = and i8 %3641, 1
  %3643 = xor i8 %3642, 1
  store i8 %3643, i8* %21, align 1
  %3644 = xor i32 %3636, %3635
  %3645 = lshr i32 %3644, 4
  %3646 = trunc i32 %3645 to i8
  %3647 = and i8 %3646, 1
  store i8 %3647, i8* %27, align 1
  %3648 = icmp eq i32 %3636, 0
  %3649 = zext i1 %3648 to i8
  store i8 %3649, i8* %30, align 1
  %3650 = lshr i32 %3636, 31
  %3651 = trunc i32 %3650 to i8
  store i8 %3651, i8* %33, align 1
  %3652 = lshr i32 %3635, 31
  %3653 = xor i32 %3650, %3652
  %3654 = add nuw nsw i32 %3653, %3652
  %3655 = icmp eq i32 %3654, 2
  %3656 = zext i1 %3655 to i8
  store i8 %3656, i8* %39, align 1
  %.v410 = select i1 %3648, i64 21, i64 54
  %3657 = add i64 %3631, %.v410
  %3658 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3659 = zext i32 %3658 to i64
  store i64 %3659, i64* %RAX.i1321, align 8
  store i32 %3658, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %3660 = add i64 %3657, 21
  store i64 %3660, i64* %3, align 8
  br i1 %3648, label %block_47f0c2, label %block_.L_47f0e3

block_47f0c2:                                     ; preds = %block_47f0ad
  %3661 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %3662 = zext i32 %3661 to i64
  store i64 %3662, i64* %RAX.i1321, align 8
  store i32 %3661, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3663 = add i64 %3657, 61
  store i64 %3663, i64* %3, align 8
  br label %block_.L_47f0ff

block_.L_47f0e3:                                  ; preds = %block_47f0ad
  %3664 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %3665 = zext i32 %3664 to i64
  store i64 %3665, i64* %RAX.i1321, align 8
  %3666 = add i64 %3657, 28
  store i64 %3666, i64* %3, align 8
  store i32 %3664, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  br label %block_.L_47f0ff

block_.L_47f0ff:                                  ; preds = %block_.L_47f0e3, %block_47f0c2
  %3667 = phi i64 [ %3666, %block_.L_47f0e3 ], [ %3663, %block_47f0c2 ]
  %3668 = add i64 %3667, 5
  store i64 %3668, i64* %3, align 8
  br label %block_.L_47f104

block_.L_47f104:                                  ; preds = %block_.L_47f098, %block_.L_47f0ff
  %3669 = phi i64 [ %3668, %block_.L_47f0ff ], [ %3631, %block_.L_47f098 ]
  %3670 = add i64 %3669, 5
  store i64 %3670, i64* %3, align 8
  br label %block_.L_47f109

block_.L_47f109:                                  ; preds = %block_.L_47f104, %block_47f083
  %3671 = phi i64 [ %3670, %block_.L_47f104 ], [ %3615, %block_47f083 ]
  %3672 = add i64 %3671, 5
  store i64 %3672, i64* %3, align 8
  br label %block_.L_47f10e

block_.L_47f10e:                                  ; preds = %block_.L_47f064, %block_.L_47f109
  %3673 = phi i64 [ %3672, %block_.L_47f109 ], [ %3574, %block_.L_47f064 ]
  %3674 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3675 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %3676 = sub i32 %3674, %3675
  %3677 = zext i32 %3676 to i64
  store i64 %3677, i64* %RAX.i1321, align 8
  %3678 = icmp ult i32 %3674, %3675
  %3679 = zext i1 %3678 to i8
  store i8 %3679, i8* %14, align 1
  %3680 = and i32 %3676, 255
  %3681 = tail call i32 @llvm.ctpop.i32(i32 %3680)
  %3682 = trunc i32 %3681 to i8
  %3683 = and i8 %3682, 1
  %3684 = xor i8 %3683, 1
  store i8 %3684, i8* %21, align 1
  %3685 = xor i32 %3675, %3674
  %3686 = xor i32 %3685, %3676
  %3687 = lshr i32 %3686, 4
  %3688 = trunc i32 %3687 to i8
  %3689 = and i8 %3688, 1
  store i8 %3689, i8* %27, align 1
  %3690 = icmp eq i32 %3676, 0
  %3691 = zext i1 %3690 to i8
  store i8 %3691, i8* %30, align 1
  %3692 = lshr i32 %3676, 31
  %3693 = trunc i32 %3692 to i8
  store i8 %3693, i8* %33, align 1
  %3694 = lshr i32 %3674, 31
  %3695 = lshr i32 %3675, 31
  %3696 = xor i32 %3695, %3694
  %3697 = xor i32 %3692, %3694
  %3698 = add nuw nsw i32 %3697, %3696
  %3699 = icmp eq i32 %3698, 2
  %3700 = zext i1 %3699 to i8
  store i8 %3700, i8* %39, align 1
  store i64 %3575, i64* %RCX.i1948, align 8
  %RDX.i1878 = getelementptr inbounds %union.anon, %union.anon* %3499, i64 0, i32 0
  %3701 = add i64 %3575, 1236
  %3702 = add i64 %3673, 29
  store i64 %3702, i64* %3, align 8
  %3703 = inttoptr i64 %3701 to i32*
  %3704 = load i32, i32* %3703, align 4
  %3705 = mul i32 %3704, -2
  %3706 = add i32 %3705, -3
  %3707 = zext i32 %3706 to i64
  store i64 %3707, i64* %RDX.i1878, align 8
  %3708 = lshr i32 %3706, 31
  %3709 = sub i32 %3676, %3706
  %3710 = icmp ult i32 %3676, %3706
  %3711 = zext i1 %3710 to i8
  store i8 %3711, i8* %14, align 1
  %3712 = and i32 %3709, 255
  %3713 = tail call i32 @llvm.ctpop.i32(i32 %3712)
  %3714 = trunc i32 %3713 to i8
  %3715 = and i8 %3714, 1
  %3716 = xor i8 %3715, 1
  store i8 %3716, i8* %21, align 1
  %3717 = xor i32 %3706, %3676
  %3718 = xor i32 %3717, %3709
  %3719 = lshr i32 %3718, 4
  %3720 = trunc i32 %3719 to i8
  %3721 = and i8 %3720, 1
  store i8 %3721, i8* %27, align 1
  %3722 = icmp eq i32 %3709, 0
  %3723 = zext i1 %3722 to i8
  store i8 %3723, i8* %30, align 1
  %3724 = lshr i32 %3709, 31
  %3725 = trunc i32 %3724 to i8
  store i8 %3725, i8* %33, align 1
  %3726 = xor i32 %3708, %3692
  %3727 = xor i32 %3724, %3692
  %3728 = add nuw nsw i32 %3727, %3726
  %3729 = icmp eq i32 %3728, 2
  %3730 = zext i1 %3729 to i8
  store i8 %3730, i8* %39, align 1
  %3731 = icmp ne i8 %3725, 0
  %3732 = xor i1 %3731, %3729
  %.demorgan316 = or i1 %3722, %3732
  %.v399 = select i1 %.demorgan316, i64 40, i64 52
  %3733 = add i64 %3673, %.v399
  store i64 %3733, i64* %3, align 8
  br i1 %.demorgan316, label %block_47f139, label %block_.L_47f145

block_47f139:                                     ; preds = %block_.L_47f10e
  %3734 = load i64, i64* %RBP.i, align 8
  %3735 = add i64 %3734, -28
  %3736 = add i64 %3733, 7
  store i64 %3736, i64* %3, align 8
  %3737 = inttoptr i64 %3735 to i32*
  store i32 -3, i32* %3737, align 4
  %3738 = load i64, i64* %3, align 8
  %3739 = add i64 %3738, 249
  br label %block_.L_47f239

block_.L_47f145:                                  ; preds = %block_.L_47f10e
  %3740 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3741 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %3742 = sub i32 %3740, %3741
  %3743 = zext i32 %3742 to i64
  store i64 %3743, i64* %RAX.i1321, align 8
  %3744 = icmp ult i32 %3740, %3741
  %3745 = zext i1 %3744 to i8
  store i8 %3745, i8* %14, align 1
  %3746 = and i32 %3742, 255
  %3747 = tail call i32 @llvm.ctpop.i32(i32 %3746)
  %3748 = trunc i32 %3747 to i8
  %3749 = and i8 %3748, 1
  %3750 = xor i8 %3749, 1
  store i8 %3750, i8* %21, align 1
  %3751 = xor i32 %3741, %3740
  %3752 = xor i32 %3751, %3742
  %3753 = lshr i32 %3752, 4
  %3754 = trunc i32 %3753 to i8
  %3755 = and i8 %3754, 1
  store i8 %3755, i8* %27, align 1
  %3756 = icmp eq i32 %3742, 0
  %3757 = zext i1 %3756 to i8
  store i8 %3757, i8* %30, align 1
  %3758 = lshr i32 %3742, 31
  %3759 = trunc i32 %3758 to i8
  store i8 %3759, i8* %33, align 1
  %3760 = lshr i32 %3740, 31
  %3761 = lshr i32 %3741, 31
  %3762 = xor i32 %3761, %3760
  %3763 = xor i32 %3758, %3760
  %3764 = add nuw nsw i32 %3763, %3762
  %3765 = icmp eq i32 %3764, 2
  %3766 = zext i1 %3765 to i8
  store i8 %3766, i8* %39, align 1
  %3767 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %3767, i64* %RCX.i1948, align 8
  %3768 = add i64 %3767, 1236
  %3769 = add i64 %3733, 29
  store i64 %3769, i64* %3, align 8
  %3770 = inttoptr i64 %3768 to i32*
  %3771 = load i32, i32* %3770, align 4
  %3772 = mul i32 %3771, -2
  %3773 = add i32 %3772, -2
  %3774 = zext i32 %3773 to i64
  store i64 %3774, i64* %RDX.i1878, align 8
  %3775 = lshr i32 %3773, 31
  %3776 = sub i32 %3742, %3773
  %3777 = icmp ult i32 %3742, %3773
  %3778 = zext i1 %3777 to i8
  store i8 %3778, i8* %14, align 1
  %3779 = and i32 %3776, 255
  %3780 = tail call i32 @llvm.ctpop.i32(i32 %3779)
  %3781 = trunc i32 %3780 to i8
  %3782 = and i8 %3781, 1
  %3783 = xor i8 %3782, 1
  store i8 %3783, i8* %21, align 1
  %3784 = xor i32 %3773, %3742
  %3785 = xor i32 %3784, %3776
  %3786 = lshr i32 %3785, 4
  %3787 = trunc i32 %3786 to i8
  %3788 = and i8 %3787, 1
  store i8 %3788, i8* %27, align 1
  %3789 = icmp eq i32 %3776, 0
  %3790 = zext i1 %3789 to i8
  store i8 %3790, i8* %30, align 1
  %3791 = lshr i32 %3776, 31
  %3792 = trunc i32 %3791 to i8
  store i8 %3792, i8* %33, align 1
  %3793 = xor i32 %3775, %3758
  %3794 = xor i32 %3791, %3758
  %3795 = add nuw nsw i32 %3794, %3793
  %3796 = icmp eq i32 %3795, 2
  %3797 = zext i1 %3796 to i8
  store i8 %3797, i8* %39, align 1
  %.v400 = select i1 %3789, i64 40, i64 52
  %3798 = add i64 %3733, %.v400
  store i64 %3798, i64* %3, align 8
  br i1 %3789, label %block_47f170, label %block_.L_47f17c

block_47f170:                                     ; preds = %block_.L_47f145
  %3799 = load i64, i64* %RBP.i, align 8
  %3800 = add i64 %3799, -28
  %3801 = add i64 %3798, 7
  store i64 %3801, i64* %3, align 8
  %3802 = inttoptr i64 %3800 to i32*
  store i32 -2, i32* %3802, align 4
  %3803 = load i64, i64* %3, align 8
  %3804 = add i64 %3803, 189
  br label %block_.L_47f234

block_.L_47f17c:                                  ; preds = %block_.L_47f145
  %3805 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3806 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %3807 = sub i32 %3805, %3806
  %3808 = zext i32 %3807 to i64
  store i64 %3808, i64* %RAX.i1321, align 8
  %3809 = icmp ult i32 %3805, %3806
  %3810 = zext i1 %3809 to i8
  store i8 %3810, i8* %14, align 1
  %3811 = and i32 %3807, 255
  %3812 = tail call i32 @llvm.ctpop.i32(i32 %3811)
  %3813 = trunc i32 %3812 to i8
  %3814 = and i8 %3813, 1
  %3815 = xor i8 %3814, 1
  store i8 %3815, i8* %21, align 1
  %3816 = xor i32 %3806, %3805
  %3817 = xor i32 %3816, %3807
  %3818 = lshr i32 %3817, 4
  %3819 = trunc i32 %3818 to i8
  %3820 = and i8 %3819, 1
  store i8 %3820, i8* %27, align 1
  %3821 = icmp eq i32 %3807, 0
  %3822 = zext i1 %3821 to i8
  store i8 %3822, i8* %30, align 1
  %3823 = lshr i32 %3807, 31
  %3824 = trunc i32 %3823 to i8
  store i8 %3824, i8* %33, align 1
  %3825 = lshr i32 %3805, 31
  %3826 = lshr i32 %3806, 31
  %3827 = xor i32 %3826, %3825
  %3828 = xor i32 %3823, %3825
  %3829 = add nuw nsw i32 %3828, %3827
  %3830 = icmp eq i32 %3829, 2
  %3831 = zext i1 %3830 to i8
  store i8 %3831, i8* %39, align 1
  %3832 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %3832, i64* %RCX.i1948, align 8
  %3833 = add i64 %3832, 1236
  %3834 = add i64 %3798, 29
  store i64 %3834, i64* %3, align 8
  %3835 = inttoptr i64 %3833 to i32*
  %3836 = load i32, i32* %3835, align 4
  %3837 = mul i32 %3836, -2
  %3838 = add i32 %3837, -1
  %3839 = zext i32 %3838 to i64
  store i64 %3839, i64* %RDX.i1878, align 8
  %3840 = lshr i32 %3838, 31
  %3841 = sub i32 %3807, %3838
  %3842 = icmp ult i32 %3807, %3838
  %3843 = zext i1 %3842 to i8
  store i8 %3843, i8* %14, align 1
  %3844 = and i32 %3841, 255
  %3845 = tail call i32 @llvm.ctpop.i32(i32 %3844)
  %3846 = trunc i32 %3845 to i8
  %3847 = and i8 %3846, 1
  %3848 = xor i8 %3847, 1
  store i8 %3848, i8* %21, align 1
  %3849 = xor i32 %3838, %3807
  %3850 = xor i32 %3849, %3841
  %3851 = lshr i32 %3850, 4
  %3852 = trunc i32 %3851 to i8
  %3853 = and i8 %3852, 1
  store i8 %3853, i8* %27, align 1
  %3854 = icmp eq i32 %3841, 0
  %3855 = zext i1 %3854 to i8
  store i8 %3855, i8* %30, align 1
  %3856 = lshr i32 %3841, 31
  %3857 = trunc i32 %3856 to i8
  store i8 %3857, i8* %33, align 1
  %3858 = xor i32 %3840, %3823
  %3859 = xor i32 %3856, %3823
  %3860 = add nuw nsw i32 %3859, %3858
  %3861 = icmp eq i32 %3860, 2
  %3862 = zext i1 %3861 to i8
  store i8 %3862, i8* %39, align 1
  %.v401 = select i1 %3854, i64 40, i64 52
  %3863 = add i64 %3798, %.v401
  store i64 %3863, i64* %3, align 8
  br i1 %3854, label %block_47f1a7, label %block_.L_47f1b3

block_47f1a7:                                     ; preds = %block_.L_47f17c
  %3864 = load i64, i64* %RBP.i, align 8
  %3865 = add i64 %3864, -28
  %3866 = add i64 %3863, 7
  store i64 %3866, i64* %3, align 8
  %3867 = inttoptr i64 %3865 to i32*
  store i32 -1, i32* %3867, align 4
  %3868 = load i64, i64* %3, align 8
  %3869 = add i64 %3868, 129
  br label %block_.L_47f22f

block_.L_47f1b3:                                  ; preds = %block_.L_47f17c
  %3870 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3871 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %3872 = sub i32 %3870, %3871
  %3873 = zext i32 %3872 to i64
  store i64 %3873, i64* %RAX.i1321, align 8
  %3874 = icmp ult i32 %3870, %3871
  %3875 = zext i1 %3874 to i8
  store i8 %3875, i8* %14, align 1
  %3876 = and i32 %3872, 255
  %3877 = tail call i32 @llvm.ctpop.i32(i32 %3876)
  %3878 = trunc i32 %3877 to i8
  %3879 = and i8 %3878, 1
  %3880 = xor i8 %3879, 1
  store i8 %3880, i8* %21, align 1
  %3881 = xor i32 %3871, %3870
  %3882 = xor i32 %3881, %3872
  %3883 = lshr i32 %3882, 4
  %3884 = trunc i32 %3883 to i8
  %3885 = and i8 %3884, 1
  store i8 %3885, i8* %27, align 1
  %3886 = icmp eq i32 %3872, 0
  %3887 = zext i1 %3886 to i8
  store i8 %3887, i8* %30, align 1
  %3888 = lshr i32 %3872, 31
  %3889 = trunc i32 %3888 to i8
  store i8 %3889, i8* %33, align 1
  %3890 = lshr i32 %3870, 31
  %3891 = lshr i32 %3871, 31
  %3892 = xor i32 %3891, %3890
  %3893 = xor i32 %3888, %3890
  %3894 = add nuw nsw i32 %3893, %3892
  %3895 = icmp eq i32 %3894, 2
  %3896 = zext i1 %3895 to i8
  store i8 %3896, i8* %39, align 1
  %3897 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %3897, i64* %RCX.i1948, align 8
  %3898 = add i64 %3897, 1236
  %3899 = add i64 %3863, 29
  store i64 %3899, i64* %3, align 8
  %3900 = inttoptr i64 %3898 to i32*
  %3901 = load i32, i32* %3900, align 4
  %3902 = sext i32 %3901 to i64
  %3903 = mul nsw i64 %3902, -2
  %3904 = and i64 %3903, 4294967294
  store i64 %3904, i64* %RDX.i1878, align 8
  %3905 = trunc i64 %3903 to i32
  %3906 = sub i32 %3872, %3905
  %3907 = icmp ult i32 %3872, %3905
  %3908 = zext i1 %3907 to i8
  store i8 %3908, i8* %14, align 1
  %3909 = and i32 %3906, 255
  %3910 = tail call i32 @llvm.ctpop.i32(i32 %3909)
  %3911 = trunc i32 %3910 to i8
  %3912 = and i8 %3911, 1
  %3913 = xor i8 %3912, 1
  store i8 %3913, i8* %21, align 1
  %3914 = xor i32 %3905, %3872
  %3915 = xor i32 %3914, %3906
  %3916 = lshr i32 %3915, 4
  %3917 = trunc i32 %3916 to i8
  %3918 = and i8 %3917, 1
  store i8 %3918, i8* %27, align 1
  %3919 = icmp eq i32 %3906, 0
  %3920 = zext i1 %3919 to i8
  store i8 %3920, i8* %30, align 1
  %3921 = lshr i32 %3906, 31
  %3922 = trunc i32 %3921 to i8
  store i8 %3922, i8* %33, align 1
  %3923 = lshr i32 %3905, 31
  %3924 = xor i32 %3923, %3888
  %3925 = xor i32 %3921, %3888
  %3926 = add nuw nsw i32 %3925, %3924
  %3927 = icmp eq i32 %3926, 2
  %3928 = zext i1 %3927 to i8
  store i8 %3928, i8* %39, align 1
  %.v402 = select i1 %3919, i64 37, i64 49
  %3929 = add i64 %3863, %.v402
  store i64 %3929, i64* %3, align 8
  br i1 %3919, label %block_47f1db, label %block_.L_47f1e7

block_47f1db:                                     ; preds = %block_.L_47f1b3
  %3930 = load i64, i64* %RBP.i, align 8
  %3931 = add i64 %3930, -28
  %3932 = add i64 %3929, 7
  store i64 %3932, i64* %3, align 8
  %3933 = inttoptr i64 %3931 to i32*
  store i32 0, i32* %3933, align 4
  %3934 = load i64, i64* %3, align 8
  %3935 = add i64 %3934, 72
  br label %block_.L_47f22a

block_.L_47f1e7:                                  ; preds = %block_.L_47f1b3
  %3936 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %3937 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %3938 = sub i32 %3936, %3937
  %3939 = zext i32 %3938 to i64
  store i64 %3939, i64* %RAX.i1321, align 8
  %3940 = icmp ult i32 %3936, %3937
  %3941 = zext i1 %3940 to i8
  store i8 %3941, i8* %14, align 1
  %3942 = and i32 %3938, 255
  %3943 = tail call i32 @llvm.ctpop.i32(i32 %3942)
  %3944 = trunc i32 %3943 to i8
  %3945 = and i8 %3944, 1
  %3946 = xor i8 %3945, 1
  store i8 %3946, i8* %21, align 1
  %3947 = xor i32 %3937, %3936
  %3948 = xor i32 %3947, %3938
  %3949 = lshr i32 %3948, 4
  %3950 = trunc i32 %3949 to i8
  %3951 = and i8 %3950, 1
  store i8 %3951, i8* %27, align 1
  %3952 = icmp eq i32 %3938, 0
  %3953 = zext i1 %3952 to i8
  store i8 %3953, i8* %30, align 1
  %3954 = lshr i32 %3938, 31
  %3955 = trunc i32 %3954 to i8
  store i8 %3955, i8* %33, align 1
  %3956 = lshr i32 %3936, 31
  %3957 = lshr i32 %3937, 31
  %3958 = xor i32 %3957, %3956
  %3959 = xor i32 %3954, %3956
  %3960 = add nuw nsw i32 %3959, %3958
  %3961 = icmp eq i32 %3960, 2
  %3962 = zext i1 %3961 to i8
  store i8 %3962, i8* %39, align 1
  store i64 %3897, i64* %RCX.i1948, align 8
  %3963 = add i64 %3929, 29
  store i64 %3963, i64* %3, align 8
  %3964 = load i32, i32* %3900, align 4
  %3965 = mul i32 %3964, -2
  %3966 = or i32 %3965, 1
  %3967 = zext i32 %3966 to i64
  store i64 %3967, i64* %RDX.i1878, align 8
  %3968 = lshr i32 %3965, 31
  %3969 = sub i32 %3938, %3966
  %3970 = icmp ult i32 %3938, %3966
  %3971 = zext i1 %3970 to i8
  store i8 %3971, i8* %14, align 1
  %3972 = and i32 %3969, 255
  %3973 = tail call i32 @llvm.ctpop.i32(i32 %3972)
  %3974 = trunc i32 %3973 to i8
  %3975 = and i8 %3974, 1
  %3976 = xor i8 %3975, 1
  store i8 %3976, i8* %21, align 1
  %3977 = xor i32 %3965, %3938
  %3978 = xor i32 %3977, %3969
  %3979 = lshr i32 %3978, 4
  %3980 = trunc i32 %3979 to i8
  %3981 = and i8 %3980, 1
  store i8 %3981, i8* %27, align 1
  %3982 = icmp eq i32 %3969, 0
  %3983 = zext i1 %3982 to i8
  store i8 %3983, i8* %30, align 1
  %3984 = lshr i32 %3969, 31
  %3985 = trunc i32 %3984 to i8
  store i8 %3985, i8* %33, align 1
  %3986 = xor i32 %3968, %3954
  %3987 = xor i32 %3984, %3954
  %3988 = add nuw nsw i32 %3987, %3986
  %3989 = icmp eq i32 %3988, 2
  %3990 = zext i1 %3989 to i8
  store i8 %3990, i8* %39, align 1
  %.v403 = select i1 %3982, i64 40, i64 52
  %3991 = add i64 %3929, %.v403
  %3992 = load i64, i64* %RBP.i, align 8
  %3993 = add i64 %3992, -28
  %3994 = add i64 %3991, 7
  store i64 %3994, i64* %3, align 8
  %3995 = inttoptr i64 %3993 to i32*
  br i1 %3982, label %block_47f212, label %block_.L_47f21e

block_47f212:                                     ; preds = %block_.L_47f1e7
  store i32 1, i32* %3995, align 4
  %3996 = load i64, i64* %3, align 8
  %3997 = add i64 %3996, 12
  store i64 %3997, i64* %3, align 8
  br label %block_.L_47f225

block_.L_47f21e:                                  ; preds = %block_.L_47f1e7
  store i32 2, i32* %3995, align 4
  %.pre257 = load i64, i64* %3, align 8
  br label %block_.L_47f225

block_.L_47f225:                                  ; preds = %block_.L_47f21e, %block_47f212
  %3998 = phi i64 [ %.pre257, %block_.L_47f21e ], [ %3997, %block_47f212 ]
  %3999 = add i64 %3998, 5
  store i64 %3999, i64* %3, align 8
  br label %block_.L_47f22a

block_.L_47f22a:                                  ; preds = %block_.L_47f225, %block_47f1db
  %storemerge180 = phi i64 [ %3935, %block_47f1db ], [ %3999, %block_.L_47f225 ]
  %4000 = add i64 %storemerge180, 5
  store i64 %4000, i64* %3, align 8
  br label %block_.L_47f22f

block_.L_47f22f:                                  ; preds = %block_.L_47f22a, %block_47f1a7
  %storemerge179 = phi i64 [ %3869, %block_47f1a7 ], [ %4000, %block_.L_47f22a ]
  %4001 = add i64 %storemerge179, 5
  store i64 %4001, i64* %3, align 8
  br label %block_.L_47f234

block_.L_47f234:                                  ; preds = %block_.L_47f22f, %block_47f170
  %storemerge178 = phi i64 [ %3804, %block_47f170 ], [ %4001, %block_.L_47f22f ]
  %4002 = add i64 %storemerge178, 5
  store i64 %4002, i64* %3, align 8
  br label %block_.L_47f239

block_.L_47f239:                                  ; preds = %block_.L_47f234, %block_47f139
  %storemerge175 = phi i64 [ %3739, %block_47f139 ], [ %4002, %block_.L_47f234 ]
  %4003 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %4004 = zext i32 %4003 to i64
  store i64 %4004, i64* %RAX.i1321, align 8
  %4005 = load i64, i64* %RBP.i, align 8
  %4006 = add i64 %4005, -28
  %4007 = add i64 %storemerge175, 10
  store i64 %4007, i64* %3, align 8
  %4008 = inttoptr i64 %4006 to i32*
  %4009 = load i32, i32* %4008, align 4
  %4010 = add i32 %4009, %4003
  %4011 = zext i32 %4010 to i64
  store i64 %4011, i64* %RAX.i1321, align 8
  %4012 = icmp ult i32 %4010, %4003
  %4013 = icmp ult i32 %4010, %4009
  %4014 = or i1 %4012, %4013
  %4015 = zext i1 %4014 to i8
  store i8 %4015, i8* %14, align 1
  %4016 = and i32 %4010, 255
  %4017 = tail call i32 @llvm.ctpop.i32(i32 %4016)
  %4018 = trunc i32 %4017 to i8
  %4019 = and i8 %4018, 1
  %4020 = xor i8 %4019, 1
  store i8 %4020, i8* %21, align 1
  %4021 = xor i32 %4009, %4003
  %4022 = xor i32 %4021, %4010
  %4023 = lshr i32 %4022, 4
  %4024 = trunc i32 %4023 to i8
  %4025 = and i8 %4024, 1
  store i8 %4025, i8* %27, align 1
  %4026 = icmp eq i32 %4010, 0
  %4027 = zext i1 %4026 to i8
  store i8 %4027, i8* %30, align 1
  %4028 = lshr i32 %4010, 31
  %4029 = trunc i32 %4028 to i8
  store i8 %4029, i8* %33, align 1
  %4030 = lshr i32 %4003, 31
  %4031 = lshr i32 %4009, 31
  %4032 = xor i32 %4028, %4030
  %4033 = xor i32 %4028, %4031
  %4034 = add nuw nsw i32 %4032, %4033
  %4035 = icmp eq i32 %4034, 2
  %4036 = zext i1 %4035 to i8
  store i8 %4036, i8* %39, align 1
  store i32 %4010, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %4037 = add i64 %4005, -24
  %4038 = add i64 %storemerge175, 20
  store i64 %4038, i64* %3, align 8
  %4039 = inttoptr i64 %4037 to i32*
  %4040 = load i32, i32* %4039, align 4
  %4041 = add i32 %4040, -1
  %4042 = lshr i32 %4041, 31
  %4043 = trunc i32 %4042 to i8
  %4044 = shl i32 %4041, 1
  %4045 = icmp slt i32 %4041, 0
  %4046 = icmp slt i32 %4044, 0
  %4047 = xor i1 %4045, %4046
  %4048 = zext i32 %4044 to i64
  store i64 %4048, i64* %RAX.i1321, align 8
  store i8 %4043, i8* %14, align 1
  %4049 = and i32 %4044, 254
  %4050 = tail call i32 @llvm.ctpop.i32(i32 %4049)
  %4051 = trunc i32 %4050 to i8
  %4052 = and i8 %4051, 1
  %4053 = xor i8 %4052, 1
  store i8 %4053, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4054 = icmp eq i32 %4044, 0
  %4055 = zext i1 %4054 to i8
  store i8 %4055, i8* %30, align 1
  %4056 = lshr i32 %4041, 30
  %4057 = trunc i32 %4056 to i8
  %4058 = and i8 %4057, 1
  store i8 %4058, i8* %33, align 1
  %4059 = zext i1 %4047 to i8
  store i8 %4059, i8* %39, align 1
  %4060 = load i64, i64* %RBP.i, align 8
  %4061 = add i64 %4060, -24
  %4062 = add i64 %storemerge175, 28
  store i64 %4062, i64* %3, align 8
  %4063 = inttoptr i64 %4061 to i32*
  %4064 = load i32, i32* %4063, align 4
  %4065 = add i32 %4064, -1
  %ECX.i1770 = bitcast %union.anon* %3493 to i32*
  %4066 = sext i32 %4065 to i64
  %4067 = mul nsw i64 %4066, -2
  %4068 = trunc i64 %4067 to i32
  %4069 = and i64 %4067, 4294967294
  store i64 %4069, i64* %RCX.i1948, align 8
  %4070 = mul i64 %4066, -8589934592
  %4071 = ashr exact i64 %4070, 32
  %4072 = icmp ne i64 %4071, %4067
  %4073 = zext i1 %4072 to i8
  store i8 %4073, i8* %14, align 1
  %4074 = and i32 %4068, 254
  %4075 = tail call i32 @llvm.ctpop.i32(i32 %4074)
  %4076 = trunc i32 %4075 to i8
  %4077 = and i8 %4076, 1
  %4078 = xor i8 %4077, 1
  store i8 %4078, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4079 = lshr i32 %4068, 31
  %4080 = trunc i32 %4079 to i8
  store i8 %4080, i8* %33, align 1
  store i8 %4073, i8* %39, align 1
  %4081 = add i64 %storemerge175, 37
  store i64 %4081, i64* %3, align 8
  %4082 = load i32, i32* %4063, align 4
  %4083 = add i32 %4082, -1
  %4084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %RSI.i1763 = getelementptr inbounds %union.anon, %union.anon* %4084, i64 0, i32 0
  %4085 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %4086 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %4087 = sub i32 %4085, %4086
  %4088 = zext i32 %4087 to i64
  store i64 %4088, i64* %RSI.i1763, align 8
  %ESI.i1758 = bitcast %union.anon* %4084 to i32*
  %4089 = sext i32 %4083 to i64
  %4090 = sext i32 %4087 to i64
  %4091 = mul nsw i64 %4090, %4089
  %4092 = trunc i64 %4091 to i32
  %4093 = and i64 %4091, 4294967295
  store i64 %4093, i64* %RDX.i1878, align 8
  %4094 = shl i64 %4091, 32
  %4095 = ashr exact i64 %4094, 32
  %4096 = icmp ne i64 %4095, %4091
  %4097 = zext i1 %4096 to i8
  store i8 %4097, i8* %14, align 1
  %4098 = and i32 %4092, 255
  %4099 = tail call i32 @llvm.ctpop.i32(i32 %4098)
  %4100 = trunc i32 %4099 to i8
  %4101 = and i8 %4100, 1
  %4102 = xor i8 %4101, 1
  store i8 %4102, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4103 = lshr i32 %4092, 31
  %4104 = trunc i32 %4103 to i8
  store i8 %4104, i8* %33, align 1
  store i8 %4097, i8* %39, align 1
  %4105 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %4105, i64* %RDI.i, align 8
  %4106 = add i64 %4105, 1236
  %4107 = add i64 %storemerge175, 71
  store i64 %4107, i64* %3, align 8
  %4108 = inttoptr i64 %4106 to i32*
  %4109 = load i32, i32* %4108, align 4
  %4110 = add i32 %4109, -1
  %4111 = zext i32 %4110 to i64
  store i64 %4111, i64* %RSI.i1763, align 8
  %4112 = icmp eq i32 %4109, 0
  %4113 = zext i1 %4112 to i8
  store i8 %4113, i8* %14, align 1
  %4114 = and i32 %4110, 255
  %4115 = tail call i32 @llvm.ctpop.i32(i32 %4114)
  %4116 = trunc i32 %4115 to i8
  %4117 = and i8 %4116, 1
  %4118 = xor i8 %4117, 1
  store i8 %4118, i8* %21, align 1
  %4119 = xor i32 %4110, %4109
  %4120 = lshr i32 %4119, 4
  %4121 = trunc i32 %4120 to i8
  %4122 = and i8 %4121, 1
  store i8 %4122, i8* %27, align 1
  %4123 = icmp eq i32 %4110, 0
  %4124 = zext i1 %4123 to i8
  store i8 %4124, i8* %30, align 1
  %4125 = lshr i32 %4110, 31
  %4126 = trunc i32 %4125 to i8
  store i8 %4126, i8* %33, align 1
  %4127 = lshr i32 %4109, 31
  %4128 = xor i32 %4125, %4127
  %4129 = add nuw nsw i32 %4128, %4127
  %4130 = icmp eq i32 %4129, 2
  %4131 = zext i1 %4130 to i8
  store i8 %4131, i8* %39, align 1
  %4132 = load i64, i64* %RBP.i, align 8
  %4133 = add i64 %4132, -144
  %4134 = load i32, i32* %3495, align 4
  %4135 = add i64 %storemerge175, 80
  store i64 %4135, i64* %3, align 8
  %4136 = inttoptr i64 %4133 to i32*
  store i32 %4134, i32* %4136, align 4
  %4137 = load i32, i32* %3500, align 4
  %4138 = zext i32 %4137 to i64
  %4139 = load i64, i64* %3, align 8
  store i64 %4138, i64* %RAX.i1321, align 8
  %4140 = sext i32 %4137 to i64
  %4141 = lshr i64 %4140, 32
  store i64 %4141, i64* %3494, align 8
  %4142 = load i32, i32* %ESI.i1758, align 4
  %4143 = add i64 %4139, 5
  store i64 %4143, i64* %3, align 8
  %4144 = sext i32 %4142 to i64
  %4145 = shl nuw i64 %4141, 32
  %4146 = or i64 %4145, %4138
  %4147 = sdiv i64 %4146, %4144
  %4148 = shl i64 %4147, 32
  %4149 = ashr exact i64 %4148, 32
  %4150 = icmp eq i64 %4147, %4149
  br i1 %4150, label %4153, label %4151

; <label>:4151:                                   ; preds = %block_.L_47f239
  %4152 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4143, %struct.Memory* %3520)
  %.pre258 = load i32, i32* %3495, align 4
  %.pre259 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit

; <label>:4153:                                   ; preds = %block_.L_47f239
  %4154 = srem i64 %4146, %4144
  %4155 = and i64 %4147, 4294967295
  store i64 %4155, i64* %RAX.i1321, align 8
  %4156 = and i64 %4154, 4294967295
  store i64 %4156, i64* %RDX.i1878, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4157 = trunc i64 %4147 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %4153, %4151
  %4158 = phi i64 [ %.pre259, %4151 ], [ %4143, %4153 ]
  %4159 = phi i32 [ %.pre258, %4151 ], [ %4157, %4153 ]
  %4160 = phi %struct.Memory* [ %4152, %4151 ], [ %3520, %4153 ]
  %4161 = load i32, i32* %ECX.i1770, align 4
  %4162 = sub i32 %4161, %4159
  %4163 = icmp ult i32 %4161, %4159
  %4164 = zext i1 %4163 to i8
  store i8 %4164, i8* %14, align 1
  %4165 = and i32 %4162, 255
  %4166 = tail call i32 @llvm.ctpop.i32(i32 %4165)
  %4167 = trunc i32 %4166 to i8
  %4168 = and i8 %4167, 1
  %4169 = xor i8 %4168, 1
  store i8 %4169, i8* %21, align 1
  %4170 = xor i32 %4159, %4161
  %4171 = xor i32 %4170, %4162
  %4172 = lshr i32 %4171, 4
  %4173 = trunc i32 %4172 to i8
  %4174 = and i8 %4173, 1
  store i8 %4174, i8* %27, align 1
  %4175 = icmp eq i32 %4162, 0
  %4176 = zext i1 %4175 to i8
  store i8 %4176, i8* %30, align 1
  %4177 = lshr i32 %4162, 31
  %4178 = trunc i32 %4177 to i8
  store i8 %4178, i8* %33, align 1
  %4179 = lshr i32 %4161, 31
  %4180 = lshr i32 %4159, 31
  %4181 = xor i32 %4180, %4179
  %4182 = xor i32 %4177, %4179
  %4183 = add nuw nsw i32 %4182, %4181
  %4184 = icmp eq i32 %4183, 2
  %4185 = zext i1 %4184 to i8
  store i8 %4185, i8* %39, align 1
  %4186 = icmp ne i8 %4178, 0
  %4187 = xor i1 %4186, %4184
  %.v404 = select i1 %4187, i64 8, i64 62
  %4188 = add i64 %4158, %.v404
  %4189 = load i64, i64* %RBP.i, align 8
  %4190 = add i64 %4189, -24
  %4191 = add i64 %4188, 3
  store i64 %4191, i64* %3, align 8
  %4192 = inttoptr i64 %4190 to i32*
  %4193 = load i32, i32* %4192, align 4
  %4194 = add i64 %4188, 6
  store i64 %4194, i64* %3, align 8
  %4195 = add i32 %4193, -1
  %4196 = zext i32 %4195 to i64
  store i64 %4196, i64* %RAX.i1321, align 8
  %4197 = icmp eq i32 %4193, 0
  %4198 = zext i1 %4197 to i8
  store i8 %4198, i8* %14, align 1
  %4199 = and i32 %4195, 255
  %4200 = tail call i32 @llvm.ctpop.i32(i32 %4199)
  %4201 = trunc i32 %4200 to i8
  %4202 = and i8 %4201, 1
  %4203 = xor i8 %4202, 1
  store i8 %4203, i8* %21, align 1
  %4204 = xor i32 %4195, %4193
  %4205 = lshr i32 %4204, 4
  %4206 = trunc i32 %4205 to i8
  %4207 = and i8 %4206, 1
  store i8 %4207, i8* %27, align 1
  %4208 = icmp eq i32 %4195, 0
  %4209 = zext i1 %4208 to i8
  store i8 %4209, i8* %30, align 1
  %4210 = lshr i32 %4195, 31
  %4211 = trunc i32 %4210 to i8
  store i8 %4211, i8* %33, align 1
  %4212 = lshr i32 %4193, 31
  %4213 = xor i32 %4210, %4212
  %4214 = add nuw nsw i32 %4213, %4212
  %4215 = icmp eq i32 %4214, 2
  %4216 = zext i1 %4215 to i8
  store i8 %4216, i8* %39, align 1
  br i1 %4187, label %block_47f29a, label %block_.L_47f2d0

block_47f29a:                                     ; preds = %routine_idivl__esi.exit
  %4217 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %4218 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %4219 = sub i32 %4217, %4218
  %4220 = zext i32 %4219 to i64
  store i64 %4220, i64* %RCX.i1948, align 8
  %4221 = sext i32 %4195 to i64
  %4222 = sext i32 %4219 to i64
  %4223 = mul nsw i64 %4222, %4221
  %4224 = trunc i64 %4223 to i32
  %4225 = and i64 %4223, 4294967295
  store i64 %4225, i64* %RAX.i1321, align 8
  %4226 = shl i64 %4223, 32
  %4227 = ashr exact i64 %4226, 32
  %4228 = icmp ne i64 %4227, %4223
  %4229 = zext i1 %4228 to i8
  store i8 %4229, i8* %14, align 1
  %4230 = and i32 %4224, 255
  %4231 = tail call i32 @llvm.ctpop.i32(i32 %4230)
  %4232 = trunc i32 %4231 to i8
  %4233 = and i8 %4232, 1
  %4234 = xor i8 %4233, 1
  store i8 %4234, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4235 = lshr i32 %4224, 31
  %4236 = trunc i32 %4235 to i8
  store i8 %4236, i8* %33, align 1
  store i8 %4229, i8* %39, align 1
  %4237 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %4237, i64* %RDX.i1878, align 8
  %4238 = add i64 %4237, 1236
  %4239 = add i64 %4188, 37
  store i64 %4239, i64* %3, align 8
  %4240 = inttoptr i64 %4238 to i32*
  %4241 = load i32, i32* %4240, align 4
  %4242 = add i32 %4241, -1
  %4243 = zext i32 %4242 to i64
  store i64 %4243, i64* %RCX.i1948, align 8
  %4244 = icmp eq i32 %4241, 0
  %4245 = zext i1 %4244 to i8
  store i8 %4245, i8* %14, align 1
  %4246 = and i32 %4242, 255
  %4247 = tail call i32 @llvm.ctpop.i32(i32 %4246)
  %4248 = trunc i32 %4247 to i8
  %4249 = and i8 %4248, 1
  %4250 = xor i8 %4249, 1
  store i8 %4250, i8* %21, align 1
  %4251 = xor i32 %4242, %4241
  %4252 = lshr i32 %4251, 4
  %4253 = trunc i32 %4252 to i8
  %4254 = and i8 %4253, 1
  store i8 %4254, i8* %27, align 1
  %4255 = icmp eq i32 %4242, 0
  %4256 = zext i1 %4255 to i8
  store i8 %4256, i8* %30, align 1
  %4257 = lshr i32 %4242, 31
  %4258 = trunc i32 %4257 to i8
  store i8 %4258, i8* %33, align 1
  %4259 = lshr i32 %4241, 31
  %4260 = xor i32 %4257, %4259
  %4261 = add nuw nsw i32 %4260, %4259
  %4262 = icmp eq i32 %4261, 2
  %4263 = zext i1 %4262 to i8
  store i8 %4263, i8* %39, align 1
  %sext320 = shl i64 %4223, 32
  %4264 = ashr exact i64 %sext320, 32
  %4265 = lshr i64 %4264, 32
  store i64 %4265, i64* %3494, align 8
  %4266 = add i64 %4188, 43
  store i64 %4266, i64* %3, align 8
  %4267 = and i64 %4223, 4294967295
  %4268 = sext i32 %4242 to i64
  %4269 = shl nuw i64 %4265, 32
  %4270 = or i64 %4269, %4267
  %4271 = sdiv i64 %4270, %4268
  %4272 = shl i64 %4271, 32
  %4273 = ashr exact i64 %4272, 32
  %4274 = icmp eq i64 %4271, %4273
  br i1 %4274, label %4277, label %4275

; <label>:4275:                                   ; preds = %block_47f29a
  %4276 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4266, %struct.Memory* %4160)
  %.pre260 = load i32, i32* %3495, align 4
  %.pre261 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1713

; <label>:4277:                                   ; preds = %block_47f29a
  %4278 = srem i64 %4270, %4268
  %4279 = and i64 %4271, 4294967295
  store i64 %4279, i64* %RAX.i1321, align 8
  %4280 = and i64 %4278, 4294967295
  store i64 %4280, i64* %RDX.i1878, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4281 = trunc i64 %4271 to i32
  br label %routine_idivl__ecx.exit1713

routine_idivl__ecx.exit1713:                      ; preds = %4277, %4275
  %4282 = phi i64 [ %.pre261, %4275 ], [ %4266, %4277 ]
  %4283 = phi i32 [ %.pre260, %4275 ], [ %4281, %4277 ]
  %4284 = phi %struct.Memory* [ %4276, %4275 ], [ %4160, %4277 ]
  %4285 = load i64, i64* %RBP.i, align 8
  %4286 = add i64 %4285, -148
  %4287 = add i64 %4282, 6
  store i64 %4287, i64* %3, align 8
  %4288 = inttoptr i64 %4286 to i32*
  store i32 %4283, i32* %4288, align 4
  %4289 = load i64, i64* %3, align 8
  %4290 = add i64 %4289, 23
  store i64 %4290, i64* %3, align 8
  br label %block_.L_47f2e2

block_.L_47f2d0:                                  ; preds = %routine_idivl__esi.exit
  %4291 = sext i32 %4195 to i64
  %4292 = mul nsw i64 %4291, -2
  %4293 = trunc i64 %4292 to i32
  %4294 = and i64 %4292, 4294967294
  store i64 %4294, i64* %RAX.i1321, align 8
  %4295 = mul i64 %4291, -8589934592
  %4296 = ashr exact i64 %4295, 32
  %4297 = icmp ne i64 %4296, %4292
  %4298 = zext i1 %4297 to i8
  store i8 %4298, i8* %14, align 1
  %4299 = and i32 %4293, 254
  %4300 = tail call i32 @llvm.ctpop.i32(i32 %4299)
  %4301 = trunc i32 %4300 to i8
  %4302 = and i8 %4301, 1
  %4303 = xor i8 %4302, 1
  store i8 %4303, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4304 = lshr i32 %4293, 31
  %4305 = trunc i32 %4304 to i8
  store i8 %4305, i8* %33, align 1
  store i8 %4298, i8* %39, align 1
  %4306 = add i64 %4189, -148
  %4307 = trunc i64 %4292 to i32
  %4308 = add i64 %4188, 15
  store i64 %4308, i64* %3, align 8
  %4309 = inttoptr i64 %4306 to i32*
  store i32 %4307, i32* %4309, align 4
  %.pre262 = load i64, i64* %3, align 8
  br label %block_.L_47f2e2

block_.L_47f2e2:                                  ; preds = %block_.L_47f2d0, %routine_idivl__ecx.exit1713
  %4310 = phi i64 [ %.pre262, %block_.L_47f2d0 ], [ %4290, %routine_idivl__ecx.exit1713 ]
  %MEMORY.65 = phi %struct.Memory* [ %4160, %block_.L_47f2d0 ], [ %4284, %routine_idivl__ecx.exit1713 ]
  %4311 = load i64, i64* %RBP.i, align 8
  %4312 = add i64 %4311, -148
  %4313 = add i64 %4310, 6
  store i64 %4313, i64* %3, align 8
  %4314 = inttoptr i64 %4312 to i32*
  %4315 = load i32, i32* %4314, align 4
  %4316 = zext i32 %4315 to i64
  store i64 %4316, i64* %RAX.i1321, align 8
  %4317 = add i64 %4311, -144
  %4318 = add i64 %4310, 12
  store i64 %4318, i64* %3, align 8
  %4319 = inttoptr i64 %4317 to i32*
  %4320 = load i32, i32* %4319, align 4
  %4321 = zext i32 %4320 to i64
  store i64 %4321, i64* %RCX.i1948, align 8
  %4322 = sub i32 %4320, %4315
  %4323 = icmp ult i32 %4320, %4315
  %4324 = zext i1 %4323 to i8
  store i8 %4324, i8* %14, align 1
  %4325 = and i32 %4322, 255
  %4326 = tail call i32 @llvm.ctpop.i32(i32 %4325)
  %4327 = trunc i32 %4326 to i8
  %4328 = and i8 %4327, 1
  %4329 = xor i8 %4328, 1
  store i8 %4329, i8* %21, align 1
  %4330 = xor i32 %4315, %4320
  %4331 = xor i32 %4330, %4322
  %4332 = lshr i32 %4331, 4
  %4333 = trunc i32 %4332 to i8
  %4334 = and i8 %4333, 1
  store i8 %4334, i8* %27, align 1
  %4335 = icmp eq i32 %4322, 0
  %4336 = zext i1 %4335 to i8
  store i8 %4336, i8* %30, align 1
  %4337 = lshr i32 %4322, 31
  %4338 = trunc i32 %4337 to i8
  store i8 %4338, i8* %33, align 1
  %4339 = lshr i32 %4320, 31
  %4340 = lshr i32 %4315, 31
  %4341 = xor i32 %4340, %4339
  %4342 = xor i32 %4337, %4339
  %4343 = add nuw nsw i32 %4342, %4341
  %4344 = icmp eq i32 %4343, 2
  %4345 = zext i1 %4344 to i8
  store i8 %4345, i8* %39, align 1
  %4346 = icmp ne i8 %4338, 0
  %4347 = xor i1 %4346, %4344
  %.v317 = select i1 %4347, i64 20, i64 40
  %4348 = add i64 %4310, %.v317
  %4349 = add i64 %4311, -24
  %4350 = add i64 %4348, 3
  store i64 %4350, i64* %3, align 8
  %4351 = inttoptr i64 %4349 to i32*
  %4352 = load i32, i32* %4351, align 4
  %4353 = add i64 %4348, 6
  store i64 %4353, i64* %3, align 8
  %4354 = add i32 %4352, -1
  %4355 = zext i32 %4354 to i64
  store i64 %4355, i64* %RAX.i1321, align 8
  %4356 = icmp eq i32 %4352, 0
  %4357 = zext i1 %4356 to i8
  store i8 %4357, i8* %14, align 1
  %4358 = and i32 %4354, 255
  %4359 = tail call i32 @llvm.ctpop.i32(i32 %4358)
  %4360 = trunc i32 %4359 to i8
  %4361 = and i8 %4360, 1
  %4362 = xor i8 %4361, 1
  store i8 %4362, i8* %21, align 1
  %4363 = xor i32 %4354, %4352
  %4364 = lshr i32 %4363, 4
  %4365 = trunc i32 %4364 to i8
  %4366 = and i8 %4365, 1
  store i8 %4366, i8* %27, align 1
  %4367 = icmp eq i32 %4354, 0
  %4368 = zext i1 %4367 to i8
  store i8 %4368, i8* %30, align 1
  %4369 = lshr i32 %4354, 31
  %4370 = trunc i32 %4369 to i8
  store i8 %4370, i8* %33, align 1
  %4371 = lshr i32 %4352, 31
  %4372 = xor i32 %4369, %4371
  %4373 = add nuw nsw i32 %4372, %4371
  %4374 = icmp eq i32 %4373, 2
  %4375 = zext i1 %4374 to i8
  store i8 %4375, i8* %39, align 1
  br i1 %4347, label %block_47f2f6, label %block_.L_47f30a

block_47f2f6:                                     ; preds = %block_.L_47f2e2
  %4376 = shl i32 %4354, 1
  %4377 = icmp slt i32 %4354, 0
  %4378 = icmp slt i32 %4376, 0
  %4379 = xor i1 %4377, %4378
  %4380 = zext i32 %4376 to i64
  store i64 %4380, i64* %RAX.i1321, align 8
  store i8 %4370, i8* %14, align 1
  %4381 = and i32 %4376, 254
  %4382 = tail call i32 @llvm.ctpop.i32(i32 %4381)
  %4383 = trunc i32 %4382 to i8
  %4384 = and i8 %4383, 1
  %4385 = xor i8 %4384, 1
  store i8 %4385, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4386 = icmp eq i32 %4376, 0
  %4387 = zext i1 %4386 to i8
  store i8 %4387, i8* %30, align 1
  %4388 = lshr i32 %4354, 30
  %4389 = trunc i32 %4388 to i8
  %4390 = and i8 %4389, 1
  store i8 %4390, i8* %33, align 1
  %4391 = zext i1 %4379 to i8
  store i8 %4391, i8* %39, align 1
  %4392 = add i64 %4311, -152
  %4393 = add i64 %4348, 14
  store i64 %4393, i64* %3, align 8
  %4394 = inttoptr i64 %4392 to i32*
  store i32 %4376, i32* %4394, align 4
  %4395 = load i64, i64* %3, align 8
  %4396 = add i64 %4395, 178
  store i64 %4396, i64* %3, align 8
  br label %block_.L_47f3b7

block_.L_47f30a:                                  ; preds = %block_.L_47f2e2
  %4397 = sext i32 %4354 to i64
  %4398 = mul nsw i64 %4397, -2
  %4399 = trunc i64 %4398 to i32
  %4400 = and i64 %4398, 4294967294
  store i64 %4400, i64* %RAX.i1321, align 8
  %4401 = mul i64 %4397, -8589934592
  %4402 = ashr exact i64 %4401, 32
  %4403 = icmp ne i64 %4402, %4398
  %4404 = zext i1 %4403 to i8
  store i8 %4404, i8* %14, align 1
  %4405 = and i32 %4399, 254
  %4406 = tail call i32 @llvm.ctpop.i32(i32 %4405)
  %4407 = trunc i32 %4406 to i8
  %4408 = and i8 %4407, 1
  %4409 = xor i8 %4408, 1
  store i8 %4409, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4410 = lshr i32 %4399, 31
  %4411 = trunc i32 %4410 to i8
  store i8 %4411, i8* %33, align 1
  store i8 %4404, i8* %39, align 1
  %4412 = add i64 %4348, 12
  store i64 %4412, i64* %3, align 8
  %4413 = load i32, i32* %4351, align 4
  %4414 = add i32 %4413, -1
  %4415 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %4416 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %4417 = sub i32 %4415, %4416
  %4418 = zext i32 %4417 to i64
  store i64 %4418, i64* %RDX.i1878, align 8
  %4419 = sext i32 %4414 to i64
  %4420 = sext i32 %4417 to i64
  %4421 = mul nsw i64 %4420, %4419
  %4422 = trunc i64 %4421 to i32
  %4423 = and i64 %4421, 4294967295
  store i64 %4423, i64* %RCX.i1948, align 8
  %4424 = shl i64 %4421, 32
  %4425 = ashr exact i64 %4424, 32
  %4426 = icmp ne i64 %4425, %4421
  %4427 = zext i1 %4426 to i8
  store i8 %4427, i8* %14, align 1
  %4428 = and i32 %4422, 255
  %4429 = tail call i32 @llvm.ctpop.i32(i32 %4428)
  %4430 = trunc i32 %4429 to i8
  %4431 = and i8 %4430, 1
  %4432 = xor i8 %4431, 1
  store i8 %4432, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4433 = lshr i32 %4422, 31
  %4434 = trunc i32 %4433 to i8
  store i8 %4434, i8* %33, align 1
  store i8 %4427, i8* %39, align 1
  %4435 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %4435, i64* %RSI.i1763, align 8
  %4436 = add i64 %4435, 1236
  %4437 = add i64 %4348, 46
  store i64 %4437, i64* %3, align 8
  %4438 = inttoptr i64 %4436 to i32*
  %4439 = load i32, i32* %4438, align 4
  %4440 = add i32 %4439, -1
  %4441 = zext i32 %4440 to i64
  store i64 %4441, i64* %RDX.i1878, align 8
  %4442 = icmp eq i32 %4439, 0
  %4443 = zext i1 %4442 to i8
  store i8 %4443, i8* %14, align 1
  %4444 = and i32 %4440, 255
  %4445 = tail call i32 @llvm.ctpop.i32(i32 %4444)
  %4446 = trunc i32 %4445 to i8
  %4447 = and i8 %4446, 1
  %4448 = xor i8 %4447, 1
  store i8 %4448, i8* %21, align 1
  %4449 = xor i32 %4440, %4439
  %4450 = lshr i32 %4449, 4
  %4451 = trunc i32 %4450 to i8
  %4452 = and i8 %4451, 1
  store i8 %4452, i8* %27, align 1
  %4453 = icmp eq i32 %4440, 0
  %4454 = zext i1 %4453 to i8
  store i8 %4454, i8* %30, align 1
  %4455 = lshr i32 %4440, 31
  %4456 = trunc i32 %4455 to i8
  store i8 %4456, i8* %33, align 1
  %4457 = lshr i32 %4439, 31
  %4458 = xor i32 %4455, %4457
  %4459 = add nuw nsw i32 %4458, %4457
  %4460 = icmp eq i32 %4459, 2
  %4461 = zext i1 %4460 to i8
  store i8 %4461, i8* %39, align 1
  %4462 = load i64, i64* %RBP.i, align 8
  %4463 = add i64 %4462, -156
  %4464 = load i32, i32* %3495, align 4
  %4465 = add i64 %4348, 55
  store i64 %4465, i64* %3, align 8
  %4466 = inttoptr i64 %4463 to i32*
  store i32 %4464, i32* %4466, align 4
  %4467 = load i32, i32* %ECX.i1770, align 4
  %4468 = zext i32 %4467 to i64
  %4469 = load i64, i64* %3, align 8
  store i64 %4468, i64* %RAX.i1321, align 8
  %4470 = load i64, i64* %RBP.i, align 8
  %4471 = add i64 %4470, -160
  %4472 = load i32, i32* %3500, align 4
  %4473 = add i64 %4469, 8
  store i64 %4473, i64* %3, align 8
  %4474 = inttoptr i64 %4471 to i32*
  store i32 %4472, i32* %4474, align 4
  %4475 = load i64, i64* %3, align 8
  %4476 = load i32, i32* %3495, align 8
  %4477 = sext i32 %4476 to i64
  %4478 = lshr i64 %4477, 32
  store i64 %4478, i64* %3494, align 8
  %4479 = load i64, i64* %RBP.i, align 8
  %4480 = add i64 %4479, -160
  %4481 = add i64 %4475, 7
  store i64 %4481, i64* %3, align 8
  %4482 = inttoptr i64 %4480 to i32*
  %4483 = load i32, i32* %4482, align 4
  %4484 = zext i32 %4483 to i64
  store i64 %4484, i64* %RCX.i1948, align 8
  %4485 = add i64 %4475, 9
  store i64 %4485, i64* %3, align 8
  %4486 = zext i32 %4476 to i64
  %4487 = sext i32 %4483 to i64
  %4488 = shl nuw i64 %4478, 32
  %4489 = or i64 %4488, %4486
  %4490 = sdiv i64 %4489, %4487
  %4491 = shl i64 %4490, 32
  %4492 = ashr exact i64 %4491, 32
  %4493 = icmp eq i64 %4490, %4492
  br i1 %4493, label %4496, label %4494

; <label>:4494:                                   ; preds = %block_.L_47f30a
  %4495 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4485, %struct.Memory* %MEMORY.65)
  %.pre263 = load i64, i64* %RBP.i, align 8
  %.pre264 = load i64, i64* %3, align 8
  %.pre265 = load i32, i32* %3495, align 4
  br label %routine_idivl__ecx.exit1633

; <label>:4496:                                   ; preds = %block_.L_47f30a
  %4497 = srem i64 %4489, %4487
  %4498 = and i64 %4490, 4294967295
  store i64 %4498, i64* %RAX.i1321, align 8
  %4499 = and i64 %4497, 4294967295
  store i64 %4499, i64* %RDX.i1878, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4500 = trunc i64 %4490 to i32
  br label %routine_idivl__ecx.exit1633

routine_idivl__ecx.exit1633:                      ; preds = %4496, %4494
  %4501 = phi i32 [ %.pre265, %4494 ], [ %4500, %4496 ]
  %4502 = phi i64 [ %.pre264, %4494 ], [ %4485, %4496 ]
  %4503 = phi i64 [ %.pre263, %4494 ], [ %4479, %4496 ]
  %4504 = phi %struct.Memory* [ %4495, %4494 ], [ %MEMORY.65, %4496 ]
  %4505 = add i64 %4503, -156
  %4506 = add i64 %4502, 6
  store i64 %4506, i64* %3, align 8
  %4507 = inttoptr i64 %4505 to i32*
  %4508 = load i32, i32* %4507, align 4
  %4509 = zext i32 %4508 to i64
  store i64 %4509, i64* %RDI.i, align 8
  %4510 = sub i32 %4508, %4501
  %4511 = icmp ult i32 %4508, %4501
  %4512 = zext i1 %4511 to i8
  store i8 %4512, i8* %14, align 1
  %4513 = and i32 %4510, 255
  %4514 = tail call i32 @llvm.ctpop.i32(i32 %4513)
  %4515 = trunc i32 %4514 to i8
  %4516 = and i8 %4515, 1
  %4517 = xor i8 %4516, 1
  store i8 %4517, i8* %21, align 1
  %4518 = xor i32 %4501, %4508
  %4519 = xor i32 %4518, %4510
  %4520 = lshr i32 %4519, 4
  %4521 = trunc i32 %4520 to i8
  %4522 = and i8 %4521, 1
  store i8 %4522, i8* %27, align 1
  %4523 = icmp eq i32 %4510, 0
  %4524 = zext i1 %4523 to i8
  store i8 %4524, i8* %30, align 1
  %4525 = lshr i32 %4510, 31
  %4526 = trunc i32 %4525 to i8
  store i8 %4526, i8* %33, align 1
  %4527 = lshr i32 %4508, 31
  %4528 = lshr i32 %4501, 31
  %4529 = xor i32 %4528, %4527
  %4530 = xor i32 %4525, %4527
  %4531 = add nuw nsw i32 %4530, %4529
  %4532 = icmp eq i32 %4531, 2
  %4533 = zext i1 %4532 to i8
  store i8 %4533, i8* %39, align 1
  %4534 = icmp ne i8 %4526, 0
  %4535 = xor i1 %4534, %4532
  %.v318 = select i1 %4535, i64 14, i64 68
  %4536 = add i64 %4502, %.v318
  %4537 = add i64 %4503, -24
  %4538 = add i64 %4536, 3
  store i64 %4538, i64* %3, align 8
  %4539 = inttoptr i64 %4537 to i32*
  %4540 = load i32, i32* %4539, align 4
  %4541 = add i64 %4536, 6
  store i64 %4541, i64* %3, align 8
  %4542 = add i32 %4540, -1
  %4543 = zext i32 %4542 to i64
  store i64 %4543, i64* %RAX.i1321, align 8
  %4544 = icmp eq i32 %4540, 0
  %4545 = zext i1 %4544 to i8
  store i8 %4545, i8* %14, align 1
  %4546 = and i32 %4542, 255
  %4547 = tail call i32 @llvm.ctpop.i32(i32 %4546)
  %4548 = trunc i32 %4547 to i8
  %4549 = and i8 %4548, 1
  %4550 = xor i8 %4549, 1
  store i8 %4550, i8* %21, align 1
  %4551 = xor i32 %4542, %4540
  %4552 = lshr i32 %4551, 4
  %4553 = trunc i32 %4552 to i8
  %4554 = and i8 %4553, 1
  store i8 %4554, i8* %27, align 1
  %4555 = icmp eq i32 %4542, 0
  %4556 = zext i1 %4555 to i8
  store i8 %4556, i8* %30, align 1
  %4557 = lshr i32 %4542, 31
  %4558 = trunc i32 %4557 to i8
  store i8 %4558, i8* %33, align 1
  %4559 = lshr i32 %4540, 31
  %4560 = xor i32 %4557, %4559
  %4561 = add nuw nsw i32 %4560, %4559
  %4562 = icmp eq i32 %4561, 2
  %4563 = zext i1 %4562 to i8
  store i8 %4563, i8* %39, align 1
  br i1 %4535, label %block_47f363, label %block_.L_47f399

block_47f363:                                     ; preds = %routine_idivl__ecx.exit1633
  %4564 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %4565 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %4566 = sub i32 %4564, %4565
  %4567 = zext i32 %4566 to i64
  store i64 %4567, i64* %RCX.i1948, align 8
  %4568 = sext i32 %4542 to i64
  %4569 = sext i32 %4566 to i64
  %4570 = mul nsw i64 %4569, %4568
  %4571 = trunc i64 %4570 to i32
  %4572 = and i64 %4570, 4294967295
  store i64 %4572, i64* %RAX.i1321, align 8
  %4573 = shl i64 %4570, 32
  %4574 = ashr exact i64 %4573, 32
  %4575 = icmp ne i64 %4574, %4570
  %4576 = zext i1 %4575 to i8
  store i8 %4576, i8* %14, align 1
  %4577 = and i32 %4571, 255
  %4578 = tail call i32 @llvm.ctpop.i32(i32 %4577)
  %4579 = trunc i32 %4578 to i8
  %4580 = and i8 %4579, 1
  %4581 = xor i8 %4580, 1
  store i8 %4581, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4582 = lshr i32 %4571, 31
  %4583 = trunc i32 %4582 to i8
  store i8 %4583, i8* %33, align 1
  store i8 %4576, i8* %39, align 1
  %4584 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %4584, i64* %RDX.i1878, align 8
  %4585 = add i64 %4584, 1236
  %4586 = add i64 %4536, 37
  store i64 %4586, i64* %3, align 8
  %4587 = inttoptr i64 %4585 to i32*
  %4588 = load i32, i32* %4587, align 4
  %4589 = add i32 %4588, -1
  %4590 = zext i32 %4589 to i64
  store i64 %4590, i64* %RCX.i1948, align 8
  %4591 = icmp eq i32 %4588, 0
  %4592 = zext i1 %4591 to i8
  store i8 %4592, i8* %14, align 1
  %4593 = and i32 %4589, 255
  %4594 = tail call i32 @llvm.ctpop.i32(i32 %4593)
  %4595 = trunc i32 %4594 to i8
  %4596 = and i8 %4595, 1
  %4597 = xor i8 %4596, 1
  store i8 %4597, i8* %21, align 1
  %4598 = xor i32 %4589, %4588
  %4599 = lshr i32 %4598, 4
  %4600 = trunc i32 %4599 to i8
  %4601 = and i8 %4600, 1
  store i8 %4601, i8* %27, align 1
  %4602 = icmp eq i32 %4589, 0
  %4603 = zext i1 %4602 to i8
  store i8 %4603, i8* %30, align 1
  %4604 = lshr i32 %4589, 31
  %4605 = trunc i32 %4604 to i8
  store i8 %4605, i8* %33, align 1
  %4606 = lshr i32 %4588, 31
  %4607 = xor i32 %4604, %4606
  %4608 = add nuw nsw i32 %4607, %4606
  %4609 = icmp eq i32 %4608, 2
  %4610 = zext i1 %4609 to i8
  store i8 %4610, i8* %39, align 1
  %sext319 = shl i64 %4570, 32
  %4611 = ashr exact i64 %sext319, 32
  %4612 = lshr i64 %4611, 32
  store i64 %4612, i64* %3494, align 8
  %4613 = add i64 %4536, 43
  store i64 %4613, i64* %3, align 8
  %4614 = and i64 %4570, 4294967295
  %4615 = sext i32 %4589 to i64
  %4616 = shl nuw i64 %4612, 32
  %4617 = or i64 %4616, %4614
  %4618 = sdiv i64 %4617, %4615
  %4619 = shl i64 %4618, 32
  %4620 = ashr exact i64 %4619, 32
  %4621 = icmp eq i64 %4618, %4620
  br i1 %4621, label %4624, label %4622

; <label>:4622:                                   ; preds = %block_47f363
  %4623 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4613, %struct.Memory* %4504)
  %.pre266 = load i32, i32* %3495, align 4
  %.pre267 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1601

; <label>:4624:                                   ; preds = %block_47f363
  %4625 = srem i64 %4617, %4615
  %4626 = and i64 %4618, 4294967295
  store i64 %4626, i64* %RAX.i1321, align 8
  %4627 = and i64 %4625, 4294967295
  store i64 %4627, i64* %RDX.i1878, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4628 = trunc i64 %4618 to i32
  br label %routine_idivl__ecx.exit1601

routine_idivl__ecx.exit1601:                      ; preds = %4624, %4622
  %4629 = phi i64 [ %.pre267, %4622 ], [ %4613, %4624 ]
  %4630 = phi i32 [ %.pre266, %4622 ], [ %4628, %4624 ]
  %4631 = phi %struct.Memory* [ %4623, %4622 ], [ %4504, %4624 ]
  %4632 = load i64, i64* %RBP.i, align 8
  %4633 = add i64 %4632, -164
  %4634 = add i64 %4629, 6
  store i64 %4634, i64* %3, align 8
  %4635 = inttoptr i64 %4633 to i32*
  store i32 %4630, i32* %4635, align 4
  %4636 = load i64, i64* %3, align 8
  %4637 = add i64 %4636, 23
  store i64 %4637, i64* %3, align 8
  br label %block_.L_47f3ab

block_.L_47f399:                                  ; preds = %routine_idivl__ecx.exit1633
  %4638 = sext i32 %4542 to i64
  %4639 = mul nsw i64 %4638, -2
  %4640 = trunc i64 %4639 to i32
  %4641 = and i64 %4639, 4294967294
  store i64 %4641, i64* %RAX.i1321, align 8
  %4642 = mul i64 %4638, -8589934592
  %4643 = ashr exact i64 %4642, 32
  %4644 = icmp ne i64 %4643, %4639
  %4645 = zext i1 %4644 to i8
  store i8 %4645, i8* %14, align 1
  %4646 = and i32 %4640, 254
  %4647 = tail call i32 @llvm.ctpop.i32(i32 %4646)
  %4648 = trunc i32 %4647 to i8
  %4649 = and i8 %4648, 1
  %4650 = xor i8 %4649, 1
  store i8 %4650, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4651 = lshr i32 %4640, 31
  %4652 = trunc i32 %4651 to i8
  store i8 %4652, i8* %33, align 1
  store i8 %4645, i8* %39, align 1
  %4653 = add i64 %4503, -164
  %4654 = trunc i64 %4639 to i32
  %4655 = add i64 %4536, 15
  store i64 %4655, i64* %3, align 8
  %4656 = inttoptr i64 %4653 to i32*
  store i32 %4654, i32* %4656, align 4
  %.pre268 = load i64, i64* %3, align 8
  br label %block_.L_47f3ab

block_.L_47f3ab:                                  ; preds = %block_.L_47f399, %routine_idivl__ecx.exit1601
  %4657 = phi i64 [ %.pre268, %block_.L_47f399 ], [ %4637, %routine_idivl__ecx.exit1601 ]
  %MEMORY.66 = phi %struct.Memory* [ %4504, %block_.L_47f399 ], [ %4631, %routine_idivl__ecx.exit1601 ]
  %4658 = load i64, i64* %RBP.i, align 8
  %4659 = add i64 %4658, -164
  %4660 = add i64 %4657, 6
  store i64 %4660, i64* %3, align 8
  %4661 = inttoptr i64 %4659 to i32*
  %4662 = load i32, i32* %4661, align 4
  %4663 = zext i32 %4662 to i64
  store i64 %4663, i64* %RAX.i1321, align 8
  %4664 = add i64 %4658, -152
  %4665 = add i64 %4657, 12
  store i64 %4665, i64* %3, align 8
  %4666 = inttoptr i64 %4664 to i32*
  store i32 %4662, i32* %4666, align 4
  %.pre269 = load i64, i64* %3, align 8
  br label %block_.L_47f3b7

block_.L_47f3b7:                                  ; preds = %block_.L_47f3ab, %block_47f2f6
  %4667 = phi i64 [ %.pre269, %block_.L_47f3ab ], [ %4396, %block_47f2f6 ]
  %MEMORY.67 = phi %struct.Memory* [ %MEMORY.66, %block_.L_47f3ab ], [ %MEMORY.65, %block_47f2f6 ]
  %4668 = load i64, i64* %RBP.i, align 8
  %4669 = add i64 %4668, -152
  %4670 = add i64 %4667, 6
  store i64 %4670, i64* %3, align 8
  %4671 = inttoptr i64 %4669 to i32*
  %4672 = load i32, i32* %4671, align 4
  %4673 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %4674 = add i32 %4673, %4672
  %4675 = zext i32 %4674 to i64
  %4676 = lshr i32 %4674, 31
  store i32 %4674, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i64 %4675, i64* %RAX.i1321, align 8
  %4677 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %4678 = sub i32 %4674, %4677
  %4679 = icmp ult i32 %4674, %4677
  %4680 = zext i1 %4679 to i8
  store i8 %4680, i8* %14, align 1
  %4681 = and i32 %4678, 255
  %4682 = tail call i32 @llvm.ctpop.i32(i32 %4681)
  %4683 = trunc i32 %4682 to i8
  %4684 = and i8 %4683, 1
  %4685 = xor i8 %4684, 1
  store i8 %4685, i8* %21, align 1
  %4686 = xor i32 %4677, %4674
  %4687 = xor i32 %4686, %4678
  %4688 = lshr i32 %4687, 4
  %4689 = trunc i32 %4688 to i8
  %4690 = and i8 %4689, 1
  store i8 %4690, i8* %27, align 1
  %4691 = icmp eq i32 %4678, 0
  %4692 = zext i1 %4691 to i8
  store i8 %4692, i8* %30, align 1
  %4693 = lshr i32 %4678, 31
  %4694 = trunc i32 %4693 to i8
  store i8 %4694, i8* %33, align 1
  %4695 = lshr i32 %4677, 31
  %4696 = xor i32 %4695, %4676
  %4697 = xor i32 %4693, %4676
  %4698 = add nuw nsw i32 %4697, %4696
  %4699 = icmp eq i32 %4698, 2
  %4700 = zext i1 %4699 to i8
  store i8 %4700, i8* %39, align 1
  %4701 = icmp ne i8 %4694, 0
  %4702 = xor i1 %4701, %4699
  %.v405 = select i1 %4702, i64 40, i64 58
  %4703 = add i64 %4667, %.v405
  %4704 = add i64 %4703, 7
  store i64 %4704, i64* %3, align 8
  br i1 %4702, label %block_47f3df, label %block_.L_47f3f1

block_47f3df:                                     ; preds = %block_.L_47f3b7
  store i64 %4675, i64* %RAX.i1321, align 8
  %4705 = add i64 %4668, -168
  %4706 = add i64 %4703, 13
  store i64 %4706, i64* %3, align 8
  %4707 = inttoptr i64 %4705 to i32*
  store i32 %4674, i32* %4707, align 4
  %4708 = load i64, i64* %3, align 8
  %4709 = add i64 %4708, 18
  store i64 %4709, i64* %3, align 8
  br label %block_.L_47f3fe

block_.L_47f3f1:                                  ; preds = %block_.L_47f3b7
  %4710 = zext i32 %4677 to i64
  store i64 %4710, i64* %RAX.i1321, align 8
  %4711 = add i64 %4668, -168
  %4712 = add i64 %4703, 13
  store i64 %4712, i64* %3, align 8
  %4713 = inttoptr i64 %4711 to i32*
  store i32 %4677, i32* %4713, align 4
  %.pre270 = load i64, i64* %3, align 8
  br label %block_.L_47f3fe

block_.L_47f3fe:                                  ; preds = %block_.L_47f3f1, %block_47f3df
  %4714 = phi i64 [ %.pre270, %block_.L_47f3f1 ], [ %4709, %block_47f3df ]
  %4715 = load i64, i64* %RBP.i, align 8
  %4716 = add i64 %4715, -168
  %4717 = add i64 %4714, 6
  store i64 %4717, i64* %3, align 8
  %4718 = inttoptr i64 %4716 to i32*
  %4719 = load i32, i32* %4718, align 4
  store i32 %4719, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %4720 = load i32, i32* bitcast (%G_0x710364_type* @G_0x710364 to i32*), align 8
  %4721 = zext i32 %4720 to i64
  store i64 %4721, i64* %RAX.i1321, align 8
  %4722 = sub i32 %4720, %4719
  %4723 = icmp ult i32 %4720, %4719
  %4724 = zext i1 %4723 to i8
  store i8 %4724, i8* %14, align 1
  %4725 = and i32 %4722, 255
  %4726 = tail call i32 @llvm.ctpop.i32(i32 %4725)
  %4727 = trunc i32 %4726 to i8
  %4728 = and i8 %4727, 1
  %4729 = xor i8 %4728, 1
  store i8 %4729, i8* %21, align 1
  %4730 = xor i32 %4719, %4720
  %4731 = xor i32 %4730, %4722
  %4732 = lshr i32 %4731, 4
  %4733 = trunc i32 %4732 to i8
  %4734 = and i8 %4733, 1
  store i8 %4734, i8* %27, align 1
  %4735 = icmp eq i32 %4722, 0
  %4736 = zext i1 %4735 to i8
  store i8 %4736, i8* %30, align 1
  %4737 = lshr i32 %4722, 31
  %4738 = trunc i32 %4737 to i8
  store i8 %4738, i8* %33, align 1
  %4739 = lshr i32 %4720, 31
  %4740 = lshr i32 %4719, 31
  %4741 = xor i32 %4740, %4739
  %4742 = xor i32 %4737, %4739
  %4743 = add nuw nsw i32 %4742, %4741
  %4744 = icmp eq i32 %4743, 2
  %4745 = zext i1 %4744 to i8
  store i8 %4745, i8* %39, align 1
  %4746 = icmp ne i8 %4738, 0
  %4747 = xor i1 %4746, %4744
  %.v406 = select i1 %4747, i64 33, i64 51
  %4748 = add i64 %4714, %.v406
  %4749 = add i64 %4748, 7
  store i64 %4749, i64* %3, align 8
  br i1 %4747, label %block_47f41f, label %block_.L_47f431

block_47f41f:                                     ; preds = %block_.L_47f3fe
  %4750 = zext i32 %4719 to i64
  store i64 %4750, i64* %RAX.i1321, align 8
  %4751 = add i64 %4715, -172
  %4752 = add i64 %4748, 13
  store i64 %4752, i64* %3, align 8
  %4753 = inttoptr i64 %4751 to i32*
  store i32 %4719, i32* %4753, align 4
  %4754 = load i64, i64* %3, align 8
  %4755 = add i64 %4754, 18
  store i64 %4755, i64* %3, align 8
  br label %block_.L_47f43e

block_.L_47f431:                                  ; preds = %block_.L_47f3fe
  store i64 %4721, i64* %RAX.i1321, align 8
  %4756 = add i64 %4715, -172
  %4757 = add i64 %4748, 13
  store i64 %4757, i64* %3, align 8
  %4758 = inttoptr i64 %4756 to i32*
  store i32 %4720, i32* %4758, align 4
  %.pre271 = load i64, i64* %3, align 8
  br label %block_.L_47f43e

block_.L_47f43e:                                  ; preds = %block_.L_47f431, %block_47f41f
  %4759 = phi i64 [ %.pre271, %block_.L_47f431 ], [ %4755, %block_47f41f ]
  %4760 = load i64, i64* %RBP.i, align 8
  %4761 = add i64 %4760, -172
  %4762 = add i64 %4759, 6
  store i64 %4762, i64* %3, align 8
  %4763 = inttoptr i64 %4761 to i32*
  %4764 = load i32, i32* %4763, align 4
  %4765 = zext i32 %4764 to i64
  store i64 %4765, i64* %RAX.i1321, align 8
  %4766 = add i64 %4759, 13
  store i64 %4766, i64* %3, align 8
  store i32 %4764, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47f44b

block_.L_47f44b:                                  ; preds = %block_.L_47f43e, %block_.L_47f01b
  %4767 = phi i64 [ %4760, %block_.L_47f43e ], [ %3462, %block_.L_47f01b ]
  %4768 = phi i32 [ %4764, %block_.L_47f43e ], [ %3466, %block_.L_47f01b ]
  %4769 = phi i64 [ %4766, %block_.L_47f43e ], [ %3468, %block_.L_47f01b ]
  %MEMORY.70 = phi %struct.Memory* [ %MEMORY.67, %block_.L_47f43e ], [ %MEMORY.51, %block_.L_47f01b ]
  %4770 = zext i32 %4768 to i64
  store i64 %4770, i64* %RAX.i1321, align 8
  %4771 = add i64 %4767, -4
  %4772 = add i64 %4769, 10
  store i64 %4772, i64* %3, align 8
  %4773 = inttoptr i64 %4771 to i32*
  store i32 %4768, i32* %4773, align 4
  %4774 = load i64, i64* %3, align 8
  %4775 = add i64 %4774, 4648
  store i64 %4775, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47f45a:                                  ; preds = %block_47ee8b
  %4776 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %4777 = zext i32 %4776 to i64
  store i64 %4777, i64* %RAX.i1321, align 8
  %4778 = add i64 %3088, -4
  %4779 = add i64 %3116, 10
  store i64 %4779, i64* %3, align 8
  %4780 = inttoptr i64 %4778 to i32*
  store i32 %4776, i32* %4780, align 4
  %4781 = load i64, i64* %3, align 8
  %4782 = add i64 %4781, 4633
  store i64 %4782, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47f469:                                  ; preds = %block_.L_47ee6f
  store i64 %47, i64* %RAX.i1321, align 8
  %4783 = add i64 %3087, 12
  store i64 %4783, i64* %3, align 8
  %4784 = load i32, i32* %2959, align 4
  store i8 0, i8* %14, align 1
  %4785 = and i32 %4784, 255
  %4786 = tail call i32 @llvm.ctpop.i32(i32 %4785)
  %4787 = trunc i32 %4786 to i8
  %4788 = and i8 %4787, 1
  %4789 = xor i8 %4788, 1
  store i8 %4789, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4790 = icmp eq i32 %4784, 0
  %4791 = zext i1 %4790 to i8
  store i8 %4791, i8* %30, align 1
  %4792 = lshr i32 %4784, 31
  %4793 = trunc i32 %4792 to i8
  store i8 %4793, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v326 = select i1 %4790, i64 18, i64 4598
  %4794 = add i64 %3087, %.v326
  store i64 %4794, i64* %3, align 8
  br i1 %4790, label %block_47f47b, label %block_.L_48065f

block_47f47b:                                     ; preds = %block_.L_47f469
  store i64 %47, i64* %RAX.i1321, align 8
  %4795 = add i64 %47, 72568
  %4796 = add i64 %4794, 15
  store i64 %4796, i64* %3, align 8
  %4797 = inttoptr i64 %4795 to i32*
  %4798 = load i32, i32* %4797, align 4
  %4799 = add i32 %4798, -1
  %4800 = icmp eq i32 %4798, 0
  %4801 = zext i1 %4800 to i8
  store i8 %4801, i8* %14, align 1
  %4802 = and i32 %4799, 255
  %4803 = tail call i32 @llvm.ctpop.i32(i32 %4802)
  %4804 = trunc i32 %4803 to i8
  %4805 = and i8 %4804, 1
  %4806 = xor i8 %4805, 1
  store i8 %4806, i8* %21, align 1
  %4807 = xor i32 %4799, %4798
  %4808 = lshr i32 %4807, 4
  %4809 = trunc i32 %4808 to i8
  %4810 = and i8 %4809, 1
  store i8 %4810, i8* %27, align 1
  %4811 = icmp eq i32 %4799, 0
  %4812 = zext i1 %4811 to i8
  store i8 %4812, i8* %30, align 1
  %4813 = lshr i32 %4799, 31
  %4814 = trunc i32 %4813 to i8
  store i8 %4814, i8* %33, align 1
  %4815 = lshr i32 %4798, 31
  %4816 = xor i32 %4813, %4815
  %4817 = add nuw nsw i32 %4816, %4815
  %4818 = icmp eq i32 %4817, 2
  %4819 = zext i1 %4818 to i8
  store i8 %4819, i8* %39, align 1
  %.v327 = select i1 %4811, i64 21, i64 520
  %4820 = add i64 %4794, %.v327
  store i64 %4820, i64* %3, align 8
  br i1 %4811, label %block_47f490, label %block_.L_47f683

block_47f490:                                     ; preds = %block_47f47b
  store i64 %47, i64* %RAX.i1321, align 8
  %4821 = add i64 %47, 72576
  %4822 = add i64 %4820, 15
  store i64 %4822, i64* %3, align 8
  %4823 = inttoptr i64 %4821 to i32*
  %4824 = load i32, i32* %4823, align 4
  store i8 0, i8* %14, align 1
  %4825 = and i32 %4824, 255
  %4826 = tail call i32 @llvm.ctpop.i32(i32 %4825)
  %4827 = trunc i32 %4826 to i8
  %4828 = and i8 %4827, 1
  %4829 = xor i8 %4828, 1
  store i8 %4829, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4830 = icmp eq i32 %4824, 0
  %4831 = zext i1 %4830 to i8
  store i8 %4831, i8* %30, align 1
  %4832 = lshr i32 %4824, 31
  %4833 = trunc i32 %4832 to i8
  store i8 %4833, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v384 = select i1 %4830, i64 21, i64 499
  %4834 = add i64 %4820, %.v384
  store i64 %4834, i64* %3, align 8
  br i1 %4830, label %block_47f4a5, label %block_.L_47f683

block_47f4a5:                                     ; preds = %block_47f490
  store i64 %47, i64* %RAX.i1321, align 8
  %4835 = add i64 %47, 72600
  %4836 = add i64 %4834, 15
  store i64 %4836, i64* %3, align 8
  %4837 = inttoptr i64 %4835 to i32*
  %4838 = load i32, i32* %4837, align 4
  store i8 0, i8* %14, align 1
  %4839 = and i32 %4838, 255
  %4840 = tail call i32 @llvm.ctpop.i32(i32 %4839)
  %4841 = trunc i32 %4840 to i8
  %4842 = and i8 %4841, 1
  %4843 = xor i8 %4842, 1
  store i8 %4843, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4844 = icmp eq i32 %4838, 0
  %4845 = zext i1 %4844 to i8
  store i8 %4845, i8* %30, align 1
  %4846 = lshr i32 %4838, 31
  %4847 = trunc i32 %4846 to i8
  store i8 %4847, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v385 = select i1 %4844, i64 63, i64 21
  %4848 = add i64 %4834, %.v385
  store i64 %4848, i64* %3, align 8
  br i1 %4844, label %block_.L_47f4e4, label %block_47f4ba

block_47f4ba:                                     ; preds = %block_47f4a5
  store i64 %47, i64* %RAX.i1321, align 8
  %4849 = add i64 %4848, 15
  store i64 %4849, i64* %3, align 8
  %4850 = load i32, i32* %4837, align 4
  %4851 = add i32 %4850, -1
  %4852 = icmp eq i32 %4850, 0
  %4853 = zext i1 %4852 to i8
  store i8 %4853, i8* %14, align 1
  %4854 = and i32 %4851, 255
  %4855 = tail call i32 @llvm.ctpop.i32(i32 %4854)
  %4856 = trunc i32 %4855 to i8
  %4857 = and i8 %4856, 1
  %4858 = xor i8 %4857, 1
  store i8 %4858, i8* %21, align 1
  %4859 = xor i32 %4851, %4850
  %4860 = lshr i32 %4859, 4
  %4861 = trunc i32 %4860 to i8
  %4862 = and i8 %4861, 1
  store i8 %4862, i8* %27, align 1
  %4863 = icmp eq i32 %4851, 0
  %4864 = zext i1 %4863 to i8
  store i8 %4864, i8* %30, align 1
  %4865 = lshr i32 %4851, 31
  %4866 = trunc i32 %4865 to i8
  store i8 %4866, i8* %33, align 1
  %4867 = lshr i32 %4850, 31
  %4868 = xor i32 %4865, %4867
  %4869 = add nuw nsw i32 %4868, %4867
  %4870 = icmp eq i32 %4869, 2
  %4871 = zext i1 %4870 to i8
  store i8 %4871, i8* %39, align 1
  %.v386 = select i1 %4863, i64 21, i64 452
  %4872 = add i64 %4848, %.v386
  store i64 %4872, i64* %3, align 8
  br i1 %4863, label %block_47f4cf, label %block_.L_47f67e

block_47f4cf:                                     ; preds = %block_47f4ba
  store i64 %47, i64* %RAX.i1321, align 8
  %4873 = add i64 %47, 72612
  %4874 = add i64 %4872, 15
  store i64 %4874, i64* %3, align 8
  %4875 = inttoptr i64 %4873 to i32*
  %4876 = load i32, i32* %4875, align 4
  store i8 0, i8* %14, align 1
  %4877 = and i32 %4876, 255
  %4878 = tail call i32 @llvm.ctpop.i32(i32 %4877)
  %4879 = trunc i32 %4878 to i8
  %4880 = and i8 %4879, 1
  %4881 = xor i8 %4880, 1
  store i8 %4881, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4882 = icmp eq i32 %4876, 0
  %4883 = zext i1 %4882 to i8
  store i8 %4883, i8* %30, align 1
  %4884 = lshr i32 %4876, 31
  %4885 = trunc i32 %4884 to i8
  store i8 %4885, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v387 = select i1 %4882, i64 21, i64 431
  %4886 = add i64 %4872, %.v387
  store i64 %4886, i64* %3, align 8
  br i1 %4882, label %block_.L_47f4e4, label %block_.L_47f67e

block_.L_47f4e4:                                  ; preds = %block_47f4cf, %block_47f4a5
  %4887 = phi i64 [ %4886, %block_47f4cf ], [ %4848, %block_47f4a5 ]
  %4888 = load i32, i32* bitcast (%G_0x6cd474_type* @G_0x6cd474 to i32*), align 8
  store i32 %4888, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %RCX.i1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4889 = add i64 %47, 72532
  %4890 = add i64 %4887, 32
  store i64 %4890, i64* %3, align 8
  %4891 = inttoptr i64 %4889 to i32*
  store i32 0, i32* %4891, align 4
  %4892 = load i64, i64* %3, align 8
  %4893 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4893, i64* %RCX.i1482, align 8
  %4894 = add i64 %4893, 72536
  %4895 = add i64 %4892, 18
  store i64 %4895, i64* %3, align 8
  %4896 = inttoptr i64 %4894 to i32*
  store i32 0, i32* %4896, align 4
  %4897 = load i64, i64* %3, align 8
  %4898 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %4899 = add i32 %4898, -1
  %4900 = zext i32 %4899 to i64
  store i64 %4900, i64* %RAX.i1321, align 8
  %4901 = icmp ne i32 %4898, 0
  %4902 = zext i1 %4901 to i8
  store i8 %4902, i8* %14, align 1
  %4903 = and i32 %4899, 255
  %4904 = tail call i32 @llvm.ctpop.i32(i32 %4903)
  %4905 = trunc i32 %4904 to i8
  %4906 = and i8 %4905, 1
  %4907 = xor i8 %4906, 1
  store i8 %4907, i8* %21, align 1
  %4908 = xor i32 %4898, 16
  %4909 = xor i32 %4908, %4899
  %4910 = lshr i32 %4909, 4
  %4911 = trunc i32 %4910 to i8
  %4912 = and i8 %4911, 1
  store i8 %4912, i8* %27, align 1
  %4913 = icmp eq i32 %4899, 0
  %4914 = zext i1 %4913 to i8
  store i8 %4914, i8* %30, align 1
  %4915 = lshr i32 %4899, 31
  %4916 = trunc i32 %4915 to i8
  store i8 %4916, i8* %33, align 1
  %4917 = lshr i32 %4898, 31
  %4918 = xor i32 %4915, %4917
  %4919 = xor i32 %4915, 1
  %4920 = add nuw nsw i32 %4918, %4919
  %4921 = icmp eq i32 %4920, 2
  %4922 = zext i1 %4921 to i8
  store i8 %4922, i8* %39, align 1
  store i32 %4899, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %4923 = load i64, i64* %RBP.i, align 8
  %4924 = add i64 %4923, -8
  %4925 = add i64 %4897, 21
  store i64 %4925, i64* %3, align 8
  %4926 = inttoptr i64 %4924 to i32*
  %4927 = load i32, i32* %4926, align 4
  store i8 0, i8* %14, align 1
  %4928 = and i32 %4927, 255
  %4929 = tail call i32 @llvm.ctpop.i32(i32 %4928)
  %4930 = trunc i32 %4929 to i8
  %4931 = and i8 %4930, 1
  %4932 = xor i8 %4931, 1
  store i8 %4932, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4933 = icmp eq i32 %4927, 0
  %4934 = zext i1 %4933 to i8
  store i8 %4934, i8* %30, align 1
  %4935 = lshr i32 %4927, 31
  %4936 = trunc i32 %4935 to i8
  store i8 %4936, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v388 = select i1 %4933, i64 27, i64 310
  %4937 = add i64 %4897, %.v388
  store i64 %4937, i64* %3, align 8
  br i1 %4933, label %block_47f531, label %block_.L_47f64c

block_47f531:                                     ; preds = %block_.L_47f4e4
  store i8 0, i8* %14, align 1
  store i8 %4907, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 %4914, i8* %30, align 1
  store i8 %4916, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v389 = select i1 %4913, i64 14, i64 283
  %4938 = add i64 %4937, %.v389
  store i64 %4938, i64* %3, align 8
  br i1 %4913, label %block_47f53f, label %block_.L_47f64c

block_47f53f:                                     ; preds = %block_47f531
  %4939 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %4939, i64* %RAX.i1321, align 8
  %4940 = add i64 %4939, 1148
  %4941 = add i64 %4938, 15
  store i64 %4941, i64* %3, align 8
  %4942 = inttoptr i64 %4940 to i32*
  %4943 = load i32, i32* %4942, align 4
  store i8 0, i8* %14, align 1
  %4944 = and i32 %4943, 255
  %4945 = tail call i32 @llvm.ctpop.i32(i32 %4944)
  %4946 = trunc i32 %4945 to i8
  %4947 = and i8 %4946, 1
  %4948 = xor i8 %4947, 1
  store i8 %4948, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4949 = icmp eq i32 %4943, 0
  %4950 = zext i1 %4949 to i8
  store i8 %4950, i8* %30, align 1
  %4951 = lshr i32 %4943, 31
  %4952 = trunc i32 %4951 to i8
  store i8 %4952, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v390 = select i1 %4949, i64 21, i64 42
  %4953 = add i64 %4938, %.v390
  store i64 %4953, i64* %3, align 8
  br i1 %4949, label %block_47f554, label %block_.L_47f569

block_47f554:                                     ; preds = %block_47f53f
  %4954 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %4954, i64* %RAX.i1321, align 8
  %4955 = add i64 %4954, 2880
  %4956 = add i64 %4953, 15
  store i64 %4956, i64* %3, align 8
  %4957 = inttoptr i64 %4955 to i32*
  %4958 = load i32, i32* %4957, align 4
  %4959 = add i32 %4958, -1
  %4960 = icmp eq i32 %4958, 0
  %4961 = zext i1 %4960 to i8
  store i8 %4961, i8* %14, align 1
  %4962 = and i32 %4959, 255
  %4963 = tail call i32 @llvm.ctpop.i32(i32 %4962)
  %4964 = trunc i32 %4963 to i8
  %4965 = and i8 %4964, 1
  %4966 = xor i8 %4965, 1
  store i8 %4966, i8* %21, align 1
  %4967 = xor i32 %4959, %4958
  %4968 = lshr i32 %4967, 4
  %4969 = trunc i32 %4968 to i8
  %4970 = and i8 %4969, 1
  store i8 %4970, i8* %27, align 1
  %4971 = icmp eq i32 %4959, 0
  %4972 = zext i1 %4971 to i8
  store i8 %4972, i8* %30, align 1
  %4973 = lshr i32 %4959, 31
  %4974 = trunc i32 %4973 to i8
  store i8 %4974, i8* %33, align 1
  %4975 = lshr i32 %4958, 31
  %4976 = xor i32 %4973, %4975
  %4977 = add nuw nsw i32 %4976, %4975
  %4978 = icmp eq i32 %4977, 2
  %4979 = zext i1 %4978 to i8
  store i8 %4979, i8* %39, align 1
  %.v391 = select i1 %4971, i64 21, i64 109
  %4980 = add i64 %4953, %.v391
  store i64 %4980, i64* %3, align 8
  br i1 %4971, label %block_.L_47f569, label %block_.L_47f5c1

block_.L_47f569:                                  ; preds = %block_47f554, %block_47f53f
  %4981 = phi i64 [ %4980, %block_47f554 ], [ %4953, %block_47f53f ]
  %4982 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %4983 = zext i32 %4982 to i64
  store i64 %4983, i64* %RAX.i1321, align 8
  %4984 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4984, i64* %RCX.i1482, align 8
  %4985 = add i64 %4984, 72572
  %4986 = add i64 %4981, 21
  store i64 %4986, i64* %3, align 8
  %4987 = inttoptr i64 %4985 to i32*
  %4988 = load i32, i32* %4987, align 4
  %4989 = add i32 %4988, %4982
  %4990 = icmp ult i32 %4989, %4982
  %4991 = icmp ult i32 %4989, %4988
  %4992 = or i1 %4990, %4991
  %4993 = zext i1 %4992 to i8
  store i8 %4993, i8* %14, align 1
  %4994 = and i32 %4989, 255
  %4995 = tail call i32 @llvm.ctpop.i32(i32 %4994)
  %4996 = trunc i32 %4995 to i8
  %4997 = and i8 %4996, 1
  %4998 = xor i8 %4997, 1
  store i8 %4998, i8* %21, align 1
  %4999 = xor i32 %4988, %4982
  %5000 = xor i32 %4999, %4989
  %5001 = lshr i32 %5000, 4
  %5002 = trunc i32 %5001 to i8
  %5003 = and i8 %5002, 1
  store i8 %5003, i8* %27, align 1
  %5004 = icmp eq i32 %4989, 0
  %5005 = zext i1 %5004 to i8
  store i8 %5005, i8* %30, align 1
  %5006 = lshr i32 %4989, 31
  %5007 = trunc i32 %5006 to i8
  store i8 %5007, i8* %33, align 1
  %5008 = lshr i32 %4982, 31
  %5009 = lshr i32 %4988, 31
  %5010 = xor i32 %5006, %5008
  %5011 = xor i32 %5006, %5009
  %5012 = add nuw nsw i32 %5010, %5011
  %5013 = icmp eq i32 %5012, 2
  %5014 = zext i1 %5013 to i8
  store i8 %5014, i8* %39, align 1
  %5015 = add i64 %4981, 27
  store i64 %5015, i64* %3, align 8
  store i32 %4989, i32* %4987, align 4
  %5016 = load i64, i64* %3, align 8
  %5017 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  store i32 %5017, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %5018 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i32 %5018, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  store i32 %5018, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %5019 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %5020 = zext i32 %5019 to i64
  store i64 %5020, i64* %RAX.i1321, align 8
  %5021 = add i64 %5016, 56
  store i64 %5021, i64* %3, align 8
  store i32 %5019, i32* bitcast (%G_0x722c78_type* @G_0x722c78 to i32*), align 8
  %5022 = add i64 %5016, 195
  %.pre272.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_47f647

block_.L_47f5c1:                                  ; preds = %block_47f554
  store i64 %4954, i64* %RAX.i1321, align 8
  %5023 = add i64 %4980, 15
  store i64 %5023, i64* %3, align 8
  %5024 = load i32, i32* %4957, align 4
  %5025 = add i32 %5024, -2
  %5026 = icmp ult i32 %5024, 2
  %5027 = zext i1 %5026 to i8
  store i8 %5027, i8* %14, align 1
  %5028 = and i32 %5025, 255
  %5029 = tail call i32 @llvm.ctpop.i32(i32 %5028)
  %5030 = trunc i32 %5029 to i8
  %5031 = and i8 %5030, 1
  %5032 = xor i8 %5031, 1
  store i8 %5032, i8* %21, align 1
  %5033 = xor i32 %5025, %5024
  %5034 = lshr i32 %5033, 4
  %5035 = trunc i32 %5034 to i8
  %5036 = and i8 %5035, 1
  store i8 %5036, i8* %27, align 1
  %5037 = icmp eq i32 %5025, 0
  %5038 = zext i1 %5037 to i8
  store i8 %5038, i8* %30, align 1
  %5039 = lshr i32 %5025, 31
  %5040 = trunc i32 %5039 to i8
  store i8 %5040, i8* %33, align 1
  %5041 = lshr i32 %5024, 31
  %5042 = xor i32 %5039, %5041
  %5043 = add nuw nsw i32 %5042, %5041
  %5044 = icmp eq i32 %5043, 2
  %5045 = zext i1 %5044 to i8
  store i8 %5045, i8* %39, align 1
  %.v392 = select i1 %5037, i64 42, i64 21
  %5046 = add i64 %4980, %.v392
  store i64 %5046, i64* %3, align 8
  br i1 %5037, label %block_.L_47f5eb, label %block_47f5d6

block_47f5d6:                                     ; preds = %block_.L_47f5c1
  store i64 %4954, i64* %RAX.i1321, align 8
  %5047 = add i64 %4954, 2884
  %5048 = add i64 %5046, 15
  store i64 %5048, i64* %3, align 8
  %5049 = inttoptr i64 %5047 to i32*
  %5050 = load i32, i32* %5049, align 4
  store i8 0, i8* %14, align 1
  %5051 = and i32 %5050, 255
  %5052 = tail call i32 @llvm.ctpop.i32(i32 %5051)
  %5053 = trunc i32 %5052 to i8
  %5054 = and i8 %5053, 1
  %5055 = xor i8 %5054, 1
  store i8 %5055, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5056 = icmp eq i32 %5050, 0
  %5057 = zext i1 %5056 to i8
  store i8 %5057, i8* %30, align 1
  %5058 = lshr i32 %5050, 31
  %5059 = trunc i32 %5058 to i8
  store i8 %5059, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v393 = select i1 %5056, i64 108, i64 21
  %5060 = add i64 %5046, %.v393
  store i64 %5060, i64* %3, align 8
  br i1 %5056, label %block_.L_47f642, label %block_.L_47f5eb

block_.L_47f5eb:                                  ; preds = %block_47f5d6, %block_.L_47f5c1
  %5061 = phi i64 [ %5060, %block_47f5d6 ], [ %5046, %block_.L_47f5c1 ]
  %5062 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5062, i64* %RAX.i1321, align 8
  %5063 = add i64 %5062, 72600
  %5064 = add i64 %5061, 15
  store i64 %5064, i64* %3, align 8
  %5065 = inttoptr i64 %5063 to i32*
  %5066 = load i32, i32* %5065, align 4
  store i8 0, i8* %14, align 1
  %5067 = and i32 %5066, 255
  %5068 = tail call i32 @llvm.ctpop.i32(i32 %5067)
  %5069 = trunc i32 %5068 to i8
  %5070 = and i8 %5069, 1
  %5071 = xor i8 %5070, 1
  store i8 %5071, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5072 = icmp eq i32 %5066, 0
  %5073 = zext i1 %5072 to i8
  store i8 %5073, i8* %30, align 1
  %5074 = lshr i32 %5066, 31
  %5075 = trunc i32 %5074 to i8
  store i8 %5075, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v394 = select i1 %5072, i64 21, i64 54
  %5076 = add i64 %5061, %.v394
  %5077 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %5078 = zext i32 %5077 to i64
  store i64 %5078, i64* %RAX.i1321, align 8
  %5079 = add i64 %5076, 14
  store i64 %5079, i64* %3, align 8
  br i1 %5072, label %block_47f600, label %block_.L_47f621

block_47f600:                                     ; preds = %block_.L_47f5eb
  store i32 %5077, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %5080 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %5081 = zext i32 %5080 to i64
  store i64 %5081, i64* %RAX.i1321, align 8
  store i32 %5080, i32* bitcast (%G_0x7107a4_type* @G_0x7107a4 to i32*), align 8
  %5082 = add i64 %5076, 61
  store i64 %5082, i64* %3, align 8
  br label %block_.L_47f63d

block_.L_47f621:                                  ; preds = %block_.L_47f5eb
  store i32 %5077, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %5083 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %5084 = zext i32 %5083 to i64
  store i64 %5084, i64* %RAX.i1321, align 8
  %5085 = add i64 %5076, 28
  store i64 %5085, i64* %3, align 8
  store i32 %5083, i32* bitcast (%G_0x6d1f88_type* @G_0x6d1f88 to i32*), align 8
  br label %block_.L_47f63d

block_.L_47f63d:                                  ; preds = %block_.L_47f621, %block_47f600
  %5086 = phi i64 [ %5085, %block_.L_47f621 ], [ %5082, %block_47f600 ]
  %5087 = add i64 %5086, 5
  store i64 %5087, i64* %3, align 8
  br label %block_.L_47f642

block_.L_47f642:                                  ; preds = %block_.L_47f63d, %block_47f5d6
  %5088 = phi i64 [ %5087, %block_.L_47f63d ], [ %5060, %block_47f5d6 ]
  %5089 = add i64 %5088, 5
  store i64 %5089, i64* %3, align 8
  br label %block_.L_47f647

block_.L_47f647:                                  ; preds = %block_.L_47f642, %block_.L_47f569
  %.pre272 = phi i64 [ %.pre272.pre, %block_.L_47f569 ], [ %4923, %block_.L_47f642 ]
  %storemerge181 = phi i64 [ %5022, %block_.L_47f569 ], [ %5089, %block_.L_47f642 ]
  %5090 = add i64 %storemerge181, 5
  store i64 %5090, i64* %3, align 8
  br label %block_.L_47f64c

block_.L_47f64c:                                  ; preds = %block_47f531, %block_.L_47f4e4, %block_.L_47f647
  %5091 = phi i64 [ %.pre272, %block_.L_47f647 ], [ %4923, %block_47f531 ], [ %4923, %block_.L_47f4e4 ]
  %5092 = phi i64 [ %5090, %block_.L_47f647 ], [ %4938, %block_47f531 ], [ %4937, %block_.L_47f4e4 ]
  %5093 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %5094 = zext i32 %5093 to i64
  store i32 %5093, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  %5095 = load i32, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  %5096 = add i32 %5095, %5093
  %5097 = icmp ult i32 %5096, %5093
  %5098 = icmp ult i32 %5096, %5095
  %5099 = or i1 %5097, %5098
  %5100 = zext i1 %5099 to i8
  store i8 %5100, i8* %14, align 1
  %5101 = and i32 %5096, 255
  %5102 = tail call i32 @llvm.ctpop.i32(i32 %5101)
  %5103 = trunc i32 %5102 to i8
  %5104 = and i8 %5103, 1
  %5105 = xor i8 %5104, 1
  store i8 %5105, i8* %21, align 1
  %5106 = xor i32 %5095, %5093
  %5107 = xor i32 %5106, %5096
  %5108 = lshr i32 %5107, 4
  %5109 = trunc i32 %5108 to i8
  %5110 = and i8 %5109, 1
  store i8 %5110, i8* %27, align 1
  %5111 = icmp eq i32 %5096, 0
  %5112 = zext i1 %5111 to i8
  store i8 %5112, i8* %30, align 1
  %5113 = lshr i32 %5096, 31
  %5114 = trunc i32 %5113 to i8
  store i8 %5114, i8* %33, align 1
  %5115 = lshr i32 %5093, 31
  %5116 = lshr i32 %5095, 31
  %5117 = xor i32 %5113, %5115
  %5118 = xor i32 %5113, %5116
  %5119 = add nuw nsw i32 %5117, %5118
  %5120 = icmp eq i32 %5119, 2
  %5121 = zext i1 %5120 to i8
  store i8 %5121, i8* %39, align 1
  store i32 %5096, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  store i64 %5094, i64* %RAX.i1321, align 8
  %5122 = add i64 %5091, -4
  %5123 = add i64 %5092, 45
  store i64 %5123, i64* %3, align 8
  %5124 = inttoptr i64 %5122 to i32*
  store i32 %5093, i32* %5124, align 4
  %5125 = load i64, i64* %3, align 8
  %5126 = add i64 %5125, 4100
  store i64 %5126, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47f67e:                                  ; preds = %block_47f4cf, %block_47f4ba
  %5127 = phi i64 [ %4886, %block_47f4cf ], [ %4872, %block_47f4ba ]
  %5128 = add i64 %5127, 4065
  store i64 %5128, i64* %3, align 8
  br label %block_.L_48065f

block_.L_47f683:                                  ; preds = %block_47f490, %block_47f47b
  %5129 = phi i64 [ %4834, %block_47f490 ], [ %4820, %block_47f47b ]
  %5130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %5131 = bitcast [32 x %union.VectorReg]* %5130 to i8*
  %5132 = load i64, i64* bitcast (%G_0x726420_type* @G_0x726420 to i64*), align 8
  %5133 = bitcast [32 x %union.VectorReg]* %5130 to double*
  %5134 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %5130, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %5136 = bitcast i64* %5135 to double*
  store i64 %5132, i64* bitcast (%G_0x723640_type* @G_0x723640 to i64*), align 8
  %5137 = load i64, i64* bitcast (%G_0x6f9358_type* @G_0x6f9358 to i64*), align 8
  store i64 %5137, i64* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to i64*), align 8
  %5138 = load i32, i32* bitcast (%G_0x6f9720_type* @G_0x6f9720 to i32*), align 8
  %EAX.i1364 = bitcast %union.anon* %45 to i32*
  store i32 %5138, i32* bitcast (%G_0x6d4510_type* @G_0x6d4510 to i32*), align 8
  %5139 = load i32, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  store i32 %5139, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  %5140 = load i32, i32* bitcast (%G_0x6f80c8_type* @G_0x6f80c8 to i32*), align 8
  %5141 = zext i32 %5140 to i64
  store i64 %5141, i64* %RAX.i1321, align 8
  store i32 %5140, i32* bitcast (%G_0x6e51e0_type* @G_0x6e51e0 to i32*), align 8
  %5142 = load i64, i64* bitcast (%G_0x6cfc68_type* @G_0x6cfc68 to i64*), align 8
  store i64 %5142, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  %5143 = load i64, i64* bitcast (%G_0x710798_type* @G_0x710798 to i64*), align 8
  store i64 %5143, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  store i64 %5143, i64* bitcast (%G_0x710008_type* @G_0x710008 to i64*), align 8
  %5144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i1346 = getelementptr inbounds %union.anon, %union.anon* %5144, i64 0, i32 0
  store i64 %47, i64* %RCX.i1346, align 8
  %5145 = add i64 %47, 72600
  %5146 = add i64 %5129, 129
  store i64 %5146, i64* %3, align 8
  %5147 = inttoptr i64 %5145 to i32*
  %5148 = load i32, i32* %5147, align 4
  store i8 0, i8* %14, align 1
  %5149 = and i32 %5148, 255
  %5150 = tail call i32 @llvm.ctpop.i32(i32 %5149)
  %5151 = trunc i32 %5150 to i8
  %5152 = and i8 %5151, 1
  %5153 = xor i8 %5152, 1
  store i8 %5153, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5154 = icmp eq i32 %5148, 0
  %5155 = zext i1 %5154 to i8
  store i8 %5155, i8* %30, align 1
  %5156 = lshr i32 %5148, 31
  %5157 = trunc i32 %5156 to i8
  store i8 %5157, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v328 = select i1 %5154, i64 135, i64 150
  %5158 = add i64 %5129, %.v328
  store i64 %5158, i64* %3, align 8
  %5159 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %5160 = zext i32 %5159 to i64
  br i1 %5154, label %block_47f70a, label %block_.L_47f719

block_47f70a:                                     ; preds = %block_.L_47f683
  store i64 %5160, i64* %RAX.i1321, align 8
  %5161 = load i64, i64* %RBP.i, align 8
  %5162 = add i64 %5161, -36
  %5163 = add i64 %5158, 10
  store i64 %5163, i64* %3, align 8
  %5164 = inttoptr i64 %5162 to i32*
  store i32 %5159, i32* %5164, align 4
  %5165 = load i64, i64* %3, align 8
  %5166 = add i64 %5165, 37
  store i64 %5166, i64* %3, align 8
  br label %block_.L_47f739

block_.L_47f719:                                  ; preds = %block_.L_47f683
  store i64 %5160, i64* %RCX.i1346, align 8
  %5167 = load i64, i64* %RBP.i, align 8
  %5168 = add i64 %5167, -176
  %5169 = add i64 %5158, 18
  store i64 %5169, i64* %3, align 8
  %5170 = inttoptr i64 %5168 to i32*
  store i32 2, i32* %5170, align 4
  %ECX.i1327 = bitcast %union.anon* %5144 to i32*
  %5171 = load i32, i32* %ECX.i1327, align 4
  %5172 = zext i32 %5171 to i64
  %5173 = load i64, i64* %3, align 8
  store i64 %5172, i64* %RAX.i1321, align 8
  %5174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5175 = sext i32 %5171 to i64
  %5176 = lshr i64 %5175, 32
  store i64 %5176, i64* %5174, align 8
  %5177 = load i64, i64* %RBP.i, align 8
  %5178 = add i64 %5177, -176
  %5179 = add i64 %5173, 9
  store i64 %5179, i64* %3, align 8
  %5180 = inttoptr i64 %5178 to i32*
  %5181 = load i32, i32* %5180, align 4
  %5182 = zext i32 %5181 to i64
  store i64 %5182, i64* %RCX.i1346, align 8
  %5183 = add i64 %5173, 11
  store i64 %5183, i64* %3, align 8
  %5184 = sext i32 %5181 to i64
  %5185 = shl nuw i64 %5176, 32
  %5186 = or i64 %5185, %5172
  %5187 = sdiv i64 %5186, %5184
  %5188 = shl i64 %5187, 32
  %5189 = ashr exact i64 %5188, 32
  %5190 = icmp eq i64 %5187, %5189
  br i1 %5190, label %5193, label %5191

; <label>:5191:                                   ; preds = %block_.L_47f719
  %5192 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5183, %struct.Memory* %2)
  %.pre273 = load i64, i64* %RBP.i, align 8
  %.pre274 = load i32, i32* %EAX.i1364, align 4
  %.pre275 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit

; <label>:5193:                                   ; preds = %block_.L_47f719
  %5194 = srem i64 %5186, %5184
  %5195 = and i64 %5187, 4294967295
  store i64 %5195, i64* %RAX.i1321, align 8
  %5196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5197 = and i64 %5194, 4294967295
  store i64 %5197, i64* %5196, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5198 = trunc i64 %5187 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %5193, %5191
  %5199 = phi i64 [ %.pre275, %5191 ], [ %5183, %5193 ]
  %5200 = phi i32 [ %.pre274, %5191 ], [ %5198, %5193 ]
  %5201 = phi i64 [ %.pre273, %5191 ], [ %5177, %5193 ]
  %5202 = phi %struct.Memory* [ %5192, %5191 ], [ %2, %5193 ]
  %5203 = add i64 %5201, -36
  %5204 = add i64 %5199, 3
  store i64 %5204, i64* %3, align 8
  %5205 = inttoptr i64 %5203 to i32*
  store i32 %5200, i32* %5205, align 4
  %.pre276 = load i64, i64* %3, align 8
  br label %block_.L_47f739

block_.L_47f739:                                  ; preds = %routine_idivl__ecx.exit, %block_47f70a
  %5206 = phi i64 [ %.pre276, %routine_idivl__ecx.exit ], [ %5166, %block_47f70a ]
  %MEMORY.80 = phi %struct.Memory* [ %5202, %routine_idivl__ecx.exit ], [ %2, %block_47f70a ]
  %5207 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %5208 = zext i32 %5207 to i64
  store i64 %5208, i64* %RAX.i1321, align 8
  %5209 = load i64, i64* %RBP.i, align 8
  %5210 = add i64 %5209, -36
  %5211 = add i64 %5206, 10
  store i64 %5211, i64* %3, align 8
  %5212 = inttoptr i64 %5210 to i32*
  %5213 = load i32, i32* %5212, align 4
  %5214 = sub i32 %5207, %5213
  %5215 = icmp ult i32 %5207, %5213
  %5216 = zext i1 %5215 to i8
  store i8 %5216, i8* %14, align 1
  %5217 = and i32 %5214, 255
  %5218 = tail call i32 @llvm.ctpop.i32(i32 %5217)
  %5219 = trunc i32 %5218 to i8
  %5220 = and i8 %5219, 1
  %5221 = xor i8 %5220, 1
  store i8 %5221, i8* %21, align 1
  %5222 = xor i32 %5213, %5207
  %5223 = xor i32 %5222, %5214
  %5224 = lshr i32 %5223, 4
  %5225 = trunc i32 %5224 to i8
  %5226 = and i8 %5225, 1
  store i8 %5226, i8* %27, align 1
  %5227 = icmp eq i32 %5214, 0
  %5228 = zext i1 %5227 to i8
  store i8 %5228, i8* %30, align 1
  %5229 = lshr i32 %5214, 31
  %5230 = trunc i32 %5229 to i8
  store i8 %5230, i8* %33, align 1
  %5231 = lshr i32 %5207, 31
  %5232 = lshr i32 %5213, 31
  %5233 = xor i32 %5232, %5231
  %5234 = xor i32 %5229, %5231
  %5235 = add nuw nsw i32 %5234, %5233
  %5236 = icmp eq i32 %5235, 2
  %5237 = zext i1 %5236 to i8
  store i8 %5237, i8* %39, align 1
  %.v329 = select i1 %5227, i64 16, i64 456
  %5238 = add i64 %5206, %.v329
  %5239 = add i64 %5238, 8
  store i64 %5239, i64* %3, align 8
  br i1 %5227, label %block_47f749, label %block_.L_47f901

block_47f749:                                     ; preds = %block_.L_47f739
  %5240 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5240, i64* %RAX.i1321, align 8
  %5241 = add i64 %5240, 2880
  %5242 = add i64 %5238, 15
  store i64 %5242, i64* %3, align 8
  %5243 = inttoptr i64 %5241 to i32*
  %5244 = load i32, i32* %5243, align 4
  %5245 = add i32 %5244, -2
  %5246 = icmp ult i32 %5244, 2
  %5247 = zext i1 %5246 to i8
  store i8 %5247, i8* %14, align 1
  %5248 = and i32 %5245, 255
  %5249 = tail call i32 @llvm.ctpop.i32(i32 %5248)
  %5250 = trunc i32 %5249 to i8
  %5251 = and i8 %5250, 1
  %5252 = xor i8 %5251, 1
  store i8 %5252, i8* %21, align 1
  %5253 = xor i32 %5245, %5244
  %5254 = lshr i32 %5253, 4
  %5255 = trunc i32 %5254 to i8
  %5256 = and i8 %5255, 1
  store i8 %5256, i8* %27, align 1
  %5257 = icmp eq i32 %5245, 0
  %5258 = zext i1 %5257 to i8
  store i8 %5258, i8* %30, align 1
  %5259 = lshr i32 %5245, 31
  %5260 = trunc i32 %5259 to i8
  store i8 %5260, i8* %33, align 1
  %5261 = lshr i32 %5244, 31
  %5262 = xor i32 %5259, %5261
  %5263 = add nuw nsw i32 %5262, %5261
  %5264 = icmp eq i32 %5263, 2
  %5265 = zext i1 %5264 to i8
  store i8 %5265, i8* %39, align 1
  %.v375 = select i1 %5257, i64 42, i64 21
  %5266 = add i64 %5238, %.v375
  store i64 %5266, i64* %3, align 8
  br i1 %5257, label %block_.L_47f773, label %block_47f75e

block_47f75e:                                     ; preds = %block_47f749
  store i64 %5240, i64* %RAX.i1321, align 8
  %5267 = add i64 %5240, 2884
  %5268 = add i64 %5266, 15
  store i64 %5268, i64* %3, align 8
  %5269 = inttoptr i64 %5267 to i32*
  %5270 = load i32, i32* %5269, align 4
  store i8 0, i8* %14, align 1
  %5271 = and i32 %5270, 255
  %5272 = tail call i32 @llvm.ctpop.i32(i32 %5271)
  %5273 = trunc i32 %5272 to i8
  %5274 = and i8 %5273, 1
  %5275 = xor i8 %5274, 1
  store i8 %5275, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5276 = icmp eq i32 %5270, 0
  %5277 = zext i1 %5276 to i8
  store i8 %5277, i8* %30, align 1
  %5278 = lshr i32 %5270, 31
  %5279 = trunc i32 %5278 to i8
  store i8 %5279, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v376 = select i1 %5276, i64 225, i64 21
  %5280 = add i64 %5266, %.v376
  store i64 %5280, i64* %3, align 8
  br i1 %5276, label %block_.L_47f83f, label %block_.L_47f773

block_.L_47f773:                                  ; preds = %block_47f75e, %block_47f749
  %5281 = phi i64 [ %5280, %block_47f75e ], [ %5266, %block_47f749 ]
  %5282 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5282, i64* %RAX.i1321, align 8
  %5283 = add i64 %5282, 72600
  %5284 = add i64 %5281, 15
  store i64 %5284, i64* %3, align 8
  %5285 = inttoptr i64 %5283 to i32*
  %5286 = load i32, i32* %5285, align 4
  store i8 0, i8* %14, align 1
  %5287 = and i32 %5286, 255
  %5288 = tail call i32 @llvm.ctpop.i32(i32 %5287)
  %5289 = trunc i32 %5288 to i8
  %5290 = and i8 %5289, 1
  %5291 = xor i8 %5290, 1
  store i8 %5291, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5292 = icmp eq i32 %5286, 0
  %5293 = zext i1 %5292 to i8
  store i8 %5293, i8* %30, align 1
  %5294 = lshr i32 %5286, 31
  %5295 = trunc i32 %5294 to i8
  store i8 %5295, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v377 = select i1 %5292, i64 21, i64 204
  %5296 = add i64 %5281, %.v377
  store i64 %5296, i64* %3, align 8
  br i1 %5292, label %block_47f788, label %block_.L_47f83f

block_47f788:                                     ; preds = %block_.L_47f773
  store i64 %5282, i64* %RAX.i1321, align 8
  %5297 = add i64 %5282, 72604
  %5298 = add i64 %5296, 15
  store i64 %5298, i64* %3, align 8
  %5299 = inttoptr i64 %5297 to i32*
  %5300 = load i32, i32* %5299, align 4
  %5301 = add i32 %5300, -1
  %5302 = icmp eq i32 %5300, 0
  %5303 = zext i1 %5302 to i8
  store i8 %5303, i8* %14, align 1
  %5304 = and i32 %5301, 255
  %5305 = tail call i32 @llvm.ctpop.i32(i32 %5304)
  %5306 = trunc i32 %5305 to i8
  %5307 = and i8 %5306, 1
  %5308 = xor i8 %5307, 1
  store i8 %5308, i8* %21, align 1
  %5309 = xor i32 %5301, %5300
  %5310 = lshr i32 %5309, 4
  %5311 = trunc i32 %5310 to i8
  %5312 = and i8 %5311, 1
  store i8 %5312, i8* %27, align 1
  %5313 = icmp eq i32 %5301, 0
  %5314 = zext i1 %5313 to i8
  store i8 %5314, i8* %30, align 1
  %5315 = lshr i32 %5301, 31
  %5316 = trunc i32 %5315 to i8
  store i8 %5316, i8* %33, align 1
  %5317 = lshr i32 %5300, 31
  %5318 = xor i32 %5315, %5317
  %5319 = add nuw nsw i32 %5318, %5317
  %5320 = icmp eq i32 %5319, 2
  %5321 = zext i1 %5320 to i8
  store i8 %5321, i8* %39, align 1
  %.v382 = select i1 %5313, i64 21, i64 102
  %5322 = add i64 %5296, %.v382
  store i64 %5282, i64* %RAX.i1321, align 8
  %5323 = add i64 %5282, 72576
  %5324 = add i64 %5322, 15
  store i64 %5324, i64* %3, align 8
  %5325 = inttoptr i64 %5323 to i32*
  %5326 = load i32, i32* %5325, align 4
  store i8 0, i8* %14, align 1
  %5327 = and i32 %5326, 255
  %5328 = tail call i32 @llvm.ctpop.i32(i32 %5327)
  %5329 = trunc i32 %5328 to i8
  %5330 = and i8 %5329, 1
  %5331 = xor i8 %5330, 1
  store i8 %5331, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5332 = icmp eq i32 %5326, 0
  %5333 = zext i1 %5332 to i8
  store i8 %5333, i8* %30, align 1
  %5334 = lshr i32 %5326, 31
  %5335 = trunc i32 %5334 to i8
  store i8 %5335, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5336 = icmp ne i8 %5335, 0
  %5337 = or i1 %5332, %5336
  %.v383 = select i1 %5337, i64 48, i64 21
  %5338 = add i64 %5322, %.v383
  store i64 %5338, i64* %3, align 8
  br i1 %5313, label %block_47f79d, label %block_.L_47f7ee

block_47f79d:                                     ; preds = %block_47f788
  br i1 %5337, label %block_.L_47f7cd, label %block_47f7b2

block_47f7b2:                                     ; preds = %block_47f79d
  %5339 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %5340 = zext i32 %5339 to i64
  store i64 %5340, i64* %RAX.i1321, align 8
  store i64 %5282, i64* %RCX.i1346, align 8
  %5341 = add i64 %5282, 72572
  %5342 = add i64 %5338, 21
  store i64 %5342, i64* %3, align 8
  %5343 = inttoptr i64 %5341 to i32*
  %5344 = load i32, i32* %5343, align 4
  %5345 = add i32 %5344, %5339
  %5346 = zext i32 %5345 to i64
  store i64 %5346, i64* %RAX.i1321, align 8
  %5347 = icmp ult i32 %5345, %5339
  %5348 = icmp ult i32 %5345, %5344
  %5349 = or i1 %5347, %5348
  %5350 = zext i1 %5349 to i8
  store i8 %5350, i8* %14, align 1
  %5351 = and i32 %5345, 255
  %5352 = tail call i32 @llvm.ctpop.i32(i32 %5351)
  %5353 = trunc i32 %5352 to i8
  %5354 = and i8 %5353, 1
  %5355 = xor i8 %5354, 1
  store i8 %5355, i8* %21, align 1
  %5356 = xor i32 %5344, %5339
  %5357 = xor i32 %5356, %5345
  %5358 = lshr i32 %5357, 4
  %5359 = trunc i32 %5358 to i8
  %5360 = and i8 %5359, 1
  store i8 %5360, i8* %27, align 1
  %5361 = icmp eq i32 %5345, 0
  %5362 = zext i1 %5361 to i8
  store i8 %5362, i8* %30, align 1
  %5363 = lshr i32 %5345, 31
  %5364 = trunc i32 %5363 to i8
  store i8 %5364, i8* %33, align 1
  %5365 = lshr i32 %5339, 31
  %5366 = lshr i32 %5344, 31
  %5367 = xor i32 %5363, %5365
  %5368 = xor i32 %5363, %5366
  %5369 = add nuw nsw i32 %5367, %5368
  %5370 = icmp eq i32 %5369, 2
  %5371 = zext i1 %5370 to i8
  store i8 %5371, i8* %39, align 1
  %5372 = add i64 %5338, 27
  store i64 %5372, i64* %3, align 8
  store i32 %5345, i32* %5343, align 4
  %.pre277 = load i64, i64* %3, align 8
  br label %block_.L_47f7cd

block_.L_47f7cd:                                  ; preds = %block_47f7b2, %block_47f79d
  %5373 = phi i64 [ %.pre277, %block_47f7b2 ], [ %5338, %block_47f79d ]
  %5374 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  store i32 %5374, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %5375 = load i32, i32* bitcast (%G_0x7107a4_type* @G_0x7107a4 to i32*), align 8
  %5376 = zext i32 %5375 to i64
  store i64 %5376, i64* %RAX.i1321, align 8
  store i32 %5375, i32* bitcast (%G_0x722c78_type* @G_0x722c78 to i32*), align 8
  %5377 = add i64 %5373, 109
  store i64 %5377, i64* %3, align 8
  br label %block_.L_47f83a

block_.L_47f7ee:                                  ; preds = %block_47f788
  br i1 %5337, label %block_.L_47f81e, label %block_47f803

block_47f803:                                     ; preds = %block_.L_47f7ee
  %5378 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %5379 = zext i32 %5378 to i64
  store i64 %5379, i64* %RAX.i1321, align 8
  store i64 %5282, i64* %RCX.i1346, align 8
  %5380 = add i64 %5282, 72572
  %5381 = add i64 %5338, 21
  store i64 %5381, i64* %3, align 8
  %5382 = inttoptr i64 %5380 to i32*
  %5383 = load i32, i32* %5382, align 4
  %5384 = add i32 %5383, %5378
  %5385 = zext i32 %5384 to i64
  store i64 %5385, i64* %RAX.i1321, align 8
  %5386 = icmp ult i32 %5384, %5378
  %5387 = icmp ult i32 %5384, %5383
  %5388 = or i1 %5386, %5387
  %5389 = zext i1 %5388 to i8
  store i8 %5389, i8* %14, align 1
  %5390 = and i32 %5384, 255
  %5391 = tail call i32 @llvm.ctpop.i32(i32 %5390)
  %5392 = trunc i32 %5391 to i8
  %5393 = and i8 %5392, 1
  %5394 = xor i8 %5393, 1
  store i8 %5394, i8* %21, align 1
  %5395 = xor i32 %5383, %5378
  %5396 = xor i32 %5395, %5384
  %5397 = lshr i32 %5396, 4
  %5398 = trunc i32 %5397 to i8
  %5399 = and i8 %5398, 1
  store i8 %5399, i8* %27, align 1
  %5400 = icmp eq i32 %5384, 0
  %5401 = zext i1 %5400 to i8
  store i8 %5401, i8* %30, align 1
  %5402 = lshr i32 %5384, 31
  %5403 = trunc i32 %5402 to i8
  store i8 %5403, i8* %33, align 1
  %5404 = lshr i32 %5378, 31
  %5405 = lshr i32 %5383, 31
  %5406 = xor i32 %5402, %5404
  %5407 = xor i32 %5402, %5405
  %5408 = add nuw nsw i32 %5406, %5407
  %5409 = icmp eq i32 %5408, 2
  %5410 = zext i1 %5409 to i8
  store i8 %5410, i8* %39, align 1
  %5411 = add i64 %5338, 27
  store i64 %5411, i64* %3, align 8
  store i32 %5384, i32* %5382, align 4
  %.pre278 = load i64, i64* %3, align 8
  br label %block_.L_47f81e

block_.L_47f81e:                                  ; preds = %block_47f803, %block_.L_47f7ee
  %5412 = phi i64 [ %.pre278, %block_47f803 ], [ %5338, %block_.L_47f7ee ]
  %5413 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  store i32 %5413, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %5414 = load i32, i32* bitcast (%G_0x6d1f88_type* @G_0x6d1f88 to i32*), align 8
  %5415 = zext i32 %5414 to i64
  store i64 %5415, i64* %RAX.i1321, align 8
  %5416 = add i64 %5412, 28
  store i64 %5416, i64* %3, align 8
  store i32 %5414, i32* bitcast (%G_0x722c78_type* @G_0x722c78 to i32*), align 8
  br label %block_.L_47f83a

block_.L_47f83a:                                  ; preds = %block_.L_47f81e, %block_.L_47f7cd
  %5417 = phi i64 [ %5416, %block_.L_47f81e ], [ %5377, %block_.L_47f7cd ]
  %5418 = add i64 %5417, 5
  store i64 %5418, i64* %3, align 8
  br label %block_.L_47f83f

block_.L_47f83f:                                  ; preds = %block_.L_47f773, %block_.L_47f83a, %block_47f75e
  %5419 = phi i64 [ %5418, %block_.L_47f83a ], [ %5296, %block_.L_47f773 ], [ %5280, %block_47f75e ]
  %5420 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  store i8 0, i8* %14, align 1
  %5421 = trunc i64 %5420 to i32
  %5422 = and i32 %5421, 255
  %5423 = tail call i32 @llvm.ctpop.i32(i32 %5422)
  %5424 = trunc i32 %5423 to i8
  %5425 = and i8 %5424, 1
  %5426 = xor i8 %5425, 1
  store i8 %5426, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5427 = icmp eq i64 %5420, 0
  %5428 = zext i1 %5427 to i8
  store i8 %5428, i8* %30, align 1
  %5429 = lshr i64 %5420, 63
  %5430 = trunc i64 %5429 to i8
  store i8 %5430, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5431 = xor i1 %5427, true
  %5432 = icmp eq i8 %5430, 0
  %5433 = and i1 %5432, %5431
  %.v378 = select i1 %5433, i64 113, i64 15
  %5434 = add i64 %5419, %.v378
  %5435 = add i64 %5434, 7
  store i64 %5435, i64* %3, align 8
  %5436 = load i32, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %5437 = zext i32 %5436 to i64
  store i64 %5437, i64* %RAX.i1321, align 8
  br i1 %5433, label %block_.L_47f8b0, label %block_47f84e

block_47f84e:                                     ; preds = %block_.L_47f83f
  %5438 = add i32 %5436, 2
  %5439 = zext i32 %5438 to i64
  %5440 = lshr i32 %5438, 31
  store i32 %5438, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  store i64 %5439, i64* %RAX.i1321, align 8
  %5441 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %5442 = sub i32 %5438, %5441
  %5443 = icmp ult i32 %5438, %5441
  %5444 = zext i1 %5443 to i8
  store i8 %5444, i8* %14, align 1
  %5445 = and i32 %5442, 255
  %5446 = tail call i32 @llvm.ctpop.i32(i32 %5445)
  %5447 = trunc i32 %5446 to i8
  %5448 = and i8 %5447, 1
  %5449 = xor i8 %5448, 1
  store i8 %5449, i8* %21, align 1
  %5450 = xor i32 %5441, %5438
  %5451 = xor i32 %5450, %5442
  %5452 = lshr i32 %5451, 4
  %5453 = trunc i32 %5452 to i8
  %5454 = and i8 %5453, 1
  store i8 %5454, i8* %27, align 1
  %5455 = icmp eq i32 %5442, 0
  %5456 = zext i1 %5455 to i8
  store i8 %5456, i8* %30, align 1
  %5457 = lshr i32 %5442, 31
  %5458 = trunc i32 %5457 to i8
  store i8 %5458, i8* %33, align 1
  %5459 = lshr i32 %5441, 31
  %5460 = xor i32 %5459, %5440
  %5461 = xor i32 %5457, %5440
  %5462 = add nuw nsw i32 %5461, %5460
  %5463 = icmp eq i32 %5462, 2
  %5464 = zext i1 %5463 to i8
  store i8 %5464, i8* %39, align 1
  %5465 = icmp ne i8 %5458, 0
  %5466 = xor i1 %5465, %5463
  %5467 = or i1 %5455, %5466
  %.v379 = select i1 %5467, i64 51, i64 37
  %5468 = add i64 %5434, %.v379
  store i64 %5468, i64* %3, align 8
  br i1 %5467, label %block_.L_47f881, label %block_47f873

block_47f873:                                     ; preds = %block_47f84e
  %5469 = zext i32 %5441 to i64
  store i64 %5469, i64* %RAX.i1321, align 8
  %5470 = add i64 %5468, 14
  store i64 %5470, i64* %3, align 8
  store i32 %5441, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47f881

block_.L_47f881:                                  ; preds = %block_47f873, %block_47f84e
  %5471 = phi i32 [ %5441, %block_47f873 ], [ %5438, %block_47f84e ]
  %5472 = phi i64 [ %5470, %block_47f873 ], [ %5468, %block_47f84e ]
  %5473 = load i64, i64* %RBP.i, align 8
  %5474 = add i64 %5473, -8
  %5475 = add i64 %5472, 4
  store i64 %5475, i64* %3, align 8
  %5476 = inttoptr i64 %5474 to i32*
  %5477 = load i32, i32* %5476, align 4
  store i8 0, i8* %14, align 1
  %5478 = and i32 %5477, 255
  %5479 = tail call i32 @llvm.ctpop.i32(i32 %5478)
  %5480 = trunc i32 %5479 to i8
  %5481 = and i8 %5480, 1
  %5482 = xor i8 %5481, 1
  store i8 %5482, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5483 = icmp eq i32 %5477, 0
  %5484 = zext i1 %5483 to i8
  store i8 %5484, i8* %30, align 1
  %5485 = lshr i32 %5477, 31
  %5486 = trunc i32 %5485 to i8
  store i8 %5486, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v380 = select i1 %5483, i64 10, i64 31
  %5487 = add i64 %5472, %.v380
  store i64 %5487, i64* %3, align 8
  br i1 %5483, label %block_47f88b, label %block_.L_47f8a0

block_47f88b:                                     ; preds = %block_.L_47f881
  %5488 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5488, i64* %RAX.i1321, align 8
  %5489 = add i64 %5488, 72600
  %5490 = add i64 %5487, 15
  store i64 %5490, i64* %3, align 8
  %5491 = inttoptr i64 %5489 to i32*
  %5492 = load i32, i32* %5491, align 4
  store i8 0, i8* %14, align 1
  %5493 = and i32 %5492, 255
  %5494 = tail call i32 @llvm.ctpop.i32(i32 %5493)
  %5495 = trunc i32 %5494 to i8
  %5496 = and i8 %5495, 1
  %5497 = xor i8 %5496, 1
  store i8 %5497, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5498 = icmp eq i32 %5492, 0
  %5499 = zext i1 %5498 to i8
  store i8 %5499, i8* %30, align 1
  %5500 = lshr i32 %5492, 31
  %5501 = trunc i32 %5500 to i8
  store i8 %5501, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v381 = select i1 %5498, i64 21, i64 32
  %5502 = add i64 %5487, %.v381
  store i64 %5502, i64* %3, align 8
  br i1 %5498, label %block_.L_47f8a0, label %block_.L_47f8ab

block_.L_47f8a0:                                  ; preds = %block_47f88b, %block_.L_47f881
  %5503 = phi i64 [ %5502, %block_47f88b ], [ %5487, %block_.L_47f881 ]
  %5504 = add i64 %5503, 11
  store i64 %5504, i64* %3, align 8
  store i32 1, i32* bitcast (%G_0x710360_type* @G_0x710360 to i32*), align 8
  br label %block_.L_47f8ab

block_.L_47f8ab:                                  ; preds = %block_47f88b, %block_.L_47f8a0
  %5505 = phi i64 [ %5504, %block_.L_47f8a0 ], [ %5502, %block_47f88b ]
  %5506 = add i64 %5505, 19
  store i64 %5506, i64* %3, align 8
  br label %block_.L_47f8be

block_.L_47f8b0:                                  ; preds = %block_.L_47f83f
  %5507 = add i64 %5434, 14
  store i64 %5507, i64* %3, align 8
  store i32 %5436, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %.pre279 = load i64, i64* %RBP.i, align 8
  br label %block_.L_47f8be

block_.L_47f8be:                                  ; preds = %block_.L_47f8b0, %block_.L_47f8ab
  %5508 = phi i64 [ %.pre279, %block_.L_47f8b0 ], [ %5473, %block_.L_47f8ab ]
  %5509 = phi i32 [ %5436, %block_.L_47f8b0 ], [ %5471, %block_.L_47f8ab ]
  %5510 = phi i64 [ %5507, %block_.L_47f8b0 ], [ %5506, %block_.L_47f8ab ]
  %5511 = zext i32 %5509 to i64
  %5512 = load i32, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  %5513 = add i32 %5512, %5509
  store i32 %5513, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  %5514 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %5515 = add i32 %5514, -1
  %5516 = icmp ne i32 %5514, 0
  %5517 = zext i1 %5516 to i8
  store i8 %5517, i8* %14, align 1
  %5518 = and i32 %5515, 255
  %5519 = tail call i32 @llvm.ctpop.i32(i32 %5518)
  %5520 = trunc i32 %5519 to i8
  %5521 = and i8 %5520, 1
  %5522 = xor i8 %5521, 1
  store i8 %5522, i8* %21, align 1
  %5523 = xor i32 %5514, 16
  %5524 = xor i32 %5523, %5515
  %5525 = lshr i32 %5524, 4
  %5526 = trunc i32 %5525 to i8
  %5527 = and i8 %5526, 1
  store i8 %5527, i8* %27, align 1
  %5528 = icmp eq i32 %5515, 0
  %5529 = zext i1 %5528 to i8
  store i8 %5529, i8* %30, align 1
  %5530 = lshr i32 %5515, 31
  %5531 = trunc i32 %5530 to i8
  store i8 %5531, i8* %33, align 1
  %5532 = lshr i32 %5514, 31
  %5533 = xor i32 %5530, %5532
  %5534 = xor i32 %5530, 1
  %5535 = add nuw nsw i32 %5533, %5534
  %5536 = icmp eq i32 %5535, 2
  %5537 = zext i1 %5536 to i8
  store i8 %5537, i8* %39, align 1
  store i32 %5515, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  store i32 %5436, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  store i64 %5511, i64* %RAX.i1321, align 8
  %5538 = add i64 %5508, -4
  %5539 = add i64 %5510, 62
  store i64 %5539, i64* %3, align 8
  %5540 = inttoptr i64 %5538 to i32*
  store i32 %5509, i32* %5540, align 4
  %5541 = load i64, i64* %3, align 8
  %5542 = add i64 %5541, 3457
  store i64 %5542, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47f901:                                  ; preds = %block_.L_47f739
  %5543 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5543, i64* %RAX.i1321, align 8
  %5544 = add i64 %5543, 72532
  %5545 = add i64 %5238, 14
  store i64 %5545, i64* %3, align 8
  %5546 = inttoptr i64 %5544 to i32*
  %5547 = load i32, i32* %5546, align 4
  %5548 = zext i32 %5547 to i64
  store i64 %5548, i64* %RCX.i1346, align 8
  store i64 %5543, i64* %RAX.i1321, align 8
  %5549 = add i64 %5543, 72536
  %5550 = add i64 %5238, 28
  store i64 %5550, i64* %3, align 8
  %5551 = inttoptr i64 %5549 to i32*
  %5552 = load i32, i32* %5551, align 4
  %5553 = add i32 %5552, %5547
  %5554 = zext i32 %5553 to i64
  store i64 %5554, i64* %RCX.i1346, align 8
  store i32 %5553, i32* bitcast (%G_0x710000_type* @G_0x710000 to i32*), align 8
  %5555 = sext i32 %5553 to i64
  %RDX.i1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5556 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  %5557 = sub i64 %5556, %5555
  store i64 %5557, i64* %RDX.i1173, align 8
  store i64 %5557, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  %5558 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %5559 = add i64 %5558, 72532
  %5560 = add i64 %5238, 80
  store i64 %5560, i64* %3, align 8
  %5561 = inttoptr i64 %5559 to i32*
  store i32 0, i32* %5561, align 4
  %5562 = load i64, i64* %3, align 8
  %5563 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5563, i64* %RAX.i1321, align 8
  %5564 = add i64 %5563, 72536
  %5565 = add i64 %5562, 18
  store i64 %5565, i64* %3, align 8
  %5566 = inttoptr i64 %5564 to i32*
  store i32 0, i32* %5566, align 4
  %5567 = load i64, i64* %3, align 8
  %5568 = add i64 %5567, 9
  %5569 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  store i8 0, i8* %14, align 1
  %5570 = trunc i64 %5569 to i32
  %5571 = and i32 %5570, 255
  %5572 = tail call i32 @llvm.ctpop.i32(i32 %5571)
  %5573 = trunc i32 %5572 to i8
  %5574 = and i8 %5573, 1
  %5575 = xor i8 %5574, 1
  store i8 %5575, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5576 = icmp eq i64 %5569, 0
  %5577 = zext i1 %5576 to i8
  store i8 %5577, i8* %30, align 1
  %5578 = lshr i64 %5569, 63
  %5579 = trunc i64 %5578 to i8
  store i8 %5579, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5580 = icmp ne i8 %5579, 0
  %.v207 = select i1 %5580, i64 6, i64 1061
  %5581 = add i64 %5568, %.v207
  %5582 = add i64 %5581, 8
  store i64 %5582, i64* %3, align 8
  br i1 %5580, label %block_47f972, label %block_.L_47fd91

block_47f972:                                     ; preds = %block_.L_47f901
  %5583 = load i32, i32* bitcast (%G_0x710360_type* @G_0x710360 to i32*), align 8
  %5584 = add i32 %5583, -1
  %5585 = icmp eq i32 %5583, 0
  %5586 = zext i1 %5585 to i8
  store i8 %5586, i8* %14, align 1
  %5587 = and i32 %5584, 255
  %5588 = tail call i32 @llvm.ctpop.i32(i32 %5587)
  %5589 = trunc i32 %5588 to i8
  %5590 = and i8 %5589, 1
  %5591 = xor i8 %5590, 1
  store i8 %5591, i8* %21, align 1
  %5592 = xor i32 %5584, %5583
  %5593 = lshr i32 %5592, 4
  %5594 = trunc i32 %5593 to i8
  %5595 = and i8 %5594, 1
  store i8 %5595, i8* %27, align 1
  %5596 = icmp eq i32 %5584, 0
  %5597 = zext i1 %5596 to i8
  store i8 %5597, i8* %30, align 1
  %5598 = lshr i32 %5584, 31
  %5599 = trunc i32 %5598 to i8
  store i8 %5599, i8* %33, align 1
  %5600 = lshr i32 %5583, 31
  %5601 = xor i32 %5598, %5600
  %5602 = add nuw nsw i32 %5601, %5600
  %5603 = icmp eq i32 %5602, 2
  %5604 = zext i1 %5603 to i8
  store i8 %5604, i8* %39, align 1
  %.v356 = select i1 %5596, i64 14, i64 36
  %5605 = add i64 %5581, %.v356
  %5606 = add i64 %5605, 7
  store i64 %5606, i64* %3, align 8
  %5607 = load i32, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  %5608 = zext i32 %5607 to i64
  store i64 %5608, i64* %RAX.i1321, align 8
  br i1 %5596, label %block_47f980, label %block_.L_47f996

block_47f980:                                     ; preds = %block_47f972
  %5609 = add i32 %5607, 2
  %5610 = zext i32 %5609 to i64
  store i64 %5610, i64* %RAX.i1321, align 8
  %5611 = icmp ugt i32 %5607, -3
  %5612 = zext i1 %5611 to i8
  store i8 %5612, i8* %14, align 1
  %5613 = and i32 %5609, 255
  %5614 = tail call i32 @llvm.ctpop.i32(i32 %5613)
  %5615 = trunc i32 %5614 to i8
  %5616 = and i8 %5615, 1
  %5617 = xor i8 %5616, 1
  store i8 %5617, i8* %21, align 1
  %5618 = xor i32 %5609, %5607
  %5619 = lshr i32 %5618, 4
  %5620 = trunc i32 %5619 to i8
  %5621 = and i8 %5620, 1
  store i8 %5621, i8* %27, align 1
  %5622 = icmp eq i32 %5609, 0
  %5623 = zext i1 %5622 to i8
  store i8 %5623, i8* %30, align 1
  %5624 = lshr i32 %5609, 31
  %5625 = trunc i32 %5624 to i8
  store i8 %5625, i8* %33, align 1
  %5626 = lshr i32 %5607, 31
  %5627 = xor i32 %5624, %5626
  %5628 = add nuw nsw i32 %5627, %5624
  %5629 = icmp eq i32 %5628, 2
  %5630 = zext i1 %5629 to i8
  store i8 %5630, i8* %39, align 1
  store i32 %5609, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %5631 = add i64 %5605, 43
  store i64 %5631, i64* %3, align 8
  br label %block_.L_47f9ab

block_.L_47f996:                                  ; preds = %block_47f972
  %5632 = load i32, i32* bitcast (%G_0x70fce4_type* @G_0x70fce4 to i32*), align 8
  %5633 = add i32 %5632, %5607
  %5634 = zext i32 %5633 to i64
  store i64 %5634, i64* %RAX.i1321, align 8
  %5635 = icmp ult i32 %5633, %5607
  %5636 = icmp ult i32 %5633, %5632
  %5637 = or i1 %5635, %5636
  %5638 = zext i1 %5637 to i8
  store i8 %5638, i8* %14, align 1
  %5639 = and i32 %5633, 255
  %5640 = tail call i32 @llvm.ctpop.i32(i32 %5639)
  %5641 = trunc i32 %5640 to i8
  %5642 = and i8 %5641, 1
  %5643 = xor i8 %5642, 1
  store i8 %5643, i8* %21, align 1
  %5644 = xor i32 %5632, %5607
  %5645 = xor i32 %5644, %5633
  %5646 = lshr i32 %5645, 4
  %5647 = trunc i32 %5646 to i8
  %5648 = and i8 %5647, 1
  store i8 %5648, i8* %27, align 1
  %5649 = icmp eq i32 %5633, 0
  %5650 = zext i1 %5649 to i8
  store i8 %5650, i8* %30, align 1
  %5651 = lshr i32 %5633, 31
  %5652 = trunc i32 %5651 to i8
  store i8 %5652, i8* %33, align 1
  %5653 = lshr i32 %5607, 31
  %5654 = lshr i32 %5632, 31
  %5655 = xor i32 %5651, %5653
  %5656 = xor i32 %5651, %5654
  %5657 = add nuw nsw i32 %5655, %5656
  %5658 = icmp eq i32 %5657, 2
  %5659 = zext i1 %5658 to i8
  store i8 %5659, i8* %39, align 1
  %5660 = add i64 %5605, 21
  store i64 %5660, i64* %3, align 8
  store i32 %5633, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47f9ab

block_.L_47f9ab:                                  ; preds = %block_.L_47f996, %block_47f980
  %5661 = phi i32 [ %5633, %block_.L_47f996 ], [ %5609, %block_47f980 ]
  %5662 = phi i64 [ %5660, %block_.L_47f996 ], [ %5631, %block_47f980 ]
  %5663 = zext i32 %5661 to i64
  store i64 %5663, i64* %RAX.i1321, align 8
  %5664 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %5665 = sub i32 %5661, %5664
  %5666 = icmp ult i32 %5661, %5664
  %5667 = zext i1 %5666 to i8
  store i8 %5667, i8* %14, align 1
  %5668 = and i32 %5665, 255
  %5669 = tail call i32 @llvm.ctpop.i32(i32 %5668)
  %5670 = trunc i32 %5669 to i8
  %5671 = and i8 %5670, 1
  %5672 = xor i8 %5671, 1
  store i8 %5672, i8* %21, align 1
  %5673 = xor i32 %5664, %5661
  %5674 = xor i32 %5673, %5665
  %5675 = lshr i32 %5674, 4
  %5676 = trunc i32 %5675 to i8
  %5677 = and i8 %5676, 1
  store i8 %5677, i8* %27, align 1
  %5678 = icmp eq i32 %5665, 0
  %5679 = zext i1 %5678 to i8
  store i8 %5679, i8* %30, align 1
  %5680 = lshr i32 %5665, 31
  %5681 = trunc i32 %5680 to i8
  store i8 %5681, i8* %33, align 1
  %5682 = lshr i32 %5661, 31
  %5683 = lshr i32 %5664, 31
  %5684 = xor i32 %5683, %5682
  %5685 = xor i32 %5680, %5682
  %5686 = add nuw nsw i32 %5685, %5684
  %5687 = icmp eq i32 %5686, 2
  %5688 = zext i1 %5687 to i8
  store i8 %5688, i8* %39, align 1
  %5689 = icmp ne i8 %5681, 0
  %5690 = xor i1 %5689, %5687
  %.v357 = select i1 %5690, i64 20, i64 38
  %5691 = add i64 %5662, %.v357
  %5692 = add i64 %5691, 7
  store i64 %5692, i64* %3, align 8
  br i1 %5690, label %block_47f9bf, label %block_.L_47f9d1

block_47f9bf:                                     ; preds = %block_.L_47f9ab
  store i64 %5663, i64* %RAX.i1321, align 8
  %5693 = load i64, i64* %RBP.i, align 8
  %5694 = add i64 %5693, -180
  %5695 = add i64 %5691, 13
  store i64 %5695, i64* %3, align 8
  %5696 = inttoptr i64 %5694 to i32*
  store i32 %5661, i32* %5696, align 4
  %5697 = load i64, i64* %3, align 8
  %5698 = add i64 %5697, 18
  store i64 %5698, i64* %3, align 8
  br label %block_.L_47f9de

block_.L_47f9d1:                                  ; preds = %block_.L_47f9ab
  %5699 = zext i32 %5664 to i64
  store i64 %5699, i64* %RAX.i1321, align 8
  %5700 = load i64, i64* %RBP.i, align 8
  %5701 = add i64 %5700, -180
  %5702 = add i64 %5691, 13
  store i64 %5702, i64* %3, align 8
  %5703 = inttoptr i64 %5701 to i32*
  store i32 %5664, i32* %5703, align 4
  %.pre296 = load i64, i64* %3, align 8
  br label %block_.L_47f9de

block_.L_47f9de:                                  ; preds = %block_.L_47f9d1, %block_47f9bf
  %5704 = phi i64 [ %.pre296, %block_.L_47f9d1 ], [ %5698, %block_47f9bf ]
  %5705 = load i64, i64* %RBP.i, align 8
  %5706 = add i64 %5705, -180
  %5707 = add i64 %5704, 6
  store i64 %5707, i64* %3, align 8
  %5708 = inttoptr i64 %5706 to i32*
  %5709 = load i32, i32* %5708, align 4
  %5710 = zext i32 %5709 to i64
  store i64 %5710, i64* %RAX.i1321, align 8
  store i32 %5709, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %5711 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5711, i64* %RCX.i1346, align 8
  %5712 = add i64 %5711, 3248
  %5713 = add i64 %5704, 27
  store i64 %5713, i64* %3, align 8
  %5714 = inttoptr i64 %5712 to i32*
  %5715 = load i32, i32* %5714, align 4
  %5716 = load i32, i32* bitcast (%G_0x6f8ed8_type* @G_0x6f8ed8 to i32*), align 8
  %5717 = sub i32 %5715, %5716
  %5718 = icmp ult i32 %5715, %5716
  %5719 = zext i1 %5718 to i8
  store i8 %5719, i8* %14, align 1
  %5720 = and i32 %5717, 255
  %5721 = tail call i32 @llvm.ctpop.i32(i32 %5720)
  %5722 = trunc i32 %5721 to i8
  %5723 = and i8 %5722, 1
  %5724 = xor i8 %5723, 1
  store i8 %5724, i8* %21, align 1
  %5725 = xor i32 %5716, %5715
  %5726 = xor i32 %5725, %5717
  %5727 = lshr i32 %5726, 4
  %5728 = trunc i32 %5727 to i8
  %5729 = and i8 %5728, 1
  store i8 %5729, i8* %27, align 1
  %5730 = icmp eq i32 %5717, 0
  %5731 = zext i1 %5730 to i8
  store i8 %5731, i8* %30, align 1
  %5732 = lshr i32 %5717, 31
  %5733 = trunc i32 %5732 to i8
  store i8 %5733, i8* %33, align 1
  %5734 = lshr i32 %5715, 31
  %5735 = lshr i32 %5716, 31
  %5736 = xor i32 %5735, %5734
  %5737 = xor i32 %5732, %5734
  %5738 = add nuw nsw i32 %5737, %5736
  %5739 = icmp eq i32 %5738, 2
  %5740 = zext i1 %5739 to i8
  store i8 %5740, i8* %39, align 1
  %5741 = icmp ne i8 %5733, 0
  %5742 = xor i1 %5741, %5739
  %.v358 = select i1 %5742, i64 117, i64 40
  %5743 = add i64 %5704, %.v358
  store i64 %5710, i64* %RAX.i1321, align 8
  %5744 = load i32, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %5745 = zext i32 %5744 to i64
  store i64 %5745, i64* %RCX.i1346, align 8
  %5746 = add i64 %5743, 17
  store i64 %5746, i64* %3, align 8
  br i1 %5742, label %block_.L_47fa53, label %block_47fa06

block_47fa06:                                     ; preds = %block_.L_47f9de
  %5747 = add i32 %5744, 6
  %5748 = zext i32 %5747 to i64
  store i64 %5748, i64* %RCX.i1346, align 8
  %5749 = lshr i32 %5747, 31
  %5750 = sub i32 %5709, %5747
  %5751 = icmp ult i32 %5709, %5747
  %5752 = zext i1 %5751 to i8
  store i8 %5752, i8* %14, align 1
  %5753 = and i32 %5750, 255
  %5754 = tail call i32 @llvm.ctpop.i32(i32 %5753)
  %5755 = trunc i32 %5754 to i8
  %5756 = and i8 %5755, 1
  %5757 = xor i8 %5756, 1
  store i8 %5757, i8* %21, align 1
  %5758 = xor i32 %5747, %5709
  %5759 = xor i32 %5758, %5750
  %5760 = lshr i32 %5759, 4
  %5761 = trunc i32 %5760 to i8
  %5762 = and i8 %5761, 1
  store i8 %5762, i8* %27, align 1
  %5763 = icmp eq i32 %5750, 0
  %5764 = zext i1 %5763 to i8
  store i8 %5764, i8* %30, align 1
  %5765 = lshr i32 %5750, 31
  %5766 = trunc i32 %5765 to i8
  store i8 %5766, i8* %33, align 1
  %5767 = lshr i32 %5709, 31
  %5768 = xor i32 %5749, %5767
  %5769 = xor i32 %5765, %5767
  %5770 = add nuw nsw i32 %5769, %5768
  %5771 = icmp eq i32 %5770, 2
  %5772 = zext i1 %5771 to i8
  store i8 %5772, i8* %39, align 1
  %5773 = icmp ne i8 %5766, 0
  %5774 = xor i1 %5773, %5771
  %.v359 = select i1 %5774, i64 25, i64 43
  %5775 = add i64 %5743, %.v359
  %5776 = add i64 %5775, 7
  store i64 %5776, i64* %3, align 8
  br i1 %5774, label %block_47fa1f, label %block_.L_47fa31

block_47fa1f:                                     ; preds = %block_47fa06
  store i64 %5710, i64* %RAX.i1321, align 8
  %5777 = add i64 %5705, -184
  %5778 = add i64 %5775, 13
  store i64 %5778, i64* %3, align 8
  %5779 = inttoptr i64 %5777 to i32*
  store i32 %5709, i32* %5779, align 4
  %5780 = load i64, i64* %3, align 8
  %5781 = add i64 %5780, 21
  store i64 %5781, i64* %3, align 8
  br label %block_.L_47fa41

block_.L_47fa31:                                  ; preds = %block_47fa06
  %5782 = lshr i32 %5744, 31
  %5783 = xor i32 %5749, %5782
  %5784 = add nuw nsw i32 %5783, %5749
  %5785 = icmp eq i32 %5784, 2
  %5786 = zext i1 %5785 to i8
  %5787 = trunc i32 %5749 to i8
  %5788 = icmp eq i32 %5747, 0
  %5789 = zext i1 %5788 to i8
  %5790 = xor i32 %5747, %5744
  %5791 = lshr i32 %5790, 4
  %5792 = trunc i32 %5791 to i8
  %5793 = and i8 %5792, 1
  %5794 = and i32 %5747, 255
  %5795 = tail call i32 @llvm.ctpop.i32(i32 %5794)
  %5796 = trunc i32 %5795 to i8
  %5797 = and i8 %5796, 1
  %5798 = xor i8 %5797, 1
  %5799 = icmp ugt i32 %5744, -7
  %5800 = zext i1 %5799 to i8
  store i64 %5748, i64* %RAX.i1321, align 8
  store i8 %5800, i8* %14, align 1
  store i8 %5798, i8* %21, align 1
  store i8 %5793, i8* %27, align 1
  store i8 %5789, i8* %30, align 1
  store i8 %5787, i8* %33, align 1
  store i8 %5786, i8* %39, align 1
  %5801 = add i64 %5705, -184
  %5802 = add i64 %5775, 16
  store i64 %5802, i64* %3, align 8
  %5803 = inttoptr i64 %5801 to i32*
  store i32 %5747, i32* %5803, align 4
  %.pre297 = load i64, i64* %3, align 8
  br label %block_.L_47fa41

block_.L_47fa41:                                  ; preds = %block_.L_47fa31, %block_47fa1f
  %5804 = phi i64 [ %.pre297, %block_.L_47fa31 ], [ %5781, %block_47fa1f ]
  %5805 = load i64, i64* %RBP.i, align 8
  %5806 = add i64 %5805, -184
  %5807 = add i64 %5804, 6
  store i64 %5807, i64* %3, align 8
  %5808 = inttoptr i64 %5806 to i32*
  %5809 = load i32, i32* %5808, align 4
  %5810 = zext i32 %5809 to i64
  store i64 %5810, i64* %RAX.i1321, align 8
  store i32 %5809, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %5811 = add i64 %5804, 90
  store i64 %5811, i64* %3, align 8
  br label %block_.L_47fa9b

block_.L_47fa53:                                  ; preds = %block_.L_47f9de
  %5812 = add i32 %5744, 3
  %5813 = zext i32 %5812 to i64
  store i64 %5813, i64* %RCX.i1346, align 8
  %5814 = lshr i32 %5812, 31
  %5815 = sub i32 %5709, %5812
  %5816 = icmp ult i32 %5709, %5812
  %5817 = zext i1 %5816 to i8
  store i8 %5817, i8* %14, align 1
  %5818 = and i32 %5815, 255
  %5819 = tail call i32 @llvm.ctpop.i32(i32 %5818)
  %5820 = trunc i32 %5819 to i8
  %5821 = and i8 %5820, 1
  %5822 = xor i8 %5821, 1
  store i8 %5822, i8* %21, align 1
  %5823 = xor i32 %5812, %5709
  %5824 = xor i32 %5823, %5815
  %5825 = lshr i32 %5824, 4
  %5826 = trunc i32 %5825 to i8
  %5827 = and i8 %5826, 1
  store i8 %5827, i8* %27, align 1
  %5828 = icmp eq i32 %5815, 0
  %5829 = zext i1 %5828 to i8
  store i8 %5829, i8* %30, align 1
  %5830 = lshr i32 %5815, 31
  %5831 = trunc i32 %5830 to i8
  store i8 %5831, i8* %33, align 1
  %5832 = lshr i32 %5709, 31
  %5833 = xor i32 %5814, %5832
  %5834 = xor i32 %5830, %5832
  %5835 = add nuw nsw i32 %5834, %5833
  %5836 = icmp eq i32 %5835, 2
  %5837 = zext i1 %5836 to i8
  store i8 %5837, i8* %39, align 1
  %5838 = icmp ne i8 %5831, 0
  %5839 = xor i1 %5838, %5836
  %.v374 = select i1 %5839, i64 25, i64 43
  %5840 = add i64 %5743, %.v374
  %5841 = add i64 %5840, 7
  store i64 %5841, i64* %3, align 8
  br i1 %5839, label %block_47fa6c, label %block_.L_47fa7e

block_47fa6c:                                     ; preds = %block_.L_47fa53
  store i64 %5710, i64* %RAX.i1321, align 8
  %5842 = add i64 %5705, -188
  %5843 = add i64 %5840, 13
  store i64 %5843, i64* %3, align 8
  %5844 = inttoptr i64 %5842 to i32*
  store i32 %5709, i32* %5844, align 4
  %5845 = load i64, i64* %3, align 8
  %5846 = add i64 %5845, 21
  store i64 %5846, i64* %3, align 8
  br label %block_.L_47fa8e

block_.L_47fa7e:                                  ; preds = %block_.L_47fa53
  %5847 = lshr i32 %5744, 31
  %5848 = xor i32 %5814, %5847
  %5849 = add nuw nsw i32 %5848, %5814
  %5850 = icmp eq i32 %5849, 2
  %5851 = zext i1 %5850 to i8
  %5852 = trunc i32 %5814 to i8
  %5853 = icmp eq i32 %5812, 0
  %5854 = zext i1 %5853 to i8
  %5855 = xor i32 %5812, %5744
  %5856 = lshr i32 %5855, 4
  %5857 = trunc i32 %5856 to i8
  %5858 = and i8 %5857, 1
  %5859 = and i32 %5812, 255
  %5860 = tail call i32 @llvm.ctpop.i32(i32 %5859)
  %5861 = trunc i32 %5860 to i8
  %5862 = and i8 %5861, 1
  %5863 = xor i8 %5862, 1
  %5864 = icmp ugt i32 %5744, -4
  %5865 = zext i1 %5864 to i8
  store i64 %5813, i64* %RAX.i1321, align 8
  store i8 %5865, i8* %14, align 1
  store i8 %5863, i8* %21, align 1
  store i8 %5858, i8* %27, align 1
  store i8 %5854, i8* %30, align 1
  store i8 %5852, i8* %33, align 1
  store i8 %5851, i8* %39, align 1
  %5866 = add i64 %5705, -188
  %5867 = add i64 %5840, 16
  store i64 %5867, i64* %3, align 8
  %5868 = inttoptr i64 %5866 to i32*
  store i32 %5812, i32* %5868, align 4
  %.pre298 = load i64, i64* %3, align 8
  br label %block_.L_47fa8e

block_.L_47fa8e:                                  ; preds = %block_.L_47fa7e, %block_47fa6c
  %5869 = phi i64 [ %.pre298, %block_.L_47fa7e ], [ %5846, %block_47fa6c ]
  %5870 = load i64, i64* %RBP.i, align 8
  %5871 = add i64 %5870, -188
  %5872 = add i64 %5869, 6
  store i64 %5872, i64* %3, align 8
  %5873 = inttoptr i64 %5871 to i32*
  %5874 = load i32, i32* %5873, align 4
  %5875 = zext i32 %5874 to i64
  store i64 %5875, i64* %RAX.i1321, align 8
  %5876 = add i64 %5869, 13
  store i64 %5876, i64* %3, align 8
  store i32 %5874, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47fa9b

block_.L_47fa9b:                                  ; preds = %block_.L_47fa8e, %block_.L_47fa41
  %5877 = phi i32 [ %5874, %block_.L_47fa8e ], [ %5809, %block_.L_47fa41 ]
  %5878 = phi i64 [ %5876, %block_.L_47fa8e ], [ %5811, %block_.L_47fa41 ]
  %5879 = load i32, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  %5880 = add i32 %5879, %5877
  store i32 %5880, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  %5881 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %5882 = add i32 %5881, -1
  %5883 = zext i32 %5882 to i64
  store i64 %5883, i64* %RAX.i1321, align 8
  %5884 = and i32 %5882, 255
  %5885 = tail call i32 @llvm.ctpop.i32(i32 %5884)
  %5886 = trunc i32 %5885 to i8
  %5887 = and i8 %5886, 1
  %5888 = xor i8 %5887, 1
  %5889 = icmp eq i32 %5882, 0
  %5890 = zext i1 %5889 to i8
  %5891 = lshr i32 %5882, 31
  %5892 = trunc i32 %5891 to i8
  store i32 %5882, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  store i8 0, i8* %14, align 1
  store i8 %5888, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 %5890, i8* %30, align 1
  store i8 %5892, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v360 = select i1 %5889, i64 52, i64 696
  %5893 = add i64 %5878, %.v360
  store i64 %5893, i64* %3, align 8
  br i1 %5889, label %block_47facf, label %block_.L_47fd53

block_47facf:                                     ; preds = %block_.L_47fa9b
  %5894 = load i64, i64* %RBP.i, align 8
  %5895 = add i64 %5894, -8
  %5896 = add i64 %5893, 4
  store i64 %5896, i64* %3, align 8
  %5897 = inttoptr i64 %5895 to i32*
  %5898 = load i32, i32* %5897, align 4
  store i8 0, i8* %14, align 1
  %5899 = and i32 %5898, 255
  %5900 = tail call i32 @llvm.ctpop.i32(i32 %5899)
  %5901 = trunc i32 %5900 to i8
  %5902 = and i8 %5901, 1
  %5903 = xor i8 %5902, 1
  store i8 %5903, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5904 = icmp eq i32 %5898, 0
  %5905 = zext i1 %5904 to i8
  store i8 %5905, i8* %30, align 1
  %5906 = lshr i32 %5898, 31
  %5907 = trunc i32 %5906 to i8
  store i8 %5907, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v362 = select i1 %5904, i64 31, i64 10
  %5908 = add i64 %5893, %.v362
  store i64 %5908, i64* %3, align 8
  br i1 %5904, label %block_.L_47faee, label %block_47fad9

block_47fad9:                                     ; preds = %block_47facf
  %5909 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5909, i64* %RAX.i1321, align 8
  %5910 = add i64 %5909, 72600
  %5911 = add i64 %5908, 15
  store i64 %5911, i64* %3, align 8
  %5912 = inttoptr i64 %5910 to i32*
  %5913 = load i32, i32* %5912, align 4
  store i8 0, i8* %14, align 1
  %5914 = and i32 %5913, 255
  %5915 = tail call i32 @llvm.ctpop.i32(i32 %5914)
  %5916 = trunc i32 %5915 to i8
  %5917 = and i8 %5916, 1
  %5918 = xor i8 %5917, 1
  store i8 %5918, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5919 = icmp eq i32 %5913, 0
  %5920 = zext i1 %5919 to i8
  store i8 %5920, i8* %30, align 1
  %5921 = lshr i32 %5913, 31
  %5922 = trunc i32 %5921 to i8
  store i8 %5922, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v363 = select i1 %5919, i64 21, i64 629
  %5923 = add i64 %5908, %.v363
  store i64 %5923, i64* %3, align 8
  br i1 %5919, label %block_.L_47faee, label %block_.L_47fd4e

block_.L_47faee:                                  ; preds = %block_47fad9, %block_47facf
  %5924 = phi i64 [ %5923, %block_47fad9 ], [ %5908, %block_47facf ]
  %5925 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %5925, i64* %RAX.i1321, align 8
  %5926 = add i64 %5925, 1148
  %5927 = add i64 %5924, 15
  store i64 %5927, i64* %3, align 8
  %5928 = inttoptr i64 %5926 to i32*
  %5929 = load i32, i32* %5928, align 4
  store i8 0, i8* %14, align 1
  %5930 = and i32 %5929, 255
  %5931 = tail call i32 @llvm.ctpop.i32(i32 %5930)
  %5932 = trunc i32 %5931 to i8
  %5933 = and i8 %5932, 1
  %5934 = xor i8 %5933, 1
  store i8 %5934, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5935 = icmp eq i32 %5929, 0
  %5936 = zext i1 %5935 to i8
  store i8 %5936, i8* %30, align 1
  %5937 = lshr i32 %5929, 31
  %5938 = trunc i32 %5937 to i8
  store i8 %5938, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v364 = select i1 %5935, i64 21, i64 42
  %5939 = add i64 %5924, %.v364
  store i64 %5939, i64* %3, align 8
  br i1 %5935, label %block_47fb03, label %block_.L_47fb18

block_47fb03:                                     ; preds = %block_.L_47faee
  %5940 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5940, i64* %RAX.i1321, align 8
  %5941 = add i64 %5940, 2880
  %5942 = add i64 %5939, 15
  store i64 %5942, i64* %3, align 8
  %5943 = inttoptr i64 %5941 to i32*
  %5944 = load i32, i32* %5943, align 4
  %5945 = add i32 %5944, -1
  %5946 = icmp eq i32 %5944, 0
  %5947 = zext i1 %5946 to i8
  store i8 %5947, i8* %14, align 1
  %5948 = and i32 %5945, 255
  %5949 = tail call i32 @llvm.ctpop.i32(i32 %5948)
  %5950 = trunc i32 %5949 to i8
  %5951 = and i8 %5950, 1
  %5952 = xor i8 %5951, 1
  store i8 %5952, i8* %21, align 1
  %5953 = xor i32 %5945, %5944
  %5954 = lshr i32 %5953, 4
  %5955 = trunc i32 %5954 to i8
  %5956 = and i8 %5955, 1
  store i8 %5956, i8* %27, align 1
  %5957 = icmp eq i32 %5945, 0
  %5958 = zext i1 %5957 to i8
  store i8 %5958, i8* %30, align 1
  %5959 = lshr i32 %5945, 31
  %5960 = trunc i32 %5959 to i8
  store i8 %5960, i8* %33, align 1
  %5961 = lshr i32 %5944, 31
  %5962 = xor i32 %5959, %5961
  %5963 = add nuw nsw i32 %5962, %5961
  %5964 = icmp eq i32 %5963, 2
  %5965 = zext i1 %5964 to i8
  store i8 %5965, i8* %39, align 1
  %.v370 = select i1 %5957, i64 21, i64 350
  %5966 = add i64 %5939, %.v370
  store i64 %5966, i64* %3, align 8
  br i1 %5957, label %block_.L_47fb18, label %block_.L_47fc61

block_.L_47fb18:                                  ; preds = %block_47fb03, %block_.L_47faee
  %5967 = phi i64 [ %5966, %block_47fb03 ], [ %5939, %block_.L_47faee ]
  %5968 = add i64 %5967, ptrtoint (%G_0x31d68__rip__type* @G_0x31d68__rip_ to i64)
  %5969 = add i64 %5967, 8
  store i64 %5969, i64* %3, align 8
  %5970 = inttoptr i64 %5968 to i64*
  %5971 = load i64, i64* %5970, align 8
  store i64 %5971, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  %5972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5973 = add i64 %5967, add (i64 ptrtoint (%G_0x31d38__rip__type* @G_0x31d38__rip_ to i64), i64 8)
  %5974 = add i64 %5967, 16
  store i64 %5974, i64* %3, align 8
  %5975 = inttoptr i64 %5973 to double*
  %5976 = load double, double* %5975, align 8
  %5977 = bitcast %union.VectorReg* %5972 to double*
  %5978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %5979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5980 = sitofp i32 %5880 to double
  %5981 = bitcast %union.VectorReg* %5979 to double*
  %5982 = fmul double %5980, %5976
  %5983 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %5984 = sitofp i32 %5983 to double
  store double %5984, double* %5981, align 1
  %5985 = fdiv double %5982, %5984
  %5986 = bitcast i64 %5971 to double
  %5987 = fadd double %5985, %5986
  store double %5987, double* %5977, align 1
  store i64 0, i64* %5978, align 1
  %5988 = tail call double @llvm.trunc.f64(double %5987)
  %5989 = tail call double @llvm.fabs.f64(double %5988)
  %5990 = fcmp ogt double %5989, 0x41DFFFFFFFC00000
  %5991 = fptosi double %5988 to i32
  %5992 = zext i32 %5991 to i64
  %5993 = select i1 %5990, i64 2147483648, i64 %5992
  store i64 %5993, i64* %RAX.i1321, align 8
  %5994 = add i64 %5894, -32
  %5995 = trunc i64 %5993 to i32
  %5996 = add i64 %5967, 53
  store i64 %5996, i64* %3, align 8
  %5997 = inttoptr i64 %5994 to i32*
  store i32 %5995, i32* %5997, align 4
  %5998 = load i64, i64* %3, align 8
  %5999 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5999, i64* %RCX.i1346, align 8
  %6000 = add i64 %5999, 72576
  %6001 = add i64 %5998, 14
  store i64 %6001, i64* %3, align 8
  %6002 = inttoptr i64 %6000 to i32*
  %6003 = load i32, i32* %6002, align 4
  %6004 = zext i32 %6003 to i64
  store i64 %6004, i64* %RAX.i1321, align 8
  %6005 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %6005, i64* %RCX.i1346, align 8
  %6006 = add i64 %6005, 1224
  %6007 = add i64 %5998, 28
  store i64 %6007, i64* %3, align 8
  %6008 = inttoptr i64 %6006 to i32*
  %6009 = load i32, i32* %6008, align 4
  %6010 = add i32 %6009, -2
  %6011 = zext i32 %6010 to i64
  store i64 %6011, i64* %RDX.i1173, align 8
  %6012 = lshr i32 %6010, 31
  %6013 = sub i32 %6003, %6010
  %6014 = icmp ult i32 %6003, %6010
  %6015 = zext i1 %6014 to i8
  store i8 %6015, i8* %14, align 1
  %6016 = and i32 %6013, 255
  %6017 = tail call i32 @llvm.ctpop.i32(i32 %6016)
  %6018 = trunc i32 %6017 to i8
  %6019 = and i8 %6018, 1
  %6020 = xor i8 %6019, 1
  store i8 %6020, i8* %21, align 1
  %6021 = xor i32 %6010, %6003
  %6022 = xor i32 %6021, %6013
  %6023 = lshr i32 %6022, 4
  %6024 = trunc i32 %6023 to i8
  %6025 = and i8 %6024, 1
  store i8 %6025, i8* %27, align 1
  %6026 = icmp eq i32 %6013, 0
  %6027 = zext i1 %6026 to i8
  store i8 %6027, i8* %30, align 1
  %6028 = lshr i32 %6013, 31
  %6029 = trunc i32 %6028 to i8
  store i8 %6029, i8* %33, align 1
  %6030 = lshr i32 %6003, 31
  %6031 = xor i32 %6012, %6030
  %6032 = xor i32 %6028, %6030
  %6033 = add nuw nsw i32 %6032, %6031
  %6034 = icmp eq i32 %6033, 2
  %6035 = zext i1 %6034 to i8
  store i8 %6035, i8* %39, align 1
  %.v365 = select i1 %6026, i64 39, i64 49
  %6036 = add i64 %5998, %.v365
  store i64 %6036, i64* %3, align 8
  %6037 = load i64, i64* %RBP.i, align 8
  br i1 %6026, label %block_47fb74, label %block_.L_47fb7e

block_47fb74:                                     ; preds = %block_.L_47fb18
  %6038 = add i64 %6037, -32
  %6039 = add i64 %6036, 3
  store i64 %6039, i64* %3, align 8
  %6040 = inttoptr i64 %6038 to i32*
  %6041 = load i32, i32* %6040, align 4
  %6042 = zext i32 %6041 to i64
  store i64 %6042, i64* %RAX.i1321, align 8
  %6043 = add i64 %6036, 10
  store i64 %6043, i64* %3, align 8
  store i32 %6041, i32* bitcast (%G_0x6f9348_type* @G_0x6f9348 to i32*), align 8
  br label %block_.L_47fb7e

block_.L_47fb7e:                                  ; preds = %block_.L_47fb18, %block_47fb74
  %6044 = phi i64 [ %6043, %block_47fb74 ], [ %6036, %block_.L_47fb18 ]
  %6045 = add i64 %6037, -32
  %6046 = add i64 %6044, 3
  store i64 %6046, i64* %3, align 8
  %6047 = inttoptr i64 %6045 to i32*
  %6048 = load i32, i32* %6047, align 4
  %6049 = zext i32 %6048 to i64
  store i64 %6049, i64* %RAX.i1321, align 8
  store i64 %5999, i64* %RCX.i1346, align 8
  %6050 = add i64 %5999, 72572
  %6051 = add i64 %6044, 17
  store i64 %6051, i64* %3, align 8
  %6052 = inttoptr i64 %6050 to i32*
  %6053 = load i32, i32* %6052, align 4
  %6054 = add i32 %6053, %6048
  %6055 = zext i32 %6054 to i64
  store i64 %6055, i64* %RAX.i1321, align 8
  %6056 = add i64 %6044, 23
  store i64 %6056, i64* %3, align 8
  store i32 %6054, i32* %6052, align 4
  %6057 = load i64, i64* %3, align 8
  %6058 = load i32, i32* bitcast (%G_0x710360_type* @G_0x710360 to i32*), align 8
  %6059 = add i32 %6058, -1
  %6060 = icmp eq i32 %6058, 0
  %6061 = zext i1 %6060 to i8
  store i8 %6061, i8* %14, align 1
  %6062 = and i32 %6059, 255
  %6063 = tail call i32 @llvm.ctpop.i32(i32 %6062)
  %6064 = trunc i32 %6063 to i8
  %6065 = and i8 %6064, 1
  %6066 = xor i8 %6065, 1
  store i8 %6066, i8* %21, align 1
  %6067 = xor i32 %6059, %6058
  %6068 = lshr i32 %6067, 4
  %6069 = trunc i32 %6068 to i8
  %6070 = and i8 %6069, 1
  store i8 %6070, i8* %27, align 1
  %6071 = icmp eq i32 %6059, 0
  %6072 = zext i1 %6071 to i8
  store i8 %6072, i8* %30, align 1
  %6073 = lshr i32 %6059, 31
  %6074 = trunc i32 %6073 to i8
  store i8 %6074, i8* %33, align 1
  %6075 = lshr i32 %6058, 31
  %6076 = xor i32 %6073, %6075
  %6077 = add nuw nsw i32 %6076, %6075
  %6078 = icmp eq i32 %6077, 2
  %6079 = zext i1 %6078 to i8
  store i8 %6079, i8* %39, align 1
  %.v366 = select i1 %6071, i64 14, i64 46
  %6080 = add i64 %6057, %.v366
  store i64 %6080, i64* %3, align 8
  br i1 %6071, label %block_47fba3, label %block_.L_47fbc3

block_47fba3:                                     ; preds = %block_.L_47fb7e
  %6081 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6082 = add i32 %6081, 1
  %6083 = zext i32 %6082 to i64
  store i64 %6083, i64* %RAX.i1321, align 8
  %6084 = icmp eq i32 %6081, -1
  %6085 = icmp eq i32 %6082, 0
  %6086 = or i1 %6084, %6085
  %6087 = zext i1 %6086 to i8
  store i8 %6087, i8* %14, align 1
  %6088 = and i32 %6082, 255
  %6089 = tail call i32 @llvm.ctpop.i32(i32 %6088)
  %6090 = trunc i32 %6089 to i8
  %6091 = and i8 %6090, 1
  %6092 = xor i8 %6091, 1
  store i8 %6092, i8* %21, align 1
  %6093 = xor i32 %6082, %6081
  %6094 = lshr i32 %6093, 4
  %6095 = trunc i32 %6094 to i8
  %6096 = and i8 %6095, 1
  store i8 %6096, i8* %27, align 1
  %6097 = zext i1 %6085 to i8
  store i8 %6097, i8* %30, align 1
  %6098 = lshr i32 %6082, 31
  %6099 = trunc i32 %6098 to i8
  store i8 %6099, i8* %33, align 1
  %6100 = lshr i32 %6081, 31
  %6101 = xor i32 %6098, %6100
  %6102 = add nuw nsw i32 %6101, %6098
  %6103 = icmp eq i32 %6102, 2
  %6104 = zext i1 %6103 to i8
  store i8 %6104, i8* %39, align 1
  store i32 %6082, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %6105 = load i64, i64* %RBP.i, align 8
  %6106 = add i64 %6105, -32
  %6107 = add i64 %6080, 20
  store i64 %6107, i64* %3, align 8
  %6108 = inttoptr i64 %6106 to i32*
  %6109 = load i32, i32* %6108, align 4
  %6110 = zext i32 %6109 to i64
  store i64 %6110, i64* %RAX.i1321, align 8
  %6111 = add i64 %6080, 27
  store i64 %6111, i64* %3, align 8
  store i32 %6109, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6112 = add i64 %6080, 161
  br label %block_.L_47fc44

block_.L_47fbc3:                                  ; preds = %block_.L_47fb7e
  %6113 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6113, i64* %RAX.i1321, align 8
  %6114 = add i64 %6113, 72576
  %6115 = add i64 %6080, 15
  store i64 %6115, i64* %3, align 8
  %6116 = inttoptr i64 %6114 to i32*
  %6117 = load i32, i32* %6116, align 4
  store i8 0, i8* %14, align 1
  %6118 = and i32 %6117, 255
  %6119 = tail call i32 @llvm.ctpop.i32(i32 %6118)
  %6120 = trunc i32 %6119 to i8
  %6121 = and i8 %6120, 1
  %6122 = xor i8 %6121, 1
  store i8 %6122, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6123 = icmp eq i32 %6117, 0
  %6124 = zext i1 %6123 to i8
  store i8 %6124, i8* %30, align 1
  %6125 = lshr i32 %6117, 31
  %6126 = trunc i32 %6125 to i8
  store i8 %6126, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v367 = select i1 %6123, i64 21, i64 71
  %6127 = add i64 %6080, %.v367
  store i64 %6127, i64* %3, align 8
  br i1 %6123, label %block_47fbd8, label %block_.L_47fc0a

block_47fbd8:                                     ; preds = %block_.L_47fbc3
  store i64 %6113, i64* %RAX.i1321, align 8
  %6128 = add i64 %6113, 72568
  %6129 = add i64 %6127, 15
  store i64 %6129, i64* %3, align 8
  %6130 = inttoptr i64 %6128 to i32*
  %6131 = load i32, i32* %6130, align 4
  %6132 = add i32 %6131, -1
  %6133 = icmp eq i32 %6131, 0
  %6134 = zext i1 %6133 to i8
  store i8 %6134, i8* %14, align 1
  %6135 = and i32 %6132, 255
  %6136 = tail call i32 @llvm.ctpop.i32(i32 %6135)
  %6137 = trunc i32 %6136 to i8
  %6138 = and i8 %6137, 1
  %6139 = xor i8 %6138, 1
  store i8 %6139, i8* %21, align 1
  %6140 = xor i32 %6132, %6131
  %6141 = lshr i32 %6140, 4
  %6142 = trunc i32 %6141 to i8
  %6143 = and i8 %6142, 1
  store i8 %6143, i8* %27, align 1
  %6144 = icmp eq i32 %6132, 0
  %6145 = zext i1 %6144 to i8
  store i8 %6145, i8* %30, align 1
  %6146 = lshr i32 %6132, 31
  %6147 = trunc i32 %6146 to i8
  store i8 %6147, i8* %33, align 1
  %6148 = lshr i32 %6131, 31
  %6149 = xor i32 %6146, %6148
  %6150 = add nuw nsw i32 %6149, %6148
  %6151 = icmp eq i32 %6150, 2
  %6152 = zext i1 %6151 to i8
  store i8 %6152, i8* %39, align 1
  %6153 = icmp ne i8 %6147, 0
  %6154 = xor i1 %6153, %6151
  %6155 = or i1 %6144, %6154
  %.v369 = select i1 %6155, i64 50, i64 21
  %6156 = add i64 %6127, %.v369
  store i64 %6156, i64* %3, align 8
  br i1 %6155, label %block_.L_47fc0a, label %block_47fbed

block_47fbed:                                     ; preds = %block_47fbd8
  %6157 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6158 = zext i32 %6157 to i64
  store i64 %6158, i64* %RAX.i1321, align 8
  store i32 %6157, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %6159 = load i64, i64* %RBP.i, align 8
  %6160 = add i64 %6159, -32
  %6161 = add i64 %6156, 17
  store i64 %6161, i64* %3, align 8
  %6162 = inttoptr i64 %6160 to i32*
  %6163 = load i32, i32* %6162, align 4
  %6164 = zext i32 %6163 to i64
  store i64 %6164, i64* %RAX.i1321, align 8
  %6165 = add i64 %6156, 24
  store i64 %6165, i64* %3, align 8
  store i32 %6163, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6166 = add i64 %6156, 82
  br label %block_.L_47fc3f

block_.L_47fc0a:                                  ; preds = %block_.L_47fbc3, %block_47fbd8
  %6167 = phi i64 [ %6156, %block_47fbd8 ], [ %6127, %block_.L_47fbc3 ]
  store i64 %6113, i64* %RAX.i1321, align 8
  %6168 = add i64 %6167, 15
  store i64 %6168, i64* %3, align 8
  %6169 = load i32, i32* %6116, align 4
  store i8 0, i8* %14, align 1
  %6170 = and i32 %6169, 255
  %6171 = tail call i32 @llvm.ctpop.i32(i32 %6170)
  %6172 = trunc i32 %6171 to i8
  %6173 = and i8 %6172, 1
  %6174 = xor i8 %6173, 1
  store i8 %6174, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6175 = icmp eq i32 %6169, 0
  %6176 = zext i1 %6175 to i8
  store i8 %6176, i8* %30, align 1
  %6177 = lshr i32 %6169, 31
  %6178 = trunc i32 %6177 to i8
  store i8 %6178, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6179 = icmp ne i8 %6178, 0
  %6180 = or i1 %6175, %6179
  %.v368 = select i1 %6180, i64 48, i64 21
  %6181 = add i64 %6167, %.v368
  store i64 %6181, i64* %3, align 8
  br i1 %6180, label %block_.L_47fc0a.block_.L_47fc3a_crit_edge, label %block_47fc1f

block_.L_47fc0a.block_.L_47fc3a_crit_edge:        ; preds = %block_.L_47fc0a
  %.pre300.pre.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_47fc3a

block_47fc1f:                                     ; preds = %block_.L_47fc0a
  %6182 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6183 = add i32 %6182, 1
  %6184 = zext i32 %6183 to i64
  store i64 %6184, i64* %RAX.i1321, align 8
  %6185 = icmp eq i32 %6182, -1
  %6186 = icmp eq i32 %6183, 0
  %6187 = or i1 %6185, %6186
  %6188 = zext i1 %6187 to i8
  store i8 %6188, i8* %14, align 1
  %6189 = and i32 %6183, 255
  %6190 = tail call i32 @llvm.ctpop.i32(i32 %6189)
  %6191 = trunc i32 %6190 to i8
  %6192 = and i8 %6191, 1
  %6193 = xor i8 %6192, 1
  store i8 %6193, i8* %21, align 1
  %6194 = xor i32 %6183, %6182
  %6195 = lshr i32 %6194, 4
  %6196 = trunc i32 %6195 to i8
  %6197 = and i8 %6196, 1
  store i8 %6197, i8* %27, align 1
  %6198 = zext i1 %6186 to i8
  store i8 %6198, i8* %30, align 1
  %6199 = lshr i32 %6183, 31
  %6200 = trunc i32 %6199 to i8
  store i8 %6200, i8* %33, align 1
  %6201 = lshr i32 %6182, 31
  %6202 = xor i32 %6199, %6201
  %6203 = add nuw nsw i32 %6202, %6199
  %6204 = icmp eq i32 %6203, 2
  %6205 = zext i1 %6204 to i8
  store i8 %6205, i8* %39, align 1
  store i32 %6183, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %6206 = load i64, i64* %RBP.i, align 8
  %6207 = add i64 %6206, -32
  %6208 = add i64 %6181, 20
  store i64 %6208, i64* %3, align 8
  %6209 = inttoptr i64 %6207 to i32*
  %6210 = load i32, i32* %6209, align 4
  %6211 = zext i32 %6210 to i64
  store i64 %6211, i64* %RAX.i1321, align 8
  %6212 = add i64 %6181, 27
  store i64 %6212, i64* %3, align 8
  store i32 %6210, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  br label %block_.L_47fc3a

block_.L_47fc3a:                                  ; preds = %block_.L_47fc0a.block_.L_47fc3a_crit_edge, %block_47fc1f
  %.pre300.pre = phi i64 [ %6206, %block_47fc1f ], [ %.pre300.pre.pre, %block_.L_47fc0a.block_.L_47fc3a_crit_edge ]
  %6213 = phi i64 [ %6212, %block_47fc1f ], [ %6181, %block_.L_47fc0a.block_.L_47fc3a_crit_edge ]
  %6214 = add i64 %6213, 5
  store i64 %6214, i64* %3, align 8
  br label %block_.L_47fc3f

block_.L_47fc3f:                                  ; preds = %block_.L_47fc3a, %block_47fbed
  %.pre300 = phi i64 [ %6159, %block_47fbed ], [ %.pre300.pre, %block_.L_47fc3a ]
  %storemerge184 = phi i64 [ %6166, %block_47fbed ], [ %6214, %block_.L_47fc3a ]
  %6215 = add i64 %storemerge184, 5
  store i64 %6215, i64* %3, align 8
  br label %block_.L_47fc44

block_.L_47fc44:                                  ; preds = %block_.L_47fc3f, %block_47fba3
  %6216 = phi i64 [ %6105, %block_47fba3 ], [ %.pre300, %block_.L_47fc3f ]
  %storemerge182 = phi i64 [ %6112, %block_47fba3 ], [ %6215, %block_.L_47fc3f ]
  %6217 = add i64 %6216, -32
  %6218 = add i64 %storemerge182, 3
  store i64 %6218, i64* %3, align 8
  %6219 = inttoptr i64 %6217 to i32*
  %6220 = load i32, i32* %6219, align 4
  store i32 %6220, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %6221 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %6222 = zext i32 %6221 to i64
  store i64 %6222, i64* %RAX.i1321, align 8
  %6223 = add i64 %storemerge182, 24
  store i64 %6223, i64* %3, align 8
  store i32 %6221, i32* bitcast (%G_0x722c78_type* @G_0x722c78 to i32*), align 8
  %6224 = add i64 %storemerge182, 261
  br label %block_.L_47fd49

block_.L_47fc61:                                  ; preds = %block_47fb03
  store i64 %5940, i64* %RAX.i1321, align 8
  %6225 = add i64 %5966, 15
  store i64 %6225, i64* %3, align 8
  %6226 = load i32, i32* %5943, align 4
  %6227 = add i32 %6226, -2
  %6228 = icmp ult i32 %6226, 2
  %6229 = zext i1 %6228 to i8
  store i8 %6229, i8* %14, align 1
  %6230 = and i32 %6227, 255
  %6231 = tail call i32 @llvm.ctpop.i32(i32 %6230)
  %6232 = trunc i32 %6231 to i8
  %6233 = and i8 %6232, 1
  %6234 = xor i8 %6233, 1
  store i8 %6234, i8* %21, align 1
  %6235 = xor i32 %6227, %6226
  %6236 = lshr i32 %6235, 4
  %6237 = trunc i32 %6236 to i8
  %6238 = and i8 %6237, 1
  store i8 %6238, i8* %27, align 1
  %6239 = icmp eq i32 %6227, 0
  %6240 = zext i1 %6239 to i8
  store i8 %6240, i8* %30, align 1
  %6241 = lshr i32 %6227, 31
  %6242 = trunc i32 %6241 to i8
  store i8 %6242, i8* %33, align 1
  %6243 = lshr i32 %6226, 31
  %6244 = xor i32 %6241, %6243
  %6245 = add nuw nsw i32 %6244, %6243
  %6246 = icmp eq i32 %6245, 2
  %6247 = zext i1 %6246 to i8
  store i8 %6247, i8* %39, align 1
  %.v371 = select i1 %6239, i64 42, i64 21
  %6248 = add i64 %5966, %.v371
  store i64 %6248, i64* %3, align 8
  br i1 %6239, label %block_.L_47fc8b, label %block_47fc76

block_47fc76:                                     ; preds = %block_.L_47fc61
  store i64 %5940, i64* %RAX.i1321, align 8
  %6249 = add i64 %5940, 2884
  %6250 = add i64 %6248, 15
  store i64 %6250, i64* %3, align 8
  %6251 = inttoptr i64 %6249 to i32*
  %6252 = load i32, i32* %6251, align 4
  store i8 0, i8* %14, align 1
  %6253 = and i32 %6252, 255
  %6254 = tail call i32 @llvm.ctpop.i32(i32 %6253)
  %6255 = trunc i32 %6254 to i8
  %6256 = and i8 %6255, 1
  %6257 = xor i8 %6256, 1
  store i8 %6257, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6258 = icmp eq i32 %6252, 0
  %6259 = zext i1 %6258 to i8
  store i8 %6259, i8* %30, align 1
  %6260 = lshr i32 %6252, 31
  %6261 = trunc i32 %6260 to i8
  store i8 %6261, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v372 = select i1 %6258, i64 206, i64 21
  %6262 = add i64 %6248, %.v372
  store i64 %6262, i64* %3, align 8
  br i1 %6258, label %block_.L_47fd44, label %block_.L_47fc8b

block_.L_47fc8b:                                  ; preds = %block_47fc76, %block_.L_47fc61
  %6263 = phi i64 [ %6262, %block_47fc76 ], [ %6248, %block_.L_47fc61 ]
  %6264 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6264, i64* %RAX.i1321, align 8
  %6265 = add i64 %6264, 72600
  %6266 = add i64 %6263, 15
  store i64 %6266, i64* %3, align 8
  %6267 = inttoptr i64 %6265 to i32*
  %6268 = load i32, i32* %6267, align 4
  store i8 0, i8* %14, align 1
  %6269 = and i32 %6268, 255
  %6270 = tail call i32 @llvm.ctpop.i32(i32 %6269)
  %6271 = trunc i32 %6270 to i8
  %6272 = and i8 %6271, 1
  %6273 = xor i8 %6272, 1
  store i8 %6273, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6274 = icmp eq i32 %6268, 0
  %6275 = zext i1 %6274 to i8
  store i8 %6275, i8* %30, align 1
  %6276 = lshr i32 %6268, 31
  %6277 = trunc i32 %6276 to i8
  store i8 %6277, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v373 = select i1 %6274, i64 21, i64 103
  %6278 = add i64 %6263, %.v373
  store i64 %6278, i64* %3, align 8
  br i1 %6274, label %block_47fca0, label %block_.L_47fcf2

block_47fca0:                                     ; preds = %block_.L_47fc8b
  %6279 = add i64 %6278, ptrtoint (%G_0x31be0__rip__type* @G_0x31be0__rip_ to i64)
  %6280 = add i64 %6278, 8
  store i64 %6280, i64* %3, align 8
  %6281 = inttoptr i64 %6279 to i64*
  %6282 = load i64, i64* %6281, align 8
  store i64 %6282, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  %6283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6284 = add i64 %6278, add (i64 ptrtoint (%G_0x31bb0__rip__type* @G_0x31bb0__rip_ to i64), i64 8)
  %6285 = add i64 %6278, 16
  store i64 %6285, i64* %3, align 8
  %6286 = inttoptr i64 %6284 to double*
  %6287 = load double, double* %6286, align 8
  %6288 = bitcast %union.VectorReg* %6283 to double*
  %6289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %6290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6291 = sitofp i32 %5880 to double
  %6292 = bitcast %union.VectorReg* %6290 to double*
  %6293 = fmul double %6291, %6287
  %6294 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6295 = sitofp i32 %6294 to double
  store double %6295, double* %6292, align 1
  %6296 = fdiv double %6293, %6295
  %6297 = bitcast i64 %6282 to double
  %6298 = fadd double %6296, %6297
  store double %6298, double* %6288, align 1
  store i64 0, i64* %6289, align 1
  %6299 = tail call double @llvm.trunc.f64(double %6298)
  %6300 = tail call double @llvm.fabs.f64(double %6299)
  %6301 = fcmp ogt double %6300, 0x41DFFFFFFFC00000
  %6302 = fptosi double %6299 to i32
  %6303 = zext i32 %6302 to i64
  %6304 = select i1 %6301, i64 2147483648, i64 %6303
  store i64 %6304, i64* %RAX.i1321, align 8
  %6305 = add i64 %5894, -32
  %6306 = trunc i64 %6304 to i32
  %6307 = add i64 %6278, 53
  store i64 %6307, i64* %3, align 8
  %6308 = inttoptr i64 %6305 to i32*
  store i32 %6306, i32* %6308, align 4
  %6309 = load i64, i64* %RBP.i, align 8
  %6310 = add i64 %6309, -32
  %6311 = load i64, i64* %3, align 8
  %6312 = add i64 %6311, 3
  store i64 %6312, i64* %3, align 8
  %6313 = inttoptr i64 %6310 to i32*
  %6314 = load i32, i32* %6313, align 4
  store i32 %6314, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %6315 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %6316 = zext i32 %6315 to i64
  store i64 %6316, i64* %RAX.i1321, align 8
  store i32 %6315, i32* bitcast (%G_0x7107a4_type* @G_0x7107a4 to i32*), align 8
  %6317 = add i64 %6311, 106
  store i64 %6317, i64* %3, align 8
  br label %block_.L_47fd3f

block_.L_47fcf2:                                  ; preds = %block_.L_47fc8b
  %6318 = add i64 %6278, ptrtoint (%G_0x31b8e__rip__type* @G_0x31b8e__rip_ to i64)
  %6319 = add i64 %6278, 8
  store i64 %6319, i64* %3, align 8
  %6320 = inttoptr i64 %6318 to i64*
  %6321 = load i64, i64* %6320, align 8
  store i64 %6321, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  %6322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6323 = add i64 %6278, add (i64 ptrtoint (%G_0x31b5e__rip__type* @G_0x31b5e__rip_ to i64), i64 8)
  %6324 = add i64 %6278, 16
  store i64 %6324, i64* %3, align 8
  %6325 = inttoptr i64 %6323 to double*
  %6326 = load double, double* %6325, align 8
  %6327 = bitcast %union.VectorReg* %6322 to double*
  %6328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %6329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6330 = sitofp i32 %5880 to double
  %6331 = bitcast %union.VectorReg* %6329 to double*
  %6332 = fmul double %6330, %6326
  %6333 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6334 = sitofp i32 %6333 to double
  store double %6334, double* %6331, align 1
  %6335 = fdiv double %6332, %6334
  %6336 = bitcast i64 %6321 to double
  %6337 = fadd double %6335, %6336
  store double %6337, double* %6327, align 1
  store i64 0, i64* %6328, align 1
  %6338 = tail call double @llvm.trunc.f64(double %6337)
  %6339 = tail call double @llvm.fabs.f64(double %6338)
  %6340 = fcmp ogt double %6339, 0x41DFFFFFFFC00000
  %6341 = fptosi double %6338 to i32
  %6342 = zext i32 %6341 to i64
  %6343 = select i1 %6340, i64 2147483648, i64 %6342
  store i64 %6343, i64* %RAX.i1321, align 8
  %6344 = add i64 %5894, -32
  %6345 = trunc i64 %6343 to i32
  %6346 = add i64 %6278, 53
  store i64 %6346, i64* %3, align 8
  %6347 = inttoptr i64 %6344 to i32*
  store i32 %6345, i32* %6347, align 4
  %6348 = load i64, i64* %RBP.i, align 8
  %6349 = add i64 %6348, -32
  %6350 = load i64, i64* %3, align 8
  %6351 = add i64 %6350, 3
  store i64 %6351, i64* %3, align 8
  %6352 = inttoptr i64 %6349 to i32*
  %6353 = load i32, i32* %6352, align 4
  store i32 %6353, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %6354 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %6355 = zext i32 %6354 to i64
  store i64 %6355, i64* %RAX.i1321, align 8
  %6356 = add i64 %6350, 24
  store i64 %6356, i64* %3, align 8
  store i32 %6354, i32* bitcast (%G_0x6d1f88_type* @G_0x6d1f88 to i32*), align 8
  br label %block_.L_47fd3f

block_.L_47fd3f:                                  ; preds = %block_.L_47fcf2, %block_47fca0
  %6357 = phi i64 [ %6356, %block_.L_47fcf2 ], [ %6317, %block_47fca0 ]
  %6358 = add i64 %6357, 5
  store i64 %6358, i64* %3, align 8
  br label %block_.L_47fd44

block_.L_47fd44:                                  ; preds = %block_.L_47fd3f, %block_47fc76
  %6359 = phi i64 [ %6358, %block_.L_47fd3f ], [ %6262, %block_47fc76 ]
  %6360 = add i64 %6359, 5
  store i64 %6360, i64* %3, align 8
  br label %block_.L_47fd49

block_.L_47fd49:                                  ; preds = %block_.L_47fd44, %block_.L_47fc44
  %storemerge183 = phi i64 [ %6224, %block_.L_47fc44 ], [ %6360, %block_.L_47fd44 ]
  %6361 = add i64 %storemerge183, 5
  store i64 %6361, i64* %3, align 8
  br label %block_.L_47fd4e

block_.L_47fd4e:                                  ; preds = %block_47fad9, %block_.L_47fd49
  %6362 = phi i64 [ %6361, %block_.L_47fd49 ], [ %5923, %block_47fad9 ]
  %6363 = add i64 %6362, 5
  store i64 %6363, i64* %3, align 8
  br label %block_.L_47fd53

block_.L_47fd53:                                  ; preds = %block_.L_47fa9b, %block_.L_47fd4e
  %6364 = phi i64 [ %6363, %block_.L_47fd4e ], [ %5893, %block_.L_47fa9b ]
  %6365 = load i32, i32* bitcast (%G_0x710360_type* @G_0x710360 to i32*), align 8
  %6366 = add i32 %6365, -1
  %6367 = icmp eq i32 %6365, 0
  %6368 = zext i1 %6367 to i8
  store i8 %6368, i8* %14, align 1
  %6369 = and i32 %6366, 255
  %6370 = tail call i32 @llvm.ctpop.i32(i32 %6369)
  %6371 = trunc i32 %6370 to i8
  %6372 = and i8 %6371, 1
  %6373 = xor i8 %6372, 1
  store i8 %6373, i8* %21, align 1
  %6374 = xor i32 %6366, %6365
  %6375 = lshr i32 %6374, 4
  %6376 = trunc i32 %6375 to i8
  %6377 = and i8 %6376, 1
  store i8 %6377, i8* %27, align 1
  %6378 = icmp eq i32 %6366, 0
  %6379 = zext i1 %6378 to i8
  store i8 %6379, i8* %30, align 1
  %6380 = lshr i32 %6366, 31
  %6381 = trunc i32 %6380 to i8
  store i8 %6381, i8* %33, align 1
  %6382 = lshr i32 %6365, 31
  %6383 = xor i32 %6380, %6382
  %6384 = add nuw nsw i32 %6383, %6382
  %6385 = icmp eq i32 %6384, 2
  %6386 = zext i1 %6385 to i8
  store i8 %6386, i8* %39, align 1
  %.v361 = select i1 %6378, i64 14, i64 33
  %6387 = add i64 %6364, %.v361
  %6388 = add i64 %6387, 7
  store i64 %6388, i64* %3, align 8
  br i1 %6378, label %block_47fd61, label %block_.L_47fd74

block_47fd61:                                     ; preds = %block_.L_47fd53
  %6389 = load i32, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %6390 = zext i32 %6389 to i64
  store i64 %6390, i64* %RAX.i1321, align 8
  store i32 %6389, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  %6391 = add i64 %6387, 33
  store i64 %6391, i64* %3, align 8
  %.pre301 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_47fd82

block_.L_47fd74:                                  ; preds = %block_.L_47fd53
  %6392 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %6393 = zext i32 %6392 to i64
  store i64 %6393, i64* %RAX.i1321, align 8
  %6394 = add i64 %6387, 14
  store i64 %6394, i64* %3, align 8
  store i32 %6392, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  br label %block_.L_47fd82

block_.L_47fd82:                                  ; preds = %block_.L_47fd74, %block_47fd61
  %6395 = phi i32 [ %6392, %block_.L_47fd74 ], [ %.pre301, %block_47fd61 ]
  %6396 = phi i64 [ %6394, %block_.L_47fd74 ], [ %6391, %block_47fd61 ]
  %6397 = zext i32 %6395 to i64
  store i64 %6397, i64* %RAX.i1321, align 8
  %6398 = load i64, i64* %RBP.i, align 8
  %6399 = add i64 %6398, -4
  %6400 = add i64 %6396, 10
  store i64 %6400, i64* %3, align 8
  %6401 = inttoptr i64 %6399 to i32*
  store i32 %6395, i32* %6401, align 4
  %6402 = load i64, i64* %3, align 8
  %6403 = add i64 %6402, 2289
  store i64 %6403, i64* %3, align 8
  br label %block_.L_48067d

block_.L_47fd91:                                  ; preds = %block_.L_47f901
  %6404 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %6404, i64* %RAX.i1321, align 8
  %6405 = add i64 %6404, 2880
  %6406 = add i64 %5581, 15
  store i64 %6406, i64* %3, align 8
  %6407 = inttoptr i64 %6405 to i32*
  %6408 = load i32, i32* %6407, align 4
  %6409 = add i32 %6408, -2
  %6410 = icmp ult i32 %6408, 2
  %6411 = zext i1 %6410 to i8
  store i8 %6411, i8* %14, align 1
  %6412 = and i32 %6409, 255
  %6413 = tail call i32 @llvm.ctpop.i32(i32 %6412)
  %6414 = trunc i32 %6413 to i8
  %6415 = and i8 %6414, 1
  %6416 = xor i8 %6415, 1
  store i8 %6416, i8* %21, align 1
  %6417 = xor i32 %6409, %6408
  %6418 = lshr i32 %6417, 4
  %6419 = trunc i32 %6418 to i8
  %6420 = and i8 %6419, 1
  store i8 %6420, i8* %27, align 1
  %6421 = icmp eq i32 %6409, 0
  %6422 = zext i1 %6421 to i8
  store i8 %6422, i8* %30, align 1
  %6423 = lshr i32 %6409, 31
  %6424 = trunc i32 %6423 to i8
  store i8 %6424, i8* %33, align 1
  %6425 = lshr i32 %6408, 31
  %6426 = xor i32 %6423, %6425
  %6427 = add nuw nsw i32 %6426, %6425
  %6428 = icmp eq i32 %6427, 2
  %6429 = zext i1 %6428 to i8
  store i8 %6429, i8* %39, align 1
  %.v330 = select i1 %6421, i64 42, i64 21
  %6430 = add i64 %5581, %.v330
  store i64 %6430, i64* %3, align 8
  br i1 %6421, label %block_.L_47fdbb, label %block_47fda6

block_47fda6:                                     ; preds = %block_.L_47fd91
  store i64 %6404, i64* %RAX.i1321, align 8
  %6431 = add i64 %6404, 2884
  %6432 = add i64 %6430, 15
  store i64 %6432, i64* %3, align 8
  %6433 = inttoptr i64 %6431 to i32*
  %6434 = load i32, i32* %6433, align 4
  store i8 0, i8* %14, align 1
  %6435 = and i32 %6434, 255
  %6436 = tail call i32 @llvm.ctpop.i32(i32 %6435)
  %6437 = trunc i32 %6436 to i8
  %6438 = and i8 %6437, 1
  %6439 = xor i8 %6438, 1
  store i8 %6439, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6440 = icmp eq i32 %6434, 0
  %6441 = zext i1 %6440 to i8
  store i8 %6441, i8* %30, align 1
  %6442 = lshr i32 %6434, 31
  %6443 = trunc i32 %6442 to i8
  store i8 %6443, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v331 = select i1 %6440, i64 248, i64 21
  %6444 = add i64 %6430, %.v331
  store i64 %6444, i64* %3, align 8
  br i1 %6440, label %block_.L_47fe9e, label %block_.L_47fdbb

block_.L_47fdbb:                                  ; preds = %block_47fda6, %block_.L_47fd91
  %6445 = phi i64 [ %6444, %block_47fda6 ], [ %6430, %block_.L_47fd91 ]
  %6446 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6446, i64* %RAX.i1321, align 8
  %6447 = add i64 %6446, 72600
  %6448 = add i64 %6445, 15
  store i64 %6448, i64* %3, align 8
  %6449 = inttoptr i64 %6447 to i32*
  %6450 = load i32, i32* %6449, align 4
  %6451 = add i32 %6450, -1
  %6452 = icmp eq i32 %6450, 0
  %6453 = zext i1 %6452 to i8
  store i8 %6453, i8* %14, align 1
  %6454 = and i32 %6451, 255
  %6455 = tail call i32 @llvm.ctpop.i32(i32 %6454)
  %6456 = trunc i32 %6455 to i8
  %6457 = and i8 %6456, 1
  %6458 = xor i8 %6457, 1
  store i8 %6458, i8* %21, align 1
  %6459 = xor i32 %6451, %6450
  %6460 = lshr i32 %6459, 4
  %6461 = trunc i32 %6460 to i8
  %6462 = and i8 %6461, 1
  store i8 %6462, i8* %27, align 1
  %6463 = icmp eq i32 %6451, 0
  %6464 = zext i1 %6463 to i8
  store i8 %6464, i8* %30, align 1
  %6465 = lshr i32 %6451, 31
  %6466 = trunc i32 %6465 to i8
  store i8 %6466, i8* %33, align 1
  %6467 = lshr i32 %6450, 31
  %6468 = xor i32 %6465, %6467
  %6469 = add nuw nsw i32 %6468, %6467
  %6470 = icmp eq i32 %6469, 2
  %6471 = zext i1 %6470 to i8
  store i8 %6471, i8* %39, align 1
  %.v332 = select i1 %6463, i64 21, i64 227
  %6472 = add i64 %6445, %.v332
  store i64 %6472, i64* %3, align 8
  br i1 %6463, label %block_47fdd0, label %block_.L_47fe9e

block_47fdd0:                                     ; preds = %block_.L_47fdbb
  %6473 = bitcast [32 x %union.VectorReg]* %5130 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6473, align 1
  %6474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6475 = load i64, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  %6476 = bitcast %union.VectorReg* %6474 to double*
  %6477 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6474, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %6475, i64* %6477, align 1
  %6478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %6479 = bitcast i64* %6478 to double*
  store double 0.000000e+00, double* %6479, align 1
  %6480 = load i64, i64* bitcast (%G_0x6cea38_type* @G_0x6cea38 to i64*), align 8
  store i64 %6480, i64* %RAX.i1321, align 8
  %6481 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6482 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %6483 = sub i32 %6481, %6482
  %6484 = zext i32 %6483 to i64
  store i64 %6484, i64* %RCX.i1346, align 8
  %6485 = icmp ult i32 %6481, %6482
  %6486 = zext i1 %6485 to i8
  store i8 %6486, i8* %14, align 1
  %6487 = and i32 %6483, 255
  %6488 = tail call i32 @llvm.ctpop.i32(i32 %6487)
  %6489 = trunc i32 %6488 to i8
  %6490 = and i8 %6489, 1
  %6491 = xor i8 %6490, 1
  store i8 %6491, i8* %21, align 1
  %6492 = xor i32 %6482, %6481
  %6493 = xor i32 %6492, %6483
  %6494 = lshr i32 %6493, 4
  %6495 = trunc i32 %6494 to i8
  %6496 = and i8 %6495, 1
  store i8 %6496, i8* %27, align 1
  %6497 = icmp eq i32 %6483, 0
  %6498 = zext i1 %6497 to i8
  store i8 %6498, i8* %30, align 1
  %6499 = lshr i32 %6483, 31
  %6500 = trunc i32 %6499 to i8
  store i8 %6500, i8* %33, align 1
  %6501 = lshr i32 %6481, 31
  %6502 = lshr i32 %6482, 31
  %6503 = xor i32 %6502, %6501
  %6504 = xor i32 %6499, %6501
  %6505 = add nuw nsw i32 %6504, %6503
  %6506 = icmp eq i32 %6505, 2
  %6507 = zext i1 %6506 to i8
  store i8 %6507, i8* %39, align 1
  %6508 = sext i32 %6483 to i64
  store i64 %6508, i64* %RDX.i1173, align 8
  %6509 = shl nsw i64 %6508, 3
  %6510 = add i64 %6480, %6509
  %6511 = add i64 %6472, 42
  store i64 %6511, i64* %3, align 8
  %6512 = bitcast i64 %6475 to double
  %6513 = inttoptr i64 %6510 to double*
  %6514 = load double, double* %6513, align 8
  %6515 = fmul double %6512, %6514
  %6516 = load double, double* bitcast (%G_0x710008_type* @G_0x710008 to double*), align 8
  %6517 = fadd double %6515, %6516
  store double %6517, double* %6476, align 1
  store i64 0, i64* %6478, align 1
  store double %6517, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %6518 = load i64, i64* %5134, align 1
  store i64 %6518, i64* bitcast (%G_0x6d0708_type* @G_0x6d0708 to i64*), align 8
  %6519 = add i32 %6481, -1
  %6520 = zext i32 %6519 to i64
  store i64 %6520, i64* %RCX.i1346, align 8
  %6521 = icmp eq i32 %6481, 0
  %6522 = zext i1 %6521 to i8
  store i8 %6522, i8* %14, align 1
  %6523 = and i32 %6519, 255
  %6524 = tail call i32 @llvm.ctpop.i32(i32 %6523)
  %6525 = trunc i32 %6524 to i8
  %6526 = and i8 %6525, 1
  %6527 = xor i8 %6526, 1
  store i8 %6527, i8* %21, align 1
  %6528 = xor i32 %6519, %6481
  %6529 = lshr i32 %6528, 4
  %6530 = trunc i32 %6529 to i8
  %6531 = and i8 %6530, 1
  store i8 %6531, i8* %27, align 1
  %6532 = icmp eq i32 %6519, 0
  %6533 = zext i1 %6532 to i8
  store i8 %6533, i8* %30, align 1
  %6534 = lshr i32 %6519, 31
  %6535 = trunc i32 %6534 to i8
  store i8 %6535, i8* %33, align 1
  %6536 = xor i32 %6534, %6501
  %6537 = add nuw nsw i32 %6536, %6501
  %6538 = icmp eq i32 %6537, 2
  %6539 = zext i1 %6538 to i8
  store i8 %6539, i8* %39, align 1
  %6540 = load i64, i64* %RBP.i, align 8
  %6541 = add i64 %6540, -40
  %6542 = add i64 %6472, 82
  store i64 %6542, i64* %3, align 8
  %6543 = inttoptr i64 %6541 to i32*
  store i32 %6519, i32* %6543, align 4
  %.pre280 = load i64, i64* %3, align 8
  br label %block_.L_47fe22

block_.L_47fe22:                                  ; preds = %block_47fe3b, %block_47fdd0
  %6544 = phi i64 [ %6627, %block_47fe3b ], [ %.pre280, %block_47fdd0 ]
  %6545 = load i64, i64* %RBP.i, align 8
  %6546 = add i64 %6545, -40
  %6547 = add i64 %6544, 3
  store i64 %6547, i64* %3, align 8
  %6548 = inttoptr i64 %6546 to i32*
  %6549 = load i32, i32* %6548, align 4
  %6550 = zext i32 %6549 to i64
  store i64 %6550, i64* %RAX.i1321, align 8
  %6551 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6552 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %6553 = sub i32 %6551, %6552
  %6554 = zext i32 %6553 to i64
  store i64 %6554, i64* %RCX.i1346, align 8
  %6555 = lshr i32 %6553, 31
  %6556 = sub i32 %6549, %6553
  %6557 = icmp ult i32 %6549, %6553
  %6558 = zext i1 %6557 to i8
  store i8 %6558, i8* %14, align 1
  %6559 = and i32 %6556, 255
  %6560 = tail call i32 @llvm.ctpop.i32(i32 %6559)
  %6561 = trunc i32 %6560 to i8
  %6562 = and i8 %6561, 1
  %6563 = xor i8 %6562, 1
  store i8 %6563, i8* %21, align 1
  %6564 = xor i32 %6553, %6549
  %6565 = xor i32 %6564, %6556
  %6566 = lshr i32 %6565, 4
  %6567 = trunc i32 %6566 to i8
  %6568 = and i8 %6567, 1
  store i8 %6568, i8* %27, align 1
  %6569 = icmp eq i32 %6556, 0
  %6570 = zext i1 %6569 to i8
  store i8 %6570, i8* %30, align 1
  %6571 = lshr i32 %6556, 31
  %6572 = trunc i32 %6571 to i8
  store i8 %6572, i8* %33, align 1
  %6573 = lshr i32 %6549, 31
  %6574 = xor i32 %6555, %6573
  %6575 = xor i32 %6571, %6573
  %6576 = add nuw nsw i32 %6575, %6574
  %6577 = icmp eq i32 %6576, 2
  %6578 = zext i1 %6577 to i8
  store i8 %6578, i8* %39, align 1
  %6579 = icmp ne i8 %6572, 0
  %6580 = xor i1 %6579, %6577
  %.v355 = select i1 %6580, i64 119, i64 25
  %6581 = add i64 %6544, %.v355
  store i64 %6581, i64* %3, align 8
  br i1 %6580, label %block_.L_47fe99, label %block_47fe3b

block_47fe3b:                                     ; preds = %block_.L_47fe22
  %6582 = load i64, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  store i64 %6582, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  %6583 = load i64, i64* bitcast (%G_0x6cea38_type* @G_0x6cea38 to i64*), align 8
  store i64 %6583, i64* %RAX.i1321, align 8
  %6584 = add i64 %6581, 21
  store i64 %6584, i64* %3, align 8
  %6585 = load i32, i32* %6548, align 4
  %6586 = sext i32 %6585 to i64
  store i64 %6586, i64* %RCX.i1346, align 8
  %6587 = shl nsw i64 %6586, 3
  %6588 = add i64 %6587, %6583
  %6589 = add i64 %6581, 26
  store i64 %6589, i64* %3, align 8
  %6590 = bitcast i64 %6582 to double
  %6591 = inttoptr i64 %6588 to double*
  %6592 = load double, double* %6591, align 8
  %6593 = fmul double %6590, %6592
  %6594 = load double, double* bitcast (%G_0x710008_type* @G_0x710008 to double*), align 8
  %6595 = fadd double %6593, %6594
  store double %6595, double* bitcast (%G_0x7255f8_type* @G_0x7255f8 to double*), align 8
  %6596 = fmul double %6595, %6595
  %6597 = load double, double* bitcast (%G_0x6d0708_type* @G_0x6d0708 to double*), align 8
  %6598 = fadd double %6596, %6597
  store double %6598, double* %5133, align 1
  store i64 0, i64* %5135, align 1
  store double %6598, double* bitcast (%G_0x6d0708_type* @G_0x6d0708 to double*), align 8
  %6599 = add i64 %6581, 83
  store i64 %6599, i64* %3, align 8
  %6600 = load i32, i32* %6548, align 4
  %6601 = add i32 %6600, -1
  %6602 = zext i32 %6601 to i64
  store i64 %6602, i64* %RAX.i1321, align 8
  %6603 = icmp ne i32 %6600, 0
  %6604 = zext i1 %6603 to i8
  store i8 %6604, i8* %14, align 1
  %6605 = and i32 %6601, 255
  %6606 = tail call i32 @llvm.ctpop.i32(i32 %6605)
  %6607 = trunc i32 %6606 to i8
  %6608 = and i8 %6607, 1
  %6609 = xor i8 %6608, 1
  store i8 %6609, i8* %21, align 1
  %6610 = xor i32 %6600, 16
  %6611 = xor i32 %6610, %6601
  %6612 = lshr i32 %6611, 4
  %6613 = trunc i32 %6612 to i8
  %6614 = and i8 %6613, 1
  store i8 %6614, i8* %27, align 1
  %6615 = icmp eq i32 %6601, 0
  %6616 = zext i1 %6615 to i8
  store i8 %6616, i8* %30, align 1
  %6617 = lshr i32 %6601, 31
  %6618 = trunc i32 %6617 to i8
  store i8 %6618, i8* %33, align 1
  %6619 = lshr i32 %6600, 31
  %6620 = xor i32 %6617, %6619
  %6621 = xor i32 %6617, 1
  %6622 = add nuw nsw i32 %6620, %6621
  %6623 = icmp eq i32 %6622, 2
  %6624 = zext i1 %6623 to i8
  store i8 %6624, i8* %39, align 1
  %6625 = add i64 %6581, 89
  store i64 %6625, i64* %3, align 8
  store i32 %6601, i32* %6548, align 4
  %6626 = load i64, i64* %3, align 8
  %6627 = add i64 %6626, -114
  store i64 %6627, i64* %3, align 8
  br label %block_.L_47fe22

block_.L_47fe99:                                  ; preds = %block_.L_47fe22
  %6628 = add i64 %6581, 211
  br label %block_.L_47ff6c

block_.L_47fe9e:                                  ; preds = %block_.L_47fdbb, %block_47fda6
  %6629 = phi i64 [ %6472, %block_.L_47fdbb ], [ %6444, %block_47fda6 ]
  %6630 = bitcast [32 x %union.VectorReg]* %5130 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6630, align 1
  %6631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6632 = load i64, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  %6633 = bitcast %union.VectorReg* %6631 to double*
  %6634 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6631, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %6632, i64* %6634, align 1
  %6635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %6636 = bitcast i64* %6635 to double*
  store double 0.000000e+00, double* %6636, align 1
  %6637 = load i64, i64* bitcast (%G_0x6f9350_type* @G_0x6f9350 to i64*), align 8
  store i64 %6637, i64* %RAX.i1321, align 8
  %6638 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6639 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %6640 = sub i32 %6638, %6639
  %6641 = zext i32 %6640 to i64
  store i64 %6641, i64* %RCX.i1346, align 8
  %6642 = icmp ult i32 %6638, %6639
  %6643 = zext i1 %6642 to i8
  store i8 %6643, i8* %14, align 1
  %6644 = and i32 %6640, 255
  %6645 = tail call i32 @llvm.ctpop.i32(i32 %6644)
  %6646 = trunc i32 %6645 to i8
  %6647 = and i8 %6646, 1
  %6648 = xor i8 %6647, 1
  store i8 %6648, i8* %21, align 1
  %6649 = xor i32 %6639, %6638
  %6650 = xor i32 %6649, %6640
  %6651 = lshr i32 %6650, 4
  %6652 = trunc i32 %6651 to i8
  %6653 = and i8 %6652, 1
  store i8 %6653, i8* %27, align 1
  %6654 = icmp eq i32 %6640, 0
  %6655 = zext i1 %6654 to i8
  store i8 %6655, i8* %30, align 1
  %6656 = lshr i32 %6640, 31
  %6657 = trunc i32 %6656 to i8
  store i8 %6657, i8* %33, align 1
  %6658 = lshr i32 %6638, 31
  %6659 = lshr i32 %6639, 31
  %6660 = xor i32 %6659, %6658
  %6661 = xor i32 %6656, %6658
  %6662 = add nuw nsw i32 %6661, %6660
  %6663 = icmp eq i32 %6662, 2
  %6664 = zext i1 %6663 to i8
  store i8 %6664, i8* %39, align 1
  %6665 = sext i32 %6640 to i64
  store i64 %6665, i64* %RDX.i1173, align 8
  %6666 = shl nsw i64 %6665, 3
  %6667 = add i64 %6637, %6666
  %6668 = add i64 %6629, 42
  store i64 %6668, i64* %3, align 8
  %6669 = bitcast i64 %6632 to double
  %6670 = inttoptr i64 %6667 to double*
  %6671 = load double, double* %6670, align 8
  %6672 = fmul double %6669, %6671
  %6673 = load double, double* bitcast (%G_0x710008_type* @G_0x710008 to double*), align 8
  %6674 = fadd double %6672, %6673
  store double %6674, double* %6633, align 1
  store i64 0, i64* %6635, align 1
  store double %6674, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %6675 = load i64, i64* %5134, align 1
  store i64 %6675, i64* bitcast (%G_0x6d0708_type* @G_0x6d0708 to i64*), align 8
  %6676 = add i32 %6638, -1
  %6677 = zext i32 %6676 to i64
  store i64 %6677, i64* %RCX.i1346, align 8
  %6678 = icmp eq i32 %6638, 0
  %6679 = zext i1 %6678 to i8
  store i8 %6679, i8* %14, align 1
  %6680 = and i32 %6676, 255
  %6681 = tail call i32 @llvm.ctpop.i32(i32 %6680)
  %6682 = trunc i32 %6681 to i8
  %6683 = and i8 %6682, 1
  %6684 = xor i8 %6683, 1
  store i8 %6684, i8* %21, align 1
  %6685 = xor i32 %6676, %6638
  %6686 = lshr i32 %6685, 4
  %6687 = trunc i32 %6686 to i8
  %6688 = and i8 %6687, 1
  store i8 %6688, i8* %27, align 1
  %6689 = icmp eq i32 %6676, 0
  %6690 = zext i1 %6689 to i8
  store i8 %6690, i8* %30, align 1
  %6691 = lshr i32 %6676, 31
  %6692 = trunc i32 %6691 to i8
  store i8 %6692, i8* %33, align 1
  %6693 = xor i32 %6691, %6658
  %6694 = add nuw nsw i32 %6693, %6658
  %6695 = icmp eq i32 %6694, 2
  %6696 = zext i1 %6695 to i8
  store i8 %6696, i8* %39, align 1
  %6697 = load i64, i64* %RBP.i, align 8
  %6698 = add i64 %6697, -40
  %6699 = add i64 %6629, 82
  store i64 %6699, i64* %3, align 8
  %6700 = inttoptr i64 %6698 to i32*
  store i32 %6676, i32* %6700, align 4
  %.pre281 = load i64, i64* %3, align 8
  br label %block_.L_47fef0

block_.L_47fef0:                                  ; preds = %block_47ff09, %block_.L_47fe9e
  %6701 = phi i64 [ %6784, %block_47ff09 ], [ %.pre281, %block_.L_47fe9e ]
  %6702 = load i64, i64* %RBP.i, align 8
  %6703 = add i64 %6702, -40
  %6704 = add i64 %6701, 3
  store i64 %6704, i64* %3, align 8
  %6705 = inttoptr i64 %6703 to i32*
  %6706 = load i32, i32* %6705, align 4
  %6707 = zext i32 %6706 to i64
  store i64 %6707, i64* %RAX.i1321, align 8
  %6708 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6709 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %6710 = sub i32 %6708, %6709
  %6711 = zext i32 %6710 to i64
  store i64 %6711, i64* %RCX.i1346, align 8
  %6712 = lshr i32 %6710, 31
  %6713 = sub i32 %6706, %6710
  %6714 = icmp ult i32 %6706, %6710
  %6715 = zext i1 %6714 to i8
  store i8 %6715, i8* %14, align 1
  %6716 = and i32 %6713, 255
  %6717 = tail call i32 @llvm.ctpop.i32(i32 %6716)
  %6718 = trunc i32 %6717 to i8
  %6719 = and i8 %6718, 1
  %6720 = xor i8 %6719, 1
  store i8 %6720, i8* %21, align 1
  %6721 = xor i32 %6710, %6706
  %6722 = xor i32 %6721, %6713
  %6723 = lshr i32 %6722, 4
  %6724 = trunc i32 %6723 to i8
  %6725 = and i8 %6724, 1
  store i8 %6725, i8* %27, align 1
  %6726 = icmp eq i32 %6713, 0
  %6727 = zext i1 %6726 to i8
  store i8 %6727, i8* %30, align 1
  %6728 = lshr i32 %6713, 31
  %6729 = trunc i32 %6728 to i8
  store i8 %6729, i8* %33, align 1
  %6730 = lshr i32 %6706, 31
  %6731 = xor i32 %6712, %6730
  %6732 = xor i32 %6728, %6730
  %6733 = add nuw nsw i32 %6732, %6731
  %6734 = icmp eq i32 %6733, 2
  %6735 = zext i1 %6734 to i8
  store i8 %6735, i8* %39, align 1
  %6736 = icmp ne i8 %6729, 0
  %6737 = xor i1 %6736, %6734
  %.v333 = select i1 %6737, i64 119, i64 25
  %6738 = add i64 %6701, %.v333
  store i64 %6738, i64* %3, align 8
  br i1 %6737, label %block_.L_47ff67, label %block_47ff09

block_47ff09:                                     ; preds = %block_.L_47fef0
  %6739 = load i64, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  store i64 %6739, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  %6740 = load i64, i64* bitcast (%G_0x6f9350_type* @G_0x6f9350 to i64*), align 8
  store i64 %6740, i64* %RAX.i1321, align 8
  %6741 = add i64 %6738, 21
  store i64 %6741, i64* %3, align 8
  %6742 = load i32, i32* %6705, align 4
  %6743 = sext i32 %6742 to i64
  store i64 %6743, i64* %RCX.i1346, align 8
  %6744 = shl nsw i64 %6743, 3
  %6745 = add i64 %6744, %6740
  %6746 = add i64 %6738, 26
  store i64 %6746, i64* %3, align 8
  %6747 = bitcast i64 %6739 to double
  %6748 = inttoptr i64 %6745 to double*
  %6749 = load double, double* %6748, align 8
  %6750 = fmul double %6747, %6749
  %6751 = load double, double* bitcast (%G_0x710008_type* @G_0x710008 to double*), align 8
  %6752 = fadd double %6750, %6751
  store double %6752, double* bitcast (%G_0x7255f8_type* @G_0x7255f8 to double*), align 8
  %6753 = fmul double %6752, %6752
  %6754 = load double, double* bitcast (%G_0x6d0708_type* @G_0x6d0708 to double*), align 8
  %6755 = fadd double %6753, %6754
  store double %6755, double* %5133, align 1
  store i64 0, i64* %5135, align 1
  store double %6755, double* bitcast (%G_0x6d0708_type* @G_0x6d0708 to double*), align 8
  %6756 = add i64 %6738, 83
  store i64 %6756, i64* %3, align 8
  %6757 = load i32, i32* %6705, align 4
  %6758 = add i32 %6757, -1
  %6759 = zext i32 %6758 to i64
  store i64 %6759, i64* %RAX.i1321, align 8
  %6760 = icmp ne i32 %6757, 0
  %6761 = zext i1 %6760 to i8
  store i8 %6761, i8* %14, align 1
  %6762 = and i32 %6758, 255
  %6763 = tail call i32 @llvm.ctpop.i32(i32 %6762)
  %6764 = trunc i32 %6763 to i8
  %6765 = and i8 %6764, 1
  %6766 = xor i8 %6765, 1
  store i8 %6766, i8* %21, align 1
  %6767 = xor i32 %6757, 16
  %6768 = xor i32 %6767, %6758
  %6769 = lshr i32 %6768, 4
  %6770 = trunc i32 %6769 to i8
  %6771 = and i8 %6770, 1
  store i8 %6771, i8* %27, align 1
  %6772 = icmp eq i32 %6758, 0
  %6773 = zext i1 %6772 to i8
  store i8 %6773, i8* %30, align 1
  %6774 = lshr i32 %6758, 31
  %6775 = trunc i32 %6774 to i8
  store i8 %6775, i8* %33, align 1
  %6776 = lshr i32 %6757, 31
  %6777 = xor i32 %6774, %6776
  %6778 = xor i32 %6774, 1
  %6779 = add nuw nsw i32 %6777, %6778
  %6780 = icmp eq i32 %6779, 2
  %6781 = zext i1 %6780 to i8
  store i8 %6781, i8* %39, align 1
  %6782 = add i64 %6738, 89
  store i64 %6782, i64* %3, align 8
  store i32 %6758, i32* %6705, align 4
  %6783 = load i64, i64* %3, align 8
  %6784 = add i64 %6783, -114
  store i64 %6784, i64* %3, align 8
  br label %block_.L_47fef0

block_.L_47ff67:                                  ; preds = %block_.L_47fef0
  %6785 = add i64 %6738, 5
  store i64 %6785, i64* %3, align 8
  br label %block_.L_47ff6c

block_.L_47ff6c:                                  ; preds = %block_.L_47ff67, %block_.L_47fe99
  %.pre-phi312 = phi double* [ %6636, %block_.L_47ff67 ], [ %6479, %block_.L_47fe99 ]
  %.pre-phi311 = phi i64* [ %6635, %block_.L_47ff67 ], [ %6478, %block_.L_47fe99 ]
  %.pre-phi310 = phi i64* [ %6634, %block_.L_47ff67 ], [ %6477, %block_.L_47fe99 ]
  %.pre-phi309 = phi double* [ %6633, %block_.L_47ff67 ], [ %6476, %block_.L_47fe99 ]
  %.pre-phi = phi %union.VectorReg* [ %6631, %block_.L_47ff67 ], [ %6474, %block_.L_47fe99 ]
  %6786 = phi i64 [ %6702, %block_.L_47ff67 ], [ %6545, %block_.L_47fe99 ]
  %storemerge189 = phi i64 [ %6785, %block_.L_47ff67 ], [ %6628, %block_.L_47fe99 ]
  %6787 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  %6788 = sitofp i64 %6787 to double
  %6789 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %6790 = fmul double %6788, %6789
  %6791 = fmul double %6789, %6790
  %6792 = load double, double* bitcast (%G_0x6d0708_type* @G_0x6d0708 to double*), align 8
  %6793 = fdiv double %6791, %6792
  store double %6793, double* %5133, align 1
  %6794 = tail call double @llvm.trunc.f64(double %6793)
  %6795 = tail call double @llvm.fabs.f64(double %6794)
  %6796 = fcmp ogt double %6795, 0x41DFFFFFFFC00000
  %6797 = fptosi double %6794 to i32
  %6798 = add i64 %6786, -20
  %6799 = select i1 %6796, i32 -2147483648, i32 %6797
  %6800 = add i64 %storemerge189, 44
  store i64 %6800, i64* %3, align 8
  %6801 = inttoptr i64 %6798 to i32*
  store i32 %6799, i32* %6801, align 4
  %6802 = load i64, i64* %3, align 8
  %6803 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %6804 = zext i32 %6803 to i64
  store i64 %6804, i64* %RAX.i1321, align 8
  %6805 = load i64, i64* %RBP.i, align 8
  %6806 = add i64 %6805, -20
  %6807 = add i64 %6802, 10
  store i64 %6807, i64* %3, align 8
  %6808 = inttoptr i64 %6806 to i32*
  %6809 = load i32, i32* %6808, align 4
  %6810 = sub i32 %6809, %6803
  %6811 = zext i32 %6810 to i64
  store i64 %6811, i64* %RCX.i1346, align 8
  %6812 = icmp ult i32 %6809, %6803
  %6813 = zext i1 %6812 to i8
  store i8 %6813, i8* %14, align 1
  %6814 = and i32 %6810, 255
  %6815 = tail call i32 @llvm.ctpop.i32(i32 %6814)
  %6816 = trunc i32 %6815 to i8
  %6817 = and i8 %6816, 1
  %6818 = xor i8 %6817, 1
  store i8 %6818, i8* %21, align 1
  %6819 = xor i32 %6803, %6809
  %6820 = xor i32 %6819, %6810
  %6821 = lshr i32 %6820, 4
  %6822 = trunc i32 %6821 to i8
  %6823 = and i8 %6822, 1
  store i8 %6823, i8* %27, align 1
  %6824 = icmp eq i32 %6810, 0
  %6825 = zext i1 %6824 to i8
  store i8 %6825, i8* %30, align 1
  %6826 = lshr i32 %6810, 31
  %6827 = trunc i32 %6826 to i8
  store i8 %6827, i8* %33, align 1
  %6828 = lshr i32 %6809, 31
  %6829 = lshr i32 %6803, 31
  %6830 = xor i32 %6829, %6828
  %6831 = xor i32 %6826, %6828
  %6832 = add nuw nsw i32 %6831, %6830
  %6833 = icmp eq i32 %6832, 2
  %6834 = zext i1 %6833 to i8
  store i8 %6834, i8* %39, align 1
  %6835 = add i64 %6802, 15
  store i64 %6835, i64* %3, align 8
  store i32 %6810, i32* %6808, align 4
  %6836 = load i64, i64* %RBP.i, align 8
  %6837 = add i64 %6836, -20
  %6838 = load i64, i64* %3, align 8
  %6839 = add i64 %6838, 3
  store i64 %6839, i64* %3, align 8
  %6840 = inttoptr i64 %6837 to i32*
  %6841 = load i32, i32* %6840, align 4
  %6842 = zext i32 %6841 to i64
  store i64 %6842, i64* %RAX.i1321, align 8
  %6843 = load double, double* bitcast (%G_0x6ccf88_type* @G_0x6ccf88 to double*), align 8
  %6844 = load i64, i64* bitcast (%G_0x723648_type* @G_0x723648 to i64*), align 8
  store i64 %6844, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %6845 = bitcast i64 %6844 to double
  %6846 = load double, double* bitcast (%G_0x6d1fb0_type* @G_0x6d1fb0 to double*), align 8
  %6847 = fmul double %6845, %6846
  %6848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6849 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6850 = sitofp i32 %6849 to double
  %6851 = bitcast %union.VectorReg* %6848 to double*
  store double %6850, double* %6851, align 1
  %6852 = fmul double %6850, %6847
  store double %6852, double* %.pre-phi309, align 1
  store i64 0, i64* %.pre-phi311, align 1
  %6853 = fdiv double %6843, %6852
  store double %6853, double* %5133, align 1
  store i64 0, i64* %5135, align 1
  %6854 = tail call double @llvm.trunc.f64(double %6853)
  %6855 = tail call double @llvm.fabs.f64(double %6854)
  %6856 = fcmp ogt double %6855, 0x41DFFFFFFFC00000
  %6857 = fptosi double %6854 to i32
  %6858 = zext i32 %6857 to i64
  %6859 = select i1 %6856, i64 2147483648, i64 %6858
  store i64 %6859, i64* %RCX.i1346, align 8
  %6860 = trunc i64 %6859 to i32
  %6861 = sub i32 %6841, %6860
  %6862 = icmp ult i32 %6841, %6860
  %6863 = zext i1 %6862 to i8
  store i8 %6863, i8* %14, align 1
  %6864 = and i32 %6861, 255
  %6865 = tail call i32 @llvm.ctpop.i32(i32 %6864)
  %6866 = trunc i32 %6865 to i8
  %6867 = and i8 %6866, 1
  %6868 = xor i8 %6867, 1
  store i8 %6868, i8* %21, align 1
  %6869 = xor i32 %6860, %6841
  %6870 = xor i32 %6869, %6861
  %6871 = lshr i32 %6870, 4
  %6872 = trunc i32 %6871 to i8
  %6873 = and i8 %6872, 1
  store i8 %6873, i8* %27, align 1
  %6874 = icmp eq i32 %6861, 0
  %6875 = zext i1 %6874 to i8
  store i8 %6875, i8* %30, align 1
  %6876 = lshr i32 %6861, 31
  %6877 = trunc i32 %6876 to i8
  store i8 %6877, i8* %33, align 1
  %6878 = lshr i32 %6841, 31
  %6879 = lshr i32 %6860, 31
  %6880 = xor i32 %6879, %6878
  %6881 = xor i32 %6876, %6878
  %6882 = add nuw nsw i32 %6881, %6880
  %6883 = icmp eq i32 %6882, 2
  %6884 = zext i1 %6883 to i8
  store i8 %6884, i8* %39, align 1
  %6885 = icmp ne i8 %6877, 0
  %6886 = xor i1 %6885, %6883
  %.v334 = select i1 %6886, i64 59, i64 118
  %6887 = add i64 %6838, %.v334
  store i64 %6887, i64* %3, align 8
  br i1 %6886, label %block_47ffe2, label %block_.L_48001d

block_47ffe2:                                     ; preds = %block_.L_47ff6c
  store i64 %6844, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  store double %6850, double* %6851, align 1
  store double %6852, double* %.pre-phi309, align 1
  store i64 0, i64* %.pre-phi311, align 1
  store double %6853, double* %5133, align 1
  store i64 0, i64* %5135, align 1
  store i64 %6859, i64* %RAX.i1321, align 8
  %6888 = add i64 %6836, -192
  %6889 = add i64 %6887, 54
  store i64 %6889, i64* %3, align 8
  %6890 = inttoptr i64 %6888 to i32*
  store i32 %6860, i32* %6890, align 4
  %6891 = load i64, i64* %3, align 8
  %6892 = add i64 %6891, 14
  store i64 %6892, i64* %3, align 8
  br label %block_.L_480026

block_.L_48001d:                                  ; preds = %block_.L_47ff6c
  %6893 = add i64 %6887, 3
  store i64 %6893, i64* %3, align 8
  %6894 = load i32, i32* %6840, align 4
  %6895 = zext i32 %6894 to i64
  store i64 %6895, i64* %RAX.i1321, align 8
  %6896 = add i64 %6836, -192
  %6897 = add i64 %6887, 9
  store i64 %6897, i64* %3, align 8
  %6898 = inttoptr i64 %6896 to i32*
  store i32 %6894, i32* %6898, align 4
  %.pre282 = load i64, i64* %3, align 8
  br label %block_.L_480026

block_.L_480026:                                  ; preds = %block_.L_48001d, %block_47ffe2
  %6899 = phi i64 [ %.pre282, %block_.L_48001d ], [ %6892, %block_47ffe2 ]
  %6900 = load i64, i64* %RBP.i, align 8
  %6901 = add i64 %6900, -192
  %6902 = add i64 %6899, 6
  store i64 %6902, i64* %3, align 8
  %6903 = inttoptr i64 %6901 to i32*
  %6904 = load i32, i32* %6903, align 4
  %6905 = zext i32 %6904 to i64
  store i64 %6905, i64* %RAX.i1321, align 8
  %6906 = bitcast [32 x %union.VectorReg]* %5130 to i32*
  %6907 = getelementptr inbounds i8, i8* %5131, i64 4
  %6908 = bitcast i8* %6907 to i32*
  %6909 = bitcast i64* %5135 to i32*
  %6910 = getelementptr inbounds i8, i8* %5131, i64 12
  %6911 = bitcast i8* %6910 to i32*
  %6912 = bitcast [32 x %union.VectorReg]* %5130 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6912, align 1
  %6913 = add i64 %6899, add (i64 ptrtoint (%G_0x31801__rip__type* @G_0x31801__rip_ to i64), i64 9)
  %6914 = add i64 %6899, 17
  store i64 %6914, i64* %3, align 8
  %6915 = inttoptr i64 %6913 to i64*
  %6916 = load i64, i64* %6915, align 8
  store i64 %6916, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %6917 = add i64 %6900, -20
  %6918 = add i64 %6899, 20
  store i64 %6918, i64* %3, align 8
  %6919 = inttoptr i64 %6917 to i32*
  store i32 %6904, i32* %6919, align 4
  %6920 = load i64, i64* %3, align 8
  %6921 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %6922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %6923 = load double, double* bitcast (%G_0x723640_type* @G_0x723640 to double*), align 8
  %6924 = fmul double %6921, %6923
  %6925 = fmul double %6924, %6921
  %6926 = fmul double %6925, %6923
  store double %6926, double* %6851, align 1
  store i64 0, i64* %6922, align 1
  %6927 = load double, double* %.pre-phi309, align 1
  %6928 = load double, double* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to double*), align 8
  %6929 = fmul double %6927, %6928
  %6930 = fmul double %6929, %6921
  store double %6930, double* %.pre-phi309, align 1
  %6931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %6932 = load i64, i64* %RBP.i, align 8
  %6933 = add i64 %6932, -20
  %6934 = add i64 %6920, 59
  store i64 %6934, i64* %3, align 8
  %6935 = inttoptr i64 %6933 to i32*
  %6936 = load i32, i32* %6935, align 4
  %6937 = sitofp i32 %6936 to double
  %6938 = bitcast %union.VectorReg* %6931 to double*
  store double %6937, double* %6938, align 1
  %6939 = fmul double %6937, %6930
  store double %6939, double* %.pre-phi309, align 1
  %6940 = fadd double %6939, %6926
  store double %6940, double* %6851, align 1
  store i64 0, i64* %6922, align 1
  %6941 = add i64 %6932, -16
  %6942 = add i64 %6920, 72
  store i64 %6942, i64* %3, align 8
  %6943 = inttoptr i64 %6941 to double*
  store double %6940, double* %6943, align 8
  %6944 = load i64, i64* %3, align 8
  %6945 = load i64, i64* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to i64*), align 8
  store i64 %6945, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %6946 = add i64 %6944, 13
  store i64 %6946, i64* %3, align 8
  %.cast191 = bitcast i64 %6945 to double
  %6947 = load double, double* %5133, align 1
  %6948 = fcmp uno double %.cast191, %6947
  br i1 %6948, label %6949, label %6959

; <label>:6949:                                   ; preds = %block_.L_480026
  %6950 = fadd double %.cast191, %6947
  %6951 = bitcast double %6950 to i64
  %6952 = and i64 %6951, 9221120237041090560
  %6953 = icmp eq i64 %6952, 9218868437227405312
  %6954 = and i64 %6951, 2251799813685247
  %6955 = icmp ne i64 %6954, 0
  %6956 = and i1 %6953, %6955
  br i1 %6956, label %6957, label %6965

; <label>:6957:                                   ; preds = %6949
  %6958 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6946, %struct.Memory* %MEMORY.80)
  %.pre283 = load i64, i64* %3, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit528

; <label>:6959:                                   ; preds = %block_.L_480026
  %6960 = fcmp ogt double %.cast191, %6947
  br i1 %6960, label %6965, label %6961

; <label>:6961:                                   ; preds = %6959
  %6962 = fcmp olt double %.cast191, %6947
  br i1 %6962, label %6965, label %6963

; <label>:6963:                                   ; preds = %6961
  %6964 = fcmp oeq double %.cast191, %6947
  br i1 %6964, label %6965, label %6969

; <label>:6965:                                   ; preds = %6963, %6961, %6959, %6949
  %6966 = phi i8 [ 0, %6959 ], [ 0, %6961 ], [ 1, %6963 ], [ 1, %6949 ]
  %6967 = phi i8 [ 0, %6959 ], [ 0, %6961 ], [ 0, %6963 ], [ 1, %6949 ]
  %6968 = phi i8 [ 0, %6959 ], [ 1, %6961 ], [ 0, %6963 ], [ 1, %6949 ]
  store i8 %6966, i8* %30, align 1
  store i8 %6967, i8* %21, align 1
  store i8 %6968, i8* %14, align 1
  br label %6969

; <label>:6969:                                   ; preds = %6965, %6963
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit528

routine_ucomisd__xmm0___xmm1.exit528:             ; preds = %6969, %6957
  %6970 = phi i64 [ %.pre283, %6957 ], [ %6946, %6969 ]
  %6971 = phi %struct.Memory* [ %6958, %6957 ], [ %MEMORY.80, %6969 ]
  %6972 = add i64 %6970, 17
  %6973 = add i64 %6970, 6
  %6974 = load i8, i8* %30, align 1
  %6975 = icmp eq i8 %6974, 0
  %6976 = select i1 %6975, i64 %6972, i64 %6973
  store i64 %6976, i64* %3, align 8
  br i1 %6975, label %block_.L_4800a0, label %block_480095

block_480095:                                     ; preds = %routine_ucomisd__xmm0___xmm1.exit528
  %6977 = load i8, i8* %21, align 1
  %6978 = icmp ne i8 %6977, 0
  %.v469 = select i1 %6978, i64 11, i64 6
  %6979 = add i64 %6976, %.v469
  store i64 %6979, i64* %3, align 8
  %cmpBr_480095 = icmp eq i8 %6977, 1
  br i1 %cmpBr_480095, label %block_.L_4800a0, label %block_48009b

block_48009b:                                     ; preds = %block_480095
  %6980 = add i64 %6979, 83
  store i64 %6980, i64* %3, align 8
  br label %block_.L_4800ee

block_.L_4800a0:                                  ; preds = %block_480095, %routine_ucomisd__xmm0___xmm1.exit528
  %6981 = phi i64 [ %6979, %block_480095 ], [ %6972, %routine_ucomisd__xmm0___xmm1.exit528 ]
  %6982 = bitcast [32 x %union.VectorReg]* %5130 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6982, align 1
  %6983 = load i64, i64* %RBP.i, align 8
  %6984 = add i64 %6983, -16
  %6985 = add i64 %6981, 8
  store i64 %6985, i64* %3, align 8
  %6986 = load double, double* %5133, align 1
  %6987 = inttoptr i64 %6984 to double*
  %6988 = load double, double* %6987, align 8
  %6989 = fcmp uno double %6986, %6988
  br i1 %6989, label %6990, label %7000

; <label>:6990:                                   ; preds = %block_.L_4800a0
  %6991 = fadd double %6986, %6988
  %6992 = bitcast double %6991 to i64
  %6993 = and i64 %6992, 9221120237041090560
  %6994 = icmp eq i64 %6993, 9218868437227405312
  %6995 = and i64 %6992, 2251799813685247
  %6996 = icmp ne i64 %6995, 0
  %6997 = and i1 %6994, %6996
  br i1 %6997, label %6998, label %7006

; <label>:6998:                                   ; preds = %6990
  %6999 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6985, %struct.Memory* %6971)
  %.pre284 = load i64, i64* %3, align 8
  %.pre285 = load i8, i8* %30, align 1
  br label %routine_ucomisd_MINUS0x10__rbp____xmm0.exit

; <label>:7000:                                   ; preds = %block_.L_4800a0
  %7001 = fcmp ogt double %6986, %6988
  br i1 %7001, label %7006, label %7002

; <label>:7002:                                   ; preds = %7000
  %7003 = fcmp olt double %6986, %6988
  br i1 %7003, label %7006, label %7004

; <label>:7004:                                   ; preds = %7002
  %7005 = fcmp oeq double %6986, %6988
  br i1 %7005, label %7006, label %7010

; <label>:7006:                                   ; preds = %7004, %7002, %7000, %6990
  %7007 = phi i8 [ 0, %7000 ], [ 0, %7002 ], [ 1, %7004 ], [ 1, %6990 ]
  %7008 = phi i8 [ 0, %7000 ], [ 0, %7002 ], [ 0, %7004 ], [ 1, %6990 ]
  %7009 = phi i8 [ 0, %7000 ], [ 1, %7002 ], [ 0, %7004 ], [ 1, %6990 ]
  store i8 %7007, i8* %30, align 1
  store i8 %7008, i8* %21, align 1
  store i8 %7009, i8* %14, align 1
  br label %7010

; <label>:7010:                                   ; preds = %7006, %7004
  %7011 = phi i8 [ %7007, %7006 ], [ %6974, %7004 ]
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd_MINUS0x10__rbp____xmm0.exit

routine_ucomisd_MINUS0x10__rbp____xmm0.exit:      ; preds = %7010, %6998
  %7012 = phi i8 [ %.pre285, %6998 ], [ %7011, %7010 ]
  %7013 = phi i64 [ %.pre284, %6998 ], [ %6985, %7010 ]
  %7014 = phi %struct.Memory* [ %6999, %6998 ], [ %6971, %7010 ]
  %7015 = add i64 %7013, 70
  %7016 = add i64 %7013, 6
  %7017 = load i8, i8* %14, align 1
  %7018 = or i8 %7012, %7017
  %7019 = icmp eq i8 %7018, 0
  %7020 = select i1 %7019, i64 %7015, i64 %7016
  store i64 %7020, i64* %3, align 8
  br i1 %7019, label %block_.L_4800ee, label %block_4800ae

block_4800ae:                                     ; preds = %routine_ucomisd_MINUS0x10__rbp____xmm0.exit
  %7021 = bitcast [32 x %union.VectorReg]* %5130 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %7021, align 1
  %7022 = load i64, i64* %RBP.i, align 8
  %7023 = add i64 %7022, -16
  %7024 = add i64 %7020, 8
  store i64 %7024, i64* %3, align 8
  %7025 = inttoptr i64 %7023 to i64*
  %7026 = load i64, i64* %7025, align 8
  store i64 %7026, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %7027 = add i64 %7022, -200
  %7028 = add i64 %7020, 16
  store i64 %7028, i64* %3, align 8
  %7029 = load i64, i64* %5134, align 1
  %7030 = inttoptr i64 %7027 to i64*
  store i64 %7029, i64* %7030, align 8
  %7031 = load i64, i64* %3, align 8
  %7032 = bitcast %union.VectorReg* %.pre-phi to <2 x i32>*
  %7033 = load <2 x i32>, <2 x i32>* %7032, align 1
  %7034 = bitcast i64* %.pre-phi311 to <2 x i32>*
  %7035 = load <2 x i32>, <2 x i32>* %7034, align 1
  %7036 = extractelement <2 x i32> %7033, i32 0
  store i32 %7036, i32* %6906, align 1
  %7037 = extractelement <2 x i32> %7033, i32 1
  store i32 %7037, i32* %6908, align 1
  %7038 = extractelement <2 x i32> %7035, i32 0
  store i32 %7038, i32* %6909, align 1
  %7039 = extractelement <2 x i32> %7035, i32 1
  store i32 %7039, i32* %6911, align 1
  %7040 = add i64 %7031, -519886
  %7041 = add i64 %7031, 8
  %7042 = load i64, i64* %6, align 8
  %7043 = add i64 %7042, -8
  %7044 = inttoptr i64 %7043 to i64*
  store i64 %7041, i64* %7044, align 8
  store i64 %7043, i64* %6, align 8
  store i64 %7040, i64* %3, align 8
  %call2_4800c1 = tail call %struct.Memory* @ext_sqrt(%struct.State* nonnull %0, i64 %7040, %struct.Memory* %7014)
  %7045 = load i64, i64* %3, align 8
  %7046 = load i64, i64* bitcast (%G_0x723640_type* @G_0x723640 to i64*), align 8
  store i64 %7046, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %.cast197 = bitcast i64 %7046 to double
  %7047 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %7048 = fmul double %.cast197, %7047
  store double %7048, double* %.pre-phi309, align 1
  store i64 0, i64* %.pre-phi311, align 1
  %7049 = load double, double* %5133, align 1
  %7050 = fsub double %7049, %7048
  store double %7050, double* %5133, align 1
  %7051 = load i64, i64* %RBP.i, align 8
  %7052 = add i64 %7051, -200
  %7053 = add i64 %7045, 30
  store i64 %7053, i64* %3, align 8
  %7054 = inttoptr i64 %7052 to i64*
  %7055 = load i64, i64* %7054, align 8
  store i64 %7055, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %7056 = add i64 %7045, 34
  store i64 %7056, i64* %3, align 8
  %.cast198 = bitcast i64 %7055 to double
  %7057 = fcmp uno double %.cast198, %7050
  br i1 %7057, label %7058, label %7068

; <label>:7058:                                   ; preds = %block_4800ae
  %7059 = fadd double %.cast198, %7050
  %7060 = bitcast double %7059 to i64
  %7061 = and i64 %7060, 9221120237041090560
  %7062 = icmp eq i64 %7061, 9218868437227405312
  %7063 = and i64 %7060, 2251799813685247
  %7064 = icmp ne i64 %7063, 0
  %7065 = and i1 %7062, %7064
  br i1 %7065, label %7066, label %7074

; <label>:7066:                                   ; preds = %7058
  %7067 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7056, %struct.Memory* %call2_4800c1)
  %.pre286 = load i64, i64* %3, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit

; <label>:7068:                                   ; preds = %block_4800ae
  %7069 = fcmp ogt double %.cast198, %7050
  br i1 %7069, label %7074, label %7070

; <label>:7070:                                   ; preds = %7068
  %7071 = fcmp olt double %.cast198, %7050
  br i1 %7071, label %7074, label %7072

; <label>:7072:                                   ; preds = %7070
  %7073 = fcmp oeq double %.cast198, %7050
  br i1 %7073, label %7074, label %7078

; <label>:7074:                                   ; preds = %7072, %7070, %7068, %7058
  %7075 = phi i8 [ 0, %7068 ], [ 0, %7070 ], [ 1, %7072 ], [ 1, %7058 ]
  %7076 = phi i8 [ 0, %7068 ], [ 0, %7070 ], [ 0, %7072 ], [ 1, %7058 ]
  %7077 = phi i8 [ 0, %7068 ], [ 1, %7070 ], [ 0, %7072 ], [ 1, %7058 ]
  store i8 %7075, i8* %30, align 1
  store i8 %7076, i8* %21, align 1
  store i8 %7077, i8* %14, align 1
  br label %7078

; <label>:7078:                                   ; preds = %7074, %7072
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit

routine_ucomisd__xmm0___xmm1.exit:                ; preds = %7078, %7066
  %7079 = phi i64 [ %.pre286, %7066 ], [ %7056, %7078 ]
  %7080 = phi %struct.Memory* [ %7067, %7066 ], [ %call2_4800c1, %7078 ]
  %7081 = load i8, i8* %14, align 1
  %7082 = icmp ne i8 %7081, 0
  %.v470 = select i1 %7082, i64 55, i64 6
  %7083 = add i64 %7079, %.v470
  store i64 %7083, i64* %3, align 8
  %cmpBr_4800e8 = icmp eq i8 %7081, 1
  br i1 %cmpBr_4800e8, label %block_.L_48011f, label %block_.L_4800ee

block_.L_4800ee:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit, %routine_ucomisd_MINUS0x10__rbp____xmm0.exit, %block_48009b
  %7084 = phi i64 [ %7015, %routine_ucomisd_MINUS0x10__rbp____xmm0.exit ], [ %7083, %routine_ucomisd__xmm0___xmm1.exit ], [ %6980, %block_48009b ]
  %MEMORY.116 = phi %struct.Memory* [ %7014, %routine_ucomisd_MINUS0x10__rbp____xmm0.exit ], [ %7080, %routine_ucomisd__xmm0___xmm1.exit ], [ %6971, %block_48009b ]
  %7085 = load double, double* bitcast (%G_0x723640_type* @G_0x723640 to double*), align 8
  %7086 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %7087 = fmul double %7085, %7086
  store double %7087, double* %5133, align 1
  store i64 0, i64* %5135, align 1
  %7088 = load i64, i64* %RBP.i, align 8
  %7089 = add i64 %7088, -20
  %7090 = add i64 %7084, 23
  store i64 %7090, i64* %3, align 8
  %7091 = inttoptr i64 %7089 to i32*
  %7092 = load i32, i32* %7091, align 4
  %7093 = sitofp i32 %7092 to double
  store double %7093, double* %.pre-phi309, align 1
  %7094 = fdiv double %7087, %7093
  %.cast193 = bitcast double %7094 to <2 x i32>
  %7095 = fptrunc double %7094 to float
  %7096 = bitcast [32 x %union.VectorReg]* %5130 to float*
  store float %7095, float* %7096, align 1
  %7097 = extractelement <2 x i32> %.cast193, i32 1
  store i32 %7097, i32* %6908, align 1
  store i32 0, i32* %6909, align 1
  store i32 0, i32* %6911, align 1
  %7098 = bitcast [32 x %union.VectorReg]* %5130 to <2 x float>*
  %7099 = load <2 x float>, <2 x float>* %7098, align 1
  %7100 = extractelement <2 x float> %7099, i32 0
  %7101 = fpext float %7100 to double
  store double %7101, double* %5133, align 1
  store double %7101, double* bitcast (%G_0x6ccae0_type* @G_0x6ccae0 to double*), align 8
  %7102 = add i64 %7084, 147
  store i64 %7102, i64* %3, align 8
  br label %block_.L_480181

block_.L_48011f:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit
  %7103 = add i64 %7083, ptrtoint (%G_0x31721__rip__type* @G_0x31721__rip_ to i64)
  %7104 = add i64 %7083, 8
  store i64 %7104, i64* %3, align 8
  %7105 = inttoptr i64 %7103 to double*
  %7106 = load double, double* %7105, align 8
  %7107 = load double, double* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to double*), align 8
  %7108 = fmul double %7106, %7107
  %7109 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %7110 = fmul double %7108, %7109
  store double %7110, double* %5133, align 1
  store i64 0, i64* %5135, align 1
  %7111 = load i64, i64* %RBP.i, align 8
  %7112 = add i64 %7111, -16
  %7113 = add i64 %7083, 31
  store i64 %7113, i64* %3, align 8
  %7114 = inttoptr i64 %7112 to i64*
  %7115 = load i64, i64* %7114, align 8
  store i64 %7115, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %7116 = add i64 %7111, -208
  %7117 = add i64 %7083, 39
  store i64 %7117, i64* %3, align 8
  %7118 = inttoptr i64 %7116 to double*
  store double %7110, double* %7118, align 8
  %7119 = load i64, i64* %3, align 8
  %7120 = load <2 x i32>, <2 x i32>* %7032, align 1
  %7121 = load <2 x i32>, <2 x i32>* %7034, align 1
  %7122 = extractelement <2 x i32> %7120, i32 0
  store i32 %7122, i32* %6906, align 1
  %7123 = extractelement <2 x i32> %7120, i32 1
  store i32 %7123, i32* %6908, align 1
  %7124 = extractelement <2 x i32> %7121, i32 0
  store i32 %7124, i32* %6909, align 1
  %7125 = extractelement <2 x i32> %7121, i32 1
  store i32 %7125, i32* %6911, align 1
  %7126 = add i64 %7119, -520022
  %7127 = add i64 %7119, 8
  %7128 = load i64, i64* %6, align 8
  %7129 = add i64 %7128, -8
  %7130 = inttoptr i64 %7129 to i64*
  store i64 %7127, i64* %7130, align 8
  store i64 %7129, i64* %6, align 8
  store i64 %7126, i64* %3, align 8
  %call2_480149 = tail call %struct.Memory* @ext_sqrt(%struct.State* nonnull %0, i64 %7126, %struct.Memory* %7080)
  %7131 = load i64, i64* %3, align 8
  %7132 = load i64, i64* bitcast (%G_0x723640_type* @G_0x723640 to i64*), align 8
  store i64 %7132, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %.cast200 = bitcast i64 %7132 to double
  %7133 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %7134 = fmul double %.cast200, %7133
  store double %7134, double* %.pre-phi309, align 1
  store i64 0, i64* %.pre-phi311, align 1
  %7135 = load double, double* %5133, align 1
  %7136 = bitcast i64* %5135 to <2 x i32>*
  %7137 = load <2 x i32>, <2 x i32>* %7136, align 1
  %7138 = fsub double %7135, %7134
  store double %7138, double* %5133, align 1
  %7139 = load i64, i64* %RBP.i, align 8
  %7140 = add i64 %7139, -208
  %7141 = add i64 %7131, 30
  store i64 %7141, i64* %3, align 8
  %7142 = inttoptr i64 %7140 to i64*
  %7143 = load i64, i64* %7142, align 8
  store i64 %7143, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %.cast201 = bitcast i64 %7143 to double
  %7144 = fdiv double %.cast201, %7138
  store double %7144, double* %.pre-phi309, align 1
  store i64 0, i64* %.pre-phi311, align 1
  %7145 = bitcast double %7138 to <2 x i32>
  %7146 = fptrunc double %7144 to float
  %7147 = bitcast [32 x %union.VectorReg]* %5130 to float*
  store float %7146, float* %7147, align 1
  %7148 = extractelement <2 x i32> %7145, i32 1
  store i32 %7148, i32* %6908, align 1
  %7149 = extractelement <2 x i32> %7137, i32 0
  store i32 %7149, i32* %6909, align 1
  %7150 = extractelement <2 x i32> %7137, i32 1
  store i32 %7150, i32* %6911, align 1
  %7151 = bitcast [32 x %union.VectorReg]* %5130 to <2 x float>*
  %7152 = load <2 x float>, <2 x float>* %7151, align 1
  %7153 = extractelement <2 x float> %7152, i32 0
  %7154 = fpext float %7153 to double
  store double %7154, double* %5133, align 1
  %7155 = add i64 %7131, 51
  store i64 %7155, i64* %3, align 8
  store double %7154, double* bitcast (%G_0x6ccae0_type* @G_0x6ccae0 to double*), align 8
  br label %block_.L_480181

block_.L_480181:                                  ; preds = %block_.L_48011f, %block_.L_4800ee
  %.in321 = phi double [ %7101, %block_.L_4800ee ], [ %7154, %block_.L_48011f ]
  %7156 = phi i64 [ %7102, %block_.L_4800ee ], [ %7155, %block_.L_48011f ]
  %MEMORY.117 = phi %struct.Memory* [ %MEMORY.116, %block_.L_4800ee ], [ %call2_480149, %block_.L_48011f ]
  %7157 = bitcast [32 x %union.VectorReg]* %5130 to double*
  store double %.in321, double* %7157, align 1
  store double 0.000000e+00, double* %5136, align 1
  %7158 = add i64 %7156, 1295
  %7159 = add i64 %7156, 14
  %7160 = load i64, i64* %6, align 8
  %7161 = add i64 %7160, -8
  %7162 = inttoptr i64 %7161 to i64*
  store i64 %7159, i64* %7162, align 8
  store i64 %7161, i64* %6, align 8
  store i64 %7158, i64* %3, align 8
  %call2_48018a = tail call %struct.Memory* @sub_480690.Qstep2QP(%struct.State* nonnull %0, i64 %7158, %struct.Memory* %MEMORY.117)
  %7163 = load i32, i32* %EAX.i1364, align 4
  %7164 = load i64, i64* %3, align 8
  store i32 %7163, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %7165 = load i32, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  %7166 = load i32, i32* bitcast (%G_0x70fce4_type* @G_0x70fce4 to i32*), align 8
  %7167 = add i32 %7166, %7165
  %7168 = zext i32 %7167 to i64
  store i64 %7168, i64* %RAX.i1321, align 8
  %7169 = lshr i32 %7167, 31
  %7170 = sub i32 %7167, %7163
  %7171 = icmp ult i32 %7167, %7163
  %7172 = zext i1 %7171 to i8
  store i8 %7172, i8* %14, align 1
  %7173 = and i32 %7170, 255
  %7174 = tail call i32 @llvm.ctpop.i32(i32 %7173)
  %7175 = trunc i32 %7174 to i8
  %7176 = and i8 %7175, 1
  %7177 = xor i8 %7176, 1
  store i8 %7177, i8* %21, align 1
  %7178 = xor i32 %7163, %7167
  %7179 = xor i32 %7178, %7170
  %7180 = lshr i32 %7179, 4
  %7181 = trunc i32 %7180 to i8
  %7182 = and i8 %7181, 1
  store i8 %7182, i8* %27, align 1
  %7183 = icmp eq i32 %7170, 0
  %7184 = zext i1 %7183 to i8
  store i8 %7184, i8* %30, align 1
  %7185 = lshr i32 %7170, 31
  %7186 = trunc i32 %7185 to i8
  store i8 %7186, i8* %33, align 1
  %7187 = lshr i32 %7163, 31
  %7188 = xor i32 %7187, %7169
  %7189 = xor i32 %7185, %7169
  %7190 = add nuw nsw i32 %7189, %7188
  %7191 = icmp eq i32 %7190, 2
  %7192 = zext i1 %7191 to i8
  store i8 %7192, i8* %39, align 1
  %7193 = icmp ne i8 %7186, 0
  %7194 = xor i1 %7193, %7191
  %.v335 = select i1 %7194, i64 34, i64 59
  %7195 = add i64 %7164, %.v335
  %7196 = add i64 %7195, 7
  store i64 %7196, i64* %3, align 8
  br i1 %7194, label %block_4801b1, label %block_.L_4801ca

block_4801b1:                                     ; preds = %block_.L_480181
  %7197 = lshr i32 %7165, 31
  %7198 = xor i32 %7169, %7197
  %7199 = lshr i32 %7166, 31
  %7200 = xor i32 %7169, %7199
  %7201 = add nuw nsw i32 %7198, %7200
  %7202 = icmp eq i32 %7201, 2
  %7203 = zext i1 %7202 to i8
  %7204 = trunc i32 %7169 to i8
  %7205 = icmp eq i32 %7167, 0
  %7206 = zext i1 %7205 to i8
  %7207 = xor i32 %7166, %7165
  %7208 = xor i32 %7207, %7167
  %7209 = lshr i32 %7208, 4
  %7210 = trunc i32 %7209 to i8
  %7211 = and i8 %7210, 1
  %7212 = and i32 %7167, 255
  %7213 = tail call i32 @llvm.ctpop.i32(i32 %7212)
  %7214 = trunc i32 %7213 to i8
  %7215 = and i8 %7214, 1
  %7216 = xor i8 %7215, 1
  %7217 = icmp ult i32 %7167, %7165
  %7218 = icmp ult i32 %7167, %7166
  %7219 = or i1 %7217, %7218
  %7220 = zext i1 %7219 to i8
  store i64 %7168, i64* %RAX.i1321, align 8
  store i8 %7220, i8* %14, align 1
  store i8 %7216, i8* %21, align 1
  store i8 %7211, i8* %27, align 1
  store i8 %7206, i8* %30, align 1
  store i8 %7204, i8* %33, align 1
  store i8 %7203, i8* %39, align 1
  %7221 = load i64, i64* %RBP.i, align 8
  %7222 = add i64 %7221, -212
  %7223 = add i64 %7195, 20
  store i64 %7223, i64* %3, align 8
  %7224 = inttoptr i64 %7222 to i32*
  store i32 %7167, i32* %7224, align 4
  %7225 = load i64, i64* %3, align 8
  %7226 = add i64 %7225, 18
  store i64 %7226, i64* %3, align 8
  br label %block_.L_4801d7

block_.L_4801ca:                                  ; preds = %block_.L_480181
  %7227 = zext i32 %7163 to i64
  store i64 %7227, i64* %RAX.i1321, align 8
  %7228 = load i64, i64* %RBP.i, align 8
  %7229 = add i64 %7228, -212
  %7230 = add i64 %7195, 13
  store i64 %7230, i64* %3, align 8
  %7231 = inttoptr i64 %7229 to i32*
  store i32 %7163, i32* %7231, align 4
  %.pre287 = load i64, i64* %3, align 8
  br label %block_.L_4801d7

block_.L_4801d7:                                  ; preds = %block_.L_4801ca, %block_4801b1
  %7232 = phi i64 [ %.pre287, %block_.L_4801ca ], [ %7226, %block_4801b1 ]
  %7233 = load i64, i64* %RBP.i, align 8
  %7234 = add i64 %7233, -212
  %7235 = add i64 %7232, 6
  store i64 %7235, i64* %3, align 8
  %7236 = inttoptr i64 %7234 to i32*
  %7237 = load i32, i32* %7236, align 4
  %7238 = zext i32 %7237 to i64
  store i64 %7238, i64* %RAX.i1321, align 8
  store i32 %7237, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %7239 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %7239, i64* %RCX.i1346, align 8
  %7240 = add i64 %7239, 3248
  %7241 = add i64 %7232, 27
  store i64 %7241, i64* %3, align 8
  %7242 = inttoptr i64 %7240 to i32*
  %7243 = load i32, i32* %7242, align 4
  %7244 = load i32, i32* bitcast (%G_0x6f8ed8_type* @G_0x6f8ed8 to i32*), align 8
  %7245 = sub i32 %7243, %7244
  %7246 = icmp ult i32 %7243, %7244
  %7247 = zext i1 %7246 to i8
  store i8 %7247, i8* %14, align 1
  %7248 = and i32 %7245, 255
  %7249 = tail call i32 @llvm.ctpop.i32(i32 %7248)
  %7250 = trunc i32 %7249 to i8
  %7251 = and i8 %7250, 1
  %7252 = xor i8 %7251, 1
  store i8 %7252, i8* %21, align 1
  %7253 = xor i32 %7244, %7243
  %7254 = xor i32 %7253, %7245
  %7255 = lshr i32 %7254, 4
  %7256 = trunc i32 %7255 to i8
  %7257 = and i8 %7256, 1
  store i8 %7257, i8* %27, align 1
  %7258 = icmp eq i32 %7245, 0
  %7259 = zext i1 %7258 to i8
  store i8 %7259, i8* %30, align 1
  %7260 = lshr i32 %7245, 31
  %7261 = trunc i32 %7260 to i8
  store i8 %7261, i8* %33, align 1
  %7262 = lshr i32 %7243, 31
  %7263 = lshr i32 %7244, 31
  %7264 = xor i32 %7263, %7262
  %7265 = xor i32 %7260, %7262
  %7266 = add nuw nsw i32 %7265, %7264
  %7267 = icmp eq i32 %7266, 2
  %7268 = zext i1 %7267 to i8
  store i8 %7268, i8* %39, align 1
  %7269 = icmp ne i8 %7261, 0
  %7270 = xor i1 %7269, %7267
  %.v336 = select i1 %7270, i64 115, i64 40
  %7271 = add i64 %7232, %.v336
  %7272 = load i32, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %7273 = zext i32 %7272 to i64
  store i64 %7273, i64* %RAX.i1321, align 8
  %7274 = add i64 %7271, 10
  store i64 %7274, i64* %3, align 8
  br i1 %7270, label %block_.L_48024a, label %block_4801ff

block_4801ff:                                     ; preds = %block_.L_4801d7
  %7275 = add i32 %7272, 6
  %7276 = zext i32 %7275 to i64
  store i64 %7276, i64* %RAX.i1321, align 8
  %7277 = lshr i32 %7275, 31
  %7278 = sub i32 %7275, %7237
  %7279 = icmp ult i32 %7275, %7237
  %7280 = zext i1 %7279 to i8
  store i8 %7280, i8* %14, align 1
  %7281 = and i32 %7278, 255
  %7282 = tail call i32 @llvm.ctpop.i32(i32 %7281)
  %7283 = trunc i32 %7282 to i8
  %7284 = and i8 %7283, 1
  %7285 = xor i8 %7284, 1
  store i8 %7285, i8* %21, align 1
  %7286 = xor i32 %7237, %7275
  %7287 = xor i32 %7286, %7278
  %7288 = lshr i32 %7287, 4
  %7289 = trunc i32 %7288 to i8
  %7290 = and i8 %7289, 1
  store i8 %7290, i8* %27, align 1
  %7291 = icmp eq i32 %7278, 0
  %7292 = zext i1 %7291 to i8
  store i8 %7292, i8* %30, align 1
  %7293 = lshr i32 %7278, 31
  %7294 = trunc i32 %7293 to i8
  store i8 %7294, i8* %33, align 1
  %7295 = lshr i32 %7237, 31
  %7296 = xor i32 %7295, %7277
  %7297 = xor i32 %7293, %7277
  %7298 = add nuw nsw i32 %7297, %7296
  %7299 = icmp eq i32 %7298, 2
  %7300 = zext i1 %7299 to i8
  store i8 %7300, i8* %39, align 1
  %7301 = icmp ne i8 %7294, 0
  %7302 = xor i1 %7301, %7299
  %.v337 = select i1 %7302, i64 23, i64 44
  %7303 = add i64 %7271, %.v337
  %7304 = add i64 %7303, 7
  store i64 %7304, i64* %3, align 8
  br i1 %7302, label %block_480216, label %block_.L_48022b

block_480216:                                     ; preds = %block_4801ff
  %7305 = lshr i32 %7272, 31
  %7306 = xor i32 %7277, %7305
  %7307 = add nuw nsw i32 %7306, %7277
  %7308 = icmp eq i32 %7307, 2
  %7309 = zext i1 %7308 to i8
  %7310 = trunc i32 %7277 to i8
  %7311 = icmp eq i32 %7275, 0
  %7312 = zext i1 %7311 to i8
  %7313 = xor i32 %7275, %7272
  %7314 = lshr i32 %7313, 4
  %7315 = trunc i32 %7314 to i8
  %7316 = and i8 %7315, 1
  %7317 = and i32 %7275, 255
  %7318 = tail call i32 @llvm.ctpop.i32(i32 %7317)
  %7319 = trunc i32 %7318 to i8
  %7320 = and i8 %7319, 1
  %7321 = xor i8 %7320, 1
  %7322 = icmp ugt i32 %7272, -7
  %7323 = zext i1 %7322 to i8
  store i64 %7276, i64* %RAX.i1321, align 8
  store i8 %7323, i8* %14, align 1
  store i8 %7321, i8* %21, align 1
  store i8 %7316, i8* %27, align 1
  store i8 %7312, i8* %30, align 1
  store i8 %7310, i8* %33, align 1
  store i8 %7309, i8* %39, align 1
  %7324 = add i64 %7233, -216
  %7325 = add i64 %7303, 16
  store i64 %7325, i64* %3, align 8
  %7326 = inttoptr i64 %7324 to i32*
  store i32 %7275, i32* %7326, align 4
  %7327 = load i64, i64* %3, align 8
  %7328 = add i64 %7327, 18
  store i64 %7328, i64* %3, align 8
  br label %block_.L_480238

block_.L_48022b:                                  ; preds = %block_4801ff
  store i64 %7238, i64* %RAX.i1321, align 8
  %7329 = add i64 %7233, -216
  %7330 = add i64 %7303, 13
  store i64 %7330, i64* %3, align 8
  %7331 = inttoptr i64 %7329 to i32*
  store i32 %7237, i32* %7331, align 4
  %.pre288 = load i64, i64* %3, align 8
  br label %block_.L_480238

block_.L_480238:                                  ; preds = %block_.L_48022b, %block_480216
  %7332 = phi i64 [ %.pre288, %block_.L_48022b ], [ %7328, %block_480216 ]
  %7333 = load i64, i64* %RBP.i, align 8
  %7334 = add i64 %7333, -216
  %7335 = add i64 %7332, 6
  store i64 %7335, i64* %3, align 8
  %7336 = inttoptr i64 %7334 to i32*
  %7337 = load i32, i32* %7336, align 4
  %7338 = zext i32 %7337 to i64
  store i64 %7338, i64* %RAX.i1321, align 8
  store i32 %7337, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %7339 = add i64 %7332, 88
  store i64 %7339, i64* %3, align 8
  br label %block_.L_480290

block_.L_48024a:                                  ; preds = %block_.L_4801d7
  %7340 = add i32 %7272, 3
  %7341 = zext i32 %7340 to i64
  store i64 %7341, i64* %RAX.i1321, align 8
  %7342 = lshr i32 %7340, 31
  %7343 = sub i32 %7340, %7237
  %7344 = icmp ult i32 %7340, %7237
  %7345 = zext i1 %7344 to i8
  store i8 %7345, i8* %14, align 1
  %7346 = and i32 %7343, 255
  %7347 = tail call i32 @llvm.ctpop.i32(i32 %7346)
  %7348 = trunc i32 %7347 to i8
  %7349 = and i8 %7348, 1
  %7350 = xor i8 %7349, 1
  store i8 %7350, i8* %21, align 1
  %7351 = xor i32 %7237, %7340
  %7352 = xor i32 %7351, %7343
  %7353 = lshr i32 %7352, 4
  %7354 = trunc i32 %7353 to i8
  %7355 = and i8 %7354, 1
  store i8 %7355, i8* %27, align 1
  %7356 = icmp eq i32 %7343, 0
  %7357 = zext i1 %7356 to i8
  store i8 %7357, i8* %30, align 1
  %7358 = lshr i32 %7343, 31
  %7359 = trunc i32 %7358 to i8
  store i8 %7359, i8* %33, align 1
  %7360 = lshr i32 %7237, 31
  %7361 = xor i32 %7360, %7342
  %7362 = xor i32 %7358, %7342
  %7363 = add nuw nsw i32 %7362, %7361
  %7364 = icmp eq i32 %7363, 2
  %7365 = zext i1 %7364 to i8
  store i8 %7365, i8* %39, align 1
  %7366 = icmp ne i8 %7359, 0
  %7367 = xor i1 %7366, %7364
  %.v354 = select i1 %7367, i64 23, i64 44
  %7368 = add i64 %7271, %.v354
  %7369 = add i64 %7368, 7
  store i64 %7369, i64* %3, align 8
  br i1 %7367, label %block_480261, label %block_.L_480276

block_480261:                                     ; preds = %block_.L_48024a
  %7370 = lshr i32 %7272, 31
  %7371 = xor i32 %7342, %7370
  %7372 = add nuw nsw i32 %7371, %7342
  %7373 = icmp eq i32 %7372, 2
  %7374 = zext i1 %7373 to i8
  %7375 = trunc i32 %7342 to i8
  %7376 = icmp eq i32 %7340, 0
  %7377 = zext i1 %7376 to i8
  %7378 = xor i32 %7340, %7272
  %7379 = lshr i32 %7378, 4
  %7380 = trunc i32 %7379 to i8
  %7381 = and i8 %7380, 1
  %7382 = and i32 %7340, 255
  %7383 = tail call i32 @llvm.ctpop.i32(i32 %7382)
  %7384 = trunc i32 %7383 to i8
  %7385 = and i8 %7384, 1
  %7386 = xor i8 %7385, 1
  %7387 = icmp ugt i32 %7272, -4
  %7388 = zext i1 %7387 to i8
  store i64 %7341, i64* %RAX.i1321, align 8
  store i8 %7388, i8* %14, align 1
  store i8 %7386, i8* %21, align 1
  store i8 %7381, i8* %27, align 1
  store i8 %7377, i8* %30, align 1
  store i8 %7375, i8* %33, align 1
  store i8 %7374, i8* %39, align 1
  %7389 = add i64 %7233, -220
  %7390 = add i64 %7368, 16
  store i64 %7390, i64* %3, align 8
  %7391 = inttoptr i64 %7389 to i32*
  store i32 %7340, i32* %7391, align 4
  %7392 = load i64, i64* %3, align 8
  %7393 = add i64 %7392, 18
  store i64 %7393, i64* %3, align 8
  br label %block_.L_480283

block_.L_480276:                                  ; preds = %block_.L_48024a
  store i64 %7238, i64* %RAX.i1321, align 8
  %7394 = add i64 %7233, -220
  %7395 = add i64 %7368, 13
  store i64 %7395, i64* %3, align 8
  %7396 = inttoptr i64 %7394 to i32*
  store i32 %7237, i32* %7396, align 4
  %.pre289 = load i64, i64* %3, align 8
  br label %block_.L_480283

block_.L_480283:                                  ; preds = %block_.L_480276, %block_480261
  %7397 = phi i64 [ %.pre289, %block_.L_480276 ], [ %7393, %block_480261 ]
  %7398 = load i64, i64* %RBP.i, align 8
  %7399 = add i64 %7398, -220
  %7400 = add i64 %7397, 6
  store i64 %7400, i64* %3, align 8
  %7401 = inttoptr i64 %7399 to i32*
  %7402 = load i32, i32* %7401, align 4
  %7403 = zext i32 %7402 to i64
  store i64 %7403, i64* %RAX.i1321, align 8
  %7404 = add i64 %7397, 13
  store i64 %7404, i64* %3, align 8
  store i32 %7402, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_480290

block_.L_480290:                                  ; preds = %block_.L_480283, %block_.L_480238
  %7405 = phi i64 [ %7398, %block_.L_480283 ], [ %7333, %block_.L_480238 ]
  %7406 = phi i32 [ %7402, %block_.L_480283 ], [ %7337, %block_.L_480238 ]
  %7407 = phi i64 [ %7404, %block_.L_480283 ], [ %7339, %block_.L_480238 ]
  %7408 = zext i32 %7406 to i64
  store i64 %7408, i64* %RAX.i1321, align 8
  %7409 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %7410 = sub i32 %7406, %7409
  %7411 = icmp ult i32 %7406, %7409
  %7412 = zext i1 %7411 to i8
  store i8 %7412, i8* %14, align 1
  %7413 = and i32 %7410, 255
  %7414 = tail call i32 @llvm.ctpop.i32(i32 %7413)
  %7415 = trunc i32 %7414 to i8
  %7416 = and i8 %7415, 1
  %7417 = xor i8 %7416, 1
  store i8 %7417, i8* %21, align 1
  %7418 = xor i32 %7409, %7406
  %7419 = xor i32 %7418, %7410
  %7420 = lshr i32 %7419, 4
  %7421 = trunc i32 %7420 to i8
  %7422 = and i8 %7421, 1
  store i8 %7422, i8* %27, align 1
  %7423 = icmp eq i32 %7410, 0
  %7424 = zext i1 %7423 to i8
  store i8 %7424, i8* %30, align 1
  %7425 = lshr i32 %7410, 31
  %7426 = trunc i32 %7425 to i8
  store i8 %7426, i8* %33, align 1
  %7427 = lshr i32 %7406, 31
  %7428 = lshr i32 %7409, 31
  %7429 = xor i32 %7428, %7427
  %7430 = xor i32 %7425, %7427
  %7431 = add nuw nsw i32 %7430, %7429
  %7432 = icmp eq i32 %7431, 2
  %7433 = zext i1 %7432 to i8
  store i8 %7433, i8* %39, align 1
  %7434 = icmp ne i8 %7426, 0
  %7435 = xor i1 %7434, %7432
  %.v338 = select i1 %7435, i64 20, i64 38
  %7436 = add i64 %7407, %.v338
  %7437 = add i64 %7436, 7
  store i64 %7437, i64* %3, align 8
  br i1 %7435, label %block_4802a4, label %block_.L_4802b6

block_4802a4:                                     ; preds = %block_.L_480290
  store i64 %7408, i64* %RAX.i1321, align 8
  %7438 = add i64 %7405, -224
  %7439 = add i64 %7436, 13
  store i64 %7439, i64* %3, align 8
  %7440 = inttoptr i64 %7438 to i32*
  store i32 %7406, i32* %7440, align 4
  %7441 = load i64, i64* %3, align 8
  %7442 = add i64 %7441, 18
  store i64 %7442, i64* %3, align 8
  br label %block_.L_4802c3

block_.L_4802b6:                                  ; preds = %block_.L_480290
  %7443 = zext i32 %7409 to i64
  store i64 %7443, i64* %RAX.i1321, align 8
  %7444 = add i64 %7405, -224
  %7445 = add i64 %7436, 13
  store i64 %7445, i64* %3, align 8
  %7446 = inttoptr i64 %7444 to i32*
  store i32 %7409, i32* %7446, align 4
  %.pre290 = load i64, i64* %3, align 8
  br label %block_.L_4802c3

block_.L_4802c3:                                  ; preds = %block_.L_4802b6, %block_4802a4
  %7447 = phi i64 [ %.pre290, %block_.L_4802b6 ], [ %7442, %block_4802a4 ]
  %7448 = load i64, i64* %RBP.i, align 8
  %7449 = add i64 %7448, -224
  %7450 = add i64 %7447, 6
  store i64 %7450, i64* %3, align 8
  %7451 = inttoptr i64 %7449 to i32*
  %7452 = load i32, i32* %7451, align 4
  store i32 %7452, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %7453 = load i32, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  %7454 = load i32, i32* bitcast (%G_0x70fce4_type* @G_0x70fce4 to i32*), align 8
  %7455 = sub i32 %7453, %7454
  %7456 = zext i32 %7455 to i64
  store i64 %7456, i64* %RAX.i1321, align 8
  %7457 = lshr i32 %7455, 31
  %7458 = lshr i32 %7453, 31
  %7459 = sub i32 %7455, %7452
  %7460 = icmp ult i32 %7455, %7452
  %7461 = zext i1 %7460 to i8
  store i8 %7461, i8* %14, align 1
  %7462 = and i32 %7459, 255
  %7463 = tail call i32 @llvm.ctpop.i32(i32 %7462)
  %7464 = trunc i32 %7463 to i8
  %7465 = and i8 %7464, 1
  %7466 = xor i8 %7465, 1
  store i8 %7466, i8* %21, align 1
  %7467 = xor i32 %7452, %7455
  %7468 = xor i32 %7467, %7459
  %7469 = lshr i32 %7468, 4
  %7470 = trunc i32 %7469 to i8
  %7471 = and i8 %7470, 1
  store i8 %7471, i8* %27, align 1
  %7472 = icmp eq i32 %7459, 0
  %7473 = zext i1 %7472 to i8
  store i8 %7473, i8* %30, align 1
  %7474 = lshr i32 %7459, 31
  %7475 = trunc i32 %7474 to i8
  store i8 %7475, i8* %33, align 1
  %7476 = lshr i32 %7452, 31
  %7477 = xor i32 %7476, %7457
  %7478 = xor i32 %7474, %7457
  %7479 = add nuw nsw i32 %7478, %7477
  %7480 = icmp eq i32 %7479, 2
  %7481 = zext i1 %7480 to i8
  store i8 %7481, i8* %39, align 1
  %7482 = icmp ne i8 %7475, 0
  %7483 = xor i1 %7482, %7480
  %.v339 = select i1 %7483, i64 40, i64 58
  %7484 = add i64 %7447, %.v339
  %7485 = add i64 %7484, 7
  store i64 %7485, i64* %3, align 8
  br i1 %7483, label %block_4802eb, label %block_.L_4802fd

block_4802eb:                                     ; preds = %block_.L_4802c3
  %7486 = zext i32 %7452 to i64
  store i64 %7486, i64* %RAX.i1321, align 8
  %7487 = add i64 %7448, -228
  %7488 = add i64 %7484, 13
  store i64 %7488, i64* %3, align 8
  %7489 = inttoptr i64 %7487 to i32*
  store i32 %7452, i32* %7489, align 4
  %7490 = load i64, i64* %3, align 8
  %7491 = add i64 %7490, 25
  store i64 %7491, i64* %3, align 8
  br label %block_.L_480311

block_.L_4802fd:                                  ; preds = %block_.L_4802c3
  %7492 = xor i32 %7457, %7458
  %7493 = lshr i32 %7454, 31
  %7494 = xor i32 %7493, %7458
  %7495 = add nuw nsw i32 %7492, %7494
  %7496 = icmp eq i32 %7495, 2
  %7497 = zext i1 %7496 to i8
  %7498 = trunc i32 %7457 to i8
  %7499 = icmp eq i32 %7455, 0
  %7500 = zext i1 %7499 to i8
  %7501 = xor i32 %7454, %7453
  %7502 = xor i32 %7501, %7455
  %7503 = lshr i32 %7502, 4
  %7504 = trunc i32 %7503 to i8
  %7505 = and i8 %7504, 1
  %7506 = and i32 %7455, 255
  %7507 = tail call i32 @llvm.ctpop.i32(i32 %7506)
  %7508 = trunc i32 %7507 to i8
  %7509 = and i8 %7508, 1
  %7510 = xor i8 %7509, 1
  %7511 = icmp ult i32 %7453, %7454
  %7512 = zext i1 %7511 to i8
  store i64 %7456, i64* %RAX.i1321, align 8
  store i8 %7512, i8* %14, align 1
  store i8 %7510, i8* %21, align 1
  store i8 %7505, i8* %27, align 1
  store i8 %7500, i8* %30, align 1
  store i8 %7498, i8* %33, align 1
  store i8 %7497, i8* %39, align 1
  %7513 = add i64 %7448, -228
  %7514 = add i64 %7484, 20
  store i64 %7514, i64* %3, align 8
  %7515 = inttoptr i64 %7513 to i32*
  store i32 %7455, i32* %7515, align 4
  %.pre291 = load i64, i64* %3, align 8
  br label %block_.L_480311

block_.L_480311:                                  ; preds = %block_.L_4802fd, %block_4802eb
  %7516 = phi i64 [ %.pre291, %block_.L_4802fd ], [ %7491, %block_4802eb ]
  %7517 = load i64, i64* %RBP.i, align 8
  %7518 = add i64 %7517, -228
  %7519 = add i64 %7516, 6
  store i64 %7519, i64* %3, align 8
  %7520 = inttoptr i64 %7518 to i32*
  %7521 = load i32, i32* %7520, align 4
  %7522 = zext i32 %7521 to i64
  store i64 %7522, i64* %RAX.i1321, align 8
  store i32 %7521, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %7523 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %7523, i64* %RCX.i1346, align 8
  %7524 = add i64 %7523, 3248
  %7525 = add i64 %7516, 27
  store i64 %7525, i64* %3, align 8
  %7526 = inttoptr i64 %7524 to i32*
  %7527 = load i32, i32* %7526, align 4
  %7528 = load i32, i32* bitcast (%G_0x6f8ed8_type* @G_0x6f8ed8 to i32*), align 8
  %7529 = sub i32 %7527, %7528
  %7530 = icmp ult i32 %7527, %7528
  %7531 = zext i1 %7530 to i8
  store i8 %7531, i8* %14, align 1
  %7532 = and i32 %7529, 255
  %7533 = tail call i32 @llvm.ctpop.i32(i32 %7532)
  %7534 = trunc i32 %7533 to i8
  %7535 = and i8 %7534, 1
  %7536 = xor i8 %7535, 1
  store i8 %7536, i8* %21, align 1
  %7537 = xor i32 %7528, %7527
  %7538 = xor i32 %7537, %7529
  %7539 = lshr i32 %7538, 4
  %7540 = trunc i32 %7539 to i8
  %7541 = and i8 %7540, 1
  store i8 %7541, i8* %27, align 1
  %7542 = icmp eq i32 %7529, 0
  %7543 = zext i1 %7542 to i8
  store i8 %7543, i8* %30, align 1
  %7544 = lshr i32 %7529, 31
  %7545 = trunc i32 %7544 to i8
  store i8 %7545, i8* %33, align 1
  %7546 = lshr i32 %7527, 31
  %7547 = lshr i32 %7528, 31
  %7548 = xor i32 %7547, %7546
  %7549 = xor i32 %7544, %7546
  %7550 = add nuw nsw i32 %7549, %7548
  %7551 = icmp eq i32 %7550, 2
  %7552 = zext i1 %7551 to i8
  store i8 %7552, i8* %39, align 1
  %7553 = icmp ne i8 %7545, 0
  %7554 = xor i1 %7553, %7551
  %.v340 = select i1 %7554, i64 115, i64 40
  %7555 = add i64 %7516, %.v340
  %7556 = load i32, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %7557 = zext i32 %7556 to i64
  store i64 %7557, i64* %RAX.i1321, align 8
  %7558 = add i64 %7555, 10
  store i64 %7558, i64* %3, align 8
  br i1 %7554, label %block_.L_480384, label %block_480339

block_480339:                                     ; preds = %block_.L_480311
  %7559 = add i32 %7556, -6
  %7560 = zext i32 %7559 to i64
  store i64 %7560, i64* %RAX.i1321, align 8
  %7561 = lshr i32 %7559, 31
  %7562 = lshr i32 %7556, 31
  %7563 = sub i32 %7559, %7521
  %7564 = icmp ult i32 %7559, %7521
  %7565 = zext i1 %7564 to i8
  store i8 %7565, i8* %14, align 1
  %7566 = and i32 %7563, 255
  %7567 = tail call i32 @llvm.ctpop.i32(i32 %7566)
  %7568 = trunc i32 %7567 to i8
  %7569 = and i8 %7568, 1
  %7570 = xor i8 %7569, 1
  store i8 %7570, i8* %21, align 1
  %7571 = xor i32 %7521, %7559
  %7572 = xor i32 %7571, %7563
  %7573 = lshr i32 %7572, 4
  %7574 = trunc i32 %7573 to i8
  %7575 = and i8 %7574, 1
  store i8 %7575, i8* %27, align 1
  %7576 = icmp eq i32 %7563, 0
  %7577 = zext i1 %7576 to i8
  store i8 %7577, i8* %30, align 1
  %7578 = lshr i32 %7563, 31
  %7579 = trunc i32 %7578 to i8
  store i8 %7579, i8* %33, align 1
  %7580 = lshr i32 %7521, 31
  %7581 = xor i32 %7580, %7561
  %7582 = xor i32 %7578, %7561
  %7583 = add nuw nsw i32 %7582, %7581
  %7584 = icmp eq i32 %7583, 2
  %7585 = zext i1 %7584 to i8
  store i8 %7585, i8* %39, align 1
  %7586 = icmp ne i8 %7579, 0
  %7587 = xor i1 %7586, %7584
  %.v341 = select i1 %7587, i64 23, i64 41
  %7588 = add i64 %7555, %.v341
  %7589 = add i64 %7588, 7
  store i64 %7589, i64* %3, align 8
  br i1 %7587, label %block_480350, label %block_.L_480362

block_480350:                                     ; preds = %block_480339
  store i64 %7522, i64* %RAX.i1321, align 8
  %7590 = add i64 %7517, -232
  %7591 = add i64 %7588, 13
  store i64 %7591, i64* %3, align 8
  %7592 = inttoptr i64 %7590 to i32*
  store i32 %7521, i32* %7592, align 4
  %7593 = load i64, i64* %3, align 8
  %7594 = add i64 %7593, 21
  store i64 %7594, i64* %3, align 8
  br label %block_.L_480372

block_.L_480362:                                  ; preds = %block_480339
  %7595 = xor i32 %7561, %7562
  %7596 = add nuw nsw i32 %7595, %7562
  %7597 = icmp eq i32 %7596, 2
  %7598 = zext i1 %7597 to i8
  %7599 = trunc i32 %7561 to i8
  %7600 = icmp eq i32 %7559, 0
  %7601 = zext i1 %7600 to i8
  %7602 = xor i32 %7559, %7556
  %7603 = lshr i32 %7602, 4
  %7604 = trunc i32 %7603 to i8
  %7605 = and i8 %7604, 1
  %7606 = and i32 %7559, 255
  %7607 = tail call i32 @llvm.ctpop.i32(i32 %7606)
  %7608 = trunc i32 %7607 to i8
  %7609 = and i8 %7608, 1
  %7610 = xor i8 %7609, 1
  %7611 = icmp ult i32 %7556, 6
  %7612 = zext i1 %7611 to i8
  store i64 %7560, i64* %RAX.i1321, align 8
  store i8 %7612, i8* %14, align 1
  store i8 %7610, i8* %21, align 1
  store i8 %7605, i8* %27, align 1
  store i8 %7601, i8* %30, align 1
  store i8 %7599, i8* %33, align 1
  store i8 %7598, i8* %39, align 1
  %7613 = add i64 %7517, -232
  %7614 = add i64 %7588, 16
  store i64 %7614, i64* %3, align 8
  %7615 = inttoptr i64 %7613 to i32*
  store i32 %7559, i32* %7615, align 4
  %.pre292 = load i64, i64* %3, align 8
  br label %block_.L_480372

block_.L_480372:                                  ; preds = %block_.L_480362, %block_480350
  %7616 = phi i64 [ %.pre292, %block_.L_480362 ], [ %7594, %block_480350 ]
  %7617 = load i64, i64* %RBP.i, align 8
  %7618 = add i64 %7617, -232
  %7619 = add i64 %7616, 6
  store i64 %7619, i64* %3, align 8
  %7620 = inttoptr i64 %7618 to i32*
  %7621 = load i32, i32* %7620, align 4
  %7622 = zext i32 %7621 to i64
  store i64 %7622, i64* %RAX.i1321, align 8
  store i32 %7621, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %7623 = add i64 %7616, 88
  store i64 %7623, i64* %3, align 8
  br label %block_.L_4803ca

block_.L_480384:                                  ; preds = %block_.L_480311
  %7624 = add i32 %7556, -3
  %7625 = zext i32 %7624 to i64
  store i64 %7625, i64* %RAX.i1321, align 8
  %7626 = lshr i32 %7624, 31
  %7627 = lshr i32 %7556, 31
  %7628 = sub i32 %7624, %7521
  %7629 = icmp ult i32 %7624, %7521
  %7630 = zext i1 %7629 to i8
  store i8 %7630, i8* %14, align 1
  %7631 = and i32 %7628, 255
  %7632 = tail call i32 @llvm.ctpop.i32(i32 %7631)
  %7633 = trunc i32 %7632 to i8
  %7634 = and i8 %7633, 1
  %7635 = xor i8 %7634, 1
  store i8 %7635, i8* %21, align 1
  %7636 = xor i32 %7521, %7624
  %7637 = xor i32 %7636, %7628
  %7638 = lshr i32 %7637, 4
  %7639 = trunc i32 %7638 to i8
  %7640 = and i8 %7639, 1
  store i8 %7640, i8* %27, align 1
  %7641 = icmp eq i32 %7628, 0
  %7642 = zext i1 %7641 to i8
  store i8 %7642, i8* %30, align 1
  %7643 = lshr i32 %7628, 31
  %7644 = trunc i32 %7643 to i8
  store i8 %7644, i8* %33, align 1
  %7645 = lshr i32 %7521, 31
  %7646 = xor i32 %7645, %7626
  %7647 = xor i32 %7643, %7626
  %7648 = add nuw nsw i32 %7647, %7646
  %7649 = icmp eq i32 %7648, 2
  %7650 = zext i1 %7649 to i8
  store i8 %7650, i8* %39, align 1
  %7651 = icmp ne i8 %7644, 0
  %7652 = xor i1 %7651, %7649
  %.v353 = select i1 %7652, i64 23, i64 41
  %7653 = add i64 %7555, %.v353
  %7654 = add i64 %7653, 7
  store i64 %7654, i64* %3, align 8
  br i1 %7652, label %block_48039b, label %block_.L_4803ad

block_48039b:                                     ; preds = %block_.L_480384
  store i64 %7522, i64* %RAX.i1321, align 8
  %7655 = add i64 %7517, -236
  %7656 = add i64 %7653, 13
  store i64 %7656, i64* %3, align 8
  %7657 = inttoptr i64 %7655 to i32*
  store i32 %7521, i32* %7657, align 4
  %7658 = load i64, i64* %3, align 8
  %7659 = add i64 %7658, 21
  store i64 %7659, i64* %3, align 8
  br label %block_.L_4803bd

block_.L_4803ad:                                  ; preds = %block_.L_480384
  %7660 = xor i32 %7626, %7627
  %7661 = add nuw nsw i32 %7660, %7627
  %7662 = icmp eq i32 %7661, 2
  %7663 = zext i1 %7662 to i8
  %7664 = trunc i32 %7626 to i8
  %7665 = icmp eq i32 %7624, 0
  %7666 = zext i1 %7665 to i8
  %7667 = xor i32 %7624, %7556
  %7668 = lshr i32 %7667, 4
  %7669 = trunc i32 %7668 to i8
  %7670 = and i8 %7669, 1
  %7671 = and i32 %7624, 255
  %7672 = tail call i32 @llvm.ctpop.i32(i32 %7671)
  %7673 = trunc i32 %7672 to i8
  %7674 = and i8 %7673, 1
  %7675 = xor i8 %7674, 1
  %7676 = icmp ult i32 %7556, 3
  %7677 = zext i1 %7676 to i8
  store i64 %7625, i64* %RAX.i1321, align 8
  store i8 %7677, i8* %14, align 1
  store i8 %7675, i8* %21, align 1
  store i8 %7670, i8* %27, align 1
  store i8 %7666, i8* %30, align 1
  store i8 %7664, i8* %33, align 1
  store i8 %7663, i8* %39, align 1
  %7678 = add i64 %7517, -236
  %7679 = add i64 %7653, 16
  store i64 %7679, i64* %3, align 8
  %7680 = inttoptr i64 %7678 to i32*
  store i32 %7624, i32* %7680, align 4
  %.pre293 = load i64, i64* %3, align 8
  br label %block_.L_4803bd

block_.L_4803bd:                                  ; preds = %block_.L_4803ad, %block_48039b
  %7681 = phi i64 [ %.pre293, %block_.L_4803ad ], [ %7659, %block_48039b ]
  %7682 = load i64, i64* %RBP.i, align 8
  %7683 = add i64 %7682, -236
  %7684 = add i64 %7681, 6
  store i64 %7684, i64* %3, align 8
  %7685 = inttoptr i64 %7683 to i32*
  %7686 = load i32, i32* %7685, align 4
  %7687 = zext i32 %7686 to i64
  store i64 %7687, i64* %RAX.i1321, align 8
  %7688 = add i64 %7681, 13
  store i64 %7688, i64* %3, align 8
  store i32 %7686, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  br label %block_.L_4803ca

block_.L_4803ca:                                  ; preds = %block_.L_4803bd, %block_.L_480372
  %7689 = phi i64 [ %7682, %block_.L_4803bd ], [ %7617, %block_.L_480372 ]
  %7690 = phi i32 [ %7686, %block_.L_4803bd ], [ %7621, %block_.L_480372 ]
  %7691 = phi i64 [ %7688, %block_.L_4803bd ], [ %7623, %block_.L_480372 ]
  %7692 = load i32, i32* bitcast (%G_0x710364_type* @G_0x710364 to i32*), align 8
  %7693 = zext i32 %7692 to i64
  store i64 %7693, i64* %RAX.i1321, align 8
  %7694 = sub i32 %7692, %7690
  %7695 = icmp ult i32 %7692, %7690
  %7696 = zext i1 %7695 to i8
  store i8 %7696, i8* %14, align 1
  %7697 = and i32 %7694, 255
  %7698 = tail call i32 @llvm.ctpop.i32(i32 %7697)
  %7699 = trunc i32 %7698 to i8
  %7700 = and i8 %7699, 1
  %7701 = xor i8 %7700, 1
  store i8 %7701, i8* %21, align 1
  %7702 = xor i32 %7690, %7692
  %7703 = xor i32 %7702, %7694
  %7704 = lshr i32 %7703, 4
  %7705 = trunc i32 %7704 to i8
  %7706 = and i8 %7705, 1
  store i8 %7706, i8* %27, align 1
  %7707 = icmp eq i32 %7694, 0
  %7708 = zext i1 %7707 to i8
  store i8 %7708, i8* %30, align 1
  %7709 = lshr i32 %7694, 31
  %7710 = trunc i32 %7709 to i8
  store i8 %7710, i8* %33, align 1
  %7711 = lshr i32 %7692, 31
  %7712 = lshr i32 %7690, 31
  %7713 = xor i32 %7712, %7711
  %7714 = xor i32 %7709, %7711
  %7715 = add nuw nsw i32 %7714, %7713
  %7716 = icmp eq i32 %7715, 2
  %7717 = zext i1 %7716 to i8
  store i8 %7717, i8* %39, align 1
  %7718 = icmp ne i8 %7710, 0
  %7719 = xor i1 %7718, %7716
  %.v342 = select i1 %7719, i64 20, i64 38
  %7720 = add i64 %7691, %.v342
  %7721 = add i64 %7720, 7
  store i64 %7721, i64* %3, align 8
  br i1 %7719, label %block_4803de, label %block_.L_4803f0

block_4803de:                                     ; preds = %block_.L_4803ca
  %7722 = zext i32 %7690 to i64
  store i64 %7722, i64* %RAX.i1321, align 8
  %7723 = add i64 %7689, -240
  %7724 = add i64 %7720, 13
  store i64 %7724, i64* %3, align 8
  %7725 = inttoptr i64 %7723 to i32*
  store i32 %7690, i32* %7725, align 4
  %7726 = load i64, i64* %3, align 8
  %7727 = add i64 %7726, 18
  store i64 %7727, i64* %3, align 8
  br label %block_.L_4803fd

block_.L_4803f0:                                  ; preds = %block_.L_4803ca
  store i64 %7693, i64* %RAX.i1321, align 8
  %7728 = add i64 %7689, -240
  %7729 = add i64 %7720, 13
  store i64 %7729, i64* %3, align 8
  %7730 = inttoptr i64 %7728 to i32*
  store i32 %7692, i32* %7730, align 4
  %.pre294 = load i64, i64* %3, align 8
  br label %block_.L_4803fd

block_.L_4803fd:                                  ; preds = %block_.L_4803f0, %block_4803de
  %7731 = phi i64 [ %.pre294, %block_.L_4803f0 ], [ %7727, %block_4803de ]
  %7732 = load i64, i64* %RBP.i, align 8
  %7733 = add i64 %7732, -240
  %7734 = add i64 %7731, 6
  store i64 %7734, i64* %3, align 8
  %7735 = inttoptr i64 %7733 to i32*
  %7736 = load i32, i32* %7735, align 4
  store i32 %7736, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %7737 = load i32, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  %7738 = add i32 %7737, %7736
  store i32 %7738, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  store i32 %7736, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  %7739 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %7740 = add i32 %7739, -1
  %7741 = zext i32 %7740 to i64
  store i64 %7741, i64* %RAX.i1321, align 8
  %7742 = and i32 %7740, 255
  %7743 = tail call i32 @llvm.ctpop.i32(i32 %7742)
  %7744 = trunc i32 %7743 to i8
  %7745 = and i8 %7744, 1
  %7746 = xor i8 %7745, 1
  %7747 = icmp eq i32 %7740, 0
  %7748 = zext i1 %7747 to i8
  %7749 = lshr i32 %7740, 31
  %7750 = trunc i32 %7749 to i8
  store i32 %7740, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  store i8 0, i8* %14, align 1
  store i8 %7746, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 %7748, i8* %30, align 1
  store i8 %7750, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v343 = select i1 %7747, i64 79, i64 590
  %7751 = add i64 %7731, %.v343
  store i64 %7751, i64* %3, align 8
  br i1 %7747, label %block_48044c, label %block_.L_48064b

block_48044c:                                     ; preds = %block_.L_4803fd
  %7752 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7752, i64* %RAX.i1321, align 8
  %7753 = add i64 %7752, 24
  %7754 = add i64 %7751, 12
  store i64 %7754, i64* %3, align 8
  %7755 = inttoptr i64 %7753 to i32*
  %7756 = load i32, i32* %7755, align 4
  store i8 0, i8* %14, align 1
  %7757 = and i32 %7756, 255
  %7758 = tail call i32 @llvm.ctpop.i32(i32 %7757)
  %7759 = trunc i32 %7758 to i8
  %7760 = and i8 %7759, 1
  %7761 = xor i8 %7760, 1
  store i8 %7761, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7762 = icmp eq i32 %7756, 0
  %7763 = zext i1 %7762 to i8
  store i8 %7763, i8* %30, align 1
  %7764 = lshr i32 %7756, 31
  %7765 = trunc i32 %7764 to i8
  store i8 %7765, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v344 = select i1 %7762, i64 18, i64 511
  %7766 = add i64 %7751, %.v344
  store i64 %7766, i64* %3, align 8
  br i1 %7762, label %block_48045e, label %block_.L_48064b

block_48045e:                                     ; preds = %block_48044c
  %7767 = load i64, i64* %RBP.i, align 8
  %7768 = add i64 %7767, -8
  %7769 = add i64 %7766, 4
  store i64 %7769, i64* %3, align 8
  %7770 = inttoptr i64 %7768 to i32*
  %7771 = load i32, i32* %7770, align 4
  store i8 0, i8* %14, align 1
  %7772 = and i32 %7771, 255
  %7773 = tail call i32 @llvm.ctpop.i32(i32 %7772)
  %7774 = trunc i32 %7773 to i8
  %7775 = and i8 %7774, 1
  %7776 = xor i8 %7775, 1
  store i8 %7776, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7777 = icmp eq i32 %7771, 0
  %7778 = zext i1 %7777 to i8
  store i8 %7778, i8* %30, align 1
  %7779 = lshr i32 %7771, 31
  %7780 = trunc i32 %7779 to i8
  store i8 %7780, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v345 = select i1 %7777, i64 31, i64 10
  %7781 = add i64 %7766, %.v345
  store i64 %7781, i64* %3, align 8
  br i1 %7777, label %block_.L_48047d, label %block_480468

block_480468:                                     ; preds = %block_48045e
  store i64 %7752, i64* %RAX.i1321, align 8
  %7782 = add i64 %7752, 72600
  %7783 = add i64 %7781, 15
  store i64 %7783, i64* %3, align 8
  %7784 = inttoptr i64 %7782 to i32*
  %7785 = load i32, i32* %7784, align 4
  store i8 0, i8* %14, align 1
  %7786 = and i32 %7785, 255
  %7787 = tail call i32 @llvm.ctpop.i32(i32 %7786)
  %7788 = trunc i32 %7787 to i8
  %7789 = and i8 %7788, 1
  %7790 = xor i8 %7789, 1
  store i8 %7790, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7791 = icmp eq i32 %7785, 0
  %7792 = zext i1 %7791 to i8
  store i8 %7792, i8* %30, align 1
  %7793 = lshr i32 %7785, 31
  %7794 = trunc i32 %7793 to i8
  store i8 %7794, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v346 = select i1 %7791, i64 21, i64 478
  %7795 = add i64 %7781, %.v346
  store i64 %7795, i64* %3, align 8
  br i1 %7791, label %block_.L_48047d, label %block_.L_480646

block_.L_48047d:                                  ; preds = %block_480468, %block_48045e
  %7796 = phi i64 [ %7795, %block_480468 ], [ %7781, %block_48045e ]
  %7797 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %7797, i64* %RAX.i1321, align 8
  %7798 = add i64 %7797, 1148
  %7799 = add i64 %7796, 15
  store i64 %7799, i64* %3, align 8
  %7800 = inttoptr i64 %7798 to i32*
  %7801 = load i32, i32* %7800, align 4
  store i8 0, i8* %14, align 1
  %7802 = and i32 %7801, 255
  %7803 = tail call i32 @llvm.ctpop.i32(i32 %7802)
  %7804 = trunc i32 %7803 to i8
  %7805 = and i8 %7804, 1
  %7806 = xor i8 %7805, 1
  store i8 %7806, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7807 = icmp eq i32 %7801, 0
  %7808 = zext i1 %7807 to i8
  store i8 %7808, i8* %30, align 1
  %7809 = lshr i32 %7801, 31
  %7810 = trunc i32 %7809 to i8
  store i8 %7810, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v347 = select i1 %7807, i64 21, i64 42
  %7811 = add i64 %7796, %.v347
  store i64 %7811, i64* %3, align 8
  br i1 %7807, label %block_480492, label %block_.L_4804a7

block_480492:                                     ; preds = %block_.L_48047d
  %7812 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %7812, i64* %RAX.i1321, align 8
  %7813 = add i64 %7812, 2880
  %7814 = add i64 %7811, 15
  store i64 %7814, i64* %3, align 8
  %7815 = inttoptr i64 %7813 to i32*
  %7816 = load i32, i32* %7815, align 4
  %7817 = add i32 %7816, -1
  %7818 = icmp eq i32 %7816, 0
  %7819 = zext i1 %7818 to i8
  store i8 %7819, i8* %14, align 1
  %7820 = and i32 %7817, 255
  %7821 = tail call i32 @llvm.ctpop.i32(i32 %7820)
  %7822 = trunc i32 %7821 to i8
  %7823 = and i8 %7822, 1
  %7824 = xor i8 %7823, 1
  store i8 %7824, i8* %21, align 1
  %7825 = xor i32 %7817, %7816
  %7826 = lshr i32 %7825, 4
  %7827 = trunc i32 %7826 to i8
  %7828 = and i8 %7827, 1
  store i8 %7828, i8* %27, align 1
  %7829 = icmp eq i32 %7817, 0
  %7830 = zext i1 %7829 to i8
  store i8 %7830, i8* %30, align 1
  %7831 = lshr i32 %7817, 31
  %7832 = trunc i32 %7831 to i8
  store i8 %7832, i8* %33, align 1
  %7833 = lshr i32 %7816, 31
  %7834 = xor i32 %7831, %7833
  %7835 = add nuw nsw i32 %7834, %7833
  %7836 = icmp eq i32 %7835, 2
  %7837 = zext i1 %7836 to i8
  store i8 %7837, i8* %39, align 1
  %.v349 = select i1 %7829, i64 21, i64 199
  %7838 = add i64 %7811, %.v349
  store i64 %7838, i64* %3, align 8
  br i1 %7829, label %block_.L_4804a7, label %block_.L_480559

block_.L_4804a7:                                  ; preds = %block_480492, %block_.L_48047d
  %7839 = phi i64 [ %7838, %block_480492 ], [ %7811, %block_.L_48047d ]
  %7840 = add i64 %7839, ptrtoint (%G_0x313d9__rip__type* @G_0x313d9__rip_ to i64)
  %7841 = add i64 %7839, 8
  store i64 %7841, i64* %3, align 8
  %7842 = inttoptr i64 %7840 to i64*
  %7843 = load i64, i64* %7842, align 8
  store i64 %7843, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  %7844 = add i64 %7839, add (i64 ptrtoint (%G_0x313a9__rip__type* @G_0x313a9__rip_ to i64), i64 8)
  %7845 = add i64 %7839, 16
  store i64 %7845, i64* %3, align 8
  %7846 = inttoptr i64 %7844 to i64*
  %7847 = load i64, i64* %7846, align 8
  store i64 %7847, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %7848 = sitofp i32 %7738 to double
  %7849 = bitcast i64 %7847 to double
  %7850 = fmul double %7848, %7849
  %7851 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %7852 = sitofp i32 %7851 to double
  store double %7852, double* %6851, align 1
  %7853 = fdiv double %7850, %7852
  %7854 = bitcast i64 %7843 to double
  %7855 = fadd double %7853, %7854
  store double %7855, double* %.pre-phi309, align 1
  store i64 0, i64* %.pre-phi311, align 1
  %7856 = tail call double @llvm.trunc.f64(double %7855)
  %7857 = tail call double @llvm.fabs.f64(double %7856)
  %7858 = fcmp ogt double %7857, 0x41DFFFFFFFC00000
  %7859 = fptosi double %7856 to i32
  %7860 = zext i32 %7859 to i64
  %7861 = select i1 %7858, i64 2147483648, i64 %7860
  store i64 %7861, i64* %RAX.i1321, align 8
  %7862 = add i64 %7767, -32
  %7863 = trunc i64 %7861 to i32
  %7864 = add i64 %7839, 53
  store i64 %7864, i64* %3, align 8
  %7865 = inttoptr i64 %7862 to i32*
  store i32 %7863, i32* %7865, align 4
  %7866 = load i64, i64* %3, align 8
  %7867 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7867, i64* %RCX.i1346, align 8
  %7868 = add i64 %7867, 72576
  %7869 = add i64 %7866, 14
  store i64 %7869, i64* %3, align 8
  %7870 = inttoptr i64 %7868 to i32*
  %7871 = load i32, i32* %7870, align 4
  %7872 = zext i32 %7871 to i64
  store i64 %7872, i64* %RAX.i1321, align 8
  %7873 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %7873, i64* %RCX.i1346, align 8
  %7874 = add i64 %7873, 1224
  %7875 = add i64 %7866, 28
  store i64 %7875, i64* %3, align 8
  %7876 = inttoptr i64 %7874 to i32*
  %7877 = load i32, i32* %7876, align 4
  %7878 = add i32 %7877, -2
  %7879 = zext i32 %7878 to i64
  store i64 %7879, i64* %RDX.i1173, align 8
  %7880 = lshr i32 %7878, 31
  %7881 = sub i32 %7871, %7878
  %7882 = icmp ult i32 %7871, %7878
  %7883 = zext i1 %7882 to i8
  store i8 %7883, i8* %14, align 1
  %7884 = and i32 %7881, 255
  %7885 = tail call i32 @llvm.ctpop.i32(i32 %7884)
  %7886 = trunc i32 %7885 to i8
  %7887 = and i8 %7886, 1
  %7888 = xor i8 %7887, 1
  store i8 %7888, i8* %21, align 1
  %7889 = xor i32 %7878, %7871
  %7890 = xor i32 %7889, %7881
  %7891 = lshr i32 %7890, 4
  %7892 = trunc i32 %7891 to i8
  %7893 = and i8 %7892, 1
  store i8 %7893, i8* %27, align 1
  %7894 = icmp eq i32 %7881, 0
  %7895 = zext i1 %7894 to i8
  store i8 %7895, i8* %30, align 1
  %7896 = lshr i32 %7881, 31
  %7897 = trunc i32 %7896 to i8
  store i8 %7897, i8* %33, align 1
  %7898 = lshr i32 %7871, 31
  %7899 = xor i32 %7880, %7898
  %7900 = xor i32 %7896, %7898
  %7901 = add nuw nsw i32 %7900, %7899
  %7902 = icmp eq i32 %7901, 2
  %7903 = zext i1 %7902 to i8
  store i8 %7903, i8* %39, align 1
  %.v348 = select i1 %7894, i64 39, i64 49
  %7904 = add i64 %7866, %.v348
  store i64 %7904, i64* %3, align 8
  %7905 = load i64, i64* %RBP.i, align 8
  br i1 %7894, label %block_480503, label %block_.L_48050d

block_480503:                                     ; preds = %block_.L_4804a7
  %7906 = add i64 %7905, -32
  %7907 = add i64 %7904, 3
  store i64 %7907, i64* %3, align 8
  %7908 = inttoptr i64 %7906 to i32*
  %7909 = load i32, i32* %7908, align 4
  %7910 = zext i32 %7909 to i64
  store i64 %7910, i64* %RAX.i1321, align 8
  %7911 = add i64 %7904, 10
  store i64 %7911, i64* %3, align 8
  store i32 %7909, i32* bitcast (%G_0x6f9348_type* @G_0x6f9348 to i32*), align 8
  br label %block_.L_48050d

block_.L_48050d:                                  ; preds = %block_.L_4804a7, %block_480503
  %7912 = phi i64 [ %7911, %block_480503 ], [ %7904, %block_.L_4804a7 ]
  %7913 = add i64 %7905, -32
  %7914 = add i64 %7912, 3
  store i64 %7914, i64* %3, align 8
  %7915 = inttoptr i64 %7913 to i32*
  %7916 = load i32, i32* %7915, align 4
  %7917 = zext i32 %7916 to i64
  store i64 %7917, i64* %RAX.i1321, align 8
  store i64 %7867, i64* %RCX.i1346, align 8
  %7918 = add i64 %7867, 72572
  %7919 = add i64 %7912, 17
  store i64 %7919, i64* %3, align 8
  %7920 = inttoptr i64 %7918 to i32*
  %7921 = load i32, i32* %7920, align 4
  %7922 = add i32 %7921, %7916
  %7923 = icmp ult i32 %7922, %7916
  %7924 = icmp ult i32 %7922, %7921
  %7925 = or i1 %7923, %7924
  %7926 = zext i1 %7925 to i8
  store i8 %7926, i8* %14, align 1
  %7927 = and i32 %7922, 255
  %7928 = tail call i32 @llvm.ctpop.i32(i32 %7927)
  %7929 = trunc i32 %7928 to i8
  %7930 = and i8 %7929, 1
  %7931 = xor i8 %7930, 1
  store i8 %7931, i8* %21, align 1
  %7932 = xor i32 %7921, %7916
  %7933 = xor i32 %7932, %7922
  %7934 = lshr i32 %7933, 4
  %7935 = trunc i32 %7934 to i8
  %7936 = and i8 %7935, 1
  store i8 %7936, i8* %27, align 1
  %7937 = icmp eq i32 %7922, 0
  %7938 = zext i1 %7937 to i8
  store i8 %7938, i8* %30, align 1
  %7939 = lshr i32 %7922, 31
  %7940 = trunc i32 %7939 to i8
  store i8 %7940, i8* %33, align 1
  %7941 = lshr i32 %7916, 31
  %7942 = lshr i32 %7921, 31
  %7943 = xor i32 %7939, %7941
  %7944 = xor i32 %7939, %7942
  %7945 = add nuw nsw i32 %7943, %7944
  %7946 = icmp eq i32 %7945, 2
  %7947 = zext i1 %7946 to i8
  store i8 %7947, i8* %39, align 1
  %7948 = add i64 %7912, 23
  store i64 %7948, i64* %3, align 8
  store i32 %7922, i32* %7920, align 4
  %7949 = load i64, i64* %3, align 8
  %7950 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %7951 = zext i32 %7950 to i64
  store i64 %7951, i64* %RAX.i1321, align 8
  store i32 %7950, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %7952 = load i64, i64* %RBP.i, align 8
  %7953 = add i64 %7952, -32
  %7954 = add i64 %7949, 17
  store i64 %7954, i64* %3, align 8
  %7955 = inttoptr i64 %7953 to i32*
  %7956 = load i32, i32* %7955, align 4
  %7957 = zext i32 %7956 to i64
  store i64 %7957, i64* %RAX.i1321, align 8
  store i32 %7956, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %7958 = add i64 %7949, 27
  store i64 %7958, i64* %3, align 8
  %7959 = load i32, i32* %7955, align 4
  store i32 %7959, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %7960 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %7961 = zext i32 %7960 to i64
  store i64 %7961, i64* %RAX.i1321, align 8
  %7962 = add i64 %7949, 48
  store i64 %7962, i64* %3, align 8
  store i32 %7960, i32* bitcast (%G_0x722c78_type* @G_0x722c78 to i32*), align 8
  %7963 = add i64 %7949, 285
  br label %block_.L_480641

block_.L_480559:                                  ; preds = %block_480492
  store i64 %7812, i64* %RAX.i1321, align 8
  %7964 = add i64 %7838, 15
  store i64 %7964, i64* %3, align 8
  %7965 = load i32, i32* %7815, align 4
  %7966 = add i32 %7965, -2
  %7967 = icmp ult i32 %7965, 2
  %7968 = zext i1 %7967 to i8
  store i8 %7968, i8* %14, align 1
  %7969 = and i32 %7966, 255
  %7970 = tail call i32 @llvm.ctpop.i32(i32 %7969)
  %7971 = trunc i32 %7970 to i8
  %7972 = and i8 %7971, 1
  %7973 = xor i8 %7972, 1
  store i8 %7973, i8* %21, align 1
  %7974 = xor i32 %7966, %7965
  %7975 = lshr i32 %7974, 4
  %7976 = trunc i32 %7975 to i8
  %7977 = and i8 %7976, 1
  store i8 %7977, i8* %27, align 1
  %7978 = icmp eq i32 %7966, 0
  %7979 = zext i1 %7978 to i8
  store i8 %7979, i8* %30, align 1
  %7980 = lshr i32 %7966, 31
  %7981 = trunc i32 %7980 to i8
  store i8 %7981, i8* %33, align 1
  %7982 = lshr i32 %7965, 31
  %7983 = xor i32 %7980, %7982
  %7984 = add nuw nsw i32 %7983, %7982
  %7985 = icmp eq i32 %7984, 2
  %7986 = zext i1 %7985 to i8
  store i8 %7986, i8* %39, align 1
  %.v350 = select i1 %7978, i64 42, i64 21
  %7987 = add i64 %7838, %.v350
  store i64 %7987, i64* %3, align 8
  br i1 %7978, label %block_.L_480583, label %block_48056e

block_48056e:                                     ; preds = %block_.L_480559
  store i64 %7812, i64* %RAX.i1321, align 8
  %7988 = add i64 %7812, 2884
  %7989 = add i64 %7987, 15
  store i64 %7989, i64* %3, align 8
  %7990 = inttoptr i64 %7988 to i32*
  %7991 = load i32, i32* %7990, align 4
  store i8 0, i8* %14, align 1
  %7992 = and i32 %7991, 255
  %7993 = tail call i32 @llvm.ctpop.i32(i32 %7992)
  %7994 = trunc i32 %7993 to i8
  %7995 = and i8 %7994, 1
  %7996 = xor i8 %7995, 1
  store i8 %7996, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7997 = icmp eq i32 %7991, 0
  %7998 = zext i1 %7997 to i8
  store i8 %7998, i8* %30, align 1
  %7999 = lshr i32 %7991, 31
  %8000 = trunc i32 %7999 to i8
  store i8 %8000, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v351 = select i1 %7997, i64 206, i64 21
  %8001 = add i64 %7987, %.v351
  store i64 %8001, i64* %3, align 8
  br i1 %7997, label %block_.L_48063c, label %block_.L_480583

block_.L_480583:                                  ; preds = %block_48056e, %block_.L_480559
  %8002 = phi i64 [ %8001, %block_48056e ], [ %7987, %block_.L_480559 ]
  store i64 %7752, i64* %RAX.i1321, align 8
  %8003 = add i64 %7752, 72600
  %8004 = add i64 %8002, 15
  store i64 %8004, i64* %3, align 8
  %8005 = inttoptr i64 %8003 to i32*
  %8006 = load i32, i32* %8005, align 4
  store i8 0, i8* %14, align 1
  %8007 = and i32 %8006, 255
  %8008 = tail call i32 @llvm.ctpop.i32(i32 %8007)
  %8009 = trunc i32 %8008 to i8
  %8010 = and i8 %8009, 1
  %8011 = xor i8 %8010, 1
  store i8 %8011, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8012 = icmp eq i32 %8006, 0
  %8013 = zext i1 %8012 to i8
  store i8 %8013, i8* %30, align 1
  %8014 = lshr i32 %8006, 31
  %8015 = trunc i32 %8014 to i8
  store i8 %8015, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v352 = select i1 %8012, i64 21, i64 103
  %8016 = add i64 %8002, %.v352
  store i64 %8016, i64* %3, align 8
  br i1 %8012, label %block_480598, label %block_.L_4805ea

block_480598:                                     ; preds = %block_.L_480583
  %8017 = add i64 %8016, ptrtoint (%G_0x312e8__rip__type* @G_0x312e8__rip_ to i64)
  %8018 = add i64 %8016, 8
  store i64 %8018, i64* %3, align 8
  %8019 = inttoptr i64 %8017 to i64*
  %8020 = load i64, i64* %8019, align 8
  store i64 %8020, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  %8021 = add i64 %8016, add (i64 ptrtoint (%G_0x312b8__rip__type* @G_0x312b8__rip_ to i64), i64 8)
  %8022 = add i64 %8016, 16
  store i64 %8022, i64* %3, align 8
  %8023 = inttoptr i64 %8021 to i64*
  %8024 = load i64, i64* %8023, align 8
  store i64 %8024, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %8025 = sitofp i32 %7738 to double
  %8026 = bitcast i64 %8024 to double
  %8027 = fmul double %8025, %8026
  %8028 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %8029 = sitofp i32 %8028 to double
  store double %8029, double* %6851, align 1
  %8030 = fdiv double %8027, %8029
  %8031 = bitcast i64 %8020 to double
  %8032 = fadd double %8030, %8031
  store double %8032, double* %.pre-phi309, align 1
  store i64 0, i64* %.pre-phi311, align 1
  %8033 = tail call double @llvm.trunc.f64(double %8032)
  %8034 = tail call double @llvm.fabs.f64(double %8033)
  %8035 = fcmp ogt double %8034, 0x41DFFFFFFFC00000
  %8036 = fptosi double %8033 to i32
  %8037 = zext i32 %8036 to i64
  %8038 = select i1 %8035, i64 2147483648, i64 %8037
  store i64 %8038, i64* %RAX.i1321, align 8
  %8039 = add i64 %7767, -32
  %8040 = trunc i64 %8038 to i32
  %8041 = add i64 %8016, 53
  store i64 %8041, i64* %3, align 8
  %8042 = inttoptr i64 %8039 to i32*
  store i32 %8040, i32* %8042, align 4
  %8043 = load i64, i64* %RBP.i, align 8
  %8044 = add i64 %8043, -32
  %8045 = load i64, i64* %3, align 8
  %8046 = add i64 %8045, 3
  store i64 %8046, i64* %3, align 8
  %8047 = inttoptr i64 %8044 to i32*
  %8048 = load i32, i32* %8047, align 4
  store i32 %8048, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %8049 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %8050 = zext i32 %8049 to i64
  store i64 %8050, i64* %RAX.i1321, align 8
  store i32 %8049, i32* bitcast (%G_0x7107a4_type* @G_0x7107a4 to i32*), align 8
  %8051 = add i64 %8045, 106
  store i64 %8051, i64* %3, align 8
  br label %block_.L_480637

block_.L_4805ea:                                  ; preds = %block_.L_480583
  %8052 = add i64 %8016, ptrtoint (%G_0x31296__rip__type* @G_0x31296__rip_ to i64)
  %8053 = add i64 %8016, 8
  store i64 %8053, i64* %3, align 8
  %8054 = inttoptr i64 %8052 to i64*
  %8055 = load i64, i64* %8054, align 8
  store i64 %8055, i64* %5134, align 1
  store double 0.000000e+00, double* %5136, align 1
  %8056 = add i64 %8016, add (i64 ptrtoint (%G_0x31266__rip__type* @G_0x31266__rip_ to i64), i64 8)
  %8057 = add i64 %8016, 16
  store i64 %8057, i64* %3, align 8
  %8058 = inttoptr i64 %8056 to i64*
  %8059 = load i64, i64* %8058, align 8
  store i64 %8059, i64* %.pre-phi310, align 1
  store double 0.000000e+00, double* %.pre-phi312, align 1
  %8060 = sitofp i32 %7738 to double
  %8061 = bitcast i64 %8059 to double
  %8062 = fmul double %8060, %8061
  %8063 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %8064 = sitofp i32 %8063 to double
  store double %8064, double* %6851, align 1
  %8065 = fdiv double %8062, %8064
  %8066 = bitcast i64 %8055 to double
  %8067 = fadd double %8065, %8066
  store double %8067, double* %.pre-phi309, align 1
  store i64 0, i64* %.pre-phi311, align 1
  %8068 = tail call double @llvm.trunc.f64(double %8067)
  %8069 = tail call double @llvm.fabs.f64(double %8068)
  %8070 = fcmp ogt double %8069, 0x41DFFFFFFFC00000
  %8071 = fptosi double %8068 to i32
  %8072 = zext i32 %8071 to i64
  %8073 = select i1 %8070, i64 2147483648, i64 %8072
  store i64 %8073, i64* %RAX.i1321, align 8
  %8074 = add i64 %7767, -32
  %8075 = trunc i64 %8073 to i32
  %8076 = add i64 %8016, 53
  store i64 %8076, i64* %3, align 8
  %8077 = inttoptr i64 %8074 to i32*
  store i32 %8075, i32* %8077, align 4
  %8078 = load i64, i64* %RBP.i, align 8
  %8079 = add i64 %8078, -32
  %8080 = load i64, i64* %3, align 8
  %8081 = add i64 %8080, 3
  store i64 %8081, i64* %3, align 8
  %8082 = inttoptr i64 %8079 to i32*
  %8083 = load i32, i32* %8082, align 4
  store i32 %8083, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %8084 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %8085 = zext i32 %8084 to i64
  store i64 %8085, i64* %RAX.i1321, align 8
  %8086 = add i64 %8080, 24
  store i64 %8086, i64* %3, align 8
  store i32 %8084, i32* bitcast (%G_0x6d1f88_type* @G_0x6d1f88 to i32*), align 8
  br label %block_.L_480637

block_.L_480637:                                  ; preds = %block_.L_4805ea, %block_480598
  %8087 = phi i64 [ %8086, %block_.L_4805ea ], [ %8051, %block_480598 ]
  %8088 = add i64 %8087, 5
  store i64 %8088, i64* %3, align 8
  br label %block_.L_48063c

block_.L_48063c:                                  ; preds = %block_.L_480637, %block_48056e
  %8089 = phi i64 [ %8088, %block_.L_480637 ], [ %8001, %block_48056e ]
  %8090 = add i64 %8089, 5
  store i64 %8090, i64* %3, align 8
  br label %block_.L_480641

block_.L_480641:                                  ; preds = %block_.L_48063c, %block_.L_48050d
  %storemerge196 = phi i64 [ %7963, %block_.L_48050d ], [ %8090, %block_.L_48063c ]
  %8091 = add i64 %storemerge196, 5
  store i64 %8091, i64* %3, align 8
  br label %block_.L_480646

block_.L_480646:                                  ; preds = %block_480468, %block_.L_480641
  %8092 = phi i64 [ %8091, %block_.L_480641 ], [ %7795, %block_480468 ]
  %8093 = add i64 %8092, 5
  store i64 %8093, i64* %3, align 8
  br label %block_.L_48064b

block_.L_48064b:                                  ; preds = %block_48044c, %block_.L_4803fd, %block_.L_480646
  %8094 = phi i64 [ %8093, %block_.L_480646 ], [ %7766, %block_48044c ], [ %7751, %block_.L_4803fd ]
  %8095 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %8096 = zext i32 %8095 to i64
  store i64 %8096, i64* %RAX.i1321, align 8
  %8097 = load i64, i64* %RBP.i, align 8
  %8098 = add i64 %8097, -4
  %8099 = add i64 %8094, 10
  store i64 %8099, i64* %3, align 8
  %8100 = inttoptr i64 %8098 to i32*
  store i32 %8095, i32* %8100, align 4
  %8101 = load i64, i64* %3, align 8
  %8102 = add i64 %8101, 40
  store i64 %8102, i64* %3, align 8
  br label %block_.L_48067d

block_.L_48065f:                                  ; preds = %block_.L_47f469, %block_.L_47f67e
  %8103 = phi i64 [ %5128, %block_.L_47f67e ], [ %4794, %block_.L_47f469 ]
  %8104 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %8105 = zext i32 %8104 to i64
  store i64 %8105, i64* %RAX.i1321, align 8
  %8106 = load i64, i64* %RBP.i, align 8
  %8107 = add i64 %8106, -4
  %8108 = add i64 %8103, 30
  store i64 %8108, i64* %3, align 8
  %8109 = inttoptr i64 %8107 to i32*
  store i32 %8104, i32* %8109, align 4
  %.pre302 = load i64, i64* %3, align 8
  br label %block_.L_48067d

block_.L_48067d:                                  ; preds = %block_.L_48065f, %block_.L_48064b, %block_.L_47fd82, %block_.L_47f8be, %block_.L_47f64c, %block_.L_47f45a, %block_.L_47f44b, %block_47ee52, %block_47edf9, %block_.L_47edd8, %block_.L_47ed2d, %block_.L_47e80f, %block_.L_47e744, %block_47e1c1
  %8110 = phi i64 [ %.pre302, %block_.L_48065f ], [ %8102, %block_.L_48064b ], [ %6403, %block_.L_47fd82 ], [ %5542, %block_.L_47f8be ], [ %5126, %block_.L_47f64c ], [ %4775, %block_.L_47f44b ], [ %4782, %block_.L_47f45a ], [ %3062, %block_47ee52 ], [ %2990, %block_47edf9 ], [ %2853, %block_.L_47ed2d ], [ %1931, %block_.L_47e80f ], [ %1824, %block_.L_47e744 ], [ %144, %block_47e1c1 ], [ %2956, %block_.L_47edd8 ]
  %MEMORY.138 = phi %struct.Memory* [ %2, %block_.L_48065f ], [ %call2_48018a, %block_.L_48064b ], [ %MEMORY.80, %block_.L_47fd82 ], [ %MEMORY.80, %block_.L_47f8be ], [ %2, %block_.L_47f64c ], [ %MEMORY.70, %block_.L_47f44b ], [ %2, %block_.L_47f45a ], [ %2, %block_47ee52 ], [ %2, %block_47edf9 ], [ %MEMORY.40, %block_.L_47ed2d ], [ %2, %block_.L_47e80f ], [ %MEMORY.24, %block_.L_47e744 ], [ %2, %block_47e1c1 ], [ %2, %block_.L_47edd8 ]
  %8111 = load i64, i64* %RBP.i, align 8
  %8112 = add i64 %8111, -4
  %8113 = add i64 %8110, 3
  store i64 %8113, i64* %3, align 8
  %8114 = inttoptr i64 %8112 to i32*
  %8115 = load i32, i32* %8114, align 4
  %8116 = zext i32 %8115 to i64
  store i64 %8116, i64* %RAX.i1321, align 8
  %8117 = load i64, i64* %6, align 8
  %8118 = add i64 %8117, 240
  store i64 %8118, i64* %6, align 8
  %8119 = icmp ugt i64 %8117, -241
  %8120 = zext i1 %8119 to i8
  store i8 %8120, i8* %14, align 1
  %8121 = trunc i64 %8118 to i32
  %8122 = and i32 %8121, 255
  %8123 = tail call i32 @llvm.ctpop.i32(i32 %8122)
  %8124 = trunc i32 %8123 to i8
  %8125 = and i8 %8124, 1
  %8126 = xor i8 %8125, 1
  store i8 %8126, i8* %21, align 1
  %8127 = xor i64 %8117, 16
  %8128 = xor i64 %8127, %8118
  %8129 = lshr i64 %8128, 4
  %8130 = trunc i64 %8129 to i8
  %8131 = and i8 %8130, 1
  store i8 %8131, i8* %27, align 1
  %8132 = icmp eq i64 %8118, 0
  %8133 = zext i1 %8132 to i8
  store i8 %8133, i8* %30, align 1
  %8134 = lshr i64 %8118, 63
  %8135 = trunc i64 %8134 to i8
  store i8 %8135, i8* %33, align 1
  %8136 = lshr i64 %8117, 63
  %8137 = xor i64 %8134, %8136
  %8138 = add nuw nsw i64 %8137, %8134
  %8139 = icmp eq i64 %8138, 2
  %8140 = zext i1 %8139 to i8
  store i8 %8140, i8* %39, align 1
  %8141 = add i64 %8110, 11
  store i64 %8141, i64* %3, align 8
  %8142 = add i64 %8117, 248
  %8143 = inttoptr i64 %8118 to i64*
  %8144 = load i64, i64* %8143, align 8
  store i64 %8144, i64* %RBP.i, align 8
  store i64 %8142, i64* %6, align 8
  %8145 = add i64 %8110, 12
  store i64 %8145, i64* %3, align 8
  %8146 = inttoptr i64 %8142 to i64*
  %8147 = load i64, i64* %8146, align 8
  store i64 %8147, i64* %3, align 8
  %8148 = add i64 %8117, 256
  store i64 %8148, i64* %6, align 8
  ret %struct.Memory* %MEMORY.138
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0xf0___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -240
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 240
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bac__rax____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72620
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x11ba0__rax____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %RAX, align 8
  %6 = add i64 %5, 72608
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47ede7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e1af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11b98__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47ed3c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e1de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6cd474___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6cd474_type* @G_0x6cd474 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6d32cc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6d32cc___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_48067d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e753(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x4d4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e365(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__0xb40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47e22f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xb44__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2884
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47e2a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e29b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x11b9c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72604
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e27a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x70d190___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6cd3a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6f9708___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x70d190(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e296(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x7236c0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e29b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e2a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6cd3a8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x70d190___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e2ca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e2f2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6cd3a8___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x70d190___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %7, %6
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x724744___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e315(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e31f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x724744___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x724744_type* @G_0x724744 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x710364___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x710364_type* @G_0x710364 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x6d32cc___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e34c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e356(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e744(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x70fce0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x70fce0_type* @G_0x70fce0 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl_0x4d4__rcx_(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = inttoptr i64 %4 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = shl nuw i64 %14, 32
  %19 = or i64 %18, %10
  %20 = sdiv i64 %19, %17
  %21 = shl i64 %20, 32
  %22 = ashr exact i64 %21, 32
  %23 = icmp eq i64 %20, %22
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %block_400488
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:26:                                     ; preds = %block_400488
  %27 = srem i64 %19, %17
  %28 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %29 = and i64 %20, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %31 = and i64 %27, 4294967295
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %26, %24
  %38 = phi %struct.Memory* [ %25, %24 ], [ %2, %26 ]
  ret %struct.Memory* %38
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e39c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4d4__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e446(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47e3d0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47e441(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e43c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e41b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e437(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e43c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e441(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e446(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x6cd3a8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0xfffffffe__0x4d4__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, -2
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967294
  store i64 %12, i64* %RDX, align 8
  %13 = mul i64 %9, -8589934592
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 254
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x3___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ult i32 %6, 3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_47e47d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xfffffffd__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -3, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e571(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ult i32 %6, 2
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e4b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xfffffffe__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e56c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e4eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e567(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e51f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e562(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e556(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e55d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0xfffffffe___ecx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  %8 = mul nsw i64 %7, -2
  %9 = trunc i64 %8 to i32
  %10 = and i64 %8, 4294967294
  store i64 %10, i64* %RCX, align 8
  %11 = mul i64 %7, -8589934592
  %12 = ashr exact i64 %11, 32
  %13 = icmp ne i64 %12, %8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %9, 254
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %23, align 1
  %24 = lshr i32 %9, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x70d190___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x6cd3a8___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__esi___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RDX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4d4__rdi____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e602(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x70d190___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x6cd3a8___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ECX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RAX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4d4__rdx____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e611(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0xfffffffe___eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  %8 = mul nsw i64 %7, -2
  %9 = trunc i64 %8 to i32
  %10 = and i64 %8, 4294967294
  store i64 %10, i64* %RAX, align 8
  %11 = mul i64 %7, -8589934592
  %12 = ashr exact i64 %11, 32
  %13 = icmp ne i64 %12, %8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %9, 254
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %23, align 1
  %24 = lshr i32 %9, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e630(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -64
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e6c5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x70d190___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x70d190_type* @G_0x70d190 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x6cd3a8___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6cd3a8_type* @G_0x6cd3a8 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RCX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4d4__rsi____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -68
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -72
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x48__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x44__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDI, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e6b0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e6bf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x6d32cc___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6d32cc_type* @G_0x6d32cc to i32*), align 8
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %7, %6
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e6f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e703(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e730(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e73a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e81e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11b80__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72576
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11b98__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 72600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e80f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x722cb0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x47c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47e7fc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x11b7c__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 72572
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x11b7c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 72572
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6d1278(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e80a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6f9708(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6f9708_type* @G_0x6f9708 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e80f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47e848(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47e8ce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e8ce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47e8a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e8c9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e8ce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x726420___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x726420_type* @G_0x726420 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x723640(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x723640_type* @G_0x723640 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6f9358___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6f9358_type* @G_0x6f9358 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x6d33e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6f9720___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6f9720_type* @G_0x6f9720 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6d4510(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6d4510_type* @G_0x6d4510 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6d1278___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d1278_type* @G_0x6d1278 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x723690(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6f80c8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6f80c8_type* @G_0x6f80c8 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6e51e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6e51e0_type* @G_0x6e51e0 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6cfc68___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cfc68_type* @G_0x6cfc68 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x6cea30(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x710798___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x710798_type* @G_0x710798 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x710008(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x710008_type* @G_0x710008 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6cd300___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cd300_type* @G_0x6cd300 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x721df8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x721df8_type* @G_0x721df8 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6cea30___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x721df8___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x721df8_type* @G_0x721df8 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd_0x710008___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x710008_type* @G_0x710008 to double*), align 8
  %9 = fadd double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x6d1280(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x6d1280_type* @G_0x6d1280 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__0x0__0x6cea28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i64 %5, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %5, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e9d6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x723690___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x723690_type* @G_0x723690 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x6e51e0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6e51e0_type* @G_0x6e51e0 to i32*), align 8
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %7, %6
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47e9bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47e9c7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x58__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47eca6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cea28___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x6d4510___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d4510_type* @G_0x6d4510 to i32*), align 8
  %6 = sext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sub i64 %3, %4
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %3, %4
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %4, %3
  %19 = xor i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i64 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %3, 63
  %31 = lshr i64 %4, 63
  %32 = xor i64 %31, %30
  %33 = xor i64 %27, %30
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6ccf88___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6ccf88_type* @G_0x6ccf88 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x723648___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x723648_type* @G_0x723648 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x6d1fb0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x6d1fb0_type* @G_0x6d1fb0 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divsd__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast [32 x %union.VectorReg]* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fdiv double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm0___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__esi___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDX, align 4
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47ea47(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ea4d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_xorps__xmm0___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x32ddd__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x32ddd__rip__type* @G_0x32ddd__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6d1280___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6d1280_type* @G_0x6d1280 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x723640___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x723640_type* @G_0x723640 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x6d1280___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x6d33e0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x6d1280___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_MINUS0x14__rbp____xmm3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm3___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm1___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm2__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6d33e0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomisd__xmm0___xmm1(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %4 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast [32 x %union.VectorReg]* %3 to double*
  %10 = load double, double* %9, align 1
  %11 = fcmp uno double %8, %10
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %block_400488
  %13 = fadd double %8, %10
  %14 = bitcast double %13 to i64
  %15 = and i64 %14, 9221120237041090560
  %16 = icmp eq i64 %15, 9218868437227405312
  %17 = and i64 %14, 2251799813685247
  %18 = icmp ne i64 %17, 0
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %12
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:22:                                     ; preds = %block_400488
  %23 = fcmp ogt double %8, %10
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %22
  %25 = fcmp olt double %8, %10
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp oeq double %8, %10
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %26, %24, %22, %12
  %29 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 1, %26 ], [ 1, %12 ]
  %30 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 0, %26 ], [ 1, %12 ]
  %31 = phi i8 [ 0, %22 ], [ 1, %24 ], [ 0, %26 ], [ 1, %12 ]
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %31, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %28, %26
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %35, %20
  %39 = phi %struct.Memory* [ %21, %20 ], [ %2, %35 ]
  ret %struct.Memory* %39
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47eac4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jp_.L_47eac4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47eb0c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomisd_MINUS0x10__rbp____xmm0(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fcmp uno double %9, %11
  br i1 %12, label %13, label %23

; <label>:13:                                     ; preds = %block_400488
  %14 = fadd double %9, %11
  %15 = bitcast double %14 to i64
  %16 = and i64 %15, 9221120237041090560
  %17 = icmp eq i64 %16, 9218868437227405312
  %18 = and i64 %15, 2251799813685247
  %19 = icmp ne i64 %18, 0
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %29

; <label>:21:                                     ; preds = %13
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:23:                                     ; preds = %block_400488
  %24 = fcmp ogt double %9, %11
  br i1 %24, label %29, label %25

; <label>:25:                                     ; preds = %23
  %26 = fcmp olt double %9, %11
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %25
  %28 = fcmp oeq double %9, %11
  br i1 %28, label %29, label %36

; <label>:29:                                     ; preds = %27, %25, %23, %13
  %30 = phi i8 [ 0, %23 ], [ 0, %25 ], [ 1, %27 ], [ 1, %13 ]
  %31 = phi i8 [ 0, %23 ], [ 0, %25 ], [ 0, %27 ], [ 1, %13 ]
  %32 = phi i8 [ 0, %23 ], [ 1, %25 ], [ 0, %27 ], [ 1, %13 ]
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %32, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %29, %27
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %36, %21
  %40 = phi %struct.Memory* [ %22, %21 ], [ %2, %36 ]
  ret %struct.Memory* %40
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_ja_.L_47eb0c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp eq i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x10__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movaps__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = extractelement <2 x i32> %9, i32 0
  %14 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %13, i32* %14, align 1
  %15 = extractelement <2 x i32> %9, i32 1
  %16 = getelementptr inbounds i8, i8* %5, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %12, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %12, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.sqrt_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x723640___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x723640_type* @G_0x723640 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subsd__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast [32 x %union.VectorReg]* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fsub double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x68__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jb_.L_47eb3d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x723640___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x723640_type* @G_0x723640 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x6d1280___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x6d1280_type* @G_0x6d1280 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_MINUS0x14__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsd2ss__xmm0___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to <2 x i32>*
  %8 = load <2 x i32>, <2 x i32>* %7, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to <2 x i32>*
  %11 = load <2 x i32>, <2 x i32>* %10, align 1
  %.cast = bitcast <2 x i32> %8 to double
  %12 = fptrunc double %.cast to float
  %13 = bitcast %union.VectorReg* %3 to float*
  store float %12, float* %13, align 1
  %14 = extractelement <2 x i32> %8, i32 1
  %15 = getelementptr inbounds i8, i8* %4, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 1
  %17 = extractelement <2 x i32> %11, i32 0
  %18 = bitcast i64* %9 to i32*
  store i32 %17, i32* %18, align 1
  %19 = extractelement <2 x i32> %11, i32 1
  %20 = getelementptr inbounds i8, i8* %4, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd__xmm0___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = extractelement <2 x float> %7, i32 0
  %9 = fpext float %8 to double
  %10 = bitcast %union.VectorReg* %3 to double*
  store double %9, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x6ccae0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x6ccae0_type* @G_0x6ccae0 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47eb99(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x32d03__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x32d03__rip__type* @G_0x32d03__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x6d33e0___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x6d33e0_type* @G_0x6d33e0 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x70__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divsd__xmm0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fdiv double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsd2ss__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast [32 x %union.VectorReg]* %3 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to double*
  %14 = load double, double* %13, align 1
  %15 = fptrunc double %14 to float
  %16 = bitcast [32 x %union.VectorReg]* %3 to float*
  store float %15, float* %16, align 1
  %17 = extractelement <2 x i32> %9, i32 1
  %18 = getelementptr inbounds i8, i8* %5, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 1
  %20 = extractelement <2 x i32> %12, i32 0
  %21 = bitcast i64* %10 to i32*
  store i32 %20, i32* %21, align 1
  %22 = extractelement <2 x i32> %12, i32 1
  %23 = getelementptr inbounds i8, i8* %5, i64 12
  %24 = bitcast i8* %23 to i32*
  store i32 %22, i32* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6ccae0___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6ccae0_type* @G_0x6ccae0 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.Qstep2QP(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47ebdf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ebe9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x74__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47ec16(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -120
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ec20(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x78__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x6e51e0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6e51e0_type* @G_0x6e51e0 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47ec54(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -124
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ec65(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x7c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -124
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47ec92(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -128
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ec9c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47ed2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47ed1a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ed28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ed2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47edd8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11ba4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72612
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0xb40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47edc5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47edd3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x7236c0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x7236c0_type* @G_0x7236c0 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47edd8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47ee16(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47ee6f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x11ba4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72612
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x11b98__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f469(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47eea0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f45a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f02d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47eedf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47ef50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47ef4b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47ef2a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ef46(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ef4b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ef50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47ef7a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47efa8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -132
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x84__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47efce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -136
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47efdb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x88__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47f00e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -140
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f01b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f44b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f064(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f10e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47f098(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47f109(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f104(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f0e3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f0ff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f104(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f109(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f10e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_47f145(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f239(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f17c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f234(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f1b3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f22f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f1e7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f22a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f21e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f225(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -144
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47f2d0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -148
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f2e2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x94__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x90__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47f30a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -152
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f3b7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -156
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -160
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x9c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47f399(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -164
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f3ab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x98__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47f3f1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -168
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f3fe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47f431(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -172
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f43e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_48065f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x11b78__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72568
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f683(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47f4e4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f67e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x11b54__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 72532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x11b58__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 72536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6f9688___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ne i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = xor i32 %27, 1
  %33 = add nuw nsw i32 %31, %32
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6f9688(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f64c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x6f9688(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f569(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f5c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x725318(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x723698___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x723698_type* @G_0x723698 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x722c78(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x722c78_type* @G_0x722c78 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f647(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47f5eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47f642(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f621(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x7107a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x7107a4_type* @G_0x7107a4 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f63d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6d1f88(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6d1f88_type* @G_0x6d1f88 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f642(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f64c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x722b78___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %7, %6
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x722b78(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_48065a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f719(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6f80a0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f739(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6f80a0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -176
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -36
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f901(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47f773(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47f83f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f83f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f7ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_47f7cd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x7107a4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x7107a4_type* @G_0x7107a4 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f83a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_47f81e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6d1f88___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d1f88_type* @G_0x6d1f88 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f83f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_47f8b0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x725318___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_47f881(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f8a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f8ab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__0x710360(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 11
  store i64 %4, i64* %PC, align 8
  store i32 1, i32* bitcast (%G_0x710360_type* @G_0x710360 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f8be(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11b54__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x11b58__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 72536
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x710000(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x710000_type* @G_0x710000 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x710000___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x710000_type* @G_0x710000 to i32*), align 8
  %6 = sext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cea28___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__rax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sub i64 %3, %4
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %3, %4
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %4, %3
  %19 = xor i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i64 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %3, 63
  %31 = lshr i64 %4, 63
  %32 = xor i64 %31, %30
  %33 = xor i64 %27, %30
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__0x6cea28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x11b54__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x11b58__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47fd91(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x710360(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x710360_type* @G_0x710360 to i32*), align 8
  %6 = add i32 %5, -1
  %7 = icmp eq i32 %5, 0
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47f996(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f9ab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x70fce4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x70fce4_type* @G_0x70fce4 to i32*), align 8
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %7, %6
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47f9d1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47f9de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xcb0__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 3248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x6f8ed8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x6f8ed8_type* @G_0x6f8ed8 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_47fa53(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x725318___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x725318_type* @G_0x725318 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x6___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 6
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47fa31(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fa41(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x6___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 6
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fa9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47fa7e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fa8e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xbc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fd53(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47faee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fd4e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fb18(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fc61(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31d68__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31d68__rip__type* @G_0x31d68__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31d38__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31d38__rip__type* @G_0x31d38__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_0x722b78___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = load i32, i32* bitcast (%G_0x722b78_type* @G_0x722b78 to i32*), align 8
  %7 = sitofp i32 %6 to double
  %8 = bitcast %union.VectorReg* %3 to double*
  store double %7, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_0x6f80a0___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = load i32, i32* bitcast (%G_0x6f80a0_type* @G_0x6f80a0 to i32*), align 8
  %7 = sitofp i32 %6 to double
  %8 = bitcast %union.VectorReg* %3 to double*
  store double %7, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divsd__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fdiv double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11b80__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 72576
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4c8__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 1224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fb7e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6f9348(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6f9348_type* @G_0x6f9348 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fbc3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fc44(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fc0a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_47fc0a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fc3f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_47fc3a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fd49(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47fc8b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47fd44(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fcf2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31be0__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31be0__rip__type* @G_0x31be0__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31bb0__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31bb0__rip__type* @G_0x31bb0__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fd3f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31b8e__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31b8e__rip__type* @G_0x31b8e__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31b5e__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31b5e__rip__type* @G_0x31b5e__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fd44(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fd4e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fd53(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fd74(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fd82(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47fdbb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47fe9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47fe9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6cea30___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea30_type* @G_0x6cea30 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cea38___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea38_type* @G_0x6cea38 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x6f9688___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6f9688_type* @G_0x6f9688 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd___rax__rdx_8____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 3
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = bitcast %union.VectorReg* %3 to double*
  %11 = load double, double* %10, align 1
  %12 = inttoptr i64 %7 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double %11, %13
  store double %14, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd_0x710008___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x710008_type* @G_0x710008 to double*), align 8
  %9 = fadd double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm1__0x6d1280(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x6d1280_type* @G_0x6d1280 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x6d0708(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x6d0708_type* @G_0x6d0708 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_47fe99(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x28__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd___rax__rcx_8____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 3
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = bitcast %union.VectorReg* %3 to double*
  %11 = load double, double* %10, align 1
  %12 = inttoptr i64 %7 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double %11, %13
  store double %14, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__0x7255f8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* bitcast (%G_0x7255f8_type* @G_0x7255f8 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x7255f8___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x7255f8_type* @G_0x7255f8 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5, i64* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8 = bitcast i64* %7 to double*
  store double 0.000000e+00, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_0x7255f8___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x7255f8_type* @G_0x7255f8 to double*), align 8
  %9 = fmul double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd_0x6d0708___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x6d0708_type* @G_0x6d0708 to double*), align 8
  %9 = fadd double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fe22(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47ff6c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6f9350___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6f9350_type* @G_0x6f9350 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_47ff67(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47fef0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdq_0x6cea28___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 10
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* bitcast (%G_0x6cea28_type* @G_0x6cea28 to i64*), align 8
  %7 = sitofp i64 %6 to double
  %8 = bitcast %union.VectorReg* %3 to double*
  store double %7, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divsd_0x6d0708___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 9
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = load double, double* bitcast (%G_0x6d0708_type* @G_0x6d0708 to double*), align 8
  %9 = fdiv double %7, %8
  store double %9, double* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_48001d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -192
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480026(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31801__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31801__rip__type* @G_0x31801__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4800a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jp_.L_4800a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4800ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_ja_.L_4800ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp eq i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0xc8__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jb_.L_48011f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480181(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31721__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31721__rip__type* @G_0x31721__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0xd0__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4801ca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4801d7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_48024a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_48022b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480238(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480290(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_480276(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480283(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4802b6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4802c3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x70fce4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x70fce4_type* @G_0x70fce4 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4802fd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480311(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_480384(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x6___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -6
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 6
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_480362(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480372(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4803ca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4803ad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -236
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4803bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4803f0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -240
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4803fd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_48064b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_48047d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_480646(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4804a7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_480559(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x313d9__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x313d9__rip__type* @G_0x313d9__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x313a9__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x313a9__rip__type* @G_0x313a9__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_48050d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480641(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_480583(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_48063c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4805ea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x312e8__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x312e8__rip__type* @G_0x312e8__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x312b8__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x312b8__rip__type* @G_0x312b8__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480637(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31296__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31296__rip__type* @G_0x31296__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x31266__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x31266__rip__type* @G_0x31266__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_48063c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480646(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_48064b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_48065f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480664(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480669(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_48066e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_480673(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0xf0___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 240
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -241
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
