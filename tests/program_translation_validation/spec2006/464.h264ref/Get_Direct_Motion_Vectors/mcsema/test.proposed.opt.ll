; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x6cc330_type = type <{ [8 x i8] }>
%G_0x6cea08_type = type <{ [8 x i8] }>
%G_0x70fcf0_type = type <{ [8 x i8] }>
%G_0x722cb8_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x6cc330 = local_unnamed_addr global %G_0x6cc330_type zeroinitializer
@G_0x6cea08 = local_unnamed_addr global %G_0x6cea08_type zeroinitializer
@G_0x70fcf0 = local_unnamed_addr global %G_0x70fcf0_type zeroinitializer
@G_0x722cb8 = local_unnamed_addr global %G_0x722cb8_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_44b230.getLuma4x4Neighbour(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_45ca00.SetMotionVectorPredictor(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @Get_Direct_Motion_Vectors(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -536
  store i64 %11, i64* %6, align 8
  %12 = icmp ult i64 %8, 528
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i4266 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
  %41 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %41, i64* %RAX.i4266, align 8
  %42 = add i64 %41, 71928
  %43 = add i64 %10, 25
  store i64 %43, i64* %3, align 8
  %44 = inttoptr i64 %42 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %7, -40
  %47 = add i64 %10, 29
  store i64 %47, i64* %3, align 8
  %48 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %3, align 8
  %50 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %50, i64* %RAX.i4266, align 8
  %51 = add i64 %50, 14168
  %52 = add i64 %49, 15
  store i64 %52, i64* %3, align 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RAX.i4266, align 8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i4448 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
  store i64 %50, i64* %RCX.i4448, align 8
  %56 = add i64 %50, 12
  %57 = add i64 %49, 27
  store i64 %57, i64* %3, align 8
  %58 = inttoptr i64 %56 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = mul nsw i64 %60, 632
  store i64 %61, i64* %RCX.i4448, align 8
  %62 = lshr i64 %61, 63
  %63 = add i64 %61, %54
  %64 = icmp ult i64 %63, %54
  %65 = icmp ult i64 %63, %61
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %14, align 1
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %21, align 1
  %74 = xor i64 %61, %54
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %27, align 1
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %30, align 1
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %33, align 1
  %83 = lshr i64 %54, 63
  %84 = xor i64 %81, %83
  %85 = xor i64 %81, %62
  %86 = add nuw nsw i64 %84, %85
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %39, align 1
  %89 = load i64, i64* %RBP.i, align 8
  %90 = add i64 %89, -80
  %91 = add i64 %49, 41
  store i64 %91, i64* %3, align 8
  %92 = inttoptr i64 %90 to i64*
  store i64 %63, i64* %92, align 8
  %93 = load i64, i64* %3, align 8
  %94 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %94, i64* %RAX.i4266, align 8
  %95 = add i64 %94, 72400
  %96 = add i64 %93, 15
  store i64 %96, i64* %3, align 8
  %97 = inttoptr i64 %95 to i32*
  %98 = load i32, i32* %97, align 4
  store i8 0, i8* %14, align 1
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99)
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %104 = icmp eq i32 %98, 0
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %30, align 1
  %106 = lshr i32 %98, 31
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v285 = select i1 %104, i64 242, i64 21
  %108 = add i64 %93, %.v285
  store i64 %108, i64* %3, align 8
  %.pre173 = load i64, i64* %RBP.i, align 8
  br i1 %104, label %block_.L_472eb9, label %block_472ddc

block_472ddc:                                     ; preds = %entry
  %109 = add i64 %.pre173, -80
  %110 = add i64 %108, 4
  store i64 %110, i64* %3, align 8
  %111 = inttoptr i64 %109 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RAX.i4266, align 8
  %113 = add i64 %112, 532
  %114 = add i64 %108, 11
  store i64 %114, i64* %3, align 8
  %115 = inttoptr i64 %113 to i32*
  %116 = load i32, i32* %115, align 4
  store i8 0, i8* %14, align 1
  %117 = and i32 %116, 255
  %118 = tail call i32 @llvm.ctpop.i32(i32 %117)
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  store i8 %121, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %122 = icmp eq i32 %116, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %30, align 1
  %124 = lshr i32 %116, 31
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v286 = select i1 %122, i64 221, i64 17
  %126 = add i64 %108, %.v286
  store i64 %126, i64* %3, align 8
  br i1 %122, label %block_.L_472eb9, label %block_472ded

block_472ded:                                     ; preds = %block_472ddc
  store i64 2, i64* %RAX.i4266, align 8
  store i64 %94, i64* %RCX.i4448, align 8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i4421 = getelementptr inbounds %union.anon, %union.anon* %127, i64 0, i32 0
  %128 = add i64 %94, 12
  %129 = add i64 %126, 16
  store i64 %129, i64* %3, align 8
  %130 = inttoptr i64 %128 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = zext i32 %131 to i64
  store i64 %132, i64* %RDX.i4421, align 8
  %133 = add i64 %.pre173, -232
  %134 = add i64 %126, 22
  store i64 %134, i64* %3, align 8
  %135 = inttoptr i64 %133 to i32*
  store i32 2, i32* %135, align 4
  %EDX.i4414 = bitcast %union.anon* %127 to i32*
  %136 = load i32, i32* %EDX.i4414, align 4
  %137 = zext i32 %136 to i64
  %138 = load i64, i64* %3, align 8
  store i64 %137, i64* %RAX.i4266, align 8
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %140 = sext i32 %136 to i64
  %141 = lshr i64 %140, 32
  store i64 %141, i64* %139, align 8
  %RSI.i4410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %142 = load i64, i64* %RBP.i, align 8
  %143 = add i64 %142, -232
  %144 = add i64 %138, 9
  store i64 %144, i64* %3, align 8
  %145 = inttoptr i64 %143 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = zext i32 %146 to i64
  store i64 %147, i64* %RSI.i4410, align 8
  %148 = add i64 %138, 11
  store i64 %148, i64* %3, align 8
  %149 = sext i32 %146 to i64
  %150 = shl nuw i64 %141, 32
  %151 = or i64 %150, %137
  %152 = sdiv i64 %151, %149
  %153 = shl i64 %152, 32
  %154 = ashr exact i64 %153, 32
  %155 = icmp eq i64 %152, %154
  br i1 %155, label %158, label %156

; <label>:156:                                    ; preds = %block_472ded
  %157 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %148, %struct.Memory* %2)
  %.pre = load i32, i32* %EDX.i4414, align 4
  %.pre171 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit4406

; <label>:158:                                    ; preds = %block_472ded
  %159 = srem i64 %151, %149
  %160 = and i64 %152, 4294967295
  store i64 %160, i64* %RAX.i4266, align 8
  %161 = and i64 %159, 4294967295
  store i64 %161, i64* %RDX.i4421, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %162 = trunc i64 %159 to i32
  br label %routine_idivl__esi.exit4406

routine_idivl__esi.exit4406:                      ; preds = %158, %156
  %163 = phi i64 [ %.pre171, %156 ], [ %148, %158 ]
  %164 = phi i32 [ %.pre, %156 ], [ %162, %158 ]
  %165 = phi %struct.Memory* [ %157, %156 ], [ %2, %158 ]
  store i8 0, i8* %14, align 1
  %166 = and i32 %164, 255
  %167 = tail call i32 @llvm.ctpop.i32(i32 %166)
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  store i8 %170, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %171 = icmp eq i32 %164, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %30, align 1
  %173 = lshr i32 %164, 31
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v287 = select i1 %171, i64 90, i64 9
  %175 = add i64 %163, %.v287
  %176 = add i64 %175, 8
  store i64 %176, i64* %3, align 8
  %177 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %177, i64* %RAX.i4266, align 8
  br i1 %171, label %block_.L_472e68, label %block_472e17

block_472e17:                                     ; preds = %routine_idivl__esi.exit4406
  %178 = add i64 %177, 4856
  %179 = add i64 %175, 15
  store i64 %179, i64* %3, align 8
  %180 = inttoptr i64 %178 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = load i64, i64* %RBP.i, align 8
  %183 = add i64 %182, -48
  %184 = add i64 %175, 19
  store i64 %184, i64* %3, align 8
  %185 = inttoptr i64 %183 to i64*
  store i64 %181, i64* %185, align 8
  %186 = load i64, i64* %3, align 8
  %187 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %187, i64* %RAX.i4266, align 8
  %188 = add i64 %187, 4848
  %189 = add i64 %186, 15
  store i64 %189, i64* %3, align 8
  %190 = inttoptr i64 %188 to i64*
  %191 = load i64, i64* %190, align 8
  %192 = load i64, i64* %RBP.i, align 8
  %193 = add i64 %192, -56
  %194 = add i64 %186, 19
  store i64 %194, i64* %3, align 8
  %195 = inttoptr i64 %193 to i64*
  store i64 %191, i64* %195, align 8
  %196 = load i64, i64* %3, align 8
  %197 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %197, i64* %RAX.i4266, align 8
  %198 = add i64 %197, 4832
  %199 = add i64 %196, 15
  store i64 %199, i64* %3, align 8
  %200 = inttoptr i64 %198 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = load i64, i64* %RBP.i, align 8
  %203 = add i64 %202, -64
  %204 = add i64 %196, 19
  store i64 %204, i64* %3, align 8
  %205 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %205, align 8
  %206 = load i64, i64* %3, align 8
  %207 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %207, i64* %RAX.i4266, align 8
  %208 = add i64 %207, 4840
  %209 = add i64 %206, 15
  store i64 %209, i64* %3, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX.i4266, align 8
  %212 = load i64, i64* %RBP.i, align 8
  %213 = add i64 %212, -72
  %214 = add i64 %206, 19
  store i64 %214, i64* %3, align 8
  %215 = inttoptr i64 %213 to i64*
  store i64 %211, i64* %215, align 8
  %216 = load i64, i64* %3, align 8
  %217 = add i64 %216, 81
  store i64 %217, i64* %3, align 8
  br label %block_.L_472eb4

block_.L_472e68:                                  ; preds = %routine_idivl__esi.exit4406
  %218 = add i64 %177, 3240
  %219 = add i64 %175, 15
  store i64 %219, i64* %3, align 8
  %220 = inttoptr i64 %218 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = load i64, i64* %RBP.i, align 8
  %223 = add i64 %222, -48
  %224 = add i64 %175, 19
  store i64 %224, i64* %3, align 8
  %225 = inttoptr i64 %223 to i64*
  store i64 %221, i64* %225, align 8
  %226 = load i64, i64* %3, align 8
  %227 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %227, i64* %RAX.i4266, align 8
  %228 = add i64 %227, 3232
  %229 = add i64 %226, 15
  store i64 %229, i64* %3, align 8
  %230 = inttoptr i64 %228 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = load i64, i64* %RBP.i, align 8
  %233 = add i64 %232, -56
  %234 = add i64 %226, 19
  store i64 %234, i64* %3, align 8
  %235 = inttoptr i64 %233 to i64*
  store i64 %231, i64* %235, align 8
  %236 = load i64, i64* %3, align 8
  %237 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %237, i64* %RAX.i4266, align 8
  %238 = add i64 %237, 3216
  %239 = add i64 %236, 15
  store i64 %239, i64* %3, align 8
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = load i64, i64* %RBP.i, align 8
  %243 = add i64 %242, -64
  %244 = add i64 %236, 19
  store i64 %244, i64* %3, align 8
  %245 = inttoptr i64 %243 to i64*
  store i64 %241, i64* %245, align 8
  %246 = load i64, i64* %3, align 8
  %247 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %247, i64* %RAX.i4266, align 8
  %248 = add i64 %247, 3224
  %249 = add i64 %246, 15
  store i64 %249, i64* %3, align 8
  %250 = inttoptr i64 %248 to i64*
  %251 = load i64, i64* %250, align 8
  store i64 %251, i64* %RAX.i4266, align 8
  %252 = load i64, i64* %RBP.i, align 8
  %253 = add i64 %252, -72
  %254 = add i64 %246, 19
  store i64 %254, i64* %3, align 8
  %255 = inttoptr i64 %253 to i64*
  store i64 %251, i64* %255, align 8
  %.pre172 = load i64, i64* %3, align 8
  br label %block_.L_472eb4

block_.L_472eb4:                                  ; preds = %block_.L_472e68, %block_472e17
  %256 = phi i64 [ %.pre172, %block_.L_472e68 ], [ %217, %block_472e17 ]
  %257 = add i64 %256, 81
  store i64 %257, i64* %3, align 8
  br label %block_.L_472f05

block_.L_472eb9:                                  ; preds = %entry, %block_472ddc
  %258 = phi i64 [ %126, %block_472ddc ], [ %108, %entry ]
  %259 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %259, i64* %RAX.i4266, align 8
  %260 = add i64 %259, 1624
  %261 = add i64 %258, 15
  store i64 %261, i64* %3, align 8
  %262 = inttoptr i64 %260 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = add i64 %.pre173, -48
  %265 = add i64 %258, 19
  store i64 %265, i64* %3, align 8
  %266 = inttoptr i64 %264 to i64*
  store i64 %263, i64* %266, align 8
  %267 = load i64, i64* %3, align 8
  %268 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %268, i64* %RAX.i4266, align 8
  %269 = add i64 %268, 1616
  %270 = add i64 %267, 15
  store i64 %270, i64* %3, align 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = load i64, i64* %RBP.i, align 8
  %274 = add i64 %273, -56
  %275 = add i64 %267, 19
  store i64 %275, i64* %3, align 8
  %276 = inttoptr i64 %274 to i64*
  store i64 %272, i64* %276, align 8
  %277 = load i64, i64* %3, align 8
  %278 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %278, i64* %RAX.i4266, align 8
  %279 = add i64 %278, 1600
  %280 = add i64 %277, 15
  store i64 %280, i64* %3, align 8
  %281 = inttoptr i64 %279 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = load i64, i64* %RBP.i, align 8
  %284 = add i64 %283, -64
  %285 = add i64 %277, 19
  store i64 %285, i64* %3, align 8
  %286 = inttoptr i64 %284 to i64*
  store i64 %282, i64* %286, align 8
  %287 = load i64, i64* %3, align 8
  %288 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %288, i64* %RAX.i4266, align 8
  %289 = add i64 %288, 1608
  %290 = add i64 %287, 15
  store i64 %290, i64* %3, align 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %RAX.i4266, align 8
  %293 = load i64, i64* %RBP.i, align 8
  %294 = add i64 %293, -72
  %295 = add i64 %287, 19
  store i64 %295, i64* %3, align 8
  %296 = inttoptr i64 %294 to i64*
  store i64 %292, i64* %296, align 8
  %.pre174 = load i64, i64* %3, align 8
  br label %block_.L_472f05

block_.L_472f05:                                  ; preds = %block_.L_472eb9, %block_.L_472eb4
  %297 = phi i64 [ %.pre174, %block_.L_472eb9 ], [ %257, %block_.L_472eb4 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_.L_472eb9 ], [ %165, %block_.L_472eb4 ]
  %298 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %298, i64* %RAX.i4266, align 8
  %299 = add i64 %298, 71996
  %300 = add i64 %297, 15
  store i64 %300, i64* %3, align 8
  %301 = inttoptr i64 %299 to i32*
  %302 = load i32, i32* %301, align 4
  store i8 0, i8* %14, align 1
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303)
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %308 = icmp eq i32 %302, 0
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %30, align 1
  %310 = lshr i32 %302, 31
  %311 = trunc i32 %310 to i8
  store i8 %311, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v288 = select i1 %308, i64 7035, i64 21
  %312 = add i64 %297, %.v288
  store i64 %312, i64* %3, align 8
  br i1 %308, label %block_.L_474a80, label %block_472f1a

block_472f1a:                                     ; preds = %block_.L_472f05
  %EAX.i4308 = bitcast %union.anon* %40 to i32*
  store i64 0, i64* %RAX.i4266, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 4294967295, i64* %RCX.i4448, align 8
  %R9.i4304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %313 = load i64, i64* %RBP.i, align 8
  %314 = add i64 %313, -136
  store i64 %314, i64* %R9.i4304, align 8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i4301 = getelementptr inbounds %union.anon, %union.anon* %315, i64 0, i32 0
  store i64 4, i64* %RDX.i4301, align 8
  %RSI.i4299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  store i64 4, i64* %RSI.i4299, align 8
  %RDI.i4295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %316 = add i64 %313, -108
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8.i4293 = getelementptr inbounds %union.anon, %union.anon* %317, i64 0, i32 0
  %318 = add i64 %313, -104
  store i64 %318, i64* %R8.i4293, align 8
  %319 = add i64 %313, -240
  %320 = add i64 %312, 36
  store i64 %320, i64* %3, align 8
  %321 = inttoptr i64 %319 to i64*
  store i64 %316, i64* %321, align 8
  %322 = load i64, i64* %R8.i4293, align 8
  %323 = load i64, i64* %3, align 8
  store i64 %322, i64* %RDI.i4295, align 8
  %324 = load i64, i64* %RBP.i, align 8
  %325 = add i64 %324, -248
  %326 = load i64, i64* %RSI.i4299, align 8
  %327 = add i64 %323, 10
  store i64 %327, i64* %3, align 8
  %328 = inttoptr i64 %325 to i64*
  store i64 %326, i64* %328, align 8
  %329 = load i32, i32* %EAX.i4308, align 4
  %330 = zext i32 %329 to i64
  %331 = load i64, i64* %3, align 8
  store i64 %330, i64* %RSI.i4299, align 8
  %332 = load i64, i64* %RBP.i, align 8
  %333 = add i64 %332, -248
  %334 = add i64 %331, 9
  store i64 %334, i64* %3, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RDX.i4301, align 8
  %337 = add i64 %332, -252
  %338 = add i64 %331, 15
  store i64 %338, i64* %3, align 8
  %339 = inttoptr i64 %337 to i32*
  store i32 %329, i32* %339, align 4
  %ECX.i4272 = bitcast %union.anon* %55 to i32*
  %340 = load i64, i64* %RBP.i, align 8
  %341 = add i64 %340, -256
  %342 = load i32, i32* %ECX.i4272, align 4
  %343 = load i64, i64* %3, align 8
  %344 = add i64 %343, 6
  store i64 %344, i64* %3, align 8
  %345 = inttoptr i64 %341 to i32*
  store i32 %342, i32* %345, align 4
  %346 = load i64, i64* %RBP.i, align 8
  %347 = add i64 %346, -264
  %348 = load i64, i64* %R9.i4304, align 8
  %349 = load i64, i64* %3, align 8
  %350 = add i64 %349, 7
  store i64 %350, i64* %3, align 8
  %351 = inttoptr i64 %347 to i64*
  store i64 %348, i64* %351, align 8
  %352 = load i64, i64* %3, align 8
  %353 = add i64 %352, -466676
  %354 = add i64 %352, 5
  %355 = load i64, i64* %6, align 8
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %354, i64* %357, align 8
  store i64 %356, i64* %6, align 8
  store i64 %353, i64* %3, align 8
  %358 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %MEMORY.2)
  %359 = load i64, i64* %RBP.i, align 8
  %360 = add i64 %359, -240
  %361 = load i64, i64* %3, align 8
  %362 = add i64 %361, 7
  store i64 %362, i64* %3, align 8
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RDX.i4301, align 8
  store i64 %364, i64* %RDI.i4295, align 8
  %365 = add i64 %359, -252
  %366 = add i64 %361, 16
  store i64 %366, i64* %3, align 8
  %367 = inttoptr i64 %365 to i32*
  %368 = load i32, i32* %367, align 4
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %RSI.i4299, align 8
  %370 = add i64 %359, -248
  %371 = add i64 %361, 23
  store i64 %371, i64* %3, align 8
  %372 = inttoptr i64 %370 to i64*
  %373 = load i64, i64* %372, align 8
  store i64 %373, i64* %RDX.i4301, align 8
  %374 = add i64 %361, -466681
  %375 = add i64 %361, 28
  %376 = load i64, i64* %6, align 8
  %377 = add i64 %376, -8
  %378 = inttoptr i64 %377 to i64*
  store i64 %375, i64* %378, align 8
  store i64 %377, i64* %6, align 8
  store i64 %374, i64* %3, align 8
  %379 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %358)
  %380 = load i64, i64* %3, align 8
  %381 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %381, i64* %RDX.i4301, align 8
  %382 = add i64 %381, 12
  %383 = add i64 %380, 11
  store i64 %383, i64* %3, align 8
  %384 = inttoptr i64 %382 to i32*
  %385 = load i32, i32* %384, align 4
  %386 = zext i32 %385 to i64
  store i64 %386, i64* %RDI.i4295, align 8
  %387 = load i64, i64* %RBP.i, align 8
  %388 = add i64 %387, -252
  %389 = add i64 %380, 17
  store i64 %389, i64* %3, align 8
  %390 = inttoptr i64 %388 to i32*
  %391 = load i32, i32* %390, align 4
  %392 = zext i32 %391 to i64
  store i64 %392, i64* %RSI.i4299, align 8
  %393 = add i64 %380, 23
  store i64 %393, i64* %3, align 8
  %394 = load i32, i32* %390, align 4
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RDX.i4301, align 8
  %396 = add i64 %387, -256
  %397 = add i64 %380, 29
  store i64 %397, i64* %3, align 8
  %398 = inttoptr i64 %396 to i32*
  %399 = load i32, i32* %398, align 4
  %400 = zext i32 %399 to i64
  store i64 %400, i64* %RCX.i4448, align 8
  %R8D.i4234 = bitcast %union.anon* %317 to i32*
  %401 = add i64 %380, 36
  store i64 %401, i64* %3, align 8
  %402 = load i32, i32* %390, align 4
  %403 = zext i32 %402 to i64
  store i64 %403, i64* %R8.i4293, align 8
  %404 = add i64 %387, -264
  %405 = add i64 %380, 43
  store i64 %405, i64* %3, align 8
  %406 = inttoptr i64 %404 to i64*
  %407 = load i64, i64* %406, align 8
  store i64 %407, i64* %R9.i4304, align 8
  %408 = add i64 %380, -163157
  %409 = add i64 %380, 48
  %410 = load i64, i64* %6, align 8
  %411 = add i64 %410, -8
  %412 = inttoptr i64 %411 to i64*
  store i64 %409, i64* %412, align 8
  store i64 %411, i64* %6, align 8
  store i64 %408, i64* %3, align 8
  %call2_472fb0 = tail call %struct.Memory* @sub_44b230.getLuma4x4Neighbour(%struct.State* nonnull %0, i64 %408, %struct.Memory* %379)
  %413 = load i64, i64* %3, align 8
  store i64 0, i64* %RAX.i4266, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 4294967295, i64* %R8.i4293, align 8
  %414 = load i64, i64* %RBP.i, align 8
  %415 = add i64 %414, -160
  store i64 %415, i64* %R9.i4304, align 8
  %R10.i4220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %416 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %416, i64* %R10.i4220, align 8
  %417 = add i64 %416, 12
  %418 = add i64 %413, 27
  store i64 %418, i64* %3, align 8
  %419 = inttoptr i64 %417 to i32*
  %420 = load i32, i32* %419, align 4
  %421 = zext i32 %420 to i64
  store i64 %421, i64* %RDI.i4295, align 8
  store i64 0, i64* %RSI.i4299, align 8
  store i64 0, i64* %RDX.i4301, align 8
  store i64 0, i64* %RCX.i4448, align 8
  %422 = add i64 %413, -163205
  %423 = add i64 %413, 38
  %424 = load i64, i64* %6, align 8
  %425 = add i64 %424, -8
  %426 = inttoptr i64 %425 to i64*
  store i64 %423, i64* %426, align 8
  store i64 %425, i64* %6, align 8
  store i64 %422, i64* %3, align 8
  %call2_472fd6 = tail call %struct.Memory* @sub_44b230.getLuma4x4Neighbour(%struct.State* nonnull %0, i64 %422, %struct.Memory* %call2_472fb0)
  %427 = load i64, i64* %3, align 8
  store i64 0, i64* %RAX.i4266, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 16, i64* %RCX.i4448, align 8
  store i64 4294967295, i64* %R8.i4293, align 8
  %428 = load i64, i64* %RBP.i, align 8
  %429 = add i64 %428, -208
  store i64 %429, i64* %R9.i4304, align 8
  %430 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %430, i64* %R10.i4220, align 8
  %431 = add i64 %430, 12
  %432 = add i64 %427, 32
  store i64 %432, i64* %3, align 8
  %433 = inttoptr i64 %431 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = zext i32 %434 to i64
  store i64 %435, i64* %RDI.i4295, align 8
  store i64 0, i64* %RSI.i4299, align 8
  store i64 0, i64* %RDX.i4301, align 8
  %436 = add i64 %427, -163243
  %437 = add i64 %427, 41
  %438 = load i64, i64* %6, align 8
  %439 = add i64 %438, -8
  %440 = inttoptr i64 %439 to i64*
  store i64 %437, i64* %440, align 8
  store i64 %439, i64* %6, align 8
  store i64 %436, i64* %3, align 8
  %call2_472fff = tail call %struct.Memory* @sub_44b230.getLuma4x4Neighbour(%struct.State* nonnull %0, i64 %436, %struct.Memory* %call2_472fd6)
  %441 = load i64, i64* %3, align 8
  store i64 0, i64* %RAX.i4266, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 4294967295, i64* %RCX.i4448, align 8
  %442 = load i64, i64* %RBP.i, align 8
  %443 = add i64 %442, -184
  store i64 %443, i64* %R9.i4304, align 8
  %444 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %444, i64* %R10.i4220, align 8
  %445 = add i64 %444, 12
  %446 = add i64 %441, 26
  store i64 %446, i64* %3, align 8
  %447 = inttoptr i64 %445 to i32*
  %448 = load i32, i32* %447, align 4
  %449 = zext i32 %448 to i64
  store i64 %449, i64* %RDI.i4295, align 8
  store i64 0, i64* %RSI.i4299, align 8
  store i64 0, i64* %RDX.i4301, align 8
  %450 = add i64 %442, -268
  %451 = add i64 %441, 36
  store i64 %451, i64* %3, align 8
  %452 = inttoptr i64 %450 to i32*
  store i32 -1, i32* %452, align 4
  %453 = load i64, i64* %RBP.i, align 8
  %454 = add i64 %453, -268
  %455 = load i64, i64* %3, align 8
  %456 = add i64 %455, 7
  store i64 %456, i64* %3, align 8
  %457 = inttoptr i64 %454 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %R8.i4293, align 8
  %460 = add i64 %455, -163320
  %461 = add i64 %455, 12
  %462 = load i64, i64* %6, align 8
  %463 = add i64 %462, -8
  %464 = inttoptr i64 %463 to i64*
  store i64 %461, i64* %464, align 8
  store i64 %463, i64* %6, align 8
  store i64 %460, i64* %3, align 8
  %call2_47302f = tail call %struct.Memory* @sub_44b230.getLuma4x4Neighbour(%struct.State* nonnull %0, i64 %460, %struct.Memory* %call2_472fff)
  %465 = load i64, i64* %3, align 8
  %466 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %466, i64* %R9.i4304, align 8
  %467 = add i64 %466, 72400
  %468 = add i64 %465, 16
  store i64 %468, i64* %3, align 8
  %469 = inttoptr i64 %467 to i32*
  %470 = load i32, i32* %469, align 4
  store i8 0, i8* %14, align 1
  %471 = and i32 %470, 255
  %472 = tail call i32 @llvm.ctpop.i32(i32 %471)
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = xor i8 %474, 1
  store i8 %475, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %476 = icmp eq i32 %470, 0
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %30, align 1
  %478 = lshr i32 %470, 31
  %479 = trunc i32 %478 to i8
  store i8 %479, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v283 = select i1 %476, i64 22, i64 751
  %480 = add i64 %465, %.v283
  store i64 %480, i64* %3, align 8
  %481 = load i64, i64* %RBP.i, align 8
  br i1 %476, label %block_47304a, label %block_.L_473323

block_47304a:                                     ; preds = %block_472f1a
  %482 = add i64 %481, -136
  %483 = add i64 %480, 7
  store i64 %483, i64* %3, align 8
  %484 = inttoptr i64 %482 to i32*
  %485 = load i32, i32* %484, align 4
  store i8 0, i8* %14, align 1
  %486 = and i32 %485, 255
  %487 = tail call i32 @llvm.ctpop.i32(i32 %486)
  %488 = trunc i32 %487 to i8
  %489 = and i8 %488, 1
  %490 = xor i8 %489, 1
  store i8 %490, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %491 = icmp eq i32 %485, 0
  %492 = zext i1 %491 to i8
  store i8 %492, i8* %30, align 1
  %493 = lshr i32 %485, 31
  %494 = trunc i32 %493 to i8
  store i8 %494, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v335 = select i1 %491, i64 58, i64 13
  %495 = add i64 %480, %.v335
  store i64 %495, i64* %3, align 8
  br i1 %491, label %block_.L_473084, label %block_473057

block_473057:                                     ; preds = %block_47304a
  %496 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %496, i64* %RAX.i4266, align 8
  %497 = add i64 %496, 6480
  %498 = add i64 %495, 15
  store i64 %498, i64* %3, align 8
  %499 = inttoptr i64 %497 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %RAX.i4266, align 8
  %501 = add i64 %495, 18
  store i64 %501, i64* %3, align 8
  %502 = inttoptr i64 %500 to i64*
  %503 = load i64, i64* %502, align 8
  store i64 %503, i64* %RAX.i4266, align 8
  %504 = add i64 %481, -120
  %505 = add i64 %495, 22
  store i64 %505, i64* %3, align 8
  %506 = inttoptr i64 %504 to i32*
  %507 = load i32, i32* %506, align 4
  %508 = sext i32 %507 to i64
  store i64 %508, i64* %RCX.i4448, align 8
  %509 = shl nsw i64 %508, 3
  %510 = add i64 %509, %503
  %511 = add i64 %495, 26
  store i64 %511, i64* %3, align 8
  %512 = inttoptr i64 %510 to i64*
  %513 = load i64, i64* %512, align 8
  store i64 %513, i64* %RAX.i4266, align 8
  %514 = add i64 %481, -116
  %515 = add i64 %495, 30
  store i64 %515, i64* %3, align 8
  %516 = inttoptr i64 %514 to i32*
  %517 = load i32, i32* %516, align 4
  %518 = sext i32 %517 to i64
  store i64 %518, i64* %RCX.i4448, align 8
  %519 = shl nsw i64 %518, 1
  %520 = add i64 %519, %513
  %521 = add i64 %495, 34
  store i64 %521, i64* %3, align 8
  %522 = inttoptr i64 %520 to i16*
  %523 = load i16, i16* %522, align 2
  %524 = sext i16 %523 to i64
  %525 = and i64 %524, 4294967295
  store i64 %525, i64* %RDX.i4301, align 8
  %526 = add i64 %481, -272
  %527 = sext i16 %523 to i32
  %528 = add i64 %495, 40
  store i64 %528, i64* %3, align 8
  %529 = inttoptr i64 %526 to i32*
  store i32 %527, i32* %529, align 4
  %530 = load i64, i64* %3, align 8
  %531 = add i64 %530, 21
  br label %block_.L_473094

block_.L_473084:                                  ; preds = %block_47304a
  store i64 4294967295, i64* %RAX.i4266, align 8
  %532 = add i64 %481, -272
  %533 = add i64 %495, 11
  store i64 %533, i64* %3, align 8
  %534 = inttoptr i64 %532 to i32*
  store i32 -1, i32* %534, align 4
  %535 = load i64, i64* %3, align 8
  %536 = add i64 %535, 5
  store i64 %536, i64* %3, align 8
  br label %block_.L_473094

block_.L_473094:                                  ; preds = %block_.L_473084, %block_473057
  %storemerge = phi i64 [ %531, %block_473057 ], [ %536, %block_.L_473084 ]
  %537 = load i64, i64* %RBP.i, align 8
  %538 = add i64 %537, -272
  %539 = add i64 %storemerge, 6
  store i64 %539, i64* %3, align 8
  %540 = inttoptr i64 %538 to i32*
  %541 = load i32, i32* %540, align 4
  %542 = zext i32 %541 to i64
  store i64 %542, i64* %RAX.i4266, align 8
  %CX.i4119 = bitcast %union.anon* %55 to i16*
  %543 = trunc i32 %541 to i16
  store i16 %543, i16* %CX.i4119, align 2
  %544 = add i64 %537, -82
  %545 = add i64 %storemerge, 13
  store i64 %545, i64* %3, align 8
  %546 = inttoptr i64 %544 to i16*
  store i16 %543, i16* %546, align 2
  %547 = load i64, i64* %RBP.i, align 8
  %548 = add i64 %547, -160
  %549 = load i64, i64* %3, align 8
  %550 = add i64 %549, 7
  store i64 %550, i64* %3, align 8
  %551 = inttoptr i64 %548 to i32*
  %552 = load i32, i32* %551, align 4
  store i8 0, i8* %14, align 1
  %553 = and i32 %552, 255
  %554 = tail call i32 @llvm.ctpop.i32(i32 %553)
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = xor i8 %556, 1
  store i8 %557, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %558 = icmp eq i32 %552, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %30, align 1
  %560 = lshr i32 %552, 31
  %561 = trunc i32 %560 to i8
  store i8 %561, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v336 = select i1 %558, i64 64, i64 13
  %562 = add i64 %549, %.v336
  store i64 %562, i64* %3, align 8
  br i1 %558, label %block_.L_4730e1, label %block_4730ae

block_4730ae:                                     ; preds = %block_.L_473094
  %563 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %563, i64* %RAX.i4266, align 8
  %564 = add i64 %563, 6480
  %565 = add i64 %562, 15
  store i64 %565, i64* %3, align 8
  %566 = inttoptr i64 %564 to i64*
  %567 = load i64, i64* %566, align 8
  store i64 %567, i64* %RAX.i4266, align 8
  %568 = add i64 %562, 18
  store i64 %568, i64* %3, align 8
  %569 = inttoptr i64 %567 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %RAX.i4266, align 8
  %571 = add i64 %547, -144
  %572 = add i64 %562, 25
  store i64 %572, i64* %3, align 8
  %573 = inttoptr i64 %571 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = sext i32 %574 to i64
  store i64 %575, i64* %RCX.i4448, align 8
  %576 = shl nsw i64 %575, 3
  %577 = add i64 %576, %570
  %578 = add i64 %562, 29
  store i64 %578, i64* %3, align 8
  %579 = inttoptr i64 %577 to i64*
  %580 = load i64, i64* %579, align 8
  store i64 %580, i64* %RAX.i4266, align 8
  %581 = add i64 %547, -140
  %582 = add i64 %562, 36
  store i64 %582, i64* %3, align 8
  %583 = inttoptr i64 %581 to i32*
  %584 = load i32, i32* %583, align 4
  %585 = sext i32 %584 to i64
  store i64 %585, i64* %RCX.i4448, align 8
  %586 = shl nsw i64 %585, 1
  %587 = add i64 %586, %580
  %588 = add i64 %562, 40
  store i64 %588, i64* %3, align 8
  %589 = inttoptr i64 %587 to i16*
  %590 = load i16, i16* %589, align 2
  %591 = sext i16 %590 to i64
  %592 = and i64 %591, 4294967295
  store i64 %592, i64* %RDX.i4301, align 8
  %593 = add i64 %547, -276
  %594 = sext i16 %590 to i32
  %595 = add i64 %562, 46
  store i64 %595, i64* %3, align 8
  %596 = inttoptr i64 %593 to i32*
  store i32 %594, i32* %596, align 4
  %597 = load i64, i64* %3, align 8
  %598 = add i64 %597, 21
  br label %block_.L_4730f1

block_.L_4730e1:                                  ; preds = %block_.L_473094
  store i64 4294967295, i64* %RAX.i4266, align 8
  %599 = add i64 %547, -276
  %600 = add i64 %562, 11
  store i64 %600, i64* %3, align 8
  %601 = inttoptr i64 %599 to i32*
  store i32 -1, i32* %601, align 4
  %602 = load i64, i64* %3, align 8
  %603 = add i64 %602, 5
  store i64 %603, i64* %3, align 8
  br label %block_.L_4730f1

block_.L_4730f1:                                  ; preds = %block_.L_4730e1, %block_4730ae
  %storemerge101 = phi i64 [ %598, %block_4730ae ], [ %603, %block_.L_4730e1 ]
  %604 = load i64, i64* %RBP.i, align 8
  %605 = add i64 %604, -276
  %606 = add i64 %storemerge101, 6
  store i64 %606, i64* %3, align 8
  %607 = inttoptr i64 %605 to i32*
  %608 = load i32, i32* %607, align 4
  %609 = zext i32 %608 to i64
  store i64 %609, i64* %RAX.i4266, align 8
  %610 = trunc i32 %608 to i16
  store i16 %610, i16* %CX.i4119, align 2
  %611 = add i64 %604, -84
  %612 = add i64 %storemerge101, 13
  store i64 %612, i64* %3, align 8
  %613 = inttoptr i64 %611 to i16*
  store i16 %610, i16* %613, align 2
  %614 = load i64, i64* %RBP.i, align 8
  %615 = add i64 %614, -184
  %616 = load i64, i64* %3, align 8
  %617 = add i64 %616, 7
  store i64 %617, i64* %3, align 8
  %618 = inttoptr i64 %615 to i32*
  %619 = load i32, i32* %618, align 4
  store i8 0, i8* %14, align 1
  %620 = and i32 %619, 255
  %621 = tail call i32 @llvm.ctpop.i32(i32 %620)
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  store i8 %624, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %625 = icmp eq i32 %619, 0
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %30, align 1
  %627 = lshr i32 %619, 31
  %628 = trunc i32 %627 to i8
  store i8 %628, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v337 = select i1 %625, i64 64, i64 13
  %629 = add i64 %616, %.v337
  store i64 %629, i64* %3, align 8
  br i1 %625, label %block_.L_47313e, label %block_47310b

block_47310b:                                     ; preds = %block_.L_4730f1
  %630 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %630, i64* %RAX.i4266, align 8
  %631 = add i64 %630, 6480
  %632 = add i64 %629, 15
  store i64 %632, i64* %3, align 8
  %633 = inttoptr i64 %631 to i64*
  %634 = load i64, i64* %633, align 8
  store i64 %634, i64* %RAX.i4266, align 8
  %635 = add i64 %629, 18
  store i64 %635, i64* %3, align 8
  %636 = inttoptr i64 %634 to i64*
  %637 = load i64, i64* %636, align 8
  store i64 %637, i64* %RAX.i4266, align 8
  %638 = add i64 %614, -168
  %639 = add i64 %629, 25
  store i64 %639, i64* %3, align 8
  %640 = inttoptr i64 %638 to i32*
  %641 = load i32, i32* %640, align 4
  %642 = sext i32 %641 to i64
  store i64 %642, i64* %RCX.i4448, align 8
  %643 = shl nsw i64 %642, 3
  %644 = add i64 %643, %637
  %645 = add i64 %629, 29
  store i64 %645, i64* %3, align 8
  %646 = inttoptr i64 %644 to i64*
  %647 = load i64, i64* %646, align 8
  store i64 %647, i64* %RAX.i4266, align 8
  %648 = add i64 %614, -164
  %649 = add i64 %629, 36
  store i64 %649, i64* %3, align 8
  %650 = inttoptr i64 %648 to i32*
  %651 = load i32, i32* %650, align 4
  %652 = sext i32 %651 to i64
  store i64 %652, i64* %RCX.i4448, align 8
  %653 = shl nsw i64 %652, 1
  %654 = add i64 %653, %647
  %655 = add i64 %629, 40
  store i64 %655, i64* %3, align 8
  %656 = inttoptr i64 %654 to i16*
  %657 = load i16, i16* %656, align 2
  %658 = sext i16 %657 to i64
  %659 = and i64 %658, 4294967295
  store i64 %659, i64* %RDX.i4301, align 8
  %660 = add i64 %614, -280
  %661 = sext i16 %657 to i32
  %662 = add i64 %629, 46
  store i64 %662, i64* %3, align 8
  %663 = inttoptr i64 %660 to i32*
  store i32 %661, i32* %663, align 4
  %664 = load i64, i64* %3, align 8
  %665 = add i64 %664, 21
  br label %block_.L_47314e

block_.L_47313e:                                  ; preds = %block_.L_4730f1
  store i64 4294967295, i64* %RAX.i4266, align 8
  %666 = add i64 %614, -280
  %667 = add i64 %629, 11
  store i64 %667, i64* %3, align 8
  %668 = inttoptr i64 %666 to i32*
  store i32 -1, i32* %668, align 4
  %669 = load i64, i64* %3, align 8
  %670 = add i64 %669, 5
  store i64 %670, i64* %3, align 8
  br label %block_.L_47314e

block_.L_47314e:                                  ; preds = %block_.L_47313e, %block_47310b
  %storemerge102 = phi i64 [ %665, %block_47310b ], [ %670, %block_.L_47313e ]
  %671 = load i64, i64* %RBP.i, align 8
  %672 = add i64 %671, -280
  %673 = add i64 %storemerge102, 6
  store i64 %673, i64* %3, align 8
  %674 = inttoptr i64 %672 to i32*
  %675 = load i32, i32* %674, align 4
  %676 = zext i32 %675 to i64
  store i64 %676, i64* %RAX.i4266, align 8
  %677 = trunc i32 %675 to i16
  store i16 %677, i16* %CX.i4119, align 2
  %678 = add i64 %671, -86
  %679 = add i64 %storemerge102, 13
  store i64 %679, i64* %3, align 8
  %680 = inttoptr i64 %678 to i16*
  store i16 %677, i16* %680, align 2
  %681 = load i64, i64* %RBP.i, align 8
  %682 = add i64 %681, -208
  %683 = load i64, i64* %3, align 8
  %684 = add i64 %683, 7
  store i64 %684, i64* %3, align 8
  %685 = inttoptr i64 %682 to i32*
  %686 = load i32, i32* %685, align 4
  store i8 0, i8* %14, align 1
  %687 = and i32 %686, 255
  %688 = tail call i32 @llvm.ctpop.i32(i32 %687)
  %689 = trunc i32 %688 to i8
  %690 = and i8 %689, 1
  %691 = xor i8 %690, 1
  store i8 %691, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %692 = icmp eq i32 %686, 0
  %693 = zext i1 %692 to i8
  store i8 %693, i8* %30, align 1
  %694 = lshr i32 %686, 31
  %695 = trunc i32 %694 to i8
  store i8 %695, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v338 = select i1 %692, i64 64, i64 13
  %696 = add i64 %683, %.v338
  store i64 %696, i64* %3, align 8
  br i1 %692, label %block_.L_47319b, label %block_473168

block_473168:                                     ; preds = %block_.L_47314e
  %697 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %697, i64* %RAX.i4266, align 8
  %698 = add i64 %697, 6480
  %699 = add i64 %696, 15
  store i64 %699, i64* %3, align 8
  %700 = inttoptr i64 %698 to i64*
  %701 = load i64, i64* %700, align 8
  store i64 %701, i64* %RAX.i4266, align 8
  %702 = add i64 %696, 18
  store i64 %702, i64* %3, align 8
  %703 = inttoptr i64 %701 to i64*
  %704 = load i64, i64* %703, align 8
  store i64 %704, i64* %RAX.i4266, align 8
  %705 = add i64 %681, -192
  %706 = add i64 %696, 25
  store i64 %706, i64* %3, align 8
  %707 = inttoptr i64 %705 to i32*
  %708 = load i32, i32* %707, align 4
  %709 = sext i32 %708 to i64
  store i64 %709, i64* %RCX.i4448, align 8
  %710 = shl nsw i64 %709, 3
  %711 = add i64 %710, %704
  %712 = add i64 %696, 29
  store i64 %712, i64* %3, align 8
  %713 = inttoptr i64 %711 to i64*
  %714 = load i64, i64* %713, align 8
  store i64 %714, i64* %RAX.i4266, align 8
  %715 = add i64 %681, -188
  %716 = add i64 %696, 36
  store i64 %716, i64* %3, align 8
  %717 = inttoptr i64 %715 to i32*
  %718 = load i32, i32* %717, align 4
  %719 = sext i32 %718 to i64
  store i64 %719, i64* %RCX.i4448, align 8
  %720 = shl nsw i64 %719, 1
  %721 = add i64 %720, %714
  %722 = add i64 %696, 40
  store i64 %722, i64* %3, align 8
  %723 = inttoptr i64 %721 to i16*
  %724 = load i16, i16* %723, align 2
  %725 = sext i16 %724 to i64
  %726 = and i64 %725, 4294967295
  store i64 %726, i64* %RDX.i4301, align 8
  %727 = add i64 %681, -284
  %728 = sext i16 %724 to i32
  %729 = add i64 %696, 46
  store i64 %729, i64* %3, align 8
  %730 = inttoptr i64 %727 to i32*
  store i32 %728, i32* %730, align 4
  %731 = load i64, i64* %3, align 8
  %732 = add i64 %731, 15
  store i64 %732, i64* %3, align 8
  br label %block_.L_4731a5

block_.L_47319b:                                  ; preds = %block_.L_47314e
  %733 = add i64 %681, -86
  %734 = add i64 %696, 4
  store i64 %734, i64* %3, align 8
  %735 = inttoptr i64 %733 to i16*
  %736 = load i16, i16* %735, align 2
  %737 = sext i16 %736 to i64
  %738 = and i64 %737, 4294967295
  store i64 %738, i64* %RAX.i4266, align 8
  %739 = add i64 %681, -284
  %740 = sext i16 %736 to i32
  %741 = add i64 %696, 10
  store i64 %741, i64* %3, align 8
  %742 = inttoptr i64 %739 to i32*
  store i32 %740, i32* %742, align 4
  %.pre175 = load i64, i64* %3, align 8
  br label %block_.L_4731a5

block_.L_4731a5:                                  ; preds = %block_.L_47319b, %block_473168
  %743 = phi i64 [ %.pre175, %block_.L_47319b ], [ %732, %block_473168 ]
  %744 = load i64, i64* %RBP.i, align 8
  %745 = add i64 %744, -284
  %746 = add i64 %743, 6
  store i64 %746, i64* %3, align 8
  %747 = inttoptr i64 %745 to i32*
  %748 = load i32, i32* %747, align 4
  %749 = zext i32 %748 to i64
  store i64 %749, i64* %RAX.i4266, align 8
  %750 = trunc i32 %748 to i16
  store i16 %750, i16* %CX.i4119, align 2
  %751 = add i64 %744, -88
  %752 = add i64 %743, 13
  store i64 %752, i64* %3, align 8
  %753 = inttoptr i64 %751 to i16*
  store i16 %750, i16* %753, align 2
  %754 = load i64, i64* %RBP.i, align 8
  %755 = add i64 %754, -136
  %756 = load i64, i64* %3, align 8
  %757 = add i64 %756, 7
  store i64 %757, i64* %3, align 8
  %758 = inttoptr i64 %755 to i32*
  %759 = load i32, i32* %758, align 4
  store i8 0, i8* %14, align 1
  %760 = and i32 %759, 255
  %761 = tail call i32 @llvm.ctpop.i32(i32 %760)
  %762 = trunc i32 %761 to i8
  %763 = and i8 %762, 1
  %764 = xor i8 %763, 1
  store i8 %764, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %765 = icmp eq i32 %759, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %30, align 1
  %767 = lshr i32 %759, 31
  %768 = trunc i32 %767 to i8
  store i8 %768, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v339 = select i1 %765, i64 59, i64 13
  %769 = add i64 %756, %.v339
  store i64 %769, i64* %3, align 8
  br i1 %765, label %block_.L_4731ed, label %block_4731bf

block_4731bf:                                     ; preds = %block_.L_4731a5
  %770 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %770, i64* %RAX.i4266, align 8
  %771 = add i64 %770, 6480
  %772 = add i64 %769, 15
  store i64 %772, i64* %3, align 8
  %773 = inttoptr i64 %771 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %RAX.i4266, align 8
  %775 = add i64 %774, 8
  %776 = add i64 %769, 19
  store i64 %776, i64* %3, align 8
  %777 = inttoptr i64 %775 to i64*
  %778 = load i64, i64* %777, align 8
  store i64 %778, i64* %RAX.i4266, align 8
  %779 = add i64 %754, -120
  %780 = add i64 %769, 23
  store i64 %780, i64* %3, align 8
  %781 = inttoptr i64 %779 to i32*
  %782 = load i32, i32* %781, align 4
  %783 = sext i32 %782 to i64
  store i64 %783, i64* %RCX.i4448, align 8
  %784 = shl nsw i64 %783, 3
  %785 = add i64 %784, %778
  %786 = add i64 %769, 27
  store i64 %786, i64* %3, align 8
  %787 = inttoptr i64 %785 to i64*
  %788 = load i64, i64* %787, align 8
  store i64 %788, i64* %RAX.i4266, align 8
  %789 = add i64 %754, -116
  %790 = add i64 %769, 31
  store i64 %790, i64* %3, align 8
  %791 = inttoptr i64 %789 to i32*
  %792 = load i32, i32* %791, align 4
  %793 = sext i32 %792 to i64
  store i64 %793, i64* %RCX.i4448, align 8
  %794 = shl nsw i64 %793, 1
  %795 = add i64 %794, %788
  %796 = add i64 %769, 35
  store i64 %796, i64* %3, align 8
  %797 = inttoptr i64 %795 to i16*
  %798 = load i16, i16* %797, align 2
  %799 = sext i16 %798 to i64
  %800 = and i64 %799, 4294967295
  store i64 %800, i64* %RDX.i4301, align 8
  %801 = add i64 %754, -288
  %802 = sext i16 %798 to i32
  %803 = add i64 %769, 41
  store i64 %803, i64* %3, align 8
  %804 = inttoptr i64 %801 to i32*
  store i32 %802, i32* %804, align 4
  %805 = load i64, i64* %3, align 8
  %806 = add i64 %805, 21
  br label %block_.L_4731fd

block_.L_4731ed:                                  ; preds = %block_.L_4731a5
  store i64 4294967295, i64* %RAX.i4266, align 8
  %807 = add i64 %754, -288
  %808 = add i64 %769, 11
  store i64 %808, i64* %3, align 8
  %809 = inttoptr i64 %807 to i32*
  store i32 -1, i32* %809, align 4
  %810 = load i64, i64* %3, align 8
  %811 = add i64 %810, 5
  store i64 %811, i64* %3, align 8
  br label %block_.L_4731fd

block_.L_4731fd:                                  ; preds = %block_.L_4731ed, %block_4731bf
  %storemerge103 = phi i64 [ %806, %block_4731bf ], [ %811, %block_.L_4731ed ]
  %812 = load i64, i64* %RBP.i, align 8
  %813 = add i64 %812, -288
  %814 = add i64 %storemerge103, 6
  store i64 %814, i64* %3, align 8
  %815 = inttoptr i64 %813 to i32*
  %816 = load i32, i32* %815, align 4
  %817 = zext i32 %816 to i64
  store i64 %817, i64* %RAX.i4266, align 8
  %818 = trunc i32 %816 to i16
  store i16 %818, i16* %CX.i4119, align 2
  %819 = add i64 %812, -90
  %820 = add i64 %storemerge103, 13
  store i64 %820, i64* %3, align 8
  %821 = inttoptr i64 %819 to i16*
  store i16 %818, i16* %821, align 2
  %822 = load i64, i64* %RBP.i, align 8
  %823 = add i64 %822, -160
  %824 = load i64, i64* %3, align 8
  %825 = add i64 %824, 7
  store i64 %825, i64* %3, align 8
  %826 = inttoptr i64 %823 to i32*
  %827 = load i32, i32* %826, align 4
  store i8 0, i8* %14, align 1
  %828 = and i32 %827, 255
  %829 = tail call i32 @llvm.ctpop.i32(i32 %828)
  %830 = trunc i32 %829 to i8
  %831 = and i8 %830, 1
  %832 = xor i8 %831, 1
  store i8 %832, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %833 = icmp eq i32 %827, 0
  %834 = zext i1 %833 to i8
  store i8 %834, i8* %30, align 1
  %835 = lshr i32 %827, 31
  %836 = trunc i32 %835 to i8
  store i8 %836, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v340 = select i1 %833, i64 65, i64 13
  %837 = add i64 %824, %.v340
  store i64 %837, i64* %3, align 8
  br i1 %833, label %block_.L_47324b, label %block_473217

block_473217:                                     ; preds = %block_.L_4731fd
  %838 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %838, i64* %RAX.i4266, align 8
  %839 = add i64 %838, 6480
  %840 = add i64 %837, 15
  store i64 %840, i64* %3, align 8
  %841 = inttoptr i64 %839 to i64*
  %842 = load i64, i64* %841, align 8
  store i64 %842, i64* %RAX.i4266, align 8
  %843 = add i64 %842, 8
  %844 = add i64 %837, 19
  store i64 %844, i64* %3, align 8
  %845 = inttoptr i64 %843 to i64*
  %846 = load i64, i64* %845, align 8
  store i64 %846, i64* %RAX.i4266, align 8
  %847 = add i64 %822, -144
  %848 = add i64 %837, 26
  store i64 %848, i64* %3, align 8
  %849 = inttoptr i64 %847 to i32*
  %850 = load i32, i32* %849, align 4
  %851 = sext i32 %850 to i64
  store i64 %851, i64* %RCX.i4448, align 8
  %852 = shl nsw i64 %851, 3
  %853 = add i64 %852, %846
  %854 = add i64 %837, 30
  store i64 %854, i64* %3, align 8
  %855 = inttoptr i64 %853 to i64*
  %856 = load i64, i64* %855, align 8
  store i64 %856, i64* %RAX.i4266, align 8
  %857 = add i64 %822, -140
  %858 = add i64 %837, 37
  store i64 %858, i64* %3, align 8
  %859 = inttoptr i64 %857 to i32*
  %860 = load i32, i32* %859, align 4
  %861 = sext i32 %860 to i64
  store i64 %861, i64* %RCX.i4448, align 8
  %862 = shl nsw i64 %861, 1
  %863 = add i64 %862, %856
  %864 = add i64 %837, 41
  store i64 %864, i64* %3, align 8
  %865 = inttoptr i64 %863 to i16*
  %866 = load i16, i16* %865, align 2
  %867 = sext i16 %866 to i64
  %868 = and i64 %867, 4294967295
  store i64 %868, i64* %RDX.i4301, align 8
  %869 = add i64 %822, -292
  %870 = sext i16 %866 to i32
  %871 = add i64 %837, 47
  store i64 %871, i64* %3, align 8
  %872 = inttoptr i64 %869 to i32*
  store i32 %870, i32* %872, align 4
  %873 = load i64, i64* %3, align 8
  %874 = add i64 %873, 21
  br label %block_.L_47325b

block_.L_47324b:                                  ; preds = %block_.L_4731fd
  store i64 4294967295, i64* %RAX.i4266, align 8
  %875 = add i64 %822, -292
  %876 = add i64 %837, 11
  store i64 %876, i64* %3, align 8
  %877 = inttoptr i64 %875 to i32*
  store i32 -1, i32* %877, align 4
  %878 = load i64, i64* %3, align 8
  %879 = add i64 %878, 5
  store i64 %879, i64* %3, align 8
  br label %block_.L_47325b

block_.L_47325b:                                  ; preds = %block_.L_47324b, %block_473217
  %storemerge104 = phi i64 [ %874, %block_473217 ], [ %879, %block_.L_47324b ]
  %880 = load i64, i64* %RBP.i, align 8
  %881 = add i64 %880, -292
  %882 = add i64 %storemerge104, 6
  store i64 %882, i64* %3, align 8
  %883 = inttoptr i64 %881 to i32*
  %884 = load i32, i32* %883, align 4
  %885 = zext i32 %884 to i64
  store i64 %885, i64* %RAX.i4266, align 8
  %886 = trunc i32 %884 to i16
  store i16 %886, i16* %CX.i4119, align 2
  %887 = add i64 %880, -92
  %888 = add i64 %storemerge104, 13
  store i64 %888, i64* %3, align 8
  %889 = inttoptr i64 %887 to i16*
  store i16 %886, i16* %889, align 2
  %890 = load i64, i64* %RBP.i, align 8
  %891 = add i64 %890, -184
  %892 = load i64, i64* %3, align 8
  %893 = add i64 %892, 7
  store i64 %893, i64* %3, align 8
  %894 = inttoptr i64 %891 to i32*
  %895 = load i32, i32* %894, align 4
  store i8 0, i8* %14, align 1
  %896 = and i32 %895, 255
  %897 = tail call i32 @llvm.ctpop.i32(i32 %896)
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  %900 = xor i8 %899, 1
  store i8 %900, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %901 = icmp eq i32 %895, 0
  %902 = zext i1 %901 to i8
  store i8 %902, i8* %30, align 1
  %903 = lshr i32 %895, 31
  %904 = trunc i32 %903 to i8
  store i8 %904, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v341 = select i1 %901, i64 65, i64 13
  %905 = add i64 %892, %.v341
  store i64 %905, i64* %3, align 8
  br i1 %901, label %block_.L_4732a9, label %block_473275

block_473275:                                     ; preds = %block_.L_47325b
  %906 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %906, i64* %RAX.i4266, align 8
  %907 = add i64 %906, 6480
  %908 = add i64 %905, 15
  store i64 %908, i64* %3, align 8
  %909 = inttoptr i64 %907 to i64*
  %910 = load i64, i64* %909, align 8
  store i64 %910, i64* %RAX.i4266, align 8
  %911 = add i64 %910, 8
  %912 = add i64 %905, 19
  store i64 %912, i64* %3, align 8
  %913 = inttoptr i64 %911 to i64*
  %914 = load i64, i64* %913, align 8
  store i64 %914, i64* %RAX.i4266, align 8
  %915 = add i64 %890, -168
  %916 = add i64 %905, 26
  store i64 %916, i64* %3, align 8
  %917 = inttoptr i64 %915 to i32*
  %918 = load i32, i32* %917, align 4
  %919 = sext i32 %918 to i64
  store i64 %919, i64* %RCX.i4448, align 8
  %920 = shl nsw i64 %919, 3
  %921 = add i64 %920, %914
  %922 = add i64 %905, 30
  store i64 %922, i64* %3, align 8
  %923 = inttoptr i64 %921 to i64*
  %924 = load i64, i64* %923, align 8
  store i64 %924, i64* %RAX.i4266, align 8
  %925 = add i64 %890, -164
  %926 = add i64 %905, 37
  store i64 %926, i64* %3, align 8
  %927 = inttoptr i64 %925 to i32*
  %928 = load i32, i32* %927, align 4
  %929 = sext i32 %928 to i64
  store i64 %929, i64* %RCX.i4448, align 8
  %930 = shl nsw i64 %929, 1
  %931 = add i64 %930, %924
  %932 = add i64 %905, 41
  store i64 %932, i64* %3, align 8
  %933 = inttoptr i64 %931 to i16*
  %934 = load i16, i16* %933, align 2
  %935 = sext i16 %934 to i64
  %936 = and i64 %935, 4294967295
  store i64 %936, i64* %RDX.i4301, align 8
  %937 = add i64 %890, -296
  %938 = sext i16 %934 to i32
  %939 = add i64 %905, 47
  store i64 %939, i64* %3, align 8
  %940 = inttoptr i64 %937 to i32*
  store i32 %938, i32* %940, align 4
  %941 = load i64, i64* %3, align 8
  %942 = add i64 %941, 21
  br label %block_.L_4732b9

block_.L_4732a9:                                  ; preds = %block_.L_47325b
  store i64 4294967295, i64* %RAX.i4266, align 8
  %943 = add i64 %890, -296
  %944 = add i64 %905, 11
  store i64 %944, i64* %3, align 8
  %945 = inttoptr i64 %943 to i32*
  store i32 -1, i32* %945, align 4
  %946 = load i64, i64* %3, align 8
  %947 = add i64 %946, 5
  store i64 %947, i64* %3, align 8
  br label %block_.L_4732b9

block_.L_4732b9:                                  ; preds = %block_.L_4732a9, %block_473275
  %storemerge105 = phi i64 [ %942, %block_473275 ], [ %947, %block_.L_4732a9 ]
  %948 = load i64, i64* %RBP.i, align 8
  %949 = add i64 %948, -296
  %950 = add i64 %storemerge105, 6
  store i64 %950, i64* %3, align 8
  %951 = inttoptr i64 %949 to i32*
  %952 = load i32, i32* %951, align 4
  %953 = zext i32 %952 to i64
  store i64 %953, i64* %RAX.i4266, align 8
  %954 = trunc i32 %952 to i16
  store i16 %954, i16* %CX.i4119, align 2
  %955 = add i64 %948, -94
  %956 = add i64 %storemerge105, 13
  store i64 %956, i64* %3, align 8
  %957 = inttoptr i64 %955 to i16*
  store i16 %954, i16* %957, align 2
  %958 = load i64, i64* %RBP.i, align 8
  %959 = add i64 %958, -208
  %960 = load i64, i64* %3, align 8
  %961 = add i64 %960, 7
  store i64 %961, i64* %3, align 8
  %962 = inttoptr i64 %959 to i32*
  %963 = load i32, i32* %962, align 4
  store i8 0, i8* %14, align 1
  %964 = and i32 %963, 255
  %965 = tail call i32 @llvm.ctpop.i32(i32 %964)
  %966 = trunc i32 %965 to i8
  %967 = and i8 %966, 1
  %968 = xor i8 %967, 1
  store i8 %968, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %969 = icmp eq i32 %963, 0
  %970 = zext i1 %969 to i8
  store i8 %970, i8* %30, align 1
  %971 = lshr i32 %963, 31
  %972 = trunc i32 %971 to i8
  store i8 %972, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v342 = select i1 %969, i64 65, i64 13
  %973 = add i64 %960, %.v342
  store i64 %973, i64* %3, align 8
  br i1 %969, label %block_.L_473307, label %block_4732d3

block_4732d3:                                     ; preds = %block_.L_4732b9
  %974 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %974, i64* %RAX.i4266, align 8
  %975 = add i64 %974, 6480
  %976 = add i64 %973, 15
  store i64 %976, i64* %3, align 8
  %977 = inttoptr i64 %975 to i64*
  %978 = load i64, i64* %977, align 8
  store i64 %978, i64* %RAX.i4266, align 8
  %979 = add i64 %978, 8
  %980 = add i64 %973, 19
  store i64 %980, i64* %3, align 8
  %981 = inttoptr i64 %979 to i64*
  %982 = load i64, i64* %981, align 8
  store i64 %982, i64* %RAX.i4266, align 8
  %983 = add i64 %958, -192
  %984 = add i64 %973, 26
  store i64 %984, i64* %3, align 8
  %985 = inttoptr i64 %983 to i32*
  %986 = load i32, i32* %985, align 4
  %987 = sext i32 %986 to i64
  store i64 %987, i64* %RCX.i4448, align 8
  %988 = shl nsw i64 %987, 3
  %989 = add i64 %988, %982
  %990 = add i64 %973, 30
  store i64 %990, i64* %3, align 8
  %991 = inttoptr i64 %989 to i64*
  %992 = load i64, i64* %991, align 8
  store i64 %992, i64* %RAX.i4266, align 8
  %993 = add i64 %958, -188
  %994 = add i64 %973, 37
  store i64 %994, i64* %3, align 8
  %995 = inttoptr i64 %993 to i32*
  %996 = load i32, i32* %995, align 4
  %997 = sext i32 %996 to i64
  store i64 %997, i64* %RCX.i4448, align 8
  %998 = shl nsw i64 %997, 1
  %999 = add i64 %998, %992
  %1000 = add i64 %973, 41
  store i64 %1000, i64* %3, align 8
  %1001 = inttoptr i64 %999 to i16*
  %1002 = load i16, i16* %1001, align 2
  %1003 = sext i16 %1002 to i64
  %1004 = and i64 %1003, 4294967295
  store i64 %1004, i64* %RDX.i4301, align 8
  %1005 = add i64 %958, -300
  %1006 = sext i16 %1002 to i32
  %1007 = add i64 %973, 47
  store i64 %1007, i64* %3, align 8
  %1008 = inttoptr i64 %1005 to i32*
  store i32 %1006, i32* %1008, align 4
  %1009 = load i64, i64* %3, align 8
  %1010 = add i64 %1009, 15
  store i64 %1010, i64* %3, align 8
  br label %block_.L_473311

block_.L_473307:                                  ; preds = %block_.L_4732b9
  %1011 = add i64 %958, -94
  %1012 = add i64 %973, 4
  store i64 %1012, i64* %3, align 8
  %1013 = inttoptr i64 %1011 to i16*
  %1014 = load i16, i16* %1013, align 2
  %1015 = sext i16 %1014 to i64
  %1016 = and i64 %1015, 4294967295
  store i64 %1016, i64* %RAX.i4266, align 8
  %1017 = add i64 %958, -300
  %1018 = sext i16 %1014 to i32
  %1019 = add i64 %973, 10
  store i64 %1019, i64* %3, align 8
  %1020 = inttoptr i64 %1017 to i32*
  store i32 %1018, i32* %1020, align 4
  %.pre176 = load i64, i64* %3, align 8
  br label %block_.L_473311

block_.L_473311:                                  ; preds = %block_.L_473307, %block_4732d3
  %1021 = phi i64 [ %.pre176, %block_.L_473307 ], [ %1010, %block_4732d3 ]
  %1022 = load i64, i64* %RBP.i, align 8
  %1023 = add i64 %1022, -300
  %1024 = add i64 %1021, 6
  store i64 %1024, i64* %3, align 8
  %1025 = inttoptr i64 %1023 to i32*
  %1026 = load i32, i32* %1025, align 4
  %1027 = zext i32 %1026 to i64
  store i64 %1027, i64* %RAX.i4266, align 8
  %1028 = trunc i32 %1026 to i16
  store i16 %1028, i16* %CX.i4119, align 2
  %1029 = add i64 %1022, -96
  %1030 = add i64 %1021, 13
  store i64 %1030, i64* %3, align 8
  %1031 = inttoptr i64 %1029 to i16*
  store i16 %1028, i16* %1031, align 2
  %1032 = load i64, i64* %3, align 8
  %1033 = add i64 %1032, 4008
  br label %block_.L_4742c6

block_.L_473323:                                  ; preds = %block_472f1a
  %1034 = add i64 %481, -80
  %1035 = add i64 %480, 4
  store i64 %1035, i64* %3, align 8
  %1036 = inttoptr i64 %1034 to i64*
  %1037 = load i64, i64* %1036, align 8
  store i64 %1037, i64* %RAX.i4266, align 8
  %1038 = add i64 %1037, 532
  %1039 = add i64 %480, 11
  store i64 %1039, i64* %3, align 8
  %1040 = inttoptr i64 %1038 to i32*
  %1041 = load i32, i32* %1040, align 4
  store i8 0, i8* %14, align 1
  %1042 = and i32 %1041, 255
  %1043 = tail call i32 @llvm.ctpop.i32(i32 %1042)
  %1044 = trunc i32 %1043 to i8
  %1045 = and i8 %1044, 1
  %1046 = xor i8 %1045, 1
  store i8 %1046, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1047 = icmp eq i32 %1041, 0
  %1048 = zext i1 %1047 to i8
  store i8 %1048, i8* %30, align 1
  %1049 = lshr i32 %1041, 31
  %1050 = trunc i32 %1049 to i8
  store i8 %1050, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v282 = select i1 %1047, i64 2010, i64 17
  %1051 = add i64 %480, %.v282
  %1052 = add i64 %481, -136
  %1053 = add i64 %1051, 7
  store i64 %1053, i64* %3, align 8
  %1054 = inttoptr i64 %1052 to i32*
  %1055 = load i32, i32* %1054, align 4
  store i8 0, i8* %14, align 1
  %1056 = and i32 %1055, 255
  %1057 = tail call i32 @llvm.ctpop.i32(i32 %1056)
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  %1060 = xor i8 %1059, 1
  store i8 %1060, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1061 = icmp eq i32 %1055, 0
  %1062 = zext i1 %1061 to i8
  store i8 %1062, i8* %30, align 1
  %1063 = lshr i32 %1055, 31
  %1064 = trunc i32 %1063 to i8
  store i8 %1064, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v289 = select i1 %1061, i64 206, i64 13
  %1065 = add i64 %1051, %.v289
  store i64 %1065, i64* %3, align 8
  br i1 %1047, label %block_.L_473afd, label %block_473334

block_473334:                                     ; preds = %block_.L_473323
  br i1 %1061, label %block_.L_473402, label %block_473341

block_473341:                                     ; preds = %block_473334
  store i64 %466, i64* %RAX.i4266, align 8
  %1066 = add i64 %466, 14168
  %1067 = add i64 %1065, 15
  store i64 %1067, i64* %3, align 8
  %1068 = inttoptr i64 %1066 to i64*
  %1069 = load i64, i64* %1068, align 8
  store i64 %1069, i64* %RAX.i4266, align 8
  %1070 = add i64 %481, -132
  %1071 = add i64 %1065, 22
  store i64 %1071, i64* %3, align 8
  %1072 = inttoptr i64 %1070 to i32*
  %1073 = load i32, i32* %1072, align 4
  %1074 = sext i32 %1073 to i64
  %1075 = mul nsw i64 %1074, 632
  store i64 %1075, i64* %RCX.i4448, align 8
  %1076 = lshr i64 %1075, 63
  %1077 = add i64 %1075, %1069
  store i64 %1077, i64* %RAX.i4266, align 8
  %1078 = icmp ult i64 %1077, %1069
  %1079 = icmp ult i64 %1077, %1075
  %1080 = or i1 %1078, %1079
  %1081 = zext i1 %1080 to i8
  store i8 %1081, i8* %14, align 1
  %1082 = trunc i64 %1077 to i32
  %1083 = and i32 %1082, 255
  %1084 = tail call i32 @llvm.ctpop.i32(i32 %1083)
  %1085 = trunc i32 %1084 to i8
  %1086 = and i8 %1085, 1
  %1087 = xor i8 %1086, 1
  store i8 %1087, i8* %21, align 1
  %1088 = xor i64 %1075, %1069
  %1089 = xor i64 %1088, %1077
  %1090 = lshr i64 %1089, 4
  %1091 = trunc i64 %1090 to i8
  %1092 = and i8 %1091, 1
  store i8 %1092, i8* %27, align 1
  %1093 = icmp eq i64 %1077, 0
  %1094 = zext i1 %1093 to i8
  store i8 %1094, i8* %30, align 1
  %1095 = lshr i64 %1077, 63
  %1096 = trunc i64 %1095 to i8
  store i8 %1096, i8* %33, align 1
  %1097 = lshr i64 %1069, 63
  %1098 = xor i64 %1095, %1097
  %1099 = xor i64 %1095, %1076
  %1100 = add nuw nsw i64 %1098, %1099
  %1101 = icmp eq i64 %1100, 2
  %1102 = zext i1 %1101 to i8
  store i8 %1102, i8* %39, align 1
  %1103 = add i64 %1077, 532
  %1104 = add i64 %1065, 39
  store i64 %1104, i64* %3, align 8
  %1105 = inttoptr i64 %1103 to i32*
  %1106 = load i32, i32* %1105, align 4
  store i8 0, i8* %14, align 1
  %1107 = and i32 %1106, 255
  %1108 = tail call i32 @llvm.ctpop.i32(i32 %1107)
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  store i8 %1111, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1112 = icmp eq i32 %1106, 0
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %30, align 1
  %1114 = lshr i32 %1106, 31
  %1115 = trunc i32 %1114 to i8
  store i8 %1115, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v290 = select i1 %1112, i64 45, i64 88
  %1116 = add i64 %1065, %.v290
  store i64 %1116, i64* %3, align 8
  %1117 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %1112, label %block_47336e, label %block_473341.block_.L_473399_crit_edge

block_473341.block_.L_473399_crit_edge:           ; preds = %block_473341
  %.pre178 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473399

block_47336e:                                     ; preds = %block_473341
  store i64 %1117, i64* %RAX.i4266, align 8
  %1118 = add i64 %1117, 6480
  %1119 = add i64 %1116, 15
  store i64 %1119, i64* %3, align 8
  %1120 = inttoptr i64 %1118 to i64*
  %1121 = load i64, i64* %1120, align 8
  store i64 %1121, i64* %RAX.i4266, align 8
  %1122 = add i64 %1116, 18
  store i64 %1122, i64* %3, align 8
  %1123 = inttoptr i64 %1121 to i64*
  %1124 = load i64, i64* %1123, align 8
  store i64 %1124, i64* %RAX.i4266, align 8
  %1125 = load i64, i64* %RBP.i, align 8
  %1126 = add i64 %1125, -120
  %1127 = add i64 %1116, 22
  store i64 %1127, i64* %3, align 8
  %1128 = inttoptr i64 %1126 to i32*
  %1129 = load i32, i32* %1128, align 4
  %1130 = sext i32 %1129 to i64
  store i64 %1130, i64* %RCX.i4448, align 8
  %1131 = shl nsw i64 %1130, 3
  %1132 = add i64 %1131, %1124
  %1133 = add i64 %1116, 26
  store i64 %1133, i64* %3, align 8
  %1134 = inttoptr i64 %1132 to i64*
  %1135 = load i64, i64* %1134, align 8
  store i64 %1135, i64* %RAX.i4266, align 8
  %1136 = add i64 %1125, -116
  %1137 = add i64 %1116, 30
  store i64 %1137, i64* %3, align 8
  %1138 = inttoptr i64 %1136 to i32*
  %1139 = load i32, i32* %1138, align 4
  %1140 = sext i32 %1139 to i64
  store i64 %1140, i64* %RCX.i4448, align 8
  %1141 = shl nsw i64 %1140, 1
  %1142 = add i64 %1141, %1135
  %1143 = add i64 %1116, 34
  store i64 %1143, i64* %3, align 8
  %1144 = inttoptr i64 %1142 to i16*
  %1145 = load i16, i16* %1144, align 2
  %1146 = sext i16 %1145 to i64
  %1147 = and i64 %1146, 4294967295
  store i64 %1147, i64* %RDX.i4301, align 8
  %1148 = sext i16 %1145 to i32
  %1149 = add i64 %1116, 37
  store i8 0, i8* %14, align 1
  %1150 = and i32 %1148, 255
  %1151 = tail call i32 @llvm.ctpop.i32(i32 %1150)
  %1152 = trunc i32 %1151 to i8
  %1153 = and i8 %1152, 1
  %1154 = xor i8 %1153, 1
  store i8 %1154, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1155 = icmp eq i16 %1145, 0
  %1156 = zext i1 %1155 to i8
  store i8 %1156, i8* %30, align 1
  %1157 = lshr i32 %1148, 31
  %1158 = trunc i32 %1157 to i8
  store i8 %1158, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1159 = icmp ne i8 %1158, 0
  %.v143 = select i1 %1159, i64 6, i64 51
  %1160 = add i64 %1149, %.v143
  store i64 %1160, i64* %3, align 8
  br i1 %1159, label %block_.L_473399, label %block_.L_4733c6

block_.L_473399:                                  ; preds = %block_473341.block_.L_473399_crit_edge, %block_47336e
  %1161 = phi i64 [ %1125, %block_47336e ], [ %.pre178, %block_473341.block_.L_473399_crit_edge ]
  %1162 = phi i64 [ %1160, %block_47336e ], [ %1116, %block_473341.block_.L_473399_crit_edge ]
  store i64 %1117, i64* %RAX.i4266, align 8
  %1163 = add i64 %1117, 6480
  %1164 = add i64 %1162, 15
  store i64 %1164, i64* %3, align 8
  %1165 = inttoptr i64 %1163 to i64*
  %1166 = load i64, i64* %1165, align 8
  store i64 %1166, i64* %RAX.i4266, align 8
  %1167 = add i64 %1162, 18
  store i64 %1167, i64* %3, align 8
  %1168 = inttoptr i64 %1166 to i64*
  %1169 = load i64, i64* %1168, align 8
  store i64 %1169, i64* %RAX.i4266, align 8
  %1170 = add i64 %1161, -120
  %1171 = add i64 %1162, 22
  store i64 %1171, i64* %3, align 8
  %1172 = inttoptr i64 %1170 to i32*
  %1173 = load i32, i32* %1172, align 4
  %1174 = sext i32 %1173 to i64
  store i64 %1174, i64* %RCX.i4448, align 8
  %1175 = shl nsw i64 %1174, 3
  %1176 = add i64 %1175, %1169
  %1177 = add i64 %1162, 26
  store i64 %1177, i64* %3, align 8
  %1178 = inttoptr i64 %1176 to i64*
  %1179 = load i64, i64* %1178, align 8
  store i64 %1179, i64* %RAX.i4266, align 8
  %1180 = add i64 %1161, -116
  %1181 = add i64 %1162, 30
  store i64 %1181, i64* %3, align 8
  %1182 = inttoptr i64 %1180 to i32*
  %1183 = load i32, i32* %1182, align 4
  %1184 = sext i32 %1183 to i64
  store i64 %1184, i64* %RCX.i4448, align 8
  %1185 = shl nsw i64 %1184, 1
  %1186 = add i64 %1185, %1179
  %1187 = add i64 %1162, 34
  store i64 %1187, i64* %3, align 8
  %1188 = inttoptr i64 %1186 to i16*
  %1189 = load i16, i16* %1188, align 2
  %1190 = sext i16 %1189 to i64
  %1191 = and i64 %1190, 4294967295
  store i64 %1191, i64* %RDX.i4301, align 8
  %1192 = add i64 %1161, -304
  %1193 = sext i16 %1189 to i32
  %1194 = add i64 %1162, 40
  store i64 %1194, i64* %3, align 8
  %1195 = inttoptr i64 %1192 to i32*
  store i32 %1193, i32* %1195, align 4
  %1196 = load i64, i64* %3, align 8
  %1197 = add i64 %1196, 48
  store i64 %1197, i64* %3, align 8
  br label %block_.L_4733f1

block_.L_4733c6:                                  ; preds = %block_47336e
  store i64 %1117, i64* %RAX.i4266, align 8
  %1198 = add i64 %1160, 15
  store i64 %1198, i64* %3, align 8
  %1199 = load i64, i64* %1120, align 8
  store i64 %1199, i64* %RAX.i4266, align 8
  %1200 = add i64 %1160, 18
  store i64 %1200, i64* %3, align 8
  %1201 = inttoptr i64 %1199 to i64*
  %1202 = load i64, i64* %1201, align 8
  store i64 %1202, i64* %RAX.i4266, align 8
  %1203 = add i64 %1160, 22
  store i64 %1203, i64* %3, align 8
  %1204 = load i32, i32* %1128, align 4
  %1205 = sext i32 %1204 to i64
  store i64 %1205, i64* %RCX.i4448, align 8
  %1206 = shl nsw i64 %1205, 3
  %1207 = add i64 %1206, %1202
  %1208 = add i64 %1160, 26
  store i64 %1208, i64* %3, align 8
  %1209 = inttoptr i64 %1207 to i64*
  %1210 = load i64, i64* %1209, align 8
  store i64 %1210, i64* %RAX.i4266, align 8
  %1211 = add i64 %1160, 30
  store i64 %1211, i64* %3, align 8
  %1212 = load i32, i32* %1138, align 4
  %1213 = sext i32 %1212 to i64
  store i64 %1213, i64* %RCX.i4448, align 8
  %1214 = shl nsw i64 %1213, 1
  %1215 = add i64 %1214, %1210
  %1216 = add i64 %1160, 34
  store i64 %1216, i64* %3, align 8
  %1217 = inttoptr i64 %1215 to i16*
  %1218 = load i16, i16* %1217, align 2
  %1219 = sext i16 %1218 to i32
  %1220 = shl nsw i32 %1219, 1
  %1221 = zext i32 %1220 to i64
  store i64 %1221, i64* %RDX.i4301, align 8
  %.lobit121 = lshr i16 %1218, 15
  %1222 = trunc i16 %.lobit121 to i8
  store i8 %1222, i8* %14, align 1
  %1223 = and i32 %1220, 254
  %1224 = tail call i32 @llvm.ctpop.i32(i32 %1223)
  %1225 = trunc i32 %1224 to i8
  %1226 = and i8 %1225, 1
  %1227 = xor i8 %1226, 1
  store i8 %1227, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1228 = icmp eq i16 %1218, 0
  %1229 = zext i1 %1228 to i8
  store i8 %1229, i8* %30, align 1
  %1230 = lshr i32 %1219, 30
  %1231 = trunc i32 %1230 to i8
  %1232 = and i8 %1231, 1
  store i8 %1232, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1233 = add i64 %1125, -304
  %1234 = add i64 %1160, 42
  store i64 %1234, i64* %3, align 8
  %1235 = inttoptr i64 %1233 to i32*
  store i32 %1220, i32* %1235, align 4
  %.pre179 = load i64, i64* %3, align 8
  br label %block_.L_4733f1

block_.L_4733f1:                                  ; preds = %block_.L_4733c6, %block_.L_473399
  %1236 = phi i64 [ %.pre179, %block_.L_4733c6 ], [ %1197, %block_.L_473399 ]
  %1237 = load i64, i64* %RBP.i, align 8
  %1238 = add i64 %1237, -304
  %1239 = add i64 %1236, 6
  store i64 %1239, i64* %3, align 8
  %1240 = inttoptr i64 %1238 to i32*
  %1241 = load i32, i32* %1240, align 4
  %1242 = zext i32 %1241 to i64
  store i64 %1242, i64* %RAX.i4266, align 8
  %1243 = add i64 %1237, -308
  %1244 = add i64 %1236, 12
  store i64 %1244, i64* %3, align 8
  %1245 = inttoptr i64 %1243 to i32*
  store i32 %1241, i32* %1245, align 4
  %1246 = load i64, i64* %3, align 8
  %1247 = add i64 %1246, 21
  br label %block_.L_473412

block_.L_473402:                                  ; preds = %block_473334
  store i64 4294967295, i64* %RAX.i4266, align 8
  %1248 = add i64 %481, -308
  %1249 = add i64 %1065, 11
  store i64 %1249, i64* %3, align 8
  %1250 = inttoptr i64 %1248 to i32*
  store i32 -1, i32* %1250, align 4
  %1251 = load i64, i64* %3, align 8
  %1252 = add i64 %1251, 5
  store i64 %1252, i64* %3, align 8
  br label %block_.L_473412

block_.L_473412:                                  ; preds = %block_.L_473402, %block_.L_4733f1
  %storemerge109 = phi i64 [ %1247, %block_.L_4733f1 ], [ %1252, %block_.L_473402 ]
  %1253 = load i64, i64* %RBP.i, align 8
  %1254 = add i64 %1253, -308
  %1255 = add i64 %storemerge109, 6
  store i64 %1255, i64* %3, align 8
  %1256 = inttoptr i64 %1254 to i32*
  %1257 = load i32, i32* %1256, align 4
  %1258 = zext i32 %1257 to i64
  store i64 %1258, i64* %RAX.i4266, align 8
  %CX.i3716 = bitcast %union.anon* %55 to i16*
  %1259 = trunc i32 %1257 to i16
  store i16 %1259, i16* %CX.i3716, align 2
  %1260 = add i64 %1253, -82
  %1261 = add i64 %storemerge109, 13
  store i64 %1261, i64* %3, align 8
  %1262 = inttoptr i64 %1260 to i16*
  store i16 %1259, i16* %1262, align 2
  %1263 = load i64, i64* %RBP.i, align 8
  %1264 = add i64 %1263, -160
  %1265 = load i64, i64* %3, align 8
  %1266 = add i64 %1265, 7
  store i64 %1266, i64* %3, align 8
  %1267 = inttoptr i64 %1264 to i32*
  %1268 = load i32, i32* %1267, align 4
  store i8 0, i8* %14, align 1
  %1269 = and i32 %1268, 255
  %1270 = tail call i32 @llvm.ctpop.i32(i32 %1269)
  %1271 = trunc i32 %1270 to i8
  %1272 = and i8 %1271, 1
  %1273 = xor i8 %1272, 1
  store i8 %1273, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1274 = icmp eq i32 %1268, 0
  %1275 = zext i1 %1274 to i8
  store i8 %1275, i8* %30, align 1
  %1276 = lshr i32 %1268, 31
  %1277 = trunc i32 %1276 to i8
  store i8 %1277, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v291 = select i1 %1274, i64 224, i64 13
  %1278 = add i64 %1265, %.v291
  store i64 %1278, i64* %3, align 8
  br i1 %1274, label %block_.L_4734ff, label %block_47342c

block_47342c:                                     ; preds = %block_.L_473412
  %1279 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1279, i64* %RAX.i4266, align 8
  %1280 = add i64 %1279, 14168
  %1281 = add i64 %1278, 15
  store i64 %1281, i64* %3, align 8
  %1282 = inttoptr i64 %1280 to i64*
  %1283 = load i64, i64* %1282, align 8
  store i64 %1283, i64* %RAX.i4266, align 8
  %1284 = add i64 %1263, -156
  %1285 = add i64 %1278, 22
  store i64 %1285, i64* %3, align 8
  %1286 = inttoptr i64 %1284 to i32*
  %1287 = load i32, i32* %1286, align 4
  %1288 = sext i32 %1287 to i64
  %1289 = mul nsw i64 %1288, 632
  store i64 %1289, i64* %RCX.i4448, align 8
  %1290 = lshr i64 %1289, 63
  %1291 = add i64 %1289, %1283
  store i64 %1291, i64* %RAX.i4266, align 8
  %1292 = icmp ult i64 %1291, %1283
  %1293 = icmp ult i64 %1291, %1289
  %1294 = or i1 %1292, %1293
  %1295 = zext i1 %1294 to i8
  store i8 %1295, i8* %14, align 1
  %1296 = trunc i64 %1291 to i32
  %1297 = and i32 %1296, 255
  %1298 = tail call i32 @llvm.ctpop.i32(i32 %1297)
  %1299 = trunc i32 %1298 to i8
  %1300 = and i8 %1299, 1
  %1301 = xor i8 %1300, 1
  store i8 %1301, i8* %21, align 1
  %1302 = xor i64 %1289, %1283
  %1303 = xor i64 %1302, %1291
  %1304 = lshr i64 %1303, 4
  %1305 = trunc i64 %1304 to i8
  %1306 = and i8 %1305, 1
  store i8 %1306, i8* %27, align 1
  %1307 = icmp eq i64 %1291, 0
  %1308 = zext i1 %1307 to i8
  store i8 %1308, i8* %30, align 1
  %1309 = lshr i64 %1291, 63
  %1310 = trunc i64 %1309 to i8
  store i8 %1310, i8* %33, align 1
  %1311 = lshr i64 %1283, 63
  %1312 = xor i64 %1309, %1311
  %1313 = xor i64 %1309, %1290
  %1314 = add nuw nsw i64 %1312, %1313
  %1315 = icmp eq i64 %1314, 2
  %1316 = zext i1 %1315 to i8
  store i8 %1316, i8* %39, align 1
  %1317 = add i64 %1291, 532
  %1318 = add i64 %1278, 39
  store i64 %1318, i64* %3, align 8
  %1319 = inttoptr i64 %1317 to i32*
  %1320 = load i32, i32* %1319, align 4
  store i8 0, i8* %14, align 1
  %1321 = and i32 %1320, 255
  %1322 = tail call i32 @llvm.ctpop.i32(i32 %1321)
  %1323 = trunc i32 %1322 to i8
  %1324 = and i8 %1323, 1
  %1325 = xor i8 %1324, 1
  store i8 %1325, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1326 = icmp eq i32 %1320, 0
  %1327 = zext i1 %1326 to i8
  store i8 %1327, i8* %30, align 1
  %1328 = lshr i32 %1320, 31
  %1329 = trunc i32 %1328 to i8
  store i8 %1329, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v292 = select i1 %1326, i64 45, i64 94
  %1330 = add i64 %1278, %.v292
  store i64 %1330, i64* %3, align 8
  %1331 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %1326, label %block_473459, label %block_47342c.block_.L_47348a_crit_edge

block_47342c.block_.L_47348a_crit_edge:           ; preds = %block_47342c
  %.pre181 = load i64, i64* %RBP.i, align 8
  br label %block_.L_47348a

block_473459:                                     ; preds = %block_47342c
  store i64 %1331, i64* %RAX.i4266, align 8
  %1332 = add i64 %1331, 6480
  %1333 = add i64 %1330, 15
  store i64 %1333, i64* %3, align 8
  %1334 = inttoptr i64 %1332 to i64*
  %1335 = load i64, i64* %1334, align 8
  store i64 %1335, i64* %RAX.i4266, align 8
  %1336 = add i64 %1330, 18
  store i64 %1336, i64* %3, align 8
  %1337 = inttoptr i64 %1335 to i64*
  %1338 = load i64, i64* %1337, align 8
  store i64 %1338, i64* %RAX.i4266, align 8
  %1339 = load i64, i64* %RBP.i, align 8
  %1340 = add i64 %1339, -144
  %1341 = add i64 %1330, 25
  store i64 %1341, i64* %3, align 8
  %1342 = inttoptr i64 %1340 to i32*
  %1343 = load i32, i32* %1342, align 4
  %1344 = sext i32 %1343 to i64
  store i64 %1344, i64* %RCX.i4448, align 8
  %1345 = shl nsw i64 %1344, 3
  %1346 = add i64 %1345, %1338
  %1347 = add i64 %1330, 29
  store i64 %1347, i64* %3, align 8
  %1348 = inttoptr i64 %1346 to i64*
  %1349 = load i64, i64* %1348, align 8
  store i64 %1349, i64* %RAX.i4266, align 8
  %1350 = add i64 %1339, -140
  %1351 = add i64 %1330, 36
  store i64 %1351, i64* %3, align 8
  %1352 = inttoptr i64 %1350 to i32*
  %1353 = load i32, i32* %1352, align 4
  %1354 = sext i32 %1353 to i64
  store i64 %1354, i64* %RCX.i4448, align 8
  %1355 = shl nsw i64 %1354, 1
  %1356 = add i64 %1355, %1349
  %1357 = add i64 %1330, 40
  store i64 %1357, i64* %3, align 8
  %1358 = inttoptr i64 %1356 to i16*
  %1359 = load i16, i16* %1358, align 2
  %1360 = sext i16 %1359 to i64
  %1361 = and i64 %1360, 4294967295
  store i64 %1361, i64* %RDX.i4301, align 8
  %1362 = sext i16 %1359 to i32
  %1363 = add i64 %1330, 43
  store i8 0, i8* %14, align 1
  %1364 = and i32 %1362, 255
  %1365 = tail call i32 @llvm.ctpop.i32(i32 %1364)
  %1366 = trunc i32 %1365 to i8
  %1367 = and i8 %1366, 1
  %1368 = xor i8 %1367, 1
  store i8 %1368, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1369 = icmp eq i16 %1359, 0
  %1370 = zext i1 %1369 to i8
  store i8 %1370, i8* %30, align 1
  %1371 = lshr i32 %1362, 31
  %1372 = trunc i32 %1371 to i8
  store i8 %1372, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1373 = icmp ne i8 %1372, 0
  %.v144 = select i1 %1373, i64 6, i64 57
  %1374 = add i64 %1363, %.v144
  store i64 %1374, i64* %3, align 8
  br i1 %1373, label %block_.L_47348a, label %block_.L_4734bd

block_.L_47348a:                                  ; preds = %block_47342c.block_.L_47348a_crit_edge, %block_473459
  %1375 = phi i64 [ %1339, %block_473459 ], [ %.pre181, %block_47342c.block_.L_47348a_crit_edge ]
  %1376 = phi i64 [ %1374, %block_473459 ], [ %1330, %block_47342c.block_.L_47348a_crit_edge ]
  store i64 %1331, i64* %RAX.i4266, align 8
  %1377 = add i64 %1331, 6480
  %1378 = add i64 %1376, 15
  store i64 %1378, i64* %3, align 8
  %1379 = inttoptr i64 %1377 to i64*
  %1380 = load i64, i64* %1379, align 8
  store i64 %1380, i64* %RAX.i4266, align 8
  %1381 = add i64 %1376, 18
  store i64 %1381, i64* %3, align 8
  %1382 = inttoptr i64 %1380 to i64*
  %1383 = load i64, i64* %1382, align 8
  store i64 %1383, i64* %RAX.i4266, align 8
  %1384 = add i64 %1375, -144
  %1385 = add i64 %1376, 25
  store i64 %1385, i64* %3, align 8
  %1386 = inttoptr i64 %1384 to i32*
  %1387 = load i32, i32* %1386, align 4
  %1388 = sext i32 %1387 to i64
  store i64 %1388, i64* %RCX.i4448, align 8
  %1389 = shl nsw i64 %1388, 3
  %1390 = add i64 %1389, %1383
  %1391 = add i64 %1376, 29
  store i64 %1391, i64* %3, align 8
  %1392 = inttoptr i64 %1390 to i64*
  %1393 = load i64, i64* %1392, align 8
  store i64 %1393, i64* %RAX.i4266, align 8
  %1394 = add i64 %1375, -140
  %1395 = add i64 %1376, 36
  store i64 %1395, i64* %3, align 8
  %1396 = inttoptr i64 %1394 to i32*
  %1397 = load i32, i32* %1396, align 4
  %1398 = sext i32 %1397 to i64
  store i64 %1398, i64* %RCX.i4448, align 8
  %1399 = shl nsw i64 %1398, 1
  %1400 = add i64 %1399, %1393
  %1401 = add i64 %1376, 40
  store i64 %1401, i64* %3, align 8
  %1402 = inttoptr i64 %1400 to i16*
  %1403 = load i16, i16* %1402, align 2
  %1404 = sext i16 %1403 to i64
  %1405 = and i64 %1404, 4294967295
  store i64 %1405, i64* %RDX.i4301, align 8
  %1406 = add i64 %1375, -312
  %1407 = sext i16 %1403 to i32
  %1408 = add i64 %1376, 46
  store i64 %1408, i64* %3, align 8
  %1409 = inttoptr i64 %1406 to i32*
  store i32 %1407, i32* %1409, align 4
  %1410 = load i64, i64* %3, align 8
  %1411 = add i64 %1410, 54
  store i64 %1411, i64* %3, align 8
  br label %block_.L_4734ee

block_.L_4734bd:                                  ; preds = %block_473459
  store i64 %1331, i64* %RAX.i4266, align 8
  %1412 = add i64 %1374, 15
  store i64 %1412, i64* %3, align 8
  %1413 = load i64, i64* %1334, align 8
  store i64 %1413, i64* %RAX.i4266, align 8
  %1414 = add i64 %1374, 18
  store i64 %1414, i64* %3, align 8
  %1415 = inttoptr i64 %1413 to i64*
  %1416 = load i64, i64* %1415, align 8
  store i64 %1416, i64* %RAX.i4266, align 8
  %1417 = add i64 %1374, 25
  store i64 %1417, i64* %3, align 8
  %1418 = load i32, i32* %1342, align 4
  %1419 = sext i32 %1418 to i64
  store i64 %1419, i64* %RCX.i4448, align 8
  %1420 = shl nsw i64 %1419, 3
  %1421 = add i64 %1420, %1416
  %1422 = add i64 %1374, 29
  store i64 %1422, i64* %3, align 8
  %1423 = inttoptr i64 %1421 to i64*
  %1424 = load i64, i64* %1423, align 8
  store i64 %1424, i64* %RAX.i4266, align 8
  %1425 = add i64 %1374, 36
  store i64 %1425, i64* %3, align 8
  %1426 = load i32, i32* %1352, align 4
  %1427 = sext i32 %1426 to i64
  store i64 %1427, i64* %RCX.i4448, align 8
  %1428 = shl nsw i64 %1427, 1
  %1429 = add i64 %1428, %1424
  %1430 = add i64 %1374, 40
  store i64 %1430, i64* %3, align 8
  %1431 = inttoptr i64 %1429 to i16*
  %1432 = load i16, i16* %1431, align 2
  %1433 = sext i16 %1432 to i32
  %1434 = shl nsw i32 %1433, 1
  %1435 = zext i32 %1434 to i64
  store i64 %1435, i64* %RDX.i4301, align 8
  %.lobit120 = lshr i16 %1432, 15
  %1436 = trunc i16 %.lobit120 to i8
  store i8 %1436, i8* %14, align 1
  %1437 = and i32 %1434, 254
  %1438 = tail call i32 @llvm.ctpop.i32(i32 %1437)
  %1439 = trunc i32 %1438 to i8
  %1440 = and i8 %1439, 1
  %1441 = xor i8 %1440, 1
  store i8 %1441, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1442 = icmp eq i16 %1432, 0
  %1443 = zext i1 %1442 to i8
  store i8 %1443, i8* %30, align 1
  %1444 = lshr i32 %1433, 30
  %1445 = trunc i32 %1444 to i8
  %1446 = and i8 %1445, 1
  store i8 %1446, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1447 = add i64 %1339, -312
  %1448 = add i64 %1374, 48
  store i64 %1448, i64* %3, align 8
  %1449 = inttoptr i64 %1447 to i32*
  store i32 %1434, i32* %1449, align 4
  %.pre182 = load i64, i64* %3, align 8
  br label %block_.L_4734ee

block_.L_4734ee:                                  ; preds = %block_.L_4734bd, %block_.L_47348a
  %1450 = phi i64 [ %.pre182, %block_.L_4734bd ], [ %1411, %block_.L_47348a ]
  %1451 = load i64, i64* %RBP.i, align 8
  %1452 = add i64 %1451, -312
  %1453 = add i64 %1450, 6
  store i64 %1453, i64* %3, align 8
  %1454 = inttoptr i64 %1452 to i32*
  %1455 = load i32, i32* %1454, align 4
  %1456 = zext i32 %1455 to i64
  store i64 %1456, i64* %RAX.i4266, align 8
  %1457 = add i64 %1451, -316
  %1458 = add i64 %1450, 12
  store i64 %1458, i64* %3, align 8
  %1459 = inttoptr i64 %1457 to i32*
  store i32 %1455, i32* %1459, align 4
  %1460 = load i64, i64* %3, align 8
  %1461 = add i64 %1460, 21
  br label %block_.L_47350f

block_.L_4734ff:                                  ; preds = %block_.L_473412
  store i64 4294967295, i64* %RAX.i4266, align 8
  %1462 = add i64 %1263, -316
  %1463 = add i64 %1278, 11
  store i64 %1463, i64* %3, align 8
  %1464 = inttoptr i64 %1462 to i32*
  store i32 -1, i32* %1464, align 4
  %1465 = load i64, i64* %3, align 8
  %1466 = add i64 %1465, 5
  store i64 %1466, i64* %3, align 8
  br label %block_.L_47350f

block_.L_47350f:                                  ; preds = %block_.L_4734ff, %block_.L_4734ee
  %storemerge110 = phi i64 [ %1461, %block_.L_4734ee ], [ %1466, %block_.L_4734ff ]
  %1467 = load i64, i64* %RBP.i, align 8
  %1468 = add i64 %1467, -316
  %1469 = add i64 %storemerge110, 6
  store i64 %1469, i64* %3, align 8
  %1470 = inttoptr i64 %1468 to i32*
  %1471 = load i32, i32* %1470, align 4
  %1472 = zext i32 %1471 to i64
  store i64 %1472, i64* %RAX.i4266, align 8
  %1473 = trunc i32 %1471 to i16
  store i16 %1473, i16* %CX.i3716, align 2
  %1474 = add i64 %1467, -84
  %1475 = add i64 %storemerge110, 13
  store i64 %1475, i64* %3, align 8
  %1476 = inttoptr i64 %1474 to i16*
  store i16 %1473, i16* %1476, align 2
  %1477 = load i64, i64* %RBP.i, align 8
  %1478 = add i64 %1477, -184
  %1479 = load i64, i64* %3, align 8
  %1480 = add i64 %1479, 7
  store i64 %1480, i64* %3, align 8
  %1481 = inttoptr i64 %1478 to i32*
  %1482 = load i32, i32* %1481, align 4
  store i8 0, i8* %14, align 1
  %1483 = and i32 %1482, 255
  %1484 = tail call i32 @llvm.ctpop.i32(i32 %1483)
  %1485 = trunc i32 %1484 to i8
  %1486 = and i8 %1485, 1
  %1487 = xor i8 %1486, 1
  store i8 %1487, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1488 = icmp eq i32 %1482, 0
  %1489 = zext i1 %1488 to i8
  store i8 %1489, i8* %30, align 1
  %1490 = lshr i32 %1482, 31
  %1491 = trunc i32 %1490 to i8
  store i8 %1491, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v293 = select i1 %1488, i64 224, i64 13
  %1492 = add i64 %1479, %.v293
  store i64 %1492, i64* %3, align 8
  br i1 %1488, label %block_.L_4735fc, label %block_473529

block_473529:                                     ; preds = %block_.L_47350f
  %1493 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1493, i64* %RAX.i4266, align 8
  %1494 = add i64 %1493, 14168
  %1495 = add i64 %1492, 15
  store i64 %1495, i64* %3, align 8
  %1496 = inttoptr i64 %1494 to i64*
  %1497 = load i64, i64* %1496, align 8
  store i64 %1497, i64* %RAX.i4266, align 8
  %1498 = add i64 %1477, -180
  %1499 = add i64 %1492, 22
  store i64 %1499, i64* %3, align 8
  %1500 = inttoptr i64 %1498 to i32*
  %1501 = load i32, i32* %1500, align 4
  %1502 = sext i32 %1501 to i64
  %1503 = mul nsw i64 %1502, 632
  store i64 %1503, i64* %RCX.i4448, align 8
  %1504 = lshr i64 %1503, 63
  %1505 = add i64 %1503, %1497
  store i64 %1505, i64* %RAX.i4266, align 8
  %1506 = icmp ult i64 %1505, %1497
  %1507 = icmp ult i64 %1505, %1503
  %1508 = or i1 %1506, %1507
  %1509 = zext i1 %1508 to i8
  store i8 %1509, i8* %14, align 1
  %1510 = trunc i64 %1505 to i32
  %1511 = and i32 %1510, 255
  %1512 = tail call i32 @llvm.ctpop.i32(i32 %1511)
  %1513 = trunc i32 %1512 to i8
  %1514 = and i8 %1513, 1
  %1515 = xor i8 %1514, 1
  store i8 %1515, i8* %21, align 1
  %1516 = xor i64 %1503, %1497
  %1517 = xor i64 %1516, %1505
  %1518 = lshr i64 %1517, 4
  %1519 = trunc i64 %1518 to i8
  %1520 = and i8 %1519, 1
  store i8 %1520, i8* %27, align 1
  %1521 = icmp eq i64 %1505, 0
  %1522 = zext i1 %1521 to i8
  store i8 %1522, i8* %30, align 1
  %1523 = lshr i64 %1505, 63
  %1524 = trunc i64 %1523 to i8
  store i8 %1524, i8* %33, align 1
  %1525 = lshr i64 %1497, 63
  %1526 = xor i64 %1523, %1525
  %1527 = xor i64 %1523, %1504
  %1528 = add nuw nsw i64 %1526, %1527
  %1529 = icmp eq i64 %1528, 2
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %39, align 1
  %1531 = add i64 %1505, 532
  %1532 = add i64 %1492, 39
  store i64 %1532, i64* %3, align 8
  %1533 = inttoptr i64 %1531 to i32*
  %1534 = load i32, i32* %1533, align 4
  store i8 0, i8* %14, align 1
  %1535 = and i32 %1534, 255
  %1536 = tail call i32 @llvm.ctpop.i32(i32 %1535)
  %1537 = trunc i32 %1536 to i8
  %1538 = and i8 %1537, 1
  %1539 = xor i8 %1538, 1
  store i8 %1539, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1540 = icmp eq i32 %1534, 0
  %1541 = zext i1 %1540 to i8
  store i8 %1541, i8* %30, align 1
  %1542 = lshr i32 %1534, 31
  %1543 = trunc i32 %1542 to i8
  store i8 %1543, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v294 = select i1 %1540, i64 45, i64 94
  %1544 = add i64 %1492, %.v294
  store i64 %1544, i64* %3, align 8
  %1545 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %1540, label %block_473556, label %block_473529.block_.L_473587_crit_edge

block_473529.block_.L_473587_crit_edge:           ; preds = %block_473529
  %.pre184 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473587

block_473556:                                     ; preds = %block_473529
  store i64 %1545, i64* %RAX.i4266, align 8
  %1546 = add i64 %1545, 6480
  %1547 = add i64 %1544, 15
  store i64 %1547, i64* %3, align 8
  %1548 = inttoptr i64 %1546 to i64*
  %1549 = load i64, i64* %1548, align 8
  store i64 %1549, i64* %RAX.i4266, align 8
  %1550 = add i64 %1544, 18
  store i64 %1550, i64* %3, align 8
  %1551 = inttoptr i64 %1549 to i64*
  %1552 = load i64, i64* %1551, align 8
  store i64 %1552, i64* %RAX.i4266, align 8
  %1553 = load i64, i64* %RBP.i, align 8
  %1554 = add i64 %1553, -168
  %1555 = add i64 %1544, 25
  store i64 %1555, i64* %3, align 8
  %1556 = inttoptr i64 %1554 to i32*
  %1557 = load i32, i32* %1556, align 4
  %1558 = sext i32 %1557 to i64
  store i64 %1558, i64* %RCX.i4448, align 8
  %1559 = shl nsw i64 %1558, 3
  %1560 = add i64 %1559, %1552
  %1561 = add i64 %1544, 29
  store i64 %1561, i64* %3, align 8
  %1562 = inttoptr i64 %1560 to i64*
  %1563 = load i64, i64* %1562, align 8
  store i64 %1563, i64* %RAX.i4266, align 8
  %1564 = add i64 %1553, -164
  %1565 = add i64 %1544, 36
  store i64 %1565, i64* %3, align 8
  %1566 = inttoptr i64 %1564 to i32*
  %1567 = load i32, i32* %1566, align 4
  %1568 = sext i32 %1567 to i64
  store i64 %1568, i64* %RCX.i4448, align 8
  %1569 = shl nsw i64 %1568, 1
  %1570 = add i64 %1569, %1563
  %1571 = add i64 %1544, 40
  store i64 %1571, i64* %3, align 8
  %1572 = inttoptr i64 %1570 to i16*
  %1573 = load i16, i16* %1572, align 2
  %1574 = sext i16 %1573 to i64
  %1575 = and i64 %1574, 4294967295
  store i64 %1575, i64* %RDX.i4301, align 8
  %1576 = sext i16 %1573 to i32
  %1577 = add i64 %1544, 43
  store i8 0, i8* %14, align 1
  %1578 = and i32 %1576, 255
  %1579 = tail call i32 @llvm.ctpop.i32(i32 %1578)
  %1580 = trunc i32 %1579 to i8
  %1581 = and i8 %1580, 1
  %1582 = xor i8 %1581, 1
  store i8 %1582, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1583 = icmp eq i16 %1573, 0
  %1584 = zext i1 %1583 to i8
  store i8 %1584, i8* %30, align 1
  %1585 = lshr i32 %1576, 31
  %1586 = trunc i32 %1585 to i8
  store i8 %1586, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1587 = icmp ne i8 %1586, 0
  %.v145 = select i1 %1587, i64 6, i64 57
  %1588 = add i64 %1577, %.v145
  store i64 %1588, i64* %3, align 8
  br i1 %1587, label %block_.L_473587, label %block_.L_4735ba

block_.L_473587:                                  ; preds = %block_473529.block_.L_473587_crit_edge, %block_473556
  %1589 = phi i64 [ %1553, %block_473556 ], [ %.pre184, %block_473529.block_.L_473587_crit_edge ]
  %1590 = phi i64 [ %1588, %block_473556 ], [ %1544, %block_473529.block_.L_473587_crit_edge ]
  store i64 %1545, i64* %RAX.i4266, align 8
  %1591 = add i64 %1545, 6480
  %1592 = add i64 %1590, 15
  store i64 %1592, i64* %3, align 8
  %1593 = inttoptr i64 %1591 to i64*
  %1594 = load i64, i64* %1593, align 8
  store i64 %1594, i64* %RAX.i4266, align 8
  %1595 = add i64 %1590, 18
  store i64 %1595, i64* %3, align 8
  %1596 = inttoptr i64 %1594 to i64*
  %1597 = load i64, i64* %1596, align 8
  store i64 %1597, i64* %RAX.i4266, align 8
  %1598 = add i64 %1589, -168
  %1599 = add i64 %1590, 25
  store i64 %1599, i64* %3, align 8
  %1600 = inttoptr i64 %1598 to i32*
  %1601 = load i32, i32* %1600, align 4
  %1602 = sext i32 %1601 to i64
  store i64 %1602, i64* %RCX.i4448, align 8
  %1603 = shl nsw i64 %1602, 3
  %1604 = add i64 %1603, %1597
  %1605 = add i64 %1590, 29
  store i64 %1605, i64* %3, align 8
  %1606 = inttoptr i64 %1604 to i64*
  %1607 = load i64, i64* %1606, align 8
  store i64 %1607, i64* %RAX.i4266, align 8
  %1608 = add i64 %1589, -164
  %1609 = add i64 %1590, 36
  store i64 %1609, i64* %3, align 8
  %1610 = inttoptr i64 %1608 to i32*
  %1611 = load i32, i32* %1610, align 4
  %1612 = sext i32 %1611 to i64
  store i64 %1612, i64* %RCX.i4448, align 8
  %1613 = shl nsw i64 %1612, 1
  %1614 = add i64 %1613, %1607
  %1615 = add i64 %1590, 40
  store i64 %1615, i64* %3, align 8
  %1616 = inttoptr i64 %1614 to i16*
  %1617 = load i16, i16* %1616, align 2
  %1618 = sext i16 %1617 to i64
  %1619 = and i64 %1618, 4294967295
  store i64 %1619, i64* %RDX.i4301, align 8
  %1620 = add i64 %1589, -320
  %1621 = sext i16 %1617 to i32
  %1622 = add i64 %1590, 46
  store i64 %1622, i64* %3, align 8
  %1623 = inttoptr i64 %1620 to i32*
  store i32 %1621, i32* %1623, align 4
  %1624 = load i64, i64* %3, align 8
  %1625 = add i64 %1624, 54
  store i64 %1625, i64* %3, align 8
  br label %block_.L_4735eb

block_.L_4735ba:                                  ; preds = %block_473556
  store i64 %1545, i64* %RAX.i4266, align 8
  %1626 = add i64 %1588, 15
  store i64 %1626, i64* %3, align 8
  %1627 = load i64, i64* %1548, align 8
  store i64 %1627, i64* %RAX.i4266, align 8
  %1628 = add i64 %1588, 18
  store i64 %1628, i64* %3, align 8
  %1629 = inttoptr i64 %1627 to i64*
  %1630 = load i64, i64* %1629, align 8
  store i64 %1630, i64* %RAX.i4266, align 8
  %1631 = add i64 %1588, 25
  store i64 %1631, i64* %3, align 8
  %1632 = load i32, i32* %1556, align 4
  %1633 = sext i32 %1632 to i64
  store i64 %1633, i64* %RCX.i4448, align 8
  %1634 = shl nsw i64 %1633, 3
  %1635 = add i64 %1634, %1630
  %1636 = add i64 %1588, 29
  store i64 %1636, i64* %3, align 8
  %1637 = inttoptr i64 %1635 to i64*
  %1638 = load i64, i64* %1637, align 8
  store i64 %1638, i64* %RAX.i4266, align 8
  %1639 = add i64 %1588, 36
  store i64 %1639, i64* %3, align 8
  %1640 = load i32, i32* %1566, align 4
  %1641 = sext i32 %1640 to i64
  store i64 %1641, i64* %RCX.i4448, align 8
  %1642 = shl nsw i64 %1641, 1
  %1643 = add i64 %1642, %1638
  %1644 = add i64 %1588, 40
  store i64 %1644, i64* %3, align 8
  %1645 = inttoptr i64 %1643 to i16*
  %1646 = load i16, i16* %1645, align 2
  %1647 = sext i16 %1646 to i32
  %1648 = shl nsw i32 %1647, 1
  %1649 = zext i32 %1648 to i64
  store i64 %1649, i64* %RDX.i4301, align 8
  %.lobit119 = lshr i16 %1646, 15
  %1650 = trunc i16 %.lobit119 to i8
  store i8 %1650, i8* %14, align 1
  %1651 = and i32 %1648, 254
  %1652 = tail call i32 @llvm.ctpop.i32(i32 %1651)
  %1653 = trunc i32 %1652 to i8
  %1654 = and i8 %1653, 1
  %1655 = xor i8 %1654, 1
  store i8 %1655, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1656 = icmp eq i16 %1646, 0
  %1657 = zext i1 %1656 to i8
  store i8 %1657, i8* %30, align 1
  %1658 = lshr i32 %1647, 30
  %1659 = trunc i32 %1658 to i8
  %1660 = and i8 %1659, 1
  store i8 %1660, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1661 = add i64 %1553, -320
  %1662 = add i64 %1588, 48
  store i64 %1662, i64* %3, align 8
  %1663 = inttoptr i64 %1661 to i32*
  store i32 %1648, i32* %1663, align 4
  %.pre185 = load i64, i64* %3, align 8
  br label %block_.L_4735eb

block_.L_4735eb:                                  ; preds = %block_.L_4735ba, %block_.L_473587
  %1664 = phi i64 [ %.pre185, %block_.L_4735ba ], [ %1625, %block_.L_473587 ]
  %1665 = load i64, i64* %RBP.i, align 8
  %1666 = add i64 %1665, -320
  %1667 = add i64 %1664, 6
  store i64 %1667, i64* %3, align 8
  %1668 = inttoptr i64 %1666 to i32*
  %1669 = load i32, i32* %1668, align 4
  %1670 = zext i32 %1669 to i64
  store i64 %1670, i64* %RAX.i4266, align 8
  %1671 = add i64 %1665, -324
  %1672 = add i64 %1664, 12
  store i64 %1672, i64* %3, align 8
  %1673 = inttoptr i64 %1671 to i32*
  store i32 %1669, i32* %1673, align 4
  %1674 = load i64, i64* %3, align 8
  %1675 = add i64 %1674, 21
  br label %block_.L_47360c

block_.L_4735fc:                                  ; preds = %block_.L_47350f
  store i64 4294967295, i64* %RAX.i4266, align 8
  %1676 = add i64 %1477, -324
  %1677 = add i64 %1492, 11
  store i64 %1677, i64* %3, align 8
  %1678 = inttoptr i64 %1676 to i32*
  store i32 -1, i32* %1678, align 4
  %1679 = load i64, i64* %3, align 8
  %1680 = add i64 %1679, 5
  store i64 %1680, i64* %3, align 8
  br label %block_.L_47360c

block_.L_47360c:                                  ; preds = %block_.L_4735fc, %block_.L_4735eb
  %storemerge111 = phi i64 [ %1675, %block_.L_4735eb ], [ %1680, %block_.L_4735fc ]
  %1681 = load i64, i64* %RBP.i, align 8
  %1682 = add i64 %1681, -324
  %1683 = add i64 %storemerge111, 6
  store i64 %1683, i64* %3, align 8
  %1684 = inttoptr i64 %1682 to i32*
  %1685 = load i32, i32* %1684, align 4
  %1686 = zext i32 %1685 to i64
  store i64 %1686, i64* %RAX.i4266, align 8
  %1687 = trunc i32 %1685 to i16
  store i16 %1687, i16* %CX.i3716, align 2
  %1688 = add i64 %1681, -86
  %1689 = add i64 %storemerge111, 13
  store i64 %1689, i64* %3, align 8
  %1690 = inttoptr i64 %1688 to i16*
  store i16 %1687, i16* %1690, align 2
  %1691 = load i64, i64* %RBP.i, align 8
  %1692 = add i64 %1691, -208
  %1693 = load i64, i64* %3, align 8
  %1694 = add i64 %1693, 7
  store i64 %1694, i64* %3, align 8
  %1695 = inttoptr i64 %1692 to i32*
  %1696 = load i32, i32* %1695, align 4
  store i8 0, i8* %14, align 1
  %1697 = and i32 %1696, 255
  %1698 = tail call i32 @llvm.ctpop.i32(i32 %1697)
  %1699 = trunc i32 %1698 to i8
  %1700 = and i8 %1699, 1
  %1701 = xor i8 %1700, 1
  store i8 %1701, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1702 = icmp eq i32 %1696, 0
  %1703 = zext i1 %1702 to i8
  store i8 %1703, i8* %30, align 1
  %1704 = lshr i32 %1696, 31
  %1705 = trunc i32 %1704 to i8
  store i8 %1705, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v295 = select i1 %1702, i64 224, i64 13
  %1706 = add i64 %1693, %.v295
  store i64 %1706, i64* %3, align 8
  br i1 %1702, label %block_.L_4736f9, label %block_473626

block_473626:                                     ; preds = %block_.L_47360c
  %1707 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1707, i64* %RAX.i4266, align 8
  %1708 = add i64 %1707, 14168
  %1709 = add i64 %1706, 15
  store i64 %1709, i64* %3, align 8
  %1710 = inttoptr i64 %1708 to i64*
  %1711 = load i64, i64* %1710, align 8
  store i64 %1711, i64* %RAX.i4266, align 8
  %1712 = add i64 %1691, -204
  %1713 = add i64 %1706, 22
  store i64 %1713, i64* %3, align 8
  %1714 = inttoptr i64 %1712 to i32*
  %1715 = load i32, i32* %1714, align 4
  %1716 = sext i32 %1715 to i64
  %1717 = mul nsw i64 %1716, 632
  store i64 %1717, i64* %RCX.i4448, align 8
  %1718 = lshr i64 %1717, 63
  %1719 = add i64 %1717, %1711
  store i64 %1719, i64* %RAX.i4266, align 8
  %1720 = icmp ult i64 %1719, %1711
  %1721 = icmp ult i64 %1719, %1717
  %1722 = or i1 %1720, %1721
  %1723 = zext i1 %1722 to i8
  store i8 %1723, i8* %14, align 1
  %1724 = trunc i64 %1719 to i32
  %1725 = and i32 %1724, 255
  %1726 = tail call i32 @llvm.ctpop.i32(i32 %1725)
  %1727 = trunc i32 %1726 to i8
  %1728 = and i8 %1727, 1
  %1729 = xor i8 %1728, 1
  store i8 %1729, i8* %21, align 1
  %1730 = xor i64 %1717, %1711
  %1731 = xor i64 %1730, %1719
  %1732 = lshr i64 %1731, 4
  %1733 = trunc i64 %1732 to i8
  %1734 = and i8 %1733, 1
  store i8 %1734, i8* %27, align 1
  %1735 = icmp eq i64 %1719, 0
  %1736 = zext i1 %1735 to i8
  store i8 %1736, i8* %30, align 1
  %1737 = lshr i64 %1719, 63
  %1738 = trunc i64 %1737 to i8
  store i8 %1738, i8* %33, align 1
  %1739 = lshr i64 %1711, 63
  %1740 = xor i64 %1737, %1739
  %1741 = xor i64 %1737, %1718
  %1742 = add nuw nsw i64 %1740, %1741
  %1743 = icmp eq i64 %1742, 2
  %1744 = zext i1 %1743 to i8
  store i8 %1744, i8* %39, align 1
  %1745 = add i64 %1719, 532
  %1746 = add i64 %1706, 39
  store i64 %1746, i64* %3, align 8
  %1747 = inttoptr i64 %1745 to i32*
  %1748 = load i32, i32* %1747, align 4
  store i8 0, i8* %14, align 1
  %1749 = and i32 %1748, 255
  %1750 = tail call i32 @llvm.ctpop.i32(i32 %1749)
  %1751 = trunc i32 %1750 to i8
  %1752 = and i8 %1751, 1
  %1753 = xor i8 %1752, 1
  store i8 %1753, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1754 = icmp eq i32 %1748, 0
  %1755 = zext i1 %1754 to i8
  store i8 %1755, i8* %30, align 1
  %1756 = lshr i32 %1748, 31
  %1757 = trunc i32 %1756 to i8
  store i8 %1757, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v296 = select i1 %1754, i64 45, i64 94
  %1758 = add i64 %1706, %.v296
  store i64 %1758, i64* %3, align 8
  %1759 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %1754, label %block_473653, label %block_473626.block_.L_473684_crit_edge

block_473626.block_.L_473684_crit_edge:           ; preds = %block_473626
  %.pre187 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473684

block_473653:                                     ; preds = %block_473626
  store i64 %1759, i64* %RAX.i4266, align 8
  %1760 = add i64 %1759, 6480
  %1761 = add i64 %1758, 15
  store i64 %1761, i64* %3, align 8
  %1762 = inttoptr i64 %1760 to i64*
  %1763 = load i64, i64* %1762, align 8
  store i64 %1763, i64* %RAX.i4266, align 8
  %1764 = add i64 %1758, 18
  store i64 %1764, i64* %3, align 8
  %1765 = inttoptr i64 %1763 to i64*
  %1766 = load i64, i64* %1765, align 8
  store i64 %1766, i64* %RAX.i4266, align 8
  %1767 = load i64, i64* %RBP.i, align 8
  %1768 = add i64 %1767, -192
  %1769 = add i64 %1758, 25
  store i64 %1769, i64* %3, align 8
  %1770 = inttoptr i64 %1768 to i32*
  %1771 = load i32, i32* %1770, align 4
  %1772 = sext i32 %1771 to i64
  store i64 %1772, i64* %RCX.i4448, align 8
  %1773 = shl nsw i64 %1772, 3
  %1774 = add i64 %1773, %1766
  %1775 = add i64 %1758, 29
  store i64 %1775, i64* %3, align 8
  %1776 = inttoptr i64 %1774 to i64*
  %1777 = load i64, i64* %1776, align 8
  store i64 %1777, i64* %RAX.i4266, align 8
  %1778 = add i64 %1767, -188
  %1779 = add i64 %1758, 36
  store i64 %1779, i64* %3, align 8
  %1780 = inttoptr i64 %1778 to i32*
  %1781 = load i32, i32* %1780, align 4
  %1782 = sext i32 %1781 to i64
  store i64 %1782, i64* %RCX.i4448, align 8
  %1783 = shl nsw i64 %1782, 1
  %1784 = add i64 %1783, %1777
  %1785 = add i64 %1758, 40
  store i64 %1785, i64* %3, align 8
  %1786 = inttoptr i64 %1784 to i16*
  %1787 = load i16, i16* %1786, align 2
  %1788 = sext i16 %1787 to i64
  %1789 = and i64 %1788, 4294967295
  store i64 %1789, i64* %RDX.i4301, align 8
  %1790 = sext i16 %1787 to i32
  %1791 = add i64 %1758, 43
  store i8 0, i8* %14, align 1
  %1792 = and i32 %1790, 255
  %1793 = tail call i32 @llvm.ctpop.i32(i32 %1792)
  %1794 = trunc i32 %1793 to i8
  %1795 = and i8 %1794, 1
  %1796 = xor i8 %1795, 1
  store i8 %1796, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1797 = icmp eq i16 %1787, 0
  %1798 = zext i1 %1797 to i8
  store i8 %1798, i8* %30, align 1
  %1799 = lshr i32 %1790, 31
  %1800 = trunc i32 %1799 to i8
  store i8 %1800, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1801 = icmp ne i8 %1800, 0
  %.v146 = select i1 %1801, i64 6, i64 57
  %1802 = add i64 %1791, %.v146
  store i64 %1802, i64* %3, align 8
  br i1 %1801, label %block_.L_473684, label %block_.L_4736b7

block_.L_473684:                                  ; preds = %block_473626.block_.L_473684_crit_edge, %block_473653
  %1803 = phi i64 [ %1767, %block_473653 ], [ %.pre187, %block_473626.block_.L_473684_crit_edge ]
  %1804 = phi i64 [ %1802, %block_473653 ], [ %1758, %block_473626.block_.L_473684_crit_edge ]
  store i64 %1759, i64* %RAX.i4266, align 8
  %1805 = add i64 %1759, 6480
  %1806 = add i64 %1804, 15
  store i64 %1806, i64* %3, align 8
  %1807 = inttoptr i64 %1805 to i64*
  %1808 = load i64, i64* %1807, align 8
  store i64 %1808, i64* %RAX.i4266, align 8
  %1809 = add i64 %1804, 18
  store i64 %1809, i64* %3, align 8
  %1810 = inttoptr i64 %1808 to i64*
  %1811 = load i64, i64* %1810, align 8
  store i64 %1811, i64* %RAX.i4266, align 8
  %1812 = add i64 %1803, -192
  %1813 = add i64 %1804, 25
  store i64 %1813, i64* %3, align 8
  %1814 = inttoptr i64 %1812 to i32*
  %1815 = load i32, i32* %1814, align 4
  %1816 = sext i32 %1815 to i64
  store i64 %1816, i64* %RCX.i4448, align 8
  %1817 = shl nsw i64 %1816, 3
  %1818 = add i64 %1817, %1811
  %1819 = add i64 %1804, 29
  store i64 %1819, i64* %3, align 8
  %1820 = inttoptr i64 %1818 to i64*
  %1821 = load i64, i64* %1820, align 8
  store i64 %1821, i64* %RAX.i4266, align 8
  %1822 = add i64 %1803, -188
  %1823 = add i64 %1804, 36
  store i64 %1823, i64* %3, align 8
  %1824 = inttoptr i64 %1822 to i32*
  %1825 = load i32, i32* %1824, align 4
  %1826 = sext i32 %1825 to i64
  store i64 %1826, i64* %RCX.i4448, align 8
  %1827 = shl nsw i64 %1826, 1
  %1828 = add i64 %1827, %1821
  %1829 = add i64 %1804, 40
  store i64 %1829, i64* %3, align 8
  %1830 = inttoptr i64 %1828 to i16*
  %1831 = load i16, i16* %1830, align 2
  %1832 = sext i16 %1831 to i64
  %1833 = and i64 %1832, 4294967295
  store i64 %1833, i64* %RDX.i4301, align 8
  %1834 = add i64 %1803, -328
  %1835 = sext i16 %1831 to i32
  %1836 = add i64 %1804, 46
  store i64 %1836, i64* %3, align 8
  %1837 = inttoptr i64 %1834 to i32*
  store i32 %1835, i32* %1837, align 4
  %1838 = load i64, i64* %3, align 8
  %1839 = add i64 %1838, 54
  store i64 %1839, i64* %3, align 8
  br label %block_.L_4736e8

block_.L_4736b7:                                  ; preds = %block_473653
  store i64 %1759, i64* %RAX.i4266, align 8
  %1840 = add i64 %1802, 15
  store i64 %1840, i64* %3, align 8
  %1841 = load i64, i64* %1762, align 8
  store i64 %1841, i64* %RAX.i4266, align 8
  %1842 = add i64 %1802, 18
  store i64 %1842, i64* %3, align 8
  %1843 = inttoptr i64 %1841 to i64*
  %1844 = load i64, i64* %1843, align 8
  store i64 %1844, i64* %RAX.i4266, align 8
  %1845 = add i64 %1802, 25
  store i64 %1845, i64* %3, align 8
  %1846 = load i32, i32* %1770, align 4
  %1847 = sext i32 %1846 to i64
  store i64 %1847, i64* %RCX.i4448, align 8
  %1848 = shl nsw i64 %1847, 3
  %1849 = add i64 %1848, %1844
  %1850 = add i64 %1802, 29
  store i64 %1850, i64* %3, align 8
  %1851 = inttoptr i64 %1849 to i64*
  %1852 = load i64, i64* %1851, align 8
  store i64 %1852, i64* %RAX.i4266, align 8
  %1853 = add i64 %1802, 36
  store i64 %1853, i64* %3, align 8
  %1854 = load i32, i32* %1780, align 4
  %1855 = sext i32 %1854 to i64
  store i64 %1855, i64* %RCX.i4448, align 8
  %1856 = shl nsw i64 %1855, 1
  %1857 = add i64 %1856, %1852
  %1858 = add i64 %1802, 40
  store i64 %1858, i64* %3, align 8
  %1859 = inttoptr i64 %1857 to i16*
  %1860 = load i16, i16* %1859, align 2
  %1861 = sext i16 %1860 to i32
  %1862 = shl nsw i32 %1861, 1
  %1863 = zext i32 %1862 to i64
  store i64 %1863, i64* %RDX.i4301, align 8
  %.lobit118 = lshr i16 %1860, 15
  %1864 = trunc i16 %.lobit118 to i8
  store i8 %1864, i8* %14, align 1
  %1865 = and i32 %1862, 254
  %1866 = tail call i32 @llvm.ctpop.i32(i32 %1865)
  %1867 = trunc i32 %1866 to i8
  %1868 = and i8 %1867, 1
  %1869 = xor i8 %1868, 1
  store i8 %1869, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1870 = icmp eq i16 %1860, 0
  %1871 = zext i1 %1870 to i8
  store i8 %1871, i8* %30, align 1
  %1872 = lshr i32 %1861, 30
  %1873 = trunc i32 %1872 to i8
  %1874 = and i8 %1873, 1
  store i8 %1874, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1875 = add i64 %1767, -328
  %1876 = add i64 %1802, 48
  store i64 %1876, i64* %3, align 8
  %1877 = inttoptr i64 %1875 to i32*
  store i32 %1862, i32* %1877, align 4
  %.pre188 = load i64, i64* %3, align 8
  br label %block_.L_4736e8

block_.L_4736e8:                                  ; preds = %block_.L_4736b7, %block_.L_473684
  %1878 = phi i64 [ %.pre188, %block_.L_4736b7 ], [ %1839, %block_.L_473684 ]
  %1879 = load i64, i64* %RBP.i, align 8
  %1880 = add i64 %1879, -328
  %1881 = add i64 %1878, 6
  store i64 %1881, i64* %3, align 8
  %1882 = inttoptr i64 %1880 to i32*
  %1883 = load i32, i32* %1882, align 4
  %1884 = zext i32 %1883 to i64
  store i64 %1884, i64* %RAX.i4266, align 8
  %1885 = add i64 %1879, -332
  %1886 = add i64 %1878, 12
  store i64 %1886, i64* %3, align 8
  %1887 = inttoptr i64 %1885 to i32*
  store i32 %1883, i32* %1887, align 4
  %1888 = load i64, i64* %3, align 8
  %1889 = add i64 %1888, 15
  store i64 %1889, i64* %3, align 8
  br label %block_.L_473703

block_.L_4736f9:                                  ; preds = %block_.L_47360c
  %1890 = add i64 %1691, -86
  %1891 = add i64 %1706, 4
  store i64 %1891, i64* %3, align 8
  %1892 = inttoptr i64 %1890 to i16*
  %1893 = load i16, i16* %1892, align 2
  %1894 = sext i16 %1893 to i64
  %1895 = and i64 %1894, 4294967295
  store i64 %1895, i64* %RAX.i4266, align 8
  %1896 = add i64 %1691, -332
  %1897 = sext i16 %1893 to i32
  %1898 = add i64 %1706, 10
  store i64 %1898, i64* %3, align 8
  %1899 = inttoptr i64 %1896 to i32*
  store i32 %1897, i32* %1899, align 4
  %.pre189 = load i64, i64* %3, align 8
  br label %block_.L_473703

block_.L_473703:                                  ; preds = %block_.L_4736f9, %block_.L_4736e8
  %1900 = phi i64 [ %.pre189, %block_.L_4736f9 ], [ %1889, %block_.L_4736e8 ]
  %1901 = load i64, i64* %RBP.i, align 8
  %1902 = add i64 %1901, -332
  %1903 = add i64 %1900, 6
  store i64 %1903, i64* %3, align 8
  %1904 = inttoptr i64 %1902 to i32*
  %1905 = load i32, i32* %1904, align 4
  %1906 = zext i32 %1905 to i64
  store i64 %1906, i64* %RAX.i4266, align 8
  %1907 = trunc i32 %1905 to i16
  store i16 %1907, i16* %CX.i3716, align 2
  %1908 = add i64 %1901, -88
  %1909 = add i64 %1900, 13
  store i64 %1909, i64* %3, align 8
  %1910 = inttoptr i64 %1908 to i16*
  store i16 %1907, i16* %1910, align 2
  %1911 = load i64, i64* %RBP.i, align 8
  %1912 = add i64 %1911, -136
  %1913 = load i64, i64* %3, align 8
  %1914 = add i64 %1913, 7
  store i64 %1914, i64* %3, align 8
  %1915 = inttoptr i64 %1912 to i32*
  %1916 = load i32, i32* %1915, align 4
  store i8 0, i8* %14, align 1
  %1917 = and i32 %1916, 255
  %1918 = tail call i32 @llvm.ctpop.i32(i32 %1917)
  %1919 = trunc i32 %1918 to i8
  %1920 = and i8 %1919, 1
  %1921 = xor i8 %1920, 1
  store i8 %1921, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1922 = icmp eq i32 %1916, 0
  %1923 = zext i1 %1922 to i8
  store i8 %1923, i8* %30, align 1
  %1924 = lshr i32 %1916, 31
  %1925 = trunc i32 %1924 to i8
  store i8 %1925, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v297 = select i1 %1922, i64 209, i64 13
  %1926 = add i64 %1913, %.v297
  store i64 %1926, i64* %3, align 8
  br i1 %1922, label %block_.L_4737e1, label %block_47371d

block_47371d:                                     ; preds = %block_.L_473703
  %1927 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1927, i64* %RAX.i4266, align 8
  %1928 = add i64 %1927, 14168
  %1929 = add i64 %1926, 15
  store i64 %1929, i64* %3, align 8
  %1930 = inttoptr i64 %1928 to i64*
  %1931 = load i64, i64* %1930, align 8
  store i64 %1931, i64* %RAX.i4266, align 8
  %1932 = add i64 %1911, -132
  %1933 = add i64 %1926, 22
  store i64 %1933, i64* %3, align 8
  %1934 = inttoptr i64 %1932 to i32*
  %1935 = load i32, i32* %1934, align 4
  %1936 = sext i32 %1935 to i64
  %1937 = mul nsw i64 %1936, 632
  store i64 %1937, i64* %RCX.i4448, align 8
  %1938 = lshr i64 %1937, 63
  %1939 = add i64 %1937, %1931
  store i64 %1939, i64* %RAX.i4266, align 8
  %1940 = icmp ult i64 %1939, %1931
  %1941 = icmp ult i64 %1939, %1937
  %1942 = or i1 %1940, %1941
  %1943 = zext i1 %1942 to i8
  store i8 %1943, i8* %14, align 1
  %1944 = trunc i64 %1939 to i32
  %1945 = and i32 %1944, 255
  %1946 = tail call i32 @llvm.ctpop.i32(i32 %1945)
  %1947 = trunc i32 %1946 to i8
  %1948 = and i8 %1947, 1
  %1949 = xor i8 %1948, 1
  store i8 %1949, i8* %21, align 1
  %1950 = xor i64 %1937, %1931
  %1951 = xor i64 %1950, %1939
  %1952 = lshr i64 %1951, 4
  %1953 = trunc i64 %1952 to i8
  %1954 = and i8 %1953, 1
  store i8 %1954, i8* %27, align 1
  %1955 = icmp eq i64 %1939, 0
  %1956 = zext i1 %1955 to i8
  store i8 %1956, i8* %30, align 1
  %1957 = lshr i64 %1939, 63
  %1958 = trunc i64 %1957 to i8
  store i8 %1958, i8* %33, align 1
  %1959 = lshr i64 %1931, 63
  %1960 = xor i64 %1957, %1959
  %1961 = xor i64 %1957, %1938
  %1962 = add nuw nsw i64 %1960, %1961
  %1963 = icmp eq i64 %1962, 2
  %1964 = zext i1 %1963 to i8
  store i8 %1964, i8* %39, align 1
  %1965 = add i64 %1939, 532
  %1966 = add i64 %1926, 39
  store i64 %1966, i64* %3, align 8
  %1967 = inttoptr i64 %1965 to i32*
  %1968 = load i32, i32* %1967, align 4
  store i8 0, i8* %14, align 1
  %1969 = and i32 %1968, 255
  %1970 = tail call i32 @llvm.ctpop.i32(i32 %1969)
  %1971 = trunc i32 %1970 to i8
  %1972 = and i8 %1971, 1
  %1973 = xor i8 %1972, 1
  store i8 %1973, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1974 = icmp eq i32 %1968, 0
  %1975 = zext i1 %1974 to i8
  store i8 %1975, i8* %30, align 1
  %1976 = lshr i32 %1968, 31
  %1977 = trunc i32 %1976 to i8
  store i8 %1977, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v298 = select i1 %1974, i64 45, i64 89
  %1978 = add i64 %1926, %.v298
  store i64 %1978, i64* %3, align 8
  %1979 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %1974, label %block_47374a, label %block_47371d.block_.L_473776_crit_edge

block_47371d.block_.L_473776_crit_edge:           ; preds = %block_47371d
  %.pre191 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473776

block_47374a:                                     ; preds = %block_47371d
  store i64 %1979, i64* %RAX.i4266, align 8
  %1980 = add i64 %1979, 6480
  %1981 = add i64 %1978, 15
  store i64 %1981, i64* %3, align 8
  %1982 = inttoptr i64 %1980 to i64*
  %1983 = load i64, i64* %1982, align 8
  store i64 %1983, i64* %RAX.i4266, align 8
  %1984 = add i64 %1983, 8
  %1985 = add i64 %1978, 19
  store i64 %1985, i64* %3, align 8
  %1986 = inttoptr i64 %1984 to i64*
  %1987 = load i64, i64* %1986, align 8
  store i64 %1987, i64* %RAX.i4266, align 8
  %1988 = load i64, i64* %RBP.i, align 8
  %1989 = add i64 %1988, -120
  %1990 = add i64 %1978, 23
  store i64 %1990, i64* %3, align 8
  %1991 = inttoptr i64 %1989 to i32*
  %1992 = load i32, i32* %1991, align 4
  %1993 = sext i32 %1992 to i64
  store i64 %1993, i64* %RCX.i4448, align 8
  %1994 = shl nsw i64 %1993, 3
  %1995 = add i64 %1994, %1987
  %1996 = add i64 %1978, 27
  store i64 %1996, i64* %3, align 8
  %1997 = inttoptr i64 %1995 to i64*
  %1998 = load i64, i64* %1997, align 8
  store i64 %1998, i64* %RAX.i4266, align 8
  %1999 = add i64 %1988, -116
  %2000 = add i64 %1978, 31
  store i64 %2000, i64* %3, align 8
  %2001 = inttoptr i64 %1999 to i32*
  %2002 = load i32, i32* %2001, align 4
  %2003 = sext i32 %2002 to i64
  store i64 %2003, i64* %RCX.i4448, align 8
  %2004 = shl nsw i64 %2003, 1
  %2005 = add i64 %2004, %1998
  %2006 = add i64 %1978, 35
  store i64 %2006, i64* %3, align 8
  %2007 = inttoptr i64 %2005 to i16*
  %2008 = load i16, i16* %2007, align 2
  %2009 = sext i16 %2008 to i64
  %2010 = and i64 %2009, 4294967295
  store i64 %2010, i64* %RDX.i4301, align 8
  %2011 = sext i16 %2008 to i32
  %2012 = add i64 %1978, 38
  store i8 0, i8* %14, align 1
  %2013 = and i32 %2011, 255
  %2014 = tail call i32 @llvm.ctpop.i32(i32 %2013)
  %2015 = trunc i32 %2014 to i8
  %2016 = and i8 %2015, 1
  %2017 = xor i8 %2016, 1
  store i8 %2017, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2018 = icmp eq i16 %2008, 0
  %2019 = zext i1 %2018 to i8
  store i8 %2019, i8* %30, align 1
  %2020 = lshr i32 %2011, 31
  %2021 = trunc i32 %2020 to i8
  store i8 %2021, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2022 = icmp ne i8 %2021, 0
  %.v147 = select i1 %2022, i64 6, i64 52
  %2023 = add i64 %2012, %.v147
  store i64 %2023, i64* %3, align 8
  br i1 %2022, label %block_.L_473776, label %block_.L_4737a4

block_.L_473776:                                  ; preds = %block_47371d.block_.L_473776_crit_edge, %block_47374a
  %2024 = phi i64 [ %1988, %block_47374a ], [ %.pre191, %block_47371d.block_.L_473776_crit_edge ]
  %2025 = phi i64 [ %2023, %block_47374a ], [ %1978, %block_47371d.block_.L_473776_crit_edge ]
  store i64 %1979, i64* %RAX.i4266, align 8
  %2026 = add i64 %1979, 6480
  %2027 = add i64 %2025, 15
  store i64 %2027, i64* %3, align 8
  %2028 = inttoptr i64 %2026 to i64*
  %2029 = load i64, i64* %2028, align 8
  store i64 %2029, i64* %RAX.i4266, align 8
  %2030 = add i64 %2029, 8
  %2031 = add i64 %2025, 19
  store i64 %2031, i64* %3, align 8
  %2032 = inttoptr i64 %2030 to i64*
  %2033 = load i64, i64* %2032, align 8
  store i64 %2033, i64* %RAX.i4266, align 8
  %2034 = add i64 %2024, -120
  %2035 = add i64 %2025, 23
  store i64 %2035, i64* %3, align 8
  %2036 = inttoptr i64 %2034 to i32*
  %2037 = load i32, i32* %2036, align 4
  %2038 = sext i32 %2037 to i64
  store i64 %2038, i64* %RCX.i4448, align 8
  %2039 = shl nsw i64 %2038, 3
  %2040 = add i64 %2039, %2033
  %2041 = add i64 %2025, 27
  store i64 %2041, i64* %3, align 8
  %2042 = inttoptr i64 %2040 to i64*
  %2043 = load i64, i64* %2042, align 8
  store i64 %2043, i64* %RAX.i4266, align 8
  %2044 = add i64 %2024, -116
  %2045 = add i64 %2025, 31
  store i64 %2045, i64* %3, align 8
  %2046 = inttoptr i64 %2044 to i32*
  %2047 = load i32, i32* %2046, align 4
  %2048 = sext i32 %2047 to i64
  store i64 %2048, i64* %RCX.i4448, align 8
  %2049 = shl nsw i64 %2048, 1
  %2050 = add i64 %2049, %2043
  %2051 = add i64 %2025, 35
  store i64 %2051, i64* %3, align 8
  %2052 = inttoptr i64 %2050 to i16*
  %2053 = load i16, i16* %2052, align 2
  %2054 = sext i16 %2053 to i64
  %2055 = and i64 %2054, 4294967295
  store i64 %2055, i64* %RDX.i4301, align 8
  %2056 = add i64 %2024, -336
  %2057 = sext i16 %2053 to i32
  %2058 = add i64 %2025, 41
  store i64 %2058, i64* %3, align 8
  %2059 = inttoptr i64 %2056 to i32*
  store i32 %2057, i32* %2059, align 4
  %2060 = load i64, i64* %3, align 8
  %2061 = add i64 %2060, 49
  store i64 %2061, i64* %3, align 8
  br label %block_.L_4737d0

block_.L_4737a4:                                  ; preds = %block_47374a
  store i64 %1979, i64* %RAX.i4266, align 8
  %2062 = add i64 %2023, 15
  store i64 %2062, i64* %3, align 8
  %2063 = load i64, i64* %1982, align 8
  store i64 %2063, i64* %RAX.i4266, align 8
  %2064 = add i64 %2063, 8
  %2065 = add i64 %2023, 19
  store i64 %2065, i64* %3, align 8
  %2066 = inttoptr i64 %2064 to i64*
  %2067 = load i64, i64* %2066, align 8
  store i64 %2067, i64* %RAX.i4266, align 8
  %2068 = add i64 %2023, 23
  store i64 %2068, i64* %3, align 8
  %2069 = load i32, i32* %1991, align 4
  %2070 = sext i32 %2069 to i64
  store i64 %2070, i64* %RCX.i4448, align 8
  %2071 = shl nsw i64 %2070, 3
  %2072 = add i64 %2071, %2067
  %2073 = add i64 %2023, 27
  store i64 %2073, i64* %3, align 8
  %2074 = inttoptr i64 %2072 to i64*
  %2075 = load i64, i64* %2074, align 8
  store i64 %2075, i64* %RAX.i4266, align 8
  %2076 = add i64 %2023, 31
  store i64 %2076, i64* %3, align 8
  %2077 = load i32, i32* %2001, align 4
  %2078 = sext i32 %2077 to i64
  store i64 %2078, i64* %RCX.i4448, align 8
  %2079 = shl nsw i64 %2078, 1
  %2080 = add i64 %2079, %2075
  %2081 = add i64 %2023, 35
  store i64 %2081, i64* %3, align 8
  %2082 = inttoptr i64 %2080 to i16*
  %2083 = load i16, i16* %2082, align 2
  %2084 = sext i16 %2083 to i32
  %2085 = shl nsw i32 %2084, 1
  %2086 = zext i32 %2085 to i64
  store i64 %2086, i64* %RDX.i4301, align 8
  %.lobit117 = lshr i16 %2083, 15
  %2087 = trunc i16 %.lobit117 to i8
  store i8 %2087, i8* %14, align 1
  %2088 = and i32 %2085, 254
  %2089 = tail call i32 @llvm.ctpop.i32(i32 %2088)
  %2090 = trunc i32 %2089 to i8
  %2091 = and i8 %2090, 1
  %2092 = xor i8 %2091, 1
  store i8 %2092, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2093 = icmp eq i16 %2083, 0
  %2094 = zext i1 %2093 to i8
  store i8 %2094, i8* %30, align 1
  %2095 = lshr i32 %2084, 30
  %2096 = trunc i32 %2095 to i8
  %2097 = and i8 %2096, 1
  store i8 %2097, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2098 = add i64 %1988, -336
  %2099 = add i64 %2023, 43
  store i64 %2099, i64* %3, align 8
  %2100 = inttoptr i64 %2098 to i32*
  store i32 %2085, i32* %2100, align 4
  %.pre192 = load i64, i64* %3, align 8
  br label %block_.L_4737d0

block_.L_4737d0:                                  ; preds = %block_.L_4737a4, %block_.L_473776
  %2101 = phi i64 [ %.pre192, %block_.L_4737a4 ], [ %2061, %block_.L_473776 ]
  %2102 = load i64, i64* %RBP.i, align 8
  %2103 = add i64 %2102, -336
  %2104 = add i64 %2101, 6
  store i64 %2104, i64* %3, align 8
  %2105 = inttoptr i64 %2103 to i32*
  %2106 = load i32, i32* %2105, align 4
  %2107 = zext i32 %2106 to i64
  store i64 %2107, i64* %RAX.i4266, align 8
  %2108 = add i64 %2102, -340
  %2109 = add i64 %2101, 12
  store i64 %2109, i64* %3, align 8
  %2110 = inttoptr i64 %2108 to i32*
  store i32 %2106, i32* %2110, align 4
  %2111 = load i64, i64* %3, align 8
  %2112 = add i64 %2111, 21
  br label %block_.L_4737f1

block_.L_4737e1:                                  ; preds = %block_.L_473703
  store i64 4294967295, i64* %RAX.i4266, align 8
  %2113 = add i64 %1911, -340
  %2114 = add i64 %1926, 11
  store i64 %2114, i64* %3, align 8
  %2115 = inttoptr i64 %2113 to i32*
  store i32 -1, i32* %2115, align 4
  %2116 = load i64, i64* %3, align 8
  %2117 = add i64 %2116, 5
  store i64 %2117, i64* %3, align 8
  br label %block_.L_4737f1

block_.L_4737f1:                                  ; preds = %block_.L_4737e1, %block_.L_4737d0
  %storemerge112 = phi i64 [ %2112, %block_.L_4737d0 ], [ %2117, %block_.L_4737e1 ]
  %2118 = load i64, i64* %RBP.i, align 8
  %2119 = add i64 %2118, -340
  %2120 = add i64 %storemerge112, 6
  store i64 %2120, i64* %3, align 8
  %2121 = inttoptr i64 %2119 to i32*
  %2122 = load i32, i32* %2121, align 4
  %2123 = zext i32 %2122 to i64
  store i64 %2123, i64* %RAX.i4266, align 8
  %2124 = trunc i32 %2122 to i16
  store i16 %2124, i16* %CX.i3716, align 2
  %2125 = add i64 %2118, -90
  %2126 = add i64 %storemerge112, 13
  store i64 %2126, i64* %3, align 8
  %2127 = inttoptr i64 %2125 to i16*
  store i16 %2124, i16* %2127, align 2
  %2128 = load i64, i64* %RBP.i, align 8
  %2129 = add i64 %2128, -160
  %2130 = load i64, i64* %3, align 8
  %2131 = add i64 %2130, 7
  store i64 %2131, i64* %3, align 8
  %2132 = inttoptr i64 %2129 to i32*
  %2133 = load i32, i32* %2132, align 4
  store i8 0, i8* %14, align 1
  %2134 = and i32 %2133, 255
  %2135 = tail call i32 @llvm.ctpop.i32(i32 %2134)
  %2136 = trunc i32 %2135 to i8
  %2137 = and i8 %2136, 1
  %2138 = xor i8 %2137, 1
  store i8 %2138, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2139 = icmp eq i32 %2133, 0
  %2140 = zext i1 %2139 to i8
  store i8 %2140, i8* %30, align 1
  %2141 = lshr i32 %2133, 31
  %2142 = trunc i32 %2141 to i8
  store i8 %2142, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v299 = select i1 %2139, i64 227, i64 13
  %2143 = add i64 %2130, %.v299
  store i64 %2143, i64* %3, align 8
  br i1 %2139, label %block_.L_4738e1, label %block_47380b

block_47380b:                                     ; preds = %block_.L_4737f1
  %2144 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2144, i64* %RAX.i4266, align 8
  %2145 = add i64 %2144, 14168
  %2146 = add i64 %2143, 15
  store i64 %2146, i64* %3, align 8
  %2147 = inttoptr i64 %2145 to i64*
  %2148 = load i64, i64* %2147, align 8
  store i64 %2148, i64* %RAX.i4266, align 8
  %2149 = add i64 %2128, -156
  %2150 = add i64 %2143, 22
  store i64 %2150, i64* %3, align 8
  %2151 = inttoptr i64 %2149 to i32*
  %2152 = load i32, i32* %2151, align 4
  %2153 = sext i32 %2152 to i64
  %2154 = mul nsw i64 %2153, 632
  store i64 %2154, i64* %RCX.i4448, align 8
  %2155 = lshr i64 %2154, 63
  %2156 = add i64 %2154, %2148
  store i64 %2156, i64* %RAX.i4266, align 8
  %2157 = icmp ult i64 %2156, %2148
  %2158 = icmp ult i64 %2156, %2154
  %2159 = or i1 %2157, %2158
  %2160 = zext i1 %2159 to i8
  store i8 %2160, i8* %14, align 1
  %2161 = trunc i64 %2156 to i32
  %2162 = and i32 %2161, 255
  %2163 = tail call i32 @llvm.ctpop.i32(i32 %2162)
  %2164 = trunc i32 %2163 to i8
  %2165 = and i8 %2164, 1
  %2166 = xor i8 %2165, 1
  store i8 %2166, i8* %21, align 1
  %2167 = xor i64 %2154, %2148
  %2168 = xor i64 %2167, %2156
  %2169 = lshr i64 %2168, 4
  %2170 = trunc i64 %2169 to i8
  %2171 = and i8 %2170, 1
  store i8 %2171, i8* %27, align 1
  %2172 = icmp eq i64 %2156, 0
  %2173 = zext i1 %2172 to i8
  store i8 %2173, i8* %30, align 1
  %2174 = lshr i64 %2156, 63
  %2175 = trunc i64 %2174 to i8
  store i8 %2175, i8* %33, align 1
  %2176 = lshr i64 %2148, 63
  %2177 = xor i64 %2174, %2176
  %2178 = xor i64 %2174, %2155
  %2179 = add nuw nsw i64 %2177, %2178
  %2180 = icmp eq i64 %2179, 2
  %2181 = zext i1 %2180 to i8
  store i8 %2181, i8* %39, align 1
  %2182 = add i64 %2156, 532
  %2183 = add i64 %2143, 39
  store i64 %2183, i64* %3, align 8
  %2184 = inttoptr i64 %2182 to i32*
  %2185 = load i32, i32* %2184, align 4
  store i8 0, i8* %14, align 1
  %2186 = and i32 %2185, 255
  %2187 = tail call i32 @llvm.ctpop.i32(i32 %2186)
  %2188 = trunc i32 %2187 to i8
  %2189 = and i8 %2188, 1
  %2190 = xor i8 %2189, 1
  store i8 %2190, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2191 = icmp eq i32 %2185, 0
  %2192 = zext i1 %2191 to i8
  store i8 %2192, i8* %30, align 1
  %2193 = lshr i32 %2185, 31
  %2194 = trunc i32 %2193 to i8
  store i8 %2194, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v300 = select i1 %2191, i64 45, i64 95
  %2195 = add i64 %2143, %.v300
  store i64 %2195, i64* %3, align 8
  %2196 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %2191, label %block_473838, label %block_47380b.block_.L_47386a_crit_edge

block_47380b.block_.L_47386a_crit_edge:           ; preds = %block_47380b
  %.pre194 = load i64, i64* %RBP.i, align 8
  br label %block_.L_47386a

block_473838:                                     ; preds = %block_47380b
  store i64 %2196, i64* %RAX.i4266, align 8
  %2197 = add i64 %2196, 6480
  %2198 = add i64 %2195, 15
  store i64 %2198, i64* %3, align 8
  %2199 = inttoptr i64 %2197 to i64*
  %2200 = load i64, i64* %2199, align 8
  store i64 %2200, i64* %RAX.i4266, align 8
  %2201 = add i64 %2200, 8
  %2202 = add i64 %2195, 19
  store i64 %2202, i64* %3, align 8
  %2203 = inttoptr i64 %2201 to i64*
  %2204 = load i64, i64* %2203, align 8
  store i64 %2204, i64* %RAX.i4266, align 8
  %2205 = load i64, i64* %RBP.i, align 8
  %2206 = add i64 %2205, -144
  %2207 = add i64 %2195, 26
  store i64 %2207, i64* %3, align 8
  %2208 = inttoptr i64 %2206 to i32*
  %2209 = load i32, i32* %2208, align 4
  %2210 = sext i32 %2209 to i64
  store i64 %2210, i64* %RCX.i4448, align 8
  %2211 = shl nsw i64 %2210, 3
  %2212 = add i64 %2211, %2204
  %2213 = add i64 %2195, 30
  store i64 %2213, i64* %3, align 8
  %2214 = inttoptr i64 %2212 to i64*
  %2215 = load i64, i64* %2214, align 8
  store i64 %2215, i64* %RAX.i4266, align 8
  %2216 = add i64 %2205, -140
  %2217 = add i64 %2195, 37
  store i64 %2217, i64* %3, align 8
  %2218 = inttoptr i64 %2216 to i32*
  %2219 = load i32, i32* %2218, align 4
  %2220 = sext i32 %2219 to i64
  store i64 %2220, i64* %RCX.i4448, align 8
  %2221 = shl nsw i64 %2220, 1
  %2222 = add i64 %2221, %2215
  %2223 = add i64 %2195, 41
  store i64 %2223, i64* %3, align 8
  %2224 = inttoptr i64 %2222 to i16*
  %2225 = load i16, i16* %2224, align 2
  %2226 = sext i16 %2225 to i64
  %2227 = and i64 %2226, 4294967295
  store i64 %2227, i64* %RDX.i4301, align 8
  %2228 = sext i16 %2225 to i32
  %2229 = add i64 %2195, 44
  store i8 0, i8* %14, align 1
  %2230 = and i32 %2228, 255
  %2231 = tail call i32 @llvm.ctpop.i32(i32 %2230)
  %2232 = trunc i32 %2231 to i8
  %2233 = and i8 %2232, 1
  %2234 = xor i8 %2233, 1
  store i8 %2234, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2235 = icmp eq i16 %2225, 0
  %2236 = zext i1 %2235 to i8
  store i8 %2236, i8* %30, align 1
  %2237 = lshr i32 %2228, 31
  %2238 = trunc i32 %2237 to i8
  store i8 %2238, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2239 = icmp ne i8 %2238, 0
  %.v148 = select i1 %2239, i64 6, i64 58
  %2240 = add i64 %2229, %.v148
  store i64 %2240, i64* %3, align 8
  br i1 %2239, label %block_.L_47386a, label %block_.L_47389e

block_.L_47386a:                                  ; preds = %block_47380b.block_.L_47386a_crit_edge, %block_473838
  %2241 = phi i64 [ %2205, %block_473838 ], [ %.pre194, %block_47380b.block_.L_47386a_crit_edge ]
  %2242 = phi i64 [ %2240, %block_473838 ], [ %2195, %block_47380b.block_.L_47386a_crit_edge ]
  store i64 %2196, i64* %RAX.i4266, align 8
  %2243 = add i64 %2196, 6480
  %2244 = add i64 %2242, 15
  store i64 %2244, i64* %3, align 8
  %2245 = inttoptr i64 %2243 to i64*
  %2246 = load i64, i64* %2245, align 8
  store i64 %2246, i64* %RAX.i4266, align 8
  %2247 = add i64 %2246, 8
  %2248 = add i64 %2242, 19
  store i64 %2248, i64* %3, align 8
  %2249 = inttoptr i64 %2247 to i64*
  %2250 = load i64, i64* %2249, align 8
  store i64 %2250, i64* %RAX.i4266, align 8
  %2251 = add i64 %2241, -144
  %2252 = add i64 %2242, 26
  store i64 %2252, i64* %3, align 8
  %2253 = inttoptr i64 %2251 to i32*
  %2254 = load i32, i32* %2253, align 4
  %2255 = sext i32 %2254 to i64
  store i64 %2255, i64* %RCX.i4448, align 8
  %2256 = shl nsw i64 %2255, 3
  %2257 = add i64 %2256, %2250
  %2258 = add i64 %2242, 30
  store i64 %2258, i64* %3, align 8
  %2259 = inttoptr i64 %2257 to i64*
  %2260 = load i64, i64* %2259, align 8
  store i64 %2260, i64* %RAX.i4266, align 8
  %2261 = add i64 %2241, -140
  %2262 = add i64 %2242, 37
  store i64 %2262, i64* %3, align 8
  %2263 = inttoptr i64 %2261 to i32*
  %2264 = load i32, i32* %2263, align 4
  %2265 = sext i32 %2264 to i64
  store i64 %2265, i64* %RCX.i4448, align 8
  %2266 = shl nsw i64 %2265, 1
  %2267 = add i64 %2266, %2260
  %2268 = add i64 %2242, 41
  store i64 %2268, i64* %3, align 8
  %2269 = inttoptr i64 %2267 to i16*
  %2270 = load i16, i16* %2269, align 2
  %2271 = sext i16 %2270 to i64
  %2272 = and i64 %2271, 4294967295
  store i64 %2272, i64* %RDX.i4301, align 8
  %2273 = add i64 %2241, -344
  %2274 = sext i16 %2270 to i32
  %2275 = add i64 %2242, 47
  store i64 %2275, i64* %3, align 8
  %2276 = inttoptr i64 %2273 to i32*
  store i32 %2274, i32* %2276, align 4
  %2277 = load i64, i64* %3, align 8
  %2278 = add i64 %2277, 55
  store i64 %2278, i64* %3, align 8
  br label %block_.L_4738d0

block_.L_47389e:                                  ; preds = %block_473838
  store i64 %2196, i64* %RAX.i4266, align 8
  %2279 = add i64 %2240, 15
  store i64 %2279, i64* %3, align 8
  %2280 = load i64, i64* %2199, align 8
  store i64 %2280, i64* %RAX.i4266, align 8
  %2281 = add i64 %2280, 8
  %2282 = add i64 %2240, 19
  store i64 %2282, i64* %3, align 8
  %2283 = inttoptr i64 %2281 to i64*
  %2284 = load i64, i64* %2283, align 8
  store i64 %2284, i64* %RAX.i4266, align 8
  %2285 = add i64 %2240, 26
  store i64 %2285, i64* %3, align 8
  %2286 = load i32, i32* %2208, align 4
  %2287 = sext i32 %2286 to i64
  store i64 %2287, i64* %RCX.i4448, align 8
  %2288 = shl nsw i64 %2287, 3
  %2289 = add i64 %2288, %2284
  %2290 = add i64 %2240, 30
  store i64 %2290, i64* %3, align 8
  %2291 = inttoptr i64 %2289 to i64*
  %2292 = load i64, i64* %2291, align 8
  store i64 %2292, i64* %RAX.i4266, align 8
  %2293 = add i64 %2240, 37
  store i64 %2293, i64* %3, align 8
  %2294 = load i32, i32* %2218, align 4
  %2295 = sext i32 %2294 to i64
  store i64 %2295, i64* %RCX.i4448, align 8
  %2296 = shl nsw i64 %2295, 1
  %2297 = add i64 %2296, %2292
  %2298 = add i64 %2240, 41
  store i64 %2298, i64* %3, align 8
  %2299 = inttoptr i64 %2297 to i16*
  %2300 = load i16, i16* %2299, align 2
  %2301 = sext i16 %2300 to i32
  %2302 = shl nsw i32 %2301, 1
  %2303 = zext i32 %2302 to i64
  store i64 %2303, i64* %RDX.i4301, align 8
  %.lobit116 = lshr i16 %2300, 15
  %2304 = trunc i16 %.lobit116 to i8
  store i8 %2304, i8* %14, align 1
  %2305 = and i32 %2302, 254
  %2306 = tail call i32 @llvm.ctpop.i32(i32 %2305)
  %2307 = trunc i32 %2306 to i8
  %2308 = and i8 %2307, 1
  %2309 = xor i8 %2308, 1
  store i8 %2309, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2310 = icmp eq i16 %2300, 0
  %2311 = zext i1 %2310 to i8
  store i8 %2311, i8* %30, align 1
  %2312 = lshr i32 %2301, 30
  %2313 = trunc i32 %2312 to i8
  %2314 = and i8 %2313, 1
  store i8 %2314, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2315 = add i64 %2205, -344
  %2316 = add i64 %2240, 49
  store i64 %2316, i64* %3, align 8
  %2317 = inttoptr i64 %2315 to i32*
  store i32 %2302, i32* %2317, align 4
  %.pre195 = load i64, i64* %3, align 8
  br label %block_.L_4738d0

block_.L_4738d0:                                  ; preds = %block_.L_47389e, %block_.L_47386a
  %2318 = phi i64 [ %.pre195, %block_.L_47389e ], [ %2278, %block_.L_47386a ]
  %2319 = load i64, i64* %RBP.i, align 8
  %2320 = add i64 %2319, -344
  %2321 = add i64 %2318, 6
  store i64 %2321, i64* %3, align 8
  %2322 = inttoptr i64 %2320 to i32*
  %2323 = load i32, i32* %2322, align 4
  %2324 = zext i32 %2323 to i64
  store i64 %2324, i64* %RAX.i4266, align 8
  %2325 = add i64 %2319, -348
  %2326 = add i64 %2318, 12
  store i64 %2326, i64* %3, align 8
  %2327 = inttoptr i64 %2325 to i32*
  store i32 %2323, i32* %2327, align 4
  %2328 = load i64, i64* %3, align 8
  %2329 = add i64 %2328, 21
  br label %block_.L_4738f1

block_.L_4738e1:                                  ; preds = %block_.L_4737f1
  store i64 4294967295, i64* %RAX.i4266, align 8
  %2330 = add i64 %2128, -348
  %2331 = add i64 %2143, 11
  store i64 %2331, i64* %3, align 8
  %2332 = inttoptr i64 %2330 to i32*
  store i32 -1, i32* %2332, align 4
  %2333 = load i64, i64* %3, align 8
  %2334 = add i64 %2333, 5
  store i64 %2334, i64* %3, align 8
  br label %block_.L_4738f1

block_.L_4738f1:                                  ; preds = %block_.L_4738e1, %block_.L_4738d0
  %storemerge113 = phi i64 [ %2329, %block_.L_4738d0 ], [ %2334, %block_.L_4738e1 ]
  %2335 = load i64, i64* %RBP.i, align 8
  %2336 = add i64 %2335, -348
  %2337 = add i64 %storemerge113, 6
  store i64 %2337, i64* %3, align 8
  %2338 = inttoptr i64 %2336 to i32*
  %2339 = load i32, i32* %2338, align 4
  %2340 = zext i32 %2339 to i64
  store i64 %2340, i64* %RAX.i4266, align 8
  %2341 = trunc i32 %2339 to i16
  store i16 %2341, i16* %CX.i3716, align 2
  %2342 = add i64 %2335, -92
  %2343 = add i64 %storemerge113, 13
  store i64 %2343, i64* %3, align 8
  %2344 = inttoptr i64 %2342 to i16*
  store i16 %2341, i16* %2344, align 2
  %2345 = load i64, i64* %RBP.i, align 8
  %2346 = add i64 %2345, -184
  %2347 = load i64, i64* %3, align 8
  %2348 = add i64 %2347, 7
  store i64 %2348, i64* %3, align 8
  %2349 = inttoptr i64 %2346 to i32*
  %2350 = load i32, i32* %2349, align 4
  store i8 0, i8* %14, align 1
  %2351 = and i32 %2350, 255
  %2352 = tail call i32 @llvm.ctpop.i32(i32 %2351)
  %2353 = trunc i32 %2352 to i8
  %2354 = and i8 %2353, 1
  %2355 = xor i8 %2354, 1
  store i8 %2355, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2356 = icmp eq i32 %2350, 0
  %2357 = zext i1 %2356 to i8
  store i8 %2357, i8* %30, align 1
  %2358 = lshr i32 %2350, 31
  %2359 = trunc i32 %2358 to i8
  store i8 %2359, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v301 = select i1 %2356, i64 227, i64 13
  %2360 = add i64 %2347, %.v301
  store i64 %2360, i64* %3, align 8
  br i1 %2356, label %block_.L_4739e1, label %block_47390b

block_47390b:                                     ; preds = %block_.L_4738f1
  %2361 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2361, i64* %RAX.i4266, align 8
  %2362 = add i64 %2361, 14168
  %2363 = add i64 %2360, 15
  store i64 %2363, i64* %3, align 8
  %2364 = inttoptr i64 %2362 to i64*
  %2365 = load i64, i64* %2364, align 8
  store i64 %2365, i64* %RAX.i4266, align 8
  %2366 = add i64 %2345, -180
  %2367 = add i64 %2360, 22
  store i64 %2367, i64* %3, align 8
  %2368 = inttoptr i64 %2366 to i32*
  %2369 = load i32, i32* %2368, align 4
  %2370 = sext i32 %2369 to i64
  %2371 = mul nsw i64 %2370, 632
  store i64 %2371, i64* %RCX.i4448, align 8
  %2372 = lshr i64 %2371, 63
  %2373 = add i64 %2371, %2365
  store i64 %2373, i64* %RAX.i4266, align 8
  %2374 = icmp ult i64 %2373, %2365
  %2375 = icmp ult i64 %2373, %2371
  %2376 = or i1 %2374, %2375
  %2377 = zext i1 %2376 to i8
  store i8 %2377, i8* %14, align 1
  %2378 = trunc i64 %2373 to i32
  %2379 = and i32 %2378, 255
  %2380 = tail call i32 @llvm.ctpop.i32(i32 %2379)
  %2381 = trunc i32 %2380 to i8
  %2382 = and i8 %2381, 1
  %2383 = xor i8 %2382, 1
  store i8 %2383, i8* %21, align 1
  %2384 = xor i64 %2371, %2365
  %2385 = xor i64 %2384, %2373
  %2386 = lshr i64 %2385, 4
  %2387 = trunc i64 %2386 to i8
  %2388 = and i8 %2387, 1
  store i8 %2388, i8* %27, align 1
  %2389 = icmp eq i64 %2373, 0
  %2390 = zext i1 %2389 to i8
  store i8 %2390, i8* %30, align 1
  %2391 = lshr i64 %2373, 63
  %2392 = trunc i64 %2391 to i8
  store i8 %2392, i8* %33, align 1
  %2393 = lshr i64 %2365, 63
  %2394 = xor i64 %2391, %2393
  %2395 = xor i64 %2391, %2372
  %2396 = add nuw nsw i64 %2394, %2395
  %2397 = icmp eq i64 %2396, 2
  %2398 = zext i1 %2397 to i8
  store i8 %2398, i8* %39, align 1
  %2399 = add i64 %2373, 532
  %2400 = add i64 %2360, 39
  store i64 %2400, i64* %3, align 8
  %2401 = inttoptr i64 %2399 to i32*
  %2402 = load i32, i32* %2401, align 4
  store i8 0, i8* %14, align 1
  %2403 = and i32 %2402, 255
  %2404 = tail call i32 @llvm.ctpop.i32(i32 %2403)
  %2405 = trunc i32 %2404 to i8
  %2406 = and i8 %2405, 1
  %2407 = xor i8 %2406, 1
  store i8 %2407, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2408 = icmp eq i32 %2402, 0
  %2409 = zext i1 %2408 to i8
  store i8 %2409, i8* %30, align 1
  %2410 = lshr i32 %2402, 31
  %2411 = trunc i32 %2410 to i8
  store i8 %2411, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v302 = select i1 %2408, i64 45, i64 95
  %2412 = add i64 %2360, %.v302
  store i64 %2412, i64* %3, align 8
  %2413 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %2408, label %block_473938, label %block_47390b.block_.L_47396a_crit_edge

block_47390b.block_.L_47396a_crit_edge:           ; preds = %block_47390b
  %.pre197 = load i64, i64* %RBP.i, align 8
  br label %block_.L_47396a

block_473938:                                     ; preds = %block_47390b
  store i64 %2413, i64* %RAX.i4266, align 8
  %2414 = add i64 %2413, 6480
  %2415 = add i64 %2412, 15
  store i64 %2415, i64* %3, align 8
  %2416 = inttoptr i64 %2414 to i64*
  %2417 = load i64, i64* %2416, align 8
  store i64 %2417, i64* %RAX.i4266, align 8
  %2418 = add i64 %2417, 8
  %2419 = add i64 %2412, 19
  store i64 %2419, i64* %3, align 8
  %2420 = inttoptr i64 %2418 to i64*
  %2421 = load i64, i64* %2420, align 8
  store i64 %2421, i64* %RAX.i4266, align 8
  %2422 = load i64, i64* %RBP.i, align 8
  %2423 = add i64 %2422, -168
  %2424 = add i64 %2412, 26
  store i64 %2424, i64* %3, align 8
  %2425 = inttoptr i64 %2423 to i32*
  %2426 = load i32, i32* %2425, align 4
  %2427 = sext i32 %2426 to i64
  store i64 %2427, i64* %RCX.i4448, align 8
  %2428 = shl nsw i64 %2427, 3
  %2429 = add i64 %2428, %2421
  %2430 = add i64 %2412, 30
  store i64 %2430, i64* %3, align 8
  %2431 = inttoptr i64 %2429 to i64*
  %2432 = load i64, i64* %2431, align 8
  store i64 %2432, i64* %RAX.i4266, align 8
  %2433 = add i64 %2422, -164
  %2434 = add i64 %2412, 37
  store i64 %2434, i64* %3, align 8
  %2435 = inttoptr i64 %2433 to i32*
  %2436 = load i32, i32* %2435, align 4
  %2437 = sext i32 %2436 to i64
  store i64 %2437, i64* %RCX.i4448, align 8
  %2438 = shl nsw i64 %2437, 1
  %2439 = add i64 %2438, %2432
  %2440 = add i64 %2412, 41
  store i64 %2440, i64* %3, align 8
  %2441 = inttoptr i64 %2439 to i16*
  %2442 = load i16, i16* %2441, align 2
  %2443 = sext i16 %2442 to i64
  %2444 = and i64 %2443, 4294967295
  store i64 %2444, i64* %RDX.i4301, align 8
  %2445 = sext i16 %2442 to i32
  %2446 = add i64 %2412, 44
  store i8 0, i8* %14, align 1
  %2447 = and i32 %2445, 255
  %2448 = tail call i32 @llvm.ctpop.i32(i32 %2447)
  %2449 = trunc i32 %2448 to i8
  %2450 = and i8 %2449, 1
  %2451 = xor i8 %2450, 1
  store i8 %2451, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2452 = icmp eq i16 %2442, 0
  %2453 = zext i1 %2452 to i8
  store i8 %2453, i8* %30, align 1
  %2454 = lshr i32 %2445, 31
  %2455 = trunc i32 %2454 to i8
  store i8 %2455, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2456 = icmp ne i8 %2455, 0
  %.v149 = select i1 %2456, i64 6, i64 58
  %2457 = add i64 %2446, %.v149
  store i64 %2457, i64* %3, align 8
  br i1 %2456, label %block_.L_47396a, label %block_.L_47399e

block_.L_47396a:                                  ; preds = %block_47390b.block_.L_47396a_crit_edge, %block_473938
  %2458 = phi i64 [ %2422, %block_473938 ], [ %.pre197, %block_47390b.block_.L_47396a_crit_edge ]
  %2459 = phi i64 [ %2457, %block_473938 ], [ %2412, %block_47390b.block_.L_47396a_crit_edge ]
  store i64 %2413, i64* %RAX.i4266, align 8
  %2460 = add i64 %2413, 6480
  %2461 = add i64 %2459, 15
  store i64 %2461, i64* %3, align 8
  %2462 = inttoptr i64 %2460 to i64*
  %2463 = load i64, i64* %2462, align 8
  store i64 %2463, i64* %RAX.i4266, align 8
  %2464 = add i64 %2463, 8
  %2465 = add i64 %2459, 19
  store i64 %2465, i64* %3, align 8
  %2466 = inttoptr i64 %2464 to i64*
  %2467 = load i64, i64* %2466, align 8
  store i64 %2467, i64* %RAX.i4266, align 8
  %2468 = add i64 %2458, -168
  %2469 = add i64 %2459, 26
  store i64 %2469, i64* %3, align 8
  %2470 = inttoptr i64 %2468 to i32*
  %2471 = load i32, i32* %2470, align 4
  %2472 = sext i32 %2471 to i64
  store i64 %2472, i64* %RCX.i4448, align 8
  %2473 = shl nsw i64 %2472, 3
  %2474 = add i64 %2473, %2467
  %2475 = add i64 %2459, 30
  store i64 %2475, i64* %3, align 8
  %2476 = inttoptr i64 %2474 to i64*
  %2477 = load i64, i64* %2476, align 8
  store i64 %2477, i64* %RAX.i4266, align 8
  %2478 = add i64 %2458, -164
  %2479 = add i64 %2459, 37
  store i64 %2479, i64* %3, align 8
  %2480 = inttoptr i64 %2478 to i32*
  %2481 = load i32, i32* %2480, align 4
  %2482 = sext i32 %2481 to i64
  store i64 %2482, i64* %RCX.i4448, align 8
  %2483 = shl nsw i64 %2482, 1
  %2484 = add i64 %2483, %2477
  %2485 = add i64 %2459, 41
  store i64 %2485, i64* %3, align 8
  %2486 = inttoptr i64 %2484 to i16*
  %2487 = load i16, i16* %2486, align 2
  %2488 = sext i16 %2487 to i64
  %2489 = and i64 %2488, 4294967295
  store i64 %2489, i64* %RDX.i4301, align 8
  %2490 = add i64 %2458, -352
  %2491 = sext i16 %2487 to i32
  %2492 = add i64 %2459, 47
  store i64 %2492, i64* %3, align 8
  %2493 = inttoptr i64 %2490 to i32*
  store i32 %2491, i32* %2493, align 4
  %2494 = load i64, i64* %3, align 8
  %2495 = add i64 %2494, 55
  store i64 %2495, i64* %3, align 8
  br label %block_.L_4739d0

block_.L_47399e:                                  ; preds = %block_473938
  store i64 %2413, i64* %RAX.i4266, align 8
  %2496 = add i64 %2457, 15
  store i64 %2496, i64* %3, align 8
  %2497 = load i64, i64* %2416, align 8
  store i64 %2497, i64* %RAX.i4266, align 8
  %2498 = add i64 %2497, 8
  %2499 = add i64 %2457, 19
  store i64 %2499, i64* %3, align 8
  %2500 = inttoptr i64 %2498 to i64*
  %2501 = load i64, i64* %2500, align 8
  store i64 %2501, i64* %RAX.i4266, align 8
  %2502 = add i64 %2457, 26
  store i64 %2502, i64* %3, align 8
  %2503 = load i32, i32* %2425, align 4
  %2504 = sext i32 %2503 to i64
  store i64 %2504, i64* %RCX.i4448, align 8
  %2505 = shl nsw i64 %2504, 3
  %2506 = add i64 %2505, %2501
  %2507 = add i64 %2457, 30
  store i64 %2507, i64* %3, align 8
  %2508 = inttoptr i64 %2506 to i64*
  %2509 = load i64, i64* %2508, align 8
  store i64 %2509, i64* %RAX.i4266, align 8
  %2510 = add i64 %2457, 37
  store i64 %2510, i64* %3, align 8
  %2511 = load i32, i32* %2435, align 4
  %2512 = sext i32 %2511 to i64
  store i64 %2512, i64* %RCX.i4448, align 8
  %2513 = shl nsw i64 %2512, 1
  %2514 = add i64 %2513, %2509
  %2515 = add i64 %2457, 41
  store i64 %2515, i64* %3, align 8
  %2516 = inttoptr i64 %2514 to i16*
  %2517 = load i16, i16* %2516, align 2
  %2518 = sext i16 %2517 to i32
  %2519 = shl nsw i32 %2518, 1
  %2520 = zext i32 %2519 to i64
  store i64 %2520, i64* %RDX.i4301, align 8
  %.lobit115 = lshr i16 %2517, 15
  %2521 = trunc i16 %.lobit115 to i8
  store i8 %2521, i8* %14, align 1
  %2522 = and i32 %2519, 254
  %2523 = tail call i32 @llvm.ctpop.i32(i32 %2522)
  %2524 = trunc i32 %2523 to i8
  %2525 = and i8 %2524, 1
  %2526 = xor i8 %2525, 1
  store i8 %2526, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2527 = icmp eq i16 %2517, 0
  %2528 = zext i1 %2527 to i8
  store i8 %2528, i8* %30, align 1
  %2529 = lshr i32 %2518, 30
  %2530 = trunc i32 %2529 to i8
  %2531 = and i8 %2530, 1
  store i8 %2531, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2532 = add i64 %2422, -352
  %2533 = add i64 %2457, 49
  store i64 %2533, i64* %3, align 8
  %2534 = inttoptr i64 %2532 to i32*
  store i32 %2519, i32* %2534, align 4
  %.pre198 = load i64, i64* %3, align 8
  br label %block_.L_4739d0

block_.L_4739d0:                                  ; preds = %block_.L_47399e, %block_.L_47396a
  %2535 = phi i64 [ %.pre198, %block_.L_47399e ], [ %2495, %block_.L_47396a ]
  %2536 = load i64, i64* %RBP.i, align 8
  %2537 = add i64 %2536, -352
  %2538 = add i64 %2535, 6
  store i64 %2538, i64* %3, align 8
  %2539 = inttoptr i64 %2537 to i32*
  %2540 = load i32, i32* %2539, align 4
  %2541 = zext i32 %2540 to i64
  store i64 %2541, i64* %RAX.i4266, align 8
  %2542 = add i64 %2536, -356
  %2543 = add i64 %2535, 12
  store i64 %2543, i64* %3, align 8
  %2544 = inttoptr i64 %2542 to i32*
  store i32 %2540, i32* %2544, align 4
  %2545 = load i64, i64* %3, align 8
  %2546 = add i64 %2545, 21
  br label %block_.L_4739f1

block_.L_4739e1:                                  ; preds = %block_.L_4738f1
  store i64 4294967295, i64* %RAX.i4266, align 8
  %2547 = add i64 %2345, -356
  %2548 = add i64 %2360, 11
  store i64 %2548, i64* %3, align 8
  %2549 = inttoptr i64 %2547 to i32*
  store i32 -1, i32* %2549, align 4
  %2550 = load i64, i64* %3, align 8
  %2551 = add i64 %2550, 5
  store i64 %2551, i64* %3, align 8
  br label %block_.L_4739f1

block_.L_4739f1:                                  ; preds = %block_.L_4739e1, %block_.L_4739d0
  %storemerge114 = phi i64 [ %2546, %block_.L_4739d0 ], [ %2551, %block_.L_4739e1 ]
  %2552 = load i64, i64* %RBP.i, align 8
  %2553 = add i64 %2552, -356
  %2554 = add i64 %storemerge114, 6
  store i64 %2554, i64* %3, align 8
  %2555 = inttoptr i64 %2553 to i32*
  %2556 = load i32, i32* %2555, align 4
  %2557 = zext i32 %2556 to i64
  store i64 %2557, i64* %RAX.i4266, align 8
  %2558 = trunc i32 %2556 to i16
  store i16 %2558, i16* %CX.i3716, align 2
  %2559 = add i64 %2552, -94
  %2560 = add i64 %storemerge114, 13
  store i64 %2560, i64* %3, align 8
  %2561 = inttoptr i64 %2559 to i16*
  store i16 %2558, i16* %2561, align 2
  %2562 = load i64, i64* %RBP.i, align 8
  %2563 = add i64 %2562, -208
  %2564 = load i64, i64* %3, align 8
  %2565 = add i64 %2564, 7
  store i64 %2565, i64* %3, align 8
  %2566 = inttoptr i64 %2563 to i32*
  %2567 = load i32, i32* %2566, align 4
  store i8 0, i8* %14, align 1
  %2568 = and i32 %2567, 255
  %2569 = tail call i32 @llvm.ctpop.i32(i32 %2568)
  %2570 = trunc i32 %2569 to i8
  %2571 = and i8 %2570, 1
  %2572 = xor i8 %2571, 1
  store i8 %2572, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2573 = icmp eq i32 %2567, 0
  %2574 = zext i1 %2573 to i8
  store i8 %2574, i8* %30, align 1
  %2575 = lshr i32 %2567, 31
  %2576 = trunc i32 %2575 to i8
  store i8 %2576, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v303 = select i1 %2573, i64 227, i64 13
  %2577 = add i64 %2564, %.v303
  store i64 %2577, i64* %3, align 8
  br i1 %2573, label %block_.L_473ae1, label %block_473a0b

block_473a0b:                                     ; preds = %block_.L_4739f1
  %2578 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2578, i64* %RAX.i4266, align 8
  %2579 = add i64 %2578, 14168
  %2580 = add i64 %2577, 15
  store i64 %2580, i64* %3, align 8
  %2581 = inttoptr i64 %2579 to i64*
  %2582 = load i64, i64* %2581, align 8
  store i64 %2582, i64* %RAX.i4266, align 8
  %2583 = add i64 %2562, -204
  %2584 = add i64 %2577, 22
  store i64 %2584, i64* %3, align 8
  %2585 = inttoptr i64 %2583 to i32*
  %2586 = load i32, i32* %2585, align 4
  %2587 = sext i32 %2586 to i64
  %2588 = mul nsw i64 %2587, 632
  store i64 %2588, i64* %RCX.i4448, align 8
  %2589 = lshr i64 %2588, 63
  %2590 = add i64 %2588, %2582
  store i64 %2590, i64* %RAX.i4266, align 8
  %2591 = icmp ult i64 %2590, %2582
  %2592 = icmp ult i64 %2590, %2588
  %2593 = or i1 %2591, %2592
  %2594 = zext i1 %2593 to i8
  store i8 %2594, i8* %14, align 1
  %2595 = trunc i64 %2590 to i32
  %2596 = and i32 %2595, 255
  %2597 = tail call i32 @llvm.ctpop.i32(i32 %2596)
  %2598 = trunc i32 %2597 to i8
  %2599 = and i8 %2598, 1
  %2600 = xor i8 %2599, 1
  store i8 %2600, i8* %21, align 1
  %2601 = xor i64 %2588, %2582
  %2602 = xor i64 %2601, %2590
  %2603 = lshr i64 %2602, 4
  %2604 = trunc i64 %2603 to i8
  %2605 = and i8 %2604, 1
  store i8 %2605, i8* %27, align 1
  %2606 = icmp eq i64 %2590, 0
  %2607 = zext i1 %2606 to i8
  store i8 %2607, i8* %30, align 1
  %2608 = lshr i64 %2590, 63
  %2609 = trunc i64 %2608 to i8
  store i8 %2609, i8* %33, align 1
  %2610 = lshr i64 %2582, 63
  %2611 = xor i64 %2608, %2610
  %2612 = xor i64 %2608, %2589
  %2613 = add nuw nsw i64 %2611, %2612
  %2614 = icmp eq i64 %2613, 2
  %2615 = zext i1 %2614 to i8
  store i8 %2615, i8* %39, align 1
  %2616 = add i64 %2590, 532
  %2617 = add i64 %2577, 39
  store i64 %2617, i64* %3, align 8
  %2618 = inttoptr i64 %2616 to i32*
  %2619 = load i32, i32* %2618, align 4
  store i8 0, i8* %14, align 1
  %2620 = and i32 %2619, 255
  %2621 = tail call i32 @llvm.ctpop.i32(i32 %2620)
  %2622 = trunc i32 %2621 to i8
  %2623 = and i8 %2622, 1
  %2624 = xor i8 %2623, 1
  store i8 %2624, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2625 = icmp eq i32 %2619, 0
  %2626 = zext i1 %2625 to i8
  store i8 %2626, i8* %30, align 1
  %2627 = lshr i32 %2619, 31
  %2628 = trunc i32 %2627 to i8
  store i8 %2628, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v304 = select i1 %2625, i64 45, i64 95
  %2629 = add i64 %2577, %.v304
  store i64 %2629, i64* %3, align 8
  %2630 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %2625, label %block_473a38, label %block_473a0b.block_.L_473a6a_crit_edge

block_473a0b.block_.L_473a6a_crit_edge:           ; preds = %block_473a0b
  %.pre200 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473a6a

block_473a38:                                     ; preds = %block_473a0b
  store i64 %2630, i64* %RAX.i4266, align 8
  %2631 = add i64 %2630, 6480
  %2632 = add i64 %2629, 15
  store i64 %2632, i64* %3, align 8
  %2633 = inttoptr i64 %2631 to i64*
  %2634 = load i64, i64* %2633, align 8
  store i64 %2634, i64* %RAX.i4266, align 8
  %2635 = add i64 %2634, 8
  %2636 = add i64 %2629, 19
  store i64 %2636, i64* %3, align 8
  %2637 = inttoptr i64 %2635 to i64*
  %2638 = load i64, i64* %2637, align 8
  store i64 %2638, i64* %RAX.i4266, align 8
  %2639 = load i64, i64* %RBP.i, align 8
  %2640 = add i64 %2639, -192
  %2641 = add i64 %2629, 26
  store i64 %2641, i64* %3, align 8
  %2642 = inttoptr i64 %2640 to i32*
  %2643 = load i32, i32* %2642, align 4
  %2644 = sext i32 %2643 to i64
  store i64 %2644, i64* %RCX.i4448, align 8
  %2645 = shl nsw i64 %2644, 3
  %2646 = add i64 %2645, %2638
  %2647 = add i64 %2629, 30
  store i64 %2647, i64* %3, align 8
  %2648 = inttoptr i64 %2646 to i64*
  %2649 = load i64, i64* %2648, align 8
  store i64 %2649, i64* %RAX.i4266, align 8
  %2650 = add i64 %2639, -188
  %2651 = add i64 %2629, 37
  store i64 %2651, i64* %3, align 8
  %2652 = inttoptr i64 %2650 to i32*
  %2653 = load i32, i32* %2652, align 4
  %2654 = sext i32 %2653 to i64
  store i64 %2654, i64* %RCX.i4448, align 8
  %2655 = shl nsw i64 %2654, 1
  %2656 = add i64 %2655, %2649
  %2657 = add i64 %2629, 41
  store i64 %2657, i64* %3, align 8
  %2658 = inttoptr i64 %2656 to i16*
  %2659 = load i16, i16* %2658, align 2
  %2660 = sext i16 %2659 to i64
  %2661 = and i64 %2660, 4294967295
  store i64 %2661, i64* %RDX.i4301, align 8
  %2662 = sext i16 %2659 to i32
  %2663 = add i64 %2629, 44
  store i8 0, i8* %14, align 1
  %2664 = and i32 %2662, 255
  %2665 = tail call i32 @llvm.ctpop.i32(i32 %2664)
  %2666 = trunc i32 %2665 to i8
  %2667 = and i8 %2666, 1
  %2668 = xor i8 %2667, 1
  store i8 %2668, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2669 = icmp eq i16 %2659, 0
  %2670 = zext i1 %2669 to i8
  store i8 %2670, i8* %30, align 1
  %2671 = lshr i32 %2662, 31
  %2672 = trunc i32 %2671 to i8
  store i8 %2672, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2673 = icmp ne i8 %2672, 0
  %.v150 = select i1 %2673, i64 6, i64 58
  %2674 = add i64 %2663, %.v150
  store i64 %2674, i64* %3, align 8
  br i1 %2673, label %block_.L_473a6a, label %block_.L_473a9e

block_.L_473a6a:                                  ; preds = %block_473a0b.block_.L_473a6a_crit_edge, %block_473a38
  %2675 = phi i64 [ %2639, %block_473a38 ], [ %.pre200, %block_473a0b.block_.L_473a6a_crit_edge ]
  %2676 = phi i64 [ %2674, %block_473a38 ], [ %2629, %block_473a0b.block_.L_473a6a_crit_edge ]
  store i64 %2630, i64* %RAX.i4266, align 8
  %2677 = add i64 %2630, 6480
  %2678 = add i64 %2676, 15
  store i64 %2678, i64* %3, align 8
  %2679 = inttoptr i64 %2677 to i64*
  %2680 = load i64, i64* %2679, align 8
  store i64 %2680, i64* %RAX.i4266, align 8
  %2681 = add i64 %2680, 8
  %2682 = add i64 %2676, 19
  store i64 %2682, i64* %3, align 8
  %2683 = inttoptr i64 %2681 to i64*
  %2684 = load i64, i64* %2683, align 8
  store i64 %2684, i64* %RAX.i4266, align 8
  %2685 = add i64 %2675, -192
  %2686 = add i64 %2676, 26
  store i64 %2686, i64* %3, align 8
  %2687 = inttoptr i64 %2685 to i32*
  %2688 = load i32, i32* %2687, align 4
  %2689 = sext i32 %2688 to i64
  store i64 %2689, i64* %RCX.i4448, align 8
  %2690 = shl nsw i64 %2689, 3
  %2691 = add i64 %2690, %2684
  %2692 = add i64 %2676, 30
  store i64 %2692, i64* %3, align 8
  %2693 = inttoptr i64 %2691 to i64*
  %2694 = load i64, i64* %2693, align 8
  store i64 %2694, i64* %RAX.i4266, align 8
  %2695 = add i64 %2675, -188
  %2696 = add i64 %2676, 37
  store i64 %2696, i64* %3, align 8
  %2697 = inttoptr i64 %2695 to i32*
  %2698 = load i32, i32* %2697, align 4
  %2699 = sext i32 %2698 to i64
  store i64 %2699, i64* %RCX.i4448, align 8
  %2700 = shl nsw i64 %2699, 1
  %2701 = add i64 %2700, %2694
  %2702 = add i64 %2676, 41
  store i64 %2702, i64* %3, align 8
  %2703 = inttoptr i64 %2701 to i16*
  %2704 = load i16, i16* %2703, align 2
  %2705 = sext i16 %2704 to i64
  %2706 = and i64 %2705, 4294967295
  store i64 %2706, i64* %RDX.i4301, align 8
  %2707 = add i64 %2675, -360
  %2708 = sext i16 %2704 to i32
  %2709 = add i64 %2676, 47
  store i64 %2709, i64* %3, align 8
  %2710 = inttoptr i64 %2707 to i32*
  store i32 %2708, i32* %2710, align 4
  %2711 = load i64, i64* %3, align 8
  %2712 = add i64 %2711, 55
  store i64 %2712, i64* %3, align 8
  br label %block_.L_473ad0

block_.L_473a9e:                                  ; preds = %block_473a38
  store i64 %2630, i64* %RAX.i4266, align 8
  %2713 = add i64 %2674, 15
  store i64 %2713, i64* %3, align 8
  %2714 = load i64, i64* %2633, align 8
  store i64 %2714, i64* %RAX.i4266, align 8
  %2715 = add i64 %2714, 8
  %2716 = add i64 %2674, 19
  store i64 %2716, i64* %3, align 8
  %2717 = inttoptr i64 %2715 to i64*
  %2718 = load i64, i64* %2717, align 8
  store i64 %2718, i64* %RAX.i4266, align 8
  %2719 = add i64 %2674, 26
  store i64 %2719, i64* %3, align 8
  %2720 = load i32, i32* %2642, align 4
  %2721 = sext i32 %2720 to i64
  store i64 %2721, i64* %RCX.i4448, align 8
  %2722 = shl nsw i64 %2721, 3
  %2723 = add i64 %2722, %2718
  %2724 = add i64 %2674, 30
  store i64 %2724, i64* %3, align 8
  %2725 = inttoptr i64 %2723 to i64*
  %2726 = load i64, i64* %2725, align 8
  store i64 %2726, i64* %RAX.i4266, align 8
  %2727 = add i64 %2674, 37
  store i64 %2727, i64* %3, align 8
  %2728 = load i32, i32* %2652, align 4
  %2729 = sext i32 %2728 to i64
  store i64 %2729, i64* %RCX.i4448, align 8
  %2730 = shl nsw i64 %2729, 1
  %2731 = add i64 %2730, %2726
  %2732 = add i64 %2674, 41
  store i64 %2732, i64* %3, align 8
  %2733 = inttoptr i64 %2731 to i16*
  %2734 = load i16, i16* %2733, align 2
  %2735 = sext i16 %2734 to i32
  %2736 = shl nsw i32 %2735, 1
  %2737 = zext i32 %2736 to i64
  store i64 %2737, i64* %RDX.i4301, align 8
  %.lobit = lshr i16 %2734, 15
  %2738 = trunc i16 %.lobit to i8
  store i8 %2738, i8* %14, align 1
  %2739 = and i32 %2736, 254
  %2740 = tail call i32 @llvm.ctpop.i32(i32 %2739)
  %2741 = trunc i32 %2740 to i8
  %2742 = and i8 %2741, 1
  %2743 = xor i8 %2742, 1
  store i8 %2743, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2744 = icmp eq i16 %2734, 0
  %2745 = zext i1 %2744 to i8
  store i8 %2745, i8* %30, align 1
  %2746 = lshr i32 %2735, 30
  %2747 = trunc i32 %2746 to i8
  %2748 = and i8 %2747, 1
  store i8 %2748, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2749 = add i64 %2639, -360
  %2750 = add i64 %2674, 49
  store i64 %2750, i64* %3, align 8
  %2751 = inttoptr i64 %2749 to i32*
  store i32 %2736, i32* %2751, align 4
  %.pre201 = load i64, i64* %3, align 8
  br label %block_.L_473ad0

block_.L_473ad0:                                  ; preds = %block_.L_473a9e, %block_.L_473a6a
  %2752 = phi i64 [ %.pre201, %block_.L_473a9e ], [ %2712, %block_.L_473a6a ]
  %2753 = load i64, i64* %RBP.i, align 8
  %2754 = add i64 %2753, -360
  %2755 = add i64 %2752, 6
  store i64 %2755, i64* %3, align 8
  %2756 = inttoptr i64 %2754 to i32*
  %2757 = load i32, i32* %2756, align 4
  %2758 = zext i32 %2757 to i64
  store i64 %2758, i64* %RAX.i4266, align 8
  %2759 = add i64 %2753, -364
  %2760 = add i64 %2752, 12
  store i64 %2760, i64* %3, align 8
  %2761 = inttoptr i64 %2759 to i32*
  store i32 %2757, i32* %2761, align 4
  %2762 = load i64, i64* %3, align 8
  %2763 = add i64 %2762, 15
  store i64 %2763, i64* %3, align 8
  br label %block_.L_473aeb

block_.L_473ae1:                                  ; preds = %block_.L_4739f1
  %2764 = add i64 %2562, -94
  %2765 = add i64 %2577, 4
  store i64 %2765, i64* %3, align 8
  %2766 = inttoptr i64 %2764 to i16*
  %2767 = load i16, i16* %2766, align 2
  %2768 = sext i16 %2767 to i64
  %2769 = and i64 %2768, 4294967295
  store i64 %2769, i64* %RAX.i4266, align 8
  %2770 = add i64 %2562, -364
  %2771 = sext i16 %2767 to i32
  %2772 = add i64 %2577, 10
  store i64 %2772, i64* %3, align 8
  %2773 = inttoptr i64 %2770 to i32*
  store i32 %2771, i32* %2773, align 4
  %.pre202 = load i64, i64* %3, align 8
  br label %block_.L_473aeb

block_.L_473aeb:                                  ; preds = %block_.L_473ae1, %block_.L_473ad0
  %2774 = phi i64 [ %.pre202, %block_.L_473ae1 ], [ %2763, %block_.L_473ad0 ]
  %2775 = load i64, i64* %RBP.i, align 8
  %2776 = add i64 %2775, -364
  %2777 = add i64 %2774, 6
  store i64 %2777, i64* %3, align 8
  %2778 = inttoptr i64 %2776 to i32*
  %2779 = load i32, i32* %2778, align 4
  %2780 = zext i32 %2779 to i64
  store i64 %2780, i64* %RAX.i4266, align 8
  %2781 = trunc i32 %2779 to i16
  store i16 %2781, i16* %CX.i3716, align 2
  %2782 = add i64 %2775, -96
  %2783 = add i64 %2774, 13
  store i64 %2783, i64* %3, align 8
  %2784 = inttoptr i64 %2782 to i16*
  store i16 %2781, i16* %2784, align 2
  %2785 = load i64, i64* %3, align 8
  %2786 = add i64 %2785, 1993
  store i64 %2786, i64* %3, align 8
  br label %block_.L_4742c1

block_.L_473afd:                                  ; preds = %block_.L_473323
  br i1 %1061, label %block_.L_473bcb, label %block_473b0a

block_473b0a:                                     ; preds = %block_.L_473afd
  store i64 %466, i64* %RAX.i4266, align 8
  %2787 = add i64 %466, 14168
  %2788 = add i64 %1065, 15
  store i64 %2788, i64* %3, align 8
  %2789 = inttoptr i64 %2787 to i64*
  %2790 = load i64, i64* %2789, align 8
  store i64 %2790, i64* %RAX.i4266, align 8
  %2791 = add i64 %481, -132
  %2792 = add i64 %1065, 22
  store i64 %2792, i64* %3, align 8
  %2793 = inttoptr i64 %2791 to i32*
  %2794 = load i32, i32* %2793, align 4
  %2795 = sext i32 %2794 to i64
  %2796 = mul nsw i64 %2795, 632
  store i64 %2796, i64* %RCX.i4448, align 8
  %2797 = lshr i64 %2796, 63
  %2798 = add i64 %2796, %2790
  store i64 %2798, i64* %RAX.i4266, align 8
  %2799 = icmp ult i64 %2798, %2790
  %2800 = icmp ult i64 %2798, %2796
  %2801 = or i1 %2799, %2800
  %2802 = zext i1 %2801 to i8
  store i8 %2802, i8* %14, align 1
  %2803 = trunc i64 %2798 to i32
  %2804 = and i32 %2803, 255
  %2805 = tail call i32 @llvm.ctpop.i32(i32 %2804)
  %2806 = trunc i32 %2805 to i8
  %2807 = and i8 %2806, 1
  %2808 = xor i8 %2807, 1
  store i8 %2808, i8* %21, align 1
  %2809 = xor i64 %2796, %2790
  %2810 = xor i64 %2809, %2798
  %2811 = lshr i64 %2810, 4
  %2812 = trunc i64 %2811 to i8
  %2813 = and i8 %2812, 1
  store i8 %2813, i8* %27, align 1
  %2814 = icmp eq i64 %2798, 0
  %2815 = zext i1 %2814 to i8
  store i8 %2815, i8* %30, align 1
  %2816 = lshr i64 %2798, 63
  %2817 = trunc i64 %2816 to i8
  store i8 %2817, i8* %33, align 1
  %2818 = lshr i64 %2790, 63
  %2819 = xor i64 %2816, %2818
  %2820 = xor i64 %2816, %2797
  %2821 = add nuw nsw i64 %2819, %2820
  %2822 = icmp eq i64 %2821, 2
  %2823 = zext i1 %2822 to i8
  store i8 %2823, i8* %39, align 1
  %2824 = add i64 %2798, 532
  %2825 = add i64 %1065, 39
  store i64 %2825, i64* %3, align 8
  %2826 = inttoptr i64 %2824 to i32*
  %2827 = load i32, i32* %2826, align 4
  store i8 0, i8* %14, align 1
  %2828 = and i32 %2827, 255
  %2829 = tail call i32 @llvm.ctpop.i32(i32 %2828)
  %2830 = trunc i32 %2829 to i8
  %2831 = and i8 %2830, 1
  %2832 = xor i8 %2831, 1
  store i8 %2832, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2833 = icmp eq i32 %2827, 0
  %2834 = zext i1 %2833 to i8
  store i8 %2834, i8* %30, align 1
  %2835 = lshr i32 %2827, 31
  %2836 = trunc i32 %2835 to i8
  store i8 %2836, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v320 = select i1 %2833, i64 45, i64 88
  %2837 = add i64 %1065, %.v320
  store i64 %2837, i64* %3, align 8
  %2838 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %2833, label %block_473b37, label %block_473b0a.block_.L_473b62_crit_edge

block_473b0a.block_.L_473b62_crit_edge:           ; preds = %block_473b0a
  %.pre204 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473b62

block_473b37:                                     ; preds = %block_473b0a
  store i64 %2838, i64* %RAX.i4266, align 8
  %2839 = add i64 %2838, 6480
  %2840 = add i64 %2837, 15
  store i64 %2840, i64* %3, align 8
  %2841 = inttoptr i64 %2839 to i64*
  %2842 = load i64, i64* %2841, align 8
  store i64 %2842, i64* %RAX.i4266, align 8
  %2843 = add i64 %2837, 18
  store i64 %2843, i64* %3, align 8
  %2844 = inttoptr i64 %2842 to i64*
  %2845 = load i64, i64* %2844, align 8
  store i64 %2845, i64* %RAX.i4266, align 8
  %2846 = load i64, i64* %RBP.i, align 8
  %2847 = add i64 %2846, -120
  %2848 = add i64 %2837, 22
  store i64 %2848, i64* %3, align 8
  %2849 = inttoptr i64 %2847 to i32*
  %2850 = load i32, i32* %2849, align 4
  %2851 = sext i32 %2850 to i64
  store i64 %2851, i64* %RCX.i4448, align 8
  %2852 = shl nsw i64 %2851, 3
  %2853 = add i64 %2852, %2845
  %2854 = add i64 %2837, 26
  store i64 %2854, i64* %3, align 8
  %2855 = inttoptr i64 %2853 to i64*
  %2856 = load i64, i64* %2855, align 8
  store i64 %2856, i64* %RAX.i4266, align 8
  %2857 = add i64 %2846, -116
  %2858 = add i64 %2837, 30
  store i64 %2858, i64* %3, align 8
  %2859 = inttoptr i64 %2857 to i32*
  %2860 = load i32, i32* %2859, align 4
  %2861 = sext i32 %2860 to i64
  store i64 %2861, i64* %RCX.i4448, align 8
  %2862 = shl nsw i64 %2861, 1
  %2863 = add i64 %2862, %2856
  %2864 = add i64 %2837, 34
  store i64 %2864, i64* %3, align 8
  %2865 = inttoptr i64 %2863 to i16*
  %2866 = load i16, i16* %2865, align 2
  %2867 = sext i16 %2866 to i64
  %2868 = and i64 %2867, 4294967295
  store i64 %2868, i64* %RDX.i4301, align 8
  %2869 = sext i16 %2866 to i32
  %2870 = add i64 %2837, 37
  store i8 0, i8* %14, align 1
  %2871 = and i32 %2869, 255
  %2872 = tail call i32 @llvm.ctpop.i32(i32 %2871)
  %2873 = trunc i32 %2872 to i8
  %2874 = and i8 %2873, 1
  %2875 = xor i8 %2874, 1
  store i8 %2875, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2876 = icmp eq i16 %2866, 0
  %2877 = zext i1 %2876 to i8
  store i8 %2877, i8* %30, align 1
  %2878 = lshr i32 %2869, 31
  %2879 = trunc i32 %2878 to i8
  store i8 %2879, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2880 = icmp ne i8 %2879, 0
  %.v151 = select i1 %2880, i64 6, i64 54
  %2881 = add i64 %2870, %.v151
  store i64 %2881, i64* %3, align 8
  br i1 %2880, label %block_.L_473b62, label %block_.L_473b92

block_.L_473b62:                                  ; preds = %block_473b0a.block_.L_473b62_crit_edge, %block_473b37
  %2882 = phi i64 [ %2846, %block_473b37 ], [ %.pre204, %block_473b0a.block_.L_473b62_crit_edge ]
  %2883 = phi i64 [ %2881, %block_473b37 ], [ %2837, %block_473b0a.block_.L_473b62_crit_edge ]
  store i64 %2838, i64* %RAX.i4266, align 8
  %2884 = add i64 %2838, 6480
  %2885 = add i64 %2883, 15
  store i64 %2885, i64* %3, align 8
  %2886 = inttoptr i64 %2884 to i64*
  %2887 = load i64, i64* %2886, align 8
  store i64 %2887, i64* %RAX.i4266, align 8
  %2888 = add i64 %2883, 18
  store i64 %2888, i64* %3, align 8
  %2889 = inttoptr i64 %2887 to i64*
  %2890 = load i64, i64* %2889, align 8
  store i64 %2890, i64* %RAX.i4266, align 8
  %2891 = add i64 %2882, -120
  %2892 = add i64 %2883, 22
  store i64 %2892, i64* %3, align 8
  %2893 = inttoptr i64 %2891 to i32*
  %2894 = load i32, i32* %2893, align 4
  %2895 = sext i32 %2894 to i64
  store i64 %2895, i64* %RCX.i4448, align 8
  %2896 = shl nsw i64 %2895, 3
  %2897 = add i64 %2896, %2890
  %2898 = add i64 %2883, 26
  store i64 %2898, i64* %3, align 8
  %2899 = inttoptr i64 %2897 to i64*
  %2900 = load i64, i64* %2899, align 8
  store i64 %2900, i64* %RAX.i4266, align 8
  %2901 = add i64 %2882, -116
  %2902 = add i64 %2883, 30
  store i64 %2902, i64* %3, align 8
  %2903 = inttoptr i64 %2901 to i32*
  %2904 = load i32, i32* %2903, align 4
  %2905 = sext i32 %2904 to i64
  store i64 %2905, i64* %RCX.i4448, align 8
  %2906 = shl nsw i64 %2905, 1
  %2907 = add i64 %2906, %2900
  %2908 = add i64 %2883, 34
  store i64 %2908, i64* %3, align 8
  %2909 = inttoptr i64 %2907 to i16*
  %2910 = load i16, i16* %2909, align 2
  %2911 = sext i16 %2910 to i64
  %2912 = ashr i64 %2911, 1
  %2913 = trunc i16 %2910 to i8
  %2914 = and i8 %2913, 1
  %2915 = trunc i64 %2912 to i32
  %2916 = and i64 %2912, 4294967295
  store i64 %2916, i64* %RDX.i4301, align 8
  store i8 %2914, i8* %14, align 1
  %2917 = and i32 %2915, 255
  %2918 = tail call i32 @llvm.ctpop.i32(i32 %2917)
  %2919 = trunc i32 %2918 to i8
  %2920 = and i8 %2919, 1
  %2921 = xor i8 %2920, 1
  store i8 %2921, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2922 = icmp eq i32 %2915, 0
  %2923 = zext i1 %2922 to i8
  store i8 %2923, i8* %30, align 1
  %2924 = lshr i64 %2912, 31
  %2925 = trunc i64 %2924 to i8
  %2926 = and i8 %2925, 1
  store i8 %2926, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2927 = add i64 %2882, -368
  %2928 = trunc i64 %2912 to i32
  %2929 = add i64 %2883, 42
  store i64 %2929, i64* %3, align 8
  %2930 = inttoptr i64 %2927 to i32*
  store i32 %2928, i32* %2930, align 4
  %2931 = load i64, i64* %3, align 8
  %2932 = add i64 %2931, 45
  store i64 %2932, i64* %3, align 8
  br label %block_.L_473bba

block_.L_473b92:                                  ; preds = %block_473b37
  store i64 %2838, i64* %RAX.i4266, align 8
  %2933 = add i64 %2881, 15
  store i64 %2933, i64* %3, align 8
  %2934 = load i64, i64* %2841, align 8
  store i64 %2934, i64* %RAX.i4266, align 8
  %2935 = add i64 %2881, 18
  store i64 %2935, i64* %3, align 8
  %2936 = inttoptr i64 %2934 to i64*
  %2937 = load i64, i64* %2936, align 8
  store i64 %2937, i64* %RAX.i4266, align 8
  %2938 = add i64 %2881, 22
  store i64 %2938, i64* %3, align 8
  %2939 = load i32, i32* %2849, align 4
  %2940 = sext i32 %2939 to i64
  store i64 %2940, i64* %RCX.i4448, align 8
  %2941 = shl nsw i64 %2940, 3
  %2942 = add i64 %2941, %2937
  %2943 = add i64 %2881, 26
  store i64 %2943, i64* %3, align 8
  %2944 = inttoptr i64 %2942 to i64*
  %2945 = load i64, i64* %2944, align 8
  store i64 %2945, i64* %RAX.i4266, align 8
  %2946 = add i64 %2881, 30
  store i64 %2946, i64* %3, align 8
  %2947 = load i32, i32* %2859, align 4
  %2948 = sext i32 %2947 to i64
  store i64 %2948, i64* %RCX.i4448, align 8
  %2949 = shl nsw i64 %2948, 1
  %2950 = add i64 %2949, %2945
  %2951 = add i64 %2881, 34
  store i64 %2951, i64* %3, align 8
  %2952 = inttoptr i64 %2950 to i16*
  %2953 = load i16, i16* %2952, align 2
  %2954 = sext i16 %2953 to i64
  %2955 = and i64 %2954, 4294967295
  store i64 %2955, i64* %RDX.i4301, align 8
  %2956 = add i64 %2846, -368
  %2957 = sext i16 %2953 to i32
  %2958 = add i64 %2881, 40
  store i64 %2958, i64* %3, align 8
  %2959 = inttoptr i64 %2956 to i32*
  store i32 %2957, i32* %2959, align 4
  %.pre205 = load i64, i64* %3, align 8
  br label %block_.L_473bba

block_.L_473bba:                                  ; preds = %block_.L_473b92, %block_.L_473b62
  %2960 = phi i64 [ %.pre205, %block_.L_473b92 ], [ %2932, %block_.L_473b62 ]
  %2961 = load i64, i64* %RBP.i, align 8
  %2962 = add i64 %2961, -368
  %2963 = add i64 %2960, 6
  store i64 %2963, i64* %3, align 8
  %2964 = inttoptr i64 %2962 to i32*
  %2965 = load i32, i32* %2964, align 4
  %2966 = zext i32 %2965 to i64
  store i64 %2966, i64* %RAX.i4266, align 8
  %2967 = add i64 %2961, -372
  %2968 = add i64 %2960, 12
  store i64 %2968, i64* %3, align 8
  %2969 = inttoptr i64 %2967 to i32*
  store i32 %2965, i32* %2969, align 4
  %2970 = load i64, i64* %3, align 8
  %2971 = add i64 %2970, 21
  br label %block_.L_473bdb

block_.L_473bcb:                                  ; preds = %block_.L_473afd
  store i64 4294967295, i64* %RAX.i4266, align 8
  %2972 = add i64 %481, -372
  %2973 = add i64 %1065, 11
  store i64 %2973, i64* %3, align 8
  %2974 = inttoptr i64 %2972 to i32*
  store i32 -1, i32* %2974, align 4
  %2975 = load i64, i64* %3, align 8
  %2976 = add i64 %2975, 5
  store i64 %2976, i64* %3, align 8
  br label %block_.L_473bdb

block_.L_473bdb:                                  ; preds = %block_.L_473bcb, %block_.L_473bba
  %storemerge122 = phi i64 [ %2971, %block_.L_473bba ], [ %2976, %block_.L_473bcb ]
  %2977 = load i64, i64* %RBP.i, align 8
  %2978 = add i64 %2977, -372
  %2979 = add i64 %storemerge122, 6
  store i64 %2979, i64* %3, align 8
  %2980 = inttoptr i64 %2978 to i32*
  %2981 = load i32, i32* %2980, align 4
  %2982 = zext i32 %2981 to i64
  store i64 %2982, i64* %RAX.i4266, align 8
  %CX.i2843 = bitcast %union.anon* %55 to i16*
  %2983 = trunc i32 %2981 to i16
  store i16 %2983, i16* %CX.i2843, align 2
  %2984 = add i64 %2977, -82
  %2985 = add i64 %storemerge122, 13
  store i64 %2985, i64* %3, align 8
  %2986 = inttoptr i64 %2984 to i16*
  store i16 %2983, i16* %2986, align 2
  %2987 = load i64, i64* %RBP.i, align 8
  %2988 = add i64 %2987, -160
  %2989 = load i64, i64* %3, align 8
  %2990 = add i64 %2989, 7
  store i64 %2990, i64* %3, align 8
  %2991 = inttoptr i64 %2988 to i32*
  %2992 = load i32, i32* %2991, align 4
  store i8 0, i8* %14, align 1
  %2993 = and i32 %2992, 255
  %2994 = tail call i32 @llvm.ctpop.i32(i32 %2993)
  %2995 = trunc i32 %2994 to i8
  %2996 = and i8 %2995, 1
  %2997 = xor i8 %2996, 1
  store i8 %2997, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2998 = icmp eq i32 %2992, 0
  %2999 = zext i1 %2998 to i8
  store i8 %2999, i8* %30, align 1
  %3000 = lshr i32 %2992, 31
  %3001 = trunc i32 %3000 to i8
  store i8 %3001, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v321 = select i1 %2998, i64 224, i64 13
  %3002 = add i64 %2989, %.v321
  store i64 %3002, i64* %3, align 8
  br i1 %2998, label %block_.L_473cc8, label %block_473bf5

block_473bf5:                                     ; preds = %block_.L_473bdb
  %3003 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3003, i64* %RAX.i4266, align 8
  %3004 = add i64 %3003, 14168
  %3005 = add i64 %3002, 15
  store i64 %3005, i64* %3, align 8
  %3006 = inttoptr i64 %3004 to i64*
  %3007 = load i64, i64* %3006, align 8
  store i64 %3007, i64* %RAX.i4266, align 8
  %3008 = add i64 %2987, -156
  %3009 = add i64 %3002, 22
  store i64 %3009, i64* %3, align 8
  %3010 = inttoptr i64 %3008 to i32*
  %3011 = load i32, i32* %3010, align 4
  %3012 = sext i32 %3011 to i64
  %3013 = mul nsw i64 %3012, 632
  store i64 %3013, i64* %RCX.i4448, align 8
  %3014 = lshr i64 %3013, 63
  %3015 = add i64 %3013, %3007
  store i64 %3015, i64* %RAX.i4266, align 8
  %3016 = icmp ult i64 %3015, %3007
  %3017 = icmp ult i64 %3015, %3013
  %3018 = or i1 %3016, %3017
  %3019 = zext i1 %3018 to i8
  store i8 %3019, i8* %14, align 1
  %3020 = trunc i64 %3015 to i32
  %3021 = and i32 %3020, 255
  %3022 = tail call i32 @llvm.ctpop.i32(i32 %3021)
  %3023 = trunc i32 %3022 to i8
  %3024 = and i8 %3023, 1
  %3025 = xor i8 %3024, 1
  store i8 %3025, i8* %21, align 1
  %3026 = xor i64 %3013, %3007
  %3027 = xor i64 %3026, %3015
  %3028 = lshr i64 %3027, 4
  %3029 = trunc i64 %3028 to i8
  %3030 = and i8 %3029, 1
  store i8 %3030, i8* %27, align 1
  %3031 = icmp eq i64 %3015, 0
  %3032 = zext i1 %3031 to i8
  store i8 %3032, i8* %30, align 1
  %3033 = lshr i64 %3015, 63
  %3034 = trunc i64 %3033 to i8
  store i8 %3034, i8* %33, align 1
  %3035 = lshr i64 %3007, 63
  %3036 = xor i64 %3033, %3035
  %3037 = xor i64 %3033, %3014
  %3038 = add nuw nsw i64 %3036, %3037
  %3039 = icmp eq i64 %3038, 2
  %3040 = zext i1 %3039 to i8
  store i8 %3040, i8* %39, align 1
  %3041 = add i64 %3015, 532
  %3042 = add i64 %3002, 39
  store i64 %3042, i64* %3, align 8
  %3043 = inttoptr i64 %3041 to i32*
  %3044 = load i32, i32* %3043, align 4
  store i8 0, i8* %14, align 1
  %3045 = and i32 %3044, 255
  %3046 = tail call i32 @llvm.ctpop.i32(i32 %3045)
  %3047 = trunc i32 %3046 to i8
  %3048 = and i8 %3047, 1
  %3049 = xor i8 %3048, 1
  store i8 %3049, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3050 = icmp eq i32 %3044, 0
  %3051 = zext i1 %3050 to i8
  store i8 %3051, i8* %30, align 1
  %3052 = lshr i32 %3044, 31
  %3053 = trunc i32 %3052 to i8
  store i8 %3053, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v322 = select i1 %3050, i64 45, i64 94
  %3054 = add i64 %3002, %.v322
  store i64 %3054, i64* %3, align 8
  %3055 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %3050, label %block_473c22, label %block_473bf5.block_.L_473c53_crit_edge

block_473bf5.block_.L_473c53_crit_edge:           ; preds = %block_473bf5
  %.pre207 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473c53

block_473c22:                                     ; preds = %block_473bf5
  store i64 %3055, i64* %RAX.i4266, align 8
  %3056 = add i64 %3055, 6480
  %3057 = add i64 %3054, 15
  store i64 %3057, i64* %3, align 8
  %3058 = inttoptr i64 %3056 to i64*
  %3059 = load i64, i64* %3058, align 8
  store i64 %3059, i64* %RAX.i4266, align 8
  %3060 = add i64 %3054, 18
  store i64 %3060, i64* %3, align 8
  %3061 = inttoptr i64 %3059 to i64*
  %3062 = load i64, i64* %3061, align 8
  store i64 %3062, i64* %RAX.i4266, align 8
  %3063 = load i64, i64* %RBP.i, align 8
  %3064 = add i64 %3063, -144
  %3065 = add i64 %3054, 25
  store i64 %3065, i64* %3, align 8
  %3066 = inttoptr i64 %3064 to i32*
  %3067 = load i32, i32* %3066, align 4
  %3068 = sext i32 %3067 to i64
  store i64 %3068, i64* %RCX.i4448, align 8
  %3069 = shl nsw i64 %3068, 3
  %3070 = add i64 %3069, %3062
  %3071 = add i64 %3054, 29
  store i64 %3071, i64* %3, align 8
  %3072 = inttoptr i64 %3070 to i64*
  %3073 = load i64, i64* %3072, align 8
  store i64 %3073, i64* %RAX.i4266, align 8
  %3074 = add i64 %3063, -140
  %3075 = add i64 %3054, 36
  store i64 %3075, i64* %3, align 8
  %3076 = inttoptr i64 %3074 to i32*
  %3077 = load i32, i32* %3076, align 4
  %3078 = sext i32 %3077 to i64
  store i64 %3078, i64* %RCX.i4448, align 8
  %3079 = shl nsw i64 %3078, 1
  %3080 = add i64 %3079, %3073
  %3081 = add i64 %3054, 40
  store i64 %3081, i64* %3, align 8
  %3082 = inttoptr i64 %3080 to i16*
  %3083 = load i16, i16* %3082, align 2
  %3084 = sext i16 %3083 to i64
  %3085 = and i64 %3084, 4294967295
  store i64 %3085, i64* %RDX.i4301, align 8
  %3086 = sext i16 %3083 to i32
  %3087 = add i64 %3054, 43
  store i8 0, i8* %14, align 1
  %3088 = and i32 %3086, 255
  %3089 = tail call i32 @llvm.ctpop.i32(i32 %3088)
  %3090 = trunc i32 %3089 to i8
  %3091 = and i8 %3090, 1
  %3092 = xor i8 %3091, 1
  store i8 %3092, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3093 = icmp eq i16 %3083, 0
  %3094 = zext i1 %3093 to i8
  store i8 %3094, i8* %30, align 1
  %3095 = lshr i32 %3086, 31
  %3096 = trunc i32 %3095 to i8
  store i8 %3096, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3097 = icmp ne i8 %3096, 0
  %.v152 = select i1 %3097, i64 6, i64 60
  %3098 = add i64 %3087, %.v152
  store i64 %3098, i64* %3, align 8
  br i1 %3097, label %block_.L_473c53, label %block_.L_473c89

block_.L_473c53:                                  ; preds = %block_473bf5.block_.L_473c53_crit_edge, %block_473c22
  %3099 = phi i64 [ %3063, %block_473c22 ], [ %.pre207, %block_473bf5.block_.L_473c53_crit_edge ]
  %3100 = phi i64 [ %3098, %block_473c22 ], [ %3054, %block_473bf5.block_.L_473c53_crit_edge ]
  store i64 %3055, i64* %RAX.i4266, align 8
  %3101 = add i64 %3055, 6480
  %3102 = add i64 %3100, 15
  store i64 %3102, i64* %3, align 8
  %3103 = inttoptr i64 %3101 to i64*
  %3104 = load i64, i64* %3103, align 8
  store i64 %3104, i64* %RAX.i4266, align 8
  %3105 = add i64 %3100, 18
  store i64 %3105, i64* %3, align 8
  %3106 = inttoptr i64 %3104 to i64*
  %3107 = load i64, i64* %3106, align 8
  store i64 %3107, i64* %RAX.i4266, align 8
  %3108 = add i64 %3099, -144
  %3109 = add i64 %3100, 25
  store i64 %3109, i64* %3, align 8
  %3110 = inttoptr i64 %3108 to i32*
  %3111 = load i32, i32* %3110, align 4
  %3112 = sext i32 %3111 to i64
  store i64 %3112, i64* %RCX.i4448, align 8
  %3113 = shl nsw i64 %3112, 3
  %3114 = add i64 %3113, %3107
  %3115 = add i64 %3100, 29
  store i64 %3115, i64* %3, align 8
  %3116 = inttoptr i64 %3114 to i64*
  %3117 = load i64, i64* %3116, align 8
  store i64 %3117, i64* %RAX.i4266, align 8
  %3118 = add i64 %3099, -140
  %3119 = add i64 %3100, 36
  store i64 %3119, i64* %3, align 8
  %3120 = inttoptr i64 %3118 to i32*
  %3121 = load i32, i32* %3120, align 4
  %3122 = sext i32 %3121 to i64
  store i64 %3122, i64* %RCX.i4448, align 8
  %3123 = shl nsw i64 %3122, 1
  %3124 = add i64 %3123, %3117
  %3125 = add i64 %3100, 40
  store i64 %3125, i64* %3, align 8
  %3126 = inttoptr i64 %3124 to i16*
  %3127 = load i16, i16* %3126, align 2
  %3128 = sext i16 %3127 to i64
  %3129 = ashr i64 %3128, 1
  %3130 = trunc i16 %3127 to i8
  %3131 = and i8 %3130, 1
  %3132 = trunc i64 %3129 to i32
  %3133 = and i64 %3129, 4294967295
  store i64 %3133, i64* %RDX.i4301, align 8
  store i8 %3131, i8* %14, align 1
  %3134 = and i32 %3132, 255
  %3135 = tail call i32 @llvm.ctpop.i32(i32 %3134)
  %3136 = trunc i32 %3135 to i8
  %3137 = and i8 %3136, 1
  %3138 = xor i8 %3137, 1
  store i8 %3138, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3139 = icmp eq i32 %3132, 0
  %3140 = zext i1 %3139 to i8
  store i8 %3140, i8* %30, align 1
  %3141 = lshr i64 %3129, 31
  %3142 = trunc i64 %3141 to i8
  %3143 = and i8 %3142, 1
  store i8 %3143, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3144 = add i64 %3099, -376
  %3145 = trunc i64 %3129 to i32
  %3146 = add i64 %3100, 48
  store i64 %3146, i64* %3, align 8
  %3147 = inttoptr i64 %3144 to i32*
  store i32 %3145, i32* %3147, align 4
  %3148 = load i64, i64* %3, align 8
  %3149 = add i64 %3148, 51
  store i64 %3149, i64* %3, align 8
  br label %block_.L_473cb7

block_.L_473c89:                                  ; preds = %block_473c22
  store i64 %3055, i64* %RAX.i4266, align 8
  %3150 = add i64 %3098, 15
  store i64 %3150, i64* %3, align 8
  %3151 = load i64, i64* %3058, align 8
  store i64 %3151, i64* %RAX.i4266, align 8
  %3152 = add i64 %3098, 18
  store i64 %3152, i64* %3, align 8
  %3153 = inttoptr i64 %3151 to i64*
  %3154 = load i64, i64* %3153, align 8
  store i64 %3154, i64* %RAX.i4266, align 8
  %3155 = add i64 %3098, 25
  store i64 %3155, i64* %3, align 8
  %3156 = load i32, i32* %3066, align 4
  %3157 = sext i32 %3156 to i64
  store i64 %3157, i64* %RCX.i4448, align 8
  %3158 = shl nsw i64 %3157, 3
  %3159 = add i64 %3158, %3154
  %3160 = add i64 %3098, 29
  store i64 %3160, i64* %3, align 8
  %3161 = inttoptr i64 %3159 to i64*
  %3162 = load i64, i64* %3161, align 8
  store i64 %3162, i64* %RAX.i4266, align 8
  %3163 = add i64 %3098, 36
  store i64 %3163, i64* %3, align 8
  %3164 = load i32, i32* %3076, align 4
  %3165 = sext i32 %3164 to i64
  store i64 %3165, i64* %RCX.i4448, align 8
  %3166 = shl nsw i64 %3165, 1
  %3167 = add i64 %3166, %3162
  %3168 = add i64 %3098, 40
  store i64 %3168, i64* %3, align 8
  %3169 = inttoptr i64 %3167 to i16*
  %3170 = load i16, i16* %3169, align 2
  %3171 = sext i16 %3170 to i64
  %3172 = and i64 %3171, 4294967295
  store i64 %3172, i64* %RDX.i4301, align 8
  %3173 = add i64 %3063, -376
  %3174 = sext i16 %3170 to i32
  %3175 = add i64 %3098, 46
  store i64 %3175, i64* %3, align 8
  %3176 = inttoptr i64 %3173 to i32*
  store i32 %3174, i32* %3176, align 4
  %.pre208 = load i64, i64* %3, align 8
  br label %block_.L_473cb7

block_.L_473cb7:                                  ; preds = %block_.L_473c89, %block_.L_473c53
  %3177 = phi i64 [ %.pre208, %block_.L_473c89 ], [ %3149, %block_.L_473c53 ]
  %3178 = load i64, i64* %RBP.i, align 8
  %3179 = add i64 %3178, -376
  %3180 = add i64 %3177, 6
  store i64 %3180, i64* %3, align 8
  %3181 = inttoptr i64 %3179 to i32*
  %3182 = load i32, i32* %3181, align 4
  %3183 = zext i32 %3182 to i64
  store i64 %3183, i64* %RAX.i4266, align 8
  %3184 = add i64 %3178, -380
  %3185 = add i64 %3177, 12
  store i64 %3185, i64* %3, align 8
  %3186 = inttoptr i64 %3184 to i32*
  store i32 %3182, i32* %3186, align 4
  %3187 = load i64, i64* %3, align 8
  %3188 = add i64 %3187, 21
  br label %block_.L_473cd8

block_.L_473cc8:                                  ; preds = %block_.L_473bdb
  store i64 4294967295, i64* %RAX.i4266, align 8
  %3189 = add i64 %2987, -380
  %3190 = add i64 %3002, 11
  store i64 %3190, i64* %3, align 8
  %3191 = inttoptr i64 %3189 to i32*
  store i32 -1, i32* %3191, align 4
  %3192 = load i64, i64* %3, align 8
  %3193 = add i64 %3192, 5
  store i64 %3193, i64* %3, align 8
  br label %block_.L_473cd8

block_.L_473cd8:                                  ; preds = %block_.L_473cc8, %block_.L_473cb7
  %storemerge123 = phi i64 [ %3188, %block_.L_473cb7 ], [ %3193, %block_.L_473cc8 ]
  %3194 = load i64, i64* %RBP.i, align 8
  %3195 = add i64 %3194, -380
  %3196 = add i64 %storemerge123, 6
  store i64 %3196, i64* %3, align 8
  %3197 = inttoptr i64 %3195 to i32*
  %3198 = load i32, i32* %3197, align 4
  %3199 = zext i32 %3198 to i64
  store i64 %3199, i64* %RAX.i4266, align 8
  %3200 = trunc i32 %3198 to i16
  store i16 %3200, i16* %CX.i2843, align 2
  %3201 = add i64 %3194, -84
  %3202 = add i64 %storemerge123, 13
  store i64 %3202, i64* %3, align 8
  %3203 = inttoptr i64 %3201 to i16*
  store i16 %3200, i16* %3203, align 2
  %3204 = load i64, i64* %RBP.i, align 8
  %3205 = add i64 %3204, -184
  %3206 = load i64, i64* %3, align 8
  %3207 = add i64 %3206, 7
  store i64 %3207, i64* %3, align 8
  %3208 = inttoptr i64 %3205 to i32*
  %3209 = load i32, i32* %3208, align 4
  store i8 0, i8* %14, align 1
  %3210 = and i32 %3209, 255
  %3211 = tail call i32 @llvm.ctpop.i32(i32 %3210)
  %3212 = trunc i32 %3211 to i8
  %3213 = and i8 %3212, 1
  %3214 = xor i8 %3213, 1
  store i8 %3214, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3215 = icmp eq i32 %3209, 0
  %3216 = zext i1 %3215 to i8
  store i8 %3216, i8* %30, align 1
  %3217 = lshr i32 %3209, 31
  %3218 = trunc i32 %3217 to i8
  store i8 %3218, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v323 = select i1 %3215, i64 224, i64 13
  %3219 = add i64 %3206, %.v323
  store i64 %3219, i64* %3, align 8
  br i1 %3215, label %block_.L_473dc5, label %block_473cf2

block_473cf2:                                     ; preds = %block_.L_473cd8
  %3220 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3220, i64* %RAX.i4266, align 8
  %3221 = add i64 %3220, 14168
  %3222 = add i64 %3219, 15
  store i64 %3222, i64* %3, align 8
  %3223 = inttoptr i64 %3221 to i64*
  %3224 = load i64, i64* %3223, align 8
  store i64 %3224, i64* %RAX.i4266, align 8
  %3225 = add i64 %3204, -180
  %3226 = add i64 %3219, 22
  store i64 %3226, i64* %3, align 8
  %3227 = inttoptr i64 %3225 to i32*
  %3228 = load i32, i32* %3227, align 4
  %3229 = sext i32 %3228 to i64
  %3230 = mul nsw i64 %3229, 632
  store i64 %3230, i64* %RCX.i4448, align 8
  %3231 = lshr i64 %3230, 63
  %3232 = add i64 %3230, %3224
  store i64 %3232, i64* %RAX.i4266, align 8
  %3233 = icmp ult i64 %3232, %3224
  %3234 = icmp ult i64 %3232, %3230
  %3235 = or i1 %3233, %3234
  %3236 = zext i1 %3235 to i8
  store i8 %3236, i8* %14, align 1
  %3237 = trunc i64 %3232 to i32
  %3238 = and i32 %3237, 255
  %3239 = tail call i32 @llvm.ctpop.i32(i32 %3238)
  %3240 = trunc i32 %3239 to i8
  %3241 = and i8 %3240, 1
  %3242 = xor i8 %3241, 1
  store i8 %3242, i8* %21, align 1
  %3243 = xor i64 %3230, %3224
  %3244 = xor i64 %3243, %3232
  %3245 = lshr i64 %3244, 4
  %3246 = trunc i64 %3245 to i8
  %3247 = and i8 %3246, 1
  store i8 %3247, i8* %27, align 1
  %3248 = icmp eq i64 %3232, 0
  %3249 = zext i1 %3248 to i8
  store i8 %3249, i8* %30, align 1
  %3250 = lshr i64 %3232, 63
  %3251 = trunc i64 %3250 to i8
  store i8 %3251, i8* %33, align 1
  %3252 = lshr i64 %3224, 63
  %3253 = xor i64 %3250, %3252
  %3254 = xor i64 %3250, %3231
  %3255 = add nuw nsw i64 %3253, %3254
  %3256 = icmp eq i64 %3255, 2
  %3257 = zext i1 %3256 to i8
  store i8 %3257, i8* %39, align 1
  %3258 = add i64 %3232, 532
  %3259 = add i64 %3219, 39
  store i64 %3259, i64* %3, align 8
  %3260 = inttoptr i64 %3258 to i32*
  %3261 = load i32, i32* %3260, align 4
  store i8 0, i8* %14, align 1
  %3262 = and i32 %3261, 255
  %3263 = tail call i32 @llvm.ctpop.i32(i32 %3262)
  %3264 = trunc i32 %3263 to i8
  %3265 = and i8 %3264, 1
  %3266 = xor i8 %3265, 1
  store i8 %3266, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3267 = icmp eq i32 %3261, 0
  %3268 = zext i1 %3267 to i8
  store i8 %3268, i8* %30, align 1
  %3269 = lshr i32 %3261, 31
  %3270 = trunc i32 %3269 to i8
  store i8 %3270, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v324 = select i1 %3267, i64 45, i64 94
  %3271 = add i64 %3219, %.v324
  store i64 %3271, i64* %3, align 8
  %3272 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %3267, label %block_473d1f, label %block_473cf2.block_.L_473d50_crit_edge

block_473cf2.block_.L_473d50_crit_edge:           ; preds = %block_473cf2
  %.pre210 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473d50

block_473d1f:                                     ; preds = %block_473cf2
  store i64 %3272, i64* %RAX.i4266, align 8
  %3273 = add i64 %3272, 6480
  %3274 = add i64 %3271, 15
  store i64 %3274, i64* %3, align 8
  %3275 = inttoptr i64 %3273 to i64*
  %3276 = load i64, i64* %3275, align 8
  store i64 %3276, i64* %RAX.i4266, align 8
  %3277 = add i64 %3271, 18
  store i64 %3277, i64* %3, align 8
  %3278 = inttoptr i64 %3276 to i64*
  %3279 = load i64, i64* %3278, align 8
  store i64 %3279, i64* %RAX.i4266, align 8
  %3280 = load i64, i64* %RBP.i, align 8
  %3281 = add i64 %3280, -168
  %3282 = add i64 %3271, 25
  store i64 %3282, i64* %3, align 8
  %3283 = inttoptr i64 %3281 to i32*
  %3284 = load i32, i32* %3283, align 4
  %3285 = sext i32 %3284 to i64
  store i64 %3285, i64* %RCX.i4448, align 8
  %3286 = shl nsw i64 %3285, 3
  %3287 = add i64 %3286, %3279
  %3288 = add i64 %3271, 29
  store i64 %3288, i64* %3, align 8
  %3289 = inttoptr i64 %3287 to i64*
  %3290 = load i64, i64* %3289, align 8
  store i64 %3290, i64* %RAX.i4266, align 8
  %3291 = add i64 %3280, -164
  %3292 = add i64 %3271, 36
  store i64 %3292, i64* %3, align 8
  %3293 = inttoptr i64 %3291 to i32*
  %3294 = load i32, i32* %3293, align 4
  %3295 = sext i32 %3294 to i64
  store i64 %3295, i64* %RCX.i4448, align 8
  %3296 = shl nsw i64 %3295, 1
  %3297 = add i64 %3296, %3290
  %3298 = add i64 %3271, 40
  store i64 %3298, i64* %3, align 8
  %3299 = inttoptr i64 %3297 to i16*
  %3300 = load i16, i16* %3299, align 2
  %3301 = sext i16 %3300 to i64
  %3302 = and i64 %3301, 4294967295
  store i64 %3302, i64* %RDX.i4301, align 8
  %3303 = sext i16 %3300 to i32
  %3304 = add i64 %3271, 43
  store i8 0, i8* %14, align 1
  %3305 = and i32 %3303, 255
  %3306 = tail call i32 @llvm.ctpop.i32(i32 %3305)
  %3307 = trunc i32 %3306 to i8
  %3308 = and i8 %3307, 1
  %3309 = xor i8 %3308, 1
  store i8 %3309, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3310 = icmp eq i16 %3300, 0
  %3311 = zext i1 %3310 to i8
  store i8 %3311, i8* %30, align 1
  %3312 = lshr i32 %3303, 31
  %3313 = trunc i32 %3312 to i8
  store i8 %3313, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3314 = icmp ne i8 %3313, 0
  %.v153 = select i1 %3314, i64 6, i64 60
  %3315 = add i64 %3304, %.v153
  store i64 %3315, i64* %3, align 8
  br i1 %3314, label %block_.L_473d50, label %block_.L_473d86

block_.L_473d50:                                  ; preds = %block_473cf2.block_.L_473d50_crit_edge, %block_473d1f
  %3316 = phi i64 [ %3280, %block_473d1f ], [ %.pre210, %block_473cf2.block_.L_473d50_crit_edge ]
  %3317 = phi i64 [ %3315, %block_473d1f ], [ %3271, %block_473cf2.block_.L_473d50_crit_edge ]
  store i64 %3272, i64* %RAX.i4266, align 8
  %3318 = add i64 %3272, 6480
  %3319 = add i64 %3317, 15
  store i64 %3319, i64* %3, align 8
  %3320 = inttoptr i64 %3318 to i64*
  %3321 = load i64, i64* %3320, align 8
  store i64 %3321, i64* %RAX.i4266, align 8
  %3322 = add i64 %3317, 18
  store i64 %3322, i64* %3, align 8
  %3323 = inttoptr i64 %3321 to i64*
  %3324 = load i64, i64* %3323, align 8
  store i64 %3324, i64* %RAX.i4266, align 8
  %3325 = add i64 %3316, -168
  %3326 = add i64 %3317, 25
  store i64 %3326, i64* %3, align 8
  %3327 = inttoptr i64 %3325 to i32*
  %3328 = load i32, i32* %3327, align 4
  %3329 = sext i32 %3328 to i64
  store i64 %3329, i64* %RCX.i4448, align 8
  %3330 = shl nsw i64 %3329, 3
  %3331 = add i64 %3330, %3324
  %3332 = add i64 %3317, 29
  store i64 %3332, i64* %3, align 8
  %3333 = inttoptr i64 %3331 to i64*
  %3334 = load i64, i64* %3333, align 8
  store i64 %3334, i64* %RAX.i4266, align 8
  %3335 = add i64 %3316, -164
  %3336 = add i64 %3317, 36
  store i64 %3336, i64* %3, align 8
  %3337 = inttoptr i64 %3335 to i32*
  %3338 = load i32, i32* %3337, align 4
  %3339 = sext i32 %3338 to i64
  store i64 %3339, i64* %RCX.i4448, align 8
  %3340 = shl nsw i64 %3339, 1
  %3341 = add i64 %3340, %3334
  %3342 = add i64 %3317, 40
  store i64 %3342, i64* %3, align 8
  %3343 = inttoptr i64 %3341 to i16*
  %3344 = load i16, i16* %3343, align 2
  %3345 = sext i16 %3344 to i64
  %3346 = ashr i64 %3345, 1
  %3347 = trunc i16 %3344 to i8
  %3348 = and i8 %3347, 1
  %3349 = trunc i64 %3346 to i32
  %3350 = and i64 %3346, 4294967295
  store i64 %3350, i64* %RDX.i4301, align 8
  store i8 %3348, i8* %14, align 1
  %3351 = and i32 %3349, 255
  %3352 = tail call i32 @llvm.ctpop.i32(i32 %3351)
  %3353 = trunc i32 %3352 to i8
  %3354 = and i8 %3353, 1
  %3355 = xor i8 %3354, 1
  store i8 %3355, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3356 = icmp eq i32 %3349, 0
  %3357 = zext i1 %3356 to i8
  store i8 %3357, i8* %30, align 1
  %3358 = lshr i64 %3346, 31
  %3359 = trunc i64 %3358 to i8
  %3360 = and i8 %3359, 1
  store i8 %3360, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3361 = add i64 %3316, -384
  %3362 = trunc i64 %3346 to i32
  %3363 = add i64 %3317, 48
  store i64 %3363, i64* %3, align 8
  %3364 = inttoptr i64 %3361 to i32*
  store i32 %3362, i32* %3364, align 4
  %3365 = load i64, i64* %3, align 8
  %3366 = add i64 %3365, 51
  store i64 %3366, i64* %3, align 8
  br label %block_.L_473db4

block_.L_473d86:                                  ; preds = %block_473d1f
  store i64 %3272, i64* %RAX.i4266, align 8
  %3367 = add i64 %3315, 15
  store i64 %3367, i64* %3, align 8
  %3368 = load i64, i64* %3275, align 8
  store i64 %3368, i64* %RAX.i4266, align 8
  %3369 = add i64 %3315, 18
  store i64 %3369, i64* %3, align 8
  %3370 = inttoptr i64 %3368 to i64*
  %3371 = load i64, i64* %3370, align 8
  store i64 %3371, i64* %RAX.i4266, align 8
  %3372 = add i64 %3315, 25
  store i64 %3372, i64* %3, align 8
  %3373 = load i32, i32* %3283, align 4
  %3374 = sext i32 %3373 to i64
  store i64 %3374, i64* %RCX.i4448, align 8
  %3375 = shl nsw i64 %3374, 3
  %3376 = add i64 %3375, %3371
  %3377 = add i64 %3315, 29
  store i64 %3377, i64* %3, align 8
  %3378 = inttoptr i64 %3376 to i64*
  %3379 = load i64, i64* %3378, align 8
  store i64 %3379, i64* %RAX.i4266, align 8
  %3380 = add i64 %3315, 36
  store i64 %3380, i64* %3, align 8
  %3381 = load i32, i32* %3293, align 4
  %3382 = sext i32 %3381 to i64
  store i64 %3382, i64* %RCX.i4448, align 8
  %3383 = shl nsw i64 %3382, 1
  %3384 = add i64 %3383, %3379
  %3385 = add i64 %3315, 40
  store i64 %3385, i64* %3, align 8
  %3386 = inttoptr i64 %3384 to i16*
  %3387 = load i16, i16* %3386, align 2
  %3388 = sext i16 %3387 to i64
  %3389 = and i64 %3388, 4294967295
  store i64 %3389, i64* %RDX.i4301, align 8
  %3390 = add i64 %3280, -384
  %3391 = sext i16 %3387 to i32
  %3392 = add i64 %3315, 46
  store i64 %3392, i64* %3, align 8
  %3393 = inttoptr i64 %3390 to i32*
  store i32 %3391, i32* %3393, align 4
  %.pre211 = load i64, i64* %3, align 8
  br label %block_.L_473db4

block_.L_473db4:                                  ; preds = %block_.L_473d86, %block_.L_473d50
  %3394 = phi i64 [ %.pre211, %block_.L_473d86 ], [ %3366, %block_.L_473d50 ]
  %3395 = load i64, i64* %RBP.i, align 8
  %3396 = add i64 %3395, -384
  %3397 = add i64 %3394, 6
  store i64 %3397, i64* %3, align 8
  %3398 = inttoptr i64 %3396 to i32*
  %3399 = load i32, i32* %3398, align 4
  %3400 = zext i32 %3399 to i64
  store i64 %3400, i64* %RAX.i4266, align 8
  %3401 = add i64 %3395, -388
  %3402 = add i64 %3394, 12
  store i64 %3402, i64* %3, align 8
  %3403 = inttoptr i64 %3401 to i32*
  store i32 %3399, i32* %3403, align 4
  %3404 = load i64, i64* %3, align 8
  %3405 = add i64 %3404, 21
  br label %block_.L_473dd5

block_.L_473dc5:                                  ; preds = %block_.L_473cd8
  store i64 4294967295, i64* %RAX.i4266, align 8
  %3406 = add i64 %3204, -388
  %3407 = add i64 %3219, 11
  store i64 %3407, i64* %3, align 8
  %3408 = inttoptr i64 %3406 to i32*
  store i32 -1, i32* %3408, align 4
  %3409 = load i64, i64* %3, align 8
  %3410 = add i64 %3409, 5
  store i64 %3410, i64* %3, align 8
  br label %block_.L_473dd5

block_.L_473dd5:                                  ; preds = %block_.L_473dc5, %block_.L_473db4
  %storemerge124 = phi i64 [ %3405, %block_.L_473db4 ], [ %3410, %block_.L_473dc5 ]
  %3411 = load i64, i64* %RBP.i, align 8
  %3412 = add i64 %3411, -388
  %3413 = add i64 %storemerge124, 6
  store i64 %3413, i64* %3, align 8
  %3414 = inttoptr i64 %3412 to i32*
  %3415 = load i32, i32* %3414, align 4
  %3416 = zext i32 %3415 to i64
  store i64 %3416, i64* %RAX.i4266, align 8
  %3417 = trunc i32 %3415 to i16
  store i16 %3417, i16* %CX.i2843, align 2
  %3418 = add i64 %3411, -86
  %3419 = add i64 %storemerge124, 13
  store i64 %3419, i64* %3, align 8
  %3420 = inttoptr i64 %3418 to i16*
  store i16 %3417, i16* %3420, align 2
  %3421 = load i64, i64* %RBP.i, align 8
  %3422 = add i64 %3421, -208
  %3423 = load i64, i64* %3, align 8
  %3424 = add i64 %3423, 7
  store i64 %3424, i64* %3, align 8
  %3425 = inttoptr i64 %3422 to i32*
  %3426 = load i32, i32* %3425, align 4
  store i8 0, i8* %14, align 1
  %3427 = and i32 %3426, 255
  %3428 = tail call i32 @llvm.ctpop.i32(i32 %3427)
  %3429 = trunc i32 %3428 to i8
  %3430 = and i8 %3429, 1
  %3431 = xor i8 %3430, 1
  store i8 %3431, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3432 = icmp eq i32 %3426, 0
  %3433 = zext i1 %3432 to i8
  store i8 %3433, i8* %30, align 1
  %3434 = lshr i32 %3426, 31
  %3435 = trunc i32 %3434 to i8
  store i8 %3435, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v325 = select i1 %3432, i64 224, i64 13
  %3436 = add i64 %3423, %.v325
  store i64 %3436, i64* %3, align 8
  br i1 %3432, label %block_.L_473ec2, label %block_473def

block_473def:                                     ; preds = %block_.L_473dd5
  %3437 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3437, i64* %RAX.i4266, align 8
  %3438 = add i64 %3437, 14168
  %3439 = add i64 %3436, 15
  store i64 %3439, i64* %3, align 8
  %3440 = inttoptr i64 %3438 to i64*
  %3441 = load i64, i64* %3440, align 8
  store i64 %3441, i64* %RAX.i4266, align 8
  %3442 = add i64 %3421, -204
  %3443 = add i64 %3436, 22
  store i64 %3443, i64* %3, align 8
  %3444 = inttoptr i64 %3442 to i32*
  %3445 = load i32, i32* %3444, align 4
  %3446 = sext i32 %3445 to i64
  %3447 = mul nsw i64 %3446, 632
  store i64 %3447, i64* %RCX.i4448, align 8
  %3448 = lshr i64 %3447, 63
  %3449 = add i64 %3447, %3441
  store i64 %3449, i64* %RAX.i4266, align 8
  %3450 = icmp ult i64 %3449, %3441
  %3451 = icmp ult i64 %3449, %3447
  %3452 = or i1 %3450, %3451
  %3453 = zext i1 %3452 to i8
  store i8 %3453, i8* %14, align 1
  %3454 = trunc i64 %3449 to i32
  %3455 = and i32 %3454, 255
  %3456 = tail call i32 @llvm.ctpop.i32(i32 %3455)
  %3457 = trunc i32 %3456 to i8
  %3458 = and i8 %3457, 1
  %3459 = xor i8 %3458, 1
  store i8 %3459, i8* %21, align 1
  %3460 = xor i64 %3447, %3441
  %3461 = xor i64 %3460, %3449
  %3462 = lshr i64 %3461, 4
  %3463 = trunc i64 %3462 to i8
  %3464 = and i8 %3463, 1
  store i8 %3464, i8* %27, align 1
  %3465 = icmp eq i64 %3449, 0
  %3466 = zext i1 %3465 to i8
  store i8 %3466, i8* %30, align 1
  %3467 = lshr i64 %3449, 63
  %3468 = trunc i64 %3467 to i8
  store i8 %3468, i8* %33, align 1
  %3469 = lshr i64 %3441, 63
  %3470 = xor i64 %3467, %3469
  %3471 = xor i64 %3467, %3448
  %3472 = add nuw nsw i64 %3470, %3471
  %3473 = icmp eq i64 %3472, 2
  %3474 = zext i1 %3473 to i8
  store i8 %3474, i8* %39, align 1
  %3475 = add i64 %3449, 532
  %3476 = add i64 %3436, 39
  store i64 %3476, i64* %3, align 8
  %3477 = inttoptr i64 %3475 to i32*
  %3478 = load i32, i32* %3477, align 4
  store i8 0, i8* %14, align 1
  %3479 = and i32 %3478, 255
  %3480 = tail call i32 @llvm.ctpop.i32(i32 %3479)
  %3481 = trunc i32 %3480 to i8
  %3482 = and i8 %3481, 1
  %3483 = xor i8 %3482, 1
  store i8 %3483, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3484 = icmp eq i32 %3478, 0
  %3485 = zext i1 %3484 to i8
  store i8 %3485, i8* %30, align 1
  %3486 = lshr i32 %3478, 31
  %3487 = trunc i32 %3486 to i8
  store i8 %3487, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v326 = select i1 %3484, i64 45, i64 94
  %3488 = add i64 %3436, %.v326
  store i64 %3488, i64* %3, align 8
  %3489 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %3484, label %block_473e1c, label %block_473def.block_.L_473e4d_crit_edge

block_473def.block_.L_473e4d_crit_edge:           ; preds = %block_473def
  %.pre213 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473e4d

block_473e1c:                                     ; preds = %block_473def
  store i64 %3489, i64* %RAX.i4266, align 8
  %3490 = add i64 %3489, 6480
  %3491 = add i64 %3488, 15
  store i64 %3491, i64* %3, align 8
  %3492 = inttoptr i64 %3490 to i64*
  %3493 = load i64, i64* %3492, align 8
  store i64 %3493, i64* %RAX.i4266, align 8
  %3494 = add i64 %3488, 18
  store i64 %3494, i64* %3, align 8
  %3495 = inttoptr i64 %3493 to i64*
  %3496 = load i64, i64* %3495, align 8
  store i64 %3496, i64* %RAX.i4266, align 8
  %3497 = load i64, i64* %RBP.i, align 8
  %3498 = add i64 %3497, -192
  %3499 = add i64 %3488, 25
  store i64 %3499, i64* %3, align 8
  %3500 = inttoptr i64 %3498 to i32*
  %3501 = load i32, i32* %3500, align 4
  %3502 = sext i32 %3501 to i64
  store i64 %3502, i64* %RCX.i4448, align 8
  %3503 = shl nsw i64 %3502, 3
  %3504 = add i64 %3503, %3496
  %3505 = add i64 %3488, 29
  store i64 %3505, i64* %3, align 8
  %3506 = inttoptr i64 %3504 to i64*
  %3507 = load i64, i64* %3506, align 8
  store i64 %3507, i64* %RAX.i4266, align 8
  %3508 = add i64 %3497, -188
  %3509 = add i64 %3488, 36
  store i64 %3509, i64* %3, align 8
  %3510 = inttoptr i64 %3508 to i32*
  %3511 = load i32, i32* %3510, align 4
  %3512 = sext i32 %3511 to i64
  store i64 %3512, i64* %RCX.i4448, align 8
  %3513 = shl nsw i64 %3512, 1
  %3514 = add i64 %3513, %3507
  %3515 = add i64 %3488, 40
  store i64 %3515, i64* %3, align 8
  %3516 = inttoptr i64 %3514 to i16*
  %3517 = load i16, i16* %3516, align 2
  %3518 = sext i16 %3517 to i64
  %3519 = and i64 %3518, 4294967295
  store i64 %3519, i64* %RDX.i4301, align 8
  %3520 = sext i16 %3517 to i32
  %3521 = add i64 %3488, 43
  store i8 0, i8* %14, align 1
  %3522 = and i32 %3520, 255
  %3523 = tail call i32 @llvm.ctpop.i32(i32 %3522)
  %3524 = trunc i32 %3523 to i8
  %3525 = and i8 %3524, 1
  %3526 = xor i8 %3525, 1
  store i8 %3526, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3527 = icmp eq i16 %3517, 0
  %3528 = zext i1 %3527 to i8
  store i8 %3528, i8* %30, align 1
  %3529 = lshr i32 %3520, 31
  %3530 = trunc i32 %3529 to i8
  store i8 %3530, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3531 = icmp ne i8 %3530, 0
  %.v154 = select i1 %3531, i64 6, i64 60
  %3532 = add i64 %3521, %.v154
  store i64 %3532, i64* %3, align 8
  br i1 %3531, label %block_.L_473e4d, label %block_.L_473e83

block_.L_473e4d:                                  ; preds = %block_473def.block_.L_473e4d_crit_edge, %block_473e1c
  %3533 = phi i64 [ %3497, %block_473e1c ], [ %.pre213, %block_473def.block_.L_473e4d_crit_edge ]
  %3534 = phi i64 [ %3532, %block_473e1c ], [ %3488, %block_473def.block_.L_473e4d_crit_edge ]
  store i64 %3489, i64* %RAX.i4266, align 8
  %3535 = add i64 %3489, 6480
  %3536 = add i64 %3534, 15
  store i64 %3536, i64* %3, align 8
  %3537 = inttoptr i64 %3535 to i64*
  %3538 = load i64, i64* %3537, align 8
  store i64 %3538, i64* %RAX.i4266, align 8
  %3539 = add i64 %3534, 18
  store i64 %3539, i64* %3, align 8
  %3540 = inttoptr i64 %3538 to i64*
  %3541 = load i64, i64* %3540, align 8
  store i64 %3541, i64* %RAX.i4266, align 8
  %3542 = add i64 %3533, -192
  %3543 = add i64 %3534, 25
  store i64 %3543, i64* %3, align 8
  %3544 = inttoptr i64 %3542 to i32*
  %3545 = load i32, i32* %3544, align 4
  %3546 = sext i32 %3545 to i64
  store i64 %3546, i64* %RCX.i4448, align 8
  %3547 = shl nsw i64 %3546, 3
  %3548 = add i64 %3547, %3541
  %3549 = add i64 %3534, 29
  store i64 %3549, i64* %3, align 8
  %3550 = inttoptr i64 %3548 to i64*
  %3551 = load i64, i64* %3550, align 8
  store i64 %3551, i64* %RAX.i4266, align 8
  %3552 = add i64 %3533, -188
  %3553 = add i64 %3534, 36
  store i64 %3553, i64* %3, align 8
  %3554 = inttoptr i64 %3552 to i32*
  %3555 = load i32, i32* %3554, align 4
  %3556 = sext i32 %3555 to i64
  store i64 %3556, i64* %RCX.i4448, align 8
  %3557 = shl nsw i64 %3556, 1
  %3558 = add i64 %3557, %3551
  %3559 = add i64 %3534, 40
  store i64 %3559, i64* %3, align 8
  %3560 = inttoptr i64 %3558 to i16*
  %3561 = load i16, i16* %3560, align 2
  %3562 = sext i16 %3561 to i64
  %3563 = ashr i64 %3562, 1
  %3564 = trunc i16 %3561 to i8
  %3565 = and i8 %3564, 1
  %3566 = trunc i64 %3563 to i32
  %3567 = and i64 %3563, 4294967295
  store i64 %3567, i64* %RDX.i4301, align 8
  store i8 %3565, i8* %14, align 1
  %3568 = and i32 %3566, 255
  %3569 = tail call i32 @llvm.ctpop.i32(i32 %3568)
  %3570 = trunc i32 %3569 to i8
  %3571 = and i8 %3570, 1
  %3572 = xor i8 %3571, 1
  store i8 %3572, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3573 = icmp eq i32 %3566, 0
  %3574 = zext i1 %3573 to i8
  store i8 %3574, i8* %30, align 1
  %3575 = lshr i64 %3563, 31
  %3576 = trunc i64 %3575 to i8
  %3577 = and i8 %3576, 1
  store i8 %3577, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3578 = add i64 %3533, -392
  %3579 = trunc i64 %3563 to i32
  %3580 = add i64 %3534, 48
  store i64 %3580, i64* %3, align 8
  %3581 = inttoptr i64 %3578 to i32*
  store i32 %3579, i32* %3581, align 4
  %3582 = load i64, i64* %3, align 8
  %3583 = add i64 %3582, 51
  store i64 %3583, i64* %3, align 8
  br label %block_.L_473eb1

block_.L_473e83:                                  ; preds = %block_473e1c
  store i64 %3489, i64* %RAX.i4266, align 8
  %3584 = add i64 %3532, 15
  store i64 %3584, i64* %3, align 8
  %3585 = load i64, i64* %3492, align 8
  store i64 %3585, i64* %RAX.i4266, align 8
  %3586 = add i64 %3532, 18
  store i64 %3586, i64* %3, align 8
  %3587 = inttoptr i64 %3585 to i64*
  %3588 = load i64, i64* %3587, align 8
  store i64 %3588, i64* %RAX.i4266, align 8
  %3589 = add i64 %3532, 25
  store i64 %3589, i64* %3, align 8
  %3590 = load i32, i32* %3500, align 4
  %3591 = sext i32 %3590 to i64
  store i64 %3591, i64* %RCX.i4448, align 8
  %3592 = shl nsw i64 %3591, 3
  %3593 = add i64 %3592, %3588
  %3594 = add i64 %3532, 29
  store i64 %3594, i64* %3, align 8
  %3595 = inttoptr i64 %3593 to i64*
  %3596 = load i64, i64* %3595, align 8
  store i64 %3596, i64* %RAX.i4266, align 8
  %3597 = add i64 %3532, 36
  store i64 %3597, i64* %3, align 8
  %3598 = load i32, i32* %3510, align 4
  %3599 = sext i32 %3598 to i64
  store i64 %3599, i64* %RCX.i4448, align 8
  %3600 = shl nsw i64 %3599, 1
  %3601 = add i64 %3600, %3596
  %3602 = add i64 %3532, 40
  store i64 %3602, i64* %3, align 8
  %3603 = inttoptr i64 %3601 to i16*
  %3604 = load i16, i16* %3603, align 2
  %3605 = sext i16 %3604 to i64
  %3606 = and i64 %3605, 4294967295
  store i64 %3606, i64* %RDX.i4301, align 8
  %3607 = add i64 %3497, -392
  %3608 = sext i16 %3604 to i32
  %3609 = add i64 %3532, 46
  store i64 %3609, i64* %3, align 8
  %3610 = inttoptr i64 %3607 to i32*
  store i32 %3608, i32* %3610, align 4
  %.pre214 = load i64, i64* %3, align 8
  br label %block_.L_473eb1

block_.L_473eb1:                                  ; preds = %block_.L_473e83, %block_.L_473e4d
  %3611 = phi i64 [ %.pre214, %block_.L_473e83 ], [ %3583, %block_.L_473e4d ]
  %3612 = load i64, i64* %RBP.i, align 8
  %3613 = add i64 %3612, -392
  %3614 = add i64 %3611, 6
  store i64 %3614, i64* %3, align 8
  %3615 = inttoptr i64 %3613 to i32*
  %3616 = load i32, i32* %3615, align 4
  %3617 = zext i32 %3616 to i64
  store i64 %3617, i64* %RAX.i4266, align 8
  %3618 = add i64 %3612, -396
  %3619 = add i64 %3611, 12
  store i64 %3619, i64* %3, align 8
  %3620 = inttoptr i64 %3618 to i32*
  store i32 %3616, i32* %3620, align 4
  %3621 = load i64, i64* %3, align 8
  %3622 = add i64 %3621, 15
  store i64 %3622, i64* %3, align 8
  br label %block_.L_473ecc

block_.L_473ec2:                                  ; preds = %block_.L_473dd5
  %3623 = add i64 %3421, -86
  %3624 = add i64 %3436, 4
  store i64 %3624, i64* %3, align 8
  %3625 = inttoptr i64 %3623 to i16*
  %3626 = load i16, i16* %3625, align 2
  %3627 = sext i16 %3626 to i64
  %3628 = and i64 %3627, 4294967295
  store i64 %3628, i64* %RAX.i4266, align 8
  %3629 = add i64 %3421, -396
  %3630 = sext i16 %3626 to i32
  %3631 = add i64 %3436, 10
  store i64 %3631, i64* %3, align 8
  %3632 = inttoptr i64 %3629 to i32*
  store i32 %3630, i32* %3632, align 4
  %.pre215 = load i64, i64* %3, align 8
  br label %block_.L_473ecc

block_.L_473ecc:                                  ; preds = %block_.L_473ec2, %block_.L_473eb1
  %3633 = phi i64 [ %.pre215, %block_.L_473ec2 ], [ %3622, %block_.L_473eb1 ]
  %3634 = load i64, i64* %RBP.i, align 8
  %3635 = add i64 %3634, -396
  %3636 = add i64 %3633, 6
  store i64 %3636, i64* %3, align 8
  %3637 = inttoptr i64 %3635 to i32*
  %3638 = load i32, i32* %3637, align 4
  %3639 = zext i32 %3638 to i64
  store i64 %3639, i64* %RAX.i4266, align 8
  %3640 = trunc i32 %3638 to i16
  store i16 %3640, i16* %CX.i2843, align 2
  %3641 = add i64 %3634, -88
  %3642 = add i64 %3633, 13
  store i64 %3642, i64* %3, align 8
  %3643 = inttoptr i64 %3641 to i16*
  store i16 %3640, i16* %3643, align 2
  %3644 = load i64, i64* %RBP.i, align 8
  %3645 = add i64 %3644, -136
  %3646 = load i64, i64* %3, align 8
  %3647 = add i64 %3646, 7
  store i64 %3647, i64* %3, align 8
  %3648 = inttoptr i64 %3645 to i32*
  %3649 = load i32, i32* %3648, align 4
  store i8 0, i8* %14, align 1
  %3650 = and i32 %3649, 255
  %3651 = tail call i32 @llvm.ctpop.i32(i32 %3650)
  %3652 = trunc i32 %3651 to i8
  %3653 = and i8 %3652, 1
  %3654 = xor i8 %3653, 1
  store i8 %3654, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3655 = icmp eq i32 %3649, 0
  %3656 = zext i1 %3655 to i8
  store i8 %3656, i8* %30, align 1
  %3657 = lshr i32 %3649, 31
  %3658 = trunc i32 %3657 to i8
  store i8 %3658, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v327 = select i1 %3655, i64 209, i64 13
  %3659 = add i64 %3646, %.v327
  store i64 %3659, i64* %3, align 8
  br i1 %3655, label %block_.L_473faa, label %block_473ee6

block_473ee6:                                     ; preds = %block_.L_473ecc
  %3660 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3660, i64* %RAX.i4266, align 8
  %3661 = add i64 %3660, 14168
  %3662 = add i64 %3659, 15
  store i64 %3662, i64* %3, align 8
  %3663 = inttoptr i64 %3661 to i64*
  %3664 = load i64, i64* %3663, align 8
  store i64 %3664, i64* %RAX.i4266, align 8
  %3665 = add i64 %3644, -132
  %3666 = add i64 %3659, 22
  store i64 %3666, i64* %3, align 8
  %3667 = inttoptr i64 %3665 to i32*
  %3668 = load i32, i32* %3667, align 4
  %3669 = sext i32 %3668 to i64
  %3670 = mul nsw i64 %3669, 632
  store i64 %3670, i64* %RCX.i4448, align 8
  %3671 = lshr i64 %3670, 63
  %3672 = add i64 %3670, %3664
  store i64 %3672, i64* %RAX.i4266, align 8
  %3673 = icmp ult i64 %3672, %3664
  %3674 = icmp ult i64 %3672, %3670
  %3675 = or i1 %3673, %3674
  %3676 = zext i1 %3675 to i8
  store i8 %3676, i8* %14, align 1
  %3677 = trunc i64 %3672 to i32
  %3678 = and i32 %3677, 255
  %3679 = tail call i32 @llvm.ctpop.i32(i32 %3678)
  %3680 = trunc i32 %3679 to i8
  %3681 = and i8 %3680, 1
  %3682 = xor i8 %3681, 1
  store i8 %3682, i8* %21, align 1
  %3683 = xor i64 %3670, %3664
  %3684 = xor i64 %3683, %3672
  %3685 = lshr i64 %3684, 4
  %3686 = trunc i64 %3685 to i8
  %3687 = and i8 %3686, 1
  store i8 %3687, i8* %27, align 1
  %3688 = icmp eq i64 %3672, 0
  %3689 = zext i1 %3688 to i8
  store i8 %3689, i8* %30, align 1
  %3690 = lshr i64 %3672, 63
  %3691 = trunc i64 %3690 to i8
  store i8 %3691, i8* %33, align 1
  %3692 = lshr i64 %3664, 63
  %3693 = xor i64 %3690, %3692
  %3694 = xor i64 %3690, %3671
  %3695 = add nuw nsw i64 %3693, %3694
  %3696 = icmp eq i64 %3695, 2
  %3697 = zext i1 %3696 to i8
  store i8 %3697, i8* %39, align 1
  %3698 = add i64 %3672, 532
  %3699 = add i64 %3659, 39
  store i64 %3699, i64* %3, align 8
  %3700 = inttoptr i64 %3698 to i32*
  %3701 = load i32, i32* %3700, align 4
  store i8 0, i8* %14, align 1
  %3702 = and i32 %3701, 255
  %3703 = tail call i32 @llvm.ctpop.i32(i32 %3702)
  %3704 = trunc i32 %3703 to i8
  %3705 = and i8 %3704, 1
  %3706 = xor i8 %3705, 1
  store i8 %3706, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3707 = icmp eq i32 %3701, 0
  %3708 = zext i1 %3707 to i8
  store i8 %3708, i8* %30, align 1
  %3709 = lshr i32 %3701, 31
  %3710 = trunc i32 %3709 to i8
  store i8 %3710, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v328 = select i1 %3707, i64 45, i64 89
  %3711 = add i64 %3659, %.v328
  store i64 %3711, i64* %3, align 8
  %3712 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %3707, label %block_473f13, label %block_473ee6.block_.L_473f3f_crit_edge

block_473ee6.block_.L_473f3f_crit_edge:           ; preds = %block_473ee6
  %.pre217 = load i64, i64* %RBP.i, align 8
  br label %block_.L_473f3f

block_473f13:                                     ; preds = %block_473ee6
  store i64 %3712, i64* %RAX.i4266, align 8
  %3713 = add i64 %3712, 6480
  %3714 = add i64 %3711, 15
  store i64 %3714, i64* %3, align 8
  %3715 = inttoptr i64 %3713 to i64*
  %3716 = load i64, i64* %3715, align 8
  store i64 %3716, i64* %RAX.i4266, align 8
  %3717 = add i64 %3716, 8
  %3718 = add i64 %3711, 19
  store i64 %3718, i64* %3, align 8
  %3719 = inttoptr i64 %3717 to i64*
  %3720 = load i64, i64* %3719, align 8
  store i64 %3720, i64* %RAX.i4266, align 8
  %3721 = load i64, i64* %RBP.i, align 8
  %3722 = add i64 %3721, -120
  %3723 = add i64 %3711, 23
  store i64 %3723, i64* %3, align 8
  %3724 = inttoptr i64 %3722 to i32*
  %3725 = load i32, i32* %3724, align 4
  %3726 = sext i32 %3725 to i64
  store i64 %3726, i64* %RCX.i4448, align 8
  %3727 = shl nsw i64 %3726, 3
  %3728 = add i64 %3727, %3720
  %3729 = add i64 %3711, 27
  store i64 %3729, i64* %3, align 8
  %3730 = inttoptr i64 %3728 to i64*
  %3731 = load i64, i64* %3730, align 8
  store i64 %3731, i64* %RAX.i4266, align 8
  %3732 = add i64 %3721, -116
  %3733 = add i64 %3711, 31
  store i64 %3733, i64* %3, align 8
  %3734 = inttoptr i64 %3732 to i32*
  %3735 = load i32, i32* %3734, align 4
  %3736 = sext i32 %3735 to i64
  store i64 %3736, i64* %RCX.i4448, align 8
  %3737 = shl nsw i64 %3736, 1
  %3738 = add i64 %3737, %3731
  %3739 = add i64 %3711, 35
  store i64 %3739, i64* %3, align 8
  %3740 = inttoptr i64 %3738 to i16*
  %3741 = load i16, i16* %3740, align 2
  %3742 = sext i16 %3741 to i64
  %3743 = and i64 %3742, 4294967295
  store i64 %3743, i64* %RDX.i4301, align 8
  %3744 = sext i16 %3741 to i32
  %3745 = add i64 %3711, 38
  store i8 0, i8* %14, align 1
  %3746 = and i32 %3744, 255
  %3747 = tail call i32 @llvm.ctpop.i32(i32 %3746)
  %3748 = trunc i32 %3747 to i8
  %3749 = and i8 %3748, 1
  %3750 = xor i8 %3749, 1
  store i8 %3750, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3751 = icmp eq i16 %3741, 0
  %3752 = zext i1 %3751 to i8
  store i8 %3752, i8* %30, align 1
  %3753 = lshr i32 %3744, 31
  %3754 = trunc i32 %3753 to i8
  store i8 %3754, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3755 = icmp ne i8 %3754, 0
  %.v155 = select i1 %3755, i64 6, i64 55
  %3756 = add i64 %3745, %.v155
  store i64 %3756, i64* %3, align 8
  br i1 %3755, label %block_.L_473f3f, label %block_.L_473f70

block_.L_473f3f:                                  ; preds = %block_473ee6.block_.L_473f3f_crit_edge, %block_473f13
  %3757 = phi i64 [ %3721, %block_473f13 ], [ %.pre217, %block_473ee6.block_.L_473f3f_crit_edge ]
  %3758 = phi i64 [ %3756, %block_473f13 ], [ %3711, %block_473ee6.block_.L_473f3f_crit_edge ]
  store i64 %3712, i64* %RAX.i4266, align 8
  %3759 = add i64 %3712, 6480
  %3760 = add i64 %3758, 15
  store i64 %3760, i64* %3, align 8
  %3761 = inttoptr i64 %3759 to i64*
  %3762 = load i64, i64* %3761, align 8
  store i64 %3762, i64* %RAX.i4266, align 8
  %3763 = add i64 %3762, 8
  %3764 = add i64 %3758, 19
  store i64 %3764, i64* %3, align 8
  %3765 = inttoptr i64 %3763 to i64*
  %3766 = load i64, i64* %3765, align 8
  store i64 %3766, i64* %RAX.i4266, align 8
  %3767 = add i64 %3757, -120
  %3768 = add i64 %3758, 23
  store i64 %3768, i64* %3, align 8
  %3769 = inttoptr i64 %3767 to i32*
  %3770 = load i32, i32* %3769, align 4
  %3771 = sext i32 %3770 to i64
  store i64 %3771, i64* %RCX.i4448, align 8
  %3772 = shl nsw i64 %3771, 3
  %3773 = add i64 %3772, %3766
  %3774 = add i64 %3758, 27
  store i64 %3774, i64* %3, align 8
  %3775 = inttoptr i64 %3773 to i64*
  %3776 = load i64, i64* %3775, align 8
  store i64 %3776, i64* %RAX.i4266, align 8
  %3777 = add i64 %3757, -116
  %3778 = add i64 %3758, 31
  store i64 %3778, i64* %3, align 8
  %3779 = inttoptr i64 %3777 to i32*
  %3780 = load i32, i32* %3779, align 4
  %3781 = sext i32 %3780 to i64
  store i64 %3781, i64* %RCX.i4448, align 8
  %3782 = shl nsw i64 %3781, 1
  %3783 = add i64 %3782, %3776
  %3784 = add i64 %3758, 35
  store i64 %3784, i64* %3, align 8
  %3785 = inttoptr i64 %3783 to i16*
  %3786 = load i16, i16* %3785, align 2
  %3787 = sext i16 %3786 to i64
  %3788 = ashr i64 %3787, 1
  %3789 = trunc i16 %3786 to i8
  %3790 = and i8 %3789, 1
  %3791 = trunc i64 %3788 to i32
  %3792 = and i64 %3788, 4294967295
  store i64 %3792, i64* %RDX.i4301, align 8
  store i8 %3790, i8* %14, align 1
  %3793 = and i32 %3791, 255
  %3794 = tail call i32 @llvm.ctpop.i32(i32 %3793)
  %3795 = trunc i32 %3794 to i8
  %3796 = and i8 %3795, 1
  %3797 = xor i8 %3796, 1
  store i8 %3797, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3798 = icmp eq i32 %3791, 0
  %3799 = zext i1 %3798 to i8
  store i8 %3799, i8* %30, align 1
  %3800 = lshr i64 %3788, 31
  %3801 = trunc i64 %3800 to i8
  %3802 = and i8 %3801, 1
  store i8 %3802, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3803 = add i64 %3757, -400
  %3804 = trunc i64 %3788 to i32
  %3805 = add i64 %3758, 43
  store i64 %3805, i64* %3, align 8
  %3806 = inttoptr i64 %3803 to i32*
  store i32 %3804, i32* %3806, align 4
  %3807 = load i64, i64* %3, align 8
  %3808 = add i64 %3807, 46
  store i64 %3808, i64* %3, align 8
  br label %block_.L_473f99

block_.L_473f70:                                  ; preds = %block_473f13
  store i64 %3712, i64* %RAX.i4266, align 8
  %3809 = add i64 %3756, 15
  store i64 %3809, i64* %3, align 8
  %3810 = load i64, i64* %3715, align 8
  store i64 %3810, i64* %RAX.i4266, align 8
  %3811 = add i64 %3810, 8
  %3812 = add i64 %3756, 19
  store i64 %3812, i64* %3, align 8
  %3813 = inttoptr i64 %3811 to i64*
  %3814 = load i64, i64* %3813, align 8
  store i64 %3814, i64* %RAX.i4266, align 8
  %3815 = add i64 %3756, 23
  store i64 %3815, i64* %3, align 8
  %3816 = load i32, i32* %3724, align 4
  %3817 = sext i32 %3816 to i64
  store i64 %3817, i64* %RCX.i4448, align 8
  %3818 = shl nsw i64 %3817, 3
  %3819 = add i64 %3818, %3814
  %3820 = add i64 %3756, 27
  store i64 %3820, i64* %3, align 8
  %3821 = inttoptr i64 %3819 to i64*
  %3822 = load i64, i64* %3821, align 8
  store i64 %3822, i64* %RAX.i4266, align 8
  %3823 = add i64 %3756, 31
  store i64 %3823, i64* %3, align 8
  %3824 = load i32, i32* %3734, align 4
  %3825 = sext i32 %3824 to i64
  store i64 %3825, i64* %RCX.i4448, align 8
  %3826 = shl nsw i64 %3825, 1
  %3827 = add i64 %3826, %3822
  %3828 = add i64 %3756, 35
  store i64 %3828, i64* %3, align 8
  %3829 = inttoptr i64 %3827 to i16*
  %3830 = load i16, i16* %3829, align 2
  %3831 = sext i16 %3830 to i64
  %3832 = and i64 %3831, 4294967295
  store i64 %3832, i64* %RDX.i4301, align 8
  %3833 = add i64 %3721, -400
  %3834 = sext i16 %3830 to i32
  %3835 = add i64 %3756, 41
  store i64 %3835, i64* %3, align 8
  %3836 = inttoptr i64 %3833 to i32*
  store i32 %3834, i32* %3836, align 4
  %.pre218 = load i64, i64* %3, align 8
  br label %block_.L_473f99

block_.L_473f99:                                  ; preds = %block_.L_473f70, %block_.L_473f3f
  %3837 = phi i64 [ %.pre218, %block_.L_473f70 ], [ %3808, %block_.L_473f3f ]
  %3838 = load i64, i64* %RBP.i, align 8
  %3839 = add i64 %3838, -400
  %3840 = add i64 %3837, 6
  store i64 %3840, i64* %3, align 8
  %3841 = inttoptr i64 %3839 to i32*
  %3842 = load i32, i32* %3841, align 4
  %3843 = zext i32 %3842 to i64
  store i64 %3843, i64* %RAX.i4266, align 8
  %3844 = add i64 %3838, -404
  %3845 = add i64 %3837, 12
  store i64 %3845, i64* %3, align 8
  %3846 = inttoptr i64 %3844 to i32*
  store i32 %3842, i32* %3846, align 4
  %3847 = load i64, i64* %3, align 8
  %3848 = add i64 %3847, 21
  br label %block_.L_473fba

block_.L_473faa:                                  ; preds = %block_.L_473ecc
  store i64 4294967295, i64* %RAX.i4266, align 8
  %3849 = add i64 %3644, -404
  %3850 = add i64 %3659, 11
  store i64 %3850, i64* %3, align 8
  %3851 = inttoptr i64 %3849 to i32*
  store i32 -1, i32* %3851, align 4
  %3852 = load i64, i64* %3, align 8
  %3853 = add i64 %3852, 5
  store i64 %3853, i64* %3, align 8
  br label %block_.L_473fba

block_.L_473fba:                                  ; preds = %block_.L_473faa, %block_.L_473f99
  %storemerge125 = phi i64 [ %3848, %block_.L_473f99 ], [ %3853, %block_.L_473faa ]
  %3854 = load i64, i64* %RBP.i, align 8
  %3855 = add i64 %3854, -404
  %3856 = add i64 %storemerge125, 6
  store i64 %3856, i64* %3, align 8
  %3857 = inttoptr i64 %3855 to i32*
  %3858 = load i32, i32* %3857, align 4
  %3859 = zext i32 %3858 to i64
  store i64 %3859, i64* %RAX.i4266, align 8
  %3860 = trunc i32 %3858 to i16
  store i16 %3860, i16* %CX.i2843, align 2
  %3861 = add i64 %3854, -90
  %3862 = add i64 %storemerge125, 13
  store i64 %3862, i64* %3, align 8
  %3863 = inttoptr i64 %3861 to i16*
  store i16 %3860, i16* %3863, align 2
  %3864 = load i64, i64* %RBP.i, align 8
  %3865 = add i64 %3864, -160
  %3866 = load i64, i64* %3, align 8
  %3867 = add i64 %3866, 7
  store i64 %3867, i64* %3, align 8
  %3868 = inttoptr i64 %3865 to i32*
  %3869 = load i32, i32* %3868, align 4
  store i8 0, i8* %14, align 1
  %3870 = and i32 %3869, 255
  %3871 = tail call i32 @llvm.ctpop.i32(i32 %3870)
  %3872 = trunc i32 %3871 to i8
  %3873 = and i8 %3872, 1
  %3874 = xor i8 %3873, 1
  store i8 %3874, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3875 = icmp eq i32 %3869, 0
  %3876 = zext i1 %3875 to i8
  store i8 %3876, i8* %30, align 1
  %3877 = lshr i32 %3869, 31
  %3878 = trunc i32 %3877 to i8
  store i8 %3878, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v329 = select i1 %3875, i64 227, i64 13
  %3879 = add i64 %3866, %.v329
  store i64 %3879, i64* %3, align 8
  br i1 %3875, label %block_.L_4740aa, label %block_473fd4

block_473fd4:                                     ; preds = %block_.L_473fba
  %3880 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3880, i64* %RAX.i4266, align 8
  %3881 = add i64 %3880, 14168
  %3882 = add i64 %3879, 15
  store i64 %3882, i64* %3, align 8
  %3883 = inttoptr i64 %3881 to i64*
  %3884 = load i64, i64* %3883, align 8
  store i64 %3884, i64* %RAX.i4266, align 8
  %3885 = add i64 %3864, -156
  %3886 = add i64 %3879, 22
  store i64 %3886, i64* %3, align 8
  %3887 = inttoptr i64 %3885 to i32*
  %3888 = load i32, i32* %3887, align 4
  %3889 = sext i32 %3888 to i64
  %3890 = mul nsw i64 %3889, 632
  store i64 %3890, i64* %RCX.i4448, align 8
  %3891 = lshr i64 %3890, 63
  %3892 = add i64 %3890, %3884
  store i64 %3892, i64* %RAX.i4266, align 8
  %3893 = icmp ult i64 %3892, %3884
  %3894 = icmp ult i64 %3892, %3890
  %3895 = or i1 %3893, %3894
  %3896 = zext i1 %3895 to i8
  store i8 %3896, i8* %14, align 1
  %3897 = trunc i64 %3892 to i32
  %3898 = and i32 %3897, 255
  %3899 = tail call i32 @llvm.ctpop.i32(i32 %3898)
  %3900 = trunc i32 %3899 to i8
  %3901 = and i8 %3900, 1
  %3902 = xor i8 %3901, 1
  store i8 %3902, i8* %21, align 1
  %3903 = xor i64 %3890, %3884
  %3904 = xor i64 %3903, %3892
  %3905 = lshr i64 %3904, 4
  %3906 = trunc i64 %3905 to i8
  %3907 = and i8 %3906, 1
  store i8 %3907, i8* %27, align 1
  %3908 = icmp eq i64 %3892, 0
  %3909 = zext i1 %3908 to i8
  store i8 %3909, i8* %30, align 1
  %3910 = lshr i64 %3892, 63
  %3911 = trunc i64 %3910 to i8
  store i8 %3911, i8* %33, align 1
  %3912 = lshr i64 %3884, 63
  %3913 = xor i64 %3910, %3912
  %3914 = xor i64 %3910, %3891
  %3915 = add nuw nsw i64 %3913, %3914
  %3916 = icmp eq i64 %3915, 2
  %3917 = zext i1 %3916 to i8
  store i8 %3917, i8* %39, align 1
  %3918 = add i64 %3892, 532
  %3919 = add i64 %3879, 39
  store i64 %3919, i64* %3, align 8
  %3920 = inttoptr i64 %3918 to i32*
  %3921 = load i32, i32* %3920, align 4
  store i8 0, i8* %14, align 1
  %3922 = and i32 %3921, 255
  %3923 = tail call i32 @llvm.ctpop.i32(i32 %3922)
  %3924 = trunc i32 %3923 to i8
  %3925 = and i8 %3924, 1
  %3926 = xor i8 %3925, 1
  store i8 %3926, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3927 = icmp eq i32 %3921, 0
  %3928 = zext i1 %3927 to i8
  store i8 %3928, i8* %30, align 1
  %3929 = lshr i32 %3921, 31
  %3930 = trunc i32 %3929 to i8
  store i8 %3930, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v330 = select i1 %3927, i64 45, i64 95
  %3931 = add i64 %3879, %.v330
  store i64 %3931, i64* %3, align 8
  %3932 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %3927, label %block_474001, label %block_473fd4.block_.L_474033_crit_edge

block_473fd4.block_.L_474033_crit_edge:           ; preds = %block_473fd4
  %.pre220 = load i64, i64* %RBP.i, align 8
  br label %block_.L_474033

block_474001:                                     ; preds = %block_473fd4
  store i64 %3932, i64* %RAX.i4266, align 8
  %3933 = add i64 %3932, 6480
  %3934 = add i64 %3931, 15
  store i64 %3934, i64* %3, align 8
  %3935 = inttoptr i64 %3933 to i64*
  %3936 = load i64, i64* %3935, align 8
  store i64 %3936, i64* %RAX.i4266, align 8
  %3937 = add i64 %3936, 8
  %3938 = add i64 %3931, 19
  store i64 %3938, i64* %3, align 8
  %3939 = inttoptr i64 %3937 to i64*
  %3940 = load i64, i64* %3939, align 8
  store i64 %3940, i64* %RAX.i4266, align 8
  %3941 = load i64, i64* %RBP.i, align 8
  %3942 = add i64 %3941, -144
  %3943 = add i64 %3931, 26
  store i64 %3943, i64* %3, align 8
  %3944 = inttoptr i64 %3942 to i32*
  %3945 = load i32, i32* %3944, align 4
  %3946 = sext i32 %3945 to i64
  store i64 %3946, i64* %RCX.i4448, align 8
  %3947 = shl nsw i64 %3946, 3
  %3948 = add i64 %3947, %3940
  %3949 = add i64 %3931, 30
  store i64 %3949, i64* %3, align 8
  %3950 = inttoptr i64 %3948 to i64*
  %3951 = load i64, i64* %3950, align 8
  store i64 %3951, i64* %RAX.i4266, align 8
  %3952 = add i64 %3941, -140
  %3953 = add i64 %3931, 37
  store i64 %3953, i64* %3, align 8
  %3954 = inttoptr i64 %3952 to i32*
  %3955 = load i32, i32* %3954, align 4
  %3956 = sext i32 %3955 to i64
  store i64 %3956, i64* %RCX.i4448, align 8
  %3957 = shl nsw i64 %3956, 1
  %3958 = add i64 %3957, %3951
  %3959 = add i64 %3931, 41
  store i64 %3959, i64* %3, align 8
  %3960 = inttoptr i64 %3958 to i16*
  %3961 = load i16, i16* %3960, align 2
  %3962 = sext i16 %3961 to i64
  %3963 = and i64 %3962, 4294967295
  store i64 %3963, i64* %RDX.i4301, align 8
  %3964 = sext i16 %3961 to i32
  %3965 = add i64 %3931, 44
  store i8 0, i8* %14, align 1
  %3966 = and i32 %3964, 255
  %3967 = tail call i32 @llvm.ctpop.i32(i32 %3966)
  %3968 = trunc i32 %3967 to i8
  %3969 = and i8 %3968, 1
  %3970 = xor i8 %3969, 1
  store i8 %3970, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3971 = icmp eq i16 %3961, 0
  %3972 = zext i1 %3971 to i8
  store i8 %3972, i8* %30, align 1
  %3973 = lshr i32 %3964, 31
  %3974 = trunc i32 %3973 to i8
  store i8 %3974, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3975 = icmp ne i8 %3974, 0
  %.v156 = select i1 %3975, i64 6, i64 61
  %3976 = add i64 %3965, %.v156
  store i64 %3976, i64* %3, align 8
  br i1 %3975, label %block_.L_474033, label %block_.L_47406a

block_.L_474033:                                  ; preds = %block_473fd4.block_.L_474033_crit_edge, %block_474001
  %3977 = phi i64 [ %3941, %block_474001 ], [ %.pre220, %block_473fd4.block_.L_474033_crit_edge ]
  %3978 = phi i64 [ %3976, %block_474001 ], [ %3931, %block_473fd4.block_.L_474033_crit_edge ]
  store i64 %3932, i64* %RAX.i4266, align 8
  %3979 = add i64 %3932, 6480
  %3980 = add i64 %3978, 15
  store i64 %3980, i64* %3, align 8
  %3981 = inttoptr i64 %3979 to i64*
  %3982 = load i64, i64* %3981, align 8
  store i64 %3982, i64* %RAX.i4266, align 8
  %3983 = add i64 %3982, 8
  %3984 = add i64 %3978, 19
  store i64 %3984, i64* %3, align 8
  %3985 = inttoptr i64 %3983 to i64*
  %3986 = load i64, i64* %3985, align 8
  store i64 %3986, i64* %RAX.i4266, align 8
  %3987 = add i64 %3977, -144
  %3988 = add i64 %3978, 26
  store i64 %3988, i64* %3, align 8
  %3989 = inttoptr i64 %3987 to i32*
  %3990 = load i32, i32* %3989, align 4
  %3991 = sext i32 %3990 to i64
  store i64 %3991, i64* %RCX.i4448, align 8
  %3992 = shl nsw i64 %3991, 3
  %3993 = add i64 %3992, %3986
  %3994 = add i64 %3978, 30
  store i64 %3994, i64* %3, align 8
  %3995 = inttoptr i64 %3993 to i64*
  %3996 = load i64, i64* %3995, align 8
  store i64 %3996, i64* %RAX.i4266, align 8
  %3997 = add i64 %3977, -140
  %3998 = add i64 %3978, 37
  store i64 %3998, i64* %3, align 8
  %3999 = inttoptr i64 %3997 to i32*
  %4000 = load i32, i32* %3999, align 4
  %4001 = sext i32 %4000 to i64
  store i64 %4001, i64* %RCX.i4448, align 8
  %4002 = shl nsw i64 %4001, 1
  %4003 = add i64 %4002, %3996
  %4004 = add i64 %3978, 41
  store i64 %4004, i64* %3, align 8
  %4005 = inttoptr i64 %4003 to i16*
  %4006 = load i16, i16* %4005, align 2
  %4007 = sext i16 %4006 to i64
  %4008 = ashr i64 %4007, 1
  %4009 = trunc i16 %4006 to i8
  %4010 = and i8 %4009, 1
  %4011 = trunc i64 %4008 to i32
  %4012 = and i64 %4008, 4294967295
  store i64 %4012, i64* %RDX.i4301, align 8
  store i8 %4010, i8* %14, align 1
  %4013 = and i32 %4011, 255
  %4014 = tail call i32 @llvm.ctpop.i32(i32 %4013)
  %4015 = trunc i32 %4014 to i8
  %4016 = and i8 %4015, 1
  %4017 = xor i8 %4016, 1
  store i8 %4017, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4018 = icmp eq i32 %4011, 0
  %4019 = zext i1 %4018 to i8
  store i8 %4019, i8* %30, align 1
  %4020 = lshr i64 %4008, 31
  %4021 = trunc i64 %4020 to i8
  %4022 = and i8 %4021, 1
  store i8 %4022, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4023 = add i64 %3977, -408
  %4024 = trunc i64 %4008 to i32
  %4025 = add i64 %3978, 49
  store i64 %4025, i64* %3, align 8
  %4026 = inttoptr i64 %4023 to i32*
  store i32 %4024, i32* %4026, align 4
  %4027 = load i64, i64* %3, align 8
  %4028 = add i64 %4027, 52
  store i64 %4028, i64* %3, align 8
  br label %block_.L_474099

block_.L_47406a:                                  ; preds = %block_474001
  store i64 %3932, i64* %RAX.i4266, align 8
  %4029 = add i64 %3976, 15
  store i64 %4029, i64* %3, align 8
  %4030 = load i64, i64* %3935, align 8
  store i64 %4030, i64* %RAX.i4266, align 8
  %4031 = add i64 %4030, 8
  %4032 = add i64 %3976, 19
  store i64 %4032, i64* %3, align 8
  %4033 = inttoptr i64 %4031 to i64*
  %4034 = load i64, i64* %4033, align 8
  store i64 %4034, i64* %RAX.i4266, align 8
  %4035 = add i64 %3976, 26
  store i64 %4035, i64* %3, align 8
  %4036 = load i32, i32* %3944, align 4
  %4037 = sext i32 %4036 to i64
  store i64 %4037, i64* %RCX.i4448, align 8
  %4038 = shl nsw i64 %4037, 3
  %4039 = add i64 %4038, %4034
  %4040 = add i64 %3976, 30
  store i64 %4040, i64* %3, align 8
  %4041 = inttoptr i64 %4039 to i64*
  %4042 = load i64, i64* %4041, align 8
  store i64 %4042, i64* %RAX.i4266, align 8
  %4043 = add i64 %3976, 37
  store i64 %4043, i64* %3, align 8
  %4044 = load i32, i32* %3954, align 4
  %4045 = sext i32 %4044 to i64
  store i64 %4045, i64* %RCX.i4448, align 8
  %4046 = shl nsw i64 %4045, 1
  %4047 = add i64 %4046, %4042
  %4048 = add i64 %3976, 41
  store i64 %4048, i64* %3, align 8
  %4049 = inttoptr i64 %4047 to i16*
  %4050 = load i16, i16* %4049, align 2
  %4051 = sext i16 %4050 to i64
  %4052 = and i64 %4051, 4294967295
  store i64 %4052, i64* %RDX.i4301, align 8
  %4053 = add i64 %3941, -408
  %4054 = sext i16 %4050 to i32
  %4055 = add i64 %3976, 47
  store i64 %4055, i64* %3, align 8
  %4056 = inttoptr i64 %4053 to i32*
  store i32 %4054, i32* %4056, align 4
  %.pre221 = load i64, i64* %3, align 8
  br label %block_.L_474099

block_.L_474099:                                  ; preds = %block_.L_47406a, %block_.L_474033
  %4057 = phi i64 [ %.pre221, %block_.L_47406a ], [ %4028, %block_.L_474033 ]
  %4058 = load i64, i64* %RBP.i, align 8
  %4059 = add i64 %4058, -408
  %4060 = add i64 %4057, 6
  store i64 %4060, i64* %3, align 8
  %4061 = inttoptr i64 %4059 to i32*
  %4062 = load i32, i32* %4061, align 4
  %4063 = zext i32 %4062 to i64
  store i64 %4063, i64* %RAX.i4266, align 8
  %4064 = add i64 %4058, -412
  %4065 = add i64 %4057, 12
  store i64 %4065, i64* %3, align 8
  %4066 = inttoptr i64 %4064 to i32*
  store i32 %4062, i32* %4066, align 4
  %4067 = load i64, i64* %3, align 8
  %4068 = add i64 %4067, 21
  br label %block_.L_4740ba

block_.L_4740aa:                                  ; preds = %block_.L_473fba
  store i64 4294967295, i64* %RAX.i4266, align 8
  %4069 = add i64 %3864, -412
  %4070 = add i64 %3879, 11
  store i64 %4070, i64* %3, align 8
  %4071 = inttoptr i64 %4069 to i32*
  store i32 -1, i32* %4071, align 4
  %4072 = load i64, i64* %3, align 8
  %4073 = add i64 %4072, 5
  store i64 %4073, i64* %3, align 8
  br label %block_.L_4740ba

block_.L_4740ba:                                  ; preds = %block_.L_4740aa, %block_.L_474099
  %storemerge126 = phi i64 [ %4068, %block_.L_474099 ], [ %4073, %block_.L_4740aa ]
  %4074 = load i64, i64* %RBP.i, align 8
  %4075 = add i64 %4074, -412
  %4076 = add i64 %storemerge126, 6
  store i64 %4076, i64* %3, align 8
  %4077 = inttoptr i64 %4075 to i32*
  %4078 = load i32, i32* %4077, align 4
  %4079 = zext i32 %4078 to i64
  store i64 %4079, i64* %RAX.i4266, align 8
  %4080 = trunc i32 %4078 to i16
  store i16 %4080, i16* %CX.i2843, align 2
  %4081 = add i64 %4074, -92
  %4082 = add i64 %storemerge126, 13
  store i64 %4082, i64* %3, align 8
  %4083 = inttoptr i64 %4081 to i16*
  store i16 %4080, i16* %4083, align 2
  %4084 = load i64, i64* %RBP.i, align 8
  %4085 = add i64 %4084, -184
  %4086 = load i64, i64* %3, align 8
  %4087 = add i64 %4086, 7
  store i64 %4087, i64* %3, align 8
  %4088 = inttoptr i64 %4085 to i32*
  %4089 = load i32, i32* %4088, align 4
  store i8 0, i8* %14, align 1
  %4090 = and i32 %4089, 255
  %4091 = tail call i32 @llvm.ctpop.i32(i32 %4090)
  %4092 = trunc i32 %4091 to i8
  %4093 = and i8 %4092, 1
  %4094 = xor i8 %4093, 1
  store i8 %4094, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4095 = icmp eq i32 %4089, 0
  %4096 = zext i1 %4095 to i8
  store i8 %4096, i8* %30, align 1
  %4097 = lshr i32 %4089, 31
  %4098 = trunc i32 %4097 to i8
  store i8 %4098, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v331 = select i1 %4095, i64 227, i64 13
  %4099 = add i64 %4086, %.v331
  store i64 %4099, i64* %3, align 8
  br i1 %4095, label %block_.L_4741aa, label %block_4740d4

block_4740d4:                                     ; preds = %block_.L_4740ba
  %4100 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4100, i64* %RAX.i4266, align 8
  %4101 = add i64 %4100, 14168
  %4102 = add i64 %4099, 15
  store i64 %4102, i64* %3, align 8
  %4103 = inttoptr i64 %4101 to i64*
  %4104 = load i64, i64* %4103, align 8
  store i64 %4104, i64* %RAX.i4266, align 8
  %4105 = add i64 %4084, -180
  %4106 = add i64 %4099, 22
  store i64 %4106, i64* %3, align 8
  %4107 = inttoptr i64 %4105 to i32*
  %4108 = load i32, i32* %4107, align 4
  %4109 = sext i32 %4108 to i64
  %4110 = mul nsw i64 %4109, 632
  store i64 %4110, i64* %RCX.i4448, align 8
  %4111 = lshr i64 %4110, 63
  %4112 = add i64 %4110, %4104
  store i64 %4112, i64* %RAX.i4266, align 8
  %4113 = icmp ult i64 %4112, %4104
  %4114 = icmp ult i64 %4112, %4110
  %4115 = or i1 %4113, %4114
  %4116 = zext i1 %4115 to i8
  store i8 %4116, i8* %14, align 1
  %4117 = trunc i64 %4112 to i32
  %4118 = and i32 %4117, 255
  %4119 = tail call i32 @llvm.ctpop.i32(i32 %4118)
  %4120 = trunc i32 %4119 to i8
  %4121 = and i8 %4120, 1
  %4122 = xor i8 %4121, 1
  store i8 %4122, i8* %21, align 1
  %4123 = xor i64 %4110, %4104
  %4124 = xor i64 %4123, %4112
  %4125 = lshr i64 %4124, 4
  %4126 = trunc i64 %4125 to i8
  %4127 = and i8 %4126, 1
  store i8 %4127, i8* %27, align 1
  %4128 = icmp eq i64 %4112, 0
  %4129 = zext i1 %4128 to i8
  store i8 %4129, i8* %30, align 1
  %4130 = lshr i64 %4112, 63
  %4131 = trunc i64 %4130 to i8
  store i8 %4131, i8* %33, align 1
  %4132 = lshr i64 %4104, 63
  %4133 = xor i64 %4130, %4132
  %4134 = xor i64 %4130, %4111
  %4135 = add nuw nsw i64 %4133, %4134
  %4136 = icmp eq i64 %4135, 2
  %4137 = zext i1 %4136 to i8
  store i8 %4137, i8* %39, align 1
  %4138 = add i64 %4112, 532
  %4139 = add i64 %4099, 39
  store i64 %4139, i64* %3, align 8
  %4140 = inttoptr i64 %4138 to i32*
  %4141 = load i32, i32* %4140, align 4
  store i8 0, i8* %14, align 1
  %4142 = and i32 %4141, 255
  %4143 = tail call i32 @llvm.ctpop.i32(i32 %4142)
  %4144 = trunc i32 %4143 to i8
  %4145 = and i8 %4144, 1
  %4146 = xor i8 %4145, 1
  store i8 %4146, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4147 = icmp eq i32 %4141, 0
  %4148 = zext i1 %4147 to i8
  store i8 %4148, i8* %30, align 1
  %4149 = lshr i32 %4141, 31
  %4150 = trunc i32 %4149 to i8
  store i8 %4150, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v332 = select i1 %4147, i64 45, i64 95
  %4151 = add i64 %4099, %.v332
  store i64 %4151, i64* %3, align 8
  %4152 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %4147, label %block_474101, label %block_4740d4.block_.L_474133_crit_edge

block_4740d4.block_.L_474133_crit_edge:           ; preds = %block_4740d4
  %.pre223 = load i64, i64* %RBP.i, align 8
  br label %block_.L_474133

block_474101:                                     ; preds = %block_4740d4
  store i64 %4152, i64* %RAX.i4266, align 8
  %4153 = add i64 %4152, 6480
  %4154 = add i64 %4151, 15
  store i64 %4154, i64* %3, align 8
  %4155 = inttoptr i64 %4153 to i64*
  %4156 = load i64, i64* %4155, align 8
  store i64 %4156, i64* %RAX.i4266, align 8
  %4157 = add i64 %4156, 8
  %4158 = add i64 %4151, 19
  store i64 %4158, i64* %3, align 8
  %4159 = inttoptr i64 %4157 to i64*
  %4160 = load i64, i64* %4159, align 8
  store i64 %4160, i64* %RAX.i4266, align 8
  %4161 = load i64, i64* %RBP.i, align 8
  %4162 = add i64 %4161, -168
  %4163 = add i64 %4151, 26
  store i64 %4163, i64* %3, align 8
  %4164 = inttoptr i64 %4162 to i32*
  %4165 = load i32, i32* %4164, align 4
  %4166 = sext i32 %4165 to i64
  store i64 %4166, i64* %RCX.i4448, align 8
  %4167 = shl nsw i64 %4166, 3
  %4168 = add i64 %4167, %4160
  %4169 = add i64 %4151, 30
  store i64 %4169, i64* %3, align 8
  %4170 = inttoptr i64 %4168 to i64*
  %4171 = load i64, i64* %4170, align 8
  store i64 %4171, i64* %RAX.i4266, align 8
  %4172 = add i64 %4161, -164
  %4173 = add i64 %4151, 37
  store i64 %4173, i64* %3, align 8
  %4174 = inttoptr i64 %4172 to i32*
  %4175 = load i32, i32* %4174, align 4
  %4176 = sext i32 %4175 to i64
  store i64 %4176, i64* %RCX.i4448, align 8
  %4177 = shl nsw i64 %4176, 1
  %4178 = add i64 %4177, %4171
  %4179 = add i64 %4151, 41
  store i64 %4179, i64* %3, align 8
  %4180 = inttoptr i64 %4178 to i16*
  %4181 = load i16, i16* %4180, align 2
  %4182 = sext i16 %4181 to i64
  %4183 = and i64 %4182, 4294967295
  store i64 %4183, i64* %RDX.i4301, align 8
  %4184 = sext i16 %4181 to i32
  %4185 = add i64 %4151, 44
  store i8 0, i8* %14, align 1
  %4186 = and i32 %4184, 255
  %4187 = tail call i32 @llvm.ctpop.i32(i32 %4186)
  %4188 = trunc i32 %4187 to i8
  %4189 = and i8 %4188, 1
  %4190 = xor i8 %4189, 1
  store i8 %4190, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4191 = icmp eq i16 %4181, 0
  %4192 = zext i1 %4191 to i8
  store i8 %4192, i8* %30, align 1
  %4193 = lshr i32 %4184, 31
  %4194 = trunc i32 %4193 to i8
  store i8 %4194, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4195 = icmp ne i8 %4194, 0
  %.v157 = select i1 %4195, i64 6, i64 61
  %4196 = add i64 %4185, %.v157
  store i64 %4196, i64* %3, align 8
  br i1 %4195, label %block_.L_474133, label %block_.L_47416a

block_.L_474133:                                  ; preds = %block_4740d4.block_.L_474133_crit_edge, %block_474101
  %4197 = phi i64 [ %4161, %block_474101 ], [ %.pre223, %block_4740d4.block_.L_474133_crit_edge ]
  %4198 = phi i64 [ %4196, %block_474101 ], [ %4151, %block_4740d4.block_.L_474133_crit_edge ]
  store i64 %4152, i64* %RAX.i4266, align 8
  %4199 = add i64 %4152, 6480
  %4200 = add i64 %4198, 15
  store i64 %4200, i64* %3, align 8
  %4201 = inttoptr i64 %4199 to i64*
  %4202 = load i64, i64* %4201, align 8
  store i64 %4202, i64* %RAX.i4266, align 8
  %4203 = add i64 %4202, 8
  %4204 = add i64 %4198, 19
  store i64 %4204, i64* %3, align 8
  %4205 = inttoptr i64 %4203 to i64*
  %4206 = load i64, i64* %4205, align 8
  store i64 %4206, i64* %RAX.i4266, align 8
  %4207 = add i64 %4197, -168
  %4208 = add i64 %4198, 26
  store i64 %4208, i64* %3, align 8
  %4209 = inttoptr i64 %4207 to i32*
  %4210 = load i32, i32* %4209, align 4
  %4211 = sext i32 %4210 to i64
  store i64 %4211, i64* %RCX.i4448, align 8
  %4212 = shl nsw i64 %4211, 3
  %4213 = add i64 %4212, %4206
  %4214 = add i64 %4198, 30
  store i64 %4214, i64* %3, align 8
  %4215 = inttoptr i64 %4213 to i64*
  %4216 = load i64, i64* %4215, align 8
  store i64 %4216, i64* %RAX.i4266, align 8
  %4217 = add i64 %4197, -164
  %4218 = add i64 %4198, 37
  store i64 %4218, i64* %3, align 8
  %4219 = inttoptr i64 %4217 to i32*
  %4220 = load i32, i32* %4219, align 4
  %4221 = sext i32 %4220 to i64
  store i64 %4221, i64* %RCX.i4448, align 8
  %4222 = shl nsw i64 %4221, 1
  %4223 = add i64 %4222, %4216
  %4224 = add i64 %4198, 41
  store i64 %4224, i64* %3, align 8
  %4225 = inttoptr i64 %4223 to i16*
  %4226 = load i16, i16* %4225, align 2
  %4227 = sext i16 %4226 to i64
  %4228 = ashr i64 %4227, 1
  %4229 = trunc i16 %4226 to i8
  %4230 = and i8 %4229, 1
  %4231 = trunc i64 %4228 to i32
  %4232 = and i64 %4228, 4294967295
  store i64 %4232, i64* %RDX.i4301, align 8
  store i8 %4230, i8* %14, align 1
  %4233 = and i32 %4231, 255
  %4234 = tail call i32 @llvm.ctpop.i32(i32 %4233)
  %4235 = trunc i32 %4234 to i8
  %4236 = and i8 %4235, 1
  %4237 = xor i8 %4236, 1
  store i8 %4237, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4238 = icmp eq i32 %4231, 0
  %4239 = zext i1 %4238 to i8
  store i8 %4239, i8* %30, align 1
  %4240 = lshr i64 %4228, 31
  %4241 = trunc i64 %4240 to i8
  %4242 = and i8 %4241, 1
  store i8 %4242, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4243 = add i64 %4197, -416
  %4244 = trunc i64 %4228 to i32
  %4245 = add i64 %4198, 49
  store i64 %4245, i64* %3, align 8
  %4246 = inttoptr i64 %4243 to i32*
  store i32 %4244, i32* %4246, align 4
  %4247 = load i64, i64* %3, align 8
  %4248 = add i64 %4247, 52
  store i64 %4248, i64* %3, align 8
  br label %block_.L_474199

block_.L_47416a:                                  ; preds = %block_474101
  store i64 %4152, i64* %RAX.i4266, align 8
  %4249 = add i64 %4196, 15
  store i64 %4249, i64* %3, align 8
  %4250 = load i64, i64* %4155, align 8
  store i64 %4250, i64* %RAX.i4266, align 8
  %4251 = add i64 %4250, 8
  %4252 = add i64 %4196, 19
  store i64 %4252, i64* %3, align 8
  %4253 = inttoptr i64 %4251 to i64*
  %4254 = load i64, i64* %4253, align 8
  store i64 %4254, i64* %RAX.i4266, align 8
  %4255 = add i64 %4196, 26
  store i64 %4255, i64* %3, align 8
  %4256 = load i32, i32* %4164, align 4
  %4257 = sext i32 %4256 to i64
  store i64 %4257, i64* %RCX.i4448, align 8
  %4258 = shl nsw i64 %4257, 3
  %4259 = add i64 %4258, %4254
  %4260 = add i64 %4196, 30
  store i64 %4260, i64* %3, align 8
  %4261 = inttoptr i64 %4259 to i64*
  %4262 = load i64, i64* %4261, align 8
  store i64 %4262, i64* %RAX.i4266, align 8
  %4263 = add i64 %4196, 37
  store i64 %4263, i64* %3, align 8
  %4264 = load i32, i32* %4174, align 4
  %4265 = sext i32 %4264 to i64
  store i64 %4265, i64* %RCX.i4448, align 8
  %4266 = shl nsw i64 %4265, 1
  %4267 = add i64 %4266, %4262
  %4268 = add i64 %4196, 41
  store i64 %4268, i64* %3, align 8
  %4269 = inttoptr i64 %4267 to i16*
  %4270 = load i16, i16* %4269, align 2
  %4271 = sext i16 %4270 to i64
  %4272 = and i64 %4271, 4294967295
  store i64 %4272, i64* %RDX.i4301, align 8
  %4273 = add i64 %4161, -416
  %4274 = sext i16 %4270 to i32
  %4275 = add i64 %4196, 47
  store i64 %4275, i64* %3, align 8
  %4276 = inttoptr i64 %4273 to i32*
  store i32 %4274, i32* %4276, align 4
  %.pre224 = load i64, i64* %3, align 8
  br label %block_.L_474199

block_.L_474199:                                  ; preds = %block_.L_47416a, %block_.L_474133
  %4277 = phi i64 [ %.pre224, %block_.L_47416a ], [ %4248, %block_.L_474133 ]
  %4278 = load i64, i64* %RBP.i, align 8
  %4279 = add i64 %4278, -416
  %4280 = add i64 %4277, 6
  store i64 %4280, i64* %3, align 8
  %4281 = inttoptr i64 %4279 to i32*
  %4282 = load i32, i32* %4281, align 4
  %4283 = zext i32 %4282 to i64
  store i64 %4283, i64* %RAX.i4266, align 8
  %4284 = add i64 %4278, -420
  %4285 = add i64 %4277, 12
  store i64 %4285, i64* %3, align 8
  %4286 = inttoptr i64 %4284 to i32*
  store i32 %4282, i32* %4286, align 4
  %4287 = load i64, i64* %3, align 8
  %4288 = add i64 %4287, 21
  br label %block_.L_4741ba

block_.L_4741aa:                                  ; preds = %block_.L_4740ba
  store i64 4294967295, i64* %RAX.i4266, align 8
  %4289 = add i64 %4084, -420
  %4290 = add i64 %4099, 11
  store i64 %4290, i64* %3, align 8
  %4291 = inttoptr i64 %4289 to i32*
  store i32 -1, i32* %4291, align 4
  %4292 = load i64, i64* %3, align 8
  %4293 = add i64 %4292, 5
  store i64 %4293, i64* %3, align 8
  br label %block_.L_4741ba

block_.L_4741ba:                                  ; preds = %block_.L_4741aa, %block_.L_474199
  %storemerge127 = phi i64 [ %4288, %block_.L_474199 ], [ %4293, %block_.L_4741aa ]
  %4294 = load i64, i64* %RBP.i, align 8
  %4295 = add i64 %4294, -420
  %4296 = add i64 %storemerge127, 6
  store i64 %4296, i64* %3, align 8
  %4297 = inttoptr i64 %4295 to i32*
  %4298 = load i32, i32* %4297, align 4
  %4299 = zext i32 %4298 to i64
  store i64 %4299, i64* %RAX.i4266, align 8
  %4300 = trunc i32 %4298 to i16
  store i16 %4300, i16* %CX.i2843, align 2
  %4301 = add i64 %4294, -94
  %4302 = add i64 %storemerge127, 13
  store i64 %4302, i64* %3, align 8
  %4303 = inttoptr i64 %4301 to i16*
  store i16 %4300, i16* %4303, align 2
  %4304 = load i64, i64* %RBP.i, align 8
  %4305 = add i64 %4304, -208
  %4306 = load i64, i64* %3, align 8
  %4307 = add i64 %4306, 7
  store i64 %4307, i64* %3, align 8
  %4308 = inttoptr i64 %4305 to i32*
  %4309 = load i32, i32* %4308, align 4
  store i8 0, i8* %14, align 1
  %4310 = and i32 %4309, 255
  %4311 = tail call i32 @llvm.ctpop.i32(i32 %4310)
  %4312 = trunc i32 %4311 to i8
  %4313 = and i8 %4312, 1
  %4314 = xor i8 %4313, 1
  store i8 %4314, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4315 = icmp eq i32 %4309, 0
  %4316 = zext i1 %4315 to i8
  store i8 %4316, i8* %30, align 1
  %4317 = lshr i32 %4309, 31
  %4318 = trunc i32 %4317 to i8
  store i8 %4318, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v333 = select i1 %4315, i64 227, i64 13
  %4319 = add i64 %4306, %.v333
  store i64 %4319, i64* %3, align 8
  br i1 %4315, label %block_.L_4742aa, label %block_4741d4

block_4741d4:                                     ; preds = %block_.L_4741ba
  %4320 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4320, i64* %RAX.i4266, align 8
  %4321 = add i64 %4320, 14168
  %4322 = add i64 %4319, 15
  store i64 %4322, i64* %3, align 8
  %4323 = inttoptr i64 %4321 to i64*
  %4324 = load i64, i64* %4323, align 8
  store i64 %4324, i64* %RAX.i4266, align 8
  %4325 = add i64 %4304, -204
  %4326 = add i64 %4319, 22
  store i64 %4326, i64* %3, align 8
  %4327 = inttoptr i64 %4325 to i32*
  %4328 = load i32, i32* %4327, align 4
  %4329 = sext i32 %4328 to i64
  %4330 = mul nsw i64 %4329, 632
  store i64 %4330, i64* %RCX.i4448, align 8
  %4331 = lshr i64 %4330, 63
  %4332 = add i64 %4330, %4324
  store i64 %4332, i64* %RAX.i4266, align 8
  %4333 = icmp ult i64 %4332, %4324
  %4334 = icmp ult i64 %4332, %4330
  %4335 = or i1 %4333, %4334
  %4336 = zext i1 %4335 to i8
  store i8 %4336, i8* %14, align 1
  %4337 = trunc i64 %4332 to i32
  %4338 = and i32 %4337, 255
  %4339 = tail call i32 @llvm.ctpop.i32(i32 %4338)
  %4340 = trunc i32 %4339 to i8
  %4341 = and i8 %4340, 1
  %4342 = xor i8 %4341, 1
  store i8 %4342, i8* %21, align 1
  %4343 = xor i64 %4330, %4324
  %4344 = xor i64 %4343, %4332
  %4345 = lshr i64 %4344, 4
  %4346 = trunc i64 %4345 to i8
  %4347 = and i8 %4346, 1
  store i8 %4347, i8* %27, align 1
  %4348 = icmp eq i64 %4332, 0
  %4349 = zext i1 %4348 to i8
  store i8 %4349, i8* %30, align 1
  %4350 = lshr i64 %4332, 63
  %4351 = trunc i64 %4350 to i8
  store i8 %4351, i8* %33, align 1
  %4352 = lshr i64 %4324, 63
  %4353 = xor i64 %4350, %4352
  %4354 = xor i64 %4350, %4331
  %4355 = add nuw nsw i64 %4353, %4354
  %4356 = icmp eq i64 %4355, 2
  %4357 = zext i1 %4356 to i8
  store i8 %4357, i8* %39, align 1
  %4358 = add i64 %4332, 532
  %4359 = add i64 %4319, 39
  store i64 %4359, i64* %3, align 8
  %4360 = inttoptr i64 %4358 to i32*
  %4361 = load i32, i32* %4360, align 4
  store i8 0, i8* %14, align 1
  %4362 = and i32 %4361, 255
  %4363 = tail call i32 @llvm.ctpop.i32(i32 %4362)
  %4364 = trunc i32 %4363 to i8
  %4365 = and i8 %4364, 1
  %4366 = xor i8 %4365, 1
  store i8 %4366, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4367 = icmp eq i32 %4361, 0
  %4368 = zext i1 %4367 to i8
  store i8 %4368, i8* %30, align 1
  %4369 = lshr i32 %4361, 31
  %4370 = trunc i32 %4369 to i8
  store i8 %4370, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v334 = select i1 %4367, i64 45, i64 95
  %4371 = add i64 %4319, %.v334
  store i64 %4371, i64* %3, align 8
  %4372 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  br i1 %4367, label %block_474201, label %block_4741d4.block_.L_474233_crit_edge

block_4741d4.block_.L_474233_crit_edge:           ; preds = %block_4741d4
  %.pre226 = load i64, i64* %RBP.i, align 8
  br label %block_.L_474233

block_474201:                                     ; preds = %block_4741d4
  store i64 %4372, i64* %RAX.i4266, align 8
  %4373 = add i64 %4372, 6480
  %4374 = add i64 %4371, 15
  store i64 %4374, i64* %3, align 8
  %4375 = inttoptr i64 %4373 to i64*
  %4376 = load i64, i64* %4375, align 8
  store i64 %4376, i64* %RAX.i4266, align 8
  %4377 = add i64 %4376, 8
  %4378 = add i64 %4371, 19
  store i64 %4378, i64* %3, align 8
  %4379 = inttoptr i64 %4377 to i64*
  %4380 = load i64, i64* %4379, align 8
  store i64 %4380, i64* %RAX.i4266, align 8
  %4381 = load i64, i64* %RBP.i, align 8
  %4382 = add i64 %4381, -192
  %4383 = add i64 %4371, 26
  store i64 %4383, i64* %3, align 8
  %4384 = inttoptr i64 %4382 to i32*
  %4385 = load i32, i32* %4384, align 4
  %4386 = sext i32 %4385 to i64
  store i64 %4386, i64* %RCX.i4448, align 8
  %4387 = shl nsw i64 %4386, 3
  %4388 = add i64 %4387, %4380
  %4389 = add i64 %4371, 30
  store i64 %4389, i64* %3, align 8
  %4390 = inttoptr i64 %4388 to i64*
  %4391 = load i64, i64* %4390, align 8
  store i64 %4391, i64* %RAX.i4266, align 8
  %4392 = add i64 %4381, -188
  %4393 = add i64 %4371, 37
  store i64 %4393, i64* %3, align 8
  %4394 = inttoptr i64 %4392 to i32*
  %4395 = load i32, i32* %4394, align 4
  %4396 = sext i32 %4395 to i64
  store i64 %4396, i64* %RCX.i4448, align 8
  %4397 = shl nsw i64 %4396, 1
  %4398 = add i64 %4397, %4391
  %4399 = add i64 %4371, 41
  store i64 %4399, i64* %3, align 8
  %4400 = inttoptr i64 %4398 to i16*
  %4401 = load i16, i16* %4400, align 2
  %4402 = sext i16 %4401 to i64
  %4403 = and i64 %4402, 4294967295
  store i64 %4403, i64* %RDX.i4301, align 8
  %4404 = sext i16 %4401 to i32
  %4405 = add i64 %4371, 44
  store i8 0, i8* %14, align 1
  %4406 = and i32 %4404, 255
  %4407 = tail call i32 @llvm.ctpop.i32(i32 %4406)
  %4408 = trunc i32 %4407 to i8
  %4409 = and i8 %4408, 1
  %4410 = xor i8 %4409, 1
  store i8 %4410, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4411 = icmp eq i16 %4401, 0
  %4412 = zext i1 %4411 to i8
  store i8 %4412, i8* %30, align 1
  %4413 = lshr i32 %4404, 31
  %4414 = trunc i32 %4413 to i8
  store i8 %4414, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4415 = icmp ne i8 %4414, 0
  %.v158 = select i1 %4415, i64 6, i64 61
  %4416 = add i64 %4405, %.v158
  store i64 %4416, i64* %3, align 8
  br i1 %4415, label %block_.L_474233, label %block_.L_47426a

block_.L_474233:                                  ; preds = %block_4741d4.block_.L_474233_crit_edge, %block_474201
  %4417 = phi i64 [ %4381, %block_474201 ], [ %.pre226, %block_4741d4.block_.L_474233_crit_edge ]
  %4418 = phi i64 [ %4416, %block_474201 ], [ %4371, %block_4741d4.block_.L_474233_crit_edge ]
  store i64 %4372, i64* %RAX.i4266, align 8
  %4419 = add i64 %4372, 6480
  %4420 = add i64 %4418, 15
  store i64 %4420, i64* %3, align 8
  %4421 = inttoptr i64 %4419 to i64*
  %4422 = load i64, i64* %4421, align 8
  store i64 %4422, i64* %RAX.i4266, align 8
  %4423 = add i64 %4422, 8
  %4424 = add i64 %4418, 19
  store i64 %4424, i64* %3, align 8
  %4425 = inttoptr i64 %4423 to i64*
  %4426 = load i64, i64* %4425, align 8
  store i64 %4426, i64* %RAX.i4266, align 8
  %4427 = add i64 %4417, -192
  %4428 = add i64 %4418, 26
  store i64 %4428, i64* %3, align 8
  %4429 = inttoptr i64 %4427 to i32*
  %4430 = load i32, i32* %4429, align 4
  %4431 = sext i32 %4430 to i64
  store i64 %4431, i64* %RCX.i4448, align 8
  %4432 = shl nsw i64 %4431, 3
  %4433 = add i64 %4432, %4426
  %4434 = add i64 %4418, 30
  store i64 %4434, i64* %3, align 8
  %4435 = inttoptr i64 %4433 to i64*
  %4436 = load i64, i64* %4435, align 8
  store i64 %4436, i64* %RAX.i4266, align 8
  %4437 = add i64 %4417, -188
  %4438 = add i64 %4418, 37
  store i64 %4438, i64* %3, align 8
  %4439 = inttoptr i64 %4437 to i32*
  %4440 = load i32, i32* %4439, align 4
  %4441 = sext i32 %4440 to i64
  store i64 %4441, i64* %RCX.i4448, align 8
  %4442 = shl nsw i64 %4441, 1
  %4443 = add i64 %4442, %4436
  %4444 = add i64 %4418, 41
  store i64 %4444, i64* %3, align 8
  %4445 = inttoptr i64 %4443 to i16*
  %4446 = load i16, i16* %4445, align 2
  %4447 = sext i16 %4446 to i64
  %4448 = ashr i64 %4447, 1
  %4449 = trunc i16 %4446 to i8
  %4450 = and i8 %4449, 1
  %4451 = trunc i64 %4448 to i32
  %4452 = and i64 %4448, 4294967295
  store i64 %4452, i64* %RDX.i4301, align 8
  store i8 %4450, i8* %14, align 1
  %4453 = and i32 %4451, 255
  %4454 = tail call i32 @llvm.ctpop.i32(i32 %4453)
  %4455 = trunc i32 %4454 to i8
  %4456 = and i8 %4455, 1
  %4457 = xor i8 %4456, 1
  store i8 %4457, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4458 = icmp eq i32 %4451, 0
  %4459 = zext i1 %4458 to i8
  store i8 %4459, i8* %30, align 1
  %4460 = lshr i64 %4448, 31
  %4461 = trunc i64 %4460 to i8
  %4462 = and i8 %4461, 1
  store i8 %4462, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4463 = add i64 %4417, -424
  %4464 = trunc i64 %4448 to i32
  %4465 = add i64 %4418, 49
  store i64 %4465, i64* %3, align 8
  %4466 = inttoptr i64 %4463 to i32*
  store i32 %4464, i32* %4466, align 4
  %4467 = load i64, i64* %3, align 8
  %4468 = add i64 %4467, 52
  store i64 %4468, i64* %3, align 8
  br label %block_.L_474299

block_.L_47426a:                                  ; preds = %block_474201
  store i64 %4372, i64* %RAX.i4266, align 8
  %4469 = add i64 %4416, 15
  store i64 %4469, i64* %3, align 8
  %4470 = load i64, i64* %4375, align 8
  store i64 %4470, i64* %RAX.i4266, align 8
  %4471 = add i64 %4470, 8
  %4472 = add i64 %4416, 19
  store i64 %4472, i64* %3, align 8
  %4473 = inttoptr i64 %4471 to i64*
  %4474 = load i64, i64* %4473, align 8
  store i64 %4474, i64* %RAX.i4266, align 8
  %4475 = add i64 %4416, 26
  store i64 %4475, i64* %3, align 8
  %4476 = load i32, i32* %4384, align 4
  %4477 = sext i32 %4476 to i64
  store i64 %4477, i64* %RCX.i4448, align 8
  %4478 = shl nsw i64 %4477, 3
  %4479 = add i64 %4478, %4474
  %4480 = add i64 %4416, 30
  store i64 %4480, i64* %3, align 8
  %4481 = inttoptr i64 %4479 to i64*
  %4482 = load i64, i64* %4481, align 8
  store i64 %4482, i64* %RAX.i4266, align 8
  %4483 = add i64 %4416, 37
  store i64 %4483, i64* %3, align 8
  %4484 = load i32, i32* %4394, align 4
  %4485 = sext i32 %4484 to i64
  store i64 %4485, i64* %RCX.i4448, align 8
  %4486 = shl nsw i64 %4485, 1
  %4487 = add i64 %4486, %4482
  %4488 = add i64 %4416, 41
  store i64 %4488, i64* %3, align 8
  %4489 = inttoptr i64 %4487 to i16*
  %4490 = load i16, i16* %4489, align 2
  %4491 = sext i16 %4490 to i64
  %4492 = and i64 %4491, 4294967295
  store i64 %4492, i64* %RDX.i4301, align 8
  %4493 = add i64 %4381, -424
  %4494 = sext i16 %4490 to i32
  %4495 = add i64 %4416, 47
  store i64 %4495, i64* %3, align 8
  %4496 = inttoptr i64 %4493 to i32*
  store i32 %4494, i32* %4496, align 4
  %.pre227 = load i64, i64* %3, align 8
  br label %block_.L_474299

block_.L_474299:                                  ; preds = %block_.L_47426a, %block_.L_474233
  %4497 = phi i64 [ %.pre227, %block_.L_47426a ], [ %4468, %block_.L_474233 ]
  %4498 = load i64, i64* %RBP.i, align 8
  %4499 = add i64 %4498, -424
  %4500 = add i64 %4497, 6
  store i64 %4500, i64* %3, align 8
  %4501 = inttoptr i64 %4499 to i32*
  %4502 = load i32, i32* %4501, align 4
  %4503 = zext i32 %4502 to i64
  store i64 %4503, i64* %RAX.i4266, align 8
  %4504 = add i64 %4498, -428
  %4505 = add i64 %4497, 12
  store i64 %4505, i64* %3, align 8
  %4506 = inttoptr i64 %4504 to i32*
  store i32 %4502, i32* %4506, align 4
  %4507 = load i64, i64* %3, align 8
  %4508 = add i64 %4507, 15
  store i64 %4508, i64* %3, align 8
  br label %block_.L_4742b4

block_.L_4742aa:                                  ; preds = %block_.L_4741ba
  %4509 = add i64 %4304, -94
  %4510 = add i64 %4319, 4
  store i64 %4510, i64* %3, align 8
  %4511 = inttoptr i64 %4509 to i16*
  %4512 = load i16, i16* %4511, align 2
  %4513 = sext i16 %4512 to i64
  %4514 = and i64 %4513, 4294967295
  store i64 %4514, i64* %RAX.i4266, align 8
  %4515 = add i64 %4304, -428
  %4516 = sext i16 %4512 to i32
  %4517 = add i64 %4319, 10
  store i64 %4517, i64* %3, align 8
  %4518 = inttoptr i64 %4515 to i32*
  store i32 %4516, i32* %4518, align 4
  %.pre228 = load i64, i64* %3, align 8
  br label %block_.L_4742b4

block_.L_4742b4:                                  ; preds = %block_.L_4742aa, %block_.L_474299
  %4519 = phi i64 [ %.pre228, %block_.L_4742aa ], [ %4508, %block_.L_474299 ]
  %4520 = load i64, i64* %RBP.i, align 8
  %4521 = add i64 %4520, -428
  %4522 = add i64 %4519, 6
  store i64 %4522, i64* %3, align 8
  %4523 = inttoptr i64 %4521 to i32*
  %4524 = load i32, i32* %4523, align 4
  %4525 = zext i32 %4524 to i64
  store i64 %4525, i64* %RAX.i4266, align 8
  %4526 = trunc i32 %4524 to i16
  store i16 %4526, i16* %CX.i2843, align 2
  %4527 = add i64 %4520, -96
  %4528 = add i64 %4519, 13
  store i64 %4528, i64* %3, align 8
  %4529 = inttoptr i64 %4527 to i16*
  store i16 %4526, i16* %4529, align 2
  %.pre229 = load i64, i64* %3, align 8
  br label %block_.L_4742c1

block_.L_4742c1:                                  ; preds = %block_.L_4742b4, %block_.L_473aeb
  %4530 = phi i64 [ %.pre229, %block_.L_4742b4 ], [ %2786, %block_.L_473aeb ]
  %4531 = add i64 %4530, 5
  store i64 %4531, i64* %3, align 8
  br label %block_.L_4742c6

block_.L_4742c6:                                  ; preds = %block_.L_4742c1, %block_.L_473311
  %storemerge106 = phi i64 [ %1033, %block_.L_473311 ], [ %4531, %block_.L_4742c1 ]
  %4532 = load i64, i64* %RBP.i, align 8
  %4533 = add i64 %4532, -82
  %4534 = add i64 %storemerge106, 4
  store i64 %4534, i64* %3, align 8
  %4535 = inttoptr i64 %4533 to i16*
  %4536 = load i16, i16* %4535, align 2
  %4537 = sext i16 %4536 to i64
  %4538 = and i64 %4537, 4294967295
  store i64 %4538, i64* %RAX.i4266, align 8
  %4539 = sext i16 %4536 to i32
  %4540 = add i64 %storemerge106, 7
  store i8 0, i8* %14, align 1
  %4541 = and i32 %4539, 255
  %4542 = tail call i32 @llvm.ctpop.i32(i32 %4541)
  %4543 = trunc i32 %4542 to i8
  %4544 = and i8 %4543, 1
  %4545 = xor i8 %4544, 1
  store i8 %4545, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4546 = icmp eq i16 %4536, 0
  %4547 = zext i1 %4546 to i8
  store i8 %4547, i8* %30, align 1
  %4548 = lshr i32 %4539, 31
  %4549 = trunc i32 %4548 to i8
  store i8 %4549, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4550 = icmp ne i8 %4549, 0
  %.v = select i1 %4550, i64 77, i64 6
  %4551 = add i64 %4540, %.v
  store i64 %4551, i64* %3, align 8
  %.pre266 = add i64 %4532, -84
  br i1 %4550, label %block_.L_4742c6.block_.L_47431a_crit_edge, label %block_4742d3

block_.L_4742c6.block_.L_47431a_crit_edge:        ; preds = %block_.L_4742c6
  %.pre267 = inttoptr i64 %.pre266 to i16*
  br label %block_.L_47431a

block_4742d3:                                     ; preds = %block_.L_4742c6
  %4552 = add i64 %4551, 4
  store i64 %4552, i64* %3, align 8
  %4553 = inttoptr i64 %.pre266 to i16*
  %4554 = load i16, i16* %4553, align 2
  %4555 = sext i16 %4554 to i64
  %4556 = and i64 %4555, 4294967295
  store i64 %4556, i64* %RAX.i4266, align 8
  %4557 = sext i16 %4554 to i32
  %4558 = add i64 %4551, 7
  store i8 0, i8* %14, align 1
  %4559 = and i32 %4557, 255
  %4560 = tail call i32 @llvm.ctpop.i32(i32 %4559)
  %4561 = trunc i32 %4560 to i8
  %4562 = and i8 %4561, 1
  %4563 = xor i8 %4562, 1
  store i8 %4563, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4564 = icmp eq i16 %4554, 0
  %4565 = zext i1 %4564 to i8
  store i8 %4565, i8* %30, align 1
  %4566 = lshr i32 %4557, 31
  %4567 = trunc i32 %4566 to i8
  store i8 %4567, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4568 = icmp ne i8 %4567, 0
  %.v130 = select i1 %4568, i64 64, i64 6
  %4569 = add i64 %4558, %.v130
  store i64 %4569, i64* %3, align 8
  br i1 %4568, label %block_.L_47431a, label %block_4742e0

block_4742e0:                                     ; preds = %block_4742d3
  %4570 = add i64 %4569, 4
  store i64 %4570, i64* %3, align 8
  %4571 = load i16, i16* %4535, align 2
  %4572 = sext i16 %4571 to i64
  %4573 = and i64 %4572, 4294967295
  store i64 %4573, i64* %RAX.i4266, align 8
  %4574 = add i64 %4569, 8
  store i64 %4574, i64* %3, align 8
  %4575 = load i16, i16* %4553, align 2
  %4576 = sext i16 %4575 to i64
  %4577 = and i64 %4576, 4294967295
  store i64 %4577, i64* %RCX.i4448, align 8
  %4578 = sext i16 %4571 to i32
  %4579 = sext i16 %4575 to i32
  %4580 = sub nsw i32 %4578, %4579
  %4581 = icmp ult i16 %4571, %4575
  %4582 = zext i1 %4581 to i8
  store i8 %4582, i8* %14, align 1
  %4583 = and i32 %4580, 255
  %4584 = tail call i32 @llvm.ctpop.i32(i32 %4583)
  %4585 = trunc i32 %4584 to i8
  %4586 = and i8 %4585, 1
  %4587 = xor i8 %4586, 1
  store i8 %4587, i8* %21, align 1
  %4588 = xor i16 %4575, %4571
  %4589 = zext i16 %4588 to i32
  %4590 = xor i32 %4589, %4580
  %4591 = lshr i32 %4590, 4
  %4592 = trunc i32 %4591 to i8
  %4593 = and i8 %4592, 1
  store i8 %4593, i8* %27, align 1
  %4594 = icmp eq i32 %4580, 0
  %4595 = zext i1 %4594 to i8
  store i8 %4595, i8* %30, align 1
  %4596 = lshr i32 %4580, 31
  %4597 = trunc i32 %4596 to i8
  store i8 %4597, i8* %33, align 1
  %4598 = lshr i32 %4578, 31
  %4599 = lshr i32 %4579, 31
  %4600 = xor i32 %4599, %4598
  %4601 = xor i32 %4596, %4598
  %4602 = add nuw nsw i32 %4601, %4600
  %4603 = icmp eq i32 %4602, 2
  %4604 = zext i1 %4603 to i8
  store i8 %4604, i8* %39, align 1
  %4605 = icmp ne i8 %4597, 0
  %4606 = xor i1 %4605, %4603
  %.v305 = select i1 %4606, i64 16, i64 31
  %4607 = add i64 %4569, %.v305
  %4608 = add i64 %4607, 4
  store i64 %4608, i64* %3, align 8
  br i1 %4606, label %block_4742f0, label %block_.L_4742ff

block_4742f0:                                     ; preds = %block_4742e0
  %4609 = load i16, i16* %4535, align 2
  %4610 = sext i16 %4609 to i64
  %4611 = and i64 %4610, 4294967295
  store i64 %4611, i64* %RAX.i4266, align 8
  %4612 = add i64 %4532, -432
  %4613 = sext i16 %4609 to i32
  %4614 = add i64 %4607, 10
  store i64 %4614, i64* %3, align 8
  %4615 = inttoptr i64 %4612 to i32*
  store i32 %4613, i32* %4615, align 4
  %4616 = load i64, i64* %3, align 8
  %4617 = add i64 %4616, 15
  store i64 %4617, i64* %3, align 8
  br label %block_.L_474309

block_.L_4742ff:                                  ; preds = %block_4742e0
  %4618 = load i16, i16* %4553, align 2
  %4619 = sext i16 %4618 to i64
  %4620 = and i64 %4619, 4294967295
  store i64 %4620, i64* %RAX.i4266, align 8
  %4621 = add i64 %4532, -432
  %4622 = sext i16 %4618 to i32
  %4623 = add i64 %4607, 10
  store i64 %4623, i64* %3, align 8
  %4624 = inttoptr i64 %4621 to i32*
  store i32 %4622, i32* %4624, align 4
  %.pre230 = load i64, i64* %3, align 8
  br label %block_.L_474309

block_.L_474309:                                  ; preds = %block_.L_4742ff, %block_4742f0
  %4625 = phi i64 [ %.pre230, %block_.L_4742ff ], [ %4617, %block_4742f0 ]
  %4626 = load i64, i64* %RBP.i, align 8
  %4627 = add i64 %4626, -432
  %4628 = add i64 %4625, 6
  store i64 %4628, i64* %3, align 8
  %4629 = inttoptr i64 %4627 to i32*
  %4630 = load i32, i32* %4629, align 4
  %4631 = zext i32 %4630 to i64
  store i64 %4631, i64* %RAX.i4266, align 8
  %4632 = add i64 %4626, -436
  %4633 = add i64 %4625, 12
  store i64 %4633, i64* %3, align 8
  %4634 = inttoptr i64 %4632 to i32*
  store i32 %4630, i32* %4634, align 4
  %4635 = load i64, i64* %3, align 8
  %4636 = add i64 %4635, 58
  store i64 %4636, i64* %3, align 8
  br label %block_.L_47434f

block_.L_47431a:                                  ; preds = %block_.L_4742c6.block_.L_47431a_crit_edge, %block_4742d3
  %.pre-phi268 = phi i16* [ %.pre267, %block_.L_4742c6.block_.L_47431a_crit_edge ], [ %4553, %block_4742d3 ]
  %4637 = phi i64 [ %4551, %block_.L_4742c6.block_.L_47431a_crit_edge ], [ %4569, %block_4742d3 ]
  %4638 = add i64 %4637, 4
  store i64 %4638, i64* %3, align 8
  %4639 = load i16, i16* %4535, align 2
  %4640 = sext i16 %4639 to i64
  %4641 = and i64 %4640, 4294967295
  store i64 %4641, i64* %RAX.i4266, align 8
  %4642 = add i64 %4637, 8
  store i64 %4642, i64* %3, align 8
  %4643 = load i16, i16* %.pre-phi268, align 2
  %4644 = sext i16 %4643 to i64
  %4645 = and i64 %4644, 4294967295
  store i64 %4645, i64* %RCX.i4448, align 8
  %4646 = sext i16 %4639 to i32
  %4647 = sext i16 %4643 to i32
  %4648 = sub nsw i32 %4646, %4647
  %4649 = icmp ult i16 %4639, %4643
  %4650 = zext i1 %4649 to i8
  store i8 %4650, i8* %14, align 1
  %4651 = and i32 %4648, 255
  %4652 = tail call i32 @llvm.ctpop.i32(i32 %4651)
  %4653 = trunc i32 %4652 to i8
  %4654 = and i8 %4653, 1
  %4655 = xor i8 %4654, 1
  store i8 %4655, i8* %21, align 1
  %4656 = xor i16 %4643, %4639
  %4657 = zext i16 %4656 to i32
  %4658 = xor i32 %4657, %4648
  %4659 = lshr i32 %4658, 4
  %4660 = trunc i32 %4659 to i8
  %4661 = and i8 %4660, 1
  store i8 %4661, i8* %27, align 1
  %4662 = icmp eq i32 %4648, 0
  %4663 = zext i1 %4662 to i8
  store i8 %4663, i8* %30, align 1
  %4664 = lshr i32 %4648, 31
  %4665 = trunc i32 %4664 to i8
  store i8 %4665, i8* %33, align 1
  %4666 = lshr i32 %4646, 31
  %4667 = lshr i32 %4647, 31
  %4668 = xor i32 %4667, %4666
  %4669 = xor i32 %4664, %4666
  %4670 = add nuw nsw i32 %4669, %4668
  %4671 = icmp eq i32 %4670, 2
  %4672 = zext i1 %4671 to i8
  store i8 %4672, i8* %39, align 1
  %4673 = icmp ne i8 %4665, 0
  %4674 = xor i1 %4673, %4671
  %4675 = or i1 %4662, %4674
  %.v319 = select i1 %4675, i64 31, i64 16
  %4676 = add i64 %4637, %.v319
  %4677 = add i64 %4676, 4
  store i64 %4677, i64* %3, align 8
  br i1 %4675, label %block_.L_474339, label %block_47432a

block_47432a:                                     ; preds = %block_.L_47431a
  %4678 = load i16, i16* %4535, align 2
  %4679 = sext i16 %4678 to i64
  %4680 = and i64 %4679, 4294967295
  store i64 %4680, i64* %RAX.i4266, align 8
  %4681 = add i64 %4532, -440
  %4682 = sext i16 %4678 to i32
  %4683 = add i64 %4676, 10
  store i64 %4683, i64* %3, align 8
  %4684 = inttoptr i64 %4681 to i32*
  store i32 %4682, i32* %4684, align 4
  %4685 = load i64, i64* %3, align 8
  %4686 = add i64 %4685, 15
  store i64 %4686, i64* %3, align 8
  br label %block_.L_474343

block_.L_474339:                                  ; preds = %block_.L_47431a
  %4687 = load i16, i16* %.pre-phi268, align 2
  %4688 = sext i16 %4687 to i64
  %4689 = and i64 %4688, 4294967295
  store i64 %4689, i64* %RAX.i4266, align 8
  %4690 = add i64 %4532, -440
  %4691 = sext i16 %4687 to i32
  %4692 = add i64 %4676, 10
  store i64 %4692, i64* %3, align 8
  %4693 = inttoptr i64 %4690 to i32*
  store i32 %4691, i32* %4693, align 4
  %.pre231 = load i64, i64* %3, align 8
  br label %block_.L_474343

block_.L_474343:                                  ; preds = %block_.L_474339, %block_47432a
  %4694 = phi i64 [ %.pre231, %block_.L_474339 ], [ %4686, %block_47432a ]
  %4695 = load i64, i64* %RBP.i, align 8
  %4696 = add i64 %4695, -440
  %4697 = add i64 %4694, 6
  store i64 %4697, i64* %3, align 8
  %4698 = inttoptr i64 %4696 to i32*
  %4699 = load i32, i32* %4698, align 4
  %4700 = zext i32 %4699 to i64
  store i64 %4700, i64* %RAX.i4266, align 8
  %4701 = add i64 %4695, -436
  %4702 = add i64 %4694, 12
  store i64 %4702, i64* %3, align 8
  %4703 = inttoptr i64 %4701 to i32*
  store i32 %4699, i32* %4703, align 4
  %.pre232 = load i64, i64* %3, align 8
  br label %block_.L_47434f

block_.L_47434f:                                  ; preds = %block_.L_474343, %block_.L_474309
  %4704 = phi i64 [ %.pre232, %block_.L_474343 ], [ %4636, %block_.L_474309 ]
  %4705 = load i64, i64* %RBP.i, align 8
  %4706 = add i64 %4705, -436
  %4707 = add i64 %4704, 6
  store i64 %4707, i64* %3, align 8
  %4708 = inttoptr i64 %4706 to i32*
  %4709 = load i32, i32* %4708, align 4
  %4710 = zext i32 %4709 to i64
  store i64 %4710, i64* %RAX.i4266, align 8
  %AX.i1998 = bitcast %union.anon* %40 to i16*
  %CX.i1999 = bitcast %union.anon* %55 to i16*
  %4711 = trunc i32 %4709 to i16
  store i16 %4711, i16* %CX.i1999, align 2
  %4712 = add i64 %4705, -98
  %4713 = add i64 %4704, 13
  store i64 %4713, i64* %3, align 8
  %4714 = inttoptr i64 %4712 to i16*
  store i16 %4711, i16* %4714, align 2
  %4715 = load i64, i64* %RBP.i, align 8
  %4716 = add i64 %4715, -98
  %4717 = load i64, i64* %3, align 8
  %4718 = add i64 %4717, 4
  store i64 %4718, i64* %3, align 8
  %4719 = inttoptr i64 %4716 to i16*
  %4720 = load i16, i16* %4719, align 2
  %4721 = sext i16 %4720 to i64
  %4722 = and i64 %4721, 4294967295
  store i64 %4722, i64* %RAX.i4266, align 8
  %4723 = sext i16 %4720 to i32
  %4724 = add i64 %4717, 7
  store i8 0, i8* %14, align 1
  %4725 = and i32 %4723, 255
  %4726 = tail call i32 @llvm.ctpop.i32(i32 %4725)
  %4727 = trunc i32 %4726 to i8
  %4728 = and i8 %4727, 1
  %4729 = xor i8 %4728, 1
  store i8 %4729, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4730 = icmp eq i16 %4720, 0
  %4731 = zext i1 %4730 to i8
  store i8 %4731, i8* %30, align 1
  %4732 = lshr i32 %4723, 31
  %4733 = trunc i32 %4732 to i8
  store i8 %4733, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4734 = icmp ne i8 %4733, 0
  %.v131 = select i1 %4734, i64 77, i64 6
  %4735 = add i64 %4724, %.v131
  store i64 %4735, i64* %3, align 8
  %.pre269 = add i64 %4715, -88
  br i1 %4734, label %block_.L_47434f.block_.L_4743b0_crit_edge, label %block_474369

block_.L_47434f.block_.L_4743b0_crit_edge:        ; preds = %block_.L_47434f
  %.pre271 = inttoptr i64 %.pre269 to i16*
  br label %block_.L_4743b0

block_474369:                                     ; preds = %block_.L_47434f
  %4736 = add i64 %4735, 4
  store i64 %4736, i64* %3, align 8
  %4737 = inttoptr i64 %.pre269 to i16*
  %4738 = load i16, i16* %4737, align 2
  %4739 = sext i16 %4738 to i64
  %4740 = and i64 %4739, 4294967295
  store i64 %4740, i64* %RAX.i4266, align 8
  %4741 = sext i16 %4738 to i32
  %4742 = add i64 %4735, 7
  store i8 0, i8* %14, align 1
  %4743 = and i32 %4741, 255
  %4744 = tail call i32 @llvm.ctpop.i32(i32 %4743)
  %4745 = trunc i32 %4744 to i8
  %4746 = and i8 %4745, 1
  %4747 = xor i8 %4746, 1
  store i8 %4747, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4748 = icmp eq i16 %4738, 0
  %4749 = zext i1 %4748 to i8
  store i8 %4749, i8* %30, align 1
  %4750 = lshr i32 %4741, 31
  %4751 = trunc i32 %4750 to i8
  store i8 %4751, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4752 = icmp ne i8 %4751, 0
  %.v132 = select i1 %4752, i64 64, i64 6
  %4753 = add i64 %4742, %.v132
  store i64 %4753, i64* %3, align 8
  br i1 %4752, label %block_.L_4743b0, label %block_474376

block_474376:                                     ; preds = %block_474369
  %4754 = add i64 %4753, 4
  store i64 %4754, i64* %3, align 8
  %4755 = load i16, i16* %4719, align 2
  %4756 = sext i16 %4755 to i64
  %4757 = and i64 %4756, 4294967295
  store i64 %4757, i64* %RAX.i4266, align 8
  %4758 = add i64 %4753, 8
  store i64 %4758, i64* %3, align 8
  %4759 = load i16, i16* %4737, align 2
  %4760 = sext i16 %4759 to i64
  %4761 = and i64 %4760, 4294967295
  store i64 %4761, i64* %RCX.i4448, align 8
  %4762 = sext i16 %4755 to i32
  %4763 = sext i16 %4759 to i32
  %4764 = sub nsw i32 %4762, %4763
  %4765 = icmp ult i16 %4755, %4759
  %4766 = zext i1 %4765 to i8
  store i8 %4766, i8* %14, align 1
  %4767 = and i32 %4764, 255
  %4768 = tail call i32 @llvm.ctpop.i32(i32 %4767)
  %4769 = trunc i32 %4768 to i8
  %4770 = and i8 %4769, 1
  %4771 = xor i8 %4770, 1
  store i8 %4771, i8* %21, align 1
  %4772 = xor i16 %4759, %4755
  %4773 = zext i16 %4772 to i32
  %4774 = xor i32 %4773, %4764
  %4775 = lshr i32 %4774, 4
  %4776 = trunc i32 %4775 to i8
  %4777 = and i8 %4776, 1
  store i8 %4777, i8* %27, align 1
  %4778 = icmp eq i32 %4764, 0
  %4779 = zext i1 %4778 to i8
  store i8 %4779, i8* %30, align 1
  %4780 = lshr i32 %4764, 31
  %4781 = trunc i32 %4780 to i8
  store i8 %4781, i8* %33, align 1
  %4782 = lshr i32 %4762, 31
  %4783 = lshr i32 %4763, 31
  %4784 = xor i32 %4783, %4782
  %4785 = xor i32 %4780, %4782
  %4786 = add nuw nsw i32 %4785, %4784
  %4787 = icmp eq i32 %4786, 2
  %4788 = zext i1 %4787 to i8
  store i8 %4788, i8* %39, align 1
  %4789 = icmp ne i8 %4781, 0
  %4790 = xor i1 %4789, %4787
  %.v306 = select i1 %4790, i64 16, i64 31
  %4791 = add i64 %4753, %.v306
  %4792 = add i64 %4791, 4
  store i64 %4792, i64* %3, align 8
  br i1 %4790, label %block_474386, label %block_.L_474395

block_474386:                                     ; preds = %block_474376
  %4793 = load i16, i16* %4719, align 2
  %4794 = sext i16 %4793 to i64
  %4795 = and i64 %4794, 4294967295
  store i64 %4795, i64* %RAX.i4266, align 8
  %4796 = add i64 %4715, -444
  %4797 = sext i16 %4793 to i32
  %4798 = add i64 %4791, 10
  store i64 %4798, i64* %3, align 8
  %4799 = inttoptr i64 %4796 to i32*
  store i32 %4797, i32* %4799, align 4
  %4800 = load i64, i64* %3, align 8
  %4801 = add i64 %4800, 15
  store i64 %4801, i64* %3, align 8
  br label %block_.L_47439f

block_.L_474395:                                  ; preds = %block_474376
  %4802 = load i16, i16* %4737, align 2
  %4803 = sext i16 %4802 to i64
  %4804 = and i64 %4803, 4294967295
  store i64 %4804, i64* %RAX.i4266, align 8
  %4805 = add i64 %4715, -444
  %4806 = sext i16 %4802 to i32
  %4807 = add i64 %4791, 10
  store i64 %4807, i64* %3, align 8
  %4808 = inttoptr i64 %4805 to i32*
  store i32 %4806, i32* %4808, align 4
  %.pre233 = load i64, i64* %3, align 8
  br label %block_.L_47439f

block_.L_47439f:                                  ; preds = %block_.L_474395, %block_474386
  %4809 = phi i64 [ %.pre233, %block_.L_474395 ], [ %4801, %block_474386 ]
  %4810 = load i64, i64* %RBP.i, align 8
  %4811 = add i64 %4810, -444
  %4812 = add i64 %4809, 6
  store i64 %4812, i64* %3, align 8
  %4813 = inttoptr i64 %4811 to i32*
  %4814 = load i32, i32* %4813, align 4
  %4815 = zext i32 %4814 to i64
  store i64 %4815, i64* %RAX.i4266, align 8
  %4816 = add i64 %4810, -448
  %4817 = add i64 %4809, 12
  store i64 %4817, i64* %3, align 8
  %4818 = inttoptr i64 %4816 to i32*
  store i32 %4814, i32* %4818, align 4
  %4819 = load i64, i64* %3, align 8
  %4820 = add i64 %4819, 58
  store i64 %4820, i64* %3, align 8
  br label %block_.L_4743e5

block_.L_4743b0:                                  ; preds = %block_.L_47434f.block_.L_4743b0_crit_edge, %block_474369
  %.pre-phi272 = phi i16* [ %.pre271, %block_.L_47434f.block_.L_4743b0_crit_edge ], [ %4737, %block_474369 ]
  %4821 = phi i64 [ %4735, %block_.L_47434f.block_.L_4743b0_crit_edge ], [ %4753, %block_474369 ]
  %4822 = add i64 %4821, 4
  store i64 %4822, i64* %3, align 8
  %4823 = load i16, i16* %4719, align 2
  %4824 = sext i16 %4823 to i64
  %4825 = and i64 %4824, 4294967295
  store i64 %4825, i64* %RAX.i4266, align 8
  %4826 = add i64 %4821, 8
  store i64 %4826, i64* %3, align 8
  %4827 = load i16, i16* %.pre-phi272, align 2
  %4828 = sext i16 %4827 to i64
  %4829 = and i64 %4828, 4294967295
  store i64 %4829, i64* %RCX.i4448, align 8
  %4830 = sext i16 %4823 to i32
  %4831 = sext i16 %4827 to i32
  %4832 = sub nsw i32 %4830, %4831
  %4833 = icmp ult i16 %4823, %4827
  %4834 = zext i1 %4833 to i8
  store i8 %4834, i8* %14, align 1
  %4835 = and i32 %4832, 255
  %4836 = tail call i32 @llvm.ctpop.i32(i32 %4835)
  %4837 = trunc i32 %4836 to i8
  %4838 = and i8 %4837, 1
  %4839 = xor i8 %4838, 1
  store i8 %4839, i8* %21, align 1
  %4840 = xor i16 %4827, %4823
  %4841 = zext i16 %4840 to i32
  %4842 = xor i32 %4841, %4832
  %4843 = lshr i32 %4842, 4
  %4844 = trunc i32 %4843 to i8
  %4845 = and i8 %4844, 1
  store i8 %4845, i8* %27, align 1
  %4846 = icmp eq i32 %4832, 0
  %4847 = zext i1 %4846 to i8
  store i8 %4847, i8* %30, align 1
  %4848 = lshr i32 %4832, 31
  %4849 = trunc i32 %4848 to i8
  store i8 %4849, i8* %33, align 1
  %4850 = lshr i32 %4830, 31
  %4851 = lshr i32 %4831, 31
  %4852 = xor i32 %4851, %4850
  %4853 = xor i32 %4848, %4850
  %4854 = add nuw nsw i32 %4853, %4852
  %4855 = icmp eq i32 %4854, 2
  %4856 = zext i1 %4855 to i8
  store i8 %4856, i8* %39, align 1
  %4857 = icmp ne i8 %4849, 0
  %4858 = xor i1 %4857, %4855
  %4859 = or i1 %4846, %4858
  %.v318 = select i1 %4859, i64 31, i64 16
  %4860 = add i64 %4821, %.v318
  %4861 = add i64 %4860, 4
  store i64 %4861, i64* %3, align 8
  br i1 %4859, label %block_.L_4743cf, label %block_4743c0

block_4743c0:                                     ; preds = %block_.L_4743b0
  %4862 = load i16, i16* %4719, align 2
  %4863 = sext i16 %4862 to i64
  %4864 = and i64 %4863, 4294967295
  store i64 %4864, i64* %RAX.i4266, align 8
  %4865 = add i64 %4715, -452
  %4866 = sext i16 %4862 to i32
  %4867 = add i64 %4860, 10
  store i64 %4867, i64* %3, align 8
  %4868 = inttoptr i64 %4865 to i32*
  store i32 %4866, i32* %4868, align 4
  %4869 = load i64, i64* %3, align 8
  %4870 = add i64 %4869, 15
  store i64 %4870, i64* %3, align 8
  br label %block_.L_4743d9

block_.L_4743cf:                                  ; preds = %block_.L_4743b0
  %4871 = load i16, i16* %.pre-phi272, align 2
  %4872 = sext i16 %4871 to i64
  %4873 = and i64 %4872, 4294967295
  store i64 %4873, i64* %RAX.i4266, align 8
  %4874 = add i64 %4715, -452
  %4875 = sext i16 %4871 to i32
  %4876 = add i64 %4860, 10
  store i64 %4876, i64* %3, align 8
  %4877 = inttoptr i64 %4874 to i32*
  store i32 %4875, i32* %4877, align 4
  %.pre234 = load i64, i64* %3, align 8
  br label %block_.L_4743d9

block_.L_4743d9:                                  ; preds = %block_.L_4743cf, %block_4743c0
  %4878 = phi i64 [ %.pre234, %block_.L_4743cf ], [ %4870, %block_4743c0 ]
  %4879 = load i64, i64* %RBP.i, align 8
  %4880 = add i64 %4879, -452
  %4881 = add i64 %4878, 6
  store i64 %4881, i64* %3, align 8
  %4882 = inttoptr i64 %4880 to i32*
  %4883 = load i32, i32* %4882, align 4
  %4884 = zext i32 %4883 to i64
  store i64 %4884, i64* %RAX.i4266, align 8
  %4885 = add i64 %4879, -448
  %4886 = add i64 %4878, 12
  store i64 %4886, i64* %3, align 8
  %4887 = inttoptr i64 %4885 to i32*
  store i32 %4883, i32* %4887, align 4
  %.pre235 = load i64, i64* %3, align 8
  br label %block_.L_4743e5

block_.L_4743e5:                                  ; preds = %block_.L_4743d9, %block_.L_47439f
  %4888 = phi i64 [ %.pre235, %block_.L_4743d9 ], [ %4820, %block_.L_47439f ]
  %4889 = load i64, i64* %RBP.i, align 8
  %4890 = add i64 %4889, -448
  %4891 = add i64 %4888, 6
  store i64 %4891, i64* %3, align 8
  %4892 = inttoptr i64 %4890 to i32*
  %4893 = load i32, i32* %4892, align 4
  %4894 = zext i32 %4893 to i64
  store i64 %4894, i64* %RAX.i4266, align 8
  %4895 = trunc i32 %4893 to i16
  store i16 %4895, i16* %CX.i1999, align 2
  %4896 = add i64 %4889, -98
  %4897 = add i64 %4888, 13
  store i64 %4897, i64* %3, align 8
  %4898 = inttoptr i64 %4896 to i16*
  store i16 %4895, i16* %4898, align 2
  %4899 = load i64, i64* %RBP.i, align 8
  %4900 = add i64 %4899, -90
  %4901 = load i64, i64* %3, align 8
  %4902 = add i64 %4901, 4
  store i64 %4902, i64* %3, align 8
  %4903 = inttoptr i64 %4900 to i16*
  %4904 = load i16, i16* %4903, align 2
  %4905 = sext i16 %4904 to i64
  %4906 = and i64 %4905, 4294967295
  store i64 %4906, i64* %RAX.i4266, align 8
  %4907 = sext i16 %4904 to i32
  %4908 = add i64 %4901, 7
  store i8 0, i8* %14, align 1
  %4909 = and i32 %4907, 255
  %4910 = tail call i32 @llvm.ctpop.i32(i32 %4909)
  %4911 = trunc i32 %4910 to i8
  %4912 = and i8 %4911, 1
  %4913 = xor i8 %4912, 1
  store i8 %4913, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4914 = icmp eq i16 %4904, 0
  %4915 = zext i1 %4914 to i8
  store i8 %4915, i8* %30, align 1
  %4916 = lshr i32 %4907, 31
  %4917 = trunc i32 %4916 to i8
  store i8 %4917, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4918 = icmp ne i8 %4917, 0
  %.v133 = select i1 %4918, i64 77, i64 6
  %4919 = add i64 %4908, %.v133
  store i64 %4919, i64* %3, align 8
  %.pre273 = add i64 %4899, -92
  br i1 %4918, label %block_.L_4743e5.block_.L_474446_crit_edge, label %block_4743ff

block_.L_4743e5.block_.L_474446_crit_edge:        ; preds = %block_.L_4743e5
  %.pre275 = inttoptr i64 %.pre273 to i16*
  br label %block_.L_474446

block_4743ff:                                     ; preds = %block_.L_4743e5
  %4920 = add i64 %4919, 4
  store i64 %4920, i64* %3, align 8
  %4921 = inttoptr i64 %.pre273 to i16*
  %4922 = load i16, i16* %4921, align 2
  %4923 = sext i16 %4922 to i64
  %4924 = and i64 %4923, 4294967295
  store i64 %4924, i64* %RAX.i4266, align 8
  %4925 = sext i16 %4922 to i32
  %4926 = add i64 %4919, 7
  store i8 0, i8* %14, align 1
  %4927 = and i32 %4925, 255
  %4928 = tail call i32 @llvm.ctpop.i32(i32 %4927)
  %4929 = trunc i32 %4928 to i8
  %4930 = and i8 %4929, 1
  %4931 = xor i8 %4930, 1
  store i8 %4931, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4932 = icmp eq i16 %4922, 0
  %4933 = zext i1 %4932 to i8
  store i8 %4933, i8* %30, align 1
  %4934 = lshr i32 %4925, 31
  %4935 = trunc i32 %4934 to i8
  store i8 %4935, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4936 = icmp ne i8 %4935, 0
  %.v134 = select i1 %4936, i64 64, i64 6
  %4937 = add i64 %4926, %.v134
  store i64 %4937, i64* %3, align 8
  br i1 %4936, label %block_.L_474446, label %block_47440c

block_47440c:                                     ; preds = %block_4743ff
  %4938 = add i64 %4937, 4
  store i64 %4938, i64* %3, align 8
  %4939 = load i16, i16* %4903, align 2
  %4940 = sext i16 %4939 to i64
  %4941 = and i64 %4940, 4294967295
  store i64 %4941, i64* %RAX.i4266, align 8
  %4942 = add i64 %4937, 8
  store i64 %4942, i64* %3, align 8
  %4943 = load i16, i16* %4921, align 2
  %4944 = sext i16 %4943 to i64
  %4945 = and i64 %4944, 4294967295
  store i64 %4945, i64* %RCX.i4448, align 8
  %4946 = sext i16 %4939 to i32
  %4947 = sext i16 %4943 to i32
  %4948 = sub nsw i32 %4946, %4947
  %4949 = icmp ult i16 %4939, %4943
  %4950 = zext i1 %4949 to i8
  store i8 %4950, i8* %14, align 1
  %4951 = and i32 %4948, 255
  %4952 = tail call i32 @llvm.ctpop.i32(i32 %4951)
  %4953 = trunc i32 %4952 to i8
  %4954 = and i8 %4953, 1
  %4955 = xor i8 %4954, 1
  store i8 %4955, i8* %21, align 1
  %4956 = xor i16 %4943, %4939
  %4957 = zext i16 %4956 to i32
  %4958 = xor i32 %4957, %4948
  %4959 = lshr i32 %4958, 4
  %4960 = trunc i32 %4959 to i8
  %4961 = and i8 %4960, 1
  store i8 %4961, i8* %27, align 1
  %4962 = icmp eq i32 %4948, 0
  %4963 = zext i1 %4962 to i8
  store i8 %4963, i8* %30, align 1
  %4964 = lshr i32 %4948, 31
  %4965 = trunc i32 %4964 to i8
  store i8 %4965, i8* %33, align 1
  %4966 = lshr i32 %4946, 31
  %4967 = lshr i32 %4947, 31
  %4968 = xor i32 %4967, %4966
  %4969 = xor i32 %4964, %4966
  %4970 = add nuw nsw i32 %4969, %4968
  %4971 = icmp eq i32 %4970, 2
  %4972 = zext i1 %4971 to i8
  store i8 %4972, i8* %39, align 1
  %4973 = icmp ne i8 %4965, 0
  %4974 = xor i1 %4973, %4971
  %.v307 = select i1 %4974, i64 16, i64 31
  %4975 = add i64 %4937, %.v307
  %4976 = add i64 %4975, 4
  store i64 %4976, i64* %3, align 8
  br i1 %4974, label %block_47441c, label %block_.L_47442b

block_47441c:                                     ; preds = %block_47440c
  %4977 = load i16, i16* %4903, align 2
  %4978 = sext i16 %4977 to i64
  %4979 = and i64 %4978, 4294967295
  store i64 %4979, i64* %RAX.i4266, align 8
  %4980 = add i64 %4899, -456
  %4981 = sext i16 %4977 to i32
  %4982 = add i64 %4975, 10
  store i64 %4982, i64* %3, align 8
  %4983 = inttoptr i64 %4980 to i32*
  store i32 %4981, i32* %4983, align 4
  %4984 = load i64, i64* %3, align 8
  %4985 = add i64 %4984, 15
  store i64 %4985, i64* %3, align 8
  br label %block_.L_474435

block_.L_47442b:                                  ; preds = %block_47440c
  %4986 = load i16, i16* %4921, align 2
  %4987 = sext i16 %4986 to i64
  %4988 = and i64 %4987, 4294967295
  store i64 %4988, i64* %RAX.i4266, align 8
  %4989 = add i64 %4899, -456
  %4990 = sext i16 %4986 to i32
  %4991 = add i64 %4975, 10
  store i64 %4991, i64* %3, align 8
  %4992 = inttoptr i64 %4989 to i32*
  store i32 %4990, i32* %4992, align 4
  %.pre236 = load i64, i64* %3, align 8
  br label %block_.L_474435

block_.L_474435:                                  ; preds = %block_.L_47442b, %block_47441c
  %4993 = phi i64 [ %.pre236, %block_.L_47442b ], [ %4985, %block_47441c ]
  %4994 = load i64, i64* %RBP.i, align 8
  %4995 = add i64 %4994, -456
  %4996 = add i64 %4993, 6
  store i64 %4996, i64* %3, align 8
  %4997 = inttoptr i64 %4995 to i32*
  %4998 = load i32, i32* %4997, align 4
  %4999 = zext i32 %4998 to i64
  store i64 %4999, i64* %RAX.i4266, align 8
  %5000 = add i64 %4994, -460
  %5001 = add i64 %4993, 12
  store i64 %5001, i64* %3, align 8
  %5002 = inttoptr i64 %5000 to i32*
  store i32 %4998, i32* %5002, align 4
  %5003 = load i64, i64* %3, align 8
  %5004 = add i64 %5003, 58
  store i64 %5004, i64* %3, align 8
  br label %block_.L_47447b

block_.L_474446:                                  ; preds = %block_.L_4743e5.block_.L_474446_crit_edge, %block_4743ff
  %.pre-phi276 = phi i16* [ %.pre275, %block_.L_4743e5.block_.L_474446_crit_edge ], [ %4921, %block_4743ff ]
  %5005 = phi i64 [ %4919, %block_.L_4743e5.block_.L_474446_crit_edge ], [ %4937, %block_4743ff ]
  %5006 = add i64 %5005, 4
  store i64 %5006, i64* %3, align 8
  %5007 = load i16, i16* %4903, align 2
  %5008 = sext i16 %5007 to i64
  %5009 = and i64 %5008, 4294967295
  store i64 %5009, i64* %RAX.i4266, align 8
  %5010 = add i64 %5005, 8
  store i64 %5010, i64* %3, align 8
  %5011 = load i16, i16* %.pre-phi276, align 2
  %5012 = sext i16 %5011 to i64
  %5013 = and i64 %5012, 4294967295
  store i64 %5013, i64* %RCX.i4448, align 8
  %5014 = sext i16 %5007 to i32
  %5015 = sext i16 %5011 to i32
  %5016 = sub nsw i32 %5014, %5015
  %5017 = icmp ult i16 %5007, %5011
  %5018 = zext i1 %5017 to i8
  store i8 %5018, i8* %14, align 1
  %5019 = and i32 %5016, 255
  %5020 = tail call i32 @llvm.ctpop.i32(i32 %5019)
  %5021 = trunc i32 %5020 to i8
  %5022 = and i8 %5021, 1
  %5023 = xor i8 %5022, 1
  store i8 %5023, i8* %21, align 1
  %5024 = xor i16 %5011, %5007
  %5025 = zext i16 %5024 to i32
  %5026 = xor i32 %5025, %5016
  %5027 = lshr i32 %5026, 4
  %5028 = trunc i32 %5027 to i8
  %5029 = and i8 %5028, 1
  store i8 %5029, i8* %27, align 1
  %5030 = icmp eq i32 %5016, 0
  %5031 = zext i1 %5030 to i8
  store i8 %5031, i8* %30, align 1
  %5032 = lshr i32 %5016, 31
  %5033 = trunc i32 %5032 to i8
  store i8 %5033, i8* %33, align 1
  %5034 = lshr i32 %5014, 31
  %5035 = lshr i32 %5015, 31
  %5036 = xor i32 %5035, %5034
  %5037 = xor i32 %5032, %5034
  %5038 = add nuw nsw i32 %5037, %5036
  %5039 = icmp eq i32 %5038, 2
  %5040 = zext i1 %5039 to i8
  store i8 %5040, i8* %39, align 1
  %5041 = icmp ne i8 %5033, 0
  %5042 = xor i1 %5041, %5039
  %5043 = or i1 %5030, %5042
  %.v317 = select i1 %5043, i64 31, i64 16
  %5044 = add i64 %5005, %.v317
  %5045 = add i64 %5044, 4
  store i64 %5045, i64* %3, align 8
  br i1 %5043, label %block_.L_474465, label %block_474456

block_474456:                                     ; preds = %block_.L_474446
  %5046 = load i16, i16* %4903, align 2
  %5047 = sext i16 %5046 to i64
  %5048 = and i64 %5047, 4294967295
  store i64 %5048, i64* %RAX.i4266, align 8
  %5049 = add i64 %4899, -464
  %5050 = sext i16 %5046 to i32
  %5051 = add i64 %5044, 10
  store i64 %5051, i64* %3, align 8
  %5052 = inttoptr i64 %5049 to i32*
  store i32 %5050, i32* %5052, align 4
  %5053 = load i64, i64* %3, align 8
  %5054 = add i64 %5053, 15
  store i64 %5054, i64* %3, align 8
  br label %block_.L_47446f

block_.L_474465:                                  ; preds = %block_.L_474446
  %5055 = load i16, i16* %.pre-phi276, align 2
  %5056 = sext i16 %5055 to i64
  %5057 = and i64 %5056, 4294967295
  store i64 %5057, i64* %RAX.i4266, align 8
  %5058 = add i64 %4899, -464
  %5059 = sext i16 %5055 to i32
  %5060 = add i64 %5044, 10
  store i64 %5060, i64* %3, align 8
  %5061 = inttoptr i64 %5058 to i32*
  store i32 %5059, i32* %5061, align 4
  %.pre237 = load i64, i64* %3, align 8
  br label %block_.L_47446f

block_.L_47446f:                                  ; preds = %block_.L_474465, %block_474456
  %5062 = phi i64 [ %.pre237, %block_.L_474465 ], [ %5054, %block_474456 ]
  %5063 = load i64, i64* %RBP.i, align 8
  %5064 = add i64 %5063, -464
  %5065 = add i64 %5062, 6
  store i64 %5065, i64* %3, align 8
  %5066 = inttoptr i64 %5064 to i32*
  %5067 = load i32, i32* %5066, align 4
  %5068 = zext i32 %5067 to i64
  store i64 %5068, i64* %RAX.i4266, align 8
  %5069 = add i64 %5063, -460
  %5070 = add i64 %5062, 12
  store i64 %5070, i64* %3, align 8
  %5071 = inttoptr i64 %5069 to i32*
  store i32 %5067, i32* %5071, align 4
  %.pre238 = load i64, i64* %3, align 8
  br label %block_.L_47447b

block_.L_47447b:                                  ; preds = %block_.L_47446f, %block_.L_474435
  %5072 = phi i64 [ %.pre238, %block_.L_47446f ], [ %5004, %block_.L_474435 ]
  %5073 = load i64, i64* %RBP.i, align 8
  %5074 = add i64 %5073, -460
  %5075 = add i64 %5072, 6
  store i64 %5075, i64* %3, align 8
  %5076 = inttoptr i64 %5074 to i32*
  %5077 = load i32, i32* %5076, align 4
  %5078 = zext i32 %5077 to i64
  store i64 %5078, i64* %RAX.i4266, align 8
  %5079 = trunc i32 %5077 to i16
  store i16 %5079, i16* %CX.i1999, align 2
  %5080 = add i64 %5073, -100
  %5081 = add i64 %5072, 13
  store i64 %5081, i64* %3, align 8
  %5082 = inttoptr i64 %5080 to i16*
  store i16 %5079, i16* %5082, align 2
  %5083 = load i64, i64* %RBP.i, align 8
  %5084 = add i64 %5083, -100
  %5085 = load i64, i64* %3, align 8
  %5086 = add i64 %5085, 4
  store i64 %5086, i64* %3, align 8
  %5087 = inttoptr i64 %5084 to i16*
  %5088 = load i16, i16* %5087, align 2
  %5089 = sext i16 %5088 to i64
  %5090 = and i64 %5089, 4294967295
  store i64 %5090, i64* %RAX.i4266, align 8
  %5091 = sext i16 %5088 to i32
  %5092 = add i64 %5085, 7
  store i8 0, i8* %14, align 1
  %5093 = and i32 %5091, 255
  %5094 = tail call i32 @llvm.ctpop.i32(i32 %5093)
  %5095 = trunc i32 %5094 to i8
  %5096 = and i8 %5095, 1
  %5097 = xor i8 %5096, 1
  store i8 %5097, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5098 = icmp eq i16 %5088, 0
  %5099 = zext i1 %5098 to i8
  store i8 %5099, i8* %30, align 1
  %5100 = lshr i32 %5091, 31
  %5101 = trunc i32 %5100 to i8
  store i8 %5101, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5102 = icmp ne i8 %5101, 0
  %.v135 = select i1 %5102, i64 77, i64 6
  %5103 = add i64 %5092, %.v135
  store i64 %5103, i64* %3, align 8
  %.pre277 = add i64 %5083, -96
  br i1 %5102, label %block_.L_47447b.block_.L_4744dc_crit_edge, label %block_474495

block_.L_47447b.block_.L_4744dc_crit_edge:        ; preds = %block_.L_47447b
  %.pre279 = inttoptr i64 %.pre277 to i16*
  br label %block_.L_4744dc

block_474495:                                     ; preds = %block_.L_47447b
  %5104 = add i64 %5103, 4
  store i64 %5104, i64* %3, align 8
  %5105 = inttoptr i64 %.pre277 to i16*
  %5106 = load i16, i16* %5105, align 2
  %5107 = sext i16 %5106 to i64
  %5108 = and i64 %5107, 4294967295
  store i64 %5108, i64* %RAX.i4266, align 8
  %5109 = sext i16 %5106 to i32
  %5110 = add i64 %5103, 7
  store i8 0, i8* %14, align 1
  %5111 = and i32 %5109, 255
  %5112 = tail call i32 @llvm.ctpop.i32(i32 %5111)
  %5113 = trunc i32 %5112 to i8
  %5114 = and i8 %5113, 1
  %5115 = xor i8 %5114, 1
  store i8 %5115, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5116 = icmp eq i16 %5106, 0
  %5117 = zext i1 %5116 to i8
  store i8 %5117, i8* %30, align 1
  %5118 = lshr i32 %5109, 31
  %5119 = trunc i32 %5118 to i8
  store i8 %5119, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5120 = icmp ne i8 %5119, 0
  %.v136 = select i1 %5120, i64 64, i64 6
  %5121 = add i64 %5110, %.v136
  store i64 %5121, i64* %3, align 8
  br i1 %5120, label %block_.L_4744dc, label %block_4744a2

block_4744a2:                                     ; preds = %block_474495
  %5122 = add i64 %5121, 4
  store i64 %5122, i64* %3, align 8
  %5123 = load i16, i16* %5087, align 2
  %5124 = sext i16 %5123 to i64
  %5125 = and i64 %5124, 4294967295
  store i64 %5125, i64* %RAX.i4266, align 8
  %5126 = add i64 %5121, 8
  store i64 %5126, i64* %3, align 8
  %5127 = load i16, i16* %5105, align 2
  %5128 = sext i16 %5127 to i64
  %5129 = and i64 %5128, 4294967295
  store i64 %5129, i64* %RCX.i4448, align 8
  %5130 = sext i16 %5123 to i32
  %5131 = sext i16 %5127 to i32
  %5132 = sub nsw i32 %5130, %5131
  %5133 = icmp ult i16 %5123, %5127
  %5134 = zext i1 %5133 to i8
  store i8 %5134, i8* %14, align 1
  %5135 = and i32 %5132, 255
  %5136 = tail call i32 @llvm.ctpop.i32(i32 %5135)
  %5137 = trunc i32 %5136 to i8
  %5138 = and i8 %5137, 1
  %5139 = xor i8 %5138, 1
  store i8 %5139, i8* %21, align 1
  %5140 = xor i16 %5127, %5123
  %5141 = zext i16 %5140 to i32
  %5142 = xor i32 %5141, %5132
  %5143 = lshr i32 %5142, 4
  %5144 = trunc i32 %5143 to i8
  %5145 = and i8 %5144, 1
  store i8 %5145, i8* %27, align 1
  %5146 = icmp eq i32 %5132, 0
  %5147 = zext i1 %5146 to i8
  store i8 %5147, i8* %30, align 1
  %5148 = lshr i32 %5132, 31
  %5149 = trunc i32 %5148 to i8
  store i8 %5149, i8* %33, align 1
  %5150 = lshr i32 %5130, 31
  %5151 = lshr i32 %5131, 31
  %5152 = xor i32 %5151, %5150
  %5153 = xor i32 %5148, %5150
  %5154 = add nuw nsw i32 %5153, %5152
  %5155 = icmp eq i32 %5154, 2
  %5156 = zext i1 %5155 to i8
  store i8 %5156, i8* %39, align 1
  %5157 = icmp ne i8 %5149, 0
  %5158 = xor i1 %5157, %5155
  %.v308 = select i1 %5158, i64 16, i64 31
  %5159 = add i64 %5121, %.v308
  %5160 = add i64 %5159, 4
  store i64 %5160, i64* %3, align 8
  br i1 %5158, label %block_4744b2, label %block_.L_4744c1

block_4744b2:                                     ; preds = %block_4744a2
  %5161 = load i16, i16* %5087, align 2
  %5162 = sext i16 %5161 to i64
  %5163 = and i64 %5162, 4294967295
  store i64 %5163, i64* %RAX.i4266, align 8
  %5164 = add i64 %5083, -468
  %5165 = sext i16 %5161 to i32
  %5166 = add i64 %5159, 10
  store i64 %5166, i64* %3, align 8
  %5167 = inttoptr i64 %5164 to i32*
  store i32 %5165, i32* %5167, align 4
  %5168 = load i64, i64* %3, align 8
  %5169 = add i64 %5168, 15
  store i64 %5169, i64* %3, align 8
  br label %block_.L_4744cb

block_.L_4744c1:                                  ; preds = %block_4744a2
  %5170 = load i16, i16* %5105, align 2
  %5171 = sext i16 %5170 to i64
  %5172 = and i64 %5171, 4294967295
  store i64 %5172, i64* %RAX.i4266, align 8
  %5173 = add i64 %5083, -468
  %5174 = sext i16 %5170 to i32
  %5175 = add i64 %5159, 10
  store i64 %5175, i64* %3, align 8
  %5176 = inttoptr i64 %5173 to i32*
  store i32 %5174, i32* %5176, align 4
  %.pre239 = load i64, i64* %3, align 8
  br label %block_.L_4744cb

block_.L_4744cb:                                  ; preds = %block_.L_4744c1, %block_4744b2
  %5177 = phi i64 [ %.pre239, %block_.L_4744c1 ], [ %5169, %block_4744b2 ]
  %5178 = load i64, i64* %RBP.i, align 8
  %5179 = add i64 %5178, -468
  %5180 = add i64 %5177, 6
  store i64 %5180, i64* %3, align 8
  %5181 = inttoptr i64 %5179 to i32*
  %5182 = load i32, i32* %5181, align 4
  %5183 = zext i32 %5182 to i64
  store i64 %5183, i64* %RAX.i4266, align 8
  %5184 = add i64 %5178, -472
  %5185 = add i64 %5177, 12
  store i64 %5185, i64* %3, align 8
  %5186 = inttoptr i64 %5184 to i32*
  store i32 %5182, i32* %5186, align 4
  %5187 = load i64, i64* %3, align 8
  %5188 = add i64 %5187, 58
  store i64 %5188, i64* %3, align 8
  br label %block_.L_474511

block_.L_4744dc:                                  ; preds = %block_.L_47447b.block_.L_4744dc_crit_edge, %block_474495
  %.pre-phi280 = phi i16* [ %.pre279, %block_.L_47447b.block_.L_4744dc_crit_edge ], [ %5105, %block_474495 ]
  %5189 = phi i64 [ %5103, %block_.L_47447b.block_.L_4744dc_crit_edge ], [ %5121, %block_474495 ]
  %5190 = add i64 %5189, 4
  store i64 %5190, i64* %3, align 8
  %5191 = load i16, i16* %5087, align 2
  %5192 = sext i16 %5191 to i64
  %5193 = and i64 %5192, 4294967295
  store i64 %5193, i64* %RAX.i4266, align 8
  %5194 = add i64 %5189, 8
  store i64 %5194, i64* %3, align 8
  %5195 = load i16, i16* %.pre-phi280, align 2
  %5196 = sext i16 %5195 to i64
  %5197 = and i64 %5196, 4294967295
  store i64 %5197, i64* %RCX.i4448, align 8
  %5198 = sext i16 %5191 to i32
  %5199 = sext i16 %5195 to i32
  %5200 = sub nsw i32 %5198, %5199
  %5201 = icmp ult i16 %5191, %5195
  %5202 = zext i1 %5201 to i8
  store i8 %5202, i8* %14, align 1
  %5203 = and i32 %5200, 255
  %5204 = tail call i32 @llvm.ctpop.i32(i32 %5203)
  %5205 = trunc i32 %5204 to i8
  %5206 = and i8 %5205, 1
  %5207 = xor i8 %5206, 1
  store i8 %5207, i8* %21, align 1
  %5208 = xor i16 %5195, %5191
  %5209 = zext i16 %5208 to i32
  %5210 = xor i32 %5209, %5200
  %5211 = lshr i32 %5210, 4
  %5212 = trunc i32 %5211 to i8
  %5213 = and i8 %5212, 1
  store i8 %5213, i8* %27, align 1
  %5214 = icmp eq i32 %5200, 0
  %5215 = zext i1 %5214 to i8
  store i8 %5215, i8* %30, align 1
  %5216 = lshr i32 %5200, 31
  %5217 = trunc i32 %5216 to i8
  store i8 %5217, i8* %33, align 1
  %5218 = lshr i32 %5198, 31
  %5219 = lshr i32 %5199, 31
  %5220 = xor i32 %5219, %5218
  %5221 = xor i32 %5216, %5218
  %5222 = add nuw nsw i32 %5221, %5220
  %5223 = icmp eq i32 %5222, 2
  %5224 = zext i1 %5223 to i8
  store i8 %5224, i8* %39, align 1
  %5225 = icmp ne i8 %5217, 0
  %5226 = xor i1 %5225, %5223
  %5227 = or i1 %5214, %5226
  %.v316 = select i1 %5227, i64 31, i64 16
  %5228 = add i64 %5189, %.v316
  %5229 = add i64 %5228, 4
  store i64 %5229, i64* %3, align 8
  br i1 %5227, label %block_.L_4744fb, label %block_4744ec

block_4744ec:                                     ; preds = %block_.L_4744dc
  %5230 = load i16, i16* %5087, align 2
  %5231 = sext i16 %5230 to i64
  %5232 = and i64 %5231, 4294967295
  store i64 %5232, i64* %RAX.i4266, align 8
  %5233 = add i64 %5083, -476
  %5234 = sext i16 %5230 to i32
  %5235 = add i64 %5228, 10
  store i64 %5235, i64* %3, align 8
  %5236 = inttoptr i64 %5233 to i32*
  store i32 %5234, i32* %5236, align 4
  %5237 = load i64, i64* %3, align 8
  %5238 = add i64 %5237, 15
  store i64 %5238, i64* %3, align 8
  br label %block_.L_474505

block_.L_4744fb:                                  ; preds = %block_.L_4744dc
  %5239 = load i16, i16* %.pre-phi280, align 2
  %5240 = sext i16 %5239 to i64
  %5241 = and i64 %5240, 4294967295
  store i64 %5241, i64* %RAX.i4266, align 8
  %5242 = add i64 %5083, -476
  %5243 = sext i16 %5239 to i32
  %5244 = add i64 %5228, 10
  store i64 %5244, i64* %3, align 8
  %5245 = inttoptr i64 %5242 to i32*
  store i32 %5243, i32* %5245, align 4
  %.pre240 = load i64, i64* %3, align 8
  br label %block_.L_474505

block_.L_474505:                                  ; preds = %block_.L_4744fb, %block_4744ec
  %5246 = phi i64 [ %.pre240, %block_.L_4744fb ], [ %5238, %block_4744ec ]
  %5247 = load i64, i64* %RBP.i, align 8
  %5248 = add i64 %5247, -476
  %5249 = add i64 %5246, 6
  store i64 %5249, i64* %3, align 8
  %5250 = inttoptr i64 %5248 to i32*
  %5251 = load i32, i32* %5250, align 4
  %5252 = zext i32 %5251 to i64
  store i64 %5252, i64* %RAX.i4266, align 8
  %5253 = add i64 %5247, -472
  %5254 = add i64 %5246, 12
  store i64 %5254, i64* %3, align 8
  %5255 = inttoptr i64 %5253 to i32*
  store i32 %5251, i32* %5255, align 4
  %.pre241 = load i64, i64* %3, align 8
  br label %block_.L_474511

block_.L_474511:                                  ; preds = %block_.L_474505, %block_.L_4744cb
  %5256 = phi i64 [ %.pre241, %block_.L_474505 ], [ %5188, %block_.L_4744cb ]
  %5257 = load i64, i64* %RBP.i, align 8
  %5258 = add i64 %5257, -472
  %5259 = add i64 %5256, 6
  store i64 %5259, i64* %3, align 8
  %5260 = inttoptr i64 %5258 to i32*
  %5261 = load i32, i32* %5260, align 4
  %5262 = zext i32 %5261 to i64
  store i64 %5262, i64* %RAX.i4266, align 8
  %5263 = trunc i32 %5261 to i16
  store i16 %5263, i16* %CX.i1999, align 2
  %5264 = add i64 %5257, -100
  %5265 = add i64 %5256, 13
  store i64 %5265, i64* %3, align 8
  %5266 = inttoptr i64 %5264 to i16*
  store i16 %5263, i16* %5266, align 2
  %5267 = load i64, i64* %RBP.i, align 8
  %5268 = add i64 %5267, -98
  %5269 = load i64, i64* %3, align 8
  %5270 = add i64 %5269, 4
  store i64 %5270, i64* %3, align 8
  %5271 = inttoptr i64 %5268 to i16*
  %5272 = load i16, i16* %5271, align 2
  %5273 = sext i16 %5272 to i64
  %5274 = and i64 %5273, 4294967295
  store i64 %5274, i64* %RAX.i4266, align 8
  %5275 = sext i16 %5272 to i32
  %5276 = add i64 %5269, 7
  store i8 0, i8* %14, align 1
  %5277 = and i32 %5275, 255
  %5278 = tail call i32 @llvm.ctpop.i32(i32 %5277)
  %5279 = trunc i32 %5278 to i8
  %5280 = and i8 %5279, 1
  %5281 = xor i8 %5280, 1
  store i8 %5281, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5282 = icmp eq i16 %5272, 0
  %5283 = zext i1 %5282 to i8
  store i8 %5283, i8* %30, align 1
  %5284 = lshr i32 %5275, 31
  %5285 = trunc i32 %5284 to i8
  store i8 %5285, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5286 = icmp ne i8 %5285, 0
  %.v137 = select i1 %5286, i64 95, i64 6
  %5287 = add i64 %5276, %.v137
  store i64 %5287, i64* %3, align 8
  br i1 %5286, label %block_.L_474584, label %block_47452b

block_47452b:                                     ; preds = %block_.L_474511
  %5288 = zext i32 %5275 to i64
  %5289 = xor i64 %5288, %5274
  %5290 = trunc i64 %5289 to i32
  store i64 %5289, i64* %RAX.i4266, align 8
  store i8 0, i8* %14, align 1
  %5291 = and i32 %5290, 255
  %5292 = tail call i32 @llvm.ctpop.i32(i32 %5291)
  %5293 = trunc i32 %5292 to i8
  %5294 = and i8 %5293, 1
  %5295 = xor i8 %5294, 1
  store i8 %5295, i8* %21, align 1
  %5296 = icmp eq i32 %5290, 0
  %5297 = zext i1 %5296 to i8
  store i8 %5297, i8* %30, align 1
  %5298 = lshr i32 %5290, 31
  %5299 = trunc i32 %5298 to i8
  store i8 %5299, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 16, i64* %RCX.i4448, align 8
  %5300 = add i64 %5267, -104
  store i64 %5300, i64* %RDI.i4295, align 8
  %5301 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5301, i64* %RDX.i4301, align 8
  %5302 = add i64 %5301, 6480
  %5303 = add i64 %5287, 26
  store i64 %5303, i64* %3, align 8
  %5304 = inttoptr i64 %5302 to i64*
  %5305 = load i64, i64* %5304, align 8
  store i64 %5305, i64* %RSI.i4299, align 8
  store i64 %5301, i64* %RDX.i4301, align 8
  %5306 = add i64 %5301, 6504
  %5307 = add i64 %5287, 41
  store i64 %5307, i64* %3, align 8
  %5308 = inttoptr i64 %5306 to i64*
  %5309 = load i64, i64* %5308, align 8
  store i64 %5309, i64* %RDX.i4301, align 8
  %5310 = add i64 %5287, 46
  store i64 %5310, i64* %3, align 8
  %5311 = load i16, i16* %5271, align 2
  %5312 = sext i16 %5311 to i64
  %5313 = and i64 %5312, 4294967295
  store i64 %5313, i64* %R8.i4293, align 8
  %5314 = add i64 %5267, -480
  %5315 = add i64 %5287, 52
  store i64 %5315, i64* %3, align 8
  %5316 = inttoptr i64 %5314 to i32*
  store i32 16, i32* %5316, align 4
  %5317 = load i32, i32* %R8D.i4234, align 4
  %5318 = zext i32 %5317 to i64
  %5319 = load i64, i64* %3, align 8
  store i64 %5318, i64* %RCX.i4448, align 8
  %5320 = load i32, i32* %EAX.i4308, align 4
  %5321 = zext i32 %5320 to i64
  store i64 %5321, i64* %R8.i4293, align 8
  store i64 %5321, i64* %R9.i4304, align 8
  %5322 = bitcast i64* %6 to i32**
  %5323 = load i32*, i32** %5322, align 8
  %5324 = add i64 %5319, 16
  store i64 %5324, i64* %3, align 8
  store i32 0, i32* %5323, align 4
  %5325 = load i64, i64* %6, align 8
  %5326 = add i64 %5325, 8
  %5327 = load i64, i64* %3, align 8
  %5328 = add i64 %5327, 8
  store i64 %5328, i64* %3, align 8
  %5329 = inttoptr i64 %5326 to i32*
  store i32 16, i32* %5329, align 4
  %5330 = load i64, i64* %6, align 8
  %5331 = add i64 %5330, 16
  %5332 = load i64, i64* %3, align 8
  %5333 = add i64 %5332, 8
  store i64 %5333, i64* %3, align 8
  %5334 = inttoptr i64 %5331 to i32*
  store i32 16, i32* %5334, align 4
  %5335 = load i64, i64* %3, align 8
  %5336 = add i64 %5335, -97151
  %5337 = add i64 %5335, 5
  %5338 = load i64, i64* %6, align 8
  %5339 = add i64 %5338, -8
  %5340 = inttoptr i64 %5339 to i64*
  store i64 %5337, i64* %5340, align 8
  store i64 %5339, i64* %6, align 8
  store i64 %5336, i64* %3, align 8
  %call2_47457f = tail call %struct.Memory* @sub_45ca00.SetMotionVectorPredictor(%struct.State* nonnull %0, i64 %5336, %struct.Memory* %call2_47302f)
  %.pre242 = load i64, i64* %RBP.i, align 8
  %.pre243 = load i64, i64* %3, align 8
  br label %block_.L_474584

block_.L_474584:                                  ; preds = %block_47452b, %block_.L_474511
  %5341 = phi i64 [ %5287, %block_.L_474511 ], [ %.pre243, %block_47452b ]
  %5342 = phi i64 [ %5267, %block_.L_474511 ], [ %.pre242, %block_47452b ]
  %MEMORY.77 = phi %struct.Memory* [ %call2_47302f, %block_.L_474511 ], [ %call2_47457f, %block_47452b ]
  %5343 = add i64 %5342, -100
  %5344 = add i64 %5341, 4
  store i64 %5344, i64* %3, align 8
  %5345 = inttoptr i64 %5343 to i16*
  %5346 = load i16, i16* %5345, align 2
  %5347 = sext i16 %5346 to i64
  %5348 = and i64 %5347, 4294967295
  store i64 %5348, i64* %RAX.i4266, align 8
  %5349 = sext i16 %5346 to i32
  %5350 = add i64 %5341, 7
  store i8 0, i8* %14, align 1
  %5351 = and i32 %5349, 255
  %5352 = tail call i32 @llvm.ctpop.i32(i32 %5351)
  %5353 = trunc i32 %5352 to i8
  %5354 = and i8 %5353, 1
  %5355 = xor i8 %5354, 1
  store i8 %5355, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5356 = icmp eq i16 %5346, 0
  %5357 = zext i1 %5356 to i8
  store i8 %5357, i8* %30, align 1
  %5358 = lshr i32 %5349, 31
  %5359 = trunc i32 %5358 to i8
  store i8 %5359, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5360 = icmp ne i8 %5359, 0
  %.v138 = select i1 %5360, i64 92, i64 6
  %5361 = add i64 %5350, %.v138
  store i64 %5361, i64* %3, align 8
  br i1 %5360, label %block_.L_4745e7, label %block_474591

block_474591:                                     ; preds = %block_.L_474584
  store i64 1, i64* %R8.i4293, align 8
  store i64 0, i64* %R9.i4304, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 16, i64* %RAX.i4266, align 8
  %5362 = add i64 %5342, -108
  store i64 %5362, i64* %RDI.i4295, align 8
  %5363 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5363, i64* %RCX.i4448, align 8
  %5364 = add i64 %5363, 6480
  %5365 = add i64 %5361, 33
  store i64 %5365, i64* %3, align 8
  %5366 = inttoptr i64 %5364 to i64*
  %5367 = load i64, i64* %5366, align 8
  store i64 %5367, i64* %RSI.i4299, align 8
  store i64 %5363, i64* %RCX.i4448, align 8
  %5368 = add i64 %5363, 6504
  %5369 = add i64 %5361, 48
  store i64 %5369, i64* %3, align 8
  %5370 = inttoptr i64 %5368 to i64*
  %5371 = load i64, i64* %5370, align 8
  store i64 %5371, i64* %RDX.i4301, align 8
  %5372 = add i64 %5361, 52
  store i64 %5372, i64* %3, align 8
  %5373 = load i16, i16* %5345, align 2
  %5374 = sext i16 %5373 to i64
  %5375 = and i64 %5374, 4294967295
  store i64 %5375, i64* %RCX.i4448, align 8
  %5376 = bitcast i64* %6 to i32**
  %5377 = load i32*, i32** %5376, align 8
  %5378 = add i64 %5361, 59
  store i64 %5378, i64* %3, align 8
  store i32 0, i32* %5377, align 4
  %5379 = load i64, i64* %6, align 8
  %5380 = add i64 %5379, 8
  %5381 = load i64, i64* %3, align 8
  %5382 = add i64 %5381, 8
  store i64 %5382, i64* %3, align 8
  %5383 = inttoptr i64 %5380 to i32*
  store i32 16, i32* %5383, align 4
  %5384 = load i64, i64* %6, align 8
  %5385 = add i64 %5384, 16
  %5386 = load i64, i64* %3, align 8
  %5387 = add i64 %5386, 8
  store i64 %5387, i64* %3, align 8
  %5388 = inttoptr i64 %5385 to i32*
  store i32 16, i32* %5388, align 4
  %5389 = load i64, i64* %RBP.i, align 8
  %5390 = add i64 %5389, -484
  %5391 = load i32, i32* %EAX.i4308, align 4
  %5392 = load i64, i64* %3, align 8
  %5393 = add i64 %5392, 6
  store i64 %5393, i64* %3, align 8
  %5394 = inttoptr i64 %5390 to i32*
  store i32 %5391, i32* %5394, align 4
  %5395 = load i64, i64* %3, align 8
  %5396 = add i64 %5395, -97250
  %5397 = add i64 %5395, 5
  %5398 = load i64, i64* %6, align 8
  %5399 = add i64 %5398, -8
  %5400 = inttoptr i64 %5399 to i64*
  store i64 %5397, i64* %5400, align 8
  store i64 %5399, i64* %6, align 8
  store i64 %5396, i64* %3, align 8
  %call2_4745e2 = tail call %struct.Memory* @sub_45ca00.SetMotionVectorPredictor(%struct.State* nonnull %0, i64 %5396, %struct.Memory* %MEMORY.77)
  %.pre244 = load i64, i64* %RBP.i, align 8
  %.pre245 = load i64, i64* %3, align 8
  br label %block_.L_4745e7

block_.L_4745e7:                                  ; preds = %block_474591, %block_.L_474584
  %5401 = phi i64 [ %5361, %block_.L_474584 ], [ %.pre245, %block_474591 ]
  %5402 = phi i64 [ %5342, %block_.L_474584 ], [ %.pre244, %block_474591 ]
  %MEMORY.78 = phi %struct.Memory* [ %MEMORY.77, %block_.L_474584 ], [ %call2_4745e2, %block_474591 ]
  %5403 = add i64 %5402, -8
  %5404 = add i64 %5401, 7
  store i64 %5404, i64* %3, align 8
  %5405 = inttoptr i64 %5403 to i32*
  store i32 0, i32* %5405, align 4
  %DX.i1302 = bitcast %union.anon* %315 to i16*
  %.pre246 = load i64, i64* %3, align 8
  br label %block_.L_4745ee

block_.L_4745ee:                                  ; preds = %block_.L_474a68, %block_.L_4745e7
  %5406 = phi i64 [ %6788, %block_.L_474a68 ], [ %.pre246, %block_.L_4745e7 ]
  %5407 = load i64, i64* %RBP.i, align 8
  %5408 = add i64 %5407, -8
  %5409 = add i64 %5406, 4
  store i64 %5409, i64* %3, align 8
  %5410 = inttoptr i64 %5408 to i32*
  %5411 = load i32, i32* %5410, align 4
  %5412 = add i32 %5411, -4
  %5413 = icmp ult i32 %5411, 4
  %5414 = zext i1 %5413 to i8
  store i8 %5414, i8* %14, align 1
  %5415 = and i32 %5412, 255
  %5416 = tail call i32 @llvm.ctpop.i32(i32 %5415)
  %5417 = trunc i32 %5416 to i8
  %5418 = and i8 %5417, 1
  %5419 = xor i8 %5418, 1
  store i8 %5419, i8* %21, align 1
  %5420 = xor i32 %5412, %5411
  %5421 = lshr i32 %5420, 4
  %5422 = trunc i32 %5421 to i8
  %5423 = and i8 %5422, 1
  store i8 %5423, i8* %27, align 1
  %5424 = icmp eq i32 %5412, 0
  %5425 = zext i1 %5424 to i8
  store i8 %5425, i8* %30, align 1
  %5426 = lshr i32 %5412, 31
  %5427 = trunc i32 %5426 to i8
  store i8 %5427, i8* %33, align 1
  %5428 = lshr i32 %5411, 31
  %5429 = xor i32 %5426, %5428
  %5430 = add nuw nsw i32 %5429, %5428
  %5431 = icmp eq i32 %5430, 2
  %5432 = zext i1 %5431 to i8
  store i8 %5432, i8* %39, align 1
  %5433 = icmp ne i8 %5427, 0
  %5434 = xor i1 %5433, %5431
  %.v309 = select i1 %5434, i64 10, i64 1165
  %5435 = add i64 %5406, %.v309
  store i64 %5435, i64* %3, align 8
  br i1 %5434, label %block_4745f8, label %block_.L_474a7b

block_4745f8:                                     ; preds = %block_.L_4745ee
  %5436 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5436, i64* %RAX.i4266, align 8
  %5437 = add i64 %5436, 156
  %5438 = add i64 %5435, 14
  store i64 %5438, i64* %3, align 8
  %5439 = inttoptr i64 %5437 to i32*
  %5440 = load i32, i32* %5439, align 4
  %5441 = sext i32 %5440 to i64
  %5442 = ashr i64 %5441, 1
  %5443 = lshr i64 %5442, 1
  %5444 = trunc i64 %5442 to i8
  %5445 = and i8 %5444, 1
  %5446 = trunc i64 %5443 to i32
  %5447 = and i64 %5443, 4294967295
  store i64 %5447, i64* %RCX.i4448, align 8
  store i8 %5445, i8* %14, align 1
  %5448 = and i32 %5446, 255
  %5449 = tail call i32 @llvm.ctpop.i32(i32 %5448)
  %5450 = trunc i32 %5449 to i8
  %5451 = and i8 %5450, 1
  %5452 = xor i8 %5451, 1
  store i8 %5452, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5453 = icmp eq i32 %5446, 0
  %5454 = zext i1 %5453 to i8
  store i8 %5454, i8* %30, align 1
  %5455 = lshr i64 %5442, 32
  %5456 = trunc i64 %5455 to i8
  %5457 = and i8 %5456, 1
  store i8 %5457, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5458 = add i64 %5435, 20
  store i64 %5458, i64* %3, align 8
  %5459 = trunc i64 %5443 to i32
  %5460 = load i32, i32* %5410, align 4
  %5461 = add i32 %5460, %5459
  %5462 = zext i32 %5461 to i64
  store i64 %5462, i64* %RCX.i4448, align 8
  %5463 = icmp ult i32 %5461, %5459
  %5464 = icmp ult i32 %5461, %5460
  %5465 = or i1 %5463, %5464
  %5466 = zext i1 %5465 to i8
  store i8 %5466, i8* %14, align 1
  %5467 = and i32 %5461, 255
  %5468 = tail call i32 @llvm.ctpop.i32(i32 %5467)
  %5469 = trunc i32 %5468 to i8
  %5470 = and i8 %5469, 1
  %5471 = xor i8 %5470, 1
  store i8 %5471, i8* %21, align 1
  %5472 = xor i32 %5460, %5459
  %5473 = xor i32 %5472, %5461
  %5474 = lshr i32 %5473, 4
  %5475 = trunc i32 %5474 to i8
  %5476 = and i8 %5475, 1
  store i8 %5476, i8* %27, align 1
  %5477 = icmp eq i32 %5461, 0
  %5478 = zext i1 %5477 to i8
  store i8 %5478, i8* %30, align 1
  %5479 = lshr i32 %5461, 31
  %5480 = trunc i32 %5479 to i8
  store i8 %5480, i8* %33, align 1
  %5481 = lshr i64 %5442, 32
  %5482 = trunc i64 %5481 to i32
  %5483 = and i32 %5482, 1
  %5484 = lshr i32 %5460, 31
  %5485 = xor i32 %5479, %5483
  %5486 = xor i32 %5479, %5484
  %5487 = add nuw nsw i32 %5485, %5486
  %5488 = icmp eq i32 %5487, 2
  %5489 = zext i1 %5488 to i8
  store i8 %5489, i8* %39, align 1
  %5490 = add i64 %5407, -16
  %5491 = add i64 %5435, 23
  store i64 %5491, i64* %3, align 8
  %5492 = inttoptr i64 %5490 to i32*
  store i32 %5461, i32* %5492, align 4
  %5493 = load i64, i64* %3, align 8
  %5494 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5494, i64* %RAX.i4266, align 8
  %5495 = add i64 %5494, 172
  %5496 = add i64 %5493, 14
  store i64 %5496, i64* %3, align 8
  %5497 = inttoptr i64 %5495 to i32*
  %5498 = load i32, i32* %5497, align 4
  %5499 = sext i32 %5498 to i64
  %5500 = ashr i64 %5499, 1
  %5501 = lshr i64 %5500, 1
  %5502 = trunc i64 %5500 to i8
  %5503 = and i8 %5502, 1
  %5504 = trunc i64 %5501 to i32
  %5505 = and i64 %5501, 4294967295
  store i64 %5505, i64* %RCX.i4448, align 8
  store i8 %5503, i8* %14, align 1
  %5506 = and i32 %5504, 255
  %5507 = tail call i32 @llvm.ctpop.i32(i32 %5506)
  %5508 = trunc i32 %5507 to i8
  %5509 = and i8 %5508, 1
  %5510 = xor i8 %5509, 1
  store i8 %5510, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5511 = icmp eq i32 %5504, 0
  %5512 = zext i1 %5511 to i8
  store i8 %5512, i8* %30, align 1
  %5513 = lshr i64 %5500, 32
  %5514 = trunc i64 %5513 to i8
  %5515 = and i8 %5514, 1
  store i8 %5515, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5516 = load i64, i64* %RBP.i, align 8
  %5517 = add i64 %5516, -8
  %5518 = add i64 %5493, 20
  store i64 %5518, i64* %3, align 8
  %5519 = trunc i64 %5501 to i32
  %5520 = inttoptr i64 %5517 to i32*
  %5521 = load i32, i32* %5520, align 4
  %5522 = add i32 %5521, %5519
  %5523 = zext i32 %5522 to i64
  store i64 %5523, i64* %RCX.i4448, align 8
  %5524 = icmp ult i32 %5522, %5519
  %5525 = icmp ult i32 %5522, %5521
  %5526 = or i1 %5524, %5525
  %5527 = zext i1 %5526 to i8
  store i8 %5527, i8* %14, align 1
  %5528 = and i32 %5522, 255
  %5529 = tail call i32 @llvm.ctpop.i32(i32 %5528)
  %5530 = trunc i32 %5529 to i8
  %5531 = and i8 %5530, 1
  %5532 = xor i8 %5531, 1
  store i8 %5532, i8* %21, align 1
  %5533 = xor i32 %5521, %5519
  %5534 = xor i32 %5533, %5522
  %5535 = lshr i32 %5534, 4
  %5536 = trunc i32 %5535 to i8
  %5537 = and i8 %5536, 1
  store i8 %5537, i8* %27, align 1
  %5538 = icmp eq i32 %5522, 0
  %5539 = zext i1 %5538 to i8
  store i8 %5539, i8* %30, align 1
  %5540 = lshr i32 %5522, 31
  %5541 = trunc i32 %5540 to i8
  store i8 %5541, i8* %33, align 1
  %5542 = lshr i64 %5500, 32
  %5543 = trunc i64 %5542 to i32
  %5544 = and i32 %5543, 1
  %5545 = lshr i32 %5521, 31
  %5546 = xor i32 %5540, %5544
  %5547 = xor i32 %5540, %5545
  %5548 = add nuw nsw i32 %5546, %5547
  %5549 = icmp eq i32 %5548, 2
  %5550 = zext i1 %5549 to i8
  store i8 %5550, i8* %39, align 1
  %5551 = add i64 %5516, -24
  %5552 = add i64 %5493, 23
  store i64 %5552, i64* %3, align 8
  %5553 = inttoptr i64 %5551 to i32*
  store i32 %5522, i32* %5553, align 4
  %5554 = load i64, i64* %RBP.i, align 8
  %5555 = add i64 %5554, -4
  %5556 = load i64, i64* %3, align 8
  %5557 = add i64 %5556, 7
  store i64 %5557, i64* %3, align 8
  %5558 = inttoptr i64 %5555 to i32*
  store i32 0, i32* %5558, align 4
  %.pre247 = load i64, i64* %3, align 8
  br label %block_.L_47462d

block_.L_47462d:                                  ; preds = %block_.L_474a55, %block_4745f8
  %5559 = phi i64 [ %6758, %block_.L_474a55 ], [ %.pre247, %block_4745f8 ]
  %5560 = load i64, i64* %RBP.i, align 8
  %5561 = add i64 %5560, -4
  %5562 = add i64 %5559, 4
  store i64 %5562, i64* %3, align 8
  %5563 = inttoptr i64 %5561 to i32*
  %5564 = load i32, i32* %5563, align 4
  %5565 = add i32 %5564, -4
  %5566 = icmp ult i32 %5564, 4
  %5567 = zext i1 %5566 to i8
  store i8 %5567, i8* %14, align 1
  %5568 = and i32 %5565, 255
  %5569 = tail call i32 @llvm.ctpop.i32(i32 %5568)
  %5570 = trunc i32 %5569 to i8
  %5571 = and i8 %5570, 1
  %5572 = xor i8 %5571, 1
  store i8 %5572, i8* %21, align 1
  %5573 = xor i32 %5565, %5564
  %5574 = lshr i32 %5573, 4
  %5575 = trunc i32 %5574 to i8
  %5576 = and i8 %5575, 1
  store i8 %5576, i8* %27, align 1
  %5577 = icmp eq i32 %5565, 0
  %5578 = zext i1 %5577 to i8
  store i8 %5578, i8* %30, align 1
  %5579 = lshr i32 %5565, 31
  %5580 = trunc i32 %5579 to i8
  store i8 %5580, i8* %33, align 1
  %5581 = lshr i32 %5564, 31
  %5582 = xor i32 %5579, %5581
  %5583 = add nuw nsw i32 %5582, %5581
  %5584 = icmp eq i32 %5583, 2
  %5585 = zext i1 %5584 to i8
  store i8 %5585, i8* %39, align 1
  %5586 = icmp ne i8 %5580, 0
  %5587 = xor i1 %5586, %5584
  %.v281 = select i1 %5587, i64 10, i64 1083
  %5588 = add i64 %5559, %.v281
  store i64 %5588, i64* %3, align 8
  br i1 %5587, label %block_474637, label %block_.L_474a68

block_474637:                                     ; preds = %block_.L_47462d
  %5589 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5589, i64* %RAX.i4266, align 8
  %5590 = add i64 %5589, 152
  %5591 = add i64 %5588, 14
  store i64 %5591, i64* %3, align 8
  %5592 = inttoptr i64 %5590 to i32*
  %5593 = load i32, i32* %5592, align 4
  %5594 = sext i32 %5593 to i64
  %5595 = ashr i64 %5594, 1
  %5596 = lshr i64 %5595, 1
  %5597 = trunc i64 %5595 to i8
  %5598 = and i8 %5597, 1
  %5599 = trunc i64 %5596 to i32
  %5600 = and i64 %5596, 4294967295
  store i64 %5600, i64* %RCX.i4448, align 8
  store i8 %5598, i8* %14, align 1
  %5601 = and i32 %5599, 255
  %5602 = tail call i32 @llvm.ctpop.i32(i32 %5601)
  %5603 = trunc i32 %5602 to i8
  %5604 = and i8 %5603, 1
  %5605 = xor i8 %5604, 1
  store i8 %5605, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5606 = icmp eq i32 %5599, 0
  %5607 = zext i1 %5606 to i8
  store i8 %5607, i8* %30, align 1
  %5608 = lshr i64 %5595, 32
  %5609 = trunc i64 %5608 to i8
  %5610 = and i8 %5609, 1
  store i8 %5610, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5611 = add i64 %5588, 20
  store i64 %5611, i64* %3, align 8
  %5612 = trunc i64 %5596 to i32
  %5613 = load i32, i32* %5563, align 4
  %5614 = add i32 %5613, %5612
  %5615 = zext i32 %5614 to i64
  store i64 %5615, i64* %RCX.i4448, align 8
  %5616 = icmp ult i32 %5614, %5612
  %5617 = icmp ult i32 %5614, %5613
  %5618 = or i1 %5616, %5617
  %5619 = zext i1 %5618 to i8
  store i8 %5619, i8* %14, align 1
  %5620 = and i32 %5614, 255
  %5621 = tail call i32 @llvm.ctpop.i32(i32 %5620)
  %5622 = trunc i32 %5621 to i8
  %5623 = and i8 %5622, 1
  %5624 = xor i8 %5623, 1
  store i8 %5624, i8* %21, align 1
  %5625 = xor i32 %5613, %5612
  %5626 = xor i32 %5625, %5614
  %5627 = lshr i32 %5626, 4
  %5628 = trunc i32 %5627 to i8
  %5629 = and i8 %5628, 1
  store i8 %5629, i8* %27, align 1
  %5630 = icmp eq i32 %5614, 0
  %5631 = zext i1 %5630 to i8
  store i8 %5631, i8* %30, align 1
  %5632 = lshr i32 %5614, 31
  %5633 = trunc i32 %5632 to i8
  store i8 %5633, i8* %33, align 1
  %5634 = lshr i64 %5595, 32
  %5635 = trunc i64 %5634 to i32
  %5636 = and i32 %5635, 1
  %5637 = lshr i32 %5613, 31
  %5638 = xor i32 %5632, %5636
  %5639 = xor i32 %5632, %5637
  %5640 = add nuw nsw i32 %5638, %5639
  %5641 = icmp eq i32 %5640, 2
  %5642 = zext i1 %5641 to i8
  store i8 %5642, i8* %39, align 1
  %5643 = add i64 %5560, -12
  %5644 = add i64 %5588, 23
  store i64 %5644, i64* %3, align 8
  %5645 = inttoptr i64 %5643 to i32*
  store i32 %5614, i32* %5645, align 4
  %5646 = load i64, i64* %3, align 8
  %5647 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5647, i64* %RAX.i4266, align 8
  %5648 = add i64 %5647, 168
  %5649 = add i64 %5646, 14
  store i64 %5649, i64* %3, align 8
  %5650 = inttoptr i64 %5648 to i32*
  %5651 = load i32, i32* %5650, align 4
  %5652 = sext i32 %5651 to i64
  %5653 = ashr i64 %5652, 1
  %5654 = lshr i64 %5653, 1
  %5655 = trunc i64 %5653 to i8
  %5656 = and i8 %5655, 1
  %5657 = trunc i64 %5654 to i32
  %5658 = and i64 %5654, 4294967295
  store i64 %5658, i64* %RCX.i4448, align 8
  store i8 %5656, i8* %14, align 1
  %5659 = and i32 %5657, 255
  %5660 = tail call i32 @llvm.ctpop.i32(i32 %5659)
  %5661 = trunc i32 %5660 to i8
  %5662 = and i8 %5661, 1
  %5663 = xor i8 %5662, 1
  store i8 %5663, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5664 = icmp eq i32 %5657, 0
  %5665 = zext i1 %5664 to i8
  store i8 %5665, i8* %30, align 1
  %5666 = lshr i64 %5653, 32
  %5667 = trunc i64 %5666 to i8
  %5668 = and i8 %5667, 1
  store i8 %5668, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5669 = load i64, i64* %RBP.i, align 8
  %5670 = add i64 %5669, -4
  %5671 = add i64 %5646, 20
  store i64 %5671, i64* %3, align 8
  %5672 = trunc i64 %5654 to i32
  %5673 = inttoptr i64 %5670 to i32*
  %5674 = load i32, i32* %5673, align 4
  %5675 = add i32 %5674, %5672
  %5676 = zext i32 %5675 to i64
  store i64 %5676, i64* %RCX.i4448, align 8
  %5677 = icmp ult i32 %5675, %5672
  %5678 = icmp ult i32 %5675, %5674
  %5679 = or i1 %5677, %5678
  %5680 = zext i1 %5679 to i8
  store i8 %5680, i8* %14, align 1
  %5681 = and i32 %5675, 255
  %5682 = tail call i32 @llvm.ctpop.i32(i32 %5681)
  %5683 = trunc i32 %5682 to i8
  %5684 = and i8 %5683, 1
  %5685 = xor i8 %5684, 1
  store i8 %5685, i8* %21, align 1
  %5686 = xor i32 %5674, %5672
  %5687 = xor i32 %5686, %5675
  %5688 = lshr i32 %5687, 4
  %5689 = trunc i32 %5688 to i8
  %5690 = and i8 %5689, 1
  store i8 %5690, i8* %27, align 1
  %5691 = icmp eq i32 %5675, 0
  %5692 = zext i1 %5691 to i8
  store i8 %5692, i8* %30, align 1
  %5693 = lshr i32 %5675, 31
  %5694 = trunc i32 %5693 to i8
  store i8 %5694, i8* %33, align 1
  %5695 = lshr i64 %5653, 32
  %5696 = trunc i64 %5695 to i32
  %5697 = and i32 %5696, 1
  %5698 = lshr i32 %5674, 31
  %5699 = xor i32 %5693, %5697
  %5700 = xor i32 %5693, %5698
  %5701 = add nuw nsw i32 %5699, %5700
  %5702 = icmp eq i32 %5701, 2
  %5703 = zext i1 %5702 to i8
  store i8 %5703, i8* %39, align 1
  %5704 = add i64 %5669, -20
  %5705 = add i64 %5646, 23
  store i64 %5705, i64* %3, align 8
  %5706 = inttoptr i64 %5704 to i32*
  store i32 %5675, i32* %5706, align 4
  %5707 = load i64, i64* %RBP.i, align 8
  %5708 = add i64 %5707, -98
  %5709 = load i64, i64* %3, align 8
  %5710 = add i64 %5709, 4
  store i64 %5710, i64* %3, align 8
  %5711 = inttoptr i64 %5708 to i16*
  %5712 = load i16, i16* %5711, align 2
  %5713 = sext i16 %5712 to i64
  %5714 = and i64 %5713, 4294967295
  store i64 %5714, i64* %RCX.i4448, align 8
  %5715 = sext i16 %5712 to i32
  %5716 = add i64 %5709, 7
  store i8 0, i8* %14, align 1
  %5717 = and i32 %5715, 255
  %5718 = tail call i32 @llvm.ctpop.i32(i32 %5717)
  %5719 = trunc i32 %5718 to i8
  %5720 = and i8 %5719, 1
  %5721 = xor i8 %5720, 1
  store i8 %5721, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5722 = icmp eq i16 %5712, 0
  %5723 = zext i1 %5722 to i8
  store i8 %5723, i8* %30, align 1
  %5724 = lshr i32 %5715, 31
  %5725 = trunc i32 %5724 to i8
  store i8 %5725, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5726 = icmp ne i8 %5725, 0
  %.v139 = select i1 %5726, i64 267, i64 6
  %5727 = add i64 %5716, %.v139
  store i64 %5727, i64* %3, align 8
  br i1 %5726, label %block_.L_474777, label %block_474672

block_474672:                                     ; preds = %block_474637
  %5728 = add i64 %5727, 5
  store i64 %5728, i64* %3, align 8
  %5729 = load i16, i16* %5711, align 2
  store i8 0, i8* %14, align 1
  %5730 = and i16 %5729, 255
  %5731 = zext i16 %5730 to i32
  %5732 = tail call i32 @llvm.ctpop.i32(i32 %5731)
  %5733 = trunc i32 %5732 to i8
  %5734 = and i8 %5733, 1
  %5735 = xor i8 %5734, 1
  store i8 %5735, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5736 = icmp eq i16 %5729, 0
  %5737 = zext i1 %5736 to i8
  store i8 %5737, i8* %30, align 1
  %5738 = lshr i16 %5729, 15
  %5739 = trunc i16 %5738 to i8
  store i8 %5739, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v310 = select i1 %5736, i64 11, i64 140
  %5740 = add i64 %5727, %.v310
  store i64 %5740, i64* %3, align 8
  br i1 %5736, label %block_47467d, label %block_.L_4746fe

block_47467d:                                     ; preds = %block_474672
  %5741 = add i64 %5707, -48
  %5742 = add i64 %5740, 4
  store i64 %5742, i64* %3, align 8
  %5743 = inttoptr i64 %5741 to i64*
  %5744 = load i64, i64* %5743, align 8
  store i64 %5744, i64* %RAX.i4266, align 8
  %5745 = add i64 %5707, -20
  %5746 = add i64 %5740, 8
  store i64 %5746, i64* %3, align 8
  %5747 = inttoptr i64 %5745 to i32*
  %5748 = load i32, i32* %5747, align 4
  %5749 = sext i32 %5748 to i64
  store i64 %5749, i64* %RCX.i4448, align 8
  %5750 = shl nsw i64 %5749, 3
  %5751 = add i64 %5750, %5744
  %5752 = add i64 %5740, 12
  store i64 %5752, i64* %3, align 8
  %5753 = inttoptr i64 %5751 to i64*
  %5754 = load i64, i64* %5753, align 8
  store i64 %5754, i64* %RAX.i4266, align 8
  %5755 = add i64 %5707, -24
  %5756 = add i64 %5740, 16
  store i64 %5756, i64* %3, align 8
  %5757 = inttoptr i64 %5755 to i32*
  %5758 = load i32, i32* %5757, align 4
  %5759 = sext i32 %5758 to i64
  store i64 %5759, i64* %RCX.i4448, align 8
  %5760 = add i64 %5754, %5759
  %5761 = add i64 %5740, 20
  store i64 %5761, i64* %3, align 8
  %5762 = inttoptr i64 %5760 to i8*
  %5763 = load i8, i8* %5762, align 1
  store i8 0, i8* %14, align 1
  %5764 = zext i8 %5763 to i32
  %5765 = tail call i32 @llvm.ctpop.i32(i32 %5764)
  %5766 = trunc i32 %5765 to i8
  %5767 = and i8 %5766, 1
  %5768 = xor i8 %5767, 1
  store i8 %5768, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5769 = icmp eq i8 %5763, 0
  %5770 = zext i1 %5769 to i8
  store i8 %5770, i8* %30, align 1
  %5771 = lshr i8 %5763, 7
  store i8 %5771, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v315 = select i1 %5769, i64 26, i64 129
  %5772 = add i64 %5740, %.v315
  store i64 %5772, i64* %3, align 8
  br i1 %5769, label %block_474697, label %block_.L_4746fe

block_474697:                                     ; preds = %block_47467d
  %5773 = add i64 %5707, -32
  %5774 = add i64 %5772, 4
  store i64 %5774, i64* %3, align 8
  %5775 = inttoptr i64 %5773 to i64*
  %5776 = load i64, i64* %5775, align 8
  store i64 %5776, i64* %RAX.i4266, align 8
  %5777 = add i64 %5707, -4
  %5778 = add i64 %5772, 8
  store i64 %5778, i64* %3, align 8
  %5779 = inttoptr i64 %5777 to i32*
  %5780 = load i32, i32* %5779, align 4
  %5781 = sext i32 %5780 to i64
  store i64 %5781, i64* %RCX.i4448, align 8
  %5782 = shl nsw i64 %5781, 3
  %5783 = add i64 %5782, %5776
  %5784 = add i64 %5772, 12
  store i64 %5784, i64* %3, align 8
  %5785 = inttoptr i64 %5783 to i64*
  %5786 = load i64, i64* %5785, align 8
  store i64 %5786, i64* %RAX.i4266, align 8
  %5787 = add i64 %5707, -8
  %5788 = add i64 %5772, 16
  store i64 %5788, i64* %3, align 8
  %5789 = inttoptr i64 %5787 to i32*
  %5790 = load i32, i32* %5789, align 4
  %5791 = sext i32 %5790 to i64
  store i64 %5791, i64* %RCX.i4448, align 8
  %5792 = shl nsw i64 %5791, 3
  %5793 = add i64 %5792, %5786
  %5794 = add i64 %5772, 20
  store i64 %5794, i64* %3, align 8
  %5795 = inttoptr i64 %5793 to i64*
  %5796 = load i64, i64* %5795, align 8
  store i64 %5796, i64* %RAX.i4266, align 8
  %5797 = add i64 %5772, 23
  store i64 %5797, i64* %3, align 8
  %5798 = inttoptr i64 %5796 to i64*
  %5799 = load i64, i64* %5798, align 8
  store i64 %5799, i64* %RAX.i4266, align 8
  %5800 = add i64 %5772, 26
  store i64 %5800, i64* %3, align 8
  %5801 = inttoptr i64 %5799 to i64*
  %5802 = load i64, i64* %5801, align 8
  store i64 %5802, i64* %RAX.i4266, align 8
  %5803 = add i64 %5772, 29
  store i64 %5803, i64* %3, align 8
  %5804 = inttoptr i64 %5802 to i64*
  %5805 = load i64, i64* %5804, align 8
  store i64 %5805, i64* %RAX.i4266, align 8
  %5806 = add i64 %5772, 34
  store i64 %5806, i64* %3, align 8
  %5807 = inttoptr i64 %5805 to i16*
  store i16 0, i16* %5807, align 2
  %5808 = load i64, i64* %RBP.i, align 8
  %5809 = add i64 %5808, -32
  %5810 = load i64, i64* %3, align 8
  %5811 = add i64 %5810, 4
  store i64 %5811, i64* %3, align 8
  %5812 = inttoptr i64 %5809 to i64*
  %5813 = load i64, i64* %5812, align 8
  store i64 %5813, i64* %RAX.i4266, align 8
  %5814 = add i64 %5808, -4
  %5815 = add i64 %5810, 8
  store i64 %5815, i64* %3, align 8
  %5816 = inttoptr i64 %5814 to i32*
  %5817 = load i32, i32* %5816, align 4
  %5818 = sext i32 %5817 to i64
  store i64 %5818, i64* %RCX.i4448, align 8
  %5819 = shl nsw i64 %5818, 3
  %5820 = add i64 %5819, %5813
  %5821 = add i64 %5810, 12
  store i64 %5821, i64* %3, align 8
  %5822 = inttoptr i64 %5820 to i64*
  %5823 = load i64, i64* %5822, align 8
  store i64 %5823, i64* %RAX.i4266, align 8
  %5824 = add i64 %5808, -8
  %5825 = add i64 %5810, 16
  store i64 %5825, i64* %3, align 8
  %5826 = inttoptr i64 %5824 to i32*
  %5827 = load i32, i32* %5826, align 4
  %5828 = sext i32 %5827 to i64
  store i64 %5828, i64* %RCX.i4448, align 8
  %5829 = shl nsw i64 %5828, 3
  %5830 = add i64 %5829, %5823
  %5831 = add i64 %5810, 20
  store i64 %5831, i64* %3, align 8
  %5832 = inttoptr i64 %5830 to i64*
  %5833 = load i64, i64* %5832, align 8
  store i64 %5833, i64* %RAX.i4266, align 8
  %5834 = add i64 %5810, 23
  store i64 %5834, i64* %3, align 8
  %5835 = inttoptr i64 %5833 to i64*
  %5836 = load i64, i64* %5835, align 8
  store i64 %5836, i64* %RAX.i4266, align 8
  %5837 = add i64 %5810, 26
  store i64 %5837, i64* %3, align 8
  %5838 = inttoptr i64 %5836 to i64*
  %5839 = load i64, i64* %5838, align 8
  store i64 %5839, i64* %RAX.i4266, align 8
  %5840 = add i64 %5810, 29
  store i64 %5840, i64* %3, align 8
  %5841 = inttoptr i64 %5839 to i64*
  %5842 = load i64, i64* %5841, align 8
  %5843 = add i64 %5842, 2
  %5844 = add i64 %5810, 35
  store i64 %5844, i64* %3, align 8
  %5845 = inttoptr i64 %5843 to i16*
  store i16 0, i16* %5845, align 2
  %5846 = load i64, i64* %3, align 8
  %5847 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %5847, i64* %RAX.i4266, align 8
  %5848 = add i64 %5846, 11
  store i64 %5848, i64* %3, align 8
  %5849 = inttoptr i64 %5847 to i64*
  %5850 = load i64, i64* %5849, align 8
  store i64 %5850, i64* %RAX.i4266, align 8
  %5851 = load i64, i64* %RBP.i, align 8
  %5852 = add i64 %5851, -12
  %5853 = add i64 %5846, 15
  store i64 %5853, i64* %3, align 8
  %5854 = inttoptr i64 %5852 to i32*
  %5855 = load i32, i32* %5854, align 4
  %5856 = sext i32 %5855 to i64
  store i64 %5856, i64* %RCX.i4448, align 8
  %5857 = shl nsw i64 %5856, 3
  %5858 = add i64 %5857, %5850
  %5859 = add i64 %5846, 19
  store i64 %5859, i64* %3, align 8
  %5860 = inttoptr i64 %5858 to i64*
  %5861 = load i64, i64* %5860, align 8
  store i64 %5861, i64* %RAX.i4266, align 8
  %5862 = add i64 %5851, -16
  %5863 = add i64 %5846, 23
  store i64 %5863, i64* %3, align 8
  %5864 = inttoptr i64 %5862 to i32*
  %5865 = load i32, i32* %5864, align 4
  %5866 = sext i32 %5865 to i64
  store i64 %5866, i64* %RCX.i4448, align 8
  %5867 = shl nsw i64 %5866, 1
  %5868 = add i64 %5867, %5861
  %5869 = add i64 %5846, 29
  store i64 %5869, i64* %3, align 8
  %5870 = inttoptr i64 %5868 to i16*
  store i16 0, i16* %5870, align 2
  %5871 = load i64, i64* %3, align 8
  %5872 = add i64 %5871, 121
  store i64 %5872, i64* %3, align 8
  br label %block_.L_474772

block_.L_4746fe:                                  ; preds = %block_47467d, %block_474672
  %5873 = phi i64 [ %5772, %block_47467d ], [ %5740, %block_474672 ]
  %5874 = add i64 %5707, -104
  %5875 = add i64 %5873, 4
  store i64 %5875, i64* %3, align 8
  %5876 = inttoptr i64 %5874 to i16*
  %5877 = load i16, i16* %5876, align 2
  store i16 %5877, i16* %AX.i1998, align 2
  %5878 = add i64 %5707, -32
  %5879 = add i64 %5873, 8
  store i64 %5879, i64* %3, align 8
  %5880 = inttoptr i64 %5878 to i64*
  %5881 = load i64, i64* %5880, align 8
  store i64 %5881, i64* %RCX.i4448, align 8
  %5882 = add i64 %5707, -4
  %5883 = add i64 %5873, 12
  store i64 %5883, i64* %3, align 8
  %5884 = inttoptr i64 %5882 to i32*
  %5885 = load i32, i32* %5884, align 4
  %5886 = sext i32 %5885 to i64
  store i64 %5886, i64* %RDX.i4301, align 8
  %5887 = shl nsw i64 %5886, 3
  %5888 = add i64 %5887, %5881
  %5889 = add i64 %5873, 16
  store i64 %5889, i64* %3, align 8
  %5890 = inttoptr i64 %5888 to i64*
  %5891 = load i64, i64* %5890, align 8
  store i64 %5891, i64* %RCX.i4448, align 8
  %5892 = add i64 %5707, -8
  %5893 = add i64 %5873, 20
  store i64 %5893, i64* %3, align 8
  %5894 = inttoptr i64 %5892 to i32*
  %5895 = load i32, i32* %5894, align 4
  %5896 = sext i32 %5895 to i64
  store i64 %5896, i64* %RDX.i4301, align 8
  %5897 = shl nsw i64 %5896, 3
  %5898 = add i64 %5897, %5891
  %5899 = add i64 %5873, 24
  store i64 %5899, i64* %3, align 8
  %5900 = inttoptr i64 %5898 to i64*
  %5901 = load i64, i64* %5900, align 8
  store i64 %5901, i64* %RCX.i4448, align 8
  %5902 = add i64 %5873, 27
  store i64 %5902, i64* %3, align 8
  %5903 = inttoptr i64 %5901 to i64*
  %5904 = load i64, i64* %5903, align 8
  store i64 %5904, i64* %RCX.i4448, align 8
  %5905 = add i64 %5873, 32
  store i64 %5905, i64* %3, align 8
  %5906 = load i16, i16* %5711, align 2
  %5907 = sext i16 %5906 to i64
  store i64 %5907, i64* %RDX.i4301, align 8
  %5908 = shl nsw i64 %5907, 3
  %5909 = add i64 %5908, %5904
  %5910 = add i64 %5873, 36
  store i64 %5910, i64* %3, align 8
  %5911 = inttoptr i64 %5909 to i64*
  %5912 = load i64, i64* %5911, align 8
  store i64 %5912, i64* %RCX.i4448, align 8
  %5913 = add i64 %5873, 39
  store i64 %5913, i64* %3, align 8
  %5914 = inttoptr i64 %5912 to i64*
  %5915 = load i64, i64* %5914, align 8
  store i64 %5915, i64* %RCX.i4448, align 8
  %5916 = add i64 %5873, 42
  store i64 %5916, i64* %3, align 8
  %5917 = inttoptr i64 %5915 to i16*
  store i16 %5877, i16* %5917, align 2
  %5918 = load i64, i64* %RBP.i, align 8
  %5919 = add i64 %5918, -102
  %5920 = load i64, i64* %3, align 8
  %5921 = add i64 %5920, 4
  store i64 %5921, i64* %3, align 8
  %5922 = inttoptr i64 %5919 to i16*
  %5923 = load i16, i16* %5922, align 2
  store i16 %5923, i16* %AX.i1998, align 2
  %5924 = add i64 %5918, -32
  %5925 = add i64 %5920, 8
  store i64 %5925, i64* %3, align 8
  %5926 = inttoptr i64 %5924 to i64*
  %5927 = load i64, i64* %5926, align 8
  store i64 %5927, i64* %RCX.i4448, align 8
  %5928 = add i64 %5918, -4
  %5929 = add i64 %5920, 12
  store i64 %5929, i64* %3, align 8
  %5930 = inttoptr i64 %5928 to i32*
  %5931 = load i32, i32* %5930, align 4
  %5932 = sext i32 %5931 to i64
  store i64 %5932, i64* %RDX.i4301, align 8
  %5933 = shl nsw i64 %5932, 3
  %5934 = add i64 %5933, %5927
  %5935 = add i64 %5920, 16
  store i64 %5935, i64* %3, align 8
  %5936 = inttoptr i64 %5934 to i64*
  %5937 = load i64, i64* %5936, align 8
  store i64 %5937, i64* %RCX.i4448, align 8
  %5938 = add i64 %5918, -8
  %5939 = add i64 %5920, 20
  store i64 %5939, i64* %3, align 8
  %5940 = inttoptr i64 %5938 to i32*
  %5941 = load i32, i32* %5940, align 4
  %5942 = sext i32 %5941 to i64
  store i64 %5942, i64* %RDX.i4301, align 8
  %5943 = shl nsw i64 %5942, 3
  %5944 = add i64 %5943, %5937
  %5945 = add i64 %5920, 24
  store i64 %5945, i64* %3, align 8
  %5946 = inttoptr i64 %5944 to i64*
  %5947 = load i64, i64* %5946, align 8
  store i64 %5947, i64* %RCX.i4448, align 8
  %5948 = add i64 %5920, 27
  store i64 %5948, i64* %3, align 8
  %5949 = inttoptr i64 %5947 to i64*
  %5950 = load i64, i64* %5949, align 8
  store i64 %5950, i64* %RCX.i4448, align 8
  %5951 = add i64 %5918, -98
  %5952 = add i64 %5920, 32
  store i64 %5952, i64* %3, align 8
  %5953 = inttoptr i64 %5951 to i16*
  %5954 = load i16, i16* %5953, align 2
  %5955 = sext i16 %5954 to i64
  store i64 %5955, i64* %RDX.i4301, align 8
  %5956 = shl nsw i64 %5955, 3
  %5957 = add i64 %5956, %5950
  %5958 = add i64 %5920, 36
  store i64 %5958, i64* %3, align 8
  %5959 = inttoptr i64 %5957 to i64*
  %5960 = load i64, i64* %5959, align 8
  store i64 %5960, i64* %RCX.i4448, align 8
  %5961 = add i64 %5920, 39
  store i64 %5961, i64* %3, align 8
  %5962 = inttoptr i64 %5960 to i64*
  %5963 = load i64, i64* %5962, align 8
  store i64 %5963, i64* %RCX.i4448, align 8
  %5964 = add i64 %5963, 2
  %5965 = add i64 %5920, 43
  store i64 %5965, i64* %3, align 8
  %5966 = inttoptr i64 %5964 to i16*
  store i16 %5923, i16* %5966, align 2
  %5967 = load i64, i64* %RBP.i, align 8
  %5968 = add i64 %5967, -98
  %5969 = load i64, i64* %3, align 8
  %5970 = add i64 %5969, 4
  store i64 %5970, i64* %3, align 8
  %5971 = inttoptr i64 %5968 to i16*
  %5972 = load i16, i16* %5971, align 2
  store i16 %5972, i16* %AX.i1998, align 2
  %5973 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %5973, i64* %RCX.i4448, align 8
  %5974 = add i64 %5969, 15
  store i64 %5974, i64* %3, align 8
  %5975 = inttoptr i64 %5973 to i64*
  %5976 = load i64, i64* %5975, align 8
  store i64 %5976, i64* %RCX.i4448, align 8
  %5977 = add i64 %5967, -12
  %5978 = add i64 %5969, 19
  store i64 %5978, i64* %3, align 8
  %5979 = inttoptr i64 %5977 to i32*
  %5980 = load i32, i32* %5979, align 4
  %5981 = sext i32 %5980 to i64
  store i64 %5981, i64* %RDX.i4301, align 8
  %5982 = shl nsw i64 %5981, 3
  %5983 = add i64 %5982, %5976
  %5984 = add i64 %5969, 23
  store i64 %5984, i64* %3, align 8
  %5985 = inttoptr i64 %5983 to i64*
  %5986 = load i64, i64* %5985, align 8
  store i64 %5986, i64* %RCX.i4448, align 8
  %5987 = add i64 %5967, -16
  %5988 = add i64 %5969, 27
  store i64 %5988, i64* %3, align 8
  %5989 = inttoptr i64 %5987 to i32*
  %5990 = load i32, i32* %5989, align 4
  %5991 = sext i32 %5990 to i64
  store i64 %5991, i64* %RDX.i4301, align 8
  %5992 = shl nsw i64 %5991, 1
  %5993 = add i64 %5992, %5986
  %5994 = add i64 %5969, 31
  store i64 %5994, i64* %3, align 8
  %5995 = inttoptr i64 %5993 to i16*
  store i16 %5972, i16* %5995, align 2
  %.pre248 = load i64, i64* %3, align 8
  br label %block_.L_474772

block_.L_474772:                                  ; preds = %block_.L_4746fe, %block_474697
  %5996 = phi i64 [ %.pre248, %block_.L_4746fe ], [ %5872, %block_474697 ]
  %5997 = add i64 %5996, 103
  store i64 %5997, i64* %3, align 8
  br label %block_.L_4747d9

block_.L_474777:                                  ; preds = %block_474637
  %5998 = add i64 %5707, -32
  %5999 = add i64 %5727, 4
  store i64 %5999, i64* %3, align 8
  %6000 = inttoptr i64 %5998 to i64*
  %6001 = load i64, i64* %6000, align 8
  store i64 %6001, i64* %RAX.i4266, align 8
  %6002 = add i64 %5707, -4
  %6003 = add i64 %5727, 8
  store i64 %6003, i64* %3, align 8
  %6004 = inttoptr i64 %6002 to i32*
  %6005 = load i32, i32* %6004, align 4
  %6006 = sext i32 %6005 to i64
  store i64 %6006, i64* %RCX.i4448, align 8
  %6007 = shl nsw i64 %6006, 3
  %6008 = add i64 %6007, %6001
  %6009 = add i64 %5727, 12
  store i64 %6009, i64* %3, align 8
  %6010 = inttoptr i64 %6008 to i64*
  %6011 = load i64, i64* %6010, align 8
  store i64 %6011, i64* %RAX.i4266, align 8
  %6012 = add i64 %5707, -8
  %6013 = add i64 %5727, 16
  store i64 %6013, i64* %3, align 8
  %6014 = inttoptr i64 %6012 to i32*
  %6015 = load i32, i32* %6014, align 4
  %6016 = sext i32 %6015 to i64
  store i64 %6016, i64* %RCX.i4448, align 8
  %6017 = shl nsw i64 %6016, 3
  %6018 = add i64 %6017, %6011
  %6019 = add i64 %5727, 20
  store i64 %6019, i64* %3, align 8
  %6020 = inttoptr i64 %6018 to i64*
  %6021 = load i64, i64* %6020, align 8
  store i64 %6021, i64* %RAX.i4266, align 8
  %6022 = add i64 %5727, 23
  store i64 %6022, i64* %3, align 8
  %6023 = inttoptr i64 %6021 to i64*
  %6024 = load i64, i64* %6023, align 8
  store i64 %6024, i64* %RAX.i4266, align 8
  %6025 = add i64 %5727, 26
  store i64 %6025, i64* %3, align 8
  %6026 = inttoptr i64 %6024 to i64*
  %6027 = load i64, i64* %6026, align 8
  store i64 %6027, i64* %RAX.i4266, align 8
  %6028 = add i64 %5727, 29
  store i64 %6028, i64* %3, align 8
  %6029 = inttoptr i64 %6027 to i64*
  %6030 = load i64, i64* %6029, align 8
  store i64 %6030, i64* %RAX.i4266, align 8
  %6031 = add i64 %5727, 34
  store i64 %6031, i64* %3, align 8
  %6032 = inttoptr i64 %6030 to i16*
  store i16 0, i16* %6032, align 2
  %6033 = load i64, i64* %RBP.i, align 8
  %6034 = add i64 %6033, -32
  %6035 = load i64, i64* %3, align 8
  %6036 = add i64 %6035, 4
  store i64 %6036, i64* %3, align 8
  %6037 = inttoptr i64 %6034 to i64*
  %6038 = load i64, i64* %6037, align 8
  store i64 %6038, i64* %RAX.i4266, align 8
  %6039 = add i64 %6033, -4
  %6040 = add i64 %6035, 8
  store i64 %6040, i64* %3, align 8
  %6041 = inttoptr i64 %6039 to i32*
  %6042 = load i32, i32* %6041, align 4
  %6043 = sext i32 %6042 to i64
  store i64 %6043, i64* %RCX.i4448, align 8
  %6044 = shl nsw i64 %6043, 3
  %6045 = add i64 %6044, %6038
  %6046 = add i64 %6035, 12
  store i64 %6046, i64* %3, align 8
  %6047 = inttoptr i64 %6045 to i64*
  %6048 = load i64, i64* %6047, align 8
  store i64 %6048, i64* %RAX.i4266, align 8
  %6049 = add i64 %6033, -8
  %6050 = add i64 %6035, 16
  store i64 %6050, i64* %3, align 8
  %6051 = inttoptr i64 %6049 to i32*
  %6052 = load i32, i32* %6051, align 4
  %6053 = sext i32 %6052 to i64
  store i64 %6053, i64* %RCX.i4448, align 8
  %6054 = shl nsw i64 %6053, 3
  %6055 = add i64 %6054, %6048
  %6056 = add i64 %6035, 20
  store i64 %6056, i64* %3, align 8
  %6057 = inttoptr i64 %6055 to i64*
  %6058 = load i64, i64* %6057, align 8
  store i64 %6058, i64* %RAX.i4266, align 8
  %6059 = add i64 %6035, 23
  store i64 %6059, i64* %3, align 8
  %6060 = inttoptr i64 %6058 to i64*
  %6061 = load i64, i64* %6060, align 8
  store i64 %6061, i64* %RAX.i4266, align 8
  %6062 = add i64 %6035, 26
  store i64 %6062, i64* %3, align 8
  %6063 = inttoptr i64 %6061 to i64*
  %6064 = load i64, i64* %6063, align 8
  store i64 %6064, i64* %RAX.i4266, align 8
  %6065 = add i64 %6035, 29
  store i64 %6065, i64* %3, align 8
  %6066 = inttoptr i64 %6064 to i64*
  %6067 = load i64, i64* %6066, align 8
  %6068 = add i64 %6067, 2
  %6069 = add i64 %6035, 35
  store i64 %6069, i64* %3, align 8
  %6070 = inttoptr i64 %6068 to i16*
  store i16 0, i16* %6070, align 2
  %6071 = load i64, i64* %3, align 8
  %6072 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %6072, i64* %RAX.i4266, align 8
  %6073 = add i64 %6071, 11
  store i64 %6073, i64* %3, align 8
  %6074 = inttoptr i64 %6072 to i64*
  %6075 = load i64, i64* %6074, align 8
  store i64 %6075, i64* %RAX.i4266, align 8
  %6076 = load i64, i64* %RBP.i, align 8
  %6077 = add i64 %6076, -12
  %6078 = add i64 %6071, 15
  store i64 %6078, i64* %3, align 8
  %6079 = inttoptr i64 %6077 to i32*
  %6080 = load i32, i32* %6079, align 4
  %6081 = sext i32 %6080 to i64
  store i64 %6081, i64* %RCX.i4448, align 8
  %6082 = shl nsw i64 %6081, 3
  %6083 = add i64 %6082, %6075
  %6084 = add i64 %6071, 19
  store i64 %6084, i64* %3, align 8
  %6085 = inttoptr i64 %6083 to i64*
  %6086 = load i64, i64* %6085, align 8
  store i64 %6086, i64* %RAX.i4266, align 8
  %6087 = add i64 %6076, -16
  %6088 = add i64 %6071, 23
  store i64 %6088, i64* %3, align 8
  %6089 = inttoptr i64 %6087 to i32*
  %6090 = load i32, i32* %6089, align 4
  %6091 = sext i32 %6090 to i64
  store i64 %6091, i64* %RCX.i4448, align 8
  %6092 = shl nsw i64 %6091, 1
  %6093 = add i64 %6092, %6086
  %6094 = add i64 %6071, 29
  store i64 %6094, i64* %3, align 8
  %6095 = inttoptr i64 %6093 to i16*
  store i16 -1, i16* %6095, align 2
  %.pre249 = load i64, i64* %3, align 8
  br label %block_.L_4747d9

block_.L_4747d9:                                  ; preds = %block_.L_474777, %block_.L_474772
  %6096 = phi i64 [ %.pre249, %block_.L_474777 ], [ %5997, %block_.L_474772 ]
  %6097 = load i64, i64* %RBP.i, align 8
  %6098 = add i64 %6097, -100
  %6099 = add i64 %6096, 4
  store i64 %6099, i64* %3, align 8
  %6100 = inttoptr i64 %6098 to i16*
  %6101 = load i16, i16* %6100, align 2
  %6102 = sext i16 %6101 to i64
  %6103 = and i64 %6102, 4294967295
  store i64 %6103, i64* %RAX.i4266, align 8
  %6104 = sext i16 %6101 to i32
  %6105 = add i64 %6096, 7
  store i8 0, i8* %14, align 1
  %6106 = and i32 %6104, 255
  %6107 = tail call i32 @llvm.ctpop.i32(i32 %6106)
  %6108 = trunc i32 %6107 to i8
  %6109 = and i8 %6108, 1
  %6110 = xor i8 %6109, 1
  store i8 %6110, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6111 = icmp eq i16 %6101, 0
  %6112 = zext i1 %6111 to i8
  store i8 %6112, i8* %30, align 1
  %6113 = lshr i32 %6104, 31
  %6114 = trunc i32 %6113 to i8
  store i8 %6114, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6115 = icmp ne i8 %6114, 0
  %.v140 = select i1 %6115, i64 277, i64 6
  %6116 = add i64 %6105, %.v140
  store i64 %6116, i64* %3, align 8
  br i1 %6115, label %block_.L_4748f5, label %block_4747e6

block_4747e6:                                     ; preds = %block_.L_4747d9
  %6117 = add i64 %6116, 4
  store i64 %6117, i64* %3, align 8
  %6118 = load i16, i16* %6100, align 2
  %6119 = sext i16 %6118 to i64
  %6120 = and i64 %6119, 4294967295
  store i64 %6120, i64* %RAX.i4266, align 8
  %6121 = sext i16 %6118 to i32
  store i8 0, i8* %14, align 1
  %6122 = and i32 %6121, 255
  %6123 = tail call i32 @llvm.ctpop.i32(i32 %6122)
  %6124 = trunc i32 %6123 to i8
  %6125 = and i8 %6124, 1
  %6126 = xor i8 %6125, 1
  store i8 %6126, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6127 = icmp eq i16 %6118, 0
  %6128 = zext i1 %6127 to i8
  store i8 %6128, i8* %30, align 1
  %6129 = lshr i32 %6121, 31
  %6130 = trunc i32 %6129 to i8
  store i8 %6130, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v311 = select i1 %6127, i64 13, i64 147
  %6131 = add i64 %6116, %.v311
  store i64 %6131, i64* %3, align 8
  br i1 %6127, label %block_4747f3, label %block_.L_474879

block_4747f3:                                     ; preds = %block_4747e6
  %6132 = add i64 %6097, -48
  %6133 = add i64 %6131, 4
  store i64 %6133, i64* %3, align 8
  %6134 = inttoptr i64 %6132 to i64*
  %6135 = load i64, i64* %6134, align 8
  store i64 %6135, i64* %RAX.i4266, align 8
  %6136 = add i64 %6097, -20
  %6137 = add i64 %6131, 8
  store i64 %6137, i64* %3, align 8
  %6138 = inttoptr i64 %6136 to i32*
  %6139 = load i32, i32* %6138, align 4
  %6140 = sext i32 %6139 to i64
  store i64 %6140, i64* %RCX.i4448, align 8
  %6141 = shl nsw i64 %6140, 3
  %6142 = add i64 %6141, %6135
  %6143 = add i64 %6131, 12
  store i64 %6143, i64* %3, align 8
  %6144 = inttoptr i64 %6142 to i64*
  %6145 = load i64, i64* %6144, align 8
  store i64 %6145, i64* %RAX.i4266, align 8
  %6146 = add i64 %6097, -24
  %6147 = add i64 %6131, 16
  store i64 %6147, i64* %3, align 8
  %6148 = inttoptr i64 %6146 to i32*
  %6149 = load i32, i32* %6148, align 4
  %6150 = sext i32 %6149 to i64
  store i64 %6150, i64* %RCX.i4448, align 8
  %6151 = add i64 %6145, %6150
  %6152 = add i64 %6131, 20
  store i64 %6152, i64* %3, align 8
  %6153 = inttoptr i64 %6151 to i8*
  %6154 = load i8, i8* %6153, align 1
  store i8 0, i8* %14, align 1
  %6155 = zext i8 %6154 to i32
  %6156 = tail call i32 @llvm.ctpop.i32(i32 %6155)
  %6157 = trunc i32 %6156 to i8
  %6158 = and i8 %6157, 1
  %6159 = xor i8 %6158, 1
  store i8 %6159, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6160 = icmp eq i8 %6154, 0
  %6161 = zext i1 %6160 to i8
  store i8 %6161, i8* %30, align 1
  %6162 = lshr i8 %6154, 7
  store i8 %6162, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v314 = select i1 %6160, i64 26, i64 134
  %6163 = add i64 %6131, %.v314
  store i64 %6163, i64* %3, align 8
  br i1 %6160, label %block_47480d, label %block_.L_474879

block_47480d:                                     ; preds = %block_4747f3
  %6164 = add i64 %6097, -32
  %6165 = add i64 %6163, 4
  store i64 %6165, i64* %3, align 8
  %6166 = inttoptr i64 %6164 to i64*
  %6167 = load i64, i64* %6166, align 8
  store i64 %6167, i64* %RAX.i4266, align 8
  %6168 = add i64 %6097, -4
  %6169 = add i64 %6163, 8
  store i64 %6169, i64* %3, align 8
  %6170 = inttoptr i64 %6168 to i32*
  %6171 = load i32, i32* %6170, align 4
  %6172 = sext i32 %6171 to i64
  store i64 %6172, i64* %RCX.i4448, align 8
  %6173 = shl nsw i64 %6172, 3
  %6174 = add i64 %6173, %6167
  %6175 = add i64 %6163, 12
  store i64 %6175, i64* %3, align 8
  %6176 = inttoptr i64 %6174 to i64*
  %6177 = load i64, i64* %6176, align 8
  store i64 %6177, i64* %RAX.i4266, align 8
  %6178 = add i64 %6097, -8
  %6179 = add i64 %6163, 16
  store i64 %6179, i64* %3, align 8
  %6180 = inttoptr i64 %6178 to i32*
  %6181 = load i32, i32* %6180, align 4
  %6182 = sext i32 %6181 to i64
  store i64 %6182, i64* %RCX.i4448, align 8
  %6183 = shl nsw i64 %6182, 3
  %6184 = add i64 %6183, %6177
  %6185 = add i64 %6163, 20
  store i64 %6185, i64* %3, align 8
  %6186 = inttoptr i64 %6184 to i64*
  %6187 = load i64, i64* %6186, align 8
  store i64 %6187, i64* %RAX.i4266, align 8
  %6188 = add i64 %6187, 8
  %6189 = add i64 %6163, 24
  store i64 %6189, i64* %3, align 8
  %6190 = inttoptr i64 %6188 to i64*
  %6191 = load i64, i64* %6190, align 8
  store i64 %6191, i64* %RAX.i4266, align 8
  %6192 = add i64 %6163, 27
  store i64 %6192, i64* %3, align 8
  %6193 = inttoptr i64 %6191 to i64*
  %6194 = load i64, i64* %6193, align 8
  store i64 %6194, i64* %RAX.i4266, align 8
  %6195 = add i64 %6163, 30
  store i64 %6195, i64* %3, align 8
  %6196 = inttoptr i64 %6194 to i64*
  %6197 = load i64, i64* %6196, align 8
  store i64 %6197, i64* %RAX.i4266, align 8
  %6198 = add i64 %6163, 35
  store i64 %6198, i64* %3, align 8
  %6199 = inttoptr i64 %6197 to i16*
  store i16 0, i16* %6199, align 2
  %6200 = load i64, i64* %RBP.i, align 8
  %6201 = add i64 %6200, -32
  %6202 = load i64, i64* %3, align 8
  %6203 = add i64 %6202, 4
  store i64 %6203, i64* %3, align 8
  %6204 = inttoptr i64 %6201 to i64*
  %6205 = load i64, i64* %6204, align 8
  store i64 %6205, i64* %RAX.i4266, align 8
  %6206 = add i64 %6200, -4
  %6207 = add i64 %6202, 8
  store i64 %6207, i64* %3, align 8
  %6208 = inttoptr i64 %6206 to i32*
  %6209 = load i32, i32* %6208, align 4
  %6210 = sext i32 %6209 to i64
  store i64 %6210, i64* %RCX.i4448, align 8
  %6211 = shl nsw i64 %6210, 3
  %6212 = add i64 %6211, %6205
  %6213 = add i64 %6202, 12
  store i64 %6213, i64* %3, align 8
  %6214 = inttoptr i64 %6212 to i64*
  %6215 = load i64, i64* %6214, align 8
  store i64 %6215, i64* %RAX.i4266, align 8
  %6216 = add i64 %6200, -8
  %6217 = add i64 %6202, 16
  store i64 %6217, i64* %3, align 8
  %6218 = inttoptr i64 %6216 to i32*
  %6219 = load i32, i32* %6218, align 4
  %6220 = sext i32 %6219 to i64
  store i64 %6220, i64* %RCX.i4448, align 8
  %6221 = shl nsw i64 %6220, 3
  %6222 = add i64 %6221, %6215
  %6223 = add i64 %6202, 20
  store i64 %6223, i64* %3, align 8
  %6224 = inttoptr i64 %6222 to i64*
  %6225 = load i64, i64* %6224, align 8
  store i64 %6225, i64* %RAX.i4266, align 8
  %6226 = add i64 %6225, 8
  %6227 = add i64 %6202, 24
  store i64 %6227, i64* %3, align 8
  %6228 = inttoptr i64 %6226 to i64*
  %6229 = load i64, i64* %6228, align 8
  store i64 %6229, i64* %RAX.i4266, align 8
  %6230 = add i64 %6202, 27
  store i64 %6230, i64* %3, align 8
  %6231 = inttoptr i64 %6229 to i64*
  %6232 = load i64, i64* %6231, align 8
  store i64 %6232, i64* %RAX.i4266, align 8
  %6233 = add i64 %6202, 30
  store i64 %6233, i64* %3, align 8
  %6234 = inttoptr i64 %6232 to i64*
  %6235 = load i64, i64* %6234, align 8
  store i64 %6235, i64* %RAX.i4266, align 8
  %6236 = add i64 %6235, 2
  %6237 = add i64 %6202, 36
  store i64 %6237, i64* %3, align 8
  %6238 = inttoptr i64 %6236 to i16*
  store i16 0, i16* %6238, align 2
  %6239 = load i64, i64* %RBP.i, align 8
  %6240 = add i64 %6239, -100
  %6241 = load i64, i64* %3, align 8
  %6242 = add i64 %6241, 4
  store i64 %6242, i64* %3, align 8
  %6243 = inttoptr i64 %6240 to i16*
  %6244 = load i16, i16* %6243, align 2
  store i16 %6244, i16* %DX.i1302, align 2
  %6245 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %6245, i64* %RAX.i4266, align 8
  %6246 = add i64 %6245, 8
  %6247 = add i64 %6241, 16
  store i64 %6247, i64* %3, align 8
  %6248 = inttoptr i64 %6246 to i64*
  %6249 = load i64, i64* %6248, align 8
  store i64 %6249, i64* %RAX.i4266, align 8
  %6250 = add i64 %6239, -12
  %6251 = add i64 %6241, 20
  store i64 %6251, i64* %3, align 8
  %6252 = inttoptr i64 %6250 to i32*
  %6253 = load i32, i32* %6252, align 4
  %6254 = sext i32 %6253 to i64
  store i64 %6254, i64* %RCX.i4448, align 8
  %6255 = shl nsw i64 %6254, 3
  %6256 = add i64 %6255, %6249
  %6257 = add i64 %6241, 24
  store i64 %6257, i64* %3, align 8
  %6258 = inttoptr i64 %6256 to i64*
  %6259 = load i64, i64* %6258, align 8
  store i64 %6259, i64* %RAX.i4266, align 8
  %6260 = add i64 %6239, -16
  %6261 = add i64 %6241, 28
  store i64 %6261, i64* %3, align 8
  %6262 = inttoptr i64 %6260 to i32*
  %6263 = load i32, i32* %6262, align 4
  %6264 = sext i32 %6263 to i64
  store i64 %6264, i64* %RCX.i4448, align 8
  %6265 = shl nsw i64 %6264, 1
  %6266 = add i64 %6265, %6259
  %6267 = add i64 %6241, 32
  store i64 %6267, i64* %3, align 8
  %6268 = inttoptr i64 %6266 to i16*
  store i16 %6244, i16* %6268, align 2
  %6269 = load i64, i64* %3, align 8
  %6270 = add i64 %6269, 124
  store i64 %6270, i64* %3, align 8
  br label %block_.L_4748f0

block_.L_474879:                                  ; preds = %block_4747f3, %block_4747e6
  %6271 = phi i64 [ %6163, %block_4747f3 ], [ %6131, %block_4747e6 ]
  %6272 = add i64 %6097, -108
  %6273 = add i64 %6271, 4
  store i64 %6273, i64* %3, align 8
  %6274 = inttoptr i64 %6272 to i16*
  %6275 = load i16, i16* %6274, align 2
  store i16 %6275, i16* %AX.i1998, align 2
  %6276 = add i64 %6097, -32
  %6277 = add i64 %6271, 8
  store i64 %6277, i64* %3, align 8
  %6278 = inttoptr i64 %6276 to i64*
  %6279 = load i64, i64* %6278, align 8
  store i64 %6279, i64* %RCX.i4448, align 8
  %6280 = add i64 %6097, -4
  %6281 = add i64 %6271, 12
  store i64 %6281, i64* %3, align 8
  %6282 = inttoptr i64 %6280 to i32*
  %6283 = load i32, i32* %6282, align 4
  %6284 = sext i32 %6283 to i64
  store i64 %6284, i64* %RDX.i4301, align 8
  %6285 = shl nsw i64 %6284, 3
  %6286 = add i64 %6285, %6279
  %6287 = add i64 %6271, 16
  store i64 %6287, i64* %3, align 8
  %6288 = inttoptr i64 %6286 to i64*
  %6289 = load i64, i64* %6288, align 8
  store i64 %6289, i64* %RCX.i4448, align 8
  %6290 = add i64 %6097, -8
  %6291 = add i64 %6271, 20
  store i64 %6291, i64* %3, align 8
  %6292 = inttoptr i64 %6290 to i32*
  %6293 = load i32, i32* %6292, align 4
  %6294 = sext i32 %6293 to i64
  store i64 %6294, i64* %RDX.i4301, align 8
  %6295 = shl nsw i64 %6294, 3
  %6296 = add i64 %6295, %6289
  %6297 = add i64 %6271, 24
  store i64 %6297, i64* %3, align 8
  %6298 = inttoptr i64 %6296 to i64*
  %6299 = load i64, i64* %6298, align 8
  store i64 %6299, i64* %RCX.i4448, align 8
  %6300 = add i64 %6299, 8
  %6301 = add i64 %6271, 28
  store i64 %6301, i64* %3, align 8
  %6302 = inttoptr i64 %6300 to i64*
  %6303 = load i64, i64* %6302, align 8
  store i64 %6303, i64* %RCX.i4448, align 8
  %6304 = add i64 %6271, 33
  store i64 %6304, i64* %3, align 8
  %6305 = load i16, i16* %6100, align 2
  %6306 = sext i16 %6305 to i64
  store i64 %6306, i64* %RDX.i4301, align 8
  %6307 = shl nsw i64 %6306, 3
  %6308 = add i64 %6307, %6303
  %6309 = add i64 %6271, 37
  store i64 %6309, i64* %3, align 8
  %6310 = inttoptr i64 %6308 to i64*
  %6311 = load i64, i64* %6310, align 8
  store i64 %6311, i64* %RCX.i4448, align 8
  %6312 = add i64 %6271, 40
  store i64 %6312, i64* %3, align 8
  %6313 = inttoptr i64 %6311 to i64*
  %6314 = load i64, i64* %6313, align 8
  store i64 %6314, i64* %RCX.i4448, align 8
  %6315 = add i64 %6271, 43
  store i64 %6315, i64* %3, align 8
  %6316 = inttoptr i64 %6314 to i16*
  store i16 %6275, i16* %6316, align 2
  %6317 = load i64, i64* %RBP.i, align 8
  %6318 = add i64 %6317, -106
  %6319 = load i64, i64* %3, align 8
  %6320 = add i64 %6319, 4
  store i64 %6320, i64* %3, align 8
  %6321 = inttoptr i64 %6318 to i16*
  %6322 = load i16, i16* %6321, align 2
  store i16 %6322, i16* %AX.i1998, align 2
  %6323 = add i64 %6317, -32
  %6324 = add i64 %6319, 8
  store i64 %6324, i64* %3, align 8
  %6325 = inttoptr i64 %6323 to i64*
  %6326 = load i64, i64* %6325, align 8
  store i64 %6326, i64* %RCX.i4448, align 8
  %6327 = add i64 %6317, -4
  %6328 = add i64 %6319, 12
  store i64 %6328, i64* %3, align 8
  %6329 = inttoptr i64 %6327 to i32*
  %6330 = load i32, i32* %6329, align 4
  %6331 = sext i32 %6330 to i64
  store i64 %6331, i64* %RDX.i4301, align 8
  %6332 = shl nsw i64 %6331, 3
  %6333 = add i64 %6332, %6326
  %6334 = add i64 %6319, 16
  store i64 %6334, i64* %3, align 8
  %6335 = inttoptr i64 %6333 to i64*
  %6336 = load i64, i64* %6335, align 8
  store i64 %6336, i64* %RCX.i4448, align 8
  %6337 = add i64 %6317, -8
  %6338 = add i64 %6319, 20
  store i64 %6338, i64* %3, align 8
  %6339 = inttoptr i64 %6337 to i32*
  %6340 = load i32, i32* %6339, align 4
  %6341 = sext i32 %6340 to i64
  store i64 %6341, i64* %RDX.i4301, align 8
  %6342 = shl nsw i64 %6341, 3
  %6343 = add i64 %6342, %6336
  %6344 = add i64 %6319, 24
  store i64 %6344, i64* %3, align 8
  %6345 = inttoptr i64 %6343 to i64*
  %6346 = load i64, i64* %6345, align 8
  store i64 %6346, i64* %RCX.i4448, align 8
  %6347 = add i64 %6346, 8
  %6348 = add i64 %6319, 28
  store i64 %6348, i64* %3, align 8
  %6349 = inttoptr i64 %6347 to i64*
  %6350 = load i64, i64* %6349, align 8
  store i64 %6350, i64* %RCX.i4448, align 8
  %6351 = add i64 %6317, -100
  %6352 = add i64 %6319, 33
  store i64 %6352, i64* %3, align 8
  %6353 = inttoptr i64 %6351 to i16*
  %6354 = load i16, i16* %6353, align 2
  %6355 = sext i16 %6354 to i64
  store i64 %6355, i64* %RDX.i4301, align 8
  %6356 = shl nsw i64 %6355, 3
  %6357 = add i64 %6356, %6350
  %6358 = add i64 %6319, 37
  store i64 %6358, i64* %3, align 8
  %6359 = inttoptr i64 %6357 to i64*
  %6360 = load i64, i64* %6359, align 8
  store i64 %6360, i64* %RCX.i4448, align 8
  %6361 = add i64 %6319, 40
  store i64 %6361, i64* %3, align 8
  %6362 = inttoptr i64 %6360 to i64*
  %6363 = load i64, i64* %6362, align 8
  store i64 %6363, i64* %RCX.i4448, align 8
  %6364 = add i64 %6363, 2
  %6365 = add i64 %6319, 44
  store i64 %6365, i64* %3, align 8
  %6366 = inttoptr i64 %6364 to i16*
  store i16 %6322, i16* %6366, align 2
  %6367 = load i64, i64* %RBP.i, align 8
  %6368 = add i64 %6367, -100
  %6369 = load i64, i64* %3, align 8
  %6370 = add i64 %6369, 4
  store i64 %6370, i64* %3, align 8
  %6371 = inttoptr i64 %6368 to i16*
  %6372 = load i16, i16* %6371, align 2
  store i16 %6372, i16* %AX.i1998, align 2
  %6373 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %6373, i64* %RCX.i4448, align 8
  %6374 = add i64 %6373, 8
  %6375 = add i64 %6369, 16
  store i64 %6375, i64* %3, align 8
  %6376 = inttoptr i64 %6374 to i64*
  %6377 = load i64, i64* %6376, align 8
  store i64 %6377, i64* %RCX.i4448, align 8
  %6378 = add i64 %6367, -12
  %6379 = add i64 %6369, 20
  store i64 %6379, i64* %3, align 8
  %6380 = inttoptr i64 %6378 to i32*
  %6381 = load i32, i32* %6380, align 4
  %6382 = sext i32 %6381 to i64
  store i64 %6382, i64* %RDX.i4301, align 8
  %6383 = shl nsw i64 %6382, 3
  %6384 = add i64 %6383, %6377
  %6385 = add i64 %6369, 24
  store i64 %6385, i64* %3, align 8
  %6386 = inttoptr i64 %6384 to i64*
  %6387 = load i64, i64* %6386, align 8
  store i64 %6387, i64* %RCX.i4448, align 8
  %6388 = add i64 %6367, -16
  %6389 = add i64 %6369, 28
  store i64 %6389, i64* %3, align 8
  %6390 = inttoptr i64 %6388 to i32*
  %6391 = load i32, i32* %6390, align 4
  %6392 = sext i32 %6391 to i64
  store i64 %6392, i64* %RDX.i4301, align 8
  %6393 = shl nsw i64 %6392, 1
  %6394 = add i64 %6393, %6387
  %6395 = add i64 %6369, 32
  store i64 %6395, i64* %3, align 8
  %6396 = inttoptr i64 %6394 to i16*
  store i16 %6372, i16* %6396, align 2
  %.pre250 = load i64, i64* %3, align 8
  br label %block_.L_4748f0

block_.L_4748f0:                                  ; preds = %block_.L_474879, %block_47480d
  %6397 = phi i64 [ %.pre250, %block_.L_474879 ], [ %6270, %block_47480d ]
  %6398 = add i64 %6397, 106
  store i64 %6398, i64* %3, align 8
  br label %block_.L_47495a

block_.L_4748f5:                                  ; preds = %block_.L_4747d9
  %6399 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %6399, i64* %RAX.i4266, align 8
  %6400 = add i64 %6399, 8
  %6401 = add i64 %6116, 12
  store i64 %6401, i64* %3, align 8
  %6402 = inttoptr i64 %6400 to i64*
  %6403 = load i64, i64* %6402, align 8
  store i64 %6403, i64* %RAX.i4266, align 8
  %6404 = add i64 %6097, -12
  %6405 = add i64 %6116, 16
  store i64 %6405, i64* %3, align 8
  %6406 = inttoptr i64 %6404 to i32*
  %6407 = load i32, i32* %6406, align 4
  %6408 = sext i32 %6407 to i64
  store i64 %6408, i64* %RCX.i4448, align 8
  %6409 = shl nsw i64 %6408, 3
  %6410 = add i64 %6409, %6403
  %6411 = add i64 %6116, 20
  store i64 %6411, i64* %3, align 8
  %6412 = inttoptr i64 %6410 to i64*
  %6413 = load i64, i64* %6412, align 8
  store i64 %6413, i64* %RAX.i4266, align 8
  %6414 = add i64 %6097, -16
  %6415 = add i64 %6116, 24
  store i64 %6415, i64* %3, align 8
  %6416 = inttoptr i64 %6414 to i32*
  %6417 = load i32, i32* %6416, align 4
  %6418 = sext i32 %6417 to i64
  store i64 %6418, i64* %RCX.i4448, align 8
  %6419 = shl nsw i64 %6418, 1
  %6420 = add i64 %6419, %6413
  %6421 = add i64 %6116, 30
  store i64 %6421, i64* %3, align 8
  %6422 = inttoptr i64 %6420 to i16*
  store i16 -1, i16* %6422, align 2
  %6423 = load i64, i64* %RBP.i, align 8
  %6424 = add i64 %6423, -32
  %6425 = load i64, i64* %3, align 8
  %6426 = add i64 %6425, 4
  store i64 %6426, i64* %3, align 8
  %6427 = inttoptr i64 %6424 to i64*
  %6428 = load i64, i64* %6427, align 8
  store i64 %6428, i64* %RAX.i4266, align 8
  %6429 = add i64 %6423, -4
  %6430 = add i64 %6425, 8
  store i64 %6430, i64* %3, align 8
  %6431 = inttoptr i64 %6429 to i32*
  %6432 = load i32, i32* %6431, align 4
  %6433 = sext i32 %6432 to i64
  store i64 %6433, i64* %RCX.i4448, align 8
  %6434 = shl nsw i64 %6433, 3
  %6435 = add i64 %6434, %6428
  %6436 = add i64 %6425, 12
  store i64 %6436, i64* %3, align 8
  %6437 = inttoptr i64 %6435 to i64*
  %6438 = load i64, i64* %6437, align 8
  store i64 %6438, i64* %RAX.i4266, align 8
  %6439 = add i64 %6423, -8
  %6440 = add i64 %6425, 16
  store i64 %6440, i64* %3, align 8
  %6441 = inttoptr i64 %6439 to i32*
  %6442 = load i32, i32* %6441, align 4
  %6443 = sext i32 %6442 to i64
  store i64 %6443, i64* %RCX.i4448, align 8
  %6444 = shl nsw i64 %6443, 3
  %6445 = add i64 %6444, %6438
  %6446 = add i64 %6425, 20
  store i64 %6446, i64* %3, align 8
  %6447 = inttoptr i64 %6445 to i64*
  %6448 = load i64, i64* %6447, align 8
  store i64 %6448, i64* %RAX.i4266, align 8
  %6449 = add i64 %6448, 8
  %6450 = add i64 %6425, 24
  store i64 %6450, i64* %3, align 8
  %6451 = inttoptr i64 %6449 to i64*
  %6452 = load i64, i64* %6451, align 8
  store i64 %6452, i64* %RAX.i4266, align 8
  %6453 = add i64 %6425, 27
  store i64 %6453, i64* %3, align 8
  %6454 = inttoptr i64 %6452 to i64*
  %6455 = load i64, i64* %6454, align 8
  store i64 %6455, i64* %RAX.i4266, align 8
  %6456 = add i64 %6425, 30
  store i64 %6456, i64* %3, align 8
  %6457 = inttoptr i64 %6455 to i64*
  %6458 = load i64, i64* %6457, align 8
  store i64 %6458, i64* %RAX.i4266, align 8
  %6459 = add i64 %6425, 35
  store i64 %6459, i64* %3, align 8
  %6460 = inttoptr i64 %6458 to i16*
  store i16 0, i16* %6460, align 2
  %6461 = load i64, i64* %RBP.i, align 8
  %6462 = add i64 %6461, -32
  %6463 = load i64, i64* %3, align 8
  %6464 = add i64 %6463, 4
  store i64 %6464, i64* %3, align 8
  %6465 = inttoptr i64 %6462 to i64*
  %6466 = load i64, i64* %6465, align 8
  store i64 %6466, i64* %RAX.i4266, align 8
  %6467 = add i64 %6461, -4
  %6468 = add i64 %6463, 8
  store i64 %6468, i64* %3, align 8
  %6469 = inttoptr i64 %6467 to i32*
  %6470 = load i32, i32* %6469, align 4
  %6471 = sext i32 %6470 to i64
  store i64 %6471, i64* %RCX.i4448, align 8
  %6472 = shl nsw i64 %6471, 3
  %6473 = add i64 %6472, %6466
  %6474 = add i64 %6463, 12
  store i64 %6474, i64* %3, align 8
  %6475 = inttoptr i64 %6473 to i64*
  %6476 = load i64, i64* %6475, align 8
  store i64 %6476, i64* %RAX.i4266, align 8
  %6477 = add i64 %6461, -8
  %6478 = add i64 %6463, 16
  store i64 %6478, i64* %3, align 8
  %6479 = inttoptr i64 %6477 to i32*
  %6480 = load i32, i32* %6479, align 4
  %6481 = sext i32 %6480 to i64
  store i64 %6481, i64* %RCX.i4448, align 8
  %6482 = shl nsw i64 %6481, 3
  %6483 = add i64 %6482, %6476
  %6484 = add i64 %6463, 20
  store i64 %6484, i64* %3, align 8
  %6485 = inttoptr i64 %6483 to i64*
  %6486 = load i64, i64* %6485, align 8
  store i64 %6486, i64* %RAX.i4266, align 8
  %6487 = add i64 %6486, 8
  %6488 = add i64 %6463, 24
  store i64 %6488, i64* %3, align 8
  %6489 = inttoptr i64 %6487 to i64*
  %6490 = load i64, i64* %6489, align 8
  store i64 %6490, i64* %RAX.i4266, align 8
  %6491 = add i64 %6463, 27
  store i64 %6491, i64* %3, align 8
  %6492 = inttoptr i64 %6490 to i64*
  %6493 = load i64, i64* %6492, align 8
  store i64 %6493, i64* %RAX.i4266, align 8
  %6494 = add i64 %6463, 30
  store i64 %6494, i64* %3, align 8
  %6495 = inttoptr i64 %6493 to i64*
  %6496 = load i64, i64* %6495, align 8
  store i64 %6496, i64* %RAX.i4266, align 8
  %6497 = add i64 %6496, 2
  %6498 = add i64 %6463, 36
  store i64 %6498, i64* %3, align 8
  %6499 = inttoptr i64 %6497 to i16*
  store i16 0, i16* %6499, align 2
  %.pre251 = load i64, i64* %3, align 8
  br label %block_.L_47495a

block_.L_47495a:                                  ; preds = %block_.L_4748f5, %block_.L_4748f0
  %6500 = phi i64 [ %.pre251, %block_.L_4748f5 ], [ %6398, %block_.L_4748f0 ]
  %6501 = load i64, i64* %RBP.i, align 8
  %6502 = add i64 %6501, -98
  %6503 = add i64 %6500, 4
  store i64 %6503, i64* %3, align 8
  %6504 = inttoptr i64 %6502 to i16*
  %6505 = load i16, i16* %6504, align 2
  %6506 = sext i16 %6505 to i64
  %6507 = and i64 %6506, 4294967295
  store i64 %6507, i64* %RAX.i4266, align 8
  %6508 = sext i16 %6505 to i32
  %6509 = add i64 %6500, 7
  store i8 0, i8* %14, align 1
  %6510 = and i32 %6508, 255
  %6511 = tail call i32 @llvm.ctpop.i32(i32 %6510)
  %6512 = trunc i32 %6511 to i8
  %6513 = and i8 %6512, 1
  %6514 = xor i8 %6513, 1
  store i8 %6514, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6515 = icmp eq i16 %6505, 0
  %6516 = zext i1 %6515 to i8
  store i8 %6516, i8* %30, align 1
  %6517 = lshr i32 %6508, 31
  %6518 = trunc i32 %6517 to i8
  store i8 %6518, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6519 = icmp ne i8 %6518, 0
  %.v141 = select i1 %6519, i64 6, i64 78
  %6520 = add i64 %6509, %.v141
  store i64 %6520, i64* %3, align 8
  br i1 %6519, label %block_474967, label %block_.L_4749af

block_474967:                                     ; preds = %block_.L_47495a
  %6521 = add i64 %6501, -100
  %6522 = add i64 %6520, 4
  store i64 %6522, i64* %3, align 8
  %6523 = inttoptr i64 %6521 to i16*
  %6524 = load i16, i16* %6523, align 2
  %6525 = sext i16 %6524 to i64
  %6526 = and i64 %6525, 4294967295
  store i64 %6526, i64* %RAX.i4266, align 8
  %6527 = sext i16 %6524 to i32
  %6528 = add i64 %6520, 7
  store i8 0, i8* %14, align 1
  %6529 = and i32 %6527, 255
  %6530 = tail call i32 @llvm.ctpop.i32(i32 %6529)
  %6531 = trunc i32 %6530 to i8
  %6532 = and i8 %6531, 1
  %6533 = xor i8 %6532, 1
  store i8 %6533, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6534 = icmp eq i16 %6524, 0
  %6535 = zext i1 %6534 to i8
  store i8 %6535, i8* %30, align 1
  %6536 = lshr i32 %6527, 31
  %6537 = trunc i32 %6536 to i8
  store i8 %6537, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6538 = icmp ne i8 %6537, 0
  %.v142 = select i1 %6538, i64 6, i64 65
  %6539 = add i64 %6528, %.v142
  store i64 %6539, i64* %3, align 8
  br i1 %6538, label %block_474974, label %block_.L_4749af

block_474974:                                     ; preds = %block_474967
  %6540 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %6540, i64* %RAX.i4266, align 8
  %6541 = add i64 %6540, 8
  %6542 = add i64 %6539, 12
  store i64 %6542, i64* %3, align 8
  %6543 = inttoptr i64 %6541 to i64*
  %6544 = load i64, i64* %6543, align 8
  store i64 %6544, i64* %RAX.i4266, align 8
  %6545 = add i64 %6501, -12
  %6546 = add i64 %6539, 16
  store i64 %6546, i64* %3, align 8
  %6547 = inttoptr i64 %6545 to i32*
  %6548 = load i32, i32* %6547, align 4
  %6549 = sext i32 %6548 to i64
  store i64 %6549, i64* %RCX.i4448, align 8
  %6550 = shl nsw i64 %6549, 3
  %6551 = add i64 %6550, %6544
  %6552 = add i64 %6539, 20
  store i64 %6552, i64* %3, align 8
  %6553 = inttoptr i64 %6551 to i64*
  %6554 = load i64, i64* %6553, align 8
  store i64 %6554, i64* %RAX.i4266, align 8
  %6555 = add i64 %6501, -16
  %6556 = add i64 %6539, 24
  store i64 %6556, i64* %3, align 8
  %6557 = inttoptr i64 %6555 to i32*
  %6558 = load i32, i32* %6557, align 4
  %6559 = sext i32 %6558 to i64
  store i64 %6559, i64* %RCX.i4448, align 8
  %6560 = shl nsw i64 %6559, 1
  %6561 = add i64 %6560, %6554
  %6562 = add i64 %6539, 30
  store i64 %6562, i64* %3, align 8
  %6563 = inttoptr i64 %6561 to i16*
  store i16 0, i16* %6563, align 2
  %6564 = load i64, i64* %3, align 8
  %6565 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %6565, i64* %RAX.i4266, align 8
  %6566 = add i64 %6564, 11
  store i64 %6566, i64* %3, align 8
  %6567 = inttoptr i64 %6565 to i64*
  %6568 = load i64, i64* %6567, align 8
  store i64 %6568, i64* %RAX.i4266, align 8
  %6569 = load i64, i64* %RBP.i, align 8
  %6570 = add i64 %6569, -12
  %6571 = add i64 %6564, 15
  store i64 %6571, i64* %3, align 8
  %6572 = inttoptr i64 %6570 to i32*
  %6573 = load i32, i32* %6572, align 4
  %6574 = sext i32 %6573 to i64
  store i64 %6574, i64* %RCX.i4448, align 8
  %6575 = shl nsw i64 %6574, 3
  %6576 = add i64 %6575, %6568
  %6577 = add i64 %6564, 19
  store i64 %6577, i64* %3, align 8
  %6578 = inttoptr i64 %6576 to i64*
  %6579 = load i64, i64* %6578, align 8
  store i64 %6579, i64* %RAX.i4266, align 8
  %6580 = add i64 %6569, -16
  %6581 = add i64 %6564, 23
  store i64 %6581, i64* %3, align 8
  %6582 = inttoptr i64 %6580 to i32*
  %6583 = load i32, i32* %6582, align 4
  %6584 = sext i32 %6583 to i64
  store i64 %6584, i64* %RCX.i4448, align 8
  %6585 = shl nsw i64 %6584, 1
  %6586 = add i64 %6585, %6579
  %6587 = add i64 %6564, 29
  store i64 %6587, i64* %3, align 8
  %6588 = inttoptr i64 %6586 to i16*
  store i16 0, i16* %6588, align 2
  %.pre252 = load i64, i64* %3, align 8
  %.pre253 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4749af

block_.L_4749af:                                  ; preds = %block_474967, %block_.L_47495a, %block_474974
  %6589 = phi i64 [ %6501, %block_474967 ], [ %6501, %block_.L_47495a ], [ %.pre253, %block_474974 ]
  %6590 = phi i64 [ %6539, %block_474967 ], [ %6520, %block_.L_47495a ], [ %.pre252, %block_474974 ]
  %6591 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %6591, i64* %RAX.i4266, align 8
  %6592 = add i64 %6591, 8
  %6593 = add i64 %6590, 12
  store i64 %6593, i64* %3, align 8
  %6594 = inttoptr i64 %6592 to i64*
  %6595 = load i64, i64* %6594, align 8
  store i64 %6595, i64* %RAX.i4266, align 8
  %6596 = add i64 %6589, -12
  %6597 = add i64 %6590, 16
  store i64 %6597, i64* %3, align 8
  %6598 = inttoptr i64 %6596 to i32*
  %6599 = load i32, i32* %6598, align 4
  %6600 = sext i32 %6599 to i64
  store i64 %6600, i64* %RCX.i4448, align 8
  %6601 = shl nsw i64 %6600, 3
  %6602 = add i64 %6601, %6595
  %6603 = add i64 %6590, 20
  store i64 %6603, i64* %3, align 8
  %6604 = inttoptr i64 %6602 to i64*
  %6605 = load i64, i64* %6604, align 8
  store i64 %6605, i64* %RAX.i4266, align 8
  %6606 = add i64 %6589, -16
  %6607 = add i64 %6590, 24
  store i64 %6607, i64* %3, align 8
  %6608 = inttoptr i64 %6606 to i32*
  %6609 = load i32, i32* %6608, align 4
  %6610 = sext i32 %6609 to i64
  store i64 %6610, i64* %RCX.i4448, align 8
  %6611 = shl nsw i64 %6610, 1
  %6612 = add i64 %6611, %6605
  %6613 = add i64 %6590, 28
  store i64 %6613, i64* %3, align 8
  %6614 = inttoptr i64 %6612 to i16*
  %6615 = load i16, i16* %6614, align 2
  %6616 = sext i16 %6615 to i64
  %6617 = and i64 %6616, 4294967295
  store i64 %6617, i64* %RDX.i4301, align 8
  %6618 = sext i16 %6615 to i32
  %6619 = add nsw i32 %6618, 1
  %6620 = icmp ne i16 %6615, -1
  %6621 = zext i1 %6620 to i8
  store i8 %6621, i8* %14, align 1
  %6622 = and i32 %6619, 255
  %6623 = tail call i32 @llvm.ctpop.i32(i32 %6622)
  %6624 = trunc i32 %6623 to i8
  %6625 = and i8 %6624, 1
  %6626 = xor i8 %6625, 1
  store i8 %6626, i8* %21, align 1
  %6627 = xor i32 %6618, 16
  %6628 = xor i32 %6627, %6619
  %6629 = lshr i32 %6628, 4
  %6630 = trunc i32 %6629 to i8
  %6631 = and i8 %6630, 1
  store i8 %6631, i8* %27, align 1
  %6632 = icmp eq i32 %6619, 0
  %6633 = zext i1 %6632 to i8
  store i8 %6633, i8* %30, align 1
  %6634 = lshr i32 %6619, 31
  %6635 = trunc i32 %6634 to i8
  store i8 %6635, i8* %33, align 1
  %6636 = lshr i32 %6618, 31
  %6637 = xor i32 %6636, 1
  %6638 = xor i32 %6634, %6636
  %6639 = add nuw nsw i32 %6638, %6637
  %6640 = icmp eq i32 %6639, 2
  %6641 = zext i1 %6640 to i8
  store i8 %6641, i8* %39, align 1
  %.v312 = select i1 %6632, i64 37, i64 68
  %6642 = add i64 %6590, %.v312
  %6643 = add i64 %6642, 8
  store i64 %6643, i64* %3, align 8
  br i1 %6632, label %block_4749d4, label %block_.L_4749f3

block_4749d4:                                     ; preds = %block_.L_4749af
  %6644 = load i64, i64* bitcast (%G_0x722cb8_type* @G_0x722cb8 to i64*), align 8
  store i64 %6644, i64* %RAX.i4266, align 8
  %6645 = add i64 %6642, 12
  store i64 %6645, i64* %3, align 8
  %6646 = load i32, i32* %6598, align 4
  %6647 = sext i32 %6646 to i64
  store i64 %6647, i64* %RCX.i4448, align 8
  %6648 = shl nsw i64 %6647, 3
  %6649 = add i64 %6648, %6644
  %6650 = add i64 %6642, 16
  store i64 %6650, i64* %3, align 8
  %6651 = inttoptr i64 %6649 to i64*
  %6652 = load i64, i64* %6651, align 8
  store i64 %6652, i64* %RAX.i4266, align 8
  %6653 = add i64 %6642, 20
  store i64 %6653, i64* %3, align 8
  %6654 = load i32, i32* %6608, align 4
  %6655 = sext i32 %6654 to i64
  store i64 %6655, i64* %RCX.i4448, align 8
  %6656 = shl nsw i64 %6655, 1
  %6657 = add i64 %6656, %6652
  %6658 = add i64 %6642, 26
  store i64 %6658, i64* %3, align 8
  %6659 = inttoptr i64 %6657 to i16*
  store i16 0, i16* %6659, align 2
  %6660 = load i64, i64* %3, align 8
  %6661 = add i64 %6660, 103
  br label %block_.L_474a55

block_.L_4749f3:                                  ; preds = %block_.L_4749af
  store i64 %6591, i64* %RAX.i4266, align 8
  %6662 = add i64 %6642, 11
  store i64 %6662, i64* %3, align 8
  %6663 = inttoptr i64 %6591 to i64*
  %6664 = load i64, i64* %6663, align 8
  store i64 %6664, i64* %RAX.i4266, align 8
  %6665 = add i64 %6642, 15
  store i64 %6665, i64* %3, align 8
  %6666 = load i32, i32* %6598, align 4
  %6667 = sext i32 %6666 to i64
  store i64 %6667, i64* %RCX.i4448, align 8
  %6668 = shl nsw i64 %6667, 3
  %6669 = add i64 %6668, %6664
  %6670 = add i64 %6642, 19
  store i64 %6670, i64* %3, align 8
  %6671 = inttoptr i64 %6669 to i64*
  %6672 = load i64, i64* %6671, align 8
  store i64 %6672, i64* %RAX.i4266, align 8
  %6673 = add i64 %6642, 23
  store i64 %6673, i64* %3, align 8
  %6674 = load i32, i32* %6608, align 4
  %6675 = sext i32 %6674 to i64
  store i64 %6675, i64* %RCX.i4448, align 8
  %6676 = shl nsw i64 %6675, 1
  %6677 = add i64 %6676, %6672
  %6678 = add i64 %6642, 27
  store i64 %6678, i64* %3, align 8
  %6679 = inttoptr i64 %6677 to i16*
  %6680 = load i16, i16* %6679, align 2
  %6681 = sext i16 %6680 to i64
  %6682 = and i64 %6681, 4294967295
  store i64 %6682, i64* %RDX.i4301, align 8
  %6683 = sext i16 %6680 to i32
  %6684 = add nsw i32 %6683, 1
  %6685 = icmp ne i16 %6680, -1
  %6686 = zext i1 %6685 to i8
  store i8 %6686, i8* %14, align 1
  %6687 = and i32 %6684, 255
  %6688 = tail call i32 @llvm.ctpop.i32(i32 %6687)
  %6689 = trunc i32 %6688 to i8
  %6690 = and i8 %6689, 1
  %6691 = xor i8 %6690, 1
  store i8 %6691, i8* %21, align 1
  %6692 = xor i32 %6683, 16
  %6693 = xor i32 %6692, %6684
  %6694 = lshr i32 %6693, 4
  %6695 = trunc i32 %6694 to i8
  %6696 = and i8 %6695, 1
  store i8 %6696, i8* %27, align 1
  %6697 = icmp eq i32 %6684, 0
  %6698 = zext i1 %6697 to i8
  store i8 %6698, i8* %30, align 1
  %6699 = lshr i32 %6684, 31
  %6700 = trunc i32 %6699 to i8
  store i8 %6700, i8* %33, align 1
  %6701 = lshr i32 %6683, 31
  %6702 = xor i32 %6701, 1
  %6703 = xor i32 %6699, %6701
  %6704 = add nuw nsw i32 %6703, %6702
  %6705 = icmp eq i32 %6704, 2
  %6706 = zext i1 %6705 to i8
  store i8 %6706, i8* %39, align 1
  %.v313 = select i1 %6697, i64 36, i64 67
  %6707 = add i64 %6642, %.v313
  %6708 = load i64, i64* bitcast (%G_0x722cb8_type* @G_0x722cb8 to i64*), align 8
  store i64 %6708, i64* %RAX.i4266, align 8
  %6709 = add i64 %6707, 12
  store i64 %6709, i64* %3, align 8
  %6710 = load i32, i32* %6598, align 4
  %6711 = sext i32 %6710 to i64
  store i64 %6711, i64* %RCX.i4448, align 8
  %6712 = shl nsw i64 %6711, 3
  %6713 = add i64 %6712, %6708
  %6714 = add i64 %6707, 16
  store i64 %6714, i64* %3, align 8
  %6715 = inttoptr i64 %6713 to i64*
  %6716 = load i64, i64* %6715, align 8
  store i64 %6716, i64* %RAX.i4266, align 8
  %6717 = add i64 %6707, 20
  store i64 %6717, i64* %3, align 8
  %6718 = load i32, i32* %6608, align 4
  %6719 = sext i32 %6718 to i64
  store i64 %6719, i64* %RCX.i4448, align 8
  %6720 = shl nsw i64 %6719, 1
  %6721 = add i64 %6720, %6716
  %6722 = add i64 %6707, 26
  store i64 %6722, i64* %3, align 8
  %6723 = inttoptr i64 %6721 to i16*
  br i1 %6697, label %block_474a17, label %block_.L_474a36

block_474a17:                                     ; preds = %block_.L_4749f3
  store i16 1, i16* %6723, align 2
  %6724 = load i64, i64* %3, align 8
  %6725 = add i64 %6724, 31
  store i64 %6725, i64* %3, align 8
  br label %block_.L_474a50

block_.L_474a36:                                  ; preds = %block_.L_4749f3
  store i16 2, i16* %6723, align 2
  %.pre254 = load i64, i64* %3, align 8
  br label %block_.L_474a50

block_.L_474a50:                                  ; preds = %block_.L_474a36, %block_474a17
  %6726 = phi i64 [ %.pre254, %block_.L_474a36 ], [ %6725, %block_474a17 ]
  %6727 = add i64 %6726, 5
  store i64 %6727, i64* %3, align 8
  br label %block_.L_474a55

block_.L_474a55:                                  ; preds = %block_.L_474a50, %block_4749d4
  %storemerge107 = phi i64 [ %6661, %block_4749d4 ], [ %6727, %block_.L_474a50 ]
  %6728 = load i64, i64* %RBP.i, align 8
  %6729 = add i64 %6728, -4
  %6730 = add i64 %storemerge107, 8
  store i64 %6730, i64* %3, align 8
  %6731 = inttoptr i64 %6729 to i32*
  %6732 = load i32, i32* %6731, align 4
  %6733 = add i32 %6732, 1
  %6734 = zext i32 %6733 to i64
  store i64 %6734, i64* %RAX.i4266, align 8
  %6735 = icmp eq i32 %6732, -1
  %6736 = icmp eq i32 %6733, 0
  %6737 = or i1 %6735, %6736
  %6738 = zext i1 %6737 to i8
  store i8 %6738, i8* %14, align 1
  %6739 = and i32 %6733, 255
  %6740 = tail call i32 @llvm.ctpop.i32(i32 %6739)
  %6741 = trunc i32 %6740 to i8
  %6742 = and i8 %6741, 1
  %6743 = xor i8 %6742, 1
  store i8 %6743, i8* %21, align 1
  %6744 = xor i32 %6733, %6732
  %6745 = lshr i32 %6744, 4
  %6746 = trunc i32 %6745 to i8
  %6747 = and i8 %6746, 1
  store i8 %6747, i8* %27, align 1
  %6748 = zext i1 %6736 to i8
  store i8 %6748, i8* %30, align 1
  %6749 = lshr i32 %6733, 31
  %6750 = trunc i32 %6749 to i8
  store i8 %6750, i8* %33, align 1
  %6751 = lshr i32 %6732, 31
  %6752 = xor i32 %6749, %6751
  %6753 = add nuw nsw i32 %6752, %6749
  %6754 = icmp eq i32 %6753, 2
  %6755 = zext i1 %6754 to i8
  store i8 %6755, i8* %39, align 1
  %6756 = add i64 %storemerge107, 14
  store i64 %6756, i64* %3, align 8
  store i32 %6733, i32* %6731, align 4
  %6757 = load i64, i64* %3, align 8
  %6758 = add i64 %6757, -1078
  store i64 %6758, i64* %3, align 8
  br label %block_.L_47462d

block_.L_474a68:                                  ; preds = %block_.L_47462d
  %6759 = add i64 %5560, -8
  %6760 = add i64 %5588, 8
  store i64 %6760, i64* %3, align 8
  %6761 = inttoptr i64 %6759 to i32*
  %6762 = load i32, i32* %6761, align 4
  %6763 = add i32 %6762, 1
  %6764 = zext i32 %6763 to i64
  store i64 %6764, i64* %RAX.i4266, align 8
  %6765 = icmp eq i32 %6762, -1
  %6766 = icmp eq i32 %6763, 0
  %6767 = or i1 %6765, %6766
  %6768 = zext i1 %6767 to i8
  store i8 %6768, i8* %14, align 1
  %6769 = and i32 %6763, 255
  %6770 = tail call i32 @llvm.ctpop.i32(i32 %6769)
  %6771 = trunc i32 %6770 to i8
  %6772 = and i8 %6771, 1
  %6773 = xor i8 %6772, 1
  store i8 %6773, i8* %21, align 1
  %6774 = xor i32 %6763, %6762
  %6775 = lshr i32 %6774, 4
  %6776 = trunc i32 %6775 to i8
  %6777 = and i8 %6776, 1
  store i8 %6777, i8* %27, align 1
  %6778 = zext i1 %6766 to i8
  store i8 %6778, i8* %30, align 1
  %6779 = lshr i32 %6763, 31
  %6780 = trunc i32 %6779 to i8
  store i8 %6780, i8* %33, align 1
  %6781 = lshr i32 %6762, 31
  %6782 = xor i32 %6779, %6781
  %6783 = add nuw nsw i32 %6782, %6779
  %6784 = icmp eq i32 %6783, 2
  %6785 = zext i1 %6784 to i8
  store i8 %6785, i8* %39, align 1
  %6786 = add i64 %5588, 14
  store i64 %6786, i64* %3, align 8
  store i32 %6763, i32* %6761, align 4
  %6787 = load i64, i64* %3, align 8
  %6788 = add i64 %6787, -1160
  store i64 %6788, i64* %3, align 8
  br label %block_.L_4745ee

block_.L_474a7b:                                  ; preds = %block_.L_4745ee
  %6789 = add i64 %5435, 1725
  br label %block_.L_475138

block_.L_474a80:                                  ; preds = %block_.L_472f05
  %6790 = load i64, i64* %RBP.i, align 8
  %6791 = add i64 %6790, -8
  %6792 = add i64 %312, 7
  store i64 %6792, i64* %3, align 8
  %6793 = inttoptr i64 %6791 to i32*
  store i32 0, i32* %6793, align 4
  %ECX.i971 = bitcast %union.anon* %55 to i32*
  %6794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i894 = getelementptr inbounds %union.anon, %union.anon* %6794, i64 0, i32 0
  %6795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %RSI.i889 = getelementptr inbounds %union.anon, %union.anon* %6795, i64 0, i32 0
  %6796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %RDI.i857 = getelementptr inbounds %union.anon, %union.anon* %6796, i64 0, i32 0
  %EDX.i842 = bitcast %union.anon* %6794 to i32*
  %ESI.i653 = bitcast %union.anon* %6795 to i32*
  %DI.i339 = bitcast %union.anon* %6796 to i16*
  %CX.i116 = bitcast %union.anon* %55 to i16*
  %DX.i493 = bitcast %union.anon* %6794 to i16*
  %6797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %.pre255 = load i64, i64* %3, align 8
  br label %block_.L_474a87

block_.L_474a87:                                  ; preds = %block_.L_475120, %block_.L_474a80
  %6798 = phi i64 [ %.pre255, %block_.L_474a80 ], [ %8938, %block_.L_475120 ]
  %MEMORY.90 = phi %struct.Memory* [ %MEMORY.2, %block_.L_474a80 ], [ %MEMORY.91, %block_.L_475120 ]
  %6799 = load i64, i64* %RBP.i, align 8
  %6800 = add i64 %6799, -8
  %6801 = add i64 %6798, 4
  store i64 %6801, i64* %3, align 8
  %6802 = inttoptr i64 %6800 to i32*
  %6803 = load i32, i32* %6802, align 4
  %6804 = add i32 %6803, -4
  %6805 = icmp ult i32 %6803, 4
  %6806 = zext i1 %6805 to i8
  store i8 %6806, i8* %14, align 1
  %6807 = and i32 %6804, 255
  %6808 = tail call i32 @llvm.ctpop.i32(i32 %6807)
  %6809 = trunc i32 %6808 to i8
  %6810 = and i8 %6809, 1
  %6811 = xor i8 %6810, 1
  store i8 %6811, i8* %21, align 1
  %6812 = xor i32 %6804, %6803
  %6813 = lshr i32 %6812, 4
  %6814 = trunc i32 %6813 to i8
  %6815 = and i8 %6814, 1
  store i8 %6815, i8* %27, align 1
  %6816 = icmp eq i32 %6804, 0
  %6817 = zext i1 %6816 to i8
  store i8 %6817, i8* %30, align 1
  %6818 = lshr i32 %6804, 31
  %6819 = trunc i32 %6818 to i8
  store i8 %6819, i8* %33, align 1
  %6820 = lshr i32 %6803, 31
  %6821 = xor i32 %6818, %6820
  %6822 = add nuw nsw i32 %6821, %6820
  %6823 = icmp eq i32 %6822, 2
  %6824 = zext i1 %6823 to i8
  store i8 %6824, i8* %39, align 1
  %6825 = icmp ne i8 %6819, 0
  %6826 = xor i1 %6825, %6823
  %.v343 = select i1 %6826, i64 10, i64 1708
  %6827 = add i64 %6798, %.v343
  store i64 %6827, i64* %3, align 8
  br i1 %6826, label %block_474a91, label %block_.L_475133

block_474a91:                                     ; preds = %block_.L_474a87
  %6828 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6828, i64* %RAX.i4266, align 8
  %6829 = add i64 %6828, 156
  %6830 = add i64 %6827, 14
  store i64 %6830, i64* %3, align 8
  %6831 = inttoptr i64 %6829 to i32*
  %6832 = load i32, i32* %6831, align 4
  %6833 = sext i32 %6832 to i64
  %6834 = ashr i64 %6833, 1
  %6835 = lshr i64 %6834, 1
  %6836 = trunc i64 %6834 to i8
  %6837 = and i8 %6836, 1
  %6838 = trunc i64 %6835 to i32
  %6839 = and i64 %6835, 4294967295
  store i64 %6839, i64* %RCX.i4448, align 8
  store i8 %6837, i8* %14, align 1
  %6840 = and i32 %6838, 255
  %6841 = tail call i32 @llvm.ctpop.i32(i32 %6840)
  %6842 = trunc i32 %6841 to i8
  %6843 = and i8 %6842, 1
  %6844 = xor i8 %6843, 1
  store i8 %6844, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6845 = icmp eq i32 %6838, 0
  %6846 = zext i1 %6845 to i8
  store i8 %6846, i8* %30, align 1
  %6847 = lshr i64 %6834, 32
  %6848 = trunc i64 %6847 to i8
  %6849 = and i8 %6848, 1
  store i8 %6849, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6850 = add i64 %6827, 20
  store i64 %6850, i64* %3, align 8
  %6851 = trunc i64 %6835 to i32
  %6852 = load i32, i32* %6802, align 4
  %6853 = add i32 %6852, %6851
  %6854 = zext i32 %6853 to i64
  store i64 %6854, i64* %RCX.i4448, align 8
  %6855 = icmp ult i32 %6853, %6851
  %6856 = icmp ult i32 %6853, %6852
  %6857 = or i1 %6855, %6856
  %6858 = zext i1 %6857 to i8
  store i8 %6858, i8* %14, align 1
  %6859 = and i32 %6853, 255
  %6860 = tail call i32 @llvm.ctpop.i32(i32 %6859)
  %6861 = trunc i32 %6860 to i8
  %6862 = and i8 %6861, 1
  %6863 = xor i8 %6862, 1
  store i8 %6863, i8* %21, align 1
  %6864 = xor i32 %6852, %6851
  %6865 = xor i32 %6864, %6853
  %6866 = lshr i32 %6865, 4
  %6867 = trunc i32 %6866 to i8
  %6868 = and i8 %6867, 1
  store i8 %6868, i8* %27, align 1
  %6869 = icmp eq i32 %6853, 0
  %6870 = zext i1 %6869 to i8
  store i8 %6870, i8* %30, align 1
  %6871 = lshr i32 %6853, 31
  %6872 = trunc i32 %6871 to i8
  store i8 %6872, i8* %33, align 1
  %6873 = lshr i64 %6834, 32
  %6874 = trunc i64 %6873 to i32
  %6875 = and i32 %6874, 1
  %6876 = lshr i32 %6852, 31
  %6877 = xor i32 %6871, %6875
  %6878 = xor i32 %6871, %6876
  %6879 = add nuw nsw i32 %6877, %6878
  %6880 = icmp eq i32 %6879, 2
  %6881 = zext i1 %6880 to i8
  store i8 %6881, i8* %39, align 1
  %6882 = add i64 %6799, -16
  %6883 = add i64 %6827, 23
  store i64 %6883, i64* %3, align 8
  %6884 = inttoptr i64 %6882 to i32*
  store i32 %6853, i32* %6884, align 4
  %6885 = load i64, i64* %3, align 8
  %6886 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6886, i64* %RAX.i4266, align 8
  %6887 = add i64 %6886, 172
  %6888 = add i64 %6885, 14
  store i64 %6888, i64* %3, align 8
  %6889 = inttoptr i64 %6887 to i32*
  %6890 = load i32, i32* %6889, align 4
  %6891 = sext i32 %6890 to i64
  %6892 = ashr i64 %6891, 1
  %6893 = lshr i64 %6892, 1
  %6894 = trunc i64 %6892 to i8
  %6895 = and i8 %6894, 1
  %6896 = trunc i64 %6893 to i32
  %6897 = and i64 %6893, 4294967295
  store i64 %6897, i64* %RCX.i4448, align 8
  store i8 %6895, i8* %14, align 1
  %6898 = and i32 %6896, 255
  %6899 = tail call i32 @llvm.ctpop.i32(i32 %6898)
  %6900 = trunc i32 %6899 to i8
  %6901 = and i8 %6900, 1
  %6902 = xor i8 %6901, 1
  store i8 %6902, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6903 = icmp eq i32 %6896, 0
  %6904 = zext i1 %6903 to i8
  store i8 %6904, i8* %30, align 1
  %6905 = lshr i64 %6892, 32
  %6906 = trunc i64 %6905 to i8
  %6907 = and i8 %6906, 1
  store i8 %6907, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6908 = load i64, i64* %RBP.i, align 8
  %6909 = add i64 %6908, -8
  %6910 = add i64 %6885, 20
  store i64 %6910, i64* %3, align 8
  %6911 = trunc i64 %6893 to i32
  %6912 = inttoptr i64 %6909 to i32*
  %6913 = load i32, i32* %6912, align 4
  %6914 = add i32 %6913, %6911
  %6915 = zext i32 %6914 to i64
  store i64 %6915, i64* %RCX.i4448, align 8
  %6916 = icmp ult i32 %6914, %6911
  %6917 = icmp ult i32 %6914, %6913
  %6918 = or i1 %6916, %6917
  %6919 = zext i1 %6918 to i8
  store i8 %6919, i8* %14, align 1
  %6920 = and i32 %6914, 255
  %6921 = tail call i32 @llvm.ctpop.i32(i32 %6920)
  %6922 = trunc i32 %6921 to i8
  %6923 = and i8 %6922, 1
  %6924 = xor i8 %6923, 1
  store i8 %6924, i8* %21, align 1
  %6925 = xor i32 %6913, %6911
  %6926 = xor i32 %6925, %6914
  %6927 = lshr i32 %6926, 4
  %6928 = trunc i32 %6927 to i8
  %6929 = and i8 %6928, 1
  store i8 %6929, i8* %27, align 1
  %6930 = icmp eq i32 %6914, 0
  %6931 = zext i1 %6930 to i8
  store i8 %6931, i8* %30, align 1
  %6932 = lshr i32 %6914, 31
  %6933 = trunc i32 %6932 to i8
  store i8 %6933, i8* %33, align 1
  %6934 = lshr i64 %6892, 32
  %6935 = trunc i64 %6934 to i32
  %6936 = and i32 %6935, 1
  %6937 = lshr i32 %6913, 31
  %6938 = xor i32 %6932, %6936
  %6939 = xor i32 %6932, %6937
  %6940 = add nuw nsw i32 %6938, %6939
  %6941 = icmp eq i32 %6940, 2
  %6942 = zext i1 %6941 to i8
  store i8 %6942, i8* %39, align 1
  %6943 = add i64 %6908, -24
  %6944 = add i64 %6885, 23
  store i64 %6944, i64* %3, align 8
  %6945 = inttoptr i64 %6943 to i32*
  store i32 %6914, i32* %6945, align 4
  %6946 = load i64, i64* %RBP.i, align 8
  %6947 = add i64 %6946, -4
  %6948 = load i64, i64* %3, align 8
  %6949 = add i64 %6948, 7
  store i64 %6949, i64* %3, align 8
  %6950 = inttoptr i64 %6947 to i32*
  store i32 0, i32* %6950, align 4
  %.pre256 = load i64, i64* %3, align 8
  br label %block_.L_474ac6

block_.L_474ac6:                                  ; preds = %block_.L_47510d, %block_474a91
  %6951 = phi i64 [ %.pre256, %block_474a91 ], [ %8908, %block_.L_47510d ]
  %MEMORY.91 = phi %struct.Memory* [ %MEMORY.90, %block_474a91 ], [ %MEMORY.93, %block_.L_47510d ]
  %6952 = load i64, i64* %RBP.i, align 8
  %6953 = add i64 %6952, -4
  %6954 = add i64 %6951, 4
  store i64 %6954, i64* %3, align 8
  %6955 = inttoptr i64 %6953 to i32*
  %6956 = load i32, i32* %6955, align 4
  %6957 = add i32 %6956, -4
  %6958 = icmp ult i32 %6956, 4
  %6959 = zext i1 %6958 to i8
  store i8 %6959, i8* %14, align 1
  %6960 = and i32 %6957, 255
  %6961 = tail call i32 @llvm.ctpop.i32(i32 %6960)
  %6962 = trunc i32 %6961 to i8
  %6963 = and i8 %6962, 1
  %6964 = xor i8 %6963, 1
  store i8 %6964, i8* %21, align 1
  %6965 = xor i32 %6957, %6956
  %6966 = lshr i32 %6965, 4
  %6967 = trunc i32 %6966 to i8
  %6968 = and i8 %6967, 1
  store i8 %6968, i8* %27, align 1
  %6969 = icmp eq i32 %6957, 0
  %6970 = zext i1 %6969 to i8
  store i8 %6970, i8* %30, align 1
  %6971 = lshr i32 %6957, 31
  %6972 = trunc i32 %6971 to i8
  store i8 %6972, i8* %33, align 1
  %6973 = lshr i32 %6956, 31
  %6974 = xor i32 %6971, %6973
  %6975 = add nuw nsw i32 %6974, %6973
  %6976 = icmp eq i32 %6975, 2
  %6977 = zext i1 %6976 to i8
  store i8 %6977, i8* %39, align 1
  %6978 = icmp ne i8 %6972, 0
  %6979 = xor i1 %6978, %6976
  %.v284 = select i1 %6979, i64 10, i64 1626
  %6980 = add i64 %6951, %.v284
  store i64 %6980, i64* %3, align 8
  br i1 %6979, label %block_474ad0, label %block_.L_475120

block_474ad0:                                     ; preds = %block_.L_474ac6
  %6981 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6981, i64* %RAX.i4266, align 8
  %6982 = add i64 %6981, 72400
  %6983 = add i64 %6980, 15
  store i64 %6983, i64* %3, align 8
  %6984 = inttoptr i64 %6982 to i32*
  %6985 = load i32, i32* %6984, align 4
  store i8 0, i8* %14, align 1
  %6986 = and i32 %6985, 255
  %6987 = tail call i32 @llvm.ctpop.i32(i32 %6986)
  %6988 = trunc i32 %6987 to i8
  %6989 = and i8 %6988, 1
  %6990 = xor i8 %6989, 1
  store i8 %6990, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6991 = icmp eq i32 %6985, 0
  %6992 = zext i1 %6991 to i8
  store i8 %6992, i8* %30, align 1
  %6993 = lshr i32 %6985, 31
  %6994 = trunc i32 %6993 to i8
  store i8 %6994, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v344 = select i1 %6991, i64 93, i64 21
  %6995 = add i64 %6980, %.v344
  store i64 %6995, i64* %3, align 8
  br i1 %6991, label %block_.L_474b2d, label %block_474ae5

block_474ae5:                                     ; preds = %block_474ad0
  %6996 = add i64 %6952, -80
  %6997 = add i64 %6995, 4
  store i64 %6997, i64* %3, align 8
  %6998 = inttoptr i64 %6996 to i64*
  %6999 = load i64, i64* %6998, align 8
  store i64 %6999, i64* %RAX.i4266, align 8
  %7000 = add i64 %6999, 532
  %7001 = add i64 %6995, 11
  store i64 %7001, i64* %3, align 8
  %7002 = inttoptr i64 %7000 to i32*
  %7003 = load i32, i32* %7002, align 4
  store i8 0, i8* %14, align 1
  %7004 = and i32 %7003, 255
  %7005 = tail call i32 @llvm.ctpop.i32(i32 %7004)
  %7006 = trunc i32 %7005 to i8
  %7007 = and i8 %7006, 1
  %7008 = xor i8 %7007, 1
  store i8 %7008, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7009 = icmp eq i32 %7003, 0
  %7010 = zext i1 %7009 to i8
  store i8 %7010, i8* %30, align 1
  %7011 = lshr i32 %7003, 31
  %7012 = trunc i32 %7011 to i8
  store i8 %7012, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v345 = select i1 %7009, i64 72, i64 17
  %7013 = add i64 %6995, %.v345
  store i64 %7013, i64* %3, align 8
  br i1 %7009, label %block_.L_474b2d, label %block_474af6

block_474af6:                                     ; preds = %block_474ae5
  store i64 2, i64* %RAX.i4266, align 8
  store i64 4, i64* %RCX.i4448, align 8
  store i64 %6981, i64* %RDX.i894, align 8
  %7014 = add i64 %6981, 12
  %7015 = add i64 %7013, 21
  store i64 %7015, i64* %3, align 8
  %7016 = inttoptr i64 %7014 to i32*
  %7017 = load i32, i32* %7016, align 4
  %7018 = zext i32 %7017 to i64
  store i64 %7018, i64* %RSI.i889, align 8
  %7019 = add i64 %6952, -488
  %7020 = add i64 %7013, 27
  store i64 %7020, i64* %3, align 8
  %7021 = inttoptr i64 %7019 to i32*
  store i32 2, i32* %7021, align 4
  %7022 = load i32, i32* %ESI.i653, align 4
  %7023 = zext i32 %7022 to i64
  %7024 = load i64, i64* %3, align 8
  store i64 %7023, i64* %RAX.i4266, align 8
  %7025 = sext i32 %7022 to i64
  %7026 = lshr i64 %7025, 32
  store i64 %7026, i64* %6797, align 8
  %7027 = load i64, i64* %RBP.i, align 8
  %7028 = add i64 %7027, -488
  %7029 = add i64 %7024, 9
  store i64 %7029, i64* %3, align 8
  %7030 = inttoptr i64 %7028 to i32*
  %7031 = load i32, i32* %7030, align 4
  %7032 = zext i32 %7031 to i64
  store i64 %7032, i64* %RSI.i889, align 8
  %7033 = add i64 %7024, 11
  store i64 %7033, i64* %3, align 8
  %7034 = sext i32 %7031 to i64
  %7035 = shl nuw i64 %7026, 32
  %7036 = or i64 %7035, %7023
  %7037 = sdiv i64 %7036, %7034
  %7038 = shl i64 %7037, 32
  %7039 = ashr exact i64 %7038, 32
  %7040 = icmp eq i64 %7037, %7039
  br i1 %7040, label %7043, label %7041

; <label>:7041:                                   ; preds = %block_474af6
  %7042 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7033, %struct.Memory* %MEMORY.91)
  %.pre257 = load i32, i32* %EDX.i842, align 4
  %.pre258 = load i64, i64* %3, align 8
  %.pre259 = load i64, i64* %RSI.i889, align 8
  %.pre260 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit

; <label>:7043:                                   ; preds = %block_474af6
  %7044 = srem i64 %7036, %7034
  %7045 = and i64 %7037, 4294967295
  store i64 %7045, i64* %RAX.i4266, align 8
  %7046 = and i64 %7044, 4294967295
  store i64 %7046, i64* %RDX.i894, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7047 = trunc i64 %7044 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %7043, %7041
  %7048 = phi i64 [ %.pre260, %7041 ], [ %7027, %7043 ]
  %7049 = phi i64 [ %.pre259, %7041 ], [ %7032, %7043 ]
  %7050 = phi i64 [ %.pre258, %7041 ], [ %7033, %7043 ]
  %7051 = phi i32 [ %.pre257, %7041 ], [ %7047, %7043 ]
  %7052 = phi %struct.Memory* [ %7042, %7041 ], [ %MEMORY.91, %7043 ]
  store i8 0, i8* %14, align 1
  %7053 = and i32 %7051, 255
  %7054 = tail call i32 @llvm.ctpop.i32(i32 %7053)
  %7055 = trunc i32 %7054 to i8
  %7056 = and i8 %7055, 1
  %7057 = xor i8 %7056, 1
  store i8 %7057, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7058 = icmp eq i32 %7051, 0
  %7059 = zext i1 %7058 to i8
  store i8 %7059, i8* %30, align 1
  %7060 = lshr i32 %7051, 31
  %7061 = trunc i32 %7060 to i8
  store i8 %7061, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7062 = load i32, i32* %ECX.i971, align 4
  %7063 = zext i32 %7062 to i64
  %7064 = select i1 %7058, i64 %7049, i64 %7063
  %7065 = and i64 %7064, 4294967295
  store i64 %7065, i64* %RSI.i889, align 8
  %7066 = add i64 %7048, -492
  %7067 = trunc i64 %7064 to i32
  %7068 = add i64 %7050, 12
  store i64 %7068, i64* %3, align 8
  %7069 = inttoptr i64 %7066 to i32*
  store i32 %7067, i32* %7069, align 4
  %7070 = load i64, i64* %3, align 8
  %7071 = add i64 %7070, 18
  br label %block_.L_474b3a

block_.L_474b2d:                                  ; preds = %block_474ae5, %block_474ad0
  %7072 = phi i64 [ %7013, %block_474ae5 ], [ %6995, %block_474ad0 ]
  store i64 0, i64* %RAX.i4266, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %7073 = add i64 %6952, -492
  %7074 = add i64 %7072, 8
  store i64 %7074, i64* %3, align 8
  %7075 = inttoptr i64 %7073 to i32*
  store i32 0, i32* %7075, align 4
  %7076 = load i64, i64* %3, align 8
  %7077 = add i64 %7076, 5
  store i64 %7077, i64* %3, align 8
  br label %block_.L_474b3a

block_.L_474b3a:                                  ; preds = %block_.L_474b2d, %routine_idivl__esi.exit
  %storemerge128 = phi i64 [ %7071, %routine_idivl__esi.exit ], [ %7077, %block_.L_474b2d ]
  %MEMORY.93 = phi %struct.Memory* [ %7052, %routine_idivl__esi.exit ], [ %MEMORY.91, %block_.L_474b2d ]
  %7078 = load i64, i64* %RBP.i, align 8
  %7079 = add i64 %7078, -492
  %7080 = add i64 %storemerge128, 6
  store i64 %7080, i64* %3, align 8
  %7081 = inttoptr i64 %7079 to i32*
  %7082 = load i32, i32* %7081, align 4
  %7083 = zext i32 %7082 to i64
  store i64 %7083, i64* %RAX.i4266, align 8
  store i64 0, i64* %RCX.i4448, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 1, i64* %RDX.i894, align 8
  %7084 = add i64 %7078, -220
  %7085 = add i64 %storemerge128, 19
  store i64 %7085, i64* %3, align 8
  %7086 = inttoptr i64 %7084 to i32*
  store i32 %7082, i32* %7086, align 4
  %7087 = load i64, i64* %3, align 8
  %7088 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7088, i64* %RSI.i889, align 8
  %7089 = add i64 %7088, 152
  %7090 = add i64 %7087, 14
  store i64 %7090, i64* %3, align 8
  %7091 = inttoptr i64 %7089 to i32*
  %7092 = load i32, i32* %7091, align 4
  %7093 = sext i32 %7092 to i64
  %7094 = ashr i64 %7093, 1
  %7095 = lshr i64 %7094, 1
  %7096 = trunc i64 %7094 to i8
  %7097 = and i8 %7096, 1
  %7098 = trunc i64 %7095 to i32
  %7099 = and i64 %7095, 4294967295
  store i64 %7099, i64* %RAX.i4266, align 8
  store i8 %7097, i8* %14, align 1
  %7100 = and i32 %7098, 255
  %7101 = tail call i32 @llvm.ctpop.i32(i32 %7100)
  %7102 = trunc i32 %7101 to i8
  %7103 = and i8 %7102, 1
  %7104 = xor i8 %7103, 1
  store i8 %7104, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7105 = icmp eq i32 %7098, 0
  %7106 = zext i1 %7105 to i8
  store i8 %7106, i8* %30, align 1
  %7107 = lshr i64 %7094, 32
  %7108 = trunc i64 %7107 to i8
  %7109 = and i8 %7108, 1
  store i8 %7109, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7110 = load i64, i64* %RBP.i, align 8
  %7111 = add i64 %7110, -4
  %7112 = add i64 %7087, 20
  store i64 %7112, i64* %3, align 8
  %7113 = trunc i64 %7095 to i32
  %7114 = inttoptr i64 %7111 to i32*
  %7115 = load i32, i32* %7114, align 4
  %7116 = add i32 %7115, %7113
  %7117 = zext i32 %7116 to i64
  store i64 %7117, i64* %RAX.i4266, align 8
  %7118 = icmp ult i32 %7116, %7113
  %7119 = icmp ult i32 %7116, %7115
  %7120 = or i1 %7118, %7119
  %7121 = zext i1 %7120 to i8
  store i8 %7121, i8* %14, align 1
  %7122 = and i32 %7116, 255
  %7123 = tail call i32 @llvm.ctpop.i32(i32 %7122)
  %7124 = trunc i32 %7123 to i8
  %7125 = and i8 %7124, 1
  %7126 = xor i8 %7125, 1
  store i8 %7126, i8* %21, align 1
  %7127 = xor i32 %7115, %7113
  %7128 = xor i32 %7127, %7116
  %7129 = lshr i32 %7128, 4
  %7130 = trunc i32 %7129 to i8
  %7131 = and i8 %7130, 1
  store i8 %7131, i8* %27, align 1
  %7132 = icmp eq i32 %7116, 0
  %7133 = zext i1 %7132 to i8
  store i8 %7133, i8* %30, align 1
  %7134 = lshr i32 %7116, 31
  %7135 = trunc i32 %7134 to i8
  store i8 %7135, i8* %33, align 1
  %7136 = lshr i64 %7094, 32
  %7137 = trunc i64 %7136 to i32
  %7138 = and i32 %7137, 1
  %7139 = lshr i32 %7115, 31
  %7140 = xor i32 %7134, %7138
  %7141 = xor i32 %7134, %7139
  %7142 = add nuw nsw i32 %7140, %7141
  %7143 = icmp eq i32 %7142, 2
  %7144 = zext i1 %7143 to i8
  store i8 %7144, i8* %39, align 1
  %7145 = add i64 %7110, -12
  %7146 = add i64 %7087, 23
  store i64 %7146, i64* %3, align 8
  %7147 = inttoptr i64 %7145 to i32*
  store i32 %7116, i32* %7147, align 4
  %7148 = load i64, i64* %3, align 8
  %7149 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7149, i64* %RSI.i889, align 8
  %7150 = add i64 %7149, 168
  %7151 = add i64 %7148, 14
  store i64 %7151, i64* %3, align 8
  %7152 = inttoptr i64 %7150 to i32*
  %7153 = load i32, i32* %7152, align 4
  %7154 = sext i32 %7153 to i64
  %7155 = ashr i64 %7154, 1
  %7156 = lshr i64 %7155, 1
  %7157 = trunc i64 %7155 to i8
  %7158 = and i8 %7157, 1
  %7159 = trunc i64 %7156 to i32
  %7160 = and i64 %7156, 4294967295
  store i64 %7160, i64* %RAX.i4266, align 8
  store i8 %7158, i8* %14, align 1
  %7161 = and i32 %7159, 255
  %7162 = tail call i32 @llvm.ctpop.i32(i32 %7161)
  %7163 = trunc i32 %7162 to i8
  %7164 = and i8 %7163, 1
  %7165 = xor i8 %7164, 1
  store i8 %7165, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7166 = icmp eq i32 %7159, 0
  %7167 = zext i1 %7166 to i8
  store i8 %7167, i8* %30, align 1
  %7168 = lshr i64 %7155, 32
  %7169 = trunc i64 %7168 to i8
  %7170 = and i8 %7169, 1
  store i8 %7170, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7171 = load i64, i64* %RBP.i, align 8
  %7172 = add i64 %7171, -4
  %7173 = add i64 %7148, 20
  store i64 %7173, i64* %3, align 8
  %7174 = trunc i64 %7156 to i32
  %7175 = inttoptr i64 %7172 to i32*
  %7176 = load i32, i32* %7175, align 4
  %7177 = add i32 %7176, %7174
  %7178 = zext i32 %7177 to i64
  store i64 %7178, i64* %RAX.i4266, align 8
  %7179 = icmp ult i32 %7177, %7174
  %7180 = icmp ult i32 %7177, %7176
  %7181 = or i1 %7179, %7180
  %7182 = zext i1 %7181 to i8
  store i8 %7182, i8* %14, align 1
  %7183 = and i32 %7177, 255
  %7184 = tail call i32 @llvm.ctpop.i32(i32 %7183)
  %7185 = trunc i32 %7184 to i8
  %7186 = and i8 %7185, 1
  %7187 = xor i8 %7186, 1
  store i8 %7187, i8* %21, align 1
  %7188 = xor i32 %7176, %7174
  %7189 = xor i32 %7188, %7177
  %7190 = lshr i32 %7189, 4
  %7191 = trunc i32 %7190 to i8
  %7192 = and i8 %7191, 1
  store i8 %7192, i8* %27, align 1
  %7193 = icmp eq i32 %7177, 0
  %7194 = zext i1 %7193 to i8
  store i8 %7194, i8* %30, align 1
  %7195 = lshr i32 %7177, 31
  %7196 = trunc i32 %7195 to i8
  store i8 %7196, i8* %33, align 1
  %7197 = lshr i64 %7155, 32
  %7198 = trunc i64 %7197 to i32
  %7199 = and i32 %7198, 1
  %7200 = lshr i32 %7176, 31
  %7201 = xor i32 %7195, %7199
  %7202 = xor i32 %7195, %7200
  %7203 = add nuw nsw i32 %7201, %7202
  %7204 = icmp eq i32 %7203, 2
  %7205 = zext i1 %7204 to i8
  store i8 %7205, i8* %39, align 1
  %7206 = add i64 %7171, -20
  %7207 = add i64 %7148, 23
  store i64 %7207, i64* %3, align 8
  %7208 = inttoptr i64 %7206 to i32*
  store i32 %7177, i32* %7208, align 4
  %7209 = load i64, i64* %RBP.i, align 8
  %7210 = add i64 %7209, -64
  %7211 = load i64, i64* %3, align 8
  %7212 = add i64 %7211, 4
  store i64 %7212, i64* %3, align 8
  %7213 = inttoptr i64 %7210 to i64*
  %7214 = load i64, i64* %7213, align 8
  store i64 %7214, i64* %RSI.i889, align 8
  %7215 = add i64 %7211, 7
  store i64 %7215, i64* %3, align 8
  %7216 = inttoptr i64 %7214 to i64*
  %7217 = load i64, i64* %7216, align 8
  store i64 %7217, i64* %RSI.i889, align 8
  %7218 = add i64 %7209, -20
  %7219 = add i64 %7211, 11
  store i64 %7219, i64* %3, align 8
  %7220 = inttoptr i64 %7218 to i32*
  %7221 = load i32, i32* %7220, align 4
  %7222 = sext i32 %7221 to i64
  store i64 %7222, i64* %RDI.i857, align 8
  %7223 = shl nsw i64 %7222, 3
  %7224 = add i64 %7223, %7217
  %7225 = add i64 %7211, 15
  store i64 %7225, i64* %3, align 8
  %7226 = inttoptr i64 %7224 to i64*
  %7227 = load i64, i64* %7226, align 8
  store i64 %7227, i64* %RSI.i889, align 8
  %7228 = add i64 %7209, -24
  %7229 = add i64 %7211, 19
  store i64 %7229, i64* %3, align 8
  %7230 = inttoptr i64 %7228 to i32*
  %7231 = load i32, i32* %7230, align 4
  %7232 = sext i32 %7231 to i64
  store i64 %7232, i64* %RDI.i857, align 8
  %7233 = shl nsw i64 %7232, 1
  %7234 = add i64 %7233, %7227
  %7235 = add i64 %7211, 23
  store i64 %7235, i64* %3, align 8
  %7236 = inttoptr i64 %7234 to i16*
  %7237 = load i16, i16* %7236, align 2
  %7238 = sext i16 %7237 to i64
  %7239 = and i64 %7238, 4294967295
  store i64 %7239, i64* %RAX.i4266, align 8
  %7240 = sext i16 %7237 to i32
  %7241 = add nsw i32 %7240, 1
  %7242 = icmp ne i16 %7237, -1
  %7243 = zext i1 %7242 to i8
  store i8 %7243, i8* %14, align 1
  %7244 = and i32 %7241, 255
  %7245 = tail call i32 @llvm.ctpop.i32(i32 %7244)
  %7246 = trunc i32 %7245 to i8
  %7247 = and i8 %7246, 1
  %7248 = xor i8 %7247, 1
  store i8 %7248, i8* %21, align 1
  %7249 = xor i32 %7240, 16
  %7250 = xor i32 %7249, %7241
  %7251 = lshr i32 %7250, 4
  %7252 = trunc i32 %7251 to i8
  %7253 = and i8 %7252, 1
  store i8 %7253, i8* %27, align 1
  %7254 = icmp eq i32 %7241, 0
  %7255 = zext i1 %7254 to i8
  store i8 %7255, i8* %30, align 1
  %7256 = lshr i32 %7241, 31
  %7257 = trunc i32 %7256 to i8
  store i8 %7257, i8* %33, align 1
  %7258 = lshr i32 %7240, 31
  %7259 = xor i32 %7258, 1
  %7260 = xor i32 %7256, %7258
  %7261 = add nuw nsw i32 %7260, %7259
  %7262 = icmp eq i32 %7261, 2
  %7263 = zext i1 %7262 to i8
  store i8 %7263, i8* %39, align 1
  %7264 = load i32, i32* %EDX.i842, align 4
  %7265 = zext i32 %7264 to i64
  %7266 = load i64, i64* %RCX.i4448, align 8
  %7267 = select i1 %7254, i64 %7265, i64 %7266
  %7268 = and i64 %7267, 4294967295
  store i64 %7268, i64* %RCX.i4448, align 8
  %7269 = add i64 %7209, -212
  %7270 = trunc i64 %7267 to i32
  %7271 = add i64 %7211, 35
  store i64 %7271, i64* %3, align 8
  %7272 = inttoptr i64 %7269 to i32*
  store i32 %7270, i32* %7272, align 4
  %7273 = load i64, i64* %RBP.i, align 8
  %7274 = add i64 %7273, -64
  %7275 = load i64, i64* %3, align 8
  %7276 = add i64 %7275, 4
  store i64 %7276, i64* %3, align 8
  %7277 = inttoptr i64 %7274 to i64*
  %7278 = load i64, i64* %7277, align 8
  store i64 %7278, i64* %RSI.i889, align 8
  %7279 = add i64 %7273, -212
  %7280 = add i64 %7275, 11
  store i64 %7280, i64* %3, align 8
  %7281 = inttoptr i64 %7279 to i32*
  %7282 = load i32, i32* %7281, align 4
  %7283 = sext i32 %7282 to i64
  store i64 %7283, i64* %RDI.i857, align 8
  %7284 = shl nsw i64 %7283, 3
  %7285 = add i64 %7284, %7278
  %7286 = add i64 %7275, 15
  store i64 %7286, i64* %3, align 8
  %7287 = inttoptr i64 %7285 to i64*
  %7288 = load i64, i64* %7287, align 8
  store i64 %7288, i64* %RSI.i889, align 8
  %7289 = add i64 %7273, -20
  %7290 = add i64 %7275, 19
  store i64 %7290, i64* %3, align 8
  %7291 = inttoptr i64 %7289 to i32*
  %7292 = load i32, i32* %7291, align 4
  %7293 = sext i32 %7292 to i64
  store i64 %7293, i64* %RDI.i857, align 8
  %7294 = shl nsw i64 %7293, 3
  %7295 = add i64 %7294, %7288
  %7296 = add i64 %7275, 23
  store i64 %7296, i64* %3, align 8
  %7297 = inttoptr i64 %7295 to i64*
  %7298 = load i64, i64* %7297, align 8
  store i64 %7298, i64* %RSI.i889, align 8
  %7299 = add i64 %7273, -24
  %7300 = add i64 %7275, 27
  store i64 %7300, i64* %3, align 8
  %7301 = inttoptr i64 %7299 to i32*
  %7302 = load i32, i32* %7301, align 4
  %7303 = sext i32 %7302 to i64
  store i64 %7303, i64* %RDI.i857, align 8
  %7304 = shl nsw i64 %7303, 1
  %7305 = add i64 %7304, %7298
  %7306 = add i64 %7275, 31
  store i64 %7306, i64* %3, align 8
  %7307 = inttoptr i64 %7305 to i16*
  %7308 = load i16, i16* %7307, align 2
  %7309 = sext i16 %7308 to i64
  %7310 = and i64 %7309, 4294967295
  store i64 %7310, i64* %RAX.i4266, align 8
  %7311 = add i64 %7273, -216
  %7312 = sext i16 %7308 to i32
  %7313 = add i64 %7275, 37
  store i64 %7313, i64* %3, align 8
  %7314 = inttoptr i64 %7311 to i32*
  store i32 %7312, i32* %7314, align 4
  %7315 = load i64, i64* %RBP.i, align 8
  %7316 = add i64 %7315, -216
  %7317 = load i64, i64* %3, align 8
  %7318 = add i64 %7317, 7
  store i64 %7318, i64* %3, align 8
  %7319 = inttoptr i64 %7316 to i32*
  %7320 = load i32, i32* %7319, align 4
  %7321 = add i32 %7320, 1
  %7322 = icmp ne i32 %7320, -1
  %7323 = zext i1 %7322 to i8
  store i8 %7323, i8* %14, align 1
  %7324 = and i32 %7321, 255
  %7325 = tail call i32 @llvm.ctpop.i32(i32 %7324)
  %7326 = trunc i32 %7325 to i8
  %7327 = and i8 %7326, 1
  %7328 = xor i8 %7327, 1
  store i8 %7328, i8* %21, align 1
  %7329 = xor i32 %7320, 16
  %7330 = xor i32 %7329, %7321
  %7331 = lshr i32 %7330, 4
  %7332 = trunc i32 %7331 to i8
  %7333 = and i8 %7332, 1
  store i8 %7333, i8* %27, align 1
  %7334 = icmp eq i32 %7321, 0
  %7335 = zext i1 %7334 to i8
  store i8 %7335, i8* %30, align 1
  %7336 = lshr i32 %7321, 31
  %7337 = trunc i32 %7336 to i8
  store i8 %7337, i8* %33, align 1
  %7338 = lshr i32 %7320, 31
  %7339 = xor i32 %7338, 1
  %7340 = xor i32 %7336, %7338
  %7341 = add nuw nsw i32 %7340, %7339
  %7342 = icmp eq i32 %7341, 2
  %7343 = zext i1 %7342 to i8
  store i8 %7343, i8* %39, align 1
  %.v346 = select i1 %7334, i64 13, i64 243
  %7344 = add i64 %7317, %.v346
  store i64 %7344, i64* %3, align 8
  br i1 %7334, label %block_474bd0, label %block_.L_474cb6

block_474bd0:                                     ; preds = %block_.L_474b3a
  %7345 = add i64 %7315, -32
  %7346 = add i64 %7344, 4
  store i64 %7346, i64* %3, align 8
  %7347 = inttoptr i64 %7345 to i64*
  %7348 = load i64, i64* %7347, align 8
  store i64 %7348, i64* %RAX.i4266, align 8
  %7349 = add i64 %7315, -4
  %7350 = add i64 %7344, 8
  store i64 %7350, i64* %3, align 8
  %7351 = inttoptr i64 %7349 to i32*
  %7352 = load i32, i32* %7351, align 4
  %7353 = sext i32 %7352 to i64
  store i64 %7353, i64* %RCX.i4448, align 8
  %7354 = shl nsw i64 %7353, 3
  %7355 = add i64 %7354, %7348
  %7356 = add i64 %7344, 12
  store i64 %7356, i64* %3, align 8
  %7357 = inttoptr i64 %7355 to i64*
  %7358 = load i64, i64* %7357, align 8
  store i64 %7358, i64* %RAX.i4266, align 8
  %7359 = add i64 %7315, -8
  %7360 = add i64 %7344, 16
  store i64 %7360, i64* %3, align 8
  %7361 = inttoptr i64 %7359 to i32*
  %7362 = load i32, i32* %7361, align 4
  %7363 = sext i32 %7362 to i64
  store i64 %7363, i64* %RCX.i4448, align 8
  %7364 = shl nsw i64 %7363, 3
  %7365 = add i64 %7364, %7358
  %7366 = add i64 %7344, 20
  store i64 %7366, i64* %3, align 8
  %7367 = inttoptr i64 %7365 to i64*
  %7368 = load i64, i64* %7367, align 8
  store i64 %7368, i64* %RAX.i4266, align 8
  %7369 = add i64 %7344, 23
  store i64 %7369, i64* %3, align 8
  %7370 = inttoptr i64 %7368 to i64*
  %7371 = load i64, i64* %7370, align 8
  store i64 %7371, i64* %RAX.i4266, align 8
  %7372 = add i64 %7344, 26
  store i64 %7372, i64* %3, align 8
  %7373 = inttoptr i64 %7371 to i64*
  %7374 = load i64, i64* %7373, align 8
  store i64 %7374, i64* %RAX.i4266, align 8
  %7375 = add i64 %7344, 29
  store i64 %7375, i64* %3, align 8
  %7376 = inttoptr i64 %7374 to i64*
  %7377 = load i64, i64* %7376, align 8
  store i64 %7377, i64* %RAX.i4266, align 8
  %7378 = add i64 %7344, 34
  store i64 %7378, i64* %3, align 8
  %7379 = inttoptr i64 %7377 to i16*
  store i16 0, i16* %7379, align 2
  %7380 = load i64, i64* %RBP.i, align 8
  %7381 = add i64 %7380, -32
  %7382 = load i64, i64* %3, align 8
  %7383 = add i64 %7382, 4
  store i64 %7383, i64* %3, align 8
  %7384 = inttoptr i64 %7381 to i64*
  %7385 = load i64, i64* %7384, align 8
  store i64 %7385, i64* %RAX.i4266, align 8
  %7386 = add i64 %7380, -4
  %7387 = add i64 %7382, 8
  store i64 %7387, i64* %3, align 8
  %7388 = inttoptr i64 %7386 to i32*
  %7389 = load i32, i32* %7388, align 4
  %7390 = sext i32 %7389 to i64
  store i64 %7390, i64* %RCX.i4448, align 8
  %7391 = shl nsw i64 %7390, 3
  %7392 = add i64 %7391, %7385
  %7393 = add i64 %7382, 12
  store i64 %7393, i64* %3, align 8
  %7394 = inttoptr i64 %7392 to i64*
  %7395 = load i64, i64* %7394, align 8
  store i64 %7395, i64* %RAX.i4266, align 8
  %7396 = add i64 %7380, -8
  %7397 = add i64 %7382, 16
  store i64 %7397, i64* %3, align 8
  %7398 = inttoptr i64 %7396 to i32*
  %7399 = load i32, i32* %7398, align 4
  %7400 = sext i32 %7399 to i64
  store i64 %7400, i64* %RCX.i4448, align 8
  %7401 = shl nsw i64 %7400, 3
  %7402 = add i64 %7401, %7395
  %7403 = add i64 %7382, 20
  store i64 %7403, i64* %3, align 8
  %7404 = inttoptr i64 %7402 to i64*
  %7405 = load i64, i64* %7404, align 8
  store i64 %7405, i64* %RAX.i4266, align 8
  %7406 = add i64 %7382, 23
  store i64 %7406, i64* %3, align 8
  %7407 = inttoptr i64 %7405 to i64*
  %7408 = load i64, i64* %7407, align 8
  store i64 %7408, i64* %RAX.i4266, align 8
  %7409 = add i64 %7382, 26
  store i64 %7409, i64* %3, align 8
  %7410 = inttoptr i64 %7408 to i64*
  %7411 = load i64, i64* %7410, align 8
  store i64 %7411, i64* %RAX.i4266, align 8
  %7412 = add i64 %7382, 29
  store i64 %7412, i64* %3, align 8
  %7413 = inttoptr i64 %7411 to i64*
  %7414 = load i64, i64* %7413, align 8
  store i64 %7414, i64* %RAX.i4266, align 8
  %7415 = add i64 %7414, 2
  %7416 = add i64 %7382, 35
  store i64 %7416, i64* %3, align 8
  %7417 = inttoptr i64 %7415 to i16*
  store i16 0, i16* %7417, align 2
  %7418 = load i64, i64* %RBP.i, align 8
  %7419 = add i64 %7418, -32
  %7420 = load i64, i64* %3, align 8
  %7421 = add i64 %7420, 4
  store i64 %7421, i64* %3, align 8
  %7422 = inttoptr i64 %7419 to i64*
  %7423 = load i64, i64* %7422, align 8
  store i64 %7423, i64* %RAX.i4266, align 8
  %7424 = add i64 %7418, -4
  %7425 = add i64 %7420, 8
  store i64 %7425, i64* %3, align 8
  %7426 = inttoptr i64 %7424 to i32*
  %7427 = load i32, i32* %7426, align 4
  %7428 = sext i32 %7427 to i64
  store i64 %7428, i64* %RCX.i4448, align 8
  %7429 = shl nsw i64 %7428, 3
  %7430 = add i64 %7429, %7423
  %7431 = add i64 %7420, 12
  store i64 %7431, i64* %3, align 8
  %7432 = inttoptr i64 %7430 to i64*
  %7433 = load i64, i64* %7432, align 8
  store i64 %7433, i64* %RAX.i4266, align 8
  %7434 = add i64 %7418, -8
  %7435 = add i64 %7420, 16
  store i64 %7435, i64* %3, align 8
  %7436 = inttoptr i64 %7434 to i32*
  %7437 = load i32, i32* %7436, align 4
  %7438 = sext i32 %7437 to i64
  store i64 %7438, i64* %RCX.i4448, align 8
  %7439 = shl nsw i64 %7438, 3
  %7440 = add i64 %7439, %7433
  %7441 = add i64 %7420, 20
  store i64 %7441, i64* %3, align 8
  %7442 = inttoptr i64 %7440 to i64*
  %7443 = load i64, i64* %7442, align 8
  store i64 %7443, i64* %RAX.i4266, align 8
  %7444 = add i64 %7443, 8
  %7445 = add i64 %7420, 24
  store i64 %7445, i64* %3, align 8
  %7446 = inttoptr i64 %7444 to i64*
  %7447 = load i64, i64* %7446, align 8
  store i64 %7447, i64* %RAX.i4266, align 8
  %7448 = add i64 %7420, 27
  store i64 %7448, i64* %3, align 8
  %7449 = inttoptr i64 %7447 to i64*
  %7450 = load i64, i64* %7449, align 8
  store i64 %7450, i64* %RAX.i4266, align 8
  %7451 = add i64 %7420, 30
  store i64 %7451, i64* %3, align 8
  %7452 = inttoptr i64 %7450 to i64*
  %7453 = load i64, i64* %7452, align 8
  store i64 %7453, i64* %RAX.i4266, align 8
  %7454 = add i64 %7420, 35
  store i64 %7454, i64* %3, align 8
  %7455 = inttoptr i64 %7453 to i16*
  store i16 0, i16* %7455, align 2
  %7456 = load i64, i64* %RBP.i, align 8
  %7457 = add i64 %7456, -32
  %7458 = load i64, i64* %3, align 8
  %7459 = add i64 %7458, 4
  store i64 %7459, i64* %3, align 8
  %7460 = inttoptr i64 %7457 to i64*
  %7461 = load i64, i64* %7460, align 8
  store i64 %7461, i64* %RAX.i4266, align 8
  %7462 = add i64 %7456, -4
  %7463 = add i64 %7458, 8
  store i64 %7463, i64* %3, align 8
  %7464 = inttoptr i64 %7462 to i32*
  %7465 = load i32, i32* %7464, align 4
  %7466 = sext i32 %7465 to i64
  store i64 %7466, i64* %RCX.i4448, align 8
  %7467 = shl nsw i64 %7466, 3
  %7468 = add i64 %7467, %7461
  %7469 = add i64 %7458, 12
  store i64 %7469, i64* %3, align 8
  %7470 = inttoptr i64 %7468 to i64*
  %7471 = load i64, i64* %7470, align 8
  store i64 %7471, i64* %RAX.i4266, align 8
  %7472 = add i64 %7456, -8
  %7473 = add i64 %7458, 16
  store i64 %7473, i64* %3, align 8
  %7474 = inttoptr i64 %7472 to i32*
  %7475 = load i32, i32* %7474, align 4
  %7476 = sext i32 %7475 to i64
  store i64 %7476, i64* %RCX.i4448, align 8
  %7477 = shl nsw i64 %7476, 3
  %7478 = add i64 %7477, %7471
  %7479 = add i64 %7458, 20
  store i64 %7479, i64* %3, align 8
  %7480 = inttoptr i64 %7478 to i64*
  %7481 = load i64, i64* %7480, align 8
  store i64 %7481, i64* %RAX.i4266, align 8
  %7482 = add i64 %7481, 8
  %7483 = add i64 %7458, 24
  store i64 %7483, i64* %3, align 8
  %7484 = inttoptr i64 %7482 to i64*
  %7485 = load i64, i64* %7484, align 8
  store i64 %7485, i64* %RAX.i4266, align 8
  %7486 = add i64 %7458, 27
  store i64 %7486, i64* %3, align 8
  %7487 = inttoptr i64 %7485 to i64*
  %7488 = load i64, i64* %7487, align 8
  store i64 %7488, i64* %RAX.i4266, align 8
  %7489 = add i64 %7458, 30
  store i64 %7489, i64* %3, align 8
  %7490 = inttoptr i64 %7488 to i64*
  %7491 = load i64, i64* %7490, align 8
  %7492 = add i64 %7491, 2
  %7493 = add i64 %7458, 36
  store i64 %7493, i64* %3, align 8
  %7494 = inttoptr i64 %7492 to i16*
  store i16 0, i16* %7494, align 2
  %7495 = load i64, i64* %3, align 8
  %7496 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %7496, i64* %RAX.i4266, align 8
  %7497 = add i64 %7495, 11
  store i64 %7497, i64* %3, align 8
  %7498 = inttoptr i64 %7496 to i64*
  %7499 = load i64, i64* %7498, align 8
  store i64 %7499, i64* %RAX.i4266, align 8
  %7500 = load i64, i64* %RBP.i, align 8
  %7501 = add i64 %7500, -12
  %7502 = add i64 %7495, 15
  store i64 %7502, i64* %3, align 8
  %7503 = inttoptr i64 %7501 to i32*
  %7504 = load i32, i32* %7503, align 4
  %7505 = sext i32 %7504 to i64
  store i64 %7505, i64* %RCX.i4448, align 8
  %7506 = shl nsw i64 %7505, 3
  %7507 = add i64 %7506, %7499
  %7508 = add i64 %7495, 19
  store i64 %7508, i64* %3, align 8
  %7509 = inttoptr i64 %7507 to i64*
  %7510 = load i64, i64* %7509, align 8
  store i64 %7510, i64* %RAX.i4266, align 8
  %7511 = add i64 %7500, -16
  %7512 = add i64 %7495, 23
  store i64 %7512, i64* %3, align 8
  %7513 = inttoptr i64 %7511 to i32*
  %7514 = load i32, i32* %7513, align 4
  %7515 = sext i32 %7514 to i64
  store i64 %7515, i64* %RCX.i4448, align 8
  %7516 = shl nsw i64 %7515, 1
  %7517 = add i64 %7516, %7510
  %7518 = add i64 %7495, 29
  store i64 %7518, i64* %3, align 8
  %7519 = inttoptr i64 %7517 to i16*
  store i16 0, i16* %7519, align 2
  %7520 = load i64, i64* %3, align 8
  %7521 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %7521, i64* %RAX.i4266, align 8
  %7522 = add i64 %7521, 8
  %7523 = add i64 %7520, 12
  store i64 %7523, i64* %3, align 8
  %7524 = inttoptr i64 %7522 to i64*
  %7525 = load i64, i64* %7524, align 8
  store i64 %7525, i64* %RAX.i4266, align 8
  %7526 = load i64, i64* %RBP.i, align 8
  %7527 = add i64 %7526, -12
  %7528 = add i64 %7520, 16
  store i64 %7528, i64* %3, align 8
  %7529 = inttoptr i64 %7527 to i32*
  %7530 = load i32, i32* %7529, align 4
  %7531 = sext i32 %7530 to i64
  store i64 %7531, i64* %RCX.i4448, align 8
  %7532 = shl nsw i64 %7531, 3
  %7533 = add i64 %7532, %7525
  %7534 = add i64 %7520, 20
  store i64 %7534, i64* %3, align 8
  %7535 = inttoptr i64 %7533 to i64*
  %7536 = load i64, i64* %7535, align 8
  store i64 %7536, i64* %RAX.i4266, align 8
  %7537 = add i64 %7526, -16
  %7538 = add i64 %7520, 24
  store i64 %7538, i64* %3, align 8
  %7539 = inttoptr i64 %7537 to i32*
  %7540 = load i32, i32* %7539, align 4
  %7541 = sext i32 %7540 to i64
  store i64 %7541, i64* %RCX.i4448, align 8
  %7542 = shl nsw i64 %7541, 1
  %7543 = add i64 %7542, %7536
  %7544 = add i64 %7520, 30
  store i64 %7544, i64* %3, align 8
  %7545 = inttoptr i64 %7543 to i16*
  store i16 0, i16* %7545, align 2
  %7546 = load i64, i64* %3, align 8
  %7547 = load i64, i64* bitcast (%G_0x722cb8_type* @G_0x722cb8 to i64*), align 8
  store i64 %7547, i64* %RAX.i4266, align 8
  %7548 = load i64, i64* %RBP.i, align 8
  %7549 = add i64 %7548, -12
  %7550 = add i64 %7546, 12
  store i64 %7550, i64* %3, align 8
  %7551 = inttoptr i64 %7549 to i32*
  %7552 = load i32, i32* %7551, align 4
  %7553 = sext i32 %7552 to i64
  store i64 %7553, i64* %RCX.i4448, align 8
  %7554 = shl nsw i64 %7553, 3
  %7555 = add i64 %7554, %7547
  %7556 = add i64 %7546, 16
  store i64 %7556, i64* %3, align 8
  %7557 = inttoptr i64 %7555 to i64*
  %7558 = load i64, i64* %7557, align 8
  store i64 %7558, i64* %RAX.i4266, align 8
  %7559 = add i64 %7548, -16
  %7560 = add i64 %7546, 20
  store i64 %7560, i64* %3, align 8
  %7561 = inttoptr i64 %7559 to i32*
  %7562 = load i32, i32* %7561, align 4
  %7563 = sext i32 %7562 to i64
  store i64 %7563, i64* %RCX.i4448, align 8
  %7564 = shl nsw i64 %7563, 1
  %7565 = add i64 %7564, %7558
  %7566 = add i64 %7546, 26
  store i64 %7566, i64* %3, align 8
  %7567 = inttoptr i64 %7565 to i16*
  store i16 2, i16* %7567, align 2
  %7568 = load i64, i64* %3, align 8
  %7569 = add i64 %7568, 1116
  br label %block_.L_47510d

block_.L_474cb6:                                  ; preds = %block_.L_474b3a
  %7570 = add i64 %7315, -224
  %7571 = add i64 %7344, 10
  store i64 %7571, i64* %3, align 8
  %7572 = inttoptr i64 %7570 to i32*
  store i32 -135792468, i32* %7572, align 4
  %7573 = load i64, i64* %RBP.i, align 8
  %7574 = add i64 %7573, -228
  %7575 = load i64, i64* %3, align 8
  %7576 = add i64 %7575, 10
  store i64 %7576, i64* %3, align 8
  %7577 = inttoptr i64 %7574 to i32*
  store i32 0, i32* %7577, align 4
  %.pre261 = load i64, i64* %3, align 8
  br label %block_.L_474cca

block_.L_474cca:                                  ; preds = %block_.L_474da6, %block_.L_474cb6
  %7578 = phi i64 [ %7892, %block_.L_474da6 ], [ %.pre261, %block_.L_474cb6 ]
  %7579 = load i64, i64* %RBP.i, align 8
  %7580 = add i64 %7579, -228
  %7581 = add i64 %7578, 6
  store i64 %7581, i64* %3, align 8
  %7582 = inttoptr i64 %7580 to i32*
  %7583 = load i32, i32* %7582, align 4
  %7584 = zext i32 %7583 to i64
  store i64 %7584, i64* %RAX.i4266, align 8
  %7585 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7585, i64* %RCX.i4448, align 8
  %7586 = add i64 %7585, 72000
  %7587 = add i64 %7578, 20
  store i64 %7587, i64* %3, align 8
  %7588 = inttoptr i64 %7586 to i32*
  %7589 = load i32, i32* %7588, align 4
  %7590 = zext i32 %7589 to i64
  store i64 %7590, i64* %RDX.i894, align 8
  %7591 = add i64 %7579, -220
  %7592 = add i64 %7578, 26
  store i64 %7592, i64* %3, align 8
  %7593 = inttoptr i64 %7591 to i32*
  %7594 = load i32, i32* %7593, align 4
  %7595 = zext i32 %7594 to i64
  store i64 %7595, i64* %RSI.i889, align 8
  store i8 0, i8* %14, align 1
  %7596 = and i32 %7594, 255
  %7597 = tail call i32 @llvm.ctpop.i32(i32 %7596)
  %7598 = trunc i32 %7597 to i8
  %7599 = and i8 %7598, 1
  %7600 = xor i8 %7599, 1
  store i8 %7600, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7601 = icmp eq i32 %7594, 0
  %7602 = zext i1 %7601 to i8
  store i8 %7602, i8* %30, align 1
  %7603 = lshr i32 %7594, 31
  %7604 = trunc i32 %7603 to i8
  store i8 %7604, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7605 = sext i32 %7594 to i64
  store i64 %7605, i64* %RCX.i4448, align 8
  %7606 = shl nsw i64 %7605, 2
  %7607 = add nsw i64 %7606, 7489456
  %7608 = add i64 %7578, 39
  store i64 %7608, i64* %3, align 8
  %7609 = inttoptr i64 %7607 to i32*
  %7610 = load i32, i32* %7609, align 4
  %7611 = sub i32 %7589, %7610
  %7612 = icmp ult i32 %7589, %7610
  %7613 = zext i1 %7612 to i8
  store i8 %7613, i8* %14, align 1
  %7614 = and i32 %7611, 255
  %7615 = tail call i32 @llvm.ctpop.i32(i32 %7614)
  %7616 = trunc i32 %7615 to i8
  %7617 = and i8 %7616, 1
  %7618 = xor i8 %7617, 1
  store i8 %7618, i8* %21, align 1
  %7619 = xor i32 %7610, %7589
  %7620 = xor i32 %7619, %7611
  %7621 = lshr i32 %7620, 4
  %7622 = trunc i32 %7621 to i8
  %7623 = and i8 %7622, 1
  store i8 %7623, i8* %27, align 1
  %7624 = icmp eq i32 %7611, 0
  %7625 = zext i1 %7624 to i8
  store i8 %7625, i8* %30, align 1
  %7626 = lshr i32 %7611, 31
  %7627 = trunc i32 %7626 to i8
  store i8 %7627, i8* %33, align 1
  %7628 = lshr i32 %7589, 31
  %7629 = lshr i32 %7610, 31
  %7630 = xor i32 %7629, %7628
  %7631 = xor i32 %7626, %7628
  %7632 = add nuw nsw i32 %7631, %7630
  %7633 = icmp eq i32 %7632, 2
  %7634 = zext i1 %7633 to i8
  store i8 %7634, i8* %39, align 1
  %7635 = add i64 %7579, -496
  %7636 = add i64 %7578, 45
  store i64 %7636, i64* %3, align 8
  %7637 = inttoptr i64 %7635 to i32*
  store i32 %7583, i32* %7637, align 4
  %7638 = load i64, i64* %3, align 8
  %7639 = load i8, i8* %33, align 1
  %7640 = icmp ne i8 %7639, 0
  %7641 = load i8, i8* %39, align 1
  %7642 = icmp ne i8 %7641, 0
  %7643 = xor i1 %7640, %7642
  %.v362 = select i1 %7643, i64 6, i64 31
  %7644 = add i64 %7638, %.v362
  store i64 %7644, i64* %3, align 8
  br i1 %7643, label %block_474cfd, label %block_.L_474d16

block_474cfd:                                     ; preds = %block_.L_474cca
  %7645 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7645, i64* %RAX.i4266, align 8
  %7646 = add i64 %7645, 72000
  %7647 = add i64 %7644, 14
  store i64 %7647, i64* %3, align 8
  %7648 = inttoptr i64 %7646 to i32*
  %7649 = load i32, i32* %7648, align 4
  %7650 = zext i32 %7649 to i64
  store i64 %7650, i64* %RCX.i4448, align 8
  %7651 = load i64, i64* %RBP.i, align 8
  %7652 = add i64 %7651, -500
  %7653 = add i64 %7644, 20
  store i64 %7653, i64* %3, align 8
  %7654 = inttoptr i64 %7652 to i32*
  store i32 %7649, i32* %7654, align 4
  %7655 = load i64, i64* %3, align 8
  %7656 = add i64 %7655, 30
  store i64 %7656, i64* %3, align 8
  br label %block_.L_474d2f

block_.L_474d16:                                  ; preds = %block_.L_474cca
  %7657 = load i64, i64* %RBP.i, align 8
  %7658 = add i64 %7657, -220
  %7659 = add i64 %7644, 6
  store i64 %7659, i64* %3, align 8
  %7660 = inttoptr i64 %7658 to i32*
  %7661 = load i32, i32* %7660, align 4
  %7662 = zext i32 %7661 to i64
  store i64 %7662, i64* %RAX.i4266, align 8
  store i8 0, i8* %14, align 1
  %7663 = and i32 %7661, 255
  %7664 = tail call i32 @llvm.ctpop.i32(i32 %7663)
  %7665 = trunc i32 %7664 to i8
  %7666 = and i8 %7665, 1
  %7667 = xor i8 %7666, 1
  store i8 %7667, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7668 = icmp eq i32 %7661, 0
  %7669 = zext i1 %7668 to i8
  store i8 %7669, i8* %30, align 1
  %7670 = lshr i32 %7661, 31
  %7671 = trunc i32 %7670 to i8
  store i8 %7671, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7672 = sext i32 %7661 to i64
  store i64 %7672, i64* %RCX.i4448, align 8
  %7673 = shl nsw i64 %7672, 2
  %7674 = add nsw i64 %7673, 7489456
  %7675 = add i64 %7644, 19
  store i64 %7675, i64* %3, align 8
  %7676 = inttoptr i64 %7674 to i32*
  %7677 = load i32, i32* %7676, align 4
  %7678 = zext i32 %7677 to i64
  store i64 %7678, i64* %RAX.i4266, align 8
  %7679 = add i64 %7657, -500
  %7680 = add i64 %7644, 25
  store i64 %7680, i64* %3, align 8
  %7681 = inttoptr i64 %7679 to i32*
  store i32 %7677, i32* %7681, align 4
  %.pre262 = load i64, i64* %3, align 8
  br label %block_.L_474d2f

block_.L_474d2f:                                  ; preds = %block_.L_474d16, %block_474cfd
  %7682 = phi i64 [ %.pre262, %block_.L_474d16 ], [ %7656, %block_474cfd ]
  %7683 = load i64, i64* %RBP.i, align 8
  %7684 = add i64 %7683, -500
  %7685 = add i64 %7682, 6
  store i64 %7685, i64* %3, align 8
  %7686 = inttoptr i64 %7684 to i32*
  %7687 = load i32, i32* %7686, align 4
  %7688 = zext i32 %7687 to i64
  store i64 %7688, i64* %RAX.i4266, align 8
  %7689 = add i64 %7683, -496
  %7690 = add i64 %7682, 12
  store i64 %7690, i64* %3, align 8
  %7691 = inttoptr i64 %7689 to i32*
  %7692 = load i32, i32* %7691, align 4
  %7693 = zext i32 %7692 to i64
  store i64 %7693, i64* %RCX.i4448, align 8
  %7694 = sub i32 %7692, %7687
  %7695 = icmp ult i32 %7692, %7687
  %7696 = zext i1 %7695 to i8
  store i8 %7696, i8* %14, align 1
  %7697 = and i32 %7694, 255
  %7698 = tail call i32 @llvm.ctpop.i32(i32 %7697)
  %7699 = trunc i32 %7698 to i8
  %7700 = and i8 %7699, 1
  %7701 = xor i8 %7700, 1
  store i8 %7701, i8* %21, align 1
  %7702 = xor i32 %7687, %7692
  %7703 = xor i32 %7702, %7694
  %7704 = lshr i32 %7703, 4
  %7705 = trunc i32 %7704 to i8
  %7706 = and i8 %7705, 1
  store i8 %7706, i8* %27, align 1
  %7707 = icmp eq i32 %7694, 0
  %7708 = zext i1 %7707 to i8
  store i8 %7708, i8* %30, align 1
  %7709 = lshr i32 %7694, 31
  %7710 = trunc i32 %7709 to i8
  store i8 %7710, i8* %33, align 1
  %7711 = lshr i32 %7692, 31
  %7712 = lshr i32 %7687, 31
  %7713 = xor i32 %7712, %7711
  %7714 = xor i32 %7709, %7711
  %7715 = add nuw nsw i32 %7714, %7713
  %7716 = icmp eq i32 %7715, 2
  %7717 = zext i1 %7716 to i8
  store i8 %7717, i8* %39, align 1
  %7718 = icmp ne i8 %7710, 0
  %7719 = xor i1 %7718, %7716
  %.v347 = select i1 %7719, i64 20, i64 154
  %7720 = add i64 %7682, %.v347
  store i64 %7720, i64* %3, align 8
  br i1 %7719, label %block_474d43, label %block_.L_474dc9.loopexit

block_474d43:                                     ; preds = %block_.L_474d2f
  %7721 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  %7722 = add i64 %7721, 24
  store i64 %7722, i64* %RAX.i4266, align 8
  %7723 = icmp ugt i64 %7721, -25
  %7724 = zext i1 %7723 to i8
  store i8 %7724, i8* %14, align 1
  %7725 = trunc i64 %7722 to i32
  %7726 = and i32 %7725, 255
  %7727 = tail call i32 @llvm.ctpop.i32(i32 %7726)
  %7728 = trunc i32 %7727 to i8
  %7729 = and i8 %7728, 1
  %7730 = xor i8 %7729, 1
  store i8 %7730, i8* %21, align 1
  %7731 = xor i64 %7721, 16
  %7732 = xor i64 %7731, %7722
  %7733 = lshr i64 %7732, 4
  %7734 = trunc i64 %7733 to i8
  %7735 = and i8 %7734, 1
  store i8 %7735, i8* %27, align 1
  %7736 = icmp eq i64 %7722, 0
  %7737 = zext i1 %7736 to i8
  store i8 %7737, i8* %30, align 1
  %7738 = lshr i64 %7722, 63
  %7739 = trunc i64 %7738 to i8
  store i8 %7739, i8* %33, align 1
  %7740 = lshr i64 %7721, 63
  %7741 = xor i64 %7738, %7740
  %7742 = add nuw nsw i64 %7741, %7738
  %7743 = icmp eq i64 %7742, 2
  %7744 = zext i1 %7743 to i8
  store i8 %7744, i8* %39, align 1
  %7745 = add i64 %7683, -220
  %7746 = add i64 %7720, 18
  store i64 %7746, i64* %3, align 8
  %7747 = inttoptr i64 %7745 to i32*
  %7748 = load i32, i32* %7747, align 4
  %7749 = zext i32 %7748 to i64
  store i64 %7749, i64* %RCX.i4448, align 8
  %7750 = sext i32 %7748 to i64
  %7751 = mul nsw i64 %7750, 264
  store i64 %7751, i64* %RDX.i894, align 8
  %7752 = lshr i64 %7751, 63
  %7753 = add i64 %7751, %7722
  store i64 %7753, i64* %RAX.i4266, align 8
  %7754 = icmp ult i64 %7753, %7722
  %7755 = icmp ult i64 %7753, %7751
  %7756 = or i1 %7754, %7755
  %7757 = zext i1 %7756 to i8
  store i8 %7757, i8* %14, align 1
  %7758 = trunc i64 %7753 to i32
  %7759 = and i32 %7758, 255
  %7760 = tail call i32 @llvm.ctpop.i32(i32 %7759)
  %7761 = trunc i32 %7760 to i8
  %7762 = and i8 %7761, 1
  %7763 = xor i8 %7762, 1
  store i8 %7763, i8* %21, align 1
  %7764 = xor i64 %7751, %7722
  %7765 = xor i64 %7764, %7753
  %7766 = lshr i64 %7765, 4
  %7767 = trunc i64 %7766 to i8
  %7768 = and i8 %7767, 1
  store i8 %7768, i8* %27, align 1
  %7769 = icmp eq i64 %7753, 0
  %7770 = zext i1 %7769 to i8
  store i8 %7770, i8* %30, align 1
  %7771 = lshr i64 %7753, 63
  %7772 = trunc i64 %7771 to i8
  store i8 %7772, i8* %33, align 1
  %7773 = xor i64 %7771, %7738
  %7774 = xor i64 %7771, %7752
  %7775 = add nuw nsw i64 %7773, %7774
  %7776 = icmp eq i64 %7775, 2
  %7777 = zext i1 %7776 to i8
  store i8 %7777, i8* %39, align 1
  %7778 = load i64, i64* %RBP.i, align 8
  %7779 = add i64 %7778, -228
  %7780 = add i64 %7720, 41
  store i64 %7780, i64* %3, align 8
  %7781 = inttoptr i64 %7779 to i32*
  %7782 = load i32, i32* %7781, align 4
  %7783 = sext i32 %7782 to i64
  store i64 %7783, i64* %RDX.i894, align 8
  %7784 = shl nsw i64 %7783, 3
  %7785 = add i64 %7784, %7753
  %7786 = add i64 %7720, 45
  store i64 %7786, i64* %3, align 8
  %7787 = inttoptr i64 %7785 to i64*
  %7788 = load i64, i64* %7787, align 8
  store i64 %7788, i64* %RAX.i4266, align 8
  %7789 = add i64 %7778, -72
  %7790 = add i64 %7720, 49
  store i64 %7790, i64* %3, align 8
  %7791 = inttoptr i64 %7789 to i64*
  %7792 = load i64, i64* %7791, align 8
  store i64 %7792, i64* %RDX.i894, align 8
  %7793 = add i64 %7778, -212
  %7794 = add i64 %7720, 56
  store i64 %7794, i64* %3, align 8
  %7795 = inttoptr i64 %7793 to i32*
  %7796 = load i32, i32* %7795, align 4
  %7797 = sext i32 %7796 to i64
  store i64 %7797, i64* %RSI.i889, align 8
  %7798 = shl nsw i64 %7797, 3
  %7799 = add i64 %7798, %7792
  %7800 = add i64 %7720, 60
  store i64 %7800, i64* %3, align 8
  %7801 = inttoptr i64 %7799 to i64*
  %7802 = load i64, i64* %7801, align 8
  store i64 %7802, i64* %RDX.i894, align 8
  %7803 = add i64 %7778, -20
  %7804 = add i64 %7720, 64
  store i64 %7804, i64* %3, align 8
  %7805 = inttoptr i64 %7803 to i32*
  %7806 = load i32, i32* %7805, align 4
  %7807 = sext i32 %7806 to i64
  store i64 %7807, i64* %RSI.i889, align 8
  %7808 = shl nsw i64 %7807, 3
  %7809 = add i64 %7808, %7802
  %7810 = add i64 %7720, 68
  store i64 %7810, i64* %3, align 8
  %7811 = inttoptr i64 %7809 to i64*
  %7812 = load i64, i64* %7811, align 8
  store i64 %7812, i64* %RDX.i894, align 8
  %7813 = add i64 %7778, -24
  %7814 = add i64 %7720, 72
  store i64 %7814, i64* %3, align 8
  %7815 = inttoptr i64 %7813 to i32*
  %7816 = load i32, i32* %7815, align 4
  %7817 = sext i32 %7816 to i64
  store i64 %7817, i64* %RSI.i889, align 8
  %7818 = shl nsw i64 %7817, 3
  %7819 = add i64 %7812, %7818
  %7820 = add i64 %7720, 76
  store i64 %7820, i64* %3, align 8
  %7821 = inttoptr i64 %7819 to i64*
  %7822 = load i64, i64* %7821, align 8
  %7823 = sub i64 %7788, %7822
  %7824 = icmp ult i64 %7788, %7822
  %7825 = zext i1 %7824 to i8
  store i8 %7825, i8* %14, align 1
  %7826 = trunc i64 %7823 to i32
  %7827 = and i32 %7826, 255
  %7828 = tail call i32 @llvm.ctpop.i32(i32 %7827)
  %7829 = trunc i32 %7828 to i8
  %7830 = and i8 %7829, 1
  %7831 = xor i8 %7830, 1
  store i8 %7831, i8* %21, align 1
  %7832 = xor i64 %7822, %7788
  %7833 = xor i64 %7832, %7823
  %7834 = lshr i64 %7833, 4
  %7835 = trunc i64 %7834 to i8
  %7836 = and i8 %7835, 1
  store i8 %7836, i8* %27, align 1
  %7837 = icmp eq i64 %7823, 0
  %7838 = zext i1 %7837 to i8
  store i8 %7838, i8* %30, align 1
  %7839 = lshr i64 %7823, 63
  %7840 = trunc i64 %7839 to i8
  store i8 %7840, i8* %33, align 1
  %7841 = lshr i64 %7788, 63
  %7842 = lshr i64 %7822, 63
  %7843 = xor i64 %7842, %7841
  %7844 = xor i64 %7839, %7841
  %7845 = add nuw nsw i64 %7844, %7843
  %7846 = icmp eq i64 %7845, 2
  %7847 = zext i1 %7846 to i8
  store i8 %7847, i8* %39, align 1
  %.v350 = select i1 %7837, i64 82, i64 99
  %7848 = add i64 %7720, %.v350
  store i64 %7848, i64* %3, align 8
  br i1 %7837, label %block_474d95, label %block_.L_474da6

block_474d95:                                     ; preds = %block_474d43
  %7849 = add i64 %7848, 6
  store i64 %7849, i64* %3, align 8
  %7850 = load i32, i32* %7781, align 4
  %7851 = zext i32 %7850 to i64
  store i64 %7851, i64* %RAX.i4266, align 8
  %7852 = load i64, i64* %RBP.i, align 8
  %7853 = add i64 %7852, -224
  %7854 = add i64 %7848, 12
  store i64 %7854, i64* %3, align 8
  %7855 = inttoptr i64 %7853 to i32*
  store i32 %7850, i32* %7855, align 4
  %7856 = load i64, i64* %3, align 8
  %7857 = add i64 %7856, 40
  store i64 %7857, i64* %3, align 8
  %.pre263 = load i64, i64* %RBP.i, align 8
  br label %block_.L_474dc9

block_.L_474da6:                                  ; preds = %block_474d43
  %7858 = add i64 %7778, -224
  %7859 = add i64 %7848, 10
  store i64 %7859, i64* %3, align 8
  %7860 = inttoptr i64 %7858 to i32*
  store i32 -135792468, i32* %7860, align 4
  %7861 = load i64, i64* %3, align 8
  %7862 = load i64, i64* %RBP.i, align 8
  %7863 = add i64 %7862, -228
  %7864 = add i64 %7861, 11
  store i64 %7864, i64* %3, align 8
  %7865 = inttoptr i64 %7863 to i32*
  %7866 = load i32, i32* %7865, align 4
  %7867 = add i32 %7866, 1
  %7868 = zext i32 %7867 to i64
  store i64 %7868, i64* %RAX.i4266, align 8
  %7869 = icmp eq i32 %7866, -1
  %7870 = icmp eq i32 %7867, 0
  %7871 = or i1 %7869, %7870
  %7872 = zext i1 %7871 to i8
  store i8 %7872, i8* %14, align 1
  %7873 = and i32 %7867, 255
  %7874 = tail call i32 @llvm.ctpop.i32(i32 %7873)
  %7875 = trunc i32 %7874 to i8
  %7876 = and i8 %7875, 1
  %7877 = xor i8 %7876, 1
  store i8 %7877, i8* %21, align 1
  %7878 = xor i32 %7867, %7866
  %7879 = lshr i32 %7878, 4
  %7880 = trunc i32 %7879 to i8
  %7881 = and i8 %7880, 1
  store i8 %7881, i8* %27, align 1
  %7882 = zext i1 %7870 to i8
  store i8 %7882, i8* %30, align 1
  %7883 = lshr i32 %7867, 31
  %7884 = trunc i32 %7883 to i8
  store i8 %7884, i8* %33, align 1
  %7885 = lshr i32 %7866, 31
  %7886 = xor i32 %7883, %7885
  %7887 = add nuw nsw i32 %7886, %7883
  %7888 = icmp eq i32 %7887, 2
  %7889 = zext i1 %7888 to i8
  store i8 %7889, i8* %39, align 1
  %7890 = add i64 %7861, 20
  store i64 %7890, i64* %3, align 8
  store i32 %7867, i32* %7865, align 4
  %7891 = load i64, i64* %3, align 8
  %7892 = add i64 %7891, -250
  store i64 %7892, i64* %3, align 8
  br label %block_.L_474cca

block_.L_474dc9.loopexit:                         ; preds = %block_.L_474d2f
  br label %block_.L_474dc9

block_.L_474dc9:                                  ; preds = %block_.L_474dc9.loopexit, %block_474d95
  %7893 = phi i64 [ %7857, %block_474d95 ], [ %7720, %block_.L_474dc9.loopexit ]
  %7894 = phi i64 [ %.pre263, %block_474d95 ], [ %7683, %block_.L_474dc9.loopexit ]
  %7895 = add i64 %7894, -224
  %7896 = add i64 %7893, 10
  store i64 %7896, i64* %3, align 8
  %7897 = inttoptr i64 %7895 to i32*
  %7898 = load i32, i32* %7897, align 4
  %7899 = add i32 %7898, 135792468
  %7900 = icmp ult i32 %7898, -135792468
  %7901 = zext i1 %7900 to i8
  store i8 %7901, i8* %14, align 1
  %7902 = and i32 %7899, 255
  %7903 = tail call i32 @llvm.ctpop.i32(i32 %7902)
  %7904 = trunc i32 %7903 to i8
  %7905 = and i8 %7904, 1
  %7906 = xor i8 %7905, 1
  store i8 %7906, i8* %21, align 1
  %7907 = xor i32 %7899, %7898
  %7908 = lshr i32 %7907, 4
  %7909 = trunc i32 %7908 to i8
  %7910 = and i8 %7909, 1
  store i8 %7910, i8* %27, align 1
  %7911 = icmp eq i32 %7899, 0
  %7912 = zext i1 %7911 to i8
  store i8 %7912, i8* %30, align 1
  %7913 = lshr i32 %7899, 31
  %7914 = trunc i32 %7913 to i8
  store i8 %7914, i8* %33, align 1
  %7915 = lshr i32 %7898, 31
  %7916 = xor i32 %7915, 1
  %7917 = xor i32 %7913, %7915
  %7918 = add nuw nsw i32 %7917, %7916
  %7919 = icmp eq i32 %7918, 2
  %7920 = zext i1 %7919 to i8
  store i8 %7920, i8* %39, align 1
  %.v348 = select i1 %7911, i64 746, i64 16
  %7921 = add i64 %7893, %.v348
  %7922 = add i64 %7921, 8
  store i64 %7922, i64* %3, align 8
  br i1 %7911, label %block_.L_4750b3, label %block_474dd9

block_474dd9:                                     ; preds = %block_.L_474dc9
  %7923 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %7924 = add i64 %7923, 72016
  store i64 %7924, i64* %RAX.i4266, align 8
  %7925 = icmp ugt i64 %7923, -72017
  %7926 = zext i1 %7925 to i8
  store i8 %7926, i8* %14, align 1
  %7927 = trunc i64 %7924 to i32
  %7928 = and i32 %7927, 255
  %7929 = tail call i32 @llvm.ctpop.i32(i32 %7928)
  %7930 = trunc i32 %7929 to i8
  %7931 = and i8 %7930, 1
  %7932 = xor i8 %7931, 1
  store i8 %7932, i8* %21, align 1
  %7933 = xor i64 %7923, 16
  %7934 = xor i64 %7933, %7924
  %7935 = lshr i64 %7934, 4
  %7936 = trunc i64 %7935 to i8
  %7937 = and i8 %7936, 1
  store i8 %7937, i8* %27, align 1
  %7938 = icmp eq i64 %7924, 0
  %7939 = zext i1 %7938 to i8
  store i8 %7939, i8* %30, align 1
  %7940 = lshr i64 %7924, 63
  %7941 = trunc i64 %7940 to i8
  store i8 %7941, i8* %33, align 1
  %7942 = lshr i64 %7923, 63
  %7943 = xor i64 %7940, %7942
  %7944 = add nuw nsw i64 %7943, %7940
  %7945 = icmp eq i64 %7944, 2
  %7946 = zext i1 %7945 to i8
  store i8 %7946, i8* %39, align 1
  %7947 = add i64 %7894, -220
  %7948 = add i64 %7921, 20
  store i64 %7948, i64* %3, align 8
  %7949 = inttoptr i64 %7947 to i32*
  %7950 = load i32, i32* %7949, align 4
  %7951 = zext i32 %7950 to i64
  store i64 %7951, i64* %RCX.i4448, align 8
  %7952 = sext i32 %7950 to i64
  %7953 = mul nsw i64 %7952, 60
  store i64 %7953, i64* %RDX.i894, align 8
  %7954 = lshr i64 %7953, 63
  %7955 = add i64 %7953, %7924
  store i64 %7955, i64* %RAX.i4266, align 8
  %7956 = icmp ult i64 %7955, %7924
  %7957 = icmp ult i64 %7955, %7953
  %7958 = or i1 %7956, %7957
  %7959 = zext i1 %7958 to i8
  store i8 %7959, i8* %14, align 1
  %7960 = trunc i64 %7955 to i32
  %7961 = and i32 %7960, 255
  %7962 = tail call i32 @llvm.ctpop.i32(i32 %7961)
  %7963 = trunc i32 %7962 to i8
  %7964 = and i8 %7963, 1
  %7965 = xor i8 %7964, 1
  store i8 %7965, i8* %21, align 1
  %7966 = xor i64 %7953, %7924
  %7967 = xor i64 %7966, %7955
  %7968 = lshr i64 %7967, 4
  %7969 = trunc i64 %7968 to i8
  %7970 = and i8 %7969, 1
  store i8 %7970, i8* %27, align 1
  %7971 = icmp eq i64 %7955, 0
  %7972 = zext i1 %7971 to i8
  store i8 %7972, i8* %30, align 1
  %7973 = lshr i64 %7955, 63
  %7974 = trunc i64 %7973 to i8
  store i8 %7974, i8* %33, align 1
  %7975 = xor i64 %7973, %7940
  %7976 = xor i64 %7973, %7954
  %7977 = add nuw nsw i64 %7975, %7976
  %7978 = icmp eq i64 %7977, 2
  %7979 = zext i1 %7978 to i8
  store i8 %7979, i8* %39, align 1
  %7980 = load i64, i64* %RBP.i, align 8
  %7981 = add i64 %7980, -224
  %7982 = add i64 %7921, 40
  store i64 %7982, i64* %3, align 8
  %7983 = inttoptr i64 %7981 to i32*
  %7984 = load i32, i32* %7983, align 4
  %7985 = sext i32 %7984 to i64
  store i64 %7985, i64* %RDX.i894, align 8
  %7986 = shl nsw i64 %7985, 2
  %7987 = add i64 %7986, %7955
  %7988 = add i64 %7921, 43
  store i64 %7988, i64* %3, align 8
  %7989 = inttoptr i64 %7987 to i32*
  %7990 = load i32, i32* %7989, align 4
  %7991 = zext i32 %7990 to i64
  store i64 %7991, i64* %RCX.i4448, align 8
  %7992 = add i64 %7980, -36
  %7993 = add i64 %7921, 46
  store i64 %7993, i64* %3, align 8
  %7994 = inttoptr i64 %7992 to i32*
  store i32 %7990, i32* %7994, align 4
  %7995 = load i64, i64* %RBP.i, align 8
  %7996 = add i64 %7995, -36
  %7997 = load i64, i64* %3, align 8
  %7998 = add i64 %7997, 7
  store i64 %7998, i64* %3, align 8
  %7999 = inttoptr i64 %7996 to i32*
  %8000 = load i32, i32* %7999, align 4
  %8001 = add i32 %8000, -9999
  %8002 = icmp ult i32 %8000, 9999
  %8003 = zext i1 %8002 to i8
  store i8 %8003, i8* %14, align 1
  %8004 = and i32 %8001, 255
  %8005 = tail call i32 @llvm.ctpop.i32(i32 %8004)
  %8006 = trunc i32 %8005 to i8
  %8007 = and i8 %8006, 1
  %8008 = xor i8 %8007, 1
  store i8 %8008, i8* %21, align 1
  %8009 = xor i32 %8001, %8000
  %8010 = lshr i32 %8009, 4
  %8011 = trunc i32 %8010 to i8
  %8012 = and i8 %8011, 1
  store i8 %8012, i8* %27, align 1
  %8013 = icmp eq i32 %8001, 0
  %8014 = zext i1 %8013 to i8
  store i8 %8014, i8* %30, align 1
  %8015 = lshr i32 %8001, 31
  %8016 = trunc i32 %8015 to i8
  store i8 %8016, i8* %33, align 1
  %8017 = lshr i32 %8000, 31
  %8018 = xor i32 %8015, %8017
  %8019 = add nuw nsw i32 %8018, %8017
  %8020 = icmp eq i32 %8019, 2
  %8021 = zext i1 %8020 to i8
  store i8 %8021, i8* %39, align 1
  %.v349 = select i1 %8013, i64 13, i64 223
  %8022 = add i64 %7997, %.v349
  store i64 %8022, i64* %3, align 8
  br i1 %8013, label %block_474e14, label %block_.L_474ee6

block_474e14:                                     ; preds = %block_474dd9
  %8023 = add i64 %7995, -56
  %8024 = add i64 %8022, 4
  store i64 %8024, i64* %3, align 8
  %8025 = inttoptr i64 %8023 to i64*
  %8026 = load i64, i64* %8025, align 8
  store i64 %8026, i64* %RAX.i4266, align 8
  %8027 = add i64 %7995, -212
  %8028 = add i64 %8022, 11
  store i64 %8028, i64* %3, align 8
  %8029 = inttoptr i64 %8027 to i32*
  %8030 = load i32, i32* %8029, align 4
  %8031 = sext i32 %8030 to i64
  store i64 %8031, i64* %RCX.i4448, align 8
  %8032 = shl nsw i64 %8031, 3
  %8033 = add i64 %8032, %8026
  %8034 = add i64 %8022, 15
  store i64 %8034, i64* %3, align 8
  %8035 = inttoptr i64 %8033 to i64*
  %8036 = load i64, i64* %8035, align 8
  store i64 %8036, i64* %RAX.i4266, align 8
  %8037 = add i64 %7995, -20
  %8038 = add i64 %8022, 19
  store i64 %8038, i64* %3, align 8
  %8039 = inttoptr i64 %8037 to i32*
  %8040 = load i32, i32* %8039, align 4
  %8041 = sext i32 %8040 to i64
  store i64 %8041, i64* %RCX.i4448, align 8
  %8042 = shl nsw i64 %8041, 3
  %8043 = add i64 %8042, %8036
  %8044 = add i64 %8022, 23
  store i64 %8044, i64* %3, align 8
  %8045 = inttoptr i64 %8043 to i64*
  %8046 = load i64, i64* %8045, align 8
  store i64 %8046, i64* %RAX.i4266, align 8
  %8047 = add i64 %7995, -24
  %8048 = add i64 %8022, 27
  store i64 %8048, i64* %3, align 8
  %8049 = inttoptr i64 %8047 to i32*
  %8050 = load i32, i32* %8049, align 4
  %8051 = sext i32 %8050 to i64
  store i64 %8051, i64* %RCX.i4448, align 8
  %8052 = shl nsw i64 %8051, 3
  %8053 = add i64 %8052, %8046
  %8054 = add i64 %8022, 31
  store i64 %8054, i64* %3, align 8
  %8055 = inttoptr i64 %8053 to i64*
  %8056 = load i64, i64* %8055, align 8
  store i64 %8056, i64* %RAX.i4266, align 8
  %8057 = add i64 %8022, 34
  store i64 %8057, i64* %3, align 8
  %8058 = inttoptr i64 %8056 to i16*
  %8059 = load i16, i16* %8058, align 2
  store i16 %8059, i16* %DX.i493, align 2
  %8060 = add i64 %7995, -32
  %8061 = add i64 %8022, 38
  store i64 %8061, i64* %3, align 8
  %8062 = inttoptr i64 %8060 to i64*
  %8063 = load i64, i64* %8062, align 8
  store i64 %8063, i64* %RAX.i4266, align 8
  %8064 = add i64 %7995, -4
  %8065 = add i64 %8022, 42
  store i64 %8065, i64* %3, align 8
  %8066 = inttoptr i64 %8064 to i32*
  %8067 = load i32, i32* %8066, align 4
  %8068 = sext i32 %8067 to i64
  store i64 %8068, i64* %RCX.i4448, align 8
  %8069 = shl nsw i64 %8068, 3
  %8070 = add i64 %8069, %8063
  %8071 = add i64 %8022, 46
  store i64 %8071, i64* %3, align 8
  %8072 = inttoptr i64 %8070 to i64*
  %8073 = load i64, i64* %8072, align 8
  store i64 %8073, i64* %RAX.i4266, align 8
  %8074 = add i64 %7995, -8
  %8075 = add i64 %8022, 50
  store i64 %8075, i64* %3, align 8
  %8076 = inttoptr i64 %8074 to i32*
  %8077 = load i32, i32* %8076, align 4
  %8078 = sext i32 %8077 to i64
  store i64 %8078, i64* %RCX.i4448, align 8
  %8079 = shl nsw i64 %8078, 3
  %8080 = add i64 %8079, %8073
  %8081 = add i64 %8022, 54
  store i64 %8081, i64* %3, align 8
  %8082 = inttoptr i64 %8080 to i64*
  %8083 = load i64, i64* %8082, align 8
  store i64 %8083, i64* %RAX.i4266, align 8
  %8084 = add i64 %8022, 57
  store i64 %8084, i64* %3, align 8
  %8085 = inttoptr i64 %8083 to i64*
  %8086 = load i64, i64* %8085, align 8
  store i64 %8086, i64* %RAX.i4266, align 8
  %8087 = add i64 %8022, 60
  store i64 %8087, i64* %3, align 8
  %8088 = inttoptr i64 %8086 to i64*
  %8089 = load i64, i64* %8088, align 8
  store i64 %8089, i64* %RAX.i4266, align 8
  %8090 = add i64 %8022, 63
  store i64 %8090, i64* %3, align 8
  %8091 = inttoptr i64 %8089 to i64*
  %8092 = load i64, i64* %8091, align 8
  store i64 %8092, i64* %RAX.i4266, align 8
  %8093 = add i64 %8022, 66
  store i64 %8093, i64* %3, align 8
  %8094 = inttoptr i64 %8092 to i16*
  store i16 %8059, i16* %8094, align 2
  %8095 = load i64, i64* %RBP.i, align 8
  %8096 = add i64 %8095, -56
  %8097 = load i64, i64* %3, align 8
  %8098 = add i64 %8097, 4
  store i64 %8098, i64* %3, align 8
  %8099 = inttoptr i64 %8096 to i64*
  %8100 = load i64, i64* %8099, align 8
  store i64 %8100, i64* %RAX.i4266, align 8
  %8101 = add i64 %8095, -212
  %8102 = add i64 %8097, 11
  store i64 %8102, i64* %3, align 8
  %8103 = inttoptr i64 %8101 to i32*
  %8104 = load i32, i32* %8103, align 4
  %8105 = sext i32 %8104 to i64
  store i64 %8105, i64* %RCX.i4448, align 8
  %8106 = shl nsw i64 %8105, 3
  %8107 = add i64 %8106, %8100
  %8108 = add i64 %8097, 15
  store i64 %8108, i64* %3, align 8
  %8109 = inttoptr i64 %8107 to i64*
  %8110 = load i64, i64* %8109, align 8
  store i64 %8110, i64* %RAX.i4266, align 8
  %8111 = add i64 %8095, -20
  %8112 = add i64 %8097, 19
  store i64 %8112, i64* %3, align 8
  %8113 = inttoptr i64 %8111 to i32*
  %8114 = load i32, i32* %8113, align 4
  %8115 = sext i32 %8114 to i64
  store i64 %8115, i64* %RCX.i4448, align 8
  %8116 = shl nsw i64 %8115, 3
  %8117 = add i64 %8116, %8110
  %8118 = add i64 %8097, 23
  store i64 %8118, i64* %3, align 8
  %8119 = inttoptr i64 %8117 to i64*
  %8120 = load i64, i64* %8119, align 8
  store i64 %8120, i64* %RAX.i4266, align 8
  %8121 = add i64 %8095, -24
  %8122 = add i64 %8097, 27
  store i64 %8122, i64* %3, align 8
  %8123 = inttoptr i64 %8121 to i32*
  %8124 = load i32, i32* %8123, align 4
  %8125 = sext i32 %8124 to i64
  store i64 %8125, i64* %RCX.i4448, align 8
  %8126 = shl nsw i64 %8125, 3
  %8127 = add i64 %8126, %8120
  %8128 = add i64 %8097, 31
  store i64 %8128, i64* %3, align 8
  %8129 = inttoptr i64 %8127 to i64*
  %8130 = load i64, i64* %8129, align 8
  store i64 %8130, i64* %RAX.i4266, align 8
  %8131 = add i64 %8130, 2
  %8132 = add i64 %8097, 35
  store i64 %8132, i64* %3, align 8
  %8133 = inttoptr i64 %8131 to i16*
  %8134 = load i16, i16* %8133, align 2
  store i16 %8134, i16* %DX.i493, align 2
  %8135 = add i64 %8095, -32
  %8136 = add i64 %8097, 39
  store i64 %8136, i64* %3, align 8
  %8137 = inttoptr i64 %8135 to i64*
  %8138 = load i64, i64* %8137, align 8
  store i64 %8138, i64* %RAX.i4266, align 8
  %8139 = add i64 %8095, -4
  %8140 = add i64 %8097, 43
  store i64 %8140, i64* %3, align 8
  %8141 = inttoptr i64 %8139 to i32*
  %8142 = load i32, i32* %8141, align 4
  %8143 = sext i32 %8142 to i64
  store i64 %8143, i64* %RCX.i4448, align 8
  %8144 = shl nsw i64 %8143, 3
  %8145 = add i64 %8144, %8138
  %8146 = add i64 %8097, 47
  store i64 %8146, i64* %3, align 8
  %8147 = inttoptr i64 %8145 to i64*
  %8148 = load i64, i64* %8147, align 8
  store i64 %8148, i64* %RAX.i4266, align 8
  %8149 = add i64 %8095, -8
  %8150 = add i64 %8097, 51
  store i64 %8150, i64* %3, align 8
  %8151 = inttoptr i64 %8149 to i32*
  %8152 = load i32, i32* %8151, align 4
  %8153 = sext i32 %8152 to i64
  store i64 %8153, i64* %RCX.i4448, align 8
  %8154 = shl nsw i64 %8153, 3
  %8155 = add i64 %8154, %8148
  %8156 = add i64 %8097, 55
  store i64 %8156, i64* %3, align 8
  %8157 = inttoptr i64 %8155 to i64*
  %8158 = load i64, i64* %8157, align 8
  store i64 %8158, i64* %RAX.i4266, align 8
  %8159 = add i64 %8097, 58
  store i64 %8159, i64* %3, align 8
  %8160 = inttoptr i64 %8158 to i64*
  %8161 = load i64, i64* %8160, align 8
  store i64 %8161, i64* %RAX.i4266, align 8
  %8162 = add i64 %8097, 61
  store i64 %8162, i64* %3, align 8
  %8163 = inttoptr i64 %8161 to i64*
  %8164 = load i64, i64* %8163, align 8
  store i64 %8164, i64* %RAX.i4266, align 8
  %8165 = add i64 %8097, 64
  store i64 %8165, i64* %3, align 8
  %8166 = inttoptr i64 %8164 to i64*
  %8167 = load i64, i64* %8166, align 8
  store i64 %8167, i64* %RAX.i4266, align 8
  %8168 = add i64 %8167, 2
  %8169 = add i64 %8097, 68
  store i64 %8169, i64* %3, align 8
  %8170 = inttoptr i64 %8168 to i16*
  store i16 %8134, i16* %8170, align 2
  %8171 = load i64, i64* %RBP.i, align 8
  %8172 = add i64 %8171, -32
  %8173 = load i64, i64* %3, align 8
  %8174 = add i64 %8173, 4
  store i64 %8174, i64* %3, align 8
  %8175 = inttoptr i64 %8172 to i64*
  %8176 = load i64, i64* %8175, align 8
  store i64 %8176, i64* %RAX.i4266, align 8
  %8177 = add i64 %8171, -4
  %8178 = add i64 %8173, 8
  store i64 %8178, i64* %3, align 8
  %8179 = inttoptr i64 %8177 to i32*
  %8180 = load i32, i32* %8179, align 4
  %8181 = sext i32 %8180 to i64
  store i64 %8181, i64* %RCX.i4448, align 8
  %8182 = shl nsw i64 %8181, 3
  %8183 = add i64 %8182, %8176
  %8184 = add i64 %8173, 12
  store i64 %8184, i64* %3, align 8
  %8185 = inttoptr i64 %8183 to i64*
  %8186 = load i64, i64* %8185, align 8
  store i64 %8186, i64* %RAX.i4266, align 8
  %8187 = add i64 %8171, -8
  %8188 = add i64 %8173, 16
  store i64 %8188, i64* %3, align 8
  %8189 = inttoptr i64 %8187 to i32*
  %8190 = load i32, i32* %8189, align 4
  %8191 = sext i32 %8190 to i64
  store i64 %8191, i64* %RCX.i4448, align 8
  %8192 = shl nsw i64 %8191, 3
  %8193 = add i64 %8192, %8186
  %8194 = add i64 %8173, 20
  store i64 %8194, i64* %3, align 8
  %8195 = inttoptr i64 %8193 to i64*
  %8196 = load i64, i64* %8195, align 8
  store i64 %8196, i64* %RAX.i4266, align 8
  %8197 = add i64 %8196, 8
  %8198 = add i64 %8173, 24
  store i64 %8198, i64* %3, align 8
  %8199 = inttoptr i64 %8197 to i64*
  %8200 = load i64, i64* %8199, align 8
  store i64 %8200, i64* %RAX.i4266, align 8
  %8201 = add i64 %8173, 27
  store i64 %8201, i64* %3, align 8
  %8202 = inttoptr i64 %8200 to i64*
  %8203 = load i64, i64* %8202, align 8
  store i64 %8203, i64* %RAX.i4266, align 8
  %8204 = add i64 %8173, 30
  store i64 %8204, i64* %3, align 8
  %8205 = inttoptr i64 %8203 to i64*
  %8206 = load i64, i64* %8205, align 8
  store i64 %8206, i64* %RAX.i4266, align 8
  %8207 = add i64 %8173, 35
  store i64 %8207, i64* %3, align 8
  %8208 = inttoptr i64 %8206 to i16*
  store i16 0, i16* %8208, align 2
  %8209 = load i64, i64* %RBP.i, align 8
  %8210 = add i64 %8209, -32
  %8211 = load i64, i64* %3, align 8
  %8212 = add i64 %8211, 4
  store i64 %8212, i64* %3, align 8
  %8213 = inttoptr i64 %8210 to i64*
  %8214 = load i64, i64* %8213, align 8
  store i64 %8214, i64* %RAX.i4266, align 8
  %8215 = add i64 %8209, -4
  %8216 = add i64 %8211, 8
  store i64 %8216, i64* %3, align 8
  %8217 = inttoptr i64 %8215 to i32*
  %8218 = load i32, i32* %8217, align 4
  %8219 = sext i32 %8218 to i64
  store i64 %8219, i64* %RCX.i4448, align 8
  %8220 = shl nsw i64 %8219, 3
  %8221 = add i64 %8220, %8214
  %8222 = add i64 %8211, 12
  store i64 %8222, i64* %3, align 8
  %8223 = inttoptr i64 %8221 to i64*
  %8224 = load i64, i64* %8223, align 8
  store i64 %8224, i64* %RAX.i4266, align 8
  %8225 = add i64 %8209, -8
  %8226 = add i64 %8211, 16
  store i64 %8226, i64* %3, align 8
  %8227 = inttoptr i64 %8225 to i32*
  %8228 = load i32, i32* %8227, align 4
  %8229 = sext i32 %8228 to i64
  store i64 %8229, i64* %RCX.i4448, align 8
  %8230 = shl nsw i64 %8229, 3
  %8231 = add i64 %8230, %8224
  %8232 = add i64 %8211, 20
  store i64 %8232, i64* %3, align 8
  %8233 = inttoptr i64 %8231 to i64*
  %8234 = load i64, i64* %8233, align 8
  store i64 %8234, i64* %RAX.i4266, align 8
  %8235 = add i64 %8234, 8
  %8236 = add i64 %8211, 24
  store i64 %8236, i64* %3, align 8
  %8237 = inttoptr i64 %8235 to i64*
  %8238 = load i64, i64* %8237, align 8
  store i64 %8238, i64* %RAX.i4266, align 8
  %8239 = add i64 %8211, 27
  store i64 %8239, i64* %3, align 8
  %8240 = inttoptr i64 %8238 to i64*
  %8241 = load i64, i64* %8240, align 8
  store i64 %8241, i64* %RAX.i4266, align 8
  %8242 = add i64 %8211, 30
  store i64 %8242, i64* %3, align 8
  %8243 = inttoptr i64 %8241 to i64*
  %8244 = load i64, i64* %8243, align 8
  store i64 %8244, i64* %RAX.i4266, align 8
  %8245 = add i64 %8244, 2
  %8246 = add i64 %8211, 36
  store i64 %8246, i64* %3, align 8
  %8247 = inttoptr i64 %8245 to i16*
  store i16 0, i16* %8247, align 2
  %8248 = load i64, i64* %3, align 8
  %8249 = add i64 %8248, 369
  store i64 %8249, i64* %3, align 8
  br label %block_.L_475052

block_.L_474ee6:                                  ; preds = %block_474dd9
  %8250 = add i64 %8022, 3
  store i64 %8250, i64* %3, align 8
  %8251 = load i32, i32* %7999, align 4
  %8252 = zext i32 %8251 to i64
  store i64 %8252, i64* %RAX.i4266, align 8
  %8253 = add i64 %7995, -56
  %8254 = add i64 %8022, 7
  store i64 %8254, i64* %3, align 8
  %8255 = inttoptr i64 %8253 to i64*
  %8256 = load i64, i64* %8255, align 8
  store i64 %8256, i64* %RCX.i4448, align 8
  %8257 = add i64 %7995, -212
  %8258 = add i64 %8022, 14
  store i64 %8258, i64* %3, align 8
  %8259 = inttoptr i64 %8257 to i32*
  %8260 = load i32, i32* %8259, align 4
  %8261 = sext i32 %8260 to i64
  store i64 %8261, i64* %RDX.i894, align 8
  %8262 = shl nsw i64 %8261, 3
  %8263 = add i64 %8262, %8256
  %8264 = add i64 %8022, 18
  store i64 %8264, i64* %3, align 8
  %8265 = inttoptr i64 %8263 to i64*
  %8266 = load i64, i64* %8265, align 8
  store i64 %8266, i64* %RCX.i4448, align 8
  %8267 = add i64 %7995, -20
  %8268 = add i64 %8022, 22
  store i64 %8268, i64* %3, align 8
  %8269 = inttoptr i64 %8267 to i32*
  %8270 = load i32, i32* %8269, align 4
  %8271 = sext i32 %8270 to i64
  store i64 %8271, i64* %RDX.i894, align 8
  %8272 = shl nsw i64 %8271, 3
  %8273 = add i64 %8272, %8266
  %8274 = add i64 %8022, 26
  store i64 %8274, i64* %3, align 8
  %8275 = inttoptr i64 %8273 to i64*
  %8276 = load i64, i64* %8275, align 8
  store i64 %8276, i64* %RCX.i4448, align 8
  %8277 = add i64 %7995, -24
  %8278 = add i64 %8022, 30
  store i64 %8278, i64* %3, align 8
  %8279 = inttoptr i64 %8277 to i32*
  %8280 = load i32, i32* %8279, align 4
  %8281 = sext i32 %8280 to i64
  store i64 %8281, i64* %RDX.i894, align 8
  %8282 = shl nsw i64 %8281, 3
  %8283 = add i64 %8282, %8276
  %8284 = add i64 %8022, 34
  store i64 %8284, i64* %3, align 8
  %8285 = inttoptr i64 %8283 to i64*
  %8286 = load i64, i64* %8285, align 8
  store i64 %8286, i64* %RCX.i4448, align 8
  %8287 = add i64 %8022, 37
  store i64 %8287, i64* %3, align 8
  %8288 = inttoptr i64 %8286 to i16*
  %8289 = load i16, i16* %8288, align 2
  %8290 = sext i16 %8289 to i64
  %8291 = and i64 %8290, 4294967295
  store i64 %8291, i64* %RSI.i889, align 8
  %8292 = sext i16 %8289 to i32
  %8293 = mul i32 %8292, %8251
  %8294 = add i32 %8293, 128
  %8295 = zext i32 %8294 to i64
  %8296 = shl nuw i64 %8295, 32
  %8297 = ashr i64 %8296, 39
  %8298 = lshr i64 %8297, 1
  %8299 = trunc i64 %8297 to i8
  %8300 = and i8 %8299, 1
  %8301 = trunc i64 %8298 to i32
  %8302 = and i64 %8298, 4294967295
  store i64 %8302, i64* %RAX.i4266, align 8
  store i8 %8300, i8* %14, align 1
  %8303 = and i32 %8301, 255
  %8304 = tail call i32 @llvm.ctpop.i32(i32 %8303)
  %8305 = trunc i32 %8304 to i8
  %8306 = and i8 %8305, 1
  %8307 = xor i8 %8306, 1
  store i8 %8307, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8308 = icmp eq i32 %8301, 0
  %8309 = zext i1 %8308 to i8
  store i8 %8309, i8* %30, align 1
  %8310 = lshr i64 %8297, 32
  %8311 = trunc i64 %8310 to i8
  %8312 = and i8 %8311, 1
  store i8 %8312, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8313 = trunc i64 %8298 to i16
  store i16 %8313, i16* %DI.i339, align 2
  %8314 = load i64, i64* %RBP.i, align 8
  %8315 = add i64 %8314, -32
  %8316 = add i64 %8022, 55
  store i64 %8316, i64* %3, align 8
  %8317 = inttoptr i64 %8315 to i64*
  %8318 = load i64, i64* %8317, align 8
  store i64 %8318, i64* %RCX.i4448, align 8
  %8319 = add i64 %8314, -4
  %8320 = add i64 %8022, 59
  store i64 %8320, i64* %3, align 8
  %8321 = inttoptr i64 %8319 to i32*
  %8322 = load i32, i32* %8321, align 4
  %8323 = sext i32 %8322 to i64
  store i64 %8323, i64* %RDX.i894, align 8
  %8324 = shl nsw i64 %8323, 3
  %8325 = add i64 %8324, %8318
  %8326 = add i64 %8022, 63
  store i64 %8326, i64* %3, align 8
  %8327 = inttoptr i64 %8325 to i64*
  %8328 = load i64, i64* %8327, align 8
  store i64 %8328, i64* %RCX.i4448, align 8
  %8329 = add i64 %8314, -8
  %8330 = add i64 %8022, 67
  store i64 %8330, i64* %3, align 8
  %8331 = inttoptr i64 %8329 to i32*
  %8332 = load i32, i32* %8331, align 4
  %8333 = sext i32 %8332 to i64
  store i64 %8333, i64* %RDX.i894, align 8
  %8334 = shl nsw i64 %8333, 3
  %8335 = add i64 %8334, %8328
  %8336 = add i64 %8022, 71
  store i64 %8336, i64* %3, align 8
  %8337 = inttoptr i64 %8335 to i64*
  %8338 = load i64, i64* %8337, align 8
  store i64 %8338, i64* %RCX.i4448, align 8
  %8339 = add i64 %8022, 74
  store i64 %8339, i64* %3, align 8
  %8340 = inttoptr i64 %8338 to i64*
  %8341 = load i64, i64* %8340, align 8
  store i64 %8341, i64* %RCX.i4448, align 8
  %8342 = add i64 %8314, -224
  %8343 = add i64 %8022, 81
  store i64 %8343, i64* %3, align 8
  %8344 = inttoptr i64 %8342 to i32*
  %8345 = load i32, i32* %8344, align 4
  %8346 = sext i32 %8345 to i64
  store i64 %8346, i64* %RDX.i894, align 8
  %8347 = shl nsw i64 %8346, 3
  %8348 = add i64 %8347, %8341
  %8349 = add i64 %8022, 85
  store i64 %8349, i64* %3, align 8
  %8350 = inttoptr i64 %8348 to i64*
  %8351 = load i64, i64* %8350, align 8
  store i64 %8351, i64* %RCX.i4448, align 8
  %8352 = add i64 %8022, 88
  store i64 %8352, i64* %3, align 8
  %8353 = inttoptr i64 %8351 to i64*
  %8354 = load i64, i64* %8353, align 8
  store i64 %8354, i64* %RCX.i4448, align 8
  %8355 = add i64 %8022, 91
  store i64 %8355, i64* %3, align 8
  %8356 = inttoptr i64 %8354 to i16*
  store i16 %8313, i16* %8356, align 2
  %8357 = load i64, i64* %RBP.i, align 8
  %8358 = add i64 %8357, -36
  %8359 = load i64, i64* %3, align 8
  %8360 = add i64 %8359, 3
  store i64 %8360, i64* %3, align 8
  %8361 = inttoptr i64 %8358 to i32*
  %8362 = load i32, i32* %8361, align 4
  %8363 = zext i32 %8362 to i64
  store i64 %8363, i64* %RAX.i4266, align 8
  %8364 = add i64 %8357, -56
  %8365 = add i64 %8359, 7
  store i64 %8365, i64* %3, align 8
  %8366 = inttoptr i64 %8364 to i64*
  %8367 = load i64, i64* %8366, align 8
  store i64 %8367, i64* %RCX.i4448, align 8
  %8368 = add i64 %8357, -212
  %8369 = add i64 %8359, 14
  store i64 %8369, i64* %3, align 8
  %8370 = inttoptr i64 %8368 to i32*
  %8371 = load i32, i32* %8370, align 4
  %8372 = sext i32 %8371 to i64
  store i64 %8372, i64* %RDX.i894, align 8
  %8373 = shl nsw i64 %8372, 3
  %8374 = add i64 %8373, %8367
  %8375 = add i64 %8359, 18
  store i64 %8375, i64* %3, align 8
  %8376 = inttoptr i64 %8374 to i64*
  %8377 = load i64, i64* %8376, align 8
  store i64 %8377, i64* %RCX.i4448, align 8
  %8378 = add i64 %8357, -20
  %8379 = add i64 %8359, 22
  store i64 %8379, i64* %3, align 8
  %8380 = inttoptr i64 %8378 to i32*
  %8381 = load i32, i32* %8380, align 4
  %8382 = sext i32 %8381 to i64
  store i64 %8382, i64* %RDX.i894, align 8
  %8383 = shl nsw i64 %8382, 3
  %8384 = add i64 %8383, %8377
  %8385 = add i64 %8359, 26
  store i64 %8385, i64* %3, align 8
  %8386 = inttoptr i64 %8384 to i64*
  %8387 = load i64, i64* %8386, align 8
  store i64 %8387, i64* %RCX.i4448, align 8
  %8388 = add i64 %8357, -24
  %8389 = add i64 %8359, 30
  store i64 %8389, i64* %3, align 8
  %8390 = inttoptr i64 %8388 to i32*
  %8391 = load i32, i32* %8390, align 4
  %8392 = sext i32 %8391 to i64
  store i64 %8392, i64* %RDX.i894, align 8
  %8393 = shl nsw i64 %8392, 3
  %8394 = add i64 %8393, %8387
  %8395 = add i64 %8359, 34
  store i64 %8395, i64* %3, align 8
  %8396 = inttoptr i64 %8394 to i64*
  %8397 = load i64, i64* %8396, align 8
  store i64 %8397, i64* %RCX.i4448, align 8
  %8398 = add i64 %8397, 2
  %8399 = add i64 %8359, 38
  store i64 %8399, i64* %3, align 8
  %8400 = inttoptr i64 %8398 to i16*
  %8401 = load i16, i16* %8400, align 2
  %8402 = sext i16 %8401 to i64
  %8403 = and i64 %8402, 4294967295
  store i64 %8403, i64* %RSI.i889, align 8
  %8404 = sext i16 %8401 to i32
  %8405 = mul i32 %8404, %8362
  %8406 = add i32 %8405, 128
  %8407 = zext i32 %8406 to i64
  %8408 = shl nuw i64 %8407, 32
  %8409 = ashr i64 %8408, 39
  %8410 = lshr i64 %8409, 1
  %8411 = trunc i64 %8409 to i8
  %8412 = and i8 %8411, 1
  %8413 = trunc i64 %8410 to i32
  %8414 = and i64 %8410, 4294967295
  store i64 %8414, i64* %RAX.i4266, align 8
  store i8 %8412, i8* %14, align 1
  %8415 = and i32 %8413, 255
  %8416 = tail call i32 @llvm.ctpop.i32(i32 %8415)
  %8417 = trunc i32 %8416 to i8
  %8418 = and i8 %8417, 1
  %8419 = xor i8 %8418, 1
  store i8 %8419, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8420 = icmp eq i32 %8413, 0
  %8421 = zext i1 %8420 to i8
  store i8 %8421, i8* %30, align 1
  %8422 = lshr i64 %8409, 32
  %8423 = trunc i64 %8422 to i8
  %8424 = and i8 %8423, 1
  store i8 %8424, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8425 = trunc i64 %8410 to i16
  store i16 %8425, i16* %DI.i339, align 2
  %8426 = load i64, i64* %RBP.i, align 8
  %8427 = add i64 %8426, -32
  %8428 = add i64 %8359, 56
  store i64 %8428, i64* %3, align 8
  %8429 = inttoptr i64 %8427 to i64*
  %8430 = load i64, i64* %8429, align 8
  store i64 %8430, i64* %RCX.i4448, align 8
  %8431 = add i64 %8426, -4
  %8432 = add i64 %8359, 60
  store i64 %8432, i64* %3, align 8
  %8433 = inttoptr i64 %8431 to i32*
  %8434 = load i32, i32* %8433, align 4
  %8435 = sext i32 %8434 to i64
  store i64 %8435, i64* %RDX.i894, align 8
  %8436 = shl nsw i64 %8435, 3
  %8437 = add i64 %8436, %8430
  %8438 = add i64 %8359, 64
  store i64 %8438, i64* %3, align 8
  %8439 = inttoptr i64 %8437 to i64*
  %8440 = load i64, i64* %8439, align 8
  store i64 %8440, i64* %RCX.i4448, align 8
  %8441 = add i64 %8426, -8
  %8442 = add i64 %8359, 68
  store i64 %8442, i64* %3, align 8
  %8443 = inttoptr i64 %8441 to i32*
  %8444 = load i32, i32* %8443, align 4
  %8445 = sext i32 %8444 to i64
  store i64 %8445, i64* %RDX.i894, align 8
  %8446 = shl nsw i64 %8445, 3
  %8447 = add i64 %8446, %8440
  %8448 = add i64 %8359, 72
  store i64 %8448, i64* %3, align 8
  %8449 = inttoptr i64 %8447 to i64*
  %8450 = load i64, i64* %8449, align 8
  store i64 %8450, i64* %RCX.i4448, align 8
  %8451 = add i64 %8359, 75
  store i64 %8451, i64* %3, align 8
  %8452 = inttoptr i64 %8450 to i64*
  %8453 = load i64, i64* %8452, align 8
  store i64 %8453, i64* %RCX.i4448, align 8
  %8454 = add i64 %8426, -224
  %8455 = add i64 %8359, 82
  store i64 %8455, i64* %3, align 8
  %8456 = inttoptr i64 %8454 to i32*
  %8457 = load i32, i32* %8456, align 4
  %8458 = sext i32 %8457 to i64
  store i64 %8458, i64* %RDX.i894, align 8
  %8459 = shl nsw i64 %8458, 3
  %8460 = add i64 %8459, %8453
  %8461 = add i64 %8359, 86
  store i64 %8461, i64* %3, align 8
  %8462 = inttoptr i64 %8460 to i64*
  %8463 = load i64, i64* %8462, align 8
  store i64 %8463, i64* %RCX.i4448, align 8
  %8464 = add i64 %8359, 89
  store i64 %8464, i64* %3, align 8
  %8465 = inttoptr i64 %8463 to i64*
  %8466 = load i64, i64* %8465, align 8
  store i64 %8466, i64* %RCX.i4448, align 8
  %8467 = add i64 %8466, 2
  %8468 = add i64 %8359, 93
  store i64 %8468, i64* %3, align 8
  %8469 = inttoptr i64 %8467 to i16*
  store i16 %8425, i16* %8469, align 2
  %8470 = load i64, i64* %RBP.i, align 8
  %8471 = add i64 %8470, -36
  %8472 = load i64, i64* %3, align 8
  %8473 = add i64 %8472, 3
  store i64 %8473, i64* %3, align 8
  %8474 = inttoptr i64 %8471 to i32*
  %8475 = load i32, i32* %8474, align 4
  %8476 = add i32 %8475, -256
  %8477 = zext i32 %8476 to i64
  store i64 %8477, i64* %RAX.i4266, align 8
  %8478 = icmp ult i32 %8475, 256
  %8479 = zext i1 %8478 to i8
  store i8 %8479, i8* %14, align 1
  %8480 = and i32 %8476, 255
  %8481 = tail call i32 @llvm.ctpop.i32(i32 %8480)
  %8482 = trunc i32 %8481 to i8
  %8483 = and i8 %8482, 1
  %8484 = xor i8 %8483, 1
  store i8 %8484, i8* %21, align 1
  %8485 = xor i32 %8476, %8475
  %8486 = lshr i32 %8485, 4
  %8487 = trunc i32 %8486 to i8
  %8488 = and i8 %8487, 1
  store i8 %8488, i8* %27, align 1
  %8489 = icmp eq i32 %8476, 0
  %8490 = zext i1 %8489 to i8
  store i8 %8490, i8* %30, align 1
  %8491 = lshr i32 %8476, 31
  %8492 = trunc i32 %8491 to i8
  store i8 %8492, i8* %33, align 1
  %8493 = lshr i32 %8475, 31
  %8494 = xor i32 %8491, %8493
  %8495 = add nuw nsw i32 %8494, %8493
  %8496 = icmp eq i32 %8495, 2
  %8497 = zext i1 %8496 to i8
  store i8 %8497, i8* %39, align 1
  %8498 = add i64 %8470, -56
  %8499 = add i64 %8472, 12
  store i64 %8499, i64* %3, align 8
  %8500 = inttoptr i64 %8498 to i64*
  %8501 = load i64, i64* %8500, align 8
  store i64 %8501, i64* %RCX.i4448, align 8
  %8502 = add i64 %8470, -212
  %8503 = add i64 %8472, 19
  store i64 %8503, i64* %3, align 8
  %8504 = inttoptr i64 %8502 to i32*
  %8505 = load i32, i32* %8504, align 4
  %8506 = sext i32 %8505 to i64
  store i64 %8506, i64* %RDX.i894, align 8
  %8507 = shl nsw i64 %8506, 3
  %8508 = add i64 %8507, %8501
  %8509 = add i64 %8472, 23
  store i64 %8509, i64* %3, align 8
  %8510 = inttoptr i64 %8508 to i64*
  %8511 = load i64, i64* %8510, align 8
  store i64 %8511, i64* %RCX.i4448, align 8
  %8512 = add i64 %8470, -20
  %8513 = add i64 %8472, 27
  store i64 %8513, i64* %3, align 8
  %8514 = inttoptr i64 %8512 to i32*
  %8515 = load i32, i32* %8514, align 4
  %8516 = sext i32 %8515 to i64
  store i64 %8516, i64* %RDX.i894, align 8
  %8517 = shl nsw i64 %8516, 3
  %8518 = add i64 %8517, %8511
  %8519 = add i64 %8472, 31
  store i64 %8519, i64* %3, align 8
  %8520 = inttoptr i64 %8518 to i64*
  %8521 = load i64, i64* %8520, align 8
  store i64 %8521, i64* %RCX.i4448, align 8
  %8522 = add i64 %8470, -24
  %8523 = add i64 %8472, 35
  store i64 %8523, i64* %3, align 8
  %8524 = inttoptr i64 %8522 to i32*
  %8525 = load i32, i32* %8524, align 4
  %8526 = sext i32 %8525 to i64
  store i64 %8526, i64* %RDX.i894, align 8
  %8527 = shl nsw i64 %8526, 3
  %8528 = add i64 %8527, %8521
  %8529 = add i64 %8472, 39
  store i64 %8529, i64* %3, align 8
  %8530 = inttoptr i64 %8528 to i64*
  %8531 = load i64, i64* %8530, align 8
  store i64 %8531, i64* %RCX.i4448, align 8
  %8532 = add i64 %8472, 42
  store i64 %8532, i64* %3, align 8
  %8533 = inttoptr i64 %8531 to i16*
  %8534 = load i16, i16* %8533, align 2
  %8535 = sext i16 %8534 to i64
  %8536 = and i64 %8535, 4294967295
  store i64 %8536, i64* %RSI.i889, align 8
  %8537 = sext i16 %8534 to i32
  %8538 = mul i32 %8537, %8476
  %8539 = add i32 %8538, 128
  %8540 = zext i32 %8539 to i64
  %8541 = shl nuw i64 %8540, 32
  %8542 = ashr i64 %8541, 39
  %8543 = lshr i64 %8542, 1
  %8544 = trunc i64 %8542 to i8
  %8545 = and i8 %8544, 1
  %8546 = trunc i64 %8543 to i32
  %8547 = and i64 %8543, 4294967295
  store i64 %8547, i64* %RAX.i4266, align 8
  store i8 %8545, i8* %14, align 1
  %8548 = and i32 %8546, 255
  %8549 = tail call i32 @llvm.ctpop.i32(i32 %8548)
  %8550 = trunc i32 %8549 to i8
  %8551 = and i8 %8550, 1
  %8552 = xor i8 %8551, 1
  store i8 %8552, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8553 = icmp eq i32 %8546, 0
  %8554 = zext i1 %8553 to i8
  store i8 %8554, i8* %30, align 1
  %8555 = lshr i64 %8542, 32
  %8556 = trunc i64 %8555 to i8
  %8557 = and i8 %8556, 1
  store i8 %8557, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8558 = trunc i64 %8543 to i16
  store i16 %8558, i16* %DI.i339, align 2
  %8559 = load i64, i64* %RBP.i, align 8
  %8560 = add i64 %8559, -32
  %8561 = add i64 %8472, 60
  store i64 %8561, i64* %3, align 8
  %8562 = inttoptr i64 %8560 to i64*
  %8563 = load i64, i64* %8562, align 8
  store i64 %8563, i64* %RCX.i4448, align 8
  %8564 = add i64 %8559, -4
  %8565 = add i64 %8472, 64
  store i64 %8565, i64* %3, align 8
  %8566 = inttoptr i64 %8564 to i32*
  %8567 = load i32, i32* %8566, align 4
  %8568 = sext i32 %8567 to i64
  store i64 %8568, i64* %RDX.i894, align 8
  %8569 = shl nsw i64 %8568, 3
  %8570 = add i64 %8569, %8563
  %8571 = add i64 %8472, 68
  store i64 %8571, i64* %3, align 8
  %8572 = inttoptr i64 %8570 to i64*
  %8573 = load i64, i64* %8572, align 8
  store i64 %8573, i64* %RCX.i4448, align 8
  %8574 = add i64 %8559, -8
  %8575 = add i64 %8472, 72
  store i64 %8575, i64* %3, align 8
  %8576 = inttoptr i64 %8574 to i32*
  %8577 = load i32, i32* %8576, align 4
  %8578 = sext i32 %8577 to i64
  store i64 %8578, i64* %RDX.i894, align 8
  %8579 = shl nsw i64 %8578, 3
  %8580 = add i64 %8579, %8573
  %8581 = add i64 %8472, 76
  store i64 %8581, i64* %3, align 8
  %8582 = inttoptr i64 %8580 to i64*
  %8583 = load i64, i64* %8582, align 8
  store i64 %8583, i64* %RCX.i4448, align 8
  %8584 = add i64 %8583, 8
  %8585 = add i64 %8472, 80
  store i64 %8585, i64* %3, align 8
  %8586 = inttoptr i64 %8584 to i64*
  %8587 = load i64, i64* %8586, align 8
  store i64 %8587, i64* %RCX.i4448, align 8
  %8588 = add i64 %8472, 83
  store i64 %8588, i64* %3, align 8
  %8589 = inttoptr i64 %8587 to i64*
  %8590 = load i64, i64* %8589, align 8
  store i64 %8590, i64* %RCX.i4448, align 8
  %8591 = add i64 %8472, 86
  store i64 %8591, i64* %3, align 8
  %8592 = inttoptr i64 %8590 to i64*
  %8593 = load i64, i64* %8592, align 8
  store i64 %8593, i64* %RCX.i4448, align 8
  %8594 = add i64 %8472, 89
  store i64 %8594, i64* %3, align 8
  %8595 = inttoptr i64 %8593 to i16*
  store i16 %8558, i16* %8595, align 2
  %8596 = load i64, i64* %RBP.i, align 8
  %8597 = add i64 %8596, -36
  %8598 = load i64, i64* %3, align 8
  %8599 = add i64 %8598, 3
  store i64 %8599, i64* %3, align 8
  %8600 = inttoptr i64 %8597 to i32*
  %8601 = load i32, i32* %8600, align 4
  %8602 = add i32 %8601, -256
  %8603 = zext i32 %8602 to i64
  store i64 %8603, i64* %RAX.i4266, align 8
  %8604 = icmp ult i32 %8601, 256
  %8605 = zext i1 %8604 to i8
  store i8 %8605, i8* %14, align 1
  %8606 = and i32 %8602, 255
  %8607 = tail call i32 @llvm.ctpop.i32(i32 %8606)
  %8608 = trunc i32 %8607 to i8
  %8609 = and i8 %8608, 1
  %8610 = xor i8 %8609, 1
  store i8 %8610, i8* %21, align 1
  %8611 = xor i32 %8602, %8601
  %8612 = lshr i32 %8611, 4
  %8613 = trunc i32 %8612 to i8
  %8614 = and i8 %8613, 1
  store i8 %8614, i8* %27, align 1
  %8615 = icmp eq i32 %8602, 0
  %8616 = zext i1 %8615 to i8
  store i8 %8616, i8* %30, align 1
  %8617 = lshr i32 %8602, 31
  %8618 = trunc i32 %8617 to i8
  store i8 %8618, i8* %33, align 1
  %8619 = lshr i32 %8601, 31
  %8620 = xor i32 %8617, %8619
  %8621 = add nuw nsw i32 %8620, %8619
  %8622 = icmp eq i32 %8621, 2
  %8623 = zext i1 %8622 to i8
  store i8 %8623, i8* %39, align 1
  %8624 = add i64 %8596, -56
  %8625 = add i64 %8598, 12
  store i64 %8625, i64* %3, align 8
  %8626 = inttoptr i64 %8624 to i64*
  %8627 = load i64, i64* %8626, align 8
  store i64 %8627, i64* %RCX.i4448, align 8
  %8628 = add i64 %8596, -212
  %8629 = add i64 %8598, 19
  store i64 %8629, i64* %3, align 8
  %8630 = inttoptr i64 %8628 to i32*
  %8631 = load i32, i32* %8630, align 4
  %8632 = sext i32 %8631 to i64
  store i64 %8632, i64* %RDX.i894, align 8
  %8633 = shl nsw i64 %8632, 3
  %8634 = add i64 %8633, %8627
  %8635 = add i64 %8598, 23
  store i64 %8635, i64* %3, align 8
  %8636 = inttoptr i64 %8634 to i64*
  %8637 = load i64, i64* %8636, align 8
  store i64 %8637, i64* %RCX.i4448, align 8
  %8638 = add i64 %8596, -20
  %8639 = add i64 %8598, 27
  store i64 %8639, i64* %3, align 8
  %8640 = inttoptr i64 %8638 to i32*
  %8641 = load i32, i32* %8640, align 4
  %8642 = sext i32 %8641 to i64
  store i64 %8642, i64* %RDX.i894, align 8
  %8643 = shl nsw i64 %8642, 3
  %8644 = add i64 %8643, %8637
  %8645 = add i64 %8598, 31
  store i64 %8645, i64* %3, align 8
  %8646 = inttoptr i64 %8644 to i64*
  %8647 = load i64, i64* %8646, align 8
  store i64 %8647, i64* %RCX.i4448, align 8
  %8648 = add i64 %8596, -24
  %8649 = add i64 %8598, 35
  store i64 %8649, i64* %3, align 8
  %8650 = inttoptr i64 %8648 to i32*
  %8651 = load i32, i32* %8650, align 4
  %8652 = sext i32 %8651 to i64
  store i64 %8652, i64* %RDX.i894, align 8
  %8653 = shl nsw i64 %8652, 3
  %8654 = add i64 %8653, %8647
  %8655 = add i64 %8598, 39
  store i64 %8655, i64* %3, align 8
  %8656 = inttoptr i64 %8654 to i64*
  %8657 = load i64, i64* %8656, align 8
  store i64 %8657, i64* %RCX.i4448, align 8
  %8658 = add i64 %8657, 2
  %8659 = add i64 %8598, 43
  store i64 %8659, i64* %3, align 8
  %8660 = inttoptr i64 %8658 to i16*
  %8661 = load i16, i16* %8660, align 2
  %8662 = sext i16 %8661 to i64
  %8663 = and i64 %8662, 4294967295
  store i64 %8663, i64* %RSI.i889, align 8
  %8664 = sext i16 %8661 to i32
  %8665 = mul i32 %8664, %8602
  %8666 = add i32 %8665, 128
  %8667 = zext i32 %8666 to i64
  %8668 = shl nuw i64 %8667, 32
  %8669 = ashr i64 %8668, 39
  %8670 = lshr i64 %8669, 1
  %8671 = trunc i64 %8669 to i8
  %8672 = and i8 %8671, 1
  %8673 = trunc i64 %8670 to i32
  %8674 = and i64 %8670, 4294967295
  store i64 %8674, i64* %RAX.i4266, align 8
  store i8 %8672, i8* %14, align 1
  %8675 = and i32 %8673, 255
  %8676 = tail call i32 @llvm.ctpop.i32(i32 %8675)
  %8677 = trunc i32 %8676 to i8
  %8678 = and i8 %8677, 1
  %8679 = xor i8 %8678, 1
  store i8 %8679, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8680 = icmp eq i32 %8673, 0
  %8681 = zext i1 %8680 to i8
  store i8 %8681, i8* %30, align 1
  %8682 = lshr i64 %8669, 32
  %8683 = trunc i64 %8682 to i8
  %8684 = and i8 %8683, 1
  store i8 %8684, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8685 = trunc i64 %8670 to i16
  store i16 %8685, i16* %DI.i339, align 2
  %8686 = load i64, i64* %RBP.i, align 8
  %8687 = add i64 %8686, -32
  %8688 = add i64 %8598, 61
  store i64 %8688, i64* %3, align 8
  %8689 = inttoptr i64 %8687 to i64*
  %8690 = load i64, i64* %8689, align 8
  store i64 %8690, i64* %RCX.i4448, align 8
  %8691 = add i64 %8686, -4
  %8692 = add i64 %8598, 65
  store i64 %8692, i64* %3, align 8
  %8693 = inttoptr i64 %8691 to i32*
  %8694 = load i32, i32* %8693, align 4
  %8695 = sext i32 %8694 to i64
  store i64 %8695, i64* %RDX.i894, align 8
  %8696 = shl nsw i64 %8695, 3
  %8697 = add i64 %8696, %8690
  %8698 = add i64 %8598, 69
  store i64 %8698, i64* %3, align 8
  %8699 = inttoptr i64 %8697 to i64*
  %8700 = load i64, i64* %8699, align 8
  store i64 %8700, i64* %RCX.i4448, align 8
  %8701 = add i64 %8686, -8
  %8702 = add i64 %8598, 73
  store i64 %8702, i64* %3, align 8
  %8703 = inttoptr i64 %8701 to i32*
  %8704 = load i32, i32* %8703, align 4
  %8705 = sext i32 %8704 to i64
  store i64 %8705, i64* %RDX.i894, align 8
  %8706 = shl nsw i64 %8705, 3
  %8707 = add i64 %8706, %8700
  %8708 = add i64 %8598, 77
  store i64 %8708, i64* %3, align 8
  %8709 = inttoptr i64 %8707 to i64*
  %8710 = load i64, i64* %8709, align 8
  store i64 %8710, i64* %RCX.i4448, align 8
  %8711 = add i64 %8710, 8
  %8712 = add i64 %8598, 81
  store i64 %8712, i64* %3, align 8
  %8713 = inttoptr i64 %8711 to i64*
  %8714 = load i64, i64* %8713, align 8
  store i64 %8714, i64* %RCX.i4448, align 8
  %8715 = add i64 %8598, 84
  store i64 %8715, i64* %3, align 8
  %8716 = inttoptr i64 %8714 to i64*
  %8717 = load i64, i64* %8716, align 8
  store i64 %8717, i64* %RCX.i4448, align 8
  %8718 = add i64 %8598, 87
  store i64 %8718, i64* %3, align 8
  %8719 = inttoptr i64 %8717 to i64*
  %8720 = load i64, i64* %8719, align 8
  store i64 %8720, i64* %RCX.i4448, align 8
  %8721 = add i64 %8720, 2
  %8722 = add i64 %8598, 91
  store i64 %8722, i64* %3, align 8
  %8723 = inttoptr i64 %8721 to i16*
  store i16 %8685, i16* %8723, align 2
  %.pre264 = load i64, i64* %3, align 8
  br label %block_.L_475052

block_.L_475052:                                  ; preds = %block_.L_474ee6, %block_474e14
  %8724 = phi i64 [ %.pre264, %block_.L_474ee6 ], [ %8249, %block_474e14 ]
  %8725 = load i64, i64* %RBP.i, align 8
  %8726 = add i64 %8725, -224
  %8727 = add i64 %8724, 6
  store i64 %8727, i64* %3, align 8
  %8728 = inttoptr i64 %8726 to i32*
  %8729 = load i32, i32* %8728, align 4
  %8730 = zext i32 %8729 to i64
  store i64 %8730, i64* %RAX.i4266, align 8
  %8731 = trunc i32 %8729 to i16
  store i16 %8731, i16* %CX.i116, align 2
  %8732 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %8732, i64* %RDX.i894, align 8
  %8733 = add i64 %8724, 20
  store i64 %8733, i64* %3, align 8
  %8734 = inttoptr i64 %8732 to i64*
  %8735 = load i64, i64* %8734, align 8
  store i64 %8735, i64* %RDX.i894, align 8
  %8736 = add i64 %8725, -12
  %8737 = add i64 %8724, 24
  store i64 %8737, i64* %3, align 8
  %8738 = inttoptr i64 %8736 to i32*
  %8739 = load i32, i32* %8738, align 4
  %8740 = sext i32 %8739 to i64
  store i64 %8740, i64* %RSI.i889, align 8
  %8741 = shl nsw i64 %8740, 3
  %8742 = add i64 %8741, %8735
  %8743 = add i64 %8724, 28
  store i64 %8743, i64* %3, align 8
  %8744 = inttoptr i64 %8742 to i64*
  %8745 = load i64, i64* %8744, align 8
  store i64 %8745, i64* %RDX.i894, align 8
  %8746 = add i64 %8725, -16
  %8747 = add i64 %8724, 32
  store i64 %8747, i64* %3, align 8
  %8748 = inttoptr i64 %8746 to i32*
  %8749 = load i32, i32* %8748, align 4
  %8750 = sext i32 %8749 to i64
  store i64 %8750, i64* %RSI.i889, align 8
  %8751 = shl nsw i64 %8750, 1
  %8752 = add i64 %8751, %8745
  %8753 = add i64 %8724, 36
  store i64 %8753, i64* %3, align 8
  %8754 = inttoptr i64 %8752 to i16*
  store i16 %8731, i16* %8754, align 2
  %8755 = load i64, i64* %3, align 8
  %8756 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %8756, i64* %RDX.i894, align 8
  %8757 = add i64 %8756, 8
  %8758 = add i64 %8755, 12
  store i64 %8758, i64* %3, align 8
  %8759 = inttoptr i64 %8757 to i64*
  %8760 = load i64, i64* %8759, align 8
  store i64 %8760, i64* %RDX.i894, align 8
  %8761 = load i64, i64* %RBP.i, align 8
  %8762 = add i64 %8761, -12
  %8763 = add i64 %8755, 16
  store i64 %8763, i64* %3, align 8
  %8764 = inttoptr i64 %8762 to i32*
  %8765 = load i32, i32* %8764, align 4
  %8766 = sext i32 %8765 to i64
  store i64 %8766, i64* %RSI.i889, align 8
  %8767 = shl nsw i64 %8766, 3
  %8768 = add i64 %8767, %8760
  %8769 = add i64 %8755, 20
  store i64 %8769, i64* %3, align 8
  %8770 = inttoptr i64 %8768 to i64*
  %8771 = load i64, i64* %8770, align 8
  store i64 %8771, i64* %RDX.i894, align 8
  %8772 = add i64 %8761, -16
  %8773 = add i64 %8755, 24
  store i64 %8773, i64* %3, align 8
  %8774 = inttoptr i64 %8772 to i32*
  %8775 = load i32, i32* %8774, align 4
  %8776 = sext i32 %8775 to i64
  store i64 %8776, i64* %RSI.i889, align 8
  %8777 = shl nsw i64 %8776, 1
  %8778 = add i64 %8777, %8771
  %8779 = add i64 %8755, 30
  store i64 %8779, i64* %3, align 8
  %8780 = inttoptr i64 %8778 to i16*
  store i16 0, i16* %8780, align 2
  %8781 = load i64, i64* %3, align 8
  %8782 = load i64, i64* bitcast (%G_0x722cb8_type* @G_0x722cb8 to i64*), align 8
  store i64 %8782, i64* %RDX.i894, align 8
  %8783 = load i64, i64* %RBP.i, align 8
  %8784 = add i64 %8783, -12
  %8785 = add i64 %8781, 12
  store i64 %8785, i64* %3, align 8
  %8786 = inttoptr i64 %8784 to i32*
  %8787 = load i32, i32* %8786, align 4
  %8788 = sext i32 %8787 to i64
  store i64 %8788, i64* %RSI.i889, align 8
  %8789 = shl nsw i64 %8788, 3
  %8790 = add i64 %8789, %8782
  %8791 = add i64 %8781, 16
  store i64 %8791, i64* %3, align 8
  %8792 = inttoptr i64 %8790 to i64*
  %8793 = load i64, i64* %8792, align 8
  store i64 %8793, i64* %RDX.i894, align 8
  %8794 = add i64 %8783, -16
  %8795 = add i64 %8781, 20
  store i64 %8795, i64* %3, align 8
  %8796 = inttoptr i64 %8794 to i32*
  %8797 = load i32, i32* %8796, align 4
  %8798 = sext i32 %8797 to i64
  store i64 %8798, i64* %RSI.i889, align 8
  %8799 = shl nsw i64 %8798, 1
  %8800 = add i64 %8799, %8793
  %8801 = add i64 %8781, 26
  store i64 %8801, i64* %3, align 8
  %8802 = inttoptr i64 %8800 to i16*
  store i16 2, i16* %8802, align 2
  %8803 = load i64, i64* %3, align 8
  %8804 = add i64 %8803, 90
  store i64 %8804, i64* %3, align 8
  br label %block_.L_475108

block_.L_4750b3:                                  ; preds = %block_.L_474dc9
  %8805 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %8805, i64* %RAX.i4266, align 8
  %8806 = add i64 %7921, 11
  store i64 %8806, i64* %3, align 8
  %8807 = inttoptr i64 %8805 to i64*
  %8808 = load i64, i64* %8807, align 8
  store i64 %8808, i64* %RAX.i4266, align 8
  %8809 = add i64 %7894, -12
  %8810 = add i64 %7921, 15
  store i64 %8810, i64* %3, align 8
  %8811 = inttoptr i64 %8809 to i32*
  %8812 = load i32, i32* %8811, align 4
  %8813 = sext i32 %8812 to i64
  store i64 %8813, i64* %RCX.i4448, align 8
  %8814 = shl nsw i64 %8813, 3
  %8815 = add i64 %8814, %8808
  %8816 = add i64 %7921, 19
  store i64 %8816, i64* %3, align 8
  %8817 = inttoptr i64 %8815 to i64*
  %8818 = load i64, i64* %8817, align 8
  store i64 %8818, i64* %RAX.i4266, align 8
  %8819 = add i64 %7894, -16
  %8820 = add i64 %7921, 23
  store i64 %8820, i64* %3, align 8
  %8821 = inttoptr i64 %8819 to i32*
  %8822 = load i32, i32* %8821, align 4
  %8823 = sext i32 %8822 to i64
  store i64 %8823, i64* %RCX.i4448, align 8
  %8824 = shl nsw i64 %8823, 1
  %8825 = add i64 %8824, %8818
  %8826 = add i64 %7921, 29
  store i64 %8826, i64* %3, align 8
  %8827 = inttoptr i64 %8825 to i16*
  store i16 -1, i16* %8827, align 2
  %8828 = load i64, i64* %3, align 8
  %8829 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %8829, i64* %RAX.i4266, align 8
  %8830 = add i64 %8829, 8
  %8831 = add i64 %8828, 12
  store i64 %8831, i64* %3, align 8
  %8832 = inttoptr i64 %8830 to i64*
  %8833 = load i64, i64* %8832, align 8
  store i64 %8833, i64* %RAX.i4266, align 8
  %8834 = load i64, i64* %RBP.i, align 8
  %8835 = add i64 %8834, -12
  %8836 = add i64 %8828, 16
  store i64 %8836, i64* %3, align 8
  %8837 = inttoptr i64 %8835 to i32*
  %8838 = load i32, i32* %8837, align 4
  %8839 = sext i32 %8838 to i64
  store i64 %8839, i64* %RCX.i4448, align 8
  %8840 = shl nsw i64 %8839, 3
  %8841 = add i64 %8840, %8833
  %8842 = add i64 %8828, 20
  store i64 %8842, i64* %3, align 8
  %8843 = inttoptr i64 %8841 to i64*
  %8844 = load i64, i64* %8843, align 8
  store i64 %8844, i64* %RAX.i4266, align 8
  %8845 = add i64 %8834, -16
  %8846 = add i64 %8828, 24
  store i64 %8846, i64* %3, align 8
  %8847 = inttoptr i64 %8845 to i32*
  %8848 = load i32, i32* %8847, align 4
  %8849 = sext i32 %8848 to i64
  store i64 %8849, i64* %RCX.i4448, align 8
  %8850 = shl nsw i64 %8849, 1
  %8851 = add i64 %8850, %8844
  %8852 = add i64 %8828, 30
  store i64 %8852, i64* %3, align 8
  %8853 = inttoptr i64 %8851 to i16*
  store i16 -1, i16* %8853, align 2
  %8854 = load i64, i64* %3, align 8
  %8855 = load i64, i64* bitcast (%G_0x722cb8_type* @G_0x722cb8 to i64*), align 8
  store i64 %8855, i64* %RAX.i4266, align 8
  %8856 = load i64, i64* %RBP.i, align 8
  %8857 = add i64 %8856, -12
  %8858 = add i64 %8854, 12
  store i64 %8858, i64* %3, align 8
  %8859 = inttoptr i64 %8857 to i32*
  %8860 = load i32, i32* %8859, align 4
  %8861 = sext i32 %8860 to i64
  store i64 %8861, i64* %RCX.i4448, align 8
  %8862 = shl nsw i64 %8861, 3
  %8863 = add i64 %8862, %8855
  %8864 = add i64 %8854, 16
  store i64 %8864, i64* %3, align 8
  %8865 = inttoptr i64 %8863 to i64*
  %8866 = load i64, i64* %8865, align 8
  store i64 %8866, i64* %RAX.i4266, align 8
  %8867 = add i64 %8856, -16
  %8868 = add i64 %8854, 20
  store i64 %8868, i64* %3, align 8
  %8869 = inttoptr i64 %8867 to i32*
  %8870 = load i32, i32* %8869, align 4
  %8871 = sext i32 %8870 to i64
  store i64 %8871, i64* %RCX.i4448, align 8
  %8872 = shl nsw i64 %8871, 1
  %8873 = add i64 %8872, %8866
  %8874 = add i64 %8854, 26
  store i64 %8874, i64* %3, align 8
  %8875 = inttoptr i64 %8873 to i16*
  store i16 -1, i16* %8875, align 2
  %.pre265 = load i64, i64* %3, align 8
  br label %block_.L_475108

block_.L_475108:                                  ; preds = %block_.L_4750b3, %block_.L_475052
  %8876 = phi i64 [ %.pre265, %block_.L_4750b3 ], [ %8804, %block_.L_475052 ]
  %8877 = add i64 %8876, 5
  store i64 %8877, i64* %3, align 8
  br label %block_.L_47510d

block_.L_47510d:                                  ; preds = %block_.L_475108, %block_474bd0
  %storemerge129 = phi i64 [ %7569, %block_474bd0 ], [ %8877, %block_.L_475108 ]
  %8878 = load i64, i64* %RBP.i, align 8
  %8879 = add i64 %8878, -4
  %8880 = add i64 %storemerge129, 8
  store i64 %8880, i64* %3, align 8
  %8881 = inttoptr i64 %8879 to i32*
  %8882 = load i32, i32* %8881, align 4
  %8883 = add i32 %8882, 1
  %8884 = zext i32 %8883 to i64
  store i64 %8884, i64* %RAX.i4266, align 8
  %8885 = icmp eq i32 %8882, -1
  %8886 = icmp eq i32 %8883, 0
  %8887 = or i1 %8885, %8886
  %8888 = zext i1 %8887 to i8
  store i8 %8888, i8* %14, align 1
  %8889 = and i32 %8883, 255
  %8890 = tail call i32 @llvm.ctpop.i32(i32 %8889)
  %8891 = trunc i32 %8890 to i8
  %8892 = and i8 %8891, 1
  %8893 = xor i8 %8892, 1
  store i8 %8893, i8* %21, align 1
  %8894 = xor i32 %8883, %8882
  %8895 = lshr i32 %8894, 4
  %8896 = trunc i32 %8895 to i8
  %8897 = and i8 %8896, 1
  store i8 %8897, i8* %27, align 1
  %8898 = zext i1 %8886 to i8
  store i8 %8898, i8* %30, align 1
  %8899 = lshr i32 %8883, 31
  %8900 = trunc i32 %8899 to i8
  store i8 %8900, i8* %33, align 1
  %8901 = lshr i32 %8882, 31
  %8902 = xor i32 %8899, %8901
  %8903 = add nuw nsw i32 %8902, %8899
  %8904 = icmp eq i32 %8903, 2
  %8905 = zext i1 %8904 to i8
  store i8 %8905, i8* %39, align 1
  %8906 = add i64 %storemerge129, 14
  store i64 %8906, i64* %3, align 8
  store i32 %8883, i32* %8881, align 4
  %8907 = load i64, i64* %3, align 8
  %8908 = add i64 %8907, -1621
  store i64 %8908, i64* %3, align 8
  br label %block_.L_474ac6

block_.L_475120:                                  ; preds = %block_.L_474ac6
  %8909 = add i64 %6952, -8
  %8910 = add i64 %6980, 8
  store i64 %8910, i64* %3, align 8
  %8911 = inttoptr i64 %8909 to i32*
  %8912 = load i32, i32* %8911, align 4
  %8913 = add i32 %8912, 1
  %8914 = zext i32 %8913 to i64
  store i64 %8914, i64* %RAX.i4266, align 8
  %8915 = icmp eq i32 %8912, -1
  %8916 = icmp eq i32 %8913, 0
  %8917 = or i1 %8915, %8916
  %8918 = zext i1 %8917 to i8
  store i8 %8918, i8* %14, align 1
  %8919 = and i32 %8913, 255
  %8920 = tail call i32 @llvm.ctpop.i32(i32 %8919)
  %8921 = trunc i32 %8920 to i8
  %8922 = and i8 %8921, 1
  %8923 = xor i8 %8922, 1
  store i8 %8923, i8* %21, align 1
  %8924 = xor i32 %8913, %8912
  %8925 = lshr i32 %8924, 4
  %8926 = trunc i32 %8925 to i8
  %8927 = and i8 %8926, 1
  store i8 %8927, i8* %27, align 1
  %8928 = zext i1 %8916 to i8
  store i8 %8928, i8* %30, align 1
  %8929 = lshr i32 %8913, 31
  %8930 = trunc i32 %8929 to i8
  store i8 %8930, i8* %33, align 1
  %8931 = lshr i32 %8912, 31
  %8932 = xor i32 %8929, %8931
  %8933 = add nuw nsw i32 %8932, %8929
  %8934 = icmp eq i32 %8933, 2
  %8935 = zext i1 %8934 to i8
  store i8 %8935, i8* %39, align 1
  %8936 = add i64 %6980, 14
  store i64 %8936, i64* %3, align 8
  store i32 %8913, i32* %8911, align 4
  %8937 = load i64, i64* %3, align 8
  %8938 = add i64 %8937, -1703
  store i64 %8938, i64* %3, align 8
  br label %block_.L_474a87

block_.L_475133:                                  ; preds = %block_.L_474a87
  %8939 = add i64 %6827, 5
  store i64 %8939, i64* %3, align 8
  br label %block_.L_475138

block_.L_475138:                                  ; preds = %block_.L_475133, %block_.L_474a7b
  %storemerge108 = phi i64 [ %6789, %block_.L_474a7b ], [ %8939, %block_.L_475133 ]
  %MEMORY.100 = phi %struct.Memory* [ %MEMORY.78, %block_.L_474a7b ], [ %MEMORY.90, %block_.L_475133 ]
  %8940 = load i64, i64* %6, align 8
  %8941 = add i64 %8940, 528
  store i64 %8941, i64* %6, align 8
  %8942 = icmp ugt i64 %8940, -529
  %8943 = zext i1 %8942 to i8
  store i8 %8943, i8* %14, align 1
  %8944 = trunc i64 %8941 to i32
  %8945 = and i32 %8944, 255
  %8946 = tail call i32 @llvm.ctpop.i32(i32 %8945)
  %8947 = trunc i32 %8946 to i8
  %8948 = and i8 %8947, 1
  %8949 = xor i8 %8948, 1
  store i8 %8949, i8* %21, align 1
  %8950 = xor i64 %8940, 16
  %8951 = xor i64 %8950, %8941
  %8952 = lshr i64 %8951, 4
  %8953 = trunc i64 %8952 to i8
  %8954 = and i8 %8953, 1
  store i8 %8954, i8* %27, align 1
  %8955 = icmp eq i64 %8941, 0
  %8956 = zext i1 %8955 to i8
  store i8 %8956, i8* %30, align 1
  %8957 = lshr i64 %8941, 63
  %8958 = trunc i64 %8957 to i8
  store i8 %8958, i8* %33, align 1
  %8959 = lshr i64 %8940, 63
  %8960 = xor i64 %8957, %8959
  %8961 = add nuw nsw i64 %8960, %8957
  %8962 = icmp eq i64 %8961, 2
  %8963 = zext i1 %8962 to i8
  store i8 %8963, i8* %39, align 1
  %8964 = add i64 %storemerge108, 8
  store i64 %8964, i64* %3, align 8
  %8965 = add i64 %8940, 536
  %8966 = inttoptr i64 %8941 to i64*
  %8967 = load i64, i64* %8966, align 8
  store i64 %8967, i64* %RBP.i, align 8
  store i64 %8965, i64* %6, align 8
  %8968 = add i64 %storemerge108, 9
  store i64 %8968, i64* %3, align 8
  %8969 = inttoptr i64 %8965 to i64*
  %8970 = load i64, i64* %8969, align 8
  store i64 %8970, i64* %3, align 8
  %8971 = add i64 %8940, 544
  store i64 %8971, i64* %6, align 8
  ret %struct.Memory* %MEMORY.100
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x210___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -528
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 528
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x118f8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 71928
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3758__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 14168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0xc__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x278___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 632
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_472eb9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x50__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x214__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_472e68(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cc330___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cc330_type* @G_0x6cc330 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12f8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4856
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12f0__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12e0__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12e8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4840
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_472eb4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xca8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 3240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xca0__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 3232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xc90__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 3216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xc98__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 3224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_472f05(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x658__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1624
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x650__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1616
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x640__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x648__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x1193c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 71996
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_474a80(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4294967295, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x88__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6c__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x68__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0xf8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xf8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xfc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -252
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x100__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -256
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r9__MINUS0x108__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %R9, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memset_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xf0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rdx____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x100__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -252
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x108__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.getLuma4x4Neighbour(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 4294967295, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xa0__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__r10____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x10___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 16, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xd0__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xb8__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x10c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -268
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10c__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -268
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11ad0__r9_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 72400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473323(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473084(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x78__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x74__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rax__rcx_2____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x110__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473094(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4294967295, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x110__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x110__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x52__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -82
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4730e1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x90__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x114__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -276
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4730f1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x114__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -276
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x114__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -276
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47313e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xa8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xa4__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x118__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -280
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47314e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x118__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -280
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x118__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x56__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -86
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47319b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xbc__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x11c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -284
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4731a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x56__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -86
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x11c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -284
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x11c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -284
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4731ed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -288
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4731fd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -288
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x120__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x5a__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -90
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47324b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x124__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -292
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47325b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x124__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -292
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x124__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4732a9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -296
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4732b9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -296
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x128__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x5e__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -94
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473307(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x12c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -300
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473311(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x5e__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -94
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x12c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -300
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x12c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -300
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4742c6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473afd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473402(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x84__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473399(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4733c6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x130__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -304
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4733f1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x130__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x134__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -308
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473412(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x134__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -308
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4734ff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x9c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47348a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4734bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x138__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -312
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4734ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x138__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x13c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -316
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47350f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x13c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -316
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4735fc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xb4__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473587(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4735ba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x140__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -320
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4735eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x140__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -320
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x144__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -324
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47360c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x144__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -324
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4736f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xcc__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473684(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4736b7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x148__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -328
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4736e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x148__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -328
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -332
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473703(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -332
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4737e1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473776(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4737a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x150__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -336
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4737d0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x150__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x154__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -340
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4737f1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x154__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -340
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4738e1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47386a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47389e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x158__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -344
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4738d0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x158__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -344
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x15c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -348
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4738f1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x15c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -348
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4739e1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47396a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47399e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -352
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4739d0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x160__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -352
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x164__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -356
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4739f1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x164__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -356
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473ae1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473a6a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_473a9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -360
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473ad0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x168__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x16c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -364
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473aeb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x16c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -364
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4742c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473bcb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473b62(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_473b92(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -368
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473bba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x170__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -368
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -372
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473bdb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x174__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -372
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473cc8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473c53(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_473c89(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x178__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -376
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473cb7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x178__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x17c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -380
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473cd8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x17c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473dc5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473d50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_473d86(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x180__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -384
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473db4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x180__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x184__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -388
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473dd5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x184__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473ec2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473e4d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_473e83(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x188__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -392
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473eb1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x188__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -396
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473ecc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_473faa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_473f3f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_473f70(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x190__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -400
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473f99(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x190__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x194__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_473fba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x194__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4740aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_474033(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47406a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x198__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -408
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474099(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x198__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -408
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x19c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -412
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4740ba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x19c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -412
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4741aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_474133(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47416a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -416
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474199(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -420
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4741ba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -420
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4742aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_474233(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47426a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -424
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474299(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -428
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4742b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1ac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -428
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x52__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -82
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_47431a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x54__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x54__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4742ff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -432
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474309(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -436
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47434f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_474339(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -440
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474343(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -436
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x62__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -98
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x62__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -98
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_4743b0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x58__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x58__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_474395(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -444
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47439f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1bc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -448
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4743e5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4743cf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -452
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4743d9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -452
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x5a__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -90
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_474446(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x5c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x5c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47442b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -456
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474435(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -460
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47447b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_474465(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -464
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47446f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1cc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -460
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x64__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_4744dc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x60__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x60__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4744c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -468
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4744cb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -468
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -472
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474511(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4744fb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -476
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474505(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1dc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -476
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -472
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_474584(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x68__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rdx____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x62__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -98
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = sext i16 %9 to i64
  %11 = and i64 %10, 4294967295
  store i64 %11, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -480
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = bitcast i64* %RSP to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 0, i32* %4, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x10__0x8__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 16, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x10__0x10__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 16, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.SetMotionVectorPredictor(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_4745e7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 1, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_xorl__r9d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 0, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x10___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 16, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rcx____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rcx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x64__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -484
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_474a7b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RCX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xac__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_474a68(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xa8__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x62__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -98
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_474777(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpw__0x0__MINUS0x62__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -98
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i16 %8, 255
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i16 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i16 %8, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4746fe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpb__0x0____rax__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = zext i8 %9 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x20__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i16**
  %4 = load i16*, i16** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  store i16 0, i16* %4, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__0x2__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cea08___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  store i16 0, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474772(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x68__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x20__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RCX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswq_MINUS0x62__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -98
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x66__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -102
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__0x2__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x62__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -98
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cea08___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax____rcx__rdx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %AX, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4747d9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  store i16 -1, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_4748f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_474879(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x64__rbp____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %DX, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4748f0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x6c__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswq_MINUS0x64__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x6a__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -106
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x64__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47495a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4749af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, 1
  %8 = icmp ne i32 %4, -1
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %4, 16
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %4, 31
  %30 = xor i32 %29, 1
  %31 = xor i32 %26, %29
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4749f3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x722cb8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x722cb8_type* @G_0x722cb8 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474a55(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_474a36(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x1____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  store i16 1, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474a50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x2____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  store i16 2, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474a5a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47462d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474a6d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4745ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475138(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475133(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475120(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_474b2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -488
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -488
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovnel__ecx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = load i64, i64* %RSI, align 8
  %12 = select i1 %10, i64 %5, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x1ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -492
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474b3a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -492
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -492
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__ecx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rsi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xa8__rsi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x40__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = bitcast i64* %RSI to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi__rdi_8____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rsi__rdi_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, 1
  %8 = icmp ne i32 %4, -1
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %4, 16
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %4, 31
  %30 = xor i32 %29, 1
  %31 = xor i32 %26, %29
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovel__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = load i64, i64* %RCX, align 8
  %12 = select i1 %10, i64 %5, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd4__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, 1
  %10 = icmp ne i32 %8, -1
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %31, 1
  %33 = xor i32 %28, %31
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_474cb6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47510d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xf7e7f8ac__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -135792468, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11940__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 72000
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RSI, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x7247b0___rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, 7489456
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %4, %11
  %13 = icmp ult i32 %4, %11
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %12, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %11, %4
  %23 = xor i32 %22, %12
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %12, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %12, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %4, 31
  %35 = lshr i32 %11, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -496
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_474d16(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11940__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72000
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -500
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474d2f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x7247b0___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = shl i64 %3, 2
  %5 = add i64 %4, 7489456
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -500
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -500
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_474dc9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x18___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 24
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -25
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RCX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x108___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 264
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xe4__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x48__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd4__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq___rdx__rsi_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 3
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %3, %11
  %13 = icmp ult i64 %3, %11
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %11, %3
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i64 %3, 63
  %36 = lshr i64 %11, 63
  %37 = xor i64 %36, %35
  %38 = xor i64 %32, %35
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_474da6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474dc9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474db5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474cca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xf7e7f8ac__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, 135792468
  %10 = icmp ult i32 %8, -135792468
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %30, 1
  %32 = xor i32 %27, %30
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4750b3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x11950___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 72016
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -72017
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x3c___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 60
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xe0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x270f__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -9999
  %10 = icmp ult i32 %8, 9999
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_474ee6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x38__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd4__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rax____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %DX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rax____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx__0x2__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %DX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475052(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x38__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd4__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rcx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = bitcast i64* %RCX to i16**
  %4 = load i16*, i16** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i16, i16* %4, align 2
  %8 = sext i16 %7 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RAX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x80___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 5
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 128
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -129
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 39
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___di(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %DI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__di____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %DI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_0x2__rcx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__di__0x2__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %DI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x100___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 5
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -256
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 256
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cea08___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cea08_type* @G_0x6cea08 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RDX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx____rdx__rsi_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %CX, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0____rdx__rsi_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  store i16 0, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x722cb8___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x722cb8_type* @G_0x722cb8 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x2____rdx__rsi_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  store i16 2, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475108(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475112(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474ac6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475125(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_474a87(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x210___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 528
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -529
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
