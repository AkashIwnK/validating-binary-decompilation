; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x4b2a50_type = type <{ [4 x i8] }>
%G_0x6cb8f8_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x6d4690_type = type <{ [8 x i8] }>
%G_0x6d4750_type = type <{ [1 x i8] }>
%G_0x70fcf0_type = type <{ [8 x i8] }>
%G_0xa44c9__rip__type = type <{ [8 x i8] }>
%G_0xa4585__rip__type = type <{ [8 x i8] }>
%G__0x4b23a0_type = type <{ [8 x i8] }>
%G__0x4b2750_type = type <{ [8 x i8] }>
%G__0x4b28d0_type = type <{ [8 x i8] }>
%G__0x4b2a50_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x4b2a50 = local_unnamed_addr global %G_0x4b2a50_type zeroinitializer
@G_0x6cb8f8 = local_unnamed_addr global %G_0x6cb8f8_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x6d4690 = local_unnamed_addr global %G_0x6d4690_type zeroinitializer
@G_0x6d4750 = local_unnamed_addr global %G_0x6d4750_type zeroinitializer
@G_0x70fcf0 = local_unnamed_addr global %G_0x70fcf0_type zeroinitializer
@G_0xa44c9__rip_ = global %G_0xa44c9__rip__type zeroinitializer
@G_0xa4585__rip_ = global %G_0xa4585__rip__type zeroinitializer
@G__0x4b23a0 = global %G__0x4b23a0_type zeroinitializer
@G__0x4b2750 = global %G__0x4b2750_type zeroinitializer
@G__0x4b28d0 = global %G__0x4b28d0_type zeroinitializer
@G__0x4b2a50 = global %G__0x4b2a50_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @abs(i64)

declare extern_weak x86_64_sysvcc i64 @pow(i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_475150.sign(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4acd10.levrun_linfo_c2x2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4ace70.levrun_linfo_inter(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @dct_chroma_sp(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -792
  store i64 %11, i64* %6, align 8
  %12 = icmp ult i64 %8, 784
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %41 = add i64 %10, add (i64 ptrtoint (%G_0xa4585__rip__type* @G_0xa4585__rip_ to i64), i64 10)
  %42 = add i64 %10, 18
  store i64 %42, i64* %3, align 8
  %43 = inttoptr i64 %41 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast [32 x %union.VectorReg]* %40 to double*
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %44, i64* %46, align 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %48 = bitcast i64* %47 to double*
  store double 0.000000e+00, double* %48, align 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %50 = bitcast %union.VectorReg* %49 to i8*
  %51 = add i64 %10, add (i64 ptrtoint (%G_0xa4585__rip__type* @G_0xa4585__rip_ to i64), i64 18)
  %52 = add i64 %10, 26
  store i64 %52, i64* %3, align 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast %union.VectorReg* %49 to double*
  %56 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %49, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %54, i64* %56, align 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %58 = bitcast i64* %57 to double*
  store double 0.000000e+00, double* %58, align 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI.i1347 = bitcast %union.anon* %59 to i32*
  %60 = add i64 %7, -12
  %61 = load i32, i32* %EDI.i1347, align 4
  %62 = add i64 %10, 29
  store i64 %62, i64* %3, align 8
  %63 = inttoptr i64 %60 to i32*
  store i32 %61, i32* %63, align 4
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI.i1753 = bitcast %union.anon* %64 to i32*
  %65 = load i64, i64* %RBP.i, align 8
  %66 = add i64 %65, -8
  %67 = load i32, i32* %ESI.i1753, align 4
  %68 = load i64, i64* %3, align 8
  %69 = add i64 %68, 3
  store i64 %69, i64* %3, align 8
  %70 = inttoptr i64 %66 to i32*
  store i32 %67, i32* %70, align 4
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i1862 = getelementptr inbounds %union.anon, %union.anon* %71, i64 0, i32 0
  %72 = load i64, i64* %3, align 8
  %73 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %73, i64* %RAX.i1862, align 8
  %74 = add i64 %73, 14168
  %75 = add i64 %72, 15
  store i64 %75, i64* %3, align 8
  %76 = inttoptr i64 %74 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RAX.i1862, align 8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i2028 = getelementptr inbounds %union.anon, %union.anon* %78, i64 0, i32 0
  store i64 %73, i64* %RCX.i2028, align 8
  %79 = add i64 %73, 12
  %80 = add i64 %72, 27
  store i64 %80, i64* %3, align 8
  %81 = inttoptr i64 %79 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = sext i32 %82 to i64
  %84 = mul nsw i64 %83, 632
  store i64 %84, i64* %RCX.i2028, align 8
  %85 = lshr i64 %84, 63
  %86 = add i64 %84, %77
  %87 = icmp ult i64 %86, %77
  %88 = icmp ult i64 %86, %84
  %89 = or i1 %87, %88
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %14, align 1
  %91 = trunc i64 %86 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92)
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %21, align 1
  %97 = xor i64 %84, %77
  %98 = xor i64 %97, %86
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %27, align 1
  %102 = icmp eq i64 %86, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %30, align 1
  %104 = lshr i64 %86, 63
  %105 = trunc i64 %104 to i8
  store i8 %105, i8* %33, align 1
  %106 = lshr i64 %77, 63
  %107 = xor i64 %104, %106
  %108 = xor i64 %104, %85
  %109 = add nuw nsw i64 %107, %108
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %39, align 1
  %112 = load i64, i64* %RBP.i, align 8
  %113 = add i64 %112, -440
  %114 = add i64 %72, 44
  store i64 %114, i64* %3, align 8
  %115 = inttoptr i64 %113 to i64*
  store i64 %86, i64* %115, align 8
  %116 = load i64, i64* %3, align 8
  %117 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %117, i64* %RAX.i1862, align 8
  %118 = add i64 %117, 14144
  %119 = add i64 %116, 15
  store i64 %119, i64* %3, align 8
  %120 = inttoptr i64 %118 to i64*
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %RAX.i1862, align 8
  %RSI.i2426 = getelementptr inbounds %union.anon, %union.anon* %64, i64 0, i32 0
  %122 = load i64, i64* %RBP.i, align 8
  %123 = add i64 %122, -4
  %124 = add i64 %116, 18
  store i64 %124, i64* %3, align 8
  %125 = inttoptr i64 %123 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, 1
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RSI.i2426, align 8
  %129 = icmp eq i32 %126, -1
  %130 = icmp eq i32 %127, 0
  %131 = or i1 %129, %130
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %14, align 1
  %133 = and i32 %127, 255
  %134 = tail call i32 @llvm.ctpop.i32(i32 %133)
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  store i8 %137, i8* %21, align 1
  %138 = xor i32 %127, %126
  %139 = lshr i32 %138, 4
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  store i8 %141, i8* %27, align 1
  %142 = zext i1 %130 to i8
  store i8 %142, i8* %30, align 1
  %143 = lshr i32 %127, 31
  %144 = trunc i32 %143 to i8
  store i8 %144, i8* %33, align 1
  %145 = lshr i32 %126, 31
  %146 = xor i32 %143, %145
  %147 = add nuw nsw i32 %146, %143
  %148 = icmp eq i32 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %39, align 1
  %150 = sext i32 %127 to i64
  store i64 %150, i64* %RCX.i2028, align 8
  %151 = shl nsw i64 %150, 3
  %152 = add i64 %121, %151
  %153 = add i64 %116, 28
  store i64 %153, i64* %3, align 8
  %154 = inttoptr i64 %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RAX.i1862, align 8
  %156 = add i64 %116, 31
  store i64 %156, i64* %3, align 8
  %157 = inttoptr i64 %155 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %122, -480
  %160 = add i64 %116, 38
  store i64 %160, i64* %3, align 8
  %161 = inttoptr i64 %159 to i64*
  store i64 %158, i64* %161, align 8
  %162 = load i64, i64* %3, align 8
  %163 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %163, i64* %RAX.i1862, align 8
  %164 = add i64 %163, 14144
  %165 = add i64 %162, 15
  store i64 %165, i64* %3, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX.i1862, align 8
  %168 = load i64, i64* %RBP.i, align 8
  %169 = add i64 %168, -4
  %170 = add i64 %162, 18
  store i64 %170, i64* %3, align 8
  %171 = inttoptr i64 %169 to i32*
  %172 = load i32, i32* %171, align 4
  %173 = add i32 %172, 1
  %174 = zext i32 %173 to i64
  store i64 %174, i64* %RSI.i2426, align 8
  %175 = icmp eq i32 %172, -1
  %176 = icmp eq i32 %173, 0
  %177 = or i1 %175, %176
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %14, align 1
  %179 = and i32 %173, 255
  %180 = tail call i32 @llvm.ctpop.i32(i32 %179)
  %181 = trunc i32 %180 to i8
  %182 = and i8 %181, 1
  %183 = xor i8 %182, 1
  store i8 %183, i8* %21, align 1
  %184 = xor i32 %173, %172
  %185 = lshr i32 %184, 4
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  store i8 %187, i8* %27, align 1
  %188 = zext i1 %176 to i8
  store i8 %188, i8* %30, align 1
  %189 = lshr i32 %173, 31
  %190 = trunc i32 %189 to i8
  store i8 %190, i8* %33, align 1
  %191 = lshr i32 %172, 31
  %192 = xor i32 %189, %191
  %193 = add nuw nsw i32 %192, %189
  %194 = icmp eq i32 %193, 2
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %39, align 1
  %196 = sext i32 %173 to i64
  store i64 %196, i64* %RCX.i2028, align 8
  %197 = shl nsw i64 %196, 3
  %198 = add i64 %167, %197
  %199 = add i64 %162, 28
  store i64 %199, i64* %3, align 8
  %200 = inttoptr i64 %198 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %RAX.i1862, align 8
  %202 = add i64 %201, 8
  %203 = add i64 %162, 32
  store i64 %203, i64* %3, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX.i1862, align 8
  %206 = add i64 %168, -488
  %207 = add i64 %162, 39
  store i64 %207, i64* %3, align 8
  %208 = inttoptr i64 %206 to i64*
  store i64 %205, i64* %208, align 8
  %209 = load i64, i64* %RBP.i, align 8
  %210 = add i64 %209, -440
  %211 = load i64, i64* %3, align 8
  %212 = add i64 %211, 7
  store i64 %212, i64* %3, align 8
  %213 = inttoptr i64 %210 to i64*
  %214 = load i64, i64* %213, align 8
  store i64 %214, i64* %RAX.i1862, align 8
  %215 = add i64 %214, 12
  %216 = add i64 %211, 10
  store i64 %216, i64* %3, align 8
  %217 = inttoptr i64 %215 to i32*
  %218 = load i32, i32* %217, align 4
  %219 = add i32 %218, -12
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RSI.i2426, align 8
  %221 = icmp ult i32 %218, 12
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %14, align 1
  %223 = and i32 %219, 255
  %224 = tail call i32 @llvm.ctpop.i32(i32 %223)
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  store i8 %227, i8* %21, align 1
  %228 = xor i32 %219, %218
  %229 = lshr i32 %228, 4
  %230 = trunc i32 %229 to i8
  %231 = and i8 %230, 1
  store i8 %231, i8* %27, align 1
  %232 = icmp eq i32 %219, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %30, align 1
  %234 = lshr i32 %219, 31
  %235 = trunc i32 %234 to i8
  store i8 %235, i8* %33, align 1
  %236 = lshr i32 %218, 31
  %237 = xor i32 %234, %236
  %238 = add nuw nsw i32 %237, %236
  %239 = icmp eq i32 %238, 2
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %39, align 1
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %242 = sitofp i32 %219 to double
  %243 = bitcast %union.VectorReg* %241 to double*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %245 = bitcast i64* %244 to <2 x i32>*
  %246 = load <2 x i32>, <2 x i32>* %245, align 1
  %247 = load double, double* %55, align 1
  %248 = fdiv double %242, %247
  store double %248, double* %243, align 1
  %.cast180 = bitcast double %248 to <2 x i32>
  %249 = extractelement <2 x i32> %.cast180, i32 0
  %250 = bitcast %union.VectorReg* %49 to i32*
  store i32 %249, i32* %250, align 1
  %251 = extractelement <2 x i32> %.cast180, i32 1
  %252 = getelementptr inbounds i8, i8* %50, i64 4
  %253 = bitcast i8* %252 to i32*
  store i32 %251, i32* %253, align 1
  %254 = extractelement <2 x i32> %246, i32 0
  %255 = bitcast i64* %57 to i32*
  store i32 %254, i32* %255, align 1
  %256 = extractelement <2 x i32> %246, i32 1
  %257 = getelementptr inbounds i8, i8* %50, i64 12
  %258 = bitcast i8* %257 to i32*
  store i32 %256, i32* %258, align 1
  %259 = add i64 %211, -49866
  %260 = add i64 %211, 29
  %261 = load i64, i64* %6, align 8
  %262 = add i64 %261, -8
  %263 = inttoptr i64 %262 to i64*
  store i64 %260, i64* %263, align 8
  store i64 %262, i64* %6, align 8
  store i64 %259, i64* %3, align 8
  %264 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @pow to i64), %struct.Memory* %2)
  %265 = load i64, i64* %3, align 8
  %266 = add i64 %265, ptrtoint (%G_0xa44c9__rip__type* @G_0xa44c9__rip_ to i64)
  %267 = add i64 %265, 8
  store i64 %267, i64* %3, align 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268, align 8
  store i64 %269, i64* %56, align 1
  store double 0.000000e+00, double* %58, align 1
  %270 = add i64 %265, add (i64 ptrtoint (%G_0xa44c9__rip__type* @G_0xa44c9__rip_ to i64), i64 8)
  %271 = add i64 %265, 16
  store i64 %271, i64* %3, align 8
  %272 = inttoptr i64 %270 to double*
  %273 = load double, double* %272, align 8
  %274 = load double, double* %45, align 1
  %275 = fmul double %273, %274
  %276 = bitcast i64 %269 to double
  %277 = fmul double %275, %276
  store double %277, double* %243, align 1
  store i64 0, i64* %244, align 1
  %278 = load i64, i64* %RBP.i, align 8
  %279 = add i64 %278, -552
  %280 = add i64 %265, 32
  store i64 %280, i64* %3, align 8
  %281 = inttoptr i64 %279 to double*
  store double %277, double* %281, align 8
  %282 = load i64, i64* %RBP.i, align 8
  %283 = add i64 %282, -440
  %284 = load i64, i64* %3, align 8
  %285 = add i64 %284, 7
  store i64 %285, i64* %3, align 8
  %286 = inttoptr i64 %283 to i64*
  %287 = load i64, i64* %286, align 8
  store i64 %287, i64* %RAX.i1862, align 8
  %288 = add i64 %287, 12
  %289 = add i64 %284, 10
  store i64 %289, i64* %3, align 8
  %290 = inttoptr i64 %288 to i32*
  %291 = load i32, i32* %290, align 4
  %292 = zext i32 %291 to i64
  store i64 %292, i64* %RSI.i2426, align 8
  %293 = load i64, i64* bitcast (%G_0x6d4690_type* @G_0x6d4690 to i64*), align 8
  store i64 %293, i64* %RAX.i1862, align 8
  %294 = add i64 %293, 208
  %295 = add i64 %284, 24
  store i64 %295, i64* %3, align 8
  %296 = inttoptr i64 %294 to i32*
  %297 = load i32, i32* %296, align 4
  %298 = add i32 %297, %291
  %299 = zext i32 %298 to i64
  store i64 %299, i64* %RSI.i2426, align 8
  %300 = and i32 %298, 255
  %301 = tail call i32 @llvm.ctpop.i32(i32 %300)
  %302 = trunc i32 %301 to i8
  %303 = and i8 %302, 1
  %304 = xor i8 %303, 1
  %305 = icmp eq i32 %298, 0
  %306 = zext i1 %305 to i8
  %307 = lshr i32 %298, 31
  %308 = trunc i32 %307 to i8
  %309 = add i64 %284, 27
  store i8 0, i8* %14, align 1
  store i8 %304, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 %306, i8* %30, align 1
  store i8 %308, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %310 = icmp ne i8 %308, 0
  %.v = select i1 %310, i64 6, i64 19
  %311 = add i64 %309, %.v
  store i64 %311, i64* %3, align 8
  br i1 %310, label %block_40d3a8, label %block_.L_40d3b5

block_40d3a8:                                     ; preds = %entry
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %312 = add i64 %282, -564
  %313 = add i64 %311, 8
  store i64 %313, i64* %3, align 8
  %314 = inttoptr i64 %312 to i32*
  store i32 0, i32* %314, align 4
  %315 = load i64, i64* %3, align 8
  %316 = add i64 %315, 96
  store i64 %316, i64* %3, align 8
  br label %block_.L_40d410

block_.L_40d3b5:                                  ; preds = %entry
  %317 = add i64 %311, 7
  store i64 %317, i64* %3, align 8
  %318 = load i64, i64* %286, align 8
  store i64 %318, i64* %RAX.i1862, align 8
  %319 = add i64 %318, 12
  %320 = add i64 %311, 10
  store i64 %320, i64* %3, align 8
  %321 = inttoptr i64 %319 to i32*
  %322 = load i32, i32* %321, align 4
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %RCX.i2028, align 8
  store i64 %293, i64* %RAX.i1862, align 8
  %324 = add i64 %311, 24
  store i64 %324, i64* %3, align 8
  %325 = load i32, i32* %296, align 4
  %326 = add i32 %325, %322
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RCX.i2028, align 8
  %328 = lshr i32 %326, 31
  %329 = add i32 %326, -51
  %330 = icmp ult i32 %326, 51
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %14, align 1
  %332 = and i32 %329, 255
  %333 = tail call i32 @llvm.ctpop.i32(i32 %332)
  %334 = trunc i32 %333 to i8
  %335 = and i8 %334, 1
  %336 = xor i8 %335, 1
  store i8 %336, i8* %21, align 1
  %337 = xor i32 %326, 16
  %338 = xor i32 %337, %329
  %339 = lshr i32 %338, 4
  %340 = trunc i32 %339 to i8
  %341 = and i8 %340, 1
  store i8 %341, i8* %27, align 1
  %342 = icmp eq i32 %329, 0
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %30, align 1
  %344 = lshr i32 %329, 31
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %33, align 1
  %346 = xor i32 %344, %328
  %347 = add nuw nsw i32 %346, %328
  %348 = icmp eq i32 %347, 2
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %39, align 1
  %350 = icmp ne i8 %345, 0
  %351 = xor i1 %350, %348
  %352 = or i1 %342, %351
  %.v376 = select i1 %352, i64 49, i64 33
  %353 = add i64 %311, %.v376
  store i64 %353, i64* %3, align 8
  br i1 %352, label %block_.L_40d3e6, label %block_40d3d6

block_40d3d6:                                     ; preds = %block_.L_40d3b5
  store i64 51, i64* %RAX.i1862, align 8
  %354 = add i64 %282, -568
  %355 = add i64 %353, 11
  store i64 %355, i64* %3, align 8
  %356 = inttoptr i64 %354 to i32*
  store i32 51, i32* %356, align 4
  %357 = load i64, i64* %3, align 8
  %358 = add i64 %357, 35
  store i64 %358, i64* %3, align 8
  br label %block_.L_40d404

block_.L_40d3e6:                                  ; preds = %block_.L_40d3b5
  %359 = add i64 %353, 7
  store i64 %359, i64* %3, align 8
  %360 = load i64, i64* %286, align 8
  store i64 %360, i64* %RAX.i1862, align 8
  %361 = add i64 %360, 12
  %362 = add i64 %353, 10
  store i64 %362, i64* %3, align 8
  %363 = inttoptr i64 %361 to i32*
  %364 = load i32, i32* %363, align 4
  %365 = zext i32 %364 to i64
  store i64 %365, i64* %RCX.i2028, align 8
  store i64 %293, i64* %RAX.i1862, align 8
  %366 = add i64 %353, 24
  store i64 %366, i64* %3, align 8
  %367 = load i32, i32* %296, align 4
  %368 = add i32 %367, %364
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %RCX.i2028, align 8
  %370 = icmp ult i32 %368, %364
  %371 = icmp ult i32 %368, %367
  %372 = or i1 %370, %371
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %14, align 1
  %374 = and i32 %368, 255
  %375 = tail call i32 @llvm.ctpop.i32(i32 %374)
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  %378 = xor i8 %377, 1
  store i8 %378, i8* %21, align 1
  %379 = xor i32 %367, %364
  %380 = xor i32 %379, %368
  %381 = lshr i32 %380, 4
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  store i8 %383, i8* %27, align 1
  %384 = icmp eq i32 %368, 0
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %30, align 1
  %386 = lshr i32 %368, 31
  %387 = trunc i32 %386 to i8
  store i8 %387, i8* %33, align 1
  %388 = lshr i32 %364, 31
  %389 = lshr i32 %367, 31
  %390 = xor i32 %386, %388
  %391 = xor i32 %386, %389
  %392 = add nuw nsw i32 %390, %391
  %393 = icmp eq i32 %392, 2
  %394 = zext i1 %393 to i8
  store i8 %394, i8* %39, align 1
  %395 = add i64 %282, -568
  %396 = add i64 %353, 30
  store i64 %396, i64* %3, align 8
  %397 = inttoptr i64 %395 to i32*
  store i32 %368, i32* %397, align 4
  %.pre = load i64, i64* %3, align 8
  br label %block_.L_40d404

block_.L_40d404:                                  ; preds = %block_.L_40d3e6, %block_40d3d6
  %398 = phi i64 [ %.pre, %block_.L_40d3e6 ], [ %358, %block_40d3d6 ]
  %399 = load i64, i64* %RBP.i, align 8
  %400 = add i64 %399, -568
  %401 = add i64 %398, 6
  store i64 %401, i64* %3, align 8
  %402 = inttoptr i64 %400 to i32*
  %403 = load i32, i32* %402, align 4
  %404 = zext i32 %403 to i64
  store i64 %404, i64* %RAX.i1862, align 8
  %405 = add i64 %399, -564
  %406 = add i64 %398, 12
  store i64 %406, i64* %3, align 8
  %407 = inttoptr i64 %405 to i32*
  store i32 %403, i32* %407, align 4
  %.pre250 = load i64, i64* %3, align 8
  br label %block_.L_40d410

block_.L_40d410:                                  ; preds = %block_.L_40d404, %block_40d3a8
  %408 = phi i64 [ %.pre250, %block_.L_40d404 ], [ %316, %block_40d3a8 ]
  %EAX.i4969.pre-phi = bitcast %union.anon* %71 to i32*
  %409 = load i64, i64* %RBP.i, align 8
  %410 = add i64 %409, -564
  %411 = add i64 %408, 6
  store i64 %411, i64* %3, align 8
  %412 = inttoptr i64 %410 to i32*
  %413 = load i32, i32* %412, align 4
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %RAX.i1862, align 8
  %415 = add i64 %409, -556
  %416 = add i64 %408, 12
  store i64 %416, i64* %3, align 8
  %417 = inttoptr i64 %415 to i32*
  store i32 %413, i32* %417, align 4
  %418 = load i64, i64* %RBP.i, align 8
  %419 = add i64 %418, -440
  %420 = load i64, i64* %3, align 8
  %421 = add i64 %420, 7
  store i64 %421, i64* %3, align 8
  %422 = inttoptr i64 %419 to i64*
  %423 = load i64, i64* %422, align 8
  store i64 %423, i64* %RCX.i2028, align 8
  %424 = add i64 %423, 16
  %425 = add i64 %420, 10
  store i64 %425, i64* %3, align 8
  %426 = inttoptr i64 %424 to i32*
  %427 = load i32, i32* %426, align 4
  %428 = zext i32 %427 to i64
  store i64 %428, i64* %RAX.i1862, align 8
  %429 = load i64, i64* bitcast (%G_0x6d4690_type* @G_0x6d4690 to i64*), align 8
  store i64 %429, i64* %RCX.i2028, align 8
  %430 = add i64 %429, 208
  %431 = add i64 %420, 24
  store i64 %431, i64* %3, align 8
  %432 = inttoptr i64 %430 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = add i32 %433, %427
  %435 = zext i32 %434 to i64
  store i64 %435, i64* %RAX.i1862, align 8
  %436 = and i32 %434, 255
  %437 = tail call i32 @llvm.ctpop.i32(i32 %436)
  %438 = trunc i32 %437 to i8
  %439 = and i8 %438, 1
  %440 = xor i8 %439, 1
  %441 = icmp eq i32 %434, 0
  %442 = zext i1 %441 to i8
  %443 = lshr i32 %434, 31
  %444 = trunc i32 %443 to i8
  %445 = add i64 %420, 27
  store i8 0, i8* %14, align 1
  store i8 %440, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 %442, i8* %30, align 1
  store i8 %444, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %446 = icmp ne i8 %444, 0
  %.v182 = select i1 %446, i64 6, i64 19
  %447 = add i64 %445, %.v182
  store i64 %447, i64* %3, align 8
  br i1 %446, label %block_40d43d, label %block_.L_40d44a

block_40d43d:                                     ; preds = %block_.L_40d410
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %448 = add i64 %418, -572
  %449 = add i64 %447, 8
  store i64 %449, i64* %3, align 8
  %450 = inttoptr i64 %448 to i32*
  store i32 0, i32* %450, align 4
  %451 = load i64, i64* %3, align 8
  %452 = add i64 %451, 96
  store i64 %452, i64* %3, align 8
  br label %block_.L_40d4a5

block_.L_40d44a:                                  ; preds = %block_.L_40d410
  %453 = add i64 %447, 7
  store i64 %453, i64* %3, align 8
  %454 = load i64, i64* %422, align 8
  store i64 %454, i64* %RAX.i1862, align 8
  %455 = add i64 %454, 16
  %456 = add i64 %447, 10
  store i64 %456, i64* %3, align 8
  %457 = inttoptr i64 %455 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RCX.i2028, align 8
  store i64 %429, i64* %RAX.i1862, align 8
  %460 = add i64 %447, 24
  store i64 %460, i64* %3, align 8
  %461 = load i32, i32* %432, align 4
  %462 = add i32 %461, %458
  %463 = zext i32 %462 to i64
  store i64 %463, i64* %RCX.i2028, align 8
  %464 = lshr i32 %462, 31
  %465 = add i32 %462, -51
  %466 = icmp ult i32 %462, 51
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %14, align 1
  %468 = and i32 %465, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468)
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %21, align 1
  %473 = xor i32 %462, 16
  %474 = xor i32 %473, %465
  %475 = lshr i32 %474, 4
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  store i8 %477, i8* %27, align 1
  %478 = icmp eq i32 %465, 0
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %30, align 1
  %480 = lshr i32 %465, 31
  %481 = trunc i32 %480 to i8
  store i8 %481, i8* %33, align 1
  %482 = xor i32 %480, %464
  %483 = add nuw nsw i32 %482, %464
  %484 = icmp eq i32 %483, 2
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %39, align 1
  %486 = icmp ne i8 %481, 0
  %487 = xor i1 %486, %484
  %488 = or i1 %478, %487
  %.v377 = select i1 %488, i64 49, i64 33
  %489 = add i64 %447, %.v377
  store i64 %489, i64* %3, align 8
  br i1 %488, label %block_.L_40d47b, label %block_40d46b

block_40d46b:                                     ; preds = %block_.L_40d44a
  store i64 51, i64* %RAX.i1862, align 8
  %490 = add i64 %418, -576
  %491 = add i64 %489, 11
  store i64 %491, i64* %3, align 8
  %492 = inttoptr i64 %490 to i32*
  store i32 51, i32* %492, align 4
  %493 = load i64, i64* %3, align 8
  %494 = add i64 %493, 35
  store i64 %494, i64* %3, align 8
  br label %block_.L_40d499

block_.L_40d47b:                                  ; preds = %block_.L_40d44a
  %495 = add i64 %489, 7
  store i64 %495, i64* %3, align 8
  %496 = load i64, i64* %422, align 8
  store i64 %496, i64* %RAX.i1862, align 8
  %497 = add i64 %496, 16
  %498 = add i64 %489, 10
  store i64 %498, i64* %3, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %RCX.i2028, align 8
  store i64 %429, i64* %RAX.i1862, align 8
  %502 = add i64 %489, 24
  store i64 %502, i64* %3, align 8
  %503 = load i32, i32* %432, align 4
  %504 = add i32 %503, %500
  %505 = zext i32 %504 to i64
  store i64 %505, i64* %RCX.i2028, align 8
  %506 = icmp ult i32 %504, %500
  %507 = icmp ult i32 %504, %503
  %508 = or i1 %506, %507
  %509 = zext i1 %508 to i8
  store i8 %509, i8* %14, align 1
  %510 = and i32 %504, 255
  %511 = tail call i32 @llvm.ctpop.i32(i32 %510)
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  %514 = xor i8 %513, 1
  store i8 %514, i8* %21, align 1
  %515 = xor i32 %503, %500
  %516 = xor i32 %515, %504
  %517 = lshr i32 %516, 4
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  store i8 %519, i8* %27, align 1
  %520 = icmp eq i32 %504, 0
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %30, align 1
  %522 = lshr i32 %504, 31
  %523 = trunc i32 %522 to i8
  store i8 %523, i8* %33, align 1
  %524 = lshr i32 %500, 31
  %525 = lshr i32 %503, 31
  %526 = xor i32 %522, %524
  %527 = xor i32 %522, %525
  %528 = add nuw nsw i32 %526, %527
  %529 = icmp eq i32 %528, 2
  %530 = zext i1 %529 to i8
  store i8 %530, i8* %39, align 1
  %531 = add i64 %418, -576
  %532 = add i64 %489, 30
  store i64 %532, i64* %3, align 8
  %533 = inttoptr i64 %531 to i32*
  store i32 %504, i32* %533, align 4
  %.pre251 = load i64, i64* %3, align 8
  br label %block_.L_40d499

block_.L_40d499:                                  ; preds = %block_.L_40d47b, %block_40d46b
  %534 = phi i64 [ %.pre251, %block_.L_40d47b ], [ %494, %block_40d46b ]
  %535 = load i64, i64* %RBP.i, align 8
  %536 = add i64 %535, -576
  %537 = add i64 %534, 6
  store i64 %537, i64* %3, align 8
  %538 = inttoptr i64 %536 to i32*
  %539 = load i32, i32* %538, align 4
  %540 = zext i32 %539 to i64
  store i64 %540, i64* %RAX.i1862, align 8
  %541 = add i64 %535, -572
  %542 = add i64 %534, 12
  store i64 %542, i64* %3, align 8
  %543 = inttoptr i64 %541 to i32*
  store i32 %539, i32* %543, align 4
  %.pre252 = load i64, i64* %3, align 8
  br label %block_.L_40d4a5

block_.L_40d4a5:                                  ; preds = %block_.L_40d499, %block_40d43d
  %544 = phi i64 [ %.pre252, %block_.L_40d499 ], [ %452, %block_40d43d ]
  %545 = load i64, i64* %RBP.i, align 8
  %546 = add i64 %545, -572
  %547 = add i64 %544, 6
  store i64 %547, i64* %3, align 8
  %548 = inttoptr i64 %546 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = zext i32 %549 to i64
  store i64 %550, i64* %RAX.i1862, align 8
  %551 = add i64 %545, -560
  %552 = add i64 %544, 12
  store i64 %552, i64* %3, align 8
  %553 = inttoptr i64 %551 to i32*
  store i32 %549, i32* %553, align 4
  %554 = load i64, i64* %RBP.i, align 8
  %555 = add i64 %554, -556
  %556 = load i64, i64* %3, align 8
  %557 = add i64 %556, 7
  store i64 %557, i64* %3, align 8
  %558 = inttoptr i64 %555 to i32*
  %559 = load i32, i32* %558, align 4
  store i8 0, i8* %14, align 1
  %560 = and i32 %559, 255
  %561 = tail call i32 @llvm.ctpop.i32(i32 %560)
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  store i8 %564, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %565 = icmp eq i32 %559, 0
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %30, align 1
  %567 = lshr i32 %559, 31
  %568 = trunc i32 %567 to i8
  store i8 %568, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %569 = icmp ne i8 %568, 0
  %.v183 = select i1 %569, i64 6, i64 23
  %570 = add i64 %557, %.v183
  store i64 %570, i64* %3, align 8
  br i1 %569, label %block_40d4be, label %block_.L_40d4cf

block_40d4be:                                     ; preds = %block_.L_40d4a5
  %571 = add i64 %570, 6
  store i64 %571, i64* %3, align 8
  %572 = load i32, i32* %558, align 4
  %573 = zext i32 %572 to i64
  store i64 %573, i64* %RAX.i1862, align 8
  %574 = add i64 %554, -580
  %575 = add i64 %570, 12
  store i64 %575, i64* %3, align 8
  %576 = inttoptr i64 %574 to i32*
  store i32 %572, i32* %576, align 4
  %577 = load i64, i64* %3, align 8
  %578 = add i64 %577, 26
  store i64 %578, i64* %3, align 8
  br label %block_.L_40d4e4

block_.L_40d4cf:                                  ; preds = %block_.L_40d4a5
  %579 = add i64 %570, 7
  store i64 %579, i64* %3, align 8
  %580 = load i32, i32* %558, align 4
  %581 = sext i32 %580 to i64
  store i64 %581, i64* %RAX.i1862, align 8
  %582 = add nsw i64 %581, 4924192
  %583 = add i64 %570, 15
  store i64 %583, i64* %3, align 8
  %584 = inttoptr i64 %582 to i8*
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i64
  store i64 %586, i64* %RCX.i2028, align 8
  %587 = add i64 %554, -580
  %588 = zext i8 %585 to i32
  %589 = add i64 %570, 21
  store i64 %589, i64* %3, align 8
  %590 = inttoptr i64 %587 to i32*
  store i32 %588, i32* %590, align 4
  %.pre253 = load i64, i64* %3, align 8
  br label %block_.L_40d4e4

block_.L_40d4e4:                                  ; preds = %block_.L_40d4cf, %block_40d4be
  %591 = phi i64 [ %.pre253, %block_.L_40d4cf ], [ %578, %block_40d4be ]
  %ECX.i4869.pre-phi = bitcast %union.anon* %78 to i32*
  %592 = load i64, i64* %RBP.i, align 8
  %593 = add i64 %592, -580
  %594 = add i64 %591, 6
  store i64 %594, i64* %3, align 8
  %595 = inttoptr i64 %593 to i32*
  %596 = load i32, i32* %595, align 4
  %597 = zext i32 %596 to i64
  store i64 6, i64* %RCX.i2028, align 8
  store i64 %597, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  %598 = and i32 %596, 255
  %599 = tail call i32 @llvm.ctpop.i32(i32 %598)
  %600 = trunc i32 %599 to i8
  %601 = and i8 %600, 1
  %602 = xor i8 %601, 1
  store i8 %602, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %603 = icmp eq i32 %596, 0
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %30, align 1
  %605 = lshr i32 %596, 31
  %606 = trunc i32 %605 to i8
  store i8 %606, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %608 = sext i32 %596 to i64
  %609 = lshr i64 %608, 32
  store i64 %609, i64* %607, align 8
  %610 = add i64 %591, 17
  store i64 %610, i64* %3, align 8
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %612 = bitcast %union.anon* %611 to i32*
  %613 = shl nuw i64 %609, 32
  %614 = or i64 %613, %597
  %615 = sdiv i64 %614, 6
  %616 = shl i64 %615, 32
  %617 = ashr exact i64 %616, 32
  %618 = icmp eq i64 %615, %617
  br i1 %618, label %621, label %619

; <label>:619:                                    ; preds = %block_.L_40d4e4
  %620 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %610, %struct.Memory* %264)
  %.pre254 = load i64, i64* %RBP.i, align 8
  %.pre255 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %.pre256 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4870

; <label>:621:                                    ; preds = %block_.L_40d4e4
  %622 = srem i64 %614, 6
  %623 = and i64 %615, 4294967295
  store i64 %623, i64* %RAX.i1862, align 8
  %624 = getelementptr inbounds %union.anon, %union.anon* %611, i64 0, i32 0
  %625 = and i64 %622, 4294967295
  store i64 %625, i64* %624, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %626 = trunc i64 %615 to i32
  br label %routine_idivl__ecx.exit4870

routine_idivl__ecx.exit4870:                      ; preds = %621, %619
  %627 = phi i64 [ %.pre256, %619 ], [ %610, %621 ]
  %628 = phi i32 [ %.pre255, %619 ], [ %626, %621 ]
  %629 = phi i64 [ %.pre254, %619 ], [ %592, %621 ]
  %630 = phi %struct.Memory* [ %620, %619 ], [ %264, %621 ]
  %631 = add i64 %629, -444
  %632 = add i64 %627, 6
  store i64 %632, i64* %3, align 8
  %633 = inttoptr i64 %631 to i32*
  store i32 %628, i32* %633, align 4
  %634 = load i64, i64* %RBP.i, align 8
  %635 = add i64 %634, -556
  %636 = load i64, i64* %3, align 8
  %637 = add i64 %636, 7
  store i64 %637, i64* %3, align 8
  %638 = inttoptr i64 %635 to i32*
  %639 = load i32, i32* %638, align 4
  store i8 0, i8* %14, align 1
  %640 = and i32 %639, 255
  %641 = tail call i32 @llvm.ctpop.i32(i32 %640)
  %642 = trunc i32 %641 to i8
  %643 = and i8 %642, 1
  %644 = xor i8 %643, 1
  store i8 %644, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %645 = icmp eq i32 %639, 0
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %30, align 1
  %647 = lshr i32 %639, 31
  %648 = trunc i32 %647 to i8
  store i8 %648, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %649 = icmp ne i8 %648, 0
  %.v184 = select i1 %649, i64 6, i64 23
  %650 = add i64 %637, %.v184
  store i64 %650, i64* %3, align 8
  br i1 %649, label %block_40d508, label %block_.L_40d519

block_40d508:                                     ; preds = %routine_idivl__ecx.exit4870
  %651 = add i64 %650, 6
  store i64 %651, i64* %3, align 8
  %652 = load i32, i32* %638, align 4
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RAX.i1862, align 8
  %654 = add i64 %634, -584
  %655 = add i64 %650, 12
  store i64 %655, i64* %3, align 8
  %656 = inttoptr i64 %654 to i32*
  store i32 %652, i32* %656, align 4
  %657 = load i64, i64* %3, align 8
  %658 = add i64 %657, 26
  store i64 %658, i64* %3, align 8
  br label %block_.L_40d52e

block_.L_40d519:                                  ; preds = %routine_idivl__ecx.exit4870
  %659 = add i64 %650, 7
  store i64 %659, i64* %3, align 8
  %660 = load i32, i32* %638, align 4
  %661 = sext i32 %660 to i64
  store i64 %661, i64* %RAX.i1862, align 8
  %662 = add nsw i64 %661, 4924192
  %663 = add i64 %650, 15
  store i64 %663, i64* %3, align 8
  %664 = inttoptr i64 %662 to i8*
  %665 = load i8, i8* %664, align 1
  %666 = zext i8 %665 to i64
  store i64 %666, i64* %RCX.i2028, align 8
  %667 = add i64 %634, -584
  %668 = zext i8 %665 to i32
  %669 = add i64 %650, 21
  store i64 %669, i64* %3, align 8
  %670 = inttoptr i64 %667 to i32*
  store i32 %668, i32* %670, align 4
  %.pre257 = load i64, i64* %3, align 8
  br label %block_.L_40d52e

block_.L_40d52e:                                  ; preds = %block_.L_40d519, %block_40d508
  %671 = phi i64 [ %.pre257, %block_.L_40d519 ], [ %658, %block_40d508 ]
  %672 = load i64, i64* %RBP.i, align 8
  %673 = add i64 %672, -584
  %674 = add i64 %671, 6
  store i64 %674, i64* %3, align 8
  %675 = inttoptr i64 %673 to i32*
  %676 = load i32, i32* %675, align 4
  %677 = zext i32 %676 to i64
  store i64 6, i64* %RCX.i2028, align 8
  %RDX.i4840 = getelementptr inbounds %union.anon, %union.anon* %611, i64 0, i32 0
  store i64 %677, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  %678 = and i32 %676, 255
  %679 = tail call i32 @llvm.ctpop.i32(i32 %678)
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  store i8 %682, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %683 = icmp eq i32 %676, 0
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %30, align 1
  %685 = lshr i32 %676, 31
  %686 = trunc i32 %685 to i8
  store i8 %686, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %687 = add i64 %672, -588
  %688 = add i64 %671, 25
  store i64 %688, i64* %3, align 8
  %689 = inttoptr i64 %687 to i32*
  store i32 1, i32* %689, align 4
  %690 = load i64, i64* %3, align 8
  %691 = load i32, i32* %EAX.i4969.pre-phi, align 8
  %692 = sext i32 %691 to i64
  %693 = lshr i64 %692, 32
  store i64 %693, i64* %607, align 8
  %694 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %695 = add i64 %690, 3
  store i64 %695, i64* %3, align 8
  %696 = zext i32 %691 to i64
  %697 = sext i32 %694 to i64
  %698 = shl nuw i64 %693, 32
  %699 = or i64 %698, %696
  %700 = sdiv i64 %699, %697
  %701 = shl i64 %700, 32
  %702 = ashr exact i64 %701, 32
  %703 = icmp eq i64 %700, %702
  br i1 %703, label %706, label %704

; <label>:704:                                    ; preds = %block_.L_40d52e
  %705 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %695, %struct.Memory* %630)
  %.pre258 = load i32, i32* %612, align 4
  %.pre259 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4829

; <label>:706:                                    ; preds = %block_.L_40d52e
  %707 = srem i64 %699, %697
  %708 = and i64 %700, 4294967295
  store i64 %708, i64* %RAX.i1862, align 8
  %709 = and i64 %707, 4294967295
  store i64 %709, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %710 = trunc i64 %707 to i32
  br label %routine_idivl__ecx.exit4829

routine_idivl__ecx.exit4829:                      ; preds = %706, %704
  %711 = phi i64 [ %.pre259, %704 ], [ %695, %706 ]
  %712 = phi i32 [ %.pre258, %704 ], [ %710, %706 ]
  %713 = phi %struct.Memory* [ %705, %704 ], [ %630, %706 ]
  %714 = load i64, i64* %RBP.i, align 8
  %715 = add i64 %714, -448
  %716 = add i64 %711, 6
  store i64 %716, i64* %3, align 8
  %717 = inttoptr i64 %715 to i32*
  store i32 %712, i32* %717, align 4
  %718 = load i64, i64* %RBP.i, align 8
  %719 = add i64 %718, -444
  %720 = load i64, i64* %3, align 8
  %721 = add i64 %720, 6
  store i64 %721, i64* %3, align 8
  %722 = inttoptr i64 %719 to i32*
  %723 = load i32, i32* %722, align 4
  %724 = add i32 %723, 15
  %725 = zext i32 %724 to i64
  store i64 %725, i64* %RDX.i4840, align 8
  %726 = icmp ugt i32 %723, -16
  %727 = zext i1 %726 to i8
  store i8 %727, i8* %14, align 1
  %728 = and i32 %724, 255
  %729 = tail call i32 @llvm.ctpop.i32(i32 %728)
  %730 = trunc i32 %729 to i8
  %731 = and i8 %730, 1
  %732 = xor i8 %731, 1
  store i8 %732, i8* %21, align 1
  %733 = xor i32 %724, %723
  %734 = lshr i32 %733, 4
  %735 = trunc i32 %734 to i8
  %736 = and i8 %735, 1
  store i8 %736, i8* %27, align 1
  %737 = icmp eq i32 %724, 0
  %738 = zext i1 %737 to i8
  store i8 %738, i8* %30, align 1
  %739 = lshr i32 %724, 31
  %740 = trunc i32 %739 to i8
  store i8 %740, i8* %33, align 1
  %741 = lshr i32 %723, 31
  %742 = xor i32 %739, %741
  %743 = add nuw nsw i32 %742, %739
  %744 = icmp eq i32 %743, 2
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %39, align 1
  %746 = add i64 %718, -452
  %747 = add i64 %720, 15
  store i64 %747, i64* %3, align 8
  %748 = inttoptr i64 %746 to i32*
  store i32 %724, i32* %748, align 4
  %749 = load i64, i64* %RBP.i, align 8
  %750 = add i64 %749, -452
  %751 = load i64, i64* %3, align 8
  %752 = add i64 %751, 6
  store i64 %752, i64* %3, align 8
  %753 = inttoptr i64 %750 to i32*
  %754 = load i32, i32* %753, align 4
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RDX.i4840, align 8
  %756 = add i64 %749, -592
  %757 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %758 = add i64 %751, 12
  store i64 %758, i64* %3, align 8
  %759 = inttoptr i64 %756 to i32*
  store i32 %757, i32* %759, align 4
  %760 = load i32, i32* %612, align 4
  %761 = zext i32 %760 to i64
  %762 = load i64, i64* %3, align 8
  store i64 %761, i64* %RCX.i2028, align 8
  %763 = load i64, i64* %RBP.i, align 8
  %764 = add i64 %763, -588
  %765 = add i64 %762, 8
  store i64 %765, i64* %3, align 8
  %766 = inttoptr i64 %764 to i32*
  %767 = load i32, i32* %766, align 4
  %768 = zext i32 %767 to i64
  store i64 %768, i64* %RDX.i4840, align 8
  %769 = add i64 %762, 10
  store i64 %769, i64* %3, align 8
  %770 = trunc i32 %760 to i5
  switch i5 %770, label %776 [
    i5 0, label %routine_shll__cl___edx.exit4803
    i5 1, label %771
  ]

; <label>:771:                                    ; preds = %routine_idivl__ecx.exit4829
  %772 = shl i32 %767, 1
  %773 = icmp slt i32 %767, 0
  %774 = icmp slt i32 %772, 0
  %775 = xor i1 %773, %774
  br label %785

; <label>:776:                                    ; preds = %routine_idivl__ecx.exit4829
  %777 = and i32 %760, 31
  %778 = zext i32 %777 to i64
  %779 = add nuw nsw i64 %778, 4294967295
  %780 = and i64 %779, 4294967295
  %781 = shl i64 %768, %780
  %782 = trunc i64 %781 to i32
  %783 = icmp slt i32 %782, 0
  %784 = shl i32 %782, 1
  br label %785

; <label>:785:                                    ; preds = %776, %771
  %786 = phi i1 [ %773, %771 ], [ %783, %776 ]
  %787 = phi i1 [ %775, %771 ], [ false, %776 ]
  %788 = phi i32 [ %772, %771 ], [ %784, %776 ]
  %789 = zext i32 %788 to i64
  store i64 %789, i64* %RDX.i4840, align 8
  %790 = zext i1 %786 to i8
  store i8 %790, i8* %14, align 1
  %791 = and i32 %788, 254
  %792 = tail call i32 @llvm.ctpop.i32(i32 %791)
  %793 = trunc i32 %792 to i8
  %794 = and i8 %793, 1
  %795 = xor i8 %794, 1
  store i8 %795, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %796 = icmp eq i32 %788, 0
  %797 = zext i1 %796 to i8
  store i8 %797, i8* %30, align 1
  %798 = lshr i32 %788, 31
  %799 = trunc i32 %798 to i8
  store i8 %799, i8* %33, align 1
  %800 = zext i1 %787 to i8
  store i8 %800, i8* %39, align 1
  br label %routine_shll__cl___edx.exit4803

routine_shll__cl___edx.exit4803:                  ; preds = %785, %routine_idivl__ecx.exit4829
  %801 = phi i32 [ %788, %785 ], [ %767, %routine_idivl__ecx.exit4829 ]
  %802 = zext i32 %801 to i64
  store i64 %802, i64* %RAX.i1862, align 8
  %803 = sext i32 %801 to i64
  %804 = lshr i64 %803, 32
  store i64 %804, i64* %607, align 8
  %805 = add i64 %763, -592
  %806 = add i64 %762, 19
  store i64 %806, i64* %3, align 8
  %807 = inttoptr i64 %805 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RSI.i2426, align 8
  %810 = add i64 %762, 21
  store i64 %810, i64* %3, align 8
  %811 = sext i32 %808 to i64
  %812 = shl nuw i64 %804, 32
  %813 = or i64 %812, %802
  %814 = sdiv i64 %813, %811
  %815 = shl i64 %814, 32
  %816 = ashr exact i64 %815, 32
  %817 = icmp eq i64 %814, %816
  br i1 %817, label %820, label %818

; <label>:818:                                    ; preds = %routine_shll__cl___edx.exit4803
  %819 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %810, %struct.Memory* %713)
  %.pre260 = load i64, i64* %RBP.i, align 8
  %.pre261 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %.pre262 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit4790

; <label>:820:                                    ; preds = %routine_shll__cl___edx.exit4803
  %821 = srem i64 %813, %811
  %822 = and i64 %814, 4294967295
  store i64 %822, i64* %RAX.i1862, align 8
  %823 = and i64 %821, 4294967295
  store i64 %823, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %824 = trunc i64 %814 to i32
  br label %routine_idivl__esi.exit4790

routine_idivl__esi.exit4790:                      ; preds = %820, %818
  %825 = phi i64 [ %.pre262, %818 ], [ %810, %820 ]
  %826 = phi i32 [ %.pre261, %818 ], [ %824, %820 ]
  %827 = phi i64 [ %.pre260, %818 ], [ %763, %820 ]
  %828 = phi %struct.Memory* [ %819, %818 ], [ %713, %820 ]
  %829 = add i64 %827, -52
  %830 = add i64 %825, 3
  store i64 %830, i64* %3, align 8
  %831 = inttoptr i64 %829 to i32*
  store i32 %826, i32* %831, align 4
  %832 = load i64, i64* %RBP.i, align 8
  %833 = add i64 %832, -560
  %834 = load i64, i64* %3, align 8
  %835 = add i64 %834, 7
  store i64 %835, i64* %3, align 8
  %836 = inttoptr i64 %833 to i32*
  %837 = load i32, i32* %836, align 4
  store i8 0, i8* %14, align 1
  %838 = and i32 %837, 255
  %839 = tail call i32 @llvm.ctpop.i32(i32 %838)
  %840 = trunc i32 %839 to i8
  %841 = and i8 %840, 1
  %842 = xor i8 %841, 1
  store i8 %842, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %843 = icmp eq i32 %837, 0
  %844 = zext i1 %843 to i8
  store i8 %844, i8* %30, align 1
  %845 = lshr i32 %837, 31
  %846 = trunc i32 %845 to i8
  store i8 %846, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %847 = icmp ne i8 %846, 0
  %.v185 = select i1 %847, i64 6, i64 27
  %848 = add i64 %835, %.v185
  store i64 %848, i64* %3, align 8
  br i1 %847, label %block_40d590, label %block_.L_40d5a5

block_40d590:                                     ; preds = %routine_idivl__esi.exit4790
  %849 = add i64 %832, -440
  %850 = add i64 %848, 7
  store i64 %850, i64* %3, align 8
  %851 = inttoptr i64 %849 to i64*
  %852 = load i64, i64* %851, align 8
  store i64 %852, i64* %RAX.i1862, align 8
  %853 = add i64 %852, 16
  %854 = add i64 %848, 10
  store i64 %854, i64* %3, align 8
  %855 = inttoptr i64 %853 to i32*
  %856 = load i32, i32* %855, align 4
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RCX.i2028, align 8
  %858 = add i64 %832, -596
  %859 = add i64 %848, 16
  store i64 %859, i64* %3, align 8
  %860 = inttoptr i64 %858 to i32*
  store i32 %856, i32* %860, align 4
  %861 = load i64, i64* %3, align 8
  %862 = add i64 %861, 26
  store i64 %862, i64* %3, align 8
  br label %block_.L_40d5ba

block_.L_40d5a5:                                  ; preds = %routine_idivl__esi.exit4790
  %863 = add i64 %848, 7
  store i64 %863, i64* %3, align 8
  %864 = load i32, i32* %836, align 4
  %865 = sext i32 %864 to i64
  store i64 %865, i64* %RAX.i1862, align 8
  %866 = add nsw i64 %865, 4924192
  %867 = add i64 %848, 15
  store i64 %867, i64* %3, align 8
  %868 = inttoptr i64 %866 to i8*
  %869 = load i8, i8* %868, align 1
  %870 = zext i8 %869 to i64
  store i64 %870, i64* %RCX.i2028, align 8
  %871 = add i64 %832, -596
  %872 = zext i8 %869 to i32
  %873 = add i64 %848, 21
  store i64 %873, i64* %3, align 8
  %874 = inttoptr i64 %871 to i32*
  store i32 %872, i32* %874, align 4
  %.pre263 = load i64, i64* %3, align 8
  br label %block_.L_40d5ba

block_.L_40d5ba:                                  ; preds = %block_.L_40d5a5, %block_40d590
  %875 = phi i64 [ %.pre263, %block_.L_40d5a5 ], [ %862, %block_40d590 ]
  %876 = load i64, i64* %RBP.i, align 8
  %877 = add i64 %876, -596
  %878 = add i64 %875, 6
  store i64 %878, i64* %3, align 8
  %879 = inttoptr i64 %877 to i32*
  %880 = load i32, i32* %879, align 4
  %881 = zext i32 %880 to i64
  store i64 6, i64* %RCX.i2028, align 8
  store i64 %881, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  %882 = and i32 %880, 255
  %883 = tail call i32 @llvm.ctpop.i32(i32 %882)
  %884 = trunc i32 %883 to i8
  %885 = and i8 %884, 1
  %886 = xor i8 %885, 1
  store i8 %886, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %887 = icmp eq i32 %880, 0
  %888 = zext i1 %887 to i8
  store i8 %888, i8* %30, align 1
  %889 = lshr i32 %880, 31
  %890 = trunc i32 %889 to i8
  store i8 %890, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %891 = sext i32 %880 to i64
  %892 = lshr i64 %891, 32
  store i64 %892, i64* %607, align 8
  %893 = add i64 %875, 17
  store i64 %893, i64* %3, align 8
  %894 = shl nuw i64 %892, 32
  %895 = or i64 %894, %881
  %896 = sdiv i64 %895, 6
  %897 = shl i64 %896, 32
  %898 = ashr exact i64 %897, 32
  %899 = icmp eq i64 %896, %898
  br i1 %899, label %902, label %900

; <label>:900:                                    ; preds = %block_.L_40d5ba
  %901 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %893, %struct.Memory* %828)
  %.pre264 = load i64, i64* %RBP.i, align 8
  %.pre265 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %.pre266 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4751

; <label>:902:                                    ; preds = %block_.L_40d5ba
  %903 = srem i64 %895, 6
  %904 = and i64 %896, 4294967295
  store i64 %904, i64* %RAX.i1862, align 8
  %905 = and i64 %903, 4294967295
  store i64 %905, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %906 = trunc i64 %896 to i32
  br label %routine_idivl__ecx.exit4751

routine_idivl__ecx.exit4751:                      ; preds = %902, %900
  %907 = phi i64 [ %.pre266, %900 ], [ %893, %902 ]
  %908 = phi i32 [ %.pre265, %900 ], [ %906, %902 ]
  %909 = phi i64 [ %.pre264, %900 ], [ %876, %902 ]
  %910 = phi %struct.Memory* [ %901, %900 ], [ %828, %902 ]
  %911 = add i64 %909, -456
  %912 = add i64 %907, 6
  store i64 %912, i64* %3, align 8
  %913 = inttoptr i64 %911 to i32*
  store i32 %908, i32* %913, align 4
  %914 = load i64, i64* %RBP.i, align 8
  %915 = add i64 %914, -560
  %916 = load i64, i64* %3, align 8
  %917 = add i64 %916, 7
  store i64 %917, i64* %3, align 8
  %918 = inttoptr i64 %915 to i32*
  %919 = load i32, i32* %918, align 4
  store i8 0, i8* %14, align 1
  %920 = and i32 %919, 255
  %921 = tail call i32 @llvm.ctpop.i32(i32 %920)
  %922 = trunc i32 %921 to i8
  %923 = and i8 %922, 1
  %924 = xor i8 %923, 1
  store i8 %924, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %925 = icmp eq i32 %919, 0
  %926 = zext i1 %925 to i8
  store i8 %926, i8* %30, align 1
  %927 = lshr i32 %919, 31
  %928 = trunc i32 %927 to i8
  store i8 %928, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %929 = icmp ne i8 %928, 0
  %.v186 = select i1 %929, i64 6, i64 27
  %930 = add i64 %917, %.v186
  store i64 %930, i64* %3, align 8
  br i1 %929, label %block_40d5de, label %block_.L_40d5f3

block_40d5de:                                     ; preds = %routine_idivl__ecx.exit4751
  %931 = add i64 %914, -440
  %932 = add i64 %930, 7
  store i64 %932, i64* %3, align 8
  %933 = inttoptr i64 %931 to i64*
  %934 = load i64, i64* %933, align 8
  store i64 %934, i64* %RAX.i1862, align 8
  %935 = add i64 %934, 16
  %936 = add i64 %930, 10
  store i64 %936, i64* %3, align 8
  %937 = inttoptr i64 %935 to i32*
  %938 = load i32, i32* %937, align 4
  %939 = zext i32 %938 to i64
  store i64 %939, i64* %RCX.i2028, align 8
  %940 = add i64 %914, -600
  %941 = add i64 %930, 16
  store i64 %941, i64* %3, align 8
  %942 = inttoptr i64 %940 to i32*
  store i32 %938, i32* %942, align 4
  %943 = load i64, i64* %3, align 8
  %944 = add i64 %943, 26
  store i64 %944, i64* %3, align 8
  br label %block_.L_40d608

block_.L_40d5f3:                                  ; preds = %routine_idivl__ecx.exit4751
  %945 = add i64 %930, 7
  store i64 %945, i64* %3, align 8
  %946 = load i32, i32* %918, align 4
  %947 = sext i32 %946 to i64
  store i64 %947, i64* %RAX.i1862, align 8
  %948 = add nsw i64 %947, 4924192
  %949 = add i64 %930, 15
  store i64 %949, i64* %3, align 8
  %950 = inttoptr i64 %948 to i8*
  %951 = load i8, i8* %950, align 1
  %952 = zext i8 %951 to i64
  store i64 %952, i64* %RCX.i2028, align 8
  %953 = add i64 %914, -600
  %954 = zext i8 %951 to i32
  %955 = add i64 %930, 21
  store i64 %955, i64* %3, align 8
  %956 = inttoptr i64 %953 to i32*
  store i32 %954, i32* %956, align 4
  %.pre267 = load i64, i64* %3, align 8
  br label %block_.L_40d608

block_.L_40d608:                                  ; preds = %block_.L_40d5f3, %block_40d5de
  %957 = phi i64 [ %.pre267, %block_.L_40d5f3 ], [ %944, %block_40d5de ]
  %958 = load i64, i64* %RBP.i, align 8
  %959 = add i64 %958, -600
  %960 = add i64 %957, 6
  store i64 %960, i64* %3, align 8
  %961 = inttoptr i64 %959 to i32*
  %962 = load i32, i32* %961, align 4
  %963 = zext i32 %962 to i64
  store i64 2, i64* %RCX.i2028, align 8
  store i64 6, i64* %RSI.i2426, align 8
  store i64 %963, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  %964 = and i32 %962, 255
  %965 = tail call i32 @llvm.ctpop.i32(i32 %964)
  %966 = trunc i32 %965 to i8
  %967 = and i8 %966, 1
  %968 = xor i8 %967, 1
  store i8 %968, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %969 = icmp eq i32 %962, 0
  %970 = zext i1 %969 to i8
  store i8 %970, i8* %30, align 1
  %971 = lshr i32 %962, 31
  %972 = trunc i32 %971 to i8
  store i8 %972, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %973 = add i64 %958, -604
  %974 = add i64 %957, 30
  store i64 %974, i64* %3, align 8
  %975 = inttoptr i64 %973 to i32*
  store i32 1, i32* %975, align 4
  %976 = load i64, i64* %3, align 8
  %977 = load i32, i32* %EAX.i4969.pre-phi, align 8
  %978 = sext i32 %977 to i64
  %979 = lshr i64 %978, 32
  store i64 %979, i64* %607, align 8
  %980 = load i32, i32* %ESI.i1753, align 4
  %981 = add i64 %976, 3
  store i64 %981, i64* %3, align 8
  %982 = zext i32 %977 to i64
  %983 = sext i32 %980 to i64
  %984 = shl nuw i64 %979, 32
  %985 = or i64 %984, %982
  %986 = sdiv i64 %985, %983
  %987 = shl i64 %986, 32
  %988 = ashr exact i64 %987, 32
  %989 = icmp eq i64 %986, %988
  br i1 %989, label %992, label %990

; <label>:990:                                    ; preds = %block_.L_40d608
  %991 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %981, %struct.Memory* %910)
  %.pre268 = load i32, i32* %612, align 4
  %.pre269 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit4705

; <label>:992:                                    ; preds = %block_.L_40d608
  %993 = srem i64 %985, %983
  %994 = and i64 %986, 4294967295
  store i64 %994, i64* %RAX.i1862, align 8
  %995 = and i64 %993, 4294967295
  store i64 %995, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %996 = trunc i64 %993 to i32
  br label %routine_idivl__esi.exit4705

routine_idivl__esi.exit4705:                      ; preds = %992, %990
  %997 = phi i64 [ %.pre269, %990 ], [ %981, %992 ]
  %998 = phi i32 [ %.pre268, %990 ], [ %996, %992 ]
  %999 = phi %struct.Memory* [ %991, %990 ], [ %910, %992 ]
  %1000 = load i64, i64* %RBP.i, align 8
  %1001 = add i64 %1000, -460
  %1002 = add i64 %997, 6
  store i64 %1002, i64* %3, align 8
  %1003 = inttoptr i64 %1001 to i32*
  store i32 %998, i32* %1003, align 4
  %1004 = load i64, i64* %RBP.i, align 8
  %1005 = add i64 %1004, -456
  %1006 = load i64, i64* %3, align 8
  %1007 = add i64 %1006, 6
  store i64 %1007, i64* %3, align 8
  %1008 = inttoptr i64 %1005 to i32*
  %1009 = load i32, i32* %1008, align 4
  %1010 = add i32 %1009, 15
  %1011 = zext i32 %1010 to i64
  store i64 %1011, i64* %RDX.i4840, align 8
  %1012 = icmp ugt i32 %1009, -16
  %1013 = zext i1 %1012 to i8
  store i8 %1013, i8* %14, align 1
  %1014 = and i32 %1010, 255
  %1015 = tail call i32 @llvm.ctpop.i32(i32 %1014)
  %1016 = trunc i32 %1015 to i8
  %1017 = and i8 %1016, 1
  %1018 = xor i8 %1017, 1
  store i8 %1018, i8* %21, align 1
  %1019 = xor i32 %1010, %1009
  %1020 = lshr i32 %1019, 4
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  store i8 %1022, i8* %27, align 1
  %1023 = icmp eq i32 %1010, 0
  %1024 = zext i1 %1023 to i8
  store i8 %1024, i8* %30, align 1
  %1025 = lshr i32 %1010, 31
  %1026 = trunc i32 %1025 to i8
  store i8 %1026, i8* %33, align 1
  %1027 = lshr i32 %1009, 31
  %1028 = xor i32 %1025, %1027
  %1029 = add nuw nsw i32 %1028, %1025
  %1030 = icmp eq i32 %1029, 2
  %1031 = zext i1 %1030 to i8
  store i8 %1031, i8* %39, align 1
  %1032 = add i64 %1004, -464
  %1033 = add i64 %1006, 15
  store i64 %1033, i64* %3, align 8
  %1034 = inttoptr i64 %1032 to i32*
  store i32 %1010, i32* %1034, align 4
  %1035 = load i64, i64* %RBP.i, align 8
  %1036 = add i64 %1035, -464
  %1037 = load i64, i64* %3, align 8
  %1038 = add i64 %1037, 6
  store i64 %1038, i64* %3, align 8
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039, align 4
  %1041 = zext i32 %1040 to i64
  store i64 %1041, i64* %RDX.i4840, align 8
  %1042 = add i64 %1035, -608
  %1043 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %1044 = add i64 %1037, 12
  store i64 %1044, i64* %3, align 8
  %1045 = inttoptr i64 %1042 to i32*
  store i32 %1043, i32* %1045, align 4
  %1046 = load i32, i32* %612, align 4
  %1047 = zext i32 %1046 to i64
  %1048 = load i64, i64* %3, align 8
  store i64 %1047, i64* %RCX.i2028, align 8
  %1049 = load i64, i64* %RBP.i, align 8
  %1050 = add i64 %1049, -604
  %1051 = add i64 %1048, 8
  store i64 %1051, i64* %3, align 8
  %1052 = inttoptr i64 %1050 to i32*
  %1053 = load i32, i32* %1052, align 4
  %1054 = zext i32 %1053 to i64
  store i64 %1054, i64* %RDX.i4840, align 8
  %1055 = add i64 %1048, 10
  store i64 %1055, i64* %3, align 8
  %1056 = trunc i32 %1046 to i5
  switch i5 %1056, label %1062 [
    i5 0, label %routine_shll__cl___edx.exit4679
    i5 1, label %1057
  ]

; <label>:1057:                                   ; preds = %routine_idivl__esi.exit4705
  %1058 = shl i32 %1053, 1
  %1059 = icmp slt i32 %1053, 0
  %1060 = icmp slt i32 %1058, 0
  %1061 = xor i1 %1059, %1060
  br label %1071

; <label>:1062:                                   ; preds = %routine_idivl__esi.exit4705
  %1063 = and i32 %1046, 31
  %1064 = zext i32 %1063 to i64
  %1065 = add nuw nsw i64 %1064, 4294967295
  %1066 = and i64 %1065, 4294967295
  %1067 = shl i64 %1054, %1066
  %1068 = trunc i64 %1067 to i32
  %1069 = icmp slt i32 %1068, 0
  %1070 = shl i32 %1068, 1
  br label %1071

; <label>:1071:                                   ; preds = %1062, %1057
  %1072 = phi i1 [ %1059, %1057 ], [ %1069, %1062 ]
  %1073 = phi i1 [ %1061, %1057 ], [ false, %1062 ]
  %1074 = phi i32 [ %1058, %1057 ], [ %1070, %1062 ]
  %1075 = zext i32 %1074 to i64
  store i64 %1075, i64* %RDX.i4840, align 8
  %1076 = zext i1 %1072 to i8
  store i8 %1076, i8* %14, align 1
  %1077 = and i32 %1074, 254
  %1078 = tail call i32 @llvm.ctpop.i32(i32 %1077)
  %1079 = trunc i32 %1078 to i8
  %1080 = and i8 %1079, 1
  %1081 = xor i8 %1080, 1
  store i8 %1081, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1082 = icmp eq i32 %1074, 0
  %1083 = zext i1 %1082 to i8
  store i8 %1083, i8* %30, align 1
  %1084 = lshr i32 %1074, 31
  %1085 = trunc i32 %1084 to i8
  store i8 %1085, i8* %33, align 1
  %1086 = zext i1 %1073 to i8
  store i8 %1086, i8* %39, align 1
  br label %routine_shll__cl___edx.exit4679

routine_shll__cl___edx.exit4679:                  ; preds = %1071, %routine_idivl__esi.exit4705
  %1087 = phi i32 [ %1074, %1071 ], [ %1053, %routine_idivl__esi.exit4705 ]
  %1088 = zext i32 %1087 to i64
  store i64 %1088, i64* %RAX.i1862, align 8
  %1089 = sext i32 %1087 to i64
  %1090 = lshr i64 %1089, 32
  store i64 %1090, i64* %607, align 8
  %1091 = add i64 %1049, -608
  %1092 = add i64 %1048, 19
  store i64 %1092, i64* %3, align 8
  %1093 = inttoptr i64 %1091 to i32*
  %1094 = load i32, i32* %1093, align 4
  %1095 = zext i32 %1094 to i64
  store i64 %1095, i64* %RSI.i2426, align 8
  %1096 = add i64 %1048, 21
  store i64 %1096, i64* %3, align 8
  %1097 = sext i32 %1094 to i64
  %1098 = shl nuw i64 %1090, 32
  %1099 = or i64 %1098, %1088
  %1100 = sdiv i64 %1099, %1097
  %1101 = shl i64 %1100, 32
  %1102 = ashr exact i64 %1101, 32
  %1103 = icmp eq i64 %1100, %1102
  br i1 %1103, label %1106, label %1104

; <label>:1104:                                   ; preds = %routine_shll__cl___edx.exit4679
  %1105 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1096, %struct.Memory* %999)
  %.pre270 = load i64, i64* %RBP.i, align 8
  %.pre271 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %.pre272 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit4666

; <label>:1106:                                   ; preds = %routine_shll__cl___edx.exit4679
  %1107 = srem i64 %1099, %1097
  %1108 = and i64 %1100, 4294967295
  store i64 %1108, i64* %RAX.i1862, align 8
  %1109 = and i64 %1107, 4294967295
  store i64 %1109, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1110 = trunc i64 %1100 to i32
  br label %routine_idivl__esi.exit4666

routine_idivl__esi.exit4666:                      ; preds = %1106, %1104
  %1111 = phi i64 [ %.pre272, %1104 ], [ %1096, %1106 ]
  %1112 = phi i32 [ %.pre271, %1104 ], [ %1110, %1106 ]
  %1113 = phi i64 [ %.pre270, %1104 ], [ %1049, %1106 ]
  %1114 = phi %struct.Memory* [ %1105, %1104 ], [ %999, %1106 ]
  %1115 = add i64 %1113, -404
  %1116 = add i64 %1111, 6
  store i64 %1116, i64* %3, align 8
  %1117 = inttoptr i64 %1115 to i32*
  store i32 %1112, i32* %1117, align 4
  %1118 = load i64, i64* %RBP.i, align 8
  %1119 = add i64 %1118, -16
  %1120 = load i64, i64* %3, align 8
  %1121 = add i64 %1120, 7
  store i64 %1121, i64* %3, align 8
  %1122 = inttoptr i64 %1119 to i32*
  store i32 0, i32* %1122, align 4
  %.pre273 = load i64, i64* %3, align 8
  br label %block_.L_40d66c

block_.L_40d66c:                                  ; preds = %block_.L_40d716, %routine_idivl__esi.exit4666
  %1123 = phi i64 [ %1498, %block_.L_40d716 ], [ %.pre273, %routine_idivl__esi.exit4666 ]
  %1124 = load i64, i64* %RBP.i, align 8
  %1125 = add i64 %1124, -16
  %1126 = add i64 %1123, 4
  store i64 %1126, i64* %3, align 8
  %1127 = inttoptr i64 %1125 to i32*
  %1128 = load i32, i32* %1127, align 4
  %1129 = add i32 %1128, -8
  %1130 = icmp ult i32 %1128, 8
  %1131 = zext i1 %1130 to i8
  store i8 %1131, i8* %14, align 1
  %1132 = and i32 %1129, 255
  %1133 = tail call i32 @llvm.ctpop.i32(i32 %1132)
  %1134 = trunc i32 %1133 to i8
  %1135 = and i8 %1134, 1
  %1136 = xor i8 %1135, 1
  store i8 %1136, i8* %21, align 1
  %1137 = xor i32 %1129, %1128
  %1138 = lshr i32 %1137, 4
  %1139 = trunc i32 %1138 to i8
  %1140 = and i8 %1139, 1
  store i8 %1140, i8* %27, align 1
  %1141 = icmp eq i32 %1129, 0
  %1142 = zext i1 %1141 to i8
  store i8 %1142, i8* %30, align 1
  %1143 = lshr i32 %1129, 31
  %1144 = trunc i32 %1143 to i8
  store i8 %1144, i8* %33, align 1
  %1145 = lshr i32 %1128, 31
  %1146 = xor i32 %1143, %1145
  %1147 = add nuw nsw i32 %1146, %1145
  %1148 = icmp eq i32 %1147, 2
  %1149 = zext i1 %1148 to i8
  store i8 %1149, i8* %39, align 1
  %1150 = icmp ne i8 %1144, 0
  %1151 = xor i1 %1150, %1148
  %.v378 = select i1 %1151, i64 10, i64 189
  %1152 = add i64 %1123, %.v378
  store i64 %1152, i64* %3, align 8
  br i1 %1151, label %block_40d676, label %block_.L_40d729

block_40d676:                                     ; preds = %block_.L_40d66c
  %1153 = add i64 %1124, -12
  %1154 = add i64 %1152, 7
  store i64 %1154, i64* %3, align 8
  %1155 = inttoptr i64 %1153 to i32*
  store i32 0, i32* %1155, align 4
  %.pre354 = load i64, i64* %3, align 8
  br label %block_.L_40d67d

block_.L_40d67d:                                  ; preds = %block_40d687, %block_40d676
  %1156 = phi i64 [ %1468, %block_40d687 ], [ %.pre354, %block_40d676 ]
  %1157 = load i64, i64* %RBP.i, align 8
  %1158 = add i64 %1157, -12
  %1159 = add i64 %1156, 4
  store i64 %1159, i64* %3, align 8
  %1160 = inttoptr i64 %1158 to i32*
  %1161 = load i32, i32* %1160, align 4
  %1162 = add i32 %1161, -8
  %1163 = icmp ult i32 %1161, 8
  %1164 = zext i1 %1163 to i8
  store i8 %1164, i8* %14, align 1
  %1165 = and i32 %1162, 255
  %1166 = tail call i32 @llvm.ctpop.i32(i32 %1165)
  %1167 = trunc i32 %1166 to i8
  %1168 = and i8 %1167, 1
  %1169 = xor i8 %1168, 1
  store i8 %1169, i8* %21, align 1
  %1170 = xor i32 %1162, %1161
  %1171 = lshr i32 %1170, 4
  %1172 = trunc i32 %1171 to i8
  %1173 = and i8 %1172, 1
  store i8 %1173, i8* %27, align 1
  %1174 = icmp eq i32 %1162, 0
  %1175 = zext i1 %1174 to i8
  store i8 %1175, i8* %30, align 1
  %1176 = lshr i32 %1162, 31
  %1177 = trunc i32 %1176 to i8
  store i8 %1177, i8* %33, align 1
  %1178 = lshr i32 %1161, 31
  %1179 = xor i32 %1176, %1178
  %1180 = add nuw nsw i32 %1179, %1178
  %1181 = icmp eq i32 %1180, 2
  %1182 = zext i1 %1181 to i8
  store i8 %1182, i8* %39, align 1
  %1183 = icmp ne i8 %1177, 0
  %1184 = xor i1 %1183, %1181
  %.v375 = select i1 %1184, i64 10, i64 153
  %1185 = add i64 %1156, %.v375
  store i64 %1185, i64* %3, align 8
  br i1 %1184, label %block_40d687, label %block_.L_40d716

block_40d687:                                     ; preds = %block_.L_40d67d
  %1186 = add i64 %1157, -400
  store i64 %1186, i64* %RAX.i1862, align 8
  %1187 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1188 = add i64 %1187, 12600
  store i64 %1188, i64* %RCX.i2028, align 8
  %1189 = icmp ugt i64 %1187, -12601
  %1190 = zext i1 %1189 to i8
  store i8 %1190, i8* %14, align 1
  %1191 = trunc i64 %1188 to i32
  %1192 = and i32 %1191, 255
  %1193 = tail call i32 @llvm.ctpop.i32(i32 %1192)
  %1194 = trunc i32 %1193 to i8
  %1195 = and i8 %1194, 1
  %1196 = xor i8 %1195, 1
  store i8 %1196, i8* %21, align 1
  %1197 = xor i64 %1187, 16
  %1198 = xor i64 %1197, %1188
  %1199 = lshr i64 %1198, 4
  %1200 = trunc i64 %1199 to i8
  %1201 = and i8 %1200, 1
  store i8 %1201, i8* %27, align 1
  %1202 = icmp eq i64 %1188, 0
  %1203 = zext i1 %1202 to i8
  store i8 %1203, i8* %30, align 1
  %1204 = lshr i64 %1188, 63
  %1205 = trunc i64 %1204 to i8
  store i8 %1205, i8* %33, align 1
  %1206 = lshr i64 %1187, 63
  %1207 = xor i64 %1204, %1206
  %1208 = add nuw nsw i64 %1207, %1204
  %1209 = icmp eq i64 %1208, 2
  %1210 = zext i1 %1209 to i8
  store i8 %1210, i8* %39, align 1
  %1211 = add i64 %1185, 26
  store i64 %1211, i64* %3, align 8
  %1212 = load i32, i32* %1160, align 4
  %1213 = sext i32 %1212 to i64
  %1214 = shl nsw i64 %1213, 5
  store i64 %1214, i64* %RDX.i4840, align 8
  %1215 = add i64 %1214, %1188
  store i64 %1215, i64* %RCX.i2028, align 8
  %1216 = icmp ult i64 %1215, %1188
  %1217 = icmp ult i64 %1215, %1214
  %1218 = or i1 %1216, %1217
  %1219 = zext i1 %1218 to i8
  store i8 %1219, i8* %14, align 1
  %1220 = trunc i64 %1215 to i32
  %1221 = and i32 %1220, 255
  %1222 = tail call i32 @llvm.ctpop.i32(i32 %1221)
  %1223 = trunc i32 %1222 to i8
  %1224 = and i8 %1223, 1
  %1225 = xor i8 %1224, 1
  store i8 %1225, i8* %21, align 1
  %1226 = xor i64 %1188, %1215
  %1227 = lshr i64 %1226, 4
  %1228 = trunc i64 %1227 to i8
  %1229 = and i8 %1228, 1
  store i8 %1229, i8* %27, align 1
  %1230 = icmp eq i64 %1215, 0
  %1231 = zext i1 %1230 to i8
  store i8 %1231, i8* %30, align 1
  %1232 = lshr i64 %1215, 63
  %1233 = trunc i64 %1232 to i8
  store i8 %1233, i8* %33, align 1
  %1234 = lshr i64 %1213, 58
  %1235 = and i64 %1234, 1
  %1236 = xor i64 %1232, %1204
  %1237 = xor i64 %1232, %1235
  %1238 = add nuw nsw i64 %1236, %1237
  %1239 = icmp eq i64 %1238, 2
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %39, align 1
  %1241 = load i64, i64* %RBP.i, align 8
  %1242 = add i64 %1241, -16
  %1243 = add i64 %1185, 37
  store i64 %1243, i64* %3, align 8
  %1244 = inttoptr i64 %1242 to i32*
  %1245 = load i32, i32* %1244, align 4
  %1246 = sext i32 %1245 to i64
  store i64 %1246, i64* %RDX.i4840, align 8
  %1247 = shl nsw i64 %1246, 1
  %1248 = add i64 %1247, %1215
  %1249 = add i64 %1185, 41
  store i64 %1249, i64* %3, align 8
  %1250 = inttoptr i64 %1248 to i16*
  %1251 = load i16, i16* %1250, align 2
  %1252 = zext i16 %1251 to i64
  store i64 %1252, i64* %RSI.i2426, align 8
  %1253 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1254 = add i64 %1253, 13112
  store i64 %1254, i64* %RCX.i2028, align 8
  %1255 = icmp ugt i64 %1253, -13113
  %1256 = zext i1 %1255 to i8
  store i8 %1256, i8* %14, align 1
  %1257 = trunc i64 %1254 to i32
  %1258 = and i32 %1257, 255
  %1259 = tail call i32 @llvm.ctpop.i32(i32 %1258)
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = xor i8 %1261, 1
  store i8 %1262, i8* %21, align 1
  %1263 = xor i64 %1253, 16
  %1264 = xor i64 %1263, %1254
  %1265 = lshr i64 %1264, 4
  %1266 = trunc i64 %1265 to i8
  %1267 = and i8 %1266, 1
  store i8 %1267, i8* %27, align 1
  %1268 = icmp eq i64 %1254, 0
  %1269 = zext i1 %1268 to i8
  store i8 %1269, i8* %30, align 1
  %1270 = lshr i64 %1254, 63
  %1271 = trunc i64 %1270 to i8
  store i8 %1271, i8* %33, align 1
  %1272 = lshr i64 %1253, 63
  %1273 = xor i64 %1270, %1272
  %1274 = add nuw nsw i64 %1273, %1270
  %1275 = icmp eq i64 %1274, 2
  %1276 = zext i1 %1275 to i8
  store i8 %1276, i8* %39, align 1
  %1277 = add i64 %1241, -12
  %1278 = add i64 %1185, 60
  store i64 %1278, i64* %3, align 8
  %1279 = inttoptr i64 %1277 to i32*
  %1280 = load i32, i32* %1279, align 4
  %1281 = sext i32 %1280 to i64
  %1282 = shl nsw i64 %1281, 6
  store i64 %1282, i64* %RDX.i4840, align 8
  %1283 = add i64 %1282, %1254
  store i64 %1283, i64* %RCX.i2028, align 8
  %1284 = icmp ult i64 %1283, %1254
  %1285 = icmp ult i64 %1283, %1282
  %1286 = or i1 %1284, %1285
  %1287 = zext i1 %1286 to i8
  store i8 %1287, i8* %14, align 1
  %1288 = trunc i64 %1283 to i32
  %1289 = and i32 %1288, 255
  %1290 = tail call i32 @llvm.ctpop.i32(i32 %1289)
  %1291 = trunc i32 %1290 to i8
  %1292 = and i8 %1291, 1
  %1293 = xor i8 %1292, 1
  store i8 %1293, i8* %21, align 1
  %1294 = xor i64 %1254, %1283
  %1295 = lshr i64 %1294, 4
  %1296 = trunc i64 %1295 to i8
  %1297 = and i8 %1296, 1
  store i8 %1297, i8* %27, align 1
  %1298 = icmp eq i64 %1283, 0
  %1299 = zext i1 %1298 to i8
  store i8 %1299, i8* %30, align 1
  %1300 = lshr i64 %1283, 63
  %1301 = trunc i64 %1300 to i8
  store i8 %1301, i8* %33, align 1
  %1302 = lshr i64 %1281, 57
  %1303 = and i64 %1302, 1
  %1304 = xor i64 %1300, %1270
  %1305 = xor i64 %1300, %1303
  %1306 = add nuw nsw i64 %1304, %1305
  %1307 = icmp eq i64 %1306, 2
  %1308 = zext i1 %1307 to i8
  store i8 %1308, i8* %39, align 1
  %1309 = load i64, i64* %RBP.i, align 8
  %1310 = add i64 %1309, -16
  %1311 = add i64 %1185, 71
  store i64 %1311, i64* %3, align 8
  %1312 = inttoptr i64 %1310 to i32*
  %1313 = load i32, i32* %1312, align 4
  %1314 = sext i32 %1313 to i64
  store i64 %1314, i64* %RDX.i4840, align 8
  %1315 = load i64, i64* %RSI.i2426, align 8
  %1316 = shl nsw i64 %1314, 2
  %1317 = add i64 %1283, %1316
  %1318 = add i64 %1185, 74
  store i64 %1318, i64* %3, align 8
  %1319 = trunc i64 %1315 to i32
  %1320 = inttoptr i64 %1317 to i32*
  %1321 = load i32, i32* %1320, align 4
  %1322 = add i32 %1321, %1319
  %1323 = zext i32 %1322 to i64
  store i64 %1323, i64* %RSI.i2426, align 8
  %1324 = add i64 %1185, 77
  store i64 %1324, i64* %3, align 8
  store i32 %1322, i32* %1320, align 4
  %1325 = load i64, i64* %3, align 8
  %1326 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1327 = add i64 %1326, 12600
  store i64 %1327, i64* %RCX.i2028, align 8
  %1328 = icmp ugt i64 %1326, -12601
  %1329 = zext i1 %1328 to i8
  store i8 %1329, i8* %14, align 1
  %1330 = trunc i64 %1327 to i32
  %1331 = and i32 %1330, 255
  %1332 = tail call i32 @llvm.ctpop.i32(i32 %1331)
  %1333 = trunc i32 %1332 to i8
  %1334 = and i8 %1333, 1
  %1335 = xor i8 %1334, 1
  store i8 %1335, i8* %21, align 1
  %1336 = xor i64 %1326, 16
  %1337 = xor i64 %1336, %1327
  %1338 = lshr i64 %1337, 4
  %1339 = trunc i64 %1338 to i8
  %1340 = and i8 %1339, 1
  store i8 %1340, i8* %27, align 1
  %1341 = icmp eq i64 %1327, 0
  %1342 = zext i1 %1341 to i8
  store i8 %1342, i8* %30, align 1
  %1343 = lshr i64 %1327, 63
  %1344 = trunc i64 %1343 to i8
  store i8 %1344, i8* %33, align 1
  %1345 = lshr i64 %1326, 63
  %1346 = xor i64 %1343, %1345
  %1347 = add nuw nsw i64 %1346, %1343
  %1348 = icmp eq i64 %1347, 2
  %1349 = zext i1 %1348 to i8
  store i8 %1349, i8* %39, align 1
  %1350 = load i64, i64* %RBP.i, align 8
  %1351 = add i64 %1350, -12
  %1352 = add i64 %1325, 19
  store i64 %1352, i64* %3, align 8
  %1353 = inttoptr i64 %1351 to i32*
  %1354 = load i32, i32* %1353, align 4
  %1355 = sext i32 %1354 to i64
  %1356 = shl nsw i64 %1355, 5
  store i64 %1356, i64* %RDX.i4840, align 8
  %1357 = add i64 %1356, %1327
  store i64 %1357, i64* %RCX.i2028, align 8
  %1358 = icmp ult i64 %1357, %1327
  %1359 = icmp ult i64 %1357, %1356
  %1360 = or i1 %1358, %1359
  %1361 = zext i1 %1360 to i8
  store i8 %1361, i8* %14, align 1
  %1362 = trunc i64 %1357 to i32
  %1363 = and i32 %1362, 255
  %1364 = tail call i32 @llvm.ctpop.i32(i32 %1363)
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  store i8 %1367, i8* %21, align 1
  %1368 = xor i64 %1327, %1357
  %1369 = lshr i64 %1368, 4
  %1370 = trunc i64 %1369 to i8
  %1371 = and i8 %1370, 1
  store i8 %1371, i8* %27, align 1
  %1372 = icmp eq i64 %1357, 0
  %1373 = zext i1 %1372 to i8
  store i8 %1373, i8* %30, align 1
  %1374 = lshr i64 %1357, 63
  %1375 = trunc i64 %1374 to i8
  store i8 %1375, i8* %33, align 1
  %1376 = lshr i64 %1355, 58
  %1377 = and i64 %1376, 1
  %1378 = xor i64 %1374, %1343
  %1379 = xor i64 %1374, %1377
  %1380 = add nuw nsw i64 %1378, %1379
  %1381 = icmp eq i64 %1380, 2
  %1382 = zext i1 %1381 to i8
  store i8 %1382, i8* %39, align 1
  %1383 = add i64 %1350, -16
  %1384 = add i64 %1325, 30
  store i64 %1384, i64* %3, align 8
  %1385 = inttoptr i64 %1383 to i32*
  %1386 = load i32, i32* %1385, align 4
  %1387 = sext i32 %1386 to i64
  store i64 %1387, i64* %RDX.i4840, align 8
  %1388 = shl nsw i64 %1387, 1
  %1389 = add i64 %1388, %1357
  %1390 = add i64 %1325, 34
  store i64 %1390, i64* %3, align 8
  %1391 = inttoptr i64 %1389 to i16*
  %1392 = load i16, i16* %1391, align 2
  %1393 = zext i16 %1392 to i64
  store i64 %1393, i64* %RSI.i2426, align 8
  %1394 = add i64 %1325, 38
  store i64 %1394, i64* %3, align 8
  %1395 = load i32, i32* %1353, align 4
  %1396 = sext i32 %1395 to i64
  %1397 = shl nsw i64 %1396, 5
  store i64 %1397, i64* %RCX.i2028, align 8
  %1398 = load i64, i64* %RAX.i1862, align 8
  %1399 = add i64 %1397, %1398
  store i64 %1399, i64* %RAX.i1862, align 8
  %1400 = icmp ult i64 %1399, %1398
  %1401 = icmp ult i64 %1399, %1397
  %1402 = or i1 %1400, %1401
  %1403 = zext i1 %1402 to i8
  store i8 %1403, i8* %14, align 1
  %1404 = trunc i64 %1399 to i32
  %1405 = and i32 %1404, 255
  %1406 = tail call i32 @llvm.ctpop.i32(i32 %1405)
  %1407 = trunc i32 %1406 to i8
  %1408 = and i8 %1407, 1
  %1409 = xor i8 %1408, 1
  store i8 %1409, i8* %21, align 1
  %1410 = xor i64 %1398, %1399
  %1411 = lshr i64 %1410, 4
  %1412 = trunc i64 %1411 to i8
  %1413 = and i8 %1412, 1
  store i8 %1413, i8* %27, align 1
  %1414 = icmp eq i64 %1399, 0
  %1415 = zext i1 %1414 to i8
  store i8 %1415, i8* %30, align 1
  %1416 = lshr i64 %1399, 63
  %1417 = trunc i64 %1416 to i8
  store i8 %1417, i8* %33, align 1
  %1418 = lshr i64 %1398, 63
  %1419 = lshr i64 %1396, 58
  %1420 = and i64 %1419, 1
  %1421 = xor i64 %1416, %1418
  %1422 = xor i64 %1416, %1420
  %1423 = add nuw nsw i64 %1421, %1422
  %1424 = icmp eq i64 %1423, 2
  %1425 = zext i1 %1424 to i8
  store i8 %1425, i8* %39, align 1
  %1426 = load i64, i64* %RBP.i, align 8
  %1427 = add i64 %1426, -16
  %1428 = add i64 %1325, 49
  store i64 %1428, i64* %3, align 8
  %1429 = inttoptr i64 %1427 to i32*
  %1430 = load i32, i32* %1429, align 4
  %1431 = sext i32 %1430 to i64
  store i64 %1431, i64* %RCX.i2028, align 8
  %1432 = shl nsw i64 %1431, 2
  %1433 = add i64 %1432, %1399
  %1434 = zext i16 %1392 to i32
  %1435 = add i64 %1325, 52
  store i64 %1435, i64* %3, align 8
  %1436 = inttoptr i64 %1433 to i32*
  store i32 %1434, i32* %1436, align 4
  %1437 = load i64, i64* %RBP.i, align 8
  %1438 = add i64 %1437, -12
  %1439 = load i64, i64* %3, align 8
  %1440 = add i64 %1439, 3
  store i64 %1440, i64* %3, align 8
  %1441 = inttoptr i64 %1438 to i32*
  %1442 = load i32, i32* %1441, align 4
  %1443 = add i32 %1442, 1
  %1444 = zext i32 %1443 to i64
  store i64 %1444, i64* %RAX.i1862, align 8
  %1445 = icmp eq i32 %1442, -1
  %1446 = icmp eq i32 %1443, 0
  %1447 = or i1 %1445, %1446
  %1448 = zext i1 %1447 to i8
  store i8 %1448, i8* %14, align 1
  %1449 = and i32 %1443, 255
  %1450 = tail call i32 @llvm.ctpop.i32(i32 %1449)
  %1451 = trunc i32 %1450 to i8
  %1452 = and i8 %1451, 1
  %1453 = xor i8 %1452, 1
  store i8 %1453, i8* %21, align 1
  %1454 = xor i32 %1443, %1442
  %1455 = lshr i32 %1454, 4
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  store i8 %1457, i8* %27, align 1
  %1458 = zext i1 %1446 to i8
  store i8 %1458, i8* %30, align 1
  %1459 = lshr i32 %1443, 31
  %1460 = trunc i32 %1459 to i8
  store i8 %1460, i8* %33, align 1
  %1461 = lshr i32 %1442, 31
  %1462 = xor i32 %1459, %1461
  %1463 = add nuw nsw i32 %1462, %1459
  %1464 = icmp eq i32 %1463, 2
  %1465 = zext i1 %1464 to i8
  store i8 %1465, i8* %39, align 1
  %1466 = add i64 %1439, 9
  store i64 %1466, i64* %3, align 8
  store i32 %1443, i32* %1441, align 4
  %1467 = load i64, i64* %3, align 8
  %1468 = add i64 %1467, -148
  store i64 %1468, i64* %3, align 8
  br label %block_.L_40d67d

block_.L_40d716:                                  ; preds = %block_.L_40d67d
  %1469 = add i64 %1157, -16
  %1470 = add i64 %1185, 8
  store i64 %1470, i64* %3, align 8
  %1471 = inttoptr i64 %1469 to i32*
  %1472 = load i32, i32* %1471, align 4
  %1473 = add i32 %1472, 1
  %1474 = zext i32 %1473 to i64
  store i64 %1474, i64* %RAX.i1862, align 8
  %1475 = icmp eq i32 %1472, -1
  %1476 = icmp eq i32 %1473, 0
  %1477 = or i1 %1475, %1476
  %1478 = zext i1 %1477 to i8
  store i8 %1478, i8* %14, align 1
  %1479 = and i32 %1473, 255
  %1480 = tail call i32 @llvm.ctpop.i32(i32 %1479)
  %1481 = trunc i32 %1480 to i8
  %1482 = and i8 %1481, 1
  %1483 = xor i8 %1482, 1
  store i8 %1483, i8* %21, align 1
  %1484 = xor i32 %1473, %1472
  %1485 = lshr i32 %1484, 4
  %1486 = trunc i32 %1485 to i8
  %1487 = and i8 %1486, 1
  store i8 %1487, i8* %27, align 1
  %1488 = zext i1 %1476 to i8
  store i8 %1488, i8* %30, align 1
  %1489 = lshr i32 %1473, 31
  %1490 = trunc i32 %1489 to i8
  store i8 %1490, i8* %33, align 1
  %1491 = lshr i32 %1472, 31
  %1492 = xor i32 %1489, %1491
  %1493 = add nuw nsw i32 %1492, %1489
  %1494 = icmp eq i32 %1493, 2
  %1495 = zext i1 %1494 to i8
  store i8 %1495, i8* %39, align 1
  %1496 = add i64 %1185, 14
  store i64 %1496, i64* %3, align 8
  store i32 %1473, i32* %1471, align 4
  %1497 = load i64, i64* %3, align 8
  %1498 = add i64 %1497, -184
  store i64 %1498, i64* %3, align 8
  br label %block_.L_40d66c

block_.L_40d729:                                  ; preds = %block_.L_40d66c
  %1499 = add i64 %1124, -32
  %1500 = add i64 %1152, 7
  store i64 %1500, i64* %3, align 8
  %1501 = inttoptr i64 %1499 to i32*
  store i32 0, i32* %1501, align 4
  %.pre274 = load i64, i64* %3, align 8
  br label %block_.L_40d730

block_.L_40d730:                                  ; preds = %block_.L_40dabd, %block_.L_40d729
  %1502 = phi i64 [ %3594, %block_.L_40dabd ], [ %.pre274, %block_.L_40d729 ]
  %1503 = load i64, i64* %RBP.i, align 8
  %1504 = add i64 %1503, -32
  %1505 = add i64 %1502, 4
  store i64 %1505, i64* %3, align 8
  %1506 = inttoptr i64 %1504 to i32*
  %1507 = load i32, i32* %1506, align 4
  %1508 = add i32 %1507, -4
  %1509 = icmp ult i32 %1507, 4
  %1510 = zext i1 %1509 to i8
  store i8 %1510, i8* %14, align 1
  %1511 = and i32 %1508, 255
  %1512 = tail call i32 @llvm.ctpop.i32(i32 %1511)
  %1513 = trunc i32 %1512 to i8
  %1514 = and i8 %1513, 1
  %1515 = xor i8 %1514, 1
  store i8 %1515, i8* %21, align 1
  %1516 = xor i32 %1508, %1507
  %1517 = lshr i32 %1516, 4
  %1518 = trunc i32 %1517 to i8
  %1519 = and i8 %1518, 1
  store i8 %1519, i8* %27, align 1
  %1520 = icmp eq i32 %1508, 0
  %1521 = zext i1 %1520 to i8
  store i8 %1521, i8* %30, align 1
  %1522 = lshr i32 %1508, 31
  %1523 = trunc i32 %1522 to i8
  store i8 %1523, i8* %33, align 1
  %1524 = lshr i32 %1507, 31
  %1525 = xor i32 %1522, %1524
  %1526 = add nuw nsw i32 %1525, %1524
  %1527 = icmp eq i32 %1526, 2
  %1528 = zext i1 %1527 to i8
  store i8 %1528, i8* %39, align 1
  %1529 = icmp ne i8 %1523, 0
  %1530 = xor i1 %1529, %1527
  %.demorgan = or i1 %1520, %1530
  %.v379 = select i1 %.demorgan, i64 10, i64 928
  %1531 = add i64 %1502, %.v379
  store i64 %1531, i64* %3, align 8
  br i1 %.demorgan, label %block_40d73a, label %block_.L_40dad0

block_40d73a:                                     ; preds = %block_.L_40d730
  %1532 = add i64 %1503, -36
  %1533 = add i64 %1531, 7
  store i64 %1533, i64* %3, align 8
  %1534 = inttoptr i64 %1532 to i32*
  store i32 0, i32* %1534, align 4
  %.pre275 = load i64, i64* %3, align 8
  br label %block_.L_40d741

block_.L_40d741:                                  ; preds = %block_.L_40daaa, %block_40d73a
  %1535 = phi i64 [ %3565, %block_.L_40daaa ], [ %.pre275, %block_40d73a ]
  %1536 = load i64, i64* %RBP.i, align 8
  %1537 = add i64 %1536, -36
  %1538 = add i64 %1535, 4
  store i64 %1538, i64* %3, align 8
  %1539 = inttoptr i64 %1537 to i32*
  %1540 = load i32, i32* %1539, align 4
  %1541 = add i32 %1540, -4
  %1542 = icmp ult i32 %1540, 4
  %1543 = zext i1 %1542 to i8
  store i8 %1543, i8* %14, align 1
  %1544 = and i32 %1541, 255
  %1545 = tail call i32 @llvm.ctpop.i32(i32 %1544)
  %1546 = trunc i32 %1545 to i8
  %1547 = and i8 %1546, 1
  %1548 = xor i8 %1547, 1
  store i8 %1548, i8* %21, align 1
  %1549 = xor i32 %1541, %1540
  %1550 = lshr i32 %1549, 4
  %1551 = trunc i32 %1550 to i8
  %1552 = and i8 %1551, 1
  store i8 %1552, i8* %27, align 1
  %1553 = icmp eq i32 %1541, 0
  %1554 = zext i1 %1553 to i8
  store i8 %1554, i8* %30, align 1
  %1555 = lshr i32 %1541, 31
  %1556 = trunc i32 %1555 to i8
  store i8 %1556, i8* %33, align 1
  %1557 = lshr i32 %1540, 31
  %1558 = xor i32 %1555, %1557
  %1559 = add nuw nsw i32 %1558, %1557
  %1560 = icmp eq i32 %1559, 2
  %1561 = zext i1 %1560 to i8
  store i8 %1561, i8* %39, align 1
  %1562 = icmp ne i8 %1556, 0
  %1563 = xor i1 %1562, %1560
  %.demorgan357 = or i1 %1553, %1563
  %.v359 = select i1 %.demorgan357, i64 10, i64 892
  %1564 = add i64 %1535, %.v359
  store i64 %1564, i64* %3, align 8
  br i1 %.demorgan357, label %block_40d74b, label %block_.L_40dabd

block_40d74b:                                     ; preds = %block_.L_40d741
  %1565 = add i64 %1536, -16
  %1566 = add i64 %1564, 7
  store i64 %1566, i64* %3, align 8
  %1567 = inttoptr i64 %1565 to i32*
  store i32 0, i32* %1567, align 4
  %.pre276 = load i64, i64* %3, align 8
  br label %block_.L_40d752

block_.L_40d752:                                  ; preds = %block_.L_40d837, %block_40d74b
  %1568 = phi i64 [ %2470, %block_.L_40d837 ], [ %.pre276, %block_40d74b ]
  %1569 = load i64, i64* %RBP.i, align 8
  %1570 = add i64 %1569, -16
  %1571 = add i64 %1568, 4
  store i64 %1571, i64* %3, align 8
  %1572 = inttoptr i64 %1570 to i32*
  %1573 = load i32, i32* %1572, align 4
  %1574 = add i32 %1573, -4
  %1575 = icmp ult i32 %1573, 4
  %1576 = zext i1 %1575 to i8
  store i8 %1576, i8* %14, align 1
  %1577 = and i32 %1574, 255
  %1578 = tail call i32 @llvm.ctpop.i32(i32 %1577)
  %1579 = trunc i32 %1578 to i8
  %1580 = and i8 %1579, 1
  %1581 = xor i8 %1580, 1
  store i8 %1581, i8* %21, align 1
  %1582 = xor i32 %1574, %1573
  %1583 = lshr i32 %1582, 4
  %1584 = trunc i32 %1583 to i8
  %1585 = and i8 %1584, 1
  store i8 %1585, i8* %27, align 1
  %1586 = icmp eq i32 %1574, 0
  %1587 = zext i1 %1586 to i8
  store i8 %1587, i8* %30, align 1
  %1588 = lshr i32 %1574, 31
  %1589 = trunc i32 %1588 to i8
  store i8 %1589, i8* %33, align 1
  %1590 = lshr i32 %1573, 31
  %1591 = xor i32 %1588, %1590
  %1592 = add nuw nsw i32 %1591, %1590
  %1593 = icmp eq i32 %1592, 2
  %1594 = zext i1 %1593 to i8
  store i8 %1594, i8* %39, align 1
  %1595 = icmp ne i8 %1589, 0
  %1596 = xor i1 %1595, %1593
  %.v421 = select i1 %1596, i64 10, i64 422
  %1597 = add i64 %1568, %.v421
  store i64 %1597, i64* %3, align 8
  br i1 %1596, label %block_40d75c, label %block_.L_40d8f8

block_40d75c:                                     ; preds = %block_.L_40d752
  %1598 = add i64 %1569, -32
  %1599 = add i64 %1597, 3
  store i64 %1599, i64* %3, align 8
  %1600 = inttoptr i64 %1598 to i32*
  %1601 = load i32, i32* %1600, align 4
  %1602 = zext i32 %1601 to i64
  store i64 %1602, i64* %RAX.i1862, align 8
  %1603 = add i64 %1597, 6
  store i64 %1603, i64* %3, align 8
  %1604 = load i32, i32* %1572, align 4
  %1605 = add i32 %1604, %1601
  %1606 = zext i32 %1605 to i64
  store i64 %1606, i64* %RAX.i1862, align 8
  %1607 = icmp ult i32 %1605, %1601
  %1608 = icmp ult i32 %1605, %1604
  %1609 = or i1 %1607, %1608
  %1610 = zext i1 %1609 to i8
  store i8 %1610, i8* %14, align 1
  %1611 = and i32 %1605, 255
  %1612 = tail call i32 @llvm.ctpop.i32(i32 %1611)
  %1613 = trunc i32 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = xor i8 %1614, 1
  store i8 %1615, i8* %21, align 1
  %1616 = xor i32 %1604, %1601
  %1617 = xor i32 %1616, %1605
  %1618 = lshr i32 %1617, 4
  %1619 = trunc i32 %1618 to i8
  %1620 = and i8 %1619, 1
  store i8 %1620, i8* %27, align 1
  %1621 = icmp eq i32 %1605, 0
  %1622 = zext i1 %1621 to i8
  store i8 %1622, i8* %30, align 1
  %1623 = lshr i32 %1605, 31
  %1624 = trunc i32 %1623 to i8
  store i8 %1624, i8* %33, align 1
  %1625 = lshr i32 %1601, 31
  %1626 = lshr i32 %1604, 31
  %1627 = xor i32 %1623, %1625
  %1628 = xor i32 %1623, %1626
  %1629 = add nuw nsw i32 %1627, %1628
  %1630 = icmp eq i32 %1629, 2
  %1631 = zext i1 %1630 to i8
  store i8 %1631, i8* %39, align 1
  %1632 = add i64 %1569, -44
  %1633 = add i64 %1597, 9
  store i64 %1633, i64* %3, align 8
  %1634 = inttoptr i64 %1632 to i32*
  store i32 %1605, i32* %1634, align 4
  %1635 = load i64, i64* %RBP.i, align 8
  %1636 = add i64 %1635, -12
  %1637 = load i64, i64* %3, align 8
  %1638 = add i64 %1637, 7
  store i64 %1638, i64* %3, align 8
  %1639 = inttoptr i64 %1636 to i32*
  store i32 0, i32* %1639, align 4
  %.pre279 = load i64, i64* %3, align 8
  br label %block_.L_40d76c

block_.L_40d76c:                                  ; preds = %block_40d776, %block_40d75c
  %1640 = phi i64 [ %2094, %block_40d776 ], [ %.pre279, %block_40d75c ]
  %1641 = load i64, i64* %RBP.i, align 8
  %1642 = add i64 %1641, -12
  %1643 = add i64 %1640, 4
  store i64 %1643, i64* %3, align 8
  %1644 = inttoptr i64 %1642 to i32*
  %1645 = load i32, i32* %1644, align 4
  %1646 = add i32 %1645, -2
  %1647 = icmp ult i32 %1645, 2
  %1648 = zext i1 %1647 to i8
  store i8 %1648, i8* %14, align 1
  %1649 = and i32 %1646, 255
  %1650 = tail call i32 @llvm.ctpop.i32(i32 %1649)
  %1651 = trunc i32 %1650 to i8
  %1652 = and i8 %1651, 1
  %1653 = xor i8 %1652, 1
  store i8 %1653, i8* %21, align 1
  %1654 = xor i32 %1646, %1645
  %1655 = lshr i32 %1654, 4
  %1656 = trunc i32 %1655 to i8
  %1657 = and i8 %1656, 1
  store i8 %1657, i8* %27, align 1
  %1658 = icmp eq i32 %1646, 0
  %1659 = zext i1 %1658 to i8
  store i8 %1659, i8* %30, align 1
  %1660 = lshr i32 %1646, 31
  %1661 = trunc i32 %1660 to i8
  store i8 %1661, i8* %33, align 1
  %1662 = lshr i32 %1645, 31
  %1663 = xor i32 %1660, %1662
  %1664 = add nuw nsw i32 %1663, %1662
  %1665 = icmp eq i32 %1664, 2
  %1666 = zext i1 %1665 to i8
  store i8 %1666, i8* %39, align 1
  %1667 = icmp ne i8 %1661, 0
  %1668 = xor i1 %1667, %1665
  %.v423 = select i1 %1668, i64 10, i64 203
  %1669 = add i64 %1640, %.v423
  store i64 %1669, i64* %3, align 8
  br i1 %1668, label %block_40d776, label %block_.L_40d837

block_40d776:                                     ; preds = %block_.L_40d76c
  store i64 3, i64* %RAX.i1862, align 8
  %1670 = add i64 %1669, 8
  store i64 %1670, i64* %3, align 8
  %1671 = load i32, i32* %1644, align 4
  %1672 = sub i32 3, %1671
  %1673 = zext i32 %1672 to i64
  store i64 %1673, i64* %RAX.i1862, align 8
  %1674 = add i64 %1641, -20
  %1675 = add i64 %1669, 11
  store i64 %1675, i64* %3, align 8
  %1676 = inttoptr i64 %1674 to i32*
  store i32 %1672, i32* %1676, align 4
  %1677 = load i64, i64* %3, align 8
  %1678 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1679 = add i64 %1678, 13112
  store i64 %1679, i64* %RCX.i2028, align 8
  %1680 = icmp ugt i64 %1678, -13113
  %1681 = zext i1 %1680 to i8
  store i8 %1681, i8* %14, align 1
  %1682 = trunc i64 %1679 to i32
  %1683 = and i32 %1682, 255
  %1684 = tail call i32 @llvm.ctpop.i32(i32 %1683)
  %1685 = trunc i32 %1684 to i8
  %1686 = and i8 %1685, 1
  %1687 = xor i8 %1686, 1
  store i8 %1687, i8* %21, align 1
  %1688 = xor i64 %1678, 16
  %1689 = xor i64 %1688, %1679
  %1690 = lshr i64 %1689, 4
  %1691 = trunc i64 %1690 to i8
  %1692 = and i8 %1691, 1
  store i8 %1692, i8* %27, align 1
  %1693 = icmp eq i64 %1679, 0
  %1694 = zext i1 %1693 to i8
  store i8 %1694, i8* %30, align 1
  %1695 = lshr i64 %1679, 63
  %1696 = trunc i64 %1695 to i8
  store i8 %1696, i8* %33, align 1
  %1697 = lshr i64 %1678, 63
  %1698 = xor i64 %1695, %1697
  %1699 = add nuw nsw i64 %1698, %1695
  %1700 = icmp eq i64 %1699, 2
  %1701 = zext i1 %1700 to i8
  store i8 %1701, i8* %39, align 1
  %1702 = load i64, i64* %RBP.i, align 8
  %1703 = add i64 %1702, -12
  %1704 = add i64 %1677, 18
  store i64 %1704, i64* %3, align 8
  %1705 = inttoptr i64 %1703 to i32*
  %1706 = load i32, i32* %1705, align 4
  %1707 = zext i32 %1706 to i64
  store i64 %1707, i64* %RAX.i1862, align 8
  %1708 = add i64 %1702, -36
  %1709 = add i64 %1677, 21
  store i64 %1709, i64* %3, align 8
  %1710 = inttoptr i64 %1708 to i32*
  %1711 = load i32, i32* %1710, align 4
  %1712 = add i32 %1711, %1706
  %1713 = zext i32 %1712 to i64
  store i64 %1713, i64* %RAX.i1862, align 8
  %1714 = sext i32 %1712 to i64
  %1715 = shl nsw i64 %1714, 6
  store i64 %1715, i64* %RDX.i4840, align 8
  %1716 = load i64, i64* %RCX.i2028, align 8
  %1717 = add i64 %1715, %1716
  store i64 %1717, i64* %RCX.i2028, align 8
  %1718 = icmp ult i64 %1717, %1716
  %1719 = icmp ult i64 %1717, %1715
  %1720 = or i1 %1718, %1719
  %1721 = zext i1 %1720 to i8
  store i8 %1721, i8* %14, align 1
  %1722 = trunc i64 %1717 to i32
  %1723 = and i32 %1722, 255
  %1724 = tail call i32 @llvm.ctpop.i32(i32 %1723)
  %1725 = trunc i32 %1724 to i8
  %1726 = and i8 %1725, 1
  %1727 = xor i8 %1726, 1
  store i8 %1727, i8* %21, align 1
  %1728 = xor i64 %1716, %1717
  %1729 = lshr i64 %1728, 4
  %1730 = trunc i64 %1729 to i8
  %1731 = and i8 %1730, 1
  store i8 %1731, i8* %27, align 1
  %1732 = icmp eq i64 %1717, 0
  %1733 = zext i1 %1732 to i8
  store i8 %1733, i8* %30, align 1
  %1734 = lshr i64 %1717, 63
  %1735 = trunc i64 %1734 to i8
  store i8 %1735, i8* %33, align 1
  %1736 = lshr i64 %1716, 63
  %1737 = lshr i64 %1714, 57
  %1738 = and i64 %1737, 1
  %1739 = xor i64 %1734, %1736
  %1740 = xor i64 %1734, %1738
  %1741 = add nuw nsw i64 %1739, %1740
  %1742 = icmp eq i64 %1741, 2
  %1743 = zext i1 %1742 to i8
  store i8 %1743, i8* %39, align 1
  %1744 = load i64, i64* %RBP.i, align 8
  %1745 = add i64 %1744, -44
  %1746 = add i64 %1677, 35
  store i64 %1746, i64* %3, align 8
  %1747 = inttoptr i64 %1745 to i32*
  %1748 = load i32, i32* %1747, align 4
  %1749 = sext i32 %1748 to i64
  store i64 %1749, i64* %RDX.i4840, align 8
  %1750 = shl nsw i64 %1749, 2
  %1751 = add i64 %1750, %1717
  %1752 = add i64 %1677, 38
  store i64 %1752, i64* %3, align 8
  %1753 = inttoptr i64 %1751 to i32*
  %1754 = load i32, i32* %1753, align 4
  %1755 = zext i32 %1754 to i64
  store i64 %1755, i64* %RAX.i1862, align 8
  %1756 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1757 = add i64 %1756, 13112
  store i64 %1757, i64* %RCX.i2028, align 8
  %1758 = icmp ugt i64 %1756, -13113
  %1759 = zext i1 %1758 to i8
  store i8 %1759, i8* %14, align 1
  %1760 = trunc i64 %1757 to i32
  %1761 = and i32 %1760, 255
  %1762 = tail call i32 @llvm.ctpop.i32(i32 %1761)
  %1763 = trunc i32 %1762 to i8
  %1764 = and i8 %1763, 1
  %1765 = xor i8 %1764, 1
  store i8 %1765, i8* %21, align 1
  %1766 = xor i64 %1756, 16
  %1767 = xor i64 %1766, %1757
  %1768 = lshr i64 %1767, 4
  %1769 = trunc i64 %1768 to i8
  %1770 = and i8 %1769, 1
  store i8 %1770, i8* %27, align 1
  %1771 = icmp eq i64 %1757, 0
  %1772 = zext i1 %1771 to i8
  store i8 %1772, i8* %30, align 1
  %1773 = lshr i64 %1757, 63
  %1774 = trunc i64 %1773 to i8
  store i8 %1774, i8* %33, align 1
  %1775 = lshr i64 %1756, 63
  %1776 = xor i64 %1773, %1775
  %1777 = add nuw nsw i64 %1776, %1773
  %1778 = icmp eq i64 %1777, 2
  %1779 = zext i1 %1778 to i8
  store i8 %1779, i8* %39, align 1
  %1780 = add i64 %1744, -20
  %1781 = add i64 %1677, 56
  store i64 %1781, i64* %3, align 8
  %1782 = inttoptr i64 %1780 to i32*
  %1783 = load i32, i32* %1782, align 4
  %1784 = zext i32 %1783 to i64
  store i64 %1784, i64* %RSI.i2426, align 8
  %1785 = add i64 %1744, -36
  %1786 = add i64 %1677, 59
  store i64 %1786, i64* %3, align 8
  %1787 = inttoptr i64 %1785 to i32*
  %1788 = load i32, i32* %1787, align 4
  %1789 = add i32 %1788, %1783
  %1790 = zext i32 %1789 to i64
  store i64 %1790, i64* %RSI.i2426, align 8
  %1791 = sext i32 %1789 to i64
  %1792 = shl nsw i64 %1791, 6
  store i64 %1792, i64* %RDX.i4840, align 8
  %1793 = load i64, i64* %RCX.i2028, align 8
  %1794 = add i64 %1792, %1793
  store i64 %1794, i64* %RCX.i2028, align 8
  %1795 = icmp ult i64 %1794, %1793
  %1796 = icmp ult i64 %1794, %1792
  %1797 = or i1 %1795, %1796
  %1798 = zext i1 %1797 to i8
  store i8 %1798, i8* %14, align 1
  %1799 = trunc i64 %1794 to i32
  %1800 = and i32 %1799, 255
  %1801 = tail call i32 @llvm.ctpop.i32(i32 %1800)
  %1802 = trunc i32 %1801 to i8
  %1803 = and i8 %1802, 1
  %1804 = xor i8 %1803, 1
  store i8 %1804, i8* %21, align 1
  %1805 = xor i64 %1793, %1794
  %1806 = lshr i64 %1805, 4
  %1807 = trunc i64 %1806 to i8
  %1808 = and i8 %1807, 1
  store i8 %1808, i8* %27, align 1
  %1809 = icmp eq i64 %1794, 0
  %1810 = zext i1 %1809 to i8
  store i8 %1810, i8* %30, align 1
  %1811 = lshr i64 %1794, 63
  %1812 = trunc i64 %1811 to i8
  store i8 %1812, i8* %33, align 1
  %1813 = lshr i64 %1793, 63
  %1814 = lshr i64 %1791, 57
  %1815 = and i64 %1814, 1
  %1816 = xor i64 %1811, %1813
  %1817 = xor i64 %1811, %1815
  %1818 = add nuw nsw i64 %1816, %1817
  %1819 = icmp eq i64 %1818, 2
  %1820 = zext i1 %1819 to i8
  store i8 %1820, i8* %39, align 1
  %1821 = load i64, i64* %RBP.i, align 8
  %1822 = add i64 %1821, -44
  %1823 = add i64 %1677, 73
  store i64 %1823, i64* %3, align 8
  %1824 = inttoptr i64 %1822 to i32*
  %1825 = load i32, i32* %1824, align 4
  %1826 = sext i32 %1825 to i64
  store i64 %1826, i64* %RDX.i4840, align 8
  %1827 = load i64, i64* %RAX.i1862, align 8
  %1828 = shl nsw i64 %1826, 2
  %1829 = add i64 %1794, %1828
  %1830 = add i64 %1677, 76
  store i64 %1830, i64* %3, align 8
  %1831 = trunc i64 %1827 to i32
  %1832 = inttoptr i64 %1829 to i32*
  %1833 = load i32, i32* %1832, align 4
  %1834 = add i32 %1833, %1831
  %1835 = zext i32 %1834 to i64
  store i64 %1835, i64* %RAX.i1862, align 8
  %1836 = icmp ult i32 %1834, %1831
  %1837 = icmp ult i32 %1834, %1833
  %1838 = or i1 %1836, %1837
  %1839 = zext i1 %1838 to i8
  store i8 %1839, i8* %14, align 1
  %1840 = and i32 %1834, 255
  %1841 = tail call i32 @llvm.ctpop.i32(i32 %1840)
  %1842 = trunc i32 %1841 to i8
  %1843 = and i8 %1842, 1
  %1844 = xor i8 %1843, 1
  store i8 %1844, i8* %21, align 1
  %1845 = xor i32 %1833, %1831
  %1846 = xor i32 %1845, %1834
  %1847 = lshr i32 %1846, 4
  %1848 = trunc i32 %1847 to i8
  %1849 = and i8 %1848, 1
  store i8 %1849, i8* %27, align 1
  %1850 = icmp eq i32 %1834, 0
  %1851 = zext i1 %1850 to i8
  store i8 %1851, i8* %30, align 1
  %1852 = lshr i32 %1834, 31
  %1853 = trunc i32 %1852 to i8
  store i8 %1853, i8* %33, align 1
  %1854 = lshr i32 %1831, 31
  %1855 = lshr i32 %1833, 31
  %1856 = xor i32 %1852, %1854
  %1857 = xor i32 %1852, %1855
  %1858 = add nuw nsw i32 %1856, %1857
  %1859 = icmp eq i32 %1858, 2
  %1860 = zext i1 %1859 to i8
  store i8 %1860, i8* %39, align 1
  %1861 = add i64 %1821, -12
  %1862 = add i64 %1677, 80
  store i64 %1862, i64* %3, align 8
  %1863 = inttoptr i64 %1861 to i32*
  %1864 = load i32, i32* %1863, align 4
  %1865 = sext i32 %1864 to i64
  %1866 = shl nsw i64 %1865, 2
  %1867 = add i64 %1821, -112
  %1868 = add i64 %1867, %1866
  %1869 = add i64 %1677, 84
  store i64 %1869, i64* %3, align 8
  %1870 = inttoptr i64 %1868 to i32*
  store i32 %1834, i32* %1870, align 4
  %1871 = load i64, i64* %3, align 8
  %1872 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1873 = add i64 %1872, 13112
  store i64 %1873, i64* %RCX.i2028, align 8
  %1874 = icmp ugt i64 %1872, -13113
  %1875 = zext i1 %1874 to i8
  store i8 %1875, i8* %14, align 1
  %1876 = trunc i64 %1873 to i32
  %1877 = and i32 %1876, 255
  %1878 = tail call i32 @llvm.ctpop.i32(i32 %1877)
  %1879 = trunc i32 %1878 to i8
  %1880 = and i8 %1879, 1
  %1881 = xor i8 %1880, 1
  store i8 %1881, i8* %21, align 1
  %1882 = xor i64 %1872, 16
  %1883 = xor i64 %1882, %1873
  %1884 = lshr i64 %1883, 4
  %1885 = trunc i64 %1884 to i8
  %1886 = and i8 %1885, 1
  store i8 %1886, i8* %27, align 1
  %1887 = icmp eq i64 %1873, 0
  %1888 = zext i1 %1887 to i8
  store i8 %1888, i8* %30, align 1
  %1889 = lshr i64 %1873, 63
  %1890 = trunc i64 %1889 to i8
  store i8 %1890, i8* %33, align 1
  %1891 = lshr i64 %1872, 63
  %1892 = xor i64 %1889, %1891
  %1893 = add nuw nsw i64 %1892, %1889
  %1894 = icmp eq i64 %1893, 2
  %1895 = zext i1 %1894 to i8
  store i8 %1895, i8* %39, align 1
  %1896 = load i64, i64* %RBP.i, align 8
  %1897 = add i64 %1896, -12
  %1898 = add i64 %1871, 18
  store i64 %1898, i64* %3, align 8
  %1899 = inttoptr i64 %1897 to i32*
  %1900 = load i32, i32* %1899, align 4
  %1901 = zext i32 %1900 to i64
  store i64 %1901, i64* %RAX.i1862, align 8
  %1902 = add i64 %1896, -36
  %1903 = add i64 %1871, 21
  store i64 %1903, i64* %3, align 8
  %1904 = inttoptr i64 %1902 to i32*
  %1905 = load i32, i32* %1904, align 4
  %1906 = add i32 %1905, %1900
  %1907 = zext i32 %1906 to i64
  store i64 %1907, i64* %RAX.i1862, align 8
  %1908 = sext i32 %1906 to i64
  %1909 = shl nsw i64 %1908, 6
  store i64 %1909, i64* %RDX.i4840, align 8
  %1910 = load i64, i64* %RCX.i2028, align 8
  %1911 = add i64 %1909, %1910
  store i64 %1911, i64* %RCX.i2028, align 8
  %1912 = icmp ult i64 %1911, %1910
  %1913 = icmp ult i64 %1911, %1909
  %1914 = or i1 %1912, %1913
  %1915 = zext i1 %1914 to i8
  store i8 %1915, i8* %14, align 1
  %1916 = trunc i64 %1911 to i32
  %1917 = and i32 %1916, 255
  %1918 = tail call i32 @llvm.ctpop.i32(i32 %1917)
  %1919 = trunc i32 %1918 to i8
  %1920 = and i8 %1919, 1
  %1921 = xor i8 %1920, 1
  store i8 %1921, i8* %21, align 1
  %1922 = xor i64 %1910, %1911
  %1923 = lshr i64 %1922, 4
  %1924 = trunc i64 %1923 to i8
  %1925 = and i8 %1924, 1
  store i8 %1925, i8* %27, align 1
  %1926 = icmp eq i64 %1911, 0
  %1927 = zext i1 %1926 to i8
  store i8 %1927, i8* %30, align 1
  %1928 = lshr i64 %1911, 63
  %1929 = trunc i64 %1928 to i8
  store i8 %1929, i8* %33, align 1
  %1930 = lshr i64 %1910, 63
  %1931 = lshr i64 %1908, 57
  %1932 = and i64 %1931, 1
  %1933 = xor i64 %1928, %1930
  %1934 = xor i64 %1928, %1932
  %1935 = add nuw nsw i64 %1933, %1934
  %1936 = icmp eq i64 %1935, 2
  %1937 = zext i1 %1936 to i8
  store i8 %1937, i8* %39, align 1
  %1938 = load i64, i64* %RBP.i, align 8
  %1939 = add i64 %1938, -44
  %1940 = add i64 %1871, 35
  store i64 %1940, i64* %3, align 8
  %1941 = inttoptr i64 %1939 to i32*
  %1942 = load i32, i32* %1941, align 4
  %1943 = sext i32 %1942 to i64
  store i64 %1943, i64* %RDX.i4840, align 8
  %1944 = shl nsw i64 %1943, 2
  %1945 = add i64 %1944, %1911
  %1946 = add i64 %1871, 38
  store i64 %1946, i64* %3, align 8
  %1947 = inttoptr i64 %1945 to i32*
  %1948 = load i32, i32* %1947, align 4
  %1949 = zext i32 %1948 to i64
  store i64 %1949, i64* %RAX.i1862, align 8
  %1950 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1951 = add i64 %1950, 13112
  store i64 %1951, i64* %RCX.i2028, align 8
  %1952 = icmp ugt i64 %1950, -13113
  %1953 = zext i1 %1952 to i8
  store i8 %1953, i8* %14, align 1
  %1954 = trunc i64 %1951 to i32
  %1955 = and i32 %1954, 255
  %1956 = tail call i32 @llvm.ctpop.i32(i32 %1955)
  %1957 = trunc i32 %1956 to i8
  %1958 = and i8 %1957, 1
  %1959 = xor i8 %1958, 1
  store i8 %1959, i8* %21, align 1
  %1960 = xor i64 %1950, 16
  %1961 = xor i64 %1960, %1951
  %1962 = lshr i64 %1961, 4
  %1963 = trunc i64 %1962 to i8
  %1964 = and i8 %1963, 1
  store i8 %1964, i8* %27, align 1
  %1965 = icmp eq i64 %1951, 0
  %1966 = zext i1 %1965 to i8
  store i8 %1966, i8* %30, align 1
  %1967 = lshr i64 %1951, 63
  %1968 = trunc i64 %1967 to i8
  store i8 %1968, i8* %33, align 1
  %1969 = lshr i64 %1950, 63
  %1970 = xor i64 %1967, %1969
  %1971 = add nuw nsw i64 %1970, %1967
  %1972 = icmp eq i64 %1971, 2
  %1973 = zext i1 %1972 to i8
  store i8 %1973, i8* %39, align 1
  %1974 = add i64 %1938, -20
  %1975 = add i64 %1871, 56
  store i64 %1975, i64* %3, align 8
  %1976 = inttoptr i64 %1974 to i32*
  %1977 = load i32, i32* %1976, align 4
  %1978 = zext i32 %1977 to i64
  store i64 %1978, i64* %RSI.i2426, align 8
  %1979 = add i64 %1938, -36
  %1980 = add i64 %1871, 59
  store i64 %1980, i64* %3, align 8
  %1981 = inttoptr i64 %1979 to i32*
  %1982 = load i32, i32* %1981, align 4
  %1983 = add i32 %1982, %1977
  %1984 = zext i32 %1983 to i64
  store i64 %1984, i64* %RSI.i2426, align 8
  %1985 = sext i32 %1983 to i64
  %1986 = shl nsw i64 %1985, 6
  store i64 %1986, i64* %RDX.i4840, align 8
  %1987 = load i64, i64* %RCX.i2028, align 8
  %1988 = add i64 %1986, %1987
  store i64 %1988, i64* %RCX.i2028, align 8
  %1989 = icmp ult i64 %1988, %1987
  %1990 = icmp ult i64 %1988, %1986
  %1991 = or i1 %1989, %1990
  %1992 = zext i1 %1991 to i8
  store i8 %1992, i8* %14, align 1
  %1993 = trunc i64 %1988 to i32
  %1994 = and i32 %1993, 255
  %1995 = tail call i32 @llvm.ctpop.i32(i32 %1994)
  %1996 = trunc i32 %1995 to i8
  %1997 = and i8 %1996, 1
  %1998 = xor i8 %1997, 1
  store i8 %1998, i8* %21, align 1
  %1999 = xor i64 %1987, %1988
  %2000 = lshr i64 %1999, 4
  %2001 = trunc i64 %2000 to i8
  %2002 = and i8 %2001, 1
  store i8 %2002, i8* %27, align 1
  %2003 = icmp eq i64 %1988, 0
  %2004 = zext i1 %2003 to i8
  store i8 %2004, i8* %30, align 1
  %2005 = lshr i64 %1988, 63
  %2006 = trunc i64 %2005 to i8
  store i8 %2006, i8* %33, align 1
  %2007 = lshr i64 %1987, 63
  %2008 = lshr i64 %1985, 57
  %2009 = and i64 %2008, 1
  %2010 = xor i64 %2005, %2007
  %2011 = xor i64 %2005, %2009
  %2012 = add nuw nsw i64 %2010, %2011
  %2013 = icmp eq i64 %2012, 2
  %2014 = zext i1 %2013 to i8
  store i8 %2014, i8* %39, align 1
  %2015 = load i64, i64* %RBP.i, align 8
  %2016 = add i64 %2015, -44
  %2017 = add i64 %1871, 73
  store i64 %2017, i64* %3, align 8
  %2018 = inttoptr i64 %2016 to i32*
  %2019 = load i32, i32* %2018, align 4
  %2020 = sext i32 %2019 to i64
  store i64 %2020, i64* %RDX.i4840, align 8
  %2021 = load i64, i64* %RAX.i1862, align 8
  %2022 = shl nsw i64 %2020, 2
  %2023 = add i64 %1988, %2022
  %2024 = add i64 %1871, 76
  store i64 %2024, i64* %3, align 8
  %2025 = trunc i64 %2021 to i32
  %2026 = inttoptr i64 %2023 to i32*
  %2027 = load i32, i32* %2026, align 4
  %2028 = sub i32 %2025, %2027
  %2029 = zext i32 %2028 to i64
  store i64 %2029, i64* %RAX.i1862, align 8
  %2030 = icmp ult i32 %2025, %2027
  %2031 = zext i1 %2030 to i8
  store i8 %2031, i8* %14, align 1
  %2032 = and i32 %2028, 255
  %2033 = tail call i32 @llvm.ctpop.i32(i32 %2032)
  %2034 = trunc i32 %2033 to i8
  %2035 = and i8 %2034, 1
  %2036 = xor i8 %2035, 1
  store i8 %2036, i8* %21, align 1
  %2037 = xor i32 %2027, %2025
  %2038 = xor i32 %2037, %2028
  %2039 = lshr i32 %2038, 4
  %2040 = trunc i32 %2039 to i8
  %2041 = and i8 %2040, 1
  store i8 %2041, i8* %27, align 1
  %2042 = icmp eq i32 %2028, 0
  %2043 = zext i1 %2042 to i8
  store i8 %2043, i8* %30, align 1
  %2044 = lshr i32 %2028, 31
  %2045 = trunc i32 %2044 to i8
  store i8 %2045, i8* %33, align 1
  %2046 = lshr i32 %2025, 31
  %2047 = lshr i32 %2027, 31
  %2048 = xor i32 %2047, %2046
  %2049 = xor i32 %2044, %2046
  %2050 = add nuw nsw i32 %2049, %2048
  %2051 = icmp eq i32 %2050, 2
  %2052 = zext i1 %2051 to i8
  store i8 %2052, i8* %39, align 1
  %2053 = add i64 %2015, -20
  %2054 = add i64 %1871, 80
  store i64 %2054, i64* %3, align 8
  %2055 = inttoptr i64 %2053 to i32*
  %2056 = load i32, i32* %2055, align 4
  %2057 = sext i32 %2056 to i64
  store i64 %2057, i64* %RCX.i2028, align 8
  %2058 = shl nsw i64 %2057, 2
  %2059 = add i64 %2015, -112
  %2060 = add i64 %2059, %2058
  %2061 = add i64 %1871, 84
  store i64 %2061, i64* %3, align 8
  %2062 = inttoptr i64 %2060 to i32*
  store i32 %2028, i32* %2062, align 4
  %2063 = load i64, i64* %RBP.i, align 8
  %2064 = add i64 %2063, -12
  %2065 = load i64, i64* %3, align 8
  %2066 = add i64 %2065, 3
  store i64 %2066, i64* %3, align 8
  %2067 = inttoptr i64 %2064 to i32*
  %2068 = load i32, i32* %2067, align 4
  %2069 = add i32 %2068, 1
  %2070 = zext i32 %2069 to i64
  store i64 %2070, i64* %RAX.i1862, align 8
  %2071 = icmp eq i32 %2068, -1
  %2072 = icmp eq i32 %2069, 0
  %2073 = or i1 %2071, %2072
  %2074 = zext i1 %2073 to i8
  store i8 %2074, i8* %14, align 1
  %2075 = and i32 %2069, 255
  %2076 = tail call i32 @llvm.ctpop.i32(i32 %2075)
  %2077 = trunc i32 %2076 to i8
  %2078 = and i8 %2077, 1
  %2079 = xor i8 %2078, 1
  store i8 %2079, i8* %21, align 1
  %2080 = xor i32 %2069, %2068
  %2081 = lshr i32 %2080, 4
  %2082 = trunc i32 %2081 to i8
  %2083 = and i8 %2082, 1
  store i8 %2083, i8* %27, align 1
  %2084 = zext i1 %2072 to i8
  store i8 %2084, i8* %30, align 1
  %2085 = lshr i32 %2069, 31
  %2086 = trunc i32 %2085 to i8
  store i8 %2086, i8* %33, align 1
  %2087 = lshr i32 %2068, 31
  %2088 = xor i32 %2085, %2087
  %2089 = add nuw nsw i32 %2088, %2085
  %2090 = icmp eq i32 %2089, 2
  %2091 = zext i1 %2090 to i8
  store i8 %2091, i8* %39, align 1
  %2092 = add i64 %2065, 9
  store i64 %2092, i64* %3, align 8
  store i32 %2069, i32* %2067, align 4
  %2093 = load i64, i64* %3, align 8
  %2094 = add i64 %2093, -198
  store i64 %2094, i64* %3, align 8
  br label %block_.L_40d76c

block_.L_40d837:                                  ; preds = %block_.L_40d76c
  %2095 = add i64 %1641, -112
  %2096 = add i64 %1669, 3
  store i64 %2096, i64* %3, align 8
  %2097 = inttoptr i64 %2095 to i32*
  %2098 = load i32, i32* %2097, align 4
  %2099 = zext i32 %2098 to i64
  store i64 %2099, i64* %RAX.i1862, align 8
  %2100 = add i64 %1641, -108
  %2101 = add i64 %1669, 6
  store i64 %2101, i64* %3, align 8
  %2102 = inttoptr i64 %2100 to i32*
  %2103 = load i32, i32* %2102, align 4
  %2104 = add i32 %2103, %2098
  %2105 = zext i32 %2104 to i64
  store i64 %2105, i64* %RAX.i1862, align 8
  %2106 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2107 = add i64 %2106, 13112
  store i64 %2107, i64* %RCX.i2028, align 8
  %2108 = icmp ugt i64 %2106, -13113
  %2109 = zext i1 %2108 to i8
  store i8 %2109, i8* %14, align 1
  %2110 = trunc i64 %2107 to i32
  %2111 = and i32 %2110, 255
  %2112 = tail call i32 @llvm.ctpop.i32(i32 %2111)
  %2113 = trunc i32 %2112 to i8
  %2114 = and i8 %2113, 1
  %2115 = xor i8 %2114, 1
  store i8 %2115, i8* %21, align 1
  %2116 = xor i64 %2106, 16
  %2117 = xor i64 %2116, %2107
  %2118 = lshr i64 %2117, 4
  %2119 = trunc i64 %2118 to i8
  %2120 = and i8 %2119, 1
  store i8 %2120, i8* %27, align 1
  %2121 = icmp eq i64 %2107, 0
  %2122 = zext i1 %2121 to i8
  store i8 %2122, i8* %30, align 1
  %2123 = lshr i64 %2107, 63
  %2124 = trunc i64 %2123 to i8
  store i8 %2124, i8* %33, align 1
  %2125 = lshr i64 %2106, 63
  %2126 = xor i64 %2123, %2125
  %2127 = add nuw nsw i64 %2126, %2123
  %2128 = icmp eq i64 %2127, 2
  %2129 = zext i1 %2128 to i8
  store i8 %2129, i8* %39, align 1
  %2130 = add i64 %1641, -36
  %2131 = add i64 %1669, 25
  store i64 %2131, i64* %3, align 8
  %2132 = inttoptr i64 %2130 to i32*
  %2133 = load i32, i32* %2132, align 4
  %2134 = sext i32 %2133 to i64
  %2135 = shl nsw i64 %2134, 6
  store i64 %2135, i64* %RDX.i4840, align 8
  %2136 = add i64 %2135, %2107
  store i64 %2136, i64* %RCX.i2028, align 8
  %2137 = icmp ult i64 %2136, %2107
  %2138 = icmp ult i64 %2136, %2135
  %2139 = or i1 %2137, %2138
  %2140 = zext i1 %2139 to i8
  store i8 %2140, i8* %14, align 1
  %2141 = trunc i64 %2136 to i32
  %2142 = and i32 %2141, 255
  %2143 = tail call i32 @llvm.ctpop.i32(i32 %2142)
  %2144 = trunc i32 %2143 to i8
  %2145 = and i8 %2144, 1
  %2146 = xor i8 %2145, 1
  store i8 %2146, i8* %21, align 1
  %2147 = xor i64 %2107, %2136
  %2148 = lshr i64 %2147, 4
  %2149 = trunc i64 %2148 to i8
  %2150 = and i8 %2149, 1
  store i8 %2150, i8* %27, align 1
  %2151 = icmp eq i64 %2136, 0
  %2152 = zext i1 %2151 to i8
  store i8 %2152, i8* %30, align 1
  %2153 = lshr i64 %2136, 63
  %2154 = trunc i64 %2153 to i8
  store i8 %2154, i8* %33, align 1
  %2155 = lshr i64 %2134, 57
  %2156 = and i64 %2155, 1
  %2157 = xor i64 %2153, %2123
  %2158 = xor i64 %2153, %2156
  %2159 = add nuw nsw i64 %2157, %2158
  %2160 = icmp eq i64 %2159, 2
  %2161 = zext i1 %2160 to i8
  store i8 %2161, i8* %39, align 1
  %2162 = load i64, i64* %RBP.i, align 8
  %2163 = add i64 %2162, -44
  %2164 = add i64 %1669, 36
  store i64 %2164, i64* %3, align 8
  %2165 = inttoptr i64 %2163 to i32*
  %2166 = load i32, i32* %2165, align 4
  %2167 = sext i32 %2166 to i64
  store i64 %2167, i64* %RDX.i4840, align 8
  %2168 = shl nsw i64 %2167, 2
  %2169 = add i64 %2168, %2136
  %2170 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %2171 = add i64 %1669, 39
  store i64 %2171, i64* %3, align 8
  %2172 = inttoptr i64 %2169 to i32*
  store i32 %2170, i32* %2172, align 4
  %2173 = load i64, i64* %RBP.i, align 8
  %2174 = add i64 %2173, -112
  %2175 = load i64, i64* %3, align 8
  %2176 = add i64 %2175, 3
  store i64 %2176, i64* %3, align 8
  %2177 = inttoptr i64 %2174 to i32*
  %2178 = load i32, i32* %2177, align 4
  %2179 = zext i32 %2178 to i64
  store i64 %2179, i64* %RAX.i1862, align 8
  %2180 = add i64 %2173, -108
  %2181 = add i64 %2175, 6
  store i64 %2181, i64* %3, align 8
  %2182 = inttoptr i64 %2180 to i32*
  %2183 = load i32, i32* %2182, align 4
  %2184 = sub i32 %2178, %2183
  %2185 = zext i32 %2184 to i64
  store i64 %2185, i64* %RAX.i1862, align 8
  %2186 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2187 = add i64 %2186, 13112
  store i64 %2187, i64* %RCX.i2028, align 8
  %2188 = icmp ugt i64 %2186, -13113
  %2189 = zext i1 %2188 to i8
  store i8 %2189, i8* %14, align 1
  %2190 = trunc i64 %2187 to i32
  %2191 = and i32 %2190, 255
  %2192 = tail call i32 @llvm.ctpop.i32(i32 %2191)
  %2193 = trunc i32 %2192 to i8
  %2194 = and i8 %2193, 1
  %2195 = xor i8 %2194, 1
  store i8 %2195, i8* %21, align 1
  %2196 = xor i64 %2186, 16
  %2197 = xor i64 %2196, %2187
  %2198 = lshr i64 %2197, 4
  %2199 = trunc i64 %2198 to i8
  %2200 = and i8 %2199, 1
  store i8 %2200, i8* %27, align 1
  %2201 = icmp eq i64 %2187, 0
  %2202 = zext i1 %2201 to i8
  store i8 %2202, i8* %30, align 1
  %2203 = lshr i64 %2187, 63
  %2204 = trunc i64 %2203 to i8
  store i8 %2204, i8* %33, align 1
  %2205 = lshr i64 %2186, 63
  %2206 = xor i64 %2203, %2205
  %2207 = add nuw nsw i64 %2206, %2203
  %2208 = icmp eq i64 %2207, 2
  %2209 = zext i1 %2208 to i8
  store i8 %2209, i8* %39, align 1
  %2210 = add i64 %2173, -36
  %2211 = add i64 %2175, 24
  store i64 %2211, i64* %3, align 8
  %2212 = inttoptr i64 %2210 to i32*
  %2213 = load i32, i32* %2212, align 4
  %2214 = add i32 %2213, 2
  %2215 = zext i32 %2214 to i64
  store i64 %2215, i64* %RSI.i2426, align 8
  %2216 = sext i32 %2214 to i64
  %2217 = shl nsw i64 %2216, 6
  store i64 %2217, i64* %RDX.i4840, align 8
  %2218 = add i64 %2217, %2187
  store i64 %2218, i64* %RCX.i2028, align 8
  %2219 = icmp ult i64 %2218, %2187
  %2220 = icmp ult i64 %2218, %2217
  %2221 = or i1 %2219, %2220
  %2222 = zext i1 %2221 to i8
  store i8 %2222, i8* %14, align 1
  %2223 = trunc i64 %2218 to i32
  %2224 = and i32 %2223, 255
  %2225 = tail call i32 @llvm.ctpop.i32(i32 %2224)
  %2226 = trunc i32 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = xor i8 %2227, 1
  store i8 %2228, i8* %21, align 1
  %2229 = xor i64 %2187, %2218
  %2230 = lshr i64 %2229, 4
  %2231 = trunc i64 %2230 to i8
  %2232 = and i8 %2231, 1
  store i8 %2232, i8* %27, align 1
  %2233 = icmp eq i64 %2218, 0
  %2234 = zext i1 %2233 to i8
  store i8 %2234, i8* %30, align 1
  %2235 = lshr i64 %2218, 63
  %2236 = trunc i64 %2235 to i8
  store i8 %2236, i8* %33, align 1
  %2237 = lshr i64 %2216, 57
  %2238 = and i64 %2237, 1
  %2239 = xor i64 %2235, %2203
  %2240 = xor i64 %2235, %2238
  %2241 = add nuw nsw i64 %2239, %2240
  %2242 = icmp eq i64 %2241, 2
  %2243 = zext i1 %2242 to i8
  store i8 %2243, i8* %39, align 1
  %2244 = load i64, i64* %RBP.i, align 8
  %2245 = add i64 %2244, -44
  %2246 = add i64 %2175, 41
  store i64 %2246, i64* %3, align 8
  %2247 = inttoptr i64 %2245 to i32*
  %2248 = load i32, i32* %2247, align 4
  %2249 = sext i32 %2248 to i64
  store i64 %2249, i64* %RDX.i4840, align 8
  %2250 = shl nsw i64 %2249, 2
  %2251 = add i64 %2250, %2218
  %2252 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %2253 = add i64 %2175, 44
  store i64 %2253, i64* %3, align 8
  %2254 = inttoptr i64 %2251 to i32*
  store i32 %2252, i32* %2254, align 4
  %2255 = load i64, i64* %RBP.i, align 8
  %2256 = add i64 %2255, -100
  %2257 = load i64, i64* %3, align 8
  %2258 = add i64 %2257, 3
  store i64 %2258, i64* %3, align 8
  %2259 = inttoptr i64 %2256 to i32*
  %2260 = load i32, i32* %2259, align 4
  %2261 = shl i32 %2260, 1
  %2262 = icmp slt i32 %2260, 0
  %2263 = icmp slt i32 %2261, 0
  %2264 = xor i1 %2262, %2263
  %2265 = zext i32 %2261 to i64
  store i64 %2265, i64* %RAX.i1862, align 8
  %.lobit84 = lshr i32 %2260, 31
  %2266 = trunc i32 %.lobit84 to i8
  store i8 %2266, i8* %14, align 1
  %2267 = and i32 %2261, 254
  %2268 = tail call i32 @llvm.ctpop.i32(i32 %2267)
  %2269 = trunc i32 %2268 to i8
  %2270 = and i8 %2269, 1
  %2271 = xor i8 %2270, 1
  store i8 %2271, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2272 = icmp eq i32 %2261, 0
  %2273 = zext i1 %2272 to i8
  store i8 %2273, i8* %30, align 1
  %2274 = lshr i32 %2260, 30
  %2275 = trunc i32 %2274 to i8
  %2276 = and i8 %2275, 1
  store i8 %2276, i8* %33, align 1
  %2277 = zext i1 %2264 to i8
  store i8 %2277, i8* %39, align 1
  %2278 = add i64 %2255, -104
  %2279 = add i64 %2257, 8
  store i64 %2279, i64* %3, align 8
  %2280 = inttoptr i64 %2278 to i32*
  %2281 = load i32, i32* %2280, align 4
  %2282 = add i32 %2281, %2261
  %2283 = zext i32 %2282 to i64
  store i64 %2283, i64* %RAX.i1862, align 8
  %2284 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2285 = add i64 %2284, 13112
  store i64 %2285, i64* %RCX.i2028, align 8
  %2286 = icmp ugt i64 %2284, -13113
  %2287 = zext i1 %2286 to i8
  store i8 %2287, i8* %14, align 1
  %2288 = trunc i64 %2285 to i32
  %2289 = and i32 %2288, 255
  %2290 = tail call i32 @llvm.ctpop.i32(i32 %2289)
  %2291 = trunc i32 %2290 to i8
  %2292 = and i8 %2291, 1
  %2293 = xor i8 %2292, 1
  store i8 %2293, i8* %21, align 1
  %2294 = xor i64 %2284, 16
  %2295 = xor i64 %2294, %2285
  %2296 = lshr i64 %2295, 4
  %2297 = trunc i64 %2296 to i8
  %2298 = and i8 %2297, 1
  store i8 %2298, i8* %27, align 1
  %2299 = icmp eq i64 %2285, 0
  %2300 = zext i1 %2299 to i8
  store i8 %2300, i8* %30, align 1
  %2301 = lshr i64 %2285, 63
  %2302 = trunc i64 %2301 to i8
  store i8 %2302, i8* %33, align 1
  %2303 = lshr i64 %2284, 63
  %2304 = xor i64 %2301, %2303
  %2305 = add nuw nsw i64 %2304, %2301
  %2306 = icmp eq i64 %2305, 2
  %2307 = zext i1 %2306 to i8
  store i8 %2307, i8* %39, align 1
  %2308 = load i64, i64* %RBP.i, align 8
  %2309 = add i64 %2308, -36
  %2310 = add i64 %2257, 26
  store i64 %2310, i64* %3, align 8
  %2311 = inttoptr i64 %2309 to i32*
  %2312 = load i32, i32* %2311, align 4
  %2313 = add i32 %2312, 1
  %2314 = zext i32 %2313 to i64
  store i64 %2314, i64* %RSI.i2426, align 8
  %2315 = sext i32 %2313 to i64
  %2316 = shl nsw i64 %2315, 6
  store i64 %2316, i64* %RDX.i4840, align 8
  %2317 = add i64 %2316, %2285
  store i64 %2317, i64* %RCX.i2028, align 8
  %2318 = icmp ult i64 %2317, %2285
  %2319 = icmp ult i64 %2317, %2316
  %2320 = or i1 %2318, %2319
  %2321 = zext i1 %2320 to i8
  store i8 %2321, i8* %14, align 1
  %2322 = trunc i64 %2317 to i32
  %2323 = and i32 %2322, 255
  %2324 = tail call i32 @llvm.ctpop.i32(i32 %2323)
  %2325 = trunc i32 %2324 to i8
  %2326 = and i8 %2325, 1
  %2327 = xor i8 %2326, 1
  store i8 %2327, i8* %21, align 1
  %2328 = xor i64 %2285, %2317
  %2329 = lshr i64 %2328, 4
  %2330 = trunc i64 %2329 to i8
  %2331 = and i8 %2330, 1
  store i8 %2331, i8* %27, align 1
  %2332 = icmp eq i64 %2317, 0
  %2333 = zext i1 %2332 to i8
  store i8 %2333, i8* %30, align 1
  %2334 = lshr i64 %2317, 63
  %2335 = trunc i64 %2334 to i8
  store i8 %2335, i8* %33, align 1
  %2336 = lshr i64 %2315, 57
  %2337 = and i64 %2336, 1
  %2338 = xor i64 %2334, %2301
  %2339 = xor i64 %2334, %2337
  %2340 = add nuw nsw i64 %2338, %2339
  %2341 = icmp eq i64 %2340, 2
  %2342 = zext i1 %2341 to i8
  store i8 %2342, i8* %39, align 1
  %2343 = load i64, i64* %RBP.i, align 8
  %2344 = add i64 %2343, -44
  %2345 = add i64 %2257, 43
  store i64 %2345, i64* %3, align 8
  %2346 = inttoptr i64 %2344 to i32*
  %2347 = load i32, i32* %2346, align 4
  %2348 = sext i32 %2347 to i64
  store i64 %2348, i64* %RDX.i4840, align 8
  %2349 = shl nsw i64 %2348, 2
  %2350 = add i64 %2349, %2317
  %2351 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %2352 = add i64 %2257, 46
  store i64 %2352, i64* %3, align 8
  %2353 = inttoptr i64 %2350 to i32*
  store i32 %2351, i32* %2353, align 4
  %2354 = load i64, i64* %RBP.i, align 8
  %2355 = add i64 %2354, -100
  %2356 = load i64, i64* %3, align 8
  %2357 = add i64 %2356, 3
  store i64 %2357, i64* %3, align 8
  %2358 = inttoptr i64 %2355 to i32*
  %2359 = load i32, i32* %2358, align 4
  %2360 = zext i32 %2359 to i64
  store i64 %2360, i64* %RAX.i1862, align 8
  %2361 = add i64 %2354, -104
  %2362 = add i64 %2356, 6
  store i64 %2362, i64* %3, align 8
  %2363 = inttoptr i64 %2361 to i32*
  %2364 = load i32, i32* %2363, align 4
  %2365 = shl i32 %2364, 1
  %2366 = zext i32 %2365 to i64
  store i64 %2366, i64* %RSI.i2426, align 8
  %2367 = sub i32 %2359, %2365
  %2368 = zext i32 %2367 to i64
  store i64 %2368, i64* %RAX.i1862, align 8
  %2369 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2370 = add i64 %2369, 13112
  store i64 %2370, i64* %RCX.i2028, align 8
  %2371 = icmp ugt i64 %2369, -13113
  %2372 = zext i1 %2371 to i8
  store i8 %2372, i8* %14, align 1
  %2373 = trunc i64 %2370 to i32
  %2374 = and i32 %2373, 255
  %2375 = tail call i32 @llvm.ctpop.i32(i32 %2374)
  %2376 = trunc i32 %2375 to i8
  %2377 = and i8 %2376, 1
  %2378 = xor i8 %2377, 1
  store i8 %2378, i8* %21, align 1
  %2379 = xor i64 %2369, 16
  %2380 = xor i64 %2379, %2370
  %2381 = lshr i64 %2380, 4
  %2382 = trunc i64 %2381 to i8
  %2383 = and i8 %2382, 1
  store i8 %2383, i8* %27, align 1
  %2384 = icmp eq i64 %2370, 0
  %2385 = zext i1 %2384 to i8
  store i8 %2385, i8* %30, align 1
  %2386 = lshr i64 %2370, 63
  %2387 = trunc i64 %2386 to i8
  store i8 %2387, i8* %33, align 1
  %2388 = lshr i64 %2369, 63
  %2389 = xor i64 %2386, %2388
  %2390 = add nuw nsw i64 %2389, %2386
  %2391 = icmp eq i64 %2390, 2
  %2392 = zext i1 %2391 to i8
  store i8 %2392, i8* %39, align 1
  %2393 = load i64, i64* %RBP.i, align 8
  %2394 = add i64 %2393, -36
  %2395 = add i64 %2356, 28
  store i64 %2395, i64* %3, align 8
  %2396 = inttoptr i64 %2394 to i32*
  %2397 = load i32, i32* %2396, align 4
  %2398 = add i32 %2397, 3
  %2399 = zext i32 %2398 to i64
  store i64 %2399, i64* %RSI.i2426, align 8
  %2400 = sext i32 %2398 to i64
  %2401 = shl nsw i64 %2400, 6
  store i64 %2401, i64* %RDX.i4840, align 8
  %2402 = add i64 %2401, %2370
  store i64 %2402, i64* %RCX.i2028, align 8
  %2403 = icmp ult i64 %2402, %2370
  %2404 = icmp ult i64 %2402, %2401
  %2405 = or i1 %2403, %2404
  %2406 = zext i1 %2405 to i8
  store i8 %2406, i8* %14, align 1
  %2407 = trunc i64 %2402 to i32
  %2408 = and i32 %2407, 255
  %2409 = tail call i32 @llvm.ctpop.i32(i32 %2408)
  %2410 = trunc i32 %2409 to i8
  %2411 = and i8 %2410, 1
  %2412 = xor i8 %2411, 1
  store i8 %2412, i8* %21, align 1
  %2413 = xor i64 %2370, %2402
  %2414 = lshr i64 %2413, 4
  %2415 = trunc i64 %2414 to i8
  %2416 = and i8 %2415, 1
  store i8 %2416, i8* %27, align 1
  %2417 = icmp eq i64 %2402, 0
  %2418 = zext i1 %2417 to i8
  store i8 %2418, i8* %30, align 1
  %2419 = lshr i64 %2402, 63
  %2420 = trunc i64 %2419 to i8
  store i8 %2420, i8* %33, align 1
  %2421 = lshr i64 %2400, 57
  %2422 = and i64 %2421, 1
  %2423 = xor i64 %2419, %2386
  %2424 = xor i64 %2419, %2422
  %2425 = add nuw nsw i64 %2423, %2424
  %2426 = icmp eq i64 %2425, 2
  %2427 = zext i1 %2426 to i8
  store i8 %2427, i8* %39, align 1
  %2428 = load i64, i64* %RBP.i, align 8
  %2429 = add i64 %2428, -44
  %2430 = add i64 %2356, 45
  store i64 %2430, i64* %3, align 8
  %2431 = inttoptr i64 %2429 to i32*
  %2432 = load i32, i32* %2431, align 4
  %2433 = sext i32 %2432 to i64
  store i64 %2433, i64* %RDX.i4840, align 8
  %2434 = shl nsw i64 %2433, 2
  %2435 = add i64 %2434, %2402
  %2436 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %2437 = add i64 %2356, 48
  store i64 %2437, i64* %3, align 8
  %2438 = inttoptr i64 %2435 to i32*
  store i32 %2436, i32* %2438, align 4
  %2439 = load i64, i64* %RBP.i, align 8
  %2440 = add i64 %2439, -16
  %2441 = load i64, i64* %3, align 8
  %2442 = add i64 %2441, 3
  store i64 %2442, i64* %3, align 8
  %2443 = inttoptr i64 %2440 to i32*
  %2444 = load i32, i32* %2443, align 4
  %2445 = add i32 %2444, 1
  %2446 = zext i32 %2445 to i64
  store i64 %2446, i64* %RAX.i1862, align 8
  %2447 = icmp eq i32 %2444, -1
  %2448 = icmp eq i32 %2445, 0
  %2449 = or i1 %2447, %2448
  %2450 = zext i1 %2449 to i8
  store i8 %2450, i8* %14, align 1
  %2451 = and i32 %2445, 255
  %2452 = tail call i32 @llvm.ctpop.i32(i32 %2451)
  %2453 = trunc i32 %2452 to i8
  %2454 = and i8 %2453, 1
  %2455 = xor i8 %2454, 1
  store i8 %2455, i8* %21, align 1
  %2456 = xor i32 %2445, %2444
  %2457 = lshr i32 %2456, 4
  %2458 = trunc i32 %2457 to i8
  %2459 = and i8 %2458, 1
  store i8 %2459, i8* %27, align 1
  %2460 = zext i1 %2448 to i8
  store i8 %2460, i8* %30, align 1
  %2461 = lshr i32 %2445, 31
  %2462 = trunc i32 %2461 to i8
  store i8 %2462, i8* %33, align 1
  %2463 = lshr i32 %2444, 31
  %2464 = xor i32 %2461, %2463
  %2465 = add nuw nsw i32 %2464, %2461
  %2466 = icmp eq i32 %2465, 2
  %2467 = zext i1 %2466 to i8
  store i8 %2467, i8* %39, align 1
  %2468 = add i64 %2441, 9
  store i64 %2468, i64* %3, align 8
  store i32 %2445, i32* %2443, align 4
  %2469 = load i64, i64* %3, align 8
  %2470 = add i64 %2469, -417
  store i64 %2470, i64* %3, align 8
  br label %block_.L_40d752

block_.L_40d8f8:                                  ; preds = %block_.L_40d752
  %2471 = add i64 %1569, -12
  %2472 = add i64 %1597, 7
  store i64 %2472, i64* %3, align 8
  %2473 = inttoptr i64 %2471 to i32*
  store i32 0, i32* %2473, align 4
  %.pre277 = load i64, i64* %3, align 8
  br label %block_.L_40d8ff

block_.L_40d8ff:                                  ; preds = %block_.L_40d9e4, %block_.L_40d8f8
  %2474 = phi i64 [ %3537, %block_.L_40d9e4 ], [ %.pre277, %block_.L_40d8f8 ]
  %2475 = load i64, i64* %RBP.i, align 8
  %2476 = add i64 %2475, -12
  %2477 = add i64 %2474, 4
  store i64 %2477, i64* %3, align 8
  %2478 = inttoptr i64 %2476 to i32*
  %2479 = load i32, i32* %2478, align 4
  %2480 = add i32 %2479, -4
  %2481 = icmp ult i32 %2479, 4
  %2482 = zext i1 %2481 to i8
  store i8 %2482, i8* %14, align 1
  %2483 = and i32 %2480, 255
  %2484 = tail call i32 @llvm.ctpop.i32(i32 %2483)
  %2485 = trunc i32 %2484 to i8
  %2486 = and i8 %2485, 1
  %2487 = xor i8 %2486, 1
  store i8 %2487, i8* %21, align 1
  %2488 = xor i32 %2480, %2479
  %2489 = lshr i32 %2488, 4
  %2490 = trunc i32 %2489 to i8
  %2491 = and i8 %2490, 1
  store i8 %2491, i8* %27, align 1
  %2492 = icmp eq i32 %2480, 0
  %2493 = zext i1 %2492 to i8
  store i8 %2493, i8* %30, align 1
  %2494 = lshr i32 %2480, 31
  %2495 = trunc i32 %2494 to i8
  store i8 %2495, i8* %33, align 1
  %2496 = lshr i32 %2479, 31
  %2497 = xor i32 %2494, %2496
  %2498 = add nuw nsw i32 %2497, %2496
  %2499 = icmp eq i32 %2498, 2
  %2500 = zext i1 %2499 to i8
  store i8 %2500, i8* %39, align 1
  %2501 = icmp ne i8 %2495, 0
  %2502 = xor i1 %2501, %2499
  %.v358 = select i1 %2502, i64 10, i64 427
  %2503 = add i64 %2474, %.v358
  store i64 %2503, i64* %3, align 8
  %2504 = add i64 %2475, -36
  br i1 %2502, label %block_40d909, label %block_.L_40daaa

block_40d909:                                     ; preds = %block_.L_40d8ff
  %2505 = add i64 %2503, 3
  store i64 %2505, i64* %3, align 8
  %2506 = inttoptr i64 %2504 to i32*
  %2507 = load i32, i32* %2506, align 4
  %2508 = zext i32 %2507 to i64
  store i64 %2508, i64* %RAX.i1862, align 8
  %2509 = add i64 %2503, 6
  store i64 %2509, i64* %3, align 8
  %2510 = load i32, i32* %2478, align 4
  %2511 = add i32 %2510, %2507
  %2512 = zext i32 %2511 to i64
  store i64 %2512, i64* %RAX.i1862, align 8
  %2513 = icmp ult i32 %2511, %2507
  %2514 = icmp ult i32 %2511, %2510
  %2515 = or i1 %2513, %2514
  %2516 = zext i1 %2515 to i8
  store i8 %2516, i8* %14, align 1
  %2517 = and i32 %2511, 255
  %2518 = tail call i32 @llvm.ctpop.i32(i32 %2517)
  %2519 = trunc i32 %2518 to i8
  %2520 = and i8 %2519, 1
  %2521 = xor i8 %2520, 1
  store i8 %2521, i8* %21, align 1
  %2522 = xor i32 %2510, %2507
  %2523 = xor i32 %2522, %2511
  %2524 = lshr i32 %2523, 4
  %2525 = trunc i32 %2524 to i8
  %2526 = and i8 %2525, 1
  store i8 %2526, i8* %27, align 1
  %2527 = icmp eq i32 %2511, 0
  %2528 = zext i1 %2527 to i8
  store i8 %2528, i8* %30, align 1
  %2529 = lshr i32 %2511, 31
  %2530 = trunc i32 %2529 to i8
  store i8 %2530, i8* %33, align 1
  %2531 = lshr i32 %2507, 31
  %2532 = lshr i32 %2510, 31
  %2533 = xor i32 %2529, %2531
  %2534 = xor i32 %2529, %2532
  %2535 = add nuw nsw i32 %2533, %2534
  %2536 = icmp eq i32 %2535, 2
  %2537 = zext i1 %2536 to i8
  store i8 %2537, i8* %39, align 1
  %2538 = add i64 %2475, -40
  %2539 = add i64 %2503, 9
  store i64 %2539, i64* %3, align 8
  %2540 = inttoptr i64 %2538 to i32*
  store i32 %2511, i32* %2540, align 4
  %2541 = load i64, i64* %RBP.i, align 8
  %2542 = add i64 %2541, -16
  %2543 = load i64, i64* %3, align 8
  %2544 = add i64 %2543, 7
  store i64 %2544, i64* %3, align 8
  %2545 = inttoptr i64 %2542 to i32*
  store i32 0, i32* %2545, align 4
  %.pre278 = load i64, i64* %3, align 8
  br label %block_.L_40d919

block_.L_40d919:                                  ; preds = %block_40d923, %block_40d909
  %2546 = phi i64 [ %3092, %block_40d923 ], [ %.pre278, %block_40d909 ]
  %2547 = load i64, i64* %RBP.i, align 8
  %2548 = add i64 %2547, -16
  %2549 = add i64 %2546, 4
  store i64 %2549, i64* %3, align 8
  %2550 = inttoptr i64 %2548 to i32*
  %2551 = load i32, i32* %2550, align 4
  %2552 = add i32 %2551, -2
  %2553 = icmp ult i32 %2551, 2
  %2554 = zext i1 %2553 to i8
  store i8 %2554, i8* %14, align 1
  %2555 = and i32 %2552, 255
  %2556 = tail call i32 @llvm.ctpop.i32(i32 %2555)
  %2557 = trunc i32 %2556 to i8
  %2558 = and i8 %2557, 1
  %2559 = xor i8 %2558, 1
  store i8 %2559, i8* %21, align 1
  %2560 = xor i32 %2552, %2551
  %2561 = lshr i32 %2560, 4
  %2562 = trunc i32 %2561 to i8
  %2563 = and i8 %2562, 1
  store i8 %2563, i8* %27, align 1
  %2564 = icmp eq i32 %2552, 0
  %2565 = zext i1 %2564 to i8
  store i8 %2565, i8* %30, align 1
  %2566 = lshr i32 %2552, 31
  %2567 = trunc i32 %2566 to i8
  store i8 %2567, i8* %33, align 1
  %2568 = lshr i32 %2551, 31
  %2569 = xor i32 %2566, %2568
  %2570 = add nuw nsw i32 %2569, %2568
  %2571 = icmp eq i32 %2570, 2
  %2572 = zext i1 %2571 to i8
  store i8 %2572, i8* %39, align 1
  %2573 = icmp ne i8 %2567, 0
  %2574 = xor i1 %2573, %2571
  %.v422 = select i1 %2574, i64 10, i64 203
  %2575 = add i64 %2546, %.v422
  store i64 %2575, i64* %3, align 8
  br i1 %2574, label %block_40d923, label %block_.L_40d9e4

block_40d923:                                     ; preds = %block_.L_40d919
  store i64 3, i64* %RAX.i1862, align 8
  %2576 = add i64 %2575, 8
  store i64 %2576, i64* %3, align 8
  %2577 = load i32, i32* %2550, align 4
  %2578 = sub i32 3, %2577
  %2579 = zext i32 %2578 to i64
  store i64 %2579, i64* %RAX.i1862, align 8
  %2580 = add i64 %2547, -24
  %2581 = add i64 %2575, 11
  store i64 %2581, i64* %3, align 8
  %2582 = inttoptr i64 %2580 to i32*
  store i32 %2578, i32* %2582, align 4
  %2583 = load i64, i64* %3, align 8
  %2584 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2585 = add i64 %2584, 13112
  store i64 %2585, i64* %RCX.i2028, align 8
  %2586 = icmp ugt i64 %2584, -13113
  %2587 = zext i1 %2586 to i8
  store i8 %2587, i8* %14, align 1
  %2588 = trunc i64 %2585 to i32
  %2589 = and i32 %2588, 255
  %2590 = tail call i32 @llvm.ctpop.i32(i32 %2589)
  %2591 = trunc i32 %2590 to i8
  %2592 = and i8 %2591, 1
  %2593 = xor i8 %2592, 1
  store i8 %2593, i8* %21, align 1
  %2594 = xor i64 %2584, 16
  %2595 = xor i64 %2594, %2585
  %2596 = lshr i64 %2595, 4
  %2597 = trunc i64 %2596 to i8
  %2598 = and i8 %2597, 1
  store i8 %2598, i8* %27, align 1
  %2599 = icmp eq i64 %2585, 0
  %2600 = zext i1 %2599 to i8
  store i8 %2600, i8* %30, align 1
  %2601 = lshr i64 %2585, 63
  %2602 = trunc i64 %2601 to i8
  store i8 %2602, i8* %33, align 1
  %2603 = lshr i64 %2584, 63
  %2604 = xor i64 %2601, %2603
  %2605 = add nuw nsw i64 %2604, %2601
  %2606 = icmp eq i64 %2605, 2
  %2607 = zext i1 %2606 to i8
  store i8 %2607, i8* %39, align 1
  %2608 = load i64, i64* %RBP.i, align 8
  %2609 = add i64 %2608, -40
  %2610 = add i64 %2583, 19
  store i64 %2610, i64* %3, align 8
  %2611 = inttoptr i64 %2609 to i32*
  %2612 = load i32, i32* %2611, align 4
  %2613 = sext i32 %2612 to i64
  %2614 = shl nsw i64 %2613, 6
  store i64 %2614, i64* %RDX.i4840, align 8
  %2615 = add i64 %2614, %2585
  store i64 %2615, i64* %RCX.i2028, align 8
  %2616 = icmp ult i64 %2615, %2585
  %2617 = icmp ult i64 %2615, %2614
  %2618 = or i1 %2616, %2617
  %2619 = zext i1 %2618 to i8
  store i8 %2619, i8* %14, align 1
  %2620 = trunc i64 %2615 to i32
  %2621 = and i32 %2620, 255
  %2622 = tail call i32 @llvm.ctpop.i32(i32 %2621)
  %2623 = trunc i32 %2622 to i8
  %2624 = and i8 %2623, 1
  %2625 = xor i8 %2624, 1
  store i8 %2625, i8* %21, align 1
  %2626 = xor i64 %2585, %2615
  %2627 = lshr i64 %2626, 4
  %2628 = trunc i64 %2627 to i8
  %2629 = and i8 %2628, 1
  store i8 %2629, i8* %27, align 1
  %2630 = icmp eq i64 %2615, 0
  %2631 = zext i1 %2630 to i8
  store i8 %2631, i8* %30, align 1
  %2632 = lshr i64 %2615, 63
  %2633 = trunc i64 %2632 to i8
  store i8 %2633, i8* %33, align 1
  %2634 = lshr i64 %2613, 57
  %2635 = and i64 %2634, 1
  %2636 = xor i64 %2632, %2601
  %2637 = xor i64 %2632, %2635
  %2638 = add nuw nsw i64 %2636, %2637
  %2639 = icmp eq i64 %2638, 2
  %2640 = zext i1 %2639 to i8
  store i8 %2640, i8* %39, align 1
  %2641 = add i64 %2608, -32
  %2642 = add i64 %2583, 29
  store i64 %2642, i64* %3, align 8
  %2643 = inttoptr i64 %2641 to i32*
  %2644 = load i32, i32* %2643, align 4
  %2645 = zext i32 %2644 to i64
  store i64 %2645, i64* %RAX.i1862, align 8
  %2646 = add i64 %2608, -16
  %2647 = add i64 %2583, 32
  store i64 %2647, i64* %3, align 8
  %2648 = inttoptr i64 %2646 to i32*
  %2649 = load i32, i32* %2648, align 4
  %2650 = add i32 %2649, %2644
  %2651 = zext i32 %2650 to i64
  store i64 %2651, i64* %RAX.i1862, align 8
  %2652 = icmp ult i32 %2650, %2644
  %2653 = icmp ult i32 %2650, %2649
  %2654 = or i1 %2652, %2653
  %2655 = zext i1 %2654 to i8
  store i8 %2655, i8* %14, align 1
  %2656 = and i32 %2650, 255
  %2657 = tail call i32 @llvm.ctpop.i32(i32 %2656)
  %2658 = trunc i32 %2657 to i8
  %2659 = and i8 %2658, 1
  %2660 = xor i8 %2659, 1
  store i8 %2660, i8* %21, align 1
  %2661 = xor i32 %2649, %2644
  %2662 = xor i32 %2661, %2650
  %2663 = lshr i32 %2662, 4
  %2664 = trunc i32 %2663 to i8
  %2665 = and i8 %2664, 1
  store i8 %2665, i8* %27, align 1
  %2666 = icmp eq i32 %2650, 0
  %2667 = zext i1 %2666 to i8
  store i8 %2667, i8* %30, align 1
  %2668 = lshr i32 %2650, 31
  %2669 = trunc i32 %2668 to i8
  store i8 %2669, i8* %33, align 1
  %2670 = lshr i32 %2644, 31
  %2671 = lshr i32 %2649, 31
  %2672 = xor i32 %2668, %2670
  %2673 = xor i32 %2668, %2671
  %2674 = add nuw nsw i32 %2672, %2673
  %2675 = icmp eq i32 %2674, 2
  %2676 = zext i1 %2675 to i8
  store i8 %2676, i8* %39, align 1
  %2677 = sext i32 %2650 to i64
  store i64 %2677, i64* %RDX.i4840, align 8
  %2678 = shl nsw i64 %2677, 2
  %2679 = add i64 %2615, %2678
  %2680 = add i64 %2583, 38
  store i64 %2680, i64* %3, align 8
  %2681 = inttoptr i64 %2679 to i32*
  %2682 = load i32, i32* %2681, align 4
  %2683 = zext i32 %2682 to i64
  store i64 %2683, i64* %RAX.i1862, align 8
  %2684 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2685 = add i64 %2684, 13112
  store i64 %2685, i64* %RCX.i2028, align 8
  %2686 = icmp ugt i64 %2684, -13113
  %2687 = zext i1 %2686 to i8
  store i8 %2687, i8* %14, align 1
  %2688 = trunc i64 %2685 to i32
  %2689 = and i32 %2688, 255
  %2690 = tail call i32 @llvm.ctpop.i32(i32 %2689)
  %2691 = trunc i32 %2690 to i8
  %2692 = and i8 %2691, 1
  %2693 = xor i8 %2692, 1
  store i8 %2693, i8* %21, align 1
  %2694 = xor i64 %2684, 16
  %2695 = xor i64 %2694, %2685
  %2696 = lshr i64 %2695, 4
  %2697 = trunc i64 %2696 to i8
  %2698 = and i8 %2697, 1
  store i8 %2698, i8* %27, align 1
  %2699 = icmp eq i64 %2685, 0
  %2700 = zext i1 %2699 to i8
  store i8 %2700, i8* %30, align 1
  %2701 = lshr i64 %2685, 63
  %2702 = trunc i64 %2701 to i8
  store i8 %2702, i8* %33, align 1
  %2703 = lshr i64 %2684, 63
  %2704 = xor i64 %2701, %2703
  %2705 = add nuw nsw i64 %2704, %2701
  %2706 = icmp eq i64 %2705, 2
  %2707 = zext i1 %2706 to i8
  store i8 %2707, i8* %39, align 1
  %2708 = load i64, i64* %RBP.i, align 8
  %2709 = add i64 %2708, -40
  %2710 = add i64 %2583, 57
  store i64 %2710, i64* %3, align 8
  %2711 = inttoptr i64 %2709 to i32*
  %2712 = load i32, i32* %2711, align 4
  %2713 = sext i32 %2712 to i64
  %2714 = shl nsw i64 %2713, 6
  store i64 %2714, i64* %RDX.i4840, align 8
  %2715 = add i64 %2714, %2685
  store i64 %2715, i64* %RCX.i2028, align 8
  %2716 = icmp ult i64 %2715, %2685
  %2717 = icmp ult i64 %2715, %2714
  %2718 = or i1 %2716, %2717
  %2719 = zext i1 %2718 to i8
  store i8 %2719, i8* %14, align 1
  %2720 = trunc i64 %2715 to i32
  %2721 = and i32 %2720, 255
  %2722 = tail call i32 @llvm.ctpop.i32(i32 %2721)
  %2723 = trunc i32 %2722 to i8
  %2724 = and i8 %2723, 1
  %2725 = xor i8 %2724, 1
  store i8 %2725, i8* %21, align 1
  %2726 = xor i64 %2685, %2715
  %2727 = lshr i64 %2726, 4
  %2728 = trunc i64 %2727 to i8
  %2729 = and i8 %2728, 1
  store i8 %2729, i8* %27, align 1
  %2730 = icmp eq i64 %2715, 0
  %2731 = zext i1 %2730 to i8
  store i8 %2731, i8* %30, align 1
  %2732 = lshr i64 %2715, 63
  %2733 = trunc i64 %2732 to i8
  store i8 %2733, i8* %33, align 1
  %2734 = lshr i64 %2713, 57
  %2735 = and i64 %2734, 1
  %2736 = xor i64 %2732, %2701
  %2737 = xor i64 %2732, %2735
  %2738 = add nuw nsw i64 %2736, %2737
  %2739 = icmp eq i64 %2738, 2
  %2740 = zext i1 %2739 to i8
  store i8 %2740, i8* %39, align 1
  %2741 = add i64 %2708, -32
  %2742 = add i64 %2583, 67
  store i64 %2742, i64* %3, align 8
  %2743 = inttoptr i64 %2741 to i32*
  %2744 = load i32, i32* %2743, align 4
  %2745 = zext i32 %2744 to i64
  store i64 %2745, i64* %RSI.i2426, align 8
  %2746 = add i64 %2708, -24
  %2747 = add i64 %2583, 70
  store i64 %2747, i64* %3, align 8
  %2748 = inttoptr i64 %2746 to i32*
  %2749 = load i32, i32* %2748, align 4
  %2750 = add i32 %2749, %2744
  %2751 = zext i32 %2750 to i64
  store i64 %2751, i64* %RSI.i2426, align 8
  %2752 = icmp ult i32 %2750, %2744
  %2753 = icmp ult i32 %2750, %2749
  %2754 = or i1 %2752, %2753
  %2755 = zext i1 %2754 to i8
  store i8 %2755, i8* %14, align 1
  %2756 = and i32 %2750, 255
  %2757 = tail call i32 @llvm.ctpop.i32(i32 %2756)
  %2758 = trunc i32 %2757 to i8
  %2759 = and i8 %2758, 1
  %2760 = xor i8 %2759, 1
  store i8 %2760, i8* %21, align 1
  %2761 = xor i32 %2749, %2744
  %2762 = xor i32 %2761, %2750
  %2763 = lshr i32 %2762, 4
  %2764 = trunc i32 %2763 to i8
  %2765 = and i8 %2764, 1
  store i8 %2765, i8* %27, align 1
  %2766 = icmp eq i32 %2750, 0
  %2767 = zext i1 %2766 to i8
  store i8 %2767, i8* %30, align 1
  %2768 = lshr i32 %2750, 31
  %2769 = trunc i32 %2768 to i8
  store i8 %2769, i8* %33, align 1
  %2770 = lshr i32 %2744, 31
  %2771 = lshr i32 %2749, 31
  %2772 = xor i32 %2768, %2770
  %2773 = xor i32 %2768, %2771
  %2774 = add nuw nsw i32 %2772, %2773
  %2775 = icmp eq i32 %2774, 2
  %2776 = zext i1 %2775 to i8
  store i8 %2776, i8* %39, align 1
  %2777 = sext i32 %2750 to i64
  store i64 %2777, i64* %RDX.i4840, align 8
  %2778 = load i64, i64* %RAX.i1862, align 8
  %2779 = shl nsw i64 %2777, 2
  %2780 = add i64 %2715, %2779
  %2781 = add i64 %2583, 76
  store i64 %2781, i64* %3, align 8
  %2782 = trunc i64 %2778 to i32
  %2783 = inttoptr i64 %2780 to i32*
  %2784 = load i32, i32* %2783, align 4
  %2785 = add i32 %2784, %2782
  %2786 = zext i32 %2785 to i64
  store i64 %2786, i64* %RAX.i1862, align 8
  %2787 = icmp ult i32 %2785, %2782
  %2788 = icmp ult i32 %2785, %2784
  %2789 = or i1 %2787, %2788
  %2790 = zext i1 %2789 to i8
  store i8 %2790, i8* %14, align 1
  %2791 = and i32 %2785, 255
  %2792 = tail call i32 @llvm.ctpop.i32(i32 %2791)
  %2793 = trunc i32 %2792 to i8
  %2794 = and i8 %2793, 1
  %2795 = xor i8 %2794, 1
  store i8 %2795, i8* %21, align 1
  %2796 = xor i32 %2784, %2782
  %2797 = xor i32 %2796, %2785
  %2798 = lshr i32 %2797, 4
  %2799 = trunc i32 %2798 to i8
  %2800 = and i8 %2799, 1
  store i8 %2800, i8* %27, align 1
  %2801 = icmp eq i32 %2785, 0
  %2802 = zext i1 %2801 to i8
  store i8 %2802, i8* %30, align 1
  %2803 = lshr i32 %2785, 31
  %2804 = trunc i32 %2803 to i8
  store i8 %2804, i8* %33, align 1
  %2805 = lshr i32 %2782, 31
  %2806 = lshr i32 %2784, 31
  %2807 = xor i32 %2803, %2805
  %2808 = xor i32 %2803, %2806
  %2809 = add nuw nsw i32 %2807, %2808
  %2810 = icmp eq i32 %2809, 2
  %2811 = zext i1 %2810 to i8
  store i8 %2811, i8* %39, align 1
  %2812 = load i64, i64* %RBP.i, align 8
  %2813 = add i64 %2812, -16
  %2814 = add i64 %2583, 80
  store i64 %2814, i64* %3, align 8
  %2815 = inttoptr i64 %2813 to i32*
  %2816 = load i32, i32* %2815, align 4
  %2817 = sext i32 %2816 to i64
  %2818 = shl nsw i64 %2817, 2
  %2819 = add i64 %2812, -112
  %2820 = add i64 %2819, %2818
  %2821 = add i64 %2583, 84
  store i64 %2821, i64* %3, align 8
  %2822 = inttoptr i64 %2820 to i32*
  store i32 %2785, i32* %2822, align 4
  %2823 = load i64, i64* %3, align 8
  %2824 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2825 = add i64 %2824, 13112
  store i64 %2825, i64* %RCX.i2028, align 8
  %2826 = icmp ugt i64 %2824, -13113
  %2827 = zext i1 %2826 to i8
  store i8 %2827, i8* %14, align 1
  %2828 = trunc i64 %2825 to i32
  %2829 = and i32 %2828, 255
  %2830 = tail call i32 @llvm.ctpop.i32(i32 %2829)
  %2831 = trunc i32 %2830 to i8
  %2832 = and i8 %2831, 1
  %2833 = xor i8 %2832, 1
  store i8 %2833, i8* %21, align 1
  %2834 = xor i64 %2824, 16
  %2835 = xor i64 %2834, %2825
  %2836 = lshr i64 %2835, 4
  %2837 = trunc i64 %2836 to i8
  %2838 = and i8 %2837, 1
  store i8 %2838, i8* %27, align 1
  %2839 = icmp eq i64 %2825, 0
  %2840 = zext i1 %2839 to i8
  store i8 %2840, i8* %30, align 1
  %2841 = lshr i64 %2825, 63
  %2842 = trunc i64 %2841 to i8
  store i8 %2842, i8* %33, align 1
  %2843 = lshr i64 %2824, 63
  %2844 = xor i64 %2841, %2843
  %2845 = add nuw nsw i64 %2844, %2841
  %2846 = icmp eq i64 %2845, 2
  %2847 = zext i1 %2846 to i8
  store i8 %2847, i8* %39, align 1
  %2848 = load i64, i64* %RBP.i, align 8
  %2849 = add i64 %2848, -40
  %2850 = add i64 %2823, 19
  store i64 %2850, i64* %3, align 8
  %2851 = inttoptr i64 %2849 to i32*
  %2852 = load i32, i32* %2851, align 4
  %2853 = sext i32 %2852 to i64
  %2854 = shl nsw i64 %2853, 6
  store i64 %2854, i64* %RDX.i4840, align 8
  %2855 = add i64 %2854, %2825
  store i64 %2855, i64* %RCX.i2028, align 8
  %2856 = icmp ult i64 %2855, %2825
  %2857 = icmp ult i64 %2855, %2854
  %2858 = or i1 %2856, %2857
  %2859 = zext i1 %2858 to i8
  store i8 %2859, i8* %14, align 1
  %2860 = trunc i64 %2855 to i32
  %2861 = and i32 %2860, 255
  %2862 = tail call i32 @llvm.ctpop.i32(i32 %2861)
  %2863 = trunc i32 %2862 to i8
  %2864 = and i8 %2863, 1
  %2865 = xor i8 %2864, 1
  store i8 %2865, i8* %21, align 1
  %2866 = xor i64 %2825, %2855
  %2867 = lshr i64 %2866, 4
  %2868 = trunc i64 %2867 to i8
  %2869 = and i8 %2868, 1
  store i8 %2869, i8* %27, align 1
  %2870 = icmp eq i64 %2855, 0
  %2871 = zext i1 %2870 to i8
  store i8 %2871, i8* %30, align 1
  %2872 = lshr i64 %2855, 63
  %2873 = trunc i64 %2872 to i8
  store i8 %2873, i8* %33, align 1
  %2874 = lshr i64 %2853, 57
  %2875 = and i64 %2874, 1
  %2876 = xor i64 %2872, %2841
  %2877 = xor i64 %2872, %2875
  %2878 = add nuw nsw i64 %2876, %2877
  %2879 = icmp eq i64 %2878, 2
  %2880 = zext i1 %2879 to i8
  store i8 %2880, i8* %39, align 1
  %2881 = add i64 %2848, -32
  %2882 = add i64 %2823, 29
  store i64 %2882, i64* %3, align 8
  %2883 = inttoptr i64 %2881 to i32*
  %2884 = load i32, i32* %2883, align 4
  %2885 = zext i32 %2884 to i64
  store i64 %2885, i64* %RAX.i1862, align 8
  %2886 = add i64 %2848, -16
  %2887 = add i64 %2823, 32
  store i64 %2887, i64* %3, align 8
  %2888 = inttoptr i64 %2886 to i32*
  %2889 = load i32, i32* %2888, align 4
  %2890 = add i32 %2889, %2884
  %2891 = zext i32 %2890 to i64
  store i64 %2891, i64* %RAX.i1862, align 8
  %2892 = icmp ult i32 %2890, %2884
  %2893 = icmp ult i32 %2890, %2889
  %2894 = or i1 %2892, %2893
  %2895 = zext i1 %2894 to i8
  store i8 %2895, i8* %14, align 1
  %2896 = and i32 %2890, 255
  %2897 = tail call i32 @llvm.ctpop.i32(i32 %2896)
  %2898 = trunc i32 %2897 to i8
  %2899 = and i8 %2898, 1
  %2900 = xor i8 %2899, 1
  store i8 %2900, i8* %21, align 1
  %2901 = xor i32 %2889, %2884
  %2902 = xor i32 %2901, %2890
  %2903 = lshr i32 %2902, 4
  %2904 = trunc i32 %2903 to i8
  %2905 = and i8 %2904, 1
  store i8 %2905, i8* %27, align 1
  %2906 = icmp eq i32 %2890, 0
  %2907 = zext i1 %2906 to i8
  store i8 %2907, i8* %30, align 1
  %2908 = lshr i32 %2890, 31
  %2909 = trunc i32 %2908 to i8
  store i8 %2909, i8* %33, align 1
  %2910 = lshr i32 %2884, 31
  %2911 = lshr i32 %2889, 31
  %2912 = xor i32 %2908, %2910
  %2913 = xor i32 %2908, %2911
  %2914 = add nuw nsw i32 %2912, %2913
  %2915 = icmp eq i32 %2914, 2
  %2916 = zext i1 %2915 to i8
  store i8 %2916, i8* %39, align 1
  %2917 = sext i32 %2890 to i64
  store i64 %2917, i64* %RDX.i4840, align 8
  %2918 = shl nsw i64 %2917, 2
  %2919 = add i64 %2855, %2918
  %2920 = add i64 %2823, 38
  store i64 %2920, i64* %3, align 8
  %2921 = inttoptr i64 %2919 to i32*
  %2922 = load i32, i32* %2921, align 4
  %2923 = zext i32 %2922 to i64
  store i64 %2923, i64* %RAX.i1862, align 8
  %2924 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2925 = add i64 %2924, 13112
  store i64 %2925, i64* %RCX.i2028, align 8
  %2926 = icmp ugt i64 %2924, -13113
  %2927 = zext i1 %2926 to i8
  store i8 %2927, i8* %14, align 1
  %2928 = trunc i64 %2925 to i32
  %2929 = and i32 %2928, 255
  %2930 = tail call i32 @llvm.ctpop.i32(i32 %2929)
  %2931 = trunc i32 %2930 to i8
  %2932 = and i8 %2931, 1
  %2933 = xor i8 %2932, 1
  store i8 %2933, i8* %21, align 1
  %2934 = xor i64 %2924, 16
  %2935 = xor i64 %2934, %2925
  %2936 = lshr i64 %2935, 4
  %2937 = trunc i64 %2936 to i8
  %2938 = and i8 %2937, 1
  store i8 %2938, i8* %27, align 1
  %2939 = icmp eq i64 %2925, 0
  %2940 = zext i1 %2939 to i8
  store i8 %2940, i8* %30, align 1
  %2941 = lshr i64 %2925, 63
  %2942 = trunc i64 %2941 to i8
  store i8 %2942, i8* %33, align 1
  %2943 = lshr i64 %2924, 63
  %2944 = xor i64 %2941, %2943
  %2945 = add nuw nsw i64 %2944, %2941
  %2946 = icmp eq i64 %2945, 2
  %2947 = zext i1 %2946 to i8
  store i8 %2947, i8* %39, align 1
  %2948 = load i64, i64* %RBP.i, align 8
  %2949 = add i64 %2948, -40
  %2950 = add i64 %2823, 57
  store i64 %2950, i64* %3, align 8
  %2951 = inttoptr i64 %2949 to i32*
  %2952 = load i32, i32* %2951, align 4
  %2953 = sext i32 %2952 to i64
  %2954 = shl nsw i64 %2953, 6
  store i64 %2954, i64* %RDX.i4840, align 8
  %2955 = add i64 %2954, %2925
  store i64 %2955, i64* %RCX.i2028, align 8
  %2956 = icmp ult i64 %2955, %2925
  %2957 = icmp ult i64 %2955, %2954
  %2958 = or i1 %2956, %2957
  %2959 = zext i1 %2958 to i8
  store i8 %2959, i8* %14, align 1
  %2960 = trunc i64 %2955 to i32
  %2961 = and i32 %2960, 255
  %2962 = tail call i32 @llvm.ctpop.i32(i32 %2961)
  %2963 = trunc i32 %2962 to i8
  %2964 = and i8 %2963, 1
  %2965 = xor i8 %2964, 1
  store i8 %2965, i8* %21, align 1
  %2966 = xor i64 %2925, %2955
  %2967 = lshr i64 %2966, 4
  %2968 = trunc i64 %2967 to i8
  %2969 = and i8 %2968, 1
  store i8 %2969, i8* %27, align 1
  %2970 = icmp eq i64 %2955, 0
  %2971 = zext i1 %2970 to i8
  store i8 %2971, i8* %30, align 1
  %2972 = lshr i64 %2955, 63
  %2973 = trunc i64 %2972 to i8
  store i8 %2973, i8* %33, align 1
  %2974 = lshr i64 %2953, 57
  %2975 = and i64 %2974, 1
  %2976 = xor i64 %2972, %2941
  %2977 = xor i64 %2972, %2975
  %2978 = add nuw nsw i64 %2976, %2977
  %2979 = icmp eq i64 %2978, 2
  %2980 = zext i1 %2979 to i8
  store i8 %2980, i8* %39, align 1
  %2981 = add i64 %2948, -32
  %2982 = add i64 %2823, 67
  store i64 %2982, i64* %3, align 8
  %2983 = inttoptr i64 %2981 to i32*
  %2984 = load i32, i32* %2983, align 4
  %2985 = zext i32 %2984 to i64
  store i64 %2985, i64* %RSI.i2426, align 8
  %2986 = add i64 %2948, -24
  %2987 = add i64 %2823, 70
  store i64 %2987, i64* %3, align 8
  %2988 = inttoptr i64 %2986 to i32*
  %2989 = load i32, i32* %2988, align 4
  %2990 = add i32 %2989, %2984
  %2991 = zext i32 %2990 to i64
  store i64 %2991, i64* %RSI.i2426, align 8
  %2992 = icmp ult i32 %2990, %2984
  %2993 = icmp ult i32 %2990, %2989
  %2994 = or i1 %2992, %2993
  %2995 = zext i1 %2994 to i8
  store i8 %2995, i8* %14, align 1
  %2996 = and i32 %2990, 255
  %2997 = tail call i32 @llvm.ctpop.i32(i32 %2996)
  %2998 = trunc i32 %2997 to i8
  %2999 = and i8 %2998, 1
  %3000 = xor i8 %2999, 1
  store i8 %3000, i8* %21, align 1
  %3001 = xor i32 %2989, %2984
  %3002 = xor i32 %3001, %2990
  %3003 = lshr i32 %3002, 4
  %3004 = trunc i32 %3003 to i8
  %3005 = and i8 %3004, 1
  store i8 %3005, i8* %27, align 1
  %3006 = icmp eq i32 %2990, 0
  %3007 = zext i1 %3006 to i8
  store i8 %3007, i8* %30, align 1
  %3008 = lshr i32 %2990, 31
  %3009 = trunc i32 %3008 to i8
  store i8 %3009, i8* %33, align 1
  %3010 = lshr i32 %2984, 31
  %3011 = lshr i32 %2989, 31
  %3012 = xor i32 %3008, %3010
  %3013 = xor i32 %3008, %3011
  %3014 = add nuw nsw i32 %3012, %3013
  %3015 = icmp eq i32 %3014, 2
  %3016 = zext i1 %3015 to i8
  store i8 %3016, i8* %39, align 1
  %3017 = sext i32 %2990 to i64
  store i64 %3017, i64* %RDX.i4840, align 8
  %3018 = load i64, i64* %RAX.i1862, align 8
  %3019 = shl nsw i64 %3017, 2
  %3020 = add i64 %2955, %3019
  %3021 = add i64 %2823, 76
  store i64 %3021, i64* %3, align 8
  %3022 = trunc i64 %3018 to i32
  %3023 = inttoptr i64 %3020 to i32*
  %3024 = load i32, i32* %3023, align 4
  %3025 = sub i32 %3022, %3024
  %3026 = zext i32 %3025 to i64
  store i64 %3026, i64* %RAX.i1862, align 8
  %3027 = icmp ult i32 %3022, %3024
  %3028 = zext i1 %3027 to i8
  store i8 %3028, i8* %14, align 1
  %3029 = and i32 %3025, 255
  %3030 = tail call i32 @llvm.ctpop.i32(i32 %3029)
  %3031 = trunc i32 %3030 to i8
  %3032 = and i8 %3031, 1
  %3033 = xor i8 %3032, 1
  store i8 %3033, i8* %21, align 1
  %3034 = xor i32 %3024, %3022
  %3035 = xor i32 %3034, %3025
  %3036 = lshr i32 %3035, 4
  %3037 = trunc i32 %3036 to i8
  %3038 = and i8 %3037, 1
  store i8 %3038, i8* %27, align 1
  %3039 = icmp eq i32 %3025, 0
  %3040 = zext i1 %3039 to i8
  store i8 %3040, i8* %30, align 1
  %3041 = lshr i32 %3025, 31
  %3042 = trunc i32 %3041 to i8
  store i8 %3042, i8* %33, align 1
  %3043 = lshr i32 %3022, 31
  %3044 = lshr i32 %3024, 31
  %3045 = xor i32 %3044, %3043
  %3046 = xor i32 %3041, %3043
  %3047 = add nuw nsw i32 %3046, %3045
  %3048 = icmp eq i32 %3047, 2
  %3049 = zext i1 %3048 to i8
  store i8 %3049, i8* %39, align 1
  %3050 = load i64, i64* %RBP.i, align 8
  %3051 = add i64 %3050, -24
  %3052 = add i64 %2823, 80
  store i64 %3052, i64* %3, align 8
  %3053 = inttoptr i64 %3051 to i32*
  %3054 = load i32, i32* %3053, align 4
  %3055 = sext i32 %3054 to i64
  store i64 %3055, i64* %RCX.i2028, align 8
  %3056 = shl nsw i64 %3055, 2
  %3057 = add i64 %3050, -112
  %3058 = add i64 %3057, %3056
  %3059 = add i64 %2823, 84
  store i64 %3059, i64* %3, align 8
  %3060 = inttoptr i64 %3058 to i32*
  store i32 %3025, i32* %3060, align 4
  %3061 = load i64, i64* %RBP.i, align 8
  %3062 = add i64 %3061, -16
  %3063 = load i64, i64* %3, align 8
  %3064 = add i64 %3063, 3
  store i64 %3064, i64* %3, align 8
  %3065 = inttoptr i64 %3062 to i32*
  %3066 = load i32, i32* %3065, align 4
  %3067 = add i32 %3066, 1
  %3068 = zext i32 %3067 to i64
  store i64 %3068, i64* %RAX.i1862, align 8
  %3069 = icmp eq i32 %3066, -1
  %3070 = icmp eq i32 %3067, 0
  %3071 = or i1 %3069, %3070
  %3072 = zext i1 %3071 to i8
  store i8 %3072, i8* %14, align 1
  %3073 = and i32 %3067, 255
  %3074 = tail call i32 @llvm.ctpop.i32(i32 %3073)
  %3075 = trunc i32 %3074 to i8
  %3076 = and i8 %3075, 1
  %3077 = xor i8 %3076, 1
  store i8 %3077, i8* %21, align 1
  %3078 = xor i32 %3067, %3066
  %3079 = lshr i32 %3078, 4
  %3080 = trunc i32 %3079 to i8
  %3081 = and i8 %3080, 1
  store i8 %3081, i8* %27, align 1
  %3082 = zext i1 %3070 to i8
  store i8 %3082, i8* %30, align 1
  %3083 = lshr i32 %3067, 31
  %3084 = trunc i32 %3083 to i8
  store i8 %3084, i8* %33, align 1
  %3085 = lshr i32 %3066, 31
  %3086 = xor i32 %3083, %3085
  %3087 = add nuw nsw i32 %3086, %3083
  %3088 = icmp eq i32 %3087, 2
  %3089 = zext i1 %3088 to i8
  store i8 %3089, i8* %39, align 1
  %3090 = add i64 %3063, 9
  store i64 %3090, i64* %3, align 8
  store i32 %3067, i32* %3065, align 4
  %3091 = load i64, i64* %3, align 8
  %3092 = add i64 %3091, -198
  store i64 %3092, i64* %3, align 8
  br label %block_.L_40d919

block_.L_40d9e4:                                  ; preds = %block_.L_40d919
  %3093 = add i64 %2547, -112
  %3094 = add i64 %2575, 3
  store i64 %3094, i64* %3, align 8
  %3095 = inttoptr i64 %3093 to i32*
  %3096 = load i32, i32* %3095, align 4
  %3097 = zext i32 %3096 to i64
  store i64 %3097, i64* %RAX.i1862, align 8
  %3098 = add i64 %2547, -108
  %3099 = add i64 %2575, 6
  store i64 %3099, i64* %3, align 8
  %3100 = inttoptr i64 %3098 to i32*
  %3101 = load i32, i32* %3100, align 4
  %3102 = add i32 %3101, %3096
  %3103 = zext i32 %3102 to i64
  store i64 %3103, i64* %RAX.i1862, align 8
  %3104 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %3105 = add i64 %3104, 13112
  store i64 %3105, i64* %RCX.i2028, align 8
  %3106 = icmp ugt i64 %3104, -13113
  %3107 = zext i1 %3106 to i8
  store i8 %3107, i8* %14, align 1
  %3108 = trunc i64 %3105 to i32
  %3109 = and i32 %3108, 255
  %3110 = tail call i32 @llvm.ctpop.i32(i32 %3109)
  %3111 = trunc i32 %3110 to i8
  %3112 = and i8 %3111, 1
  %3113 = xor i8 %3112, 1
  store i8 %3113, i8* %21, align 1
  %3114 = xor i64 %3104, 16
  %3115 = xor i64 %3114, %3105
  %3116 = lshr i64 %3115, 4
  %3117 = trunc i64 %3116 to i8
  %3118 = and i8 %3117, 1
  store i8 %3118, i8* %27, align 1
  %3119 = icmp eq i64 %3105, 0
  %3120 = zext i1 %3119 to i8
  store i8 %3120, i8* %30, align 1
  %3121 = lshr i64 %3105, 63
  %3122 = trunc i64 %3121 to i8
  store i8 %3122, i8* %33, align 1
  %3123 = lshr i64 %3104, 63
  %3124 = xor i64 %3121, %3123
  %3125 = add nuw nsw i64 %3124, %3121
  %3126 = icmp eq i64 %3125, 2
  %3127 = zext i1 %3126 to i8
  store i8 %3127, i8* %39, align 1
  %3128 = add i64 %2547, -40
  %3129 = add i64 %2575, 25
  store i64 %3129, i64* %3, align 8
  %3130 = inttoptr i64 %3128 to i32*
  %3131 = load i32, i32* %3130, align 4
  %3132 = sext i32 %3131 to i64
  %3133 = shl nsw i64 %3132, 6
  store i64 %3133, i64* %RDX.i4840, align 8
  %3134 = add i64 %3133, %3105
  store i64 %3134, i64* %RCX.i2028, align 8
  %3135 = icmp ult i64 %3134, %3105
  %3136 = icmp ult i64 %3134, %3133
  %3137 = or i1 %3135, %3136
  %3138 = zext i1 %3137 to i8
  store i8 %3138, i8* %14, align 1
  %3139 = trunc i64 %3134 to i32
  %3140 = and i32 %3139, 255
  %3141 = tail call i32 @llvm.ctpop.i32(i32 %3140)
  %3142 = trunc i32 %3141 to i8
  %3143 = and i8 %3142, 1
  %3144 = xor i8 %3143, 1
  store i8 %3144, i8* %21, align 1
  %3145 = xor i64 %3105, %3134
  %3146 = lshr i64 %3145, 4
  %3147 = trunc i64 %3146 to i8
  %3148 = and i8 %3147, 1
  store i8 %3148, i8* %27, align 1
  %3149 = icmp eq i64 %3134, 0
  %3150 = zext i1 %3149 to i8
  store i8 %3150, i8* %30, align 1
  %3151 = lshr i64 %3134, 63
  %3152 = trunc i64 %3151 to i8
  store i8 %3152, i8* %33, align 1
  %3153 = lshr i64 %3132, 57
  %3154 = and i64 %3153, 1
  %3155 = xor i64 %3151, %3121
  %3156 = xor i64 %3151, %3154
  %3157 = add nuw nsw i64 %3155, %3156
  %3158 = icmp eq i64 %3157, 2
  %3159 = zext i1 %3158 to i8
  store i8 %3159, i8* %39, align 1
  %3160 = load i64, i64* %RBP.i, align 8
  %3161 = add i64 %3160, -32
  %3162 = add i64 %2575, 35
  store i64 %3162, i64* %3, align 8
  %3163 = inttoptr i64 %3161 to i32*
  %3164 = load i32, i32* %3163, align 4
  %3165 = zext i32 %3164 to i64
  store i64 %3165, i64* %RSI.i2426, align 8
  store i8 0, i8* %14, align 1
  %3166 = and i32 %3164, 255
  %3167 = tail call i32 @llvm.ctpop.i32(i32 %3166)
  %3168 = trunc i32 %3167 to i8
  %3169 = and i8 %3168, 1
  %3170 = xor i8 %3169, 1
  store i8 %3170, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3171 = icmp eq i32 %3164, 0
  %3172 = zext i1 %3171 to i8
  store i8 %3172, i8* %30, align 1
  %3173 = lshr i32 %3164, 31
  %3174 = trunc i32 %3173 to i8
  store i8 %3174, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3175 = sext i32 %3164 to i64
  store i64 %3175, i64* %RDX.i4840, align 8
  %3176 = shl nsw i64 %3175, 2
  %3177 = add i64 %3134, %3176
  %3178 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %3179 = add i64 %2575, 44
  store i64 %3179, i64* %3, align 8
  %3180 = inttoptr i64 %3177 to i32*
  store i32 %3178, i32* %3180, align 4
  %3181 = load i64, i64* %RBP.i, align 8
  %3182 = add i64 %3181, -112
  %3183 = load i64, i64* %3, align 8
  %3184 = add i64 %3183, 3
  store i64 %3184, i64* %3, align 8
  %3185 = inttoptr i64 %3182 to i32*
  %3186 = load i32, i32* %3185, align 4
  %3187 = zext i32 %3186 to i64
  store i64 %3187, i64* %RAX.i1862, align 8
  %3188 = add i64 %3181, -108
  %3189 = add i64 %3183, 6
  store i64 %3189, i64* %3, align 8
  %3190 = inttoptr i64 %3188 to i32*
  %3191 = load i32, i32* %3190, align 4
  %3192 = sub i32 %3186, %3191
  %3193 = zext i32 %3192 to i64
  store i64 %3193, i64* %RAX.i1862, align 8
  %3194 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %3195 = add i64 %3194, 13112
  store i64 %3195, i64* %RCX.i2028, align 8
  %3196 = icmp ugt i64 %3194, -13113
  %3197 = zext i1 %3196 to i8
  store i8 %3197, i8* %14, align 1
  %3198 = trunc i64 %3195 to i32
  %3199 = and i32 %3198, 255
  %3200 = tail call i32 @llvm.ctpop.i32(i32 %3199)
  %3201 = trunc i32 %3200 to i8
  %3202 = and i8 %3201, 1
  %3203 = xor i8 %3202, 1
  store i8 %3203, i8* %21, align 1
  %3204 = xor i64 %3194, 16
  %3205 = xor i64 %3204, %3195
  %3206 = lshr i64 %3205, 4
  %3207 = trunc i64 %3206 to i8
  %3208 = and i8 %3207, 1
  store i8 %3208, i8* %27, align 1
  %3209 = icmp eq i64 %3195, 0
  %3210 = zext i1 %3209 to i8
  store i8 %3210, i8* %30, align 1
  %3211 = lshr i64 %3195, 63
  %3212 = trunc i64 %3211 to i8
  store i8 %3212, i8* %33, align 1
  %3213 = lshr i64 %3194, 63
  %3214 = xor i64 %3211, %3213
  %3215 = add nuw nsw i64 %3214, %3211
  %3216 = icmp eq i64 %3215, 2
  %3217 = zext i1 %3216 to i8
  store i8 %3217, i8* %39, align 1
  %3218 = add i64 %3181, -40
  %3219 = add i64 %3183, 25
  store i64 %3219, i64* %3, align 8
  %3220 = inttoptr i64 %3218 to i32*
  %3221 = load i32, i32* %3220, align 4
  %3222 = sext i32 %3221 to i64
  %3223 = shl nsw i64 %3222, 6
  store i64 %3223, i64* %RDX.i4840, align 8
  %3224 = add i64 %3223, %3195
  store i64 %3224, i64* %RCX.i2028, align 8
  %3225 = icmp ult i64 %3224, %3195
  %3226 = icmp ult i64 %3224, %3223
  %3227 = or i1 %3225, %3226
  %3228 = zext i1 %3227 to i8
  store i8 %3228, i8* %14, align 1
  %3229 = trunc i64 %3224 to i32
  %3230 = and i32 %3229, 255
  %3231 = tail call i32 @llvm.ctpop.i32(i32 %3230)
  %3232 = trunc i32 %3231 to i8
  %3233 = and i8 %3232, 1
  %3234 = xor i8 %3233, 1
  store i8 %3234, i8* %21, align 1
  %3235 = xor i64 %3195, %3224
  %3236 = lshr i64 %3235, 4
  %3237 = trunc i64 %3236 to i8
  %3238 = and i8 %3237, 1
  store i8 %3238, i8* %27, align 1
  %3239 = icmp eq i64 %3224, 0
  %3240 = zext i1 %3239 to i8
  store i8 %3240, i8* %30, align 1
  %3241 = lshr i64 %3224, 63
  %3242 = trunc i64 %3241 to i8
  store i8 %3242, i8* %33, align 1
  %3243 = lshr i64 %3222, 57
  %3244 = and i64 %3243, 1
  %3245 = xor i64 %3241, %3211
  %3246 = xor i64 %3241, %3244
  %3247 = add nuw nsw i64 %3245, %3246
  %3248 = icmp eq i64 %3247, 2
  %3249 = zext i1 %3248 to i8
  store i8 %3249, i8* %39, align 1
  %3250 = load i64, i64* %RBP.i, align 8
  %3251 = add i64 %3250, -32
  %3252 = add i64 %3183, 35
  store i64 %3252, i64* %3, align 8
  %3253 = inttoptr i64 %3251 to i32*
  %3254 = load i32, i32* %3253, align 4
  %3255 = add i32 %3254, 2
  %3256 = zext i32 %3255 to i64
  store i64 %3256, i64* %RSI.i2426, align 8
  %3257 = icmp ugt i32 %3254, -3
  %3258 = zext i1 %3257 to i8
  store i8 %3258, i8* %14, align 1
  %3259 = and i32 %3255, 255
  %3260 = tail call i32 @llvm.ctpop.i32(i32 %3259)
  %3261 = trunc i32 %3260 to i8
  %3262 = and i8 %3261, 1
  %3263 = xor i8 %3262, 1
  store i8 %3263, i8* %21, align 1
  %3264 = xor i32 %3255, %3254
  %3265 = lshr i32 %3264, 4
  %3266 = trunc i32 %3265 to i8
  %3267 = and i8 %3266, 1
  store i8 %3267, i8* %27, align 1
  %3268 = icmp eq i32 %3255, 0
  %3269 = zext i1 %3268 to i8
  store i8 %3269, i8* %30, align 1
  %3270 = lshr i32 %3255, 31
  %3271 = trunc i32 %3270 to i8
  store i8 %3271, i8* %33, align 1
  %3272 = lshr i32 %3254, 31
  %3273 = xor i32 %3270, %3272
  %3274 = add nuw nsw i32 %3273, %3270
  %3275 = icmp eq i32 %3274, 2
  %3276 = zext i1 %3275 to i8
  store i8 %3276, i8* %39, align 1
  %3277 = sext i32 %3255 to i64
  store i64 %3277, i64* %RDX.i4840, align 8
  %3278 = shl nsw i64 %3277, 2
  %3279 = add i64 %3224, %3278
  %3280 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %3281 = add i64 %3183, 44
  store i64 %3281, i64* %3, align 8
  %3282 = inttoptr i64 %3279 to i32*
  store i32 %3280, i32* %3282, align 4
  %3283 = load i64, i64* %RBP.i, align 8
  %3284 = add i64 %3283, -100
  %3285 = load i64, i64* %3, align 8
  %3286 = add i64 %3285, 3
  store i64 %3286, i64* %3, align 8
  %3287 = inttoptr i64 %3284 to i32*
  %3288 = load i32, i32* %3287, align 4
  %3289 = shl i32 %3288, 1
  %3290 = icmp slt i32 %3288, 0
  %3291 = icmp slt i32 %3289, 0
  %3292 = xor i1 %3290, %3291
  %3293 = zext i32 %3289 to i64
  store i64 %3293, i64* %RAX.i1862, align 8
  %.lobit94 = lshr i32 %3288, 31
  %3294 = trunc i32 %.lobit94 to i8
  store i8 %3294, i8* %14, align 1
  %3295 = and i32 %3289, 254
  %3296 = tail call i32 @llvm.ctpop.i32(i32 %3295)
  %3297 = trunc i32 %3296 to i8
  %3298 = and i8 %3297, 1
  %3299 = xor i8 %3298, 1
  store i8 %3299, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3300 = icmp eq i32 %3289, 0
  %3301 = zext i1 %3300 to i8
  store i8 %3301, i8* %30, align 1
  %3302 = lshr i32 %3288, 30
  %3303 = trunc i32 %3302 to i8
  %3304 = and i8 %3303, 1
  store i8 %3304, i8* %33, align 1
  %3305 = zext i1 %3292 to i8
  store i8 %3305, i8* %39, align 1
  %3306 = add i64 %3283, -104
  %3307 = add i64 %3285, 8
  store i64 %3307, i64* %3, align 8
  %3308 = inttoptr i64 %3306 to i32*
  %3309 = load i32, i32* %3308, align 4
  %3310 = add i32 %3309, %3289
  %3311 = zext i32 %3310 to i64
  store i64 %3311, i64* %RAX.i1862, align 8
  %3312 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %3313 = add i64 %3312, 13112
  store i64 %3313, i64* %RCX.i2028, align 8
  %3314 = icmp ugt i64 %3312, -13113
  %3315 = zext i1 %3314 to i8
  store i8 %3315, i8* %14, align 1
  %3316 = trunc i64 %3313 to i32
  %3317 = and i32 %3316, 255
  %3318 = tail call i32 @llvm.ctpop.i32(i32 %3317)
  %3319 = trunc i32 %3318 to i8
  %3320 = and i8 %3319, 1
  %3321 = xor i8 %3320, 1
  store i8 %3321, i8* %21, align 1
  %3322 = xor i64 %3312, 16
  %3323 = xor i64 %3322, %3313
  %3324 = lshr i64 %3323, 4
  %3325 = trunc i64 %3324 to i8
  %3326 = and i8 %3325, 1
  store i8 %3326, i8* %27, align 1
  %3327 = icmp eq i64 %3313, 0
  %3328 = zext i1 %3327 to i8
  store i8 %3328, i8* %30, align 1
  %3329 = lshr i64 %3313, 63
  %3330 = trunc i64 %3329 to i8
  store i8 %3330, i8* %33, align 1
  %3331 = lshr i64 %3312, 63
  %3332 = xor i64 %3329, %3331
  %3333 = add nuw nsw i64 %3332, %3329
  %3334 = icmp eq i64 %3333, 2
  %3335 = zext i1 %3334 to i8
  store i8 %3335, i8* %39, align 1
  %3336 = load i64, i64* %RBP.i, align 8
  %3337 = add i64 %3336, -40
  %3338 = add i64 %3285, 27
  store i64 %3338, i64* %3, align 8
  %3339 = inttoptr i64 %3337 to i32*
  %3340 = load i32, i32* %3339, align 4
  %3341 = sext i32 %3340 to i64
  %3342 = shl nsw i64 %3341, 6
  store i64 %3342, i64* %RDX.i4840, align 8
  %3343 = add i64 %3342, %3313
  store i64 %3343, i64* %RCX.i2028, align 8
  %3344 = icmp ult i64 %3343, %3313
  %3345 = icmp ult i64 %3343, %3342
  %3346 = or i1 %3344, %3345
  %3347 = zext i1 %3346 to i8
  store i8 %3347, i8* %14, align 1
  %3348 = trunc i64 %3343 to i32
  %3349 = and i32 %3348, 255
  %3350 = tail call i32 @llvm.ctpop.i32(i32 %3349)
  %3351 = trunc i32 %3350 to i8
  %3352 = and i8 %3351, 1
  %3353 = xor i8 %3352, 1
  store i8 %3353, i8* %21, align 1
  %3354 = xor i64 %3313, %3343
  %3355 = lshr i64 %3354, 4
  %3356 = trunc i64 %3355 to i8
  %3357 = and i8 %3356, 1
  store i8 %3357, i8* %27, align 1
  %3358 = icmp eq i64 %3343, 0
  %3359 = zext i1 %3358 to i8
  store i8 %3359, i8* %30, align 1
  %3360 = lshr i64 %3343, 63
  %3361 = trunc i64 %3360 to i8
  store i8 %3361, i8* %33, align 1
  %3362 = lshr i64 %3341, 57
  %3363 = and i64 %3362, 1
  %3364 = xor i64 %3360, %3329
  %3365 = xor i64 %3360, %3363
  %3366 = add nuw nsw i64 %3364, %3365
  %3367 = icmp eq i64 %3366, 2
  %3368 = zext i1 %3367 to i8
  store i8 %3368, i8* %39, align 1
  %3369 = add i64 %3336, -32
  %3370 = add i64 %3285, 37
  store i64 %3370, i64* %3, align 8
  %3371 = inttoptr i64 %3369 to i32*
  %3372 = load i32, i32* %3371, align 4
  %3373 = add i32 %3372, 1
  %3374 = zext i32 %3373 to i64
  store i64 %3374, i64* %RSI.i2426, align 8
  %3375 = icmp eq i32 %3372, -1
  %3376 = icmp eq i32 %3373, 0
  %3377 = or i1 %3375, %3376
  %3378 = zext i1 %3377 to i8
  store i8 %3378, i8* %14, align 1
  %3379 = and i32 %3373, 255
  %3380 = tail call i32 @llvm.ctpop.i32(i32 %3379)
  %3381 = trunc i32 %3380 to i8
  %3382 = and i8 %3381, 1
  %3383 = xor i8 %3382, 1
  store i8 %3383, i8* %21, align 1
  %3384 = xor i32 %3373, %3372
  %3385 = lshr i32 %3384, 4
  %3386 = trunc i32 %3385 to i8
  %3387 = and i8 %3386, 1
  store i8 %3387, i8* %27, align 1
  %3388 = zext i1 %3376 to i8
  store i8 %3388, i8* %30, align 1
  %3389 = lshr i32 %3373, 31
  %3390 = trunc i32 %3389 to i8
  store i8 %3390, i8* %33, align 1
  %3391 = lshr i32 %3372, 31
  %3392 = xor i32 %3389, %3391
  %3393 = add nuw nsw i32 %3392, %3389
  %3394 = icmp eq i32 %3393, 2
  %3395 = zext i1 %3394 to i8
  store i8 %3395, i8* %39, align 1
  %3396 = sext i32 %3373 to i64
  store i64 %3396, i64* %RDX.i4840, align 8
  %3397 = shl nsw i64 %3396, 2
  %3398 = add i64 %3343, %3397
  %3399 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %3400 = add i64 %3285, 46
  store i64 %3400, i64* %3, align 8
  %3401 = inttoptr i64 %3398 to i32*
  store i32 %3399, i32* %3401, align 4
  %3402 = load i64, i64* %RBP.i, align 8
  %3403 = add i64 %3402, -100
  %3404 = load i64, i64* %3, align 8
  %3405 = add i64 %3404, 3
  store i64 %3405, i64* %3, align 8
  %3406 = inttoptr i64 %3403 to i32*
  %3407 = load i32, i32* %3406, align 4
  %3408 = zext i32 %3407 to i64
  store i64 %3408, i64* %RAX.i1862, align 8
  %3409 = add i64 %3402, -104
  %3410 = add i64 %3404, 6
  store i64 %3410, i64* %3, align 8
  %3411 = inttoptr i64 %3409 to i32*
  %3412 = load i32, i32* %3411, align 4
  %3413 = shl i32 %3412, 1
  %3414 = zext i32 %3413 to i64
  store i64 %3414, i64* %RSI.i2426, align 8
  %3415 = sub i32 %3407, %3413
  %3416 = zext i32 %3415 to i64
  store i64 %3416, i64* %RAX.i1862, align 8
  %3417 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %3418 = add i64 %3417, 13112
  store i64 %3418, i64* %RCX.i2028, align 8
  %3419 = icmp ugt i64 %3417, -13113
  %3420 = zext i1 %3419 to i8
  store i8 %3420, i8* %14, align 1
  %3421 = trunc i64 %3418 to i32
  %3422 = and i32 %3421, 255
  %3423 = tail call i32 @llvm.ctpop.i32(i32 %3422)
  %3424 = trunc i32 %3423 to i8
  %3425 = and i8 %3424, 1
  %3426 = xor i8 %3425, 1
  store i8 %3426, i8* %21, align 1
  %3427 = xor i64 %3417, 16
  %3428 = xor i64 %3427, %3418
  %3429 = lshr i64 %3428, 4
  %3430 = trunc i64 %3429 to i8
  %3431 = and i8 %3430, 1
  store i8 %3431, i8* %27, align 1
  %3432 = icmp eq i64 %3418, 0
  %3433 = zext i1 %3432 to i8
  store i8 %3433, i8* %30, align 1
  %3434 = lshr i64 %3418, 63
  %3435 = trunc i64 %3434 to i8
  store i8 %3435, i8* %33, align 1
  %3436 = lshr i64 %3417, 63
  %3437 = xor i64 %3434, %3436
  %3438 = add nuw nsw i64 %3437, %3434
  %3439 = icmp eq i64 %3438, 2
  %3440 = zext i1 %3439 to i8
  store i8 %3440, i8* %39, align 1
  %3441 = load i64, i64* %RBP.i, align 8
  %3442 = add i64 %3441, -40
  %3443 = add i64 %3404, 29
  store i64 %3443, i64* %3, align 8
  %3444 = inttoptr i64 %3442 to i32*
  %3445 = load i32, i32* %3444, align 4
  %3446 = sext i32 %3445 to i64
  %3447 = shl nsw i64 %3446, 6
  store i64 %3447, i64* %RDX.i4840, align 8
  %3448 = add i64 %3447, %3418
  store i64 %3448, i64* %RCX.i2028, align 8
  %3449 = icmp ult i64 %3448, %3418
  %3450 = icmp ult i64 %3448, %3447
  %3451 = or i1 %3449, %3450
  %3452 = zext i1 %3451 to i8
  store i8 %3452, i8* %14, align 1
  %3453 = trunc i64 %3448 to i32
  %3454 = and i32 %3453, 255
  %3455 = tail call i32 @llvm.ctpop.i32(i32 %3454)
  %3456 = trunc i32 %3455 to i8
  %3457 = and i8 %3456, 1
  %3458 = xor i8 %3457, 1
  store i8 %3458, i8* %21, align 1
  %3459 = xor i64 %3418, %3448
  %3460 = lshr i64 %3459, 4
  %3461 = trunc i64 %3460 to i8
  %3462 = and i8 %3461, 1
  store i8 %3462, i8* %27, align 1
  %3463 = icmp eq i64 %3448, 0
  %3464 = zext i1 %3463 to i8
  store i8 %3464, i8* %30, align 1
  %3465 = lshr i64 %3448, 63
  %3466 = trunc i64 %3465 to i8
  store i8 %3466, i8* %33, align 1
  %3467 = lshr i64 %3446, 57
  %3468 = and i64 %3467, 1
  %3469 = xor i64 %3465, %3434
  %3470 = xor i64 %3465, %3468
  %3471 = add nuw nsw i64 %3469, %3470
  %3472 = icmp eq i64 %3471, 2
  %3473 = zext i1 %3472 to i8
  store i8 %3473, i8* %39, align 1
  %3474 = add i64 %3441, -32
  %3475 = add i64 %3404, 39
  store i64 %3475, i64* %3, align 8
  %3476 = inttoptr i64 %3474 to i32*
  %3477 = load i32, i32* %3476, align 4
  %3478 = add i32 %3477, 3
  %3479 = zext i32 %3478 to i64
  store i64 %3479, i64* %RSI.i2426, align 8
  %3480 = icmp ugt i32 %3477, -4
  %3481 = zext i1 %3480 to i8
  store i8 %3481, i8* %14, align 1
  %3482 = and i32 %3478, 255
  %3483 = tail call i32 @llvm.ctpop.i32(i32 %3482)
  %3484 = trunc i32 %3483 to i8
  %3485 = and i8 %3484, 1
  %3486 = xor i8 %3485, 1
  store i8 %3486, i8* %21, align 1
  %3487 = xor i32 %3478, %3477
  %3488 = lshr i32 %3487, 4
  %3489 = trunc i32 %3488 to i8
  %3490 = and i8 %3489, 1
  store i8 %3490, i8* %27, align 1
  %3491 = icmp eq i32 %3478, 0
  %3492 = zext i1 %3491 to i8
  store i8 %3492, i8* %30, align 1
  %3493 = lshr i32 %3478, 31
  %3494 = trunc i32 %3493 to i8
  store i8 %3494, i8* %33, align 1
  %3495 = lshr i32 %3477, 31
  %3496 = xor i32 %3493, %3495
  %3497 = add nuw nsw i32 %3496, %3493
  %3498 = icmp eq i32 %3497, 2
  %3499 = zext i1 %3498 to i8
  store i8 %3499, i8* %39, align 1
  %3500 = sext i32 %3478 to i64
  store i64 %3500, i64* %RDX.i4840, align 8
  %3501 = shl nsw i64 %3500, 2
  %3502 = add i64 %3448, %3501
  %3503 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %3504 = add i64 %3404, 48
  store i64 %3504, i64* %3, align 8
  %3505 = inttoptr i64 %3502 to i32*
  store i32 %3503, i32* %3505, align 4
  %3506 = load i64, i64* %RBP.i, align 8
  %3507 = add i64 %3506, -12
  %3508 = load i64, i64* %3, align 8
  %3509 = add i64 %3508, 3
  store i64 %3509, i64* %3, align 8
  %3510 = inttoptr i64 %3507 to i32*
  %3511 = load i32, i32* %3510, align 4
  %3512 = add i32 %3511, 1
  %3513 = zext i32 %3512 to i64
  store i64 %3513, i64* %RAX.i1862, align 8
  %3514 = icmp eq i32 %3511, -1
  %3515 = icmp eq i32 %3512, 0
  %3516 = or i1 %3514, %3515
  %3517 = zext i1 %3516 to i8
  store i8 %3517, i8* %14, align 1
  %3518 = and i32 %3512, 255
  %3519 = tail call i32 @llvm.ctpop.i32(i32 %3518)
  %3520 = trunc i32 %3519 to i8
  %3521 = and i8 %3520, 1
  %3522 = xor i8 %3521, 1
  store i8 %3522, i8* %21, align 1
  %3523 = xor i32 %3512, %3511
  %3524 = lshr i32 %3523, 4
  %3525 = trunc i32 %3524 to i8
  %3526 = and i8 %3525, 1
  store i8 %3526, i8* %27, align 1
  %3527 = zext i1 %3515 to i8
  store i8 %3527, i8* %30, align 1
  %3528 = lshr i32 %3512, 31
  %3529 = trunc i32 %3528 to i8
  store i8 %3529, i8* %33, align 1
  %3530 = lshr i32 %3511, 31
  %3531 = xor i32 %3528, %3530
  %3532 = add nuw nsw i32 %3531, %3528
  %3533 = icmp eq i32 %3532, 2
  %3534 = zext i1 %3533 to i8
  store i8 %3534, i8* %39, align 1
  %3535 = add i64 %3508, 9
  store i64 %3535, i64* %3, align 8
  store i32 %3512, i32* %3510, align 4
  %3536 = load i64, i64* %3, align 8
  %3537 = add i64 %3536, -422
  store i64 %3537, i64* %3, align 8
  br label %block_.L_40d8ff

block_.L_40daaa:                                  ; preds = %block_.L_40d8ff
  %3538 = add i64 %2503, 8
  store i64 %3538, i64* %3, align 8
  %3539 = inttoptr i64 %2504 to i32*
  %3540 = load i32, i32* %3539, align 4
  %3541 = add i32 %3540, 4
  %3542 = zext i32 %3541 to i64
  store i64 %3542, i64* %RAX.i1862, align 8
  %3543 = icmp ugt i32 %3540, -5
  %3544 = zext i1 %3543 to i8
  store i8 %3544, i8* %14, align 1
  %3545 = and i32 %3541, 255
  %3546 = tail call i32 @llvm.ctpop.i32(i32 %3545)
  %3547 = trunc i32 %3546 to i8
  %3548 = and i8 %3547, 1
  %3549 = xor i8 %3548, 1
  store i8 %3549, i8* %21, align 1
  %3550 = xor i32 %3541, %3540
  %3551 = lshr i32 %3550, 4
  %3552 = trunc i32 %3551 to i8
  %3553 = and i8 %3552, 1
  store i8 %3553, i8* %27, align 1
  %3554 = icmp eq i32 %3541, 0
  %3555 = zext i1 %3554 to i8
  store i8 %3555, i8* %30, align 1
  %3556 = lshr i32 %3541, 31
  %3557 = trunc i32 %3556 to i8
  store i8 %3557, i8* %33, align 1
  %3558 = lshr i32 %3540, 31
  %3559 = xor i32 %3556, %3558
  %3560 = add nuw nsw i32 %3559, %3556
  %3561 = icmp eq i32 %3560, 2
  %3562 = zext i1 %3561 to i8
  store i8 %3562, i8* %39, align 1
  %3563 = add i64 %2503, 14
  store i64 %3563, i64* %3, align 8
  store i32 %3541, i32* %3539, align 4
  %3564 = load i64, i64* %3, align 8
  %3565 = add i64 %3564, -887
  store i64 %3565, i64* %3, align 8
  br label %block_.L_40d741

block_.L_40dabd:                                  ; preds = %block_.L_40d741
  %3566 = add i64 %1536, -32
  %3567 = add i64 %1564, 8
  store i64 %3567, i64* %3, align 8
  %3568 = inttoptr i64 %3566 to i32*
  %3569 = load i32, i32* %3568, align 4
  %3570 = add i32 %3569, 4
  %3571 = zext i32 %3570 to i64
  store i64 %3571, i64* %RAX.i1862, align 8
  %3572 = icmp ugt i32 %3569, -5
  %3573 = zext i1 %3572 to i8
  store i8 %3573, i8* %14, align 1
  %3574 = and i32 %3570, 255
  %3575 = tail call i32 @llvm.ctpop.i32(i32 %3574)
  %3576 = trunc i32 %3575 to i8
  %3577 = and i8 %3576, 1
  %3578 = xor i8 %3577, 1
  store i8 %3578, i8* %21, align 1
  %3579 = xor i32 %3570, %3569
  %3580 = lshr i32 %3579, 4
  %3581 = trunc i32 %3580 to i8
  %3582 = and i8 %3581, 1
  store i8 %3582, i8* %27, align 1
  %3583 = icmp eq i32 %3570, 0
  %3584 = zext i1 %3583 to i8
  store i8 %3584, i8* %30, align 1
  %3585 = lshr i32 %3570, 31
  %3586 = trunc i32 %3585 to i8
  store i8 %3586, i8* %33, align 1
  %3587 = lshr i32 %3569, 31
  %3588 = xor i32 %3585, %3587
  %3589 = add nuw nsw i32 %3588, %3585
  %3590 = icmp eq i32 %3589, 2
  %3591 = zext i1 %3590 to i8
  store i8 %3591, i8* %39, align 1
  %3592 = add i64 %1564, 14
  store i64 %3592, i64* %3, align 8
  store i32 %3570, i32* %3568, align 4
  %3593 = load i64, i64* %3, align 8
  %3594 = add i64 %3593, -923
  store i64 %3594, i64* %3, align 8
  br label %block_.L_40d730

block_.L_40dad0:                                  ; preds = %block_.L_40d730
  %3595 = add i64 %1531, 7
  store i64 %3595, i64* %3, align 8
  store i32 0, i32* %1506, align 4
  %RDI.i3890 = getelementptr inbounds %union.anon, %union.anon* %59, i64 0, i32 0
  %.pre280 = load i64, i64* %3, align 8
  br label %block_.L_40dad7

block_.L_40dad7:                                  ; preds = %block_.L_40ddb4, %block_.L_40dad0
  %3596 = phi i64 [ %5562, %block_.L_40ddb4 ], [ %.pre280, %block_.L_40dad0 ]
  %3597 = load i64, i64* %RBP.i, align 8
  %3598 = add i64 %3597, -32
  %3599 = add i64 %3596, 4
  store i64 %3599, i64* %3, align 8
  %3600 = inttoptr i64 %3598 to i32*
  %3601 = load i32, i32* %3600, align 4
  %3602 = add i32 %3601, -4
  %3603 = icmp ult i32 %3601, 4
  %3604 = zext i1 %3603 to i8
  store i8 %3604, i8* %14, align 1
  %3605 = and i32 %3602, 255
  %3606 = tail call i32 @llvm.ctpop.i32(i32 %3605)
  %3607 = trunc i32 %3606 to i8
  %3608 = and i8 %3607, 1
  %3609 = xor i8 %3608, 1
  store i8 %3609, i8* %21, align 1
  %3610 = xor i32 %3602, %3601
  %3611 = lshr i32 %3610, 4
  %3612 = trunc i32 %3611 to i8
  %3613 = and i8 %3612, 1
  store i8 %3613, i8* %27, align 1
  %3614 = icmp eq i32 %3602, 0
  %3615 = zext i1 %3614 to i8
  store i8 %3615, i8* %30, align 1
  %3616 = lshr i32 %3602, 31
  %3617 = trunc i32 %3616 to i8
  store i8 %3617, i8* %33, align 1
  %3618 = lshr i32 %3601, 31
  %3619 = xor i32 %3616, %3618
  %3620 = add nuw nsw i32 %3619, %3618
  %3621 = icmp eq i32 %3620, 2
  %3622 = zext i1 %3621 to i8
  store i8 %3622, i8* %39, align 1
  %3623 = icmp ne i8 %3617, 0
  %3624 = xor i1 %3623, %3621
  %.demorgan360 = or i1 %3614, %3624
  %.v380 = select i1 %.demorgan360, i64 10, i64 752
  %3625 = add i64 %3596, %.v380
  store i64 %3625, i64* %3, align 8
  br i1 %.demorgan360, label %block_40dae1, label %block_.L_40ddc7

block_40dae1:                                     ; preds = %block_.L_40dad7
  %3626 = add i64 %3597, -36
  %3627 = add i64 %3625, 7
  store i64 %3627, i64* %3, align 8
  %3628 = inttoptr i64 %3626 to i32*
  store i32 0, i32* %3628, align 4
  %.pre281 = load i64, i64* %3, align 8
  br label %block_.L_40dae8

block_.L_40dae8:                                  ; preds = %block_.L_40dda1, %block_40dae1
  %3629 = phi i64 [ %5533, %block_.L_40dda1 ], [ %.pre281, %block_40dae1 ]
  %3630 = load i64, i64* %RBP.i, align 8
  %3631 = add i64 %3630, -36
  %3632 = add i64 %3629, 4
  store i64 %3632, i64* %3, align 8
  %3633 = inttoptr i64 %3631 to i32*
  %3634 = load i32, i32* %3633, align 4
  %3635 = add i32 %3634, -4
  %3636 = icmp ult i32 %3634, 4
  %3637 = zext i1 %3636 to i8
  store i8 %3637, i8* %14, align 1
  %3638 = and i32 %3635, 255
  %3639 = tail call i32 @llvm.ctpop.i32(i32 %3638)
  %3640 = trunc i32 %3639 to i8
  %3641 = and i8 %3640, 1
  %3642 = xor i8 %3641, 1
  store i8 %3642, i8* %21, align 1
  %3643 = xor i32 %3635, %3634
  %3644 = lshr i32 %3643, 4
  %3645 = trunc i32 %3644 to i8
  %3646 = and i8 %3645, 1
  store i8 %3646, i8* %27, align 1
  %3647 = icmp eq i32 %3635, 0
  %3648 = zext i1 %3647 to i8
  store i8 %3648, i8* %30, align 1
  %3649 = lshr i32 %3635, 31
  %3650 = trunc i32 %3649 to i8
  store i8 %3650, i8* %33, align 1
  %3651 = lshr i32 %3634, 31
  %3652 = xor i32 %3649, %3651
  %3653 = add nuw nsw i32 %3652, %3651
  %3654 = icmp eq i32 %3653, 2
  %3655 = zext i1 %3654 to i8
  store i8 %3655, i8* %39, align 1
  %3656 = icmp ne i8 %3650, 0
  %3657 = xor i1 %3656, %3654
  %.demorgan361 = or i1 %3647, %3657
  %.v365 = select i1 %.demorgan361, i64 10, i64 716
  %3658 = add i64 %3629, %.v365
  store i64 %3658, i64* %3, align 8
  br i1 %.demorgan361, label %block_40daf2, label %block_.L_40ddb4

block_40daf2:                                     ; preds = %block_.L_40dae8
  %3659 = add i64 %3630, -16
  %3660 = add i64 %3658, 7
  store i64 %3660, i64* %3, align 8
  %3661 = inttoptr i64 %3659 to i32*
  store i32 0, i32* %3661, align 4
  %.pre282 = load i64, i64* %3, align 8
  br label %block_.L_40daf9

block_.L_40daf9:                                  ; preds = %block_.L_40dbb2, %block_40daf2
  %3662 = phi i64 [ %4496, %block_.L_40dbb2 ], [ %.pre282, %block_40daf2 ]
  %3663 = load i64, i64* %RBP.i, align 8
  %3664 = add i64 %3663, -16
  %3665 = add i64 %3662, 4
  store i64 %3665, i64* %3, align 8
  %3666 = inttoptr i64 %3664 to i32*
  %3667 = load i32, i32* %3666, align 4
  %3668 = add i32 %3667, -4
  %3669 = icmp ult i32 %3667, 4
  %3670 = zext i1 %3669 to i8
  store i8 %3670, i8* %14, align 1
  %3671 = and i32 %3668, 255
  %3672 = tail call i32 @llvm.ctpop.i32(i32 %3671)
  %3673 = trunc i32 %3672 to i8
  %3674 = and i8 %3673, 1
  %3675 = xor i8 %3674, 1
  store i8 %3675, i8* %21, align 1
  %3676 = xor i32 %3668, %3667
  %3677 = lshr i32 %3676, 4
  %3678 = trunc i32 %3677 to i8
  %3679 = and i8 %3678, 1
  store i8 %3679, i8* %27, align 1
  %3680 = icmp eq i32 %3668, 0
  %3681 = zext i1 %3680 to i8
  store i8 %3681, i8* %30, align 1
  %3682 = lshr i32 %3668, 31
  %3683 = trunc i32 %3682 to i8
  store i8 %3683, i8* %33, align 1
  %3684 = lshr i32 %3667, 31
  %3685 = xor i32 %3682, %3684
  %3686 = add nuw nsw i32 %3685, %3684
  %3687 = icmp eq i32 %3686, 2
  %3688 = zext i1 %3687 to i8
  store i8 %3688, i8* %39, align 1
  %3689 = icmp ne i8 %3683, 0
  %3690 = xor i1 %3689, %3687
  %.v420 = select i1 %3690, i64 10, i64 334
  %3691 = add i64 %3662, %.v420
  store i64 %3691, i64* %3, align 8
  br i1 %3690, label %block_40db03, label %block_.L_40dc47

block_40db03:                                     ; preds = %block_.L_40daf9
  %3692 = add i64 %3663, -32
  %3693 = add i64 %3691, 3
  store i64 %3693, i64* %3, align 8
  %3694 = inttoptr i64 %3692 to i32*
  %3695 = load i32, i32* %3694, align 4
  %3696 = zext i32 %3695 to i64
  store i64 %3696, i64* %RAX.i1862, align 8
  %3697 = add i64 %3691, 6
  store i64 %3697, i64* %3, align 8
  %3698 = load i32, i32* %3666, align 4
  %3699 = add i32 %3698, %3695
  %3700 = zext i32 %3699 to i64
  store i64 %3700, i64* %RAX.i1862, align 8
  %3701 = icmp ult i32 %3699, %3695
  %3702 = icmp ult i32 %3699, %3698
  %3703 = or i1 %3701, %3702
  %3704 = zext i1 %3703 to i8
  store i8 %3704, i8* %14, align 1
  %3705 = and i32 %3699, 255
  %3706 = tail call i32 @llvm.ctpop.i32(i32 %3705)
  %3707 = trunc i32 %3706 to i8
  %3708 = and i8 %3707, 1
  %3709 = xor i8 %3708, 1
  store i8 %3709, i8* %21, align 1
  %3710 = xor i32 %3698, %3695
  %3711 = xor i32 %3710, %3699
  %3712 = lshr i32 %3711, 4
  %3713 = trunc i32 %3712 to i8
  %3714 = and i8 %3713, 1
  store i8 %3714, i8* %27, align 1
  %3715 = icmp eq i32 %3699, 0
  %3716 = zext i1 %3715 to i8
  store i8 %3716, i8* %30, align 1
  %3717 = lshr i32 %3699, 31
  %3718 = trunc i32 %3717 to i8
  store i8 %3718, i8* %33, align 1
  %3719 = lshr i32 %3695, 31
  %3720 = lshr i32 %3698, 31
  %3721 = xor i32 %3717, %3719
  %3722 = xor i32 %3717, %3720
  %3723 = add nuw nsw i32 %3721, %3722
  %3724 = icmp eq i32 %3723, 2
  %3725 = zext i1 %3724 to i8
  store i8 %3725, i8* %39, align 1
  %3726 = add i64 %3663, -44
  %3727 = add i64 %3691, 9
  store i64 %3727, i64* %3, align 8
  %3728 = inttoptr i64 %3726 to i32*
  store i32 %3699, i32* %3728, align 4
  %3729 = load i64, i64* %RBP.i, align 8
  %3730 = add i64 %3729, -12
  %3731 = load i64, i64* %3, align 8
  %3732 = add i64 %3731, 7
  store i64 %3732, i64* %3, align 8
  %3733 = inttoptr i64 %3730 to i32*
  store i32 0, i32* %3733, align 4
  %.pre285 = load i64, i64* %3, align 8
  br label %block_.L_40db13

block_.L_40db13:                                  ; preds = %block_40db1d, %block_40db03
  %3734 = phi i64 [ %4113, %block_40db1d ], [ %.pre285, %block_40db03 ]
  %3735 = load i64, i64* %RBP.i, align 8
  %3736 = add i64 %3735, -12
  %3737 = add i64 %3734, 4
  store i64 %3737, i64* %3, align 8
  %3738 = inttoptr i64 %3736 to i32*
  %3739 = load i32, i32* %3738, align 4
  %3740 = add i32 %3739, -2
  %3741 = icmp ult i32 %3739, 2
  %3742 = zext i1 %3741 to i8
  store i8 %3742, i8* %14, align 1
  %3743 = and i32 %3740, 255
  %3744 = tail call i32 @llvm.ctpop.i32(i32 %3743)
  %3745 = trunc i32 %3744 to i8
  %3746 = and i8 %3745, 1
  %3747 = xor i8 %3746, 1
  store i8 %3747, i8* %21, align 1
  %3748 = xor i32 %3740, %3739
  %3749 = lshr i32 %3748, 4
  %3750 = trunc i32 %3749 to i8
  %3751 = and i8 %3750, 1
  store i8 %3751, i8* %27, align 1
  %3752 = icmp eq i32 %3740, 0
  %3753 = zext i1 %3752 to i8
  store i8 %3753, i8* %30, align 1
  %3754 = lshr i32 %3740, 31
  %3755 = trunc i32 %3754 to i8
  store i8 %3755, i8* %33, align 1
  %3756 = lshr i32 %3739, 31
  %3757 = xor i32 %3754, %3756
  %3758 = add nuw nsw i32 %3757, %3756
  %3759 = icmp eq i32 %3758, 2
  %3760 = zext i1 %3759 to i8
  store i8 %3760, i8* %39, align 1
  %3761 = icmp ne i8 %3755, 0
  %3762 = xor i1 %3761, %3759
  %.v364 = select i1 %3762, i64 10, i64 159
  %3763 = add i64 %3734, %.v364
  %3764 = add i64 %3735, -400
  %3765 = add i64 %3763, 7
  store i64 %3765, i64* %3, align 8
  store i64 %3764, i64* %RAX.i1862, align 8
  br i1 %3762, label %block_40db1d, label %block_.L_40dbb2

block_40db1d:                                     ; preds = %block_.L_40db13
  store i64 3, i64* %RCX.i2028, align 8
  %3766 = add i64 %3763, 15
  store i64 %3766, i64* %3, align 8
  %3767 = load i32, i32* %3738, align 4
  %3768 = sub i32 3, %3767
  %3769 = zext i32 %3768 to i64
  store i64 %3769, i64* %RCX.i2028, align 8
  %3770 = icmp ugt i32 %3767, 3
  %3771 = zext i1 %3770 to i8
  store i8 %3771, i8* %14, align 1
  %3772 = and i32 %3768, 255
  %3773 = tail call i32 @llvm.ctpop.i32(i32 %3772)
  %3774 = trunc i32 %3773 to i8
  %3775 = and i8 %3774, 1
  %3776 = xor i8 %3775, 1
  store i8 %3776, i8* %21, align 1
  %3777 = xor i32 %3768, %3767
  %3778 = lshr i32 %3777, 4
  %3779 = trunc i32 %3778 to i8
  %3780 = and i8 %3779, 1
  store i8 %3780, i8* %27, align 1
  %3781 = icmp eq i32 %3768, 0
  %3782 = zext i1 %3781 to i8
  store i8 %3782, i8* %30, align 1
  %3783 = lshr i32 %3768, 31
  %3784 = trunc i32 %3783 to i8
  store i8 %3784, i8* %33, align 1
  %3785 = lshr i32 %3767, 31
  %3786 = add nuw nsw i32 %3783, %3785
  %3787 = icmp eq i32 %3786, 2
  %3788 = zext i1 %3787 to i8
  store i8 %3788, i8* %39, align 1
  %3789 = add i64 %3735, -20
  %3790 = add i64 %3763, 18
  store i64 %3790, i64* %3, align 8
  %3791 = inttoptr i64 %3789 to i32*
  store i32 %3768, i32* %3791, align 4
  %3792 = load i64, i64* %RBP.i, align 8
  %3793 = add i64 %3792, -12
  %3794 = load i64, i64* %3, align 8
  %3795 = add i64 %3794, 3
  store i64 %3795, i64* %3, align 8
  %3796 = inttoptr i64 %3793 to i32*
  %3797 = load i32, i32* %3796, align 4
  %3798 = zext i32 %3797 to i64
  store i64 %3798, i64* %RCX.i2028, align 8
  %3799 = add i64 %3792, -36
  %3800 = add i64 %3794, 6
  store i64 %3800, i64* %3, align 8
  %3801 = inttoptr i64 %3799 to i32*
  %3802 = load i32, i32* %3801, align 4
  %3803 = add i32 %3802, %3797
  %3804 = zext i32 %3803 to i64
  store i64 %3804, i64* %RCX.i2028, align 8
  %3805 = sext i32 %3803 to i64
  %3806 = shl nsw i64 %3805, 5
  store i64 %3806, i64* %RDX.i4840, align 8
  %3807 = load i64, i64* %RAX.i1862, align 8
  %3808 = add i64 %3806, %3807
  store i64 %3808, i64* %RSI.i2426, align 8
  %3809 = icmp ult i64 %3808, %3807
  %3810 = icmp ult i64 %3808, %3806
  %3811 = or i1 %3809, %3810
  %3812 = zext i1 %3811 to i8
  store i8 %3812, i8* %14, align 1
  %3813 = trunc i64 %3808 to i32
  %3814 = and i32 %3813, 255
  %3815 = tail call i32 @llvm.ctpop.i32(i32 %3814)
  %3816 = trunc i32 %3815 to i8
  %3817 = and i8 %3816, 1
  %3818 = xor i8 %3817, 1
  store i8 %3818, i8* %21, align 1
  %3819 = xor i64 %3807, %3808
  %3820 = lshr i64 %3819, 4
  %3821 = trunc i64 %3820 to i8
  %3822 = and i8 %3821, 1
  store i8 %3822, i8* %27, align 1
  %3823 = icmp eq i64 %3808, 0
  %3824 = zext i1 %3823 to i8
  store i8 %3824, i8* %30, align 1
  %3825 = lshr i64 %3808, 63
  %3826 = trunc i64 %3825 to i8
  store i8 %3826, i8* %33, align 1
  %3827 = lshr i64 %3807, 63
  %3828 = lshr i64 %3805, 58
  %3829 = and i64 %3828, 1
  %3830 = xor i64 %3825, %3827
  %3831 = xor i64 %3825, %3829
  %3832 = add nuw nsw i64 %3830, %3831
  %3833 = icmp eq i64 %3832, 2
  %3834 = zext i1 %3833 to i8
  store i8 %3834, i8* %39, align 1
  %3835 = load i64, i64* %RBP.i, align 8
  %3836 = add i64 %3835, -44
  %3837 = add i64 %3794, 23
  store i64 %3837, i64* %3, align 8
  %3838 = inttoptr i64 %3836 to i32*
  %3839 = load i32, i32* %3838, align 4
  %3840 = sext i32 %3839 to i64
  store i64 %3840, i64* %RDX.i4840, align 8
  %3841 = shl nsw i64 %3840, 2
  %3842 = add i64 %3841, %3808
  %3843 = add i64 %3794, 26
  store i64 %3843, i64* %3, align 8
  %3844 = inttoptr i64 %3842 to i32*
  %3845 = load i32, i32* %3844, align 4
  %3846 = zext i32 %3845 to i64
  store i64 %3846, i64* %RCX.i2028, align 8
  %3847 = add i64 %3835, -20
  %3848 = add i64 %3794, 29
  store i64 %3848, i64* %3, align 8
  %3849 = inttoptr i64 %3847 to i32*
  %3850 = load i32, i32* %3849, align 4
  %3851 = zext i32 %3850 to i64
  store i64 %3851, i64* %RDI.i3890, align 8
  %3852 = add i64 %3835, -36
  %3853 = add i64 %3794, 32
  store i64 %3853, i64* %3, align 8
  %3854 = inttoptr i64 %3852 to i32*
  %3855 = load i32, i32* %3854, align 4
  %3856 = add i32 %3855, %3850
  %3857 = zext i32 %3856 to i64
  store i64 %3857, i64* %RDI.i3890, align 8
  %3858 = sext i32 %3856 to i64
  %3859 = shl nsw i64 %3858, 5
  store i64 %3859, i64* %RDX.i4840, align 8
  %3860 = load i64, i64* %RAX.i1862, align 8
  %3861 = add i64 %3859, %3860
  store i64 %3861, i64* %RSI.i2426, align 8
  %3862 = icmp ult i64 %3861, %3860
  %3863 = icmp ult i64 %3861, %3859
  %3864 = or i1 %3862, %3863
  %3865 = zext i1 %3864 to i8
  store i8 %3865, i8* %14, align 1
  %3866 = trunc i64 %3861 to i32
  %3867 = and i32 %3866, 255
  %3868 = tail call i32 @llvm.ctpop.i32(i32 %3867)
  %3869 = trunc i32 %3868 to i8
  %3870 = and i8 %3869, 1
  %3871 = xor i8 %3870, 1
  store i8 %3871, i8* %21, align 1
  %3872 = xor i64 %3860, %3861
  %3873 = lshr i64 %3872, 4
  %3874 = trunc i64 %3873 to i8
  %3875 = and i8 %3874, 1
  store i8 %3875, i8* %27, align 1
  %3876 = icmp eq i64 %3861, 0
  %3877 = zext i1 %3876 to i8
  store i8 %3877, i8* %30, align 1
  %3878 = lshr i64 %3861, 63
  %3879 = trunc i64 %3878 to i8
  store i8 %3879, i8* %33, align 1
  %3880 = lshr i64 %3860, 63
  %3881 = lshr i64 %3858, 58
  %3882 = and i64 %3881, 1
  %3883 = xor i64 %3878, %3880
  %3884 = xor i64 %3878, %3882
  %3885 = add nuw nsw i64 %3883, %3884
  %3886 = icmp eq i64 %3885, 2
  %3887 = zext i1 %3886 to i8
  store i8 %3887, i8* %39, align 1
  %3888 = load i64, i64* %RBP.i, align 8
  %3889 = add i64 %3888, -44
  %3890 = add i64 %3794, 49
  store i64 %3890, i64* %3, align 8
  %3891 = inttoptr i64 %3889 to i32*
  %3892 = load i32, i32* %3891, align 4
  %3893 = sext i32 %3892 to i64
  store i64 %3893, i64* %RDX.i4840, align 8
  %3894 = load i64, i64* %RCX.i2028, align 8
  %3895 = shl nsw i64 %3893, 2
  %3896 = add i64 %3861, %3895
  %3897 = add i64 %3794, 52
  store i64 %3897, i64* %3, align 8
  %3898 = trunc i64 %3894 to i32
  %3899 = inttoptr i64 %3896 to i32*
  %3900 = load i32, i32* %3899, align 4
  %3901 = add i32 %3900, %3898
  %3902 = zext i32 %3901 to i64
  store i64 %3902, i64* %RCX.i2028, align 8
  %3903 = icmp ult i32 %3901, %3898
  %3904 = icmp ult i32 %3901, %3900
  %3905 = or i1 %3903, %3904
  %3906 = zext i1 %3905 to i8
  store i8 %3906, i8* %14, align 1
  %3907 = and i32 %3901, 255
  %3908 = tail call i32 @llvm.ctpop.i32(i32 %3907)
  %3909 = trunc i32 %3908 to i8
  %3910 = and i8 %3909, 1
  %3911 = xor i8 %3910, 1
  store i8 %3911, i8* %21, align 1
  %3912 = xor i32 %3900, %3898
  %3913 = xor i32 %3912, %3901
  %3914 = lshr i32 %3913, 4
  %3915 = trunc i32 %3914 to i8
  %3916 = and i8 %3915, 1
  store i8 %3916, i8* %27, align 1
  %3917 = icmp eq i32 %3901, 0
  %3918 = zext i1 %3917 to i8
  store i8 %3918, i8* %30, align 1
  %3919 = lshr i32 %3901, 31
  %3920 = trunc i32 %3919 to i8
  store i8 %3920, i8* %33, align 1
  %3921 = lshr i32 %3898, 31
  %3922 = lshr i32 %3900, 31
  %3923 = xor i32 %3919, %3921
  %3924 = xor i32 %3919, %3922
  %3925 = add nuw nsw i32 %3923, %3924
  %3926 = icmp eq i32 %3925, 2
  %3927 = zext i1 %3926 to i8
  store i8 %3927, i8* %39, align 1
  %3928 = add i64 %3888, -12
  %3929 = add i64 %3794, 56
  store i64 %3929, i64* %3, align 8
  %3930 = inttoptr i64 %3928 to i32*
  %3931 = load i32, i32* %3930, align 4
  %3932 = sext i32 %3931 to i64
  store i64 %3932, i64* %RDX.i4840, align 8
  %3933 = shl nsw i64 %3932, 2
  %3934 = add i64 %3888, -112
  %3935 = add i64 %3934, %3933
  %3936 = add i64 %3794, 60
  store i64 %3936, i64* %3, align 8
  %3937 = inttoptr i64 %3935 to i32*
  store i32 %3901, i32* %3937, align 4
  %3938 = load i64, i64* %RBP.i, align 8
  %3939 = add i64 %3938, -12
  %3940 = load i64, i64* %3, align 8
  %3941 = add i64 %3940, 3
  store i64 %3941, i64* %3, align 8
  %3942 = inttoptr i64 %3939 to i32*
  %3943 = load i32, i32* %3942, align 4
  %3944 = zext i32 %3943 to i64
  store i64 %3944, i64* %RCX.i2028, align 8
  %3945 = add i64 %3938, -36
  %3946 = add i64 %3940, 6
  store i64 %3946, i64* %3, align 8
  %3947 = inttoptr i64 %3945 to i32*
  %3948 = load i32, i32* %3947, align 4
  %3949 = add i32 %3948, %3943
  %3950 = zext i32 %3949 to i64
  store i64 %3950, i64* %RCX.i2028, align 8
  %3951 = sext i32 %3949 to i64
  %3952 = shl nsw i64 %3951, 5
  store i64 %3952, i64* %RDX.i4840, align 8
  %3953 = load i64, i64* %RAX.i1862, align 8
  %3954 = add i64 %3952, %3953
  store i64 %3954, i64* %RSI.i2426, align 8
  %3955 = icmp ult i64 %3954, %3953
  %3956 = icmp ult i64 %3954, %3952
  %3957 = or i1 %3955, %3956
  %3958 = zext i1 %3957 to i8
  store i8 %3958, i8* %14, align 1
  %3959 = trunc i64 %3954 to i32
  %3960 = and i32 %3959, 255
  %3961 = tail call i32 @llvm.ctpop.i32(i32 %3960)
  %3962 = trunc i32 %3961 to i8
  %3963 = and i8 %3962, 1
  %3964 = xor i8 %3963, 1
  store i8 %3964, i8* %21, align 1
  %3965 = xor i64 %3953, %3954
  %3966 = lshr i64 %3965, 4
  %3967 = trunc i64 %3966 to i8
  %3968 = and i8 %3967, 1
  store i8 %3968, i8* %27, align 1
  %3969 = icmp eq i64 %3954, 0
  %3970 = zext i1 %3969 to i8
  store i8 %3970, i8* %30, align 1
  %3971 = lshr i64 %3954, 63
  %3972 = trunc i64 %3971 to i8
  store i8 %3972, i8* %33, align 1
  %3973 = lshr i64 %3953, 63
  %3974 = lshr i64 %3951, 58
  %3975 = and i64 %3974, 1
  %3976 = xor i64 %3971, %3973
  %3977 = xor i64 %3971, %3975
  %3978 = add nuw nsw i64 %3976, %3977
  %3979 = icmp eq i64 %3978, 2
  %3980 = zext i1 %3979 to i8
  store i8 %3980, i8* %39, align 1
  %3981 = load i64, i64* %RBP.i, align 8
  %3982 = add i64 %3981, -44
  %3983 = add i64 %3940, 23
  store i64 %3983, i64* %3, align 8
  %3984 = inttoptr i64 %3982 to i32*
  %3985 = load i32, i32* %3984, align 4
  %3986 = sext i32 %3985 to i64
  store i64 %3986, i64* %RDX.i4840, align 8
  %3987 = shl nsw i64 %3986, 2
  %3988 = add i64 %3987, %3954
  %3989 = add i64 %3940, 26
  store i64 %3989, i64* %3, align 8
  %3990 = inttoptr i64 %3988 to i32*
  %3991 = load i32, i32* %3990, align 4
  %3992 = zext i32 %3991 to i64
  store i64 %3992, i64* %RCX.i2028, align 8
  %3993 = add i64 %3981, -20
  %3994 = add i64 %3940, 29
  store i64 %3994, i64* %3, align 8
  %3995 = inttoptr i64 %3993 to i32*
  %3996 = load i32, i32* %3995, align 4
  %3997 = zext i32 %3996 to i64
  store i64 %3997, i64* %RDI.i3890, align 8
  %3998 = add i64 %3981, -36
  %3999 = add i64 %3940, 32
  store i64 %3999, i64* %3, align 8
  %4000 = inttoptr i64 %3998 to i32*
  %4001 = load i32, i32* %4000, align 4
  %4002 = add i32 %4001, %3996
  %4003 = zext i32 %4002 to i64
  store i64 %4003, i64* %RDI.i3890, align 8
  %4004 = sext i32 %4002 to i64
  %4005 = shl nsw i64 %4004, 5
  store i64 %4005, i64* %RDX.i4840, align 8
  %4006 = load i64, i64* %RAX.i1862, align 8
  %4007 = add i64 %4005, %4006
  store i64 %4007, i64* %RAX.i1862, align 8
  %4008 = icmp ult i64 %4007, %4006
  %4009 = icmp ult i64 %4007, %4005
  %4010 = or i1 %4008, %4009
  %4011 = zext i1 %4010 to i8
  store i8 %4011, i8* %14, align 1
  %4012 = trunc i64 %4007 to i32
  %4013 = and i32 %4012, 255
  %4014 = tail call i32 @llvm.ctpop.i32(i32 %4013)
  %4015 = trunc i32 %4014 to i8
  %4016 = and i8 %4015, 1
  %4017 = xor i8 %4016, 1
  store i8 %4017, i8* %21, align 1
  %4018 = xor i64 %4006, %4007
  %4019 = lshr i64 %4018, 4
  %4020 = trunc i64 %4019 to i8
  %4021 = and i8 %4020, 1
  store i8 %4021, i8* %27, align 1
  %4022 = icmp eq i64 %4007, 0
  %4023 = zext i1 %4022 to i8
  store i8 %4023, i8* %30, align 1
  %4024 = lshr i64 %4007, 63
  %4025 = trunc i64 %4024 to i8
  store i8 %4025, i8* %33, align 1
  %4026 = lshr i64 %4006, 63
  %4027 = lshr i64 %4004, 58
  %4028 = and i64 %4027, 1
  %4029 = xor i64 %4024, %4026
  %4030 = xor i64 %4024, %4028
  %4031 = add nuw nsw i64 %4029, %4030
  %4032 = icmp eq i64 %4031, 2
  %4033 = zext i1 %4032 to i8
  store i8 %4033, i8* %39, align 1
  %4034 = load i64, i64* %RBP.i, align 8
  %4035 = add i64 %4034, -44
  %4036 = add i64 %3940, 46
  store i64 %4036, i64* %3, align 8
  %4037 = inttoptr i64 %4035 to i32*
  %4038 = load i32, i32* %4037, align 4
  %4039 = sext i32 %4038 to i64
  store i64 %4039, i64* %RDX.i4840, align 8
  %4040 = load i64, i64* %RCX.i2028, align 8
  %4041 = shl nsw i64 %4039, 2
  %4042 = add i64 %4007, %4041
  %4043 = add i64 %3940, 49
  store i64 %4043, i64* %3, align 8
  %4044 = trunc i64 %4040 to i32
  %4045 = inttoptr i64 %4042 to i32*
  %4046 = load i32, i32* %4045, align 4
  %4047 = sub i32 %4044, %4046
  %4048 = zext i32 %4047 to i64
  store i64 %4048, i64* %RCX.i2028, align 8
  %4049 = icmp ult i32 %4044, %4046
  %4050 = zext i1 %4049 to i8
  store i8 %4050, i8* %14, align 1
  %4051 = and i32 %4047, 255
  %4052 = tail call i32 @llvm.ctpop.i32(i32 %4051)
  %4053 = trunc i32 %4052 to i8
  %4054 = and i8 %4053, 1
  %4055 = xor i8 %4054, 1
  store i8 %4055, i8* %21, align 1
  %4056 = xor i32 %4046, %4044
  %4057 = xor i32 %4056, %4047
  %4058 = lshr i32 %4057, 4
  %4059 = trunc i32 %4058 to i8
  %4060 = and i8 %4059, 1
  store i8 %4060, i8* %27, align 1
  %4061 = icmp eq i32 %4047, 0
  %4062 = zext i1 %4061 to i8
  store i8 %4062, i8* %30, align 1
  %4063 = lshr i32 %4047, 31
  %4064 = trunc i32 %4063 to i8
  store i8 %4064, i8* %33, align 1
  %4065 = lshr i32 %4044, 31
  %4066 = lshr i32 %4046, 31
  %4067 = xor i32 %4066, %4065
  %4068 = xor i32 %4063, %4065
  %4069 = add nuw nsw i32 %4068, %4067
  %4070 = icmp eq i32 %4069, 2
  %4071 = zext i1 %4070 to i8
  store i8 %4071, i8* %39, align 1
  %4072 = add i64 %4034, -20
  %4073 = add i64 %3940, 53
  store i64 %4073, i64* %3, align 8
  %4074 = inttoptr i64 %4072 to i32*
  %4075 = load i32, i32* %4074, align 4
  %4076 = sext i32 %4075 to i64
  store i64 %4076, i64* %RAX.i1862, align 8
  %4077 = shl nsw i64 %4076, 2
  %4078 = add i64 %4034, -112
  %4079 = add i64 %4078, %4077
  %4080 = add i64 %3940, 57
  store i64 %4080, i64* %3, align 8
  %4081 = inttoptr i64 %4079 to i32*
  store i32 %4047, i32* %4081, align 4
  %4082 = load i64, i64* %RBP.i, align 8
  %4083 = add i64 %4082, -12
  %4084 = load i64, i64* %3, align 8
  %4085 = add i64 %4084, 3
  store i64 %4085, i64* %3, align 8
  %4086 = inttoptr i64 %4083 to i32*
  %4087 = load i32, i32* %4086, align 4
  %4088 = add i32 %4087, 1
  %4089 = zext i32 %4088 to i64
  store i64 %4089, i64* %RAX.i1862, align 8
  %4090 = icmp eq i32 %4087, -1
  %4091 = icmp eq i32 %4088, 0
  %4092 = or i1 %4090, %4091
  %4093 = zext i1 %4092 to i8
  store i8 %4093, i8* %14, align 1
  %4094 = and i32 %4088, 255
  %4095 = tail call i32 @llvm.ctpop.i32(i32 %4094)
  %4096 = trunc i32 %4095 to i8
  %4097 = and i8 %4096, 1
  %4098 = xor i8 %4097, 1
  store i8 %4098, i8* %21, align 1
  %4099 = xor i32 %4088, %4087
  %4100 = lshr i32 %4099, 4
  %4101 = trunc i32 %4100 to i8
  %4102 = and i8 %4101, 1
  store i8 %4102, i8* %27, align 1
  %4103 = zext i1 %4091 to i8
  store i8 %4103, i8* %30, align 1
  %4104 = lshr i32 %4088, 31
  %4105 = trunc i32 %4104 to i8
  store i8 %4105, i8* %33, align 1
  %4106 = lshr i32 %4087, 31
  %4107 = xor i32 %4104, %4106
  %4108 = add nuw nsw i32 %4107, %4104
  %4109 = icmp eq i32 %4108, 2
  %4110 = zext i1 %4109 to i8
  store i8 %4110, i8* %39, align 1
  %4111 = add i64 %4084, 9
  store i64 %4111, i64* %3, align 8
  store i32 %4088, i32* %4086, align 4
  %4112 = load i64, i64* %3, align 8
  %4113 = add i64 %4112, -154
  store i64 %4113, i64* %3, align 8
  br label %block_.L_40db13

block_.L_40dbb2:                                  ; preds = %block_.L_40db13
  %4114 = add i64 %3735, -112
  %4115 = add i64 %3763, 10
  store i64 %4115, i64* %3, align 8
  %4116 = inttoptr i64 %4114 to i32*
  %4117 = load i32, i32* %4116, align 4
  %4118 = zext i32 %4117 to i64
  store i64 %4118, i64* %RCX.i2028, align 8
  %4119 = add i64 %3735, -108
  %4120 = add i64 %3763, 13
  store i64 %4120, i64* %3, align 8
  %4121 = inttoptr i64 %4119 to i32*
  %4122 = load i32, i32* %4121, align 4
  %4123 = add i32 %4122, %4117
  %4124 = zext i32 %4123 to i64
  store i64 %4124, i64* %RCX.i2028, align 8
  %4125 = icmp ult i32 %4123, %4117
  %4126 = icmp ult i32 %4123, %4122
  %4127 = or i1 %4125, %4126
  %4128 = zext i1 %4127 to i8
  store i8 %4128, i8* %14, align 1
  %4129 = and i32 %4123, 255
  %4130 = tail call i32 @llvm.ctpop.i32(i32 %4129)
  %4131 = trunc i32 %4130 to i8
  %4132 = and i8 %4131, 1
  %4133 = xor i8 %4132, 1
  store i8 %4133, i8* %21, align 1
  %4134 = xor i32 %4122, %4117
  %4135 = xor i32 %4134, %4123
  %4136 = lshr i32 %4135, 4
  %4137 = trunc i32 %4136 to i8
  %4138 = and i8 %4137, 1
  store i8 %4138, i8* %27, align 1
  %4139 = icmp eq i32 %4123, 0
  %4140 = zext i1 %4139 to i8
  store i8 %4140, i8* %30, align 1
  %4141 = lshr i32 %4123, 31
  %4142 = trunc i32 %4141 to i8
  store i8 %4142, i8* %33, align 1
  %4143 = lshr i32 %4117, 31
  %4144 = lshr i32 %4122, 31
  %4145 = xor i32 %4141, %4143
  %4146 = xor i32 %4141, %4144
  %4147 = add nuw nsw i32 %4145, %4146
  %4148 = icmp eq i32 %4147, 2
  %4149 = zext i1 %4148 to i8
  store i8 %4149, i8* %39, align 1
  %4150 = add i64 %3735, -36
  %4151 = add i64 %3763, 17
  store i64 %4151, i64* %3, align 8
  %4152 = inttoptr i64 %4150 to i32*
  %4153 = load i32, i32* %4152, align 4
  %4154 = sext i32 %4153 to i64
  %4155 = shl nsw i64 %4154, 5
  store i64 %4155, i64* %RDX.i4840, align 8
  %4156 = add i64 %4155, %3764
  store i64 %4156, i64* %RSI.i2426, align 8
  %4157 = icmp ult i64 %4156, %3764
  %4158 = icmp ult i64 %4156, %4155
  %4159 = or i1 %4157, %4158
  %4160 = zext i1 %4159 to i8
  store i8 %4160, i8* %14, align 1
  %4161 = trunc i64 %4156 to i32
  %4162 = and i32 %4161, 255
  %4163 = tail call i32 @llvm.ctpop.i32(i32 %4162)
  %4164 = trunc i32 %4163 to i8
  %4165 = and i8 %4164, 1
  %4166 = xor i8 %4165, 1
  store i8 %4166, i8* %21, align 1
  %4167 = xor i64 %3764, %4156
  %4168 = lshr i64 %4167, 4
  %4169 = trunc i64 %4168 to i8
  %4170 = and i8 %4169, 1
  store i8 %4170, i8* %27, align 1
  %4171 = icmp eq i64 %4156, 0
  %4172 = zext i1 %4171 to i8
  store i8 %4172, i8* %30, align 1
  %4173 = lshr i64 %4156, 63
  %4174 = trunc i64 %4173 to i8
  store i8 %4174, i8* %33, align 1
  %4175 = lshr i64 %3764, 63
  %4176 = lshr i64 %4154, 58
  %4177 = and i64 %4176, 1
  %4178 = xor i64 %4173, %4175
  %4179 = xor i64 %4173, %4177
  %4180 = add nuw nsw i64 %4178, %4179
  %4181 = icmp eq i64 %4180, 2
  %4182 = zext i1 %4181 to i8
  store i8 %4182, i8* %39, align 1
  %4183 = load i64, i64* %RBP.i, align 8
  %4184 = add i64 %4183, -44
  %4185 = add i64 %3763, 31
  store i64 %4185, i64* %3, align 8
  %4186 = inttoptr i64 %4184 to i32*
  %4187 = load i32, i32* %4186, align 4
  %4188 = sext i32 %4187 to i64
  store i64 %4188, i64* %RDX.i4840, align 8
  %4189 = shl nsw i64 %4188, 2
  %4190 = add i64 %4189, %4156
  %4191 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %4192 = add i64 %3763, 34
  store i64 %4192, i64* %3, align 8
  %4193 = inttoptr i64 %4190 to i32*
  store i32 %4191, i32* %4193, align 4
  %4194 = load i64, i64* %RBP.i, align 8
  %4195 = add i64 %4194, -112
  %4196 = load i64, i64* %3, align 8
  %4197 = add i64 %4196, 3
  store i64 %4197, i64* %3, align 8
  %4198 = inttoptr i64 %4195 to i32*
  %4199 = load i32, i32* %4198, align 4
  %4200 = zext i32 %4199 to i64
  store i64 %4200, i64* %RCX.i2028, align 8
  %4201 = add i64 %4194, -108
  %4202 = add i64 %4196, 6
  store i64 %4202, i64* %3, align 8
  %4203 = inttoptr i64 %4201 to i32*
  %4204 = load i32, i32* %4203, align 4
  %4205 = sub i32 %4199, %4204
  %4206 = zext i32 %4205 to i64
  store i64 %4206, i64* %RCX.i2028, align 8
  %4207 = icmp ult i32 %4199, %4204
  %4208 = zext i1 %4207 to i8
  store i8 %4208, i8* %14, align 1
  %4209 = and i32 %4205, 255
  %4210 = tail call i32 @llvm.ctpop.i32(i32 %4209)
  %4211 = trunc i32 %4210 to i8
  %4212 = and i8 %4211, 1
  %4213 = xor i8 %4212, 1
  store i8 %4213, i8* %21, align 1
  %4214 = xor i32 %4204, %4199
  %4215 = xor i32 %4214, %4205
  %4216 = lshr i32 %4215, 4
  %4217 = trunc i32 %4216 to i8
  %4218 = and i8 %4217, 1
  store i8 %4218, i8* %27, align 1
  %4219 = icmp eq i32 %4205, 0
  %4220 = zext i1 %4219 to i8
  store i8 %4220, i8* %30, align 1
  %4221 = lshr i32 %4205, 31
  %4222 = trunc i32 %4221 to i8
  store i8 %4222, i8* %33, align 1
  %4223 = lshr i32 %4199, 31
  %4224 = lshr i32 %4204, 31
  %4225 = xor i32 %4224, %4223
  %4226 = xor i32 %4221, %4223
  %4227 = add nuw nsw i32 %4226, %4225
  %4228 = icmp eq i32 %4227, 2
  %4229 = zext i1 %4228 to i8
  store i8 %4229, i8* %39, align 1
  %4230 = add i64 %4194, -36
  %4231 = add i64 %4196, 9
  store i64 %4231, i64* %3, align 8
  %4232 = inttoptr i64 %4230 to i32*
  %4233 = load i32, i32* %4232, align 4
  %4234 = add i32 %4233, 2
  %4235 = zext i32 %4234 to i64
  store i64 %4235, i64* %RDI.i3890, align 8
  %4236 = sext i32 %4234 to i64
  %4237 = shl nsw i64 %4236, 5
  store i64 %4237, i64* %RDX.i4840, align 8
  %4238 = load i64, i64* %RAX.i1862, align 8
  %4239 = add i64 %4237, %4238
  store i64 %4239, i64* %RSI.i2426, align 8
  %4240 = icmp ult i64 %4239, %4238
  %4241 = icmp ult i64 %4239, %4237
  %4242 = or i1 %4240, %4241
  %4243 = zext i1 %4242 to i8
  store i8 %4243, i8* %14, align 1
  %4244 = trunc i64 %4239 to i32
  %4245 = and i32 %4244, 255
  %4246 = tail call i32 @llvm.ctpop.i32(i32 %4245)
  %4247 = trunc i32 %4246 to i8
  %4248 = and i8 %4247, 1
  %4249 = xor i8 %4248, 1
  store i8 %4249, i8* %21, align 1
  %4250 = xor i64 %4238, %4239
  %4251 = lshr i64 %4250, 4
  %4252 = trunc i64 %4251 to i8
  %4253 = and i8 %4252, 1
  store i8 %4253, i8* %27, align 1
  %4254 = icmp eq i64 %4239, 0
  %4255 = zext i1 %4254 to i8
  store i8 %4255, i8* %30, align 1
  %4256 = lshr i64 %4239, 63
  %4257 = trunc i64 %4256 to i8
  store i8 %4257, i8* %33, align 1
  %4258 = lshr i64 %4238, 63
  %4259 = lshr i64 %4236, 58
  %4260 = and i64 %4259, 1
  %4261 = xor i64 %4256, %4258
  %4262 = xor i64 %4256, %4260
  %4263 = add nuw nsw i64 %4261, %4262
  %4264 = icmp eq i64 %4263, 2
  %4265 = zext i1 %4264 to i8
  store i8 %4265, i8* %39, align 1
  %4266 = load i64, i64* %RBP.i, align 8
  %4267 = add i64 %4266, -44
  %4268 = add i64 %4196, 29
  store i64 %4268, i64* %3, align 8
  %4269 = inttoptr i64 %4267 to i32*
  %4270 = load i32, i32* %4269, align 4
  %4271 = sext i32 %4270 to i64
  store i64 %4271, i64* %RDX.i4840, align 8
  %4272 = shl nsw i64 %4271, 2
  %4273 = add i64 %4272, %4239
  %4274 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %4275 = add i64 %4196, 32
  store i64 %4275, i64* %3, align 8
  %4276 = inttoptr i64 %4273 to i32*
  store i32 %4274, i32* %4276, align 4
  %4277 = load i64, i64* %RBP.i, align 8
  %4278 = add i64 %4277, -100
  %4279 = load i64, i64* %3, align 8
  %4280 = add i64 %4279, 3
  store i64 %4280, i64* %3, align 8
  %4281 = inttoptr i64 %4278 to i32*
  %4282 = load i32, i32* %4281, align 4
  %4283 = shl i32 %4282, 1
  %4284 = icmp slt i32 %4282, 0
  %4285 = icmp slt i32 %4283, 0
  %4286 = xor i1 %4284, %4285
  %4287 = zext i32 %4283 to i64
  store i64 %4287, i64* %RCX.i2028, align 8
  %.lobit104 = lshr i32 %4282, 31
  %4288 = trunc i32 %.lobit104 to i8
  store i8 %4288, i8* %14, align 1
  %4289 = and i32 %4283, 254
  %4290 = tail call i32 @llvm.ctpop.i32(i32 %4289)
  %4291 = trunc i32 %4290 to i8
  %4292 = and i8 %4291, 1
  %4293 = xor i8 %4292, 1
  store i8 %4293, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4294 = icmp eq i32 %4283, 0
  %4295 = zext i1 %4294 to i8
  store i8 %4295, i8* %30, align 1
  %4296 = lshr i32 %4282, 30
  %4297 = trunc i32 %4296 to i8
  %4298 = and i8 %4297, 1
  store i8 %4298, i8* %33, align 1
  %4299 = zext i1 %4286 to i8
  store i8 %4299, i8* %39, align 1
  %4300 = add i64 %4277, -104
  %4301 = add i64 %4279, 8
  store i64 %4301, i64* %3, align 8
  %4302 = inttoptr i64 %4300 to i32*
  %4303 = load i32, i32* %4302, align 4
  %4304 = add i32 %4303, %4283
  %4305 = zext i32 %4304 to i64
  store i64 %4305, i64* %RCX.i2028, align 8
  %4306 = icmp ult i32 %4304, %4283
  %4307 = icmp ult i32 %4304, %4303
  %4308 = or i1 %4306, %4307
  %4309 = zext i1 %4308 to i8
  store i8 %4309, i8* %14, align 1
  %4310 = and i32 %4304, 255
  %4311 = tail call i32 @llvm.ctpop.i32(i32 %4310)
  %4312 = trunc i32 %4311 to i8
  %4313 = and i8 %4312, 1
  %4314 = xor i8 %4313, 1
  store i8 %4314, i8* %21, align 1
  %4315 = xor i32 %4303, %4283
  %4316 = xor i32 %4315, %4304
  %4317 = lshr i32 %4316, 4
  %4318 = trunc i32 %4317 to i8
  %4319 = and i8 %4318, 1
  store i8 %4319, i8* %27, align 1
  %4320 = icmp eq i32 %4304, 0
  %4321 = zext i1 %4320 to i8
  store i8 %4321, i8* %30, align 1
  %4322 = lshr i32 %4304, 31
  %4323 = trunc i32 %4322 to i8
  store i8 %4323, i8* %33, align 1
  %4324 = lshr i32 %4282, 30
  %4325 = and i32 %4324, 1
  %4326 = lshr i32 %4303, 31
  %4327 = xor i32 %4322, %4325
  %4328 = xor i32 %4322, %4326
  %4329 = add nuw nsw i32 %4327, %4328
  %4330 = icmp eq i32 %4329, 2
  %4331 = zext i1 %4330 to i8
  store i8 %4331, i8* %39, align 1
  %4332 = add i64 %4277, -36
  %4333 = add i64 %4279, 11
  store i64 %4333, i64* %3, align 8
  %4334 = inttoptr i64 %4332 to i32*
  %4335 = load i32, i32* %4334, align 4
  %4336 = add i32 %4335, 1
  %4337 = zext i32 %4336 to i64
  store i64 %4337, i64* %RDI.i3890, align 8
  %4338 = sext i32 %4336 to i64
  %4339 = shl nsw i64 %4338, 5
  store i64 %4339, i64* %RDX.i4840, align 8
  %4340 = load i64, i64* %RAX.i1862, align 8
  %4341 = add i64 %4339, %4340
  store i64 %4341, i64* %RSI.i2426, align 8
  %4342 = icmp ult i64 %4341, %4340
  %4343 = icmp ult i64 %4341, %4339
  %4344 = or i1 %4342, %4343
  %4345 = zext i1 %4344 to i8
  store i8 %4345, i8* %14, align 1
  %4346 = trunc i64 %4341 to i32
  %4347 = and i32 %4346, 255
  %4348 = tail call i32 @llvm.ctpop.i32(i32 %4347)
  %4349 = trunc i32 %4348 to i8
  %4350 = and i8 %4349, 1
  %4351 = xor i8 %4350, 1
  store i8 %4351, i8* %21, align 1
  %4352 = xor i64 %4340, %4341
  %4353 = lshr i64 %4352, 4
  %4354 = trunc i64 %4353 to i8
  %4355 = and i8 %4354, 1
  store i8 %4355, i8* %27, align 1
  %4356 = icmp eq i64 %4341, 0
  %4357 = zext i1 %4356 to i8
  store i8 %4357, i8* %30, align 1
  %4358 = lshr i64 %4341, 63
  %4359 = trunc i64 %4358 to i8
  store i8 %4359, i8* %33, align 1
  %4360 = lshr i64 %4340, 63
  %4361 = lshr i64 %4338, 58
  %4362 = and i64 %4361, 1
  %4363 = xor i64 %4358, %4360
  %4364 = xor i64 %4358, %4362
  %4365 = add nuw nsw i64 %4363, %4364
  %4366 = icmp eq i64 %4365, 2
  %4367 = zext i1 %4366 to i8
  store i8 %4367, i8* %39, align 1
  %4368 = load i64, i64* %RBP.i, align 8
  %4369 = add i64 %4368, -44
  %4370 = add i64 %4279, 31
  store i64 %4370, i64* %3, align 8
  %4371 = inttoptr i64 %4369 to i32*
  %4372 = load i32, i32* %4371, align 4
  %4373 = sext i32 %4372 to i64
  store i64 %4373, i64* %RDX.i4840, align 8
  %4374 = shl nsw i64 %4373, 2
  %4375 = add i64 %4374, %4341
  %4376 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %4377 = add i64 %4279, 34
  store i64 %4377, i64* %3, align 8
  %4378 = inttoptr i64 %4375 to i32*
  store i32 %4376, i32* %4378, align 4
  %4379 = load i64, i64* %RBP.i, align 8
  %4380 = add i64 %4379, -100
  %4381 = load i64, i64* %3, align 8
  %4382 = add i64 %4381, 3
  store i64 %4382, i64* %3, align 8
  %4383 = inttoptr i64 %4380 to i32*
  %4384 = load i32, i32* %4383, align 4
  %4385 = zext i32 %4384 to i64
  store i64 %4385, i64* %RCX.i2028, align 8
  %4386 = add i64 %4379, -104
  %4387 = add i64 %4381, 6
  store i64 %4387, i64* %3, align 8
  %4388 = inttoptr i64 %4386 to i32*
  %4389 = load i32, i32* %4388, align 4
  %4390 = shl i32 %4389, 1
  %4391 = zext i32 %4390 to i64
  store i64 %4391, i64* %RDI.i3890, align 8
  %4392 = sub i32 %4384, %4390
  %4393 = zext i32 %4392 to i64
  store i64 %4393, i64* %RCX.i2028, align 8
  %4394 = icmp ult i32 %4384, %4390
  %4395 = zext i1 %4394 to i8
  store i8 %4395, i8* %14, align 1
  %4396 = and i32 %4392, 255
  %4397 = tail call i32 @llvm.ctpop.i32(i32 %4396)
  %4398 = trunc i32 %4397 to i8
  %4399 = and i8 %4398, 1
  %4400 = xor i8 %4399, 1
  store i8 %4400, i8* %21, align 1
  %4401 = xor i32 %4390, %4384
  %4402 = xor i32 %4401, %4392
  %4403 = lshr i32 %4402, 4
  %4404 = trunc i32 %4403 to i8
  %4405 = and i8 %4404, 1
  store i8 %4405, i8* %27, align 1
  %4406 = icmp eq i32 %4392, 0
  %4407 = zext i1 %4406 to i8
  store i8 %4407, i8* %30, align 1
  %4408 = lshr i32 %4392, 31
  %4409 = trunc i32 %4408 to i8
  store i8 %4409, i8* %33, align 1
  %4410 = lshr i32 %4384, 31
  %4411 = lshr i32 %4389, 30
  %4412 = and i32 %4411, 1
  %4413 = xor i32 %4412, %4410
  %4414 = xor i32 %4408, %4410
  %4415 = add nuw nsw i32 %4414, %4413
  %4416 = icmp eq i32 %4415, 2
  %4417 = zext i1 %4416 to i8
  store i8 %4417, i8* %39, align 1
  %4418 = add i64 %4379, -36
  %4419 = add i64 %4381, 13
  store i64 %4419, i64* %3, align 8
  %4420 = inttoptr i64 %4418 to i32*
  %4421 = load i32, i32* %4420, align 4
  %4422 = add i32 %4421, 3
  %4423 = zext i32 %4422 to i64
  store i64 %4423, i64* %RDI.i3890, align 8
  %4424 = sext i32 %4422 to i64
  %4425 = shl nsw i64 %4424, 5
  store i64 %4425, i64* %RDX.i4840, align 8
  %4426 = load i64, i64* %RAX.i1862, align 8
  %4427 = add i64 %4425, %4426
  store i64 %4427, i64* %RAX.i1862, align 8
  %4428 = icmp ult i64 %4427, %4426
  %4429 = icmp ult i64 %4427, %4425
  %4430 = or i1 %4428, %4429
  %4431 = zext i1 %4430 to i8
  store i8 %4431, i8* %14, align 1
  %4432 = trunc i64 %4427 to i32
  %4433 = and i32 %4432, 255
  %4434 = tail call i32 @llvm.ctpop.i32(i32 %4433)
  %4435 = trunc i32 %4434 to i8
  %4436 = and i8 %4435, 1
  %4437 = xor i8 %4436, 1
  store i8 %4437, i8* %21, align 1
  %4438 = xor i64 %4426, %4427
  %4439 = lshr i64 %4438, 4
  %4440 = trunc i64 %4439 to i8
  %4441 = and i8 %4440, 1
  store i8 %4441, i8* %27, align 1
  %4442 = icmp eq i64 %4427, 0
  %4443 = zext i1 %4442 to i8
  store i8 %4443, i8* %30, align 1
  %4444 = lshr i64 %4427, 63
  %4445 = trunc i64 %4444 to i8
  store i8 %4445, i8* %33, align 1
  %4446 = lshr i64 %4426, 63
  %4447 = lshr i64 %4424, 58
  %4448 = and i64 %4447, 1
  %4449 = xor i64 %4444, %4446
  %4450 = xor i64 %4444, %4448
  %4451 = add nuw nsw i64 %4449, %4450
  %4452 = icmp eq i64 %4451, 2
  %4453 = zext i1 %4452 to i8
  store i8 %4453, i8* %39, align 1
  %4454 = load i64, i64* %RBP.i, align 8
  %4455 = add i64 %4454, -44
  %4456 = add i64 %4381, 30
  store i64 %4456, i64* %3, align 8
  %4457 = inttoptr i64 %4455 to i32*
  %4458 = load i32, i32* %4457, align 4
  %4459 = sext i32 %4458 to i64
  store i64 %4459, i64* %RDX.i4840, align 8
  %4460 = shl nsw i64 %4459, 2
  %4461 = add i64 %4460, %4427
  %4462 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %4463 = add i64 %4381, 33
  store i64 %4463, i64* %3, align 8
  %4464 = inttoptr i64 %4461 to i32*
  store i32 %4462, i32* %4464, align 4
  %4465 = load i64, i64* %RBP.i, align 8
  %4466 = add i64 %4465, -16
  %4467 = load i64, i64* %3, align 8
  %4468 = add i64 %4467, 3
  store i64 %4468, i64* %3, align 8
  %4469 = inttoptr i64 %4466 to i32*
  %4470 = load i32, i32* %4469, align 4
  %4471 = add i32 %4470, 1
  %4472 = zext i32 %4471 to i64
  store i64 %4472, i64* %RAX.i1862, align 8
  %4473 = icmp eq i32 %4470, -1
  %4474 = icmp eq i32 %4471, 0
  %4475 = or i1 %4473, %4474
  %4476 = zext i1 %4475 to i8
  store i8 %4476, i8* %14, align 1
  %4477 = and i32 %4471, 255
  %4478 = tail call i32 @llvm.ctpop.i32(i32 %4477)
  %4479 = trunc i32 %4478 to i8
  %4480 = and i8 %4479, 1
  %4481 = xor i8 %4480, 1
  store i8 %4481, i8* %21, align 1
  %4482 = xor i32 %4471, %4470
  %4483 = lshr i32 %4482, 4
  %4484 = trunc i32 %4483 to i8
  %4485 = and i8 %4484, 1
  store i8 %4485, i8* %27, align 1
  %4486 = zext i1 %4474 to i8
  store i8 %4486, i8* %30, align 1
  %4487 = lshr i32 %4471, 31
  %4488 = trunc i32 %4487 to i8
  store i8 %4488, i8* %33, align 1
  %4489 = lshr i32 %4470, 31
  %4490 = xor i32 %4487, %4489
  %4491 = add nuw nsw i32 %4490, %4487
  %4492 = icmp eq i32 %4491, 2
  %4493 = zext i1 %4492 to i8
  store i8 %4493, i8* %39, align 1
  %4494 = add i64 %4467, 9
  store i64 %4494, i64* %3, align 8
  store i32 %4471, i32* %4469, align 4
  %4495 = load i64, i64* %3, align 8
  %4496 = add i64 %4495, -329
  store i64 %4496, i64* %3, align 8
  br label %block_.L_40daf9

block_.L_40dc47:                                  ; preds = %block_.L_40daf9
  %4497 = add i64 %3663, -12
  %4498 = add i64 %3691, 7
  store i64 %4498, i64* %3, align 8
  %4499 = inttoptr i64 %4497 to i32*
  store i32 0, i32* %4499, align 4
  %.pre283 = load i64, i64* %3, align 8
  br label %block_.L_40dc4e

block_.L_40dc4e:                                  ; preds = %block_.L_40dd07, %block_.L_40dc47
  %4500 = phi i64 [ %5505, %block_.L_40dd07 ], [ %.pre283, %block_.L_40dc47 ]
  %4501 = load i64, i64* %RBP.i, align 8
  %4502 = add i64 %4501, -12
  %4503 = add i64 %4500, 4
  store i64 %4503, i64* %3, align 8
  %4504 = inttoptr i64 %4502 to i32*
  %4505 = load i32, i32* %4504, align 4
  %4506 = add i32 %4505, -4
  %4507 = icmp ult i32 %4505, 4
  %4508 = zext i1 %4507 to i8
  store i8 %4508, i8* %14, align 1
  %4509 = and i32 %4506, 255
  %4510 = tail call i32 @llvm.ctpop.i32(i32 %4509)
  %4511 = trunc i32 %4510 to i8
  %4512 = and i8 %4511, 1
  %4513 = xor i8 %4512, 1
  store i8 %4513, i8* %21, align 1
  %4514 = xor i32 %4506, %4505
  %4515 = lshr i32 %4514, 4
  %4516 = trunc i32 %4515 to i8
  %4517 = and i8 %4516, 1
  store i8 %4517, i8* %27, align 1
  %4518 = icmp eq i32 %4506, 0
  %4519 = zext i1 %4518 to i8
  store i8 %4519, i8* %30, align 1
  %4520 = lshr i32 %4506, 31
  %4521 = trunc i32 %4520 to i8
  store i8 %4521, i8* %33, align 1
  %4522 = lshr i32 %4505, 31
  %4523 = xor i32 %4520, %4522
  %4524 = add nuw nsw i32 %4523, %4522
  %4525 = icmp eq i32 %4524, 2
  %4526 = zext i1 %4525 to i8
  store i8 %4526, i8* %39, align 1
  %4527 = icmp ne i8 %4521, 0
  %4528 = xor i1 %4527, %4525
  %.v362 = select i1 %4528, i64 10, i64 339
  %4529 = add i64 %4500, %.v362
  store i64 %4529, i64* %3, align 8
  %4530 = add i64 %4501, -36
  br i1 %4528, label %block_40dc58, label %block_.L_40dda1

block_40dc58:                                     ; preds = %block_.L_40dc4e
  %4531 = add i64 %4529, 3
  store i64 %4531, i64* %3, align 8
  %4532 = inttoptr i64 %4530 to i32*
  %4533 = load i32, i32* %4532, align 4
  %4534 = zext i32 %4533 to i64
  store i64 %4534, i64* %RAX.i1862, align 8
  %4535 = add i64 %4529, 6
  store i64 %4535, i64* %3, align 8
  %4536 = load i32, i32* %4504, align 4
  %4537 = add i32 %4536, %4533
  %4538 = zext i32 %4537 to i64
  store i64 %4538, i64* %RAX.i1862, align 8
  %4539 = icmp ult i32 %4537, %4533
  %4540 = icmp ult i32 %4537, %4536
  %4541 = or i1 %4539, %4540
  %4542 = zext i1 %4541 to i8
  store i8 %4542, i8* %14, align 1
  %4543 = and i32 %4537, 255
  %4544 = tail call i32 @llvm.ctpop.i32(i32 %4543)
  %4545 = trunc i32 %4544 to i8
  %4546 = and i8 %4545, 1
  %4547 = xor i8 %4546, 1
  store i8 %4547, i8* %21, align 1
  %4548 = xor i32 %4536, %4533
  %4549 = xor i32 %4548, %4537
  %4550 = lshr i32 %4549, 4
  %4551 = trunc i32 %4550 to i8
  %4552 = and i8 %4551, 1
  store i8 %4552, i8* %27, align 1
  %4553 = icmp eq i32 %4537, 0
  %4554 = zext i1 %4553 to i8
  store i8 %4554, i8* %30, align 1
  %4555 = lshr i32 %4537, 31
  %4556 = trunc i32 %4555 to i8
  store i8 %4556, i8* %33, align 1
  %4557 = lshr i32 %4533, 31
  %4558 = lshr i32 %4536, 31
  %4559 = xor i32 %4555, %4557
  %4560 = xor i32 %4555, %4558
  %4561 = add nuw nsw i32 %4559, %4560
  %4562 = icmp eq i32 %4561, 2
  %4563 = zext i1 %4562 to i8
  store i8 %4563, i8* %39, align 1
  %4564 = add i64 %4501, -40
  %4565 = add i64 %4529, 9
  store i64 %4565, i64* %3, align 8
  %4566 = inttoptr i64 %4564 to i32*
  store i32 %4537, i32* %4566, align 4
  %4567 = load i64, i64* %RBP.i, align 8
  %4568 = add i64 %4567, -16
  %4569 = load i64, i64* %3, align 8
  %4570 = add i64 %4569, 7
  store i64 %4570, i64* %3, align 8
  %4571 = inttoptr i64 %4568 to i32*
  store i32 0, i32* %4571, align 4
  %.pre284 = load i64, i64* %3, align 8
  br label %block_.L_40dc68

block_.L_40dc68:                                  ; preds = %block_40dc72, %block_40dc58
  %4572 = phi i64 [ %5051, %block_40dc72 ], [ %.pre284, %block_40dc58 ]
  %4573 = load i64, i64* %RBP.i, align 8
  %4574 = add i64 %4573, -16
  %4575 = add i64 %4572, 4
  store i64 %4575, i64* %3, align 8
  %4576 = inttoptr i64 %4574 to i32*
  %4577 = load i32, i32* %4576, align 4
  %4578 = add i32 %4577, -2
  %4579 = icmp ult i32 %4577, 2
  %4580 = zext i1 %4579 to i8
  store i8 %4580, i8* %14, align 1
  %4581 = and i32 %4578, 255
  %4582 = tail call i32 @llvm.ctpop.i32(i32 %4581)
  %4583 = trunc i32 %4582 to i8
  %4584 = and i8 %4583, 1
  %4585 = xor i8 %4584, 1
  store i8 %4585, i8* %21, align 1
  %4586 = xor i32 %4578, %4577
  %4587 = lshr i32 %4586, 4
  %4588 = trunc i32 %4587 to i8
  %4589 = and i8 %4588, 1
  store i8 %4589, i8* %27, align 1
  %4590 = icmp eq i32 %4578, 0
  %4591 = zext i1 %4590 to i8
  store i8 %4591, i8* %30, align 1
  %4592 = lshr i32 %4578, 31
  %4593 = trunc i32 %4592 to i8
  store i8 %4593, i8* %33, align 1
  %4594 = lshr i32 %4577, 31
  %4595 = xor i32 %4592, %4594
  %4596 = add nuw nsw i32 %4595, %4594
  %4597 = icmp eq i32 %4596, 2
  %4598 = zext i1 %4597 to i8
  store i8 %4598, i8* %39, align 1
  %4599 = icmp ne i8 %4593, 0
  %4600 = xor i1 %4599, %4597
  %.v363 = select i1 %4600, i64 10, i64 159
  %4601 = add i64 %4572, %.v363
  %4602 = add i64 %4573, -400
  %4603 = add i64 %4601, 7
  store i64 %4603, i64* %3, align 8
  store i64 %4602, i64* %RAX.i1862, align 8
  br i1 %4600, label %block_40dc72, label %block_.L_40dd07

block_40dc72:                                     ; preds = %block_.L_40dc68
  store i64 3, i64* %RCX.i2028, align 8
  %4604 = add i64 %4601, 15
  store i64 %4604, i64* %3, align 8
  %4605 = load i32, i32* %4576, align 4
  %4606 = sub i32 3, %4605
  %4607 = zext i32 %4606 to i64
  store i64 %4607, i64* %RCX.i2028, align 8
  %4608 = icmp ugt i32 %4605, 3
  %4609 = zext i1 %4608 to i8
  store i8 %4609, i8* %14, align 1
  %4610 = and i32 %4606, 255
  %4611 = tail call i32 @llvm.ctpop.i32(i32 %4610)
  %4612 = trunc i32 %4611 to i8
  %4613 = and i8 %4612, 1
  %4614 = xor i8 %4613, 1
  store i8 %4614, i8* %21, align 1
  %4615 = xor i32 %4606, %4605
  %4616 = lshr i32 %4615, 4
  %4617 = trunc i32 %4616 to i8
  %4618 = and i8 %4617, 1
  store i8 %4618, i8* %27, align 1
  %4619 = icmp eq i32 %4606, 0
  %4620 = zext i1 %4619 to i8
  store i8 %4620, i8* %30, align 1
  %4621 = lshr i32 %4606, 31
  %4622 = trunc i32 %4621 to i8
  store i8 %4622, i8* %33, align 1
  %4623 = lshr i32 %4605, 31
  %4624 = add nuw nsw i32 %4621, %4623
  %4625 = icmp eq i32 %4624, 2
  %4626 = zext i1 %4625 to i8
  store i8 %4626, i8* %39, align 1
  %4627 = add i64 %4573, -24
  %4628 = add i64 %4601, 18
  store i64 %4628, i64* %3, align 8
  %4629 = inttoptr i64 %4627 to i32*
  store i32 %4606, i32* %4629, align 4
  %4630 = load i64, i64* %RBP.i, align 8
  %4631 = add i64 %4630, -40
  %4632 = load i64, i64* %3, align 8
  %4633 = add i64 %4632, 4
  store i64 %4633, i64* %3, align 8
  %4634 = inttoptr i64 %4631 to i32*
  %4635 = load i32, i32* %4634, align 4
  %4636 = sext i32 %4635 to i64
  %4637 = shl nsw i64 %4636, 5
  store i64 %4637, i64* %RDX.i4840, align 8
  %4638 = load i64, i64* %RAX.i1862, align 8
  %4639 = add i64 %4637, %4638
  store i64 %4639, i64* %RSI.i2426, align 8
  %4640 = icmp ult i64 %4639, %4638
  %4641 = icmp ult i64 %4639, %4637
  %4642 = or i1 %4640, %4641
  %4643 = zext i1 %4642 to i8
  store i8 %4643, i8* %14, align 1
  %4644 = trunc i64 %4639 to i32
  %4645 = and i32 %4644, 255
  %4646 = tail call i32 @llvm.ctpop.i32(i32 %4645)
  %4647 = trunc i32 %4646 to i8
  %4648 = and i8 %4647, 1
  %4649 = xor i8 %4648, 1
  store i8 %4649, i8* %21, align 1
  %4650 = xor i64 %4638, %4639
  %4651 = lshr i64 %4650, 4
  %4652 = trunc i64 %4651 to i8
  %4653 = and i8 %4652, 1
  store i8 %4653, i8* %27, align 1
  %4654 = icmp eq i64 %4639, 0
  %4655 = zext i1 %4654 to i8
  store i8 %4655, i8* %30, align 1
  %4656 = lshr i64 %4639, 63
  %4657 = trunc i64 %4656 to i8
  store i8 %4657, i8* %33, align 1
  %4658 = lshr i64 %4638, 63
  %4659 = lshr i64 %4636, 58
  %4660 = and i64 %4659, 1
  %4661 = xor i64 %4656, %4658
  %4662 = xor i64 %4656, %4660
  %4663 = add nuw nsw i64 %4661, %4662
  %4664 = icmp eq i64 %4663, 2
  %4665 = zext i1 %4664 to i8
  store i8 %4665, i8* %39, align 1
  %4666 = add i64 %4630, -32
  %4667 = add i64 %4632, 17
  store i64 %4667, i64* %3, align 8
  %4668 = inttoptr i64 %4666 to i32*
  %4669 = load i32, i32* %4668, align 4
  %4670 = zext i32 %4669 to i64
  store i64 %4670, i64* %RCX.i2028, align 8
  %4671 = add i64 %4630, -16
  %4672 = add i64 %4632, 20
  store i64 %4672, i64* %3, align 8
  %4673 = inttoptr i64 %4671 to i32*
  %4674 = load i32, i32* %4673, align 4
  %4675 = add i32 %4674, %4669
  %4676 = zext i32 %4675 to i64
  store i64 %4676, i64* %RCX.i2028, align 8
  %4677 = icmp ult i32 %4675, %4669
  %4678 = icmp ult i32 %4675, %4674
  %4679 = or i1 %4677, %4678
  %4680 = zext i1 %4679 to i8
  store i8 %4680, i8* %14, align 1
  %4681 = and i32 %4675, 255
  %4682 = tail call i32 @llvm.ctpop.i32(i32 %4681)
  %4683 = trunc i32 %4682 to i8
  %4684 = and i8 %4683, 1
  %4685 = xor i8 %4684, 1
  store i8 %4685, i8* %21, align 1
  %4686 = xor i32 %4674, %4669
  %4687 = xor i32 %4686, %4675
  %4688 = lshr i32 %4687, 4
  %4689 = trunc i32 %4688 to i8
  %4690 = and i8 %4689, 1
  store i8 %4690, i8* %27, align 1
  %4691 = icmp eq i32 %4675, 0
  %4692 = zext i1 %4691 to i8
  store i8 %4692, i8* %30, align 1
  %4693 = lshr i32 %4675, 31
  %4694 = trunc i32 %4693 to i8
  store i8 %4694, i8* %33, align 1
  %4695 = lshr i32 %4669, 31
  %4696 = lshr i32 %4674, 31
  %4697 = xor i32 %4693, %4695
  %4698 = xor i32 %4693, %4696
  %4699 = add nuw nsw i32 %4697, %4698
  %4700 = icmp eq i32 %4699, 2
  %4701 = zext i1 %4700 to i8
  store i8 %4701, i8* %39, align 1
  %4702 = sext i32 %4675 to i64
  store i64 %4702, i64* %RDX.i4840, align 8
  %4703 = shl nsw i64 %4702, 2
  %4704 = add i64 %4639, %4703
  %4705 = add i64 %4632, 26
  store i64 %4705, i64* %3, align 8
  %4706 = inttoptr i64 %4704 to i32*
  %4707 = load i32, i32* %4706, align 4
  %4708 = zext i32 %4707 to i64
  store i64 %4708, i64* %RCX.i2028, align 8
  %4709 = load i64, i64* %RBP.i, align 8
  %4710 = add i64 %4709, -40
  %4711 = add i64 %4632, 30
  store i64 %4711, i64* %3, align 8
  %4712 = inttoptr i64 %4710 to i32*
  %4713 = load i32, i32* %4712, align 4
  %4714 = sext i32 %4713 to i64
  %4715 = shl nsw i64 %4714, 5
  store i64 %4715, i64* %RDX.i4840, align 8
  %4716 = load i64, i64* %RAX.i1862, align 8
  %4717 = add i64 %4715, %4716
  store i64 %4717, i64* %RSI.i2426, align 8
  %4718 = icmp ult i64 %4717, %4716
  %4719 = icmp ult i64 %4717, %4715
  %4720 = or i1 %4718, %4719
  %4721 = zext i1 %4720 to i8
  store i8 %4721, i8* %14, align 1
  %4722 = trunc i64 %4717 to i32
  %4723 = and i32 %4722, 255
  %4724 = tail call i32 @llvm.ctpop.i32(i32 %4723)
  %4725 = trunc i32 %4724 to i8
  %4726 = and i8 %4725, 1
  %4727 = xor i8 %4726, 1
  store i8 %4727, i8* %21, align 1
  %4728 = xor i64 %4716, %4717
  %4729 = lshr i64 %4728, 4
  %4730 = trunc i64 %4729 to i8
  %4731 = and i8 %4730, 1
  store i8 %4731, i8* %27, align 1
  %4732 = icmp eq i64 %4717, 0
  %4733 = zext i1 %4732 to i8
  store i8 %4733, i8* %30, align 1
  %4734 = lshr i64 %4717, 63
  %4735 = trunc i64 %4734 to i8
  store i8 %4735, i8* %33, align 1
  %4736 = lshr i64 %4716, 63
  %4737 = lshr i64 %4714, 58
  %4738 = and i64 %4737, 1
  %4739 = xor i64 %4734, %4736
  %4740 = xor i64 %4734, %4738
  %4741 = add nuw nsw i64 %4739, %4740
  %4742 = icmp eq i64 %4741, 2
  %4743 = zext i1 %4742 to i8
  store i8 %4743, i8* %39, align 1
  %4744 = add i64 %4709, -32
  %4745 = add i64 %4632, 43
  store i64 %4745, i64* %3, align 8
  %4746 = inttoptr i64 %4744 to i32*
  %4747 = load i32, i32* %4746, align 4
  %4748 = zext i32 %4747 to i64
  store i64 %4748, i64* %RDI.i3890, align 8
  %4749 = add i64 %4709, -24
  %4750 = add i64 %4632, 46
  store i64 %4750, i64* %3, align 8
  %4751 = inttoptr i64 %4749 to i32*
  %4752 = load i32, i32* %4751, align 4
  %4753 = add i32 %4752, %4747
  %4754 = zext i32 %4753 to i64
  store i64 %4754, i64* %RDI.i3890, align 8
  %4755 = icmp ult i32 %4753, %4747
  %4756 = icmp ult i32 %4753, %4752
  %4757 = or i1 %4755, %4756
  %4758 = zext i1 %4757 to i8
  store i8 %4758, i8* %14, align 1
  %4759 = and i32 %4753, 255
  %4760 = tail call i32 @llvm.ctpop.i32(i32 %4759)
  %4761 = trunc i32 %4760 to i8
  %4762 = and i8 %4761, 1
  %4763 = xor i8 %4762, 1
  store i8 %4763, i8* %21, align 1
  %4764 = xor i32 %4752, %4747
  %4765 = xor i32 %4764, %4753
  %4766 = lshr i32 %4765, 4
  %4767 = trunc i32 %4766 to i8
  %4768 = and i8 %4767, 1
  store i8 %4768, i8* %27, align 1
  %4769 = icmp eq i32 %4753, 0
  %4770 = zext i1 %4769 to i8
  store i8 %4770, i8* %30, align 1
  %4771 = lshr i32 %4753, 31
  %4772 = trunc i32 %4771 to i8
  store i8 %4772, i8* %33, align 1
  %4773 = lshr i32 %4747, 31
  %4774 = lshr i32 %4752, 31
  %4775 = xor i32 %4771, %4773
  %4776 = xor i32 %4771, %4774
  %4777 = add nuw nsw i32 %4775, %4776
  %4778 = icmp eq i32 %4777, 2
  %4779 = zext i1 %4778 to i8
  store i8 %4779, i8* %39, align 1
  %4780 = sext i32 %4753 to i64
  store i64 %4780, i64* %RDX.i4840, align 8
  %4781 = load i64, i64* %RCX.i2028, align 8
  %4782 = shl nsw i64 %4780, 2
  %4783 = add i64 %4717, %4782
  %4784 = add i64 %4632, 52
  store i64 %4784, i64* %3, align 8
  %4785 = trunc i64 %4781 to i32
  %4786 = inttoptr i64 %4783 to i32*
  %4787 = load i32, i32* %4786, align 4
  %4788 = add i32 %4787, %4785
  %4789 = zext i32 %4788 to i64
  store i64 %4789, i64* %RCX.i2028, align 8
  %4790 = icmp ult i32 %4788, %4785
  %4791 = icmp ult i32 %4788, %4787
  %4792 = or i1 %4790, %4791
  %4793 = zext i1 %4792 to i8
  store i8 %4793, i8* %14, align 1
  %4794 = and i32 %4788, 255
  %4795 = tail call i32 @llvm.ctpop.i32(i32 %4794)
  %4796 = trunc i32 %4795 to i8
  %4797 = and i8 %4796, 1
  %4798 = xor i8 %4797, 1
  store i8 %4798, i8* %21, align 1
  %4799 = xor i32 %4787, %4785
  %4800 = xor i32 %4799, %4788
  %4801 = lshr i32 %4800, 4
  %4802 = trunc i32 %4801 to i8
  %4803 = and i8 %4802, 1
  store i8 %4803, i8* %27, align 1
  %4804 = icmp eq i32 %4788, 0
  %4805 = zext i1 %4804 to i8
  store i8 %4805, i8* %30, align 1
  %4806 = lshr i32 %4788, 31
  %4807 = trunc i32 %4806 to i8
  store i8 %4807, i8* %33, align 1
  %4808 = lshr i32 %4785, 31
  %4809 = lshr i32 %4787, 31
  %4810 = xor i32 %4806, %4808
  %4811 = xor i32 %4806, %4809
  %4812 = add nuw nsw i32 %4810, %4811
  %4813 = icmp eq i32 %4812, 2
  %4814 = zext i1 %4813 to i8
  store i8 %4814, i8* %39, align 1
  %4815 = load i64, i64* %RBP.i, align 8
  %4816 = add i64 %4815, -16
  %4817 = add i64 %4632, 56
  store i64 %4817, i64* %3, align 8
  %4818 = inttoptr i64 %4816 to i32*
  %4819 = load i32, i32* %4818, align 4
  %4820 = sext i32 %4819 to i64
  store i64 %4820, i64* %RDX.i4840, align 8
  %4821 = shl nsw i64 %4820, 2
  %4822 = add i64 %4815, -112
  %4823 = add i64 %4822, %4821
  %4824 = add i64 %4632, 60
  store i64 %4824, i64* %3, align 8
  %4825 = inttoptr i64 %4823 to i32*
  store i32 %4788, i32* %4825, align 4
  %4826 = load i64, i64* %RBP.i, align 8
  %4827 = add i64 %4826, -40
  %4828 = load i64, i64* %3, align 8
  %4829 = add i64 %4828, 4
  store i64 %4829, i64* %3, align 8
  %4830 = inttoptr i64 %4827 to i32*
  %4831 = load i32, i32* %4830, align 4
  %4832 = sext i32 %4831 to i64
  %4833 = shl nsw i64 %4832, 5
  store i64 %4833, i64* %RDX.i4840, align 8
  %4834 = load i64, i64* %RAX.i1862, align 8
  %4835 = add i64 %4833, %4834
  store i64 %4835, i64* %RSI.i2426, align 8
  %4836 = icmp ult i64 %4835, %4834
  %4837 = icmp ult i64 %4835, %4833
  %4838 = or i1 %4836, %4837
  %4839 = zext i1 %4838 to i8
  store i8 %4839, i8* %14, align 1
  %4840 = trunc i64 %4835 to i32
  %4841 = and i32 %4840, 255
  %4842 = tail call i32 @llvm.ctpop.i32(i32 %4841)
  %4843 = trunc i32 %4842 to i8
  %4844 = and i8 %4843, 1
  %4845 = xor i8 %4844, 1
  store i8 %4845, i8* %21, align 1
  %4846 = xor i64 %4834, %4835
  %4847 = lshr i64 %4846, 4
  %4848 = trunc i64 %4847 to i8
  %4849 = and i8 %4848, 1
  store i8 %4849, i8* %27, align 1
  %4850 = icmp eq i64 %4835, 0
  %4851 = zext i1 %4850 to i8
  store i8 %4851, i8* %30, align 1
  %4852 = lshr i64 %4835, 63
  %4853 = trunc i64 %4852 to i8
  store i8 %4853, i8* %33, align 1
  %4854 = lshr i64 %4834, 63
  %4855 = lshr i64 %4832, 58
  %4856 = and i64 %4855, 1
  %4857 = xor i64 %4852, %4854
  %4858 = xor i64 %4852, %4856
  %4859 = add nuw nsw i64 %4857, %4858
  %4860 = icmp eq i64 %4859, 2
  %4861 = zext i1 %4860 to i8
  store i8 %4861, i8* %39, align 1
  %4862 = add i64 %4826, -32
  %4863 = add i64 %4828, 17
  store i64 %4863, i64* %3, align 8
  %4864 = inttoptr i64 %4862 to i32*
  %4865 = load i32, i32* %4864, align 4
  %4866 = zext i32 %4865 to i64
  store i64 %4866, i64* %RCX.i2028, align 8
  %4867 = add i64 %4826, -16
  %4868 = add i64 %4828, 20
  store i64 %4868, i64* %3, align 8
  %4869 = inttoptr i64 %4867 to i32*
  %4870 = load i32, i32* %4869, align 4
  %4871 = add i32 %4870, %4865
  %4872 = zext i32 %4871 to i64
  store i64 %4872, i64* %RCX.i2028, align 8
  %4873 = icmp ult i32 %4871, %4865
  %4874 = icmp ult i32 %4871, %4870
  %4875 = or i1 %4873, %4874
  %4876 = zext i1 %4875 to i8
  store i8 %4876, i8* %14, align 1
  %4877 = and i32 %4871, 255
  %4878 = tail call i32 @llvm.ctpop.i32(i32 %4877)
  %4879 = trunc i32 %4878 to i8
  %4880 = and i8 %4879, 1
  %4881 = xor i8 %4880, 1
  store i8 %4881, i8* %21, align 1
  %4882 = xor i32 %4870, %4865
  %4883 = xor i32 %4882, %4871
  %4884 = lshr i32 %4883, 4
  %4885 = trunc i32 %4884 to i8
  %4886 = and i8 %4885, 1
  store i8 %4886, i8* %27, align 1
  %4887 = icmp eq i32 %4871, 0
  %4888 = zext i1 %4887 to i8
  store i8 %4888, i8* %30, align 1
  %4889 = lshr i32 %4871, 31
  %4890 = trunc i32 %4889 to i8
  store i8 %4890, i8* %33, align 1
  %4891 = lshr i32 %4865, 31
  %4892 = lshr i32 %4870, 31
  %4893 = xor i32 %4889, %4891
  %4894 = xor i32 %4889, %4892
  %4895 = add nuw nsw i32 %4893, %4894
  %4896 = icmp eq i32 %4895, 2
  %4897 = zext i1 %4896 to i8
  store i8 %4897, i8* %39, align 1
  %4898 = sext i32 %4871 to i64
  store i64 %4898, i64* %RDX.i4840, align 8
  %4899 = shl nsw i64 %4898, 2
  %4900 = add i64 %4835, %4899
  %4901 = add i64 %4828, 26
  store i64 %4901, i64* %3, align 8
  %4902 = inttoptr i64 %4900 to i32*
  %4903 = load i32, i32* %4902, align 4
  %4904 = zext i32 %4903 to i64
  store i64 %4904, i64* %RCX.i2028, align 8
  %4905 = load i64, i64* %RBP.i, align 8
  %4906 = add i64 %4905, -40
  %4907 = add i64 %4828, 30
  store i64 %4907, i64* %3, align 8
  %4908 = inttoptr i64 %4906 to i32*
  %4909 = load i32, i32* %4908, align 4
  %4910 = sext i32 %4909 to i64
  %4911 = shl nsw i64 %4910, 5
  store i64 %4911, i64* %RDX.i4840, align 8
  %4912 = load i64, i64* %RAX.i1862, align 8
  %4913 = add i64 %4911, %4912
  store i64 %4913, i64* %RAX.i1862, align 8
  %4914 = icmp ult i64 %4913, %4912
  %4915 = icmp ult i64 %4913, %4911
  %4916 = or i1 %4914, %4915
  %4917 = zext i1 %4916 to i8
  store i8 %4917, i8* %14, align 1
  %4918 = trunc i64 %4913 to i32
  %4919 = and i32 %4918, 255
  %4920 = tail call i32 @llvm.ctpop.i32(i32 %4919)
  %4921 = trunc i32 %4920 to i8
  %4922 = and i8 %4921, 1
  %4923 = xor i8 %4922, 1
  store i8 %4923, i8* %21, align 1
  %4924 = xor i64 %4912, %4913
  %4925 = lshr i64 %4924, 4
  %4926 = trunc i64 %4925 to i8
  %4927 = and i8 %4926, 1
  store i8 %4927, i8* %27, align 1
  %4928 = icmp eq i64 %4913, 0
  %4929 = zext i1 %4928 to i8
  store i8 %4929, i8* %30, align 1
  %4930 = lshr i64 %4913, 63
  %4931 = trunc i64 %4930 to i8
  store i8 %4931, i8* %33, align 1
  %4932 = lshr i64 %4912, 63
  %4933 = lshr i64 %4910, 58
  %4934 = and i64 %4933, 1
  %4935 = xor i64 %4930, %4932
  %4936 = xor i64 %4930, %4934
  %4937 = add nuw nsw i64 %4935, %4936
  %4938 = icmp eq i64 %4937, 2
  %4939 = zext i1 %4938 to i8
  store i8 %4939, i8* %39, align 1
  %4940 = add i64 %4905, -32
  %4941 = add i64 %4828, 40
  store i64 %4941, i64* %3, align 8
  %4942 = inttoptr i64 %4940 to i32*
  %4943 = load i32, i32* %4942, align 4
  %4944 = zext i32 %4943 to i64
  store i64 %4944, i64* %RDI.i3890, align 8
  %4945 = add i64 %4905, -24
  %4946 = add i64 %4828, 43
  store i64 %4946, i64* %3, align 8
  %4947 = inttoptr i64 %4945 to i32*
  %4948 = load i32, i32* %4947, align 4
  %4949 = add i32 %4948, %4943
  %4950 = zext i32 %4949 to i64
  store i64 %4950, i64* %RDI.i3890, align 8
  %4951 = icmp ult i32 %4949, %4943
  %4952 = icmp ult i32 %4949, %4948
  %4953 = or i1 %4951, %4952
  %4954 = zext i1 %4953 to i8
  store i8 %4954, i8* %14, align 1
  %4955 = and i32 %4949, 255
  %4956 = tail call i32 @llvm.ctpop.i32(i32 %4955)
  %4957 = trunc i32 %4956 to i8
  %4958 = and i8 %4957, 1
  %4959 = xor i8 %4958, 1
  store i8 %4959, i8* %21, align 1
  %4960 = xor i32 %4948, %4943
  %4961 = xor i32 %4960, %4949
  %4962 = lshr i32 %4961, 4
  %4963 = trunc i32 %4962 to i8
  %4964 = and i8 %4963, 1
  store i8 %4964, i8* %27, align 1
  %4965 = icmp eq i32 %4949, 0
  %4966 = zext i1 %4965 to i8
  store i8 %4966, i8* %30, align 1
  %4967 = lshr i32 %4949, 31
  %4968 = trunc i32 %4967 to i8
  store i8 %4968, i8* %33, align 1
  %4969 = lshr i32 %4943, 31
  %4970 = lshr i32 %4948, 31
  %4971 = xor i32 %4967, %4969
  %4972 = xor i32 %4967, %4970
  %4973 = add nuw nsw i32 %4971, %4972
  %4974 = icmp eq i32 %4973, 2
  %4975 = zext i1 %4974 to i8
  store i8 %4975, i8* %39, align 1
  %4976 = sext i32 %4949 to i64
  store i64 %4976, i64* %RDX.i4840, align 8
  %4977 = load i64, i64* %RCX.i2028, align 8
  %4978 = shl nsw i64 %4976, 2
  %4979 = add i64 %4913, %4978
  %4980 = add i64 %4828, 49
  store i64 %4980, i64* %3, align 8
  %4981 = trunc i64 %4977 to i32
  %4982 = inttoptr i64 %4979 to i32*
  %4983 = load i32, i32* %4982, align 4
  %4984 = sub i32 %4981, %4983
  %4985 = zext i32 %4984 to i64
  store i64 %4985, i64* %RCX.i2028, align 8
  %4986 = icmp ult i32 %4981, %4983
  %4987 = zext i1 %4986 to i8
  store i8 %4987, i8* %14, align 1
  %4988 = and i32 %4984, 255
  %4989 = tail call i32 @llvm.ctpop.i32(i32 %4988)
  %4990 = trunc i32 %4989 to i8
  %4991 = and i8 %4990, 1
  %4992 = xor i8 %4991, 1
  store i8 %4992, i8* %21, align 1
  %4993 = xor i32 %4983, %4981
  %4994 = xor i32 %4993, %4984
  %4995 = lshr i32 %4994, 4
  %4996 = trunc i32 %4995 to i8
  %4997 = and i8 %4996, 1
  store i8 %4997, i8* %27, align 1
  %4998 = icmp eq i32 %4984, 0
  %4999 = zext i1 %4998 to i8
  store i8 %4999, i8* %30, align 1
  %5000 = lshr i32 %4984, 31
  %5001 = trunc i32 %5000 to i8
  store i8 %5001, i8* %33, align 1
  %5002 = lshr i32 %4981, 31
  %5003 = lshr i32 %4983, 31
  %5004 = xor i32 %5003, %5002
  %5005 = xor i32 %5000, %5002
  %5006 = add nuw nsw i32 %5005, %5004
  %5007 = icmp eq i32 %5006, 2
  %5008 = zext i1 %5007 to i8
  store i8 %5008, i8* %39, align 1
  %5009 = load i64, i64* %RBP.i, align 8
  %5010 = add i64 %5009, -24
  %5011 = add i64 %4828, 53
  store i64 %5011, i64* %3, align 8
  %5012 = inttoptr i64 %5010 to i32*
  %5013 = load i32, i32* %5012, align 4
  %5014 = sext i32 %5013 to i64
  store i64 %5014, i64* %RAX.i1862, align 8
  %5015 = shl nsw i64 %5014, 2
  %5016 = add i64 %5009, -112
  %5017 = add i64 %5016, %5015
  %5018 = add i64 %4828, 57
  store i64 %5018, i64* %3, align 8
  %5019 = inttoptr i64 %5017 to i32*
  store i32 %4984, i32* %5019, align 4
  %5020 = load i64, i64* %RBP.i, align 8
  %5021 = add i64 %5020, -16
  %5022 = load i64, i64* %3, align 8
  %5023 = add i64 %5022, 3
  store i64 %5023, i64* %3, align 8
  %5024 = inttoptr i64 %5021 to i32*
  %5025 = load i32, i32* %5024, align 4
  %5026 = add i32 %5025, 1
  %5027 = zext i32 %5026 to i64
  store i64 %5027, i64* %RAX.i1862, align 8
  %5028 = icmp eq i32 %5025, -1
  %5029 = icmp eq i32 %5026, 0
  %5030 = or i1 %5028, %5029
  %5031 = zext i1 %5030 to i8
  store i8 %5031, i8* %14, align 1
  %5032 = and i32 %5026, 255
  %5033 = tail call i32 @llvm.ctpop.i32(i32 %5032)
  %5034 = trunc i32 %5033 to i8
  %5035 = and i8 %5034, 1
  %5036 = xor i8 %5035, 1
  store i8 %5036, i8* %21, align 1
  %5037 = xor i32 %5026, %5025
  %5038 = lshr i32 %5037, 4
  %5039 = trunc i32 %5038 to i8
  %5040 = and i8 %5039, 1
  store i8 %5040, i8* %27, align 1
  %5041 = zext i1 %5029 to i8
  store i8 %5041, i8* %30, align 1
  %5042 = lshr i32 %5026, 31
  %5043 = trunc i32 %5042 to i8
  store i8 %5043, i8* %33, align 1
  %5044 = lshr i32 %5025, 31
  %5045 = xor i32 %5042, %5044
  %5046 = add nuw nsw i32 %5045, %5042
  %5047 = icmp eq i32 %5046, 2
  %5048 = zext i1 %5047 to i8
  store i8 %5048, i8* %39, align 1
  %5049 = add i64 %5022, 9
  store i64 %5049, i64* %3, align 8
  store i32 %5026, i32* %5024, align 4
  %5050 = load i64, i64* %3, align 8
  %5051 = add i64 %5050, -154
  store i64 %5051, i64* %3, align 8
  br label %block_.L_40dc68

block_.L_40dd07:                                  ; preds = %block_.L_40dc68
  %5052 = add i64 %4573, -112
  %5053 = add i64 %4601, 10
  store i64 %5053, i64* %3, align 8
  %5054 = inttoptr i64 %5052 to i32*
  %5055 = load i32, i32* %5054, align 4
  %5056 = zext i32 %5055 to i64
  store i64 %5056, i64* %RCX.i2028, align 8
  %5057 = add i64 %4573, -108
  %5058 = add i64 %4601, 13
  store i64 %5058, i64* %3, align 8
  %5059 = inttoptr i64 %5057 to i32*
  %5060 = load i32, i32* %5059, align 4
  %5061 = add i32 %5060, %5055
  %5062 = zext i32 %5061 to i64
  store i64 %5062, i64* %RCX.i2028, align 8
  %5063 = icmp ult i32 %5061, %5055
  %5064 = icmp ult i32 %5061, %5060
  %5065 = or i1 %5063, %5064
  %5066 = zext i1 %5065 to i8
  store i8 %5066, i8* %14, align 1
  %5067 = and i32 %5061, 255
  %5068 = tail call i32 @llvm.ctpop.i32(i32 %5067)
  %5069 = trunc i32 %5068 to i8
  %5070 = and i8 %5069, 1
  %5071 = xor i8 %5070, 1
  store i8 %5071, i8* %21, align 1
  %5072 = xor i32 %5060, %5055
  %5073 = xor i32 %5072, %5061
  %5074 = lshr i32 %5073, 4
  %5075 = trunc i32 %5074 to i8
  %5076 = and i8 %5075, 1
  store i8 %5076, i8* %27, align 1
  %5077 = icmp eq i32 %5061, 0
  %5078 = zext i1 %5077 to i8
  store i8 %5078, i8* %30, align 1
  %5079 = lshr i32 %5061, 31
  %5080 = trunc i32 %5079 to i8
  store i8 %5080, i8* %33, align 1
  %5081 = lshr i32 %5055, 31
  %5082 = lshr i32 %5060, 31
  %5083 = xor i32 %5079, %5081
  %5084 = xor i32 %5079, %5082
  %5085 = add nuw nsw i32 %5083, %5084
  %5086 = icmp eq i32 %5085, 2
  %5087 = zext i1 %5086 to i8
  store i8 %5087, i8* %39, align 1
  %5088 = add i64 %4573, -40
  %5089 = add i64 %4601, 17
  store i64 %5089, i64* %3, align 8
  %5090 = inttoptr i64 %5088 to i32*
  %5091 = load i32, i32* %5090, align 4
  %5092 = sext i32 %5091 to i64
  %5093 = shl nsw i64 %5092, 5
  store i64 %5093, i64* %RDX.i4840, align 8
  %5094 = add i64 %5093, %4602
  store i64 %5094, i64* %RSI.i2426, align 8
  %5095 = icmp ult i64 %5094, %4602
  %5096 = icmp ult i64 %5094, %5093
  %5097 = or i1 %5095, %5096
  %5098 = zext i1 %5097 to i8
  store i8 %5098, i8* %14, align 1
  %5099 = trunc i64 %5094 to i32
  %5100 = and i32 %5099, 255
  %5101 = tail call i32 @llvm.ctpop.i32(i32 %5100)
  %5102 = trunc i32 %5101 to i8
  %5103 = and i8 %5102, 1
  %5104 = xor i8 %5103, 1
  store i8 %5104, i8* %21, align 1
  %5105 = xor i64 %4602, %5094
  %5106 = lshr i64 %5105, 4
  %5107 = trunc i64 %5106 to i8
  %5108 = and i8 %5107, 1
  store i8 %5108, i8* %27, align 1
  %5109 = icmp eq i64 %5094, 0
  %5110 = zext i1 %5109 to i8
  store i8 %5110, i8* %30, align 1
  %5111 = lshr i64 %5094, 63
  %5112 = trunc i64 %5111 to i8
  store i8 %5112, i8* %33, align 1
  %5113 = lshr i64 %4602, 63
  %5114 = lshr i64 %5092, 58
  %5115 = and i64 %5114, 1
  %5116 = xor i64 %5111, %5113
  %5117 = xor i64 %5111, %5115
  %5118 = add nuw nsw i64 %5116, %5117
  %5119 = icmp eq i64 %5118, 2
  %5120 = zext i1 %5119 to i8
  store i8 %5120, i8* %39, align 1
  %5121 = load i64, i64* %RBP.i, align 8
  %5122 = add i64 %5121, -32
  %5123 = add i64 %4601, 30
  store i64 %5123, i64* %3, align 8
  %5124 = inttoptr i64 %5122 to i32*
  %5125 = load i32, i32* %5124, align 4
  %5126 = zext i32 %5125 to i64
  store i64 %5126, i64* %RDI.i3890, align 8
  store i8 0, i8* %14, align 1
  %5127 = and i32 %5125, 255
  %5128 = tail call i32 @llvm.ctpop.i32(i32 %5127)
  %5129 = trunc i32 %5128 to i8
  %5130 = and i8 %5129, 1
  %5131 = xor i8 %5130, 1
  store i8 %5131, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5132 = icmp eq i32 %5125, 0
  %5133 = zext i1 %5132 to i8
  store i8 %5133, i8* %30, align 1
  %5134 = lshr i32 %5125, 31
  %5135 = trunc i32 %5134 to i8
  store i8 %5135, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5136 = sext i32 %5125 to i64
  store i64 %5136, i64* %RDX.i4840, align 8
  %5137 = shl nsw i64 %5136, 2
  %5138 = add i64 %5094, %5137
  %5139 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %5140 = add i64 %4601, 39
  store i64 %5140, i64* %3, align 8
  %5141 = inttoptr i64 %5138 to i32*
  store i32 %5139, i32* %5141, align 4
  %5142 = load i64, i64* %RBP.i, align 8
  %5143 = add i64 %5142, -112
  %5144 = load i64, i64* %3, align 8
  %5145 = add i64 %5144, 3
  store i64 %5145, i64* %3, align 8
  %5146 = inttoptr i64 %5143 to i32*
  %5147 = load i32, i32* %5146, align 4
  %5148 = zext i32 %5147 to i64
  store i64 %5148, i64* %RCX.i2028, align 8
  %5149 = add i64 %5142, -108
  %5150 = add i64 %5144, 6
  store i64 %5150, i64* %3, align 8
  %5151 = inttoptr i64 %5149 to i32*
  %5152 = load i32, i32* %5151, align 4
  %5153 = sub i32 %5147, %5152
  %5154 = zext i32 %5153 to i64
  store i64 %5154, i64* %RCX.i2028, align 8
  %5155 = icmp ult i32 %5147, %5152
  %5156 = zext i1 %5155 to i8
  store i8 %5156, i8* %14, align 1
  %5157 = and i32 %5153, 255
  %5158 = tail call i32 @llvm.ctpop.i32(i32 %5157)
  %5159 = trunc i32 %5158 to i8
  %5160 = and i8 %5159, 1
  %5161 = xor i8 %5160, 1
  store i8 %5161, i8* %21, align 1
  %5162 = xor i32 %5152, %5147
  %5163 = xor i32 %5162, %5153
  %5164 = lshr i32 %5163, 4
  %5165 = trunc i32 %5164 to i8
  %5166 = and i8 %5165, 1
  store i8 %5166, i8* %27, align 1
  %5167 = icmp eq i32 %5153, 0
  %5168 = zext i1 %5167 to i8
  store i8 %5168, i8* %30, align 1
  %5169 = lshr i32 %5153, 31
  %5170 = trunc i32 %5169 to i8
  store i8 %5170, i8* %33, align 1
  %5171 = lshr i32 %5147, 31
  %5172 = lshr i32 %5152, 31
  %5173 = xor i32 %5172, %5171
  %5174 = xor i32 %5169, %5171
  %5175 = add nuw nsw i32 %5174, %5173
  %5176 = icmp eq i32 %5175, 2
  %5177 = zext i1 %5176 to i8
  store i8 %5177, i8* %39, align 1
  %5178 = add i64 %5142, -40
  %5179 = add i64 %5144, 10
  store i64 %5179, i64* %3, align 8
  %5180 = inttoptr i64 %5178 to i32*
  %5181 = load i32, i32* %5180, align 4
  %5182 = sext i32 %5181 to i64
  %5183 = shl nsw i64 %5182, 5
  store i64 %5183, i64* %RDX.i4840, align 8
  %5184 = load i64, i64* %RAX.i1862, align 8
  %5185 = add i64 %5183, %5184
  store i64 %5185, i64* %RSI.i2426, align 8
  %5186 = icmp ult i64 %5185, %5184
  %5187 = icmp ult i64 %5185, %5183
  %5188 = or i1 %5186, %5187
  %5189 = zext i1 %5188 to i8
  store i8 %5189, i8* %14, align 1
  %5190 = trunc i64 %5185 to i32
  %5191 = and i32 %5190, 255
  %5192 = tail call i32 @llvm.ctpop.i32(i32 %5191)
  %5193 = trunc i32 %5192 to i8
  %5194 = and i8 %5193, 1
  %5195 = xor i8 %5194, 1
  store i8 %5195, i8* %21, align 1
  %5196 = xor i64 %5184, %5185
  %5197 = lshr i64 %5196, 4
  %5198 = trunc i64 %5197 to i8
  %5199 = and i8 %5198, 1
  store i8 %5199, i8* %27, align 1
  %5200 = icmp eq i64 %5185, 0
  %5201 = zext i1 %5200 to i8
  store i8 %5201, i8* %30, align 1
  %5202 = lshr i64 %5185, 63
  %5203 = trunc i64 %5202 to i8
  store i8 %5203, i8* %33, align 1
  %5204 = lshr i64 %5184, 63
  %5205 = lshr i64 %5182, 58
  %5206 = and i64 %5205, 1
  %5207 = xor i64 %5202, %5204
  %5208 = xor i64 %5202, %5206
  %5209 = add nuw nsw i64 %5207, %5208
  %5210 = icmp eq i64 %5209, 2
  %5211 = zext i1 %5210 to i8
  store i8 %5211, i8* %39, align 1
  %5212 = load i64, i64* %RBP.i, align 8
  %5213 = add i64 %5212, -32
  %5214 = add i64 %5144, 23
  store i64 %5214, i64* %3, align 8
  %5215 = inttoptr i64 %5213 to i32*
  %5216 = load i32, i32* %5215, align 4
  %5217 = add i32 %5216, 2
  %5218 = zext i32 %5217 to i64
  store i64 %5218, i64* %RDI.i3890, align 8
  %5219 = icmp ugt i32 %5216, -3
  %5220 = zext i1 %5219 to i8
  store i8 %5220, i8* %14, align 1
  %5221 = and i32 %5217, 255
  %5222 = tail call i32 @llvm.ctpop.i32(i32 %5221)
  %5223 = trunc i32 %5222 to i8
  %5224 = and i8 %5223, 1
  %5225 = xor i8 %5224, 1
  store i8 %5225, i8* %21, align 1
  %5226 = xor i32 %5217, %5216
  %5227 = lshr i32 %5226, 4
  %5228 = trunc i32 %5227 to i8
  %5229 = and i8 %5228, 1
  store i8 %5229, i8* %27, align 1
  %5230 = icmp eq i32 %5217, 0
  %5231 = zext i1 %5230 to i8
  store i8 %5231, i8* %30, align 1
  %5232 = lshr i32 %5217, 31
  %5233 = trunc i32 %5232 to i8
  store i8 %5233, i8* %33, align 1
  %5234 = lshr i32 %5216, 31
  %5235 = xor i32 %5232, %5234
  %5236 = add nuw nsw i32 %5235, %5232
  %5237 = icmp eq i32 %5236, 2
  %5238 = zext i1 %5237 to i8
  store i8 %5238, i8* %39, align 1
  %5239 = sext i32 %5217 to i64
  store i64 %5239, i64* %RDX.i4840, align 8
  %5240 = shl nsw i64 %5239, 2
  %5241 = add i64 %5185, %5240
  %5242 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %5243 = add i64 %5144, 32
  store i64 %5243, i64* %3, align 8
  %5244 = inttoptr i64 %5241 to i32*
  store i32 %5242, i32* %5244, align 4
  %5245 = load i64, i64* %RBP.i, align 8
  %5246 = add i64 %5245, -100
  %5247 = load i64, i64* %3, align 8
  %5248 = add i64 %5247, 3
  store i64 %5248, i64* %3, align 8
  %5249 = inttoptr i64 %5246 to i32*
  %5250 = load i32, i32* %5249, align 4
  %5251 = shl i32 %5250, 1
  %5252 = icmp slt i32 %5250, 0
  %5253 = icmp slt i32 %5251, 0
  %5254 = xor i1 %5252, %5253
  %5255 = zext i32 %5251 to i64
  store i64 %5255, i64* %RCX.i2028, align 8
  %.lobit114 = lshr i32 %5250, 31
  %5256 = trunc i32 %.lobit114 to i8
  store i8 %5256, i8* %14, align 1
  %5257 = and i32 %5251, 254
  %5258 = tail call i32 @llvm.ctpop.i32(i32 %5257)
  %5259 = trunc i32 %5258 to i8
  %5260 = and i8 %5259, 1
  %5261 = xor i8 %5260, 1
  store i8 %5261, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5262 = icmp eq i32 %5251, 0
  %5263 = zext i1 %5262 to i8
  store i8 %5263, i8* %30, align 1
  %5264 = lshr i32 %5250, 30
  %5265 = trunc i32 %5264 to i8
  %5266 = and i8 %5265, 1
  store i8 %5266, i8* %33, align 1
  %5267 = zext i1 %5254 to i8
  store i8 %5267, i8* %39, align 1
  %5268 = add i64 %5245, -104
  %5269 = add i64 %5247, 8
  store i64 %5269, i64* %3, align 8
  %5270 = inttoptr i64 %5268 to i32*
  %5271 = load i32, i32* %5270, align 4
  %5272 = add i32 %5271, %5251
  %5273 = zext i32 %5272 to i64
  store i64 %5273, i64* %RCX.i2028, align 8
  %5274 = icmp ult i32 %5272, %5251
  %5275 = icmp ult i32 %5272, %5271
  %5276 = or i1 %5274, %5275
  %5277 = zext i1 %5276 to i8
  store i8 %5277, i8* %14, align 1
  %5278 = and i32 %5272, 255
  %5279 = tail call i32 @llvm.ctpop.i32(i32 %5278)
  %5280 = trunc i32 %5279 to i8
  %5281 = and i8 %5280, 1
  %5282 = xor i8 %5281, 1
  store i8 %5282, i8* %21, align 1
  %5283 = xor i32 %5271, %5251
  %5284 = xor i32 %5283, %5272
  %5285 = lshr i32 %5284, 4
  %5286 = trunc i32 %5285 to i8
  %5287 = and i8 %5286, 1
  store i8 %5287, i8* %27, align 1
  %5288 = icmp eq i32 %5272, 0
  %5289 = zext i1 %5288 to i8
  store i8 %5289, i8* %30, align 1
  %5290 = lshr i32 %5272, 31
  %5291 = trunc i32 %5290 to i8
  store i8 %5291, i8* %33, align 1
  %5292 = lshr i32 %5250, 30
  %5293 = and i32 %5292, 1
  %5294 = lshr i32 %5271, 31
  %5295 = xor i32 %5290, %5293
  %5296 = xor i32 %5290, %5294
  %5297 = add nuw nsw i32 %5295, %5296
  %5298 = icmp eq i32 %5297, 2
  %5299 = zext i1 %5298 to i8
  store i8 %5299, i8* %39, align 1
  %5300 = add i64 %5245, -40
  %5301 = add i64 %5247, 12
  store i64 %5301, i64* %3, align 8
  %5302 = inttoptr i64 %5300 to i32*
  %5303 = load i32, i32* %5302, align 4
  %5304 = sext i32 %5303 to i64
  %5305 = shl nsw i64 %5304, 5
  store i64 %5305, i64* %RDX.i4840, align 8
  %5306 = load i64, i64* %RAX.i1862, align 8
  %5307 = add i64 %5305, %5306
  store i64 %5307, i64* %RSI.i2426, align 8
  %5308 = icmp ult i64 %5307, %5306
  %5309 = icmp ult i64 %5307, %5305
  %5310 = or i1 %5308, %5309
  %5311 = zext i1 %5310 to i8
  store i8 %5311, i8* %14, align 1
  %5312 = trunc i64 %5307 to i32
  %5313 = and i32 %5312, 255
  %5314 = tail call i32 @llvm.ctpop.i32(i32 %5313)
  %5315 = trunc i32 %5314 to i8
  %5316 = and i8 %5315, 1
  %5317 = xor i8 %5316, 1
  store i8 %5317, i8* %21, align 1
  %5318 = xor i64 %5306, %5307
  %5319 = lshr i64 %5318, 4
  %5320 = trunc i64 %5319 to i8
  %5321 = and i8 %5320, 1
  store i8 %5321, i8* %27, align 1
  %5322 = icmp eq i64 %5307, 0
  %5323 = zext i1 %5322 to i8
  store i8 %5323, i8* %30, align 1
  %5324 = lshr i64 %5307, 63
  %5325 = trunc i64 %5324 to i8
  store i8 %5325, i8* %33, align 1
  %5326 = lshr i64 %5306, 63
  %5327 = lshr i64 %5304, 58
  %5328 = and i64 %5327, 1
  %5329 = xor i64 %5324, %5326
  %5330 = xor i64 %5324, %5328
  %5331 = add nuw nsw i64 %5329, %5330
  %5332 = icmp eq i64 %5331, 2
  %5333 = zext i1 %5332 to i8
  store i8 %5333, i8* %39, align 1
  %5334 = load i64, i64* %RBP.i, align 8
  %5335 = add i64 %5334, -32
  %5336 = add i64 %5247, 25
  store i64 %5336, i64* %3, align 8
  %5337 = inttoptr i64 %5335 to i32*
  %5338 = load i32, i32* %5337, align 4
  %5339 = add i32 %5338, 1
  %5340 = zext i32 %5339 to i64
  store i64 %5340, i64* %RDI.i3890, align 8
  %5341 = icmp eq i32 %5338, -1
  %5342 = icmp eq i32 %5339, 0
  %5343 = or i1 %5341, %5342
  %5344 = zext i1 %5343 to i8
  store i8 %5344, i8* %14, align 1
  %5345 = and i32 %5339, 255
  %5346 = tail call i32 @llvm.ctpop.i32(i32 %5345)
  %5347 = trunc i32 %5346 to i8
  %5348 = and i8 %5347, 1
  %5349 = xor i8 %5348, 1
  store i8 %5349, i8* %21, align 1
  %5350 = xor i32 %5339, %5338
  %5351 = lshr i32 %5350, 4
  %5352 = trunc i32 %5351 to i8
  %5353 = and i8 %5352, 1
  store i8 %5353, i8* %27, align 1
  %5354 = zext i1 %5342 to i8
  store i8 %5354, i8* %30, align 1
  %5355 = lshr i32 %5339, 31
  %5356 = trunc i32 %5355 to i8
  store i8 %5356, i8* %33, align 1
  %5357 = lshr i32 %5338, 31
  %5358 = xor i32 %5355, %5357
  %5359 = add nuw nsw i32 %5358, %5355
  %5360 = icmp eq i32 %5359, 2
  %5361 = zext i1 %5360 to i8
  store i8 %5361, i8* %39, align 1
  %5362 = sext i32 %5339 to i64
  store i64 %5362, i64* %RDX.i4840, align 8
  %5363 = shl nsw i64 %5362, 2
  %5364 = add i64 %5307, %5363
  %5365 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %5366 = add i64 %5247, 34
  store i64 %5366, i64* %3, align 8
  %5367 = inttoptr i64 %5364 to i32*
  store i32 %5365, i32* %5367, align 4
  %5368 = load i64, i64* %RBP.i, align 8
  %5369 = add i64 %5368, -100
  %5370 = load i64, i64* %3, align 8
  %5371 = add i64 %5370, 3
  store i64 %5371, i64* %3, align 8
  %5372 = inttoptr i64 %5369 to i32*
  %5373 = load i32, i32* %5372, align 4
  %5374 = zext i32 %5373 to i64
  store i64 %5374, i64* %RCX.i2028, align 8
  %5375 = add i64 %5368, -104
  %5376 = add i64 %5370, 6
  store i64 %5376, i64* %3, align 8
  %5377 = inttoptr i64 %5375 to i32*
  %5378 = load i32, i32* %5377, align 4
  %5379 = shl i32 %5378, 1
  %5380 = zext i32 %5379 to i64
  store i64 %5380, i64* %RDI.i3890, align 8
  %5381 = sub i32 %5373, %5379
  %5382 = zext i32 %5381 to i64
  store i64 %5382, i64* %RCX.i2028, align 8
  %5383 = icmp ult i32 %5373, %5379
  %5384 = zext i1 %5383 to i8
  store i8 %5384, i8* %14, align 1
  %5385 = and i32 %5381, 255
  %5386 = tail call i32 @llvm.ctpop.i32(i32 %5385)
  %5387 = trunc i32 %5386 to i8
  %5388 = and i8 %5387, 1
  %5389 = xor i8 %5388, 1
  store i8 %5389, i8* %21, align 1
  %5390 = xor i32 %5379, %5373
  %5391 = xor i32 %5390, %5381
  %5392 = lshr i32 %5391, 4
  %5393 = trunc i32 %5392 to i8
  %5394 = and i8 %5393, 1
  store i8 %5394, i8* %27, align 1
  %5395 = icmp eq i32 %5381, 0
  %5396 = zext i1 %5395 to i8
  store i8 %5396, i8* %30, align 1
  %5397 = lshr i32 %5381, 31
  %5398 = trunc i32 %5397 to i8
  store i8 %5398, i8* %33, align 1
  %5399 = lshr i32 %5373, 31
  %5400 = lshr i32 %5378, 30
  %5401 = and i32 %5400, 1
  %5402 = xor i32 %5401, %5399
  %5403 = xor i32 %5397, %5399
  %5404 = add nuw nsw i32 %5403, %5402
  %5405 = icmp eq i32 %5404, 2
  %5406 = zext i1 %5405 to i8
  store i8 %5406, i8* %39, align 1
  %5407 = add i64 %5368, -40
  %5408 = add i64 %5370, 14
  store i64 %5408, i64* %3, align 8
  %5409 = inttoptr i64 %5407 to i32*
  %5410 = load i32, i32* %5409, align 4
  %5411 = sext i32 %5410 to i64
  %5412 = shl nsw i64 %5411, 5
  store i64 %5412, i64* %RDX.i4840, align 8
  %5413 = load i64, i64* %RAX.i1862, align 8
  %5414 = add i64 %5412, %5413
  store i64 %5414, i64* %RAX.i1862, align 8
  %5415 = icmp ult i64 %5414, %5413
  %5416 = icmp ult i64 %5414, %5412
  %5417 = or i1 %5415, %5416
  %5418 = zext i1 %5417 to i8
  store i8 %5418, i8* %14, align 1
  %5419 = trunc i64 %5414 to i32
  %5420 = and i32 %5419, 255
  %5421 = tail call i32 @llvm.ctpop.i32(i32 %5420)
  %5422 = trunc i32 %5421 to i8
  %5423 = and i8 %5422, 1
  %5424 = xor i8 %5423, 1
  store i8 %5424, i8* %21, align 1
  %5425 = xor i64 %5413, %5414
  %5426 = lshr i64 %5425, 4
  %5427 = trunc i64 %5426 to i8
  %5428 = and i8 %5427, 1
  store i8 %5428, i8* %27, align 1
  %5429 = icmp eq i64 %5414, 0
  %5430 = zext i1 %5429 to i8
  store i8 %5430, i8* %30, align 1
  %5431 = lshr i64 %5414, 63
  %5432 = trunc i64 %5431 to i8
  store i8 %5432, i8* %33, align 1
  %5433 = lshr i64 %5413, 63
  %5434 = lshr i64 %5411, 58
  %5435 = and i64 %5434, 1
  %5436 = xor i64 %5431, %5433
  %5437 = xor i64 %5431, %5435
  %5438 = add nuw nsw i64 %5436, %5437
  %5439 = icmp eq i64 %5438, 2
  %5440 = zext i1 %5439 to i8
  store i8 %5440, i8* %39, align 1
  %5441 = load i64, i64* %RBP.i, align 8
  %5442 = add i64 %5441, -32
  %5443 = add i64 %5370, 24
  store i64 %5443, i64* %3, align 8
  %5444 = inttoptr i64 %5442 to i32*
  %5445 = load i32, i32* %5444, align 4
  %5446 = add i32 %5445, 3
  %5447 = zext i32 %5446 to i64
  store i64 %5447, i64* %RDI.i3890, align 8
  %5448 = icmp ugt i32 %5445, -4
  %5449 = zext i1 %5448 to i8
  store i8 %5449, i8* %14, align 1
  %5450 = and i32 %5446, 255
  %5451 = tail call i32 @llvm.ctpop.i32(i32 %5450)
  %5452 = trunc i32 %5451 to i8
  %5453 = and i8 %5452, 1
  %5454 = xor i8 %5453, 1
  store i8 %5454, i8* %21, align 1
  %5455 = xor i32 %5446, %5445
  %5456 = lshr i32 %5455, 4
  %5457 = trunc i32 %5456 to i8
  %5458 = and i8 %5457, 1
  store i8 %5458, i8* %27, align 1
  %5459 = icmp eq i32 %5446, 0
  %5460 = zext i1 %5459 to i8
  store i8 %5460, i8* %30, align 1
  %5461 = lshr i32 %5446, 31
  %5462 = trunc i32 %5461 to i8
  store i8 %5462, i8* %33, align 1
  %5463 = lshr i32 %5445, 31
  %5464 = xor i32 %5461, %5463
  %5465 = add nuw nsw i32 %5464, %5461
  %5466 = icmp eq i32 %5465, 2
  %5467 = zext i1 %5466 to i8
  store i8 %5467, i8* %39, align 1
  %5468 = sext i32 %5446 to i64
  store i64 %5468, i64* %RDX.i4840, align 8
  %5469 = shl nsw i64 %5468, 2
  %5470 = add i64 %5414, %5469
  %5471 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %5472 = add i64 %5370, 33
  store i64 %5472, i64* %3, align 8
  %5473 = inttoptr i64 %5470 to i32*
  store i32 %5471, i32* %5473, align 4
  %5474 = load i64, i64* %RBP.i, align 8
  %5475 = add i64 %5474, -12
  %5476 = load i64, i64* %3, align 8
  %5477 = add i64 %5476, 3
  store i64 %5477, i64* %3, align 8
  %5478 = inttoptr i64 %5475 to i32*
  %5479 = load i32, i32* %5478, align 4
  %5480 = add i32 %5479, 1
  %5481 = zext i32 %5480 to i64
  store i64 %5481, i64* %RAX.i1862, align 8
  %5482 = icmp eq i32 %5479, -1
  %5483 = icmp eq i32 %5480, 0
  %5484 = or i1 %5482, %5483
  %5485 = zext i1 %5484 to i8
  store i8 %5485, i8* %14, align 1
  %5486 = and i32 %5480, 255
  %5487 = tail call i32 @llvm.ctpop.i32(i32 %5486)
  %5488 = trunc i32 %5487 to i8
  %5489 = and i8 %5488, 1
  %5490 = xor i8 %5489, 1
  store i8 %5490, i8* %21, align 1
  %5491 = xor i32 %5480, %5479
  %5492 = lshr i32 %5491, 4
  %5493 = trunc i32 %5492 to i8
  %5494 = and i8 %5493, 1
  store i8 %5494, i8* %27, align 1
  %5495 = zext i1 %5483 to i8
  store i8 %5495, i8* %30, align 1
  %5496 = lshr i32 %5480, 31
  %5497 = trunc i32 %5496 to i8
  store i8 %5497, i8* %33, align 1
  %5498 = lshr i32 %5479, 31
  %5499 = xor i32 %5496, %5498
  %5500 = add nuw nsw i32 %5499, %5496
  %5501 = icmp eq i32 %5500, 2
  %5502 = zext i1 %5501 to i8
  store i8 %5502, i8* %39, align 1
  %5503 = add i64 %5476, 9
  store i64 %5503, i64* %3, align 8
  store i32 %5480, i32* %5478, align 4
  %5504 = load i64, i64* %3, align 8
  %5505 = add i64 %5504, -334
  store i64 %5505, i64* %3, align 8
  br label %block_.L_40dc4e

block_.L_40dda1:                                  ; preds = %block_.L_40dc4e
  %5506 = add i64 %4529, 8
  store i64 %5506, i64* %3, align 8
  %5507 = inttoptr i64 %4530 to i32*
  %5508 = load i32, i32* %5507, align 4
  %5509 = add i32 %5508, 4
  %5510 = zext i32 %5509 to i64
  store i64 %5510, i64* %RAX.i1862, align 8
  %5511 = icmp ugt i32 %5508, -5
  %5512 = zext i1 %5511 to i8
  store i8 %5512, i8* %14, align 1
  %5513 = and i32 %5509, 255
  %5514 = tail call i32 @llvm.ctpop.i32(i32 %5513)
  %5515 = trunc i32 %5514 to i8
  %5516 = and i8 %5515, 1
  %5517 = xor i8 %5516, 1
  store i8 %5517, i8* %21, align 1
  %5518 = xor i32 %5509, %5508
  %5519 = lshr i32 %5518, 4
  %5520 = trunc i32 %5519 to i8
  %5521 = and i8 %5520, 1
  store i8 %5521, i8* %27, align 1
  %5522 = icmp eq i32 %5509, 0
  %5523 = zext i1 %5522 to i8
  store i8 %5523, i8* %30, align 1
  %5524 = lshr i32 %5509, 31
  %5525 = trunc i32 %5524 to i8
  store i8 %5525, i8* %33, align 1
  %5526 = lshr i32 %5508, 31
  %5527 = xor i32 %5524, %5526
  %5528 = add nuw nsw i32 %5527, %5524
  %5529 = icmp eq i32 %5528, 2
  %5530 = zext i1 %5529 to i8
  store i8 %5530, i8* %39, align 1
  %5531 = add i64 %4529, 14
  store i64 %5531, i64* %3, align 8
  store i32 %5509, i32* %5507, align 4
  %5532 = load i64, i64* %3, align 8
  %5533 = add i64 %5532, -711
  store i64 %5533, i64* %3, align 8
  br label %block_.L_40dae8

block_.L_40ddb4:                                  ; preds = %block_.L_40dae8
  %5534 = add i64 %3630, -32
  %5535 = add i64 %3658, 8
  store i64 %5535, i64* %3, align 8
  %5536 = inttoptr i64 %5534 to i32*
  %5537 = load i32, i32* %5536, align 4
  %5538 = add i32 %5537, 4
  %5539 = zext i32 %5538 to i64
  store i64 %5539, i64* %RAX.i1862, align 8
  %5540 = icmp ugt i32 %5537, -5
  %5541 = zext i1 %5540 to i8
  store i8 %5541, i8* %14, align 1
  %5542 = and i32 %5538, 255
  %5543 = tail call i32 @llvm.ctpop.i32(i32 %5542)
  %5544 = trunc i32 %5543 to i8
  %5545 = and i8 %5544, 1
  %5546 = xor i8 %5545, 1
  store i8 %5546, i8* %21, align 1
  %5547 = xor i32 %5538, %5537
  %5548 = lshr i32 %5547, 4
  %5549 = trunc i32 %5548 to i8
  %5550 = and i8 %5549, 1
  store i8 %5550, i8* %27, align 1
  %5551 = icmp eq i32 %5538, 0
  %5552 = zext i1 %5551 to i8
  store i8 %5552, i8* %30, align 1
  %5553 = lshr i32 %5538, 31
  %5554 = trunc i32 %5553 to i8
  store i8 %5554, i8* %33, align 1
  %5555 = lshr i32 %5537, 31
  %5556 = xor i32 %5553, %5555
  %5557 = add nuw nsw i32 %5556, %5553
  %5558 = icmp eq i32 %5557, 2
  %5559 = zext i1 %5558 to i8
  store i8 %5559, i8* %39, align 1
  %5560 = add i64 %3658, 14
  store i64 %5560, i64* %3, align 8
  store i32 %5538, i32* %5536, align 4
  %5561 = load i64, i64* %3, align 8
  %5562 = add i64 %5561, -747
  store i64 %5562, i64* %3, align 8
  br label %block_.L_40dad7

block_.L_40ddc7:                                  ; preds = %block_.L_40dad7
  %5563 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5563, i64* %RAX.i1862, align 8
  %5564 = add i64 %5563, 13112
  %5565 = add i64 %3625, 14
  store i64 %5565, i64* %3, align 8
  %5566 = inttoptr i64 %5564 to i32*
  %5567 = load i32, i32* %5566, align 4
  %5568 = zext i32 %5567 to i64
  store i64 %5568, i64* %RCX.i2028, align 8
  store i64 %5563, i64* %RAX.i1862, align 8
  %5569 = add i64 %5563, 13368
  %5570 = add i64 %3625, 28
  store i64 %5570, i64* %3, align 8
  %5571 = inttoptr i64 %5569 to i32*
  %5572 = load i32, i32* %5571, align 4
  %5573 = add i32 %5572, %5567
  %5574 = zext i32 %5573 to i64
  store i64 %5574, i64* %RCX.i2028, align 8
  %5575 = icmp ult i32 %5573, %5567
  %5576 = icmp ult i32 %5573, %5572
  %5577 = or i1 %5575, %5576
  %5578 = zext i1 %5577 to i8
  store i8 %5578, i8* %14, align 1
  %5579 = and i32 %5573, 255
  %5580 = tail call i32 @llvm.ctpop.i32(i32 %5579)
  %5581 = trunc i32 %5580 to i8
  %5582 = and i8 %5581, 1
  %5583 = xor i8 %5582, 1
  store i8 %5583, i8* %21, align 1
  %5584 = xor i32 %5572, %5567
  %5585 = xor i32 %5584, %5573
  %5586 = lshr i32 %5585, 4
  %5587 = trunc i32 %5586 to i8
  %5588 = and i8 %5587, 1
  store i8 %5588, i8* %27, align 1
  %5589 = icmp eq i32 %5573, 0
  %5590 = zext i1 %5589 to i8
  store i8 %5590, i8* %30, align 1
  %5591 = lshr i32 %5573, 31
  %5592 = trunc i32 %5591 to i8
  store i8 %5592, i8* %33, align 1
  %5593 = lshr i32 %5567, 31
  %5594 = lshr i32 %5572, 31
  %5595 = xor i32 %5591, %5593
  %5596 = xor i32 %5591, %5594
  %5597 = add nuw nsw i32 %5595, %5596
  %5598 = icmp eq i32 %5597, 2
  %5599 = zext i1 %5598 to i8
  store i8 %5599, i8* %39, align 1
  store i64 %5563, i64* %RAX.i1862, align 8
  %5600 = add i64 %5563, 13128
  %5601 = add i64 %3625, 42
  store i64 %5601, i64* %3, align 8
  %5602 = inttoptr i64 %5600 to i32*
  %5603 = load i32, i32* %5602, align 4
  %5604 = add i32 %5603, %5573
  %5605 = zext i32 %5604 to i64
  store i64 %5605, i64* %RCX.i2028, align 8
  %5606 = icmp ult i32 %5604, %5573
  %5607 = icmp ult i32 %5604, %5603
  %5608 = or i1 %5606, %5607
  %5609 = zext i1 %5608 to i8
  store i8 %5609, i8* %14, align 1
  %5610 = and i32 %5604, 255
  %5611 = tail call i32 @llvm.ctpop.i32(i32 %5610)
  %5612 = trunc i32 %5611 to i8
  %5613 = and i8 %5612, 1
  %5614 = xor i8 %5613, 1
  store i8 %5614, i8* %21, align 1
  %5615 = xor i32 %5603, %5573
  %5616 = xor i32 %5615, %5604
  %5617 = lshr i32 %5616, 4
  %5618 = trunc i32 %5617 to i8
  %5619 = and i8 %5618, 1
  store i8 %5619, i8* %27, align 1
  %5620 = icmp eq i32 %5604, 0
  %5621 = zext i1 %5620 to i8
  store i8 %5621, i8* %30, align 1
  %5622 = lshr i32 %5604, 31
  %5623 = trunc i32 %5622 to i8
  store i8 %5623, i8* %33, align 1
  %5624 = lshr i32 %5603, 31
  %5625 = xor i32 %5622, %5591
  %5626 = xor i32 %5622, %5624
  %5627 = add nuw nsw i32 %5625, %5626
  %5628 = icmp eq i32 %5627, 2
  %5629 = zext i1 %5628 to i8
  store i8 %5629, i8* %39, align 1
  store i64 %5563, i64* %RAX.i1862, align 8
  %5630 = add i64 %5563, 13384
  %5631 = add i64 %3625, 56
  store i64 %5631, i64* %3, align 8
  %5632 = inttoptr i64 %5630 to i32*
  %5633 = load i32, i32* %5632, align 4
  %5634 = add i32 %5633, %5604
  %5635 = zext i32 %5634 to i64
  store i64 %5635, i64* %RCX.i2028, align 8
  %5636 = icmp ult i32 %5634, %5604
  %5637 = icmp ult i32 %5634, %5633
  %5638 = or i1 %5636, %5637
  %5639 = zext i1 %5638 to i8
  store i8 %5639, i8* %14, align 1
  %5640 = and i32 %5634, 255
  %5641 = tail call i32 @llvm.ctpop.i32(i32 %5640)
  %5642 = trunc i32 %5641 to i8
  %5643 = and i8 %5642, 1
  %5644 = xor i8 %5643, 1
  store i8 %5644, i8* %21, align 1
  %5645 = xor i32 %5633, %5604
  %5646 = xor i32 %5645, %5634
  %5647 = lshr i32 %5646, 4
  %5648 = trunc i32 %5647 to i8
  %5649 = and i8 %5648, 1
  store i8 %5649, i8* %27, align 1
  %5650 = icmp eq i32 %5634, 0
  %5651 = zext i1 %5650 to i8
  store i8 %5651, i8* %30, align 1
  %5652 = lshr i32 %5634, 31
  %5653 = trunc i32 %5652 to i8
  store i8 %5653, i8* %33, align 1
  %5654 = lshr i32 %5633, 31
  %5655 = xor i32 %5652, %5622
  %5656 = xor i32 %5652, %5654
  %5657 = add nuw nsw i32 %5655, %5656
  %5658 = icmp eq i32 %5657, 2
  %5659 = zext i1 %5658 to i8
  store i8 %5659, i8* %39, align 1
  %5660 = load i64, i64* %RBP.i, align 8
  %5661 = add i64 %5660, -96
  %5662 = add i64 %3625, 59
  store i64 %5662, i64* %3, align 8
  %5663 = inttoptr i64 %5661 to i32*
  store i32 %5634, i32* %5663, align 4
  %5664 = load i64, i64* %3, align 8
  %5665 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5665, i64* %RAX.i1862, align 8
  %5666 = add i64 %5665, 13112
  %5667 = add i64 %5664, 14
  store i64 %5667, i64* %3, align 8
  %5668 = inttoptr i64 %5666 to i32*
  %5669 = load i32, i32* %5668, align 4
  %5670 = zext i32 %5669 to i64
  store i64 %5670, i64* %RCX.i2028, align 8
  store i64 %5665, i64* %RAX.i1862, align 8
  %5671 = add i64 %5665, 13368
  %5672 = add i64 %5664, 28
  store i64 %5672, i64* %3, align 8
  %5673 = inttoptr i64 %5671 to i32*
  %5674 = load i32, i32* %5673, align 4
  %5675 = sub i32 %5669, %5674
  %5676 = zext i32 %5675 to i64
  store i64 %5676, i64* %RCX.i2028, align 8
  %5677 = icmp ult i32 %5669, %5674
  %5678 = zext i1 %5677 to i8
  store i8 %5678, i8* %14, align 1
  %5679 = and i32 %5675, 255
  %5680 = tail call i32 @llvm.ctpop.i32(i32 %5679)
  %5681 = trunc i32 %5680 to i8
  %5682 = and i8 %5681, 1
  %5683 = xor i8 %5682, 1
  store i8 %5683, i8* %21, align 1
  %5684 = xor i32 %5674, %5669
  %5685 = xor i32 %5684, %5675
  %5686 = lshr i32 %5685, 4
  %5687 = trunc i32 %5686 to i8
  %5688 = and i8 %5687, 1
  store i8 %5688, i8* %27, align 1
  %5689 = icmp eq i32 %5675, 0
  %5690 = zext i1 %5689 to i8
  store i8 %5690, i8* %30, align 1
  %5691 = lshr i32 %5675, 31
  %5692 = trunc i32 %5691 to i8
  store i8 %5692, i8* %33, align 1
  %5693 = lshr i32 %5669, 31
  %5694 = lshr i32 %5674, 31
  %5695 = xor i32 %5694, %5693
  %5696 = xor i32 %5691, %5693
  %5697 = add nuw nsw i32 %5696, %5695
  %5698 = icmp eq i32 %5697, 2
  %5699 = zext i1 %5698 to i8
  store i8 %5699, i8* %39, align 1
  store i64 %5665, i64* %RAX.i1862, align 8
  %5700 = add i64 %5665, 13128
  %5701 = add i64 %5664, 42
  store i64 %5701, i64* %3, align 8
  %5702 = inttoptr i64 %5700 to i32*
  %5703 = load i32, i32* %5702, align 4
  %5704 = add i32 %5703, %5675
  %5705 = zext i32 %5704 to i64
  store i64 %5705, i64* %RCX.i2028, align 8
  %5706 = icmp ult i32 %5704, %5675
  %5707 = icmp ult i32 %5704, %5703
  %5708 = or i1 %5706, %5707
  %5709 = zext i1 %5708 to i8
  store i8 %5709, i8* %14, align 1
  %5710 = and i32 %5704, 255
  %5711 = tail call i32 @llvm.ctpop.i32(i32 %5710)
  %5712 = trunc i32 %5711 to i8
  %5713 = and i8 %5712, 1
  %5714 = xor i8 %5713, 1
  store i8 %5714, i8* %21, align 1
  %5715 = xor i32 %5703, %5675
  %5716 = xor i32 %5715, %5704
  %5717 = lshr i32 %5716, 4
  %5718 = trunc i32 %5717 to i8
  %5719 = and i8 %5718, 1
  store i8 %5719, i8* %27, align 1
  %5720 = icmp eq i32 %5704, 0
  %5721 = zext i1 %5720 to i8
  store i8 %5721, i8* %30, align 1
  %5722 = lshr i32 %5704, 31
  %5723 = trunc i32 %5722 to i8
  store i8 %5723, i8* %33, align 1
  %5724 = lshr i32 %5703, 31
  %5725 = xor i32 %5722, %5691
  %5726 = xor i32 %5722, %5724
  %5727 = add nuw nsw i32 %5725, %5726
  %5728 = icmp eq i32 %5727, 2
  %5729 = zext i1 %5728 to i8
  store i8 %5729, i8* %39, align 1
  store i64 %5665, i64* %RAX.i1862, align 8
  %5730 = add i64 %5665, 13384
  %5731 = add i64 %5664, 56
  store i64 %5731, i64* %3, align 8
  %5732 = inttoptr i64 %5730 to i32*
  %5733 = load i32, i32* %5732, align 4
  %5734 = sub i32 %5704, %5733
  %5735 = zext i32 %5734 to i64
  store i64 %5735, i64* %RCX.i2028, align 8
  %5736 = icmp ult i32 %5704, %5733
  %5737 = zext i1 %5736 to i8
  store i8 %5737, i8* %14, align 1
  %5738 = and i32 %5734, 255
  %5739 = tail call i32 @llvm.ctpop.i32(i32 %5738)
  %5740 = trunc i32 %5739 to i8
  %5741 = and i8 %5740, 1
  %5742 = xor i8 %5741, 1
  store i8 %5742, i8* %21, align 1
  %5743 = xor i32 %5733, %5704
  %5744 = xor i32 %5743, %5734
  %5745 = lshr i32 %5744, 4
  %5746 = trunc i32 %5745 to i8
  %5747 = and i8 %5746, 1
  store i8 %5747, i8* %27, align 1
  %5748 = icmp eq i32 %5734, 0
  %5749 = zext i1 %5748 to i8
  store i8 %5749, i8* %30, align 1
  %5750 = lshr i32 %5734, 31
  %5751 = trunc i32 %5750 to i8
  store i8 %5751, i8* %33, align 1
  %5752 = lshr i32 %5733, 31
  %5753 = xor i32 %5752, %5722
  %5754 = xor i32 %5750, %5722
  %5755 = add nuw nsw i32 %5754, %5753
  %5756 = icmp eq i32 %5755, 2
  %5757 = zext i1 %5756 to i8
  store i8 %5757, i8* %39, align 1
  %5758 = load i64, i64* %RBP.i, align 8
  %5759 = add i64 %5758, -92
  %5760 = add i64 %5664, 59
  store i64 %5760, i64* %3, align 8
  %5761 = inttoptr i64 %5759 to i32*
  store i32 %5734, i32* %5761, align 4
  %5762 = load i64, i64* %3, align 8
  %5763 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5763, i64* %RAX.i1862, align 8
  %5764 = add i64 %5763, 13112
  %5765 = add i64 %5762, 14
  store i64 %5765, i64* %3, align 8
  %5766 = inttoptr i64 %5764 to i32*
  %5767 = load i32, i32* %5766, align 4
  %5768 = zext i32 %5767 to i64
  store i64 %5768, i64* %RCX.i2028, align 8
  store i64 %5763, i64* %RAX.i1862, align 8
  %5769 = add i64 %5763, 13368
  %5770 = add i64 %5762, 28
  store i64 %5770, i64* %3, align 8
  %5771 = inttoptr i64 %5769 to i32*
  %5772 = load i32, i32* %5771, align 4
  %5773 = add i32 %5772, %5767
  %5774 = zext i32 %5773 to i64
  store i64 %5774, i64* %RCX.i2028, align 8
  %5775 = icmp ult i32 %5773, %5767
  %5776 = icmp ult i32 %5773, %5772
  %5777 = or i1 %5775, %5776
  %5778 = zext i1 %5777 to i8
  store i8 %5778, i8* %14, align 1
  %5779 = and i32 %5773, 255
  %5780 = tail call i32 @llvm.ctpop.i32(i32 %5779)
  %5781 = trunc i32 %5780 to i8
  %5782 = and i8 %5781, 1
  %5783 = xor i8 %5782, 1
  store i8 %5783, i8* %21, align 1
  %5784 = xor i32 %5772, %5767
  %5785 = xor i32 %5784, %5773
  %5786 = lshr i32 %5785, 4
  %5787 = trunc i32 %5786 to i8
  %5788 = and i8 %5787, 1
  store i8 %5788, i8* %27, align 1
  %5789 = icmp eq i32 %5773, 0
  %5790 = zext i1 %5789 to i8
  store i8 %5790, i8* %30, align 1
  %5791 = lshr i32 %5773, 31
  %5792 = trunc i32 %5791 to i8
  store i8 %5792, i8* %33, align 1
  %5793 = lshr i32 %5767, 31
  %5794 = lshr i32 %5772, 31
  %5795 = xor i32 %5791, %5793
  %5796 = xor i32 %5791, %5794
  %5797 = add nuw nsw i32 %5795, %5796
  %5798 = icmp eq i32 %5797, 2
  %5799 = zext i1 %5798 to i8
  store i8 %5799, i8* %39, align 1
  store i64 %5763, i64* %RAX.i1862, align 8
  %5800 = add i64 %5763, 13128
  %5801 = add i64 %5762, 42
  store i64 %5801, i64* %3, align 8
  %5802 = inttoptr i64 %5800 to i32*
  %5803 = load i32, i32* %5802, align 4
  %5804 = sub i32 %5773, %5803
  %5805 = zext i32 %5804 to i64
  store i64 %5805, i64* %RCX.i2028, align 8
  %5806 = icmp ult i32 %5773, %5803
  %5807 = zext i1 %5806 to i8
  store i8 %5807, i8* %14, align 1
  %5808 = and i32 %5804, 255
  %5809 = tail call i32 @llvm.ctpop.i32(i32 %5808)
  %5810 = trunc i32 %5809 to i8
  %5811 = and i8 %5810, 1
  %5812 = xor i8 %5811, 1
  store i8 %5812, i8* %21, align 1
  %5813 = xor i32 %5803, %5773
  %5814 = xor i32 %5813, %5804
  %5815 = lshr i32 %5814, 4
  %5816 = trunc i32 %5815 to i8
  %5817 = and i8 %5816, 1
  store i8 %5817, i8* %27, align 1
  %5818 = icmp eq i32 %5804, 0
  %5819 = zext i1 %5818 to i8
  store i8 %5819, i8* %30, align 1
  %5820 = lshr i32 %5804, 31
  %5821 = trunc i32 %5820 to i8
  store i8 %5821, i8* %33, align 1
  %5822 = lshr i32 %5803, 31
  %5823 = xor i32 %5822, %5791
  %5824 = xor i32 %5820, %5791
  %5825 = add nuw nsw i32 %5824, %5823
  %5826 = icmp eq i32 %5825, 2
  %5827 = zext i1 %5826 to i8
  store i8 %5827, i8* %39, align 1
  store i64 %5763, i64* %RAX.i1862, align 8
  %5828 = add i64 %5763, 13384
  %5829 = add i64 %5762, 56
  store i64 %5829, i64* %3, align 8
  %5830 = inttoptr i64 %5828 to i32*
  %5831 = load i32, i32* %5830, align 4
  %5832 = sub i32 %5804, %5831
  %5833 = zext i32 %5832 to i64
  store i64 %5833, i64* %RCX.i2028, align 8
  %5834 = icmp ult i32 %5804, %5831
  %5835 = zext i1 %5834 to i8
  store i8 %5835, i8* %14, align 1
  %5836 = and i32 %5832, 255
  %5837 = tail call i32 @llvm.ctpop.i32(i32 %5836)
  %5838 = trunc i32 %5837 to i8
  %5839 = and i8 %5838, 1
  %5840 = xor i8 %5839, 1
  store i8 %5840, i8* %21, align 1
  %5841 = xor i32 %5831, %5804
  %5842 = xor i32 %5841, %5832
  %5843 = lshr i32 %5842, 4
  %5844 = trunc i32 %5843 to i8
  %5845 = and i8 %5844, 1
  store i8 %5845, i8* %27, align 1
  %5846 = icmp eq i32 %5832, 0
  %5847 = zext i1 %5846 to i8
  store i8 %5847, i8* %30, align 1
  %5848 = lshr i32 %5832, 31
  %5849 = trunc i32 %5848 to i8
  store i8 %5849, i8* %33, align 1
  %5850 = lshr i32 %5831, 31
  %5851 = xor i32 %5850, %5820
  %5852 = xor i32 %5848, %5820
  %5853 = add nuw nsw i32 %5852, %5851
  %5854 = icmp eq i32 %5853, 2
  %5855 = zext i1 %5854 to i8
  store i8 %5855, i8* %39, align 1
  %5856 = load i64, i64* %RBP.i, align 8
  %5857 = add i64 %5856, -88
  %5858 = add i64 %5762, 59
  store i64 %5858, i64* %3, align 8
  %5859 = inttoptr i64 %5857 to i32*
  store i32 %5832, i32* %5859, align 4
  %5860 = load i64, i64* %3, align 8
  %5861 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5861, i64* %RAX.i1862, align 8
  %5862 = add i64 %5861, 13112
  %5863 = add i64 %5860, 14
  store i64 %5863, i64* %3, align 8
  %5864 = inttoptr i64 %5862 to i32*
  %5865 = load i32, i32* %5864, align 4
  %5866 = zext i32 %5865 to i64
  store i64 %5866, i64* %RCX.i2028, align 8
  store i64 %5861, i64* %RAX.i1862, align 8
  %5867 = add i64 %5861, 13368
  %5868 = add i64 %5860, 28
  store i64 %5868, i64* %3, align 8
  %5869 = inttoptr i64 %5867 to i32*
  %5870 = load i32, i32* %5869, align 4
  %5871 = sub i32 %5865, %5870
  %5872 = zext i32 %5871 to i64
  store i64 %5872, i64* %RCX.i2028, align 8
  %5873 = icmp ult i32 %5865, %5870
  %5874 = zext i1 %5873 to i8
  store i8 %5874, i8* %14, align 1
  %5875 = and i32 %5871, 255
  %5876 = tail call i32 @llvm.ctpop.i32(i32 %5875)
  %5877 = trunc i32 %5876 to i8
  %5878 = and i8 %5877, 1
  %5879 = xor i8 %5878, 1
  store i8 %5879, i8* %21, align 1
  %5880 = xor i32 %5870, %5865
  %5881 = xor i32 %5880, %5871
  %5882 = lshr i32 %5881, 4
  %5883 = trunc i32 %5882 to i8
  %5884 = and i8 %5883, 1
  store i8 %5884, i8* %27, align 1
  %5885 = icmp eq i32 %5871, 0
  %5886 = zext i1 %5885 to i8
  store i8 %5886, i8* %30, align 1
  %5887 = lshr i32 %5871, 31
  %5888 = trunc i32 %5887 to i8
  store i8 %5888, i8* %33, align 1
  %5889 = lshr i32 %5865, 31
  %5890 = lshr i32 %5870, 31
  %5891 = xor i32 %5890, %5889
  %5892 = xor i32 %5887, %5889
  %5893 = add nuw nsw i32 %5892, %5891
  %5894 = icmp eq i32 %5893, 2
  %5895 = zext i1 %5894 to i8
  store i8 %5895, i8* %39, align 1
  store i64 %5861, i64* %RAX.i1862, align 8
  %5896 = add i64 %5861, 13128
  %5897 = add i64 %5860, 42
  store i64 %5897, i64* %3, align 8
  %5898 = inttoptr i64 %5896 to i32*
  %5899 = load i32, i32* %5898, align 4
  %5900 = sub i32 %5871, %5899
  %5901 = zext i32 %5900 to i64
  store i64 %5901, i64* %RCX.i2028, align 8
  %5902 = icmp ult i32 %5871, %5899
  %5903 = zext i1 %5902 to i8
  store i8 %5903, i8* %14, align 1
  %5904 = and i32 %5900, 255
  %5905 = tail call i32 @llvm.ctpop.i32(i32 %5904)
  %5906 = trunc i32 %5905 to i8
  %5907 = and i8 %5906, 1
  %5908 = xor i8 %5907, 1
  store i8 %5908, i8* %21, align 1
  %5909 = xor i32 %5899, %5871
  %5910 = xor i32 %5909, %5900
  %5911 = lshr i32 %5910, 4
  %5912 = trunc i32 %5911 to i8
  %5913 = and i8 %5912, 1
  store i8 %5913, i8* %27, align 1
  %5914 = icmp eq i32 %5900, 0
  %5915 = zext i1 %5914 to i8
  store i8 %5915, i8* %30, align 1
  %5916 = lshr i32 %5900, 31
  %5917 = trunc i32 %5916 to i8
  store i8 %5917, i8* %33, align 1
  %5918 = lshr i32 %5899, 31
  %5919 = xor i32 %5918, %5887
  %5920 = xor i32 %5916, %5887
  %5921 = add nuw nsw i32 %5920, %5919
  %5922 = icmp eq i32 %5921, 2
  %5923 = zext i1 %5922 to i8
  store i8 %5923, i8* %39, align 1
  store i64 %5861, i64* %RAX.i1862, align 8
  %5924 = add i64 %5861, 13384
  %5925 = add i64 %5860, 56
  store i64 %5925, i64* %3, align 8
  %5926 = inttoptr i64 %5924 to i32*
  %5927 = load i32, i32* %5926, align 4
  %5928 = add i32 %5927, %5900
  %5929 = zext i32 %5928 to i64
  store i64 %5929, i64* %RCX.i2028, align 8
  %5930 = icmp ult i32 %5928, %5900
  %5931 = icmp ult i32 %5928, %5927
  %5932 = or i1 %5930, %5931
  %5933 = zext i1 %5932 to i8
  store i8 %5933, i8* %14, align 1
  %5934 = and i32 %5928, 255
  %5935 = tail call i32 @llvm.ctpop.i32(i32 %5934)
  %5936 = trunc i32 %5935 to i8
  %5937 = and i8 %5936, 1
  %5938 = xor i8 %5937, 1
  store i8 %5938, i8* %21, align 1
  %5939 = xor i32 %5927, %5900
  %5940 = xor i32 %5939, %5928
  %5941 = lshr i32 %5940, 4
  %5942 = trunc i32 %5941 to i8
  %5943 = and i8 %5942, 1
  store i8 %5943, i8* %27, align 1
  %5944 = icmp eq i32 %5928, 0
  %5945 = zext i1 %5944 to i8
  store i8 %5945, i8* %30, align 1
  %5946 = lshr i32 %5928, 31
  %5947 = trunc i32 %5946 to i8
  store i8 %5947, i8* %33, align 1
  %5948 = lshr i32 %5927, 31
  %5949 = xor i32 %5946, %5916
  %5950 = xor i32 %5946, %5948
  %5951 = add nuw nsw i32 %5949, %5950
  %5952 = icmp eq i32 %5951, 2
  %5953 = zext i1 %5952 to i8
  store i8 %5953, i8* %39, align 1
  %5954 = load i64, i64* %RBP.i, align 8
  %5955 = add i64 %5954, -84
  %5956 = add i64 %5860, 59
  store i64 %5956, i64* %3, align 8
  %5957 = inttoptr i64 %5955 to i32*
  store i32 %5928, i32* %5957, align 4
  %5958 = load i64, i64* %RBP.i, align 8
  %5959 = add i64 %5958, -400
  %5960 = load i64, i64* %3, align 8
  %5961 = add i64 %5960, 6
  store i64 %5961, i64* %3, align 8
  %5962 = inttoptr i64 %5959 to i32*
  %5963 = load i32, i32* %5962, align 4
  %5964 = zext i32 %5963 to i64
  store i64 %5964, i64* %RCX.i2028, align 8
  %5965 = add i64 %5958, -272
  %5966 = add i64 %5960, 12
  store i64 %5966, i64* %3, align 8
  %5967 = inttoptr i64 %5965 to i32*
  %5968 = load i32, i32* %5967, align 4
  %5969 = add i32 %5968, %5963
  %5970 = zext i32 %5969 to i64
  store i64 %5970, i64* %RCX.i2028, align 8
  %5971 = icmp ult i32 %5969, %5963
  %5972 = icmp ult i32 %5969, %5968
  %5973 = or i1 %5971, %5972
  %5974 = zext i1 %5973 to i8
  store i8 %5974, i8* %14, align 1
  %5975 = and i32 %5969, 255
  %5976 = tail call i32 @llvm.ctpop.i32(i32 %5975)
  %5977 = trunc i32 %5976 to i8
  %5978 = and i8 %5977, 1
  %5979 = xor i8 %5978, 1
  store i8 %5979, i8* %21, align 1
  %5980 = xor i32 %5968, %5963
  %5981 = xor i32 %5980, %5969
  %5982 = lshr i32 %5981, 4
  %5983 = trunc i32 %5982 to i8
  %5984 = and i8 %5983, 1
  store i8 %5984, i8* %27, align 1
  %5985 = icmp eq i32 %5969, 0
  %5986 = zext i1 %5985 to i8
  store i8 %5986, i8* %30, align 1
  %5987 = lshr i32 %5969, 31
  %5988 = trunc i32 %5987 to i8
  store i8 %5988, i8* %33, align 1
  %5989 = lshr i32 %5963, 31
  %5990 = lshr i32 %5968, 31
  %5991 = xor i32 %5987, %5989
  %5992 = xor i32 %5987, %5990
  %5993 = add nuw nsw i32 %5991, %5992
  %5994 = icmp eq i32 %5993, 2
  %5995 = zext i1 %5994 to i8
  store i8 %5995, i8* %39, align 1
  %5996 = add i64 %5958, -384
  %5997 = add i64 %5960, 18
  store i64 %5997, i64* %3, align 8
  %5998 = inttoptr i64 %5996 to i32*
  %5999 = load i32, i32* %5998, align 4
  %6000 = add i32 %5999, %5969
  %6001 = zext i32 %6000 to i64
  store i64 %6001, i64* %RCX.i2028, align 8
  %6002 = icmp ult i32 %6000, %5969
  %6003 = icmp ult i32 %6000, %5999
  %6004 = or i1 %6002, %6003
  %6005 = zext i1 %6004 to i8
  store i8 %6005, i8* %14, align 1
  %6006 = and i32 %6000, 255
  %6007 = tail call i32 @llvm.ctpop.i32(i32 %6006)
  %6008 = trunc i32 %6007 to i8
  %6009 = and i8 %6008, 1
  %6010 = xor i8 %6009, 1
  store i8 %6010, i8* %21, align 1
  %6011 = xor i32 %5999, %5969
  %6012 = xor i32 %6011, %6000
  %6013 = lshr i32 %6012, 4
  %6014 = trunc i32 %6013 to i8
  %6015 = and i8 %6014, 1
  store i8 %6015, i8* %27, align 1
  %6016 = icmp eq i32 %6000, 0
  %6017 = zext i1 %6016 to i8
  store i8 %6017, i8* %30, align 1
  %6018 = lshr i32 %6000, 31
  %6019 = trunc i32 %6018 to i8
  store i8 %6019, i8* %33, align 1
  %6020 = lshr i32 %5999, 31
  %6021 = xor i32 %6018, %5987
  %6022 = xor i32 %6018, %6020
  %6023 = add nuw nsw i32 %6021, %6022
  %6024 = icmp eq i32 %6023, 2
  %6025 = zext i1 %6024 to i8
  store i8 %6025, i8* %39, align 1
  %6026 = add i64 %5958, -256
  %6027 = add i64 %5960, 24
  store i64 %6027, i64* %3, align 8
  %6028 = inttoptr i64 %6026 to i32*
  %6029 = load i32, i32* %6028, align 4
  %6030 = add i32 %6029, %6000
  %6031 = zext i32 %6030 to i64
  store i64 %6031, i64* %RCX.i2028, align 8
  %6032 = icmp ult i32 %6030, %6000
  %6033 = icmp ult i32 %6030, %6029
  %6034 = or i1 %6032, %6033
  %6035 = zext i1 %6034 to i8
  store i8 %6035, i8* %14, align 1
  %6036 = and i32 %6030, 255
  %6037 = tail call i32 @llvm.ctpop.i32(i32 %6036)
  %6038 = trunc i32 %6037 to i8
  %6039 = and i8 %6038, 1
  %6040 = xor i8 %6039, 1
  store i8 %6040, i8* %21, align 1
  %6041 = xor i32 %6029, %6000
  %6042 = xor i32 %6041, %6030
  %6043 = lshr i32 %6042, 4
  %6044 = trunc i32 %6043 to i8
  %6045 = and i8 %6044, 1
  store i8 %6045, i8* %27, align 1
  %6046 = icmp eq i32 %6030, 0
  %6047 = zext i1 %6046 to i8
  store i8 %6047, i8* %30, align 1
  %6048 = lshr i32 %6030, 31
  %6049 = trunc i32 %6048 to i8
  store i8 %6049, i8* %33, align 1
  %6050 = lshr i32 %6029, 31
  %6051 = xor i32 %6048, %6018
  %6052 = xor i32 %6048, %6050
  %6053 = add nuw nsw i32 %6051, %6052
  %6054 = icmp eq i32 %6053, 2
  %6055 = zext i1 %6054 to i8
  store i8 %6055, i8* %39, align 1
  %6056 = load i64, i64* %RBP.i, align 8
  %6057 = add i64 %6056, -432
  %6058 = add i64 %5960, 30
  store i64 %6058, i64* %3, align 8
  %6059 = inttoptr i64 %6057 to i32*
  store i32 %6030, i32* %6059, align 4
  %6060 = load i64, i64* %RBP.i, align 8
  %6061 = add i64 %6060, -400
  %6062 = load i64, i64* %3, align 8
  %6063 = add i64 %6062, 6
  store i64 %6063, i64* %3, align 8
  %6064 = inttoptr i64 %6061 to i32*
  %6065 = load i32, i32* %6064, align 4
  %6066 = zext i32 %6065 to i64
  store i64 %6066, i64* %RCX.i2028, align 8
  %6067 = add i64 %6060, -272
  %6068 = add i64 %6062, 12
  store i64 %6068, i64* %3, align 8
  %6069 = inttoptr i64 %6067 to i32*
  %6070 = load i32, i32* %6069, align 4
  %6071 = sub i32 %6065, %6070
  %6072 = zext i32 %6071 to i64
  store i64 %6072, i64* %RCX.i2028, align 8
  %6073 = icmp ult i32 %6065, %6070
  %6074 = zext i1 %6073 to i8
  store i8 %6074, i8* %14, align 1
  %6075 = and i32 %6071, 255
  %6076 = tail call i32 @llvm.ctpop.i32(i32 %6075)
  %6077 = trunc i32 %6076 to i8
  %6078 = and i8 %6077, 1
  %6079 = xor i8 %6078, 1
  store i8 %6079, i8* %21, align 1
  %6080 = xor i32 %6070, %6065
  %6081 = xor i32 %6080, %6071
  %6082 = lshr i32 %6081, 4
  %6083 = trunc i32 %6082 to i8
  %6084 = and i8 %6083, 1
  store i8 %6084, i8* %27, align 1
  %6085 = icmp eq i32 %6071, 0
  %6086 = zext i1 %6085 to i8
  store i8 %6086, i8* %30, align 1
  %6087 = lshr i32 %6071, 31
  %6088 = trunc i32 %6087 to i8
  store i8 %6088, i8* %33, align 1
  %6089 = lshr i32 %6065, 31
  %6090 = lshr i32 %6070, 31
  %6091 = xor i32 %6090, %6089
  %6092 = xor i32 %6087, %6089
  %6093 = add nuw nsw i32 %6092, %6091
  %6094 = icmp eq i32 %6093, 2
  %6095 = zext i1 %6094 to i8
  store i8 %6095, i8* %39, align 1
  %6096 = add i64 %6060, -384
  %6097 = add i64 %6062, 18
  store i64 %6097, i64* %3, align 8
  %6098 = inttoptr i64 %6096 to i32*
  %6099 = load i32, i32* %6098, align 4
  %6100 = add i32 %6099, %6071
  %6101 = zext i32 %6100 to i64
  store i64 %6101, i64* %RCX.i2028, align 8
  %6102 = icmp ult i32 %6100, %6071
  %6103 = icmp ult i32 %6100, %6099
  %6104 = or i1 %6102, %6103
  %6105 = zext i1 %6104 to i8
  store i8 %6105, i8* %14, align 1
  %6106 = and i32 %6100, 255
  %6107 = tail call i32 @llvm.ctpop.i32(i32 %6106)
  %6108 = trunc i32 %6107 to i8
  %6109 = and i8 %6108, 1
  %6110 = xor i8 %6109, 1
  store i8 %6110, i8* %21, align 1
  %6111 = xor i32 %6099, %6071
  %6112 = xor i32 %6111, %6100
  %6113 = lshr i32 %6112, 4
  %6114 = trunc i32 %6113 to i8
  %6115 = and i8 %6114, 1
  store i8 %6115, i8* %27, align 1
  %6116 = icmp eq i32 %6100, 0
  %6117 = zext i1 %6116 to i8
  store i8 %6117, i8* %30, align 1
  %6118 = lshr i32 %6100, 31
  %6119 = trunc i32 %6118 to i8
  store i8 %6119, i8* %33, align 1
  %6120 = lshr i32 %6099, 31
  %6121 = xor i32 %6118, %6087
  %6122 = xor i32 %6118, %6120
  %6123 = add nuw nsw i32 %6121, %6122
  %6124 = icmp eq i32 %6123, 2
  %6125 = zext i1 %6124 to i8
  store i8 %6125, i8* %39, align 1
  %6126 = add i64 %6060, -256
  %6127 = add i64 %6062, 24
  store i64 %6127, i64* %3, align 8
  %6128 = inttoptr i64 %6126 to i32*
  %6129 = load i32, i32* %6128, align 4
  %6130 = sub i32 %6100, %6129
  %6131 = zext i32 %6130 to i64
  store i64 %6131, i64* %RCX.i2028, align 8
  %6132 = icmp ult i32 %6100, %6129
  %6133 = zext i1 %6132 to i8
  store i8 %6133, i8* %14, align 1
  %6134 = and i32 %6130, 255
  %6135 = tail call i32 @llvm.ctpop.i32(i32 %6134)
  %6136 = trunc i32 %6135 to i8
  %6137 = and i8 %6136, 1
  %6138 = xor i8 %6137, 1
  store i8 %6138, i8* %21, align 1
  %6139 = xor i32 %6129, %6100
  %6140 = xor i32 %6139, %6130
  %6141 = lshr i32 %6140, 4
  %6142 = trunc i32 %6141 to i8
  %6143 = and i8 %6142, 1
  store i8 %6143, i8* %27, align 1
  %6144 = icmp eq i32 %6130, 0
  %6145 = zext i1 %6144 to i8
  store i8 %6145, i8* %30, align 1
  %6146 = lshr i32 %6130, 31
  %6147 = trunc i32 %6146 to i8
  store i8 %6147, i8* %33, align 1
  %6148 = lshr i32 %6129, 31
  %6149 = xor i32 %6148, %6118
  %6150 = xor i32 %6146, %6118
  %6151 = add nuw nsw i32 %6150, %6149
  %6152 = icmp eq i32 %6151, 2
  %6153 = zext i1 %6152 to i8
  store i8 %6153, i8* %39, align 1
  %6154 = load i64, i64* %RBP.i, align 8
  %6155 = add i64 %6154, -428
  %6156 = add i64 %6062, 30
  store i64 %6156, i64* %3, align 8
  %6157 = inttoptr i64 %6155 to i32*
  store i32 %6130, i32* %6157, align 4
  %6158 = load i64, i64* %RBP.i, align 8
  %6159 = add i64 %6158, -400
  %6160 = load i64, i64* %3, align 8
  %6161 = add i64 %6160, 6
  store i64 %6161, i64* %3, align 8
  %6162 = inttoptr i64 %6159 to i32*
  %6163 = load i32, i32* %6162, align 4
  %6164 = zext i32 %6163 to i64
  store i64 %6164, i64* %RCX.i2028, align 8
  %6165 = add i64 %6158, -272
  %6166 = add i64 %6160, 12
  store i64 %6166, i64* %3, align 8
  %6167 = inttoptr i64 %6165 to i32*
  %6168 = load i32, i32* %6167, align 4
  %6169 = add i32 %6168, %6163
  %6170 = zext i32 %6169 to i64
  store i64 %6170, i64* %RCX.i2028, align 8
  %6171 = icmp ult i32 %6169, %6163
  %6172 = icmp ult i32 %6169, %6168
  %6173 = or i1 %6171, %6172
  %6174 = zext i1 %6173 to i8
  store i8 %6174, i8* %14, align 1
  %6175 = and i32 %6169, 255
  %6176 = tail call i32 @llvm.ctpop.i32(i32 %6175)
  %6177 = trunc i32 %6176 to i8
  %6178 = and i8 %6177, 1
  %6179 = xor i8 %6178, 1
  store i8 %6179, i8* %21, align 1
  %6180 = xor i32 %6168, %6163
  %6181 = xor i32 %6180, %6169
  %6182 = lshr i32 %6181, 4
  %6183 = trunc i32 %6182 to i8
  %6184 = and i8 %6183, 1
  store i8 %6184, i8* %27, align 1
  %6185 = icmp eq i32 %6169, 0
  %6186 = zext i1 %6185 to i8
  store i8 %6186, i8* %30, align 1
  %6187 = lshr i32 %6169, 31
  %6188 = trunc i32 %6187 to i8
  store i8 %6188, i8* %33, align 1
  %6189 = lshr i32 %6163, 31
  %6190 = lshr i32 %6168, 31
  %6191 = xor i32 %6187, %6189
  %6192 = xor i32 %6187, %6190
  %6193 = add nuw nsw i32 %6191, %6192
  %6194 = icmp eq i32 %6193, 2
  %6195 = zext i1 %6194 to i8
  store i8 %6195, i8* %39, align 1
  %6196 = add i64 %6158, -384
  %6197 = add i64 %6160, 18
  store i64 %6197, i64* %3, align 8
  %6198 = inttoptr i64 %6196 to i32*
  %6199 = load i32, i32* %6198, align 4
  %6200 = sub i32 %6169, %6199
  %6201 = zext i32 %6200 to i64
  store i64 %6201, i64* %RCX.i2028, align 8
  %6202 = icmp ult i32 %6169, %6199
  %6203 = zext i1 %6202 to i8
  store i8 %6203, i8* %14, align 1
  %6204 = and i32 %6200, 255
  %6205 = tail call i32 @llvm.ctpop.i32(i32 %6204)
  %6206 = trunc i32 %6205 to i8
  %6207 = and i8 %6206, 1
  %6208 = xor i8 %6207, 1
  store i8 %6208, i8* %21, align 1
  %6209 = xor i32 %6199, %6169
  %6210 = xor i32 %6209, %6200
  %6211 = lshr i32 %6210, 4
  %6212 = trunc i32 %6211 to i8
  %6213 = and i8 %6212, 1
  store i8 %6213, i8* %27, align 1
  %6214 = icmp eq i32 %6200, 0
  %6215 = zext i1 %6214 to i8
  store i8 %6215, i8* %30, align 1
  %6216 = lshr i32 %6200, 31
  %6217 = trunc i32 %6216 to i8
  store i8 %6217, i8* %33, align 1
  %6218 = lshr i32 %6199, 31
  %6219 = xor i32 %6218, %6187
  %6220 = xor i32 %6216, %6187
  %6221 = add nuw nsw i32 %6220, %6219
  %6222 = icmp eq i32 %6221, 2
  %6223 = zext i1 %6222 to i8
  store i8 %6223, i8* %39, align 1
  %6224 = add i64 %6158, -256
  %6225 = add i64 %6160, 24
  store i64 %6225, i64* %3, align 8
  %6226 = inttoptr i64 %6224 to i32*
  %6227 = load i32, i32* %6226, align 4
  %6228 = sub i32 %6200, %6227
  %6229 = zext i32 %6228 to i64
  store i64 %6229, i64* %RCX.i2028, align 8
  %6230 = icmp ult i32 %6200, %6227
  %6231 = zext i1 %6230 to i8
  store i8 %6231, i8* %14, align 1
  %6232 = and i32 %6228, 255
  %6233 = tail call i32 @llvm.ctpop.i32(i32 %6232)
  %6234 = trunc i32 %6233 to i8
  %6235 = and i8 %6234, 1
  %6236 = xor i8 %6235, 1
  store i8 %6236, i8* %21, align 1
  %6237 = xor i32 %6227, %6200
  %6238 = xor i32 %6237, %6228
  %6239 = lshr i32 %6238, 4
  %6240 = trunc i32 %6239 to i8
  %6241 = and i8 %6240, 1
  store i8 %6241, i8* %27, align 1
  %6242 = icmp eq i32 %6228, 0
  %6243 = zext i1 %6242 to i8
  store i8 %6243, i8* %30, align 1
  %6244 = lshr i32 %6228, 31
  %6245 = trunc i32 %6244 to i8
  store i8 %6245, i8* %33, align 1
  %6246 = lshr i32 %6227, 31
  %6247 = xor i32 %6246, %6216
  %6248 = xor i32 %6244, %6216
  %6249 = add nuw nsw i32 %6248, %6247
  %6250 = icmp eq i32 %6249, 2
  %6251 = zext i1 %6250 to i8
  store i8 %6251, i8* %39, align 1
  %6252 = load i64, i64* %RBP.i, align 8
  %6253 = add i64 %6252, -424
  %6254 = add i64 %6160, 30
  store i64 %6254, i64* %3, align 8
  %6255 = inttoptr i64 %6253 to i32*
  store i32 %6228, i32* %6255, align 4
  %6256 = load i64, i64* %RBP.i, align 8
  %6257 = add i64 %6256, -400
  %6258 = load i64, i64* %3, align 8
  %6259 = add i64 %6258, 6
  store i64 %6259, i64* %3, align 8
  %6260 = inttoptr i64 %6257 to i32*
  %6261 = load i32, i32* %6260, align 4
  %6262 = zext i32 %6261 to i64
  store i64 %6262, i64* %RCX.i2028, align 8
  %6263 = add i64 %6256, -272
  %6264 = add i64 %6258, 12
  store i64 %6264, i64* %3, align 8
  %6265 = inttoptr i64 %6263 to i32*
  %6266 = load i32, i32* %6265, align 4
  %6267 = sub i32 %6261, %6266
  %6268 = zext i32 %6267 to i64
  store i64 %6268, i64* %RCX.i2028, align 8
  %6269 = icmp ult i32 %6261, %6266
  %6270 = zext i1 %6269 to i8
  store i8 %6270, i8* %14, align 1
  %6271 = and i32 %6267, 255
  %6272 = tail call i32 @llvm.ctpop.i32(i32 %6271)
  %6273 = trunc i32 %6272 to i8
  %6274 = and i8 %6273, 1
  %6275 = xor i8 %6274, 1
  store i8 %6275, i8* %21, align 1
  %6276 = xor i32 %6266, %6261
  %6277 = xor i32 %6276, %6267
  %6278 = lshr i32 %6277, 4
  %6279 = trunc i32 %6278 to i8
  %6280 = and i8 %6279, 1
  store i8 %6280, i8* %27, align 1
  %6281 = icmp eq i32 %6267, 0
  %6282 = zext i1 %6281 to i8
  store i8 %6282, i8* %30, align 1
  %6283 = lshr i32 %6267, 31
  %6284 = trunc i32 %6283 to i8
  store i8 %6284, i8* %33, align 1
  %6285 = lshr i32 %6261, 31
  %6286 = lshr i32 %6266, 31
  %6287 = xor i32 %6286, %6285
  %6288 = xor i32 %6283, %6285
  %6289 = add nuw nsw i32 %6288, %6287
  %6290 = icmp eq i32 %6289, 2
  %6291 = zext i1 %6290 to i8
  store i8 %6291, i8* %39, align 1
  %6292 = add i64 %6256, -384
  %6293 = add i64 %6258, 18
  store i64 %6293, i64* %3, align 8
  %6294 = inttoptr i64 %6292 to i32*
  %6295 = load i32, i32* %6294, align 4
  %6296 = sub i32 %6267, %6295
  %6297 = zext i32 %6296 to i64
  store i64 %6297, i64* %RCX.i2028, align 8
  %6298 = icmp ult i32 %6267, %6295
  %6299 = zext i1 %6298 to i8
  store i8 %6299, i8* %14, align 1
  %6300 = and i32 %6296, 255
  %6301 = tail call i32 @llvm.ctpop.i32(i32 %6300)
  %6302 = trunc i32 %6301 to i8
  %6303 = and i8 %6302, 1
  %6304 = xor i8 %6303, 1
  store i8 %6304, i8* %21, align 1
  %6305 = xor i32 %6295, %6267
  %6306 = xor i32 %6305, %6296
  %6307 = lshr i32 %6306, 4
  %6308 = trunc i32 %6307 to i8
  %6309 = and i8 %6308, 1
  store i8 %6309, i8* %27, align 1
  %6310 = icmp eq i32 %6296, 0
  %6311 = zext i1 %6310 to i8
  store i8 %6311, i8* %30, align 1
  %6312 = lshr i32 %6296, 31
  %6313 = trunc i32 %6312 to i8
  store i8 %6313, i8* %33, align 1
  %6314 = lshr i32 %6295, 31
  %6315 = xor i32 %6314, %6283
  %6316 = xor i32 %6312, %6283
  %6317 = add nuw nsw i32 %6316, %6315
  %6318 = icmp eq i32 %6317, 2
  %6319 = zext i1 %6318 to i8
  store i8 %6319, i8* %39, align 1
  %6320 = add i64 %6256, -256
  %6321 = add i64 %6258, 24
  store i64 %6321, i64* %3, align 8
  %6322 = inttoptr i64 %6320 to i32*
  %6323 = load i32, i32* %6322, align 4
  %6324 = add i32 %6323, %6296
  %6325 = zext i32 %6324 to i64
  store i64 %6325, i64* %RCX.i2028, align 8
  %6326 = icmp ult i32 %6324, %6296
  %6327 = icmp ult i32 %6324, %6323
  %6328 = or i1 %6326, %6327
  %6329 = zext i1 %6328 to i8
  store i8 %6329, i8* %14, align 1
  %6330 = and i32 %6324, 255
  %6331 = tail call i32 @llvm.ctpop.i32(i32 %6330)
  %6332 = trunc i32 %6331 to i8
  %6333 = and i8 %6332, 1
  %6334 = xor i8 %6333, 1
  store i8 %6334, i8* %21, align 1
  %6335 = xor i32 %6323, %6296
  %6336 = xor i32 %6335, %6324
  %6337 = lshr i32 %6336, 4
  %6338 = trunc i32 %6337 to i8
  %6339 = and i8 %6338, 1
  store i8 %6339, i8* %27, align 1
  %6340 = icmp eq i32 %6324, 0
  %6341 = zext i1 %6340 to i8
  store i8 %6341, i8* %30, align 1
  %6342 = lshr i32 %6324, 31
  %6343 = trunc i32 %6342 to i8
  store i8 %6343, i8* %33, align 1
  %6344 = lshr i32 %6323, 31
  %6345 = xor i32 %6342, %6312
  %6346 = xor i32 %6342, %6344
  %6347 = add nuw nsw i32 %6345, %6346
  %6348 = icmp eq i32 %6347, 2
  %6349 = zext i1 %6348 to i8
  store i8 %6349, i8* %39, align 1
  %6350 = load i64, i64* %RBP.i, align 8
  %6351 = add i64 %6350, -420
  %6352 = add i64 %6258, 30
  store i64 %6352, i64* %3, align 8
  %6353 = inttoptr i64 %6351 to i32*
  store i32 %6324, i32* %6353, align 4
  %6354 = load i64, i64* %RBP.i, align 8
  %6355 = add i64 %6354, -68
  %6356 = load i64, i64* %3, align 8
  %6357 = add i64 %6356, 7
  store i64 %6357, i64* %3, align 8
  %6358 = inttoptr i64 %6355 to i32*
  store i32 -1, i32* %6358, align 4
  %6359 = load i64, i64* %RBP.i, align 8
  %6360 = add i64 %6359, -64
  %6361 = load i64, i64* %3, align 8
  %6362 = add i64 %6361, 7
  store i64 %6362, i64* %3, align 8
  %6363 = inttoptr i64 %6360 to i32*
  store i32 0, i32* %6363, align 4
  %6364 = load i64, i64* %RBP.i, align 8
  %6365 = add i64 %6364, -48
  %6366 = load i64, i64* %3, align 8
  %6367 = add i64 %6366, 7
  store i64 %6367, i64* %3, align 8
  %6368 = inttoptr i64 %6365 to i32*
  store i32 0, i32* %6368, align 4
  %R8.i3081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9.i3079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %.pre286 = load i64, i64* %3, align 8
  br label %block_.L_40df40

block_.L_40df40:                                  ; preds = %routine_shll__cl___eax.exit2371, %block_.L_40ddc7
  %6369 = phi i64 [ %.pre286, %block_.L_40ddc7 ], [ %9035, %routine_shll__cl___eax.exit2371 ]
  %MEMORY.22 = phi %struct.Memory* [ %1114, %block_.L_40ddc7 ], [ %call2_40e556, %routine_shll__cl___eax.exit2371 ]
  %6370 = load i64, i64* %RBP.i, align 8
  %6371 = add i64 %6370, -48
  %6372 = add i64 %6369, 4
  store i64 %6372, i64* %3, align 8
  %6373 = inttoptr i64 %6371 to i32*
  %6374 = load i32, i32* %6373, align 4
  %6375 = add i32 %6374, -4
  %6376 = icmp ult i32 %6374, 4
  %6377 = zext i1 %6376 to i8
  store i8 %6377, i8* %14, align 1
  %6378 = and i32 %6375, 255
  %6379 = tail call i32 @llvm.ctpop.i32(i32 %6378)
  %6380 = trunc i32 %6379 to i8
  %6381 = and i8 %6380, 1
  %6382 = xor i8 %6381, 1
  store i8 %6382, i8* %21, align 1
  %6383 = xor i32 %6375, %6374
  %6384 = lshr i32 %6383, 4
  %6385 = trunc i32 %6384 to i8
  %6386 = and i8 %6385, 1
  store i8 %6386, i8* %27, align 1
  %6387 = icmp eq i32 %6375, 0
  %6388 = zext i1 %6387 to i8
  store i8 %6388, i8* %30, align 1
  %6389 = lshr i32 %6375, 31
  %6390 = trunc i32 %6389 to i8
  store i8 %6390, i8* %33, align 1
  %6391 = lshr i32 %6374, 31
  %6392 = xor i32 %6389, %6391
  %6393 = add nuw nsw i32 %6392, %6391
  %6394 = icmp eq i32 %6393, 2
  %6395 = zext i1 %6394 to i8
  store i8 %6395, i8* %39, align 1
  %6396 = icmp ne i8 %6390, 0
  %6397 = xor i1 %6396, %6394
  %.v381 = select i1 %6397, i64 10, i64 1620
  %6398 = add i64 %6369, %.v381
  store i64 %6398, i64* %3, align 8
  br i1 %6397, label %block_40df4a, label %block_.L_40e594

block_40df4a:                                     ; preds = %block_.L_40df40
  %6399 = add i64 %6370, -68
  %6400 = add i64 %6398, 3
  store i64 %6400, i64* %3, align 8
  %6401 = inttoptr i64 %6399 to i32*
  %6402 = load i32, i32* %6401, align 4
  %6403 = add i32 %6402, 1
  %6404 = zext i32 %6403 to i64
  store i64 %6404, i64* %RAX.i1862, align 8
  %6405 = icmp eq i32 %6402, -1
  %6406 = icmp eq i32 %6403, 0
  %6407 = or i1 %6405, %6406
  %6408 = zext i1 %6407 to i8
  store i8 %6408, i8* %14, align 1
  %6409 = and i32 %6403, 255
  %6410 = tail call i32 @llvm.ctpop.i32(i32 %6409)
  %6411 = trunc i32 %6410 to i8
  %6412 = and i8 %6411, 1
  %6413 = xor i8 %6412, 1
  store i8 %6413, i8* %21, align 1
  %6414 = xor i32 %6403, %6402
  %6415 = lshr i32 %6414, 4
  %6416 = trunc i32 %6415 to i8
  %6417 = and i8 %6416, 1
  store i8 %6417, i8* %27, align 1
  %6418 = zext i1 %6406 to i8
  store i8 %6418, i8* %30, align 1
  %6419 = lshr i32 %6403, 31
  %6420 = trunc i32 %6419 to i8
  store i8 %6420, i8* %33, align 1
  %6421 = lshr i32 %6402, 31
  %6422 = xor i32 %6419, %6421
  %6423 = add nuw nsw i32 %6422, %6419
  %6424 = icmp eq i32 %6423, 2
  %6425 = zext i1 %6424 to i8
  store i8 %6425, i8* %39, align 1
  %6426 = add i64 %6398, 9
  store i64 %6426, i64* %3, align 8
  store i32 %6403, i32* %6401, align 4
  %6427 = load i64, i64* %RBP.i, align 8
  %6428 = add i64 %6427, -28
  %6429 = load i64, i64* %3, align 8
  %6430 = add i64 %6429, 7
  store i64 %6430, i64* %3, align 8
  %6431 = inttoptr i64 %6428 to i32*
  store i32 0, i32* %6431, align 4
  %6432 = load i64, i64* %RBP.i, align 8
  %6433 = add i64 %6432, -48
  %6434 = load i64, i64* %3, align 8
  %6435 = add i64 %6434, 4
  store i64 %6435, i64* %3, align 8
  %6436 = inttoptr i64 %6433 to i32*
  %6437 = load i32, i32* %6436, align 4
  %6438 = sext i32 %6437 to i64
  store i64 %6438, i64* %RCX.i2028, align 8
  %6439 = shl nsw i64 %6438, 2
  %6440 = add i64 %6432, -432
  %6441 = add i64 %6440, %6439
  %6442 = add i64 %6434, 11
  store i64 %6442, i64* %3, align 8
  %6443 = inttoptr i64 %6441 to i32*
  %6444 = load i32, i32* %6443, align 4
  %6445 = zext i32 %6444 to i64
  store i64 %6445, i64* %RDI.i3890, align 8
  %6446 = add i64 %6434, -53082
  %6447 = add i64 %6434, 16
  %6448 = load i64, i64* %6, align 8
  %6449 = add i64 %6448, -8
  %6450 = inttoptr i64 %6449 to i64*
  store i64 %6447, i64* %6450, align 8
  store i64 %6449, i64* %6, align 8
  store i64 %6446, i64* %3, align 8
  %6451 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.22)
  %6452 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RCX.i2028, align 8
  %6453 = load i64, i64* %RBP.i, align 8
  %6454 = add i64 %6453, -460
  %6455 = add i64 %6452, 17
  store i64 %6455, i64* %3, align 8
  %6456 = inttoptr i64 %6454 to i32*
  %6457 = load i32, i32* %6456, align 4
  %6458 = sext i32 %6457 to i64
  %6459 = shl nsw i64 %6458, 6
  store i64 %6459, i64* %RDX.i4840, align 8
  %6460 = add i64 %6459, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %6460, i64* %RSI.i2426, align 8
  %6461 = icmp ult i64 %6460, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %6462 = icmp ult i64 %6460, %6459
  %6463 = or i1 %6461, %6462
  %6464 = zext i1 %6463 to i8
  store i8 %6464, i8* %14, align 1
  %6465 = trunc i64 %6460 to i32
  %6466 = and i32 %6465, 248
  %6467 = tail call i32 @llvm.ctpop.i32(i32 %6466)
  %6468 = trunc i32 %6467 to i8
  %6469 = and i8 %6468, 1
  %6470 = xor i8 %6469, 1
  store i8 %6470, i8* %21, align 1
  %6471 = xor i64 %6460, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %6472 = lshr i64 %6471, 4
  %6473 = trunc i64 %6472 to i8
  %6474 = and i8 %6473, 1
  store i8 %6474, i8* %27, align 1
  %6475 = icmp eq i64 %6460, 0
  %6476 = zext i1 %6475 to i8
  store i8 %6476, i8* %30, align 1
  %6477 = lshr i64 %6460, 63
  %6478 = trunc i64 %6477 to i8
  store i8 %6478, i8* %33, align 1
  %6479 = lshr i64 %6458, 57
  %6480 = and i64 %6479, 1
  %6481 = xor i64 %6477, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %6482 = xor i64 %6477, %6480
  %6483 = add nuw nsw i64 %6481, %6482
  %6484 = icmp eq i64 %6483, 2
  %6485 = zext i1 %6484 to i8
  store i8 %6485, i8* %39, align 1
  %6486 = load i64, i64* %RAX.i1862, align 8
  %6487 = inttoptr i64 %6460 to i32*
  %6488 = add i64 %6452, 30
  store i64 %6488, i64* %3, align 8
  %6489 = load i32, i32* %6487, align 8
  %6490 = shl i64 %6486, 32
  %6491 = ashr exact i64 %6490, 32
  %6492 = sext i32 %6489 to i64
  %6493 = mul nsw i64 %6492, %6491
  %6494 = trunc i64 %6493 to i32
  %6495 = and i64 %6493, 4294967295
  store i64 %6495, i64* %RAX.i1862, align 8
  %6496 = shl i64 %6493, 32
  %6497 = ashr exact i64 %6496, 32
  %6498 = icmp ne i64 %6497, %6493
  %6499 = zext i1 %6498 to i8
  store i8 %6499, i8* %14, align 1
  %6500 = and i32 %6494, 255
  %6501 = tail call i32 @llvm.ctpop.i32(i32 %6500)
  %6502 = trunc i32 %6501 to i8
  %6503 = and i8 %6502, 1
  %6504 = xor i8 %6503, 1
  store i8 %6504, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %6505 = lshr i32 %6494, 31
  %6506 = trunc i32 %6505 to i8
  store i8 %6506, i8* %33, align 1
  store i8 %6499, i8* %39, align 1
  %6507 = add i64 %6453, -404
  %6508 = add i64 %6452, 36
  store i64 %6508, i64* %3, align 8
  %6509 = inttoptr i64 %6507 to i32*
  %6510 = load i32, i32* %6509, align 4
  %6511 = shl i32 %6510, 1
  %6512 = zext i32 %6511 to i64
  store i64 %6512, i64* %RDI.i3890, align 8
  %6513 = trunc i64 %6493 to i32
  %6514 = add i32 %6511, %6513
  %6515 = zext i32 %6514 to i64
  store i64 %6515, i64* %RAX.i1862, align 8
  %6516 = icmp ult i32 %6514, %6513
  %6517 = icmp ult i32 %6514, %6511
  %6518 = or i1 %6516, %6517
  %6519 = zext i1 %6518 to i8
  store i8 %6519, i8* %14, align 1
  %6520 = and i32 %6514, 255
  %6521 = tail call i32 @llvm.ctpop.i32(i32 %6520)
  %6522 = trunc i32 %6521 to i8
  %6523 = and i8 %6522, 1
  %6524 = xor i8 %6523, 1
  store i8 %6524, i8* %21, align 1
  %6525 = xor i64 %6512, %6493
  %6526 = trunc i64 %6525 to i32
  %6527 = xor i32 %6526, %6514
  %6528 = lshr i32 %6527, 4
  %6529 = trunc i32 %6528 to i8
  %6530 = and i8 %6529, 1
  store i8 %6530, i8* %27, align 1
  %6531 = icmp eq i32 %6514, 0
  %6532 = zext i1 %6531 to i8
  store i8 %6532, i8* %30, align 1
  %6533 = lshr i32 %6514, 31
  %6534 = trunc i32 %6533 to i8
  store i8 %6534, i8* %33, align 1
  %6535 = lshr i32 %6513, 31
  %6536 = lshr i32 %6510, 30
  %6537 = and i32 %6536, 1
  %6538 = xor i32 %6533, %6535
  %6539 = xor i32 %6533, %6537
  %6540 = add nuw nsw i32 %6538, %6539
  %6541 = icmp eq i32 %6540, 2
  %6542 = zext i1 %6541 to i8
  store i8 %6542, i8* %39, align 1
  %6543 = load i64, i64* %RBP.i, align 8
  %6544 = add i64 %6543, -464
  %6545 = add i64 %6452, 46
  store i64 %6545, i64* %3, align 8
  %6546 = inttoptr i64 %6544 to i32*
  %6547 = load i32, i32* %6546, align 4
  %6548 = add i32 %6547, 1
  %6549 = zext i32 %6548 to i64
  store i64 %6549, i64* %RDI.i3890, align 8
  %6550 = icmp eq i32 %6547, -1
  %6551 = icmp eq i32 %6548, 0
  %6552 = or i1 %6550, %6551
  %6553 = zext i1 %6552 to i8
  store i8 %6553, i8* %14, align 1
  %6554 = and i32 %6548, 255
  %6555 = tail call i32 @llvm.ctpop.i32(i32 %6554)
  %6556 = trunc i32 %6555 to i8
  %6557 = and i8 %6556, 1
  %6558 = xor i8 %6557, 1
  store i8 %6558, i8* %21, align 1
  %6559 = xor i32 %6548, %6547
  %6560 = lshr i32 %6559, 4
  %6561 = trunc i32 %6560 to i8
  %6562 = and i8 %6561, 1
  store i8 %6562, i8* %27, align 1
  %6563 = zext i1 %6551 to i8
  store i8 %6563, i8* %30, align 1
  %6564 = lshr i32 %6548, 31
  %6565 = trunc i32 %6564 to i8
  store i8 %6565, i8* %33, align 1
  %6566 = lshr i32 %6547, 31
  %6567 = xor i32 %6564, %6566
  %6568 = add nuw nsw i32 %6567, %6564
  %6569 = icmp eq i32 %6568, 2
  %6570 = zext i1 %6569 to i8
  store i8 %6570, i8* %39, align 1
  %6571 = add i64 %6543, -616
  %6572 = load i64, i64* %RCX.i2028, align 8
  %6573 = add i64 %6452, 56
  store i64 %6573, i64* %3, align 8
  %6574 = inttoptr i64 %6571 to i64*
  store i64 %6572, i64* %6574, align 8
  %6575 = load i32, i32* %EDI.i1347, align 4
  %6576 = zext i32 %6575 to i64
  %6577 = load i64, i64* %3, align 8
  store i64 %6576, i64* %RCX.i2028, align 8
  %6578 = load i64, i64* %RAX.i1862, align 8
  %6579 = add i64 %6577, 4
  store i64 %6579, i64* %3, align 8
  %6580 = trunc i32 %6575 to i5
  switch i5 %6580, label %6584 [
    i5 0, label %routine_sarl__cl___eax.exit3157
    i5 1, label %6581
  ]

; <label>:6581:                                   ; preds = %block_40df4a
  %6582 = shl i64 %6578, 32
  %6583 = ashr i64 %6582, 33
  br label %6592

; <label>:6584:                                   ; preds = %block_40df4a
  %6585 = and i32 %6575, 31
  %6586 = zext i32 %6585 to i64
  %6587 = add nsw i64 %6586, -1
  %6588 = shl i64 %6578, 32
  %6589 = ashr exact i64 %6588, 32
  %6590 = ashr i64 %6589, %6587
  %6591 = lshr i64 %6590, 1
  br label %6592

; <label>:6592:                                   ; preds = %6584, %6581
  %6593 = phi i64 [ %6591, %6584 ], [ %6583, %6581 ]
  %6594 = phi i64 [ %6590, %6584 ], [ %6578, %6581 ]
  %6595 = trunc i64 %6594 to i8
  %6596 = and i8 %6595, 1
  %6597 = trunc i64 %6593 to i32
  %6598 = and i64 %6593, 4294967295
  store i64 %6598, i64* %RAX.i1862, align 8
  store i8 %6596, i8* %14, align 1
  %6599 = and i32 %6597, 255
  %6600 = tail call i32 @llvm.ctpop.i32(i32 %6599)
  %6601 = trunc i32 %6600 to i8
  %6602 = and i8 %6601, 1
  %6603 = xor i8 %6602, 1
  store i8 %6603, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6604 = icmp eq i32 %6597, 0
  %6605 = zext i1 %6604 to i8
  store i8 %6605, i8* %30, align 1
  %6606 = lshr i32 %6597, 31
  %6607 = trunc i32 %6606 to i8
  store i8 %6607, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_sarl__cl___eax.exit3157

routine_sarl__cl___eax.exit3157:                  ; preds = %6592, %block_40df4a
  %.in = phi i64 [ %6593, %6592 ], [ %6578, %block_40df4a ]
  %6608 = trunc i64 %.in to i32
  %6609 = load i64, i64* %RBP.i, align 8
  %6610 = add i64 %6609, -508
  %6611 = add i64 %6577, 10
  store i64 %6611, i64* %3, align 8
  %6612 = inttoptr i64 %6610 to i32*
  store i32 %6608, i32* %6612, align 4
  %6613 = load i64, i64* %RBP.i, align 8
  %6614 = add i64 %6613, -508
  %6615 = load i64, i64* %3, align 8
  %6616 = add i64 %6615, 6
  store i64 %6616, i64* %3, align 8
  %6617 = inttoptr i64 %6614 to i32*
  %6618 = load i32, i32* %6617, align 4
  %6619 = zext i32 %6618 to i64
  store i64 %6619, i64* %RAX.i1862, align 8
  %6620 = add i64 %6613, -464
  %6621 = add i64 %6615, 12
  store i64 %6621, i64* %3, align 8
  %6622 = inttoptr i64 %6620 to i32*
  %6623 = load i32, i32* %6622, align 4
  %6624 = add i32 %6623, 1
  %6625 = zext i32 %6624 to i64
  store i64 %6625, i64* %RDI.i3890, align 8
  %6626 = icmp eq i32 %6623, -1
  %6627 = icmp eq i32 %6624, 0
  %6628 = or i1 %6626, %6627
  %6629 = zext i1 %6628 to i8
  store i8 %6629, i8* %14, align 1
  %6630 = and i32 %6624, 255
  %6631 = tail call i32 @llvm.ctpop.i32(i32 %6630)
  %6632 = trunc i32 %6631 to i8
  %6633 = and i8 %6632, 1
  %6634 = xor i8 %6633, 1
  store i8 %6634, i8* %21, align 1
  %6635 = xor i32 %6624, %6623
  %6636 = lshr i32 %6635, 4
  %6637 = trunc i32 %6636 to i8
  %6638 = and i8 %6637, 1
  store i8 %6638, i8* %27, align 1
  %6639 = zext i1 %6627 to i8
  store i8 %6639, i8* %30, align 1
  %6640 = lshr i32 %6624, 31
  %6641 = trunc i32 %6640 to i8
  store i8 %6641, i8* %33, align 1
  %6642 = lshr i32 %6623, 31
  %6643 = xor i32 %6640, %6642
  %6644 = add nuw nsw i32 %6643, %6640
  %6645 = icmp eq i32 %6644, 2
  %6646 = zext i1 %6645 to i8
  store i8 %6646, i8* %39, align 1
  store i64 %6625, i64* %RCX.i2028, align 8
  %6647 = add i64 %6615, 19
  store i64 %6647, i64* %3, align 8
  %6648 = trunc i32 %6624 to i5
  switch i5 %6648, label %6654 [
    i5 0, label %routine_shll__cl___eax.exit3139
    i5 1, label %6649
  ]

; <label>:6649:                                   ; preds = %routine_sarl__cl___eax.exit3157
  %6650 = shl i32 %6618, 1
  %6651 = icmp slt i32 %6618, 0
  %6652 = icmp slt i32 %6650, 0
  %6653 = xor i1 %6651, %6652
  br label %6663

; <label>:6654:                                   ; preds = %routine_sarl__cl___eax.exit3157
  %6655 = and i32 %6624, 31
  %6656 = zext i32 %6655 to i64
  %6657 = add nuw nsw i64 %6656, 4294967295
  %6658 = and i64 %6657, 4294967295
  %6659 = shl i64 %6619, %6658
  %6660 = trunc i64 %6659 to i32
  %6661 = icmp slt i32 %6660, 0
  %6662 = shl i32 %6660, 1
  br label %6663

; <label>:6663:                                   ; preds = %6654, %6649
  %6664 = phi i1 [ %6651, %6649 ], [ %6661, %6654 ]
  %6665 = phi i1 [ %6653, %6649 ], [ false, %6654 ]
  %6666 = phi i32 [ %6650, %6649 ], [ %6662, %6654 ]
  %6667 = zext i32 %6666 to i64
  store i64 %6667, i64* %RAX.i1862, align 8
  %6668 = zext i1 %6664 to i8
  store i8 %6668, i8* %14, align 1
  %6669 = and i32 %6666, 254
  %6670 = tail call i32 @llvm.ctpop.i32(i32 %6669)
  %6671 = trunc i32 %6670 to i8
  %6672 = and i8 %6671, 1
  %6673 = xor i8 %6672, 1
  store i8 %6673, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6674 = icmp eq i32 %6666, 0
  %6675 = zext i1 %6674 to i8
  store i8 %6675, i8* %30, align 1
  %6676 = lshr i32 %6666, 31
  %6677 = trunc i32 %6676 to i8
  store i8 %6677, i8* %33, align 1
  %6678 = zext i1 %6665 to i8
  store i8 %6678, i8* %39, align 1
  br label %routine_shll__cl___eax.exit3139

routine_shll__cl___eax.exit3139:                  ; preds = %6663, %routine_sarl__cl___eax.exit3157
  %6679 = phi i32 [ %6666, %6663 ], [ %6618, %routine_sarl__cl___eax.exit3157 ]
  %6680 = add i64 %6613, -460
  %6681 = add i64 %6615, 26
  store i64 %6681, i64* %3, align 8
  %6682 = inttoptr i64 %6680 to i32*
  %6683 = load i32, i32* %6682, align 4
  %6684 = sext i32 %6683 to i64
  %6685 = shl nsw i64 %6684, 6
  store i64 %6685, i64* %RDX.i4840, align 8
  %.lobit120 = lshr i32 %6683, 31
  %6686 = trunc i32 %.lobit120 to i8
  store i8 %6686, i8* %14, align 1
  %6687 = trunc i64 %6685 to i32
  %6688 = and i32 %6687, 192
  %6689 = tail call i32 @llvm.ctpop.i32(i32 %6688)
  %6690 = trunc i32 %6689 to i8
  %6691 = and i8 %6690, 1
  %6692 = xor i8 %6691, 1
  store i8 %6692, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6693 = icmp eq i32 %6683, 0
  %6694 = zext i1 %6693 to i8
  store i8 %6694, i8* %30, align 1
  %6695 = lshr i64 %6684, 57
  %6696 = trunc i64 %6695 to i8
  %6697 = and i8 %6696, 1
  store i8 %6697, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6698 = add i64 %6613, -616
  %6699 = add i64 %6615, 37
  store i64 %6699, i64* %3, align 8
  %6700 = inttoptr i64 %6698 to i64*
  %6701 = load i64, i64* %6700, align 8
  %6702 = add i64 %6685, %6701
  store i64 %6702, i64* %RSI.i2426, align 8
  %6703 = icmp ult i64 %6702, %6701
  %6704 = icmp ult i64 %6702, %6685
  %6705 = or i1 %6703, %6704
  %6706 = zext i1 %6705 to i8
  store i8 %6706, i8* %14, align 1
  %6707 = trunc i64 %6702 to i32
  %6708 = and i32 %6707, 255
  %6709 = tail call i32 @llvm.ctpop.i32(i32 %6708)
  %6710 = trunc i32 %6709 to i8
  %6711 = and i8 %6710, 1
  %6712 = xor i8 %6711, 1
  store i8 %6712, i8* %21, align 1
  %6713 = xor i64 %6701, %6702
  %6714 = lshr i64 %6713, 4
  %6715 = trunc i64 %6714 to i8
  %6716 = and i8 %6715, 1
  store i8 %6716, i8* %27, align 1
  %6717 = icmp eq i64 %6702, 0
  %6718 = zext i1 %6717 to i8
  store i8 %6718, i8* %30, align 1
  %6719 = lshr i64 %6702, 63
  %6720 = trunc i64 %6719 to i8
  store i8 %6720, i8* %33, align 1
  %6721 = lshr i64 %6701, 63
  %6722 = lshr i64 %6684, 57
  %6723 = and i64 %6722, 1
  %6724 = xor i64 %6719, %6721
  %6725 = xor i64 %6719, %6723
  %6726 = add nuw nsw i64 %6724, %6725
  %6727 = icmp eq i64 %6726, 2
  %6728 = zext i1 %6727 to i8
  store i8 %6728, i8* %39, align 1
  %6729 = sext i32 %6679 to i64
  %6730 = lshr i64 %6729, 32
  store i64 %6730, i64* %607, align 8
  %6731 = inttoptr i64 %6702 to i32*
  %6732 = add i64 %6615, 43
  store i64 %6732, i64* %3, align 8
  %6733 = zext i32 %6679 to i64
  %6734 = load i32, i32* %6731, align 4
  %6735 = sext i32 %6734 to i64
  %6736 = shl nuw i64 %6730, 32
  %6737 = or i64 %6736, %6733
  %6738 = sdiv i64 %6737, %6735
  %6739 = shl i64 %6738, 32
  %6740 = ashr exact i64 %6739, 32
  %6741 = icmp eq i64 %6738, %6740
  br i1 %6741, label %6744, label %6742

; <label>:6742:                                   ; preds = %routine_shll__cl___eax.exit3139
  %6743 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6732, %struct.Memory* %6451)
  %.pre337 = load i64, i64* %RBP.i, align 8
  %.pre338 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %.pre339 = load i64, i64* %3, align 8
  br label %routine_idivl___rsi_.exit

; <label>:6744:                                   ; preds = %routine_shll__cl___eax.exit3139
  %6745 = srem i64 %6737, %6735
  %6746 = and i64 %6738, 4294967295
  store i64 %6746, i64* %RAX.i1862, align 8
  %6747 = and i64 %6745, 4294967295
  store i64 %6747, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6748 = trunc i64 %6738 to i32
  br label %routine_idivl___rsi_.exit

routine_idivl___rsi_.exit:                        ; preds = %6744, %6742
  %6749 = phi i64 [ %.pre339, %6742 ], [ %6732, %6744 ]
  %6750 = phi i32 [ %.pre338, %6742 ], [ %6748, %6744 ]
  %6751 = phi i64 [ %.pre337, %6742 ], [ %6613, %6744 ]
  %6752 = phi %struct.Memory* [ %6743, %6742 ], [ %6451, %6744 ]
  %6753 = add i64 %6751, -508
  %6754 = add i64 %6749, 6
  store i64 %6754, i64* %3, align 8
  %6755 = inttoptr i64 %6753 to i32*
  store i32 %6750, i32* %6755, align 4
  %6756 = load i64, i64* %RBP.i, align 8
  %6757 = add i64 %6756, -48
  %6758 = load i64, i64* %3, align 8
  %6759 = add i64 %6758, 4
  store i64 %6759, i64* %3, align 8
  %6760 = inttoptr i64 %6757 to i32*
  %6761 = load i32, i32* %6760, align 4
  %6762 = sext i32 %6761 to i64
  store i64 %6762, i64* %RSI.i2426, align 8
  %6763 = shl nsw i64 %6762, 2
  %6764 = add i64 %6756, -96
  %6765 = add i64 %6764, %6763
  %6766 = add i64 %6758, 8
  store i64 %6766, i64* %3, align 8
  %6767 = inttoptr i64 %6765 to i32*
  %6768 = load i32, i32* %6767, align 4
  %6769 = zext i32 %6768 to i64
  store i64 %6769, i64* %RAX.i1862, align 8
  %6770 = add i64 %6756, -508
  %6771 = add i64 %6758, 14
  store i64 %6771, i64* %3, align 8
  %6772 = inttoptr i64 %6770 to i32*
  %6773 = load i32, i32* %6772, align 4
  %6774 = zext i32 %6773 to i64
  store i64 %6774, i64* %RDI.i3890, align 8
  %6775 = add i64 %6758, 18
  store i64 %6775, i64* %3, align 8
  %6776 = load i32, i32* %6760, align 4
  %6777 = sext i32 %6776 to i64
  store i64 %6777, i64* %RSI.i2426, align 8
  %6778 = shl nsw i64 %6777, 2
  %6779 = add i64 %6756, -432
  %6780 = add i64 %6779, %6778
  %6781 = add i64 %6758, 25
  store i64 %6781, i64* %3, align 8
  %6782 = inttoptr i64 %6780 to i32*
  %6783 = load i32, i32* %6782, align 4
  %6784 = zext i32 %6783 to i64
  store i64 %6784, i64* %RSI.i2426, align 8
  %6785 = add i64 %6756, -620
  %6786 = add i64 %6758, 31
  store i64 %6786, i64* %3, align 8
  %6787 = inttoptr i64 %6785 to i32*
  store i32 %6768, i32* %6787, align 4
  %6788 = load i64, i64* %3, align 8
  %6789 = add i64 %6788, 422227
  %6790 = add i64 %6788, 5
  %6791 = load i64, i64* %6, align 8
  %6792 = add i64 %6791, -8
  %6793 = inttoptr i64 %6792 to i64*
  store i64 %6790, i64* %6793, align 8
  store i64 %6792, i64* %6, align 8
  store i64 %6789, i64* %3, align 8
  %call2_40dffd = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %6789, %struct.Memory* %6752)
  %6794 = load i64, i64* %RBP.i, align 8
  %6795 = add i64 %6794, -620
  %6796 = load i64, i64* %3, align 8
  %6797 = add i64 %6796, 6
  store i64 %6797, i64* %3, align 8
  %6798 = inttoptr i64 %6795 to i32*
  %6799 = load i32, i32* %6798, align 4
  %6800 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %6801 = sub i32 %6799, %6800
  %6802 = zext i32 %6801 to i64
  store i64 %6802, i64* %RSI.i2426, align 8
  %6803 = icmp ult i32 %6799, %6800
  %6804 = zext i1 %6803 to i8
  store i8 %6804, i8* %14, align 1
  %6805 = and i32 %6801, 255
  %6806 = tail call i32 @llvm.ctpop.i32(i32 %6805)
  %6807 = trunc i32 %6806 to i8
  %6808 = and i8 %6807, 1
  %6809 = xor i8 %6808, 1
  store i8 %6809, i8* %21, align 1
  %6810 = xor i32 %6800, %6799
  %6811 = xor i32 %6810, %6801
  %6812 = lshr i32 %6811, 4
  %6813 = trunc i32 %6812 to i8
  %6814 = and i8 %6813, 1
  store i8 %6814, i8* %27, align 1
  %6815 = icmp eq i32 %6801, 0
  %6816 = zext i1 %6815 to i8
  store i8 %6816, i8* %30, align 1
  %6817 = lshr i32 %6801, 31
  %6818 = trunc i32 %6817 to i8
  store i8 %6818, i8* %33, align 1
  %6819 = lshr i32 %6799, 31
  %6820 = lshr i32 %6800, 31
  %6821 = xor i32 %6820, %6819
  %6822 = xor i32 %6817, %6819
  %6823 = add nuw nsw i32 %6822, %6821
  %6824 = icmp eq i32 %6823, 2
  %6825 = zext i1 %6824 to i8
  store i8 %6825, i8* %39, align 1
  %6826 = add i64 %6794, -508
  %6827 = add i64 %6796, 14
  store i64 %6827, i64* %3, align 8
  %6828 = inttoptr i64 %6826 to i32*
  store i32 %6801, i32* %6828, align 4
  %6829 = load i64, i64* %RBP.i, align 8
  %6830 = add i64 %6829, -508
  %6831 = load i64, i64* %3, align 8
  %6832 = add i64 %6831, 6
  store i64 %6832, i64* %3, align 8
  %6833 = inttoptr i64 %6830 to i32*
  %6834 = load i32, i32* %6833, align 4
  %6835 = zext i32 %6834 to i64
  store i64 %6835, i64* %RDI.i3890, align 8
  %6836 = add i64 %6831, -53264
  %6837 = add i64 %6831, 11
  %6838 = load i64, i64* %6, align 8
  %6839 = add i64 %6838, -8
  %6840 = inttoptr i64 %6839 to i64*
  store i64 %6837, i64* %6840, align 8
  store i64 %6839, i64* %6, align 8
  store i64 %6836, i64* %3, align 8
  %6841 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %call2_40dffd)
  %6842 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R8.i3081, align 8
  %6843 = load i64, i64* %RBP.i, align 8
  %6844 = add i64 %6843, -448
  %6845 = add i64 %6842, 17
  store i64 %6845, i64* %3, align 8
  %6846 = inttoptr i64 %6844 to i32*
  %6847 = load i32, i32* %6846, align 4
  %6848 = sext i32 %6847 to i64
  %6849 = shl nsw i64 %6848, 6
  store i64 %6849, i64* %R9.i3079, align 8
  %6850 = add i64 %6849, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %6850, i64* %R8.i3081, align 8
  %6851 = icmp ult i64 %6850, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %6852 = icmp ult i64 %6850, %6849
  %6853 = or i1 %6851, %6852
  %6854 = zext i1 %6853 to i8
  store i8 %6854, i8* %14, align 1
  %6855 = trunc i64 %6850 to i32
  %6856 = and i32 %6855, 248
  %6857 = tail call i32 @llvm.ctpop.i32(i32 %6856)
  %6858 = trunc i32 %6857 to i8
  %6859 = and i8 %6858, 1
  %6860 = xor i8 %6859, 1
  store i8 %6860, i8* %21, align 1
  %6861 = xor i64 %6850, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %6862 = lshr i64 %6861, 4
  %6863 = trunc i64 %6862 to i8
  %6864 = and i8 %6863, 1
  store i8 %6864, i8* %27, align 1
  %6865 = icmp eq i64 %6850, 0
  %6866 = zext i1 %6865 to i8
  store i8 %6866, i8* %30, align 1
  %6867 = lshr i64 %6850, 63
  %6868 = trunc i64 %6867 to i8
  store i8 %6868, i8* %33, align 1
  %6869 = lshr i64 %6848, 57
  %6870 = and i64 %6869, 1
  %6871 = xor i64 %6867, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %6872 = xor i64 %6867, %6870
  %6873 = add nuw nsw i64 %6871, %6872
  %6874 = icmp eq i64 %6873, 2
  %6875 = zext i1 %6874 to i8
  store i8 %6875, i8* %39, align 1
  %6876 = load i64, i64* %RAX.i1862, align 8
  %6877 = inttoptr i64 %6850 to i32*
  %6878 = add i64 %6842, 28
  store i64 %6878, i64* %3, align 8
  %6879 = load i32, i32* %6877, align 8
  %6880 = shl i64 %6876, 32
  %6881 = ashr exact i64 %6880, 32
  %6882 = sext i32 %6879 to i64
  %6883 = mul nsw i64 %6882, %6881
  %6884 = trunc i64 %6883 to i32
  %6885 = and i64 %6883, 4294967295
  store i64 %6885, i64* %RAX.i1862, align 8
  %6886 = shl i64 %6883, 32
  %6887 = ashr exact i64 %6886, 32
  %6888 = icmp ne i64 %6887, %6883
  %6889 = zext i1 %6888 to i8
  store i8 %6889, i8* %14, align 1
  %6890 = and i32 %6884, 255
  %6891 = tail call i32 @llvm.ctpop.i32(i32 %6890)
  %6892 = trunc i32 %6891 to i8
  %6893 = and i8 %6892, 1
  %6894 = xor i8 %6893, 1
  store i8 %6894, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %6895 = lshr i32 %6884, 31
  %6896 = trunc i32 %6895 to i8
  store i8 %6896, i8* %33, align 1
  store i8 %6889, i8* %39, align 1
  %6897 = add i64 %6843, -52
  %6898 = add i64 %6842, 31
  store i64 %6898, i64* %3, align 8
  %6899 = inttoptr i64 %6897 to i32*
  %6900 = load i32, i32* %6899, align 4
  %6901 = shl i32 %6900, 1
  %6902 = zext i32 %6901 to i64
  store i64 %6902, i64* %RSI.i2426, align 8
  %6903 = trunc i64 %6883 to i32
  %6904 = add i32 %6901, %6903
  %6905 = zext i32 %6904 to i64
  store i64 %6905, i64* %RAX.i1862, align 8
  %6906 = icmp ult i32 %6904, %6903
  %6907 = icmp ult i32 %6904, %6901
  %6908 = or i1 %6906, %6907
  %6909 = zext i1 %6908 to i8
  store i8 %6909, i8* %14, align 1
  %6910 = and i32 %6904, 255
  %6911 = tail call i32 @llvm.ctpop.i32(i32 %6910)
  %6912 = trunc i32 %6911 to i8
  %6913 = and i8 %6912, 1
  %6914 = xor i8 %6913, 1
  store i8 %6914, i8* %21, align 1
  %6915 = xor i64 %6902, %6883
  %6916 = trunc i64 %6915 to i32
  %6917 = xor i32 %6916, %6904
  %6918 = lshr i32 %6917, 4
  %6919 = trunc i32 %6918 to i8
  %6920 = and i8 %6919, 1
  store i8 %6920, i8* %27, align 1
  %6921 = icmp eq i32 %6904, 0
  %6922 = zext i1 %6921 to i8
  store i8 %6922, i8* %30, align 1
  %6923 = lshr i32 %6904, 31
  %6924 = trunc i32 %6923 to i8
  store i8 %6924, i8* %33, align 1
  %6925 = lshr i32 %6903, 31
  %6926 = lshr i32 %6900, 30
  %6927 = and i32 %6926, 1
  %6928 = xor i32 %6923, %6925
  %6929 = xor i32 %6923, %6927
  %6930 = add nuw nsw i32 %6928, %6929
  %6931 = icmp eq i32 %6930, 2
  %6932 = zext i1 %6931 to i8
  store i8 %6932, i8* %39, align 1
  %6933 = load i64, i64* %RBP.i, align 8
  %6934 = add i64 %6933, -452
  %6935 = add i64 %6842, 41
  store i64 %6935, i64* %3, align 8
  %6936 = inttoptr i64 %6934 to i32*
  %6937 = load i32, i32* %6936, align 4
  %6938 = add i32 %6937, 1
  %6939 = zext i32 %6938 to i64
  store i64 %6939, i64* %RSI.i2426, align 8
  %6940 = icmp eq i32 %6937, -1
  %6941 = icmp eq i32 %6938, 0
  %6942 = or i1 %6940, %6941
  %6943 = zext i1 %6942 to i8
  store i8 %6943, i8* %14, align 1
  %6944 = and i32 %6938, 255
  %6945 = tail call i32 @llvm.ctpop.i32(i32 %6944)
  %6946 = trunc i32 %6945 to i8
  %6947 = and i8 %6946, 1
  %6948 = xor i8 %6947, 1
  store i8 %6948, i8* %21, align 1
  %6949 = xor i32 %6938, %6937
  %6950 = lshr i32 %6949, 4
  %6951 = trunc i32 %6950 to i8
  %6952 = and i8 %6951, 1
  store i8 %6952, i8* %27, align 1
  %6953 = zext i1 %6941 to i8
  store i8 %6953, i8* %30, align 1
  %6954 = lshr i32 %6938, 31
  %6955 = trunc i32 %6954 to i8
  store i8 %6955, i8* %33, align 1
  %6956 = lshr i32 %6937, 31
  %6957 = xor i32 %6954, %6956
  %6958 = add nuw nsw i32 %6957, %6954
  %6959 = icmp eq i32 %6958, 2
  %6960 = zext i1 %6959 to i8
  store i8 %6960, i8* %39, align 1
  store i64 %6939, i64* %RCX.i2028, align 8
  %6961 = add i64 %6842, 48
  store i64 %6961, i64* %3, align 8
  %6962 = trunc i32 %6938 to i5
  switch i5 %6962, label %6966 [
    i5 0, label %routine_sarl__cl___eax.exit3052
    i5 1, label %6963
  ]

; <label>:6963:                                   ; preds = %routine_idivl___rsi_.exit
  %6964 = shl nuw i64 %6905, 32
  %6965 = ashr i64 %6964, 33
  br label %6973

; <label>:6966:                                   ; preds = %routine_idivl___rsi_.exit
  %6967 = and i32 %6938, 31
  %6968 = zext i32 %6967 to i64
  %6969 = add nsw i64 %6968, -1
  %6970 = sext i32 %6904 to i64
  %6971 = ashr i64 %6970, %6969
  %6972 = lshr i64 %6971, 1
  br label %6973

; <label>:6973:                                   ; preds = %6966, %6963
  %6974 = phi i64 [ %6972, %6966 ], [ %6965, %6963 ]
  %6975 = phi i64 [ %6971, %6966 ], [ %6905, %6963 ]
  %6976 = trunc i64 %6975 to i8
  %6977 = and i8 %6976, 1
  %6978 = trunc i64 %6974 to i32
  %6979 = and i64 %6974, 4294967295
  store i64 %6979, i64* %RAX.i1862, align 8
  store i8 %6977, i8* %14, align 1
  %6980 = and i32 %6978, 255
  %6981 = tail call i32 @llvm.ctpop.i32(i32 %6980)
  %6982 = trunc i32 %6981 to i8
  %6983 = and i8 %6982, 1
  %6984 = xor i8 %6983, 1
  store i8 %6984, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6985 = icmp eq i32 %6978, 0
  %6986 = zext i1 %6985 to i8
  store i8 %6986, i8* %30, align 1
  %6987 = lshr i32 %6978, 31
  %6988 = trunc i32 %6987 to i8
  store i8 %6988, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6989 = trunc i64 %6974 to i32
  br label %routine_sarl__cl___eax.exit3052

routine_sarl__cl___eax.exit3052:                  ; preds = %6973, %routine_idivl___rsi_.exit
  %6990 = phi i32 [ %6989, %6973 ], [ %6904, %routine_idivl___rsi_.exit ]
  %6991 = add i64 %6933, -516
  %6992 = add i64 %6842, 54
  store i64 %6992, i64* %3, align 8
  %6993 = inttoptr i64 %6991 to i32*
  store i32 %6990, i32* %6993, align 4
  %6994 = load i64, i64* %RBP.i, align 8
  %6995 = add i64 %6994, -48
  %6996 = load i64, i64* %3, align 8
  %6997 = add i64 %6996, 4
  store i64 %6997, i64* %3, align 8
  %6998 = inttoptr i64 %6995 to i32*
  %6999 = load i32, i32* %6998, align 4
  %7000 = sext i32 %6999 to i64
  store i64 %7000, i64* %R8.i3081, align 8
  %7001 = shl nsw i64 %7000, 2
  %7002 = add i64 %6994, -96
  %7003 = add i64 %7002, %7001
  %7004 = add i64 %6996, 9
  store i64 %7004, i64* %3, align 8
  %7005 = inttoptr i64 %7003 to i32*
  %7006 = load i32, i32* %7005, align 4
  %7007 = zext i32 %7006 to i64
  store i64 %7007, i64* %RAX.i1862, align 8
  %7008 = add i64 %6996, 13
  store i64 %7008, i64* %3, align 8
  %7009 = load i32, i32* %6998, align 4
  %7010 = sext i32 %7009 to i64
  store i64 %7010, i64* %R8.i3081, align 8
  %7011 = shl nsw i64 %7010, 2
  %7012 = add nsw i64 %7011, -432
  %7013 = add i64 %7012, %6994
  %7014 = add i64 %6996, 21
  store i64 %7014, i64* %3, align 8
  %7015 = inttoptr i64 %7013 to i32*
  %7016 = load i32, i32* %7015, align 4
  %7017 = sub i32 %7006, %7016
  %7018 = zext i32 %7017 to i64
  store i64 %7018, i64* %RAX.i1862, align 8
  %7019 = icmp ult i32 %7006, %7016
  %7020 = zext i1 %7019 to i8
  store i8 %7020, i8* %14, align 1
  %7021 = and i32 %7017, 255
  %7022 = tail call i32 @llvm.ctpop.i32(i32 %7021)
  %7023 = trunc i32 %7022 to i8
  %7024 = and i8 %7023, 1
  %7025 = xor i8 %7024, 1
  store i8 %7025, i8* %21, align 1
  %7026 = xor i32 %7016, %7006
  %7027 = xor i32 %7026, %7017
  %7028 = lshr i32 %7027, 4
  %7029 = trunc i32 %7028 to i8
  %7030 = and i8 %7029, 1
  store i8 %7030, i8* %27, align 1
  %7031 = icmp eq i32 %7017, 0
  %7032 = zext i1 %7031 to i8
  store i8 %7032, i8* %30, align 1
  %7033 = lshr i32 %7017, 31
  %7034 = trunc i32 %7033 to i8
  store i8 %7034, i8* %33, align 1
  %7035 = lshr i32 %7006, 31
  %7036 = lshr i32 %7016, 31
  %7037 = xor i32 %7036, %7035
  %7038 = xor i32 %7033, %7035
  %7039 = add nuw nsw i32 %7038, %7037
  %7040 = icmp eq i32 %7039, 2
  %7041 = zext i1 %7040 to i8
  store i8 %7041, i8* %39, align 1
  %7042 = add i64 %6994, -512
  %7043 = add i64 %6996, 27
  store i64 %7043, i64* %3, align 8
  %7044 = inttoptr i64 %7042 to i32*
  store i32 %7017, i32* %7044, align 4
  %7045 = load i64, i64* %RBP.i, align 8
  %7046 = add i64 %7045, -512
  %7047 = load i64, i64* %3, align 8
  %7048 = add i64 %7047, 6
  store i64 %7048, i64* %3, align 8
  %7049 = inttoptr i64 %7046 to i32*
  %7050 = load i32, i32* %7049, align 4
  %7051 = zext i32 %7050 to i64
  store i64 %7051, i64* %RDI.i3890, align 8
  %7052 = add i64 %7047, -53357
  %7053 = add i64 %7047, 11
  %7054 = load i64, i64* %6, align 8
  %7055 = add i64 %7054, -8
  %7056 = inttoptr i64 %7055 to i64*
  store i64 %7053, i64* %7056, align 8
  store i64 %7055, i64* %6, align 8
  store i64 %7052, i64* %3, align 8
  %7057 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %6841)
  %7058 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R8.i3081, align 8
  %7059 = load i64, i64* %RBP.i, align 8
  %7060 = add i64 %7059, -448
  %7061 = add i64 %7058, 17
  store i64 %7061, i64* %3, align 8
  %7062 = inttoptr i64 %7060 to i32*
  %7063 = load i32, i32* %7062, align 4
  %7064 = sext i32 %7063 to i64
  %7065 = shl nsw i64 %7064, 6
  store i64 %7065, i64* %R9.i3079, align 8
  %7066 = add i64 %7065, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %7066, i64* %R8.i3081, align 8
  %7067 = icmp ult i64 %7066, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %7068 = icmp ult i64 %7066, %7065
  %7069 = or i1 %7067, %7068
  %7070 = zext i1 %7069 to i8
  store i8 %7070, i8* %14, align 1
  %7071 = trunc i64 %7066 to i32
  %7072 = and i32 %7071, 248
  %7073 = tail call i32 @llvm.ctpop.i32(i32 %7072)
  %7074 = trunc i32 %7073 to i8
  %7075 = and i8 %7074, 1
  %7076 = xor i8 %7075, 1
  store i8 %7076, i8* %21, align 1
  %7077 = xor i64 %7066, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %7078 = lshr i64 %7077, 4
  %7079 = trunc i64 %7078 to i8
  %7080 = and i8 %7079, 1
  store i8 %7080, i8* %27, align 1
  %7081 = icmp eq i64 %7066, 0
  %7082 = zext i1 %7081 to i8
  store i8 %7082, i8* %30, align 1
  %7083 = lshr i64 %7066, 63
  %7084 = trunc i64 %7083 to i8
  store i8 %7084, i8* %33, align 1
  %7085 = lshr i64 %7064, 57
  %7086 = and i64 %7085, 1
  %7087 = xor i64 %7083, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %7088 = xor i64 %7083, %7086
  %7089 = add nuw nsw i64 %7087, %7088
  %7090 = icmp eq i64 %7089, 2
  %7091 = zext i1 %7090 to i8
  store i8 %7091, i8* %39, align 1
  %7092 = load i64, i64* %RAX.i1862, align 8
  %7093 = inttoptr i64 %7066 to i32*
  %7094 = add i64 %7058, 28
  store i64 %7094, i64* %3, align 8
  %7095 = load i32, i32* %7093, align 8
  %7096 = shl i64 %7092, 32
  %7097 = ashr exact i64 %7096, 32
  %7098 = sext i32 %7095 to i64
  %7099 = mul nsw i64 %7098, %7097
  %7100 = trunc i64 %7099 to i32
  %7101 = and i64 %7099, 4294967295
  store i64 %7101, i64* %RAX.i1862, align 8
  %7102 = shl i64 %7099, 32
  %7103 = ashr exact i64 %7102, 32
  %7104 = icmp ne i64 %7103, %7099
  %7105 = zext i1 %7104 to i8
  store i8 %7105, i8* %14, align 1
  %7106 = and i32 %7100, 255
  %7107 = tail call i32 @llvm.ctpop.i32(i32 %7106)
  %7108 = trunc i32 %7107 to i8
  %7109 = and i8 %7108, 1
  %7110 = xor i8 %7109, 1
  store i8 %7110, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %7111 = lshr i32 %7100, 31
  %7112 = trunc i32 %7111 to i8
  store i8 %7112, i8* %33, align 1
  store i8 %7105, i8* %39, align 1
  %7113 = add i64 %7059, -52
  %7114 = add i64 %7058, 31
  store i64 %7114, i64* %3, align 8
  %7115 = inttoptr i64 %7113 to i32*
  %7116 = load i32, i32* %7115, align 4
  %7117 = shl i32 %7116, 1
  %7118 = zext i32 %7117 to i64
  store i64 %7118, i64* %RSI.i2426, align 8
  %7119 = trunc i64 %7099 to i32
  %7120 = add i32 %7117, %7119
  %7121 = zext i32 %7120 to i64
  store i64 %7121, i64* %RAX.i1862, align 8
  %7122 = icmp ult i32 %7120, %7119
  %7123 = icmp ult i32 %7120, %7117
  %7124 = or i1 %7122, %7123
  %7125 = zext i1 %7124 to i8
  store i8 %7125, i8* %14, align 1
  %7126 = and i32 %7120, 255
  %7127 = tail call i32 @llvm.ctpop.i32(i32 %7126)
  %7128 = trunc i32 %7127 to i8
  %7129 = and i8 %7128, 1
  %7130 = xor i8 %7129, 1
  store i8 %7130, i8* %21, align 1
  %7131 = xor i64 %7118, %7099
  %7132 = trunc i64 %7131 to i32
  %7133 = xor i32 %7132, %7120
  %7134 = lshr i32 %7133, 4
  %7135 = trunc i32 %7134 to i8
  %7136 = and i8 %7135, 1
  store i8 %7136, i8* %27, align 1
  %7137 = icmp eq i32 %7120, 0
  %7138 = zext i1 %7137 to i8
  store i8 %7138, i8* %30, align 1
  %7139 = lshr i32 %7120, 31
  %7140 = trunc i32 %7139 to i8
  store i8 %7140, i8* %33, align 1
  %7141 = lshr i32 %7119, 31
  %7142 = lshr i32 %7116, 30
  %7143 = and i32 %7142, 1
  %7144 = xor i32 %7139, %7141
  %7145 = xor i32 %7139, %7143
  %7146 = add nuw nsw i32 %7144, %7145
  %7147 = icmp eq i32 %7146, 2
  %7148 = zext i1 %7147 to i8
  store i8 %7148, i8* %39, align 1
  %7149 = load i64, i64* %RBP.i, align 8
  %7150 = add i64 %7149, -452
  %7151 = add i64 %7058, 41
  store i64 %7151, i64* %3, align 8
  %7152 = inttoptr i64 %7150 to i32*
  %7153 = load i32, i32* %7152, align 4
  %7154 = add i32 %7153, 1
  %7155 = zext i32 %7154 to i64
  store i64 %7155, i64* %RSI.i2426, align 8
  %7156 = icmp eq i32 %7153, -1
  %7157 = icmp eq i32 %7154, 0
  %7158 = or i1 %7156, %7157
  %7159 = zext i1 %7158 to i8
  store i8 %7159, i8* %14, align 1
  %7160 = and i32 %7154, 255
  %7161 = tail call i32 @llvm.ctpop.i32(i32 %7160)
  %7162 = trunc i32 %7161 to i8
  %7163 = and i8 %7162, 1
  %7164 = xor i8 %7163, 1
  store i8 %7164, i8* %21, align 1
  %7165 = xor i32 %7154, %7153
  %7166 = lshr i32 %7165, 4
  %7167 = trunc i32 %7166 to i8
  %7168 = and i8 %7167, 1
  store i8 %7168, i8* %27, align 1
  %7169 = zext i1 %7157 to i8
  store i8 %7169, i8* %30, align 1
  %7170 = lshr i32 %7154, 31
  %7171 = trunc i32 %7170 to i8
  store i8 %7171, i8* %33, align 1
  %7172 = lshr i32 %7153, 31
  %7173 = xor i32 %7170, %7172
  %7174 = add nuw nsw i32 %7173, %7170
  %7175 = icmp eq i32 %7174, 2
  %7176 = zext i1 %7175 to i8
  store i8 %7176, i8* %39, align 1
  store i64 %7155, i64* %RCX.i2028, align 8
  %7177 = add i64 %7058, 48
  store i64 %7177, i64* %3, align 8
  %7178 = trunc i32 %7154 to i5
  switch i5 %7178, label %7182 [
    i5 0, label %routine_sarl__cl___eax.exit2992
    i5 1, label %7179
  ]

; <label>:7179:                                   ; preds = %routine_sarl__cl___eax.exit3052
  %7180 = shl nuw i64 %7121, 32
  %7181 = ashr i64 %7180, 33
  br label %7189

; <label>:7182:                                   ; preds = %routine_sarl__cl___eax.exit3052
  %7183 = and i32 %7154, 31
  %7184 = zext i32 %7183 to i64
  %7185 = add nsw i64 %7184, -1
  %7186 = sext i32 %7120 to i64
  %7187 = ashr i64 %7186, %7185
  %7188 = lshr i64 %7187, 1
  br label %7189

; <label>:7189:                                   ; preds = %7182, %7179
  %7190 = phi i64 [ %7188, %7182 ], [ %7181, %7179 ]
  %7191 = phi i64 [ %7187, %7182 ], [ %7121, %7179 ]
  %7192 = trunc i64 %7191 to i8
  %7193 = and i8 %7192, 1
  %7194 = trunc i64 %7190 to i32
  %7195 = and i64 %7190, 4294967295
  store i64 %7195, i64* %RAX.i1862, align 8
  store i8 %7193, i8* %14, align 1
  %7196 = and i32 %7194, 255
  %7197 = tail call i32 @llvm.ctpop.i32(i32 %7196)
  %7198 = trunc i32 %7197 to i8
  %7199 = and i8 %7198, 1
  %7200 = xor i8 %7199, 1
  store i8 %7200, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7201 = icmp eq i32 %7194, 0
  %7202 = zext i1 %7201 to i8
  store i8 %7202, i8* %30, align 1
  %7203 = lshr i32 %7194, 31
  %7204 = trunc i32 %7203 to i8
  store i8 %7204, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7205 = trunc i64 %7190 to i32
  br label %routine_sarl__cl___eax.exit2992

routine_sarl__cl___eax.exit2992:                  ; preds = %7189, %routine_sarl__cl___eax.exit3052
  %7206 = phi i32 [ %7205, %7189 ], [ %7120, %routine_sarl__cl___eax.exit3052 ]
  %7207 = add i64 %7149, -520
  %7208 = add i64 %7058, 54
  store i64 %7208, i64* %3, align 8
  %7209 = inttoptr i64 %7207 to i32*
  store i32 %7206, i32* %7209, align 4
  %7210 = load i64, i64* %RBP.i, align 8
  %7211 = add i64 %7210, -516
  %7212 = load i64, i64* %3, align 8
  %7213 = add i64 %7212, 6
  store i64 %7213, i64* %3, align 8
  %7214 = inttoptr i64 %7211 to i32*
  %7215 = load i32, i32* %7214, align 4
  %7216 = zext i32 %7215 to i64
  store i64 %7216, i64* %RAX.i1862, align 8
  %7217 = add i64 %7210, -520
  %7218 = add i64 %7212, 12
  store i64 %7218, i64* %3, align 8
  %7219 = inttoptr i64 %7217 to i32*
  %7220 = load i32, i32* %7219, align 4
  %7221 = sub i32 %7215, %7220
  %7222 = icmp ult i32 %7215, %7220
  %7223 = zext i1 %7222 to i8
  store i8 %7223, i8* %14, align 1
  %7224 = and i32 %7221, 255
  %7225 = tail call i32 @llvm.ctpop.i32(i32 %7224)
  %7226 = trunc i32 %7225 to i8
  %7227 = and i8 %7226, 1
  %7228 = xor i8 %7227, 1
  store i8 %7228, i8* %21, align 1
  %7229 = xor i32 %7220, %7215
  %7230 = xor i32 %7229, %7221
  %7231 = lshr i32 %7230, 4
  %7232 = trunc i32 %7231 to i8
  %7233 = and i8 %7232, 1
  store i8 %7233, i8* %27, align 1
  %7234 = icmp eq i32 %7221, 0
  %7235 = zext i1 %7234 to i8
  store i8 %7235, i8* %30, align 1
  %7236 = lshr i32 %7221, 31
  %7237 = trunc i32 %7236 to i8
  store i8 %7237, i8* %33, align 1
  %7238 = lshr i32 %7215, 31
  %7239 = lshr i32 %7220, 31
  %7240 = xor i32 %7239, %7238
  %7241 = xor i32 %7236, %7238
  %7242 = add nuw nsw i32 %7241, %7240
  %7243 = icmp eq i32 %7242, 2
  %7244 = zext i1 %7243 to i8
  store i8 %7244, i8* %39, align 1
  %.v407 = select i1 %7234, i64 673, i64 18
  %7245 = add i64 %7212, %.v407
  store i64 %7245, i64* %3, align 8
  br i1 %7234, label %block_.L_40e350, label %block_40e0c1

block_40e0c1:                                     ; preds = %routine_sarl__cl___eax.exit2992
  %7246 = add i64 %7245, 7
  store i64 %7246, i64* %3, align 8
  %7247 = load i32, i32* %7214, align 4
  store i8 0, i8* %14, align 1
  %7248 = and i32 %7247, 255
  %7249 = tail call i32 @llvm.ctpop.i32(i32 %7248)
  %7250 = trunc i32 %7249 to i8
  %7251 = and i8 %7250, 1
  %7252 = xor i8 %7251, 1
  store i8 %7252, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7253 = icmp eq i32 %7247, 0
  %7254 = zext i1 %7253 to i8
  store i8 %7254, i8* %30, align 1
  %7255 = lshr i32 %7247, 31
  %7256 = trunc i32 %7255 to i8
  store i8 %7256, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v408 = select i1 %7253, i64 655, i64 13
  %7257 = add i64 %7245, %.v408
  store i64 %7257, i64* %3, align 8
  br i1 %7253, label %block_.L_40e350, label %block_40e0ce

block_40e0ce:                                     ; preds = %block_40e0c1
  %7258 = add i64 %7257, 7
  store i64 %7258, i64* %3, align 8
  %7259 = load i32, i32* %7219, align 4
  store i8 0, i8* %14, align 1
  %7260 = and i32 %7259, 255
  %7261 = tail call i32 @llvm.ctpop.i32(i32 %7260)
  %7262 = trunc i32 %7261 to i8
  %7263 = and i8 %7262, 1
  %7264 = xor i8 %7263, 1
  store i8 %7264, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7265 = icmp eq i32 %7259, 0
  %7266 = zext i1 %7265 to i8
  store i8 %7266, i8* %30, align 1
  %7267 = lshr i32 %7259, 31
  %7268 = trunc i32 %7267 to i8
  store i8 %7268, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v409 = select i1 %7265, i64 642, i64 13
  %7269 = add i64 %7257, %.v409
  store i64 %7269, i64* %3, align 8
  br i1 %7265, label %block_.L_40e350, label %block_40e0db

block_40e0db:                                     ; preds = %block_40e0ce
  %7270 = add i64 %7210, -48
  %7271 = add i64 %7269, 4
  store i64 %7271, i64* %3, align 8
  %7272 = inttoptr i64 %7270 to i32*
  %7273 = load i32, i32* %7272, align 4
  %7274 = sext i32 %7273 to i64
  store i64 %7274, i64* %RAX.i1862, align 8
  %7275 = shl nsw i64 %7274, 2
  %7276 = add i64 %7210, -96
  %7277 = add i64 %7276, %7275
  %7278 = add i64 %7269, 8
  store i64 %7278, i64* %3, align 8
  %7279 = inttoptr i64 %7277 to i32*
  %7280 = load i32, i32* %7279, align 4
  %7281 = zext i32 %7280 to i64
  store i64 %7281, i64* %RCX.i2028, align 8
  %7282 = add i64 %7269, 14
  store i64 %7282, i64* %3, align 8
  %7283 = load i32, i32* %7214, align 4
  %7284 = zext i32 %7283 to i64
  store i64 %7284, i64* %RDI.i3890, align 8
  %7285 = add i64 %7210, -508
  %7286 = add i64 %7269, 20
  store i64 %7286, i64* %3, align 8
  %7287 = inttoptr i64 %7285 to i32*
  %7288 = load i32, i32* %7287, align 4
  %7289 = zext i32 %7288 to i64
  store i64 %7289, i64* %RSI.i2426, align 8
  %7290 = add i64 %7210, -624
  %7291 = add i64 %7269, 26
  store i64 %7291, i64* %3, align 8
  %7292 = inttoptr i64 %7290 to i32*
  store i32 %7280, i32* %7292, align 4
  %7293 = load i64, i64* %3, align 8
  %7294 = add i64 %7293, 421979
  %7295 = add i64 %7293, 5
  %7296 = load i64, i64* %6, align 8
  %7297 = add i64 %7296, -8
  %7298 = inttoptr i64 %7297 to i64*
  store i64 %7295, i64* %7298, align 8
  store i64 %7297, i64* %6, align 8
  store i64 %7294, i64* %3, align 8
  %call2_40e0f5 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %7294, %struct.Memory* %7057)
  %7299 = load i64, i64* %RBP.i, align 8
  %7300 = add i64 %7299, -524
  %7301 = load i64, i64* %3, align 8
  store i64 %7300, i64* %RDX.i4840, align 8
  %7302 = add i64 %7299, -528
  store i64 %7302, i64* %RCX.i2028, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R8.i3081, align 8
  %7303 = add i64 %7299, -448
  %7304 = add i64 %7301, 31
  store i64 %7304, i64* %3, align 8
  %7305 = inttoptr i64 %7303 to i32*
  %7306 = load i32, i32* %7305, align 4
  %7307 = sext i32 %7306 to i64
  %7308 = shl nsw i64 %7307, 6
  store i64 %7308, i64* %R9.i3079, align 8
  %7309 = add i64 %7308, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %7309, i64* %R8.i3081, align 8
  %7310 = icmp ult i64 %7309, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %7311 = icmp ult i64 %7309, %7308
  %7312 = or i1 %7310, %7311
  %7313 = zext i1 %7312 to i8
  store i8 %7313, i8* %14, align 1
  %7314 = trunc i64 %7309 to i32
  %7315 = and i32 %7314, 248
  %7316 = tail call i32 @llvm.ctpop.i32(i32 %7315)
  %7317 = trunc i32 %7316 to i8
  %7318 = and i8 %7317, 1
  %7319 = xor i8 %7318, 1
  store i8 %7319, i8* %21, align 1
  %7320 = xor i64 %7309, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %7321 = lshr i64 %7320, 4
  %7322 = trunc i64 %7321 to i8
  %7323 = and i8 %7322, 1
  store i8 %7323, i8* %27, align 1
  %7324 = icmp eq i64 %7309, 0
  %7325 = zext i1 %7324 to i8
  store i8 %7325, i8* %30, align 1
  %7326 = lshr i64 %7309, 63
  %7327 = trunc i64 %7326 to i8
  store i8 %7327, i8* %33, align 1
  %7328 = lshr i64 %7307, 57
  %7329 = and i64 %7328, 1
  %7330 = xor i64 %7326, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %7331 = xor i64 %7326, %7329
  %7332 = add nuw nsw i64 %7330, %7331
  %7333 = icmp eq i64 %7332, 2
  %7334 = zext i1 %7333 to i8
  store i8 %7334, i8* %39, align 1
  %7335 = load i64, i64* %RAX.i1862, align 8
  %7336 = inttoptr i64 %7309 to i32*
  %7337 = add i64 %7301, 42
  store i64 %7337, i64* %3, align 8
  %7338 = load i32, i32* %7336, align 8
  %7339 = shl i64 %7335, 32
  %7340 = ashr exact i64 %7339, 32
  %7341 = sext i32 %7338 to i64
  %7342 = mul nsw i64 %7341, %7340
  %7343 = load i32, i32* bitcast (%G_0x4b2a50_type* @G_0x4b2a50 to i32*), align 8
  %7344 = shl i64 %7342, 32
  %7345 = ashr exact i64 %7344, 32
  %7346 = sext i32 %7343 to i64
  %7347 = mul nsw i64 %7346, %7345
  %7348 = trunc i64 %7347 to i32
  %7349 = and i64 %7347, 4294967295
  store i64 %7349, i64* %RAX.i1862, align 8
  %7350 = shl i64 %7347, 32
  %7351 = ashr exact i64 %7350, 32
  %7352 = icmp ne i64 %7351, %7347
  %7353 = zext i1 %7352 to i8
  store i8 %7353, i8* %14, align 1
  %7354 = and i32 %7348, 255
  %7355 = tail call i32 @llvm.ctpop.i32(i32 %7354)
  %7356 = trunc i32 %7355 to i8
  %7357 = and i8 %7356, 1
  %7358 = xor i8 %7357, 1
  store i8 %7358, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %7359 = lshr i32 %7348, 31
  %7360 = trunc i32 %7359 to i8
  store i8 %7360, i8* %33, align 1
  store i8 %7353, i8* %39, align 1
  %7361 = load i64, i64* %RBP.i, align 8
  %7362 = add i64 %7361, -444
  %7363 = add i64 %7301, 56
  store i64 %7363, i64* %3, align 8
  %7364 = inttoptr i64 %7362 to i32*
  %7365 = load i32, i32* %7364, align 4
  %7366 = zext i32 %7365 to i64
  store i64 %7366, i64* %RSI.i2426, align 8
  %7367 = add i64 %7361, -632
  %7368 = load i64, i64* %RCX.i2028, align 8
  %7369 = add i64 %7301, 63
  store i64 %7369, i64* %3, align 8
  %7370 = inttoptr i64 %7367 to i64*
  store i64 %7368, i64* %7370, align 8
  %7371 = load i32, i32* %ESI.i1753, align 4
  %7372 = zext i32 %7371 to i64
  %7373 = load i64, i64* %3, align 8
  store i64 %7372, i64* %RCX.i2028, align 8
  %7374 = load i64, i64* %RAX.i1862, align 8
  %7375 = add i64 %7373, 4
  store i64 %7375, i64* %3, align 8
  %7376 = trunc i32 %7371 to i5
  switch i5 %7376, label %7383 [
    i5 0, label %routine_shll__cl___eax.exit2925
    i5 1, label %7377
  ]

; <label>:7377:                                   ; preds = %block_40e0db
  %7378 = trunc i64 %7374 to i32
  %7379 = shl i32 %7378, 1
  %7380 = icmp slt i32 %7378, 0
  %7381 = icmp slt i32 %7379, 0
  %7382 = xor i1 %7380, %7381
  br label %7393

; <label>:7383:                                   ; preds = %block_40e0db
  %7384 = and i32 %7371, 31
  %7385 = zext i32 %7384 to i64
  %7386 = add nuw nsw i64 %7385, 4294967295
  %7387 = and i64 %7374, 4294967295
  %7388 = and i64 %7386, 4294967295
  %7389 = shl i64 %7387, %7388
  %7390 = trunc i64 %7389 to i32
  %7391 = icmp slt i32 %7390, 0
  %7392 = shl i32 %7390, 1
  br label %7393

; <label>:7393:                                   ; preds = %7383, %7377
  %7394 = phi i1 [ %7380, %7377 ], [ %7391, %7383 ]
  %7395 = phi i1 [ %7382, %7377 ], [ false, %7383 ]
  %7396 = phi i32 [ %7379, %7377 ], [ %7392, %7383 ]
  %7397 = zext i32 %7396 to i64
  store i64 %7397, i64* %RAX.i1862, align 8
  %7398 = zext i1 %7394 to i8
  store i8 %7398, i8* %14, align 1
  %7399 = and i32 %7396, 254
  %7400 = tail call i32 @llvm.ctpop.i32(i32 %7399)
  %7401 = trunc i32 %7400 to i8
  %7402 = and i8 %7401, 1
  %7403 = xor i8 %7402, 1
  store i8 %7403, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7404 = icmp eq i32 %7396, 0
  %7405 = zext i1 %7404 to i8
  store i8 %7405, i8* %30, align 1
  %7406 = lshr i32 %7396, 31
  %7407 = trunc i32 %7406 to i8
  store i8 %7407, i8* %33, align 1
  %7408 = zext i1 %7395 to i8
  store i8 %7408, i8* %39, align 1
  br label %routine_shll__cl___eax.exit2925

routine_shll__cl___eax.exit2925:                  ; preds = %7393, %block_40e0db
  %7409 = phi i64 [ %7397, %7393 ], [ %7374, %block_40e0db ]
  %7410 = shl i64 %7409, 32
  %7411 = ashr i64 %7410, 36
  %7412 = lshr i64 %7411, 1
  %7413 = trunc i64 %7411 to i8
  %7414 = and i8 %7413, 1
  %7415 = trunc i64 %7412 to i32
  %7416 = and i64 %7412, 4294967295
  store i64 %7416, i64* %RAX.i1862, align 8
  store i8 %7414, i8* %14, align 1
  %7417 = and i32 %7415, 255
  %7418 = tail call i32 @llvm.ctpop.i32(i32 %7417)
  %7419 = trunc i32 %7418 to i8
  %7420 = and i8 %7419, 1
  %7421 = xor i8 %7420, 1
  store i8 %7421, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7422 = icmp eq i32 %7415, 0
  %7423 = zext i1 %7422 to i8
  store i8 %7423, i8* %30, align 1
  %7424 = lshr i64 %7411, 32
  %7425 = trunc i64 %7424 to i8
  %7426 = and i8 %7425, 1
  store i8 %7426, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7427 = load i64, i64* %RBP.i, align 8
  %7428 = add i64 %7427, -624
  %7429 = add i64 %7373, 13
  store i64 %7429, i64* %3, align 8
  %7430 = inttoptr i64 %7428 to i32*
  %7431 = load i32, i32* %7430, align 4
  %7432 = trunc i64 %7412 to i32
  %7433 = sub i32 %7431, %7432
  %7434 = zext i32 %7433 to i64
  store i64 %7434, i64* %RSI.i2426, align 8
  %7435 = icmp ult i32 %7431, %7432
  %7436 = zext i1 %7435 to i8
  store i8 %7436, i8* %14, align 1
  %7437 = and i32 %7433, 255
  %7438 = tail call i32 @llvm.ctpop.i32(i32 %7437)
  %7439 = trunc i32 %7438 to i8
  %7440 = and i8 %7439, 1
  %7441 = xor i8 %7440, 1
  store i8 %7441, i8* %21, align 1
  %7442 = xor i32 %7432, %7431
  %7443 = xor i32 %7442, %7433
  %7444 = lshr i32 %7443, 4
  %7445 = trunc i32 %7444 to i8
  %7446 = and i8 %7445, 1
  store i8 %7446, i8* %27, align 1
  %7447 = icmp eq i32 %7433, 0
  %7448 = zext i1 %7447 to i8
  store i8 %7448, i8* %30, align 1
  %7449 = lshr i32 %7433, 31
  %7450 = trunc i32 %7449 to i8
  store i8 %7450, i8* %33, align 1
  %7451 = lshr i32 %7431, 31
  %7452 = lshr i64 %7411, 32
  %7453 = trunc i64 %7452 to i32
  %7454 = and i32 %7453, 1
  %7455 = xor i32 %7454, %7451
  %7456 = xor i32 %7449, %7451
  %7457 = add nuw nsw i32 %7456, %7455
  %7458 = icmp eq i32 %7457, 2
  %7459 = zext i1 %7458 to i8
  store i8 %7459, i8* %39, align 1
  %7460 = add i64 %7427, -48
  %7461 = add i64 %7373, 19
  store i64 %7461, i64* %3, align 8
  %7462 = inttoptr i64 %7460 to i32*
  %7463 = load i32, i32* %7462, align 4
  %7464 = sext i32 %7463 to i64
  store i64 %7464, i64* %R8.i3081, align 8
  %7465 = shl nsw i64 %7464, 2
  %7466 = add nsw i64 %7465, -432
  %7467 = add i64 %7466, %7427
  %7468 = add i64 %7373, 27
  store i64 %7468, i64* %3, align 8
  %7469 = inttoptr i64 %7467 to i32*
  %7470 = load i32, i32* %7469, align 4
  %7471 = sub i32 %7433, %7470
  %7472 = zext i32 %7471 to i64
  store i64 %7472, i64* %RSI.i2426, align 8
  %7473 = icmp ult i32 %7433, %7470
  %7474 = zext i1 %7473 to i8
  store i8 %7474, i8* %14, align 1
  %7475 = and i32 %7471, 255
  %7476 = tail call i32 @llvm.ctpop.i32(i32 %7475)
  %7477 = trunc i32 %7476 to i8
  %7478 = and i8 %7477, 1
  %7479 = xor i8 %7478, 1
  store i8 %7479, i8* %21, align 1
  %7480 = xor i32 %7470, %7433
  %7481 = xor i32 %7480, %7471
  %7482 = lshr i32 %7481, 4
  %7483 = trunc i32 %7482 to i8
  %7484 = and i8 %7483, 1
  store i8 %7484, i8* %27, align 1
  %7485 = icmp eq i32 %7471, 0
  %7486 = zext i1 %7485 to i8
  store i8 %7486, i8* %30, align 1
  %7487 = lshr i32 %7471, 31
  %7488 = trunc i32 %7487 to i8
  store i8 %7488, i8* %33, align 1
  %7489 = lshr i32 %7470, 31
  %7490 = xor i32 %7489, %7449
  %7491 = xor i32 %7487, %7449
  %7492 = add nuw nsw i32 %7491, %7490
  %7493 = icmp eq i32 %7492, 2
  %7494 = zext i1 %7493 to i8
  store i8 %7494, i8* %39, align 1
  %7495 = sitofp i32 %7471 to double
  store double %7495, double* %45, align 1
  %7496 = add i64 %7427, -536
  %7497 = add i64 %7373, 39
  store i64 %7497, i64* %3, align 8
  %7498 = inttoptr i64 %7496 to double*
  store double %7495, double* %7498, align 8
  %7499 = load i64, i64* %RBP.i, align 8
  %7500 = add i64 %7499, -516
  %7501 = load i64, i64* %3, align 8
  %7502 = add i64 %7501, 6
  store i64 %7502, i64* %3, align 8
  %7503 = inttoptr i64 %7500 to i32*
  %7504 = load i32, i32* %7503, align 4
  %7505 = zext i32 %7504 to i64
  store i64 %7505, i64* %RDI.i3890, align 8
  %7506 = add i64 %7499, -68
  %7507 = add i64 %7501, 9
  store i64 %7507, i64* %3, align 8
  %7508 = inttoptr i64 %7506 to i32*
  %7509 = load i32, i32* %7508, align 4
  %7510 = zext i32 %7509 to i64
  store i64 %7510, i64* %RSI.i2426, align 8
  %7511 = add i64 %7499, -632
  %7512 = add i64 %7501, 16
  store i64 %7512, i64* %3, align 8
  %7513 = inttoptr i64 %7511 to i64*
  %7514 = load i64, i64* %7513, align 8
  store i64 %7514, i64* %RCX.i2028, align 8
  %7515 = add i64 %7501, 650160
  %7516 = add i64 %7501, 21
  %7517 = load i64, i64* %6, align 8
  %7518 = add i64 %7517, -8
  %7519 = inttoptr i64 %7518 to i64*
  store i64 %7516, i64* %7519, align 8
  store i64 %7518, i64* %6, align 8
  store i64 %7515, i64* %3, align 8
  %call2_40e170 = tail call %struct.Memory* @sub_4acd10.levrun_linfo_c2x2(%struct.State* nonnull %0, i64 %7515, %struct.Memory* %call2_40e0f5)
  %7520 = load i64, i64* %RBP.i, align 8
  %7521 = add i64 %7520, -536
  %7522 = load i64, i64* %3, align 8
  %7523 = add i64 %7522, 8
  store i64 %7523, i64* %3, align 8
  %7524 = inttoptr i64 %7521 to i64*
  %7525 = load i64, i64* %7524, align 8
  store i64 %7525, i64* %46, align 1
  store double 0.000000e+00, double* %48, align 1
  %7526 = add i64 %7522, 16
  store i64 %7526, i64* %3, align 8
  %7527 = bitcast i64 %7525 to double
  %7528 = inttoptr i64 %7521 to double*
  %7529 = load double, double* %7528, align 8
  %7530 = fmul double %7527, %7529
  store double %7530, double* %45, align 1
  store i64 0, i64* %47, align 1
  %7531 = add i64 %7520, -552
  %7532 = add i64 %7522, 24
  store i64 %7532, i64* %3, align 8
  %7533 = inttoptr i64 %7531 to i64*
  %7534 = load i64, i64* %7533, align 8
  store i64 %7534, i64* %56, align 1
  store double 0.000000e+00, double* %58, align 1
  %7535 = add i64 %7520, -524
  %7536 = add i64 %7522, 32
  store i64 %7536, i64* %3, align 8
  %7537 = inttoptr i64 %7535 to i32*
  %7538 = load i32, i32* %7537, align 4
  %7539 = sitofp i32 %7538 to double
  store double %7539, double* %243, align 1
  %7540 = bitcast i64 %7534 to double
  %7541 = fmul double %7539, %7540
  store double %7541, double* %55, align 1
  store i64 0, i64* %57, align 1
  %7542 = fadd double %7541, %7530
  store double %7542, double* %45, align 1
  store i64 0, i64* %47, align 1
  %7543 = add i64 %7522, 48
  store i64 %7543, i64* %3, align 8
  %7544 = inttoptr i64 %7521 to double*
  store double %7542, double* %7544, align 8
  %7545 = load i64, i64* %RBP.i, align 8
  %7546 = add i64 %7545, -48
  %7547 = load i64, i64* %3, align 8
  %7548 = add i64 %7547, 4
  store i64 %7548, i64* %3, align 8
  %7549 = inttoptr i64 %7546 to i32*
  %7550 = load i32, i32* %7549, align 4
  %7551 = sext i32 %7550 to i64
  store i64 %7551, i64* %RCX.i2028, align 8
  %7552 = shl nsw i64 %7551, 2
  %7553 = add i64 %7545, -96
  %7554 = add i64 %7553, %7552
  %7555 = add i64 %7547, 8
  store i64 %7555, i64* %3, align 8
  %7556 = inttoptr i64 %7554 to i32*
  %7557 = load i32, i32* %7556, align 4
  %7558 = zext i32 %7557 to i64
  store i64 %7558, i64* %RAX.i1862, align 8
  %7559 = add i64 %7545, -520
  %7560 = add i64 %7547, 14
  store i64 %7560, i64* %3, align 8
  %7561 = inttoptr i64 %7559 to i32*
  %7562 = load i32, i32* %7561, align 4
  %7563 = zext i32 %7562 to i64
  store i64 %7563, i64* %RDI.i3890, align 8
  %7564 = add i64 %7545, -512
  %7565 = add i64 %7547, 20
  store i64 %7565, i64* %3, align 8
  %7566 = inttoptr i64 %7564 to i32*
  %7567 = load i32, i32* %7566, align 4
  %7568 = zext i32 %7567 to i64
  store i64 %7568, i64* %RSI.i2426, align 8
  %7569 = add i64 %7545, -636
  %7570 = add i64 %7547, 26
  store i64 %7570, i64* %3, align 8
  %7571 = inttoptr i64 %7569 to i32*
  store i32 %7557, i32* %7571, align 4
  %7572 = load i64, i64* %3, align 8
  %7573 = add i64 %7572, 421777
  %7574 = add i64 %7572, 5
  %7575 = load i64, i64* %6, align 8
  %7576 = add i64 %7575, -8
  %7577 = inttoptr i64 %7576 to i64*
  store i64 %7574, i64* %7577, align 8
  store i64 %7576, i64* %6, align 8
  store i64 %7573, i64* %3, align 8
  %call2_40e1bf = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %7573, %struct.Memory* %call2_40e170)
  %7578 = load i64, i64* %RBP.i, align 8
  %7579 = add i64 %7578, -524
  %7580 = load i64, i64* %3, align 8
  store i64 %7579, i64* %RDX.i4840, align 8
  %7581 = add i64 %7578, -528
  store i64 %7581, i64* %RCX.i2028, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R8.i3081, align 8
  %7582 = add i64 %7578, -448
  %7583 = add i64 %7580, 31
  store i64 %7583, i64* %3, align 8
  %7584 = inttoptr i64 %7582 to i32*
  %7585 = load i32, i32* %7584, align 4
  %7586 = sext i32 %7585 to i64
  %7587 = shl nsw i64 %7586, 6
  store i64 %7587, i64* %R9.i3079, align 8
  %7588 = add i64 %7587, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %7588, i64* %R8.i3081, align 8
  %7589 = icmp ult i64 %7588, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %7590 = icmp ult i64 %7588, %7587
  %7591 = or i1 %7589, %7590
  %7592 = zext i1 %7591 to i8
  store i8 %7592, i8* %14, align 1
  %7593 = trunc i64 %7588 to i32
  %7594 = and i32 %7593, 248
  %7595 = tail call i32 @llvm.ctpop.i32(i32 %7594)
  %7596 = trunc i32 %7595 to i8
  %7597 = and i8 %7596, 1
  %7598 = xor i8 %7597, 1
  store i8 %7598, i8* %21, align 1
  %7599 = xor i64 %7588, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %7600 = lshr i64 %7599, 4
  %7601 = trunc i64 %7600 to i8
  %7602 = and i8 %7601, 1
  store i8 %7602, i8* %27, align 1
  %7603 = icmp eq i64 %7588, 0
  %7604 = zext i1 %7603 to i8
  store i8 %7604, i8* %30, align 1
  %7605 = lshr i64 %7588, 63
  %7606 = trunc i64 %7605 to i8
  store i8 %7606, i8* %33, align 1
  %7607 = lshr i64 %7586, 57
  %7608 = and i64 %7607, 1
  %7609 = xor i64 %7605, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %7610 = xor i64 %7605, %7608
  %7611 = add nuw nsw i64 %7609, %7610
  %7612 = icmp eq i64 %7611, 2
  %7613 = zext i1 %7612 to i8
  store i8 %7613, i8* %39, align 1
  %7614 = load i64, i64* %RAX.i1862, align 8
  %7615 = inttoptr i64 %7588 to i32*
  %7616 = add i64 %7580, 42
  store i64 %7616, i64* %3, align 8
  %7617 = load i32, i32* %7615, align 8
  %7618 = shl i64 %7614, 32
  %7619 = ashr exact i64 %7618, 32
  %7620 = sext i32 %7617 to i64
  %7621 = mul nsw i64 %7620, %7619
  %7622 = load i32, i32* bitcast (%G_0x4b2a50_type* @G_0x4b2a50 to i32*), align 8
  %7623 = shl i64 %7621, 32
  %7624 = ashr exact i64 %7623, 32
  %7625 = sext i32 %7622 to i64
  %7626 = mul nsw i64 %7625, %7624
  %7627 = trunc i64 %7626 to i32
  %7628 = and i64 %7626, 4294967295
  store i64 %7628, i64* %RAX.i1862, align 8
  %7629 = shl i64 %7626, 32
  %7630 = ashr exact i64 %7629, 32
  %7631 = icmp ne i64 %7630, %7626
  %7632 = zext i1 %7631 to i8
  store i8 %7632, i8* %14, align 1
  %7633 = and i32 %7627, 255
  %7634 = tail call i32 @llvm.ctpop.i32(i32 %7633)
  %7635 = trunc i32 %7634 to i8
  %7636 = and i8 %7635, 1
  %7637 = xor i8 %7636, 1
  store i8 %7637, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %7638 = lshr i32 %7627, 31
  %7639 = trunc i32 %7638 to i8
  store i8 %7639, i8* %33, align 1
  store i8 %7632, i8* %39, align 1
  %7640 = load i64, i64* %RBP.i, align 8
  %7641 = add i64 %7640, -444
  %7642 = add i64 %7580, 56
  store i64 %7642, i64* %3, align 8
  %7643 = inttoptr i64 %7641 to i32*
  %7644 = load i32, i32* %7643, align 4
  %7645 = zext i32 %7644 to i64
  store i64 %7645, i64* %RSI.i2426, align 8
  %7646 = add i64 %7640, -648
  %7647 = load i64, i64* %RCX.i2028, align 8
  %7648 = add i64 %7580, 63
  store i64 %7648, i64* %3, align 8
  %7649 = inttoptr i64 %7646 to i64*
  store i64 %7647, i64* %7649, align 8
  %7650 = load i32, i32* %ESI.i1753, align 4
  %7651 = zext i32 %7650 to i64
  %7652 = load i64, i64* %3, align 8
  store i64 %7651, i64* %RCX.i2028, align 8
  %7653 = load i64, i64* %RAX.i1862, align 8
  %7654 = add i64 %7652, 4
  store i64 %7654, i64* %3, align 8
  %7655 = trunc i32 %7650 to i5
  switch i5 %7655, label %7662 [
    i5 0, label %routine_shll__cl___eax.exit2822
    i5 1, label %7656
  ]

; <label>:7656:                                   ; preds = %routine_shll__cl___eax.exit2925
  %7657 = trunc i64 %7653 to i32
  %7658 = shl i32 %7657, 1
  %7659 = icmp slt i32 %7657, 0
  %7660 = icmp slt i32 %7658, 0
  %7661 = xor i1 %7659, %7660
  br label %7672

; <label>:7662:                                   ; preds = %routine_shll__cl___eax.exit2925
  %7663 = and i32 %7650, 31
  %7664 = zext i32 %7663 to i64
  %7665 = add nuw nsw i64 %7664, 4294967295
  %7666 = and i64 %7653, 4294967295
  %7667 = and i64 %7665, 4294967295
  %7668 = shl i64 %7666, %7667
  %7669 = trunc i64 %7668 to i32
  %7670 = icmp slt i32 %7669, 0
  %7671 = shl i32 %7669, 1
  br label %7672

; <label>:7672:                                   ; preds = %7662, %7656
  %7673 = phi i1 [ %7659, %7656 ], [ %7670, %7662 ]
  %7674 = phi i1 [ %7661, %7656 ], [ false, %7662 ]
  %7675 = phi i32 [ %7658, %7656 ], [ %7671, %7662 ]
  %7676 = zext i32 %7675 to i64
  store i64 %7676, i64* %RAX.i1862, align 8
  %7677 = zext i1 %7673 to i8
  store i8 %7677, i8* %14, align 1
  %7678 = and i32 %7675, 254
  %7679 = tail call i32 @llvm.ctpop.i32(i32 %7678)
  %7680 = trunc i32 %7679 to i8
  %7681 = and i8 %7680, 1
  %7682 = xor i8 %7681, 1
  store i8 %7682, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7683 = icmp eq i32 %7675, 0
  %7684 = zext i1 %7683 to i8
  store i8 %7684, i8* %30, align 1
  %7685 = lshr i32 %7675, 31
  %7686 = trunc i32 %7685 to i8
  store i8 %7686, i8* %33, align 1
  %7687 = zext i1 %7674 to i8
  store i8 %7687, i8* %39, align 1
  br label %routine_shll__cl___eax.exit2822

routine_shll__cl___eax.exit2822:                  ; preds = %7672, %routine_shll__cl___eax.exit2925
  %7688 = phi i64 [ %7676, %7672 ], [ %7653, %routine_shll__cl___eax.exit2925 ]
  %7689 = shl i64 %7688, 32
  %7690 = ashr i64 %7689, 36
  %7691 = lshr i64 %7690, 1
  %7692 = trunc i64 %7690 to i8
  %7693 = and i8 %7692, 1
  %7694 = trunc i64 %7691 to i32
  %7695 = and i64 %7691, 4294967295
  store i64 %7695, i64* %RAX.i1862, align 8
  store i8 %7693, i8* %14, align 1
  %7696 = and i32 %7694, 255
  %7697 = tail call i32 @llvm.ctpop.i32(i32 %7696)
  %7698 = trunc i32 %7697 to i8
  %7699 = and i8 %7698, 1
  %7700 = xor i8 %7699, 1
  store i8 %7700, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7701 = icmp eq i32 %7694, 0
  %7702 = zext i1 %7701 to i8
  store i8 %7702, i8* %30, align 1
  %7703 = lshr i64 %7690, 32
  %7704 = trunc i64 %7703 to i8
  %7705 = and i8 %7704, 1
  store i8 %7705, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7706 = load i64, i64* %RBP.i, align 8
  %7707 = add i64 %7706, -636
  %7708 = add i64 %7652, 13
  store i64 %7708, i64* %3, align 8
  %7709 = inttoptr i64 %7707 to i32*
  %7710 = load i32, i32* %7709, align 4
  %7711 = trunc i64 %7691 to i32
  %7712 = sub i32 %7710, %7711
  %7713 = zext i32 %7712 to i64
  store i64 %7713, i64* %RSI.i2426, align 8
  %7714 = icmp ult i32 %7710, %7711
  %7715 = zext i1 %7714 to i8
  store i8 %7715, i8* %14, align 1
  %7716 = and i32 %7712, 255
  %7717 = tail call i32 @llvm.ctpop.i32(i32 %7716)
  %7718 = trunc i32 %7717 to i8
  %7719 = and i8 %7718, 1
  %7720 = xor i8 %7719, 1
  store i8 %7720, i8* %21, align 1
  %7721 = xor i32 %7711, %7710
  %7722 = xor i32 %7721, %7712
  %7723 = lshr i32 %7722, 4
  %7724 = trunc i32 %7723 to i8
  %7725 = and i8 %7724, 1
  store i8 %7725, i8* %27, align 1
  %7726 = icmp eq i32 %7712, 0
  %7727 = zext i1 %7726 to i8
  store i8 %7727, i8* %30, align 1
  %7728 = lshr i32 %7712, 31
  %7729 = trunc i32 %7728 to i8
  store i8 %7729, i8* %33, align 1
  %7730 = lshr i32 %7710, 31
  %7731 = lshr i64 %7690, 32
  %7732 = trunc i64 %7731 to i32
  %7733 = and i32 %7732, 1
  %7734 = xor i32 %7733, %7730
  %7735 = xor i32 %7728, %7730
  %7736 = add nuw nsw i32 %7735, %7734
  %7737 = icmp eq i32 %7736, 2
  %7738 = zext i1 %7737 to i8
  store i8 %7738, i8* %39, align 1
  %7739 = add i64 %7706, -48
  %7740 = add i64 %7652, 19
  store i64 %7740, i64* %3, align 8
  %7741 = inttoptr i64 %7739 to i32*
  %7742 = load i32, i32* %7741, align 4
  %7743 = sext i32 %7742 to i64
  store i64 %7743, i64* %R8.i3081, align 8
  %7744 = shl nsw i64 %7743, 2
  %7745 = add nsw i64 %7744, -432
  %7746 = add i64 %7745, %7706
  %7747 = add i64 %7652, 27
  store i64 %7747, i64* %3, align 8
  %7748 = inttoptr i64 %7746 to i32*
  %7749 = load i32, i32* %7748, align 4
  %7750 = sub i32 %7712, %7749
  %7751 = zext i32 %7750 to i64
  store i64 %7751, i64* %RSI.i2426, align 8
  %7752 = icmp ult i32 %7712, %7749
  %7753 = zext i1 %7752 to i8
  store i8 %7753, i8* %14, align 1
  %7754 = and i32 %7750, 255
  %7755 = tail call i32 @llvm.ctpop.i32(i32 %7754)
  %7756 = trunc i32 %7755 to i8
  %7757 = and i8 %7756, 1
  %7758 = xor i8 %7757, 1
  store i8 %7758, i8* %21, align 1
  %7759 = xor i32 %7749, %7712
  %7760 = xor i32 %7759, %7750
  %7761 = lshr i32 %7760, 4
  %7762 = trunc i32 %7761 to i8
  %7763 = and i8 %7762, 1
  store i8 %7763, i8* %27, align 1
  %7764 = icmp eq i32 %7750, 0
  %7765 = zext i1 %7764 to i8
  store i8 %7765, i8* %30, align 1
  %7766 = lshr i32 %7750, 31
  %7767 = trunc i32 %7766 to i8
  store i8 %7767, i8* %33, align 1
  %7768 = lshr i32 %7749, 31
  %7769 = xor i32 %7768, %7728
  %7770 = xor i32 %7766, %7728
  %7771 = add nuw nsw i32 %7770, %7769
  %7772 = icmp eq i32 %7771, 2
  %7773 = zext i1 %7772 to i8
  store i8 %7773, i8* %39, align 1
  %7774 = sitofp i32 %7750 to double
  store double %7774, double* %45, align 1
  %7775 = add i64 %7706, -544
  %7776 = add i64 %7652, 39
  store i64 %7776, i64* %3, align 8
  %7777 = inttoptr i64 %7775 to double*
  store double %7774, double* %7777, align 8
  %7778 = load i64, i64* %RBP.i, align 8
  %7779 = add i64 %7778, -520
  %7780 = load i64, i64* %3, align 8
  %7781 = add i64 %7780, 6
  store i64 %7781, i64* %3, align 8
  %7782 = inttoptr i64 %7779 to i32*
  %7783 = load i32, i32* %7782, align 4
  %7784 = zext i32 %7783 to i64
  store i64 %7784, i64* %RDI.i3890, align 8
  %7785 = add i64 %7778, -68
  %7786 = add i64 %7780, 9
  store i64 %7786, i64* %3, align 8
  %7787 = inttoptr i64 %7785 to i32*
  %7788 = load i32, i32* %7787, align 4
  %7789 = zext i32 %7788 to i64
  store i64 %7789, i64* %RSI.i2426, align 8
  %7790 = add i64 %7778, -648
  %7791 = add i64 %7780, 16
  store i64 %7791, i64* %3, align 8
  %7792 = inttoptr i64 %7790 to i64*
  %7793 = load i64, i64* %7792, align 8
  store i64 %7793, i64* %RCX.i2028, align 8
  %7794 = add i64 %7780, 649958
  %7795 = add i64 %7780, 21
  %7796 = load i64, i64* %6, align 8
  %7797 = add i64 %7796, -8
  %7798 = inttoptr i64 %7797 to i64*
  store i64 %7795, i64* %7798, align 8
  store i64 %7797, i64* %6, align 8
  store i64 %7794, i64* %3, align 8
  %call2_40e23a = tail call %struct.Memory* @sub_4acd10.levrun_linfo_c2x2(%struct.State* nonnull %0, i64 %7794, %struct.Memory* %call2_40e1bf)
  %7799 = load i64, i64* %RBP.i, align 8
  %7800 = add i64 %7799, -544
  %7801 = load i64, i64* %3, align 8
  %7802 = add i64 %7801, 8
  store i64 %7802, i64* %3, align 8
  %7803 = inttoptr i64 %7800 to i64*
  %7804 = load i64, i64* %7803, align 8
  store i64 %7804, i64* %46, align 1
  store double 0.000000e+00, double* %48, align 1
  %7805 = add i64 %7801, 16
  store i64 %7805, i64* %3, align 8
  %7806 = bitcast i64 %7804 to double
  %7807 = inttoptr i64 %7800 to double*
  %7808 = load double, double* %7807, align 8
  %7809 = fmul double %7806, %7808
  store double %7809, double* %45, align 1
  store i64 0, i64* %47, align 1
  %7810 = add i64 %7799, -552
  %7811 = add i64 %7801, 24
  store i64 %7811, i64* %3, align 8
  %7812 = inttoptr i64 %7810 to i64*
  %7813 = load i64, i64* %7812, align 8
  store i64 %7813, i64* %56, align 1
  store double 0.000000e+00, double* %58, align 1
  %7814 = add i64 %7799, -524
  %7815 = add i64 %7801, 32
  store i64 %7815, i64* %3, align 8
  %7816 = inttoptr i64 %7814 to i32*
  %7817 = load i32, i32* %7816, align 4
  %7818 = sitofp i32 %7817 to double
  store double %7818, double* %243, align 1
  %7819 = bitcast i64 %7813 to double
  %7820 = fmul double %7818, %7819
  store double %7820, double* %55, align 1
  store i64 0, i64* %57, align 1
  %7821 = fadd double %7820, %7809
  store double %7821, double* %45, align 1
  store i64 0, i64* %47, align 1
  %7822 = add i64 %7801, 48
  store i64 %7822, i64* %3, align 8
  %7823 = inttoptr i64 %7800 to double*
  store double %7821, double* %7823, align 8
  %7824 = load i64, i64* %RBP.i, align 8
  %7825 = add i64 %7824, -536
  %7826 = load i64, i64* %3, align 8
  %7827 = add i64 %7826, 8
  store i64 %7827, i64* %3, align 8
  %7828 = inttoptr i64 %7825 to i64*
  %7829 = load i64, i64* %7828, align 8
  store i64 %7829, i64* %46, align 1
  store double 0.000000e+00, double* %48, align 1
  %7830 = add i64 %7824, -544
  %7831 = add i64 %7826, 16
  store i64 %7831, i64* %3, align 8
  %7832 = bitcast i64 %7829 to double
  %7833 = inttoptr i64 %7830 to double*
  %7834 = load double, double* %7833, align 8
  %7835 = fcmp uno double %7832, %7834
  br i1 %7835, label %7836, label %7846

; <label>:7836:                                   ; preds = %routine_shll__cl___eax.exit2822
  %7837 = fadd double %7832, %7834
  %7838 = bitcast double %7837 to i64
  %7839 = and i64 %7838, 9221120237041090560
  %7840 = icmp eq i64 %7839, 9218868437227405312
  %7841 = and i64 %7838, 2251799813685247
  %7842 = icmp ne i64 %7841, 0
  %7843 = and i1 %7840, %7842
  br i1 %7843, label %7844, label %7852

; <label>:7844:                                   ; preds = %7836
  %7845 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7831, %struct.Memory* %call2_40e23a)
  %.pre340 = load i64, i64* %3, align 8
  br label %routine_ucomisd_MINUS0x220__rbp____xmm0.exit2761

; <label>:7846:                                   ; preds = %routine_shll__cl___eax.exit2822
  %7847 = fcmp ogt double %7832, %7834
  br i1 %7847, label %7852, label %7848

; <label>:7848:                                   ; preds = %7846
  %7849 = fcmp olt double %7832, %7834
  br i1 %7849, label %7852, label %7850

; <label>:7850:                                   ; preds = %7848
  %7851 = fcmp oeq double %7832, %7834
  br i1 %7851, label %7852, label %7856

; <label>:7852:                                   ; preds = %7850, %7848, %7846, %7836
  %7853 = phi i8 [ 0, %7846 ], [ 0, %7848 ], [ 1, %7850 ], [ 1, %7836 ]
  %7854 = phi i8 [ 0, %7846 ], [ 0, %7848 ], [ 0, %7850 ], [ 1, %7836 ]
  %7855 = phi i8 [ 0, %7846 ], [ 1, %7848 ], [ 0, %7850 ], [ 1, %7836 ]
  store i8 %7853, i8* %30, align 1
  store i8 %7854, i8* %21, align 1
  store i8 %7855, i8* %14, align 1
  br label %7856

; <label>:7856:                                   ; preds = %7852, %7850
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd_MINUS0x220__rbp____xmm0.exit2761

routine_ucomisd_MINUS0x220__rbp____xmm0.exit2761: ; preds = %7856, %7844
  %7857 = phi i64 [ %.pre340, %7844 ], [ %7831, %7856 ]
  %7858 = phi %struct.Memory* [ %7845, %7844 ], [ %call2_40e23a, %7856 ]
  %7859 = add i64 %7857, 97
  %7860 = add i64 %7857, 6
  %7861 = load i8, i8* %30, align 1
  %7862 = icmp eq i8 %7861, 0
  %7863 = select i1 %7862, i64 %7859, i64 %7860
  store i64 %7863, i64* %3, align 8
  br i1 %7862, label %block_.L_40e2e0, label %block_40e285

block_40e285:                                     ; preds = %routine_ucomisd_MINUS0x220__rbp____xmm0.exit2761
  %7864 = load i8, i8* %21, align 1
  %7865 = icmp ne i8 %7864, 0
  %.v483 = select i1 %7865, i64 91, i64 6
  %7866 = add i64 %7863, %.v483
  store i64 %7866, i64* %3, align 8
  %cmpBr_40e285 = icmp eq i8 %7864, 1
  br i1 %cmpBr_40e285, label %block_.L_40e2e0, label %block_40e28b

block_40e28b:                                     ; preds = %block_40e285
  %7867 = load i64, i64* %RBP.i, align 8
  %7868 = add i64 %7867, -516
  %7869 = add i64 %7866, 6
  store i64 %7869, i64* %3, align 8
  %7870 = inttoptr i64 %7868 to i32*
  %7871 = load i32, i32* %7870, align 4
  %7872 = zext i32 %7871 to i64
  store i64 %7872, i64* %RDI.i3890, align 8
  %7873 = add i64 %7866, -53899
  %7874 = add i64 %7866, 11
  %7875 = load i64, i64* %6, align 8
  %7876 = add i64 %7875, -8
  %7877 = inttoptr i64 %7876 to i64*
  store i64 %7874, i64* %7877, align 8
  store i64 %7876, i64* %6, align 8
  store i64 %7873, i64* %3, align 8
  %7878 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %7858)
  %7879 = load i64, i64* %RBP.i, align 8
  %7880 = add i64 %7879, -520
  %7881 = load i64, i64* %3, align 8
  %7882 = add i64 %7881, 6
  store i64 %7882, i64* %3, align 8
  %7883 = inttoptr i64 %7880 to i32*
  %7884 = load i32, i32* %7883, align 4
  %7885 = zext i32 %7884 to i64
  store i64 %7885, i64* %RDI.i3890, align 8
  %7886 = add i64 %7879, -652
  %7887 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %7888 = add i64 %7881, 12
  store i64 %7888, i64* %3, align 8
  %7889 = inttoptr i64 %7886 to i32*
  store i32 %7887, i32* %7889, align 4
  %7890 = load i64, i64* %3, align 8
  %7891 = add i64 %7890, -53922
  %7892 = add i64 %7890, 5
  %7893 = load i64, i64* %6, align 8
  %7894 = add i64 %7893, -8
  %7895 = inttoptr i64 %7894 to i64*
  store i64 %7892, i64* %7895, align 8
  store i64 %7894, i64* %6, align 8
  store i64 %7891, i64* %3, align 8
  %7896 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %7878)
  %7897 = load i64, i64* %RBP.i, align 8
  %7898 = add i64 %7897, -652
  %7899 = load i64, i64* %3, align 8
  %7900 = add i64 %7899, 6
  store i64 %7900, i64* %3, align 8
  %7901 = inttoptr i64 %7898 to i32*
  %7902 = load i32, i32* %7901, align 4
  %7903 = zext i32 %7902 to i64
  store i64 %7903, i64* %RDI.i3890, align 8
  %7904 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %7905 = sub i32 %7902, %7904
  %7906 = icmp ult i32 %7902, %7904
  %7907 = zext i1 %7906 to i8
  store i8 %7907, i8* %14, align 1
  %7908 = and i32 %7905, 255
  %7909 = tail call i32 @llvm.ctpop.i32(i32 %7908)
  %7910 = trunc i32 %7909 to i8
  %7911 = and i8 %7910, 1
  %7912 = xor i8 %7911, 1
  store i8 %7912, i8* %21, align 1
  %7913 = xor i32 %7904, %7902
  %7914 = xor i32 %7913, %7905
  %7915 = lshr i32 %7914, 4
  %7916 = trunc i32 %7915 to i8
  %7917 = and i8 %7916, 1
  store i8 %7917, i8* %27, align 1
  %7918 = icmp eq i32 %7905, 0
  %7919 = zext i1 %7918 to i8
  store i8 %7919, i8* %30, align 1
  %7920 = lshr i32 %7905, 31
  %7921 = trunc i32 %7920 to i8
  store i8 %7921, i8* %33, align 1
  %7922 = lshr i32 %7902, 31
  %7923 = lshr i32 %7904, 31
  %7924 = xor i32 %7923, %7922
  %7925 = xor i32 %7920, %7922
  %7926 = add nuw nsw i32 %7925, %7924
  %7927 = icmp eq i32 %7926, 2
  %7928 = zext i1 %7927 to i8
  store i8 %7928, i8* %39, align 1
  %7929 = icmp ne i8 %7921, 0
  %7930 = xor i1 %7929, %7927
  %.v410 = select i1 %7930, i64 14, i64 31
  %7931 = add i64 %7899, %.v410
  store i64 %7931, i64* %3, align 8
  br i1 %7930, label %block_40e2b5, label %block_.L_40e2c6

block_40e2b5:                                     ; preds = %block_40e28b
  %7932 = add i64 %7897, -516
  %7933 = add i64 %7931, 6
  store i64 %7933, i64* %3, align 8
  %7934 = inttoptr i64 %7932 to i32*
  %7935 = load i32, i32* %7934, align 4
  %7936 = zext i32 %7935 to i64
  store i64 %7936, i64* %RAX.i1862, align 8
  %7937 = add i64 %7897, -656
  %7938 = add i64 %7931, 12
  store i64 %7938, i64* %3, align 8
  %7939 = inttoptr i64 %7937 to i32*
  store i32 %7935, i32* %7939, align 4
  %7940 = load i64, i64* %3, align 8
  %7941 = add i64 %7940, 17
  store i64 %7941, i64* %3, align 8
  br label %block_.L_40e2d2

block_.L_40e2c6:                                  ; preds = %block_40e28b
  %7942 = add i64 %7897, -520
  %7943 = add i64 %7931, 6
  store i64 %7943, i64* %3, align 8
  %7944 = inttoptr i64 %7942 to i32*
  %7945 = load i32, i32* %7944, align 4
  %7946 = zext i32 %7945 to i64
  store i64 %7946, i64* %RAX.i1862, align 8
  %7947 = add i64 %7897, -656
  %7948 = add i64 %7931, 12
  store i64 %7948, i64* %3, align 8
  %7949 = inttoptr i64 %7947 to i32*
  store i32 %7945, i32* %7949, align 4
  %.pre341 = load i64, i64* %3, align 8
  br label %block_.L_40e2d2

block_.L_40e2d2:                                  ; preds = %block_.L_40e2c6, %block_40e2b5
  %7950 = phi i64 [ %.pre341, %block_.L_40e2c6 ], [ %7941, %block_40e2b5 ]
  %7951 = load i64, i64* %RBP.i, align 8
  %7952 = add i64 %7951, -656
  %7953 = add i64 %7950, 6
  store i64 %7953, i64* %3, align 8
  %7954 = inttoptr i64 %7952 to i32*
  %7955 = load i32, i32* %7954, align 4
  %7956 = zext i32 %7955 to i64
  store i64 %7956, i64* %RAX.i1862, align 8
  %7957 = add i64 %7951, -60
  %7958 = add i64 %7950, 9
  store i64 %7958, i64* %3, align 8
  %7959 = inttoptr i64 %7957 to i32*
  store i32 %7955, i32* %7959, align 4
  %7960 = load i64, i64* %3, align 8
  %7961 = add i64 %7960, 59
  br label %block_.L_40e316

block_.L_40e2e0:                                  ; preds = %block_40e285, %routine_ucomisd_MINUS0x220__rbp____xmm0.exit2761
  %7962 = phi i64 [ %7866, %block_40e285 ], [ %7859, %routine_ucomisd_MINUS0x220__rbp____xmm0.exit2761 ]
  %7963 = load i64, i64* %RBP.i, align 8
  %7964 = add i64 %7963, -536
  %7965 = add i64 %7962, 8
  store i64 %7965, i64* %3, align 8
  %7966 = inttoptr i64 %7964 to i64*
  %7967 = load i64, i64* %7966, align 8
  store i64 %7967, i64* %46, align 1
  store double 0.000000e+00, double* %48, align 1
  %7968 = add i64 %7963, -544
  %7969 = add i64 %7962, 16
  store i64 %7969, i64* %3, align 8
  %7970 = inttoptr i64 %7968 to i64*
  %7971 = load i64, i64* %7970, align 8
  store i64 %7971, i64* %56, align 1
  store double 0.000000e+00, double* %58, align 1
  %7972 = add i64 %7962, 20
  store i64 %7972, i64* %3, align 8
  %.cast = bitcast i64 %7971 to double
  %7973 = bitcast i64 %7967 to double
  %7974 = fcmp uno double %.cast, %7973
  br i1 %7974, label %7975, label %7985

; <label>:7975:                                   ; preds = %block_.L_40e2e0
  %7976 = fadd double %.cast, %7973
  %7977 = bitcast double %7976 to i64
  %7978 = and i64 %7977, 9221120237041090560
  %7979 = icmp eq i64 %7978, 9218868437227405312
  %7980 = and i64 %7977, 2251799813685247
  %7981 = icmp ne i64 %7980, 0
  %7982 = and i1 %7979, %7981
  br i1 %7982, label %7983, label %7991

; <label>:7983:                                   ; preds = %7975
  %7984 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7972, %struct.Memory* %7858)
  %.pre342 = load i64, i64* %3, align 8
  %.pre343 = load i8, i8* %30, align 1
  %.pre344 = load i64, i64* %RBP.i, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit2703

; <label>:7985:                                   ; preds = %block_.L_40e2e0
  %7986 = fcmp ogt double %.cast, %7973
  br i1 %7986, label %7991, label %7987

; <label>:7987:                                   ; preds = %7985
  %7988 = fcmp olt double %.cast, %7973
  br i1 %7988, label %7991, label %7989

; <label>:7989:                                   ; preds = %7987
  %7990 = fcmp oeq double %.cast, %7973
  br i1 %7990, label %7991, label %7995

; <label>:7991:                                   ; preds = %7989, %7987, %7985, %7975
  %7992 = phi i8 [ 0, %7985 ], [ 0, %7987 ], [ 1, %7989 ], [ 1, %7975 ]
  %7993 = phi i8 [ 0, %7985 ], [ 0, %7987 ], [ 0, %7989 ], [ 1, %7975 ]
  %7994 = phi i8 [ 0, %7985 ], [ 1, %7987 ], [ 0, %7989 ], [ 1, %7975 ]
  store i8 %7992, i8* %30, align 1
  store i8 %7993, i8* %21, align 1
  store i8 %7994, i8* %14, align 1
  br label %7995

; <label>:7995:                                   ; preds = %7991, %7989
  %7996 = phi i8 [ %7992, %7991 ], [ %7861, %7989 ]
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit2703

routine_ucomisd__xmm0___xmm1.exit2703:            ; preds = %7995, %7983
  %7997 = phi i64 [ %.pre344, %7983 ], [ %7963, %7995 ]
  %7998 = phi i8 [ %.pre343, %7983 ], [ %7996, %7995 ]
  %7999 = phi i64 [ %.pre342, %7983 ], [ %7972, %7995 ]
  %8000 = phi %struct.Memory* [ %7984, %7983 ], [ %7858, %7995 ]
  %8001 = load i8, i8* %14, align 1
  %8002 = or i8 %7998, %8001
  %8003 = icmp ne i8 %8002, 0
  %.v484 = select i1 %8003, i64 20, i64 6
  %8004 = add i64 %7999, %.v484
  store i64 %8004, i64* %3, align 8
  br i1 %8003, label %block_.L_40e308, label %block_40e2fa

block_40e2fa:                                     ; preds = %routine_ucomisd__xmm0___xmm1.exit2703
  %8005 = add i64 %7997, -516
  %8006 = add i64 %8004, 6
  store i64 %8006, i64* %3, align 8
  %8007 = inttoptr i64 %8005 to i32*
  %8008 = load i32, i32* %8007, align 4
  %8009 = zext i32 %8008 to i64
  store i64 %8009, i64* %RAX.i1862, align 8
  %8010 = add i64 %7997, -60
  %8011 = add i64 %8004, 9
  store i64 %8011, i64* %3, align 8
  %8012 = inttoptr i64 %8010 to i32*
  store i32 %8008, i32* %8012, align 4
  %8013 = load i64, i64* %3, align 8
  %8014 = add i64 %8013, 14
  store i64 %8014, i64* %3, align 8
  br label %block_.L_40e311

block_.L_40e308:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit2703
  %8015 = add i64 %7997, -520
  %8016 = add i64 %8004, 6
  store i64 %8016, i64* %3, align 8
  %8017 = inttoptr i64 %8015 to i32*
  %8018 = load i32, i32* %8017, align 4
  %8019 = zext i32 %8018 to i64
  store i64 %8019, i64* %RAX.i1862, align 8
  %8020 = add i64 %7997, -60
  %8021 = add i64 %8004, 9
  store i64 %8021, i64* %3, align 8
  %8022 = inttoptr i64 %8020 to i32*
  store i32 %8018, i32* %8022, align 4
  %.pre345 = load i64, i64* %3, align 8
  br label %block_.L_40e311

block_.L_40e311:                                  ; preds = %block_.L_40e308, %block_40e2fa
  %8023 = phi i64 [ %.pre345, %block_.L_40e308 ], [ %8014, %block_40e2fa ]
  %8024 = add i64 %8023, 5
  store i64 %8024, i64* %3, align 8
  br label %block_.L_40e316

block_.L_40e316:                                  ; preds = %block_.L_40e311, %block_.L_40e2d2
  %storemerge = phi i64 [ %7961, %block_.L_40e2d2 ], [ %8024, %block_.L_40e311 ]
  %MEMORY.26 = phi %struct.Memory* [ %7896, %block_.L_40e2d2 ], [ %8000, %block_.L_40e311 ]
  %8025 = load i64, i64* %RBP.i, align 8
  %8026 = add i64 %8025, -60
  %8027 = add i64 %storemerge, 3
  store i64 %8027, i64* %3, align 8
  %8028 = inttoptr i64 %8026 to i32*
  %8029 = load i32, i32* %8028, align 4
  %8030 = zext i32 %8029 to i64
  store i64 %8030, i64* %RAX.i1862, align 8
  %8031 = add i64 %8025, -516
  %8032 = add i64 %storemerge, 9
  store i64 %8032, i64* %3, align 8
  %8033 = inttoptr i64 %8031 to i32*
  %8034 = load i32, i32* %8033, align 4
  %8035 = sub i32 %8029, %8034
  %8036 = icmp ult i32 %8029, %8034
  %8037 = zext i1 %8036 to i8
  store i8 %8037, i8* %14, align 1
  %8038 = and i32 %8035, 255
  %8039 = tail call i32 @llvm.ctpop.i32(i32 %8038)
  %8040 = trunc i32 %8039 to i8
  %8041 = and i8 %8040, 1
  %8042 = xor i8 %8041, 1
  store i8 %8042, i8* %21, align 1
  %8043 = xor i32 %8034, %8029
  %8044 = xor i32 %8043, %8035
  %8045 = lshr i32 %8044, 4
  %8046 = trunc i32 %8045 to i8
  %8047 = and i8 %8046, 1
  store i8 %8047, i8* %27, align 1
  %8048 = icmp eq i32 %8035, 0
  %8049 = zext i1 %8048 to i8
  store i8 %8049, i8* %30, align 1
  %8050 = lshr i32 %8035, 31
  %8051 = trunc i32 %8050 to i8
  store i8 %8051, i8* %33, align 1
  %8052 = lshr i32 %8029, 31
  %8053 = lshr i32 %8034, 31
  %8054 = xor i32 %8053, %8052
  %8055 = xor i32 %8050, %8052
  %8056 = add nuw nsw i32 %8055, %8054
  %8057 = icmp eq i32 %8056, 2
  %8058 = zext i1 %8057 to i8
  store i8 %8058, i8* %39, align 1
  %.v411 = select i1 %8048, i64 15, i64 32
  %8059 = add i64 %storemerge, %.v411
  store i64 %8059, i64* %3, align 8
  br i1 %8048, label %block_40e325, label %block_.L_40e336

block_40e325:                                     ; preds = %block_.L_40e316
  %8060 = add i64 %8025, -508
  %8061 = add i64 %8059, 6
  store i64 %8061, i64* %3, align 8
  %8062 = inttoptr i64 %8060 to i32*
  %8063 = load i32, i32* %8062, align 4
  %8064 = zext i32 %8063 to i64
  store i64 %8064, i64* %RAX.i1862, align 8
  %8065 = add i64 %8025, -660
  %8066 = add i64 %8059, 12
  store i64 %8066, i64* %3, align 8
  %8067 = inttoptr i64 %8065 to i32*
  store i32 %8063, i32* %8067, align 4
  %8068 = load i64, i64* %3, align 8
  %8069 = add i64 %8068, 17
  store i64 %8069, i64* %3, align 8
  br label %block_.L_40e342

block_.L_40e336:                                  ; preds = %block_.L_40e316
  %8070 = add i64 %8025, -512
  %8071 = add i64 %8059, 6
  store i64 %8071, i64* %3, align 8
  %8072 = inttoptr i64 %8070 to i32*
  %8073 = load i32, i32* %8072, align 4
  %8074 = zext i32 %8073 to i64
  store i64 %8074, i64* %RAX.i1862, align 8
  %8075 = add i64 %8025, -660
  %8076 = add i64 %8059, 12
  store i64 %8076, i64* %3, align 8
  %8077 = inttoptr i64 %8075 to i32*
  store i32 %8073, i32* %8077, align 4
  %.pre346 = load i64, i64* %3, align 8
  br label %block_.L_40e342

block_.L_40e342:                                  ; preds = %block_.L_40e336, %block_40e325
  %8078 = phi i64 [ %.pre346, %block_.L_40e336 ], [ %8069, %block_40e325 ]
  %8079 = load i64, i64* %RBP.i, align 8
  %8080 = add i64 %8079, -660
  %8081 = add i64 %8078, 6
  store i64 %8081, i64* %3, align 8
  %8082 = inttoptr i64 %8080 to i32*
  %8083 = load i32, i32* %8082, align 4
  %8084 = zext i32 %8083 to i64
  store i64 %8084, i64* %RAX.i1862, align 8
  %8085 = add i64 %8079, -56
  %8086 = add i64 %8078, 9
  store i64 %8086, i64* %3, align 8
  %8087 = inttoptr i64 %8085 to i32*
  store i32 %8083, i32* %8087, align 4
  %8088 = load i64, i64* %3, align 8
  %8089 = add i64 %8088, 153
  br label %block_.L_40e3e4

block_.L_40e350:                                  ; preds = %block_40e0ce, %block_40e0c1, %routine_sarl__cl___eax.exit2992
  %8090 = phi i64 [ %7269, %block_40e0ce ], [ %7257, %block_40e0c1 ], [ %7245, %routine_sarl__cl___eax.exit2992 ]
  %8091 = add i64 %8090, 6
  store i64 %8091, i64* %3, align 8
  %8092 = load i32, i32* %7214, align 4
  %8093 = zext i32 %8092 to i64
  store i64 %8093, i64* %RAX.i1862, align 8
  %8094 = add i64 %8090, 12
  store i64 %8094, i64* %3, align 8
  %8095 = load i32, i32* %7219, align 4
  %8096 = sub i32 %8092, %8095
  %8097 = icmp ult i32 %8092, %8095
  %8098 = zext i1 %8097 to i8
  store i8 %8098, i8* %14, align 1
  %8099 = and i32 %8096, 255
  %8100 = tail call i32 @llvm.ctpop.i32(i32 %8099)
  %8101 = trunc i32 %8100 to i8
  %8102 = and i8 %8101, 1
  %8103 = xor i8 %8102, 1
  store i8 %8103, i8* %21, align 1
  %8104 = xor i32 %8095, %8092
  %8105 = xor i32 %8104, %8096
  %8106 = lshr i32 %8105, 4
  %8107 = trunc i32 %8106 to i8
  %8108 = and i8 %8107, 1
  store i8 %8108, i8* %27, align 1
  %8109 = icmp eq i32 %8096, 0
  %8110 = zext i1 %8109 to i8
  store i8 %8110, i8* %30, align 1
  %8111 = lshr i32 %8096, 31
  %8112 = trunc i32 %8111 to i8
  store i8 %8112, i8* %33, align 1
  %8113 = lshr i32 %8092, 31
  %8114 = lshr i32 %8095, 31
  %8115 = xor i32 %8114, %8113
  %8116 = xor i32 %8111, %8113
  %8117 = add nuw nsw i32 %8116, %8115
  %8118 = icmp eq i32 %8117, 2
  %8119 = zext i1 %8118 to i8
  store i8 %8119, i8* %39, align 1
  %.v417 = select i1 %8109, i64 18, i64 41
  %8120 = add i64 %8090, %.v417
  store i64 %8120, i64* %3, align 8
  br i1 %8109, label %block_40e362, label %block_.L_40e379

block_40e362:                                     ; preds = %block_.L_40e350
  %8121 = add i64 %8120, 6
  store i64 %8121, i64* %3, align 8
  %8122 = load i32, i32* %7214, align 4
  %8123 = zext i32 %8122 to i64
  store i64 %8123, i64* %RAX.i1862, align 8
  %8124 = add i64 %7210, -60
  %8125 = add i64 %8120, 9
  store i64 %8125, i64* %3, align 8
  %8126 = inttoptr i64 %8124 to i32*
  store i32 %8122, i32* %8126, align 4
  %8127 = load i64, i64* %RBP.i, align 8
  %8128 = add i64 %8127, -508
  %8129 = load i64, i64* %3, align 8
  %8130 = add i64 %8129, 6
  store i64 %8130, i64* %3, align 8
  %8131 = inttoptr i64 %8128 to i32*
  %8132 = load i32, i32* %8131, align 4
  %8133 = zext i32 %8132 to i64
  store i64 %8133, i64* %RAX.i1862, align 8
  %8134 = add i64 %8127, -56
  %8135 = add i64 %8129, 9
  store i64 %8135, i64* %3, align 8
  %8136 = inttoptr i64 %8134 to i32*
  store i32 %8132, i32* %8136, align 4
  %8137 = load i64, i64* %3, align 8
  %8138 = add i64 %8137, 107
  store i64 %8138, i64* %3, align 8
  br label %block_.L_40e3df

block_.L_40e379:                                  ; preds = %block_.L_40e350
  %8139 = add i64 %8120, 7
  store i64 %8139, i64* %3, align 8
  %8140 = load i32, i32* %7214, align 4
  store i8 0, i8* %14, align 1
  %8141 = and i32 %8140, 255
  %8142 = tail call i32 @llvm.ctpop.i32(i32 %8141)
  %8143 = trunc i32 %8142 to i8
  %8144 = and i8 %8143, 1
  %8145 = xor i8 %8144, 1
  store i8 %8145, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8146 = icmp eq i32 %8140, 0
  %8147 = zext i1 %8146 to i8
  store i8 %8147, i8* %30, align 1
  %8148 = lshr i32 %8140, 31
  %8149 = trunc i32 %8148 to i8
  store i8 %8149, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v418 = select i1 %8146, i64 13, i64 30
  %8150 = add i64 %8120, %.v418
  %8151 = add i64 %8150, 6
  store i64 %8151, i64* %3, align 8
  br i1 %8146, label %block_40e386, label %block_.L_40e397

block_40e386:                                     ; preds = %block_.L_40e379
  %8152 = load i32, i32* %7214, align 4
  %8153 = zext i32 %8152 to i64
  store i64 %8153, i64* %RAX.i1862, align 8
  %8154 = add i64 %7210, -664
  %8155 = add i64 %8150, 12
  store i64 %8155, i64* %3, align 8
  %8156 = inttoptr i64 %8154 to i32*
  store i32 %8152, i32* %8156, align 4
  %8157 = load i64, i64* %3, align 8
  %8158 = add i64 %8157, 17
  store i64 %8158, i64* %3, align 8
  br label %block_.L_40e3a3

block_.L_40e397:                                  ; preds = %block_.L_40e379
  %8159 = load i32, i32* %7219, align 4
  %8160 = zext i32 %8159 to i64
  store i64 %8160, i64* %RAX.i1862, align 8
  %8161 = add i64 %7210, -664
  %8162 = add i64 %8150, 12
  store i64 %8162, i64* %3, align 8
  %8163 = inttoptr i64 %8161 to i32*
  store i32 %8159, i32* %8163, align 4
  %.pre347 = load i64, i64* %3, align 8
  br label %block_.L_40e3a3

block_.L_40e3a3:                                  ; preds = %block_.L_40e397, %block_40e386
  %8164 = phi i64 [ %.pre347, %block_.L_40e397 ], [ %8158, %block_40e386 ]
  %8165 = load i64, i64* %RBP.i, align 8
  %8166 = add i64 %8165, -664
  %8167 = add i64 %8164, 6
  store i64 %8167, i64* %3, align 8
  %8168 = inttoptr i64 %8166 to i32*
  %8169 = load i32, i32* %8168, align 4
  %8170 = zext i32 %8169 to i64
  store i64 %8170, i64* %RAX.i1862, align 8
  %8171 = add i64 %8165, -60
  %8172 = add i64 %8164, 9
  store i64 %8172, i64* %3, align 8
  %8173 = inttoptr i64 %8171 to i32*
  store i32 %8169, i32* %8173, align 4
  %8174 = load i64, i64* %RBP.i, align 8
  %8175 = add i64 %8174, -516
  %8176 = load i64, i64* %3, align 8
  %8177 = add i64 %8176, 7
  store i64 %8177, i64* %3, align 8
  %8178 = inttoptr i64 %8175 to i32*
  %8179 = load i32, i32* %8178, align 4
  store i8 0, i8* %14, align 1
  %8180 = and i32 %8179, 255
  %8181 = tail call i32 @llvm.ctpop.i32(i32 %8180)
  %8182 = trunc i32 %8181 to i8
  %8183 = and i8 %8182, 1
  %8184 = xor i8 %8183, 1
  store i8 %8184, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8185 = icmp eq i32 %8179, 0
  %8186 = zext i1 %8185 to i8
  store i8 %8186, i8* %30, align 1
  %8187 = lshr i32 %8179, 31
  %8188 = trunc i32 %8187 to i8
  store i8 %8188, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v419 = select i1 %8185, i64 13, i64 30
  %8189 = add i64 %8176, %.v419
  store i64 %8189, i64* %3, align 8
  br i1 %8185, label %block_40e3b9, label %block_.L_40e3ca

block_40e3b9:                                     ; preds = %block_.L_40e3a3
  %8190 = add i64 %8174, -508
  %8191 = add i64 %8189, 6
  store i64 %8191, i64* %3, align 8
  %8192 = inttoptr i64 %8190 to i32*
  %8193 = load i32, i32* %8192, align 4
  %8194 = zext i32 %8193 to i64
  store i64 %8194, i64* %RAX.i1862, align 8
  %8195 = add i64 %8174, -668
  %8196 = add i64 %8189, 12
  store i64 %8196, i64* %3, align 8
  %8197 = inttoptr i64 %8195 to i32*
  store i32 %8193, i32* %8197, align 4
  %8198 = load i64, i64* %3, align 8
  %8199 = add i64 %8198, 17
  store i64 %8199, i64* %3, align 8
  br label %block_.L_40e3d6

block_.L_40e3ca:                                  ; preds = %block_.L_40e3a3
  %8200 = add i64 %8174, -512
  %8201 = add i64 %8189, 6
  store i64 %8201, i64* %3, align 8
  %8202 = inttoptr i64 %8200 to i32*
  %8203 = load i32, i32* %8202, align 4
  %8204 = zext i32 %8203 to i64
  store i64 %8204, i64* %RAX.i1862, align 8
  %8205 = add i64 %8174, -668
  %8206 = add i64 %8189, 12
  store i64 %8206, i64* %3, align 8
  %8207 = inttoptr i64 %8205 to i32*
  store i32 %8203, i32* %8207, align 4
  %.pre348 = load i64, i64* %3, align 8
  br label %block_.L_40e3d6

block_.L_40e3d6:                                  ; preds = %block_.L_40e3ca, %block_40e3b9
  %8208 = phi i64 [ %.pre348, %block_.L_40e3ca ], [ %8199, %block_40e3b9 ]
  %8209 = load i64, i64* %RBP.i, align 8
  %8210 = add i64 %8209, -668
  %8211 = add i64 %8208, 6
  store i64 %8211, i64* %3, align 8
  %8212 = inttoptr i64 %8210 to i32*
  %8213 = load i32, i32* %8212, align 4
  %8214 = zext i32 %8213 to i64
  store i64 %8214, i64* %RAX.i1862, align 8
  %8215 = add i64 %8209, -56
  %8216 = add i64 %8208, 9
  store i64 %8216, i64* %3, align 8
  %8217 = inttoptr i64 %8215 to i32*
  store i32 %8213, i32* %8217, align 4
  %.pre349 = load i64, i64* %3, align 8
  br label %block_.L_40e3df

block_.L_40e3df:                                  ; preds = %block_.L_40e3d6, %block_40e362
  %8218 = phi i64 [ %.pre349, %block_.L_40e3d6 ], [ %8138, %block_40e362 ]
  %8219 = add i64 %8218, 5
  store i64 %8219, i64* %3, align 8
  br label %block_.L_40e3e4

block_.L_40e3e4:                                  ; preds = %block_.L_40e3df, %block_.L_40e342
  %storemerge127 = phi i64 [ %8089, %block_.L_40e342 ], [ %8219, %block_.L_40e3df ]
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.26, %block_.L_40e342 ], [ %7057, %block_.L_40e3df ]
  %8220 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %8220, i64* %RAX.i1862, align 8
  %8221 = add i64 %8220, 2356
  %8222 = add i64 %storemerge127, 15
  store i64 %8222, i64* %3, align 8
  %8223 = inttoptr i64 %8221 to i32*
  %8224 = load i32, i32* %8223, align 4
  store i8 0, i8* %14, align 1
  %8225 = and i32 %8224, 255
  %8226 = tail call i32 @llvm.ctpop.i32(i32 %8225)
  %8227 = trunc i32 %8226 to i8
  %8228 = and i8 %8227, 1
  %8229 = xor i8 %8228, 1
  store i8 %8229, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8230 = icmp eq i32 %8224, 0
  %8231 = zext i1 %8230 to i8
  store i8 %8231, i8* %30, align 1
  %8232 = lshr i32 %8224, 31
  %8233 = trunc i32 %8232 to i8
  store i8 %8233, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v412 = select i1 %8230, i64 21, i64 64
  %8234 = add i64 %storemerge127, %.v412
  store i64 %8234, i64* %3, align 8
  br i1 %8230, label %block_40e3f9, label %block_.L_40e424

block_40e3f9:                                     ; preds = %block_.L_40e3e4
  %8235 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8235, i64* %RAX.i1862, align 8
  %8236 = add i64 %8235, 40
  %8237 = add i64 %8234, 12
  store i64 %8237, i64* %3, align 8
  %8238 = inttoptr i64 %8236 to i32*
  %8239 = load i32, i32* %8238, align 4
  %8240 = add i32 %8239, -4
  %8241 = icmp ult i32 %8239, 4
  %8242 = zext i1 %8241 to i8
  store i8 %8242, i8* %14, align 1
  %8243 = and i32 %8240, 255
  %8244 = tail call i32 @llvm.ctpop.i32(i32 %8243)
  %8245 = trunc i32 %8244 to i8
  %8246 = and i8 %8245, 1
  %8247 = xor i8 %8246, 1
  store i8 %8247, i8* %21, align 1
  %8248 = xor i32 %8240, %8239
  %8249 = lshr i32 %8248, 4
  %8250 = trunc i32 %8249 to i8
  %8251 = and i8 %8250, 1
  store i8 %8251, i8* %27, align 1
  %8252 = icmp eq i32 %8240, 0
  %8253 = zext i1 %8252 to i8
  store i8 %8253, i8* %30, align 1
  %8254 = lshr i32 %8240, 31
  %8255 = trunc i32 %8254 to i8
  store i8 %8255, i8* %33, align 1
  %8256 = lshr i32 %8239, 31
  %8257 = xor i32 %8254, %8256
  %8258 = add nuw nsw i32 %8257, %8256
  %8259 = icmp eq i32 %8258, 2
  %8260 = zext i1 %8259 to i8
  store i8 %8260, i8* %39, align 1
  %8261 = icmp ne i8 %8255, 0
  %8262 = xor i1 %8261, %8259
  %.v415 = select i1 %8262, i64 18, i64 43
  %8263 = add i64 %8234, %.v415
  store i64 %8263, i64* %3, align 8
  br i1 %8262, label %block_40e40b, label %block_.L_40e424

block_40e40b:                                     ; preds = %block_40e3f9
  %8264 = load i64, i64* %RBP.i, align 8
  %8265 = add i64 %8264, -60
  %8266 = add i64 %8263, 7
  store i64 %8266, i64* %3, align 8
  %8267 = inttoptr i64 %8265 to i32*
  %8268 = load i32, i32* %8267, align 4
  %8269 = add i32 %8268, -2063
  %8270 = icmp ult i32 %8268, 2063
  %8271 = zext i1 %8270 to i8
  store i8 %8271, i8* %14, align 1
  %8272 = and i32 %8269, 255
  %8273 = tail call i32 @llvm.ctpop.i32(i32 %8272)
  %8274 = trunc i32 %8273 to i8
  %8275 = and i8 %8274, 1
  %8276 = xor i8 %8275, 1
  store i8 %8276, i8* %21, align 1
  %8277 = xor i32 %8269, %8268
  %8278 = lshr i32 %8277, 4
  %8279 = trunc i32 %8278 to i8
  %8280 = and i8 %8279, 1
  store i8 %8280, i8* %27, align 1
  %8281 = icmp eq i32 %8269, 0
  %8282 = zext i1 %8281 to i8
  store i8 %8282, i8* %30, align 1
  %8283 = lshr i32 %8269, 31
  %8284 = trunc i32 %8283 to i8
  store i8 %8284, i8* %33, align 1
  %8285 = lshr i32 %8268, 31
  %8286 = xor i32 %8283, %8285
  %8287 = add nuw nsw i32 %8286, %8285
  %8288 = icmp eq i32 %8287, 2
  %8289 = zext i1 %8288 to i8
  store i8 %8289, i8* %39, align 1
  %8290 = icmp ne i8 %8284, 0
  %8291 = xor i1 %8290, %8288
  %8292 = or i1 %8281, %8291
  %.v416 = select i1 %8292, i64 20, i64 13
  %8293 = add i64 %8263, %.v416
  store i64 %8293, i64* %3, align 8
  br i1 %8292, label %block_.L_40e41f, label %block_40e418

block_40e418:                                     ; preds = %block_40e40b
  %8294 = add i64 %8293, 7
  store i64 %8294, i64* %3, align 8
  store i32 2063, i32* %8267, align 4
  %.pre350 = load i64, i64* %3, align 8
  br label %block_.L_40e41f

block_.L_40e41f:                                  ; preds = %block_40e418, %block_40e40b
  %8295 = phi i64 [ %.pre350, %block_40e418 ], [ %8293, %block_40e40b ]
  %8296 = add i64 %8295, 5
  store i64 %8296, i64* %3, align 8
  br label %block_.L_40e424

block_.L_40e424:                                  ; preds = %block_.L_40e3e4, %block_40e3f9, %block_.L_40e41f
  %8297 = phi i64 [ %8263, %block_40e3f9 ], [ %8296, %block_.L_40e41f ], [ %8234, %block_.L_40e3e4 ]
  %8298 = load i64, i64* %RBP.i, align 8
  %8299 = add i64 %8298, -60
  %8300 = add i64 %8297, 4
  store i64 %8300, i64* %3, align 8
  %8301 = inttoptr i64 %8299 to i32*
  %8302 = load i32, i32* %8301, align 4
  store i8 0, i8* %14, align 1
  %8303 = and i32 %8302, 255
  %8304 = tail call i32 @llvm.ctpop.i32(i32 %8303)
  %8305 = trunc i32 %8304 to i8
  %8306 = and i8 %8305, 1
  %8307 = xor i8 %8306, 1
  store i8 %8307, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8308 = icmp eq i32 %8302, 0
  %8309 = zext i1 %8308 to i8
  store i8 %8309, i8* %30, align 1
  %8310 = lshr i32 %8302, 31
  %8311 = trunc i32 %8310 to i8
  store i8 %8311, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v413 = select i1 %8308, i64 227, i64 10
  %8312 = add i64 %8297, %.v413
  store i64 %8312, i64* %3, align 8
  br i1 %8308, label %block_.L_40e507, label %block_40e42e

block_40e42e:                                     ; preds = %block_.L_40e424
  store i64 1, i64* %RAX.i1862, align 8
  store i64 983040, i64* %RCX.i2028, align 8
  %8313 = add i64 %8298, -4
  %8314 = add i64 %8312, 13
  store i64 %8314, i64* %3, align 8
  %8315 = inttoptr i64 %8313 to i32*
  %8316 = load i32, i32* %8315, align 4
  %8317 = shl i32 %8316, 2
  %8318 = zext i32 %8317 to i64
  store i64 %8318, i64* %RDX.i4840, align 8
  %8319 = lshr i32 %8316, 30
  %8320 = trunc i32 %8319 to i8
  %8321 = and i8 %8320, 1
  store i8 %8321, i8* %14, align 1
  %8322 = and i32 %8317, 252
  %8323 = tail call i32 @llvm.ctpop.i32(i32 %8322)
  %8324 = trunc i32 %8323 to i8
  %8325 = and i8 %8324, 1
  %8326 = xor i8 %8325, 1
  store i8 %8326, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8327 = icmp eq i32 %8317, 0
  %8328 = zext i1 %8327 to i8
  store i8 %8328, i8* %30, align 1
  %8329 = lshr i32 %8316, 29
  %8330 = trunc i32 %8329 to i8
  %8331 = and i8 %8330, 1
  store i8 %8331, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8332 = add i64 %8298, -672
  %8333 = add i64 %8312, 22
  store i64 %8333, i64* %3, align 8
  %8334 = inttoptr i64 %8332 to i32*
  store i32 983040, i32* %8334, align 4
  %8335 = load i32, i32* %612, align 4
  %8336 = zext i32 %8335 to i64
  %8337 = load i64, i64* %3, align 8
  store i64 %8336, i64* %RCX.i2028, align 8
  %8338 = load i64, i64* %RBP.i, align 8
  %8339 = add i64 %8338, -672
  %8340 = add i64 %8337, 8
  store i64 %8340, i64* %3, align 8
  %8341 = inttoptr i64 %8339 to i32*
  %8342 = load i32, i32* %8341, align 4
  %8343 = zext i32 %8342 to i64
  store i64 %8343, i64* %RDX.i4840, align 8
  %8344 = add i64 %8337, 10
  store i64 %8344, i64* %3, align 8
  %8345 = trunc i32 %8335 to i5
  switch i5 %8345, label %8351 [
    i5 0, label %routine_shll__cl___edx.exit
    i5 1, label %8346
  ]

; <label>:8346:                                   ; preds = %block_40e42e
  %8347 = shl i32 %8342, 1
  %8348 = icmp slt i32 %8342, 0
  %8349 = icmp slt i32 %8347, 0
  %8350 = xor i1 %8348, %8349
  br label %8360

; <label>:8351:                                   ; preds = %block_40e42e
  %8352 = and i32 %8335, 31
  %8353 = zext i32 %8352 to i64
  %8354 = add nuw nsw i64 %8353, 4294967295
  %8355 = and i64 %8354, 4294967295
  %8356 = shl i64 %8343, %8355
  %8357 = trunc i64 %8356 to i32
  %8358 = icmp slt i32 %8357, 0
  %8359 = shl i32 %8357, 1
  br label %8360

; <label>:8360:                                   ; preds = %8351, %8346
  %8361 = phi i1 [ %8348, %8346 ], [ %8358, %8351 ]
  %8362 = phi i1 [ %8350, %8346 ], [ false, %8351 ]
  %8363 = phi i32 [ %8347, %8346 ], [ %8359, %8351 ]
  %8364 = zext i32 %8363 to i64
  store i64 %8364, i64* %RDX.i4840, align 8
  %8365 = zext i1 %8361 to i8
  store i8 %8365, i8* %14, align 1
  %8366 = and i32 %8363, 254
  %8367 = tail call i32 @llvm.ctpop.i32(i32 %8366)
  %8368 = trunc i32 %8367 to i8
  %8369 = and i8 %8368, 1
  %8370 = xor i8 %8369, 1
  store i8 %8370, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8371 = icmp eq i32 %8363, 0
  %8372 = zext i1 %8371 to i8
  store i8 %8372, i8* %30, align 1
  %8373 = lshr i32 %8363, 31
  %8374 = trunc i32 %8373 to i8
  store i8 %8374, i8* %33, align 1
  %8375 = zext i1 %8362 to i8
  store i8 %8375, i8* %39, align 1
  br label %routine_shll__cl___edx.exit

routine_shll__cl___edx.exit:                      ; preds = %8360, %block_40e42e
  %8376 = phi i32 [ %8363, %8360 ], [ %8342, %block_40e42e ]
  %8377 = sext i32 %8376 to i64
  store i64 %8377, i64* %RSI.i2426, align 8
  %8378 = add i64 %8338, -440
  %8379 = add i64 %8337, 20
  store i64 %8379, i64* %3, align 8
  %8380 = inttoptr i64 %8378 to i64*
  %8381 = load i64, i64* %8380, align 8
  store i64 %8381, i64* %RDI.i3890, align 8
  %8382 = add i64 %8381, 464
  %8383 = add i64 %8337, 27
  store i64 %8383, i64* %3, align 8
  %8384 = inttoptr i64 %8382 to i64*
  %8385 = load i64, i64* %8384, align 8
  %8386 = or i64 %8385, %8377
  store i64 %8386, i64* %RSI.i2426, align 8
  store i8 0, i8* %14, align 1
  %8387 = trunc i64 %8386 to i32
  %8388 = and i32 %8387, 255
  %8389 = tail call i32 @llvm.ctpop.i32(i32 %8388)
  %8390 = trunc i32 %8389 to i8
  %8391 = and i8 %8390, 1
  %8392 = xor i8 %8391, 1
  store i8 %8392, i8* %21, align 1
  %8393 = icmp eq i64 %8386, 0
  %8394 = zext i1 %8393 to i8
  store i8 %8394, i8* %30, align 1
  %8395 = lshr i64 %8386, 63
  %8396 = trunc i64 %8395 to i8
  store i8 %8396, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8397 = add i64 %8337, 34
  store i64 %8397, i64* %3, align 8
  store i64 %8386, i64* %8384, align 8
  %8398 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %8399 = load i64, i64* %RBP.i, align 8
  %8400 = add i64 %8399, -8
  %8401 = load i64, i64* %3, align 8
  %8402 = add i64 %8401, 3
  store i64 %8402, i64* %3, align 8
  %8403 = inttoptr i64 %8400 to i32*
  %8404 = load i32, i32* %8403, align 4
  %8405 = sub i32 %8398, %8404
  %8406 = icmp ult i32 %8398, %8404
  %8407 = zext i1 %8406 to i8
  store i8 %8407, i8* %14, align 1
  %8408 = and i32 %8405, 255
  %8409 = tail call i32 @llvm.ctpop.i32(i32 %8408)
  %8410 = trunc i32 %8409 to i8
  %8411 = and i8 %8410, 1
  %8412 = xor i8 %8411, 1
  store i8 %8412, i8* %21, align 1
  %8413 = xor i32 %8404, %8398
  %8414 = xor i32 %8413, %8405
  %8415 = lshr i32 %8414, 4
  %8416 = trunc i32 %8415 to i8
  %8417 = and i8 %8416, 1
  store i8 %8417, i8* %27, align 1
  %8418 = icmp eq i32 %8405, 0
  %8419 = zext i1 %8418 to i8
  store i8 %8419, i8* %30, align 1
  %8420 = lshr i32 %8405, 31
  %8421 = trunc i32 %8420 to i8
  store i8 %8421, i8* %33, align 1
  %8422 = lshr i32 %8398, 31
  %8423 = lshr i32 %8404, 31
  %8424 = xor i32 %8423, %8422
  %8425 = xor i32 %8420, %8422
  %8426 = add nuw nsw i32 %8425, %8424
  %8427 = icmp eq i32 %8426, 2
  %8428 = zext i1 %8427 to i8
  store i8 %8428, i8* %39, align 1
  %8429 = icmp ne i8 %8421, 0
  %8430 = xor i1 %8429, %8427
  %8431 = or i1 %8418, %8430
  %.v414 = select i1 %8431, i64 25, i64 9
  %8432 = add i64 %8401, %.v414
  store i64 %8432, i64* %3, align 8
  br i1 %8431, label %block_.L_40e47f, label %block_40e46f

block_40e46f:                                     ; preds = %routine_shll__cl___edx.exit
  store i64 1, i64* %RAX.i1862, align 8
  %8433 = add i64 %8399, -676
  %8434 = add i64 %8432, 11
  store i64 %8434, i64* %3, align 8
  %8435 = inttoptr i64 %8433 to i32*
  store i32 1, i32* %8435, align 4
  %8436 = load i64, i64* %3, align 8
  %8437 = add i64 %8436, 14
  store i64 %8437, i64* %3, align 8
  br label %block_.L_40e488

block_.L_40e47f:                                  ; preds = %routine_shll__cl___edx.exit
  %8438 = add i64 %8432, 3
  store i64 %8438, i64* %3, align 8
  %8439 = load i32, i32* %8403, align 4
  %8440 = zext i32 %8439 to i64
  store i64 %8440, i64* %RAX.i1862, align 8
  %8441 = add i64 %8399, -676
  %8442 = add i64 %8432, 9
  store i64 %8442, i64* %3, align 8
  %8443 = inttoptr i64 %8441 to i32*
  store i32 %8439, i32* %8443, align 4
  %.pre351 = load i64, i64* %3, align 8
  br label %block_.L_40e488

block_.L_40e488:                                  ; preds = %block_.L_40e47f, %block_40e46f
  %8444 = phi i64 [ %.pre351, %block_.L_40e47f ], [ %8437, %block_40e46f ]
  %8445 = load i64, i64* %RBP.i, align 8
  %8446 = add i64 %8445, -676
  %8447 = add i64 %8444, 6
  store i64 %8447, i64* %3, align 8
  %8448 = inttoptr i64 %8446 to i32*
  %8449 = load i32, i32* %8448, align 4
  %8450 = zext i32 %8449 to i64
  store i64 %8450, i64* %RAX.i1862, align 8
  %8451 = add i64 %8445, -8
  %8452 = add i64 %8444, 9
  store i64 %8452, i64* %3, align 8
  %8453 = inttoptr i64 %8451 to i32*
  store i32 %8449, i32* %8453, align 4
  %8454 = load i64, i64* %RBP.i, align 8
  %8455 = add i64 %8454, -60
  %8456 = load i64, i64* %3, align 8
  %8457 = add i64 %8456, 3
  store i64 %8457, i64* %3, align 8
  %8458 = inttoptr i64 %8455 to i32*
  %8459 = load i32, i32* %8458, align 4
  %8460 = zext i32 %8459 to i64
  store i64 %8460, i64* %RDI.i3890, align 8
  %8461 = add i64 %8454, -56
  %8462 = add i64 %8456, 6
  store i64 %8462, i64* %3, align 8
  %8463 = inttoptr i64 %8461 to i32*
  %8464 = load i32, i32* %8463, align 4
  %8465 = zext i32 %8464 to i64
  store i64 %8465, i64* %RSI.i2426, align 8
  %8466 = add i64 %8456, 421055
  %8467 = add i64 %8456, 11
  %8468 = load i64, i64* %6, align 8
  %8469 = add i64 %8468, -8
  %8470 = inttoptr i64 %8469 to i64*
  store i64 %8467, i64* %8470, align 8
  store i64 %8469, i64* %6, align 8
  store i64 %8466, i64* %3, align 8
  %call2_40e497 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %8466, %struct.Memory* %MEMORY.32)
  %8471 = load i64, i64* %RBP.i, align 8
  %8472 = add i64 %8471, -480
  %8473 = load i64, i64* %3, align 8
  %8474 = add i64 %8473, 7
  store i64 %8474, i64* %3, align 8
  %8475 = inttoptr i64 %8472 to i64*
  %8476 = load i64, i64* %8475, align 8
  store i64 %8476, i64* %RCX.i2028, align 8
  %8477 = add i64 %8471, -64
  %8478 = add i64 %8473, 11
  store i64 %8478, i64* %3, align 8
  %8479 = inttoptr i64 %8477 to i32*
  %8480 = load i32, i32* %8479, align 4
  %8481 = sext i32 %8480 to i64
  store i64 %8481, i64* %RDX.i4840, align 8
  %8482 = shl nsw i64 %8481, 2
  %8483 = add i64 %8482, %8476
  %8484 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %8485 = add i64 %8473, 14
  store i64 %8485, i64* %3, align 8
  %8486 = inttoptr i64 %8483 to i32*
  store i32 %8484, i32* %8486, align 4
  %8487 = load i64, i64* %RBP.i, align 8
  %8488 = add i64 %8487, -68
  %8489 = load i64, i64* %3, align 8
  %8490 = add i64 %8489, 3
  store i64 %8490, i64* %3, align 8
  %8491 = inttoptr i64 %8488 to i32*
  %8492 = load i32, i32* %8491, align 4
  %8493 = zext i32 %8492 to i64
  store i64 %8493, i64* %RAX.i1862, align 8
  %8494 = add i64 %8487, -488
  %8495 = add i64 %8489, 10
  store i64 %8495, i64* %3, align 8
  %8496 = inttoptr i64 %8494 to i64*
  %8497 = load i64, i64* %8496, align 8
  store i64 %8497, i64* %RCX.i2028, align 8
  %8498 = add i64 %8487, -64
  %8499 = add i64 %8489, 14
  store i64 %8499, i64* %3, align 8
  %8500 = inttoptr i64 %8498 to i32*
  %8501 = load i32, i32* %8500, align 4
  %8502 = sext i32 %8501 to i64
  store i64 %8502, i64* %RDX.i4840, align 8
  %8503 = shl nsw i64 %8502, 2
  %8504 = add i64 %8503, %8497
  %8505 = add i64 %8489, 17
  store i64 %8505, i64* %3, align 8
  %8506 = inttoptr i64 %8504 to i32*
  store i32 %8492, i32* %8506, align 4
  %8507 = load i64, i64* %RBP.i, align 8
  %8508 = add i64 %8507, -64
  %8509 = load i64, i64* %3, align 8
  %8510 = add i64 %8509, 3
  store i64 %8510, i64* %3, align 8
  %8511 = inttoptr i64 %8508 to i32*
  %8512 = load i32, i32* %8511, align 4
  %8513 = add i32 %8512, 1
  %8514 = zext i32 %8513 to i64
  store i64 %8514, i64* %RAX.i1862, align 8
  %8515 = icmp eq i32 %8512, -1
  %8516 = icmp eq i32 %8513, 0
  %8517 = or i1 %8515, %8516
  %8518 = zext i1 %8517 to i8
  store i8 %8518, i8* %14, align 1
  %8519 = and i32 %8513, 255
  %8520 = tail call i32 @llvm.ctpop.i32(i32 %8519)
  %8521 = trunc i32 %8520 to i8
  %8522 = and i8 %8521, 1
  %8523 = xor i8 %8522, 1
  store i8 %8523, i8* %21, align 1
  %8524 = xor i32 %8513, %8512
  %8525 = lshr i32 %8524, 4
  %8526 = trunc i32 %8525 to i8
  %8527 = and i8 %8526, 1
  store i8 %8527, i8* %27, align 1
  %8528 = zext i1 %8516 to i8
  store i8 %8528, i8* %30, align 1
  %8529 = lshr i32 %8513, 31
  %8530 = trunc i32 %8529 to i8
  store i8 %8530, i8* %33, align 1
  %8531 = lshr i32 %8512, 31
  %8532 = xor i32 %8529, %8531
  %8533 = add nuw nsw i32 %8532, %8529
  %8534 = icmp eq i32 %8533, 2
  %8535 = zext i1 %8534 to i8
  store i8 %8535, i8* %39, align 1
  %8536 = add i64 %8509, 9
  store i64 %8536, i64* %3, align 8
  store i32 %8513, i32* %8511, align 4
  %8537 = load i64, i64* %RBP.i, align 8
  %8538 = add i64 %8537, -68
  %8539 = load i64, i64* %3, align 8
  %8540 = add i64 %8539, 7
  store i64 %8540, i64* %3, align 8
  %8541 = inttoptr i64 %8538 to i32*
  store i32 -1, i32* %8541, align 4
  %8542 = load i64, i64* %RBP.i, align 8
  %8543 = add i64 %8542, -60
  %8544 = load i64, i64* %3, align 8
  %8545 = add i64 %8544, 3
  store i64 %8545, i64* %3, align 8
  %8546 = inttoptr i64 %8543 to i32*
  %8547 = load i32, i32* %8546, align 4
  %8548 = zext i32 %8547 to i64
  store i64 %8548, i64* %RDI.i3890, align 8
  %8549 = add i64 %8542, -56
  %8550 = add i64 %8544, 6
  store i64 %8550, i64* %3, align 8
  %8551 = inttoptr i64 %8549 to i32*
  %8552 = load i32, i32* %8551, align 4
  %8553 = zext i32 %8552 to i64
  store i64 %8553, i64* %RSI.i2426, align 8
  %8554 = add i64 %8544, 420997
  %8555 = add i64 %8544, 11
  %8556 = load i64, i64* %6, align 8
  %8557 = add i64 %8556, -8
  %8558 = inttoptr i64 %8557 to i64*
  store i64 %8555, i64* %8558, align 8
  store i64 %8557, i64* %6, align 8
  store i64 %8554, i64* %3, align 8
  %call2_40e4d1 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %8554, %struct.Memory* %call2_40e497)
  %8559 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %RCX.i2028, align 8
  %8560 = load i64, i64* %RBP.i, align 8
  %8561 = add i64 %8560, -448
  %8562 = add i64 %8559, 17
  store i64 %8562, i64* %3, align 8
  %8563 = inttoptr i64 %8561 to i32*
  %8564 = load i32, i32* %8563, align 4
  %8565 = sext i32 %8564 to i64
  %8566 = shl nsw i64 %8565, 6
  store i64 %8566, i64* %RDX.i4840, align 8
  %8567 = add i64 %8566, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %8567, i64* %RCX.i2028, align 8
  %8568 = icmp ult i64 %8567, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %8569 = icmp ult i64 %8567, %8566
  %8570 = or i1 %8568, %8569
  %8571 = zext i1 %8570 to i8
  store i8 %8571, i8* %14, align 1
  %8572 = trunc i64 %8567 to i32
  %8573 = and i32 %8572, 248
  %8574 = tail call i32 @llvm.ctpop.i32(i32 %8573)
  %8575 = trunc i32 %8574 to i8
  %8576 = and i8 %8575, 1
  %8577 = xor i8 %8576, 1
  store i8 %8577, i8* %21, align 1
  %8578 = xor i64 %8567, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %8579 = lshr i64 %8578, 4
  %8580 = trunc i64 %8579 to i8
  %8581 = and i8 %8580, 1
  store i8 %8581, i8* %27, align 1
  %8582 = icmp eq i64 %8567, 0
  %8583 = zext i1 %8582 to i8
  store i8 %8583, i8* %30, align 1
  %8584 = lshr i64 %8567, 63
  %8585 = trunc i64 %8584 to i8
  store i8 %8585, i8* %33, align 1
  %8586 = lshr i64 %8565, 57
  %8587 = and i64 %8586, 1
  %8588 = xor i64 %8584, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %8589 = xor i64 %8584, %8587
  %8590 = add nuw nsw i64 %8588, %8589
  %8591 = icmp eq i64 %8590, 2
  %8592 = zext i1 %8591 to i8
  store i8 %8592, i8* %39, align 1
  %8593 = load i64, i64* %RAX.i1862, align 8
  %8594 = inttoptr i64 %8567 to i32*
  %8595 = add i64 %8559, 27
  store i64 %8595, i64* %3, align 8
  %8596 = load i32, i32* %8594, align 8
  %8597 = shl i64 %8593, 32
  %8598 = ashr exact i64 %8597, 32
  %8599 = sext i32 %8596 to i64
  %8600 = mul nsw i64 %8599, %8598
  %8601 = load i32, i32* bitcast (%G_0x4b2a50_type* @G_0x4b2a50 to i32*), align 8
  %8602 = shl i64 %8600, 32
  %8603 = ashr exact i64 %8602, 32
  %8604 = sext i32 %8601 to i64
  %8605 = mul nsw i64 %8604, %8603
  %8606 = trunc i64 %8605 to i32
  %8607 = and i64 %8605, 4294967295
  store i64 %8607, i64* %RAX.i1862, align 8
  %8608 = shl i64 %8605, 32
  %8609 = ashr exact i64 %8608, 32
  %8610 = icmp ne i64 %8609, %8605
  %8611 = zext i1 %8610 to i8
  store i8 %8611, i8* %14, align 1
  %8612 = and i32 %8606, 255
  %8613 = tail call i32 @llvm.ctpop.i32(i32 %8612)
  %8614 = trunc i32 %8613 to i8
  %8615 = and i8 %8614, 1
  %8616 = xor i8 %8615, 1
  store i8 %8616, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %8617 = lshr i32 %8606, 31
  %8618 = trunc i32 %8617 to i8
  store i8 %8618, i8* %33, align 1
  store i8 %8611, i8* %39, align 1
  %8619 = load i64, i64* %RBP.i, align 8
  %8620 = add i64 %8619, -444
  %8621 = add i64 %8559, 41
  store i64 %8621, i64* %3, align 8
  %8622 = inttoptr i64 %8620 to i32*
  %8623 = load i32, i32* %8622, align 4
  %8624 = zext i32 %8623 to i64
  store i64 %8624, i64* %RCX.i2028, align 8
  %8625 = add i64 %8559, 43
  store i64 %8625, i64* %3, align 8
  %8626 = trunc i32 %8623 to i5
  switch i5 %8626, label %8633 [
    i5 0, label %routine_shll__cl___eax.exit2453
    i5 1, label %8627
  ]

; <label>:8627:                                   ; preds = %block_.L_40e488
  %8628 = trunc i64 %8605 to i32
  %8629 = shl i32 %8628, 1
  %8630 = icmp slt i32 %8628, 0
  %8631 = icmp slt i32 %8629, 0
  %8632 = xor i1 %8630, %8631
  br label %8642

; <label>:8633:                                   ; preds = %block_.L_40e488
  %8634 = and i32 %8623, 31
  %8635 = zext i32 %8634 to i64
  %8636 = add nuw nsw i64 %8635, 4294967295
  %8637 = and i64 %8636, 4294967295
  %8638 = shl i64 %8607, %8637
  %8639 = trunc i64 %8638 to i32
  %8640 = icmp slt i32 %8639, 0
  %8641 = shl i32 %8639, 1
  br label %8642

; <label>:8642:                                   ; preds = %8633, %8627
  %8643 = phi i1 [ %8630, %8627 ], [ %8640, %8633 ]
  %8644 = phi i1 [ %8632, %8627 ], [ false, %8633 ]
  %8645 = phi i32 [ %8629, %8627 ], [ %8641, %8633 ]
  %8646 = zext i32 %8645 to i64
  store i64 %8646, i64* %RAX.i1862, align 8
  %8647 = zext i1 %8643 to i8
  store i8 %8647, i8* %14, align 1
  %8648 = and i32 %8645, 254
  %8649 = tail call i32 @llvm.ctpop.i32(i32 %8648)
  %8650 = trunc i32 %8649 to i8
  %8651 = and i8 %8650, 1
  %8652 = xor i8 %8651, 1
  store i8 %8652, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8653 = icmp eq i32 %8645, 0
  %8654 = zext i1 %8653 to i8
  store i8 %8654, i8* %30, align 1
  %8655 = lshr i32 %8645, 31
  %8656 = trunc i32 %8655 to i8
  store i8 %8656, i8* %33, align 1
  %8657 = zext i1 %8644 to i8
  store i8 %8657, i8* %39, align 1
  br label %routine_shll__cl___eax.exit2453

routine_shll__cl___eax.exit2453:                  ; preds = %8642, %block_.L_40e488
  %8658 = phi i64 [ %8646, %8642 ], [ %8607, %block_.L_40e488 ]
  %8659 = shl nuw i64 %8658, 32
  %8660 = ashr i64 %8659, 36
  %8661 = lshr i64 %8660, 1
  %8662 = trunc i64 %8660 to i8
  %8663 = and i8 %8662, 1
  %8664 = trunc i64 %8661 to i32
  %8665 = and i64 %8661, 4294967295
  store i64 %8665, i64* %RAX.i1862, align 8
  store i8 %8663, i8* %14, align 1
  %8666 = and i32 %8664, 255
  %8667 = tail call i32 @llvm.ctpop.i32(i32 %8666)
  %8668 = trunc i32 %8667 to i8
  %8669 = and i8 %8668, 1
  %8670 = xor i8 %8669, 1
  store i8 %8670, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8671 = icmp eq i32 %8664, 0
  %8672 = zext i1 %8671 to i8
  store i8 %8672, i8* %30, align 1
  %8673 = lshr i64 %8660, 32
  %8674 = trunc i64 %8673 to i8
  %8675 = and i8 %8674, 1
  store i8 %8675, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8676 = add i64 %8619, -28
  %8677 = trunc i64 %8661 to i32
  %8678 = add i64 %8559, 49
  store i64 %8678, i64* %3, align 8
  %8679 = inttoptr i64 %8676 to i32*
  store i32 %8677, i32* %8679, align 4
  %.pre352 = load i64, i64* %RBP.i, align 8
  %.pre353 = load i64, i64* %3, align 8
  br label %block_.L_40e507

block_.L_40e507:                                  ; preds = %routine_shll__cl___eax.exit2453, %block_.L_40e424
  %8680 = phi i64 [ %8312, %block_.L_40e424 ], [ %.pre353, %routine_shll__cl___eax.exit2453 ]
  %8681 = phi i64 [ %8298, %block_.L_40e424 ], [ %.pre352, %routine_shll__cl___eax.exit2453 ]
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.32, %block_.L_40e424 ], [ %call2_40e4d1, %routine_shll__cl___eax.exit2453 ]
  %8682 = add i64 %8681, -48
  %8683 = add i64 %8680, 4
  store i64 %8683, i64* %3, align 8
  %8684 = inttoptr i64 %8682 to i32*
  %8685 = load i32, i32* %8684, align 4
  %8686 = sext i32 %8685 to i64
  store i64 %8686, i64* %RAX.i1862, align 8
  %8687 = shl nsw i64 %8686, 2
  %8688 = add i64 %8681, -432
  %8689 = add i64 %8688, %8687
  %8690 = add i64 %8680, 11
  store i64 %8690, i64* %3, align 8
  %8691 = inttoptr i64 %8689 to i32*
  %8692 = load i32, i32* %8691, align 4
  %8693 = zext i32 %8692 to i64
  store i64 %8693, i64* %RCX.i2028, align 8
  %8694 = add i64 %8681, -28
  %8695 = add i64 %8680, 14
  store i64 %8695, i64* %3, align 8
  %8696 = inttoptr i64 %8694 to i32*
  %8697 = load i32, i32* %8696, align 4
  %8698 = add i32 %8697, %8692
  %8699 = zext i32 %8698 to i64
  store i64 %8699, i64* %RCX.i2028, align 8
  %8700 = icmp ult i32 %8698, %8692
  %8701 = icmp ult i32 %8698, %8697
  %8702 = or i1 %8700, %8701
  %8703 = zext i1 %8702 to i8
  store i8 %8703, i8* %14, align 1
  %8704 = and i32 %8698, 255
  %8705 = tail call i32 @llvm.ctpop.i32(i32 %8704)
  %8706 = trunc i32 %8705 to i8
  %8707 = and i8 %8706, 1
  %8708 = xor i8 %8707, 1
  store i8 %8708, i8* %21, align 1
  %8709 = xor i32 %8697, %8692
  %8710 = xor i32 %8709, %8698
  %8711 = lshr i32 %8710, 4
  %8712 = trunc i32 %8711 to i8
  %8713 = and i8 %8712, 1
  store i8 %8713, i8* %27, align 1
  %8714 = icmp eq i32 %8698, 0
  %8715 = zext i1 %8714 to i8
  store i8 %8715, i8* %30, align 1
  %8716 = lshr i32 %8698, 31
  %8717 = trunc i32 %8716 to i8
  store i8 %8717, i8* %33, align 1
  %8718 = lshr i32 %8692, 31
  %8719 = lshr i32 %8697, 31
  %8720 = xor i32 %8716, %8718
  %8721 = xor i32 %8716, %8719
  %8722 = add nuw nsw i32 %8720, %8721
  %8723 = icmp eq i32 %8722, 2
  %8724 = zext i1 %8723 to i8
  store i8 %8724, i8* %39, align 1
  %8725 = add i64 %8680, 17
  store i64 %8725, i64* %3, align 8
  store i32 %8698, i32* %8696, align 4
  %8726 = load i64, i64* %RBP.i, align 8
  %8727 = add i64 %8726, -28
  %8728 = load i64, i64* %3, align 8
  %8729 = add i64 %8728, 3
  store i64 %8729, i64* %3, align 8
  %8730 = inttoptr i64 %8727 to i32*
  %8731 = load i32, i32* %8730, align 4
  %8732 = zext i32 %8731 to i64
  store i64 %8732, i64* %RDI.i3890, align 8
  %8733 = add i64 %8728, -54552
  %8734 = add i64 %8728, 8
  %8735 = load i64, i64* %6, align 8
  %8736 = add i64 %8735, -8
  %8737 = inttoptr i64 %8736 to i64*
  store i64 %8734, i64* %8737, align 8
  store i64 %8736, i64* %6, align 8
  store i64 %8733, i64* %3, align 8
  %8738 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.36)
  %8739 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RDX.i4840, align 8
  %8740 = load i64, i64* %RBP.i, align 8
  %8741 = add i64 %8740, -460
  %8742 = add i64 %8739, 17
  store i64 %8742, i64* %3, align 8
  %8743 = inttoptr i64 %8741 to i32*
  %8744 = load i32, i32* %8743, align 4
  %8745 = sext i32 %8744 to i64
  %8746 = shl nsw i64 %8745, 6
  store i64 %8746, i64* %RSI.i2426, align 8
  %8747 = add i64 %8746, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %8747, i64* %RDX.i4840, align 8
  %8748 = icmp ult i64 %8747, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %8749 = icmp ult i64 %8747, %8746
  %8750 = or i1 %8748, %8749
  %8751 = zext i1 %8750 to i8
  store i8 %8751, i8* %14, align 1
  %8752 = trunc i64 %8747 to i32
  %8753 = and i32 %8752, 248
  %8754 = tail call i32 @llvm.ctpop.i32(i32 %8753)
  %8755 = trunc i32 %8754 to i8
  %8756 = and i8 %8755, 1
  %8757 = xor i8 %8756, 1
  store i8 %8757, i8* %21, align 1
  %8758 = xor i64 %8747, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %8759 = lshr i64 %8758, 4
  %8760 = trunc i64 %8759 to i8
  %8761 = and i8 %8760, 1
  store i8 %8761, i8* %27, align 1
  %8762 = icmp eq i64 %8747, 0
  %8763 = zext i1 %8762 to i8
  store i8 %8763, i8* %30, align 1
  %8764 = lshr i64 %8747, 63
  %8765 = trunc i64 %8764 to i8
  store i8 %8765, i8* %33, align 1
  %8766 = lshr i64 %8745, 57
  %8767 = and i64 %8766, 1
  %8768 = xor i64 %8764, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %8769 = xor i64 %8764, %8767
  %8770 = add nuw nsw i64 %8768, %8769
  %8771 = icmp eq i64 %8770, 2
  %8772 = zext i1 %8771 to i8
  store i8 %8772, i8* %39, align 1
  %8773 = load i64, i64* %RAX.i1862, align 8
  %8774 = inttoptr i64 %8747 to i32*
  %8775 = add i64 %8739, 27
  store i64 %8775, i64* %3, align 8
  %8776 = load i32, i32* %8774, align 8
  %8777 = shl i64 %8773, 32
  %8778 = ashr exact i64 %8777, 32
  %8779 = sext i32 %8776 to i64
  %8780 = mul nsw i64 %8779, %8778
  %8781 = trunc i64 %8780 to i32
  %8782 = and i64 %8780, 4294967295
  store i64 %8782, i64* %RAX.i1862, align 8
  %8783 = shl i64 %8780, 32
  %8784 = ashr exact i64 %8783, 32
  %8785 = icmp ne i64 %8784, %8780
  %8786 = zext i1 %8785 to i8
  store i8 %8786, i8* %14, align 1
  %8787 = and i32 %8781, 255
  %8788 = tail call i32 @llvm.ctpop.i32(i32 %8787)
  %8789 = trunc i32 %8788 to i8
  %8790 = and i8 %8789, 1
  %8791 = xor i8 %8790, 1
  store i8 %8791, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %8792 = lshr i32 %8781, 31
  %8793 = trunc i32 %8792 to i8
  store i8 %8793, i8* %33, align 1
  store i8 %8786, i8* %39, align 1
  %8794 = add i64 %8740, -404
  %8795 = add i64 %8739, 33
  store i64 %8795, i64* %3, align 8
  %8796 = inttoptr i64 %8794 to i32*
  %8797 = load i32, i32* %8796, align 4
  %8798 = shl i32 %8797, 1
  %8799 = zext i32 %8798 to i64
  store i64 %8799, i64* %RCX.i2028, align 8
  %8800 = trunc i64 %8780 to i32
  %8801 = add i32 %8798, %8800
  %8802 = zext i32 %8801 to i64
  store i64 %8802, i64* %RAX.i1862, align 8
  %8803 = icmp ult i32 %8801, %8800
  %8804 = icmp ult i32 %8801, %8798
  %8805 = or i1 %8803, %8804
  %8806 = zext i1 %8805 to i8
  store i8 %8806, i8* %14, align 1
  %8807 = and i32 %8801, 255
  %8808 = tail call i32 @llvm.ctpop.i32(i32 %8807)
  %8809 = trunc i32 %8808 to i8
  %8810 = and i8 %8809, 1
  %8811 = xor i8 %8810, 1
  store i8 %8811, i8* %21, align 1
  %8812 = xor i64 %8799, %8780
  %8813 = trunc i64 %8812 to i32
  %8814 = xor i32 %8813, %8801
  %8815 = lshr i32 %8814, 4
  %8816 = trunc i32 %8815 to i8
  %8817 = and i8 %8816, 1
  store i8 %8817, i8* %27, align 1
  %8818 = icmp eq i32 %8801, 0
  %8819 = zext i1 %8818 to i8
  store i8 %8819, i8* %30, align 1
  %8820 = lshr i32 %8801, 31
  %8821 = trunc i32 %8820 to i8
  store i8 %8821, i8* %33, align 1
  %8822 = lshr i32 %8800, 31
  %8823 = lshr i32 %8797, 30
  %8824 = and i32 %8823, 1
  %8825 = xor i32 %8820, %8822
  %8826 = xor i32 %8820, %8824
  %8827 = add nuw nsw i32 %8825, %8826
  %8828 = icmp eq i32 %8827, 2
  %8829 = zext i1 %8828 to i8
  store i8 %8829, i8* %39, align 1
  %8830 = load i64, i64* %RBP.i, align 8
  %8831 = add i64 %8830, -464
  %8832 = add i64 %8739, 43
  store i64 %8832, i64* %3, align 8
  %8833 = inttoptr i64 %8831 to i32*
  %8834 = load i32, i32* %8833, align 4
  %8835 = add i32 %8834, 1
  %8836 = zext i32 %8835 to i64
  store i64 %8836, i64* %RCX.i2028, align 8
  %8837 = icmp eq i32 %8834, -1
  %8838 = icmp eq i32 %8835, 0
  %8839 = or i1 %8837, %8838
  %8840 = zext i1 %8839 to i8
  store i8 %8840, i8* %14, align 1
  %8841 = and i32 %8835, 255
  %8842 = tail call i32 @llvm.ctpop.i32(i32 %8841)
  %8843 = trunc i32 %8842 to i8
  %8844 = and i8 %8843, 1
  %8845 = xor i8 %8844, 1
  store i8 %8845, i8* %21, align 1
  %8846 = xor i32 %8835, %8834
  %8847 = lshr i32 %8846, 4
  %8848 = trunc i32 %8847 to i8
  %8849 = and i8 %8848, 1
  store i8 %8849, i8* %27, align 1
  %8850 = zext i1 %8838 to i8
  store i8 %8850, i8* %30, align 1
  %8851 = lshr i32 %8835, 31
  %8852 = trunc i32 %8851 to i8
  store i8 %8852, i8* %33, align 1
  %8853 = lshr i32 %8834, 31
  %8854 = xor i32 %8851, %8853
  %8855 = add nuw nsw i32 %8854, %8851
  %8856 = icmp eq i32 %8855, 2
  %8857 = zext i1 %8856 to i8
  store i8 %8857, i8* %39, align 1
  %8858 = add i64 %8739, 48
  store i64 %8858, i64* %3, align 8
  %8859 = trunc i32 %8835 to i5
  switch i5 %8859, label %8863 [
    i5 0, label %routine_sarl__cl___eax.exit2398
    i5 1, label %8860
  ]

; <label>:8860:                                   ; preds = %block_.L_40e507
  %8861 = shl nuw i64 %8802, 32
  %8862 = ashr i64 %8861, 33
  br label %8870

; <label>:8863:                                   ; preds = %block_.L_40e507
  %8864 = and i32 %8835, 31
  %8865 = zext i32 %8864 to i64
  %8866 = add nsw i64 %8865, -1
  %8867 = sext i32 %8801 to i64
  %8868 = ashr i64 %8867, %8866
  %8869 = lshr i64 %8868, 1
  br label %8870

; <label>:8870:                                   ; preds = %8863, %8860
  %8871 = phi i64 [ %8869, %8863 ], [ %8862, %8860 ]
  %8872 = phi i64 [ %8868, %8863 ], [ %8802, %8860 ]
  %8873 = trunc i64 %8872 to i8
  %8874 = and i8 %8873, 1
  %8875 = trunc i64 %8871 to i32
  %8876 = and i64 %8871, 4294967295
  store i64 %8876, i64* %RAX.i1862, align 8
  store i8 %8874, i8* %14, align 1
  %8877 = and i32 %8875, 255
  %8878 = tail call i32 @llvm.ctpop.i32(i32 %8877)
  %8879 = trunc i32 %8878 to i8
  %8880 = and i8 %8879, 1
  %8881 = xor i8 %8880, 1
  store i8 %8881, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8882 = icmp eq i32 %8875, 0
  %8883 = zext i1 %8882 to i8
  store i8 %8883, i8* %30, align 1
  %8884 = lshr i32 %8875, 31
  %8885 = trunc i32 %8884 to i8
  store i8 %8885, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8886 = trunc i64 %8871 to i32
  br label %routine_sarl__cl___eax.exit2398

routine_sarl__cl___eax.exit2398:                  ; preds = %8870, %block_.L_40e507
  %8887 = phi i32 [ %8886, %8870 ], [ %8801, %block_.L_40e507 ]
  %8888 = add i64 %8830, -28
  %8889 = add i64 %8739, 51
  store i64 %8889, i64* %3, align 8
  %8890 = inttoptr i64 %8888 to i32*
  %8891 = load i32, i32* %8890, align 4
  %8892 = zext i32 %8891 to i64
  store i64 %8892, i64* %RSI.i2426, align 8
  %8893 = zext i32 %8887 to i64
  store i64 %8893, i64* %RDI.i3890, align 8
  %8894 = add i64 %8739, 420911
  %8895 = add i64 %8739, 58
  %8896 = load i64, i64* %6, align 8
  %8897 = add i64 %8896, -8
  %8898 = inttoptr i64 %8897 to i64*
  store i64 %8895, i64* %8898, align 8
  store i64 %8897, i64* %6, align 8
  store i64 %8894, i64* %3, align 8
  %call2_40e556 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %8894, %struct.Memory* %8738)
  %8899 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %RDX.i4840, align 8
  %8900 = load i64, i64* %RBP.i, align 8
  %8901 = add i64 %8900, -460
  %8902 = add i64 %8899, 17
  store i64 %8902, i64* %3, align 8
  %8903 = inttoptr i64 %8901 to i32*
  %8904 = load i32, i32* %8903, align 4
  %8905 = sext i32 %8904 to i64
  %8906 = shl nsw i64 %8905, 6
  store i64 %8906, i64* %R8.i3081, align 8
  %8907 = add i64 %8906, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %8907, i64* %RDX.i4840, align 8
  %8908 = icmp ult i64 %8907, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %8909 = icmp ult i64 %8907, %8906
  %8910 = or i1 %8908, %8909
  %8911 = zext i1 %8910 to i8
  store i8 %8911, i8* %14, align 1
  %8912 = trunc i64 %8907 to i32
  %8913 = and i32 %8912, 248
  %8914 = tail call i32 @llvm.ctpop.i32(i32 %8913)
  %8915 = trunc i32 %8914 to i8
  %8916 = and i8 %8915, 1
  %8917 = xor i8 %8916, 1
  store i8 %8917, i8* %21, align 1
  %8918 = xor i64 %8907, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %8919 = lshr i64 %8918, 4
  %8920 = trunc i64 %8919 to i8
  %8921 = and i8 %8920, 1
  store i8 %8921, i8* %27, align 1
  %8922 = icmp eq i64 %8907, 0
  %8923 = zext i1 %8922 to i8
  store i8 %8923, i8* %30, align 1
  %8924 = lshr i64 %8907, 63
  %8925 = trunc i64 %8924 to i8
  store i8 %8925, i8* %33, align 1
  %8926 = lshr i64 %8905, 57
  %8927 = and i64 %8926, 1
  %8928 = xor i64 %8924, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %8929 = xor i64 %8924, %8927
  %8930 = add nuw nsw i64 %8928, %8929
  %8931 = icmp eq i64 %8930, 2
  %8932 = zext i1 %8931 to i8
  store i8 %8932, i8* %39, align 1
  %8933 = load i64, i64* %RAX.i1862, align 8
  %8934 = inttoptr i64 %8907 to i32*
  %8935 = add i64 %8899, 27
  store i64 %8935, i64* %3, align 8
  %8936 = load i32, i32* %8934, align 8
  %8937 = shl i64 %8933, 32
  %8938 = ashr exact i64 %8937, 32
  %8939 = sext i32 %8936 to i64
  %8940 = mul nsw i64 %8939, %8938
  %8941 = trunc i64 %8940 to i32
  %8942 = and i64 %8940, 4294967295
  store i64 %8942, i64* %RAX.i1862, align 8
  %8943 = shl i64 %8940, 32
  %8944 = ashr exact i64 %8943, 32
  %8945 = icmp ne i64 %8944, %8940
  %8946 = zext i1 %8945 to i8
  store i8 %8946, i8* %14, align 1
  %8947 = and i32 %8941, 255
  %8948 = tail call i32 @llvm.ctpop.i32(i32 %8947)
  %8949 = trunc i32 %8948 to i8
  %8950 = and i8 %8949, 1
  %8951 = xor i8 %8950, 1
  store i8 %8951, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %8952 = lshr i32 %8941, 31
  %8953 = trunc i32 %8952 to i8
  store i8 %8953, i8* %33, align 1
  store i8 %8946, i8* %39, align 1
  %8954 = add i64 %8900, -456
  %8955 = add i64 %8899, 33
  store i64 %8955, i64* %3, align 8
  %8956 = inttoptr i64 %8954 to i32*
  %8957 = load i32, i32* %8956, align 4
  %8958 = zext i32 %8957 to i64
  store i64 %8958, i64* %RCX.i2028, align 8
  %8959 = add i64 %8899, 35
  store i64 %8959, i64* %3, align 8
  %8960 = trunc i32 %8957 to i5
  %8961 = trunc i64 %8940 to i32
  switch i5 %8960, label %8967 [
    i5 0, label %routine_shll__cl___eax.exit2371
    i5 1, label %8962
  ]

; <label>:8962:                                   ; preds = %routine_sarl__cl___eax.exit2398
  %8963 = shl i32 %8961, 1
  %8964 = icmp slt i32 %8961, 0
  %8965 = icmp slt i32 %8963, 0
  %8966 = xor i1 %8964, %8965
  br label %8976

; <label>:8967:                                   ; preds = %routine_sarl__cl___eax.exit2398
  %8968 = and i32 %8957, 31
  %8969 = zext i32 %8968 to i64
  %8970 = add nuw nsw i64 %8969, 4294967295
  %8971 = and i64 %8970, 4294967295
  %8972 = shl i64 %8942, %8971
  %8973 = trunc i64 %8972 to i32
  %8974 = icmp slt i32 %8973, 0
  %8975 = shl i32 %8973, 1
  br label %8976

; <label>:8976:                                   ; preds = %8967, %8962
  %8977 = phi i1 [ %8964, %8962 ], [ %8974, %8967 ]
  %8978 = phi i1 [ %8966, %8962 ], [ false, %8967 ]
  %8979 = phi i32 [ %8963, %8962 ], [ %8975, %8967 ]
  %8980 = zext i32 %8979 to i64
  store i64 %8980, i64* %RAX.i1862, align 8
  %8981 = zext i1 %8977 to i8
  store i8 %8981, i8* %14, align 1
  %8982 = and i32 %8979, 254
  %8983 = tail call i32 @llvm.ctpop.i32(i32 %8982)
  %8984 = trunc i32 %8983 to i8
  %8985 = and i8 %8984, 1
  %8986 = xor i8 %8985, 1
  store i8 %8986, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8987 = icmp eq i32 %8979, 0
  %8988 = zext i1 %8987 to i8
  store i8 %8988, i8* %30, align 1
  %8989 = lshr i32 %8979, 31
  %8990 = trunc i32 %8989 to i8
  store i8 %8990, i8* %33, align 1
  %8991 = zext i1 %8978 to i8
  store i8 %8991, i8* %39, align 1
  br label %routine_shll__cl___eax.exit2371

routine_shll__cl___eax.exit2371:                  ; preds = %8976, %routine_sarl__cl___eax.exit2398
  %8992 = phi i32 [ %8979, %8976 ], [ %8961, %routine_sarl__cl___eax.exit2398 ]
  %8993 = load i64, i64* %RBP.i, align 8
  %8994 = add i64 %8993, -48
  %8995 = add i64 %8899, 39
  store i64 %8995, i64* %3, align 8
  %8996 = inttoptr i64 %8994 to i32*
  %8997 = load i32, i32* %8996, align 4
  %8998 = sext i32 %8997 to i64
  store i64 %8998, i64* %RDX.i4840, align 8
  %8999 = shl nsw i64 %8998, 2
  %9000 = add i64 %8993, -96
  %9001 = add i64 %9000, %8999
  %9002 = add i64 %8899, 43
  store i64 %9002, i64* %3, align 8
  %9003 = inttoptr i64 %9001 to i32*
  store i32 %8992, i32* %9003, align 4
  %9004 = load i64, i64* %RBP.i, align 8
  %9005 = add i64 %9004, -48
  %9006 = load i64, i64* %3, align 8
  %9007 = add i64 %9006, 3
  store i64 %9007, i64* %3, align 8
  %9008 = inttoptr i64 %9005 to i32*
  %9009 = load i32, i32* %9008, align 4
  %9010 = add i32 %9009, 1
  %9011 = zext i32 %9010 to i64
  store i64 %9011, i64* %RAX.i1862, align 8
  %9012 = icmp eq i32 %9009, -1
  %9013 = icmp eq i32 %9010, 0
  %9014 = or i1 %9012, %9013
  %9015 = zext i1 %9014 to i8
  store i8 %9015, i8* %14, align 1
  %9016 = and i32 %9010, 255
  %9017 = tail call i32 @llvm.ctpop.i32(i32 %9016)
  %9018 = trunc i32 %9017 to i8
  %9019 = and i8 %9018, 1
  %9020 = xor i8 %9019, 1
  store i8 %9020, i8* %21, align 1
  %9021 = xor i32 %9010, %9009
  %9022 = lshr i32 %9021, 4
  %9023 = trunc i32 %9022 to i8
  %9024 = and i8 %9023, 1
  store i8 %9024, i8* %27, align 1
  %9025 = zext i1 %9013 to i8
  store i8 %9025, i8* %30, align 1
  %9026 = lshr i32 %9010, 31
  %9027 = trunc i32 %9026 to i8
  store i8 %9027, i8* %33, align 1
  %9028 = lshr i32 %9009, 31
  %9029 = xor i32 %9026, %9028
  %9030 = add nuw nsw i32 %9029, %9026
  %9031 = icmp eq i32 %9030, 2
  %9032 = zext i1 %9031 to i8
  store i8 %9032, i8* %39, align 1
  %9033 = add i64 %9006, 9
  store i64 %9033, i64* %3, align 8
  store i32 %9010, i32* %9008, align 4
  %9034 = load i64, i64* %3, align 8
  %9035 = add i64 %9034, -1615
  store i64 %9035, i64* %3, align 8
  br label %block_.L_40df40

block_.L_40e594:                                  ; preds = %block_.L_40df40
  store i64 2, i64* %RAX.i1862, align 8
  %9036 = add i64 %6370, -480
  %9037 = add i64 %6398, 12
  store i64 %9037, i64* %3, align 8
  %9038 = inttoptr i64 %9036 to i64*
  %9039 = load i64, i64* %9038, align 8
  store i64 %9039, i64* %RCX.i2028, align 8
  %9040 = add i64 %6370, -64
  %9041 = add i64 %6398, 16
  store i64 %9041, i64* %3, align 8
  %9042 = inttoptr i64 %9040 to i32*
  %9043 = load i32, i32* %9042, align 4
  %9044 = sext i32 %9043 to i64
  store i64 %9044, i64* %RDX.i4840, align 8
  %9045 = shl nsw i64 %9044, 2
  %9046 = add i64 %9045, %9039
  %9047 = add i64 %6398, 23
  store i64 %9047, i64* %3, align 8
  %9048 = inttoptr i64 %9046 to i32*
  store i32 0, i32* %9048, align 4
  %9049 = load i64, i64* %RBP.i, align 8
  %9050 = add i64 %9049, -96
  %9051 = load i64, i64* %3, align 8
  %9052 = add i64 %9051, 3
  store i64 %9052, i64* %3, align 8
  %9053 = inttoptr i64 %9050 to i32*
  %9054 = load i32, i32* %9053, align 4
  %9055 = zext i32 %9054 to i64
  store i64 %9055, i64* %RSI.i2426, align 8
  %9056 = add i64 %9049, -92
  %9057 = add i64 %9051, 6
  store i64 %9057, i64* %3, align 8
  %9058 = inttoptr i64 %9056 to i32*
  %9059 = load i32, i32* %9058, align 4
  %9060 = add i32 %9059, %9054
  %9061 = zext i32 %9060 to i64
  store i64 %9061, i64* %RSI.i2426, align 8
  %9062 = icmp ult i32 %9060, %9054
  %9063 = icmp ult i32 %9060, %9059
  %9064 = or i1 %9062, %9063
  %9065 = zext i1 %9064 to i8
  store i8 %9065, i8* %14, align 1
  %9066 = and i32 %9060, 255
  %9067 = tail call i32 @llvm.ctpop.i32(i32 %9066)
  %9068 = trunc i32 %9067 to i8
  %9069 = and i8 %9068, 1
  %9070 = xor i8 %9069, 1
  store i8 %9070, i8* %21, align 1
  %9071 = xor i32 %9059, %9054
  %9072 = xor i32 %9071, %9060
  %9073 = lshr i32 %9072, 4
  %9074 = trunc i32 %9073 to i8
  %9075 = and i8 %9074, 1
  store i8 %9075, i8* %27, align 1
  %9076 = icmp eq i32 %9060, 0
  %9077 = zext i1 %9076 to i8
  store i8 %9077, i8* %30, align 1
  %9078 = lshr i32 %9060, 31
  %9079 = trunc i32 %9078 to i8
  store i8 %9079, i8* %33, align 1
  %9080 = lshr i32 %9054, 31
  %9081 = lshr i32 %9059, 31
  %9082 = xor i32 %9078, %9080
  %9083 = xor i32 %9078, %9081
  %9084 = add nuw nsw i32 %9082, %9083
  %9085 = icmp eq i32 %9084, 2
  %9086 = zext i1 %9085 to i8
  store i8 %9086, i8* %39, align 1
  %9087 = add i64 %9049, -88
  %9088 = add i64 %9051, 9
  store i64 %9088, i64* %3, align 8
  %9089 = inttoptr i64 %9087 to i32*
  %9090 = load i32, i32* %9089, align 4
  %9091 = add i32 %9090, %9060
  %9092 = zext i32 %9091 to i64
  store i64 %9092, i64* %RSI.i2426, align 8
  %9093 = icmp ult i32 %9091, %9060
  %9094 = icmp ult i32 %9091, %9090
  %9095 = or i1 %9093, %9094
  %9096 = zext i1 %9095 to i8
  store i8 %9096, i8* %14, align 1
  %9097 = and i32 %9091, 255
  %9098 = tail call i32 @llvm.ctpop.i32(i32 %9097)
  %9099 = trunc i32 %9098 to i8
  %9100 = and i8 %9099, 1
  %9101 = xor i8 %9100, 1
  store i8 %9101, i8* %21, align 1
  %9102 = xor i32 %9090, %9060
  %9103 = xor i32 %9102, %9091
  %9104 = lshr i32 %9103, 4
  %9105 = trunc i32 %9104 to i8
  %9106 = and i8 %9105, 1
  store i8 %9106, i8* %27, align 1
  %9107 = icmp eq i32 %9091, 0
  %9108 = zext i1 %9107 to i8
  store i8 %9108, i8* %30, align 1
  %9109 = lshr i32 %9091, 31
  %9110 = trunc i32 %9109 to i8
  store i8 %9110, i8* %33, align 1
  %9111 = lshr i32 %9090, 31
  %9112 = xor i32 %9109, %9078
  %9113 = xor i32 %9109, %9111
  %9114 = add nuw nsw i32 %9112, %9113
  %9115 = icmp eq i32 %9114, 2
  %9116 = zext i1 %9115 to i8
  store i8 %9116, i8* %39, align 1
  %9117 = add i64 %9049, -84
  %9118 = add i64 %9051, 12
  store i64 %9118, i64* %3, align 8
  %9119 = inttoptr i64 %9117 to i32*
  %9120 = load i32, i32* %9119, align 4
  %9121 = add i32 %9120, %9091
  %9122 = zext i32 %9121 to i64
  store i64 %9122, i64* %RSI.i2426, align 8
  %9123 = icmp ult i32 %9121, %9091
  %9124 = icmp ult i32 %9121, %9120
  %9125 = or i1 %9123, %9124
  %9126 = zext i1 %9125 to i8
  store i8 %9126, i8* %14, align 1
  %9127 = and i32 %9121, 255
  %9128 = tail call i32 @llvm.ctpop.i32(i32 %9127)
  %9129 = trunc i32 %9128 to i8
  %9130 = and i8 %9129, 1
  %9131 = xor i8 %9130, 1
  store i8 %9131, i8* %21, align 1
  %9132 = xor i32 %9120, %9091
  %9133 = xor i32 %9132, %9121
  %9134 = lshr i32 %9133, 4
  %9135 = trunc i32 %9134 to i8
  %9136 = and i8 %9135, 1
  store i8 %9136, i8* %27, align 1
  %9137 = icmp eq i32 %9121, 0
  %9138 = zext i1 %9137 to i8
  store i8 %9138, i8* %30, align 1
  %9139 = lshr i32 %9121, 31
  %9140 = trunc i32 %9139 to i8
  store i8 %9140, i8* %33, align 1
  %9141 = lshr i32 %9120, 31
  %9142 = xor i32 %9139, %9109
  %9143 = xor i32 %9139, %9141
  %9144 = add nuw nsw i32 %9142, %9143
  %9145 = icmp eq i32 %9144, 2
  %9146 = zext i1 %9145 to i8
  store i8 %9146, i8* %39, align 1
  %9147 = load i64, i64* %RBP.i, align 8
  %9148 = add i64 %9147, -680
  %9149 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %9150 = add i64 %9051, 18
  store i64 %9150, i64* %3, align 8
  %9151 = inttoptr i64 %9148 to i32*
  store i32 %9149, i32* %9151, align 4
  %9152 = load i32, i32* %ESI.i1753, align 4
  %9153 = zext i32 %9152 to i64
  %9154 = load i64, i64* %3, align 8
  store i64 %9153, i64* %RAX.i1862, align 8
  %9155 = sext i32 %9152 to i64
  %9156 = lshr i64 %9155, 32
  store i64 %9156, i64* %607, align 8
  %9157 = load i64, i64* %RBP.i, align 8
  %9158 = add i64 %9157, -680
  %9159 = add i64 %9154, 9
  store i64 %9159, i64* %3, align 8
  %9160 = inttoptr i64 %9158 to i32*
  %9161 = load i32, i32* %9160, align 4
  %9162 = zext i32 %9161 to i64
  store i64 %9162, i64* %RSI.i2426, align 8
  %9163 = add i64 %9154, 11
  store i64 %9163, i64* %3, align 8
  %9164 = sext i32 %9161 to i64
  %9165 = shl nuw i64 %9156, 32
  %9166 = or i64 %9165, %9153
  %9167 = sdiv i64 %9166, %9164
  %9168 = shl i64 %9167, 32
  %9169 = ashr exact i64 %9168, 32
  %9170 = icmp eq i64 %9167, %9169
  br i1 %9170, label %9173, label %9171

; <label>:9171:                                   ; preds = %block_.L_40e594
  %9172 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9163, %struct.Memory* %MEMORY.22)
  %.pre287 = load i64, i64* %3, align 8
  %.pre288 = load i32, i32* %EAX.i4969.pre-phi, align 4
  br label %routine_idivl__esi.exit2316

; <label>:9173:                                   ; preds = %block_.L_40e594
  %9174 = srem i64 %9166, %9164
  %9175 = and i64 %9167, 4294967295
  store i64 %9175, i64* %RAX.i1862, align 8
  %9176 = and i64 %9174, 4294967295
  store i64 %9176, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9177 = trunc i64 %9167 to i32
  br label %routine_idivl__esi.exit2316

routine_idivl__esi.exit2316:                      ; preds = %9173, %9171
  %9178 = phi i32 [ %.pre288, %9171 ], [ %9177, %9173 ]
  %9179 = phi i64 [ %.pre287, %9171 ], [ %9163, %9173 ]
  %9180 = phi %struct.Memory* [ %9172, %9171 ], [ %MEMORY.22, %9173 ]
  %9181 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9181, i64* %RCX.i2028, align 8
  %9182 = add i64 %9181, 13112
  %9183 = add i64 %9179, 14
  store i64 %9183, i64* %3, align 8
  %9184 = inttoptr i64 %9182 to i32*
  store i32 %9178, i32* %9184, align 4
  %9185 = load i64, i64* %RBP.i, align 8
  %9186 = add i64 %9185, -96
  %9187 = load i64, i64* %3, align 8
  %9188 = add i64 %9187, 3
  store i64 %9188, i64* %3, align 8
  %9189 = inttoptr i64 %9186 to i32*
  %9190 = load i32, i32* %9189, align 4
  %9191 = zext i32 %9190 to i64
  store i64 %9191, i64* %RAX.i1862, align 8
  %9192 = add i64 %9185, -92
  %9193 = add i64 %9187, 6
  store i64 %9193, i64* %3, align 8
  %9194 = inttoptr i64 %9192 to i32*
  %9195 = load i32, i32* %9194, align 4
  %9196 = sub i32 %9190, %9195
  %9197 = zext i32 %9196 to i64
  store i64 %9197, i64* %RAX.i1862, align 8
  %9198 = icmp ult i32 %9190, %9195
  %9199 = zext i1 %9198 to i8
  store i8 %9199, i8* %14, align 1
  %9200 = and i32 %9196, 255
  %9201 = tail call i32 @llvm.ctpop.i32(i32 %9200)
  %9202 = trunc i32 %9201 to i8
  %9203 = and i8 %9202, 1
  %9204 = xor i8 %9203, 1
  store i8 %9204, i8* %21, align 1
  %9205 = xor i32 %9195, %9190
  %9206 = xor i32 %9205, %9196
  %9207 = lshr i32 %9206, 4
  %9208 = trunc i32 %9207 to i8
  %9209 = and i8 %9208, 1
  store i8 %9209, i8* %27, align 1
  %9210 = icmp eq i32 %9196, 0
  %9211 = zext i1 %9210 to i8
  store i8 %9211, i8* %30, align 1
  %9212 = lshr i32 %9196, 31
  %9213 = trunc i32 %9212 to i8
  store i8 %9213, i8* %33, align 1
  %9214 = lshr i32 %9190, 31
  %9215 = lshr i32 %9195, 31
  %9216 = xor i32 %9215, %9214
  %9217 = xor i32 %9212, %9214
  %9218 = add nuw nsw i32 %9217, %9216
  %9219 = icmp eq i32 %9218, 2
  %9220 = zext i1 %9219 to i8
  store i8 %9220, i8* %39, align 1
  %9221 = add i64 %9185, -88
  %9222 = add i64 %9187, 9
  store i64 %9222, i64* %3, align 8
  %9223 = inttoptr i64 %9221 to i32*
  %9224 = load i32, i32* %9223, align 4
  %9225 = add i32 %9224, %9196
  %9226 = zext i32 %9225 to i64
  store i64 %9226, i64* %RAX.i1862, align 8
  %9227 = icmp ult i32 %9225, %9196
  %9228 = icmp ult i32 %9225, %9224
  %9229 = or i1 %9227, %9228
  %9230 = zext i1 %9229 to i8
  store i8 %9230, i8* %14, align 1
  %9231 = and i32 %9225, 255
  %9232 = tail call i32 @llvm.ctpop.i32(i32 %9231)
  %9233 = trunc i32 %9232 to i8
  %9234 = and i8 %9233, 1
  %9235 = xor i8 %9234, 1
  store i8 %9235, i8* %21, align 1
  %9236 = xor i32 %9224, %9196
  %9237 = xor i32 %9236, %9225
  %9238 = lshr i32 %9237, 4
  %9239 = trunc i32 %9238 to i8
  %9240 = and i8 %9239, 1
  store i8 %9240, i8* %27, align 1
  %9241 = icmp eq i32 %9225, 0
  %9242 = zext i1 %9241 to i8
  store i8 %9242, i8* %30, align 1
  %9243 = lshr i32 %9225, 31
  %9244 = trunc i32 %9243 to i8
  store i8 %9244, i8* %33, align 1
  %9245 = lshr i32 %9224, 31
  %9246 = xor i32 %9243, %9212
  %9247 = xor i32 %9243, %9245
  %9248 = add nuw nsw i32 %9246, %9247
  %9249 = icmp eq i32 %9248, 2
  %9250 = zext i1 %9249 to i8
  store i8 %9250, i8* %39, align 1
  %9251 = add i64 %9185, -84
  %9252 = add i64 %9187, 12
  store i64 %9252, i64* %3, align 8
  %9253 = inttoptr i64 %9251 to i32*
  %9254 = load i32, i32* %9253, align 4
  %9255 = sub i32 %9225, %9254
  %9256 = zext i32 %9255 to i64
  store i64 %9256, i64* %RAX.i1862, align 8
  %9257 = icmp ult i32 %9225, %9254
  %9258 = zext i1 %9257 to i8
  store i8 %9258, i8* %14, align 1
  %9259 = and i32 %9255, 255
  %9260 = tail call i32 @llvm.ctpop.i32(i32 %9259)
  %9261 = trunc i32 %9260 to i8
  %9262 = and i8 %9261, 1
  %9263 = xor i8 %9262, 1
  store i8 %9263, i8* %21, align 1
  %9264 = xor i32 %9254, %9225
  %9265 = xor i32 %9264, %9255
  %9266 = lshr i32 %9265, 4
  %9267 = trunc i32 %9266 to i8
  %9268 = and i8 %9267, 1
  store i8 %9268, i8* %27, align 1
  %9269 = icmp eq i32 %9255, 0
  %9270 = zext i1 %9269 to i8
  store i8 %9270, i8* %30, align 1
  %9271 = lshr i32 %9255, 31
  %9272 = trunc i32 %9271 to i8
  store i8 %9272, i8* %33, align 1
  %9273 = lshr i32 %9254, 31
  %9274 = xor i32 %9273, %9243
  %9275 = xor i32 %9271, %9243
  %9276 = add nuw nsw i32 %9275, %9274
  %9277 = icmp eq i32 %9276, 2
  %9278 = zext i1 %9277 to i8
  store i8 %9278, i8* %39, align 1
  %9279 = sext i32 %9255 to i64
  %9280 = lshr i64 %9279, 32
  store i64 %9280, i64* %607, align 8
  %9281 = load i32, i32* %ESI.i1753, align 4
  %9282 = add i64 %9187, 15
  store i64 %9282, i64* %3, align 8
  %9283 = sext i32 %9281 to i64
  %9284 = shl nuw i64 %9280, 32
  %9285 = or i64 %9284, %9256
  %9286 = sdiv i64 %9285, %9283
  %9287 = shl i64 %9286, 32
  %9288 = ashr exact i64 %9287, 32
  %9289 = icmp eq i64 %9286, %9288
  br i1 %9289, label %9292, label %9290

; <label>:9290:                                   ; preds = %routine_idivl__esi.exit2316
  %9291 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9282, %struct.Memory* %9180)
  %.pre289 = load i64, i64* %3, align 8
  %.pre290 = load i32, i32* %EAX.i4969.pre-phi, align 4
  br label %routine_idivl__esi.exit2293

; <label>:9292:                                   ; preds = %routine_idivl__esi.exit2316
  %9293 = srem i64 %9285, %9283
  %9294 = and i64 %9286, 4294967295
  store i64 %9294, i64* %RAX.i1862, align 8
  %9295 = and i64 %9293, 4294967295
  store i64 %9295, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9296 = trunc i64 %9286 to i32
  br label %routine_idivl__esi.exit2293

routine_idivl__esi.exit2293:                      ; preds = %9292, %9290
  %9297 = phi i32 [ %.pre290, %9290 ], [ %9296, %9292 ]
  %9298 = phi i64 [ %.pre289, %9290 ], [ %9282, %9292 ]
  %9299 = phi %struct.Memory* [ %9291, %9290 ], [ %9180, %9292 ]
  %9300 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9300, i64* %RCX.i2028, align 8
  %9301 = add i64 %9300, 13368
  %9302 = add i64 %9298, 14
  store i64 %9302, i64* %3, align 8
  %9303 = inttoptr i64 %9301 to i32*
  store i32 %9297, i32* %9303, align 4
  %9304 = load i64, i64* %RBP.i, align 8
  %9305 = add i64 %9304, -96
  %9306 = load i64, i64* %3, align 8
  %9307 = add i64 %9306, 3
  store i64 %9307, i64* %3, align 8
  %9308 = inttoptr i64 %9305 to i32*
  %9309 = load i32, i32* %9308, align 4
  %9310 = zext i32 %9309 to i64
  store i64 %9310, i64* %RAX.i1862, align 8
  %9311 = add i64 %9304, -92
  %9312 = add i64 %9306, 6
  store i64 %9312, i64* %3, align 8
  %9313 = inttoptr i64 %9311 to i32*
  %9314 = load i32, i32* %9313, align 4
  %9315 = add i32 %9314, %9309
  %9316 = zext i32 %9315 to i64
  store i64 %9316, i64* %RAX.i1862, align 8
  %9317 = icmp ult i32 %9315, %9309
  %9318 = icmp ult i32 %9315, %9314
  %9319 = or i1 %9317, %9318
  %9320 = zext i1 %9319 to i8
  store i8 %9320, i8* %14, align 1
  %9321 = and i32 %9315, 255
  %9322 = tail call i32 @llvm.ctpop.i32(i32 %9321)
  %9323 = trunc i32 %9322 to i8
  %9324 = and i8 %9323, 1
  %9325 = xor i8 %9324, 1
  store i8 %9325, i8* %21, align 1
  %9326 = xor i32 %9314, %9309
  %9327 = xor i32 %9326, %9315
  %9328 = lshr i32 %9327, 4
  %9329 = trunc i32 %9328 to i8
  %9330 = and i8 %9329, 1
  store i8 %9330, i8* %27, align 1
  %9331 = icmp eq i32 %9315, 0
  %9332 = zext i1 %9331 to i8
  store i8 %9332, i8* %30, align 1
  %9333 = lshr i32 %9315, 31
  %9334 = trunc i32 %9333 to i8
  store i8 %9334, i8* %33, align 1
  %9335 = lshr i32 %9309, 31
  %9336 = lshr i32 %9314, 31
  %9337 = xor i32 %9333, %9335
  %9338 = xor i32 %9333, %9336
  %9339 = add nuw nsw i32 %9337, %9338
  %9340 = icmp eq i32 %9339, 2
  %9341 = zext i1 %9340 to i8
  store i8 %9341, i8* %39, align 1
  %9342 = add i64 %9304, -88
  %9343 = add i64 %9306, 9
  store i64 %9343, i64* %3, align 8
  %9344 = inttoptr i64 %9342 to i32*
  %9345 = load i32, i32* %9344, align 4
  %9346 = sub i32 %9315, %9345
  %9347 = zext i32 %9346 to i64
  store i64 %9347, i64* %RAX.i1862, align 8
  %9348 = icmp ult i32 %9315, %9345
  %9349 = zext i1 %9348 to i8
  store i8 %9349, i8* %14, align 1
  %9350 = and i32 %9346, 255
  %9351 = tail call i32 @llvm.ctpop.i32(i32 %9350)
  %9352 = trunc i32 %9351 to i8
  %9353 = and i8 %9352, 1
  %9354 = xor i8 %9353, 1
  store i8 %9354, i8* %21, align 1
  %9355 = xor i32 %9345, %9315
  %9356 = xor i32 %9355, %9346
  %9357 = lshr i32 %9356, 4
  %9358 = trunc i32 %9357 to i8
  %9359 = and i8 %9358, 1
  store i8 %9359, i8* %27, align 1
  %9360 = icmp eq i32 %9346, 0
  %9361 = zext i1 %9360 to i8
  store i8 %9361, i8* %30, align 1
  %9362 = lshr i32 %9346, 31
  %9363 = trunc i32 %9362 to i8
  store i8 %9363, i8* %33, align 1
  %9364 = lshr i32 %9345, 31
  %9365 = xor i32 %9364, %9333
  %9366 = xor i32 %9362, %9333
  %9367 = add nuw nsw i32 %9366, %9365
  %9368 = icmp eq i32 %9367, 2
  %9369 = zext i1 %9368 to i8
  store i8 %9369, i8* %39, align 1
  %9370 = add i64 %9304, -84
  %9371 = add i64 %9306, 12
  store i64 %9371, i64* %3, align 8
  %9372 = inttoptr i64 %9370 to i32*
  %9373 = load i32, i32* %9372, align 4
  %9374 = sub i32 %9346, %9373
  %9375 = zext i32 %9374 to i64
  store i64 %9375, i64* %RAX.i1862, align 8
  %9376 = icmp ult i32 %9346, %9373
  %9377 = zext i1 %9376 to i8
  store i8 %9377, i8* %14, align 1
  %9378 = and i32 %9374, 255
  %9379 = tail call i32 @llvm.ctpop.i32(i32 %9378)
  %9380 = trunc i32 %9379 to i8
  %9381 = and i8 %9380, 1
  %9382 = xor i8 %9381, 1
  store i8 %9382, i8* %21, align 1
  %9383 = xor i32 %9373, %9346
  %9384 = xor i32 %9383, %9374
  %9385 = lshr i32 %9384, 4
  %9386 = trunc i32 %9385 to i8
  %9387 = and i8 %9386, 1
  store i8 %9387, i8* %27, align 1
  %9388 = icmp eq i32 %9374, 0
  %9389 = zext i1 %9388 to i8
  store i8 %9389, i8* %30, align 1
  %9390 = lshr i32 %9374, 31
  %9391 = trunc i32 %9390 to i8
  store i8 %9391, i8* %33, align 1
  %9392 = lshr i32 %9373, 31
  %9393 = xor i32 %9392, %9362
  %9394 = xor i32 %9390, %9362
  %9395 = add nuw nsw i32 %9394, %9393
  %9396 = icmp eq i32 %9395, 2
  %9397 = zext i1 %9396 to i8
  store i8 %9397, i8* %39, align 1
  %9398 = sext i32 %9374 to i64
  %9399 = lshr i64 %9398, 32
  store i64 %9399, i64* %607, align 8
  %9400 = load i32, i32* %ESI.i1753, align 4
  %9401 = add i64 %9306, 15
  store i64 %9401, i64* %3, align 8
  %9402 = sext i32 %9400 to i64
  %9403 = shl nuw i64 %9399, 32
  %9404 = or i64 %9403, %9375
  %9405 = sdiv i64 %9404, %9402
  %9406 = shl i64 %9405, 32
  %9407 = ashr exact i64 %9406, 32
  %9408 = icmp eq i64 %9405, %9407
  br i1 %9408, label %9411, label %9409

; <label>:9409:                                   ; preds = %routine_idivl__esi.exit2293
  %9410 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9401, %struct.Memory* %9299)
  %.pre291 = load i64, i64* %3, align 8
  %.pre292 = load i32, i32* %EAX.i4969.pre-phi, align 4
  br label %routine_idivl__esi.exit2269

; <label>:9411:                                   ; preds = %routine_idivl__esi.exit2293
  %9412 = srem i64 %9404, %9402
  %9413 = and i64 %9405, 4294967295
  store i64 %9413, i64* %RAX.i1862, align 8
  %9414 = and i64 %9412, 4294967295
  store i64 %9414, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9415 = trunc i64 %9405 to i32
  br label %routine_idivl__esi.exit2269

routine_idivl__esi.exit2269:                      ; preds = %9411, %9409
  %9416 = phi i32 [ %.pre292, %9409 ], [ %9415, %9411 ]
  %9417 = phi i64 [ %.pre291, %9409 ], [ %9401, %9411 ]
  %9418 = phi %struct.Memory* [ %9410, %9409 ], [ %9299, %9411 ]
  %9419 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9419, i64* %RCX.i2028, align 8
  %9420 = add i64 %9419, 13128
  %9421 = add i64 %9417, 14
  store i64 %9421, i64* %3, align 8
  %9422 = inttoptr i64 %9420 to i32*
  store i32 %9416, i32* %9422, align 4
  %9423 = load i64, i64* %RBP.i, align 8
  %9424 = add i64 %9423, -96
  %9425 = load i64, i64* %3, align 8
  %9426 = add i64 %9425, 3
  store i64 %9426, i64* %3, align 8
  %9427 = inttoptr i64 %9424 to i32*
  %9428 = load i32, i32* %9427, align 4
  %9429 = zext i32 %9428 to i64
  store i64 %9429, i64* %RAX.i1862, align 8
  %9430 = add i64 %9423, -92
  %9431 = add i64 %9425, 6
  store i64 %9431, i64* %3, align 8
  %9432 = inttoptr i64 %9430 to i32*
  %9433 = load i32, i32* %9432, align 4
  %9434 = sub i32 %9428, %9433
  %9435 = zext i32 %9434 to i64
  store i64 %9435, i64* %RAX.i1862, align 8
  %9436 = icmp ult i32 %9428, %9433
  %9437 = zext i1 %9436 to i8
  store i8 %9437, i8* %14, align 1
  %9438 = and i32 %9434, 255
  %9439 = tail call i32 @llvm.ctpop.i32(i32 %9438)
  %9440 = trunc i32 %9439 to i8
  %9441 = and i8 %9440, 1
  %9442 = xor i8 %9441, 1
  store i8 %9442, i8* %21, align 1
  %9443 = xor i32 %9433, %9428
  %9444 = xor i32 %9443, %9434
  %9445 = lshr i32 %9444, 4
  %9446 = trunc i32 %9445 to i8
  %9447 = and i8 %9446, 1
  store i8 %9447, i8* %27, align 1
  %9448 = icmp eq i32 %9434, 0
  %9449 = zext i1 %9448 to i8
  store i8 %9449, i8* %30, align 1
  %9450 = lshr i32 %9434, 31
  %9451 = trunc i32 %9450 to i8
  store i8 %9451, i8* %33, align 1
  %9452 = lshr i32 %9428, 31
  %9453 = lshr i32 %9433, 31
  %9454 = xor i32 %9453, %9452
  %9455 = xor i32 %9450, %9452
  %9456 = add nuw nsw i32 %9455, %9454
  %9457 = icmp eq i32 %9456, 2
  %9458 = zext i1 %9457 to i8
  store i8 %9458, i8* %39, align 1
  %9459 = add i64 %9423, -88
  %9460 = add i64 %9425, 9
  store i64 %9460, i64* %3, align 8
  %9461 = inttoptr i64 %9459 to i32*
  %9462 = load i32, i32* %9461, align 4
  %9463 = sub i32 %9434, %9462
  %9464 = zext i32 %9463 to i64
  store i64 %9464, i64* %RAX.i1862, align 8
  %9465 = icmp ult i32 %9434, %9462
  %9466 = zext i1 %9465 to i8
  store i8 %9466, i8* %14, align 1
  %9467 = and i32 %9463, 255
  %9468 = tail call i32 @llvm.ctpop.i32(i32 %9467)
  %9469 = trunc i32 %9468 to i8
  %9470 = and i8 %9469, 1
  %9471 = xor i8 %9470, 1
  store i8 %9471, i8* %21, align 1
  %9472 = xor i32 %9462, %9434
  %9473 = xor i32 %9472, %9463
  %9474 = lshr i32 %9473, 4
  %9475 = trunc i32 %9474 to i8
  %9476 = and i8 %9475, 1
  store i8 %9476, i8* %27, align 1
  %9477 = icmp eq i32 %9463, 0
  %9478 = zext i1 %9477 to i8
  store i8 %9478, i8* %30, align 1
  %9479 = lshr i32 %9463, 31
  %9480 = trunc i32 %9479 to i8
  store i8 %9480, i8* %33, align 1
  %9481 = lshr i32 %9462, 31
  %9482 = xor i32 %9481, %9450
  %9483 = xor i32 %9479, %9450
  %9484 = add nuw nsw i32 %9483, %9482
  %9485 = icmp eq i32 %9484, 2
  %9486 = zext i1 %9485 to i8
  store i8 %9486, i8* %39, align 1
  %9487 = add i64 %9423, -84
  %9488 = add i64 %9425, 12
  store i64 %9488, i64* %3, align 8
  %9489 = inttoptr i64 %9487 to i32*
  %9490 = load i32, i32* %9489, align 4
  %9491 = add i32 %9490, %9463
  %9492 = zext i32 %9491 to i64
  store i64 %9492, i64* %RAX.i1862, align 8
  %9493 = icmp ult i32 %9491, %9463
  %9494 = icmp ult i32 %9491, %9490
  %9495 = or i1 %9493, %9494
  %9496 = zext i1 %9495 to i8
  store i8 %9496, i8* %14, align 1
  %9497 = and i32 %9491, 255
  %9498 = tail call i32 @llvm.ctpop.i32(i32 %9497)
  %9499 = trunc i32 %9498 to i8
  %9500 = and i8 %9499, 1
  %9501 = xor i8 %9500, 1
  store i8 %9501, i8* %21, align 1
  %9502 = xor i32 %9490, %9463
  %9503 = xor i32 %9502, %9491
  %9504 = lshr i32 %9503, 4
  %9505 = trunc i32 %9504 to i8
  %9506 = and i8 %9505, 1
  store i8 %9506, i8* %27, align 1
  %9507 = icmp eq i32 %9491, 0
  %9508 = zext i1 %9507 to i8
  store i8 %9508, i8* %30, align 1
  %9509 = lshr i32 %9491, 31
  %9510 = trunc i32 %9509 to i8
  store i8 %9510, i8* %33, align 1
  %9511 = lshr i32 %9490, 31
  %9512 = xor i32 %9509, %9479
  %9513 = xor i32 %9509, %9511
  %9514 = add nuw nsw i32 %9512, %9513
  %9515 = icmp eq i32 %9514, 2
  %9516 = zext i1 %9515 to i8
  store i8 %9516, i8* %39, align 1
  %9517 = sext i32 %9491 to i64
  %9518 = lshr i64 %9517, 32
  store i64 %9518, i64* %607, align 8
  %9519 = load i32, i32* %ESI.i1753, align 4
  %9520 = add i64 %9425, 15
  store i64 %9520, i64* %3, align 8
  %9521 = sext i32 %9519 to i64
  %9522 = shl nuw i64 %9518, 32
  %9523 = or i64 %9522, %9492
  %9524 = sdiv i64 %9523, %9521
  %9525 = shl i64 %9524, 32
  %9526 = ashr exact i64 %9525, 32
  %9527 = icmp eq i64 %9524, %9526
  br i1 %9527, label %9530, label %9528

; <label>:9528:                                   ; preds = %routine_idivl__esi.exit2269
  %9529 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9520, %struct.Memory* %9418)
  %.pre293 = load i64, i64* %3, align 8
  %.pre294 = load i32, i32* %EAX.i4969.pre-phi, align 4
  br label %routine_idivl__esi.exit

; <label>:9530:                                   ; preds = %routine_idivl__esi.exit2269
  %9531 = srem i64 %9523, %9521
  %9532 = and i64 %9524, 4294967295
  store i64 %9532, i64* %RAX.i1862, align 8
  %9533 = and i64 %9531, 4294967295
  store i64 %9533, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9534 = trunc i64 %9524 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %9530, %9528
  %9535 = phi i32 [ %.pre294, %9528 ], [ %9534, %9530 ]
  %9536 = phi i64 [ %.pre293, %9528 ], [ %9520, %9530 ]
  %9537 = phi %struct.Memory* [ %9529, %9528 ], [ %9418, %9530 ]
  %9538 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9538, i64* %RCX.i2028, align 8
  %9539 = add i64 %9538, 13384
  %9540 = add i64 %9536, 14
  store i64 %9540, i64* %3, align 8
  %9541 = inttoptr i64 %9539 to i32*
  store i32 %9535, i32* %9541, align 4
  %9542 = load i64, i64* %RBP.i, align 8
  %9543 = add i64 %9542, -132
  %9544 = load i64, i64* %3, align 8
  %9545 = add i64 %9544, 10
  store i64 %9545, i64* %3, align 8
  %9546 = inttoptr i64 %9543 to i32*
  store i32 0, i32* %9546, align 4
  %9547 = load i64, i64* %RBP.i, align 8
  %9548 = add i64 %9547, -136
  %9549 = load i64, i64* %3, align 8
  %9550 = add i64 %9549, 10
  store i64 %9550, i64* %3, align 8
  %9551 = inttoptr i64 %9548 to i32*
  store i32 0, i32* %9551, align 4
  %9552 = load i64, i64* %RBP.i, align 8
  %9553 = add i64 %9552, -32
  %9554 = load i64, i64* %3, align 8
  %9555 = add i64 %9554, 7
  store i64 %9555, i64* %3, align 8
  %9556 = inttoptr i64 %9553 to i32*
  store i32 0, i32* %9556, align 4
  %9557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11.i1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %.pre295 = load i64, i64* %3, align 8
  br label %block_.L_40e648

block_.L_40e648:                                  ; preds = %block_.L_40efe2, %routine_idivl__esi.exit
  %9558 = phi i64 [ %.pre295, %routine_idivl__esi.exit ], [ %14143, %block_.L_40efe2 ]
  %MEMORY.37 = phi %struct.Memory* [ %9537, %routine_idivl__esi.exit ], [ %MEMORY.38, %block_.L_40efe2 ]
  %9559 = load i64, i64* %RBP.i, align 8
  %9560 = add i64 %9559, -32
  %9561 = add i64 %9558, 4
  store i64 %9561, i64* %3, align 8
  %9562 = inttoptr i64 %9560 to i32*
  %9563 = load i32, i32* %9562, align 4
  %9564 = add i32 %9563, -4
  %9565 = icmp ult i32 %9563, 4
  %9566 = zext i1 %9565 to i8
  store i8 %9566, i8* %14, align 1
  %9567 = and i32 %9564, 255
  %9568 = tail call i32 @llvm.ctpop.i32(i32 %9567)
  %9569 = trunc i32 %9568 to i8
  %9570 = and i8 %9569, 1
  %9571 = xor i8 %9570, 1
  store i8 %9571, i8* %21, align 1
  %9572 = xor i32 %9564, %9563
  %9573 = lshr i32 %9572, 4
  %9574 = trunc i32 %9573 to i8
  %9575 = and i8 %9574, 1
  store i8 %9575, i8* %27, align 1
  %9576 = icmp eq i32 %9564, 0
  %9577 = zext i1 %9576 to i8
  store i8 %9577, i8* %30, align 1
  %9578 = lshr i32 %9564, 31
  %9579 = trunc i32 %9578 to i8
  store i8 %9579, i8* %33, align 1
  %9580 = lshr i32 %9563, 31
  %9581 = xor i32 %9578, %9580
  %9582 = add nuw nsw i32 %9581, %9580
  %9583 = icmp eq i32 %9582, 2
  %9584 = zext i1 %9583 to i8
  store i8 %9584, i8* %39, align 1
  %9585 = icmp ne i8 %9579, 0
  %9586 = xor i1 %9585, %9583
  %.demorgan366 = or i1 %9576, %9586
  %.v382 = select i1 %.demorgan366, i64 10, i64 2477
  %9587 = add i64 %9558, %.v382
  store i64 %9587, i64* %3, align 8
  br i1 %.demorgan366, label %block_40e652, label %block_.L_40eff5

block_40e652:                                     ; preds = %block_.L_40e648
  %9588 = add i64 %9559, -36
  %9589 = add i64 %9587, 7
  store i64 %9589, i64* %3, align 8
  %9590 = inttoptr i64 %9588 to i32*
  store i32 0, i32* %9590, align 4
  %.pre296 = load i64, i64* %3, align 8
  br label %block_.L_40e659

block_.L_40e659:                                  ; preds = %block_.L_40efc2, %block_40e652
  %9591 = phi i64 [ %.pre296, %block_40e652 ], [ %14114, %block_.L_40efc2 ]
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.37, %block_40e652 ], [ %MEMORY.39, %block_.L_40efc2 ]
  %9592 = load i64, i64* %RBP.i, align 8
  %9593 = add i64 %9592, -36
  %9594 = add i64 %9591, 4
  store i64 %9594, i64* %3, align 8
  %9595 = inttoptr i64 %9593 to i32*
  %9596 = load i32, i32* %9595, align 4
  %9597 = add i32 %9596, -4
  %9598 = icmp ult i32 %9596, 4
  %9599 = zext i1 %9598 to i8
  store i8 %9599, i8* %14, align 1
  %9600 = and i32 %9597, 255
  %9601 = tail call i32 @llvm.ctpop.i32(i32 %9600)
  %9602 = trunc i32 %9601 to i8
  %9603 = and i8 %9602, 1
  %9604 = xor i8 %9603, 1
  store i8 %9604, i8* %21, align 1
  %9605 = xor i32 %9597, %9596
  %9606 = lshr i32 %9605, 4
  %9607 = trunc i32 %9606 to i8
  %9608 = and i8 %9607, 1
  store i8 %9608, i8* %27, align 1
  %9609 = icmp eq i32 %9597, 0
  %9610 = zext i1 %9609 to i8
  store i8 %9610, i8* %30, align 1
  %9611 = lshr i32 %9597, 31
  %9612 = trunc i32 %9611 to i8
  store i8 %9612, i8* %33, align 1
  %9613 = lshr i32 %9596, 31
  %9614 = xor i32 %9611, %9613
  %9615 = add nuw nsw i32 %9614, %9613
  %9616 = icmp eq i32 %9615, 2
  %9617 = zext i1 %9616 to i8
  store i8 %9617, i8* %39, align 1
  %9618 = icmp ne i8 %9612, 0
  %9619 = xor i1 %9618, %9616
  %.demorgan367 = or i1 %9609, %9619
  %.v424 = select i1 %.demorgan367, i64 10, i64 2441
  %9620 = add i64 %9591, %.v424
  %9621 = add i64 %9620, 5
  store i64 %9621, i64* %3, align 8
  br i1 %.demorgan367, label %block_40e663, label %block_.L_40efe2

block_40e663:                                     ; preds = %block_.L_40e659
  store i64 4, i64* %RAX.i1862, align 8
  %9622 = add i64 %9592, -32
  %9623 = add i64 %9620, 8
  store i64 %9623, i64* %3, align 8
  %9624 = inttoptr i64 %9622 to i32*
  %9625 = load i32, i32* %9624, align 4
  %9626 = zext i32 %9625 to i64
  store i64 %9626, i64* %RCX.i2028, align 8
  %9627 = add i64 %9592, -684
  %9628 = add i64 %9620, 14
  store i64 %9628, i64* %3, align 8
  %9629 = inttoptr i64 %9627 to i32*
  store i32 4, i32* %9629, align 4
  %9630 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %9631 = zext i32 %9630 to i64
  %9632 = load i64, i64* %3, align 8
  store i64 %9631, i64* %RAX.i1862, align 8
  %9633 = sext i32 %9630 to i64
  %9634 = lshr i64 %9633, 32
  store i64 %9634, i64* %607, align 8
  %9635 = load i64, i64* %RBP.i, align 8
  %9636 = add i64 %9635, -684
  %9637 = add i64 %9632, 9
  store i64 %9637, i64* %3, align 8
  %9638 = inttoptr i64 %9636 to i32*
  %9639 = load i32, i32* %9638, align 4
  %9640 = zext i32 %9639 to i64
  store i64 %9640, i64* %RCX.i2028, align 8
  %9641 = add i64 %9632, 11
  store i64 %9641, i64* %3, align 8
  %9642 = sext i32 %9639 to i64
  %9643 = shl nuw i64 %9634, 32
  %9644 = or i64 %9643, %9631
  %9645 = sdiv i64 %9644, %9642
  %9646 = shl i64 %9645, 32
  %9647 = ashr exact i64 %9646, 32
  %9648 = icmp eq i64 %9645, %9647
  br i1 %9648, label %9651, label %9649

; <label>:9649:                                   ; preds = %block_40e663
  %9650 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9641, %struct.Memory* %MEMORY.38)
  %.pre297 = load i64, i64* %RAX.i1862, align 8
  %.pre298 = load i64, i64* %3, align 8
  %.pre299 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2207

; <label>:9651:                                   ; preds = %block_40e663
  %9652 = srem i64 %9644, %9642
  %9653 = and i64 %9645, 4294967295
  store i64 %9653, i64* %RAX.i1862, align 8
  %9654 = and i64 %9652, 4294967295
  store i64 %9654, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__ecx.exit2207

routine_idivl__ecx.exit2207:                      ; preds = %9651, %9649
  %9655 = phi i64 [ %.pre299, %9649 ], [ %9635, %9651 ]
  %9656 = phi i64 [ %.pre298, %9649 ], [ %9641, %9651 ]
  %9657 = phi i64 [ %.pre297, %9649 ], [ %9653, %9651 ]
  %9658 = phi %struct.Memory* [ %9650, %9649 ], [ %MEMORY.38, %9651 ]
  %9659 = trunc i64 %9657 to i32
  %9660 = shl i32 %9659, 1
  %9661 = icmp slt i32 %9659, 0
  %9662 = icmp slt i32 %9660, 0
  %9663 = xor i1 %9661, %9662
  %9664 = zext i32 %9660 to i64
  store i64 %9664, i64* %RAX.i1862, align 8
  %.lobit133 = lshr i32 %9659, 31
  %9665 = trunc i32 %.lobit133 to i8
  store i8 %9665, i8* %14, align 1
  %9666 = and i32 %9660, 254
  %9667 = tail call i32 @llvm.ctpop.i32(i32 %9666)
  %9668 = trunc i32 %9667 to i8
  %9669 = and i8 %9668, 1
  %9670 = xor i8 %9669, 1
  store i8 %9670, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9671 = icmp eq i32 %9660, 0
  %9672 = zext i1 %9671 to i8
  store i8 %9672, i8* %30, align 1
  %9673 = lshr i32 %9659, 30
  %9674 = trunc i32 %9673 to i8
  %9675 = and i8 %9674, 1
  store i8 %9675, i8* %33, align 1
  %9676 = zext i1 %9663 to i8
  store i8 %9676, i8* %39, align 1
  %9677 = add i64 %9655, -36
  %9678 = add i64 %9656, 5
  store i64 %9678, i64* %3, align 8
  %9679 = inttoptr i64 %9677 to i32*
  %9680 = load i32, i32* %9679, align 4
  %9681 = zext i32 %9680 to i64
  store i64 %9681, i64* %RSI.i2426, align 8
  %9682 = add i64 %9655, -688
  %9683 = add i64 %9656, 11
  store i64 %9683, i64* %3, align 8
  %9684 = inttoptr i64 %9682 to i32*
  store i32 %9660, i32* %9684, align 4
  %9685 = load i32, i32* %ESI.i1753, align 4
  %9686 = zext i32 %9685 to i64
  %9687 = load i64, i64* %3, align 8
  store i64 %9686, i64* %RAX.i1862, align 8
  %9688 = sext i32 %9685 to i64
  %9689 = lshr i64 %9688, 32
  store i64 %9689, i64* %607, align 8
  %9690 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %9691 = add i64 %9687, 5
  store i64 %9691, i64* %3, align 8
  %9692 = sext i32 %9690 to i64
  %9693 = shl nuw i64 %9689, 32
  %9694 = or i64 %9693, %9686
  %9695 = sdiv i64 %9694, %9692
  %9696 = shl i64 %9695, 32
  %9697 = ashr exact i64 %9696, 32
  %9698 = icmp eq i64 %9695, %9697
  br i1 %9698, label %9701, label %9699

; <label>:9699:                                   ; preds = %routine_idivl__ecx.exit2207
  %9700 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9691, %struct.Memory* %9658)
  %.pre300 = load i64, i64* %3, align 8
  %.pre301 = load i32, i32* %EAX.i4969.pre-phi, align 4
  br label %routine_idivl__ecx.exit

; <label>:9701:                                   ; preds = %routine_idivl__ecx.exit2207
  %9702 = srem i64 %9694, %9692
  %9703 = and i64 %9695, 4294967295
  store i64 %9703, i64* %RAX.i1862, align 8
  %9704 = and i64 %9702, 4294967295
  store i64 %9704, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9705 = trunc i64 %9695 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %9701, %9699
  %9706 = phi i32 [ %.pre301, %9699 ], [ %9705, %9701 ]
  %9707 = phi i64 [ %.pre300, %9699 ], [ %9691, %9701 ]
  %9708 = phi %struct.Memory* [ %9700, %9699 ], [ %9658, %9701 ]
  %9709 = load i64, i64* %RBP.i, align 8
  %9710 = add i64 %9709, -688
  %9711 = add i64 %9707, 6
  store i64 %9711, i64* %3, align 8
  %9712 = inttoptr i64 %9710 to i32*
  %9713 = load i32, i32* %9712, align 4
  %9714 = add i32 %9706, %9713
  %9715 = zext i32 %9714 to i64
  store i64 %9715, i64* %RSI.i2426, align 8
  %9716 = icmp ult i32 %9714, %9713
  %9717 = icmp ult i32 %9714, %9706
  %9718 = or i1 %9716, %9717
  %9719 = zext i1 %9718 to i8
  store i8 %9719, i8* %14, align 1
  %9720 = and i32 %9714, 255
  %9721 = tail call i32 @llvm.ctpop.i32(i32 %9720)
  %9722 = trunc i32 %9721 to i8
  %9723 = and i8 %9722, 1
  %9724 = xor i8 %9723, 1
  store i8 %9724, i8* %21, align 1
  %9725 = xor i32 %9706, %9713
  %9726 = xor i32 %9725, %9714
  %9727 = lshr i32 %9726, 4
  %9728 = trunc i32 %9727 to i8
  %9729 = and i8 %9728, 1
  store i8 %9729, i8* %27, align 1
  %9730 = icmp eq i32 %9714, 0
  %9731 = zext i1 %9730 to i8
  store i8 %9731, i8* %30, align 1
  %9732 = lshr i32 %9714, 31
  %9733 = trunc i32 %9732 to i8
  store i8 %9733, i8* %33, align 1
  %9734 = lshr i32 %9713, 31
  %9735 = lshr i32 %9706, 31
  %9736 = xor i32 %9732, %9734
  %9737 = xor i32 %9732, %9735
  %9738 = add nuw nsw i32 %9736, %9737
  %9739 = icmp eq i32 %9738, 2
  %9740 = zext i1 %9739 to i8
  store i8 %9740, i8* %39, align 1
  %9741 = add i64 %9709, -468
  %9742 = add i64 %9707, 14
  store i64 %9742, i64* %3, align 8
  %9743 = inttoptr i64 %9741 to i32*
  store i32 %9714, i32* %9743, align 4
  %9744 = load i64, i64* %3, align 8
  %9745 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9745, i64* %RDI.i3890, align 8
  %9746 = add i64 %9745, 14136
  %9747 = add i64 %9744, 15
  store i64 %9747, i64* %3, align 8
  %9748 = inttoptr i64 %9746 to i64*
  %9749 = load i64, i64* %9748, align 8
  store i64 %9749, i64* %RDI.i3890, align 8
  %9750 = load i64, i64* %RBP.i, align 8
  %9751 = add i64 %9750, -4
  %9752 = add i64 %9744, 18
  store i64 %9752, i64* %3, align 8
  %9753 = inttoptr i64 %9751 to i32*
  %9754 = load i32, i32* %9753, align 4
  %9755 = add i32 %9754, 4
  %9756 = zext i32 %9755 to i64
  store i64 %9756, i64* %RAX.i1862, align 8
  %9757 = icmp ugt i32 %9754, -5
  %9758 = zext i1 %9757 to i8
  store i8 %9758, i8* %14, align 1
  %9759 = and i32 %9755, 255
  %9760 = tail call i32 @llvm.ctpop.i32(i32 %9759)
  %9761 = trunc i32 %9760 to i8
  %9762 = and i8 %9761, 1
  %9763 = xor i8 %9762, 1
  store i8 %9763, i8* %21, align 1
  %9764 = xor i32 %9755, %9754
  %9765 = lshr i32 %9764, 4
  %9766 = trunc i32 %9765 to i8
  %9767 = and i8 %9766, 1
  store i8 %9767, i8* %27, align 1
  %9768 = icmp eq i32 %9755, 0
  %9769 = zext i1 %9768 to i8
  store i8 %9769, i8* %30, align 1
  %9770 = lshr i32 %9755, 31
  %9771 = trunc i32 %9770 to i8
  store i8 %9771, i8* %33, align 1
  %9772 = lshr i32 %9754, 31
  %9773 = xor i32 %9770, %9772
  %9774 = add nuw nsw i32 %9773, %9770
  %9775 = icmp eq i32 %9774, 2
  %9776 = zext i1 %9775 to i8
  store i8 %9776, i8* %39, align 1
  %9777 = sext i32 %9755 to i64
  store i64 %9777, i64* %R8.i3081, align 8
  %9778 = shl nsw i64 %9777, 3
  %9779 = add i64 %9749, %9778
  %9780 = add i64 %9744, 28
  store i64 %9780, i64* %3, align 8
  %9781 = inttoptr i64 %9779 to i64*
  %9782 = load i64, i64* %9781, align 8
  store i64 %9782, i64* %RDI.i3890, align 8
  %9783 = add i64 %9750, -468
  %9784 = add i64 %9744, 35
  store i64 %9784, i64* %3, align 8
  %9785 = inttoptr i64 %9783 to i32*
  %9786 = load i32, i32* %9785, align 4
  %9787 = sext i32 %9786 to i64
  store i64 %9787, i64* %R8.i3081, align 8
  %9788 = shl nsw i64 %9787, 3
  %9789 = add i64 %9788, %9782
  %9790 = add i64 %9744, 39
  store i64 %9790, i64* %3, align 8
  %9791 = inttoptr i64 %9789 to i64*
  %9792 = load i64, i64* %9791, align 8
  store i64 %9792, i64* %RDI.i3890, align 8
  %9793 = add i64 %9744, 42
  store i64 %9793, i64* %3, align 8
  %9794 = inttoptr i64 %9792 to i64*
  %9795 = load i64, i64* %9794, align 8
  %9796 = add i64 %9750, -496
  %9797 = add i64 %9744, 49
  store i64 %9797, i64* %3, align 8
  %9798 = inttoptr i64 %9796 to i64*
  store i64 %9795, i64* %9798, align 8
  %9799 = load i64, i64* %3, align 8
  %9800 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9800, i64* %RDI.i3890, align 8
  %9801 = add i64 %9800, 14136
  %9802 = add i64 %9799, 15
  store i64 %9802, i64* %3, align 8
  %9803 = inttoptr i64 %9801 to i64*
  %9804 = load i64, i64* %9803, align 8
  store i64 %9804, i64* %RDI.i3890, align 8
  %9805 = load i64, i64* %RBP.i, align 8
  %9806 = add i64 %9805, -4
  %9807 = add i64 %9799, 18
  store i64 %9807, i64* %3, align 8
  %9808 = inttoptr i64 %9806 to i32*
  %9809 = load i32, i32* %9808, align 4
  %9810 = add i32 %9809, 4
  %9811 = zext i32 %9810 to i64
  store i64 %9811, i64* %RAX.i1862, align 8
  %9812 = icmp ugt i32 %9809, -5
  %9813 = zext i1 %9812 to i8
  store i8 %9813, i8* %14, align 1
  %9814 = and i32 %9810, 255
  %9815 = tail call i32 @llvm.ctpop.i32(i32 %9814)
  %9816 = trunc i32 %9815 to i8
  %9817 = and i8 %9816, 1
  %9818 = xor i8 %9817, 1
  store i8 %9818, i8* %21, align 1
  %9819 = xor i32 %9810, %9809
  %9820 = lshr i32 %9819, 4
  %9821 = trunc i32 %9820 to i8
  %9822 = and i8 %9821, 1
  store i8 %9822, i8* %27, align 1
  %9823 = icmp eq i32 %9810, 0
  %9824 = zext i1 %9823 to i8
  store i8 %9824, i8* %30, align 1
  %9825 = lshr i32 %9810, 31
  %9826 = trunc i32 %9825 to i8
  store i8 %9826, i8* %33, align 1
  %9827 = lshr i32 %9809, 31
  %9828 = xor i32 %9825, %9827
  %9829 = add nuw nsw i32 %9828, %9825
  %9830 = icmp eq i32 %9829, 2
  %9831 = zext i1 %9830 to i8
  store i8 %9831, i8* %39, align 1
  %9832 = sext i32 %9810 to i64
  store i64 %9832, i64* %R8.i3081, align 8
  %9833 = shl nsw i64 %9832, 3
  %9834 = add i64 %9804, %9833
  %9835 = add i64 %9799, 28
  store i64 %9835, i64* %3, align 8
  %9836 = inttoptr i64 %9834 to i64*
  %9837 = load i64, i64* %9836, align 8
  store i64 %9837, i64* %RDI.i3890, align 8
  %9838 = add i64 %9805, -468
  %9839 = add i64 %9799, 35
  store i64 %9839, i64* %3, align 8
  %9840 = inttoptr i64 %9838 to i32*
  %9841 = load i32, i32* %9840, align 4
  %9842 = sext i32 %9841 to i64
  store i64 %9842, i64* %R8.i3081, align 8
  %9843 = shl nsw i64 %9842, 3
  %9844 = add i64 %9843, %9837
  %9845 = add i64 %9799, 39
  store i64 %9845, i64* %3, align 8
  %9846 = inttoptr i64 %9844 to i64*
  %9847 = load i64, i64* %9846, align 8
  store i64 %9847, i64* %RDI.i3890, align 8
  %9848 = add i64 %9847, 8
  %9849 = add i64 %9799, 43
  store i64 %9849, i64* %3, align 8
  %9850 = inttoptr i64 %9848 to i64*
  %9851 = load i64, i64* %9850, align 8
  store i64 %9851, i64* %RDI.i3890, align 8
  %9852 = add i64 %9805, -504
  %9853 = add i64 %9799, 50
  store i64 %9853, i64* %3, align 8
  %9854 = inttoptr i64 %9852 to i64*
  store i64 %9851, i64* %9854, align 8
  %9855 = load i64, i64* %RBP.i, align 8
  %9856 = add i64 %9855, -68
  %9857 = load i64, i64* %3, align 8
  %9858 = add i64 %9857, 7
  store i64 %9858, i64* %3, align 8
  %9859 = inttoptr i64 %9856 to i32*
  store i32 -1, i32* %9859, align 4
  %9860 = load i64, i64* %RBP.i, align 8
  %9861 = add i64 %9860, -64
  %9862 = load i64, i64* %3, align 8
  %9863 = add i64 %9862, 7
  store i64 %9863, i64* %3, align 8
  %9864 = inttoptr i64 %9861 to i32*
  store i32 0, i32* %9864, align 4
  %9865 = load i64, i64* %RBP.i, align 8
  %9866 = add i64 %9865, -48
  %9867 = load i64, i64* %3, align 8
  %9868 = add i64 %9867, 7
  store i64 %9868, i64* %3, align 8
  %9869 = inttoptr i64 %9866 to i32*
  store i32 1, i32* %9869, align 4
  %.pre302 = load i64, i64* %3, align 8
  br label %block_.L_40e713

block_.L_40e713:                                  ; preds = %routine_shll__cl___eax.exit, %routine_idivl__ecx.exit
  %9870 = phi i64 [ %.pre302, %routine_idivl__ecx.exit ], [ %14070, %routine_shll__cl___eax.exit ]
  %MEMORY.39 = phi %struct.Memory* [ %9708, %routine_idivl__ecx.exit ], [ %call2_40ef4f, %routine_shll__cl___eax.exit ]
  %9871 = load i64, i64* %RBP.i, align 8
  %9872 = add i64 %9871, -48
  %9873 = add i64 %9870, 4
  store i64 %9873, i64* %3, align 8
  %9874 = inttoptr i64 %9872 to i32*
  %9875 = load i32, i32* %9874, align 4
  %9876 = add i32 %9875, -16
  %9877 = icmp ult i32 %9875, 16
  %9878 = zext i1 %9877 to i8
  store i8 %9878, i8* %14, align 1
  %9879 = and i32 %9876, 255
  %9880 = tail call i32 @llvm.ctpop.i32(i32 %9879)
  %9881 = trunc i32 %9880 to i8
  %9882 = and i8 %9881, 1
  %9883 = xor i8 %9882, 1
  store i8 %9883, i8* %21, align 1
  %9884 = xor i32 %9875, 16
  %9885 = xor i32 %9884, %9876
  %9886 = lshr i32 %9885, 4
  %9887 = trunc i32 %9886 to i8
  %9888 = and i8 %9887, 1
  store i8 %9888, i8* %27, align 1
  %9889 = icmp eq i32 %9876, 0
  %9890 = zext i1 %9889 to i8
  store i8 %9890, i8* %30, align 1
  %9891 = lshr i32 %9876, 31
  %9892 = trunc i32 %9891 to i8
  store i8 %9892, i8* %33, align 1
  %9893 = lshr i32 %9875, 31
  %9894 = xor i32 %9891, %9893
  %9895 = add nuw nsw i32 %9894, %9893
  %9896 = icmp eq i32 %9895, 2
  %9897 = zext i1 %9896 to i8
  store i8 %9897, i8* %39, align 1
  %9898 = icmp ne i8 %9892, 0
  %9899 = xor i1 %9898, %9896
  %.v393 = select i1 %9899, i64 10, i64 2223
  %9900 = add i64 %9870, %.v393
  store i64 %9900, i64* %3, align 8
  br i1 %9899, label %block_40e71d, label %block_.L_40efc2

block_40e71d:                                     ; preds = %block_.L_40e713
  %9901 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9901, i64* %RAX.i1862, align 8
  %9902 = add i64 %9901, 72444
  %9903 = add i64 %9900, 15
  store i64 %9903, i64* %3, align 8
  %9904 = inttoptr i64 %9902 to i32*
  %9905 = load i32, i32* %9904, align 4
  store i8 0, i8* %14, align 1
  %9906 = and i32 %9905, 255
  %9907 = tail call i32 @llvm.ctpop.i32(i32 %9906)
  %9908 = trunc i32 %9907 to i8
  %9909 = and i8 %9908, 1
  %9910 = xor i8 %9909, 1
  store i8 %9910, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9911 = icmp eq i32 %9905, 0
  %9912 = zext i1 %9911 to i8
  store i8 %9912, i8* %30, align 1
  %9913 = lshr i32 %9905, 31
  %9914 = trunc i32 %9913 to i8
  store i8 %9914, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v394 = select i1 %9911, i64 21, i64 56
  %9915 = add i64 %9900, %.v394
  store i64 %9915, i64* %3, align 8
  br i1 %9911, label %block_40e732, label %block_.L_40e755

block_40e732:                                     ; preds = %block_40e71d
  %9916 = load i32, i32* bitcast (%G_0x6d4750_type* @G_0x6d4750 to i32*), align 8
  store i8 0, i8* %14, align 1
  %9917 = and i32 %9916, 255
  %9918 = tail call i32 @llvm.ctpop.i32(i32 %9917)
  %9919 = trunc i32 %9918 to i8
  %9920 = and i8 %9919, 1
  %9921 = xor i8 %9920, 1
  store i8 %9921, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9922 = icmp eq i32 %9916, 0
  %9923 = zext i1 %9922 to i8
  store i8 %9923, i8* %30, align 1
  %9924 = lshr i32 %9916, 31
  %9925 = trunc i32 %9924 to i8
  store i8 %9925, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v405 = select i1 %9922, i64 70, i64 14
  %9926 = add i64 %9915, %.v405
  store i64 %9926, i64* %3, align 8
  br i1 %9922, label %block_.L_40e778, label %block_40e740

block_40e740:                                     ; preds = %block_40e732
  store i64 %9901, i64* %RAX.i1862, align 8
  %9927 = add i64 %9901, 72008
  %9928 = add i64 %9926, 15
  store i64 %9928, i64* %3, align 8
  %9929 = inttoptr i64 %9927 to i32*
  %9930 = load i32, i32* %9929, align 4
  store i8 0, i8* %14, align 1
  %9931 = and i32 %9930, 255
  %9932 = tail call i32 @llvm.ctpop.i32(i32 %9931)
  %9933 = trunc i32 %9932 to i8
  %9934 = and i8 %9933, 1
  %9935 = xor i8 %9934, 1
  store i8 %9935, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9936 = icmp eq i32 %9930, 0
  %9937 = zext i1 %9936 to i8
  store i8 %9937, i8* %30, align 1
  %9938 = lshr i32 %9930, 31
  %9939 = trunc i32 %9938 to i8
  store i8 %9939, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v406 = select i1 %9936, i64 56, i64 21
  %9940 = add i64 %9926, %.v406
  store i64 %9940, i64* %3, align 8
  br i1 %9936, label %block_.L_40e778, label %block_.L_40e755

block_.L_40e755:                                  ; preds = %block_40e71d, %block_40e740
  %9941 = phi i64 [ %9940, %block_40e740 ], [ %9915, %block_40e71d ]
  %9942 = add i64 %9941, 4
  store i64 %9942, i64* %3, align 8
  %9943 = load i32, i32* %9874, align 4
  %9944 = sext i32 %9943 to i64
  store i64 %9944, i64* %RAX.i1862, align 8
  %9945 = shl nsw i64 %9944, 1
  %9946 = add nsw i64 %9945, 4924288
  %9947 = add i64 %9941, 12
  store i64 %9947, i64* %3, align 8
  %9948 = inttoptr i64 %9946 to i8*
  %9949 = load i8, i8* %9948, align 2
  %9950 = zext i8 %9949 to i64
  store i64 %9950, i64* %RCX.i2028, align 8
  %9951 = add i64 %9871, -12
  %9952 = zext i8 %9949 to i32
  %9953 = add i64 %9941, 15
  store i64 %9953, i64* %3, align 8
  %9954 = inttoptr i64 %9951 to i32*
  store i32 %9952, i32* %9954, align 4
  %9955 = load i64, i64* %RBP.i, align 8
  %9956 = add i64 %9955, -48
  %9957 = load i64, i64* %3, align 8
  %9958 = add i64 %9957, 4
  store i64 %9958, i64* %3, align 8
  %9959 = inttoptr i64 %9956 to i32*
  %9960 = load i32, i32* %9959, align 4
  %9961 = sext i32 %9960 to i64
  store i64 %9961, i64* %RAX.i1862, align 8
  %9962 = shl nsw i64 %9961, 1
  %9963 = add nsw i64 %9962, 4924289
  %9964 = add i64 %9957, 12
  store i64 %9964, i64* %3, align 8
  %9965 = inttoptr i64 %9963 to i8*
  %9966 = load i8, i8* %9965, align 1
  %9967 = zext i8 %9966 to i64
  store i64 %9967, i64* %RCX.i2028, align 8
  %9968 = add i64 %9955, -16
  %9969 = zext i8 %9966 to i32
  %9970 = add i64 %9957, 15
  store i64 %9970, i64* %3, align 8
  %9971 = inttoptr i64 %9968 to i32*
  store i32 %9969, i32* %9971, align 4
  %9972 = load i64, i64* %3, align 8
  %9973 = add i64 %9972, 35
  store i64 %9973, i64* %3, align 8
  br label %block_.L_40e796

block_.L_40e778:                                  ; preds = %block_40e740, %block_40e732
  %9974 = phi i64 [ %9940, %block_40e740 ], [ %9926, %block_40e732 ]
  %9975 = add i64 %9974, 4
  store i64 %9975, i64* %3, align 8
  %9976 = load i32, i32* %9874, align 4
  %9977 = sext i32 %9976 to i64
  store i64 %9977, i64* %RAX.i1862, align 8
  %9978 = shl nsw i64 %9977, 1
  %9979 = add nsw i64 %9978, 4924256
  %9980 = add i64 %9974, 12
  store i64 %9980, i64* %3, align 8
  %9981 = inttoptr i64 %9979 to i8*
  %9982 = load i8, i8* %9981, align 2
  %9983 = zext i8 %9982 to i64
  store i64 %9983, i64* %RCX.i2028, align 8
  %9984 = add i64 %9871, -12
  %9985 = zext i8 %9982 to i32
  %9986 = add i64 %9974, 15
  store i64 %9986, i64* %3, align 8
  %9987 = inttoptr i64 %9984 to i32*
  store i32 %9985, i32* %9987, align 4
  %9988 = load i64, i64* %RBP.i, align 8
  %9989 = add i64 %9988, -48
  %9990 = load i64, i64* %3, align 8
  %9991 = add i64 %9990, 4
  store i64 %9991, i64* %3, align 8
  %9992 = inttoptr i64 %9989 to i32*
  %9993 = load i32, i32* %9992, align 4
  %9994 = sext i32 %9993 to i64
  store i64 %9994, i64* %RAX.i1862, align 8
  %9995 = shl nsw i64 %9994, 1
  %9996 = add nsw i64 %9995, 4924257
  %9997 = add i64 %9990, 12
  store i64 %9997, i64* %3, align 8
  %9998 = inttoptr i64 %9996 to i8*
  %9999 = load i8, i8* %9998, align 1
  %10000 = zext i8 %9999 to i64
  store i64 %10000, i64* %RCX.i2028, align 8
  %10001 = add i64 %9988, -16
  %10002 = zext i8 %9999 to i32
  %10003 = add i64 %9990, 15
  store i64 %10003, i64* %3, align 8
  %10004 = inttoptr i64 %10001 to i32*
  store i32 %10002, i32* %10004, align 4
  %.pre303 = load i64, i64* %3, align 8
  br label %block_.L_40e796

block_.L_40e796:                                  ; preds = %block_.L_40e778, %block_.L_40e755
  %10005 = phi i64 [ %.pre303, %block_.L_40e778 ], [ %9973, %block_.L_40e755 ]
  %10006 = load i64, i64* %RBP.i, align 8
  %10007 = add i64 %10006, -400
  store i64 %10007, i64* %RAX.i1862, align 8
  %10008 = add i64 %10006, -68
  %10009 = add i64 %10005, 10
  store i64 %10009, i64* %3, align 8
  %10010 = inttoptr i64 %10008 to i32*
  %10011 = load i32, i32* %10010, align 4
  %10012 = add i32 %10011, 1
  %10013 = zext i32 %10012 to i64
  store i64 %10013, i64* %RCX.i2028, align 8
  %10014 = icmp eq i32 %10011, -1
  %10015 = icmp eq i32 %10012, 0
  %10016 = or i1 %10014, %10015
  %10017 = zext i1 %10016 to i8
  store i8 %10017, i8* %14, align 1
  %10018 = and i32 %10012, 255
  %10019 = tail call i32 @llvm.ctpop.i32(i32 %10018)
  %10020 = trunc i32 %10019 to i8
  %10021 = and i8 %10020, 1
  %10022 = xor i8 %10021, 1
  store i8 %10022, i8* %21, align 1
  %10023 = xor i32 %10012, %10011
  %10024 = lshr i32 %10023, 4
  %10025 = trunc i32 %10024 to i8
  %10026 = and i8 %10025, 1
  store i8 %10026, i8* %27, align 1
  %10027 = zext i1 %10015 to i8
  store i8 %10027, i8* %30, align 1
  %10028 = lshr i32 %10012, 31
  %10029 = trunc i32 %10028 to i8
  store i8 %10029, i8* %33, align 1
  %10030 = lshr i32 %10011, 31
  %10031 = xor i32 %10028, %10030
  %10032 = add nuw nsw i32 %10031, %10028
  %10033 = icmp eq i32 %10032, 2
  %10034 = zext i1 %10033 to i8
  store i8 %10034, i8* %39, align 1
  %10035 = add i64 %10005, 16
  store i64 %10035, i64* %3, align 8
  store i32 %10012, i32* %10010, align 4
  %10036 = load i64, i64* %RBP.i, align 8
  %10037 = add i64 %10036, -28
  %10038 = load i64, i64* %3, align 8
  %10039 = add i64 %10038, 7
  store i64 %10039, i64* %3, align 8
  %10040 = inttoptr i64 %10037 to i32*
  store i32 0, i32* %10040, align 4
  %10041 = load i64, i64* %RBP.i, align 8
  %10042 = add i64 %10041, -36
  %10043 = load i64, i64* %3, align 8
  %10044 = add i64 %10043, 3
  store i64 %10044, i64* %3, align 8
  %10045 = inttoptr i64 %10042 to i32*
  %10046 = load i32, i32* %10045, align 4
  %10047 = zext i32 %10046 to i64
  store i64 %10047, i64* %RCX.i2028, align 8
  %10048 = add i64 %10041, -12
  %10049 = add i64 %10043, 6
  store i64 %10049, i64* %3, align 8
  %10050 = inttoptr i64 %10048 to i32*
  %10051 = load i32, i32* %10050, align 4
  %10052 = add i32 %10051, %10046
  %10053 = zext i32 %10052 to i64
  store i64 %10053, i64* %RCX.i2028, align 8
  %10054 = sext i32 %10052 to i64
  %10055 = shl nsw i64 %10054, 5
  store i64 %10055, i64* %RDX.i4840, align 8
  %10056 = load i64, i64* %RAX.i1862, align 8
  %10057 = add i64 %10055, %10056
  store i64 %10057, i64* %RAX.i1862, align 8
  %10058 = icmp ult i64 %10057, %10056
  %10059 = icmp ult i64 %10057, %10055
  %10060 = or i1 %10058, %10059
  %10061 = zext i1 %10060 to i8
  store i8 %10061, i8* %14, align 1
  %10062 = trunc i64 %10057 to i32
  %10063 = and i32 %10062, 255
  %10064 = tail call i32 @llvm.ctpop.i32(i32 %10063)
  %10065 = trunc i32 %10064 to i8
  %10066 = and i8 %10065, 1
  %10067 = xor i8 %10066, 1
  store i8 %10067, i8* %21, align 1
  %10068 = xor i64 %10056, %10057
  %10069 = lshr i64 %10068, 4
  %10070 = trunc i64 %10069 to i8
  %10071 = and i8 %10070, 1
  store i8 %10071, i8* %27, align 1
  %10072 = icmp eq i64 %10057, 0
  %10073 = zext i1 %10072 to i8
  store i8 %10073, i8* %30, align 1
  %10074 = lshr i64 %10057, 63
  %10075 = trunc i64 %10074 to i8
  store i8 %10075, i8* %33, align 1
  %10076 = lshr i64 %10056, 63
  %10077 = lshr i64 %10054, 58
  %10078 = and i64 %10077, 1
  %10079 = xor i64 %10074, %10076
  %10080 = xor i64 %10074, %10078
  %10081 = add nuw nsw i64 %10079, %10080
  %10082 = icmp eq i64 %10081, 2
  %10083 = zext i1 %10082 to i8
  store i8 %10083, i8* %39, align 1
  %10084 = load i64, i64* %RBP.i, align 8
  %10085 = add i64 %10084, -32
  %10086 = add i64 %10043, 19
  store i64 %10086, i64* %3, align 8
  %10087 = inttoptr i64 %10085 to i32*
  %10088 = load i32, i32* %10087, align 4
  %10089 = zext i32 %10088 to i64
  store i64 %10089, i64* %RCX.i2028, align 8
  %10090 = add i64 %10084, -16
  %10091 = add i64 %10043, 22
  store i64 %10091, i64* %3, align 8
  %10092 = inttoptr i64 %10090 to i32*
  %10093 = load i32, i32* %10092, align 4
  %10094 = add i32 %10093, %10088
  %10095 = zext i32 %10094 to i64
  store i64 %10095, i64* %RCX.i2028, align 8
  %10096 = icmp ult i32 %10094, %10088
  %10097 = icmp ult i32 %10094, %10093
  %10098 = or i1 %10096, %10097
  %10099 = zext i1 %10098 to i8
  store i8 %10099, i8* %14, align 1
  %10100 = and i32 %10094, 255
  %10101 = tail call i32 @llvm.ctpop.i32(i32 %10100)
  %10102 = trunc i32 %10101 to i8
  %10103 = and i8 %10102, 1
  %10104 = xor i8 %10103, 1
  store i8 %10104, i8* %21, align 1
  %10105 = xor i32 %10093, %10088
  %10106 = xor i32 %10105, %10094
  %10107 = lshr i32 %10106, 4
  %10108 = trunc i32 %10107 to i8
  %10109 = and i8 %10108, 1
  store i8 %10109, i8* %27, align 1
  %10110 = icmp eq i32 %10094, 0
  %10111 = zext i1 %10110 to i8
  store i8 %10111, i8* %30, align 1
  %10112 = lshr i32 %10094, 31
  %10113 = trunc i32 %10112 to i8
  store i8 %10113, i8* %33, align 1
  %10114 = lshr i32 %10088, 31
  %10115 = lshr i32 %10093, 31
  %10116 = xor i32 %10112, %10114
  %10117 = xor i32 %10112, %10115
  %10118 = add nuw nsw i32 %10116, %10117
  %10119 = icmp eq i32 %10118, 2
  %10120 = zext i1 %10119 to i8
  store i8 %10120, i8* %39, align 1
  %10121 = sext i32 %10094 to i64
  store i64 %10121, i64* %RDX.i4840, align 8
  %10122 = shl nsw i64 %10121, 2
  %10123 = add i64 %10057, %10122
  %10124 = add i64 %10043, 28
  store i64 %10124, i64* %3, align 8
  %10125 = inttoptr i64 %10123 to i32*
  %10126 = load i32, i32* %10125, align 4
  %10127 = zext i32 %10126 to i64
  store i64 %10127, i64* %RDI.i3890, align 8
  %10128 = add i64 %10043, -55213
  %10129 = add i64 %10043, 33
  %10130 = load i64, i64* %6, align 8
  %10131 = add i64 %10130, -8
  %10132 = inttoptr i64 %10131 to i64*
  store i64 %10129, i64* %10132, align 8
  store i64 %10131, i64* %6, align 8
  store i64 %10128, i64* %3, align 8
  %10133 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.39)
  %10134 = load i64, i64* %RBP.i, align 8
  %10135 = add i64 %10134, -400
  %10136 = load i64, i64* %3, align 8
  store i64 %10135, i64* %RDX.i4840, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RSI.i2426, align 8
  %10137 = add i64 %10134, -460
  %10138 = add i64 %10136, 24
  store i64 %10138, i64* %3, align 8
  %10139 = inttoptr i64 %10137 to i32*
  %10140 = load i32, i32* %10139, align 4
  %10141 = sext i32 %10140 to i64
  %10142 = shl nsw i64 %10141, 6
  store i64 %10142, i64* %R8.i3081, align 8
  %10143 = add i64 %10142, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %10143, i64* %R9.i3079, align 8
  %10144 = icmp ult i64 %10143, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %10145 = icmp ult i64 %10143, %10142
  %10146 = or i1 %10144, %10145
  %10147 = zext i1 %10146 to i8
  store i8 %10147, i8* %14, align 1
  %10148 = trunc i64 %10143 to i32
  %10149 = and i32 %10148, 248
  %10150 = tail call i32 @llvm.ctpop.i32(i32 %10149)
  %10151 = trunc i32 %10150 to i8
  %10152 = and i8 %10151, 1
  %10153 = xor i8 %10152, 1
  store i8 %10153, i8* %21, align 1
  %10154 = xor i64 %10143, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %10155 = lshr i64 %10154, 4
  %10156 = trunc i64 %10155 to i8
  %10157 = and i8 %10156, 1
  store i8 %10157, i8* %27, align 1
  %10158 = icmp eq i64 %10143, 0
  %10159 = zext i1 %10158 to i8
  store i8 %10159, i8* %30, align 1
  %10160 = lshr i64 %10143, 63
  %10161 = trunc i64 %10160 to i8
  store i8 %10161, i8* %33, align 1
  %10162 = lshr i64 %10141, 57
  %10163 = and i64 %10162, 1
  %10164 = xor i64 %10160, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %10165 = xor i64 %10160, %10163
  %10166 = add nuw nsw i64 %10164, %10165
  %10167 = icmp eq i64 %10166, 2
  %10168 = zext i1 %10167 to i8
  store i8 %10168, i8* %39, align 1
  %10169 = add i64 %10134, -12
  %10170 = add i64 %10136, 38
  store i64 %10170, i64* %3, align 8
  %10171 = inttoptr i64 %10169 to i32*
  %10172 = load i32, i32* %10171, align 4
  %10173 = sext i32 %10172 to i64
  %10174 = shl nsw i64 %10173, 4
  store i64 %10174, i64* %R8.i3081, align 8
  %10175 = add i64 %10174, %10143
  store i64 %10175, i64* %R9.i3079, align 8
  %10176 = icmp ult i64 %10175, %10143
  %10177 = icmp ult i64 %10175, %10174
  %10178 = or i1 %10176, %10177
  %10179 = zext i1 %10178 to i8
  store i8 %10179, i8* %14, align 1
  %10180 = trunc i64 %10175 to i32
  %10181 = and i32 %10180, 248
  %10182 = tail call i32 @llvm.ctpop.i32(i32 %10181)
  %10183 = trunc i32 %10182 to i8
  %10184 = and i8 %10183, 1
  %10185 = xor i8 %10184, 1
  store i8 %10185, i8* %21, align 1
  %10186 = xor i64 %10174, %10143
  %10187 = xor i64 %10186, %10175
  %10188 = lshr i64 %10187, 4
  %10189 = trunc i64 %10188 to i8
  %10190 = and i8 %10189, 1
  store i8 %10190, i8* %27, align 1
  %10191 = icmp eq i64 %10175, 0
  %10192 = zext i1 %10191 to i8
  store i8 %10192, i8* %30, align 1
  %10193 = lshr i64 %10175, 63
  %10194 = trunc i64 %10193 to i8
  store i8 %10194, i8* %33, align 1
  %10195 = lshr i64 %10173, 59
  %10196 = and i64 %10195, 1
  %10197 = xor i64 %10193, %10160
  %10198 = xor i64 %10193, %10196
  %10199 = add nuw nsw i64 %10197, %10198
  %10200 = icmp eq i64 %10199, 2
  %10201 = zext i1 %10200 to i8
  store i8 %10201, i8* %39, align 1
  %10202 = load i64, i64* %RBP.i, align 8
  %10203 = add i64 %10202, -16
  %10204 = add i64 %10136, 49
  store i64 %10204, i64* %3, align 8
  %10205 = inttoptr i64 %10203 to i32*
  %10206 = load i32, i32* %10205, align 4
  %10207 = sext i32 %10206 to i64
  store i64 %10207, i64* %R8.i3081, align 8
  %10208 = load i64, i64* %RAX.i1862, align 8
  %10209 = shl nsw i64 %10207, 2
  %10210 = add i64 %10175, %10209
  %10211 = add i64 %10136, 54
  store i64 %10211, i64* %3, align 8
  %10212 = inttoptr i64 %10210 to i32*
  %10213 = load i32, i32* %10212, align 4
  %10214 = shl i64 %10208, 32
  %10215 = ashr exact i64 %10214, 32
  %10216 = sext i32 %10213 to i64
  %10217 = mul nsw i64 %10216, %10215
  %10218 = trunc i64 %10217 to i32
  %10219 = and i64 %10217, 4294967295
  store i64 %10219, i64* %RAX.i1862, align 8
  %10220 = shl i64 %10217, 32
  %10221 = ashr exact i64 %10220, 32
  %10222 = icmp ne i64 %10221, %10217
  %10223 = zext i1 %10222 to i8
  store i8 %10223, i8* %14, align 1
  %10224 = and i32 %10218, 255
  %10225 = tail call i32 @llvm.ctpop.i32(i32 %10224)
  %10226 = trunc i32 %10225 to i8
  %10227 = and i8 %10226, 1
  %10228 = xor i8 %10227, 1
  store i8 %10228, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %10229 = lshr i32 %10218, 31
  %10230 = trunc i32 %10229 to i8
  store i8 %10230, i8* %33, align 1
  store i8 %10223, i8* %39, align 1
  %10231 = add i64 %10202, -404
  %10232 = add i64 %10136, 60
  store i64 %10232, i64* %3, align 8
  %10233 = trunc i64 %10217 to i32
  %10234 = inttoptr i64 %10231 to i32*
  %10235 = load i32, i32* %10234, align 4
  %10236 = add i32 %10235, %10233
  %10237 = zext i32 %10236 to i64
  store i64 %10237, i64* %RAX.i1862, align 8
  %10238 = icmp ult i32 %10236, %10233
  %10239 = icmp ult i32 %10236, %10235
  %10240 = or i1 %10238, %10239
  %10241 = zext i1 %10240 to i8
  store i8 %10241, i8* %14, align 1
  %10242 = and i32 %10236, 255
  %10243 = tail call i32 @llvm.ctpop.i32(i32 %10242)
  %10244 = trunc i32 %10243 to i8
  %10245 = and i8 %10244, 1
  %10246 = xor i8 %10245, 1
  store i8 %10246, i8* %21, align 1
  %10247 = xor i32 %10235, %10233
  %10248 = xor i32 %10247, %10236
  %10249 = lshr i32 %10248, 4
  %10250 = trunc i32 %10249 to i8
  %10251 = and i8 %10250, 1
  store i8 %10251, i8* %27, align 1
  %10252 = icmp eq i32 %10236, 0
  %10253 = zext i1 %10252 to i8
  store i8 %10253, i8* %30, align 1
  %10254 = lshr i32 %10236, 31
  %10255 = trunc i32 %10254 to i8
  store i8 %10255, i8* %33, align 1
  %10256 = lshr i32 %10233, 31
  %10257 = lshr i32 %10235, 31
  %10258 = xor i32 %10254, %10256
  %10259 = xor i32 %10254, %10257
  %10260 = add nuw nsw i32 %10258, %10259
  %10261 = icmp eq i32 %10260, 2
  %10262 = zext i1 %10261 to i8
  store i8 %10262, i8* %39, align 1
  %10263 = add i64 %10202, -464
  %10264 = add i64 %10136, 66
  store i64 %10264, i64* %3, align 8
  %10265 = inttoptr i64 %10263 to i32*
  %10266 = load i32, i32* %10265, align 4
  %10267 = zext i32 %10266 to i64
  store i64 %10267, i64* %RCX.i2028, align 8
  %10268 = add i64 %10136, 68
  store i64 %10268, i64* %3, align 8
  %10269 = trunc i32 %10266 to i5
  switch i5 %10269, label %10273 [
    i5 0, label %routine_sarl__cl___eax.exit1989
    i5 1, label %10270
  ]

; <label>:10270:                                  ; preds = %block_.L_40e796
  %10271 = shl nuw i64 %10237, 32
  %10272 = ashr i64 %10271, 33
  br label %10280

; <label>:10273:                                  ; preds = %block_.L_40e796
  %10274 = and i32 %10266, 31
  %10275 = zext i32 %10274 to i64
  %10276 = add nsw i64 %10275, -1
  %10277 = sext i32 %10236 to i64
  %10278 = ashr i64 %10277, %10276
  %10279 = lshr i64 %10278, 1
  br label %10280

; <label>:10280:                                  ; preds = %10273, %10270
  %10281 = phi i64 [ %10279, %10273 ], [ %10272, %10270 ]
  %10282 = phi i64 [ %10278, %10273 ], [ %10237, %10270 ]
  %10283 = trunc i64 %10282 to i8
  %10284 = and i8 %10283, 1
  %10285 = trunc i64 %10281 to i32
  %10286 = and i64 %10281, 4294967295
  store i64 %10286, i64* %RAX.i1862, align 8
  store i8 %10284, i8* %14, align 1
  %10287 = and i32 %10285, 255
  %10288 = tail call i32 @llvm.ctpop.i32(i32 %10287)
  %10289 = trunc i32 %10288 to i8
  %10290 = and i8 %10289, 1
  %10291 = xor i8 %10290, 1
  store i8 %10291, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10292 = icmp eq i32 %10285, 0
  %10293 = zext i1 %10292 to i8
  store i8 %10293, i8* %30, align 1
  %10294 = lshr i32 %10285, 31
  %10295 = trunc i32 %10294 to i8
  store i8 %10295, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10296 = trunc i64 %10281 to i32
  br label %routine_sarl__cl___eax.exit1989

routine_sarl__cl___eax.exit1989:                  ; preds = %10280, %block_.L_40e796
  %10297 = phi i32 [ %10296, %10280 ], [ %10236, %block_.L_40e796 ]
  %10298 = add i64 %10202, -508
  %10299 = add i64 %10136, 74
  store i64 %10299, i64* %3, align 8
  %10300 = inttoptr i64 %10298 to i32*
  store i32 %10297, i32* %10300, align 4
  %10301 = load i64, i64* %RBP.i, align 8
  %10302 = add i64 %10301, -508
  %10303 = load i64, i64* %3, align 8
  %10304 = add i64 %10303, 6
  store i64 %10304, i64* %3, align 8
  %10305 = inttoptr i64 %10302 to i32*
  %10306 = load i32, i32* %10305, align 4
  %10307 = zext i32 %10306 to i64
  store i64 %10307, i64* %RAX.i1862, align 8
  %10308 = add i64 %10301, -464
  %10309 = add i64 %10303, 12
  store i64 %10309, i64* %3, align 8
  %10310 = inttoptr i64 %10308 to i32*
  %10311 = load i32, i32* %10310, align 4
  %10312 = zext i32 %10311 to i64
  store i64 %10312, i64* %RCX.i2028, align 8
  %10313 = add i64 %10303, 14
  store i64 %10313, i64* %3, align 8
  %10314 = trunc i32 %10311 to i5
  switch i5 %10314, label %10320 [
    i5 0, label %routine_shll__cl___eax.exit1976
    i5 1, label %10315
  ]

; <label>:10315:                                  ; preds = %routine_sarl__cl___eax.exit1989
  %10316 = shl i32 %10306, 1
  %10317 = icmp slt i32 %10306, 0
  %10318 = icmp slt i32 %10316, 0
  %10319 = xor i1 %10317, %10318
  br label %10329

; <label>:10320:                                  ; preds = %routine_sarl__cl___eax.exit1989
  %10321 = and i32 %10311, 31
  %10322 = zext i32 %10321 to i64
  %10323 = add nuw nsw i64 %10322, 4294967295
  %10324 = and i64 %10323, 4294967295
  %10325 = shl i64 %10307, %10324
  %10326 = trunc i64 %10325 to i32
  %10327 = icmp slt i32 %10326, 0
  %10328 = shl i32 %10326, 1
  br label %10329

; <label>:10329:                                  ; preds = %10320, %10315
  %10330 = phi i1 [ %10317, %10315 ], [ %10327, %10320 ]
  %10331 = phi i1 [ %10319, %10315 ], [ false, %10320 ]
  %10332 = phi i32 [ %10316, %10315 ], [ %10328, %10320 ]
  %10333 = zext i32 %10332 to i64
  store i64 %10333, i64* %RAX.i1862, align 8
  %10334 = zext i1 %10330 to i8
  store i8 %10334, i8* %14, align 1
  %10335 = and i32 %10332, 254
  %10336 = tail call i32 @llvm.ctpop.i32(i32 %10335)
  %10337 = trunc i32 %10336 to i8
  %10338 = and i8 %10337, 1
  %10339 = xor i8 %10338, 1
  store i8 %10339, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10340 = icmp eq i32 %10332, 0
  %10341 = zext i1 %10340 to i8
  store i8 %10341, i8* %30, align 1
  %10342 = lshr i32 %10332, 31
  %10343 = trunc i32 %10342 to i8
  store i8 %10343, i8* %33, align 1
  %10344 = zext i1 %10331 to i8
  store i8 %10344, i8* %39, align 1
  br label %routine_shll__cl___eax.exit1976

routine_shll__cl___eax.exit1976:                  ; preds = %10329, %routine_sarl__cl___eax.exit1989
  %10345 = add i64 %10301, -460
  %10346 = add i64 %10303, 21
  store i64 %10346, i64* %3, align 8
  %10347 = inttoptr i64 %10345 to i32*
  %10348 = load i32, i32* %10347, align 4
  %10349 = sext i32 %10348 to i64
  %10350 = shl nsw i64 %10349, 6
  store i64 %10350, i64* %R8.i3081, align 8
  %10351 = load i64, i64* %RSI.i2426, align 8
  %10352 = add i64 %10350, %10351
  store i64 %10352, i64* %RSI.i2426, align 8
  %10353 = icmp ult i64 %10352, %10351
  %10354 = icmp ult i64 %10352, %10350
  %10355 = or i1 %10353, %10354
  %10356 = zext i1 %10355 to i8
  store i8 %10356, i8* %14, align 1
  %10357 = trunc i64 %10352 to i32
  %10358 = and i32 %10357, 255
  %10359 = tail call i32 @llvm.ctpop.i32(i32 %10358)
  %10360 = trunc i32 %10359 to i8
  %10361 = and i8 %10360, 1
  %10362 = xor i8 %10361, 1
  store i8 %10362, i8* %21, align 1
  %10363 = xor i64 %10351, %10352
  %10364 = lshr i64 %10363, 4
  %10365 = trunc i64 %10364 to i8
  %10366 = and i8 %10365, 1
  store i8 %10366, i8* %27, align 1
  %10367 = icmp eq i64 %10352, 0
  %10368 = zext i1 %10367 to i8
  store i8 %10368, i8* %30, align 1
  %10369 = lshr i64 %10352, 63
  %10370 = trunc i64 %10369 to i8
  store i8 %10370, i8* %33, align 1
  %10371 = lshr i64 %10351, 63
  %10372 = lshr i64 %10349, 57
  %10373 = and i64 %10372, 1
  %10374 = xor i64 %10369, %10371
  %10375 = xor i64 %10369, %10373
  %10376 = add nuw nsw i64 %10374, %10375
  %10377 = icmp eq i64 %10376, 2
  %10378 = zext i1 %10377 to i8
  store i8 %10378, i8* %39, align 1
  %10379 = add i64 %10301, -12
  %10380 = add i64 %10303, 32
  store i64 %10380, i64* %3, align 8
  %10381 = inttoptr i64 %10379 to i32*
  %10382 = load i32, i32* %10381, align 4
  %10383 = sext i32 %10382 to i64
  %10384 = shl nsw i64 %10383, 4
  store i64 %10384, i64* %R8.i3081, align 8
  %10385 = add i64 %10384, %10352
  store i64 %10385, i64* %RSI.i2426, align 8
  %10386 = icmp ult i64 %10385, %10352
  %10387 = icmp ult i64 %10385, %10384
  %10388 = or i1 %10386, %10387
  %10389 = zext i1 %10388 to i8
  store i8 %10389, i8* %14, align 1
  %10390 = trunc i64 %10385 to i32
  %10391 = and i32 %10390, 255
  %10392 = tail call i32 @llvm.ctpop.i32(i32 %10391)
  %10393 = trunc i32 %10392 to i8
  %10394 = and i8 %10393, 1
  %10395 = xor i8 %10394, 1
  store i8 %10395, i8* %21, align 1
  %10396 = xor i64 %10384, %10352
  %10397 = xor i64 %10396, %10385
  %10398 = lshr i64 %10397, 4
  %10399 = trunc i64 %10398 to i8
  %10400 = and i8 %10399, 1
  store i8 %10400, i8* %27, align 1
  %10401 = icmp eq i64 %10385, 0
  %10402 = zext i1 %10401 to i8
  store i8 %10402, i8* %30, align 1
  %10403 = lshr i64 %10385, 63
  %10404 = trunc i64 %10403 to i8
  store i8 %10404, i8* %33, align 1
  %10405 = lshr i64 %10383, 59
  %10406 = and i64 %10405, 1
  %10407 = xor i64 %10403, %10369
  %10408 = xor i64 %10403, %10406
  %10409 = add nuw nsw i64 %10407, %10408
  %10410 = icmp eq i64 %10409, 2
  %10411 = zext i1 %10410 to i8
  store i8 %10411, i8* %39, align 1
  %10412 = load i64, i64* %RBP.i, align 8
  %10413 = add i64 %10412, -16
  %10414 = add i64 %10303, 43
  store i64 %10414, i64* %3, align 8
  %10415 = inttoptr i64 %10413 to i32*
  %10416 = load i32, i32* %10415, align 4
  %10417 = sext i32 %10416 to i64
  store i64 %10417, i64* %R8.i3081, align 8
  %10418 = add i64 %10412, -696
  %10419 = load i64, i64* %RDX.i4840, align 8
  %10420 = add i64 %10303, 50
  store i64 %10420, i64* %3, align 8
  %10421 = inttoptr i64 %10418 to i64*
  store i64 %10419, i64* %10421, align 8
  %10422 = load i64, i64* %3, align 8
  %10423 = load i32, i32* %EAX.i4969.pre-phi, align 8
  %10424 = sext i32 %10423 to i64
  %10425 = lshr i64 %10424, 32
  store i64 %10425, i64* %607, align 8
  %10426 = load i64, i64* %RSI.i2426, align 8
  %10427 = load i64, i64* %R8.i3081, align 8
  %10428 = shl i64 %10427, 2
  %10429 = add i64 %10428, %10426
  %10430 = add i64 %10422, 5
  store i64 %10430, i64* %3, align 8
  %10431 = zext i32 %10423 to i64
  %10432 = inttoptr i64 %10429 to i32*
  %10433 = load i32, i32* %10432, align 4
  %10434 = sext i32 %10433 to i64
  %10435 = shl nuw i64 %10425, 32
  %10436 = or i64 %10435, %10431
  %10437 = sdiv i64 %10436, %10434
  %10438 = shl i64 %10437, 32
  %10439 = ashr exact i64 %10438, 32
  %10440 = icmp eq i64 %10437, %10439
  br i1 %10440, label %10443, label %10441

; <label>:10441:                                  ; preds = %routine_shll__cl___eax.exit1976
  %10442 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10430, %struct.Memory* %10133)
  %.pre304 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %.pre305 = load i64, i64* %3, align 8
  br label %routine_idivl___rsi__r8_4_.exit

; <label>:10443:                                  ; preds = %routine_shll__cl___eax.exit1976
  %10444 = srem i64 %10436, %10434
  %10445 = and i64 %10437, 4294967295
  store i64 %10445, i64* %RAX.i1862, align 8
  %10446 = and i64 %10444, 4294967295
  store i64 %10446, i64* %RDX.i4840, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10447 = trunc i64 %10437 to i32
  br label %routine_idivl___rsi__r8_4_.exit

routine_idivl___rsi__r8_4_.exit:                  ; preds = %10443, %10441
  %10448 = phi i64 [ %.pre305, %10441 ], [ %10430, %10443 ]
  %10449 = phi i32 [ %.pre304, %10441 ], [ %10447, %10443 ]
  %10450 = phi %struct.Memory* [ %10442, %10441 ], [ %10133, %10443 ]
  %10451 = load i64, i64* %RBP.i, align 8
  %10452 = add i64 %10451, -508
  %10453 = add i64 %10448, 6
  store i64 %10453, i64* %3, align 8
  %10454 = inttoptr i64 %10452 to i32*
  store i32 %10449, i32* %10454, align 4
  %10455 = load i64, i64* %3, align 8
  %10456 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %10457 = add i64 %10456, 13112
  store i64 %10457, i64* %RSI.i2426, align 8
  %10458 = icmp ugt i64 %10456, -13113
  %10459 = zext i1 %10458 to i8
  store i8 %10459, i8* %14, align 1
  %10460 = trunc i64 %10457 to i32
  %10461 = and i32 %10460, 255
  %10462 = tail call i32 @llvm.ctpop.i32(i32 %10461)
  %10463 = trunc i32 %10462 to i8
  %10464 = and i8 %10463, 1
  %10465 = xor i8 %10464, 1
  store i8 %10465, i8* %21, align 1
  %10466 = xor i64 %10456, 16
  %10467 = xor i64 %10466, %10457
  %10468 = lshr i64 %10467, 4
  %10469 = trunc i64 %10468 to i8
  %10470 = and i8 %10469, 1
  store i8 %10470, i8* %27, align 1
  %10471 = icmp eq i64 %10457, 0
  %10472 = zext i1 %10471 to i8
  store i8 %10472, i8* %30, align 1
  %10473 = lshr i64 %10457, 63
  %10474 = trunc i64 %10473 to i8
  store i8 %10474, i8* %33, align 1
  %10475 = lshr i64 %10456, 63
  %10476 = xor i64 %10473, %10475
  %10477 = add nuw nsw i64 %10476, %10473
  %10478 = icmp eq i64 %10477, 2
  %10479 = zext i1 %10478 to i8
  store i8 %10479, i8* %39, align 1
  %10480 = load i64, i64* %RBP.i, align 8
  %10481 = add i64 %10480, -36
  %10482 = add i64 %10455, 18
  store i64 %10482, i64* %3, align 8
  %10483 = inttoptr i64 %10481 to i32*
  %10484 = load i32, i32* %10483, align 4
  %10485 = zext i32 %10484 to i64
  store i64 %10485, i64* %RAX.i1862, align 8
  %10486 = add i64 %10480, -12
  %10487 = add i64 %10455, 21
  store i64 %10487, i64* %3, align 8
  %10488 = inttoptr i64 %10486 to i32*
  %10489 = load i32, i32* %10488, align 4
  %10490 = add i32 %10489, %10484
  %10491 = zext i32 %10490 to i64
  store i64 %10491, i64* %RAX.i1862, align 8
  %10492 = sext i32 %10490 to i64
  %10493 = shl nsw i64 %10492, 6
  store i64 %10493, i64* %R8.i3081, align 8
  %10494 = load i64, i64* %RSI.i2426, align 8
  %10495 = add i64 %10493, %10494
  store i64 %10495, i64* %RSI.i2426, align 8
  %10496 = icmp ult i64 %10495, %10494
  %10497 = icmp ult i64 %10495, %10493
  %10498 = or i1 %10496, %10497
  %10499 = zext i1 %10498 to i8
  store i8 %10499, i8* %14, align 1
  %10500 = trunc i64 %10495 to i32
  %10501 = and i32 %10500, 255
  %10502 = tail call i32 @llvm.ctpop.i32(i32 %10501)
  %10503 = trunc i32 %10502 to i8
  %10504 = and i8 %10503, 1
  %10505 = xor i8 %10504, 1
  store i8 %10505, i8* %21, align 1
  %10506 = xor i64 %10494, %10495
  %10507 = lshr i64 %10506, 4
  %10508 = trunc i64 %10507 to i8
  %10509 = and i8 %10508, 1
  store i8 %10509, i8* %27, align 1
  %10510 = icmp eq i64 %10495, 0
  %10511 = zext i1 %10510 to i8
  store i8 %10511, i8* %30, align 1
  %10512 = lshr i64 %10495, 63
  %10513 = trunc i64 %10512 to i8
  store i8 %10513, i8* %33, align 1
  %10514 = lshr i64 %10494, 63
  %10515 = lshr i64 %10492, 57
  %10516 = and i64 %10515, 1
  %10517 = xor i64 %10512, %10514
  %10518 = xor i64 %10512, %10516
  %10519 = add nuw nsw i64 %10517, %10518
  %10520 = icmp eq i64 %10519, 2
  %10521 = zext i1 %10520 to i8
  store i8 %10521, i8* %39, align 1
  %10522 = load i64, i64* %RBP.i, align 8
  %10523 = add i64 %10522, -32
  %10524 = add i64 %10455, 34
  store i64 %10524, i64* %3, align 8
  %10525 = inttoptr i64 %10523 to i32*
  %10526 = load i32, i32* %10525, align 4
  %10527 = zext i32 %10526 to i64
  store i64 %10527, i64* %RAX.i1862, align 8
  %10528 = add i64 %10522, -16
  %10529 = add i64 %10455, 37
  store i64 %10529, i64* %3, align 8
  %10530 = inttoptr i64 %10528 to i32*
  %10531 = load i32, i32* %10530, align 4
  %10532 = add i32 %10531, %10526
  %10533 = zext i32 %10532 to i64
  store i64 %10533, i64* %RAX.i1862, align 8
  %10534 = icmp ult i32 %10532, %10526
  %10535 = icmp ult i32 %10532, %10531
  %10536 = or i1 %10534, %10535
  %10537 = zext i1 %10536 to i8
  store i8 %10537, i8* %14, align 1
  %10538 = and i32 %10532, 255
  %10539 = tail call i32 @llvm.ctpop.i32(i32 %10538)
  %10540 = trunc i32 %10539 to i8
  %10541 = and i8 %10540, 1
  %10542 = xor i8 %10541, 1
  store i8 %10542, i8* %21, align 1
  %10543 = xor i32 %10531, %10526
  %10544 = xor i32 %10543, %10532
  %10545 = lshr i32 %10544, 4
  %10546 = trunc i32 %10545 to i8
  %10547 = and i8 %10546, 1
  store i8 %10547, i8* %27, align 1
  %10548 = icmp eq i32 %10532, 0
  %10549 = zext i1 %10548 to i8
  store i8 %10549, i8* %30, align 1
  %10550 = lshr i32 %10532, 31
  %10551 = trunc i32 %10550 to i8
  store i8 %10551, i8* %33, align 1
  %10552 = lshr i32 %10526, 31
  %10553 = lshr i32 %10531, 31
  %10554 = xor i32 %10550, %10552
  %10555 = xor i32 %10550, %10553
  %10556 = add nuw nsw i32 %10554, %10555
  %10557 = icmp eq i32 %10556, 2
  %10558 = zext i1 %10557 to i8
  store i8 %10558, i8* %39, align 1
  %10559 = sext i32 %10532 to i64
  store i64 %10559, i64* %R8.i3081, align 8
  %10560 = shl nsw i64 %10559, 2
  %10561 = add i64 %10495, %10560
  %10562 = add i64 %10455, 44
  store i64 %10562, i64* %3, align 8
  %10563 = inttoptr i64 %10561 to i32*
  %10564 = load i32, i32* %10563, align 4
  %10565 = zext i32 %10564 to i64
  store i64 %10565, i64* %RAX.i1862, align 8
  %10566 = add i64 %10522, -508
  %10567 = add i64 %10455, 50
  store i64 %10567, i64* %3, align 8
  %10568 = inttoptr i64 %10566 to i32*
  %10569 = load i32, i32* %10568, align 4
  %10570 = zext i32 %10569 to i64
  store i64 %10570, i64* %RDI.i3890, align 8
  %10571 = add i64 %10522, -36
  %10572 = add i64 %10455, 54
  store i64 %10572, i64* %3, align 8
  %10573 = inttoptr i64 %10571 to i32*
  %10574 = load i32, i32* %10573, align 4
  %10575 = zext i32 %10574 to i64
  store i64 %10575, i64* %9557, align 8
  %10576 = add i64 %10522, -12
  %10577 = add i64 %10455, 58
  store i64 %10577, i64* %3, align 8
  %10578 = inttoptr i64 %10576 to i32*
  %10579 = load i32, i32* %10578, align 4
  %10580 = add i32 %10579, %10574
  %10581 = zext i32 %10580 to i64
  store i64 %10581, i64* %9557, align 8
  %10582 = icmp eq i32 %10580, 0
  %10583 = zext i1 %10582 to i8
  %10584 = lshr i32 %10580, 31
  %10585 = trunc i32 %10584 to i8
  %10586 = sext i32 %10580 to i64
  %10587 = shl nsw i64 %10586, 5
  store i64 %10587, i64* %RSI.i2426, align 8
  store i8 %10585, i8* %14, align 1
  %10588 = trunc i64 %10587 to i32
  %10589 = and i32 %10588, 224
  %10590 = tail call i32 @llvm.ctpop.i32(i32 %10589)
  %10591 = trunc i32 %10590 to i8
  %10592 = and i8 %10591, 1
  %10593 = xor i8 %10592, 1
  store i8 %10593, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 %10583, i8* %30, align 1
  %10594 = lshr i64 %10586, 58
  %10595 = trunc i64 %10594 to i8
  %10596 = and i8 %10595, 1
  store i8 %10596, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10597 = load i64, i64* %RBP.i, align 8
  %10598 = add i64 %10597, -696
  %10599 = add i64 %10455, 72
  store i64 %10599, i64* %3, align 8
  %10600 = inttoptr i64 %10598 to i64*
  %10601 = load i64, i64* %10600, align 8
  %10602 = add i64 %10587, %10601
  store i64 %10602, i64* %R8.i3081, align 8
  %10603 = icmp ult i64 %10602, %10601
  %10604 = icmp ult i64 %10602, %10587
  %10605 = or i1 %10603, %10604
  %10606 = zext i1 %10605 to i8
  store i8 %10606, i8* %14, align 1
  %10607 = trunc i64 %10602 to i32
  %10608 = and i32 %10607, 255
  %10609 = tail call i32 @llvm.ctpop.i32(i32 %10608)
  %10610 = trunc i32 %10609 to i8
  %10611 = and i8 %10610, 1
  %10612 = xor i8 %10611, 1
  store i8 %10612, i8* %21, align 1
  %10613 = xor i64 %10601, %10602
  %10614 = lshr i64 %10613, 4
  %10615 = trunc i64 %10614 to i8
  %10616 = and i8 %10615, 1
  store i8 %10616, i8* %27, align 1
  %10617 = icmp eq i64 %10602, 0
  %10618 = zext i1 %10617 to i8
  store i8 %10618, i8* %30, align 1
  %10619 = lshr i64 %10602, 63
  %10620 = trunc i64 %10619 to i8
  store i8 %10620, i8* %33, align 1
  %10621 = lshr i64 %10601, 63
  %10622 = lshr i64 %10586, 58
  %10623 = and i64 %10622, 1
  %10624 = xor i64 %10619, %10621
  %10625 = xor i64 %10619, %10623
  %10626 = add nuw nsw i64 %10624, %10625
  %10627 = icmp eq i64 %10626, 2
  %10628 = zext i1 %10627 to i8
  store i8 %10628, i8* %39, align 1
  %10629 = add i64 %10597, -32
  %10630 = add i64 %10455, 79
  store i64 %10630, i64* %3, align 8
  %10631 = inttoptr i64 %10629 to i32*
  %10632 = load i32, i32* %10631, align 4
  %10633 = zext i32 %10632 to i64
  store i64 %10633, i64* %9557, align 8
  %10634 = add i64 %10597, -16
  %10635 = add i64 %10455, 83
  store i64 %10635, i64* %3, align 8
  %10636 = inttoptr i64 %10634 to i32*
  %10637 = load i32, i32* %10636, align 4
  %10638 = add i32 %10637, %10632
  %10639 = zext i32 %10638 to i64
  store i64 %10639, i64* %9557, align 8
  %10640 = icmp ult i32 %10638, %10632
  %10641 = icmp ult i32 %10638, %10637
  %10642 = or i1 %10640, %10641
  %10643 = zext i1 %10642 to i8
  store i8 %10643, i8* %14, align 1
  %10644 = and i32 %10638, 255
  %10645 = tail call i32 @llvm.ctpop.i32(i32 %10644)
  %10646 = trunc i32 %10645 to i8
  %10647 = and i8 %10646, 1
  %10648 = xor i8 %10647, 1
  store i8 %10648, i8* %21, align 1
  %10649 = xor i32 %10637, %10632
  %10650 = xor i32 %10649, %10638
  %10651 = lshr i32 %10650, 4
  %10652 = trunc i32 %10651 to i8
  %10653 = and i8 %10652, 1
  store i8 %10653, i8* %27, align 1
  %10654 = icmp eq i32 %10638, 0
  %10655 = zext i1 %10654 to i8
  store i8 %10655, i8* %30, align 1
  %10656 = lshr i32 %10638, 31
  %10657 = trunc i32 %10656 to i8
  store i8 %10657, i8* %33, align 1
  %10658 = lshr i32 %10632, 31
  %10659 = lshr i32 %10637, 31
  %10660 = xor i32 %10656, %10658
  %10661 = xor i32 %10656, %10659
  %10662 = add nuw nsw i32 %10660, %10661
  %10663 = icmp eq i32 %10662, 2
  %10664 = zext i1 %10663 to i8
  store i8 %10664, i8* %39, align 1
  %10665 = sext i32 %10638 to i64
  store i64 %10665, i64* %RSI.i2426, align 8
  %10666 = shl nsw i64 %10665, 2
  %10667 = add i64 %10602, %10666
  %10668 = add i64 %10455, 90
  store i64 %10668, i64* %3, align 8
  %10669 = inttoptr i64 %10667 to i32*
  %10670 = load i32, i32* %10669, align 4
  %10671 = zext i32 %10670 to i64
  store i64 %10671, i64* %RSI.i2426, align 8
  %10672 = load i64, i64* %RBP.i, align 8
  %10673 = add i64 %10672, -700
  %10674 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %10675 = add i64 %10455, 96
  store i64 %10675, i64* %3, align 8
  %10676 = inttoptr i64 %10673 to i32*
  store i32 %10674, i32* %10676, align 4
  %10677 = load i64, i64* %3, align 8
  %10678 = add i64 %10677, 419995
  %10679 = add i64 %10677, 5
  %10680 = load i64, i64* %6, align 8
  %10681 = add i64 %10680, -8
  %10682 = inttoptr i64 %10681 to i64*
  store i64 %10679, i64* %10682, align 8
  store i64 %10681, i64* %6, align 8
  store i64 %10678, i64* %3, align 8
  %call2_40e8b5 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %10678, %struct.Memory* %10450)
  %10683 = load i64, i64* %RBP.i, align 8
  %10684 = add i64 %10683, -700
  %10685 = load i64, i64* %3, align 8
  %10686 = add i64 %10685, 6
  store i64 %10686, i64* %3, align 8
  %10687 = inttoptr i64 %10684 to i32*
  %10688 = load i32, i32* %10687, align 4
  %10689 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %10690 = sub i32 %10688, %10689
  %10691 = zext i32 %10690 to i64
  store i64 %10691, i64* %RSI.i2426, align 8
  %10692 = icmp ult i32 %10688, %10689
  %10693 = zext i1 %10692 to i8
  store i8 %10693, i8* %14, align 1
  %10694 = and i32 %10690, 255
  %10695 = tail call i32 @llvm.ctpop.i32(i32 %10694)
  %10696 = trunc i32 %10695 to i8
  %10697 = and i8 %10696, 1
  %10698 = xor i8 %10697, 1
  store i8 %10698, i8* %21, align 1
  %10699 = xor i32 %10689, %10688
  %10700 = xor i32 %10699, %10690
  %10701 = lshr i32 %10700, 4
  %10702 = trunc i32 %10701 to i8
  %10703 = and i8 %10702, 1
  store i8 %10703, i8* %27, align 1
  %10704 = icmp eq i32 %10690, 0
  %10705 = zext i1 %10704 to i8
  store i8 %10705, i8* %30, align 1
  %10706 = lshr i32 %10690, 31
  %10707 = trunc i32 %10706 to i8
  store i8 %10707, i8* %33, align 1
  %10708 = lshr i32 %10688, 31
  %10709 = lshr i32 %10689, 31
  %10710 = xor i32 %10709, %10708
  %10711 = xor i32 %10706, %10708
  %10712 = add nuw nsw i32 %10711, %10710
  %10713 = icmp eq i32 %10712, 2
  %10714 = zext i1 %10713 to i8
  store i8 %10714, i8* %39, align 1
  %10715 = add i64 %10683, -508
  %10716 = add i64 %10685, 14
  store i64 %10716, i64* %3, align 8
  %10717 = inttoptr i64 %10715 to i32*
  store i32 %10690, i32* %10717, align 4
  %10718 = load i64, i64* %RBP.i, align 8
  %10719 = add i64 %10718, -508
  %10720 = load i64, i64* %3, align 8
  %10721 = add i64 %10720, 6
  store i64 %10721, i64* %3, align 8
  %10722 = inttoptr i64 %10719 to i32*
  %10723 = load i32, i32* %10722, align 4
  %10724 = zext i32 %10723 to i64
  store i64 %10724, i64* %RDI.i3890, align 8
  %10725 = add i64 %10720, -55496
  %10726 = add i64 %10720, 11
  %10727 = load i64, i64* %6, align 8
  %10728 = add i64 %10727, -8
  %10729 = inttoptr i64 %10728 to i64*
  store i64 %10726, i64* %10729, align 8
  store i64 %10728, i64* %6, align 8
  store i64 %10725, i64* %3, align 8
  %10730 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %call2_40e8b5)
  %10731 = load i64, i64* %RBP.i, align 8
  %10732 = add i64 %10731, -400
  %10733 = load i64, i64* %3, align 8
  store i64 %10732, i64* %R8.i3081, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R9.i3079, align 8
  %10734 = add i64 %10731, -448
  %10735 = add i64 %10733, 24
  store i64 %10735, i64* %3, align 8
  %10736 = inttoptr i64 %10734 to i32*
  %10737 = load i32, i32* %10736, align 4
  %10738 = sext i32 %10737 to i64
  %10739 = shl nsw i64 %10738, 6
  store i64 %10739, i64* %R11.i1855, align 8
  %10740 = add i64 %10739, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %10740, i64* %R9.i3079, align 8
  %10741 = icmp ult i64 %10740, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %10742 = icmp ult i64 %10740, %10739
  %10743 = or i1 %10741, %10742
  %10744 = zext i1 %10743 to i8
  store i8 %10744, i8* %14, align 1
  %10745 = trunc i64 %10740 to i32
  %10746 = and i32 %10745, 248
  %10747 = tail call i32 @llvm.ctpop.i32(i32 %10746)
  %10748 = trunc i32 %10747 to i8
  %10749 = and i8 %10748, 1
  %10750 = xor i8 %10749, 1
  store i8 %10750, i8* %21, align 1
  %10751 = xor i64 %10740, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %10752 = lshr i64 %10751, 4
  %10753 = trunc i64 %10752 to i8
  %10754 = and i8 %10753, 1
  store i8 %10754, i8* %27, align 1
  %10755 = icmp eq i64 %10740, 0
  %10756 = zext i1 %10755 to i8
  store i8 %10756, i8* %30, align 1
  %10757 = lshr i64 %10740, 63
  %10758 = trunc i64 %10757 to i8
  store i8 %10758, i8* %33, align 1
  %10759 = lshr i64 %10738, 57
  %10760 = and i64 %10759, 1
  %10761 = xor i64 %10757, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %10762 = xor i64 %10757, %10760
  %10763 = add nuw nsw i64 %10761, %10762
  %10764 = icmp eq i64 %10763, 2
  %10765 = zext i1 %10764 to i8
  store i8 %10765, i8* %39, align 1
  %10766 = add i64 %10731, -12
  %10767 = add i64 %10733, 35
  store i64 %10767, i64* %3, align 8
  %10768 = inttoptr i64 %10766 to i32*
  %10769 = load i32, i32* %10768, align 4
  %10770 = sext i32 %10769 to i64
  %10771 = shl nsw i64 %10770, 4
  store i64 %10771, i64* %R11.i1855, align 8
  %10772 = add i64 %10771, %10740
  store i64 %10772, i64* %R9.i3079, align 8
  %10773 = icmp ult i64 %10772, %10740
  %10774 = icmp ult i64 %10772, %10771
  %10775 = or i1 %10773, %10774
  %10776 = zext i1 %10775 to i8
  store i8 %10776, i8* %14, align 1
  %10777 = trunc i64 %10772 to i32
  %10778 = and i32 %10777, 248
  %10779 = tail call i32 @llvm.ctpop.i32(i32 %10778)
  %10780 = trunc i32 %10779 to i8
  %10781 = and i8 %10780, 1
  %10782 = xor i8 %10781, 1
  store i8 %10782, i8* %21, align 1
  %10783 = xor i64 %10771, %10740
  %10784 = xor i64 %10783, %10772
  %10785 = lshr i64 %10784, 4
  %10786 = trunc i64 %10785 to i8
  %10787 = and i8 %10786, 1
  store i8 %10787, i8* %27, align 1
  %10788 = icmp eq i64 %10772, 0
  %10789 = zext i1 %10788 to i8
  store i8 %10789, i8* %30, align 1
  %10790 = lshr i64 %10772, 63
  %10791 = trunc i64 %10790 to i8
  store i8 %10791, i8* %33, align 1
  %10792 = lshr i64 %10770, 59
  %10793 = and i64 %10792, 1
  %10794 = xor i64 %10790, %10757
  %10795 = xor i64 %10790, %10793
  %10796 = add nuw nsw i64 %10794, %10795
  %10797 = icmp eq i64 %10796, 2
  %10798 = zext i1 %10797 to i8
  store i8 %10798, i8* %39, align 1
  %10799 = load i64, i64* %RBP.i, align 8
  %10800 = add i64 %10799, -16
  %10801 = add i64 %10733, 46
  store i64 %10801, i64* %3, align 8
  %10802 = inttoptr i64 %10800 to i32*
  %10803 = load i32, i32* %10802, align 4
  %10804 = sext i32 %10803 to i64
  store i64 %10804, i64* %R11.i1855, align 8
  %10805 = load i64, i64* %RAX.i1862, align 8
  %10806 = shl nsw i64 %10804, 2
  %10807 = add i64 %10772, %10806
  %10808 = add i64 %10733, 51
  store i64 %10808, i64* %3, align 8
  %10809 = inttoptr i64 %10807 to i32*
  %10810 = load i32, i32* %10809, align 4
  %10811 = shl i64 %10805, 32
  %10812 = ashr exact i64 %10811, 32
  %10813 = sext i32 %10810 to i64
  %10814 = mul nsw i64 %10813, %10812
  %10815 = trunc i64 %10814 to i32
  %10816 = and i64 %10814, 4294967295
  store i64 %10816, i64* %RAX.i1862, align 8
  %10817 = shl i64 %10814, 32
  %10818 = ashr exact i64 %10817, 32
  %10819 = icmp ne i64 %10818, %10814
  %10820 = zext i1 %10819 to i8
  store i8 %10820, i8* %14, align 1
  %10821 = and i32 %10815, 255
  %10822 = tail call i32 @llvm.ctpop.i32(i32 %10821)
  %10823 = trunc i32 %10822 to i8
  %10824 = and i8 %10823, 1
  %10825 = xor i8 %10824, 1
  store i8 %10825, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %10826 = lshr i32 %10815, 31
  %10827 = trunc i32 %10826 to i8
  store i8 %10827, i8* %33, align 1
  store i8 %10820, i8* %39, align 1
  %10828 = add i64 %10799, -52
  %10829 = add i64 %10733, 54
  store i64 %10829, i64* %3, align 8
  %10830 = trunc i64 %10814 to i32
  %10831 = inttoptr i64 %10828 to i32*
  %10832 = load i32, i32* %10831, align 4
  %10833 = add i32 %10832, %10830
  %10834 = zext i32 %10833 to i64
  store i64 %10834, i64* %RAX.i1862, align 8
  %10835 = icmp ult i32 %10833, %10830
  %10836 = icmp ult i32 %10833, %10832
  %10837 = or i1 %10835, %10836
  %10838 = zext i1 %10837 to i8
  store i8 %10838, i8* %14, align 1
  %10839 = and i32 %10833, 255
  %10840 = tail call i32 @llvm.ctpop.i32(i32 %10839)
  %10841 = trunc i32 %10840 to i8
  %10842 = and i8 %10841, 1
  %10843 = xor i8 %10842, 1
  store i8 %10843, i8* %21, align 1
  %10844 = xor i32 %10832, %10830
  %10845 = xor i32 %10844, %10833
  %10846 = lshr i32 %10845, 4
  %10847 = trunc i32 %10846 to i8
  %10848 = and i8 %10847, 1
  store i8 %10848, i8* %27, align 1
  %10849 = icmp eq i32 %10833, 0
  %10850 = zext i1 %10849 to i8
  store i8 %10850, i8* %30, align 1
  %10851 = lshr i32 %10833, 31
  %10852 = trunc i32 %10851 to i8
  store i8 %10852, i8* %33, align 1
  %10853 = lshr i32 %10830, 31
  %10854 = lshr i32 %10832, 31
  %10855 = xor i32 %10851, %10853
  %10856 = xor i32 %10851, %10854
  %10857 = add nuw nsw i32 %10855, %10856
  %10858 = icmp eq i32 %10857, 2
  %10859 = zext i1 %10858 to i8
  store i8 %10859, i8* %39, align 1
  %10860 = add i64 %10799, -452
  %10861 = add i64 %10733, 60
  store i64 %10861, i64* %3, align 8
  %10862 = inttoptr i64 %10860 to i32*
  %10863 = load i32, i32* %10862, align 4
  %10864 = zext i32 %10863 to i64
  store i64 %10864, i64* %RCX.i2028, align 8
  %10865 = add i64 %10733, 62
  store i64 %10865, i64* %3, align 8
  %10866 = trunc i32 %10863 to i5
  switch i5 %10866, label %10870 [
    i5 0, label %routine_sarl__cl___eax.exit1826
    i5 1, label %10867
  ]

; <label>:10867:                                  ; preds = %routine_idivl___rsi__r8_4_.exit
  %10868 = shl nuw i64 %10834, 32
  %10869 = ashr i64 %10868, 33
  br label %10877

; <label>:10870:                                  ; preds = %routine_idivl___rsi__r8_4_.exit
  %10871 = and i32 %10863, 31
  %10872 = zext i32 %10871 to i64
  %10873 = add nsw i64 %10872, -1
  %10874 = sext i32 %10833 to i64
  %10875 = ashr i64 %10874, %10873
  %10876 = lshr i64 %10875, 1
  br label %10877

; <label>:10877:                                  ; preds = %10870, %10867
  %10878 = phi i64 [ %10876, %10870 ], [ %10869, %10867 ]
  %10879 = phi i64 [ %10875, %10870 ], [ %10834, %10867 ]
  %10880 = trunc i64 %10879 to i8
  %10881 = and i8 %10880, 1
  %10882 = trunc i64 %10878 to i32
  %10883 = and i64 %10878, 4294967295
  store i64 %10883, i64* %RAX.i1862, align 8
  store i8 %10881, i8* %14, align 1
  %10884 = and i32 %10882, 255
  %10885 = tail call i32 @llvm.ctpop.i32(i32 %10884)
  %10886 = trunc i32 %10885 to i8
  %10887 = and i8 %10886, 1
  %10888 = xor i8 %10887, 1
  store i8 %10888, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10889 = icmp eq i32 %10882, 0
  %10890 = zext i1 %10889 to i8
  store i8 %10890, i8* %30, align 1
  %10891 = lshr i32 %10882, 31
  %10892 = trunc i32 %10891 to i8
  store i8 %10892, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10893 = trunc i64 %10878 to i32
  br label %routine_sarl__cl___eax.exit1826

routine_sarl__cl___eax.exit1826:                  ; preds = %10877, %routine_idivl___rsi__r8_4_.exit
  %10894 = phi i32 [ %10893, %10877 ], [ %10833, %routine_idivl___rsi__r8_4_.exit ]
  %10895 = add i64 %10799, -516
  %10896 = add i64 %10733, 68
  store i64 %10896, i64* %3, align 8
  %10897 = inttoptr i64 %10895 to i32*
  store i32 %10894, i32* %10897, align 4
  %10898 = load i64, i64* %3, align 8
  %10899 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %10900 = add i64 %10899, 13112
  store i64 %10900, i64* %R9.i3079, align 8
  %10901 = icmp ugt i64 %10899, -13113
  %10902 = zext i1 %10901 to i8
  store i8 %10902, i8* %14, align 1
  %10903 = trunc i64 %10900 to i32
  %10904 = and i32 %10903, 255
  %10905 = tail call i32 @llvm.ctpop.i32(i32 %10904)
  %10906 = trunc i32 %10905 to i8
  %10907 = and i8 %10906, 1
  %10908 = xor i8 %10907, 1
  store i8 %10908, i8* %21, align 1
  %10909 = xor i64 %10899, 16
  %10910 = xor i64 %10909, %10900
  %10911 = lshr i64 %10910, 4
  %10912 = trunc i64 %10911 to i8
  %10913 = and i8 %10912, 1
  store i8 %10913, i8* %27, align 1
  %10914 = icmp eq i64 %10900, 0
  %10915 = zext i1 %10914 to i8
  store i8 %10915, i8* %30, align 1
  %10916 = lshr i64 %10900, 63
  %10917 = trunc i64 %10916 to i8
  store i8 %10917, i8* %33, align 1
  %10918 = lshr i64 %10899, 63
  %10919 = xor i64 %10916, %10918
  %10920 = add nuw nsw i64 %10919, %10916
  %10921 = icmp eq i64 %10920, 2
  %10922 = zext i1 %10921 to i8
  store i8 %10922, i8* %39, align 1
  %10923 = load i64, i64* %RBP.i, align 8
  %10924 = add i64 %10923, -36
  %10925 = add i64 %10898, 18
  store i64 %10925, i64* %3, align 8
  %10926 = inttoptr i64 %10924 to i32*
  %10927 = load i32, i32* %10926, align 4
  %10928 = zext i32 %10927 to i64
  store i64 %10928, i64* %RAX.i1862, align 8
  %10929 = add i64 %10923, -12
  %10930 = add i64 %10898, 21
  store i64 %10930, i64* %3, align 8
  %10931 = inttoptr i64 %10929 to i32*
  %10932 = load i32, i32* %10931, align 4
  %10933 = add i32 %10932, %10927
  %10934 = zext i32 %10933 to i64
  store i64 %10934, i64* %RAX.i1862, align 8
  %10935 = sext i32 %10933 to i64
  %10936 = shl nsw i64 %10935, 6
  store i64 %10936, i64* %R11.i1855, align 8
  %10937 = load i64, i64* %R9.i3079, align 8
  %10938 = add i64 %10936, %10937
  store i64 %10938, i64* %R9.i3079, align 8
  %10939 = icmp ult i64 %10938, %10937
  %10940 = icmp ult i64 %10938, %10936
  %10941 = or i1 %10939, %10940
  %10942 = zext i1 %10941 to i8
  store i8 %10942, i8* %14, align 1
  %10943 = trunc i64 %10938 to i32
  %10944 = and i32 %10943, 255
  %10945 = tail call i32 @llvm.ctpop.i32(i32 %10944)
  %10946 = trunc i32 %10945 to i8
  %10947 = and i8 %10946, 1
  %10948 = xor i8 %10947, 1
  store i8 %10948, i8* %21, align 1
  %10949 = xor i64 %10937, %10938
  %10950 = lshr i64 %10949, 4
  %10951 = trunc i64 %10950 to i8
  %10952 = and i8 %10951, 1
  store i8 %10952, i8* %27, align 1
  %10953 = icmp eq i64 %10938, 0
  %10954 = zext i1 %10953 to i8
  store i8 %10954, i8* %30, align 1
  %10955 = lshr i64 %10938, 63
  %10956 = trunc i64 %10955 to i8
  store i8 %10956, i8* %33, align 1
  %10957 = lshr i64 %10937, 63
  %10958 = lshr i64 %10935, 57
  %10959 = and i64 %10958, 1
  %10960 = xor i64 %10955, %10957
  %10961 = xor i64 %10955, %10959
  %10962 = add nuw nsw i64 %10960, %10961
  %10963 = icmp eq i64 %10962, 2
  %10964 = zext i1 %10963 to i8
  store i8 %10964, i8* %39, align 1
  %10965 = load i64, i64* %RBP.i, align 8
  %10966 = add i64 %10965, -32
  %10967 = add i64 %10898, 34
  store i64 %10967, i64* %3, align 8
  %10968 = inttoptr i64 %10966 to i32*
  %10969 = load i32, i32* %10968, align 4
  %10970 = zext i32 %10969 to i64
  store i64 %10970, i64* %RAX.i1862, align 8
  %10971 = add i64 %10965, -16
  %10972 = add i64 %10898, 37
  store i64 %10972, i64* %3, align 8
  %10973 = inttoptr i64 %10971 to i32*
  %10974 = load i32, i32* %10973, align 4
  %10975 = add i32 %10974, %10969
  %10976 = zext i32 %10975 to i64
  store i64 %10976, i64* %RAX.i1862, align 8
  %10977 = icmp ult i32 %10975, %10969
  %10978 = icmp ult i32 %10975, %10974
  %10979 = or i1 %10977, %10978
  %10980 = zext i1 %10979 to i8
  store i8 %10980, i8* %14, align 1
  %10981 = and i32 %10975, 255
  %10982 = tail call i32 @llvm.ctpop.i32(i32 %10981)
  %10983 = trunc i32 %10982 to i8
  %10984 = and i8 %10983, 1
  %10985 = xor i8 %10984, 1
  store i8 %10985, i8* %21, align 1
  %10986 = xor i32 %10974, %10969
  %10987 = xor i32 %10986, %10975
  %10988 = lshr i32 %10987, 4
  %10989 = trunc i32 %10988 to i8
  %10990 = and i8 %10989, 1
  store i8 %10990, i8* %27, align 1
  %10991 = icmp eq i32 %10975, 0
  %10992 = zext i1 %10991 to i8
  store i8 %10992, i8* %30, align 1
  %10993 = lshr i32 %10975, 31
  %10994 = trunc i32 %10993 to i8
  store i8 %10994, i8* %33, align 1
  %10995 = lshr i32 %10969, 31
  %10996 = lshr i32 %10974, 31
  %10997 = xor i32 %10993, %10995
  %10998 = xor i32 %10993, %10996
  %10999 = add nuw nsw i32 %10997, %10998
  %11000 = icmp eq i32 %10999, 2
  %11001 = zext i1 %11000 to i8
  store i8 %11001, i8* %39, align 1
  %11002 = sext i32 %10975 to i64
  store i64 %11002, i64* %R11.i1855, align 8
  %11003 = shl nsw i64 %11002, 2
  %11004 = add i64 %10938, %11003
  %11005 = add i64 %10898, 44
  store i64 %11005, i64* %3, align 8
  %11006 = inttoptr i64 %11004 to i32*
  %11007 = load i32, i32* %11006, align 4
  %11008 = zext i32 %11007 to i64
  store i64 %11008, i64* %RAX.i1862, align 8
  %11009 = add i64 %10965, -36
  %11010 = add i64 %10898, 47
  store i64 %11010, i64* %3, align 8
  %11011 = inttoptr i64 %11009 to i32*
  %11012 = load i32, i32* %11011, align 4
  %11013 = zext i32 %11012 to i64
  store i64 %11013, i64* %RSI.i2426, align 8
  %11014 = add i64 %10965, -12
  %11015 = add i64 %10898, 50
  store i64 %11015, i64* %3, align 8
  %11016 = inttoptr i64 %11014 to i32*
  %11017 = load i32, i32* %11016, align 4
  %11018 = add i32 %11017, %11012
  %11019 = zext i32 %11018 to i64
  store i64 %11019, i64* %RSI.i2426, align 8
  %11020 = sext i32 %11018 to i64
  %11021 = shl nsw i64 %11020, 5
  store i64 %11021, i64* %R9.i3079, align 8
  %11022 = load i64, i64* %R8.i3081, align 8
  %11023 = add i64 %11021, %11022
  store i64 %11023, i64* %R8.i3081, align 8
  %11024 = icmp ult i64 %11023, %11022
  %11025 = icmp ult i64 %11023, %11021
  %11026 = or i1 %11024, %11025
  %11027 = zext i1 %11026 to i8
  store i8 %11027, i8* %14, align 1
  %11028 = trunc i64 %11023 to i32
  %11029 = and i32 %11028, 255
  %11030 = tail call i32 @llvm.ctpop.i32(i32 %11029)
  %11031 = trunc i32 %11030 to i8
  %11032 = and i8 %11031, 1
  %11033 = xor i8 %11032, 1
  store i8 %11033, i8* %21, align 1
  %11034 = xor i64 %11022, %11023
  %11035 = lshr i64 %11034, 4
  %11036 = trunc i64 %11035 to i8
  %11037 = and i8 %11036, 1
  store i8 %11037, i8* %27, align 1
  %11038 = icmp eq i64 %11023, 0
  %11039 = zext i1 %11038 to i8
  store i8 %11039, i8* %30, align 1
  %11040 = lshr i64 %11023, 63
  %11041 = trunc i64 %11040 to i8
  store i8 %11041, i8* %33, align 1
  %11042 = lshr i64 %11022, 63
  %11043 = lshr i64 %11020, 58
  %11044 = and i64 %11043, 1
  %11045 = xor i64 %11040, %11042
  %11046 = xor i64 %11040, %11044
  %11047 = add nuw nsw i64 %11045, %11046
  %11048 = icmp eq i64 %11047, 2
  %11049 = zext i1 %11048 to i8
  store i8 %11049, i8* %39, align 1
  %11050 = load i64, i64* %RBP.i, align 8
  %11051 = add i64 %11050, -32
  %11052 = add i64 %10898, 63
  store i64 %11052, i64* %3, align 8
  %11053 = inttoptr i64 %11051 to i32*
  %11054 = load i32, i32* %11053, align 4
  %11055 = zext i32 %11054 to i64
  store i64 %11055, i64* %RSI.i2426, align 8
  %11056 = add i64 %11050, -16
  %11057 = add i64 %10898, 66
  store i64 %11057, i64* %3, align 8
  %11058 = inttoptr i64 %11056 to i32*
  %11059 = load i32, i32* %11058, align 4
  %11060 = add i32 %11059, %11054
  %11061 = zext i32 %11060 to i64
  store i64 %11061, i64* %RSI.i2426, align 8
  %11062 = icmp ult i32 %11060, %11054
  %11063 = icmp ult i32 %11060, %11059
  %11064 = or i1 %11062, %11063
  %11065 = zext i1 %11064 to i8
  store i8 %11065, i8* %14, align 1
  %11066 = and i32 %11060, 255
  %11067 = tail call i32 @llvm.ctpop.i32(i32 %11066)
  %11068 = trunc i32 %11067 to i8
  %11069 = and i8 %11068, 1
  %11070 = xor i8 %11069, 1
  store i8 %11070, i8* %21, align 1
  %11071 = xor i32 %11059, %11054
  %11072 = xor i32 %11071, %11060
  %11073 = lshr i32 %11072, 4
  %11074 = trunc i32 %11073 to i8
  %11075 = and i8 %11074, 1
  store i8 %11075, i8* %27, align 1
  %11076 = icmp eq i32 %11060, 0
  %11077 = zext i1 %11076 to i8
  store i8 %11077, i8* %30, align 1
  %11078 = lshr i32 %11060, 31
  %11079 = trunc i32 %11078 to i8
  store i8 %11079, i8* %33, align 1
  %11080 = lshr i32 %11054, 31
  %11081 = lshr i32 %11059, 31
  %11082 = xor i32 %11078, %11080
  %11083 = xor i32 %11078, %11081
  %11084 = add nuw nsw i32 %11082, %11083
  %11085 = icmp eq i32 %11084, 2
  %11086 = zext i1 %11085 to i8
  store i8 %11086, i8* %39, align 1
  %11087 = sext i32 %11060 to i64
  store i64 %11087, i64* %R9.i3079, align 8
  %11088 = load i64, i64* %RAX.i1862, align 8
  %11089 = shl nsw i64 %11087, 2
  %11090 = add i64 %11023, %11089
  %11091 = add i64 %10898, 73
  store i64 %11091, i64* %3, align 8
  %11092 = trunc i64 %11088 to i32
  %11093 = inttoptr i64 %11090 to i32*
  %11094 = load i32, i32* %11093, align 4
  %11095 = sub i32 %11092, %11094
  %11096 = zext i32 %11095 to i64
  store i64 %11096, i64* %RAX.i1862, align 8
  %11097 = icmp ult i32 %11092, %11094
  %11098 = zext i1 %11097 to i8
  store i8 %11098, i8* %14, align 1
  %11099 = and i32 %11095, 255
  %11100 = tail call i32 @llvm.ctpop.i32(i32 %11099)
  %11101 = trunc i32 %11100 to i8
  %11102 = and i8 %11101, 1
  %11103 = xor i8 %11102, 1
  store i8 %11103, i8* %21, align 1
  %11104 = xor i32 %11094, %11092
  %11105 = xor i32 %11104, %11095
  %11106 = lshr i32 %11105, 4
  %11107 = trunc i32 %11106 to i8
  %11108 = and i8 %11107, 1
  store i8 %11108, i8* %27, align 1
  %11109 = icmp eq i32 %11095, 0
  %11110 = zext i1 %11109 to i8
  store i8 %11110, i8* %30, align 1
  %11111 = lshr i32 %11095, 31
  %11112 = trunc i32 %11111 to i8
  store i8 %11112, i8* %33, align 1
  %11113 = lshr i32 %11092, 31
  %11114 = lshr i32 %11094, 31
  %11115 = xor i32 %11114, %11113
  %11116 = xor i32 %11111, %11113
  %11117 = add nuw nsw i32 %11116, %11115
  %11118 = icmp eq i32 %11117, 2
  %11119 = zext i1 %11118 to i8
  store i8 %11119, i8* %39, align 1
  %11120 = add i64 %11050, -512
  %11121 = add i64 %10898, 79
  store i64 %11121, i64* %3, align 8
  %11122 = inttoptr i64 %11120 to i32*
  store i32 %11095, i32* %11122, align 4
  %11123 = load i64, i64* %RBP.i, align 8
  %11124 = add i64 %11123, -512
  %11125 = load i64, i64* %3, align 8
  %11126 = add i64 %11125, 6
  store i64 %11126, i64* %3, align 8
  %11127 = inttoptr i64 %11124 to i32*
  %11128 = load i32, i32* %11127, align 4
  %11129 = zext i32 %11128 to i64
  store i64 %11129, i64* %RDI.i3890, align 8
  %11130 = add i64 %11125, -55654
  %11131 = add i64 %11125, 11
  %11132 = load i64, i64* %6, align 8
  %11133 = add i64 %11132, -8
  %11134 = inttoptr i64 %11133 to i64*
  store i64 %11131, i64* %11134, align 8
  store i64 %11133, i64* %6, align 8
  store i64 %11130, i64* %3, align 8
  %11135 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %10730)
  %11136 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R8.i3081, align 8
  %11137 = load i64, i64* %RBP.i, align 8
  %11138 = add i64 %11137, -448
  %11139 = add i64 %11136, 17
  store i64 %11139, i64* %3, align 8
  %11140 = inttoptr i64 %11138 to i32*
  %11141 = load i32, i32* %11140, align 4
  %11142 = sext i32 %11141 to i64
  %11143 = shl nsw i64 %11142, 6
  store i64 %11143, i64* %R9.i3079, align 8
  %11144 = add i64 %11143, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %11144, i64* %R8.i3081, align 8
  %11145 = icmp ult i64 %11144, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %11146 = icmp ult i64 %11144, %11143
  %11147 = or i1 %11145, %11146
  %11148 = zext i1 %11147 to i8
  store i8 %11148, i8* %14, align 1
  %11149 = trunc i64 %11144 to i32
  %11150 = and i32 %11149, 248
  %11151 = tail call i32 @llvm.ctpop.i32(i32 %11150)
  %11152 = trunc i32 %11151 to i8
  %11153 = and i8 %11152, 1
  %11154 = xor i8 %11153, 1
  store i8 %11154, i8* %21, align 1
  %11155 = xor i64 %11144, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %11156 = lshr i64 %11155, 4
  %11157 = trunc i64 %11156 to i8
  %11158 = and i8 %11157, 1
  store i8 %11158, i8* %27, align 1
  %11159 = icmp eq i64 %11144, 0
  %11160 = zext i1 %11159 to i8
  store i8 %11160, i8* %30, align 1
  %11161 = lshr i64 %11144, 63
  %11162 = trunc i64 %11161 to i8
  store i8 %11162, i8* %33, align 1
  %11163 = lshr i64 %11142, 57
  %11164 = and i64 %11163, 1
  %11165 = xor i64 %11161, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %11166 = xor i64 %11161, %11164
  %11167 = add nuw nsw i64 %11165, %11166
  %11168 = icmp eq i64 %11167, 2
  %11169 = zext i1 %11168 to i8
  store i8 %11169, i8* %39, align 1
  %11170 = add i64 %11137, -12
  %11171 = add i64 %11136, 28
  store i64 %11171, i64* %3, align 8
  %11172 = inttoptr i64 %11170 to i32*
  %11173 = load i32, i32* %11172, align 4
  %11174 = sext i32 %11173 to i64
  %11175 = shl nsw i64 %11174, 4
  store i64 %11175, i64* %R9.i3079, align 8
  %11176 = add i64 %11175, %11144
  store i64 %11176, i64* %R8.i3081, align 8
  %11177 = icmp ult i64 %11176, %11144
  %11178 = icmp ult i64 %11176, %11175
  %11179 = or i1 %11177, %11178
  %11180 = zext i1 %11179 to i8
  store i8 %11180, i8* %14, align 1
  %11181 = trunc i64 %11176 to i32
  %11182 = and i32 %11181, 248
  %11183 = tail call i32 @llvm.ctpop.i32(i32 %11182)
  %11184 = trunc i32 %11183 to i8
  %11185 = and i8 %11184, 1
  %11186 = xor i8 %11185, 1
  store i8 %11186, i8* %21, align 1
  %11187 = xor i64 %11175, %11144
  %11188 = xor i64 %11187, %11176
  %11189 = lshr i64 %11188, 4
  %11190 = trunc i64 %11189 to i8
  %11191 = and i8 %11190, 1
  store i8 %11191, i8* %27, align 1
  %11192 = icmp eq i64 %11176, 0
  %11193 = zext i1 %11192 to i8
  store i8 %11193, i8* %30, align 1
  %11194 = lshr i64 %11176, 63
  %11195 = trunc i64 %11194 to i8
  store i8 %11195, i8* %33, align 1
  %11196 = lshr i64 %11174, 59
  %11197 = and i64 %11196, 1
  %11198 = xor i64 %11194, %11161
  %11199 = xor i64 %11194, %11197
  %11200 = add nuw nsw i64 %11198, %11199
  %11201 = icmp eq i64 %11200, 2
  %11202 = zext i1 %11201 to i8
  store i8 %11202, i8* %39, align 1
  %11203 = load i64, i64* %RBP.i, align 8
  %11204 = add i64 %11203, -16
  %11205 = add i64 %11136, 39
  store i64 %11205, i64* %3, align 8
  %11206 = inttoptr i64 %11204 to i32*
  %11207 = load i32, i32* %11206, align 4
  %11208 = sext i32 %11207 to i64
  store i64 %11208, i64* %R9.i3079, align 8
  %11209 = load i64, i64* %RAX.i1862, align 8
  %11210 = shl nsw i64 %11208, 2
  %11211 = add i64 %11176, %11210
  %11212 = add i64 %11136, 44
  store i64 %11212, i64* %3, align 8
  %11213 = inttoptr i64 %11211 to i32*
  %11214 = load i32, i32* %11213, align 4
  %11215 = shl i64 %11209, 32
  %11216 = ashr exact i64 %11215, 32
  %11217 = sext i32 %11214 to i64
  %11218 = mul nsw i64 %11217, %11216
  %11219 = trunc i64 %11218 to i32
  %11220 = and i64 %11218, 4294967295
  store i64 %11220, i64* %RAX.i1862, align 8
  %11221 = shl i64 %11218, 32
  %11222 = ashr exact i64 %11221, 32
  %11223 = icmp ne i64 %11222, %11218
  %11224 = zext i1 %11223 to i8
  store i8 %11224, i8* %14, align 1
  %11225 = and i32 %11219, 255
  %11226 = tail call i32 @llvm.ctpop.i32(i32 %11225)
  %11227 = trunc i32 %11226 to i8
  %11228 = and i8 %11227, 1
  %11229 = xor i8 %11228, 1
  store i8 %11229, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %11230 = lshr i32 %11219, 31
  %11231 = trunc i32 %11230 to i8
  store i8 %11231, i8* %33, align 1
  store i8 %11224, i8* %39, align 1
  %11232 = add i64 %11203, -52
  %11233 = add i64 %11136, 47
  store i64 %11233, i64* %3, align 8
  %11234 = trunc i64 %11218 to i32
  %11235 = inttoptr i64 %11232 to i32*
  %11236 = load i32, i32* %11235, align 4
  %11237 = add i32 %11236, %11234
  %11238 = zext i32 %11237 to i64
  store i64 %11238, i64* %RAX.i1862, align 8
  %11239 = icmp ult i32 %11237, %11234
  %11240 = icmp ult i32 %11237, %11236
  %11241 = or i1 %11239, %11240
  %11242 = zext i1 %11241 to i8
  store i8 %11242, i8* %14, align 1
  %11243 = and i32 %11237, 255
  %11244 = tail call i32 @llvm.ctpop.i32(i32 %11243)
  %11245 = trunc i32 %11244 to i8
  %11246 = and i8 %11245, 1
  %11247 = xor i8 %11246, 1
  store i8 %11247, i8* %21, align 1
  %11248 = xor i32 %11236, %11234
  %11249 = xor i32 %11248, %11237
  %11250 = lshr i32 %11249, 4
  %11251 = trunc i32 %11250 to i8
  %11252 = and i8 %11251, 1
  store i8 %11252, i8* %27, align 1
  %11253 = icmp eq i32 %11237, 0
  %11254 = zext i1 %11253 to i8
  store i8 %11254, i8* %30, align 1
  %11255 = lshr i32 %11237, 31
  %11256 = trunc i32 %11255 to i8
  store i8 %11256, i8* %33, align 1
  %11257 = lshr i32 %11234, 31
  %11258 = lshr i32 %11236, 31
  %11259 = xor i32 %11255, %11257
  %11260 = xor i32 %11255, %11258
  %11261 = add nuw nsw i32 %11259, %11260
  %11262 = icmp eq i32 %11261, 2
  %11263 = zext i1 %11262 to i8
  store i8 %11263, i8* %39, align 1
  %11264 = add i64 %11203, -452
  %11265 = add i64 %11136, 53
  store i64 %11265, i64* %3, align 8
  %11266 = inttoptr i64 %11264 to i32*
  %11267 = load i32, i32* %11266, align 4
  %11268 = zext i32 %11267 to i64
  store i64 %11268, i64* %RCX.i2028, align 8
  %11269 = add i64 %11136, 55
  store i64 %11269, i64* %3, align 8
  %11270 = trunc i32 %11267 to i5
  switch i5 %11270, label %11274 [
    i5 0, label %routine_sarl__cl___eax.exit1720
    i5 1, label %11271
  ]

; <label>:11271:                                  ; preds = %routine_sarl__cl___eax.exit1826
  %11272 = shl nuw i64 %11238, 32
  %11273 = ashr i64 %11272, 33
  br label %11281

; <label>:11274:                                  ; preds = %routine_sarl__cl___eax.exit1826
  %11275 = and i32 %11267, 31
  %11276 = zext i32 %11275 to i64
  %11277 = add nsw i64 %11276, -1
  %11278 = sext i32 %11237 to i64
  %11279 = ashr i64 %11278, %11277
  %11280 = lshr i64 %11279, 1
  br label %11281

; <label>:11281:                                  ; preds = %11274, %11271
  %11282 = phi i64 [ %11280, %11274 ], [ %11273, %11271 ]
  %11283 = phi i64 [ %11279, %11274 ], [ %11238, %11271 ]
  %11284 = trunc i64 %11283 to i8
  %11285 = and i8 %11284, 1
  %11286 = trunc i64 %11282 to i32
  %11287 = and i64 %11282, 4294967295
  store i64 %11287, i64* %RAX.i1862, align 8
  store i8 %11285, i8* %14, align 1
  %11288 = and i32 %11286, 255
  %11289 = tail call i32 @llvm.ctpop.i32(i32 %11288)
  %11290 = trunc i32 %11289 to i8
  %11291 = and i8 %11290, 1
  %11292 = xor i8 %11291, 1
  store i8 %11292, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11293 = icmp eq i32 %11286, 0
  %11294 = zext i1 %11293 to i8
  store i8 %11294, i8* %30, align 1
  %11295 = lshr i32 %11286, 31
  %11296 = trunc i32 %11295 to i8
  store i8 %11296, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11297 = trunc i64 %11282 to i32
  br label %routine_sarl__cl___eax.exit1720

routine_sarl__cl___eax.exit1720:                  ; preds = %11281, %routine_sarl__cl___eax.exit1826
  %11298 = phi i32 [ %11297, %11281 ], [ %11237, %routine_sarl__cl___eax.exit1826 ]
  %11299 = add i64 %11203, -520
  %11300 = add i64 %11136, 61
  store i64 %11300, i64* %3, align 8
  %11301 = inttoptr i64 %11299 to i32*
  store i32 %11298, i32* %11301, align 4
  %11302 = load i64, i64* %RBP.i, align 8
  %11303 = add i64 %11302, -516
  %11304 = load i64, i64* %3, align 8
  %11305 = add i64 %11304, 6
  store i64 %11305, i64* %3, align 8
  %11306 = inttoptr i64 %11303 to i32*
  %11307 = load i32, i32* %11306, align 4
  %11308 = zext i32 %11307 to i64
  store i64 %11308, i64* %RAX.i1862, align 8
  %11309 = add i64 %11302, -520
  %11310 = add i64 %11304, 12
  store i64 %11310, i64* %3, align 8
  %11311 = inttoptr i64 %11309 to i32*
  %11312 = load i32, i32* %11311, align 4
  %11313 = sub i32 %11307, %11312
  %11314 = icmp ult i32 %11307, %11312
  %11315 = zext i1 %11314 to i8
  store i8 %11315, i8* %14, align 1
  %11316 = and i32 %11313, 255
  %11317 = tail call i32 @llvm.ctpop.i32(i32 %11316)
  %11318 = trunc i32 %11317 to i8
  %11319 = and i8 %11318, 1
  %11320 = xor i8 %11319, 1
  store i8 %11320, i8* %21, align 1
  %11321 = xor i32 %11312, %11307
  %11322 = xor i32 %11321, %11313
  %11323 = lshr i32 %11322, 4
  %11324 = trunc i32 %11323 to i8
  %11325 = and i8 %11324, 1
  store i8 %11325, i8* %27, align 1
  %11326 = icmp eq i32 %11313, 0
  %11327 = zext i1 %11326 to i8
  store i8 %11327, i8* %30, align 1
  %11328 = lshr i32 %11313, 31
  %11329 = trunc i32 %11328 to i8
  store i8 %11329, i8* %33, align 1
  %11330 = lshr i32 %11307, 31
  %11331 = lshr i32 %11312, 31
  %11332 = xor i32 %11331, %11330
  %11333 = xor i32 %11328, %11330
  %11334 = add nuw nsw i32 %11333, %11332
  %11335 = icmp eq i32 %11334, 2
  %11336 = zext i1 %11335 to i8
  store i8 %11336, i8* %39, align 1
  %.v395 = select i1 %11326, i64 866, i64 18
  %11337 = add i64 %11304, %.v395
  store i64 %11337, i64* %3, align 8
  br i1 %11326, label %block_.L_40ed10, label %block_40e9c0

block_40e9c0:                                     ; preds = %routine_sarl__cl___eax.exit1720
  %11338 = add i64 %11337, 7
  store i64 %11338, i64* %3, align 8
  %11339 = load i32, i32* %11306, align 4
  store i8 0, i8* %14, align 1
  %11340 = and i32 %11339, 255
  %11341 = tail call i32 @llvm.ctpop.i32(i32 %11340)
  %11342 = trunc i32 %11341 to i8
  %11343 = and i8 %11342, 1
  %11344 = xor i8 %11343, 1
  store i8 %11344, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11345 = icmp eq i32 %11339, 0
  %11346 = zext i1 %11345 to i8
  store i8 %11346, i8* %30, align 1
  %11347 = lshr i32 %11339, 31
  %11348 = trunc i32 %11347 to i8
  store i8 %11348, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v396 = select i1 %11345, i64 848, i64 13
  %11349 = add i64 %11337, %.v396
  store i64 %11349, i64* %3, align 8
  br i1 %11345, label %block_.L_40ed10, label %block_40e9cd

block_40e9cd:                                     ; preds = %block_40e9c0
  %11350 = add i64 %11349, 7
  store i64 %11350, i64* %3, align 8
  %11351 = load i32, i32* %11311, align 4
  store i8 0, i8* %14, align 1
  %11352 = and i32 %11351, 255
  %11353 = tail call i32 @llvm.ctpop.i32(i32 %11352)
  %11354 = trunc i32 %11353 to i8
  %11355 = and i8 %11354, 1
  %11356 = xor i8 %11355, 1
  store i8 %11356, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11357 = icmp eq i32 %11351, 0
  %11358 = zext i1 %11357 to i8
  store i8 %11358, i8* %30, align 1
  %11359 = lshr i32 %11351, 31
  %11360 = trunc i32 %11359 to i8
  store i8 %11360, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v397 = select i1 %11357, i64 835, i64 13
  %11361 = add i64 %11349, %.v397
  store i64 %11361, i64* %3, align 8
  br i1 %11357, label %block_.L_40ed10, label %block_40e9da

block_40e9da:                                     ; preds = %block_40e9cd
  %11362 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %11363 = add i64 %11362, 13112
  store i64 %11363, i64* %RAX.i1862, align 8
  %11364 = icmp ugt i64 %11362, -13113
  %11365 = zext i1 %11364 to i8
  store i8 %11365, i8* %14, align 1
  %11366 = trunc i64 %11363 to i32
  %11367 = and i32 %11366, 255
  %11368 = tail call i32 @llvm.ctpop.i32(i32 %11367)
  %11369 = trunc i32 %11368 to i8
  %11370 = and i8 %11369, 1
  %11371 = xor i8 %11370, 1
  store i8 %11371, i8* %21, align 1
  %11372 = xor i64 %11362, 16
  %11373 = xor i64 %11372, %11363
  %11374 = lshr i64 %11373, 4
  %11375 = trunc i64 %11374 to i8
  %11376 = and i8 %11375, 1
  store i8 %11376, i8* %27, align 1
  %11377 = icmp eq i64 %11363, 0
  %11378 = zext i1 %11377 to i8
  store i8 %11378, i8* %30, align 1
  %11379 = lshr i64 %11363, 63
  %11380 = trunc i64 %11379 to i8
  store i8 %11380, i8* %33, align 1
  %11381 = lshr i64 %11362, 63
  %11382 = xor i64 %11379, %11381
  %11383 = add nuw nsw i64 %11382, %11379
  %11384 = icmp eq i64 %11383, 2
  %11385 = zext i1 %11384 to i8
  store i8 %11385, i8* %39, align 1
  %11386 = add i64 %11302, -36
  %11387 = add i64 %11361, 17
  store i64 %11387, i64* %3, align 8
  %11388 = inttoptr i64 %11386 to i32*
  %11389 = load i32, i32* %11388, align 4
  %11390 = zext i32 %11389 to i64
  store i64 %11390, i64* %RCX.i2028, align 8
  %11391 = add i64 %11302, -12
  %11392 = add i64 %11361, 20
  store i64 %11392, i64* %3, align 8
  %11393 = inttoptr i64 %11391 to i32*
  %11394 = load i32, i32* %11393, align 4
  %11395 = add i32 %11394, %11389
  %11396 = zext i32 %11395 to i64
  store i64 %11396, i64* %RCX.i2028, align 8
  %11397 = sext i32 %11395 to i64
  %11398 = shl nsw i64 %11397, 6
  store i64 %11398, i64* %RDX.i4840, align 8
  %11399 = load i64, i64* %RAX.i1862, align 8
  %11400 = add i64 %11398, %11399
  store i64 %11400, i64* %RAX.i1862, align 8
  %11401 = icmp ult i64 %11400, %11399
  %11402 = icmp ult i64 %11400, %11398
  %11403 = or i1 %11401, %11402
  %11404 = zext i1 %11403 to i8
  store i8 %11404, i8* %14, align 1
  %11405 = trunc i64 %11400 to i32
  %11406 = and i32 %11405, 255
  %11407 = tail call i32 @llvm.ctpop.i32(i32 %11406)
  %11408 = trunc i32 %11407 to i8
  %11409 = and i8 %11408, 1
  %11410 = xor i8 %11409, 1
  store i8 %11410, i8* %21, align 1
  %11411 = xor i64 %11399, %11400
  %11412 = lshr i64 %11411, 4
  %11413 = trunc i64 %11412 to i8
  %11414 = and i8 %11413, 1
  store i8 %11414, i8* %27, align 1
  %11415 = icmp eq i64 %11400, 0
  %11416 = zext i1 %11415 to i8
  store i8 %11416, i8* %30, align 1
  %11417 = lshr i64 %11400, 63
  %11418 = trunc i64 %11417 to i8
  store i8 %11418, i8* %33, align 1
  %11419 = lshr i64 %11399, 63
  %11420 = lshr i64 %11397, 57
  %11421 = and i64 %11420, 1
  %11422 = xor i64 %11417, %11419
  %11423 = xor i64 %11417, %11421
  %11424 = add nuw nsw i64 %11422, %11423
  %11425 = icmp eq i64 %11424, 2
  %11426 = zext i1 %11425 to i8
  store i8 %11426, i8* %39, align 1
  %11427 = load i64, i64* %RBP.i, align 8
  %11428 = add i64 %11427, -32
  %11429 = add i64 %11361, 33
  store i64 %11429, i64* %3, align 8
  %11430 = inttoptr i64 %11428 to i32*
  %11431 = load i32, i32* %11430, align 4
  %11432 = zext i32 %11431 to i64
  store i64 %11432, i64* %RCX.i2028, align 8
  %11433 = add i64 %11427, -16
  %11434 = add i64 %11361, 36
  store i64 %11434, i64* %3, align 8
  %11435 = inttoptr i64 %11433 to i32*
  %11436 = load i32, i32* %11435, align 4
  %11437 = add i32 %11436, %11431
  %11438 = zext i32 %11437 to i64
  store i64 %11438, i64* %RCX.i2028, align 8
  %11439 = icmp ult i32 %11437, %11431
  %11440 = icmp ult i32 %11437, %11436
  %11441 = or i1 %11439, %11440
  %11442 = zext i1 %11441 to i8
  store i8 %11442, i8* %14, align 1
  %11443 = and i32 %11437, 255
  %11444 = tail call i32 @llvm.ctpop.i32(i32 %11443)
  %11445 = trunc i32 %11444 to i8
  %11446 = and i8 %11445, 1
  %11447 = xor i8 %11446, 1
  store i8 %11447, i8* %21, align 1
  %11448 = xor i32 %11436, %11431
  %11449 = xor i32 %11448, %11437
  %11450 = lshr i32 %11449, 4
  %11451 = trunc i32 %11450 to i8
  %11452 = and i8 %11451, 1
  store i8 %11452, i8* %27, align 1
  %11453 = icmp eq i32 %11437, 0
  %11454 = zext i1 %11453 to i8
  store i8 %11454, i8* %30, align 1
  %11455 = lshr i32 %11437, 31
  %11456 = trunc i32 %11455 to i8
  store i8 %11456, i8* %33, align 1
  %11457 = lshr i32 %11431, 31
  %11458 = lshr i32 %11436, 31
  %11459 = xor i32 %11455, %11457
  %11460 = xor i32 %11455, %11458
  %11461 = add nuw nsw i32 %11459, %11460
  %11462 = icmp eq i32 %11461, 2
  %11463 = zext i1 %11462 to i8
  store i8 %11463, i8* %39, align 1
  %11464 = sext i32 %11437 to i64
  store i64 %11464, i64* %RDX.i4840, align 8
  %11465 = shl nsw i64 %11464, 2
  %11466 = add i64 %11400, %11465
  %11467 = add i64 %11361, 42
  store i64 %11467, i64* %3, align 8
  %11468 = inttoptr i64 %11466 to i32*
  %11469 = load i32, i32* %11468, align 4
  %11470 = zext i32 %11469 to i64
  store i64 %11470, i64* %RCX.i2028, align 8
  %11471 = add i64 %11427, -516
  %11472 = add i64 %11361, 48
  store i64 %11472, i64* %3, align 8
  %11473 = inttoptr i64 %11471 to i32*
  %11474 = load i32, i32* %11473, align 4
  %11475 = zext i32 %11474 to i64
  store i64 %11475, i64* %RDI.i3890, align 8
  %11476 = add i64 %11427, -508
  %11477 = add i64 %11361, 54
  store i64 %11477, i64* %3, align 8
  %11478 = inttoptr i64 %11476 to i32*
  %11479 = load i32, i32* %11478, align 4
  %11480 = zext i32 %11479 to i64
  store i64 %11480, i64* %RSI.i2426, align 8
  %11481 = add i64 %11427, -704
  %11482 = add i64 %11361, 60
  store i64 %11482, i64* %3, align 8
  %11483 = inttoptr i64 %11481 to i32*
  store i32 %11469, i32* %11483, align 4
  %11484 = load i64, i64* %3, align 8
  %11485 = add i64 %11484, 419642
  %11486 = add i64 %11484, 5
  %11487 = load i64, i64* %6, align 8
  %11488 = add i64 %11487, -8
  %11489 = inttoptr i64 %11488 to i64*
  store i64 %11486, i64* %11489, align 8
  store i64 %11488, i64* %6, align 8
  store i64 %11485, i64* %3, align 8
  %call2_40ea16 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %11485, %struct.Memory* %11135)
  %11490 = load i64, i64* %RBP.i, align 8
  %11491 = add i64 %11490, -524
  %11492 = load i64, i64* %3, align 8
  store i64 %11491, i64* %RDX.i4840, align 8
  %11493 = add i64 %11490, -528
  store i64 %11493, i64* %RCX.i2028, align 8
  %11494 = add i64 %11490, -400
  store i64 %11494, i64* %R8.i3081, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %R9.i3079, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %9557, align 8
  %11495 = add i64 %11490, -448
  %11496 = add i64 %11492, 48
  store i64 %11496, i64* %3, align 8
  %11497 = inttoptr i64 %11495 to i32*
  %11498 = load i32, i32* %11497, align 4
  %11499 = sext i32 %11498 to i64
  %11500 = shl nsw i64 %11499, 6
  store i64 %11500, i64* %R11.i1855, align 8
  %11501 = add i64 %11500, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %11501, i64* %9557, align 8
  %11502 = icmp ult i64 %11501, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %11503 = icmp ult i64 %11501, %11500
  %11504 = or i1 %11502, %11503
  %11505 = zext i1 %11504 to i8
  store i8 %11505, i8* %14, align 1
  %11506 = trunc i64 %11501 to i32
  %11507 = and i32 %11506, 248
  %11508 = tail call i32 @llvm.ctpop.i32(i32 %11507)
  %11509 = trunc i32 %11508 to i8
  %11510 = and i8 %11509, 1
  %11511 = xor i8 %11510, 1
  store i8 %11511, i8* %21, align 1
  %11512 = xor i64 %11501, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %11513 = lshr i64 %11512, 4
  %11514 = trunc i64 %11513 to i8
  %11515 = and i8 %11514, 1
  store i8 %11515, i8* %27, align 1
  %11516 = icmp eq i64 %11501, 0
  %11517 = zext i1 %11516 to i8
  store i8 %11517, i8* %30, align 1
  %11518 = lshr i64 %11501, 63
  %11519 = trunc i64 %11518 to i8
  store i8 %11519, i8* %33, align 1
  %11520 = lshr i64 %11499, 57
  %11521 = and i64 %11520, 1
  %11522 = xor i64 %11518, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %11523 = xor i64 %11518, %11521
  %11524 = add nuw nsw i64 %11522, %11523
  %11525 = icmp eq i64 %11524, 2
  %11526 = zext i1 %11525 to i8
  store i8 %11526, i8* %39, align 1
  %11527 = add i64 %11490, -12
  %11528 = add i64 %11492, 59
  store i64 %11528, i64* %3, align 8
  %11529 = inttoptr i64 %11527 to i32*
  %11530 = load i32, i32* %11529, align 4
  %11531 = sext i32 %11530 to i64
  %11532 = shl nsw i64 %11531, 4
  store i64 %11532, i64* %R11.i1855, align 8
  %11533 = add i64 %11532, %11501
  store i64 %11533, i64* %9557, align 8
  %11534 = icmp ult i64 %11533, %11501
  %11535 = icmp ult i64 %11533, %11532
  %11536 = or i1 %11534, %11535
  %11537 = zext i1 %11536 to i8
  store i8 %11537, i8* %14, align 1
  %11538 = trunc i64 %11533 to i32
  %11539 = and i32 %11538, 248
  %11540 = tail call i32 @llvm.ctpop.i32(i32 %11539)
  %11541 = trunc i32 %11540 to i8
  %11542 = and i8 %11541, 1
  %11543 = xor i8 %11542, 1
  store i8 %11543, i8* %21, align 1
  %11544 = xor i64 %11532, %11501
  %11545 = xor i64 %11544, %11533
  %11546 = lshr i64 %11545, 4
  %11547 = trunc i64 %11546 to i8
  %11548 = and i8 %11547, 1
  store i8 %11548, i8* %27, align 1
  %11549 = icmp eq i64 %11533, 0
  %11550 = zext i1 %11549 to i8
  store i8 %11550, i8* %30, align 1
  %11551 = lshr i64 %11533, 63
  %11552 = trunc i64 %11551 to i8
  store i8 %11552, i8* %33, align 1
  %11553 = lshr i64 %11531, 59
  %11554 = and i64 %11553, 1
  %11555 = xor i64 %11551, %11518
  %11556 = xor i64 %11551, %11554
  %11557 = add nuw nsw i64 %11555, %11556
  %11558 = icmp eq i64 %11557, 2
  %11559 = zext i1 %11558 to i8
  store i8 %11559, i8* %39, align 1
  %11560 = load i64, i64* %RBP.i, align 8
  %11561 = add i64 %11560, -16
  %11562 = add i64 %11492, 70
  store i64 %11562, i64* %3, align 8
  %11563 = inttoptr i64 %11561 to i32*
  %11564 = load i32, i32* %11563, align 4
  %11565 = sext i32 %11564 to i64
  store i64 %11565, i64* %R11.i1855, align 8
  %11566 = load i64, i64* %RAX.i1862, align 8
  %11567 = shl nsw i64 %11565, 2
  %11568 = add i64 %11533, %11567
  %11569 = add i64 %11492, 75
  store i64 %11569, i64* %3, align 8
  %11570 = inttoptr i64 %11568 to i32*
  %11571 = load i32, i32* %11570, align 4
  %11572 = shl i64 %11566, 32
  %11573 = ashr exact i64 %11572, 32
  %11574 = sext i32 %11571 to i64
  %11575 = mul nsw i64 %11574, %11573
  %11576 = trunc i64 %11575 to i32
  %11577 = and i64 %11575, 4294967295
  store i64 %11577, i64* %RAX.i1862, align 8
  %11578 = shl i64 %11575, 32
  %11579 = ashr exact i64 %11578, 32
  %11580 = icmp ne i64 %11579, %11575
  %11581 = zext i1 %11580 to i8
  store i8 %11581, i8* %14, align 1
  %11582 = and i32 %11576, 255
  %11583 = tail call i32 @llvm.ctpop.i32(i32 %11582)
  %11584 = trunc i32 %11583 to i8
  %11585 = and i8 %11584, 1
  %11586 = xor i8 %11585, 1
  store i8 %11586, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %11587 = lshr i32 %11576, 31
  %11588 = trunc i32 %11587 to i8
  store i8 %11588, i8* %33, align 1
  store i8 %11581, i8* %39, align 1
  %11589 = add i64 %11560, -12
  %11590 = add i64 %11492, 79
  store i64 %11590, i64* %3, align 8
  %11591 = inttoptr i64 %11589 to i32*
  %11592 = load i32, i32* %11591, align 4
  %11593 = sext i32 %11592 to i64
  %11594 = shl nsw i64 %11593, 4
  store i64 %11594, i64* %9557, align 8
  %11595 = load i64, i64* %R9.i3079, align 8
  %11596 = add i64 %11594, %11595
  store i64 %11596, i64* %R9.i3079, align 8
  %11597 = icmp ult i64 %11596, %11595
  %11598 = icmp ult i64 %11596, %11594
  %11599 = or i1 %11597, %11598
  %11600 = zext i1 %11599 to i8
  store i8 %11600, i8* %14, align 1
  %11601 = trunc i64 %11596 to i32
  %11602 = and i32 %11601, 255
  %11603 = tail call i32 @llvm.ctpop.i32(i32 %11602)
  %11604 = trunc i32 %11603 to i8
  %11605 = and i8 %11604, 1
  %11606 = xor i8 %11605, 1
  store i8 %11606, i8* %21, align 1
  %11607 = xor i64 %11594, %11595
  %11608 = xor i64 %11607, %11596
  %11609 = lshr i64 %11608, 4
  %11610 = trunc i64 %11609 to i8
  %11611 = and i8 %11610, 1
  store i8 %11611, i8* %27, align 1
  %11612 = icmp eq i64 %11596, 0
  %11613 = zext i1 %11612 to i8
  store i8 %11613, i8* %30, align 1
  %11614 = lshr i64 %11596, 63
  %11615 = trunc i64 %11614 to i8
  store i8 %11615, i8* %33, align 1
  %11616 = lshr i64 %11595, 63
  %11617 = lshr i64 %11593, 59
  %11618 = and i64 %11617, 1
  %11619 = xor i64 %11614, %11616
  %11620 = xor i64 %11614, %11618
  %11621 = add nuw nsw i64 %11619, %11620
  %11622 = icmp eq i64 %11621, 2
  %11623 = zext i1 %11622 to i8
  store i8 %11623, i8* %39, align 1
  %11624 = load i64, i64* %RBP.i, align 8
  %11625 = add i64 %11624, -16
  %11626 = add i64 %11492, 90
  store i64 %11626, i64* %3, align 8
  %11627 = inttoptr i64 %11625 to i32*
  %11628 = load i32, i32* %11627, align 4
  %11629 = sext i32 %11628 to i64
  store i64 %11629, i64* %9557, align 8
  %11630 = shl nsw i64 %11629, 2
  %11631 = add i64 %11596, %11630
  %11632 = add i64 %11492, 95
  store i64 %11632, i64* %3, align 8
  %11633 = inttoptr i64 %11631 to i32*
  %11634 = load i32, i32* %11633, align 4
  %11635 = shl i64 %11575, 32
  %11636 = ashr exact i64 %11635, 32
  %11637 = sext i32 %11634 to i64
  %11638 = mul nsw i64 %11637, %11636
  %11639 = trunc i64 %11638 to i32
  %11640 = and i64 %11638, 4294967295
  store i64 %11640, i64* %RAX.i1862, align 8
  %11641 = shl i64 %11638, 32
  %11642 = ashr exact i64 %11641, 32
  %11643 = icmp ne i64 %11642, %11638
  %11644 = zext i1 %11643 to i8
  store i8 %11644, i8* %14, align 1
  %11645 = and i32 %11639, 255
  %11646 = tail call i32 @llvm.ctpop.i32(i32 %11645)
  %11647 = trunc i32 %11646 to i8
  %11648 = and i8 %11647, 1
  %11649 = xor i8 %11648, 1
  store i8 %11649, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %11650 = lshr i32 %11639, 31
  %11651 = trunc i32 %11650 to i8
  store i8 %11651, i8* %33, align 1
  store i8 %11644, i8* %39, align 1
  %11652 = add i64 %11624, -444
  %11653 = add i64 %11492, 101
  store i64 %11653, i64* %3, align 8
  %11654 = inttoptr i64 %11652 to i32*
  %11655 = load i32, i32* %11654, align 4
  %11656 = zext i32 %11655 to i64
  store i64 %11656, i64* %RSI.i2426, align 8
  %11657 = add i64 %11624, -712
  %11658 = load i64, i64* %RCX.i2028, align 8
  %11659 = add i64 %11492, 108
  store i64 %11659, i64* %3, align 8
  %11660 = inttoptr i64 %11657 to i64*
  store i64 %11658, i64* %11660, align 8
  %11661 = load i32, i32* %ESI.i1753, align 4
  %11662 = zext i32 %11661 to i64
  %11663 = load i64, i64* %3, align 8
  store i64 %11662, i64* %RCX.i2028, align 8
  %11664 = load i64, i64* %RAX.i1862, align 8
  %11665 = add i64 %11663, 4
  store i64 %11665, i64* %3, align 8
  %11666 = trunc i32 %11661 to i5
  switch i5 %11666, label %11673 [
    i5 0, label %routine_shll__cl___eax.exit1599
    i5 1, label %11667
  ]

; <label>:11667:                                  ; preds = %block_40e9da
  %11668 = trunc i64 %11664 to i32
  %11669 = shl i32 %11668, 1
  %11670 = icmp slt i32 %11668, 0
  %11671 = icmp slt i32 %11669, 0
  %11672 = xor i1 %11670, %11671
  br label %11683

; <label>:11673:                                  ; preds = %block_40e9da
  %11674 = and i32 %11661, 31
  %11675 = zext i32 %11674 to i64
  %11676 = add nuw nsw i64 %11675, 4294967295
  %11677 = and i64 %11664, 4294967295
  %11678 = and i64 %11676, 4294967295
  %11679 = shl i64 %11677, %11678
  %11680 = trunc i64 %11679 to i32
  %11681 = icmp slt i32 %11680, 0
  %11682 = shl i32 %11680, 1
  br label %11683

; <label>:11683:                                  ; preds = %11673, %11667
  %11684 = phi i1 [ %11670, %11667 ], [ %11681, %11673 ]
  %11685 = phi i1 [ %11672, %11667 ], [ false, %11673 ]
  %11686 = phi i32 [ %11669, %11667 ], [ %11682, %11673 ]
  %11687 = zext i32 %11686 to i64
  store i64 %11687, i64* %RAX.i1862, align 8
  %11688 = zext i1 %11684 to i8
  store i8 %11688, i8* %14, align 1
  %11689 = and i32 %11686, 254
  %11690 = tail call i32 @llvm.ctpop.i32(i32 %11689)
  %11691 = trunc i32 %11690 to i8
  %11692 = and i8 %11691, 1
  %11693 = xor i8 %11692, 1
  store i8 %11693, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11694 = icmp eq i32 %11686, 0
  %11695 = zext i1 %11694 to i8
  store i8 %11695, i8* %30, align 1
  %11696 = lshr i32 %11686, 31
  %11697 = trunc i32 %11696 to i8
  store i8 %11697, i8* %33, align 1
  %11698 = zext i1 %11685 to i8
  store i8 %11698, i8* %39, align 1
  br label %routine_shll__cl___eax.exit1599

routine_shll__cl___eax.exit1599:                  ; preds = %11683, %block_40e9da
  %11699 = phi i64 [ %11687, %11683 ], [ %11664, %block_40e9da ]
  %11700 = shl i64 %11699, 32
  %11701 = ashr i64 %11700, 37
  %11702 = lshr i64 %11701, 1
  %11703 = trunc i64 %11701 to i8
  %11704 = and i8 %11703, 1
  %11705 = trunc i64 %11702 to i32
  %11706 = and i64 %11702, 4294967295
  store i64 %11706, i64* %RAX.i1862, align 8
  store i8 %11704, i8* %14, align 1
  %11707 = and i32 %11705, 255
  %11708 = tail call i32 @llvm.ctpop.i32(i32 %11707)
  %11709 = trunc i32 %11708 to i8
  %11710 = and i8 %11709, 1
  %11711 = xor i8 %11710, 1
  store i8 %11711, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11712 = icmp eq i32 %11705, 0
  %11713 = zext i1 %11712 to i8
  store i8 %11713, i8* %30, align 1
  %11714 = lshr i64 %11701, 32
  %11715 = trunc i64 %11714 to i8
  %11716 = and i8 %11715, 1
  store i8 %11716, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11717 = load i64, i64* %RBP.i, align 8
  %11718 = add i64 %11717, -704
  %11719 = add i64 %11663, 13
  store i64 %11719, i64* %3, align 8
  %11720 = inttoptr i64 %11718 to i32*
  %11721 = load i32, i32* %11720, align 4
  %11722 = trunc i64 %11702 to i32
  %11723 = sub i32 %11721, %11722
  %11724 = zext i32 %11723 to i64
  store i64 %11724, i64* %RSI.i2426, align 8
  %11725 = icmp ult i32 %11721, %11722
  %11726 = zext i1 %11725 to i8
  store i8 %11726, i8* %14, align 1
  %11727 = and i32 %11723, 255
  %11728 = tail call i32 @llvm.ctpop.i32(i32 %11727)
  %11729 = trunc i32 %11728 to i8
  %11730 = and i8 %11729, 1
  %11731 = xor i8 %11730, 1
  store i8 %11731, i8* %21, align 1
  %11732 = xor i32 %11722, %11721
  %11733 = xor i32 %11732, %11723
  %11734 = lshr i32 %11733, 4
  %11735 = trunc i32 %11734 to i8
  %11736 = and i8 %11735, 1
  store i8 %11736, i8* %27, align 1
  %11737 = icmp eq i32 %11723, 0
  %11738 = zext i1 %11737 to i8
  store i8 %11738, i8* %30, align 1
  %11739 = lshr i32 %11723, 31
  %11740 = trunc i32 %11739 to i8
  store i8 %11740, i8* %33, align 1
  %11741 = lshr i32 %11721, 31
  %11742 = lshr i64 %11701, 32
  %11743 = trunc i64 %11742 to i32
  %11744 = and i32 %11743, 1
  %11745 = xor i32 %11744, %11741
  %11746 = xor i32 %11739, %11741
  %11747 = add nuw nsw i32 %11746, %11745
  %11748 = icmp eq i32 %11747, 2
  %11749 = zext i1 %11748 to i8
  store i8 %11749, i8* %39, align 1
  %11750 = add i64 %11717, -36
  %11751 = add i64 %11663, 18
  store i64 %11751, i64* %3, align 8
  %11752 = inttoptr i64 %11750 to i32*
  %11753 = load i32, i32* %11752, align 4
  %11754 = zext i32 %11753 to i64
  store i64 %11754, i64* %RAX.i1862, align 8
  %11755 = add i64 %11717, -12
  %11756 = add i64 %11663, 21
  store i64 %11756, i64* %3, align 8
  %11757 = inttoptr i64 %11755 to i32*
  %11758 = load i32, i32* %11757, align 4
  %11759 = add i32 %11758, %11753
  %11760 = zext i32 %11759 to i64
  store i64 %11760, i64* %RAX.i1862, align 8
  %11761 = sext i32 %11759 to i64
  %11762 = shl nsw i64 %11761, 5
  store i64 %11762, i64* %R9.i3079, align 8
  %11763 = load i64, i64* %R8.i3081, align 8
  %11764 = add i64 %11762, %11763
  store i64 %11764, i64* %R8.i3081, align 8
  %11765 = icmp ult i64 %11764, %11763
  %11766 = icmp ult i64 %11764, %11762
  %11767 = or i1 %11765, %11766
  %11768 = zext i1 %11767 to i8
  store i8 %11768, i8* %14, align 1
  %11769 = trunc i64 %11764 to i32
  %11770 = and i32 %11769, 255
  %11771 = tail call i32 @llvm.ctpop.i32(i32 %11770)
  %11772 = trunc i32 %11771 to i8
  %11773 = and i8 %11772, 1
  %11774 = xor i8 %11773, 1
  store i8 %11774, i8* %21, align 1
  %11775 = xor i64 %11763, %11764
  %11776 = lshr i64 %11775, 4
  %11777 = trunc i64 %11776 to i8
  %11778 = and i8 %11777, 1
  store i8 %11778, i8* %27, align 1
  %11779 = icmp eq i64 %11764, 0
  %11780 = zext i1 %11779 to i8
  store i8 %11780, i8* %30, align 1
  %11781 = lshr i64 %11764, 63
  %11782 = trunc i64 %11781 to i8
  store i8 %11782, i8* %33, align 1
  %11783 = lshr i64 %11763, 63
  %11784 = lshr i64 %11761, 58
  %11785 = and i64 %11784, 1
  %11786 = xor i64 %11781, %11783
  %11787 = xor i64 %11781, %11785
  %11788 = add nuw nsw i64 %11786, %11787
  %11789 = icmp eq i64 %11788, 2
  %11790 = zext i1 %11789 to i8
  store i8 %11790, i8* %39, align 1
  %11791 = load i64, i64* %RBP.i, align 8
  %11792 = add i64 %11791, -32
  %11793 = add i64 %11663, 34
  store i64 %11793, i64* %3, align 8
  %11794 = inttoptr i64 %11792 to i32*
  %11795 = load i32, i32* %11794, align 4
  %11796 = zext i32 %11795 to i64
  store i64 %11796, i64* %RAX.i1862, align 8
  %11797 = add i64 %11791, -16
  %11798 = add i64 %11663, 37
  store i64 %11798, i64* %3, align 8
  %11799 = inttoptr i64 %11797 to i32*
  %11800 = load i32, i32* %11799, align 4
  %11801 = add i32 %11800, %11795
  %11802 = zext i32 %11801 to i64
  store i64 %11802, i64* %RAX.i1862, align 8
  %11803 = icmp ult i32 %11801, %11795
  %11804 = icmp ult i32 %11801, %11800
  %11805 = or i1 %11803, %11804
  %11806 = zext i1 %11805 to i8
  store i8 %11806, i8* %14, align 1
  %11807 = and i32 %11801, 255
  %11808 = tail call i32 @llvm.ctpop.i32(i32 %11807)
  %11809 = trunc i32 %11808 to i8
  %11810 = and i8 %11809, 1
  %11811 = xor i8 %11810, 1
  store i8 %11811, i8* %21, align 1
  %11812 = xor i32 %11800, %11795
  %11813 = xor i32 %11812, %11801
  %11814 = lshr i32 %11813, 4
  %11815 = trunc i32 %11814 to i8
  %11816 = and i8 %11815, 1
  store i8 %11816, i8* %27, align 1
  %11817 = icmp eq i32 %11801, 0
  %11818 = zext i1 %11817 to i8
  store i8 %11818, i8* %30, align 1
  %11819 = lshr i32 %11801, 31
  %11820 = trunc i32 %11819 to i8
  store i8 %11820, i8* %33, align 1
  %11821 = lshr i32 %11795, 31
  %11822 = lshr i32 %11800, 31
  %11823 = xor i32 %11819, %11821
  %11824 = xor i32 %11819, %11822
  %11825 = add nuw nsw i32 %11823, %11824
  %11826 = icmp eq i32 %11825, 2
  %11827 = zext i1 %11826 to i8
  store i8 %11827, i8* %39, align 1
  %11828 = sext i32 %11801 to i64
  store i64 %11828, i64* %R9.i3079, align 8
  %11829 = load i64, i64* %RSI.i2426, align 8
  %11830 = shl nsw i64 %11828, 2
  %11831 = add i64 %11764, %11830
  %11832 = add i64 %11663, 44
  store i64 %11832, i64* %3, align 8
  %11833 = trunc i64 %11829 to i32
  %11834 = inttoptr i64 %11831 to i32*
  %11835 = load i32, i32* %11834, align 4
  %11836 = sub i32 %11833, %11835
  %11837 = zext i32 %11836 to i64
  store i64 %11837, i64* %RSI.i2426, align 8
  %11838 = icmp ult i32 %11833, %11835
  %11839 = zext i1 %11838 to i8
  store i8 %11839, i8* %14, align 1
  %11840 = and i32 %11836, 255
  %11841 = tail call i32 @llvm.ctpop.i32(i32 %11840)
  %11842 = trunc i32 %11841 to i8
  %11843 = and i8 %11842, 1
  %11844 = xor i8 %11843, 1
  store i8 %11844, i8* %21, align 1
  %11845 = xor i32 %11835, %11833
  %11846 = xor i32 %11845, %11836
  %11847 = lshr i32 %11846, 4
  %11848 = trunc i32 %11847 to i8
  %11849 = and i8 %11848, 1
  store i8 %11849, i8* %27, align 1
  %11850 = icmp eq i32 %11836, 0
  %11851 = zext i1 %11850 to i8
  store i8 %11851, i8* %30, align 1
  %11852 = lshr i32 %11836, 31
  %11853 = trunc i32 %11852 to i8
  store i8 %11853, i8* %33, align 1
  %11854 = lshr i32 %11833, 31
  %11855 = lshr i32 %11835, 31
  %11856 = xor i32 %11855, %11854
  %11857 = xor i32 %11852, %11854
  %11858 = add nuw nsw i32 %11857, %11856
  %11859 = icmp eq i32 %11858, 2
  %11860 = zext i1 %11859 to i8
  store i8 %11860, i8* %39, align 1
  %11861 = sitofp i32 %11836 to double
  store double %11861, double* %45, align 1
  %11862 = add i64 %11791, -536
  %11863 = add i64 %11663, 56
  store i64 %11863, i64* %3, align 8
  %11864 = inttoptr i64 %11862 to double*
  store double %11861, double* %11864, align 8
  %11865 = load i64, i64* %RBP.i, align 8
  %11866 = add i64 %11865, -516
  %11867 = load i64, i64* %3, align 8
  %11868 = add i64 %11867, 6
  store i64 %11868, i64* %3, align 8
  %11869 = inttoptr i64 %11866 to i32*
  %11870 = load i32, i32* %11869, align 4
  %11871 = zext i32 %11870 to i64
  store i64 %11871, i64* %RDI.i3890, align 8
  %11872 = add i64 %11865, -68
  %11873 = add i64 %11867, 9
  store i64 %11873, i64* %3, align 8
  %11874 = inttoptr i64 %11872 to i32*
  %11875 = load i32, i32* %11874, align 4
  %11876 = zext i32 %11875 to i64
  store i64 %11876, i64* %RSI.i2426, align 8
  %11877 = add i64 %11865, -712
  %11878 = add i64 %11867, 16
  store i64 %11878, i64* %3, align 8
  %11879 = inttoptr i64 %11877 to i64*
  %11880 = load i64, i64* %11879, align 8
  store i64 %11880, i64* %RCX.i2028, align 8
  %11881 = add i64 %11867, 648113
  %11882 = add i64 %11867, 21
  %11883 = load i64, i64* %6, align 8
  %11884 = add i64 %11883, -8
  %11885 = inttoptr i64 %11884 to i64*
  store i64 %11882, i64* %11885, align 8
  store i64 %11884, i64* %6, align 8
  store i64 %11881, i64* %3, align 8
  %call2_40eacf = tail call %struct.Memory* @sub_4ace70.levrun_linfo_inter(%struct.State* nonnull %0, i64 %11881, %struct.Memory* %call2_40ea16)
  %11886 = load i64, i64* %RBP.i, align 8
  %11887 = add i64 %11886, -536
  %11888 = load i64, i64* %3, align 8
  %11889 = add i64 %11888, 8
  store i64 %11889, i64* %3, align 8
  %11890 = inttoptr i64 %11887 to i64*
  %11891 = load i64, i64* %11890, align 8
  store i64 %11891, i64* %46, align 1
  store double 0.000000e+00, double* %48, align 1
  %11892 = add i64 %11888, 16
  store i64 %11892, i64* %3, align 8
  %11893 = bitcast i64 %11891 to double
  %11894 = inttoptr i64 %11887 to double*
  %11895 = load double, double* %11894, align 8
  %11896 = fmul double %11893, %11895
  store double %11896, double* %45, align 1
  store i64 0, i64* %47, align 1
  %11897 = add i64 %11886, -552
  %11898 = add i64 %11888, 24
  store i64 %11898, i64* %3, align 8
  %11899 = inttoptr i64 %11897 to i64*
  %11900 = load i64, i64* %11899, align 8
  store i64 %11900, i64* %56, align 1
  store double 0.000000e+00, double* %58, align 1
  %11901 = add i64 %11886, -524
  %11902 = add i64 %11888, 32
  store i64 %11902, i64* %3, align 8
  %11903 = inttoptr i64 %11901 to i32*
  %11904 = load i32, i32* %11903, align 4
  %11905 = sitofp i32 %11904 to double
  store double %11905, double* %243, align 1
  %11906 = bitcast i64 %11900 to double
  %11907 = fmul double %11905, %11906
  store double %11907, double* %55, align 1
  store i64 0, i64* %57, align 1
  %11908 = fadd double %11907, %11896
  store double %11908, double* %45, align 1
  store i64 0, i64* %47, align 1
  %11909 = add i64 %11888, 48
  store i64 %11909, i64* %3, align 8
  %11910 = inttoptr i64 %11887 to double*
  store double %11908, double* %11910, align 8
  %11911 = load i64, i64* %3, align 8
  %11912 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %11913 = add i64 %11912, 13112
  store i64 %11913, i64* %RCX.i2028, align 8
  %11914 = icmp ugt i64 %11912, -13113
  %11915 = zext i1 %11914 to i8
  store i8 %11915, i8* %14, align 1
  %11916 = trunc i64 %11913 to i32
  %11917 = and i32 %11916, 255
  %11918 = tail call i32 @llvm.ctpop.i32(i32 %11917)
  %11919 = trunc i32 %11918 to i8
  %11920 = and i8 %11919, 1
  %11921 = xor i8 %11920, 1
  store i8 %11921, i8* %21, align 1
  %11922 = xor i64 %11912, 16
  %11923 = xor i64 %11922, %11913
  %11924 = lshr i64 %11923, 4
  %11925 = trunc i64 %11924 to i8
  %11926 = and i8 %11925, 1
  store i8 %11926, i8* %27, align 1
  %11927 = icmp eq i64 %11913, 0
  %11928 = zext i1 %11927 to i8
  store i8 %11928, i8* %30, align 1
  %11929 = lshr i64 %11913, 63
  %11930 = trunc i64 %11929 to i8
  store i8 %11930, i8* %33, align 1
  %11931 = lshr i64 %11912, 63
  %11932 = xor i64 %11929, %11931
  %11933 = add nuw nsw i64 %11932, %11929
  %11934 = icmp eq i64 %11933, 2
  %11935 = zext i1 %11934 to i8
  store i8 %11935, i8* %39, align 1
  %11936 = load i64, i64* %RBP.i, align 8
  %11937 = add i64 %11936, -36
  %11938 = add i64 %11911, 18
  store i64 %11938, i64* %3, align 8
  %11939 = inttoptr i64 %11937 to i32*
  %11940 = load i32, i32* %11939, align 4
  %11941 = zext i32 %11940 to i64
  store i64 %11941, i64* %RAX.i1862, align 8
  %11942 = add i64 %11936, -12
  %11943 = add i64 %11911, 21
  store i64 %11943, i64* %3, align 8
  %11944 = inttoptr i64 %11942 to i32*
  %11945 = load i32, i32* %11944, align 4
  %11946 = add i32 %11945, %11940
  %11947 = zext i32 %11946 to i64
  store i64 %11947, i64* %RAX.i1862, align 8
  %11948 = sext i32 %11946 to i64
  %11949 = shl nsw i64 %11948, 6
  store i64 %11949, i64* %RDX.i4840, align 8
  %11950 = load i64, i64* %RCX.i2028, align 8
  %11951 = add i64 %11949, %11950
  store i64 %11951, i64* %RCX.i2028, align 8
  %11952 = icmp ult i64 %11951, %11950
  %11953 = icmp ult i64 %11951, %11949
  %11954 = or i1 %11952, %11953
  %11955 = zext i1 %11954 to i8
  store i8 %11955, i8* %14, align 1
  %11956 = trunc i64 %11951 to i32
  %11957 = and i32 %11956, 255
  %11958 = tail call i32 @llvm.ctpop.i32(i32 %11957)
  %11959 = trunc i32 %11958 to i8
  %11960 = and i8 %11959, 1
  %11961 = xor i8 %11960, 1
  store i8 %11961, i8* %21, align 1
  %11962 = xor i64 %11950, %11951
  %11963 = lshr i64 %11962, 4
  %11964 = trunc i64 %11963 to i8
  %11965 = and i8 %11964, 1
  store i8 %11965, i8* %27, align 1
  %11966 = icmp eq i64 %11951, 0
  %11967 = zext i1 %11966 to i8
  store i8 %11967, i8* %30, align 1
  %11968 = lshr i64 %11951, 63
  %11969 = trunc i64 %11968 to i8
  store i8 %11969, i8* %33, align 1
  %11970 = lshr i64 %11950, 63
  %11971 = lshr i64 %11948, 57
  %11972 = and i64 %11971, 1
  %11973 = xor i64 %11968, %11970
  %11974 = xor i64 %11968, %11972
  %11975 = add nuw nsw i64 %11973, %11974
  %11976 = icmp eq i64 %11975, 2
  %11977 = zext i1 %11976 to i8
  store i8 %11977, i8* %39, align 1
  %11978 = load i64, i64* %RBP.i, align 8
  %11979 = add i64 %11978, -32
  %11980 = add i64 %11911, 34
  store i64 %11980, i64* %3, align 8
  %11981 = inttoptr i64 %11979 to i32*
  %11982 = load i32, i32* %11981, align 4
  %11983 = zext i32 %11982 to i64
  store i64 %11983, i64* %RAX.i1862, align 8
  %11984 = add i64 %11978, -16
  %11985 = add i64 %11911, 37
  store i64 %11985, i64* %3, align 8
  %11986 = inttoptr i64 %11984 to i32*
  %11987 = load i32, i32* %11986, align 4
  %11988 = add i32 %11987, %11982
  %11989 = zext i32 %11988 to i64
  store i64 %11989, i64* %RAX.i1862, align 8
  %11990 = icmp ult i32 %11988, %11982
  %11991 = icmp ult i32 %11988, %11987
  %11992 = or i1 %11990, %11991
  %11993 = zext i1 %11992 to i8
  store i8 %11993, i8* %14, align 1
  %11994 = and i32 %11988, 255
  %11995 = tail call i32 @llvm.ctpop.i32(i32 %11994)
  %11996 = trunc i32 %11995 to i8
  %11997 = and i8 %11996, 1
  %11998 = xor i8 %11997, 1
  store i8 %11998, i8* %21, align 1
  %11999 = xor i32 %11987, %11982
  %12000 = xor i32 %11999, %11988
  %12001 = lshr i32 %12000, 4
  %12002 = trunc i32 %12001 to i8
  %12003 = and i8 %12002, 1
  store i8 %12003, i8* %27, align 1
  %12004 = icmp eq i32 %11988, 0
  %12005 = zext i1 %12004 to i8
  store i8 %12005, i8* %30, align 1
  %12006 = lshr i32 %11988, 31
  %12007 = trunc i32 %12006 to i8
  store i8 %12007, i8* %33, align 1
  %12008 = lshr i32 %11982, 31
  %12009 = lshr i32 %11987, 31
  %12010 = xor i32 %12006, %12008
  %12011 = xor i32 %12006, %12009
  %12012 = add nuw nsw i32 %12010, %12011
  %12013 = icmp eq i32 %12012, 2
  %12014 = zext i1 %12013 to i8
  store i8 %12014, i8* %39, align 1
  %12015 = sext i32 %11988 to i64
  store i64 %12015, i64* %RDX.i4840, align 8
  %12016 = shl nsw i64 %12015, 2
  %12017 = add i64 %11951, %12016
  %12018 = add i64 %11911, 43
  store i64 %12018, i64* %3, align 8
  %12019 = inttoptr i64 %12017 to i32*
  %12020 = load i32, i32* %12019, align 4
  %12021 = zext i32 %12020 to i64
  store i64 %12021, i64* %RAX.i1862, align 8
  %12022 = add i64 %11978, -520
  %12023 = add i64 %11911, 49
  store i64 %12023, i64* %3, align 8
  %12024 = inttoptr i64 %12022 to i32*
  %12025 = load i32, i32* %12024, align 4
  %12026 = zext i32 %12025 to i64
  store i64 %12026, i64* %RDI.i3890, align 8
  %12027 = add i64 %11978, -512
  %12028 = add i64 %11911, 55
  store i64 %12028, i64* %3, align 8
  %12029 = inttoptr i64 %12027 to i32*
  %12030 = load i32, i32* %12029, align 4
  %12031 = zext i32 %12030 to i64
  store i64 %12031, i64* %RSI.i2426, align 8
  %12032 = add i64 %11978, -716
  %12033 = add i64 %11911, 61
  store i64 %12033, i64* %3, align 8
  %12034 = inttoptr i64 %12032 to i32*
  store i32 %12020, i32* %12034, align 4
  %12035 = load i64, i64* %3, align 8
  %12036 = add i64 %12035, 419343
  %12037 = add i64 %12035, 5
  %12038 = load i64, i64* %6, align 8
  %12039 = add i64 %12038, -8
  %12040 = inttoptr i64 %12039 to i64*
  store i64 %12037, i64* %12040, align 8
  store i64 %12039, i64* %6, align 8
  store i64 %12036, i64* %3, align 8
  %call2_40eb41 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %12036, %struct.Memory* %call2_40eacf)
  %12041 = load i64, i64* %RBP.i, align 8
  %12042 = add i64 %12041, -524
  %12043 = load i64, i64* %3, align 8
  store i64 %12042, i64* %RDX.i4840, align 8
  %12044 = add i64 %12041, -528
  store i64 %12044, i64* %RCX.i2028, align 8
  %12045 = add i64 %12041, -400
  store i64 %12045, i64* %R8.i3081, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %R9.i3079, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %9557, align 8
  %12046 = add i64 %12041, -448
  %12047 = add i64 %12043, 48
  store i64 %12047, i64* %3, align 8
  %12048 = inttoptr i64 %12046 to i32*
  %12049 = load i32, i32* %12048, align 4
  %12050 = sext i32 %12049 to i64
  %12051 = shl nsw i64 %12050, 6
  store i64 %12051, i64* %R11.i1855, align 8
  %12052 = add i64 %12051, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %12052, i64* %9557, align 8
  %12053 = icmp ult i64 %12052, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %12054 = icmp ult i64 %12052, %12051
  %12055 = or i1 %12053, %12054
  %12056 = zext i1 %12055 to i8
  store i8 %12056, i8* %14, align 1
  %12057 = trunc i64 %12052 to i32
  %12058 = and i32 %12057, 248
  %12059 = tail call i32 @llvm.ctpop.i32(i32 %12058)
  %12060 = trunc i32 %12059 to i8
  %12061 = and i8 %12060, 1
  %12062 = xor i8 %12061, 1
  store i8 %12062, i8* %21, align 1
  %12063 = xor i64 %12052, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %12064 = lshr i64 %12063, 4
  %12065 = trunc i64 %12064 to i8
  %12066 = and i8 %12065, 1
  store i8 %12066, i8* %27, align 1
  %12067 = icmp eq i64 %12052, 0
  %12068 = zext i1 %12067 to i8
  store i8 %12068, i8* %30, align 1
  %12069 = lshr i64 %12052, 63
  %12070 = trunc i64 %12069 to i8
  store i8 %12070, i8* %33, align 1
  %12071 = lshr i64 %12050, 57
  %12072 = and i64 %12071, 1
  %12073 = xor i64 %12069, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %12074 = xor i64 %12069, %12072
  %12075 = add nuw nsw i64 %12073, %12074
  %12076 = icmp eq i64 %12075, 2
  %12077 = zext i1 %12076 to i8
  store i8 %12077, i8* %39, align 1
  %12078 = add i64 %12041, -12
  %12079 = add i64 %12043, 59
  store i64 %12079, i64* %3, align 8
  %12080 = inttoptr i64 %12078 to i32*
  %12081 = load i32, i32* %12080, align 4
  %12082 = sext i32 %12081 to i64
  %12083 = shl nsw i64 %12082, 4
  store i64 %12083, i64* %R11.i1855, align 8
  %12084 = add i64 %12083, %12052
  store i64 %12084, i64* %9557, align 8
  %12085 = icmp ult i64 %12084, %12052
  %12086 = icmp ult i64 %12084, %12083
  %12087 = or i1 %12085, %12086
  %12088 = zext i1 %12087 to i8
  store i8 %12088, i8* %14, align 1
  %12089 = trunc i64 %12084 to i32
  %12090 = and i32 %12089, 248
  %12091 = tail call i32 @llvm.ctpop.i32(i32 %12090)
  %12092 = trunc i32 %12091 to i8
  %12093 = and i8 %12092, 1
  %12094 = xor i8 %12093, 1
  store i8 %12094, i8* %21, align 1
  %12095 = xor i64 %12083, %12052
  %12096 = xor i64 %12095, %12084
  %12097 = lshr i64 %12096, 4
  %12098 = trunc i64 %12097 to i8
  %12099 = and i8 %12098, 1
  store i8 %12099, i8* %27, align 1
  %12100 = icmp eq i64 %12084, 0
  %12101 = zext i1 %12100 to i8
  store i8 %12101, i8* %30, align 1
  %12102 = lshr i64 %12084, 63
  %12103 = trunc i64 %12102 to i8
  store i8 %12103, i8* %33, align 1
  %12104 = lshr i64 %12082, 59
  %12105 = and i64 %12104, 1
  %12106 = xor i64 %12102, %12069
  %12107 = xor i64 %12102, %12105
  %12108 = add nuw nsw i64 %12106, %12107
  %12109 = icmp eq i64 %12108, 2
  %12110 = zext i1 %12109 to i8
  store i8 %12110, i8* %39, align 1
  %12111 = load i64, i64* %RBP.i, align 8
  %12112 = add i64 %12111, -16
  %12113 = add i64 %12043, 70
  store i64 %12113, i64* %3, align 8
  %12114 = inttoptr i64 %12112 to i32*
  %12115 = load i32, i32* %12114, align 4
  %12116 = sext i32 %12115 to i64
  store i64 %12116, i64* %R11.i1855, align 8
  %12117 = load i64, i64* %RAX.i1862, align 8
  %12118 = shl nsw i64 %12116, 2
  %12119 = add i64 %12084, %12118
  %12120 = add i64 %12043, 75
  store i64 %12120, i64* %3, align 8
  %12121 = inttoptr i64 %12119 to i32*
  %12122 = load i32, i32* %12121, align 4
  %12123 = shl i64 %12117, 32
  %12124 = ashr exact i64 %12123, 32
  %12125 = sext i32 %12122 to i64
  %12126 = mul nsw i64 %12125, %12124
  %12127 = trunc i64 %12126 to i32
  %12128 = and i64 %12126, 4294967295
  store i64 %12128, i64* %RAX.i1862, align 8
  %12129 = shl i64 %12126, 32
  %12130 = ashr exact i64 %12129, 32
  %12131 = icmp ne i64 %12130, %12126
  %12132 = zext i1 %12131 to i8
  store i8 %12132, i8* %14, align 1
  %12133 = and i32 %12127, 255
  %12134 = tail call i32 @llvm.ctpop.i32(i32 %12133)
  %12135 = trunc i32 %12134 to i8
  %12136 = and i8 %12135, 1
  %12137 = xor i8 %12136, 1
  store i8 %12137, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %12138 = lshr i32 %12127, 31
  %12139 = trunc i32 %12138 to i8
  store i8 %12139, i8* %33, align 1
  store i8 %12132, i8* %39, align 1
  %12140 = add i64 %12111, -12
  %12141 = add i64 %12043, 79
  store i64 %12141, i64* %3, align 8
  %12142 = inttoptr i64 %12140 to i32*
  %12143 = load i32, i32* %12142, align 4
  %12144 = sext i32 %12143 to i64
  %12145 = shl nsw i64 %12144, 4
  store i64 %12145, i64* %9557, align 8
  %12146 = load i64, i64* %R9.i3079, align 8
  %12147 = add i64 %12145, %12146
  store i64 %12147, i64* %R9.i3079, align 8
  %12148 = icmp ult i64 %12147, %12146
  %12149 = icmp ult i64 %12147, %12145
  %12150 = or i1 %12148, %12149
  %12151 = zext i1 %12150 to i8
  store i8 %12151, i8* %14, align 1
  %12152 = trunc i64 %12147 to i32
  %12153 = and i32 %12152, 255
  %12154 = tail call i32 @llvm.ctpop.i32(i32 %12153)
  %12155 = trunc i32 %12154 to i8
  %12156 = and i8 %12155, 1
  %12157 = xor i8 %12156, 1
  store i8 %12157, i8* %21, align 1
  %12158 = xor i64 %12145, %12146
  %12159 = xor i64 %12158, %12147
  %12160 = lshr i64 %12159, 4
  %12161 = trunc i64 %12160 to i8
  %12162 = and i8 %12161, 1
  store i8 %12162, i8* %27, align 1
  %12163 = icmp eq i64 %12147, 0
  %12164 = zext i1 %12163 to i8
  store i8 %12164, i8* %30, align 1
  %12165 = lshr i64 %12147, 63
  %12166 = trunc i64 %12165 to i8
  store i8 %12166, i8* %33, align 1
  %12167 = lshr i64 %12146, 63
  %12168 = lshr i64 %12144, 59
  %12169 = and i64 %12168, 1
  %12170 = xor i64 %12165, %12167
  %12171 = xor i64 %12165, %12169
  %12172 = add nuw nsw i64 %12170, %12171
  %12173 = icmp eq i64 %12172, 2
  %12174 = zext i1 %12173 to i8
  store i8 %12174, i8* %39, align 1
  %12175 = load i64, i64* %RBP.i, align 8
  %12176 = add i64 %12175, -16
  %12177 = add i64 %12043, 90
  store i64 %12177, i64* %3, align 8
  %12178 = inttoptr i64 %12176 to i32*
  %12179 = load i32, i32* %12178, align 4
  %12180 = sext i32 %12179 to i64
  store i64 %12180, i64* %9557, align 8
  %12181 = shl nsw i64 %12180, 2
  %12182 = add i64 %12147, %12181
  %12183 = add i64 %12043, 95
  store i64 %12183, i64* %3, align 8
  %12184 = inttoptr i64 %12182 to i32*
  %12185 = load i32, i32* %12184, align 4
  %12186 = shl i64 %12126, 32
  %12187 = ashr exact i64 %12186, 32
  %12188 = sext i32 %12185 to i64
  %12189 = mul nsw i64 %12188, %12187
  %12190 = trunc i64 %12189 to i32
  %12191 = and i64 %12189, 4294967295
  store i64 %12191, i64* %RAX.i1862, align 8
  %12192 = shl i64 %12189, 32
  %12193 = ashr exact i64 %12192, 32
  %12194 = icmp ne i64 %12193, %12189
  %12195 = zext i1 %12194 to i8
  store i8 %12195, i8* %14, align 1
  %12196 = and i32 %12190, 255
  %12197 = tail call i32 @llvm.ctpop.i32(i32 %12196)
  %12198 = trunc i32 %12197 to i8
  %12199 = and i8 %12198, 1
  %12200 = xor i8 %12199, 1
  store i8 %12200, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %12201 = lshr i32 %12190, 31
  %12202 = trunc i32 %12201 to i8
  store i8 %12202, i8* %33, align 1
  store i8 %12195, i8* %39, align 1
  %12203 = add i64 %12175, -444
  %12204 = add i64 %12043, 101
  store i64 %12204, i64* %3, align 8
  %12205 = inttoptr i64 %12203 to i32*
  %12206 = load i32, i32* %12205, align 4
  %12207 = zext i32 %12206 to i64
  store i64 %12207, i64* %RSI.i2426, align 8
  %12208 = add i64 %12175, -728
  %12209 = load i64, i64* %RCX.i2028, align 8
  %12210 = add i64 %12043, 108
  store i64 %12210, i64* %3, align 8
  %12211 = inttoptr i64 %12208 to i64*
  store i64 %12209, i64* %12211, align 8
  %12212 = load i32, i32* %ESI.i1753, align 4
  %12213 = zext i32 %12212 to i64
  %12214 = load i64, i64* %3, align 8
  store i64 %12213, i64* %RCX.i2028, align 8
  %12215 = load i64, i64* %RAX.i1862, align 8
  %12216 = add i64 %12214, 4
  store i64 %12216, i64* %3, align 8
  %12217 = trunc i32 %12212 to i5
  switch i5 %12217, label %12224 [
    i5 0, label %routine_shll__cl___eax.exit1424
    i5 1, label %12218
  ]

; <label>:12218:                                  ; preds = %routine_shll__cl___eax.exit1599
  %12219 = trunc i64 %12215 to i32
  %12220 = shl i32 %12219, 1
  %12221 = icmp slt i32 %12219, 0
  %12222 = icmp slt i32 %12220, 0
  %12223 = xor i1 %12221, %12222
  br label %12234

; <label>:12224:                                  ; preds = %routine_shll__cl___eax.exit1599
  %12225 = and i32 %12212, 31
  %12226 = zext i32 %12225 to i64
  %12227 = add nuw nsw i64 %12226, 4294967295
  %12228 = and i64 %12215, 4294967295
  %12229 = and i64 %12227, 4294967295
  %12230 = shl i64 %12228, %12229
  %12231 = trunc i64 %12230 to i32
  %12232 = icmp slt i32 %12231, 0
  %12233 = shl i32 %12231, 1
  br label %12234

; <label>:12234:                                  ; preds = %12224, %12218
  %12235 = phi i1 [ %12221, %12218 ], [ %12232, %12224 ]
  %12236 = phi i1 [ %12223, %12218 ], [ false, %12224 ]
  %12237 = phi i32 [ %12220, %12218 ], [ %12233, %12224 ]
  %12238 = zext i32 %12237 to i64
  store i64 %12238, i64* %RAX.i1862, align 8
  %12239 = zext i1 %12235 to i8
  store i8 %12239, i8* %14, align 1
  %12240 = and i32 %12237, 254
  %12241 = tail call i32 @llvm.ctpop.i32(i32 %12240)
  %12242 = trunc i32 %12241 to i8
  %12243 = and i8 %12242, 1
  %12244 = xor i8 %12243, 1
  store i8 %12244, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %12245 = icmp eq i32 %12237, 0
  %12246 = zext i1 %12245 to i8
  store i8 %12246, i8* %30, align 1
  %12247 = lshr i32 %12237, 31
  %12248 = trunc i32 %12247 to i8
  store i8 %12248, i8* %33, align 1
  %12249 = zext i1 %12236 to i8
  store i8 %12249, i8* %39, align 1
  br label %routine_shll__cl___eax.exit1424

routine_shll__cl___eax.exit1424:                  ; preds = %12234, %routine_shll__cl___eax.exit1599
  %12250 = phi i64 [ %12238, %12234 ], [ %12215, %routine_shll__cl___eax.exit1599 ]
  %12251 = shl i64 %12250, 32
  %12252 = ashr i64 %12251, 37
  %12253 = lshr i64 %12252, 1
  %12254 = trunc i64 %12252 to i8
  %12255 = and i8 %12254, 1
  %12256 = trunc i64 %12253 to i32
  %12257 = and i64 %12253, 4294967295
  store i64 %12257, i64* %RAX.i1862, align 8
  store i8 %12255, i8* %14, align 1
  %12258 = and i32 %12256, 255
  %12259 = tail call i32 @llvm.ctpop.i32(i32 %12258)
  %12260 = trunc i32 %12259 to i8
  %12261 = and i8 %12260, 1
  %12262 = xor i8 %12261, 1
  store i8 %12262, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %12263 = icmp eq i32 %12256, 0
  %12264 = zext i1 %12263 to i8
  store i8 %12264, i8* %30, align 1
  %12265 = lshr i64 %12252, 32
  %12266 = trunc i64 %12265 to i8
  %12267 = and i8 %12266, 1
  store i8 %12267, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %12268 = load i64, i64* %RBP.i, align 8
  %12269 = add i64 %12268, -716
  %12270 = add i64 %12214, 13
  store i64 %12270, i64* %3, align 8
  %12271 = inttoptr i64 %12269 to i32*
  %12272 = load i32, i32* %12271, align 4
  %12273 = trunc i64 %12253 to i32
  %12274 = sub i32 %12272, %12273
  %12275 = zext i32 %12274 to i64
  store i64 %12275, i64* %RSI.i2426, align 8
  %12276 = icmp ult i32 %12272, %12273
  %12277 = zext i1 %12276 to i8
  store i8 %12277, i8* %14, align 1
  %12278 = and i32 %12274, 255
  %12279 = tail call i32 @llvm.ctpop.i32(i32 %12278)
  %12280 = trunc i32 %12279 to i8
  %12281 = and i8 %12280, 1
  %12282 = xor i8 %12281, 1
  store i8 %12282, i8* %21, align 1
  %12283 = xor i32 %12273, %12272
  %12284 = xor i32 %12283, %12274
  %12285 = lshr i32 %12284, 4
  %12286 = trunc i32 %12285 to i8
  %12287 = and i8 %12286, 1
  store i8 %12287, i8* %27, align 1
  %12288 = icmp eq i32 %12274, 0
  %12289 = zext i1 %12288 to i8
  store i8 %12289, i8* %30, align 1
  %12290 = lshr i32 %12274, 31
  %12291 = trunc i32 %12290 to i8
  store i8 %12291, i8* %33, align 1
  %12292 = lshr i32 %12272, 31
  %12293 = lshr i64 %12252, 32
  %12294 = trunc i64 %12293 to i32
  %12295 = and i32 %12294, 1
  %12296 = xor i32 %12295, %12292
  %12297 = xor i32 %12290, %12292
  %12298 = add nuw nsw i32 %12297, %12296
  %12299 = icmp eq i32 %12298, 2
  %12300 = zext i1 %12299 to i8
  store i8 %12300, i8* %39, align 1
  %12301 = add i64 %12268, -36
  %12302 = add i64 %12214, 18
  store i64 %12302, i64* %3, align 8
  %12303 = inttoptr i64 %12301 to i32*
  %12304 = load i32, i32* %12303, align 4
  %12305 = zext i32 %12304 to i64
  store i64 %12305, i64* %RAX.i1862, align 8
  %12306 = add i64 %12268, -12
  %12307 = add i64 %12214, 21
  store i64 %12307, i64* %3, align 8
  %12308 = inttoptr i64 %12306 to i32*
  %12309 = load i32, i32* %12308, align 4
  %12310 = add i32 %12309, %12304
  %12311 = zext i32 %12310 to i64
  store i64 %12311, i64* %RAX.i1862, align 8
  %12312 = sext i32 %12310 to i64
  %12313 = shl nsw i64 %12312, 5
  store i64 %12313, i64* %R9.i3079, align 8
  %12314 = load i64, i64* %R8.i3081, align 8
  %12315 = add i64 %12313, %12314
  store i64 %12315, i64* %R8.i3081, align 8
  %12316 = icmp ult i64 %12315, %12314
  %12317 = icmp ult i64 %12315, %12313
  %12318 = or i1 %12316, %12317
  %12319 = zext i1 %12318 to i8
  store i8 %12319, i8* %14, align 1
  %12320 = trunc i64 %12315 to i32
  %12321 = and i32 %12320, 255
  %12322 = tail call i32 @llvm.ctpop.i32(i32 %12321)
  %12323 = trunc i32 %12322 to i8
  %12324 = and i8 %12323, 1
  %12325 = xor i8 %12324, 1
  store i8 %12325, i8* %21, align 1
  %12326 = xor i64 %12314, %12315
  %12327 = lshr i64 %12326, 4
  %12328 = trunc i64 %12327 to i8
  %12329 = and i8 %12328, 1
  store i8 %12329, i8* %27, align 1
  %12330 = icmp eq i64 %12315, 0
  %12331 = zext i1 %12330 to i8
  store i8 %12331, i8* %30, align 1
  %12332 = lshr i64 %12315, 63
  %12333 = trunc i64 %12332 to i8
  store i8 %12333, i8* %33, align 1
  %12334 = lshr i64 %12314, 63
  %12335 = lshr i64 %12312, 58
  %12336 = and i64 %12335, 1
  %12337 = xor i64 %12332, %12334
  %12338 = xor i64 %12332, %12336
  %12339 = add nuw nsw i64 %12337, %12338
  %12340 = icmp eq i64 %12339, 2
  %12341 = zext i1 %12340 to i8
  store i8 %12341, i8* %39, align 1
  %12342 = load i64, i64* %RBP.i, align 8
  %12343 = add i64 %12342, -32
  %12344 = add i64 %12214, 34
  store i64 %12344, i64* %3, align 8
  %12345 = inttoptr i64 %12343 to i32*
  %12346 = load i32, i32* %12345, align 4
  %12347 = zext i32 %12346 to i64
  store i64 %12347, i64* %RAX.i1862, align 8
  %12348 = add i64 %12342, -16
  %12349 = add i64 %12214, 37
  store i64 %12349, i64* %3, align 8
  %12350 = inttoptr i64 %12348 to i32*
  %12351 = load i32, i32* %12350, align 4
  %12352 = add i32 %12351, %12346
  %12353 = zext i32 %12352 to i64
  store i64 %12353, i64* %RAX.i1862, align 8
  %12354 = icmp ult i32 %12352, %12346
  %12355 = icmp ult i32 %12352, %12351
  %12356 = or i1 %12354, %12355
  %12357 = zext i1 %12356 to i8
  store i8 %12357, i8* %14, align 1
  %12358 = and i32 %12352, 255
  %12359 = tail call i32 @llvm.ctpop.i32(i32 %12358)
  %12360 = trunc i32 %12359 to i8
  %12361 = and i8 %12360, 1
  %12362 = xor i8 %12361, 1
  store i8 %12362, i8* %21, align 1
  %12363 = xor i32 %12351, %12346
  %12364 = xor i32 %12363, %12352
  %12365 = lshr i32 %12364, 4
  %12366 = trunc i32 %12365 to i8
  %12367 = and i8 %12366, 1
  store i8 %12367, i8* %27, align 1
  %12368 = icmp eq i32 %12352, 0
  %12369 = zext i1 %12368 to i8
  store i8 %12369, i8* %30, align 1
  %12370 = lshr i32 %12352, 31
  %12371 = trunc i32 %12370 to i8
  store i8 %12371, i8* %33, align 1
  %12372 = lshr i32 %12346, 31
  %12373 = lshr i32 %12351, 31
  %12374 = xor i32 %12370, %12372
  %12375 = xor i32 %12370, %12373
  %12376 = add nuw nsw i32 %12374, %12375
  %12377 = icmp eq i32 %12376, 2
  %12378 = zext i1 %12377 to i8
  store i8 %12378, i8* %39, align 1
  %12379 = sext i32 %12352 to i64
  store i64 %12379, i64* %R9.i3079, align 8
  %12380 = load i64, i64* %RSI.i2426, align 8
  %12381 = shl nsw i64 %12379, 2
  %12382 = add i64 %12315, %12381
  %12383 = add i64 %12214, 44
  store i64 %12383, i64* %3, align 8
  %12384 = trunc i64 %12380 to i32
  %12385 = inttoptr i64 %12382 to i32*
  %12386 = load i32, i32* %12385, align 4
  %12387 = sub i32 %12384, %12386
  %12388 = zext i32 %12387 to i64
  store i64 %12388, i64* %RSI.i2426, align 8
  %12389 = icmp ult i32 %12384, %12386
  %12390 = zext i1 %12389 to i8
  store i8 %12390, i8* %14, align 1
  %12391 = and i32 %12387, 255
  %12392 = tail call i32 @llvm.ctpop.i32(i32 %12391)
  %12393 = trunc i32 %12392 to i8
  %12394 = and i8 %12393, 1
  %12395 = xor i8 %12394, 1
  store i8 %12395, i8* %21, align 1
  %12396 = xor i32 %12386, %12384
  %12397 = xor i32 %12396, %12387
  %12398 = lshr i32 %12397, 4
  %12399 = trunc i32 %12398 to i8
  %12400 = and i8 %12399, 1
  store i8 %12400, i8* %27, align 1
  %12401 = icmp eq i32 %12387, 0
  %12402 = zext i1 %12401 to i8
  store i8 %12402, i8* %30, align 1
  %12403 = lshr i32 %12387, 31
  %12404 = trunc i32 %12403 to i8
  store i8 %12404, i8* %33, align 1
  %12405 = lshr i32 %12384, 31
  %12406 = lshr i32 %12386, 31
  %12407 = xor i32 %12406, %12405
  %12408 = xor i32 %12403, %12405
  %12409 = add nuw nsw i32 %12408, %12407
  %12410 = icmp eq i32 %12409, 2
  %12411 = zext i1 %12410 to i8
  store i8 %12411, i8* %39, align 1
  %12412 = sitofp i32 %12387 to double
  store double %12412, double* %45, align 1
  %12413 = add i64 %12342, -544
  %12414 = add i64 %12214, 56
  store i64 %12414, i64* %3, align 8
  %12415 = inttoptr i64 %12413 to double*
  store double %12412, double* %12415, align 8
  %12416 = load i64, i64* %RBP.i, align 8
  %12417 = add i64 %12416, -520
  %12418 = load i64, i64* %3, align 8
  %12419 = add i64 %12418, 6
  store i64 %12419, i64* %3, align 8
  %12420 = inttoptr i64 %12417 to i32*
  %12421 = load i32, i32* %12420, align 4
  %12422 = zext i32 %12421 to i64
  store i64 %12422, i64* %RDI.i3890, align 8
  %12423 = add i64 %12416, -68
  %12424 = add i64 %12418, 9
  store i64 %12424, i64* %3, align 8
  %12425 = inttoptr i64 %12423 to i32*
  %12426 = load i32, i32* %12425, align 4
  %12427 = zext i32 %12426 to i64
  store i64 %12427, i64* %RSI.i2426, align 8
  %12428 = add i64 %12416, -728
  %12429 = add i64 %12418, 16
  store i64 %12429, i64* %3, align 8
  %12430 = inttoptr i64 %12428 to i64*
  %12431 = load i64, i64* %12430, align 8
  store i64 %12431, i64* %RCX.i2028, align 8
  %12432 = add i64 %12418, 647814
  %12433 = add i64 %12418, 21
  %12434 = load i64, i64* %6, align 8
  %12435 = add i64 %12434, -8
  %12436 = inttoptr i64 %12435 to i64*
  store i64 %12433, i64* %12436, align 8
  store i64 %12435, i64* %6, align 8
  store i64 %12432, i64* %3, align 8
  %call2_40ebfa = tail call %struct.Memory* @sub_4ace70.levrun_linfo_inter(%struct.State* nonnull %0, i64 %12432, %struct.Memory* %call2_40eb41)
  %12437 = load i64, i64* %RBP.i, align 8
  %12438 = add i64 %12437, -544
  %12439 = load i64, i64* %3, align 8
  %12440 = add i64 %12439, 8
  store i64 %12440, i64* %3, align 8
  %12441 = inttoptr i64 %12438 to i64*
  %12442 = load i64, i64* %12441, align 8
  store i64 %12442, i64* %46, align 1
  store double 0.000000e+00, double* %48, align 1
  %12443 = add i64 %12439, 16
  store i64 %12443, i64* %3, align 8
  %12444 = bitcast i64 %12442 to double
  %12445 = inttoptr i64 %12438 to double*
  %12446 = load double, double* %12445, align 8
  %12447 = fmul double %12444, %12446
  store double %12447, double* %45, align 1
  store i64 0, i64* %47, align 1
  %12448 = add i64 %12437, -552
  %12449 = add i64 %12439, 24
  store i64 %12449, i64* %3, align 8
  %12450 = inttoptr i64 %12448 to i64*
  %12451 = load i64, i64* %12450, align 8
  store i64 %12451, i64* %56, align 1
  store double 0.000000e+00, double* %58, align 1
  %12452 = add i64 %12437, -524
  %12453 = add i64 %12439, 32
  store i64 %12453, i64* %3, align 8
  %12454 = inttoptr i64 %12452 to i32*
  %12455 = load i32, i32* %12454, align 4
  %12456 = sitofp i32 %12455 to double
  store double %12456, double* %243, align 1
  %12457 = bitcast i64 %12451 to double
  %12458 = fmul double %12456, %12457
  store double %12458, double* %55, align 1
  store i64 0, i64* %57, align 1
  %12459 = fadd double %12458, %12447
  store double %12459, double* %45, align 1
  store i64 0, i64* %47, align 1
  %12460 = add i64 %12439, 48
  store i64 %12460, i64* %3, align 8
  %12461 = inttoptr i64 %12438 to double*
  store double %12459, double* %12461, align 8
  %12462 = load i64, i64* %RBP.i, align 8
  %12463 = add i64 %12462, -536
  %12464 = load i64, i64* %3, align 8
  %12465 = add i64 %12464, 8
  store i64 %12465, i64* %3, align 8
  %12466 = inttoptr i64 %12463 to i64*
  %12467 = load i64, i64* %12466, align 8
  store i64 %12467, i64* %46, align 1
  store double 0.000000e+00, double* %48, align 1
  %12468 = add i64 %12462, -544
  %12469 = add i64 %12464, 16
  store i64 %12469, i64* %3, align 8
  %12470 = bitcast i64 %12467 to double
  %12471 = inttoptr i64 %12468 to double*
  %12472 = load double, double* %12471, align 8
  %12473 = fcmp uno double %12470, %12472
  br i1 %12473, label %12474, label %12484

; <label>:12474:                                  ; preds = %routine_shll__cl___eax.exit1424
  %12475 = fadd double %12470, %12472
  %12476 = bitcast double %12475 to i64
  %12477 = and i64 %12476, 9221120237041090560
  %12478 = icmp eq i64 %12477, 9218868437227405312
  %12479 = and i64 %12476, 2251799813685247
  %12480 = icmp ne i64 %12479, 0
  %12481 = and i1 %12478, %12480
  br i1 %12481, label %12482, label %12490

; <label>:12482:                                  ; preds = %12474
  %12483 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12469, %struct.Memory* %call2_40ebfa)
  %.pre306 = load i64, i64* %3, align 8
  br label %routine_ucomisd_MINUS0x220__rbp____xmm0.exit

; <label>:12484:                                  ; preds = %routine_shll__cl___eax.exit1424
  %12485 = fcmp ogt double %12470, %12472
  br i1 %12485, label %12490, label %12486

; <label>:12486:                                  ; preds = %12484
  %12487 = fcmp olt double %12470, %12472
  br i1 %12487, label %12490, label %12488

; <label>:12488:                                  ; preds = %12486
  %12489 = fcmp oeq double %12470, %12472
  br i1 %12489, label %12490, label %12494

; <label>:12490:                                  ; preds = %12488, %12486, %12484, %12474
  %12491 = phi i8 [ 0, %12484 ], [ 0, %12486 ], [ 1, %12488 ], [ 1, %12474 ]
  %12492 = phi i8 [ 0, %12484 ], [ 0, %12486 ], [ 0, %12488 ], [ 1, %12474 ]
  %12493 = phi i8 [ 0, %12484 ], [ 1, %12486 ], [ 0, %12488 ], [ 1, %12474 ]
  store i8 %12491, i8* %30, align 1
  store i8 %12492, i8* %21, align 1
  store i8 %12493, i8* %14, align 1
  br label %12494

; <label>:12494:                                  ; preds = %12490, %12488
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd_MINUS0x220__rbp____xmm0.exit

routine_ucomisd_MINUS0x220__rbp____xmm0.exit:     ; preds = %12494, %12482
  %12495 = phi i64 [ %.pre306, %12482 ], [ %12469, %12494 ]
  %12496 = phi %struct.Memory* [ %12483, %12482 ], [ %call2_40ebfa, %12494 ]
  %12497 = add i64 %12495, 97
  %12498 = add i64 %12495, 6
  %12499 = load i8, i8* %30, align 1
  %12500 = icmp eq i8 %12499, 0
  %12501 = select i1 %12500, i64 %12497, i64 %12498
  store i64 %12501, i64* %3, align 8
  br i1 %12500, label %block_.L_40eca0, label %block_40ec45

block_40ec45:                                     ; preds = %routine_ucomisd_MINUS0x220__rbp____xmm0.exit
  %12502 = load i8, i8* %21, align 1
  %12503 = icmp ne i8 %12502, 0
  %.v481 = select i1 %12503, i64 91, i64 6
  %12504 = add i64 %12501, %.v481
  store i64 %12504, i64* %3, align 8
  %cmpBr_40ec45 = icmp eq i8 %12502, 1
  br i1 %cmpBr_40ec45, label %block_.L_40eca0, label %block_40ec4b

block_40ec4b:                                     ; preds = %block_40ec45
  %12505 = load i64, i64* %RBP.i, align 8
  %12506 = add i64 %12505, -516
  %12507 = add i64 %12504, 6
  store i64 %12507, i64* %3, align 8
  %12508 = inttoptr i64 %12506 to i32*
  %12509 = load i32, i32* %12508, align 4
  %12510 = zext i32 %12509 to i64
  store i64 %12510, i64* %RDI.i3890, align 8
  %12511 = add i64 %12504, -56395
  %12512 = add i64 %12504, 11
  %12513 = load i64, i64* %6, align 8
  %12514 = add i64 %12513, -8
  %12515 = inttoptr i64 %12514 to i64*
  store i64 %12512, i64* %12515, align 8
  store i64 %12514, i64* %6, align 8
  store i64 %12511, i64* %3, align 8
  %12516 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %12496)
  %12517 = load i64, i64* %RBP.i, align 8
  %12518 = add i64 %12517, -520
  %12519 = load i64, i64* %3, align 8
  %12520 = add i64 %12519, 6
  store i64 %12520, i64* %3, align 8
  %12521 = inttoptr i64 %12518 to i32*
  %12522 = load i32, i32* %12521, align 4
  %12523 = zext i32 %12522 to i64
  store i64 %12523, i64* %RDI.i3890, align 8
  %12524 = add i64 %12517, -732
  %12525 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %12526 = add i64 %12519, 12
  store i64 %12526, i64* %3, align 8
  %12527 = inttoptr i64 %12524 to i32*
  store i32 %12525, i32* %12527, align 4
  %12528 = load i64, i64* %3, align 8
  %12529 = add i64 %12528, -56418
  %12530 = add i64 %12528, 5
  %12531 = load i64, i64* %6, align 8
  %12532 = add i64 %12531, -8
  %12533 = inttoptr i64 %12532 to i64*
  store i64 %12530, i64* %12533, align 8
  store i64 %12532, i64* %6, align 8
  store i64 %12529, i64* %3, align 8
  %12534 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %12516)
  %12535 = load i64, i64* %RBP.i, align 8
  %12536 = add i64 %12535, -732
  %12537 = load i64, i64* %3, align 8
  %12538 = add i64 %12537, 6
  store i64 %12538, i64* %3, align 8
  %12539 = inttoptr i64 %12536 to i32*
  %12540 = load i32, i32* %12539, align 4
  %12541 = zext i32 %12540 to i64
  store i64 %12541, i64* %RDI.i3890, align 8
  %12542 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %12543 = sub i32 %12540, %12542
  %12544 = icmp ult i32 %12540, %12542
  %12545 = zext i1 %12544 to i8
  store i8 %12545, i8* %14, align 1
  %12546 = and i32 %12543, 255
  %12547 = tail call i32 @llvm.ctpop.i32(i32 %12546)
  %12548 = trunc i32 %12547 to i8
  %12549 = and i8 %12548, 1
  %12550 = xor i8 %12549, 1
  store i8 %12550, i8* %21, align 1
  %12551 = xor i32 %12542, %12540
  %12552 = xor i32 %12551, %12543
  %12553 = lshr i32 %12552, 4
  %12554 = trunc i32 %12553 to i8
  %12555 = and i8 %12554, 1
  store i8 %12555, i8* %27, align 1
  %12556 = icmp eq i32 %12543, 0
  %12557 = zext i1 %12556 to i8
  store i8 %12557, i8* %30, align 1
  %12558 = lshr i32 %12543, 31
  %12559 = trunc i32 %12558 to i8
  store i8 %12559, i8* %33, align 1
  %12560 = lshr i32 %12540, 31
  %12561 = lshr i32 %12542, 31
  %12562 = xor i32 %12561, %12560
  %12563 = xor i32 %12558, %12560
  %12564 = add nuw nsw i32 %12563, %12562
  %12565 = icmp eq i32 %12564, 2
  %12566 = zext i1 %12565 to i8
  store i8 %12566, i8* %39, align 1
  %12567 = icmp ne i8 %12559, 0
  %12568 = xor i1 %12567, %12565
  %.v398 = select i1 %12568, i64 14, i64 31
  %12569 = add i64 %12537, %.v398
  store i64 %12569, i64* %3, align 8
  br i1 %12568, label %block_40ec75, label %block_.L_40ec86

block_40ec75:                                     ; preds = %block_40ec4b
  %12570 = add i64 %12535, -516
  %12571 = add i64 %12569, 6
  store i64 %12571, i64* %3, align 8
  %12572 = inttoptr i64 %12570 to i32*
  %12573 = load i32, i32* %12572, align 4
  %12574 = zext i32 %12573 to i64
  store i64 %12574, i64* %RAX.i1862, align 8
  %12575 = add i64 %12535, -736
  %12576 = add i64 %12569, 12
  store i64 %12576, i64* %3, align 8
  %12577 = inttoptr i64 %12575 to i32*
  store i32 %12573, i32* %12577, align 4
  %12578 = load i64, i64* %3, align 8
  %12579 = add i64 %12578, 17
  store i64 %12579, i64* %3, align 8
  br label %block_.L_40ec92

block_.L_40ec86:                                  ; preds = %block_40ec4b
  %12580 = add i64 %12535, -520
  %12581 = add i64 %12569, 6
  store i64 %12581, i64* %3, align 8
  %12582 = inttoptr i64 %12580 to i32*
  %12583 = load i32, i32* %12582, align 4
  %12584 = zext i32 %12583 to i64
  store i64 %12584, i64* %RAX.i1862, align 8
  %12585 = add i64 %12535, -736
  %12586 = add i64 %12569, 12
  store i64 %12586, i64* %3, align 8
  %12587 = inttoptr i64 %12585 to i32*
  store i32 %12583, i32* %12587, align 4
  %.pre307 = load i64, i64* %3, align 8
  br label %block_.L_40ec92

block_.L_40ec92:                                  ; preds = %block_.L_40ec86, %block_40ec75
  %12588 = phi i64 [ %.pre307, %block_.L_40ec86 ], [ %12579, %block_40ec75 ]
  %12589 = load i64, i64* %RBP.i, align 8
  %12590 = add i64 %12589, -736
  %12591 = add i64 %12588, 6
  store i64 %12591, i64* %3, align 8
  %12592 = inttoptr i64 %12590 to i32*
  %12593 = load i32, i32* %12592, align 4
  %12594 = zext i32 %12593 to i64
  store i64 %12594, i64* %RAX.i1862, align 8
  %12595 = add i64 %12589, -60
  %12596 = add i64 %12588, 9
  store i64 %12596, i64* %3, align 8
  %12597 = inttoptr i64 %12595 to i32*
  store i32 %12593, i32* %12597, align 4
  %12598 = load i64, i64* %3, align 8
  %12599 = add i64 %12598, 59
  br label %block_.L_40ecd6

block_.L_40eca0:                                  ; preds = %block_40ec45, %routine_ucomisd_MINUS0x220__rbp____xmm0.exit
  %12600 = phi i64 [ %12504, %block_40ec45 ], [ %12497, %routine_ucomisd_MINUS0x220__rbp____xmm0.exit ]
  %12601 = load i64, i64* %RBP.i, align 8
  %12602 = add i64 %12601, -536
  %12603 = add i64 %12600, 8
  store i64 %12603, i64* %3, align 8
  %12604 = inttoptr i64 %12602 to i64*
  %12605 = load i64, i64* %12604, align 8
  store i64 %12605, i64* %46, align 1
  store double 0.000000e+00, double* %48, align 1
  %12606 = add i64 %12601, -544
  %12607 = add i64 %12600, 16
  store i64 %12607, i64* %3, align 8
  %12608 = inttoptr i64 %12606 to i64*
  %12609 = load i64, i64* %12608, align 8
  store i64 %12609, i64* %56, align 1
  store double 0.000000e+00, double* %58, align 1
  %12610 = add i64 %12600, 20
  store i64 %12610, i64* %3, align 8
  %.cast172 = bitcast i64 %12609 to double
  %12611 = bitcast i64 %12605 to double
  %12612 = fcmp uno double %.cast172, %12611
  br i1 %12612, label %12613, label %12623

; <label>:12613:                                  ; preds = %block_.L_40eca0
  %12614 = fadd double %.cast172, %12611
  %12615 = bitcast double %12614 to i64
  %12616 = and i64 %12615, 9221120237041090560
  %12617 = icmp eq i64 %12616, 9218868437227405312
  %12618 = and i64 %12615, 2251799813685247
  %12619 = icmp ne i64 %12618, 0
  %12620 = and i1 %12617, %12619
  br i1 %12620, label %12621, label %12629

; <label>:12621:                                  ; preds = %12613
  %12622 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12610, %struct.Memory* %12496)
  %.pre308 = load i64, i64* %3, align 8
  %.pre309 = load i8, i8* %30, align 1
  %.pre310 = load i64, i64* %RBP.i, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit

; <label>:12623:                                  ; preds = %block_.L_40eca0
  %12624 = fcmp ogt double %.cast172, %12611
  br i1 %12624, label %12629, label %12625

; <label>:12625:                                  ; preds = %12623
  %12626 = fcmp olt double %.cast172, %12611
  br i1 %12626, label %12629, label %12627

; <label>:12627:                                  ; preds = %12625
  %12628 = fcmp oeq double %.cast172, %12611
  br i1 %12628, label %12629, label %12633

; <label>:12629:                                  ; preds = %12627, %12625, %12623, %12613
  %12630 = phi i8 [ 0, %12623 ], [ 0, %12625 ], [ 1, %12627 ], [ 1, %12613 ]
  %12631 = phi i8 [ 0, %12623 ], [ 0, %12625 ], [ 0, %12627 ], [ 1, %12613 ]
  %12632 = phi i8 [ 0, %12623 ], [ 1, %12625 ], [ 0, %12627 ], [ 1, %12613 ]
  store i8 %12630, i8* %30, align 1
  store i8 %12631, i8* %21, align 1
  store i8 %12632, i8* %14, align 1
  br label %12633

; <label>:12633:                                  ; preds = %12629, %12627
  %12634 = phi i8 [ %12630, %12629 ], [ %12499, %12627 ]
  store i8 0, i8* %39, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %27, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit

routine_ucomisd__xmm0___xmm1.exit:                ; preds = %12633, %12621
  %12635 = phi i64 [ %.pre310, %12621 ], [ %12601, %12633 ]
  %12636 = phi i8 [ %.pre309, %12621 ], [ %12634, %12633 ]
  %12637 = phi i64 [ %.pre308, %12621 ], [ %12610, %12633 ]
  %12638 = phi %struct.Memory* [ %12622, %12621 ], [ %12496, %12633 ]
  %12639 = load i8, i8* %14, align 1
  %12640 = or i8 %12636, %12639
  %12641 = icmp ne i8 %12640, 0
  %.v482 = select i1 %12641, i64 20, i64 6
  %12642 = add i64 %12637, %.v482
  store i64 %12642, i64* %3, align 8
  br i1 %12641, label %block_.L_40ecc8, label %block_40ecba

block_40ecba:                                     ; preds = %routine_ucomisd__xmm0___xmm1.exit
  %12643 = add i64 %12635, -516
  %12644 = add i64 %12642, 6
  store i64 %12644, i64* %3, align 8
  %12645 = inttoptr i64 %12643 to i32*
  %12646 = load i32, i32* %12645, align 4
  %12647 = zext i32 %12646 to i64
  store i64 %12647, i64* %RAX.i1862, align 8
  %12648 = add i64 %12635, -60
  %12649 = add i64 %12642, 9
  store i64 %12649, i64* %3, align 8
  %12650 = inttoptr i64 %12648 to i32*
  store i32 %12646, i32* %12650, align 4
  %12651 = load i64, i64* %3, align 8
  %12652 = add i64 %12651, 14
  store i64 %12652, i64* %3, align 8
  br label %block_.L_40ecd1

block_.L_40ecc8:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit
  %12653 = add i64 %12635, -520
  %12654 = add i64 %12642, 6
  store i64 %12654, i64* %3, align 8
  %12655 = inttoptr i64 %12653 to i32*
  %12656 = load i32, i32* %12655, align 4
  %12657 = zext i32 %12656 to i64
  store i64 %12657, i64* %RAX.i1862, align 8
  %12658 = add i64 %12635, -60
  %12659 = add i64 %12642, 9
  store i64 %12659, i64* %3, align 8
  %12660 = inttoptr i64 %12658 to i32*
  store i32 %12656, i32* %12660, align 4
  %.pre311 = load i64, i64* %3, align 8
  br label %block_.L_40ecd1

block_.L_40ecd1:                                  ; preds = %block_.L_40ecc8, %block_40ecba
  %12661 = phi i64 [ %.pre311, %block_.L_40ecc8 ], [ %12652, %block_40ecba ]
  %12662 = add i64 %12661, 5
  store i64 %12662, i64* %3, align 8
  br label %block_.L_40ecd6

block_.L_40ecd6:                                  ; preds = %block_.L_40ecd1, %block_.L_40ec92
  %storemerge159 = phi i64 [ %12599, %block_.L_40ec92 ], [ %12662, %block_.L_40ecd1 ]
  %MEMORY.46 = phi %struct.Memory* [ %12534, %block_.L_40ec92 ], [ %12638, %block_.L_40ecd1 ]
  %12663 = load i64, i64* %RBP.i, align 8
  %12664 = add i64 %12663, -60
  %12665 = add i64 %storemerge159, 3
  store i64 %12665, i64* %3, align 8
  %12666 = inttoptr i64 %12664 to i32*
  %12667 = load i32, i32* %12666, align 4
  %12668 = zext i32 %12667 to i64
  store i64 %12668, i64* %RAX.i1862, align 8
  %12669 = add i64 %12663, -516
  %12670 = add i64 %storemerge159, 9
  store i64 %12670, i64* %3, align 8
  %12671 = inttoptr i64 %12669 to i32*
  %12672 = load i32, i32* %12671, align 4
  %12673 = sub i32 %12667, %12672
  %12674 = icmp ult i32 %12667, %12672
  %12675 = zext i1 %12674 to i8
  store i8 %12675, i8* %14, align 1
  %12676 = and i32 %12673, 255
  %12677 = tail call i32 @llvm.ctpop.i32(i32 %12676)
  %12678 = trunc i32 %12677 to i8
  %12679 = and i8 %12678, 1
  %12680 = xor i8 %12679, 1
  store i8 %12680, i8* %21, align 1
  %12681 = xor i32 %12672, %12667
  %12682 = xor i32 %12681, %12673
  %12683 = lshr i32 %12682, 4
  %12684 = trunc i32 %12683 to i8
  %12685 = and i8 %12684, 1
  store i8 %12685, i8* %27, align 1
  %12686 = icmp eq i32 %12673, 0
  %12687 = zext i1 %12686 to i8
  store i8 %12687, i8* %30, align 1
  %12688 = lshr i32 %12673, 31
  %12689 = trunc i32 %12688 to i8
  store i8 %12689, i8* %33, align 1
  %12690 = lshr i32 %12667, 31
  %12691 = lshr i32 %12672, 31
  %12692 = xor i32 %12691, %12690
  %12693 = xor i32 %12688, %12690
  %12694 = add nuw nsw i32 %12693, %12692
  %12695 = icmp eq i32 %12694, 2
  %12696 = zext i1 %12695 to i8
  store i8 %12696, i8* %39, align 1
  %.v399 = select i1 %12686, i64 15, i64 32
  %12697 = add i64 %storemerge159, %.v399
  store i64 %12697, i64* %3, align 8
  br i1 %12686, label %block_40ece5, label %block_.L_40ecf6

block_40ece5:                                     ; preds = %block_.L_40ecd6
  %12698 = add i64 %12663, -508
  %12699 = add i64 %12697, 6
  store i64 %12699, i64* %3, align 8
  %12700 = inttoptr i64 %12698 to i32*
  %12701 = load i32, i32* %12700, align 4
  %12702 = zext i32 %12701 to i64
  store i64 %12702, i64* %RAX.i1862, align 8
  %12703 = add i64 %12663, -740
  %12704 = add i64 %12697, 12
  store i64 %12704, i64* %3, align 8
  %12705 = inttoptr i64 %12703 to i32*
  store i32 %12701, i32* %12705, align 4
  %12706 = load i64, i64* %3, align 8
  %12707 = add i64 %12706, 17
  store i64 %12707, i64* %3, align 8
  br label %block_.L_40ed02

block_.L_40ecf6:                                  ; preds = %block_.L_40ecd6
  %12708 = add i64 %12663, -512
  %12709 = add i64 %12697, 6
  store i64 %12709, i64* %3, align 8
  %12710 = inttoptr i64 %12708 to i32*
  %12711 = load i32, i32* %12710, align 4
  %12712 = zext i32 %12711 to i64
  store i64 %12712, i64* %RAX.i1862, align 8
  %12713 = add i64 %12663, -740
  %12714 = add i64 %12697, 12
  store i64 %12714, i64* %3, align 8
  %12715 = inttoptr i64 %12713 to i32*
  store i32 %12711, i32* %12715, align 4
  %.pre312 = load i64, i64* %3, align 8
  br label %block_.L_40ed02

block_.L_40ed02:                                  ; preds = %block_.L_40ecf6, %block_40ece5
  %12716 = phi i64 [ %.pre312, %block_.L_40ecf6 ], [ %12707, %block_40ece5 ]
  %12717 = load i64, i64* %RBP.i, align 8
  %12718 = add i64 %12717, -740
  %12719 = add i64 %12716, 6
  store i64 %12719, i64* %3, align 8
  %12720 = inttoptr i64 %12718 to i32*
  %12721 = load i32, i32* %12720, align 4
  %12722 = zext i32 %12721 to i64
  store i64 %12722, i64* %RAX.i1862, align 8
  %12723 = add i64 %12717, -56
  %12724 = add i64 %12716, 9
  store i64 %12724, i64* %3, align 8
  %12725 = inttoptr i64 %12723 to i32*
  store i32 %12721, i32* %12725, align 4
  %12726 = load i64, i64* %3, align 8
  %12727 = add i64 %12726, 153
  br label %block_.L_40eda4

block_.L_40ed10:                                  ; preds = %block_40e9cd, %block_40e9c0, %routine_sarl__cl___eax.exit1720
  %12728 = phi i64 [ %11361, %block_40e9cd ], [ %11349, %block_40e9c0 ], [ %11337, %routine_sarl__cl___eax.exit1720 ]
  %12729 = add i64 %12728, 6
  store i64 %12729, i64* %3, align 8
  %12730 = load i32, i32* %11306, align 4
  %12731 = zext i32 %12730 to i64
  store i64 %12731, i64* %RAX.i1862, align 8
  %12732 = add i64 %12728, 12
  store i64 %12732, i64* %3, align 8
  %12733 = load i32, i32* %11311, align 4
  %12734 = sub i32 %12730, %12733
  %12735 = icmp ult i32 %12730, %12733
  %12736 = zext i1 %12735 to i8
  store i8 %12736, i8* %14, align 1
  %12737 = and i32 %12734, 255
  %12738 = tail call i32 @llvm.ctpop.i32(i32 %12737)
  %12739 = trunc i32 %12738 to i8
  %12740 = and i8 %12739, 1
  %12741 = xor i8 %12740, 1
  store i8 %12741, i8* %21, align 1
  %12742 = xor i32 %12733, %12730
  %12743 = xor i32 %12742, %12734
  %12744 = lshr i32 %12743, 4
  %12745 = trunc i32 %12744 to i8
  %12746 = and i8 %12745, 1
  store i8 %12746, i8* %27, align 1
  %12747 = icmp eq i32 %12734, 0
  %12748 = zext i1 %12747 to i8
  store i8 %12748, i8* %30, align 1
  %12749 = lshr i32 %12734, 31
  %12750 = trunc i32 %12749 to i8
  store i8 %12750, i8* %33, align 1
  %12751 = lshr i32 %12730, 31
  %12752 = lshr i32 %12733, 31
  %12753 = xor i32 %12752, %12751
  %12754 = xor i32 %12749, %12751
  %12755 = add nuw nsw i32 %12754, %12753
  %12756 = icmp eq i32 %12755, 2
  %12757 = zext i1 %12756 to i8
  store i8 %12757, i8* %39, align 1
  %.v402 = select i1 %12747, i64 18, i64 41
  %12758 = add i64 %12728, %.v402
  store i64 %12758, i64* %3, align 8
  br i1 %12747, label %block_40ed22, label %block_.L_40ed39

block_40ed22:                                     ; preds = %block_.L_40ed10
  %12759 = add i64 %12758, 6
  store i64 %12759, i64* %3, align 8
  %12760 = load i32, i32* %11306, align 4
  %12761 = zext i32 %12760 to i64
  store i64 %12761, i64* %RAX.i1862, align 8
  %12762 = add i64 %11302, -60
  %12763 = add i64 %12758, 9
  store i64 %12763, i64* %3, align 8
  %12764 = inttoptr i64 %12762 to i32*
  store i32 %12760, i32* %12764, align 4
  %12765 = load i64, i64* %RBP.i, align 8
  %12766 = add i64 %12765, -508
  %12767 = load i64, i64* %3, align 8
  %12768 = add i64 %12767, 6
  store i64 %12768, i64* %3, align 8
  %12769 = inttoptr i64 %12766 to i32*
  %12770 = load i32, i32* %12769, align 4
  %12771 = zext i32 %12770 to i64
  store i64 %12771, i64* %RAX.i1862, align 8
  %12772 = add i64 %12765, -56
  %12773 = add i64 %12767, 9
  store i64 %12773, i64* %3, align 8
  %12774 = inttoptr i64 %12772 to i32*
  store i32 %12770, i32* %12774, align 4
  %12775 = load i64, i64* %3, align 8
  %12776 = add i64 %12775, 107
  store i64 %12776, i64* %3, align 8
  br label %block_.L_40ed9f

block_.L_40ed39:                                  ; preds = %block_.L_40ed10
  %12777 = add i64 %12758, 7
  store i64 %12777, i64* %3, align 8
  %12778 = load i32, i32* %11306, align 4
  store i8 0, i8* %14, align 1
  %12779 = and i32 %12778, 255
  %12780 = tail call i32 @llvm.ctpop.i32(i32 %12779)
  %12781 = trunc i32 %12780 to i8
  %12782 = and i8 %12781, 1
  %12783 = xor i8 %12782, 1
  store i8 %12783, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %12784 = icmp eq i32 %12778, 0
  %12785 = zext i1 %12784 to i8
  store i8 %12785, i8* %30, align 1
  %12786 = lshr i32 %12778, 31
  %12787 = trunc i32 %12786 to i8
  store i8 %12787, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v403 = select i1 %12784, i64 13, i64 30
  %12788 = add i64 %12758, %.v403
  %12789 = add i64 %12788, 6
  store i64 %12789, i64* %3, align 8
  br i1 %12784, label %block_40ed46, label %block_.L_40ed57

block_40ed46:                                     ; preds = %block_.L_40ed39
  %12790 = load i32, i32* %11306, align 4
  %12791 = zext i32 %12790 to i64
  store i64 %12791, i64* %RAX.i1862, align 8
  %12792 = add i64 %11302, -744
  %12793 = add i64 %12788, 12
  store i64 %12793, i64* %3, align 8
  %12794 = inttoptr i64 %12792 to i32*
  store i32 %12790, i32* %12794, align 4
  %12795 = load i64, i64* %3, align 8
  %12796 = add i64 %12795, 17
  store i64 %12796, i64* %3, align 8
  br label %block_.L_40ed63

block_.L_40ed57:                                  ; preds = %block_.L_40ed39
  %12797 = load i32, i32* %11311, align 4
  %12798 = zext i32 %12797 to i64
  store i64 %12798, i64* %RAX.i1862, align 8
  %12799 = add i64 %11302, -744
  %12800 = add i64 %12788, 12
  store i64 %12800, i64* %3, align 8
  %12801 = inttoptr i64 %12799 to i32*
  store i32 %12797, i32* %12801, align 4
  %.pre313 = load i64, i64* %3, align 8
  br label %block_.L_40ed63

block_.L_40ed63:                                  ; preds = %block_.L_40ed57, %block_40ed46
  %12802 = phi i64 [ %.pre313, %block_.L_40ed57 ], [ %12796, %block_40ed46 ]
  %12803 = load i64, i64* %RBP.i, align 8
  %12804 = add i64 %12803, -744
  %12805 = add i64 %12802, 6
  store i64 %12805, i64* %3, align 8
  %12806 = inttoptr i64 %12804 to i32*
  %12807 = load i32, i32* %12806, align 4
  %12808 = zext i32 %12807 to i64
  store i64 %12808, i64* %RAX.i1862, align 8
  %12809 = add i64 %12803, -60
  %12810 = add i64 %12802, 9
  store i64 %12810, i64* %3, align 8
  %12811 = inttoptr i64 %12809 to i32*
  store i32 %12807, i32* %12811, align 4
  %12812 = load i64, i64* %RBP.i, align 8
  %12813 = add i64 %12812, -516
  %12814 = load i64, i64* %3, align 8
  %12815 = add i64 %12814, 7
  store i64 %12815, i64* %3, align 8
  %12816 = inttoptr i64 %12813 to i32*
  %12817 = load i32, i32* %12816, align 4
  store i8 0, i8* %14, align 1
  %12818 = and i32 %12817, 255
  %12819 = tail call i32 @llvm.ctpop.i32(i32 %12818)
  %12820 = trunc i32 %12819 to i8
  %12821 = and i8 %12820, 1
  %12822 = xor i8 %12821, 1
  store i8 %12822, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %12823 = icmp eq i32 %12817, 0
  %12824 = zext i1 %12823 to i8
  store i8 %12824, i8* %30, align 1
  %12825 = lshr i32 %12817, 31
  %12826 = trunc i32 %12825 to i8
  store i8 %12826, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v404 = select i1 %12823, i64 13, i64 30
  %12827 = add i64 %12814, %.v404
  store i64 %12827, i64* %3, align 8
  br i1 %12823, label %block_40ed79, label %block_.L_40ed8a

block_40ed79:                                     ; preds = %block_.L_40ed63
  %12828 = add i64 %12812, -508
  %12829 = add i64 %12827, 6
  store i64 %12829, i64* %3, align 8
  %12830 = inttoptr i64 %12828 to i32*
  %12831 = load i32, i32* %12830, align 4
  %12832 = zext i32 %12831 to i64
  store i64 %12832, i64* %RAX.i1862, align 8
  %12833 = add i64 %12812, -748
  %12834 = add i64 %12827, 12
  store i64 %12834, i64* %3, align 8
  %12835 = inttoptr i64 %12833 to i32*
  store i32 %12831, i32* %12835, align 4
  %12836 = load i64, i64* %3, align 8
  %12837 = add i64 %12836, 17
  store i64 %12837, i64* %3, align 8
  br label %block_.L_40ed96

block_.L_40ed8a:                                  ; preds = %block_.L_40ed63
  %12838 = add i64 %12812, -512
  %12839 = add i64 %12827, 6
  store i64 %12839, i64* %3, align 8
  %12840 = inttoptr i64 %12838 to i32*
  %12841 = load i32, i32* %12840, align 4
  %12842 = zext i32 %12841 to i64
  store i64 %12842, i64* %RAX.i1862, align 8
  %12843 = add i64 %12812, -748
  %12844 = add i64 %12827, 12
  store i64 %12844, i64* %3, align 8
  %12845 = inttoptr i64 %12843 to i32*
  store i32 %12841, i32* %12845, align 4
  %.pre314 = load i64, i64* %3, align 8
  br label %block_.L_40ed96

block_.L_40ed96:                                  ; preds = %block_.L_40ed8a, %block_40ed79
  %12846 = phi i64 [ %.pre314, %block_.L_40ed8a ], [ %12837, %block_40ed79 ]
  %12847 = load i64, i64* %RBP.i, align 8
  %12848 = add i64 %12847, -748
  %12849 = add i64 %12846, 6
  store i64 %12849, i64* %3, align 8
  %12850 = inttoptr i64 %12848 to i32*
  %12851 = load i32, i32* %12850, align 4
  %12852 = zext i32 %12851 to i64
  store i64 %12852, i64* %RAX.i1862, align 8
  %12853 = add i64 %12847, -56
  %12854 = add i64 %12846, 9
  store i64 %12854, i64* %3, align 8
  %12855 = inttoptr i64 %12853 to i32*
  store i32 %12851, i32* %12855, align 4
  %.pre315 = load i64, i64* %3, align 8
  br label %block_.L_40ed9f

block_.L_40ed9f:                                  ; preds = %block_.L_40ed96, %block_40ed22
  %12856 = phi i64 [ %.pre315, %block_.L_40ed96 ], [ %12776, %block_40ed22 ]
  %12857 = add i64 %12856, 5
  store i64 %12857, i64* %3, align 8
  br label %block_.L_40eda4

block_.L_40eda4:                                  ; preds = %block_.L_40ed9f, %block_.L_40ed02
  %storemerge160 = phi i64 [ %12727, %block_.L_40ed02 ], [ %12857, %block_.L_40ed9f ]
  %MEMORY.52 = phi %struct.Memory* [ %MEMORY.46, %block_.L_40ed02 ], [ %11135, %block_.L_40ed9f ]
  %12858 = load i64, i64* %RBP.i, align 8
  %12859 = add i64 %12858, -60
  %12860 = add i64 %storemerge160, 4
  store i64 %12860, i64* %3, align 8
  %12861 = inttoptr i64 %12859 to i32*
  %12862 = load i32, i32* %12861, align 4
  store i8 0, i8* %14, align 1
  %12863 = and i32 %12862, 255
  %12864 = tail call i32 @llvm.ctpop.i32(i32 %12863)
  %12865 = trunc i32 %12864 to i8
  %12866 = and i8 %12865, 1
  %12867 = xor i8 %12866, 1
  store i8 %12867, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %12868 = icmp eq i32 %12862, 0
  %12869 = zext i1 %12868 to i8
  store i8 %12869, i8* %30, align 1
  %12870 = lshr i32 %12862, 31
  %12871 = trunc i32 %12870 to i8
  store i8 %12871, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v400 = select i1 %12868, i64 316, i64 10
  %12872 = add i64 %storemerge160, %.v400
  store i64 %12872, i64* %3, align 8
  br i1 %12868, label %block_.L_40eee0, label %block_40edae

block_40edae:                                     ; preds = %block_.L_40eda4
  store i64 1, i64* %RAX.i1862, align 8
  %12873 = add i64 %12858, -4
  %12874 = add i64 %12872, 8
  store i64 %12874, i64* %3, align 8
  %12875 = inttoptr i64 %12873 to i32*
  %12876 = load i32, i32* %12875, align 4
  %12877 = shl i32 %12876, 2
  %12878 = add i32 %12877, 16
  %12879 = zext i32 %12878 to i64
  store i64 %12879, i64* %RCX.i2028, align 8
  %12880 = icmp ugt i32 %12877, -17
  %12881 = zext i1 %12880 to i8
  store i8 %12881, i8* %14, align 1
  %12882 = and i32 %12878, 252
  %12883 = tail call i32 @llvm.ctpop.i32(i32 %12882)
  %12884 = trunc i32 %12883 to i8
  %12885 = and i8 %12884, 1
  %12886 = xor i8 %12885, 1
  store i8 %12886, i8* %21, align 1
  %12887 = xor i32 %12877, 16
  %12888 = xor i32 %12887, %12878
  %12889 = lshr i32 %12888, 4
  %12890 = trunc i32 %12889 to i8
  %12891 = and i8 %12890, 1
  store i8 %12891, i8* %27, align 1
  %12892 = icmp eq i32 %12878, 0
  %12893 = zext i1 %12892 to i8
  store i8 %12893, i8* %30, align 1
  %12894 = lshr i32 %12878, 31
  %12895 = trunc i32 %12894 to i8
  store i8 %12895, i8* %33, align 1
  %12896 = lshr i32 %12876, 29
  %12897 = and i32 %12896, 1
  %12898 = xor i32 %12894, %12897
  %12899 = add nuw nsw i32 %12898, %12894
  %12900 = icmp eq i32 %12899, 2
  %12901 = zext i1 %12900 to i8
  store i8 %12901, i8* %39, align 1
  %12902 = add i64 %12858, -32
  %12903 = add i64 %12872, 17
  store i64 %12903, i64* %3, align 8
  %12904 = inttoptr i64 %12902 to i32*
  %12905 = load i32, i32* %12904, align 4
  %12906 = zext i32 %12905 to i64
  %12907 = shl nuw i64 %12906, 32
  %12908 = ashr i64 %12907, 33
  %12909 = trunc i32 %12905 to i8
  %12910 = and i8 %12909, 1
  %12911 = trunc i64 %12908 to i32
  %12912 = and i64 %12908, 4294967295
  store i64 %12912, i64* %RDX.i4840, align 8
  store i8 %12910, i8* %14, align 1
  %12913 = and i32 %12911, 255
  %12914 = tail call i32 @llvm.ctpop.i32(i32 %12913)
  %12915 = trunc i32 %12914 to i8
  %12916 = and i8 %12915, 1
  %12917 = xor i8 %12916, 1
  store i8 %12917, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %12918 = icmp eq i32 %12911, 0
  %12919 = zext i1 %12918 to i8
  store i8 %12919, i8* %30, align 1
  %12920 = lshr i64 %12908, 31
  %12921 = trunc i64 %12920 to i8
  %12922 = and i8 %12921, 1
  store i8 %12922, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %12923 = add i64 %12858, -36
  %12924 = add i64 %12872, 22
  store i64 %12924, i64* %3, align 8
  %12925 = inttoptr i64 %12923 to i32*
  %12926 = load i32, i32* %12925, align 4
  %12927 = sext i32 %12926 to i64
  %12928 = ashr i64 %12927, 1
  %12929 = lshr i64 %12928, 1
  %12930 = and i64 %12929, 4294967295
  store i64 %12930, i64* %RSI.i2426, align 8
  %12931 = trunc i64 %12929 to i32
  %12932 = trunc i64 %12908 to i32
  %12933 = add i32 %12931, %12932
  %12934 = zext i32 %12933 to i64
  store i64 %12934, i64* %RDX.i4840, align 8
  %12935 = lshr i32 %12933, 31
  %12936 = load i64, i64* %RCX.i2028, align 8
  %12937 = trunc i64 %12936 to i32
  %12938 = add i32 %12933, %12937
  %12939 = zext i32 %12938 to i64
  store i64 %12939, i64* %RCX.i2028, align 8
  %12940 = icmp ult i32 %12938, %12937
  %12941 = icmp ult i32 %12938, %12933
  %12942 = or i1 %12940, %12941
  %12943 = zext i1 %12942 to i8
  store i8 %12943, i8* %14, align 1
  %12944 = and i32 %12938, 255
  %12945 = tail call i32 @llvm.ctpop.i32(i32 %12944)
  %12946 = trunc i32 %12945 to i8
  %12947 = and i8 %12946, 1
  %12948 = xor i8 %12947, 1
  store i8 %12948, i8* %21, align 1
  %12949 = xor i64 %12934, %12936
  %12950 = trunc i64 %12949 to i32
  %12951 = xor i32 %12950, %12938
  %12952 = lshr i32 %12951, 4
  %12953 = trunc i32 %12952 to i8
  %12954 = and i8 %12953, 1
  store i8 %12954, i8* %27, align 1
  %12955 = icmp eq i32 %12938, 0
  %12956 = zext i1 %12955 to i8
  store i8 %12956, i8* %30, align 1
  %12957 = lshr i32 %12938, 31
  %12958 = trunc i32 %12957 to i8
  store i8 %12958, i8* %33, align 1
  %12959 = lshr i32 %12937, 31
  %12960 = xor i32 %12957, %12959
  %12961 = xor i32 %12957, %12935
  %12962 = add nuw nsw i32 %12960, %12961
  %12963 = icmp eq i32 %12962, 2
  %12964 = zext i1 %12963 to i8
  store i8 %12964, i8* %39, align 1
  %12965 = load i64, i64* %RAX.i1862, align 8
  %12966 = add i64 %12872, 31
  store i64 %12966, i64* %3, align 8
  %12967 = trunc i32 %12938 to i5
  %12968 = trunc i64 %12965 to i32
  switch i5 %12967, label %12974 [
    i5 0, label %routine_shll__cl___eax.exit1157
    i5 1, label %12969
  ]

; <label>:12969:                                  ; preds = %block_40edae
  %12970 = shl i32 %12968, 1
  %12971 = icmp slt i32 %12968, 0
  %12972 = icmp slt i32 %12970, 0
  %12973 = xor i1 %12971, %12972
  br label %12984

; <label>:12974:                                  ; preds = %block_40edae
  %12975 = and i32 %12938, 31
  %12976 = zext i32 %12975 to i64
  %12977 = add nuw nsw i64 %12976, 4294967295
  %12978 = and i64 %12965, 4294967295
  %12979 = and i64 %12977, 4294967295
  %12980 = shl i64 %12978, %12979
  %12981 = trunc i64 %12980 to i32
  %12982 = icmp slt i32 %12981, 0
  %12983 = shl i32 %12981, 1
  br label %12984

; <label>:12984:                                  ; preds = %12974, %12969
  %12985 = phi i1 [ %12971, %12969 ], [ %12982, %12974 ]
  %12986 = phi i1 [ %12973, %12969 ], [ false, %12974 ]
  %12987 = phi i32 [ %12970, %12969 ], [ %12983, %12974 ]
  %12988 = zext i32 %12987 to i64
  store i64 %12988, i64* %RAX.i1862, align 8
  %12989 = zext i1 %12985 to i8
  store i8 %12989, i8* %14, align 1
  %12990 = and i32 %12987, 254
  %12991 = tail call i32 @llvm.ctpop.i32(i32 %12990)
  %12992 = trunc i32 %12991 to i8
  %12993 = and i8 %12992, 1
  %12994 = xor i8 %12993, 1
  store i8 %12994, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %12995 = icmp eq i32 %12987, 0
  %12996 = zext i1 %12995 to i8
  store i8 %12996, i8* %30, align 1
  %12997 = lshr i32 %12987, 31
  %12998 = trunc i32 %12997 to i8
  store i8 %12998, i8* %33, align 1
  %12999 = zext i1 %12986 to i8
  store i8 %12999, i8* %39, align 1
  br label %routine_shll__cl___eax.exit1157

routine_shll__cl___eax.exit1157:                  ; preds = %12984, %block_40edae
  %13000 = phi i32 [ %12987, %12984 ], [ %12968, %block_40edae ]
  %13001 = sext i32 %13000 to i64
  store i64 %13001, i64* %RDI.i3890, align 8
  %13002 = load i64, i64* %RBP.i, align 8
  %13003 = add i64 %13002, -440
  %13004 = add i64 %12872, 41
  store i64 %13004, i64* %3, align 8
  %13005 = inttoptr i64 %13003 to i64*
  %13006 = load i64, i64* %13005, align 8
  store i64 %13006, i64* %R8.i3081, align 8
  %13007 = add i64 %13006, 464
  %13008 = add i64 %12872, 48
  store i64 %13008, i64* %3, align 8
  %13009 = inttoptr i64 %13007 to i64*
  %13010 = load i64, i64* %13009, align 8
  %13011 = or i64 %13010, %13001
  store i64 %13011, i64* %RDI.i3890, align 8
  store i8 0, i8* %14, align 1
  %13012 = trunc i64 %13011 to i32
  %13013 = and i32 %13012, 255
  %13014 = tail call i32 @llvm.ctpop.i32(i32 %13013)
  %13015 = trunc i32 %13014 to i8
  %13016 = and i8 %13015, 1
  %13017 = xor i8 %13016, 1
  store i8 %13017, i8* %21, align 1
  %13018 = icmp eq i64 %13011, 0
  %13019 = zext i1 %13018 to i8
  store i8 %13019, i8* %30, align 1
  %13020 = lshr i64 %13011, 63
  %13021 = trunc i64 %13020 to i8
  store i8 %13021, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %13022 = add i64 %12872, 55
  store i64 %13022, i64* %3, align 8
  store i64 %13011, i64* %13009, align 8
  %13023 = load i64, i64* %RBP.i, align 8
  %13024 = add i64 %13023, -60
  %13025 = load i64, i64* %3, align 8
  %13026 = add i64 %13025, 4
  store i64 %13026, i64* %3, align 8
  %13027 = inttoptr i64 %13024 to i32*
  %13028 = load i32, i32* %13027, align 4
  %13029 = add i32 %13028, -1
  %13030 = icmp eq i32 %13028, 0
  %13031 = zext i1 %13030 to i8
  store i8 %13031, i8* %14, align 1
  %13032 = and i32 %13029, 255
  %13033 = tail call i32 @llvm.ctpop.i32(i32 %13032)
  %13034 = trunc i32 %13033 to i8
  %13035 = and i8 %13034, 1
  %13036 = xor i8 %13035, 1
  store i8 %13036, i8* %21, align 1
  %13037 = xor i32 %13029, %13028
  %13038 = lshr i32 %13037, 4
  %13039 = trunc i32 %13038 to i8
  %13040 = and i8 %13039, 1
  store i8 %13040, i8* %27, align 1
  %13041 = icmp eq i32 %13029, 0
  %13042 = zext i1 %13041 to i8
  store i8 %13042, i8* %30, align 1
  %13043 = lshr i32 %13029, 31
  %13044 = trunc i32 %13043 to i8
  store i8 %13044, i8* %33, align 1
  %13045 = lshr i32 %13028, 31
  %13046 = xor i32 %13043, %13045
  %13047 = add nuw nsw i32 %13046, %13045
  %13048 = icmp eq i32 %13047, 2
  %13049 = zext i1 %13048 to i8
  store i8 %13049, i8* %39, align 1
  %13050 = icmp ne i8 %13044, 0
  %13051 = xor i1 %13050, %13048
  %13052 = or i1 %13041, %13051
  %.v401 = select i1 %13052, i64 32, i64 10
  %13053 = add i64 %13025, %.v401
  store i64 %13053, i64* %3, align 8
  br i1 %13052, label %block_.L_40ee06, label %block_40edf0

block_40edf0:                                     ; preds = %routine_shll__cl___eax.exit1157
  %13054 = add i64 %13023, -132
  %13055 = add i64 %13053, 6
  store i64 %13055, i64* %3, align 8
  %13056 = inttoptr i64 %13054 to i32*
  %13057 = load i32, i32* %13056, align 4
  %13058 = add i32 %13057, 999999
  %13059 = zext i32 %13058 to i64
  store i64 %13059, i64* %RAX.i1862, align 8
  %13060 = icmp ugt i32 %13057, -1000000
  %13061 = zext i1 %13060 to i8
  store i8 %13061, i8* %14, align 1
  %13062 = and i32 %13058, 255
  %13063 = tail call i32 @llvm.ctpop.i32(i32 %13062)
  %13064 = trunc i32 %13063 to i8
  %13065 = and i8 %13064, 1
  %13066 = xor i8 %13065, 1
  store i8 %13066, i8* %21, align 1
  %13067 = xor i32 %13057, 16
  %13068 = xor i32 %13067, %13058
  %13069 = lshr i32 %13068, 4
  %13070 = trunc i32 %13069 to i8
  %13071 = and i8 %13070, 1
  store i8 %13071, i8* %27, align 1
  %13072 = icmp eq i32 %13058, 0
  %13073 = zext i1 %13072 to i8
  store i8 %13073, i8* %30, align 1
  %13074 = lshr i32 %13058, 31
  %13075 = trunc i32 %13074 to i8
  store i8 %13075, i8* %33, align 1
  %13076 = lshr i32 %13057, 31
  %13077 = xor i32 %13074, %13076
  %13078 = add nuw nsw i32 %13077, %13074
  %13079 = icmp eq i32 %13078, 2
  %13080 = zext i1 %13079 to i8
  store i8 %13080, i8* %39, align 1
  %13081 = add i64 %13053, 17
  store i64 %13081, i64* %3, align 8
  store i32 %13058, i32* %13056, align 4
  %13082 = load i64, i64* %3, align 8
  %13083 = add i64 %13082, 57
  store i64 %13083, i64* %3, align 8
  br label %block_.L_40ee3a

block_.L_40ee06:                                  ; preds = %routine_shll__cl___eax.exit1157
  store i64 ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64), i64* %RAX.i1862, align 8
  %13084 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %13084, i64* %RCX.i2028, align 8
  %13085 = add i64 %13084, 2468
  %13086 = add i64 %13053, 25
  store i64 %13086, i64* %3, align 8
  %13087 = inttoptr i64 %13085 to i32*
  %13088 = load i32, i32* %13087, align 4
  %13089 = sext i32 %13088 to i64
  %13090 = shl nsw i64 %13089, 4
  store i64 %13090, i64* %RCX.i2028, align 8
  %13091 = add i64 %13090, ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64)
  store i64 %13091, i64* %RAX.i1862, align 8
  %13092 = icmp ult i64 %13091, ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64)
  %13093 = icmp ult i64 %13091, %13090
  %13094 = or i1 %13092, %13093
  %13095 = zext i1 %13094 to i8
  store i8 %13095, i8* %14, align 1
  %13096 = trunc i64 %13091 to i32
  %13097 = and i32 %13096, 248
  %13098 = tail call i32 @llvm.ctpop.i32(i32 %13097)
  %13099 = trunc i32 %13098 to i8
  %13100 = and i8 %13099, 1
  %13101 = xor i8 %13100, 1
  store i8 %13101, i8* %21, align 1
  %13102 = xor i64 %13090, ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64)
  %13103 = xor i64 %13102, %13091
  %13104 = lshr i64 %13103, 4
  %13105 = trunc i64 %13104 to i8
  %13106 = and i8 %13105, 1
  store i8 %13106, i8* %27, align 1
  %13107 = icmp eq i64 %13091, 0
  %13108 = zext i1 %13107 to i8
  store i8 %13108, i8* %30, align 1
  %13109 = lshr i64 %13091, 63
  %13110 = trunc i64 %13109 to i8
  store i8 %13110, i8* %33, align 1
  %13111 = lshr i64 %13089, 59
  %13112 = and i64 %13111, 1
  %13113 = xor i64 %13109, lshr (i64 ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64), i64 63)
  %13114 = xor i64 %13109, %13112
  %13115 = add nuw nsw i64 %13113, %13114
  %13116 = icmp eq i64 %13115, 2
  %13117 = zext i1 %13116 to i8
  store i8 %13117, i8* %39, align 1
  %13118 = add i64 %13023, -68
  %13119 = add i64 %13053, 36
  store i64 %13119, i64* %3, align 8
  %13120 = inttoptr i64 %13118 to i32*
  %13121 = load i32, i32* %13120, align 4
  %13122 = sext i32 %13121 to i64
  store i64 %13122, i64* %RCX.i2028, align 8
  %13123 = add i64 %13091, %13122
  %13124 = add i64 %13053, 40
  store i64 %13124, i64* %3, align 8
  %13125 = inttoptr i64 %13123 to i8*
  %13126 = load i8, i8* %13125, align 1
  %13127 = zext i8 %13126 to i64
  store i64 %13127, i64* %RDX.i4840, align 8
  %13128 = add i64 %13023, -132
  %13129 = add i64 %13053, 46
  store i64 %13129, i64* %3, align 8
  %13130 = zext i8 %13126 to i32
  %13131 = inttoptr i64 %13128 to i32*
  %13132 = load i32, i32* %13131, align 4
  %13133 = add i32 %13132, %13130
  %13134 = zext i32 %13133 to i64
  store i64 %13134, i64* %RDX.i4840, align 8
  %13135 = icmp ult i32 %13133, %13130
  %13136 = icmp ult i32 %13133, %13132
  %13137 = or i1 %13135, %13136
  %13138 = zext i1 %13137 to i8
  store i8 %13138, i8* %14, align 1
  %13139 = and i32 %13133, 255
  %13140 = tail call i32 @llvm.ctpop.i32(i32 %13139)
  %13141 = trunc i32 %13140 to i8
  %13142 = and i8 %13141, 1
  %13143 = xor i8 %13142, 1
  store i8 %13143, i8* %21, align 1
  %13144 = xor i32 %13132, %13130
  %13145 = xor i32 %13144, %13133
  %13146 = lshr i32 %13145, 4
  %13147 = trunc i32 %13146 to i8
  %13148 = and i8 %13147, 1
  store i8 %13148, i8* %27, align 1
  %13149 = icmp eq i32 %13133, 0
  %13150 = zext i1 %13149 to i8
  store i8 %13150, i8* %30, align 1
  %13151 = lshr i32 %13133, 31
  %13152 = trunc i32 %13151 to i8
  store i8 %13152, i8* %33, align 1
  %13153 = lshr i32 %13132, 31
  %13154 = xor i32 %13151, %13153
  %13155 = add nuw nsw i32 %13154, %13151
  %13156 = icmp eq i32 %13155, 2
  %13157 = zext i1 %13156 to i8
  store i8 %13157, i8* %39, align 1
  %13158 = load i64, i64* %RBP.i, align 8
  %13159 = add i64 %13158, -132
  %13160 = add i64 %13053, 52
  store i64 %13160, i64* %3, align 8
  %13161 = inttoptr i64 %13159 to i32*
  store i32 %13133, i32* %13161, align 4
  %.pre316 = load i64, i64* %3, align 8
  br label %block_.L_40ee3a

block_.L_40ee3a:                                  ; preds = %block_.L_40ee06, %block_40edf0
  %13162 = phi i64 [ %.pre316, %block_.L_40ee06 ], [ %13083, %block_40edf0 ]
  %13163 = load i64, i64* %RBP.i, align 8
  %13164 = add i64 %13163, -136
  %13165 = add i64 %13162, 10
  store i64 %13165, i64* %3, align 8
  %13166 = inttoptr i64 %13164 to i32*
  store i32 2, i32* %13166, align 4
  %13167 = load i64, i64* %RBP.i, align 8
  %13168 = add i64 %13167, -60
  %13169 = load i64, i64* %3, align 8
  %13170 = add i64 %13169, 3
  store i64 %13170, i64* %3, align 8
  %13171 = inttoptr i64 %13168 to i32*
  %13172 = load i32, i32* %13171, align 4
  %13173 = zext i32 %13172 to i64
  store i64 %13173, i64* %RDI.i3890, align 8
  %13174 = add i64 %13167, -56
  %13175 = add i64 %13169, 6
  store i64 %13175, i64* %3, align 8
  %13176 = inttoptr i64 %13174 to i32*
  %13177 = load i32, i32* %13176, align 4
  %13178 = zext i32 %13177 to i64
  store i64 %13178, i64* %RSI.i2426, align 8
  %13179 = add i64 %13169, 418572
  %13180 = add i64 %13169, 11
  %13181 = load i64, i64* %6, align 8
  %13182 = add i64 %13181, -8
  %13183 = inttoptr i64 %13182 to i64*
  store i64 %13180, i64* %13183, align 8
  store i64 %13182, i64* %6, align 8
  store i64 %13179, i64* %3, align 8
  %call2_40ee4a = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %13179, %struct.Memory* %MEMORY.52)
  %13184 = load i64, i64* %RBP.i, align 8
  %13185 = add i64 %13184, -496
  %13186 = load i64, i64* %3, align 8
  %13187 = add i64 %13186, 7
  store i64 %13187, i64* %3, align 8
  %13188 = inttoptr i64 %13185 to i64*
  %13189 = load i64, i64* %13188, align 8
  store i64 %13189, i64* %RCX.i2028, align 8
  %13190 = add i64 %13184, -64
  %13191 = add i64 %13186, 11
  store i64 %13191, i64* %3, align 8
  %13192 = inttoptr i64 %13190 to i32*
  %13193 = load i32, i32* %13192, align 4
  %13194 = sext i32 %13193 to i64
  store i64 %13194, i64* %RDX.i4840, align 8
  %13195 = shl nsw i64 %13194, 2
  %13196 = add i64 %13195, %13189
  %13197 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %13198 = add i64 %13186, 14
  store i64 %13198, i64* %3, align 8
  %13199 = inttoptr i64 %13196 to i32*
  store i32 %13197, i32* %13199, align 4
  %13200 = load i64, i64* %RBP.i, align 8
  %13201 = add i64 %13200, -68
  %13202 = load i64, i64* %3, align 8
  %13203 = add i64 %13202, 3
  store i64 %13203, i64* %3, align 8
  %13204 = inttoptr i64 %13201 to i32*
  %13205 = load i32, i32* %13204, align 4
  %13206 = zext i32 %13205 to i64
  store i64 %13206, i64* %RAX.i1862, align 8
  %13207 = add i64 %13200, -504
  %13208 = add i64 %13202, 10
  store i64 %13208, i64* %3, align 8
  %13209 = inttoptr i64 %13207 to i64*
  %13210 = load i64, i64* %13209, align 8
  store i64 %13210, i64* %RCX.i2028, align 8
  %13211 = add i64 %13200, -64
  %13212 = add i64 %13202, 14
  store i64 %13212, i64* %3, align 8
  %13213 = inttoptr i64 %13211 to i32*
  %13214 = load i32, i32* %13213, align 4
  %13215 = sext i32 %13214 to i64
  store i64 %13215, i64* %RDX.i4840, align 8
  %13216 = shl nsw i64 %13215, 2
  %13217 = add i64 %13216, %13210
  %13218 = add i64 %13202, 17
  store i64 %13218, i64* %3, align 8
  %13219 = inttoptr i64 %13217 to i32*
  store i32 %13205, i32* %13219, align 4
  %13220 = load i64, i64* %RBP.i, align 8
  %13221 = add i64 %13220, -64
  %13222 = load i64, i64* %3, align 8
  %13223 = add i64 %13222, 3
  store i64 %13223, i64* %3, align 8
  %13224 = inttoptr i64 %13221 to i32*
  %13225 = load i32, i32* %13224, align 4
  %13226 = add i32 %13225, 1
  %13227 = zext i32 %13226 to i64
  store i64 %13227, i64* %RAX.i1862, align 8
  %13228 = icmp eq i32 %13225, -1
  %13229 = icmp eq i32 %13226, 0
  %13230 = or i1 %13228, %13229
  %13231 = zext i1 %13230 to i8
  store i8 %13231, i8* %14, align 1
  %13232 = and i32 %13226, 255
  %13233 = tail call i32 @llvm.ctpop.i32(i32 %13232)
  %13234 = trunc i32 %13233 to i8
  %13235 = and i8 %13234, 1
  %13236 = xor i8 %13235, 1
  store i8 %13236, i8* %21, align 1
  %13237 = xor i32 %13226, %13225
  %13238 = lshr i32 %13237, 4
  %13239 = trunc i32 %13238 to i8
  %13240 = and i8 %13239, 1
  store i8 %13240, i8* %27, align 1
  %13241 = zext i1 %13229 to i8
  store i8 %13241, i8* %30, align 1
  %13242 = lshr i32 %13226, 31
  %13243 = trunc i32 %13242 to i8
  store i8 %13243, i8* %33, align 1
  %13244 = lshr i32 %13225, 31
  %13245 = xor i32 %13242, %13244
  %13246 = add nuw nsw i32 %13245, %13242
  %13247 = icmp eq i32 %13246, 2
  %13248 = zext i1 %13247 to i8
  store i8 %13248, i8* %39, align 1
  %13249 = add i64 %13222, 9
  store i64 %13249, i64* %3, align 8
  store i32 %13226, i32* %13224, align 4
  %13250 = load i64, i64* %RBP.i, align 8
  %13251 = add i64 %13250, -68
  %13252 = load i64, i64* %3, align 8
  %13253 = add i64 %13252, 7
  store i64 %13253, i64* %3, align 8
  %13254 = inttoptr i64 %13251 to i32*
  store i32 -1, i32* %13254, align 4
  %13255 = load i64, i64* %RBP.i, align 8
  %13256 = add i64 %13255, -60
  %13257 = load i64, i64* %3, align 8
  %13258 = add i64 %13257, 3
  store i64 %13258, i64* %3, align 8
  %13259 = inttoptr i64 %13256 to i32*
  %13260 = load i32, i32* %13259, align 4
  %13261 = zext i32 %13260 to i64
  store i64 %13261, i64* %RDI.i3890, align 8
  %13262 = add i64 %13255, -56
  %13263 = add i64 %13257, 6
  store i64 %13263, i64* %3, align 8
  %13264 = inttoptr i64 %13262 to i32*
  %13265 = load i32, i32* %13264, align 4
  %13266 = zext i32 %13265 to i64
  store i64 %13266, i64* %RSI.i2426, align 8
  %13267 = add i64 %13257, 418514
  %13268 = add i64 %13257, 11
  %13269 = load i64, i64* %6, align 8
  %13270 = add i64 %13269, -8
  %13271 = inttoptr i64 %13270 to i64*
  store i64 %13268, i64* %13271, align 8
  store i64 %13270, i64* %6, align 8
  store i64 %13267, i64* %3, align 8
  %call2_40ee84 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %13267, %struct.Memory* %call2_40ee4a)
  %13272 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %RCX.i2028, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %RDX.i4840, align 8
  %13273 = load i64, i64* %RBP.i, align 8
  %13274 = add i64 %13273, -448
  %13275 = add i64 %13272, 27
  store i64 %13275, i64* %3, align 8
  %13276 = inttoptr i64 %13274 to i32*
  %13277 = load i32, i32* %13276, align 4
  %13278 = sext i32 %13277 to i64
  %13279 = shl nsw i64 %13278, 6
  store i64 %13279, i64* %R8.i3081, align 8
  %13280 = add i64 %13279, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %13280, i64* %RDX.i4840, align 8
  %13281 = icmp ult i64 %13280, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %13282 = icmp ult i64 %13280, %13279
  %13283 = or i1 %13281, %13282
  %13284 = zext i1 %13283 to i8
  store i8 %13284, i8* %14, align 1
  %13285 = trunc i64 %13280 to i32
  %13286 = and i32 %13285, 248
  %13287 = tail call i32 @llvm.ctpop.i32(i32 %13286)
  %13288 = trunc i32 %13287 to i8
  %13289 = and i8 %13288, 1
  %13290 = xor i8 %13289, 1
  store i8 %13290, i8* %21, align 1
  %13291 = xor i64 %13280, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %13292 = lshr i64 %13291, 4
  %13293 = trunc i64 %13292 to i8
  %13294 = and i8 %13293, 1
  store i8 %13294, i8* %27, align 1
  %13295 = icmp eq i64 %13280, 0
  %13296 = zext i1 %13295 to i8
  store i8 %13296, i8* %30, align 1
  %13297 = lshr i64 %13280, 63
  %13298 = trunc i64 %13297 to i8
  store i8 %13298, i8* %33, align 1
  %13299 = lshr i64 %13278, 57
  %13300 = and i64 %13299, 1
  %13301 = xor i64 %13297, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %13302 = xor i64 %13297, %13300
  %13303 = add nuw nsw i64 %13301, %13302
  %13304 = icmp eq i64 %13303, 2
  %13305 = zext i1 %13304 to i8
  store i8 %13305, i8* %39, align 1
  %13306 = add i64 %13273, -12
  %13307 = add i64 %13272, 38
  store i64 %13307, i64* %3, align 8
  %13308 = inttoptr i64 %13306 to i32*
  %13309 = load i32, i32* %13308, align 4
  %13310 = sext i32 %13309 to i64
  %13311 = shl nsw i64 %13310, 4
  store i64 %13311, i64* %R8.i3081, align 8
  %13312 = add i64 %13311, %13280
  store i64 %13312, i64* %RDX.i4840, align 8
  %13313 = icmp ult i64 %13312, %13280
  %13314 = icmp ult i64 %13312, %13311
  %13315 = or i1 %13313, %13314
  %13316 = zext i1 %13315 to i8
  store i8 %13316, i8* %14, align 1
  %13317 = trunc i64 %13312 to i32
  %13318 = and i32 %13317, 248
  %13319 = tail call i32 @llvm.ctpop.i32(i32 %13318)
  %13320 = trunc i32 %13319 to i8
  %13321 = and i8 %13320, 1
  %13322 = xor i8 %13321, 1
  store i8 %13322, i8* %21, align 1
  %13323 = xor i64 %13311, %13280
  %13324 = xor i64 %13323, %13312
  %13325 = lshr i64 %13324, 4
  %13326 = trunc i64 %13325 to i8
  %13327 = and i8 %13326, 1
  store i8 %13327, i8* %27, align 1
  %13328 = icmp eq i64 %13312, 0
  %13329 = zext i1 %13328 to i8
  store i8 %13329, i8* %30, align 1
  %13330 = lshr i64 %13312, 63
  %13331 = trunc i64 %13330 to i8
  store i8 %13331, i8* %33, align 1
  %13332 = lshr i64 %13310, 59
  %13333 = and i64 %13332, 1
  %13334 = xor i64 %13330, %13297
  %13335 = xor i64 %13330, %13333
  %13336 = add nuw nsw i64 %13334, %13335
  %13337 = icmp eq i64 %13336, 2
  %13338 = zext i1 %13337 to i8
  store i8 %13338, i8* %39, align 1
  %13339 = load i64, i64* %RBP.i, align 8
  %13340 = add i64 %13339, -16
  %13341 = add i64 %13272, 49
  store i64 %13341, i64* %3, align 8
  %13342 = inttoptr i64 %13340 to i32*
  %13343 = load i32, i32* %13342, align 4
  %13344 = sext i32 %13343 to i64
  store i64 %13344, i64* %R8.i3081, align 8
  %13345 = load i64, i64* %RAX.i1862, align 8
  %13346 = shl nsw i64 %13344, 2
  %13347 = add i64 %13312, %13346
  %13348 = add i64 %13272, 54
  store i64 %13348, i64* %3, align 8
  %13349 = inttoptr i64 %13347 to i32*
  %13350 = load i32, i32* %13349, align 4
  %13351 = shl i64 %13345, 32
  %13352 = ashr exact i64 %13351, 32
  %13353 = sext i32 %13350 to i64
  %13354 = mul nsw i64 %13353, %13352
  %13355 = trunc i64 %13354 to i32
  %13356 = and i64 %13354, 4294967295
  store i64 %13356, i64* %RAX.i1862, align 8
  %13357 = shl i64 %13354, 32
  %13358 = ashr exact i64 %13357, 32
  %13359 = icmp ne i64 %13358, %13354
  %13360 = zext i1 %13359 to i8
  store i8 %13360, i8* %14, align 1
  %13361 = and i32 %13355, 255
  %13362 = tail call i32 @llvm.ctpop.i32(i32 %13361)
  %13363 = trunc i32 %13362 to i8
  %13364 = and i8 %13363, 1
  %13365 = xor i8 %13364, 1
  store i8 %13365, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %13366 = lshr i32 %13355, 31
  %13367 = trunc i32 %13366 to i8
  store i8 %13367, i8* %33, align 1
  store i8 %13360, i8* %39, align 1
  %13368 = add i64 %13339, -12
  %13369 = add i64 %13272, 58
  store i64 %13369, i64* %3, align 8
  %13370 = inttoptr i64 %13368 to i32*
  %13371 = load i32, i32* %13370, align 4
  %13372 = sext i32 %13371 to i64
  %13373 = shl nsw i64 %13372, 4
  store i64 %13373, i64* %RDX.i4840, align 8
  %13374 = load i64, i64* %RCX.i2028, align 8
  %13375 = add i64 %13373, %13374
  store i64 %13375, i64* %RCX.i2028, align 8
  %13376 = icmp ult i64 %13375, %13374
  %13377 = icmp ult i64 %13375, %13373
  %13378 = or i1 %13376, %13377
  %13379 = zext i1 %13378 to i8
  store i8 %13379, i8* %14, align 1
  %13380 = trunc i64 %13375 to i32
  %13381 = and i32 %13380, 255
  %13382 = tail call i32 @llvm.ctpop.i32(i32 %13381)
  %13383 = trunc i32 %13382 to i8
  %13384 = and i8 %13383, 1
  %13385 = xor i8 %13384, 1
  store i8 %13385, i8* %21, align 1
  %13386 = xor i64 %13373, %13374
  %13387 = xor i64 %13386, %13375
  %13388 = lshr i64 %13387, 4
  %13389 = trunc i64 %13388 to i8
  %13390 = and i8 %13389, 1
  store i8 %13390, i8* %27, align 1
  %13391 = icmp eq i64 %13375, 0
  %13392 = zext i1 %13391 to i8
  store i8 %13392, i8* %30, align 1
  %13393 = lshr i64 %13375, 63
  %13394 = trunc i64 %13393 to i8
  store i8 %13394, i8* %33, align 1
  %13395 = lshr i64 %13374, 63
  %13396 = lshr i64 %13372, 59
  %13397 = and i64 %13396, 1
  %13398 = xor i64 %13393, %13395
  %13399 = xor i64 %13393, %13397
  %13400 = add nuw nsw i64 %13398, %13399
  %13401 = icmp eq i64 %13400, 2
  %13402 = zext i1 %13401 to i8
  store i8 %13402, i8* %39, align 1
  %13403 = load i64, i64* %RBP.i, align 8
  %13404 = add i64 %13403, -16
  %13405 = add i64 %13272, 69
  store i64 %13405, i64* %3, align 8
  %13406 = inttoptr i64 %13404 to i32*
  %13407 = load i32, i32* %13406, align 4
  %13408 = sext i32 %13407 to i64
  store i64 %13408, i64* %RDX.i4840, align 8
  %13409 = shl nsw i64 %13408, 2
  %13410 = add i64 %13375, %13409
  %13411 = add i64 %13272, 73
  store i64 %13411, i64* %3, align 8
  %13412 = inttoptr i64 %13410 to i32*
  %13413 = load i32, i32* %13412, align 4
  %13414 = shl i64 %13354, 32
  %13415 = ashr exact i64 %13414, 32
  %13416 = sext i32 %13413 to i64
  %13417 = mul nsw i64 %13416, %13415
  %13418 = trunc i64 %13417 to i32
  %13419 = and i64 %13417, 4294967295
  store i64 %13419, i64* %RAX.i1862, align 8
  %13420 = shl i64 %13417, 32
  %13421 = ashr exact i64 %13420, 32
  %13422 = icmp ne i64 %13421, %13417
  %13423 = zext i1 %13422 to i8
  store i8 %13423, i8* %14, align 1
  %13424 = and i32 %13418, 255
  %13425 = tail call i32 @llvm.ctpop.i32(i32 %13424)
  %13426 = trunc i32 %13425 to i8
  %13427 = and i8 %13426, 1
  %13428 = xor i8 %13427, 1
  store i8 %13428, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %13429 = lshr i32 %13418, 31
  %13430 = trunc i32 %13429 to i8
  store i8 %13430, i8* %33, align 1
  store i8 %13423, i8* %39, align 1
  %13431 = add i64 %13403, -444
  %13432 = add i64 %13272, 79
  store i64 %13432, i64* %3, align 8
  %13433 = inttoptr i64 %13431 to i32*
  %13434 = load i32, i32* %13433, align 4
  %13435 = zext i32 %13434 to i64
  store i64 %13435, i64* %RCX.i2028, align 8
  %13436 = add i64 %13272, 81
  store i64 %13436, i64* %3, align 8
  %13437 = trunc i32 %13434 to i5
  switch i5 %13437, label %13444 [
    i5 0, label %routine_shll__cl___eax.exit1011
    i5 1, label %13438
  ]

; <label>:13438:                                  ; preds = %block_.L_40ee3a
  %13439 = trunc i64 %13417 to i32
  %13440 = shl i32 %13439, 1
  %13441 = icmp slt i32 %13439, 0
  %13442 = icmp slt i32 %13440, 0
  %13443 = xor i1 %13441, %13442
  br label %13453

; <label>:13444:                                  ; preds = %block_.L_40ee3a
  %13445 = and i32 %13434, 31
  %13446 = zext i32 %13445 to i64
  %13447 = add nuw nsw i64 %13446, 4294967295
  %13448 = and i64 %13447, 4294967295
  %13449 = shl i64 %13419, %13448
  %13450 = trunc i64 %13449 to i32
  %13451 = icmp slt i32 %13450, 0
  %13452 = shl i32 %13450, 1
  br label %13453

; <label>:13453:                                  ; preds = %13444, %13438
  %13454 = phi i1 [ %13441, %13438 ], [ %13451, %13444 ]
  %13455 = phi i1 [ %13443, %13438 ], [ false, %13444 ]
  %13456 = phi i32 [ %13440, %13438 ], [ %13452, %13444 ]
  %13457 = zext i32 %13456 to i64
  store i64 %13457, i64* %RAX.i1862, align 8
  %13458 = zext i1 %13454 to i8
  store i8 %13458, i8* %14, align 1
  %13459 = and i32 %13456, 254
  %13460 = tail call i32 @llvm.ctpop.i32(i32 %13459)
  %13461 = trunc i32 %13460 to i8
  %13462 = and i8 %13461, 1
  %13463 = xor i8 %13462, 1
  store i8 %13463, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %13464 = icmp eq i32 %13456, 0
  %13465 = zext i1 %13464 to i8
  store i8 %13465, i8* %30, align 1
  %13466 = lshr i32 %13456, 31
  %13467 = trunc i32 %13466 to i8
  store i8 %13467, i8* %33, align 1
  %13468 = zext i1 %13455 to i8
  store i8 %13468, i8* %39, align 1
  br label %routine_shll__cl___eax.exit1011

routine_shll__cl___eax.exit1011:                  ; preds = %13453, %block_.L_40ee3a
  %13469 = phi i64 [ %13457, %13453 ], [ %13419, %block_.L_40ee3a ]
  %13470 = shl nuw i64 %13469, 32
  %13471 = ashr i64 %13470, 37
  %13472 = lshr i64 %13471, 1
  %13473 = trunc i64 %13471 to i8
  %13474 = and i8 %13473, 1
  %13475 = trunc i64 %13472 to i32
  %13476 = and i64 %13472, 4294967295
  store i64 %13476, i64* %RAX.i1862, align 8
  store i8 %13474, i8* %14, align 1
  %13477 = and i32 %13475, 255
  %13478 = tail call i32 @llvm.ctpop.i32(i32 %13477)
  %13479 = trunc i32 %13478 to i8
  %13480 = and i8 %13479, 1
  %13481 = xor i8 %13480, 1
  store i8 %13481, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %13482 = icmp eq i32 %13475, 0
  %13483 = zext i1 %13482 to i8
  store i8 %13483, i8* %30, align 1
  %13484 = lshr i64 %13471, 32
  %13485 = trunc i64 %13484 to i8
  %13486 = and i8 %13485, 1
  store i8 %13486, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %13487 = add i64 %13403, -28
  %13488 = trunc i64 %13472 to i32
  %13489 = add i64 %13272, 87
  store i64 %13489, i64* %3, align 8
  %13490 = inttoptr i64 %13487 to i32*
  store i32 %13488, i32* %13490, align 4
  %.pre317 = load i64, i64* %RBP.i, align 8
  %.pre318 = load i64, i64* %3, align 8
  br label %block_.L_40eee0

block_.L_40eee0:                                  ; preds = %routine_shll__cl___eax.exit1011, %block_.L_40eda4
  %13491 = phi i64 [ %12872, %block_.L_40eda4 ], [ %.pre318, %routine_shll__cl___eax.exit1011 ]
  %13492 = phi i64 [ %12858, %block_.L_40eda4 ], [ %.pre317, %routine_shll__cl___eax.exit1011 ]
  %MEMORY.54 = phi %struct.Memory* [ %MEMORY.52, %block_.L_40eda4 ], [ %call2_40ee84, %routine_shll__cl___eax.exit1011 ]
  %13493 = add i64 %13492, -400
  store i64 %13493, i64* %RAX.i1862, align 8
  %13494 = add i64 %13492, -36
  %13495 = add i64 %13491, 10
  store i64 %13495, i64* %3, align 8
  %13496 = inttoptr i64 %13494 to i32*
  %13497 = load i32, i32* %13496, align 4
  %13498 = zext i32 %13497 to i64
  store i64 %13498, i64* %RCX.i2028, align 8
  %13499 = add i64 %13492, -12
  %13500 = add i64 %13491, 13
  store i64 %13500, i64* %3, align 8
  %13501 = inttoptr i64 %13499 to i32*
  %13502 = load i32, i32* %13501, align 4
  %13503 = add i32 %13502, %13497
  %13504 = zext i32 %13503 to i64
  store i64 %13504, i64* %RCX.i2028, align 8
  %13505 = sext i32 %13503 to i64
  %13506 = shl nsw i64 %13505, 5
  store i64 %13506, i64* %RDX.i4840, align 8
  %13507 = add i64 %13506, %13493
  store i64 %13507, i64* %RAX.i1862, align 8
  %13508 = icmp ult i64 %13507, %13493
  %13509 = icmp ult i64 %13507, %13506
  %13510 = or i1 %13508, %13509
  %13511 = zext i1 %13510 to i8
  store i8 %13511, i8* %14, align 1
  %13512 = trunc i64 %13507 to i32
  %13513 = and i32 %13512, 255
  %13514 = tail call i32 @llvm.ctpop.i32(i32 %13513)
  %13515 = trunc i32 %13514 to i8
  %13516 = and i8 %13515, 1
  %13517 = xor i8 %13516, 1
  store i8 %13517, i8* %21, align 1
  %13518 = xor i64 %13493, %13507
  %13519 = lshr i64 %13518, 4
  %13520 = trunc i64 %13519 to i8
  %13521 = and i8 %13520, 1
  store i8 %13521, i8* %27, align 1
  %13522 = icmp eq i64 %13507, 0
  %13523 = zext i1 %13522 to i8
  store i8 %13523, i8* %30, align 1
  %13524 = lshr i64 %13507, 63
  %13525 = trunc i64 %13524 to i8
  store i8 %13525, i8* %33, align 1
  %13526 = lshr i64 %13493, 63
  %13527 = lshr i64 %13505, 58
  %13528 = and i64 %13527, 1
  %13529 = xor i64 %13524, %13526
  %13530 = xor i64 %13524, %13528
  %13531 = add nuw nsw i64 %13529, %13530
  %13532 = icmp eq i64 %13531, 2
  %13533 = zext i1 %13532 to i8
  store i8 %13533, i8* %39, align 1
  %13534 = load i64, i64* %RBP.i, align 8
  %13535 = add i64 %13534, -32
  %13536 = add i64 %13491, 26
  store i64 %13536, i64* %3, align 8
  %13537 = inttoptr i64 %13535 to i32*
  %13538 = load i32, i32* %13537, align 4
  %13539 = zext i32 %13538 to i64
  store i64 %13539, i64* %RCX.i2028, align 8
  %13540 = add i64 %13534, -16
  %13541 = add i64 %13491, 29
  store i64 %13541, i64* %3, align 8
  %13542 = inttoptr i64 %13540 to i32*
  %13543 = load i32, i32* %13542, align 4
  %13544 = add i32 %13543, %13538
  %13545 = zext i32 %13544 to i64
  store i64 %13545, i64* %RCX.i2028, align 8
  %13546 = icmp ult i32 %13544, %13538
  %13547 = icmp ult i32 %13544, %13543
  %13548 = or i1 %13546, %13547
  %13549 = zext i1 %13548 to i8
  store i8 %13549, i8* %14, align 1
  %13550 = and i32 %13544, 255
  %13551 = tail call i32 @llvm.ctpop.i32(i32 %13550)
  %13552 = trunc i32 %13551 to i8
  %13553 = and i8 %13552, 1
  %13554 = xor i8 %13553, 1
  store i8 %13554, i8* %21, align 1
  %13555 = xor i32 %13543, %13538
  %13556 = xor i32 %13555, %13544
  %13557 = lshr i32 %13556, 4
  %13558 = trunc i32 %13557 to i8
  %13559 = and i8 %13558, 1
  store i8 %13559, i8* %27, align 1
  %13560 = icmp eq i32 %13544, 0
  %13561 = zext i1 %13560 to i8
  store i8 %13561, i8* %30, align 1
  %13562 = lshr i32 %13544, 31
  %13563 = trunc i32 %13562 to i8
  store i8 %13563, i8* %33, align 1
  %13564 = lshr i32 %13538, 31
  %13565 = lshr i32 %13543, 31
  %13566 = xor i32 %13562, %13564
  %13567 = xor i32 %13562, %13565
  %13568 = add nuw nsw i32 %13566, %13567
  %13569 = icmp eq i32 %13568, 2
  %13570 = zext i1 %13569 to i8
  store i8 %13570, i8* %39, align 1
  %13571 = sext i32 %13544 to i64
  store i64 %13571, i64* %RDX.i4840, align 8
  %13572 = shl nsw i64 %13571, 2
  %13573 = add i64 %13507, %13572
  %13574 = add i64 %13491, 35
  store i64 %13574, i64* %3, align 8
  %13575 = inttoptr i64 %13573 to i32*
  %13576 = load i32, i32* %13575, align 4
  %13577 = zext i32 %13576 to i64
  store i64 %13577, i64* %RCX.i2028, align 8
  %13578 = add i64 %13534, -28
  %13579 = add i64 %13491, 38
  store i64 %13579, i64* %3, align 8
  %13580 = inttoptr i64 %13578 to i32*
  %13581 = load i32, i32* %13580, align 4
  %13582 = add i32 %13581, %13576
  %13583 = zext i32 %13582 to i64
  store i64 %13583, i64* %RCX.i2028, align 8
  %13584 = icmp ult i32 %13582, %13576
  %13585 = icmp ult i32 %13582, %13581
  %13586 = or i1 %13584, %13585
  %13587 = zext i1 %13586 to i8
  store i8 %13587, i8* %14, align 1
  %13588 = and i32 %13582, 255
  %13589 = tail call i32 @llvm.ctpop.i32(i32 %13588)
  %13590 = trunc i32 %13589 to i8
  %13591 = and i8 %13590, 1
  %13592 = xor i8 %13591, 1
  store i8 %13592, i8* %21, align 1
  %13593 = xor i32 %13581, %13576
  %13594 = xor i32 %13593, %13582
  %13595 = lshr i32 %13594, 4
  %13596 = trunc i32 %13595 to i8
  %13597 = and i8 %13596, 1
  store i8 %13597, i8* %27, align 1
  %13598 = icmp eq i32 %13582, 0
  %13599 = zext i1 %13598 to i8
  store i8 %13599, i8* %30, align 1
  %13600 = lshr i32 %13582, 31
  %13601 = trunc i32 %13600 to i8
  store i8 %13601, i8* %33, align 1
  %13602 = lshr i32 %13576, 31
  %13603 = lshr i32 %13581, 31
  %13604 = xor i32 %13600, %13602
  %13605 = xor i32 %13600, %13603
  %13606 = add nuw nsw i32 %13604, %13605
  %13607 = icmp eq i32 %13606, 2
  %13608 = zext i1 %13607 to i8
  store i8 %13608, i8* %39, align 1
  %13609 = add i64 %13491, 41
  store i64 %13609, i64* %3, align 8
  store i32 %13582, i32* %13580, align 4
  %13610 = load i64, i64* %RBP.i, align 8
  %13611 = add i64 %13610, -28
  %13612 = load i64, i64* %3, align 8
  %13613 = add i64 %13612, 3
  store i64 %13613, i64* %3, align 8
  %13614 = inttoptr i64 %13611 to i32*
  %13615 = load i32, i32* %13614, align 4
  %13616 = zext i32 %13615 to i64
  store i64 %13616, i64* %RDI.i3890, align 8
  %13617 = add i64 %13612, -57097
  %13618 = add i64 %13612, 8
  %13619 = load i64, i64* %6, align 8
  %13620 = add i64 %13619, -8
  %13621 = inttoptr i64 %13620 to i64*
  store i64 %13618, i64* %13621, align 8
  store i64 %13620, i64* %6, align 8
  store i64 %13617, i64* %3, align 8
  %13622 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.54)
  %13623 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RDX.i4840, align 8
  %13624 = load i64, i64* %RBP.i, align 8
  %13625 = add i64 %13624, -460
  %13626 = add i64 %13623, 17
  store i64 %13626, i64* %3, align 8
  %13627 = inttoptr i64 %13625 to i32*
  %13628 = load i32, i32* %13627, align 4
  %13629 = sext i32 %13628 to i64
  %13630 = shl nsw i64 %13629, 6
  store i64 %13630, i64* %RSI.i2426, align 8
  %13631 = add i64 %13630, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %13631, i64* %RDX.i4840, align 8
  %13632 = icmp ult i64 %13631, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %13633 = icmp ult i64 %13631, %13630
  %13634 = or i1 %13632, %13633
  %13635 = zext i1 %13634 to i8
  store i8 %13635, i8* %14, align 1
  %13636 = trunc i64 %13631 to i32
  %13637 = and i32 %13636, 248
  %13638 = tail call i32 @llvm.ctpop.i32(i32 %13637)
  %13639 = trunc i32 %13638 to i8
  %13640 = and i8 %13639, 1
  %13641 = xor i8 %13640, 1
  store i8 %13641, i8* %21, align 1
  %13642 = xor i64 %13631, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %13643 = lshr i64 %13642, 4
  %13644 = trunc i64 %13643 to i8
  %13645 = and i8 %13644, 1
  store i8 %13645, i8* %27, align 1
  %13646 = icmp eq i64 %13631, 0
  %13647 = zext i1 %13646 to i8
  store i8 %13647, i8* %30, align 1
  %13648 = lshr i64 %13631, 63
  %13649 = trunc i64 %13648 to i8
  store i8 %13649, i8* %33, align 1
  %13650 = lshr i64 %13629, 57
  %13651 = and i64 %13650, 1
  %13652 = xor i64 %13648, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %13653 = xor i64 %13648, %13651
  %13654 = add nuw nsw i64 %13652, %13653
  %13655 = icmp eq i64 %13654, 2
  %13656 = zext i1 %13655 to i8
  store i8 %13656, i8* %39, align 1
  %13657 = add i64 %13624, -12
  %13658 = add i64 %13623, 28
  store i64 %13658, i64* %3, align 8
  %13659 = inttoptr i64 %13657 to i32*
  %13660 = load i32, i32* %13659, align 4
  %13661 = sext i32 %13660 to i64
  %13662 = shl nsw i64 %13661, 4
  store i64 %13662, i64* %RSI.i2426, align 8
  %13663 = add i64 %13662, %13631
  store i64 %13663, i64* %RDX.i4840, align 8
  %13664 = icmp ult i64 %13663, %13631
  %13665 = icmp ult i64 %13663, %13662
  %13666 = or i1 %13664, %13665
  %13667 = zext i1 %13666 to i8
  store i8 %13667, i8* %14, align 1
  %13668 = trunc i64 %13663 to i32
  %13669 = and i32 %13668, 248
  %13670 = tail call i32 @llvm.ctpop.i32(i32 %13669)
  %13671 = trunc i32 %13670 to i8
  %13672 = and i8 %13671, 1
  %13673 = xor i8 %13672, 1
  store i8 %13673, i8* %21, align 1
  %13674 = xor i64 %13662, %13631
  %13675 = xor i64 %13674, %13663
  %13676 = lshr i64 %13675, 4
  %13677 = trunc i64 %13676 to i8
  %13678 = and i8 %13677, 1
  store i8 %13678, i8* %27, align 1
  %13679 = icmp eq i64 %13663, 0
  %13680 = zext i1 %13679 to i8
  store i8 %13680, i8* %30, align 1
  %13681 = lshr i64 %13663, 63
  %13682 = trunc i64 %13681 to i8
  store i8 %13682, i8* %33, align 1
  %13683 = lshr i64 %13661, 59
  %13684 = and i64 %13683, 1
  %13685 = xor i64 %13681, %13648
  %13686 = xor i64 %13681, %13684
  %13687 = add nuw nsw i64 %13685, %13686
  %13688 = icmp eq i64 %13687, 2
  %13689 = zext i1 %13688 to i8
  store i8 %13689, i8* %39, align 1
  %13690 = load i64, i64* %RBP.i, align 8
  %13691 = add i64 %13690, -16
  %13692 = add i64 %13623, 39
  store i64 %13692, i64* %3, align 8
  %13693 = inttoptr i64 %13691 to i32*
  %13694 = load i32, i32* %13693, align 4
  %13695 = sext i32 %13694 to i64
  store i64 %13695, i64* %RSI.i2426, align 8
  %13696 = load i64, i64* %RAX.i1862, align 8
  %13697 = shl nsw i64 %13695, 2
  %13698 = add i64 %13663, %13697
  %13699 = add i64 %13623, 43
  store i64 %13699, i64* %3, align 8
  %13700 = inttoptr i64 %13698 to i32*
  %13701 = load i32, i32* %13700, align 4
  %13702 = shl i64 %13696, 32
  %13703 = ashr exact i64 %13702, 32
  %13704 = sext i32 %13701 to i64
  %13705 = mul nsw i64 %13704, %13703
  %13706 = trunc i64 %13705 to i32
  %13707 = and i64 %13705, 4294967295
  store i64 %13707, i64* %RAX.i1862, align 8
  %13708 = shl i64 %13705, 32
  %13709 = ashr exact i64 %13708, 32
  %13710 = icmp ne i64 %13709, %13705
  %13711 = zext i1 %13710 to i8
  store i8 %13711, i8* %14, align 1
  %13712 = and i32 %13706, 255
  %13713 = tail call i32 @llvm.ctpop.i32(i32 %13712)
  %13714 = trunc i32 %13713 to i8
  %13715 = and i8 %13714, 1
  %13716 = xor i8 %13715, 1
  store i8 %13716, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %13717 = lshr i32 %13706, 31
  %13718 = trunc i32 %13717 to i8
  store i8 %13718, i8* %33, align 1
  store i8 %13711, i8* %39, align 1
  %13719 = add i64 %13690, -404
  %13720 = add i64 %13623, 49
  store i64 %13720, i64* %3, align 8
  %13721 = trunc i64 %13705 to i32
  %13722 = inttoptr i64 %13719 to i32*
  %13723 = load i32, i32* %13722, align 4
  %13724 = add i32 %13723, %13721
  %13725 = zext i32 %13724 to i64
  store i64 %13725, i64* %RAX.i1862, align 8
  %13726 = icmp ult i32 %13724, %13721
  %13727 = icmp ult i32 %13724, %13723
  %13728 = or i1 %13726, %13727
  %13729 = zext i1 %13728 to i8
  store i8 %13729, i8* %14, align 1
  %13730 = and i32 %13724, 255
  %13731 = tail call i32 @llvm.ctpop.i32(i32 %13730)
  %13732 = trunc i32 %13731 to i8
  %13733 = and i8 %13732, 1
  %13734 = xor i8 %13733, 1
  store i8 %13734, i8* %21, align 1
  %13735 = xor i32 %13723, %13721
  %13736 = xor i32 %13735, %13724
  %13737 = lshr i32 %13736, 4
  %13738 = trunc i32 %13737 to i8
  %13739 = and i8 %13738, 1
  store i8 %13739, i8* %27, align 1
  %13740 = icmp eq i32 %13724, 0
  %13741 = zext i1 %13740 to i8
  store i8 %13741, i8* %30, align 1
  %13742 = lshr i32 %13724, 31
  %13743 = trunc i32 %13742 to i8
  store i8 %13743, i8* %33, align 1
  %13744 = lshr i32 %13721, 31
  %13745 = lshr i32 %13723, 31
  %13746 = xor i32 %13742, %13744
  %13747 = xor i32 %13742, %13745
  %13748 = add nuw nsw i32 %13746, %13747
  %13749 = icmp eq i32 %13748, 2
  %13750 = zext i1 %13749 to i8
  store i8 %13750, i8* %39, align 1
  %13751 = add i64 %13690, -464
  %13752 = add i64 %13623, 55
  store i64 %13752, i64* %3, align 8
  %13753 = inttoptr i64 %13751 to i32*
  %13754 = load i32, i32* %13753, align 4
  %13755 = zext i32 %13754 to i64
  store i64 %13755, i64* %RCX.i2028, align 8
  %13756 = add i64 %13623, 57
  store i64 %13756, i64* %3, align 8
  %13757 = trunc i32 %13754 to i5
  switch i5 %13757, label %13761 [
    i5 0, label %routine_sarl__cl___eax.exit
    i5 1, label %13758
  ]

; <label>:13758:                                  ; preds = %block_.L_40eee0
  %13759 = shl nuw i64 %13725, 32
  %13760 = ashr i64 %13759, 33
  br label %13768

; <label>:13761:                                  ; preds = %block_.L_40eee0
  %13762 = and i32 %13754, 31
  %13763 = zext i32 %13762 to i64
  %13764 = add nsw i64 %13763, -1
  %13765 = sext i32 %13724 to i64
  %13766 = ashr i64 %13765, %13764
  %13767 = lshr i64 %13766, 1
  br label %13768

; <label>:13768:                                  ; preds = %13761, %13758
  %13769 = phi i64 [ %13767, %13761 ], [ %13760, %13758 ]
  %13770 = phi i64 [ %13766, %13761 ], [ %13725, %13758 ]
  %13771 = trunc i64 %13770 to i8
  %13772 = and i8 %13771, 1
  %13773 = trunc i64 %13769 to i32
  %13774 = and i64 %13769, 4294967295
  store i64 %13774, i64* %RAX.i1862, align 8
  store i8 %13772, i8* %14, align 1
  %13775 = and i32 %13773, 255
  %13776 = tail call i32 @llvm.ctpop.i32(i32 %13775)
  %13777 = trunc i32 %13776 to i8
  %13778 = and i8 %13777, 1
  %13779 = xor i8 %13778, 1
  store i8 %13779, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %13780 = icmp eq i32 %13773, 0
  %13781 = zext i1 %13780 to i8
  store i8 %13781, i8* %30, align 1
  %13782 = lshr i32 %13773, 31
  %13783 = trunc i32 %13782 to i8
  store i8 %13783, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %13784 = trunc i64 %13769 to i32
  br label %routine_sarl__cl___eax.exit

routine_sarl__cl___eax.exit:                      ; preds = %13768, %block_.L_40eee0
  %13785 = phi i32 [ %13784, %13768 ], [ %13724, %block_.L_40eee0 ]
  %13786 = add i64 %13690, -28
  %13787 = add i64 %13623, 60
  store i64 %13787, i64* %3, align 8
  %13788 = inttoptr i64 %13786 to i32*
  %13789 = load i32, i32* %13788, align 4
  %13790 = zext i32 %13789 to i64
  store i64 %13790, i64* %RSI.i2426, align 8
  %13791 = zext i32 %13785 to i64
  store i64 %13791, i64* %RDI.i3890, align 8
  %13792 = add i64 %13623, 418367
  %13793 = add i64 %13623, 67
  %13794 = load i64, i64* %6, align 8
  %13795 = add i64 %13794, -8
  %13796 = inttoptr i64 %13795 to i64*
  store i64 %13793, i64* %13796, align 8
  store i64 %13795, i64* %6, align 8
  store i64 %13792, i64* %3, align 8
  %call2_40ef4f = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %13792, %struct.Memory* %13622)
  %13797 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %RDX.i4840, align 8
  %13798 = load i64, i64* %RBP.i, align 8
  %13799 = add i64 %13798, -460
  %13800 = add i64 %13797, 17
  store i64 %13800, i64* %3, align 8
  %13801 = inttoptr i64 %13799 to i32*
  %13802 = load i32, i32* %13801, align 4
  %13803 = sext i32 %13802 to i64
  %13804 = shl nsw i64 %13803, 6
  store i64 %13804, i64* %R8.i3081, align 8
  %13805 = add i64 %13804, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %13805, i64* %RDX.i4840, align 8
  %13806 = icmp ult i64 %13805, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %13807 = icmp ult i64 %13805, %13804
  %13808 = or i1 %13806, %13807
  %13809 = zext i1 %13808 to i8
  store i8 %13809, i8* %14, align 1
  %13810 = trunc i64 %13805 to i32
  %13811 = and i32 %13810, 248
  %13812 = tail call i32 @llvm.ctpop.i32(i32 %13811)
  %13813 = trunc i32 %13812 to i8
  %13814 = and i8 %13813, 1
  %13815 = xor i8 %13814, 1
  store i8 %13815, i8* %21, align 1
  %13816 = xor i64 %13805, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %13817 = lshr i64 %13816, 4
  %13818 = trunc i64 %13817 to i8
  %13819 = and i8 %13818, 1
  store i8 %13819, i8* %27, align 1
  %13820 = icmp eq i64 %13805, 0
  %13821 = zext i1 %13820 to i8
  store i8 %13821, i8* %30, align 1
  %13822 = lshr i64 %13805, 63
  %13823 = trunc i64 %13822 to i8
  store i8 %13823, i8* %33, align 1
  %13824 = lshr i64 %13803, 57
  %13825 = and i64 %13824, 1
  %13826 = xor i64 %13822, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %13827 = xor i64 %13822, %13825
  %13828 = add nuw nsw i64 %13826, %13827
  %13829 = icmp eq i64 %13828, 2
  %13830 = zext i1 %13829 to i8
  store i8 %13830, i8* %39, align 1
  %13831 = add i64 %13798, -12
  %13832 = add i64 %13797, 28
  store i64 %13832, i64* %3, align 8
  %13833 = inttoptr i64 %13831 to i32*
  %13834 = load i32, i32* %13833, align 4
  %13835 = sext i32 %13834 to i64
  %13836 = shl nsw i64 %13835, 4
  store i64 %13836, i64* %R8.i3081, align 8
  %13837 = add i64 %13836, %13805
  store i64 %13837, i64* %RDX.i4840, align 8
  %13838 = icmp ult i64 %13837, %13805
  %13839 = icmp ult i64 %13837, %13836
  %13840 = or i1 %13838, %13839
  %13841 = zext i1 %13840 to i8
  store i8 %13841, i8* %14, align 1
  %13842 = trunc i64 %13837 to i32
  %13843 = and i32 %13842, 248
  %13844 = tail call i32 @llvm.ctpop.i32(i32 %13843)
  %13845 = trunc i32 %13844 to i8
  %13846 = and i8 %13845, 1
  %13847 = xor i8 %13846, 1
  store i8 %13847, i8* %21, align 1
  %13848 = xor i64 %13836, %13805
  %13849 = xor i64 %13848, %13837
  %13850 = lshr i64 %13849, 4
  %13851 = trunc i64 %13850 to i8
  %13852 = and i8 %13851, 1
  store i8 %13852, i8* %27, align 1
  %13853 = icmp eq i64 %13837, 0
  %13854 = zext i1 %13853 to i8
  store i8 %13854, i8* %30, align 1
  %13855 = lshr i64 %13837, 63
  %13856 = trunc i64 %13855 to i8
  store i8 %13856, i8* %33, align 1
  %13857 = lshr i64 %13835, 59
  %13858 = and i64 %13857, 1
  %13859 = xor i64 %13855, %13822
  %13860 = xor i64 %13855, %13858
  %13861 = add nuw nsw i64 %13859, %13860
  %13862 = icmp eq i64 %13861, 2
  %13863 = zext i1 %13862 to i8
  store i8 %13863, i8* %39, align 1
  %13864 = load i64, i64* %RBP.i, align 8
  %13865 = add i64 %13864, -16
  %13866 = add i64 %13797, 39
  store i64 %13866, i64* %3, align 8
  %13867 = inttoptr i64 %13865 to i32*
  %13868 = load i32, i32* %13867, align 4
  %13869 = sext i32 %13868 to i64
  store i64 %13869, i64* %R8.i3081, align 8
  %13870 = load i64, i64* %RAX.i1862, align 8
  %13871 = shl nsw i64 %13869, 2
  %13872 = add i64 %13837, %13871
  %13873 = add i64 %13797, 44
  store i64 %13873, i64* %3, align 8
  %13874 = inttoptr i64 %13872 to i32*
  %13875 = load i32, i32* %13874, align 4
  %13876 = shl i64 %13870, 32
  %13877 = ashr exact i64 %13876, 32
  %13878 = sext i32 %13875 to i64
  %13879 = mul nsw i64 %13878, %13877
  %13880 = trunc i64 %13879 to i32
  %13881 = and i64 %13879, 4294967295
  store i64 %13881, i64* %RAX.i1862, align 8
  %13882 = shl i64 %13879, 32
  %13883 = ashr exact i64 %13882, 32
  %13884 = icmp ne i64 %13883, %13879
  %13885 = zext i1 %13884 to i8
  store i8 %13885, i8* %14, align 1
  %13886 = and i32 %13880, 255
  %13887 = tail call i32 @llvm.ctpop.i32(i32 %13886)
  %13888 = trunc i32 %13887 to i8
  %13889 = and i8 %13888, 1
  %13890 = xor i8 %13889, 1
  store i8 %13890, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %13891 = lshr i32 %13880, 31
  %13892 = trunc i32 %13891 to i8
  store i8 %13892, i8* %33, align 1
  store i8 %13885, i8* %39, align 1
  %13893 = add i64 %13864, -456
  %13894 = add i64 %13797, 50
  store i64 %13894, i64* %3, align 8
  %13895 = inttoptr i64 %13893 to i32*
  %13896 = load i32, i32* %13895, align 4
  %13897 = zext i32 %13896 to i64
  store i64 %13897, i64* %RCX.i2028, align 8
  %13898 = add i64 %13797, 52
  store i64 %13898, i64* %3, align 8
  %13899 = trunc i32 %13896 to i5
  switch i5 %13899, label %13906 [
    i5 0, label %routine_shll__cl___eax.exit
    i5 1, label %13900
  ]

; <label>:13900:                                  ; preds = %routine_sarl__cl___eax.exit
  %13901 = trunc i64 %13879 to i32
  %13902 = shl i32 %13901, 1
  %13903 = icmp slt i32 %13901, 0
  %13904 = icmp slt i32 %13902, 0
  %13905 = xor i1 %13903, %13904
  br label %13915

; <label>:13906:                                  ; preds = %routine_sarl__cl___eax.exit
  %13907 = and i32 %13896, 31
  %13908 = zext i32 %13907 to i64
  %13909 = add nuw nsw i64 %13908, 4294967295
  %13910 = and i64 %13909, 4294967295
  %13911 = shl i64 %13881, %13910
  %13912 = trunc i64 %13911 to i32
  %13913 = icmp slt i32 %13912, 0
  %13914 = shl i32 %13912, 1
  br label %13915

; <label>:13915:                                  ; preds = %13906, %13900
  %13916 = phi i1 [ %13903, %13900 ], [ %13913, %13906 ]
  %13917 = phi i1 [ %13905, %13900 ], [ false, %13906 ]
  %13918 = phi i32 [ %13902, %13900 ], [ %13914, %13906 ]
  %13919 = zext i32 %13918 to i64
  store i64 %13919, i64* %RAX.i1862, align 8
  %13920 = zext i1 %13916 to i8
  store i8 %13920, i8* %14, align 1
  %13921 = and i32 %13918, 254
  %13922 = tail call i32 @llvm.ctpop.i32(i32 %13921)
  %13923 = trunc i32 %13922 to i8
  %13924 = and i8 %13923, 1
  %13925 = xor i8 %13924, 1
  store i8 %13925, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %13926 = icmp eq i32 %13918, 0
  %13927 = zext i1 %13926 to i8
  store i8 %13927, i8* %30, align 1
  %13928 = lshr i32 %13918, 31
  %13929 = trunc i32 %13928 to i8
  store i8 %13929, i8* %33, align 1
  %13930 = zext i1 %13917 to i8
  store i8 %13930, i8* %39, align 1
  br label %routine_shll__cl___eax.exit

routine_shll__cl___eax.exit:                      ; preds = %13915, %routine_sarl__cl___eax.exit
  %13931 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %13932 = add i64 %13931, 13112
  store i64 %13932, i64* %RDX.i4840, align 8
  %13933 = icmp ugt i64 %13931, -13113
  %13934 = zext i1 %13933 to i8
  store i8 %13934, i8* %14, align 1
  %13935 = trunc i64 %13932 to i32
  %13936 = and i32 %13935, 255
  %13937 = tail call i32 @llvm.ctpop.i32(i32 %13936)
  %13938 = trunc i32 %13937 to i8
  %13939 = and i8 %13938, 1
  %13940 = xor i8 %13939, 1
  store i8 %13940, i8* %21, align 1
  %13941 = xor i64 %13931, 16
  %13942 = xor i64 %13941, %13932
  %13943 = lshr i64 %13942, 4
  %13944 = trunc i64 %13943 to i8
  %13945 = and i8 %13944, 1
  store i8 %13945, i8* %27, align 1
  %13946 = icmp eq i64 %13932, 0
  %13947 = zext i1 %13946 to i8
  store i8 %13947, i8* %30, align 1
  %13948 = lshr i64 %13932, 63
  %13949 = trunc i64 %13948 to i8
  store i8 %13949, i8* %33, align 1
  %13950 = lshr i64 %13931, 63
  %13951 = xor i64 %13948, %13950
  %13952 = add nuw nsw i64 %13951, %13948
  %13953 = icmp eq i64 %13952, 2
  %13954 = zext i1 %13953 to i8
  store i8 %13954, i8* %39, align 1
  %13955 = add i64 %13864, -36
  %13956 = add i64 %13797, 70
  store i64 %13956, i64* %3, align 8
  %13957 = inttoptr i64 %13955 to i32*
  %13958 = load i32, i32* %13957, align 4
  %13959 = zext i32 %13958 to i64
  store i64 %13959, i64* %RSI.i2426, align 8
  %13960 = add i64 %13864, -12
  %13961 = add i64 %13797, 73
  store i64 %13961, i64* %3, align 8
  %13962 = inttoptr i64 %13960 to i32*
  %13963 = load i32, i32* %13962, align 4
  %13964 = add i32 %13963, %13958
  %13965 = zext i32 %13964 to i64
  store i64 %13965, i64* %RSI.i2426, align 8
  %13966 = sext i32 %13964 to i64
  %13967 = shl nsw i64 %13966, 6
  store i64 %13967, i64* %R8.i3081, align 8
  %13968 = load i64, i64* %RDX.i4840, align 8
  %13969 = add i64 %13967, %13968
  store i64 %13969, i64* %RDX.i4840, align 8
  %13970 = icmp ult i64 %13969, %13968
  %13971 = icmp ult i64 %13969, %13967
  %13972 = or i1 %13970, %13971
  %13973 = zext i1 %13972 to i8
  store i8 %13973, i8* %14, align 1
  %13974 = trunc i64 %13969 to i32
  %13975 = and i32 %13974, 255
  %13976 = tail call i32 @llvm.ctpop.i32(i32 %13975)
  %13977 = trunc i32 %13976 to i8
  %13978 = and i8 %13977, 1
  %13979 = xor i8 %13978, 1
  store i8 %13979, i8* %21, align 1
  %13980 = xor i64 %13968, %13969
  %13981 = lshr i64 %13980, 4
  %13982 = trunc i64 %13981 to i8
  %13983 = and i8 %13982, 1
  store i8 %13983, i8* %27, align 1
  %13984 = icmp eq i64 %13969, 0
  %13985 = zext i1 %13984 to i8
  store i8 %13985, i8* %30, align 1
  %13986 = lshr i64 %13969, 63
  %13987 = trunc i64 %13986 to i8
  store i8 %13987, i8* %33, align 1
  %13988 = lshr i64 %13968, 63
  %13989 = lshr i64 %13966, 57
  %13990 = and i64 %13989, 1
  %13991 = xor i64 %13986, %13988
  %13992 = xor i64 %13986, %13990
  %13993 = add nuw nsw i64 %13991, %13992
  %13994 = icmp eq i64 %13993, 2
  %13995 = zext i1 %13994 to i8
  store i8 %13995, i8* %39, align 1
  %13996 = load i64, i64* %RBP.i, align 8
  %13997 = add i64 %13996, -32
  %13998 = add i64 %13797, 86
  store i64 %13998, i64* %3, align 8
  %13999 = inttoptr i64 %13997 to i32*
  %14000 = load i32, i32* %13999, align 4
  %14001 = zext i32 %14000 to i64
  store i64 %14001, i64* %RSI.i2426, align 8
  %14002 = add i64 %13996, -16
  %14003 = add i64 %13797, 89
  store i64 %14003, i64* %3, align 8
  %14004 = inttoptr i64 %14002 to i32*
  %14005 = load i32, i32* %14004, align 4
  %14006 = add i32 %14005, %14000
  %14007 = zext i32 %14006 to i64
  store i64 %14007, i64* %RSI.i2426, align 8
  %14008 = icmp ult i32 %14006, %14000
  %14009 = icmp ult i32 %14006, %14005
  %14010 = or i1 %14008, %14009
  %14011 = zext i1 %14010 to i8
  store i8 %14011, i8* %14, align 1
  %14012 = and i32 %14006, 255
  %14013 = tail call i32 @llvm.ctpop.i32(i32 %14012)
  %14014 = trunc i32 %14013 to i8
  %14015 = and i8 %14014, 1
  %14016 = xor i8 %14015, 1
  store i8 %14016, i8* %21, align 1
  %14017 = xor i32 %14005, %14000
  %14018 = xor i32 %14017, %14006
  %14019 = lshr i32 %14018, 4
  %14020 = trunc i32 %14019 to i8
  %14021 = and i8 %14020, 1
  store i8 %14021, i8* %27, align 1
  %14022 = icmp eq i32 %14006, 0
  %14023 = zext i1 %14022 to i8
  store i8 %14023, i8* %30, align 1
  %14024 = lshr i32 %14006, 31
  %14025 = trunc i32 %14024 to i8
  store i8 %14025, i8* %33, align 1
  %14026 = lshr i32 %14000, 31
  %14027 = lshr i32 %14005, 31
  %14028 = xor i32 %14024, %14026
  %14029 = xor i32 %14024, %14027
  %14030 = add nuw nsw i32 %14028, %14029
  %14031 = icmp eq i32 %14030, 2
  %14032 = zext i1 %14031 to i8
  store i8 %14032, i8* %39, align 1
  %14033 = sext i32 %14006 to i64
  store i64 %14033, i64* %R8.i3081, align 8
  %14034 = shl nsw i64 %14033, 2
  %14035 = add i64 %13969, %14034
  %14036 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %14037 = add i64 %13797, 96
  store i64 %14037, i64* %3, align 8
  %14038 = inttoptr i64 %14035 to i32*
  store i32 %14036, i32* %14038, align 4
  %14039 = load i64, i64* %RBP.i, align 8
  %14040 = add i64 %14039, -48
  %14041 = load i64, i64* %3, align 8
  %14042 = add i64 %14041, 3
  store i64 %14042, i64* %3, align 8
  %14043 = inttoptr i64 %14040 to i32*
  %14044 = load i32, i32* %14043, align 4
  %14045 = add i32 %14044, 1
  %14046 = zext i32 %14045 to i64
  store i64 %14046, i64* %RAX.i1862, align 8
  %14047 = icmp eq i32 %14044, -1
  %14048 = icmp eq i32 %14045, 0
  %14049 = or i1 %14047, %14048
  %14050 = zext i1 %14049 to i8
  store i8 %14050, i8* %14, align 1
  %14051 = and i32 %14045, 255
  %14052 = tail call i32 @llvm.ctpop.i32(i32 %14051)
  %14053 = trunc i32 %14052 to i8
  %14054 = and i8 %14053, 1
  %14055 = xor i8 %14054, 1
  store i8 %14055, i8* %21, align 1
  %14056 = xor i32 %14045, %14044
  %14057 = lshr i32 %14056, 4
  %14058 = trunc i32 %14057 to i8
  %14059 = and i8 %14058, 1
  store i8 %14059, i8* %27, align 1
  %14060 = zext i1 %14048 to i8
  store i8 %14060, i8* %30, align 1
  %14061 = lshr i32 %14045, 31
  %14062 = trunc i32 %14061 to i8
  store i8 %14062, i8* %33, align 1
  %14063 = lshr i32 %14044, 31
  %14064 = xor i32 %14061, %14063
  %14065 = add nuw nsw i32 %14064, %14061
  %14066 = icmp eq i32 %14065, 2
  %14067 = zext i1 %14066 to i8
  store i8 %14067, i8* %39, align 1
  %14068 = add i64 %14041, 9
  store i64 %14068, i64* %3, align 8
  store i32 %14045, i32* %14043, align 4
  %14069 = load i64, i64* %3, align 8
  %14070 = add i64 %14069, -2218
  store i64 %14070, i64* %3, align 8
  br label %block_.L_40e713

block_.L_40efc2:                                  ; preds = %block_.L_40e713
  %14071 = add i64 %9871, -496
  %14072 = add i64 %9900, 7
  store i64 %14072, i64* %3, align 8
  %14073 = inttoptr i64 %14071 to i64*
  %14074 = load i64, i64* %14073, align 8
  store i64 %14074, i64* %RAX.i1862, align 8
  %14075 = add i64 %9871, -64
  %14076 = add i64 %9900, 11
  store i64 %14076, i64* %3, align 8
  %14077 = inttoptr i64 %14075 to i32*
  %14078 = load i32, i32* %14077, align 4
  %14079 = sext i32 %14078 to i64
  store i64 %14079, i64* %RCX.i2028, align 8
  %14080 = shl nsw i64 %14079, 2
  %14081 = add i64 %14080, %14074
  %14082 = add i64 %9900, 18
  store i64 %14082, i64* %3, align 8
  %14083 = inttoptr i64 %14081 to i32*
  store i32 0, i32* %14083, align 4
  %14084 = load i64, i64* %RBP.i, align 8
  %14085 = add i64 %14084, -36
  %14086 = load i64, i64* %3, align 8
  %14087 = add i64 %14086, 3
  store i64 %14087, i64* %3, align 8
  %14088 = inttoptr i64 %14085 to i32*
  %14089 = load i32, i32* %14088, align 4
  %14090 = add i32 %14089, 4
  %14091 = zext i32 %14090 to i64
  store i64 %14091, i64* %RAX.i1862, align 8
  %14092 = icmp ugt i32 %14089, -5
  %14093 = zext i1 %14092 to i8
  store i8 %14093, i8* %14, align 1
  %14094 = and i32 %14090, 255
  %14095 = tail call i32 @llvm.ctpop.i32(i32 %14094)
  %14096 = trunc i32 %14095 to i8
  %14097 = and i8 %14096, 1
  %14098 = xor i8 %14097, 1
  store i8 %14098, i8* %21, align 1
  %14099 = xor i32 %14090, %14089
  %14100 = lshr i32 %14099, 4
  %14101 = trunc i32 %14100 to i8
  %14102 = and i8 %14101, 1
  store i8 %14102, i8* %27, align 1
  %14103 = icmp eq i32 %14090, 0
  %14104 = zext i1 %14103 to i8
  store i8 %14104, i8* %30, align 1
  %14105 = lshr i32 %14090, 31
  %14106 = trunc i32 %14105 to i8
  store i8 %14106, i8* %33, align 1
  %14107 = lshr i32 %14089, 31
  %14108 = xor i32 %14105, %14107
  %14109 = add nuw nsw i32 %14108, %14105
  %14110 = icmp eq i32 %14109, 2
  %14111 = zext i1 %14110 to i8
  store i8 %14111, i8* %39, align 1
  %14112 = add i64 %14086, 9
  store i64 %14112, i64* %3, align 8
  store i32 %14090, i32* %14088, align 4
  %14113 = load i64, i64* %3, align 8
  %14114 = add i64 %14113, -2436
  store i64 %14114, i64* %3, align 8
  br label %block_.L_40e659

block_.L_40efe2:                                  ; preds = %block_.L_40e659
  %14115 = add i64 %9592, -32
  %14116 = add i64 %9620, 8
  store i64 %14116, i64* %3, align 8
  %14117 = inttoptr i64 %14115 to i32*
  %14118 = load i32, i32* %14117, align 4
  %14119 = add i32 %14118, 4
  %14120 = zext i32 %14119 to i64
  store i64 %14120, i64* %RAX.i1862, align 8
  %14121 = icmp ugt i32 %14118, -5
  %14122 = zext i1 %14121 to i8
  store i8 %14122, i8* %14, align 1
  %14123 = and i32 %14119, 255
  %14124 = tail call i32 @llvm.ctpop.i32(i32 %14123)
  %14125 = trunc i32 %14124 to i8
  %14126 = and i8 %14125, 1
  %14127 = xor i8 %14126, 1
  store i8 %14127, i8* %21, align 1
  %14128 = xor i32 %14119, %14118
  %14129 = lshr i32 %14128, 4
  %14130 = trunc i32 %14129 to i8
  %14131 = and i8 %14130, 1
  store i8 %14131, i8* %27, align 1
  %14132 = icmp eq i32 %14119, 0
  %14133 = zext i1 %14132 to i8
  store i8 %14133, i8* %30, align 1
  %14134 = lshr i32 %14119, 31
  %14135 = trunc i32 %14134 to i8
  store i8 %14135, i8* %33, align 1
  %14136 = lshr i32 %14118, 31
  %14137 = xor i32 %14134, %14136
  %14138 = add nuw nsw i32 %14137, %14134
  %14139 = icmp eq i32 %14138, 2
  %14140 = zext i1 %14139 to i8
  store i8 %14140, i8* %39, align 1
  %14141 = add i64 %9620, 14
  store i64 %14141, i64* %3, align 8
  store i32 %14119, i32* %14117, align 4
  %14142 = load i64, i64* %3, align 8
  %14143 = add i64 %14142, -2472
  store i64 %14143, i64* %3, align 8
  br label %block_.L_40e648

block_.L_40eff5:                                  ; preds = %block_.L_40e648
  %14144 = add i64 %9559, -136
  %14145 = add i64 %9587, 7
  store i64 %14145, i64* %3, align 8
  %14146 = inttoptr i64 %14144 to i32*
  %14147 = load i32, i32* %14146, align 4
  %14148 = add i32 %14147, -2
  %14149 = icmp ult i32 %14147, 2
  %14150 = zext i1 %14149 to i8
  store i8 %14150, i8* %14, align 1
  %14151 = and i32 %14148, 255
  %14152 = tail call i32 @llvm.ctpop.i32(i32 %14151)
  %14153 = trunc i32 %14152 to i8
  %14154 = and i8 %14153, 1
  %14155 = xor i8 %14154, 1
  store i8 %14155, i8* %21, align 1
  %14156 = xor i32 %14148, %14147
  %14157 = lshr i32 %14156, 4
  %14158 = trunc i32 %14157 to i8
  %14159 = and i8 %14158, 1
  store i8 %14159, i8* %27, align 1
  %14160 = icmp eq i32 %14148, 0
  %14161 = zext i1 %14160 to i8
  store i8 %14161, i8* %30, align 1
  %14162 = lshr i32 %14148, 31
  %14163 = trunc i32 %14162 to i8
  store i8 %14163, i8* %33, align 1
  %14164 = lshr i32 %14147, 31
  %14165 = xor i32 %14162, %14164
  %14166 = add nuw nsw i32 %14165, %14164
  %14167 = icmp eq i32 %14166, 2
  %14168 = zext i1 %14167 to i8
  store i8 %14168, i8* %39, align 1
  %.v383 = select i1 %14160, i64 13, i64 20
  %14169 = add i64 %9587, %.v383
  store i64 %14169, i64* %3, align 8
  br i1 %14160, label %block_40f002, label %block_.L_40f009

block_40f002:                                     ; preds = %block_.L_40eff5
  %14170 = add i64 %9559, -8
  %14171 = add i64 %14169, 7
  store i64 %14171, i64* %3, align 8
  %14172 = inttoptr i64 %14170 to i32*
  store i32 2, i32* %14172, align 4
  %.pre319 = load i64, i64* %RBP.i, align 8
  %.pre320 = load i64, i64* %3, align 8
  br label %block_.L_40f009

block_.L_40f009:                                  ; preds = %block_.L_40eff5, %block_40f002
  %14173 = phi i64 [ %.pre320, %block_40f002 ], [ %14169, %block_.L_40eff5 ]
  %14174 = phi i64 [ %.pre319, %block_40f002 ], [ %9559, %block_.L_40eff5 ]
  %14175 = add i64 %14174, -32
  %14176 = add i64 %14173, 7
  store i64 %14176, i64* %3, align 8
  %14177 = inttoptr i64 %14175 to i32*
  store i32 0, i32* %14177, align 4
  %.pre321 = load i64, i64* %3, align 8
  br label %block_.L_40f010

block_.L_40f010:                                  ; preds = %block_.L_40f46a, %block_.L_40f009
  %14178 = phi i64 [ %16470, %block_.L_40f46a ], [ %.pre321, %block_.L_40f009 ]
  %14179 = load i64, i64* %RBP.i, align 8
  %14180 = add i64 %14179, -32
  %14181 = add i64 %14178, 4
  store i64 %14181, i64* %3, align 8
  %14182 = inttoptr i64 %14180 to i32*
  %14183 = load i32, i32* %14182, align 4
  %14184 = add i32 %14183, -4
  %14185 = icmp ult i32 %14183, 4
  %14186 = zext i1 %14185 to i8
  store i8 %14186, i8* %14, align 1
  %14187 = and i32 %14184, 255
  %14188 = tail call i32 @llvm.ctpop.i32(i32 %14187)
  %14189 = trunc i32 %14188 to i8
  %14190 = and i8 %14189, 1
  %14191 = xor i8 %14190, 1
  store i8 %14191, i8* %21, align 1
  %14192 = xor i32 %14184, %14183
  %14193 = lshr i32 %14192, 4
  %14194 = trunc i32 %14193 to i8
  %14195 = and i8 %14194, 1
  store i8 %14195, i8* %27, align 1
  %14196 = icmp eq i32 %14184, 0
  %14197 = zext i1 %14196 to i8
  store i8 %14197, i8* %30, align 1
  %14198 = lshr i32 %14184, 31
  %14199 = trunc i32 %14198 to i8
  store i8 %14199, i8* %33, align 1
  %14200 = lshr i32 %14183, 31
  %14201 = xor i32 %14198, %14200
  %14202 = add nuw nsw i32 %14201, %14200
  %14203 = icmp eq i32 %14202, 2
  %14204 = zext i1 %14203 to i8
  store i8 %14204, i8* %39, align 1
  %14205 = icmp ne i8 %14199, 0
  %14206 = xor i1 %14205, %14203
  %.demorgan368 = or i1 %14196, %14206
  %.v384 = select i1 %.demorgan368, i64 10, i64 1133
  %14207 = add i64 %14178, %.v384
  store i64 %14207, i64* %3, align 8
  br i1 %.demorgan368, label %block_40f01a, label %block_.L_40f47d

block_40f01a:                                     ; preds = %block_.L_40f010
  %14208 = add i64 %14179, -36
  %14209 = add i64 %14207, 7
  store i64 %14209, i64* %3, align 8
  %14210 = inttoptr i64 %14208 to i32*
  store i32 0, i32* %14210, align 4
  %.pre322 = load i64, i64* %3, align 8
  br label %block_.L_40f021

block_.L_40f021:                                  ; preds = %block_.L_40f457, %block_40f01a
  %14211 = phi i64 [ %16441, %block_.L_40f457 ], [ %.pre322, %block_40f01a ]
  %14212 = load i64, i64* %RBP.i, align 8
  %14213 = add i64 %14212, -36
  %14214 = add i64 %14211, 4
  store i64 %14214, i64* %3, align 8
  %14215 = inttoptr i64 %14213 to i32*
  %14216 = load i32, i32* %14215, align 4
  %14217 = add i32 %14216, -4
  %14218 = icmp ult i32 %14216, 4
  %14219 = zext i1 %14218 to i8
  store i8 %14219, i8* %14, align 1
  %14220 = and i32 %14217, 255
  %14221 = tail call i32 @llvm.ctpop.i32(i32 %14220)
  %14222 = trunc i32 %14221 to i8
  %14223 = and i8 %14222, 1
  %14224 = xor i8 %14223, 1
  store i8 %14224, i8* %21, align 1
  %14225 = xor i32 %14217, %14216
  %14226 = lshr i32 %14225, 4
  %14227 = trunc i32 %14226 to i8
  %14228 = and i8 %14227, 1
  store i8 %14228, i8* %27, align 1
  %14229 = icmp eq i32 %14217, 0
  %14230 = zext i1 %14229 to i8
  store i8 %14230, i8* %30, align 1
  %14231 = lshr i32 %14217, 31
  %14232 = trunc i32 %14231 to i8
  store i8 %14232, i8* %33, align 1
  %14233 = lshr i32 %14216, 31
  %14234 = xor i32 %14231, %14233
  %14235 = add nuw nsw i32 %14234, %14233
  %14236 = icmp eq i32 %14235, 2
  %14237 = zext i1 %14236 to i8
  store i8 %14237, i8* %39, align 1
  %14238 = icmp ne i8 %14232, 0
  %14239 = xor i1 %14238, %14236
  %.demorgan369 = or i1 %14229, %14239
  %.v373 = select i1 %.demorgan369, i64 10, i64 1097
  %14240 = add i64 %14211, %.v373
  store i64 %14240, i64* %3, align 8
  br i1 %.demorgan369, label %block_40f02b, label %block_.L_40f46a

block_40f02b:                                     ; preds = %block_.L_40f021
  %14241 = add i64 %14212, -16
  %14242 = add i64 %14240, 7
  store i64 %14242, i64* %3, align 8
  %14243 = inttoptr i64 %14241 to i32*
  store i32 0, i32* %14243, align 4
  %.pre323 = load i64, i64* %3, align 8
  br label %block_.L_40f032

block_.L_40f032:                                  ; preds = %block_.L_40f159, %block_40f02b
  %14244 = phi i64 [ %15036, %block_.L_40f159 ], [ %.pre323, %block_40f02b ]
  %14245 = load i64, i64* %RBP.i, align 8
  %14246 = add i64 %14245, -16
  %14247 = add i64 %14244, 4
  store i64 %14247, i64* %3, align 8
  %14248 = inttoptr i64 %14246 to i32*
  %14249 = load i32, i32* %14248, align 4
  %14250 = add i32 %14249, -4
  %14251 = icmp ult i32 %14249, 4
  %14252 = zext i1 %14251 to i8
  store i8 %14252, i8* %14, align 1
  %14253 = and i32 %14250, 255
  %14254 = tail call i32 @llvm.ctpop.i32(i32 %14253)
  %14255 = trunc i32 %14254 to i8
  %14256 = and i8 %14255, 1
  %14257 = xor i8 %14256, 1
  store i8 %14257, i8* %21, align 1
  %14258 = xor i32 %14250, %14249
  %14259 = lshr i32 %14258, 4
  %14260 = trunc i32 %14259 to i8
  %14261 = and i8 %14260, 1
  store i8 %14261, i8* %27, align 1
  %14262 = icmp eq i32 %14250, 0
  %14263 = zext i1 %14262 to i8
  store i8 %14263, i8* %30, align 1
  %14264 = lshr i32 %14250, 31
  %14265 = trunc i32 %14264 to i8
  store i8 %14265, i8* %33, align 1
  %14266 = lshr i32 %14249, 31
  %14267 = xor i32 %14264, %14266
  %14268 = add nuw nsw i32 %14267, %14266
  %14269 = icmp eq i32 %14268, 2
  %14270 = zext i1 %14269 to i8
  store i8 %14270, i8* %39, align 1
  %14271 = icmp ne i8 %14265, 0
  %14272 = xor i1 %14271, %14269
  %.v370 = select i1 %14272, i64 10, i64 314
  %14273 = add i64 %14244, %.v370
  %14274 = add i64 %14245, -12
  %14275 = add i64 %14273, 7
  store i64 %14275, i64* %3, align 8
  %14276 = inttoptr i64 %14274 to i32*
  store i32 0, i32* %14276, align 4
  %.pre333 = load i64, i64* %3, align 8
  br i1 %14272, label %block_.L_40f043.preheader, label %block_.L_40f173.preheader

block_.L_40f173.preheader:                        ; preds = %block_.L_40f032
  br label %block_.L_40f173

block_.L_40f043.preheader:                        ; preds = %block_.L_40f032
  br label %block_.L_40f043

block_.L_40f043:                                  ; preds = %block_.L_40f043.preheader, %block_40f04d
  %14277 = phi i64 [ %14455, %block_40f04d ], [ %.pre333, %block_.L_40f043.preheader ]
  %14278 = load i64, i64* %RBP.i, align 8
  %14279 = add i64 %14278, -12
  %14280 = add i64 %14277, 4
  store i64 %14280, i64* %3, align 8
  %14281 = inttoptr i64 %14279 to i32*
  %14282 = load i32, i32* %14281, align 4
  %14283 = add i32 %14282, -4
  %14284 = icmp ult i32 %14282, 4
  %14285 = zext i1 %14284 to i8
  store i8 %14285, i8* %14, align 1
  %14286 = and i32 %14283, 255
  %14287 = tail call i32 @llvm.ctpop.i32(i32 %14286)
  %14288 = trunc i32 %14287 to i8
  %14289 = and i8 %14288, 1
  %14290 = xor i8 %14289, 1
  store i8 %14290, i8* %21, align 1
  %14291 = xor i32 %14283, %14282
  %14292 = lshr i32 %14291, 4
  %14293 = trunc i32 %14292 to i8
  %14294 = and i8 %14293, 1
  store i8 %14294, i8* %27, align 1
  %14295 = icmp eq i32 %14283, 0
  %14296 = zext i1 %14295 to i8
  store i8 %14296, i8* %30, align 1
  %14297 = lshr i32 %14283, 31
  %14298 = trunc i32 %14297 to i8
  store i8 %14298, i8* %33, align 1
  %14299 = lshr i32 %14282, 31
  %14300 = xor i32 %14297, %14299
  %14301 = add nuw nsw i32 %14300, %14299
  %14302 = icmp eq i32 %14301, 2
  %14303 = zext i1 %14302 to i8
  store i8 %14303, i8* %39, align 1
  %14304 = icmp ne i8 %14298, 0
  %14305 = xor i1 %14304, %14302
  %.v391 = select i1 %14305, i64 10, i64 74
  %14306 = add i64 %14277, %.v391
  store i64 %14306, i64* %3, align 8
  br i1 %14305, label %block_40f04d, label %block_.L_40f08d

block_40f04d:                                     ; preds = %block_.L_40f043
  %14307 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %14308 = add i64 %14307, 13112
  store i64 %14308, i64* %RAX.i1862, align 8
  %14309 = icmp ugt i64 %14307, -13113
  %14310 = zext i1 %14309 to i8
  store i8 %14310, i8* %14, align 1
  %14311 = trunc i64 %14308 to i32
  %14312 = and i32 %14311, 255
  %14313 = tail call i32 @llvm.ctpop.i32(i32 %14312)
  %14314 = trunc i32 %14313 to i8
  %14315 = and i8 %14314, 1
  %14316 = xor i8 %14315, 1
  store i8 %14316, i8* %21, align 1
  %14317 = xor i64 %14307, 16
  %14318 = xor i64 %14317, %14308
  %14319 = lshr i64 %14318, 4
  %14320 = trunc i64 %14319 to i8
  %14321 = and i8 %14320, 1
  store i8 %14321, i8* %27, align 1
  %14322 = icmp eq i64 %14308, 0
  %14323 = zext i1 %14322 to i8
  store i8 %14323, i8* %30, align 1
  %14324 = lshr i64 %14308, 63
  %14325 = trunc i64 %14324 to i8
  store i8 %14325, i8* %33, align 1
  %14326 = lshr i64 %14307, 63
  %14327 = xor i64 %14324, %14326
  %14328 = add nuw nsw i64 %14327, %14324
  %14329 = icmp eq i64 %14328, 2
  %14330 = zext i1 %14329 to i8
  store i8 %14330, i8* %39, align 1
  %14331 = add i64 %14278, -36
  %14332 = add i64 %14306, 17
  store i64 %14332, i64* %3, align 8
  %14333 = inttoptr i64 %14331 to i32*
  %14334 = load i32, i32* %14333, align 4
  %14335 = zext i32 %14334 to i64
  store i64 %14335, i64* %RCX.i2028, align 8
  %14336 = add i64 %14306, 20
  store i64 %14336, i64* %3, align 8
  %14337 = load i32, i32* %14281, align 4
  %14338 = add i32 %14337, %14334
  %14339 = zext i32 %14338 to i64
  store i64 %14339, i64* %RCX.i2028, align 8
  %14340 = sext i32 %14338 to i64
  %14341 = shl nsw i64 %14340, 6
  store i64 %14341, i64* %RDX.i4840, align 8
  %14342 = load i64, i64* %RAX.i1862, align 8
  %14343 = add i64 %14341, %14342
  store i64 %14343, i64* %RAX.i1862, align 8
  %14344 = icmp ult i64 %14343, %14342
  %14345 = icmp ult i64 %14343, %14341
  %14346 = or i1 %14344, %14345
  %14347 = zext i1 %14346 to i8
  store i8 %14347, i8* %14, align 1
  %14348 = trunc i64 %14343 to i32
  %14349 = and i32 %14348, 255
  %14350 = tail call i32 @llvm.ctpop.i32(i32 %14349)
  %14351 = trunc i32 %14350 to i8
  %14352 = and i8 %14351, 1
  %14353 = xor i8 %14352, 1
  store i8 %14353, i8* %21, align 1
  %14354 = xor i64 %14342, %14343
  %14355 = lshr i64 %14354, 4
  %14356 = trunc i64 %14355 to i8
  %14357 = and i8 %14356, 1
  store i8 %14357, i8* %27, align 1
  %14358 = icmp eq i64 %14343, 0
  %14359 = zext i1 %14358 to i8
  store i8 %14359, i8* %30, align 1
  %14360 = lshr i64 %14343, 63
  %14361 = trunc i64 %14360 to i8
  store i8 %14361, i8* %33, align 1
  %14362 = lshr i64 %14342, 63
  %14363 = lshr i64 %14340, 57
  %14364 = and i64 %14363, 1
  %14365 = xor i64 %14360, %14362
  %14366 = xor i64 %14360, %14364
  %14367 = add nuw nsw i64 %14365, %14366
  %14368 = icmp eq i64 %14367, 2
  %14369 = zext i1 %14368 to i8
  store i8 %14369, i8* %39, align 1
  %14370 = load i64, i64* %RBP.i, align 8
  %14371 = add i64 %14370, -32
  %14372 = add i64 %14306, 33
  store i64 %14372, i64* %3, align 8
  %14373 = inttoptr i64 %14371 to i32*
  %14374 = load i32, i32* %14373, align 4
  %14375 = zext i32 %14374 to i64
  store i64 %14375, i64* %RCX.i2028, align 8
  %14376 = add i64 %14370, -16
  %14377 = add i64 %14306, 36
  store i64 %14377, i64* %3, align 8
  %14378 = inttoptr i64 %14376 to i32*
  %14379 = load i32, i32* %14378, align 4
  %14380 = add i32 %14379, %14374
  %14381 = zext i32 %14380 to i64
  store i64 %14381, i64* %RCX.i2028, align 8
  %14382 = icmp ult i32 %14380, %14374
  %14383 = icmp ult i32 %14380, %14379
  %14384 = or i1 %14382, %14383
  %14385 = zext i1 %14384 to i8
  store i8 %14385, i8* %14, align 1
  %14386 = and i32 %14380, 255
  %14387 = tail call i32 @llvm.ctpop.i32(i32 %14386)
  %14388 = trunc i32 %14387 to i8
  %14389 = and i8 %14388, 1
  %14390 = xor i8 %14389, 1
  store i8 %14390, i8* %21, align 1
  %14391 = xor i32 %14379, %14374
  %14392 = xor i32 %14391, %14380
  %14393 = lshr i32 %14392, 4
  %14394 = trunc i32 %14393 to i8
  %14395 = and i8 %14394, 1
  store i8 %14395, i8* %27, align 1
  %14396 = icmp eq i32 %14380, 0
  %14397 = zext i1 %14396 to i8
  store i8 %14397, i8* %30, align 1
  %14398 = lshr i32 %14380, 31
  %14399 = trunc i32 %14398 to i8
  store i8 %14399, i8* %33, align 1
  %14400 = lshr i32 %14374, 31
  %14401 = lshr i32 %14379, 31
  %14402 = xor i32 %14398, %14400
  %14403 = xor i32 %14398, %14401
  %14404 = add nuw nsw i32 %14402, %14403
  %14405 = icmp eq i32 %14404, 2
  %14406 = zext i1 %14405 to i8
  store i8 %14406, i8* %39, align 1
  %14407 = sext i32 %14380 to i64
  store i64 %14407, i64* %RDX.i4840, align 8
  %14408 = shl nsw i64 %14407, 2
  %14409 = add i64 %14343, %14408
  %14410 = add i64 %14306, 42
  store i64 %14410, i64* %3, align 8
  %14411 = inttoptr i64 %14409 to i32*
  %14412 = load i32, i32* %14411, align 4
  %14413 = zext i32 %14412 to i64
  store i64 %14413, i64* %RCX.i2028, align 8
  %14414 = add i64 %14370, -12
  %14415 = add i64 %14306, 46
  store i64 %14415, i64* %3, align 8
  %14416 = inttoptr i64 %14414 to i32*
  %14417 = load i32, i32* %14416, align 4
  %14418 = sext i32 %14417 to i64
  store i64 %14418, i64* %RAX.i1862, align 8
  %14419 = shl nsw i64 %14418, 2
  %14420 = add i64 %14370, -112
  %14421 = add i64 %14420, %14419
  %14422 = add i64 %14306, 50
  store i64 %14422, i64* %3, align 8
  %14423 = inttoptr i64 %14421 to i32*
  store i32 %14412, i32* %14423, align 4
  %14424 = load i64, i64* %RBP.i, align 8
  %14425 = add i64 %14424, -12
  %14426 = load i64, i64* %3, align 8
  %14427 = add i64 %14426, 3
  store i64 %14427, i64* %3, align 8
  %14428 = inttoptr i64 %14425 to i32*
  %14429 = load i32, i32* %14428, align 4
  %14430 = add i32 %14429, 1
  %14431 = zext i32 %14430 to i64
  store i64 %14431, i64* %RAX.i1862, align 8
  %14432 = icmp eq i32 %14429, -1
  %14433 = icmp eq i32 %14430, 0
  %14434 = or i1 %14432, %14433
  %14435 = zext i1 %14434 to i8
  store i8 %14435, i8* %14, align 1
  %14436 = and i32 %14430, 255
  %14437 = tail call i32 @llvm.ctpop.i32(i32 %14436)
  %14438 = trunc i32 %14437 to i8
  %14439 = and i8 %14438, 1
  %14440 = xor i8 %14439, 1
  store i8 %14440, i8* %21, align 1
  %14441 = xor i32 %14430, %14429
  %14442 = lshr i32 %14441, 4
  %14443 = trunc i32 %14442 to i8
  %14444 = and i8 %14443, 1
  store i8 %14444, i8* %27, align 1
  %14445 = zext i1 %14433 to i8
  store i8 %14445, i8* %30, align 1
  %14446 = lshr i32 %14430, 31
  %14447 = trunc i32 %14446 to i8
  store i8 %14447, i8* %33, align 1
  %14448 = lshr i32 %14429, 31
  %14449 = xor i32 %14446, %14448
  %14450 = add nuw nsw i32 %14449, %14446
  %14451 = icmp eq i32 %14450, 2
  %14452 = zext i1 %14451 to i8
  store i8 %14452, i8* %39, align 1
  %14453 = add i64 %14426, 9
  store i64 %14453, i64* %3, align 8
  store i32 %14430, i32* %14428, align 4
  %14454 = load i64, i64* %3, align 8
  %14455 = add i64 %14454, -69
  store i64 %14455, i64* %3, align 8
  br label %block_.L_40f043

block_.L_40f08d:                                  ; preds = %block_.L_40f043
  %14456 = add i64 %14278, -112
  %14457 = add i64 %14306, 3
  store i64 %14457, i64* %3, align 8
  %14458 = inttoptr i64 %14456 to i32*
  %14459 = load i32, i32* %14458, align 4
  %14460 = zext i32 %14459 to i64
  store i64 %14460, i64* %RAX.i1862, align 8
  %14461 = add i64 %14278, -104
  %14462 = add i64 %14306, 6
  store i64 %14462, i64* %3, align 8
  %14463 = inttoptr i64 %14461 to i32*
  %14464 = load i32, i32* %14463, align 4
  %14465 = add i32 %14464, %14459
  %14466 = zext i32 %14465 to i64
  store i64 %14466, i64* %RAX.i1862, align 8
  %14467 = icmp ult i32 %14465, %14459
  %14468 = icmp ult i32 %14465, %14464
  %14469 = or i1 %14467, %14468
  %14470 = zext i1 %14469 to i8
  store i8 %14470, i8* %14, align 1
  %14471 = and i32 %14465, 255
  %14472 = tail call i32 @llvm.ctpop.i32(i32 %14471)
  %14473 = trunc i32 %14472 to i8
  %14474 = and i8 %14473, 1
  %14475 = xor i8 %14474, 1
  store i8 %14475, i8* %21, align 1
  %14476 = xor i32 %14464, %14459
  %14477 = xor i32 %14476, %14465
  %14478 = lshr i32 %14477, 4
  %14479 = trunc i32 %14478 to i8
  %14480 = and i8 %14479, 1
  store i8 %14480, i8* %27, align 1
  %14481 = icmp eq i32 %14465, 0
  %14482 = zext i1 %14481 to i8
  store i8 %14482, i8* %30, align 1
  %14483 = lshr i32 %14465, 31
  %14484 = trunc i32 %14483 to i8
  store i8 %14484, i8* %33, align 1
  %14485 = lshr i32 %14459, 31
  %14486 = lshr i32 %14464, 31
  %14487 = xor i32 %14483, %14485
  %14488 = xor i32 %14483, %14486
  %14489 = add nuw nsw i32 %14487, %14488
  %14490 = icmp eq i32 %14489, 2
  %14491 = zext i1 %14490 to i8
  store i8 %14491, i8* %39, align 1
  %14492 = add i64 %14278, -128
  %14493 = add i64 %14306, 9
  store i64 %14493, i64* %3, align 8
  %14494 = inttoptr i64 %14492 to i32*
  store i32 %14465, i32* %14494, align 4
  %14495 = load i64, i64* %RBP.i, align 8
  %14496 = add i64 %14495, -112
  %14497 = load i64, i64* %3, align 8
  %14498 = add i64 %14497, 3
  store i64 %14498, i64* %3, align 8
  %14499 = inttoptr i64 %14496 to i32*
  %14500 = load i32, i32* %14499, align 4
  %14501 = zext i32 %14500 to i64
  store i64 %14501, i64* %RAX.i1862, align 8
  %14502 = add i64 %14495, -104
  %14503 = add i64 %14497, 6
  store i64 %14503, i64* %3, align 8
  %14504 = inttoptr i64 %14502 to i32*
  %14505 = load i32, i32* %14504, align 4
  %14506 = sub i32 %14500, %14505
  %14507 = zext i32 %14506 to i64
  store i64 %14507, i64* %RAX.i1862, align 8
  %14508 = icmp ult i32 %14500, %14505
  %14509 = zext i1 %14508 to i8
  store i8 %14509, i8* %14, align 1
  %14510 = and i32 %14506, 255
  %14511 = tail call i32 @llvm.ctpop.i32(i32 %14510)
  %14512 = trunc i32 %14511 to i8
  %14513 = and i8 %14512, 1
  %14514 = xor i8 %14513, 1
  store i8 %14514, i8* %21, align 1
  %14515 = xor i32 %14505, %14500
  %14516 = xor i32 %14515, %14506
  %14517 = lshr i32 %14516, 4
  %14518 = trunc i32 %14517 to i8
  %14519 = and i8 %14518, 1
  store i8 %14519, i8* %27, align 1
  %14520 = icmp eq i32 %14506, 0
  %14521 = zext i1 %14520 to i8
  store i8 %14521, i8* %30, align 1
  %14522 = lshr i32 %14506, 31
  %14523 = trunc i32 %14522 to i8
  store i8 %14523, i8* %33, align 1
  %14524 = lshr i32 %14500, 31
  %14525 = lshr i32 %14505, 31
  %14526 = xor i32 %14525, %14524
  %14527 = xor i32 %14522, %14524
  %14528 = add nuw nsw i32 %14527, %14526
  %14529 = icmp eq i32 %14528, 2
  %14530 = zext i1 %14529 to i8
  store i8 %14530, i8* %39, align 1
  %14531 = add i64 %14495, -124
  %14532 = add i64 %14497, 9
  store i64 %14532, i64* %3, align 8
  %14533 = inttoptr i64 %14531 to i32*
  store i32 %14506, i32* %14533, align 4
  %14534 = load i64, i64* %RBP.i, align 8
  %14535 = add i64 %14534, -108
  %14536 = load i64, i64* %3, align 8
  %14537 = add i64 %14536, 3
  store i64 %14537, i64* %3, align 8
  %14538 = inttoptr i64 %14535 to i32*
  %14539 = load i32, i32* %14538, align 4
  %14540 = zext i32 %14539 to i64
  %14541 = shl nuw i64 %14540, 32
  %14542 = ashr i64 %14541, 33
  %14543 = trunc i32 %14539 to i8
  %14544 = and i8 %14543, 1
  %14545 = trunc i64 %14542 to i32
  %14546 = and i64 %14542, 4294967295
  store i64 %14546, i64* %RAX.i1862, align 8
  store i8 %14544, i8* %14, align 1
  %14547 = and i32 %14545, 255
  %14548 = tail call i32 @llvm.ctpop.i32(i32 %14547)
  %14549 = trunc i32 %14548 to i8
  %14550 = and i8 %14549, 1
  %14551 = xor i8 %14550, 1
  store i8 %14551, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %14552 = icmp eq i32 %14545, 0
  %14553 = zext i1 %14552 to i8
  store i8 %14553, i8* %30, align 1
  %14554 = lshr i64 %14542, 31
  %14555 = trunc i64 %14554 to i8
  %14556 = and i8 %14555, 1
  store i8 %14556, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %14557 = add i64 %14534, -100
  %14558 = add i64 %14536, 8
  store i64 %14558, i64* %3, align 8
  %14559 = trunc i64 %14542 to i32
  %14560 = inttoptr i64 %14557 to i32*
  %14561 = load i32, i32* %14560, align 4
  %14562 = sub i32 %14559, %14561
  %14563 = zext i32 %14562 to i64
  store i64 %14563, i64* %RAX.i1862, align 8
  %14564 = icmp ult i32 %14559, %14561
  %14565 = zext i1 %14564 to i8
  store i8 %14565, i8* %14, align 1
  %14566 = and i32 %14562, 255
  %14567 = tail call i32 @llvm.ctpop.i32(i32 %14566)
  %14568 = trunc i32 %14567 to i8
  %14569 = and i8 %14568, 1
  %14570 = xor i8 %14569, 1
  store i8 %14570, i8* %21, align 1
  %14571 = xor i32 %14561, %14559
  %14572 = xor i32 %14571, %14562
  %14573 = lshr i32 %14572, 4
  %14574 = trunc i32 %14573 to i8
  %14575 = and i8 %14574, 1
  store i8 %14575, i8* %27, align 1
  %14576 = icmp eq i32 %14562, 0
  %14577 = zext i1 %14576 to i8
  store i8 %14577, i8* %30, align 1
  %14578 = lshr i32 %14562, 31
  %14579 = trunc i32 %14578 to i8
  store i8 %14579, i8* %33, align 1
  %14580 = lshr i64 %14542, 31
  %14581 = trunc i64 %14580 to i32
  %14582 = and i32 %14581, 1
  %14583 = lshr i32 %14561, 31
  %14584 = xor i32 %14583, %14582
  %14585 = xor i32 %14578, %14582
  %14586 = add nuw nsw i32 %14585, %14584
  %14587 = icmp eq i32 %14586, 2
  %14588 = zext i1 %14587 to i8
  store i8 %14588, i8* %39, align 1
  %14589 = add i64 %14534, -120
  %14590 = add i64 %14536, 11
  store i64 %14590, i64* %3, align 8
  %14591 = inttoptr i64 %14589 to i32*
  store i32 %14562, i32* %14591, align 4
  %14592 = load i64, i64* %RBP.i, align 8
  %14593 = add i64 %14592, -108
  %14594 = load i64, i64* %3, align 8
  %14595 = add i64 %14594, 3
  store i64 %14595, i64* %3, align 8
  %14596 = inttoptr i64 %14593 to i32*
  %14597 = load i32, i32* %14596, align 4
  %14598 = zext i32 %14597 to i64
  store i64 %14598, i64* %RAX.i1862, align 8
  %14599 = add i64 %14592, -100
  %14600 = add i64 %14594, 6
  store i64 %14600, i64* %3, align 8
  %14601 = inttoptr i64 %14599 to i32*
  %14602 = load i32, i32* %14601, align 4
  %14603 = zext i32 %14602 to i64
  %14604 = shl nuw i64 %14603, 32
  %14605 = ashr i64 %14604, 33
  %14606 = and i64 %14605, 4294967295
  store i64 %14606, i64* %RCX.i2028, align 8
  %14607 = trunc i64 %14605 to i32
  %14608 = add i32 %14607, %14597
  %14609 = zext i32 %14608 to i64
  store i64 %14609, i64* %RAX.i1862, align 8
  %14610 = icmp ult i32 %14608, %14597
  %14611 = icmp ult i32 %14608, %14607
  %14612 = or i1 %14610, %14611
  %14613 = zext i1 %14612 to i8
  store i8 %14613, i8* %14, align 1
  %14614 = and i32 %14608, 255
  %14615 = tail call i32 @llvm.ctpop.i32(i32 %14614)
  %14616 = trunc i32 %14615 to i8
  %14617 = and i8 %14616, 1
  %14618 = xor i8 %14617, 1
  store i8 %14618, i8* %21, align 1
  %14619 = xor i64 %14605, %14598
  %14620 = trunc i64 %14619 to i32
  %14621 = xor i32 %14620, %14608
  %14622 = lshr i32 %14621, 4
  %14623 = trunc i32 %14622 to i8
  %14624 = and i8 %14623, 1
  store i8 %14624, i8* %27, align 1
  %14625 = icmp eq i32 %14608, 0
  %14626 = zext i1 %14625 to i8
  store i8 %14626, i8* %30, align 1
  %14627 = lshr i32 %14608, 31
  %14628 = trunc i32 %14627 to i8
  store i8 %14628, i8* %33, align 1
  %14629 = lshr i32 %14597, 31
  %14630 = lshr i64 %14605, 31
  %14631 = trunc i64 %14630 to i32
  %14632 = and i32 %14631, 1
  %14633 = xor i32 %14627, %14629
  %14634 = xor i32 %14627, %14632
  %14635 = add nuw nsw i32 %14633, %14634
  %14636 = icmp eq i32 %14635, 2
  %14637 = zext i1 %14636 to i8
  store i8 %14637, i8* %39, align 1
  %14638 = add i64 %14592, -116
  %14639 = add i64 %14594, 13
  store i64 %14639, i64* %3, align 8
  %14640 = inttoptr i64 %14638 to i32*
  store i32 %14608, i32* %14640, align 4
  %14641 = load i64, i64* %RBP.i, align 8
  %14642 = add i64 %14641, -12
  %14643 = load i64, i64* %3, align 8
  %14644 = add i64 %14643, 7
  store i64 %14644, i64* %3, align 8
  %14645 = inttoptr i64 %14642 to i32*
  store i32 0, i32* %14645, align 4
  %.pre334 = load i64, i64* %3, align 8
  br label %block_.L_40f0c0

block_.L_40f0c0:                                  ; preds = %block_40f0ca, %block_.L_40f08d
  %14646 = phi i64 [ %15006, %block_40f0ca ], [ %.pre334, %block_.L_40f08d ]
  %14647 = load i64, i64* %RBP.i, align 8
  %14648 = add i64 %14647, -12
  %14649 = add i64 %14646, 4
  store i64 %14649, i64* %3, align 8
  %14650 = inttoptr i64 %14648 to i32*
  %14651 = load i32, i32* %14650, align 4
  %14652 = add i32 %14651, -2
  %14653 = icmp ult i32 %14651, 2
  %14654 = zext i1 %14653 to i8
  store i8 %14654, i8* %14, align 1
  %14655 = and i32 %14652, 255
  %14656 = tail call i32 @llvm.ctpop.i32(i32 %14655)
  %14657 = trunc i32 %14656 to i8
  %14658 = and i8 %14657, 1
  %14659 = xor i8 %14658, 1
  store i8 %14659, i8* %21, align 1
  %14660 = xor i32 %14652, %14651
  %14661 = lshr i32 %14660, 4
  %14662 = trunc i32 %14661 to i8
  %14663 = and i8 %14662, 1
  store i8 %14663, i8* %27, align 1
  %14664 = icmp eq i32 %14652, 0
  %14665 = zext i1 %14664 to i8
  store i8 %14665, i8* %30, align 1
  %14666 = lshr i32 %14652, 31
  %14667 = trunc i32 %14666 to i8
  store i8 %14667, i8* %33, align 1
  %14668 = lshr i32 %14651, 31
  %14669 = xor i32 %14666, %14668
  %14670 = add nuw nsw i32 %14669, %14668
  %14671 = icmp eq i32 %14670, 2
  %14672 = zext i1 %14671 to i8
  store i8 %14672, i8* %39, align 1
  %14673 = icmp ne i8 %14667, 0
  %14674 = xor i1 %14673, %14671
  %.v392 = select i1 %14674, i64 10, i64 153
  %14675 = add i64 %14646, %.v392
  %14676 = add i64 %14675, 5
  store i64 %14676, i64* %3, align 8
  br i1 %14674, label %block_40f0ca, label %block_.L_40f159

block_40f0ca:                                     ; preds = %block_.L_40f0c0
  store i64 3, i64* %RAX.i1862, align 8
  %14677 = add i64 %14675, 8
  store i64 %14677, i64* %3, align 8
  %14678 = load i32, i32* %14650, align 4
  %14679 = sub i32 3, %14678
  %14680 = zext i32 %14679 to i64
  store i64 %14680, i64* %RAX.i1862, align 8
  %14681 = icmp ugt i32 %14678, 3
  %14682 = zext i1 %14681 to i8
  store i8 %14682, i8* %14, align 1
  %14683 = and i32 %14679, 255
  %14684 = tail call i32 @llvm.ctpop.i32(i32 %14683)
  %14685 = trunc i32 %14684 to i8
  %14686 = and i8 %14685, 1
  %14687 = xor i8 %14686, 1
  store i8 %14687, i8* %21, align 1
  %14688 = xor i32 %14679, %14678
  %14689 = lshr i32 %14688, 4
  %14690 = trunc i32 %14689 to i8
  %14691 = and i8 %14690, 1
  store i8 %14691, i8* %27, align 1
  %14692 = icmp eq i32 %14679, 0
  %14693 = zext i1 %14692 to i8
  store i8 %14693, i8* %30, align 1
  %14694 = lshr i32 %14679, 31
  %14695 = trunc i32 %14694 to i8
  store i8 %14695, i8* %33, align 1
  %14696 = lshr i32 %14678, 31
  %14697 = add nuw nsw i32 %14694, %14696
  %14698 = icmp eq i32 %14697, 2
  %14699 = zext i1 %14698 to i8
  store i8 %14699, i8* %39, align 1
  %14700 = add i64 %14647, -20
  %14701 = add i64 %14675, 11
  store i64 %14701, i64* %3, align 8
  %14702 = inttoptr i64 %14700 to i32*
  store i32 %14679, i32* %14702, align 4
  %14703 = load i64, i64* %RBP.i, align 8
  %14704 = add i64 %14703, -12
  %14705 = load i64, i64* %3, align 8
  %14706 = add i64 %14705, 4
  store i64 %14706, i64* %3, align 8
  %14707 = inttoptr i64 %14704 to i32*
  %14708 = load i32, i32* %14707, align 4
  %14709 = sext i32 %14708 to i64
  store i64 %14709, i64* %RCX.i2028, align 8
  %14710 = shl nsw i64 %14709, 2
  %14711 = add i64 %14703, -128
  %14712 = add i64 %14711, %14710
  %14713 = add i64 %14705, 8
  store i64 %14713, i64* %3, align 8
  %14714 = inttoptr i64 %14712 to i32*
  %14715 = load i32, i32* %14714, align 4
  %14716 = zext i32 %14715 to i64
  store i64 %14716, i64* %RAX.i1862, align 8
  %14717 = add i64 %14703, -20
  %14718 = add i64 %14705, 12
  store i64 %14718, i64* %3, align 8
  %14719 = inttoptr i64 %14717 to i32*
  %14720 = load i32, i32* %14719, align 4
  %14721 = sext i32 %14720 to i64
  store i64 %14721, i64* %RCX.i2028, align 8
  %14722 = shl nsw i64 %14721, 2
  %14723 = add nsw i64 %14722, -128
  %14724 = add i64 %14723, %14703
  %14725 = add i64 %14705, 16
  store i64 %14725, i64* %3, align 8
  %14726 = inttoptr i64 %14724 to i32*
  %14727 = load i32, i32* %14726, align 4
  %14728 = add i32 %14727, %14715
  %14729 = zext i32 %14728 to i64
  store i64 %14729, i64* %RAX.i1862, align 8
  %14730 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %14731 = add i64 %14730, 13112
  store i64 %14731, i64* %RCX.i2028, align 8
  %14732 = icmp ugt i64 %14730, -13113
  %14733 = zext i1 %14732 to i8
  store i8 %14733, i8* %14, align 1
  %14734 = trunc i64 %14731 to i32
  %14735 = and i32 %14734, 255
  %14736 = tail call i32 @llvm.ctpop.i32(i32 %14735)
  %14737 = trunc i32 %14736 to i8
  %14738 = and i8 %14737, 1
  %14739 = xor i8 %14738, 1
  store i8 %14739, i8* %21, align 1
  %14740 = xor i64 %14730, 16
  %14741 = xor i64 %14740, %14731
  %14742 = lshr i64 %14741, 4
  %14743 = trunc i64 %14742 to i8
  %14744 = and i8 %14743, 1
  store i8 %14744, i8* %27, align 1
  %14745 = icmp eq i64 %14731, 0
  %14746 = zext i1 %14745 to i8
  store i8 %14746, i8* %30, align 1
  %14747 = lshr i64 %14731, 63
  %14748 = trunc i64 %14747 to i8
  store i8 %14748, i8* %33, align 1
  %14749 = lshr i64 %14730, 63
  %14750 = xor i64 %14747, %14749
  %14751 = add nuw nsw i64 %14750, %14747
  %14752 = icmp eq i64 %14751, 2
  %14753 = zext i1 %14752 to i8
  store i8 %14753, i8* %39, align 1
  %14754 = load i64, i64* %RBP.i, align 8
  %14755 = add i64 %14754, -36
  %14756 = add i64 %14705, 34
  store i64 %14756, i64* %3, align 8
  %14757 = inttoptr i64 %14755 to i32*
  %14758 = load i32, i32* %14757, align 4
  %14759 = zext i32 %14758 to i64
  store i64 %14759, i64* %RDX.i4840, align 8
  %14760 = add i64 %14754, -12
  %14761 = add i64 %14705, 37
  store i64 %14761, i64* %3, align 8
  %14762 = inttoptr i64 %14760 to i32*
  %14763 = load i32, i32* %14762, align 4
  %14764 = add i32 %14763, %14758
  %14765 = zext i32 %14764 to i64
  store i64 %14765, i64* %RDX.i4840, align 8
  %14766 = sext i32 %14764 to i64
  %14767 = shl nsw i64 %14766, 6
  store i64 %14767, i64* %RSI.i2426, align 8
  %14768 = load i64, i64* %RCX.i2028, align 8
  %14769 = add i64 %14767, %14768
  store i64 %14769, i64* %RCX.i2028, align 8
  %14770 = icmp ult i64 %14769, %14768
  %14771 = icmp ult i64 %14769, %14767
  %14772 = or i1 %14770, %14771
  %14773 = zext i1 %14772 to i8
  store i8 %14773, i8* %14, align 1
  %14774 = trunc i64 %14769 to i32
  %14775 = and i32 %14774, 255
  %14776 = tail call i32 @llvm.ctpop.i32(i32 %14775)
  %14777 = trunc i32 %14776 to i8
  %14778 = and i8 %14777, 1
  %14779 = xor i8 %14778, 1
  store i8 %14779, i8* %21, align 1
  %14780 = xor i64 %14768, %14769
  %14781 = lshr i64 %14780, 4
  %14782 = trunc i64 %14781 to i8
  %14783 = and i8 %14782, 1
  store i8 %14783, i8* %27, align 1
  %14784 = icmp eq i64 %14769, 0
  %14785 = zext i1 %14784 to i8
  store i8 %14785, i8* %30, align 1
  %14786 = lshr i64 %14769, 63
  %14787 = trunc i64 %14786 to i8
  store i8 %14787, i8* %33, align 1
  %14788 = lshr i64 %14768, 63
  %14789 = lshr i64 %14766, 57
  %14790 = and i64 %14789, 1
  %14791 = xor i64 %14786, %14788
  %14792 = xor i64 %14786, %14790
  %14793 = add nuw nsw i64 %14791, %14792
  %14794 = icmp eq i64 %14793, 2
  %14795 = zext i1 %14794 to i8
  store i8 %14795, i8* %39, align 1
  %14796 = load i64, i64* %RBP.i, align 8
  %14797 = add i64 %14796, -32
  %14798 = add i64 %14705, 50
  store i64 %14798, i64* %3, align 8
  %14799 = inttoptr i64 %14797 to i32*
  %14800 = load i32, i32* %14799, align 4
  %14801 = zext i32 %14800 to i64
  store i64 %14801, i64* %RDX.i4840, align 8
  %14802 = add i64 %14796, -16
  %14803 = add i64 %14705, 53
  store i64 %14803, i64* %3, align 8
  %14804 = inttoptr i64 %14802 to i32*
  %14805 = load i32, i32* %14804, align 4
  %14806 = add i32 %14805, %14800
  %14807 = zext i32 %14806 to i64
  store i64 %14807, i64* %RDX.i4840, align 8
  %14808 = icmp ult i32 %14806, %14800
  %14809 = icmp ult i32 %14806, %14805
  %14810 = or i1 %14808, %14809
  %14811 = zext i1 %14810 to i8
  store i8 %14811, i8* %14, align 1
  %14812 = and i32 %14806, 255
  %14813 = tail call i32 @llvm.ctpop.i32(i32 %14812)
  %14814 = trunc i32 %14813 to i8
  %14815 = and i8 %14814, 1
  %14816 = xor i8 %14815, 1
  store i8 %14816, i8* %21, align 1
  %14817 = xor i32 %14805, %14800
  %14818 = xor i32 %14817, %14806
  %14819 = lshr i32 %14818, 4
  %14820 = trunc i32 %14819 to i8
  %14821 = and i8 %14820, 1
  store i8 %14821, i8* %27, align 1
  %14822 = icmp eq i32 %14806, 0
  %14823 = zext i1 %14822 to i8
  store i8 %14823, i8* %30, align 1
  %14824 = lshr i32 %14806, 31
  %14825 = trunc i32 %14824 to i8
  store i8 %14825, i8* %33, align 1
  %14826 = lshr i32 %14800, 31
  %14827 = lshr i32 %14805, 31
  %14828 = xor i32 %14824, %14826
  %14829 = xor i32 %14824, %14827
  %14830 = add nuw nsw i32 %14828, %14829
  %14831 = icmp eq i32 %14830, 2
  %14832 = zext i1 %14831 to i8
  store i8 %14832, i8* %39, align 1
  %14833 = sext i32 %14806 to i64
  store i64 %14833, i64* %RSI.i2426, align 8
  %14834 = shl nsw i64 %14833, 2
  %14835 = add i64 %14769, %14834
  %14836 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %14837 = add i64 %14705, 59
  store i64 %14837, i64* %3, align 8
  %14838 = inttoptr i64 %14835 to i32*
  store i32 %14836, i32* %14838, align 4
  %14839 = load i64, i64* %RBP.i, align 8
  %14840 = add i64 %14839, -12
  %14841 = load i64, i64* %3, align 8
  %14842 = add i64 %14841, 4
  store i64 %14842, i64* %3, align 8
  %14843 = inttoptr i64 %14840 to i32*
  %14844 = load i32, i32* %14843, align 4
  %14845 = sext i32 %14844 to i64
  store i64 %14845, i64* %RCX.i2028, align 8
  %14846 = shl nsw i64 %14845, 2
  %14847 = add i64 %14839, -128
  %14848 = add i64 %14847, %14846
  %14849 = add i64 %14841, 8
  store i64 %14849, i64* %3, align 8
  %14850 = inttoptr i64 %14848 to i32*
  %14851 = load i32, i32* %14850, align 4
  %14852 = zext i32 %14851 to i64
  store i64 %14852, i64* %RAX.i1862, align 8
  %14853 = add i64 %14839, -20
  %14854 = add i64 %14841, 12
  store i64 %14854, i64* %3, align 8
  %14855 = inttoptr i64 %14853 to i32*
  %14856 = load i32, i32* %14855, align 4
  %14857 = sext i32 %14856 to i64
  store i64 %14857, i64* %RCX.i2028, align 8
  %14858 = shl nsw i64 %14857, 2
  %14859 = add nsw i64 %14858, -128
  %14860 = add i64 %14859, %14839
  %14861 = add i64 %14841, 16
  store i64 %14861, i64* %3, align 8
  %14862 = inttoptr i64 %14860 to i32*
  %14863 = load i32, i32* %14862, align 4
  %14864 = sub i32 %14851, %14863
  %14865 = zext i32 %14864 to i64
  store i64 %14865, i64* %RAX.i1862, align 8
  %14866 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %14867 = add i64 %14866, 13112
  store i64 %14867, i64* %RCX.i2028, align 8
  %14868 = icmp ugt i64 %14866, -13113
  %14869 = zext i1 %14868 to i8
  store i8 %14869, i8* %14, align 1
  %14870 = trunc i64 %14867 to i32
  %14871 = and i32 %14870, 255
  %14872 = tail call i32 @llvm.ctpop.i32(i32 %14871)
  %14873 = trunc i32 %14872 to i8
  %14874 = and i8 %14873, 1
  %14875 = xor i8 %14874, 1
  store i8 %14875, i8* %21, align 1
  %14876 = xor i64 %14866, 16
  %14877 = xor i64 %14876, %14867
  %14878 = lshr i64 %14877, 4
  %14879 = trunc i64 %14878 to i8
  %14880 = and i8 %14879, 1
  store i8 %14880, i8* %27, align 1
  %14881 = icmp eq i64 %14867, 0
  %14882 = zext i1 %14881 to i8
  store i8 %14882, i8* %30, align 1
  %14883 = lshr i64 %14867, 63
  %14884 = trunc i64 %14883 to i8
  store i8 %14884, i8* %33, align 1
  %14885 = lshr i64 %14866, 63
  %14886 = xor i64 %14883, %14885
  %14887 = add nuw nsw i64 %14886, %14883
  %14888 = icmp eq i64 %14887, 2
  %14889 = zext i1 %14888 to i8
  store i8 %14889, i8* %39, align 1
  %14890 = load i64, i64* %RBP.i, align 8
  %14891 = add i64 %14890, -36
  %14892 = add i64 %14841, 34
  store i64 %14892, i64* %3, align 8
  %14893 = inttoptr i64 %14891 to i32*
  %14894 = load i32, i32* %14893, align 4
  %14895 = zext i32 %14894 to i64
  store i64 %14895, i64* %RDX.i4840, align 8
  %14896 = add i64 %14890, -20
  %14897 = add i64 %14841, 37
  store i64 %14897, i64* %3, align 8
  %14898 = inttoptr i64 %14896 to i32*
  %14899 = load i32, i32* %14898, align 4
  %14900 = add i32 %14899, %14894
  %14901 = zext i32 %14900 to i64
  store i64 %14901, i64* %RDX.i4840, align 8
  %14902 = sext i32 %14900 to i64
  %14903 = shl nsw i64 %14902, 6
  store i64 %14903, i64* %RSI.i2426, align 8
  %14904 = load i64, i64* %RCX.i2028, align 8
  %14905 = add i64 %14903, %14904
  store i64 %14905, i64* %RCX.i2028, align 8
  %14906 = icmp ult i64 %14905, %14904
  %14907 = icmp ult i64 %14905, %14903
  %14908 = or i1 %14906, %14907
  %14909 = zext i1 %14908 to i8
  store i8 %14909, i8* %14, align 1
  %14910 = trunc i64 %14905 to i32
  %14911 = and i32 %14910, 255
  %14912 = tail call i32 @llvm.ctpop.i32(i32 %14911)
  %14913 = trunc i32 %14912 to i8
  %14914 = and i8 %14913, 1
  %14915 = xor i8 %14914, 1
  store i8 %14915, i8* %21, align 1
  %14916 = xor i64 %14904, %14905
  %14917 = lshr i64 %14916, 4
  %14918 = trunc i64 %14917 to i8
  %14919 = and i8 %14918, 1
  store i8 %14919, i8* %27, align 1
  %14920 = icmp eq i64 %14905, 0
  %14921 = zext i1 %14920 to i8
  store i8 %14921, i8* %30, align 1
  %14922 = lshr i64 %14905, 63
  %14923 = trunc i64 %14922 to i8
  store i8 %14923, i8* %33, align 1
  %14924 = lshr i64 %14904, 63
  %14925 = lshr i64 %14902, 57
  %14926 = and i64 %14925, 1
  %14927 = xor i64 %14922, %14924
  %14928 = xor i64 %14922, %14926
  %14929 = add nuw nsw i64 %14927, %14928
  %14930 = icmp eq i64 %14929, 2
  %14931 = zext i1 %14930 to i8
  store i8 %14931, i8* %39, align 1
  %14932 = load i64, i64* %RBP.i, align 8
  %14933 = add i64 %14932, -32
  %14934 = add i64 %14841, 50
  store i64 %14934, i64* %3, align 8
  %14935 = inttoptr i64 %14933 to i32*
  %14936 = load i32, i32* %14935, align 4
  %14937 = zext i32 %14936 to i64
  store i64 %14937, i64* %RDX.i4840, align 8
  %14938 = add i64 %14932, -16
  %14939 = add i64 %14841, 53
  store i64 %14939, i64* %3, align 8
  %14940 = inttoptr i64 %14938 to i32*
  %14941 = load i32, i32* %14940, align 4
  %14942 = add i32 %14941, %14936
  %14943 = zext i32 %14942 to i64
  store i64 %14943, i64* %RDX.i4840, align 8
  %14944 = icmp ult i32 %14942, %14936
  %14945 = icmp ult i32 %14942, %14941
  %14946 = or i1 %14944, %14945
  %14947 = zext i1 %14946 to i8
  store i8 %14947, i8* %14, align 1
  %14948 = and i32 %14942, 255
  %14949 = tail call i32 @llvm.ctpop.i32(i32 %14948)
  %14950 = trunc i32 %14949 to i8
  %14951 = and i8 %14950, 1
  %14952 = xor i8 %14951, 1
  store i8 %14952, i8* %21, align 1
  %14953 = xor i32 %14941, %14936
  %14954 = xor i32 %14953, %14942
  %14955 = lshr i32 %14954, 4
  %14956 = trunc i32 %14955 to i8
  %14957 = and i8 %14956, 1
  store i8 %14957, i8* %27, align 1
  %14958 = icmp eq i32 %14942, 0
  %14959 = zext i1 %14958 to i8
  store i8 %14959, i8* %30, align 1
  %14960 = lshr i32 %14942, 31
  %14961 = trunc i32 %14960 to i8
  store i8 %14961, i8* %33, align 1
  %14962 = lshr i32 %14936, 31
  %14963 = lshr i32 %14941, 31
  %14964 = xor i32 %14960, %14962
  %14965 = xor i32 %14960, %14963
  %14966 = add nuw nsw i32 %14964, %14965
  %14967 = icmp eq i32 %14966, 2
  %14968 = zext i1 %14967 to i8
  store i8 %14968, i8* %39, align 1
  %14969 = sext i32 %14942 to i64
  store i64 %14969, i64* %RSI.i2426, align 8
  %14970 = shl nsw i64 %14969, 2
  %14971 = add i64 %14905, %14970
  %14972 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %14973 = add i64 %14841, 59
  store i64 %14973, i64* %3, align 8
  %14974 = inttoptr i64 %14971 to i32*
  store i32 %14972, i32* %14974, align 4
  %14975 = load i64, i64* %RBP.i, align 8
  %14976 = add i64 %14975, -12
  %14977 = load i64, i64* %3, align 8
  %14978 = add i64 %14977, 3
  store i64 %14978, i64* %3, align 8
  %14979 = inttoptr i64 %14976 to i32*
  %14980 = load i32, i32* %14979, align 4
  %14981 = add i32 %14980, 1
  %14982 = zext i32 %14981 to i64
  store i64 %14982, i64* %RAX.i1862, align 8
  %14983 = icmp eq i32 %14980, -1
  %14984 = icmp eq i32 %14981, 0
  %14985 = or i1 %14983, %14984
  %14986 = zext i1 %14985 to i8
  store i8 %14986, i8* %14, align 1
  %14987 = and i32 %14981, 255
  %14988 = tail call i32 @llvm.ctpop.i32(i32 %14987)
  %14989 = trunc i32 %14988 to i8
  %14990 = and i8 %14989, 1
  %14991 = xor i8 %14990, 1
  store i8 %14991, i8* %21, align 1
  %14992 = xor i32 %14981, %14980
  %14993 = lshr i32 %14992, 4
  %14994 = trunc i32 %14993 to i8
  %14995 = and i8 %14994, 1
  store i8 %14995, i8* %27, align 1
  %14996 = zext i1 %14984 to i8
  store i8 %14996, i8* %30, align 1
  %14997 = lshr i32 %14981, 31
  %14998 = trunc i32 %14997 to i8
  store i8 %14998, i8* %33, align 1
  %14999 = lshr i32 %14980, 31
  %15000 = xor i32 %14997, %14999
  %15001 = add nuw nsw i32 %15000, %14997
  %15002 = icmp eq i32 %15001, 2
  %15003 = zext i1 %15002 to i8
  store i8 %15003, i8* %39, align 1
  %15004 = add i64 %14977, 9
  store i64 %15004, i64* %3, align 8
  store i32 %14981, i32* %14979, align 4
  %15005 = load i64, i64* %3, align 8
  %15006 = add i64 %15005, -148
  store i64 %15006, i64* %3, align 8
  br label %block_.L_40f0c0

block_.L_40f159:                                  ; preds = %block_.L_40f0c0
  %15007 = add i64 %14647, -16
  %15008 = add i64 %14675, 8
  store i64 %15008, i64* %3, align 8
  %15009 = inttoptr i64 %15007 to i32*
  %15010 = load i32, i32* %15009, align 4
  %15011 = add i32 %15010, 1
  %15012 = zext i32 %15011 to i64
  store i64 %15012, i64* %RAX.i1862, align 8
  %15013 = icmp eq i32 %15010, -1
  %15014 = icmp eq i32 %15011, 0
  %15015 = or i1 %15013, %15014
  %15016 = zext i1 %15015 to i8
  store i8 %15016, i8* %14, align 1
  %15017 = and i32 %15011, 255
  %15018 = tail call i32 @llvm.ctpop.i32(i32 %15017)
  %15019 = trunc i32 %15018 to i8
  %15020 = and i8 %15019, 1
  %15021 = xor i8 %15020, 1
  store i8 %15021, i8* %21, align 1
  %15022 = xor i32 %15011, %15010
  %15023 = lshr i32 %15022, 4
  %15024 = trunc i32 %15023 to i8
  %15025 = and i8 %15024, 1
  store i8 %15025, i8* %27, align 1
  %15026 = zext i1 %15014 to i8
  store i8 %15026, i8* %30, align 1
  %15027 = lshr i32 %15011, 31
  %15028 = trunc i32 %15027 to i8
  store i8 %15028, i8* %33, align 1
  %15029 = lshr i32 %15010, 31
  %15030 = xor i32 %15027, %15029
  %15031 = add nuw nsw i32 %15030, %15027
  %15032 = icmp eq i32 %15031, 2
  %15033 = zext i1 %15032 to i8
  store i8 %15033, i8* %39, align 1
  %15034 = add i64 %14675, 14
  store i64 %15034, i64* %3, align 8
  store i32 %15011, i32* %15009, align 4
  %15035 = load i64, i64* %3, align 8
  %15036 = add i64 %15035, -309
  store i64 %15036, i64* %3, align 8
  br label %block_.L_40f032

block_.L_40f173:                                  ; preds = %block_.L_40f173.preheader, %block_.L_40f444
  %15037 = phi i64 [ %16412, %block_.L_40f444 ], [ %.pre333, %block_.L_40f173.preheader ]
  %15038 = load i64, i64* %RBP.i, align 8
  %15039 = add i64 %15038, -12
  %15040 = add i64 %15037, 4
  store i64 %15040, i64* %3, align 8
  %15041 = inttoptr i64 %15039 to i32*
  %15042 = load i32, i32* %15041, align 4
  %15043 = add i32 %15042, -4
  %15044 = icmp ult i32 %15042, 4
  %15045 = zext i1 %15044 to i8
  store i8 %15045, i8* %14, align 1
  %15046 = and i32 %15043, 255
  %15047 = tail call i32 @llvm.ctpop.i32(i32 %15046)
  %15048 = trunc i32 %15047 to i8
  %15049 = and i8 %15048, 1
  %15050 = xor i8 %15049, 1
  store i8 %15050, i8* %21, align 1
  %15051 = xor i32 %15043, %15042
  %15052 = lshr i32 %15051, 4
  %15053 = trunc i32 %15052 to i8
  %15054 = and i8 %15053, 1
  store i8 %15054, i8* %27, align 1
  %15055 = icmp eq i32 %15043, 0
  %15056 = zext i1 %15055 to i8
  store i8 %15056, i8* %30, align 1
  %15057 = lshr i32 %15043, 31
  %15058 = trunc i32 %15057 to i8
  store i8 %15058, i8* %33, align 1
  %15059 = lshr i32 %15042, 31
  %15060 = xor i32 %15057, %15059
  %15061 = add nuw nsw i32 %15060, %15059
  %15062 = icmp eq i32 %15061, 2
  %15063 = zext i1 %15062 to i8
  store i8 %15063, i8* %39, align 1
  %15064 = icmp ne i8 %15058, 0
  %15065 = xor i1 %15064, %15062
  %.v371 = select i1 %15065, i64 10, i64 740
  %15066 = add i64 %15037, %.v371
  store i64 %15066, i64* %3, align 8
  br i1 %15065, label %block_40f17d, label %block_.L_40f457

block_40f17d:                                     ; preds = %block_.L_40f173
  %15067 = add i64 %15038, -16
  %15068 = add i64 %15066, 7
  store i64 %15068, i64* %3, align 8
  %15069 = inttoptr i64 %15067 to i32*
  store i32 0, i32* %15069, align 4
  %.pre325 = load i64, i64* %3, align 8
  br label %block_.L_40f184

block_.L_40f184:                                  ; preds = %block_40f18e, %block_40f17d
  %15070 = phi i64 [ %15248, %block_40f18e ], [ %.pre325, %block_40f17d ]
  %15071 = load i64, i64* %RBP.i, align 8
  %15072 = add i64 %15071, -16
  %15073 = add i64 %15070, 4
  store i64 %15073, i64* %3, align 8
  %15074 = inttoptr i64 %15072 to i32*
  %15075 = load i32, i32* %15074, align 4
  %15076 = add i32 %15075, -4
  %15077 = icmp ult i32 %15075, 4
  %15078 = zext i1 %15077 to i8
  store i8 %15078, i8* %14, align 1
  %15079 = and i32 %15076, 255
  %15080 = tail call i32 @llvm.ctpop.i32(i32 %15079)
  %15081 = trunc i32 %15080 to i8
  %15082 = and i8 %15081, 1
  %15083 = xor i8 %15082, 1
  store i8 %15083, i8* %21, align 1
  %15084 = xor i32 %15076, %15075
  %15085 = lshr i32 %15084, 4
  %15086 = trunc i32 %15085 to i8
  %15087 = and i8 %15086, 1
  store i8 %15087, i8* %27, align 1
  %15088 = icmp eq i32 %15076, 0
  %15089 = zext i1 %15088 to i8
  store i8 %15089, i8* %30, align 1
  %15090 = lshr i32 %15076, 31
  %15091 = trunc i32 %15090 to i8
  store i8 %15091, i8* %33, align 1
  %15092 = lshr i32 %15075, 31
  %15093 = xor i32 %15090, %15092
  %15094 = add nuw nsw i32 %15093, %15092
  %15095 = icmp eq i32 %15094, 2
  %15096 = zext i1 %15095 to i8
  store i8 %15096, i8* %39, align 1
  %15097 = icmp ne i8 %15091, 0
  %15098 = xor i1 %15097, %15095
  %.v386 = select i1 %15098, i64 10, i64 74
  %15099 = add i64 %15070, %.v386
  store i64 %15099, i64* %3, align 8
  br i1 %15098, label %block_40f18e, label %block_.L_40f1ce

block_40f18e:                                     ; preds = %block_.L_40f184
  %15100 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %15101 = add i64 %15100, 13112
  store i64 %15101, i64* %RAX.i1862, align 8
  %15102 = icmp ugt i64 %15100, -13113
  %15103 = zext i1 %15102 to i8
  store i8 %15103, i8* %14, align 1
  %15104 = trunc i64 %15101 to i32
  %15105 = and i32 %15104, 255
  %15106 = tail call i32 @llvm.ctpop.i32(i32 %15105)
  %15107 = trunc i32 %15106 to i8
  %15108 = and i8 %15107, 1
  %15109 = xor i8 %15108, 1
  store i8 %15109, i8* %21, align 1
  %15110 = xor i64 %15100, 16
  %15111 = xor i64 %15110, %15101
  %15112 = lshr i64 %15111, 4
  %15113 = trunc i64 %15112 to i8
  %15114 = and i8 %15113, 1
  store i8 %15114, i8* %27, align 1
  %15115 = icmp eq i64 %15101, 0
  %15116 = zext i1 %15115 to i8
  store i8 %15116, i8* %30, align 1
  %15117 = lshr i64 %15101, 63
  %15118 = trunc i64 %15117 to i8
  store i8 %15118, i8* %33, align 1
  %15119 = lshr i64 %15100, 63
  %15120 = xor i64 %15117, %15119
  %15121 = add nuw nsw i64 %15120, %15117
  %15122 = icmp eq i64 %15121, 2
  %15123 = zext i1 %15122 to i8
  store i8 %15123, i8* %39, align 1
  %15124 = add i64 %15071, -36
  %15125 = add i64 %15099, 17
  store i64 %15125, i64* %3, align 8
  %15126 = inttoptr i64 %15124 to i32*
  %15127 = load i32, i32* %15126, align 4
  %15128 = zext i32 %15127 to i64
  store i64 %15128, i64* %RCX.i2028, align 8
  %15129 = add i64 %15071, -12
  %15130 = add i64 %15099, 20
  store i64 %15130, i64* %3, align 8
  %15131 = inttoptr i64 %15129 to i32*
  %15132 = load i32, i32* %15131, align 4
  %15133 = add i32 %15132, %15127
  %15134 = zext i32 %15133 to i64
  store i64 %15134, i64* %RCX.i2028, align 8
  %15135 = sext i32 %15133 to i64
  %15136 = shl nsw i64 %15135, 6
  store i64 %15136, i64* %RDX.i4840, align 8
  %15137 = load i64, i64* %RAX.i1862, align 8
  %15138 = add i64 %15136, %15137
  store i64 %15138, i64* %RAX.i1862, align 8
  %15139 = icmp ult i64 %15138, %15137
  %15140 = icmp ult i64 %15138, %15136
  %15141 = or i1 %15139, %15140
  %15142 = zext i1 %15141 to i8
  store i8 %15142, i8* %14, align 1
  %15143 = trunc i64 %15138 to i32
  %15144 = and i32 %15143, 255
  %15145 = tail call i32 @llvm.ctpop.i32(i32 %15144)
  %15146 = trunc i32 %15145 to i8
  %15147 = and i8 %15146, 1
  %15148 = xor i8 %15147, 1
  store i8 %15148, i8* %21, align 1
  %15149 = xor i64 %15137, %15138
  %15150 = lshr i64 %15149, 4
  %15151 = trunc i64 %15150 to i8
  %15152 = and i8 %15151, 1
  store i8 %15152, i8* %27, align 1
  %15153 = icmp eq i64 %15138, 0
  %15154 = zext i1 %15153 to i8
  store i8 %15154, i8* %30, align 1
  %15155 = lshr i64 %15138, 63
  %15156 = trunc i64 %15155 to i8
  store i8 %15156, i8* %33, align 1
  %15157 = lshr i64 %15137, 63
  %15158 = lshr i64 %15135, 57
  %15159 = and i64 %15158, 1
  %15160 = xor i64 %15155, %15157
  %15161 = xor i64 %15155, %15159
  %15162 = add nuw nsw i64 %15160, %15161
  %15163 = icmp eq i64 %15162, 2
  %15164 = zext i1 %15163 to i8
  store i8 %15164, i8* %39, align 1
  %15165 = load i64, i64* %RBP.i, align 8
  %15166 = add i64 %15165, -32
  %15167 = add i64 %15099, 33
  store i64 %15167, i64* %3, align 8
  %15168 = inttoptr i64 %15166 to i32*
  %15169 = load i32, i32* %15168, align 4
  %15170 = zext i32 %15169 to i64
  store i64 %15170, i64* %RCX.i2028, align 8
  %15171 = add i64 %15165, -16
  %15172 = add i64 %15099, 36
  store i64 %15172, i64* %3, align 8
  %15173 = inttoptr i64 %15171 to i32*
  %15174 = load i32, i32* %15173, align 4
  %15175 = add i32 %15174, %15169
  %15176 = zext i32 %15175 to i64
  store i64 %15176, i64* %RCX.i2028, align 8
  %15177 = icmp ult i32 %15175, %15169
  %15178 = icmp ult i32 %15175, %15174
  %15179 = or i1 %15177, %15178
  %15180 = zext i1 %15179 to i8
  store i8 %15180, i8* %14, align 1
  %15181 = and i32 %15175, 255
  %15182 = tail call i32 @llvm.ctpop.i32(i32 %15181)
  %15183 = trunc i32 %15182 to i8
  %15184 = and i8 %15183, 1
  %15185 = xor i8 %15184, 1
  store i8 %15185, i8* %21, align 1
  %15186 = xor i32 %15174, %15169
  %15187 = xor i32 %15186, %15175
  %15188 = lshr i32 %15187, 4
  %15189 = trunc i32 %15188 to i8
  %15190 = and i8 %15189, 1
  store i8 %15190, i8* %27, align 1
  %15191 = icmp eq i32 %15175, 0
  %15192 = zext i1 %15191 to i8
  store i8 %15192, i8* %30, align 1
  %15193 = lshr i32 %15175, 31
  %15194 = trunc i32 %15193 to i8
  store i8 %15194, i8* %33, align 1
  %15195 = lshr i32 %15169, 31
  %15196 = lshr i32 %15174, 31
  %15197 = xor i32 %15193, %15195
  %15198 = xor i32 %15193, %15196
  %15199 = add nuw nsw i32 %15197, %15198
  %15200 = icmp eq i32 %15199, 2
  %15201 = zext i1 %15200 to i8
  store i8 %15201, i8* %39, align 1
  %15202 = sext i32 %15175 to i64
  store i64 %15202, i64* %RDX.i4840, align 8
  %15203 = shl nsw i64 %15202, 2
  %15204 = add i64 %15138, %15203
  %15205 = add i64 %15099, 42
  store i64 %15205, i64* %3, align 8
  %15206 = inttoptr i64 %15204 to i32*
  %15207 = load i32, i32* %15206, align 4
  %15208 = zext i32 %15207 to i64
  store i64 %15208, i64* %RCX.i2028, align 8
  %15209 = add i64 %15099, 46
  store i64 %15209, i64* %3, align 8
  %15210 = load i32, i32* %15173, align 4
  %15211 = sext i32 %15210 to i64
  store i64 %15211, i64* %RAX.i1862, align 8
  %15212 = shl nsw i64 %15211, 2
  %15213 = add i64 %15165, -112
  %15214 = add i64 %15213, %15212
  %15215 = add i64 %15099, 50
  store i64 %15215, i64* %3, align 8
  %15216 = inttoptr i64 %15214 to i32*
  store i32 %15207, i32* %15216, align 4
  %15217 = load i64, i64* %RBP.i, align 8
  %15218 = add i64 %15217, -16
  %15219 = load i64, i64* %3, align 8
  %15220 = add i64 %15219, 3
  store i64 %15220, i64* %3, align 8
  %15221 = inttoptr i64 %15218 to i32*
  %15222 = load i32, i32* %15221, align 4
  %15223 = add i32 %15222, 1
  %15224 = zext i32 %15223 to i64
  store i64 %15224, i64* %RAX.i1862, align 8
  %15225 = icmp eq i32 %15222, -1
  %15226 = icmp eq i32 %15223, 0
  %15227 = or i1 %15225, %15226
  %15228 = zext i1 %15227 to i8
  store i8 %15228, i8* %14, align 1
  %15229 = and i32 %15223, 255
  %15230 = tail call i32 @llvm.ctpop.i32(i32 %15229)
  %15231 = trunc i32 %15230 to i8
  %15232 = and i8 %15231, 1
  %15233 = xor i8 %15232, 1
  store i8 %15233, i8* %21, align 1
  %15234 = xor i32 %15223, %15222
  %15235 = lshr i32 %15234, 4
  %15236 = trunc i32 %15235 to i8
  %15237 = and i8 %15236, 1
  store i8 %15237, i8* %27, align 1
  %15238 = zext i1 %15226 to i8
  store i8 %15238, i8* %30, align 1
  %15239 = lshr i32 %15223, 31
  %15240 = trunc i32 %15239 to i8
  store i8 %15240, i8* %33, align 1
  %15241 = lshr i32 %15222, 31
  %15242 = xor i32 %15239, %15241
  %15243 = add nuw nsw i32 %15242, %15239
  %15244 = icmp eq i32 %15243, 2
  %15245 = zext i1 %15244 to i8
  store i8 %15245, i8* %39, align 1
  %15246 = add i64 %15219, 9
  store i64 %15246, i64* %3, align 8
  store i32 %15223, i32* %15221, align 4
  %15247 = load i64, i64* %3, align 8
  %15248 = add i64 %15247, -69
  store i64 %15248, i64* %3, align 8
  br label %block_.L_40f184

block_.L_40f1ce:                                  ; preds = %block_.L_40f184
  %15249 = add i64 %15071, -112
  %15250 = add i64 %15099, 3
  store i64 %15250, i64* %3, align 8
  %15251 = inttoptr i64 %15249 to i32*
  %15252 = load i32, i32* %15251, align 4
  %15253 = zext i32 %15252 to i64
  store i64 %15253, i64* %RAX.i1862, align 8
  %15254 = add i64 %15071, -104
  %15255 = add i64 %15099, 6
  store i64 %15255, i64* %3, align 8
  %15256 = inttoptr i64 %15254 to i32*
  %15257 = load i32, i32* %15256, align 4
  %15258 = add i32 %15257, %15252
  %15259 = zext i32 %15258 to i64
  store i64 %15259, i64* %RAX.i1862, align 8
  %15260 = icmp ult i32 %15258, %15252
  %15261 = icmp ult i32 %15258, %15257
  %15262 = or i1 %15260, %15261
  %15263 = zext i1 %15262 to i8
  store i8 %15263, i8* %14, align 1
  %15264 = and i32 %15258, 255
  %15265 = tail call i32 @llvm.ctpop.i32(i32 %15264)
  %15266 = trunc i32 %15265 to i8
  %15267 = and i8 %15266, 1
  %15268 = xor i8 %15267, 1
  store i8 %15268, i8* %21, align 1
  %15269 = xor i32 %15257, %15252
  %15270 = xor i32 %15269, %15258
  %15271 = lshr i32 %15270, 4
  %15272 = trunc i32 %15271 to i8
  %15273 = and i8 %15272, 1
  store i8 %15273, i8* %27, align 1
  %15274 = icmp eq i32 %15258, 0
  %15275 = zext i1 %15274 to i8
  store i8 %15275, i8* %30, align 1
  %15276 = lshr i32 %15258, 31
  %15277 = trunc i32 %15276 to i8
  store i8 %15277, i8* %33, align 1
  %15278 = lshr i32 %15252, 31
  %15279 = lshr i32 %15257, 31
  %15280 = xor i32 %15276, %15278
  %15281 = xor i32 %15276, %15279
  %15282 = add nuw nsw i32 %15280, %15281
  %15283 = icmp eq i32 %15282, 2
  %15284 = zext i1 %15283 to i8
  store i8 %15284, i8* %39, align 1
  %15285 = add i64 %15071, -128
  %15286 = add i64 %15099, 9
  store i64 %15286, i64* %3, align 8
  %15287 = inttoptr i64 %15285 to i32*
  store i32 %15258, i32* %15287, align 4
  %15288 = load i64, i64* %RBP.i, align 8
  %15289 = add i64 %15288, -112
  %15290 = load i64, i64* %3, align 8
  %15291 = add i64 %15290, 3
  store i64 %15291, i64* %3, align 8
  %15292 = inttoptr i64 %15289 to i32*
  %15293 = load i32, i32* %15292, align 4
  %15294 = zext i32 %15293 to i64
  store i64 %15294, i64* %RAX.i1862, align 8
  %15295 = add i64 %15288, -104
  %15296 = add i64 %15290, 6
  store i64 %15296, i64* %3, align 8
  %15297 = inttoptr i64 %15295 to i32*
  %15298 = load i32, i32* %15297, align 4
  %15299 = sub i32 %15293, %15298
  %15300 = zext i32 %15299 to i64
  store i64 %15300, i64* %RAX.i1862, align 8
  %15301 = icmp ult i32 %15293, %15298
  %15302 = zext i1 %15301 to i8
  store i8 %15302, i8* %14, align 1
  %15303 = and i32 %15299, 255
  %15304 = tail call i32 @llvm.ctpop.i32(i32 %15303)
  %15305 = trunc i32 %15304 to i8
  %15306 = and i8 %15305, 1
  %15307 = xor i8 %15306, 1
  store i8 %15307, i8* %21, align 1
  %15308 = xor i32 %15298, %15293
  %15309 = xor i32 %15308, %15299
  %15310 = lshr i32 %15309, 4
  %15311 = trunc i32 %15310 to i8
  %15312 = and i8 %15311, 1
  store i8 %15312, i8* %27, align 1
  %15313 = icmp eq i32 %15299, 0
  %15314 = zext i1 %15313 to i8
  store i8 %15314, i8* %30, align 1
  %15315 = lshr i32 %15299, 31
  %15316 = trunc i32 %15315 to i8
  store i8 %15316, i8* %33, align 1
  %15317 = lshr i32 %15293, 31
  %15318 = lshr i32 %15298, 31
  %15319 = xor i32 %15318, %15317
  %15320 = xor i32 %15315, %15317
  %15321 = add nuw nsw i32 %15320, %15319
  %15322 = icmp eq i32 %15321, 2
  %15323 = zext i1 %15322 to i8
  store i8 %15323, i8* %39, align 1
  %15324 = add i64 %15288, -124
  %15325 = add i64 %15290, 9
  store i64 %15325, i64* %3, align 8
  %15326 = inttoptr i64 %15324 to i32*
  store i32 %15299, i32* %15326, align 4
  %15327 = load i64, i64* %RBP.i, align 8
  %15328 = add i64 %15327, -108
  %15329 = load i64, i64* %3, align 8
  %15330 = add i64 %15329, 3
  store i64 %15330, i64* %3, align 8
  %15331 = inttoptr i64 %15328 to i32*
  %15332 = load i32, i32* %15331, align 4
  %15333 = zext i32 %15332 to i64
  %15334 = shl nuw i64 %15333, 32
  %15335 = ashr i64 %15334, 33
  %15336 = trunc i32 %15332 to i8
  %15337 = and i8 %15336, 1
  %15338 = trunc i64 %15335 to i32
  %15339 = and i64 %15335, 4294967295
  store i64 %15339, i64* %RAX.i1862, align 8
  store i8 %15337, i8* %14, align 1
  %15340 = and i32 %15338, 255
  %15341 = tail call i32 @llvm.ctpop.i32(i32 %15340)
  %15342 = trunc i32 %15341 to i8
  %15343 = and i8 %15342, 1
  %15344 = xor i8 %15343, 1
  store i8 %15344, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %15345 = icmp eq i32 %15338, 0
  %15346 = zext i1 %15345 to i8
  store i8 %15346, i8* %30, align 1
  %15347 = lshr i64 %15335, 31
  %15348 = trunc i64 %15347 to i8
  %15349 = and i8 %15348, 1
  store i8 %15349, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %15350 = add i64 %15327, -100
  %15351 = add i64 %15329, 8
  store i64 %15351, i64* %3, align 8
  %15352 = trunc i64 %15335 to i32
  %15353 = inttoptr i64 %15350 to i32*
  %15354 = load i32, i32* %15353, align 4
  %15355 = sub i32 %15352, %15354
  %15356 = zext i32 %15355 to i64
  store i64 %15356, i64* %RAX.i1862, align 8
  %15357 = icmp ult i32 %15352, %15354
  %15358 = zext i1 %15357 to i8
  store i8 %15358, i8* %14, align 1
  %15359 = and i32 %15355, 255
  %15360 = tail call i32 @llvm.ctpop.i32(i32 %15359)
  %15361 = trunc i32 %15360 to i8
  %15362 = and i8 %15361, 1
  %15363 = xor i8 %15362, 1
  store i8 %15363, i8* %21, align 1
  %15364 = xor i32 %15354, %15352
  %15365 = xor i32 %15364, %15355
  %15366 = lshr i32 %15365, 4
  %15367 = trunc i32 %15366 to i8
  %15368 = and i8 %15367, 1
  store i8 %15368, i8* %27, align 1
  %15369 = icmp eq i32 %15355, 0
  %15370 = zext i1 %15369 to i8
  store i8 %15370, i8* %30, align 1
  %15371 = lshr i32 %15355, 31
  %15372 = trunc i32 %15371 to i8
  store i8 %15372, i8* %33, align 1
  %15373 = lshr i64 %15335, 31
  %15374 = trunc i64 %15373 to i32
  %15375 = and i32 %15374, 1
  %15376 = lshr i32 %15354, 31
  %15377 = xor i32 %15376, %15375
  %15378 = xor i32 %15371, %15375
  %15379 = add nuw nsw i32 %15378, %15377
  %15380 = icmp eq i32 %15379, 2
  %15381 = zext i1 %15380 to i8
  store i8 %15381, i8* %39, align 1
  %15382 = add i64 %15327, -120
  %15383 = add i64 %15329, 11
  store i64 %15383, i64* %3, align 8
  %15384 = inttoptr i64 %15382 to i32*
  store i32 %15355, i32* %15384, align 4
  %15385 = load i64, i64* %RBP.i, align 8
  %15386 = add i64 %15385, -108
  %15387 = load i64, i64* %3, align 8
  %15388 = add i64 %15387, 3
  store i64 %15388, i64* %3, align 8
  %15389 = inttoptr i64 %15386 to i32*
  %15390 = load i32, i32* %15389, align 4
  %15391 = zext i32 %15390 to i64
  store i64 %15391, i64* %RAX.i1862, align 8
  %15392 = add i64 %15385, -100
  %15393 = add i64 %15387, 6
  store i64 %15393, i64* %3, align 8
  %15394 = inttoptr i64 %15392 to i32*
  %15395 = load i32, i32* %15394, align 4
  %15396 = zext i32 %15395 to i64
  %15397 = shl nuw i64 %15396, 32
  %15398 = ashr i64 %15397, 33
  %15399 = and i64 %15398, 4294967295
  store i64 %15399, i64* %RCX.i2028, align 8
  %15400 = trunc i64 %15398 to i32
  %15401 = add i32 %15400, %15390
  %15402 = zext i32 %15401 to i64
  store i64 %15402, i64* %RAX.i1862, align 8
  %15403 = icmp ult i32 %15401, %15390
  %15404 = icmp ult i32 %15401, %15400
  %15405 = or i1 %15403, %15404
  %15406 = zext i1 %15405 to i8
  store i8 %15406, i8* %14, align 1
  %15407 = and i32 %15401, 255
  %15408 = tail call i32 @llvm.ctpop.i32(i32 %15407)
  %15409 = trunc i32 %15408 to i8
  %15410 = and i8 %15409, 1
  %15411 = xor i8 %15410, 1
  store i8 %15411, i8* %21, align 1
  %15412 = xor i64 %15398, %15391
  %15413 = trunc i64 %15412 to i32
  %15414 = xor i32 %15413, %15401
  %15415 = lshr i32 %15414, 4
  %15416 = trunc i32 %15415 to i8
  %15417 = and i8 %15416, 1
  store i8 %15417, i8* %27, align 1
  %15418 = icmp eq i32 %15401, 0
  %15419 = zext i1 %15418 to i8
  store i8 %15419, i8* %30, align 1
  %15420 = lshr i32 %15401, 31
  %15421 = trunc i32 %15420 to i8
  store i8 %15421, i8* %33, align 1
  %15422 = lshr i32 %15390, 31
  %15423 = lshr i64 %15398, 31
  %15424 = trunc i64 %15423 to i32
  %15425 = and i32 %15424, 1
  %15426 = xor i32 %15420, %15422
  %15427 = xor i32 %15420, %15425
  %15428 = add nuw nsw i32 %15426, %15427
  %15429 = icmp eq i32 %15428, 2
  %15430 = zext i1 %15429 to i8
  store i8 %15430, i8* %39, align 1
  %15431 = add i64 %15385, -116
  %15432 = add i64 %15387, 13
  store i64 %15432, i64* %3, align 8
  %15433 = inttoptr i64 %15431 to i32*
  store i32 %15401, i32* %15433, align 4
  %15434 = load i64, i64* %RBP.i, align 8
  %15435 = add i64 %15434, -16
  %15436 = load i64, i64* %3, align 8
  %15437 = add i64 %15436, 7
  store i64 %15437, i64* %3, align 8
  %15438 = inttoptr i64 %15435 to i32*
  store i32 0, i32* %15438, align 4
  %.pre326 = load i64, i64* %3, align 8
  br label %block_.L_40f201

block_.L_40f201:                                  ; preds = %block_.L_40f405, %block_.L_40f1ce
  %15439 = phi i64 [ %16382, %block_.L_40f405 ], [ %.pre326, %block_.L_40f1ce ]
  %15440 = load i64, i64* %RBP.i, align 8
  %15441 = add i64 %15440, -16
  %15442 = add i64 %15439, 4
  store i64 %15442, i64* %3, align 8
  %15443 = inttoptr i64 %15441 to i32*
  %15444 = load i32, i32* %15443, align 4
  %15445 = add i32 %15444, -2
  %15446 = icmp ult i32 %15444, 2
  %15447 = zext i1 %15446 to i8
  store i8 %15447, i8* %14, align 1
  %15448 = and i32 %15445, 255
  %15449 = tail call i32 @llvm.ctpop.i32(i32 %15448)
  %15450 = trunc i32 %15449 to i8
  %15451 = and i8 %15450, 1
  %15452 = xor i8 %15451, 1
  store i8 %15452, i8* %21, align 1
  %15453 = xor i32 %15445, %15444
  %15454 = lshr i32 %15453, 4
  %15455 = trunc i32 %15454 to i8
  %15456 = and i8 %15455, 1
  store i8 %15456, i8* %27, align 1
  %15457 = icmp eq i32 %15445, 0
  %15458 = zext i1 %15457 to i8
  store i8 %15458, i8* %30, align 1
  %15459 = lshr i32 %15445, 31
  %15460 = trunc i32 %15459 to i8
  store i8 %15460, i8* %33, align 1
  %15461 = lshr i32 %15444, 31
  %15462 = xor i32 %15459, %15461
  %15463 = add nuw nsw i32 %15462, %15461
  %15464 = icmp eq i32 %15463, 2
  %15465 = zext i1 %15464 to i8
  store i8 %15465, i8* %39, align 1
  %15466 = icmp ne i8 %15460, 0
  %15467 = xor i1 %15466, %15464
  %.v372 = select i1 %15467, i64 10, i64 579
  %15468 = add i64 %15439, %.v372
  store i64 %15468, i64* %3, align 8
  br i1 %15467, label %block_40f20b, label %block_.L_40f444

block_40f20b:                                     ; preds = %block_.L_40f201
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 3, i64* %RCX.i2028, align 8
  %15469 = add i64 %15468, 10
  store i64 %15469, i64* %3, align 8
  %15470 = load i32, i32* %15443, align 4
  %15471 = sub i32 3, %15470
  %15472 = zext i32 %15471 to i64
  store i64 %15472, i64* %RCX.i2028, align 8
  %15473 = icmp ugt i32 %15470, 3
  %15474 = zext i1 %15473 to i8
  store i8 %15474, i8* %14, align 1
  %15475 = and i32 %15471, 255
  %15476 = tail call i32 @llvm.ctpop.i32(i32 %15475)
  %15477 = trunc i32 %15476 to i8
  %15478 = and i8 %15477, 1
  %15479 = xor i8 %15478, 1
  store i8 %15479, i8* %21, align 1
  %15480 = xor i32 %15471, %15470
  %15481 = lshr i32 %15480, 4
  %15482 = trunc i32 %15481 to i8
  %15483 = and i8 %15482, 1
  store i8 %15483, i8* %27, align 1
  %15484 = icmp eq i32 %15471, 0
  %15485 = zext i1 %15484 to i8
  store i8 %15485, i8* %30, align 1
  %15486 = lshr i32 %15471, 31
  %15487 = trunc i32 %15486 to i8
  store i8 %15487, i8* %33, align 1
  %15488 = lshr i32 %15470, 31
  %15489 = add nuw nsw i32 %15486, %15488
  %15490 = icmp eq i32 %15489, 2
  %15491 = zext i1 %15490 to i8
  store i8 %15491, i8* %39, align 1
  %15492 = add i64 %15440, -24
  %15493 = add i64 %15468, 13
  store i64 %15493, i64* %3, align 8
  %15494 = inttoptr i64 %15492 to i32*
  store i32 %15471, i32* %15494, align 4
  %15495 = load i64, i64* %3, align 8
  %15496 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %15496, i64* %RDX.i4840, align 8
  %15497 = add i64 %15496, 72688
  %15498 = add i64 %15495, 14
  store i64 %15498, i64* %3, align 8
  %15499 = inttoptr i64 %15497 to i32*
  %15500 = load i32, i32* %15499, align 4
  %15501 = zext i32 %15500 to i64
  store i64 %15501, i64* %RCX.i2028, align 8
  %15502 = load i64, i64* %RBP.i, align 8
  %15503 = add i64 %15502, -16
  %15504 = add i64 %15495, 18
  store i64 %15504, i64* %3, align 8
  %15505 = inttoptr i64 %15503 to i32*
  %15506 = load i32, i32* %15505, align 4
  %15507 = sext i32 %15506 to i64
  store i64 %15507, i64* %RDX.i4840, align 8
  %15508 = shl nsw i64 %15507, 2
  %15509 = add i64 %15502, -128
  %15510 = add i64 %15509, %15508
  %15511 = add i64 %15495, 22
  store i64 %15511, i64* %3, align 8
  %15512 = inttoptr i64 %15510 to i32*
  %15513 = load i32, i32* %15512, align 4
  %15514 = zext i32 %15513 to i64
  store i64 %15514, i64* %RSI.i2426, align 8
  %15515 = add i64 %15502, -24
  %15516 = add i64 %15495, 26
  store i64 %15516, i64* %3, align 8
  %15517 = inttoptr i64 %15515 to i32*
  %15518 = load i32, i32* %15517, align 4
  %15519 = sext i32 %15518 to i64
  store i64 %15519, i64* %RDX.i4840, align 8
  %15520 = shl nsw i64 %15519, 2
  %15521 = add nsw i64 %15520, -128
  %15522 = add i64 %15521, %15502
  %15523 = add i64 %15495, 30
  store i64 %15523, i64* %3, align 8
  %15524 = inttoptr i64 %15522 to i32*
  %15525 = load i32, i32* %15524, align 4
  %15526 = add i32 %15525, %15513
  %15527 = add i32 %15526, 32
  %15528 = zext i32 %15527 to i64
  %15529 = shl nuw i64 %15528, 32
  %15530 = ashr i64 %15529, 37
  %15531 = lshr i64 %15530, 1
  %15532 = and i64 %15531, 4294967295
  store i64 %15532, i64* %RSI.i2426, align 8
  %15533 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %15534 = trunc i64 %15531 to i32
  %15535 = sub i32 %15533, %15534
  %15536 = icmp ult i32 %15533, %15534
  %15537 = zext i1 %15536 to i8
  store i8 %15537, i8* %14, align 1
  %15538 = and i32 %15535, 255
  %15539 = tail call i32 @llvm.ctpop.i32(i32 %15538)
  %15540 = trunc i32 %15539 to i8
  %15541 = and i8 %15540, 1
  %15542 = xor i8 %15541, 1
  store i8 %15542, i8* %21, align 1
  %15543 = xor i32 %15534, %15533
  %15544 = xor i32 %15543, %15535
  %15545 = lshr i32 %15544, 4
  %15546 = trunc i32 %15545 to i8
  %15547 = and i8 %15546, 1
  store i8 %15547, i8* %27, align 1
  %15548 = icmp eq i32 %15535, 0
  %15549 = zext i1 %15548 to i8
  store i8 %15549, i8* %30, align 1
  %15550 = lshr i32 %15535, 31
  %15551 = trunc i32 %15550 to i8
  store i8 %15551, i8* %33, align 1
  %15552 = lshr i32 %15533, 31
  %15553 = lshr i64 %15530, 32
  %15554 = trunc i64 %15553 to i32
  %15555 = and i32 %15554, 1
  %15556 = xor i32 %15555, %15552
  %15557 = xor i32 %15550, %15552
  %15558 = add nuw nsw i32 %15557, %15556
  %15559 = icmp eq i32 %15558, 2
  %15560 = zext i1 %15559 to i8
  store i8 %15560, i8* %39, align 1
  %15561 = load i64, i64* %RBP.i, align 8
  %15562 = add i64 %15561, -752
  %15563 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %15564 = add i64 %15495, 44
  store i64 %15564, i64* %3, align 8
  %15565 = inttoptr i64 %15562 to i32*
  store i32 %15563, i32* %15565, align 4
  %15566 = load i64, i64* %3, align 8
  %15567 = load i8, i8* %30, align 1
  %15568 = icmp ne i8 %15567, 0
  %15569 = load i8, i8* %33, align 1
  %15570 = icmp ne i8 %15569, 0
  %15571 = load i8, i8* %39, align 1
  %15572 = icmp ne i8 %15571, 0
  %15573 = xor i1 %15570, %15572
  %15574 = or i1 %15568, %15573
  %.v479 = select i1 %15574, i64 19, i64 6
  %15575 = add i64 %15566, %.v479
  store i64 %15575, i64* %3, align 8
  br i1 %15574, label %block_.L_40f257, label %block_40f24a

block_40f24a:                                     ; preds = %block_40f20b
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %15576 = load i64, i64* %RBP.i, align 8
  %15577 = add i64 %15576, -756
  %15578 = add i64 %15575, 8
  store i64 %15578, i64* %3, align 8
  %15579 = inttoptr i64 %15577 to i32*
  store i32 0, i32* %15579, align 4
  %15580 = load i64, i64* %3, align 8
  %15581 = add i64 %15580, 33
  store i64 %15581, i64* %3, align 8
  br label %block_.L_40f273

block_.L_40f257:                                  ; preds = %block_40f20b
  %15582 = load i64, i64* %RBP.i, align 8
  %15583 = add i64 %15582, -16
  %15584 = add i64 %15575, 4
  store i64 %15584, i64* %3, align 8
  %15585 = inttoptr i64 %15583 to i32*
  %15586 = load i32, i32* %15585, align 4
  %15587 = sext i32 %15586 to i64
  store i64 %15587, i64* %RAX.i1862, align 8
  %15588 = shl nsw i64 %15587, 2
  %15589 = add i64 %15582, -128
  %15590 = add i64 %15589, %15588
  %15591 = add i64 %15575, 8
  store i64 %15591, i64* %3, align 8
  %15592 = inttoptr i64 %15590 to i32*
  %15593 = load i32, i32* %15592, align 4
  %15594 = zext i32 %15593 to i64
  store i64 %15594, i64* %RCX.i2028, align 8
  %15595 = add i64 %15582, -24
  %15596 = add i64 %15575, 12
  store i64 %15596, i64* %3, align 8
  %15597 = inttoptr i64 %15595 to i32*
  %15598 = load i32, i32* %15597, align 4
  %15599 = sext i32 %15598 to i64
  store i64 %15599, i64* %RAX.i1862, align 8
  %15600 = shl nsw i64 %15599, 2
  %15601 = add nsw i64 %15600, -128
  %15602 = add i64 %15601, %15582
  %15603 = add i64 %15575, 16
  store i64 %15603, i64* %3, align 8
  %15604 = inttoptr i64 %15602 to i32*
  %15605 = load i32, i32* %15604, align 4
  %15606 = add i32 %15605, %15593
  %15607 = add i32 %15606, 32
  %15608 = zext i32 %15607 to i64
  %15609 = shl nuw i64 %15608, 32
  %15610 = ashr i64 %15609, 37
  %15611 = lshr i64 %15610, 1
  %15612 = trunc i64 %15610 to i8
  %15613 = and i8 %15612, 1
  %15614 = trunc i64 %15611 to i32
  %15615 = and i64 %15611, 4294967295
  store i64 %15615, i64* %RCX.i2028, align 8
  store i8 %15613, i8* %14, align 1
  %15616 = and i32 %15614, 255
  %15617 = tail call i32 @llvm.ctpop.i32(i32 %15616)
  %15618 = trunc i32 %15617 to i8
  %15619 = and i8 %15618, 1
  %15620 = xor i8 %15619, 1
  store i8 %15620, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %15621 = icmp eq i32 %15614, 0
  %15622 = zext i1 %15621 to i8
  store i8 %15622, i8* %30, align 1
  %15623 = lshr i64 %15610, 32
  %15624 = trunc i64 %15623 to i8
  %15625 = and i8 %15624, 1
  store i8 %15625, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %15626 = load i64, i64* %RBP.i, align 8
  %15627 = add i64 %15626, -756
  %15628 = trunc i64 %15611 to i32
  %15629 = add i64 %15575, 28
  store i64 %15629, i64* %3, align 8
  %15630 = inttoptr i64 %15627 to i32*
  store i32 %15628, i32* %15630, align 4
  %.pre327 = load i64, i64* %3, align 8
  br label %block_.L_40f273

block_.L_40f273:                                  ; preds = %block_.L_40f257, %block_40f24a
  %15631 = phi i64 [ %.pre327, %block_.L_40f257 ], [ %15581, %block_40f24a ]
  %15632 = load i64, i64* %RBP.i, align 8
  %15633 = add i64 %15632, -756
  %15634 = add i64 %15631, 6
  store i64 %15634, i64* %3, align 8
  %15635 = inttoptr i64 %15633 to i32*
  %15636 = load i32, i32* %15635, align 4
  %15637 = zext i32 %15636 to i64
  store i64 %15637, i64* %RAX.i1862, align 8
  %15638 = add i64 %15632, -752
  %15639 = add i64 %15631, 12
  store i64 %15639, i64* %3, align 8
  %15640 = inttoptr i64 %15638 to i32*
  %15641 = load i32, i32* %15640, align 4
  %15642 = zext i32 %15641 to i64
  store i64 %15642, i64* %RCX.i2028, align 8
  %15643 = sub i32 %15641, %15636
  %15644 = icmp ult i32 %15641, %15636
  %15645 = zext i1 %15644 to i8
  store i8 %15645, i8* %14, align 1
  %15646 = and i32 %15643, 255
  %15647 = tail call i32 @llvm.ctpop.i32(i32 %15646)
  %15648 = trunc i32 %15647 to i8
  %15649 = and i8 %15648, 1
  %15650 = xor i8 %15649, 1
  store i8 %15650, i8* %21, align 1
  %15651 = xor i32 %15636, %15641
  %15652 = xor i32 %15651, %15643
  %15653 = lshr i32 %15652, 4
  %15654 = trunc i32 %15653 to i8
  %15655 = and i8 %15654, 1
  store i8 %15655, i8* %27, align 1
  %15656 = icmp eq i32 %15643, 0
  %15657 = zext i1 %15656 to i8
  store i8 %15657, i8* %30, align 1
  %15658 = lshr i32 %15643, 31
  %15659 = trunc i32 %15658 to i8
  store i8 %15659, i8* %33, align 1
  %15660 = lshr i32 %15641, 31
  %15661 = lshr i32 %15636, 31
  %15662 = xor i32 %15661, %15660
  %15663 = xor i32 %15658, %15660
  %15664 = add nuw nsw i32 %15663, %15662
  %15665 = icmp eq i32 %15664, 2
  %15666 = zext i1 %15665 to i8
  store i8 %15666, i8* %39, align 1
  %15667 = icmp ne i8 %15659, 0
  %15668 = xor i1 %15667, %15665
  %.v387 = select i1 %15668, i64 20, i64 45
  %15669 = add i64 %15631, %.v387
  store i64 %15669, i64* %3, align 8
  br i1 %15668, label %block_40f287, label %block_.L_40f2a0

block_40f287:                                     ; preds = %block_.L_40f273
  %15670 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %15670, i64* %RAX.i1862, align 8
  %15671 = add i64 %15670, 72688
  %15672 = add i64 %15669, 14
  store i64 %15672, i64* %3, align 8
  %15673 = inttoptr i64 %15671 to i32*
  %15674 = load i32, i32* %15673, align 4
  %15675 = zext i32 %15674 to i64
  store i64 %15675, i64* %RCX.i2028, align 8
  %15676 = add i64 %15632, -760
  %15677 = add i64 %15669, 20
  store i64 %15677, i64* %3, align 8
  %15678 = inttoptr i64 %15676 to i32*
  store i32 %15674, i32* %15678, align 4
  %15679 = load i64, i64* %3, align 8
  %15680 = add i64 %15679, 90
  store i64 %15680, i64* %3, align 8
  br label %block_.L_40f2f5

block_.L_40f2a0:                                  ; preds = %block_.L_40f273
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %15681 = add i64 %15632, -16
  %15682 = add i64 %15669, 6
  store i64 %15682, i64* %3, align 8
  %15683 = inttoptr i64 %15681 to i32*
  %15684 = load i32, i32* %15683, align 4
  %15685 = sext i32 %15684 to i64
  store i64 %15685, i64* %RCX.i2028, align 8
  %15686 = shl nsw i64 %15685, 2
  %15687 = add i64 %15632, -128
  %15688 = add i64 %15687, %15686
  %15689 = add i64 %15669, 10
  store i64 %15689, i64* %3, align 8
  %15690 = inttoptr i64 %15688 to i32*
  %15691 = load i32, i32* %15690, align 4
  %15692 = zext i32 %15691 to i64
  store i64 %15692, i64* %RDX.i4840, align 8
  %15693 = add i64 %15632, -24
  %15694 = add i64 %15669, 14
  store i64 %15694, i64* %3, align 8
  %15695 = inttoptr i64 %15693 to i32*
  %15696 = load i32, i32* %15695, align 4
  %15697 = sext i32 %15696 to i64
  store i64 %15697, i64* %RCX.i2028, align 8
  %15698 = shl nsw i64 %15697, 2
  %15699 = add nsw i64 %15698, -128
  %15700 = add i64 %15699, %15632
  %15701 = add i64 %15669, 18
  store i64 %15701, i64* %3, align 8
  %15702 = inttoptr i64 %15700 to i32*
  %15703 = load i32, i32* %15702, align 4
  %15704 = add i32 %15703, %15691
  %15705 = add i32 %15704, 32
  %15706 = zext i32 %15705 to i64
  %15707 = shl nuw i64 %15706, 32
  %15708 = ashr i64 %15707, 37
  %15709 = lshr i64 %15708, 1
  %15710 = and i64 %15709, 4294967295
  store i64 %15710, i64* %RDX.i4840, align 8
  %15711 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %15712 = trunc i64 %15709 to i32
  %15713 = sub i32 %15711, %15712
  %15714 = icmp ult i32 %15711, %15712
  %15715 = zext i1 %15714 to i8
  store i8 %15715, i8* %14, align 1
  %15716 = and i32 %15713, 255
  %15717 = tail call i32 @llvm.ctpop.i32(i32 %15716)
  %15718 = trunc i32 %15717 to i8
  %15719 = and i8 %15718, 1
  %15720 = xor i8 %15719, 1
  store i8 %15720, i8* %21, align 1
  %15721 = xor i32 %15712, %15711
  %15722 = xor i32 %15721, %15713
  %15723 = lshr i32 %15722, 4
  %15724 = trunc i32 %15723 to i8
  %15725 = and i8 %15724, 1
  store i8 %15725, i8* %27, align 1
  %15726 = icmp eq i32 %15713, 0
  %15727 = zext i1 %15726 to i8
  store i8 %15727, i8* %30, align 1
  %15728 = lshr i32 %15713, 31
  %15729 = trunc i32 %15728 to i8
  store i8 %15729, i8* %33, align 1
  %15730 = lshr i32 %15711, 31
  %15731 = lshr i64 %15708, 32
  %15732 = trunc i64 %15731 to i32
  %15733 = and i32 %15732, 1
  %15734 = xor i32 %15733, %15730
  %15735 = xor i32 %15728, %15730
  %15736 = add nuw nsw i32 %15735, %15734
  %15737 = icmp eq i32 %15736, 2
  %15738 = zext i1 %15737 to i8
  store i8 %15738, i8* %39, align 1
  %15739 = icmp ne i8 %15729, 0
  %15740 = xor i1 %15739, %15737
  %15741 = or i1 %15726, %15740
  %.v388 = select i1 %15741, i64 45, i64 32
  %15742 = add i64 %15669, %.v388
  store i64 %15742, i64* %3, align 8
  br i1 %15741, label %block_.L_40f2cd, label %block_40f2c0

block_40f2c0:                                     ; preds = %block_.L_40f2a0
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %15743 = load i64, i64* %RBP.i, align 8
  %15744 = add i64 %15743, -764
  %15745 = add i64 %15742, 8
  store i64 %15745, i64* %3, align 8
  %15746 = inttoptr i64 %15744 to i32*
  store i32 0, i32* %15746, align 4
  %15747 = load i64, i64* %3, align 8
  %15748 = add i64 %15747, 33
  store i64 %15748, i64* %3, align 8
  br label %block_.L_40f2e9

block_.L_40f2cd:                                  ; preds = %block_.L_40f2a0
  %15749 = load i64, i64* %RBP.i, align 8
  %15750 = add i64 %15749, -16
  %15751 = add i64 %15742, 4
  store i64 %15751, i64* %3, align 8
  %15752 = inttoptr i64 %15750 to i32*
  %15753 = load i32, i32* %15752, align 4
  %15754 = sext i32 %15753 to i64
  store i64 %15754, i64* %RAX.i1862, align 8
  %15755 = shl nsw i64 %15754, 2
  %15756 = add i64 %15749, -128
  %15757 = add i64 %15756, %15755
  %15758 = add i64 %15742, 8
  store i64 %15758, i64* %3, align 8
  %15759 = inttoptr i64 %15757 to i32*
  %15760 = load i32, i32* %15759, align 4
  %15761 = zext i32 %15760 to i64
  store i64 %15761, i64* %RCX.i2028, align 8
  %15762 = add i64 %15749, -24
  %15763 = add i64 %15742, 12
  store i64 %15763, i64* %3, align 8
  %15764 = inttoptr i64 %15762 to i32*
  %15765 = load i32, i32* %15764, align 4
  %15766 = sext i32 %15765 to i64
  store i64 %15766, i64* %RAX.i1862, align 8
  %15767 = shl nsw i64 %15766, 2
  %15768 = add nsw i64 %15767, -128
  %15769 = add i64 %15768, %15749
  %15770 = add i64 %15742, 16
  store i64 %15770, i64* %3, align 8
  %15771 = inttoptr i64 %15769 to i32*
  %15772 = load i32, i32* %15771, align 4
  %15773 = add i32 %15772, %15760
  %15774 = add i32 %15773, 32
  %15775 = zext i32 %15774 to i64
  %15776 = shl nuw i64 %15775, 32
  %15777 = ashr i64 %15776, 37
  %15778 = lshr i64 %15777, 1
  %15779 = trunc i64 %15777 to i8
  %15780 = and i8 %15779, 1
  %15781 = trunc i64 %15778 to i32
  %15782 = and i64 %15778, 4294967295
  store i64 %15782, i64* %RCX.i2028, align 8
  store i8 %15780, i8* %14, align 1
  %15783 = and i32 %15781, 255
  %15784 = tail call i32 @llvm.ctpop.i32(i32 %15783)
  %15785 = trunc i32 %15784 to i8
  %15786 = and i8 %15785, 1
  %15787 = xor i8 %15786, 1
  store i8 %15787, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %15788 = icmp eq i32 %15781, 0
  %15789 = zext i1 %15788 to i8
  store i8 %15789, i8* %30, align 1
  %15790 = lshr i64 %15777, 32
  %15791 = trunc i64 %15790 to i8
  %15792 = and i8 %15791, 1
  store i8 %15792, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %15793 = load i64, i64* %RBP.i, align 8
  %15794 = add i64 %15793, -764
  %15795 = trunc i64 %15778 to i32
  %15796 = add i64 %15742, 28
  store i64 %15796, i64* %3, align 8
  %15797 = inttoptr i64 %15794 to i32*
  store i32 %15795, i32* %15797, align 4
  %.pre328 = load i64, i64* %3, align 8
  br label %block_.L_40f2e9

block_.L_40f2e9:                                  ; preds = %block_.L_40f2cd, %block_40f2c0
  %15798 = phi i64 [ %.pre328, %block_.L_40f2cd ], [ %15748, %block_40f2c0 ]
  %15799 = load i64, i64* %RBP.i, align 8
  %15800 = add i64 %15799, -764
  %15801 = add i64 %15798, 6
  store i64 %15801, i64* %3, align 8
  %15802 = inttoptr i64 %15800 to i32*
  %15803 = load i32, i32* %15802, align 4
  %15804 = zext i32 %15803 to i64
  store i64 %15804, i64* %RAX.i1862, align 8
  %15805 = add i64 %15799, -760
  %15806 = add i64 %15798, 12
  store i64 %15806, i64* %3, align 8
  %15807 = inttoptr i64 %15805 to i32*
  store i32 %15803, i32* %15807, align 4
  %.pre329 = load i64, i64* %3, align 8
  br label %block_.L_40f2f5

block_.L_40f2f5:                                  ; preds = %block_.L_40f2e9, %block_40f287
  %15808 = phi i64 [ %.pre329, %block_.L_40f2e9 ], [ %15680, %block_40f287 ]
  %15809 = load i64, i64* %RBP.i, align 8
  %15810 = add i64 %15809, -760
  %15811 = add i64 %15808, 6
  store i64 %15811, i64* %3, align 8
  %15812 = inttoptr i64 %15810 to i32*
  %15813 = load i32, i32* %15812, align 4
  %15814 = zext i32 %15813 to i64
  store i64 %15814, i64* %RAX.i1862, align 8
  store i64 0, i64* %RCX.i2028, align 8
  %15815 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %15816 = add i64 %15815, 13112
  store i64 %15816, i64* %RDX.i4840, align 8
  %15817 = icmp ugt i64 %15815, -13113
  %15818 = zext i1 %15817 to i8
  store i8 %15818, i8* %14, align 1
  %15819 = trunc i64 %15816 to i32
  %15820 = and i32 %15819, 255
  %15821 = tail call i32 @llvm.ctpop.i32(i32 %15820)
  %15822 = trunc i32 %15821 to i8
  %15823 = and i8 %15822, 1
  %15824 = xor i8 %15823, 1
  store i8 %15824, i8* %21, align 1
  %15825 = xor i64 %15815, 16
  %15826 = xor i64 %15825, %15816
  %15827 = lshr i64 %15826, 4
  %15828 = trunc i64 %15827 to i8
  %15829 = and i8 %15828, 1
  store i8 %15829, i8* %27, align 1
  %15830 = icmp eq i64 %15816, 0
  %15831 = zext i1 %15830 to i8
  store i8 %15831, i8* %30, align 1
  %15832 = lshr i64 %15816, 63
  %15833 = trunc i64 %15832 to i8
  store i8 %15833, i8* %33, align 1
  %15834 = lshr i64 %15815, 63
  %15835 = xor i64 %15832, %15834
  %15836 = add nuw nsw i64 %15835, %15832
  %15837 = icmp eq i64 %15836, 2
  %15838 = zext i1 %15837 to i8
  store i8 %15838, i8* %39, align 1
  %15839 = add i64 %15809, -36
  %15840 = add i64 %15808, 26
  store i64 %15840, i64* %3, align 8
  %15841 = inttoptr i64 %15839 to i32*
  %15842 = load i32, i32* %15841, align 4
  %15843 = zext i32 %15842 to i64
  store i64 %15843, i64* %RSI.i2426, align 8
  %15844 = add i64 %15809, -12
  %15845 = add i64 %15808, 29
  store i64 %15845, i64* %3, align 8
  %15846 = inttoptr i64 %15844 to i32*
  %15847 = load i32, i32* %15846, align 4
  %15848 = add i32 %15847, %15842
  %15849 = zext i32 %15848 to i64
  store i64 %15849, i64* %RSI.i2426, align 8
  %15850 = sext i32 %15848 to i64
  %15851 = shl nsw i64 %15850, 6
  store i64 %15851, i64* %RDI.i3890, align 8
  %15852 = load i64, i64* %RDX.i4840, align 8
  %15853 = add i64 %15851, %15852
  store i64 %15853, i64* %RDX.i4840, align 8
  %15854 = icmp ult i64 %15853, %15852
  %15855 = icmp ult i64 %15853, %15851
  %15856 = or i1 %15854, %15855
  %15857 = zext i1 %15856 to i8
  store i8 %15857, i8* %14, align 1
  %15858 = trunc i64 %15853 to i32
  %15859 = and i32 %15858, 255
  %15860 = tail call i32 @llvm.ctpop.i32(i32 %15859)
  %15861 = trunc i32 %15860 to i8
  %15862 = and i8 %15861, 1
  %15863 = xor i8 %15862, 1
  store i8 %15863, i8* %21, align 1
  %15864 = xor i64 %15852, %15853
  %15865 = lshr i64 %15864, 4
  %15866 = trunc i64 %15865 to i8
  %15867 = and i8 %15866, 1
  store i8 %15867, i8* %27, align 1
  %15868 = icmp eq i64 %15853, 0
  %15869 = zext i1 %15868 to i8
  store i8 %15869, i8* %30, align 1
  %15870 = lshr i64 %15853, 63
  %15871 = trunc i64 %15870 to i8
  store i8 %15871, i8* %33, align 1
  %15872 = lshr i64 %15852, 63
  %15873 = lshr i64 %15850, 57
  %15874 = and i64 %15873, 1
  %15875 = xor i64 %15870, %15872
  %15876 = xor i64 %15870, %15874
  %15877 = add nuw nsw i64 %15875, %15876
  %15878 = icmp eq i64 %15877, 2
  %15879 = zext i1 %15878 to i8
  store i8 %15879, i8* %39, align 1
  %15880 = load i64, i64* %RBP.i, align 8
  %15881 = add i64 %15880, -32
  %15882 = add i64 %15808, 42
  store i64 %15882, i64* %3, align 8
  %15883 = inttoptr i64 %15881 to i32*
  %15884 = load i32, i32* %15883, align 4
  %15885 = zext i32 %15884 to i64
  store i64 %15885, i64* %RSI.i2426, align 8
  %15886 = add i64 %15880, -16
  %15887 = add i64 %15808, 45
  store i64 %15887, i64* %3, align 8
  %15888 = inttoptr i64 %15886 to i32*
  %15889 = load i32, i32* %15888, align 4
  %15890 = add i32 %15889, %15884
  %15891 = zext i32 %15890 to i64
  store i64 %15891, i64* %RSI.i2426, align 8
  %15892 = icmp ult i32 %15890, %15884
  %15893 = icmp ult i32 %15890, %15889
  %15894 = or i1 %15892, %15893
  %15895 = zext i1 %15894 to i8
  store i8 %15895, i8* %14, align 1
  %15896 = and i32 %15890, 255
  %15897 = tail call i32 @llvm.ctpop.i32(i32 %15896)
  %15898 = trunc i32 %15897 to i8
  %15899 = and i8 %15898, 1
  %15900 = xor i8 %15899, 1
  store i8 %15900, i8* %21, align 1
  %15901 = xor i32 %15889, %15884
  %15902 = xor i32 %15901, %15890
  %15903 = lshr i32 %15902, 4
  %15904 = trunc i32 %15903 to i8
  %15905 = and i8 %15904, 1
  store i8 %15905, i8* %27, align 1
  %15906 = icmp eq i32 %15890, 0
  %15907 = zext i1 %15906 to i8
  store i8 %15907, i8* %30, align 1
  %15908 = lshr i32 %15890, 31
  %15909 = trunc i32 %15908 to i8
  store i8 %15909, i8* %33, align 1
  %15910 = lshr i32 %15884, 31
  %15911 = lshr i32 %15889, 31
  %15912 = xor i32 %15908, %15910
  %15913 = xor i32 %15908, %15911
  %15914 = add nuw nsw i32 %15912, %15913
  %15915 = icmp eq i32 %15914, 2
  %15916 = zext i1 %15915 to i8
  store i8 %15916, i8* %39, align 1
  %15917 = sext i32 %15890 to i64
  store i64 %15917, i64* %RDI.i3890, align 8
  %15918 = shl nsw i64 %15917, 2
  %15919 = add i64 %15853, %15918
  %15920 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %15921 = add i64 %15808, 51
  store i64 %15921, i64* %3, align 8
  %15922 = inttoptr i64 %15919 to i32*
  store i32 %15920, i32* %15922, align 4
  %15923 = load i64, i64* %3, align 8
  %15924 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %15924, i64* %RDX.i4840, align 8
  %15925 = add i64 %15924, 72688
  %15926 = add i64 %15923, 14
  store i64 %15926, i64* %3, align 8
  %15927 = inttoptr i64 %15925 to i32*
  %15928 = load i32, i32* %15927, align 4
  %15929 = zext i32 %15928 to i64
  store i64 %15929, i64* %RAX.i1862, align 8
  %15930 = load i64, i64* %RBP.i, align 8
  %15931 = add i64 %15930, -16
  %15932 = add i64 %15923, 18
  store i64 %15932, i64* %3, align 8
  %15933 = inttoptr i64 %15931 to i32*
  %15934 = load i32, i32* %15933, align 4
  %15935 = sext i32 %15934 to i64
  store i64 %15935, i64* %RDX.i4840, align 8
  %15936 = shl nsw i64 %15935, 2
  %15937 = add i64 %15930, -128
  %15938 = add i64 %15937, %15936
  %15939 = add i64 %15923, 22
  store i64 %15939, i64* %3, align 8
  %15940 = inttoptr i64 %15938 to i32*
  %15941 = load i32, i32* %15940, align 4
  %15942 = zext i32 %15941 to i64
  store i64 %15942, i64* %RSI.i2426, align 8
  %15943 = add i64 %15930, -24
  %15944 = add i64 %15923, 26
  store i64 %15944, i64* %3, align 8
  %15945 = inttoptr i64 %15943 to i32*
  %15946 = load i32, i32* %15945, align 4
  %15947 = sext i32 %15946 to i64
  store i64 %15947, i64* %RDX.i4840, align 8
  %15948 = shl nsw i64 %15947, 2
  %15949 = add nsw i64 %15948, -128
  %15950 = add i64 %15949, %15930
  %15951 = add i64 %15923, 30
  store i64 %15951, i64* %3, align 8
  %15952 = inttoptr i64 %15950 to i32*
  %15953 = load i32, i32* %15952, align 4
  %15954 = sub i32 %15941, %15953
  %15955 = add i32 %15954, 32
  %15956 = zext i32 %15955 to i64
  %15957 = shl nuw i64 %15956, 32
  %15958 = ashr i64 %15957, 37
  %15959 = lshr i64 %15958, 1
  %15960 = and i64 %15959, 4294967295
  store i64 %15960, i64* %RSI.i2426, align 8
  %15961 = load i32, i32* %ECX.i4869.pre-phi, align 4
  %15962 = trunc i64 %15959 to i32
  %15963 = sub i32 %15961, %15962
  %15964 = icmp ult i32 %15961, %15962
  %15965 = zext i1 %15964 to i8
  store i8 %15965, i8* %14, align 1
  %15966 = and i32 %15963, 255
  %15967 = tail call i32 @llvm.ctpop.i32(i32 %15966)
  %15968 = trunc i32 %15967 to i8
  %15969 = and i8 %15968, 1
  %15970 = xor i8 %15969, 1
  store i8 %15970, i8* %21, align 1
  %15971 = xor i32 %15962, %15961
  %15972 = xor i32 %15971, %15963
  %15973 = lshr i32 %15972, 4
  %15974 = trunc i32 %15973 to i8
  %15975 = and i8 %15974, 1
  store i8 %15975, i8* %27, align 1
  %15976 = icmp eq i32 %15963, 0
  %15977 = zext i1 %15976 to i8
  store i8 %15977, i8* %30, align 1
  %15978 = lshr i32 %15963, 31
  %15979 = trunc i32 %15978 to i8
  store i8 %15979, i8* %33, align 1
  %15980 = lshr i32 %15961, 31
  %15981 = lshr i64 %15958, 32
  %15982 = trunc i64 %15981 to i32
  %15983 = and i32 %15982, 1
  %15984 = xor i32 %15983, %15980
  %15985 = xor i32 %15978, %15980
  %15986 = add nuw nsw i32 %15985, %15984
  %15987 = icmp eq i32 %15986, 2
  %15988 = zext i1 %15987 to i8
  store i8 %15988, i8* %39, align 1
  %15989 = load i64, i64* %RBP.i, align 8
  %15990 = add i64 %15989, -768
  %15991 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %15992 = add i64 %15923, 44
  store i64 %15992, i64* %3, align 8
  %15993 = inttoptr i64 %15990 to i32*
  store i32 %15991, i32* %15993, align 4
  %15994 = load i64, i64* %3, align 8
  %15995 = load i8, i8* %30, align 1
  %15996 = icmp ne i8 %15995, 0
  %15997 = load i8, i8* %33, align 1
  %15998 = icmp ne i8 %15997, 0
  %15999 = load i8, i8* %39, align 1
  %16000 = icmp ne i8 %15999, 0
  %16001 = xor i1 %15998, %16000
  %16002 = or i1 %15996, %16001
  %.v480 = select i1 %16002, i64 19, i64 6
  %16003 = add i64 %15994, %.v480
  store i64 %16003, i64* %3, align 8
  br i1 %16002, label %block_.L_40f367, label %block_40f35a

block_40f35a:                                     ; preds = %block_.L_40f2f5
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %16004 = load i64, i64* %RBP.i, align 8
  %16005 = add i64 %16004, -772
  %16006 = add i64 %16003, 8
  store i64 %16006, i64* %3, align 8
  %16007 = inttoptr i64 %16005 to i32*
  store i32 0, i32* %16007, align 4
  %16008 = load i64, i64* %3, align 8
  %16009 = add i64 %16008, 33
  store i64 %16009, i64* %3, align 8
  br label %block_.L_40f383

block_.L_40f367:                                  ; preds = %block_.L_40f2f5
  %16010 = load i64, i64* %RBP.i, align 8
  %16011 = add i64 %16010, -16
  %16012 = add i64 %16003, 4
  store i64 %16012, i64* %3, align 8
  %16013 = inttoptr i64 %16011 to i32*
  %16014 = load i32, i32* %16013, align 4
  %16015 = sext i32 %16014 to i64
  store i64 %16015, i64* %RAX.i1862, align 8
  %16016 = shl nsw i64 %16015, 2
  %16017 = add i64 %16010, -128
  %16018 = add i64 %16017, %16016
  %16019 = add i64 %16003, 8
  store i64 %16019, i64* %3, align 8
  %16020 = inttoptr i64 %16018 to i32*
  %16021 = load i32, i32* %16020, align 4
  %16022 = zext i32 %16021 to i64
  store i64 %16022, i64* %RCX.i2028, align 8
  %16023 = add i64 %16010, -24
  %16024 = add i64 %16003, 12
  store i64 %16024, i64* %3, align 8
  %16025 = inttoptr i64 %16023 to i32*
  %16026 = load i32, i32* %16025, align 4
  %16027 = sext i32 %16026 to i64
  store i64 %16027, i64* %RAX.i1862, align 8
  %16028 = shl nsw i64 %16027, 2
  %16029 = add nsw i64 %16028, -128
  %16030 = add i64 %16029, %16010
  %16031 = add i64 %16003, 16
  store i64 %16031, i64* %3, align 8
  %16032 = inttoptr i64 %16030 to i32*
  %16033 = load i32, i32* %16032, align 4
  %16034 = sub i32 %16021, %16033
  %16035 = add i32 %16034, 32
  %16036 = zext i32 %16035 to i64
  %16037 = shl nuw i64 %16036, 32
  %16038 = ashr i64 %16037, 37
  %16039 = lshr i64 %16038, 1
  %16040 = trunc i64 %16038 to i8
  %16041 = and i8 %16040, 1
  %16042 = trunc i64 %16039 to i32
  %16043 = and i64 %16039, 4294967295
  store i64 %16043, i64* %RCX.i2028, align 8
  store i8 %16041, i8* %14, align 1
  %16044 = and i32 %16042, 255
  %16045 = tail call i32 @llvm.ctpop.i32(i32 %16044)
  %16046 = trunc i32 %16045 to i8
  %16047 = and i8 %16046, 1
  %16048 = xor i8 %16047, 1
  store i8 %16048, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %16049 = icmp eq i32 %16042, 0
  %16050 = zext i1 %16049 to i8
  store i8 %16050, i8* %30, align 1
  %16051 = lshr i64 %16038, 32
  %16052 = trunc i64 %16051 to i8
  %16053 = and i8 %16052, 1
  store i8 %16053, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %16054 = load i64, i64* %RBP.i, align 8
  %16055 = add i64 %16054, -772
  %16056 = trunc i64 %16039 to i32
  %16057 = add i64 %16003, 28
  store i64 %16057, i64* %3, align 8
  %16058 = inttoptr i64 %16055 to i32*
  store i32 %16056, i32* %16058, align 4
  %.pre330 = load i64, i64* %3, align 8
  br label %block_.L_40f383

block_.L_40f383:                                  ; preds = %block_.L_40f367, %block_40f35a
  %16059 = phi i64 [ %.pre330, %block_.L_40f367 ], [ %16009, %block_40f35a ]
  %16060 = load i64, i64* %RBP.i, align 8
  %16061 = add i64 %16060, -772
  %16062 = add i64 %16059, 6
  store i64 %16062, i64* %3, align 8
  %16063 = inttoptr i64 %16061 to i32*
  %16064 = load i32, i32* %16063, align 4
  %16065 = zext i32 %16064 to i64
  store i64 %16065, i64* %RAX.i1862, align 8
  %16066 = add i64 %16060, -768
  %16067 = add i64 %16059, 12
  store i64 %16067, i64* %3, align 8
  %16068 = inttoptr i64 %16066 to i32*
  %16069 = load i32, i32* %16068, align 4
  %16070 = zext i32 %16069 to i64
  store i64 %16070, i64* %RCX.i2028, align 8
  %16071 = sub i32 %16069, %16064
  %16072 = icmp ult i32 %16069, %16064
  %16073 = zext i1 %16072 to i8
  store i8 %16073, i8* %14, align 1
  %16074 = and i32 %16071, 255
  %16075 = tail call i32 @llvm.ctpop.i32(i32 %16074)
  %16076 = trunc i32 %16075 to i8
  %16077 = and i8 %16076, 1
  %16078 = xor i8 %16077, 1
  store i8 %16078, i8* %21, align 1
  %16079 = xor i32 %16064, %16069
  %16080 = xor i32 %16079, %16071
  %16081 = lshr i32 %16080, 4
  %16082 = trunc i32 %16081 to i8
  %16083 = and i8 %16082, 1
  store i8 %16083, i8* %27, align 1
  %16084 = icmp eq i32 %16071, 0
  %16085 = zext i1 %16084 to i8
  store i8 %16085, i8* %30, align 1
  %16086 = lshr i32 %16071, 31
  %16087 = trunc i32 %16086 to i8
  store i8 %16087, i8* %33, align 1
  %16088 = lshr i32 %16069, 31
  %16089 = lshr i32 %16064, 31
  %16090 = xor i32 %16089, %16088
  %16091 = xor i32 %16086, %16088
  %16092 = add nuw nsw i32 %16091, %16090
  %16093 = icmp eq i32 %16092, 2
  %16094 = zext i1 %16093 to i8
  store i8 %16094, i8* %39, align 1
  %16095 = icmp ne i8 %16087, 0
  %16096 = xor i1 %16095, %16093
  %.v389 = select i1 %16096, i64 20, i64 45
  %16097 = add i64 %16059, %.v389
  store i64 %16097, i64* %3, align 8
  br i1 %16096, label %block_40f397, label %block_.L_40f3b0

block_40f397:                                     ; preds = %block_.L_40f383
  %16098 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %16098, i64* %RAX.i1862, align 8
  %16099 = add i64 %16098, 72688
  %16100 = add i64 %16097, 14
  store i64 %16100, i64* %3, align 8
  %16101 = inttoptr i64 %16099 to i32*
  %16102 = load i32, i32* %16101, align 4
  %16103 = zext i32 %16102 to i64
  store i64 %16103, i64* %RCX.i2028, align 8
  %16104 = add i64 %16060, -776
  %16105 = add i64 %16097, 20
  store i64 %16105, i64* %3, align 8
  %16106 = inttoptr i64 %16104 to i32*
  store i32 %16102, i32* %16106, align 4
  %16107 = load i64, i64* %3, align 8
  %16108 = add i64 %16107, 90
  store i64 %16108, i64* %3, align 8
  br label %block_.L_40f405

block_.L_40f3b0:                                  ; preds = %block_.L_40f383
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %16109 = add i64 %16060, -16
  %16110 = add i64 %16097, 6
  store i64 %16110, i64* %3, align 8
  %16111 = inttoptr i64 %16109 to i32*
  %16112 = load i32, i32* %16111, align 4
  %16113 = sext i32 %16112 to i64
  store i64 %16113, i64* %RCX.i2028, align 8
  %16114 = shl nsw i64 %16113, 2
  %16115 = add i64 %16060, -128
  %16116 = add i64 %16115, %16114
  %16117 = add i64 %16097, 10
  store i64 %16117, i64* %3, align 8
  %16118 = inttoptr i64 %16116 to i32*
  %16119 = load i32, i32* %16118, align 4
  %16120 = zext i32 %16119 to i64
  store i64 %16120, i64* %RDX.i4840, align 8
  %16121 = add i64 %16060, -24
  %16122 = add i64 %16097, 14
  store i64 %16122, i64* %3, align 8
  %16123 = inttoptr i64 %16121 to i32*
  %16124 = load i32, i32* %16123, align 4
  %16125 = sext i32 %16124 to i64
  store i64 %16125, i64* %RCX.i2028, align 8
  %16126 = shl nsw i64 %16125, 2
  %16127 = add nsw i64 %16126, -128
  %16128 = add i64 %16127, %16060
  %16129 = add i64 %16097, 18
  store i64 %16129, i64* %3, align 8
  %16130 = inttoptr i64 %16128 to i32*
  %16131 = load i32, i32* %16130, align 4
  %16132 = sub i32 %16119, %16131
  %16133 = add i32 %16132, 32
  %16134 = zext i32 %16133 to i64
  %16135 = shl nuw i64 %16134, 32
  %16136 = ashr i64 %16135, 37
  %16137 = lshr i64 %16136, 1
  %16138 = and i64 %16137, 4294967295
  store i64 %16138, i64* %RDX.i4840, align 8
  %16139 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %16140 = trunc i64 %16137 to i32
  %16141 = sub i32 %16139, %16140
  %16142 = icmp ult i32 %16139, %16140
  %16143 = zext i1 %16142 to i8
  store i8 %16143, i8* %14, align 1
  %16144 = and i32 %16141, 255
  %16145 = tail call i32 @llvm.ctpop.i32(i32 %16144)
  %16146 = trunc i32 %16145 to i8
  %16147 = and i8 %16146, 1
  %16148 = xor i8 %16147, 1
  store i8 %16148, i8* %21, align 1
  %16149 = xor i32 %16140, %16139
  %16150 = xor i32 %16149, %16141
  %16151 = lshr i32 %16150, 4
  %16152 = trunc i32 %16151 to i8
  %16153 = and i8 %16152, 1
  store i8 %16153, i8* %27, align 1
  %16154 = icmp eq i32 %16141, 0
  %16155 = zext i1 %16154 to i8
  store i8 %16155, i8* %30, align 1
  %16156 = lshr i32 %16141, 31
  %16157 = trunc i32 %16156 to i8
  store i8 %16157, i8* %33, align 1
  %16158 = lshr i32 %16139, 31
  %16159 = lshr i64 %16136, 32
  %16160 = trunc i64 %16159 to i32
  %16161 = and i32 %16160, 1
  %16162 = xor i32 %16161, %16158
  %16163 = xor i32 %16156, %16158
  %16164 = add nuw nsw i32 %16163, %16162
  %16165 = icmp eq i32 %16164, 2
  %16166 = zext i1 %16165 to i8
  store i8 %16166, i8* %39, align 1
  %16167 = icmp ne i8 %16157, 0
  %16168 = xor i1 %16167, %16165
  %16169 = or i1 %16154, %16168
  %.v390 = select i1 %16169, i64 45, i64 32
  %16170 = add i64 %16097, %.v390
  store i64 %16170, i64* %3, align 8
  br i1 %16169, label %block_.L_40f3dd, label %block_40f3d0

block_40f3d0:                                     ; preds = %block_.L_40f3b0
  store i64 0, i64* %RAX.i1862, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %16171 = load i64, i64* %RBP.i, align 8
  %16172 = add i64 %16171, -780
  %16173 = add i64 %16170, 8
  store i64 %16173, i64* %3, align 8
  %16174 = inttoptr i64 %16172 to i32*
  store i32 0, i32* %16174, align 4
  %16175 = load i64, i64* %3, align 8
  %16176 = add i64 %16175, 33
  store i64 %16176, i64* %3, align 8
  br label %block_.L_40f3f9

block_.L_40f3dd:                                  ; preds = %block_.L_40f3b0
  %16177 = load i64, i64* %RBP.i, align 8
  %16178 = add i64 %16177, -16
  %16179 = add i64 %16170, 4
  store i64 %16179, i64* %3, align 8
  %16180 = inttoptr i64 %16178 to i32*
  %16181 = load i32, i32* %16180, align 4
  %16182 = sext i32 %16181 to i64
  store i64 %16182, i64* %RAX.i1862, align 8
  %16183 = shl nsw i64 %16182, 2
  %16184 = add i64 %16177, -128
  %16185 = add i64 %16184, %16183
  %16186 = add i64 %16170, 8
  store i64 %16186, i64* %3, align 8
  %16187 = inttoptr i64 %16185 to i32*
  %16188 = load i32, i32* %16187, align 4
  %16189 = zext i32 %16188 to i64
  store i64 %16189, i64* %RCX.i2028, align 8
  %16190 = add i64 %16177, -24
  %16191 = add i64 %16170, 12
  store i64 %16191, i64* %3, align 8
  %16192 = inttoptr i64 %16190 to i32*
  %16193 = load i32, i32* %16192, align 4
  %16194 = sext i32 %16193 to i64
  store i64 %16194, i64* %RAX.i1862, align 8
  %16195 = shl nsw i64 %16194, 2
  %16196 = add nsw i64 %16195, -128
  %16197 = add i64 %16196, %16177
  %16198 = add i64 %16170, 16
  store i64 %16198, i64* %3, align 8
  %16199 = inttoptr i64 %16197 to i32*
  %16200 = load i32, i32* %16199, align 4
  %16201 = sub i32 %16188, %16200
  %16202 = add i32 %16201, 32
  %16203 = zext i32 %16202 to i64
  %16204 = shl nuw i64 %16203, 32
  %16205 = ashr i64 %16204, 37
  %16206 = lshr i64 %16205, 1
  %16207 = trunc i64 %16205 to i8
  %16208 = and i8 %16207, 1
  %16209 = trunc i64 %16206 to i32
  %16210 = and i64 %16206, 4294967295
  store i64 %16210, i64* %RCX.i2028, align 8
  store i8 %16208, i8* %14, align 1
  %16211 = and i32 %16209, 255
  %16212 = tail call i32 @llvm.ctpop.i32(i32 %16211)
  %16213 = trunc i32 %16212 to i8
  %16214 = and i8 %16213, 1
  %16215 = xor i8 %16214, 1
  store i8 %16215, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %16216 = icmp eq i32 %16209, 0
  %16217 = zext i1 %16216 to i8
  store i8 %16217, i8* %30, align 1
  %16218 = lshr i64 %16205, 32
  %16219 = trunc i64 %16218 to i8
  %16220 = and i8 %16219, 1
  store i8 %16220, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %16221 = load i64, i64* %RBP.i, align 8
  %16222 = add i64 %16221, -780
  %16223 = trunc i64 %16206 to i32
  %16224 = add i64 %16170, 28
  store i64 %16224, i64* %3, align 8
  %16225 = inttoptr i64 %16222 to i32*
  store i32 %16223, i32* %16225, align 4
  %.pre331 = load i64, i64* %3, align 8
  br label %block_.L_40f3f9

block_.L_40f3f9:                                  ; preds = %block_.L_40f3dd, %block_40f3d0
  %16226 = phi i64 [ %.pre331, %block_.L_40f3dd ], [ %16176, %block_40f3d0 ]
  %16227 = load i64, i64* %RBP.i, align 8
  %16228 = add i64 %16227, -780
  %16229 = add i64 %16226, 6
  store i64 %16229, i64* %3, align 8
  %16230 = inttoptr i64 %16228 to i32*
  %16231 = load i32, i32* %16230, align 4
  %16232 = zext i32 %16231 to i64
  store i64 %16232, i64* %RAX.i1862, align 8
  %16233 = add i64 %16227, -776
  %16234 = add i64 %16226, 12
  store i64 %16234, i64* %3, align 8
  %16235 = inttoptr i64 %16233 to i32*
  store i32 %16231, i32* %16235, align 4
  %.pre332 = load i64, i64* %3, align 8
  br label %block_.L_40f405

block_.L_40f405:                                  ; preds = %block_.L_40f3f9, %block_40f397
  %16236 = phi i64 [ %.pre332, %block_.L_40f3f9 ], [ %16108, %block_40f397 ]
  %16237 = load i64, i64* %RBP.i, align 8
  %16238 = add i64 %16237, -776
  %16239 = add i64 %16236, 6
  store i64 %16239, i64* %3, align 8
  %16240 = inttoptr i64 %16238 to i32*
  %16241 = load i32, i32* %16240, align 4
  %16242 = zext i32 %16241 to i64
  store i64 %16242, i64* %RAX.i1862, align 8
  %16243 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %16244 = add i64 %16243, 13112
  store i64 %16244, i64* %RCX.i2028, align 8
  %16245 = icmp ugt i64 %16243, -13113
  %16246 = zext i1 %16245 to i8
  store i8 %16246, i8* %14, align 1
  %16247 = trunc i64 %16244 to i32
  %16248 = and i32 %16247, 255
  %16249 = tail call i32 @llvm.ctpop.i32(i32 %16248)
  %16250 = trunc i32 %16249 to i8
  %16251 = and i8 %16250, 1
  %16252 = xor i8 %16251, 1
  store i8 %16252, i8* %21, align 1
  %16253 = xor i64 %16243, 16
  %16254 = xor i64 %16253, %16244
  %16255 = lshr i64 %16254, 4
  %16256 = trunc i64 %16255 to i8
  %16257 = and i8 %16256, 1
  store i8 %16257, i8* %27, align 1
  %16258 = icmp eq i64 %16244, 0
  %16259 = zext i1 %16258 to i8
  store i8 %16259, i8* %30, align 1
  %16260 = lshr i64 %16244, 63
  %16261 = trunc i64 %16260 to i8
  store i8 %16261, i8* %33, align 1
  %16262 = lshr i64 %16243, 63
  %16263 = xor i64 %16260, %16262
  %16264 = add nuw nsw i64 %16263, %16260
  %16265 = icmp eq i64 %16264, 2
  %16266 = zext i1 %16265 to i8
  store i8 %16266, i8* %39, align 1
  %16267 = add i64 %16237, -36
  %16268 = add i64 %16236, 24
  store i64 %16268, i64* %3, align 8
  %16269 = inttoptr i64 %16267 to i32*
  %16270 = load i32, i32* %16269, align 4
  %16271 = zext i32 %16270 to i64
  store i64 %16271, i64* %RDX.i4840, align 8
  %16272 = add i64 %16237, -12
  %16273 = add i64 %16236, 27
  store i64 %16273, i64* %3, align 8
  %16274 = inttoptr i64 %16272 to i32*
  %16275 = load i32, i32* %16274, align 4
  %16276 = add i32 %16275, %16270
  %16277 = zext i32 %16276 to i64
  store i64 %16277, i64* %RDX.i4840, align 8
  %16278 = sext i32 %16276 to i64
  %16279 = shl nsw i64 %16278, 6
  store i64 %16279, i64* %RSI.i2426, align 8
  %16280 = load i64, i64* %RCX.i2028, align 8
  %16281 = add i64 %16279, %16280
  store i64 %16281, i64* %RCX.i2028, align 8
  %16282 = icmp ult i64 %16281, %16280
  %16283 = icmp ult i64 %16281, %16279
  %16284 = or i1 %16282, %16283
  %16285 = zext i1 %16284 to i8
  store i8 %16285, i8* %14, align 1
  %16286 = trunc i64 %16281 to i32
  %16287 = and i32 %16286, 255
  %16288 = tail call i32 @llvm.ctpop.i32(i32 %16287)
  %16289 = trunc i32 %16288 to i8
  %16290 = and i8 %16289, 1
  %16291 = xor i8 %16290, 1
  store i8 %16291, i8* %21, align 1
  %16292 = xor i64 %16280, %16281
  %16293 = lshr i64 %16292, 4
  %16294 = trunc i64 %16293 to i8
  %16295 = and i8 %16294, 1
  store i8 %16295, i8* %27, align 1
  %16296 = icmp eq i64 %16281, 0
  %16297 = zext i1 %16296 to i8
  store i8 %16297, i8* %30, align 1
  %16298 = lshr i64 %16281, 63
  %16299 = trunc i64 %16298 to i8
  store i8 %16299, i8* %33, align 1
  %16300 = lshr i64 %16280, 63
  %16301 = lshr i64 %16278, 57
  %16302 = and i64 %16301, 1
  %16303 = xor i64 %16298, %16300
  %16304 = xor i64 %16298, %16302
  %16305 = add nuw nsw i64 %16303, %16304
  %16306 = icmp eq i64 %16305, 2
  %16307 = zext i1 %16306 to i8
  store i8 %16307, i8* %39, align 1
  %16308 = load i64, i64* %RBP.i, align 8
  %16309 = add i64 %16308, -32
  %16310 = add i64 %16236, 40
  store i64 %16310, i64* %3, align 8
  %16311 = inttoptr i64 %16309 to i32*
  %16312 = load i32, i32* %16311, align 4
  %16313 = zext i32 %16312 to i64
  store i64 %16313, i64* %RDX.i4840, align 8
  %16314 = add i64 %16308, -24
  %16315 = add i64 %16236, 43
  store i64 %16315, i64* %3, align 8
  %16316 = inttoptr i64 %16314 to i32*
  %16317 = load i32, i32* %16316, align 4
  %16318 = add i32 %16317, %16312
  %16319 = zext i32 %16318 to i64
  store i64 %16319, i64* %RDX.i4840, align 8
  %16320 = icmp ult i32 %16318, %16312
  %16321 = icmp ult i32 %16318, %16317
  %16322 = or i1 %16320, %16321
  %16323 = zext i1 %16322 to i8
  store i8 %16323, i8* %14, align 1
  %16324 = and i32 %16318, 255
  %16325 = tail call i32 @llvm.ctpop.i32(i32 %16324)
  %16326 = trunc i32 %16325 to i8
  %16327 = and i8 %16326, 1
  %16328 = xor i8 %16327, 1
  store i8 %16328, i8* %21, align 1
  %16329 = xor i32 %16317, %16312
  %16330 = xor i32 %16329, %16318
  %16331 = lshr i32 %16330, 4
  %16332 = trunc i32 %16331 to i8
  %16333 = and i8 %16332, 1
  store i8 %16333, i8* %27, align 1
  %16334 = icmp eq i32 %16318, 0
  %16335 = zext i1 %16334 to i8
  store i8 %16335, i8* %30, align 1
  %16336 = lshr i32 %16318, 31
  %16337 = trunc i32 %16336 to i8
  store i8 %16337, i8* %33, align 1
  %16338 = lshr i32 %16312, 31
  %16339 = lshr i32 %16317, 31
  %16340 = xor i32 %16336, %16338
  %16341 = xor i32 %16336, %16339
  %16342 = add nuw nsw i32 %16340, %16341
  %16343 = icmp eq i32 %16342, 2
  %16344 = zext i1 %16343 to i8
  store i8 %16344, i8* %39, align 1
  %16345 = sext i32 %16318 to i64
  store i64 %16345, i64* %RSI.i2426, align 8
  %16346 = shl nsw i64 %16345, 2
  %16347 = add i64 %16281, %16346
  %16348 = load i32, i32* %EAX.i4969.pre-phi, align 4
  %16349 = add i64 %16236, 49
  store i64 %16349, i64* %3, align 8
  %16350 = inttoptr i64 %16347 to i32*
  store i32 %16348, i32* %16350, align 4
  %16351 = load i64, i64* %RBP.i, align 8
  %16352 = add i64 %16351, -16
  %16353 = load i64, i64* %3, align 8
  %16354 = add i64 %16353, 3
  store i64 %16354, i64* %3, align 8
  %16355 = inttoptr i64 %16352 to i32*
  %16356 = load i32, i32* %16355, align 4
  %16357 = add i32 %16356, 1
  %16358 = zext i32 %16357 to i64
  store i64 %16358, i64* %RAX.i1862, align 8
  %16359 = icmp eq i32 %16356, -1
  %16360 = icmp eq i32 %16357, 0
  %16361 = or i1 %16359, %16360
  %16362 = zext i1 %16361 to i8
  store i8 %16362, i8* %14, align 1
  %16363 = and i32 %16357, 255
  %16364 = tail call i32 @llvm.ctpop.i32(i32 %16363)
  %16365 = trunc i32 %16364 to i8
  %16366 = and i8 %16365, 1
  %16367 = xor i8 %16366, 1
  store i8 %16367, i8* %21, align 1
  %16368 = xor i32 %16357, %16356
  %16369 = lshr i32 %16368, 4
  %16370 = trunc i32 %16369 to i8
  %16371 = and i8 %16370, 1
  store i8 %16371, i8* %27, align 1
  %16372 = zext i1 %16360 to i8
  store i8 %16372, i8* %30, align 1
  %16373 = lshr i32 %16357, 31
  %16374 = trunc i32 %16373 to i8
  store i8 %16374, i8* %33, align 1
  %16375 = lshr i32 %16356, 31
  %16376 = xor i32 %16373, %16375
  %16377 = add nuw nsw i32 %16376, %16373
  %16378 = icmp eq i32 %16377, 2
  %16379 = zext i1 %16378 to i8
  store i8 %16379, i8* %39, align 1
  %16380 = add i64 %16353, 9
  store i64 %16380, i64* %3, align 8
  store i32 %16357, i32* %16355, align 4
  %16381 = load i64, i64* %3, align 8
  %16382 = add i64 %16381, -574
  store i64 %16382, i64* %3, align 8
  br label %block_.L_40f201

block_.L_40f444:                                  ; preds = %block_.L_40f201
  %16383 = add i64 %15440, -12
  %16384 = add i64 %15468, 8
  store i64 %16384, i64* %3, align 8
  %16385 = inttoptr i64 %16383 to i32*
  %16386 = load i32, i32* %16385, align 4
  %16387 = add i32 %16386, 1
  %16388 = zext i32 %16387 to i64
  store i64 %16388, i64* %RAX.i1862, align 8
  %16389 = icmp eq i32 %16386, -1
  %16390 = icmp eq i32 %16387, 0
  %16391 = or i1 %16389, %16390
  %16392 = zext i1 %16391 to i8
  store i8 %16392, i8* %14, align 1
  %16393 = and i32 %16387, 255
  %16394 = tail call i32 @llvm.ctpop.i32(i32 %16393)
  %16395 = trunc i32 %16394 to i8
  %16396 = and i8 %16395, 1
  %16397 = xor i8 %16396, 1
  store i8 %16397, i8* %21, align 1
  %16398 = xor i32 %16387, %16386
  %16399 = lshr i32 %16398, 4
  %16400 = trunc i32 %16399 to i8
  %16401 = and i8 %16400, 1
  store i8 %16401, i8* %27, align 1
  %16402 = zext i1 %16390 to i8
  store i8 %16402, i8* %30, align 1
  %16403 = lshr i32 %16387, 31
  %16404 = trunc i32 %16403 to i8
  store i8 %16404, i8* %33, align 1
  %16405 = lshr i32 %16386, 31
  %16406 = xor i32 %16403, %16405
  %16407 = add nuw nsw i32 %16406, %16403
  %16408 = icmp eq i32 %16407, 2
  %16409 = zext i1 %16408 to i8
  store i8 %16409, i8* %39, align 1
  %16410 = add i64 %15468, 14
  store i64 %16410, i64* %3, align 8
  store i32 %16387, i32* %16385, align 4
  %16411 = load i64, i64* %3, align 8
  %16412 = add i64 %16411, -735
  store i64 %16412, i64* %3, align 8
  br label %block_.L_40f173

block_.L_40f457:                                  ; preds = %block_.L_40f173
  %16413 = add i64 %15038, -36
  %16414 = add i64 %15066, 8
  store i64 %16414, i64* %3, align 8
  %16415 = inttoptr i64 %16413 to i32*
  %16416 = load i32, i32* %16415, align 4
  %16417 = add i32 %16416, 4
  %16418 = zext i32 %16417 to i64
  store i64 %16418, i64* %RAX.i1862, align 8
  %16419 = icmp ugt i32 %16416, -5
  %16420 = zext i1 %16419 to i8
  store i8 %16420, i8* %14, align 1
  %16421 = and i32 %16417, 255
  %16422 = tail call i32 @llvm.ctpop.i32(i32 %16421)
  %16423 = trunc i32 %16422 to i8
  %16424 = and i8 %16423, 1
  %16425 = xor i8 %16424, 1
  store i8 %16425, i8* %21, align 1
  %16426 = xor i32 %16417, %16416
  %16427 = lshr i32 %16426, 4
  %16428 = trunc i32 %16427 to i8
  %16429 = and i8 %16428, 1
  store i8 %16429, i8* %27, align 1
  %16430 = icmp eq i32 %16417, 0
  %16431 = zext i1 %16430 to i8
  store i8 %16431, i8* %30, align 1
  %16432 = lshr i32 %16417, 31
  %16433 = trunc i32 %16432 to i8
  store i8 %16433, i8* %33, align 1
  %16434 = lshr i32 %16416, 31
  %16435 = xor i32 %16432, %16434
  %16436 = add nuw nsw i32 %16435, %16432
  %16437 = icmp eq i32 %16436, 2
  %16438 = zext i1 %16437 to i8
  store i8 %16438, i8* %39, align 1
  %16439 = add i64 %15066, 14
  store i64 %16439, i64* %3, align 8
  store i32 %16417, i32* %16415, align 4
  %16440 = load i64, i64* %3, align 8
  %16441 = add i64 %16440, -1092
  store i64 %16441, i64* %3, align 8
  br label %block_.L_40f021

block_.L_40f46a:                                  ; preds = %block_.L_40f021
  %16442 = add i64 %14212, -32
  %16443 = add i64 %14240, 8
  store i64 %16443, i64* %3, align 8
  %16444 = inttoptr i64 %16442 to i32*
  %16445 = load i32, i32* %16444, align 4
  %16446 = add i32 %16445, 4
  %16447 = zext i32 %16446 to i64
  store i64 %16447, i64* %RAX.i1862, align 8
  %16448 = icmp ugt i32 %16445, -5
  %16449 = zext i1 %16448 to i8
  store i8 %16449, i8* %14, align 1
  %16450 = and i32 %16446, 255
  %16451 = tail call i32 @llvm.ctpop.i32(i32 %16450)
  %16452 = trunc i32 %16451 to i8
  %16453 = and i8 %16452, 1
  %16454 = xor i8 %16453, 1
  store i8 %16454, i8* %21, align 1
  %16455 = xor i32 %16446, %16445
  %16456 = lshr i32 %16455, 4
  %16457 = trunc i32 %16456 to i8
  %16458 = and i8 %16457, 1
  store i8 %16458, i8* %27, align 1
  %16459 = icmp eq i32 %16446, 0
  %16460 = zext i1 %16459 to i8
  store i8 %16460, i8* %30, align 1
  %16461 = lshr i32 %16446, 31
  %16462 = trunc i32 %16461 to i8
  store i8 %16462, i8* %33, align 1
  %16463 = lshr i32 %16445, 31
  %16464 = xor i32 %16461, %16463
  %16465 = add nuw nsw i32 %16464, %16461
  %16466 = icmp eq i32 %16465, 2
  %16467 = zext i1 %16466 to i8
  store i8 %16467, i8* %39, align 1
  %16468 = add i64 %14240, 14
  store i64 %16468, i64* %3, align 8
  store i32 %16446, i32* %16444, align 4
  %16469 = load i64, i64* %3, align 8
  %16470 = add i64 %16469, -1128
  store i64 %16470, i64* %3, align 8
  br label %block_.L_40f010

block_.L_40f47d:                                  ; preds = %block_.L_40f010
  %16471 = add i64 %14179, -16
  %16472 = add i64 %14207, 7
  store i64 %16472, i64* %3, align 8
  %16473 = inttoptr i64 %16471 to i32*
  store i32 0, i32* %16473, align 4
  %SI.i61 = bitcast %union.anon* %64 to i16*
  %.pre335 = load i64, i64* %3, align 8
  br label %block_.L_40f484

block_.L_40f484:                                  ; preds = %block_.L_40f517, %block_.L_40f47d
  %16474 = phi i64 [ %16765, %block_.L_40f517 ], [ %.pre335, %block_.L_40f47d ]
  %16475 = load i64, i64* %RBP.i, align 8
  %16476 = add i64 %16475, -16
  %16477 = add i64 %16474, 4
  store i64 %16477, i64* %3, align 8
  %16478 = inttoptr i64 %16476 to i32*
  %16479 = load i32, i32* %16478, align 4
  %16480 = add i32 %16479, -8
  %16481 = icmp ult i32 %16479, 8
  %16482 = zext i1 %16481 to i8
  store i8 %16482, i8* %14, align 1
  %16483 = and i32 %16480, 255
  %16484 = tail call i32 @llvm.ctpop.i32(i32 %16483)
  %16485 = trunc i32 %16484 to i8
  %16486 = and i8 %16485, 1
  %16487 = xor i8 %16486, 1
  store i8 %16487, i8* %21, align 1
  %16488 = xor i32 %16480, %16479
  %16489 = lshr i32 %16488, 4
  %16490 = trunc i32 %16489 to i8
  %16491 = and i8 %16490, 1
  store i8 %16491, i8* %27, align 1
  %16492 = icmp eq i32 %16480, 0
  %16493 = zext i1 %16492 to i8
  store i8 %16493, i8* %30, align 1
  %16494 = lshr i32 %16480, 31
  %16495 = trunc i32 %16494 to i8
  store i8 %16495, i8* %33, align 1
  %16496 = lshr i32 %16479, 31
  %16497 = xor i32 %16494, %16496
  %16498 = add nuw nsw i32 %16497, %16496
  %16499 = icmp eq i32 %16498, 2
  %16500 = zext i1 %16499 to i8
  store i8 %16500, i8* %39, align 1
  %16501 = icmp ne i8 %16495, 0
  %16502 = xor i1 %16501, %16499
  %.v385 = select i1 %16502, i64 10, i64 166
  %16503 = add i64 %16474, %.v385
  store i64 %16503, i64* %3, align 8
  br i1 %16502, label %block_40f48e, label %block_.L_40f52a

block_40f48e:                                     ; preds = %block_.L_40f484
  %16504 = add i64 %16475, -12
  %16505 = add i64 %16503, 7
  store i64 %16505, i64* %3, align 8
  %16506 = inttoptr i64 %16504 to i32*
  store i32 0, i32* %16506, align 4
  %.pre336 = load i64, i64* %3, align 8
  br label %block_.L_40f495

block_.L_40f495:                                  ; preds = %block_40f49f, %block_40f48e
  %16507 = phi i64 [ %16735, %block_40f49f ], [ %.pre336, %block_40f48e ]
  %16508 = load i64, i64* %RBP.i, align 8
  %16509 = add i64 %16508, -12
  %16510 = add i64 %16507, 4
  store i64 %16510, i64* %3, align 8
  %16511 = inttoptr i64 %16509 to i32*
  %16512 = load i32, i32* %16511, align 4
  %16513 = add i32 %16512, -8
  %16514 = icmp ult i32 %16512, 8
  %16515 = zext i1 %16514 to i8
  store i8 %16515, i8* %14, align 1
  %16516 = and i32 %16513, 255
  %16517 = tail call i32 @llvm.ctpop.i32(i32 %16516)
  %16518 = trunc i32 %16517 to i8
  %16519 = and i8 %16518, 1
  %16520 = xor i8 %16519, 1
  store i8 %16520, i8* %21, align 1
  %16521 = xor i32 %16513, %16512
  %16522 = lshr i32 %16521, 4
  %16523 = trunc i32 %16522 to i8
  %16524 = and i8 %16523, 1
  store i8 %16524, i8* %27, align 1
  %16525 = icmp eq i32 %16513, 0
  %16526 = zext i1 %16525 to i8
  store i8 %16526, i8* %30, align 1
  %16527 = lshr i32 %16513, 31
  %16528 = trunc i32 %16527 to i8
  store i8 %16528, i8* %33, align 1
  %16529 = lshr i32 %16512, 31
  %16530 = xor i32 %16527, %16529
  %16531 = add nuw nsw i32 %16530, %16529
  %16532 = icmp eq i32 %16531, 2
  %16533 = zext i1 %16532 to i8
  store i8 %16533, i8* %39, align 1
  %16534 = icmp ne i8 %16528, 0
  %16535 = xor i1 %16534, %16532
  %.v374 = select i1 %16535, i64 10, i64 130
  %16536 = add i64 %16507, %.v374
  store i64 %16536, i64* %3, align 8
  br i1 %16535, label %block_40f49f, label %block_.L_40f517

block_40f49f:                                     ; preds = %block_.L_40f495
  %16537 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %16538 = add i64 %16537, 13112
  store i64 %16538, i64* %RAX.i1862, align 8
  %16539 = icmp ugt i64 %16537, -13113
  %16540 = zext i1 %16539 to i8
  store i8 %16540, i8* %14, align 1
  %16541 = trunc i64 %16538 to i32
  %16542 = and i32 %16541, 255
  %16543 = tail call i32 @llvm.ctpop.i32(i32 %16542)
  %16544 = trunc i32 %16543 to i8
  %16545 = and i8 %16544, 1
  %16546 = xor i8 %16545, 1
  store i8 %16546, i8* %21, align 1
  %16547 = xor i64 %16537, 16
  %16548 = xor i64 %16547, %16538
  %16549 = lshr i64 %16548, 4
  %16550 = trunc i64 %16549 to i8
  %16551 = and i8 %16550, 1
  store i8 %16551, i8* %27, align 1
  %16552 = icmp eq i64 %16538, 0
  %16553 = zext i1 %16552 to i8
  store i8 %16553, i8* %30, align 1
  %16554 = lshr i64 %16538, 63
  %16555 = trunc i64 %16554 to i8
  store i8 %16555, i8* %33, align 1
  %16556 = lshr i64 %16537, 63
  %16557 = xor i64 %16554, %16556
  %16558 = add nuw nsw i64 %16557, %16554
  %16559 = icmp eq i64 %16558, 2
  %16560 = zext i1 %16559 to i8
  store i8 %16560, i8* %39, align 1
  %16561 = add i64 %16536, 18
  store i64 %16561, i64* %3, align 8
  %16562 = load i32, i32* %16511, align 4
  %16563 = sext i32 %16562 to i64
  %16564 = shl nsw i64 %16563, 6
  store i64 %16564, i64* %RCX.i2028, align 8
  %16565 = add i64 %16564, %16538
  store i64 %16565, i64* %RAX.i1862, align 8
  %16566 = icmp ult i64 %16565, %16538
  %16567 = icmp ult i64 %16565, %16564
  %16568 = or i1 %16566, %16567
  %16569 = zext i1 %16568 to i8
  store i8 %16569, i8* %14, align 1
  %16570 = trunc i64 %16565 to i32
  %16571 = and i32 %16570, 255
  %16572 = tail call i32 @llvm.ctpop.i32(i32 %16571)
  %16573 = trunc i32 %16572 to i8
  %16574 = and i8 %16573, 1
  %16575 = xor i8 %16574, 1
  store i8 %16575, i8* %21, align 1
  %16576 = xor i64 %16538, %16565
  %16577 = lshr i64 %16576, 4
  %16578 = trunc i64 %16577 to i8
  %16579 = and i8 %16578, 1
  store i8 %16579, i8* %27, align 1
  %16580 = icmp eq i64 %16565, 0
  %16581 = zext i1 %16580 to i8
  store i8 %16581, i8* %30, align 1
  %16582 = lshr i64 %16565, 63
  %16583 = trunc i64 %16582 to i8
  store i8 %16583, i8* %33, align 1
  %16584 = lshr i64 %16563, 57
  %16585 = and i64 %16584, 1
  %16586 = xor i64 %16582, %16554
  %16587 = xor i64 %16582, %16585
  %16588 = add nuw nsw i64 %16586, %16587
  %16589 = icmp eq i64 %16588, 2
  %16590 = zext i1 %16589 to i8
  store i8 %16590, i8* %39, align 1
  %16591 = add i64 %16508, -16
  %16592 = add i64 %16536, 29
  store i64 %16592, i64* %3, align 8
  %16593 = inttoptr i64 %16591 to i32*
  %16594 = load i32, i32* %16593, align 4
  %16595 = sext i32 %16594 to i64
  store i64 %16595, i64* %RCX.i2028, align 8
  %16596 = shl nsw i64 %16595, 2
  %16597 = add i64 %16596, %16565
  %16598 = add i64 %16536, 32
  store i64 %16598, i64* %3, align 8
  %16599 = inttoptr i64 %16597 to i32*
  %16600 = load i32, i32* %16599, align 4
  %16601 = zext i32 %16600 to i64
  store i64 %16601, i64* %RDX.i4840, align 8
  %16602 = trunc i32 %16600 to i16
  store i16 %16602, i16* %SI.i61, align 2
  %16603 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16603, i64* %RAX.i1862, align 8
  %16604 = add i64 %16603, 6464
  %16605 = add i64 %16536, 50
  store i64 %16605, i64* %3, align 8
  %16606 = inttoptr i64 %16604 to i64*
  %16607 = load i64, i64* %16606, align 8
  store i64 %16607, i64* %RAX.i1862, align 8
  %16608 = load i64, i64* %RBP.i, align 8
  %16609 = add i64 %16608, -4
  %16610 = add i64 %16536, 54
  store i64 %16610, i64* %3, align 8
  %16611 = inttoptr i64 %16609 to i32*
  %16612 = load i32, i32* %16611, align 4
  %16613 = sext i32 %16612 to i64
  store i64 %16613, i64* %RCX.i2028, align 8
  %16614 = shl nsw i64 %16613, 3
  %16615 = add i64 %16614, %16607
  %16616 = add i64 %16536, 58
  store i64 %16616, i64* %3, align 8
  %16617 = inttoptr i64 %16615 to i64*
  %16618 = load i64, i64* %16617, align 8
  store i64 %16618, i64* %RAX.i1862, align 8
  %16619 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %16619, i64* %RCX.i2028, align 8
  %16620 = add i64 %16619, 164
  %16621 = add i64 %16536, 72
  store i64 %16621, i64* %3, align 8
  %16622 = inttoptr i64 %16620 to i32*
  %16623 = load i32, i32* %16622, align 4
  %16624 = zext i32 %16623 to i64
  store i64 %16624, i64* %RDX.i4840, align 8
  %16625 = add i64 %16608, -16
  %16626 = add i64 %16536, 75
  store i64 %16626, i64* %3, align 8
  %16627 = inttoptr i64 %16625 to i32*
  %16628 = load i32, i32* %16627, align 4
  %16629 = add i32 %16628, %16623
  %16630 = zext i32 %16629 to i64
  store i64 %16630, i64* %RDX.i4840, align 8
  %16631 = icmp ult i32 %16629, %16623
  %16632 = icmp ult i32 %16629, %16628
  %16633 = or i1 %16631, %16632
  %16634 = zext i1 %16633 to i8
  store i8 %16634, i8* %14, align 1
  %16635 = and i32 %16629, 255
  %16636 = tail call i32 @llvm.ctpop.i32(i32 %16635)
  %16637 = trunc i32 %16636 to i8
  %16638 = and i8 %16637, 1
  %16639 = xor i8 %16638, 1
  store i8 %16639, i8* %21, align 1
  %16640 = xor i32 %16628, %16623
  %16641 = xor i32 %16640, %16629
  %16642 = lshr i32 %16641, 4
  %16643 = trunc i32 %16642 to i8
  %16644 = and i8 %16643, 1
  store i8 %16644, i8* %27, align 1
  %16645 = icmp eq i32 %16629, 0
  %16646 = zext i1 %16645 to i8
  store i8 %16646, i8* %30, align 1
  %16647 = lshr i32 %16629, 31
  %16648 = trunc i32 %16647 to i8
  store i8 %16648, i8* %33, align 1
  %16649 = lshr i32 %16623, 31
  %16650 = lshr i32 %16628, 31
  %16651 = xor i32 %16647, %16649
  %16652 = xor i32 %16647, %16650
  %16653 = add nuw nsw i32 %16651, %16652
  %16654 = icmp eq i32 %16653, 2
  %16655 = zext i1 %16654 to i8
  store i8 %16655, i8* %39, align 1
  %16656 = sext i32 %16629 to i64
  store i64 %16656, i64* %RCX.i2028, align 8
  %16657 = shl nsw i64 %16656, 3
  %16658 = add i64 %16618, %16657
  %16659 = add i64 %16536, 82
  store i64 %16659, i64* %3, align 8
  %16660 = inttoptr i64 %16658 to i64*
  %16661 = load i64, i64* %16660, align 8
  store i64 %16661, i64* %RAX.i1862, align 8
  store i64 %16619, i64* %RCX.i2028, align 8
  %16662 = add i64 %16619, 160
  %16663 = add i64 %16536, 96
  store i64 %16663, i64* %3, align 8
  %16664 = inttoptr i64 %16662 to i32*
  %16665 = load i32, i32* %16664, align 4
  %16666 = zext i32 %16665 to i64
  store i64 %16666, i64* %RDX.i4840, align 8
  %16667 = add i64 %16608, -12
  %16668 = add i64 %16536, 99
  store i64 %16668, i64* %3, align 8
  %16669 = inttoptr i64 %16667 to i32*
  %16670 = load i32, i32* %16669, align 4
  %16671 = add i32 %16670, %16665
  %16672 = zext i32 %16671 to i64
  store i64 %16672, i64* %RDX.i4840, align 8
  %16673 = icmp ult i32 %16671, %16665
  %16674 = icmp ult i32 %16671, %16670
  %16675 = or i1 %16673, %16674
  %16676 = zext i1 %16675 to i8
  store i8 %16676, i8* %14, align 1
  %16677 = and i32 %16671, 255
  %16678 = tail call i32 @llvm.ctpop.i32(i32 %16677)
  %16679 = trunc i32 %16678 to i8
  %16680 = and i8 %16679, 1
  %16681 = xor i8 %16680, 1
  store i8 %16681, i8* %21, align 1
  %16682 = xor i32 %16670, %16665
  %16683 = xor i32 %16682, %16671
  %16684 = lshr i32 %16683, 4
  %16685 = trunc i32 %16684 to i8
  %16686 = and i8 %16685, 1
  store i8 %16686, i8* %27, align 1
  %16687 = icmp eq i32 %16671, 0
  %16688 = zext i1 %16687 to i8
  store i8 %16688, i8* %30, align 1
  %16689 = lshr i32 %16671, 31
  %16690 = trunc i32 %16689 to i8
  store i8 %16690, i8* %33, align 1
  %16691 = lshr i32 %16665, 31
  %16692 = lshr i32 %16670, 31
  %16693 = xor i32 %16689, %16691
  %16694 = xor i32 %16689, %16692
  %16695 = add nuw nsw i32 %16693, %16694
  %16696 = icmp eq i32 %16695, 2
  %16697 = zext i1 %16696 to i8
  store i8 %16697, i8* %39, align 1
  %16698 = sext i32 %16671 to i64
  store i64 %16698, i64* %RCX.i2028, align 8
  %16699 = shl nsw i64 %16698, 1
  %16700 = add i64 %16661, %16699
  %16701 = load i16, i16* %SI.i61, align 2
  %16702 = add i64 %16536, 106
  store i64 %16702, i64* %3, align 8
  %16703 = inttoptr i64 %16700 to i16*
  store i16 %16701, i16* %16703, align 2
  %16704 = load i64, i64* %RBP.i, align 8
  %16705 = add i64 %16704, -12
  %16706 = load i64, i64* %3, align 8
  %16707 = add i64 %16706, 3
  store i64 %16707, i64* %3, align 8
  %16708 = inttoptr i64 %16705 to i32*
  %16709 = load i32, i32* %16708, align 4
  %16710 = add i32 %16709, 1
  %16711 = zext i32 %16710 to i64
  store i64 %16711, i64* %RAX.i1862, align 8
  %16712 = icmp eq i32 %16709, -1
  %16713 = icmp eq i32 %16710, 0
  %16714 = or i1 %16712, %16713
  %16715 = zext i1 %16714 to i8
  store i8 %16715, i8* %14, align 1
  %16716 = and i32 %16710, 255
  %16717 = tail call i32 @llvm.ctpop.i32(i32 %16716)
  %16718 = trunc i32 %16717 to i8
  %16719 = and i8 %16718, 1
  %16720 = xor i8 %16719, 1
  store i8 %16720, i8* %21, align 1
  %16721 = xor i32 %16710, %16709
  %16722 = lshr i32 %16721, 4
  %16723 = trunc i32 %16722 to i8
  %16724 = and i8 %16723, 1
  store i8 %16724, i8* %27, align 1
  %16725 = zext i1 %16713 to i8
  store i8 %16725, i8* %30, align 1
  %16726 = lshr i32 %16710, 31
  %16727 = trunc i32 %16726 to i8
  store i8 %16727, i8* %33, align 1
  %16728 = lshr i32 %16709, 31
  %16729 = xor i32 %16726, %16728
  %16730 = add nuw nsw i32 %16729, %16726
  %16731 = icmp eq i32 %16730, 2
  %16732 = zext i1 %16731 to i8
  store i8 %16732, i8* %39, align 1
  %16733 = add i64 %16706, 9
  store i64 %16733, i64* %3, align 8
  store i32 %16710, i32* %16708, align 4
  %16734 = load i64, i64* %3, align 8
  %16735 = add i64 %16734, -125
  store i64 %16735, i64* %3, align 8
  br label %block_.L_40f495

block_.L_40f517:                                  ; preds = %block_.L_40f495
  %16736 = add i64 %16508, -16
  %16737 = add i64 %16536, 8
  store i64 %16737, i64* %3, align 8
  %16738 = inttoptr i64 %16736 to i32*
  %16739 = load i32, i32* %16738, align 4
  %16740 = add i32 %16739, 1
  %16741 = zext i32 %16740 to i64
  store i64 %16741, i64* %RAX.i1862, align 8
  %16742 = icmp eq i32 %16739, -1
  %16743 = icmp eq i32 %16740, 0
  %16744 = or i1 %16742, %16743
  %16745 = zext i1 %16744 to i8
  store i8 %16745, i8* %14, align 1
  %16746 = and i32 %16740, 255
  %16747 = tail call i32 @llvm.ctpop.i32(i32 %16746)
  %16748 = trunc i32 %16747 to i8
  %16749 = and i8 %16748, 1
  %16750 = xor i8 %16749, 1
  store i8 %16750, i8* %21, align 1
  %16751 = xor i32 %16740, %16739
  %16752 = lshr i32 %16751, 4
  %16753 = trunc i32 %16752 to i8
  %16754 = and i8 %16753, 1
  store i8 %16754, i8* %27, align 1
  %16755 = zext i1 %16743 to i8
  store i8 %16755, i8* %30, align 1
  %16756 = lshr i32 %16740, 31
  %16757 = trunc i32 %16756 to i8
  store i8 %16757, i8* %33, align 1
  %16758 = lshr i32 %16739, 31
  %16759 = xor i32 %16756, %16758
  %16760 = add nuw nsw i32 %16759, %16756
  %16761 = icmp eq i32 %16760, 2
  %16762 = zext i1 %16761 to i8
  store i8 %16762, i8* %39, align 1
  %16763 = add i64 %16536, 14
  store i64 %16763, i64* %3, align 8
  store i32 %16740, i32* %16738, align 4
  %16764 = load i64, i64* %3, align 8
  %16765 = add i64 %16764, -161
  store i64 %16765, i64* %3, align 8
  br label %block_.L_40f484

block_.L_40f52a:                                  ; preds = %block_.L_40f484
  %16766 = add i64 %16475, -8
  %16767 = add i64 %16503, 3
  store i64 %16767, i64* %3, align 8
  %16768 = inttoptr i64 %16766 to i32*
  %16769 = load i32, i32* %16768, align 4
  %16770 = zext i32 %16769 to i64
  store i64 %16770, i64* %RAX.i1862, align 8
  %16771 = load i64, i64* %6, align 8
  %16772 = add i64 %16771, 784
  store i64 %16772, i64* %6, align 8
  %16773 = icmp ugt i64 %16771, -785
  %16774 = zext i1 %16773 to i8
  store i8 %16774, i8* %14, align 1
  %16775 = trunc i64 %16772 to i32
  %16776 = and i32 %16775, 255
  %16777 = tail call i32 @llvm.ctpop.i32(i32 %16776)
  %16778 = trunc i32 %16777 to i8
  %16779 = and i8 %16778, 1
  %16780 = xor i8 %16779, 1
  store i8 %16780, i8* %21, align 1
  %16781 = xor i64 %16771, 16
  %16782 = xor i64 %16781, %16772
  %16783 = lshr i64 %16782, 4
  %16784 = trunc i64 %16783 to i8
  %16785 = and i8 %16784, 1
  store i8 %16785, i8* %27, align 1
  %16786 = icmp eq i64 %16772, 0
  %16787 = zext i1 %16786 to i8
  store i8 %16787, i8* %30, align 1
  %16788 = lshr i64 %16772, 63
  %16789 = trunc i64 %16788 to i8
  store i8 %16789, i8* %33, align 1
  %16790 = lshr i64 %16771, 63
  %16791 = xor i64 %16788, %16790
  %16792 = add nuw nsw i64 %16791, %16788
  %16793 = icmp eq i64 %16792, 2
  %16794 = zext i1 %16793 to i8
  store i8 %16794, i8* %39, align 1
  %16795 = add i64 %16503, 11
  store i64 %16795, i64* %3, align 8
  %16796 = add i64 %16771, 792
  %16797 = inttoptr i64 %16772 to i64*
  %16798 = load i64, i64* %16797, align 8
  store i64 %16798, i64* %RBP.i, align 8
  store i64 %16796, i64* %6, align 8
  %16799 = add i64 %16503, 12
  store i64 %16799, i64* %3, align 8
  %16800 = inttoptr i64 %16796 to i64*
  %16801 = load i64, i64* %16800, align 8
  store i64 %16801, i64* %3, align 8
  %16802 = add i64 %16771, 800
  store i64 %16802, i64* %6, align 8
  ret %struct.Memory* %MEMORY.37
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x310___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -784
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 784
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xa4585__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xa4585__rip__type* @G_0xa4585__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xa4585__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xa4585__rip__type* @G_0xa4585__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3758__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 14168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0xc__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x278___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 632
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x1b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3740__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 14144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x1e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x1e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -488
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1b8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0xc___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -12
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ult i32 %6, 12
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl__esi___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i32, i32* %ESI, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sitofp i32 %5 to double
  %9 = bitcast %union.VectorReg* %4 to double*
  store double %8, double* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divsd__xmm1___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fdiv double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movaps__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = bitcast %union.VectorReg* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = extractelement <2 x i32> %9, i32 0
  %14 = bitcast %union.VectorReg* %3 to i32*
  store i32 %13, i32* %14, align 1
  %15 = extractelement <2 x i32> %9, i32 1
  %16 = getelementptr inbounds i8, i8* %5, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %12, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %12, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.pow_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xa44c9__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xa44c9__rip__type* @G_0xa44c9__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xa44c9__rip____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xa44c9__rip__type* @G_0xa44c9__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm0___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm1___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm2__MINUS0x228__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -552
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6d4690___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6d4690_type* @G_0x6d4690 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0xd0__rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 208
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d3b5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x234__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -564
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d410(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0xd0__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 208
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x33___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -51
  %8 = icmp ult i32 %4, 51
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %4, 16
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %4, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40d3e6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x33___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 51, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x238__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -568
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d404(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x238__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -568
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x238__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -568
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x234__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -564
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x22c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -556
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1b8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6d4690___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6d4690_type* @G_0x6d4690 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0xd0__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 208
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d44a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x23c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -572
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d4a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40d47b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x240__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -576
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d499(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x240__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -576
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x240__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -576
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x23c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -572
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x230__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -560
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x22c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d4cf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x22c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x244__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -580
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d4e4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x22c__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2320___rax_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4924192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x244__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -580
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x244__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -580
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x6___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -444
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d519(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x248__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -584
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d52e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x248__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -584
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x248__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -584
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x24c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -588
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -448
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1bc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xf___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 15
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -16
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -452
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -452
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x250__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -592
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -588
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RDX, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x250__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -592
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x230__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d5a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x254__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -596
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d5ba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x230__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x254__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -596
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -456
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d5f3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x258__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -600
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d608(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x258__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x6___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 6, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x25c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -604
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -460
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -464
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d0__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x260__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -608
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x25c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -604
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x260__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x194__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x8__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -8
  %10 = icmp ult i32 %8, 8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d729(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x8__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -8
  %10 = icmp ult i32 %8, 8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d716(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x190__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3138___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 12600
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -12601
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rcx__rdx_2____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rcx__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RSI, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi____rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ESI, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ESI, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d67d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d71b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d66c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40dad0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40dabd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d8f8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x10__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d837(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x24__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x70__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -112
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d76c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x70__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x6c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x24__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x6c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x68__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d752(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40daaa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d9e4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x10__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x28__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x18__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d919(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RSI, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d8ff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40daaf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -5
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d741(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40dac2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d730(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40ddc7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40ddb4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40dc47(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40dbb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x24__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rsi__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x24__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rsi__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RCX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x70__rbp__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -112
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___rax__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RCX, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x70__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -112
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40db13(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x70__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x6c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rsi__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ECX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x6c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x68__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDI, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__edi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EDI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp ugt i32 %6, -4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rax__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %ECX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40daf9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40dda1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40dd07(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x10__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x10__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x18__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40dc68(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RDI, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40dc4e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40dda6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40dae8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ddb9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40dad7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x3338__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 13112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x3438__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 13368
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x3348__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 13128
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x3448__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 13384
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x3438__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 13368
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x3448__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 13384
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x3348__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 13128
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x190__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x110__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x180__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -384
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x100__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -256
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -432
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x110__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x100__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -256
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -428
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x180__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -384
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -424
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -420
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40e594(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x44__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -68
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b0__rbp__rcx_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -432
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.abs_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1cc__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -460
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rsi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = bitcast i64* %RSI to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i32, i32* %5, align 4
  %9 = shl i64 %3, 32
  %10 = ashr exact i64 %9, 32
  %11 = sext i32 %8 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %RAX, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x194__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %EDI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d0__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x268__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -616
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__cl___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %12 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = shl i64 %4, 32
  %11 = ashr i64 %10, 33
  br label %20

; <label>:12:                                     ; preds = %block_400488
  %13 = and i8 %5, 31
  %14 = zext i8 %13 to i64
  %15 = add nsw i64 %14, -1
  %16 = shl i64 %4, 32
  %17 = ashr exact i64 %16, 32
  %18 = ashr i64 %17, %15
  %19 = lshr i64 %18, 1
  br label %20

; <label>:20:                                     ; preds = %12, %9
  %21 = phi i64 [ %19, %12 ], [ %11, %9 ]
  %22 = phi i64 [ %18, %12 ], [ %4, %9 ]
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = trunc i64 %21 to i32
  %26 = and i64 %21, 4294967295
  store i64 %26, i64* %RAX, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %24, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = and i32 %25, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29)
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %28, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %36 = icmp eq i32 %25, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %39 = lshr i32 %25, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %38, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %41, align 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %20, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -508
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -508
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RAX, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x268__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -616
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl___rsi_(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = bitcast i64* %RSI to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = load i32, i32* %4, align 4
  %16 = sext i32 %15 to i64
  %17 = shl nuw i64 %14, 32
  %18 = or i64 %17, %10
  %19 = sdiv i64 %18, %16
  %20 = shl i64 %19, 32
  %21 = ashr exact i64 %20, 32
  %22 = icmp eq i64 %19, %21
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %block_400488
  %24 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:25:                                     ; preds = %block_400488
  %26 = srem i64 %18, %16
  %27 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %28 = and i64 %19, 4294967295
  store i64 %28, i64* %27, align 8
  %29 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %30 = and i64 %26, 4294967295
  store i64 %30, i64* %29, align 8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %25, %23
  %37 = phi %struct.Memory* [ %24, %23 ], [ %2, %25 ]
  ret %struct.Memory* %37
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp__rsi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -96
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -508
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b0__rbp__rsi_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -432
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x26c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -620
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.sign(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x26c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -620
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x1fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -508
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c0__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R9, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r9___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R8, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r8____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = bitcast i64* %R8 to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = load i32, i32* %5, align 4
  %9 = shl i64 %3, 32
  %10 = ashr exact i64 %9, 32
  %11 = sext i32 %8 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %RAX, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -452
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x204__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -516
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -96
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x1b0__rbp__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -432
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RAX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x200__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -512
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x200__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x208__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -520
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x204__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -516
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x208__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -520
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40e350(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x204__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -516
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x208__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -96
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x204__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -516
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -508
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x270__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -624
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x20c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -524
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x210__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b28d0___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull_0x4b2a50___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  %6 = load i32, i32* bitcast (%G_0x4b2a50_type* @G_0x4b2a50 to i32*), align 8
  %7 = shl i64 %3, 32
  %8 = ashr exact i64 %7, 32
  %9 = sext i32 %6 to i64
  %10 = mul nsw i64 %9, %8
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1bc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x278__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -632
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x5___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 36
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x270__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x1b0__rbp__r8_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -432
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RSI, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl__esi___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i32, i32* %ESI, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sitofp i32 %5 to double
  %9 = bitcast %union.VectorReg* %4 to double*
  store double %8, double* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x218__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x44__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x278__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -632
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.levrun_linfo_c2x2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x218__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_MINUS0x218__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -536
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, %11
  store double %12, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x228__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -552
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_MINUS0x20c__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -524
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast [32 x %union.VectorReg]* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -96
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x208__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x200__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x27c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -636
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x288__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -648
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -636
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x220__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x288__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -648
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x220__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_MINUS0x220__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -544
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, %11
  store double %12, double* %8, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomisd_MINUS0x220__rbp____xmm0(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -544
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fcmp uno double %9, %11
  br i1 %12, label %13, label %23

; <label>:13:                                     ; preds = %block_400488
  %14 = fadd double %9, %11
  %15 = bitcast double %14 to i64
  %16 = and i64 %15, 9221120237041090560
  %17 = icmp eq i64 %16, 9218868437227405312
  %18 = and i64 %15, 2251799813685247
  %19 = icmp ne i64 %18, 0
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %29

; <label>:21:                                     ; preds = %13
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:23:                                     ; preds = %block_400488
  %24 = fcmp ogt double %9, %11
  br i1 %24, label %29, label %25

; <label>:25:                                     ; preds = %23
  %26 = fcmp olt double %9, %11
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %25
  %28 = fcmp oeq double %9, %11
  br i1 %28, label %29, label %36

; <label>:29:                                     ; preds = %27, %25, %23, %13
  %30 = phi i8 [ 0, %23 ], [ 0, %25 ], [ 1, %27 ], [ 1, %13 ]
  %31 = phi i8 [ 0, %23 ], [ 0, %25 ], [ 0, %27 ], [ 1, %13 ]
  %32 = phi i8 [ 0, %23 ], [ 1, %25 ], [ 0, %27 ], [ 1, %13 ]
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %32, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %29, %27
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %36, %21
  %40 = phi %struct.Memory* [ %22, %21 ], [ %2, %36 ]
  ret %struct.Memory* %40
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40e2e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jp_.L_40e2e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x28c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -652
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -652
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDI, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40e2c6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x290__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -656
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e2d2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x208__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x290__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -656
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e316(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x220__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomisd__xmm0___xmm1(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %4 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast [32 x %union.VectorReg]* %3 to double*
  %10 = load double, double* %9, align 1
  %11 = fcmp uno double %8, %10
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %block_400488
  %13 = fadd double %8, %10
  %14 = bitcast double %13 to i64
  %15 = and i64 %14, 9221120237041090560
  %16 = icmp eq i64 %15, 9218868437227405312
  %17 = and i64 %14, 2251799813685247
  %18 = icmp ne i64 %17, 0
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %12
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:22:                                     ; preds = %block_400488
  %23 = fcmp ogt double %8, %10
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %22
  %25 = fcmp olt double %8, %10
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp oeq double %8, %10
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %26, %24, %22, %12
  %29 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 1, %26 ], [ 1, %12 ]
  %30 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 0, %26 ], [ 1, %12 ]
  %31 = phi i8 [ 0, %22 ], [ 1, %24 ], [ 0, %26 ], [ 1, %12 ]
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %31, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %28, %26
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %35, %20
  %39 = phi %struct.Memory* [ %21, %20 ], [ %2, %35 ]
  ret %struct.Memory* %39
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_40e308(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e311(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x204__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -516
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40e336(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x294__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -660
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e342(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x200__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x294__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -660
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e3e4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40e379(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e3df(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40e397(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x298__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -664
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e3a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x298__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -664
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40e3ca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x29c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -668
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e3d6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x29c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x934__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2356
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40e424(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__0x28__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40e424(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x80f__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2063
  %10 = icmp ult i32 %8, 2063
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40e41f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x80f__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2063, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e424(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40e507(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xf0000___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 983040, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -672
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a0__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -672
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1b8__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orq_0x1d0__rdi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = add i64 %4, 464
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = or i64 %9, %3
  store i64 %10, i64* %RSI, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = trunc i64 %10 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i64 %10, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i64 %10, 63
  %23 = trunc i64 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__0x1d0__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 464
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -8
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40e47f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -676
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e488(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -676
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1e0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x40__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1e8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -488
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -64
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b28d0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = bitcast i64* %RCX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i32, i32* %5, align 4
  %9 = shl i64 %3, 32
  %10 = ashr exact i64 %9, 32
  %11 = sext i32 %8 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %RAX, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1bc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b0__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -432
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1cc__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -460
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = bitcast i64* %RDX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i32, i32* %5, align 4
  %9 = shl i64 %3, 32
  %10 = ashr exact i64 %9, 32
  %11 = sext i32 %8 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %RAX, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x194__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ECX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b28d0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1cc__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -460
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R8, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x60__rbp__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -96
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40df40(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  store i32 0, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x5c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x58__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x54__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -680
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -680
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x3338__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 13112
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x5c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x58__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x54__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x3438__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 13368
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x5c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x58__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x3348__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 13128
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x54__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x3448__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 13384
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40eff5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40efe2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -684
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ac__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -688
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2b0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -688
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x1d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -468
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3738__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 14136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdi__r8_8____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1d4__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -468
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = bitcast i64* %RDI to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x1f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x1f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -504
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x10__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -16
  %10 = icmp ult i32 %8, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40efc2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11afc__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40e755(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x6d4750(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d4750_type* @G_0x6d4750 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40e778(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11948__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72008
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2380___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924288
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 2
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2381___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924289
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e796(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2360___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924256
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 2
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2361___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924257
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x44__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -68
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rdx_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x190__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R9, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R8, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r9__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x194__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x2b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -696
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl___rsi__r8_4_(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %10 = bitcast %union.anon* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %14 = bitcast %union.anon* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = inttoptr i64 %6 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = shl nuw i64 %16, 32
  %21 = or i64 %20, %12
  %22 = sdiv i64 %21, %19
  %23 = shl i64 %22, 32
  %24 = ashr exact i64 %23, 32
  %25 = icmp eq i64 %22, %24
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %block_400488
  %27 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:28:                                     ; preds = %block_400488
  %29 = srem i64 %21, %19
  %30 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  %31 = and i64 %22, 4294967295
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %33 = and i64 %29, 4294967295
  store i64 %33, i64* %32, align 8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %39, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %28, %26
  %40 = phi %struct.Memory* [ %27, %26 ], [ %2, %28 ]
  ret %struct.Memory* %40
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RSI, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rsi__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xc__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %6, -12
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %5
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %4, align 8
  %14 = icmp ult i32 %12, %5
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %5
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %5, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__r10d___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %R10D, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2b8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -696
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R8, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x10__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %6, -16
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %5
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %4, align 8
  %14 = icmp ult i32 %12, %5
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %5
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %5, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___r8__rsi_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -700
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2bc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x190__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c0__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R11, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R11, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r11___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R9, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R11, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R11, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r9__r11_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %R11, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x34__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -452
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %R9, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___r9__r11_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %R9, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x10__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___r8__r9_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %R9, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R9, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r8__r9_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %R9, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40ed10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -704
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2a50___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b28d0___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r11___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R10, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r10__r11_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = load i64, i64* %R11, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R10, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r10___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R9, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r9__r10_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %R10, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x2c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -712
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___r8__r9_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %R9, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RSI, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2c8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.levrun_linfo_inter(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -716
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x2d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -728
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2cc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2d8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -728
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40eca0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jp_.L_40eca0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -732
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2dc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -732
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40ec86(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -736
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ec92(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ecd6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_40ecc8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ecd1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40ecf6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -740
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ed02(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -740
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40eda4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40ed39(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ed9f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40ed57(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -744
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ed63(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -744
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40ed8a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -748
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ed96(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -748
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40eee0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RCX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x10___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -17
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x2___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RSI, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__esi___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1b8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orq_0x1d0__r8____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = add i64 %4, 464
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = or i64 %9, %3
  store i64 %10, i64* %RDI, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = trunc i64 %10 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i64 %10, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i64 %10, 63
  %23 = trunc i64 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__0x1d0__r8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 464
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40ee06(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x84__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xf423f___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 5
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 999999
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -1000000
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -132
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ee3a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b23a0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x9a4__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 2468
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x44__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl___rax__rcx_1____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x84__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -132
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -132
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1f0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1f8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2a50___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c0__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdx__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdx__rsi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RDX, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rdx__r8_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e713(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1f0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x40__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  store i32 0, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e659(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40efe7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40e648(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40f009(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40f47d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40f46a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f16c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f08d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f043(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -128
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x68__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -124
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x64__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -120
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f159(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -128
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x80__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RAX, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x10__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx__rsi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x80__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RAX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x14__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f0c0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f15e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f032(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f457(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f1ce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f184(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f444(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bf0__rdx____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 72688
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -128
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x80__rbp__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RSI, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RSI, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -752
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40f257(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -756
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f273(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -128
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x80__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RCX, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RCX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -756
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -756
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -752
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f2a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bf0__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72688
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -760
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f2f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -128
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x80__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RDX, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RDX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40f2cd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -764
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f2e9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -764
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2fc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -764
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -760
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -760
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__ecx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RDI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rdx__rdi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bf0__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 72688
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x80__rbp__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RSI, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__esi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x300__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -768
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40f367(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x304__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -772
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f383(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x80__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RCX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x304__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -772
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x304__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -772
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x300__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f3b0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x308__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -776
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f405(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x80__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RDX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40f3dd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x30c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -780
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f3f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x30c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -780
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -780
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x308__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -776
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x308__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -776
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x18__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f201(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f449(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f173(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f45c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f021(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f46f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f010(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f52a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40f517(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx___si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %DX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1940__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xa4__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xa0__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %SI, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f495(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f51c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40f484(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x310___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 784
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -785
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
