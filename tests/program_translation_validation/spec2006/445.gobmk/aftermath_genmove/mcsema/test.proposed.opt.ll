; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x7ae438_type = type <{ [4 x i8] }>
%G_0x99c0a0_type = type <{ [8 x i8] }>
%G_0xab0f24_type = type <{ [4 x i8] }>
%G_0xab0fe0_type = type <{ [8 x i8] }>
%G_0xb54ce4_type = type <{ [1 x i8] }>
%G_0xdcca8__rip__type = type <{ [8 x i8] }>
%G_0xddd5b__rip__type = type <{ [4 x i8] }>
%G__0x579dc5_type = type <{ [8 x i8] }>
%G__0x579dc8_type = type <{ [8 x i8] }>
%G__0x579dcb_type = type <{ [8 x i8] }>
%G__0x579dce_type = type <{ [8 x i8] }>
%G__0x579dd1_type = type <{ [8 x i8] }>
%G__0x579dd4_type = type <{ [8 x i8] }>
%G__0x579dd7_type = type <{ [8 x i8] }>
%G__0x579dec_type = type <{ [8 x i8] }>
%G__0x579dfb_type = type <{ [8 x i8] }>
%G__0x579e0b_type = type <{ [8 x i8] }>
%G__0x579e20_type = type <{ [8 x i8] }>
%G__0x579e48_type = type <{ [8 x i8] }>
%G__0x579e54_type = type <{ [8 x i8] }>
%G__0x579e85_type = type <{ [8 x i8] }>
%G__0x579eb0_type = type <{ [8 x i8] }>
%G__0x579ecb_type = type <{ [8 x i8] }>
%G__0x579ed7_type = type <{ [8 x i8] }>
%G__0x579ef8_type = type <{ [8 x i8] }>
%G__0x57f1e3_type = type <{ [8 x i8] }>
%G__0x586073_type = type <{ [8 x i8] }>
%G__0xb0eff0_type = type <{ [8 x i8] }>
%G__0xb4bd20_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x7ae438 = local_unnamed_addr global %G_0x7ae438_type zeroinitializer
@G_0x99c0a0 = local_unnamed_addr global %G_0x99c0a0_type zeroinitializer
@G_0xab0f24 = local_unnamed_addr global %G_0xab0f24_type zeroinitializer
@G_0xab0fe0 = local_unnamed_addr global %G_0xab0fe0_type zeroinitializer
@G_0xb54ce4 = local_unnamed_addr global %G_0xb54ce4_type zeroinitializer
@G_0xdcca8__rip_ = global %G_0xdcca8__rip__type zeroinitializer
@G_0xddd5b__rip_ = global %G_0xddd5b__rip__type zeroinitializer
@G__0x579dc5 = global %G__0x579dc5_type zeroinitializer
@G__0x579dc8 = global %G__0x579dc8_type zeroinitializer
@G__0x579dcb = global %G__0x579dcb_type zeroinitializer
@G__0x579dce = global %G__0x579dce_type zeroinitializer
@G__0x579dd1 = global %G__0x579dd1_type zeroinitializer
@G__0x579dd4 = global %G__0x579dd4_type zeroinitializer
@G__0x579dd7 = global %G__0x579dd7_type zeroinitializer
@G__0x579dec = global %G__0x579dec_type zeroinitializer
@G__0x579dfb = global %G__0x579dfb_type zeroinitializer
@G__0x579e0b = global %G__0x579e0b_type zeroinitializer
@G__0x579e20 = global %G__0x579e20_type zeroinitializer
@G__0x579e48 = global %G__0x579e48_type zeroinitializer
@G__0x579e54 = global %G__0x579e54_type zeroinitializer
@G__0x579e85 = global %G__0x579e85_type zeroinitializer
@G__0x579eb0 = global %G__0x579eb0_type zeroinitializer
@G__0x579ecb = global %G__0x579ecb_type zeroinitializer
@G__0x579ed7 = global %G__0x579ed7_type zeroinitializer
@G__0x579ef8 = global %G__0x579ef8_type zeroinitializer
@G__0x57f1e3 = global %G__0x57f1e3_type zeroinitializer
@G__0x586073 = global %G__0x586073_type zeroinitializer
@G__0xb0eff0 = global %G__0xb0eff0_type zeroinitializer
@G__0xb4bd20 = global %G__0xb4bd20_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #0

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #0

declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)

declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_450be0.owl_hotspots(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_44f5b0.reading_hotspots(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_451db0.gprintf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4115b0.approxlib(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4142a0.is_self_atari(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40f780.countlib(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_46bc30.safe_move(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40f840.findlib(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4137f0.countstones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_415cb0.mark_string(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_409590.is_suicide(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40f200.is_ko(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40ec70.is_illegal_ko_capture(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_44c3c0.owl_does_defend(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4794d0.confirm_safety(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_408e30.trymove(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_413b00.chainlinks(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_46a780.find_defense(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40dd60.popgo(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_44cb30.owl_does_attack(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @aftermath_genmove(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -11032
  store i64 %11, i64* %6, align 8
  %12 = icmp ult i64 %8, 11024
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i2528 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
  %41 = add i64 %7, -4856
  store i64 %41, i64* %RAX.i2528, align 8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D.i3060 = bitcast %union.anon* %42 to i32*
  %43 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
  store i64 3, i64* %43, align 8
  %RDI.i3360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %44 = add i64 %7, -24
  %45 = load i64, i64* %RDI.i3360, align 8
  %46 = add i64 %10, 27
  store i64 %46, i64* %3, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %47, align 8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI.i3824 = bitcast %union.anon* %48 to i32*
  %49 = load i64, i64* %RBP.i, align 8
  %50 = add i64 %49, -20
  %51 = load i32, i32* %ESI.i3824, align 4
  %52 = load i64, i64* %3, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %3, align 8
  %54 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %54, align 4
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i3821 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
  %56 = load i64, i64* %RBP.i, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX.i3821, align 8
  %59 = load i64, i64* %3, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %3, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX.i3818 = bitcast %union.anon* %62 to i32*
  %63 = load i64, i64* %RBP.i, align 8
  %64 = add i64 %63, -36
  %65 = load i32, i32* %ECX.i3818, align 4
  %66 = load i64, i64* %3, align 8
  %67 = add i64 %66, 3
  store i64 %67, i64* %3, align 8
  %68 = inttoptr i64 %64 to i32*
  store i32 %65, i32* %68, align 4
  %69 = load i32, i32* %R8D.i3060, align 4
  %70 = load i64, i64* %RBP.i, align 8
  %71 = add i64 %70, -20
  %72 = load i64, i64* %3, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %3, align 8
  %74 = inttoptr i64 %71 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = sub i32 %69, %75
  %77 = zext i32 %76 to i64
  store i64 %77, i64* %43, align 8
  %78 = icmp ult i32 %69, %75
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %14, align 1
  %80 = and i32 %76, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80)
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %21, align 1
  %85 = xor i32 %75, %69
  %86 = xor i32 %85, %76
  %87 = lshr i32 %86, 4
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  store i8 %89, i8* %27, align 1
  %90 = icmp eq i32 %76, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %30, align 1
  %92 = lshr i32 %76, 31
  %93 = trunc i32 %92 to i8
  store i8 %93, i8* %33, align 1
  %94 = lshr i32 %69, 31
  %95 = lshr i32 %75, 31
  %96 = xor i32 %95, %94
  %97 = xor i32 %92, %94
  %98 = add nuw nsw i32 %97, %96
  %99 = icmp eq i32 %98, 2
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %39, align 1
  %101 = add i64 %70, -44
  %102 = add i64 %72, 8
  store i64 %102, i64* %3, align 8
  %103 = inttoptr i64 %101 to i32*
  store i32 %76, i32* %103, align 4
  %104 = load i64, i64* %RBP.i, align 8
  %105 = add i64 %104, -8056
  %106 = load i64, i64* %3, align 8
  %107 = add i64 %106, 10
  store i64 %107, i64* %3, align 8
  %108 = inttoptr i64 %105 to i32*
  store i32 0, i32* %108, align 4
  %109 = load i64, i64* %RBP.i, align 8
  %110 = add i64 %109, -8060
  %111 = load i64, i64* %3, align 8
  %112 = add i64 %111, 10
  store i64 %112, i64* %3, align 8
  %113 = inttoptr i64 %110 to i32*
  store i32 0, i32* %113, align 4
  %114 = load i64, i64* %RBP.i, align 8
  %115 = add i64 %114, -8068
  %116 = load i64, i64* %3, align 8
  %117 = add i64 %116, 10
  store i64 %117, i64* %3, align 8
  %118 = inttoptr i64 %115 to i32*
  store i32 0, i32* %118, align 4
  %119 = load i64, i64* %RBP.i, align 8
  %120 = add i64 %119, -8072
  %121 = load i64, i64* %3, align 8
  %122 = add i64 %121, 10
  store i64 %122, i64* %3, align 8
  %123 = inttoptr i64 %120 to i32*
  store i32 0, i32* %123, align 4
  %124 = load i64, i64* %RAX.i2528, align 8
  %125 = load i64, i64* %3, align 8
  store i64 %124, i64* %RDI.i3360, align 8
  %126 = add i64 %125, 311770
  %127 = add i64 %125, 8
  %128 = load i64, i64* %6, align 8
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %127, i64* %130, align 8
  store i64 %129, i64* %6, align 8
  store i64 %126, i64* %3, align 8
  %call2_404a09 = tail call %struct.Memory* @sub_450be0.owl_hotspots(%struct.State* %0, i64 %126, %struct.Memory* %2)
  %131 = load i64, i64* %RBP.i, align 8
  %132 = add i64 %131, -6448
  %133 = load i64, i64* %3, align 8
  store i64 %132, i64* %RDI.i3360, align 8
  %134 = add i64 %133, 306082
  %135 = add i64 %133, 12
  %136 = load i64, i64* %6, align 8
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %135, i64* %138, align 8
  store i64 %137, i64* %6, align 8
  store i64 %134, i64* %3, align 8
  %call2_404a15 = tail call %struct.Memory* @sub_44f5b0.reading_hotspots(%struct.State* %0, i64 %134, %struct.Memory* %call2_404a09)
  %139 = load i64, i64* %RBP.i, align 8
  %140 = add i64 %139, -8072
  %141 = load i64, i64* %3, align 8
  %142 = add i64 %141, 10
  store i64 %142, i64* %3, align 8
  %143 = inttoptr i64 %140 to i32*
  store i32 21, i32* %143, align 4
  %RCX.i3786 = getelementptr inbounds %union.anon, %union.anon* %62, i64 0, i32 0
  %EAX.i3678 = bitcast %union.anon* %40 to i32*
  %.pre = load i64, i64* %3, align 8
  br label %block_.L_404a24

block_.L_404a24:                                  ; preds = %block_.L_404b61, %entry
  %144 = phi i64 [ %534, %block_.L_404b61 ], [ %.pre, %entry ]
  %145 = load i64, i64* %RBP.i, align 8
  %146 = add i64 %145, -8072
  %147 = add i64 %144, 10
  store i64 %147, i64* %3, align 8
  %148 = inttoptr i64 %146 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = add i32 %149, -400
  %151 = icmp ult i32 %149, 400
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %14, align 1
  %153 = and i32 %150, 255
  %154 = tail call i32 @llvm.ctpop.i32(i32 %153)
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  store i8 %157, i8* %21, align 1
  %158 = xor i32 %149, 16
  %159 = xor i32 %158, %150
  %160 = lshr i32 %159, 4
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  store i8 %162, i8* %27, align 1
  %163 = icmp eq i32 %150, 0
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %30, align 1
  %165 = lshr i32 %150, 31
  %166 = trunc i32 %165 to i8
  store i8 %166, i8* %33, align 1
  %167 = lshr i32 %149, 31
  %168 = xor i32 %165, %167
  %169 = add nuw nsw i32 %168, %167
  %170 = icmp eq i32 %169, 2
  %171 = zext i1 %170 to i8
  store i8 %171, i8* %39, align 1
  %172 = icmp ne i8 %166, 0
  %173 = xor i1 %172, %170
  %.v520 = select i1 %173, i64 16, i64 337
  %174 = add i64 %144, %.v520
  store i64 %174, i64* %3, align 8
  br i1 %173, label %block_404a34, label %block_.L_404b75

block_404a34:                                     ; preds = %block_.L_404a24
  %175 = add i64 %174, 7
  store i64 %175, i64* %3, align 8
  %176 = load i32, i32* %148, align 4
  %177 = sext i32 %176 to i64
  store i64 %177, i64* %RAX.i2528, align 8
  %178 = add nsw i64 %177, 12099168
  %179 = add i64 %174, 15
  store i64 %179, i64* %3, align 8
  %180 = inttoptr i64 %178 to i8*
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i64
  store i64 %182, i64* %RCX.i3786, align 8
  %183 = zext i8 %181 to i32
  %184 = add nsw i32 %183, -3
  %185 = icmp ult i8 %181, 3
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %14, align 1
  %187 = and i32 %184, 255
  %188 = tail call i32 @llvm.ctpop.i32(i32 %187)
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  store i8 %191, i8* %21, align 1
  %192 = xor i32 %184, %183
  %193 = lshr i32 %192, 4
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  store i8 %195, i8* %27, align 1
  %196 = icmp eq i32 %184, 0
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %30, align 1
  %198 = lshr i32 %184, 31
  %199 = trunc i32 %198 to i8
  store i8 %199, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v715 = select i1 %196, i64 24, i64 29
  %200 = add i64 %174, %.v715
  store i64 %200, i64* %3, align 8
  br i1 %196, label %block_404a4c, label %block_.L_404a51

block_404a4c:                                     ; preds = %block_404a34
  %201 = add i64 %200, 277
  br label %block_.L_404b61

block_.L_404a51:                                  ; preds = %block_404a34
  %202 = add i64 %200, 7
  store i64 %202, i64* %3, align 8
  %203 = load i32, i32* %148, align 4
  %204 = sext i32 %203 to i64
  store i64 %204, i64* %RAX.i2528, align 8
  %205 = add nsw i64 %204, 12099168
  %206 = add i64 %200, 15
  store i64 %206, i64* %3, align 8
  %207 = inttoptr i64 %205 to i8*
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i64
  store i64 %209, i64* %RCX.i3786, align 8
  %210 = zext i8 %208 to i32
  %211 = add i64 %145, -20
  %212 = add i64 %200, 18
  store i64 %212, i64* %3, align 8
  %213 = inttoptr i64 %211 to i32*
  %214 = load i32, i32* %213, align 4
  %215 = sub i32 %210, %214
  %216 = icmp ult i32 %210, %214
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %14, align 1
  %218 = and i32 %215, 255
  %219 = tail call i32 @llvm.ctpop.i32(i32 %218)
  %220 = trunc i32 %219 to i8
  %221 = and i8 %220, 1
  %222 = xor i8 %221, 1
  store i8 %222, i8* %21, align 1
  %223 = xor i32 %214, %210
  %224 = xor i32 %223, %215
  %225 = lshr i32 %224, 4
  %226 = trunc i32 %225 to i8
  %227 = and i8 %226, 1
  store i8 %227, i8* %27, align 1
  %228 = icmp eq i32 %215, 0
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %30, align 1
  %230 = lshr i32 %215, 31
  %231 = trunc i32 %230 to i8
  store i8 %231, i8* %33, align 1
  %232 = lshr i32 %214, 31
  %233 = add nuw nsw i32 %230, %232
  %234 = icmp eq i32 %233, 2
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %39, align 1
  %.v716 = select i1 %228, i64 24, i64 84
  %236 = add i64 %200, %.v716
  store i64 %236, i64* %3, align 8
  br i1 %228, label %block_404a69, label %block_.L_404aa5

block_404a69:                                     ; preds = %block_.L_404a51
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %237 = add i64 %236, 17
  store i64 %237, i64* %3, align 8
  %238 = load i32, i32* %148, align 4
  %239 = sext i32 %238 to i64
  %240 = mul nsw i64 %239, 380
  store i64 %240, i64* %RCX.i3786, align 8
  %241 = lshr i64 %240, 63
  %242 = add i64 %240, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %242, i64* %RAX.i2528, align 8
  %243 = icmp ult i64 %242, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %244 = icmp ult i64 %242, %240
  %245 = or i1 %243, %244
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %14, align 1
  %247 = trunc i64 %242 to i32
  %248 = and i32 %247, 252
  %249 = tail call i32 @llvm.ctpop.i32(i32 %248)
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = xor i8 %251, 1
  store i8 %252, i8* %21, align 1
  %253 = xor i64 %240, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %254 = xor i64 %253, %242
  %255 = lshr i64 %254, 4
  %256 = trunc i64 %255 to i8
  %257 = and i8 %256, 1
  store i8 %257, i8* %27, align 1
  %258 = icmp eq i64 %242, 0
  %259 = zext i1 %258 to i8
  store i8 %259, i8* %30, align 1
  %260 = lshr i64 %242, 63
  %261 = trunc i64 %260 to i8
  store i8 %261, i8* %33, align 1
  %262 = xor i64 %260, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %263 = xor i64 %260, %241
  %264 = add nuw nsw i64 %262, %263
  %265 = icmp eq i64 %264, 2
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %39, align 1
  %267 = add i64 %240, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 52)
  %268 = add i64 %236, 31
  store i64 %268, i64* %3, align 8
  %269 = inttoptr i64 %267 to i32*
  %270 = load i32, i32* %269, align 4
  store i8 0, i8* %14, align 1
  %271 = and i32 %270, 255
  %272 = tail call i32 @llvm.ctpop.i32(i32 %271)
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  store i8 %275, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %276 = icmp eq i32 %270, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %30, align 1
  %278 = lshr i32 %270, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v722 = select i1 %276, i64 60, i64 37
  %280 = add i64 %236, %.v722
  store i64 %280, i64* %3, align 8
  br i1 %276, label %block_.L_404aa5, label %block_404a8e

block_404a8e:                                     ; preds = %block_404a69
  %281 = add i64 %280, 7
  store i64 %281, i64* %3, align 8
  %282 = load i32, i32* %148, align 4
  %283 = sext i32 %282 to i64
  store i64 %283, i64* %RAX.i2528, align 8
  %284 = shl nsw i64 %283, 2
  %285 = add i64 %145, -1648
  %286 = add i64 %285, %284
  %287 = add i64 %280, 18
  store i64 %287, i64* %3, align 8
  %288 = inttoptr i64 %286 to i32*
  store i32 0, i32* %288, align 4
  %289 = load i64, i64* %3, align 8
  %290 = add i64 %289, 183
  br label %block_.L_404b57

block_.L_404aa5:                                  ; preds = %block_.L_404a51, %block_404a69
  %291 = phi i64 [ %280, %block_404a69 ], [ %236, %block_.L_404a51 ]
  %292 = add i64 %145, -36
  %293 = add i64 %291, 4
  store i64 %293, i64* %3, align 8
  %294 = inttoptr i64 %292 to i32*
  %295 = load i32, i32* %294, align 4
  store i8 0, i8* %14, align 1
  %296 = and i32 %295, 255
  %297 = tail call i32 @llvm.ctpop.i32(i32 %296)
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  store i8 %300, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %301 = icmp eq i32 %295, 0
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %30, align 1
  %303 = lshr i32 %295, 31
  %304 = trunc i32 %303 to i8
  store i8 %304, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v717 = select i1 %301, i64 10, i64 155
  %305 = add i64 %291, %.v717
  store i64 %305, i64* %3, align 8
  br i1 %301, label %block_404aaf, label %block_.L_404b40

block_404aaf:                                     ; preds = %block_.L_404aa5
  %306 = add i64 %305, 7
  store i64 %306, i64* %3, align 8
  %307 = load i32, i32* %148, align 4
  %308 = sext i32 %307 to i64
  store i64 %308, i64* %RAX.i2528, align 8
  %309 = add nsw i64 %308, 12099168
  %310 = add i64 %305, 15
  store i64 %310, i64* %3, align 8
  %311 = inttoptr i64 %309 to i8*
  %312 = load i8, i8* %311, align 1
  %313 = zext i8 %312 to i64
  store i64 %313, i64* %RCX.i3786, align 8
  %314 = zext i8 %312 to i32
  %315 = add i64 %145, -44
  %316 = add i64 %305, 18
  store i64 %316, i64* %3, align 8
  %317 = inttoptr i64 %315 to i32*
  %318 = load i32, i32* %317, align 4
  %319 = sub i32 %314, %318
  %320 = icmp ult i32 %314, %318
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %14, align 1
  %322 = and i32 %319, 255
  %323 = tail call i32 @llvm.ctpop.i32(i32 %322)
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = xor i8 %325, 1
  store i8 %326, i8* %21, align 1
  %327 = xor i32 %318, %314
  %328 = xor i32 %327, %319
  %329 = lshr i32 %328, 4
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  store i8 %331, i8* %27, align 1
  %332 = icmp eq i32 %319, 0
  %333 = zext i1 %332 to i8
  store i8 %333, i8* %30, align 1
  %334 = lshr i32 %319, 31
  %335 = trunc i32 %334 to i8
  store i8 %335, i8* %33, align 1
  %336 = lshr i32 %318, 31
  %337 = add nuw nsw i32 %334, %336
  %338 = icmp eq i32 %337, 2
  %339 = zext i1 %338 to i8
  store i8 %339, i8* %39, align 1
  %.v718 = select i1 %332, i64 24, i64 61
  %340 = add i64 %305, %.v718
  store i64 %340, i64* %3, align 8
  br i1 %332, label %block_404ac7, label %block_.L_404aec

block_404ac7:                                     ; preds = %block_404aaf
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %341 = add i64 %340, 17
  store i64 %341, i64* %3, align 8
  %342 = load i32, i32* %148, align 4
  %343 = sext i32 %342 to i64
  %344 = mul nsw i64 %343, 380
  store i64 %344, i64* %RCX.i3786, align 8
  %345 = lshr i64 %344, 63
  %346 = add i64 %344, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %346, i64* %RAX.i2528, align 8
  %347 = icmp ult i64 %346, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %348 = icmp ult i64 %346, %344
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %14, align 1
  %351 = trunc i64 %346 to i32
  %352 = and i32 %351, 252
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352)
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %21, align 1
  %357 = xor i64 %344, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %358 = xor i64 %357, %346
  %359 = lshr i64 %358, 4
  %360 = trunc i64 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %27, align 1
  %362 = icmp eq i64 %346, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %30, align 1
  %364 = lshr i64 %346, 63
  %365 = trunc i64 %364 to i8
  store i8 %365, i8* %33, align 1
  %366 = xor i64 %364, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %367 = xor i64 %364, %345
  %368 = add nuw nsw i64 %366, %367
  %369 = icmp eq i64 %368, 2
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %39, align 1
  %371 = add i64 %344, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 56)
  %372 = add i64 %340, 31
  store i64 %372, i64* %3, align 8
  %373 = inttoptr i64 %371 to i32*
  %374 = load i32, i32* %373, align 4
  store i8 0, i8* %14, align 1
  %375 = and i32 %374, 255
  %376 = tail call i32 @llvm.ctpop.i32(i32 %375)
  %377 = trunc i32 %376 to i8
  %378 = and i8 %377, 1
  %379 = xor i8 %378, 1
  store i8 %379, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %380 = icmp eq i32 %374, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %30, align 1
  %382 = lshr i32 %374, 31
  %383 = trunc i32 %382 to i8
  store i8 %383, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v721 = select i1 %380, i64 98, i64 37
  %384 = add i64 %340, %.v721
  store i64 %384, i64* %3, align 8
  br i1 %380, label %block_.L_404b29, label %block_.L_404aec

block_.L_404aec:                                  ; preds = %block_404aaf, %block_404ac7
  %385 = phi i64 [ %384, %block_404ac7 ], [ %340, %block_404aaf ]
  %386 = add i64 %385, 7
  store i64 %386, i64* %3, align 8
  %387 = load i32, i32* %148, align 4
  %388 = sext i32 %387 to i64
  store i64 %388, i64* %RAX.i2528, align 8
  %389 = add nsw i64 %388, 12099168
  %390 = add i64 %385, 15
  store i64 %390, i64* %3, align 8
  %391 = inttoptr i64 %389 to i8*
  %392 = load i8, i8* %391, align 1
  %393 = zext i8 %392 to i64
  store i64 %393, i64* %RCX.i3786, align 8
  %394 = zext i8 %392 to i32
  %395 = add i64 %385, 18
  store i64 %395, i64* %3, align 8
  %396 = load i32, i32* %213, align 4
  %397 = sub i32 %394, %396
  %398 = icmp ult i32 %394, %396
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %14, align 1
  %400 = and i32 %397, 255
  %401 = tail call i32 @llvm.ctpop.i32(i32 %400)
  %402 = trunc i32 %401 to i8
  %403 = and i8 %402, 1
  %404 = xor i8 %403, 1
  store i8 %404, i8* %21, align 1
  %405 = xor i32 %396, %394
  %406 = xor i32 %405, %397
  %407 = lshr i32 %406, 4
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  store i8 %409, i8* %27, align 1
  %410 = icmp eq i32 %397, 0
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %30, align 1
  %412 = lshr i32 %397, 31
  %413 = trunc i32 %412 to i8
  store i8 %413, i8* %33, align 1
  %414 = lshr i32 %396, 31
  %415 = add nuw nsw i32 %412, %414
  %416 = icmp eq i32 %415, 2
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %39, align 1
  %.v719 = select i1 %410, i64 24, i64 84
  %418 = add i64 %385, %.v719
  store i64 %418, i64* %3, align 8
  br i1 %410, label %block_404b04, label %block_.L_404b40

block_404b04:                                     ; preds = %block_.L_404aec
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %419 = add i64 %418, 17
  store i64 %419, i64* %3, align 8
  %420 = load i32, i32* %148, align 4
  %421 = sext i32 %420 to i64
  %422 = mul nsw i64 %421, 380
  store i64 %422, i64* %RCX.i3786, align 8
  %423 = lshr i64 %422, 63
  %424 = add i64 %422, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %424, i64* %RAX.i2528, align 8
  %425 = icmp ult i64 %424, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %426 = icmp ult i64 %424, %422
  %427 = or i1 %425, %426
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %14, align 1
  %429 = trunc i64 %424 to i32
  %430 = and i32 %429, 252
  %431 = tail call i32 @llvm.ctpop.i32(i32 %430)
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  %434 = xor i8 %433, 1
  store i8 %434, i8* %21, align 1
  %435 = xor i64 %422, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %436 = xor i64 %435, %424
  %437 = lshr i64 %436, 4
  %438 = trunc i64 %437 to i8
  %439 = and i8 %438, 1
  store i8 %439, i8* %27, align 1
  %440 = icmp eq i64 %424, 0
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %30, align 1
  %442 = lshr i64 %424, 63
  %443 = trunc i64 %442 to i8
  store i8 %443, i8* %33, align 1
  %444 = xor i64 %442, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %445 = xor i64 %442, %423
  %446 = add nuw nsw i64 %444, %445
  %447 = icmp eq i64 %446, 2
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %39, align 1
  %449 = add i64 %422, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 56)
  %450 = add i64 %418, 31
  store i64 %450, i64* %3, align 8
  %451 = inttoptr i64 %449 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = add i32 %452, -1
  %454 = icmp eq i32 %452, 0
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %14, align 1
  %456 = and i32 %453, 255
  %457 = tail call i32 @llvm.ctpop.i32(i32 %456)
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  %460 = xor i8 %459, 1
  store i8 %460, i8* %21, align 1
  %461 = xor i32 %453, %452
  %462 = lshr i32 %461, 4
  %463 = trunc i32 %462 to i8
  %464 = and i8 %463, 1
  store i8 %464, i8* %27, align 1
  %465 = icmp eq i32 %453, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %30, align 1
  %467 = lshr i32 %453, 31
  %468 = trunc i32 %467 to i8
  store i8 %468, i8* %33, align 1
  %469 = lshr i32 %452, 31
  %470 = xor i32 %467, %469
  %471 = add nuw nsw i32 %470, %469
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %39, align 1
  %.v720 = select i1 %465, i64 37, i64 60
  %474 = add i64 %418, %.v720
  store i64 %474, i64* %3, align 8
  %.pre480 = load i64, i64* %RBP.i, align 8
  br i1 %465, label %block_.L_404b29, label %block_.L_404b40

block_.L_404b29:                                  ; preds = %block_404b04, %block_404ac7
  %475 = phi i64 [ %384, %block_404ac7 ], [ %474, %block_404b04 ]
  %476 = phi i64 [ %145, %block_404ac7 ], [ %.pre480, %block_404b04 ]
  %477 = add i64 %476, -8072
  %478 = add i64 %475, 7
  store i64 %478, i64* %3, align 8
  %479 = inttoptr i64 %477 to i32*
  %480 = load i32, i32* %479, align 4
  %481 = sext i32 %480 to i64
  store i64 %481, i64* %RAX.i2528, align 8
  %482 = shl nsw i64 %481, 2
  %483 = add i64 %476, -1648
  %484 = add i64 %483, %482
  %485 = add i64 %475, 18
  store i64 %485, i64* %3, align 8
  %486 = inttoptr i64 %484 to i32*
  store i32 0, i32* %486, align 4
  %487 = load i64, i64* %3, align 8
  %488 = add i64 %487, 23
  store i64 %488, i64* %3, align 8
  br label %block_.L_404b52

block_.L_404b40:                                  ; preds = %block_404b04, %block_.L_404aec, %block_.L_404aa5
  %489 = phi i64 [ %418, %block_.L_404aec ], [ %305, %block_.L_404aa5 ], [ %474, %block_404b04 ]
  %490 = phi i64 [ %145, %block_.L_404aec ], [ %145, %block_.L_404aa5 ], [ %.pre480, %block_404b04 ]
  %491 = add i64 %490, -8072
  %492 = add i64 %489, 7
  store i64 %492, i64* %3, align 8
  %493 = inttoptr i64 %491 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = sext i32 %494 to i64
  store i64 %495, i64* %RAX.i2528, align 8
  %496 = shl nsw i64 %495, 2
  %497 = add i64 %490, -1648
  %498 = add i64 %497, %496
  %499 = add i64 %489, 18
  store i64 %499, i64* %3, align 8
  %500 = inttoptr i64 %498 to i32*
  store i32 -1, i32* %500, align 4
  %.pre482 = load i64, i64* %3, align 8
  br label %block_.L_404b52

block_.L_404b52:                                  ; preds = %block_.L_404b40, %block_.L_404b29
  %501 = phi i64 [ %.pre482, %block_.L_404b40 ], [ %488, %block_.L_404b29 ]
  %502 = add i64 %501, 5
  store i64 %502, i64* %3, align 8
  br label %block_.L_404b57

block_.L_404b57:                                  ; preds = %block_.L_404b52, %block_404a8e
  %storemerge216 = phi i64 [ %290, %block_404a8e ], [ %502, %block_.L_404b52 ]
  %503 = add i64 %storemerge216, 10
  store i64 %503, i64* %3, align 8
  %.pre483 = load i64, i64* %RBP.i, align 8
  br label %block_.L_404b61

block_.L_404b61:                                  ; preds = %block_.L_404b57, %block_404a4c
  %504 = phi i64 [ %145, %block_404a4c ], [ %.pre483, %block_.L_404b57 ]
  %storemerge = phi i64 [ %201, %block_404a4c ], [ %503, %block_.L_404b57 ]
  %505 = add i64 %504, -8072
  %506 = add i64 %storemerge, 6
  store i64 %506, i64* %3, align 8
  %507 = inttoptr i64 %505 to i32*
  %508 = load i32, i32* %507, align 4
  %509 = add i32 %508, 1
  %510 = zext i32 %509 to i64
  store i64 %510, i64* %RAX.i2528, align 8
  %511 = icmp eq i32 %508, -1
  %512 = icmp eq i32 %509, 0
  %513 = or i1 %511, %512
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %14, align 1
  %515 = and i32 %509, 255
  %516 = tail call i32 @llvm.ctpop.i32(i32 %515)
  %517 = trunc i32 %516 to i8
  %518 = and i8 %517, 1
  %519 = xor i8 %518, 1
  store i8 %519, i8* %21, align 1
  %520 = xor i32 %509, %508
  %521 = lshr i32 %520, 4
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  store i8 %523, i8* %27, align 1
  %524 = zext i1 %512 to i8
  store i8 %524, i8* %30, align 1
  %525 = lshr i32 %509, 31
  %526 = trunc i32 %525 to i8
  store i8 %526, i8* %33, align 1
  %527 = lshr i32 %508, 31
  %528 = xor i32 %525, %527
  %529 = add nuw nsw i32 %528, %525
  %530 = icmp eq i32 %529, 2
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %39, align 1
  %532 = add i64 %storemerge, 15
  store i64 %532, i64* %3, align 8
  store i32 %509, i32* %507, align 4
  %533 = load i64, i64* %3, align 8
  %534 = add i64 %533, -332
  store i64 %534, i64* %3, align 8
  br label %block_.L_404a24

block_.L_404b75:                                  ; preds = %block_.L_404a24
  %535 = add i64 %145, -8064
  %536 = add i64 %174, 10
  store i64 %536, i64* %3, align 8
  %537 = inttoptr i64 %535 to i32*
  store i32 0, i32* %537, align 4
  %.pre365 = load i64, i64* %RBP.i, align 8
  %.pre366 = load i64, i64* %3, align 8
  br label %block_.L_404b7f

block_.L_404b7f:                                  ; preds = %block_.L_404d81, %block_.L_404b75
  %538 = phi i64 [ %1194, %block_.L_404d81 ], [ %.pre366, %block_.L_404b75 ]
  %539 = phi i64 [ %1179, %block_.L_404d81 ], [ %.pre365, %block_.L_404b75 ]
  %540 = add i64 %539, -8052
  %541 = add i64 %538, 10
  store i64 %541, i64* %3, align 8
  %542 = inttoptr i64 %540 to i32*
  store i32 0, i32* %542, align 4
  %543 = load i64, i64* %RBP.i, align 8
  %544 = add i64 %543, -8072
  %545 = load i64, i64* %3, align 8
  %546 = add i64 %545, 10
  store i64 %546, i64* %3, align 8
  %547 = inttoptr i64 %544 to i32*
  store i32 21, i32* %547, align 4
  %.pre367 = load i64, i64* %3, align 8
  br label %block_.L_404b93

block_.L_404b93:                                  ; preds = %block_.L_404d68, %block_.L_404b7f
  %548 = phi i64 [ %1150, %block_.L_404d68 ], [ %.pre367, %block_.L_404b7f ]
  %549 = load i64, i64* %RBP.i, align 8
  %550 = add i64 %549, -8072
  %551 = add i64 %548, 10
  store i64 %551, i64* %3, align 8
  %552 = inttoptr i64 %550 to i32*
  %553 = load i32, i32* %552, align 4
  %554 = add i32 %553, -400
  %555 = icmp ult i32 %553, 400
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %14, align 1
  %557 = and i32 %554, 255
  %558 = tail call i32 @llvm.ctpop.i32(i32 %557)
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  %561 = xor i8 %560, 1
  store i8 %561, i8* %21, align 1
  %562 = xor i32 %553, 16
  %563 = xor i32 %562, %554
  %564 = lshr i32 %563, 4
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  store i8 %566, i8* %27, align 1
  %567 = icmp eq i32 %554, 0
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %30, align 1
  %569 = lshr i32 %554, 31
  %570 = trunc i32 %569 to i8
  store i8 %570, i8* %33, align 1
  %571 = lshr i32 %553, 31
  %572 = xor i32 %569, %571
  %573 = add nuw nsw i32 %572, %571
  %574 = icmp eq i32 %573, 2
  %575 = zext i1 %574 to i8
  store i8 %575, i8* %39, align 1
  %576 = icmp ne i8 %570, 0
  %577 = xor i1 %576, %574
  %.v521 = select i1 %577, i64 16, i64 494
  %578 = add i64 %548, %.v521
  store i64 %578, i64* %3, align 8
  br i1 %577, label %block_404ba3, label %block_.L_404d81

block_404ba3:                                     ; preds = %block_.L_404b93
  %579 = add i64 %578, 7
  store i64 %579, i64* %3, align 8
  %580 = load i32, i32* %552, align 4
  %581 = sext i32 %580 to i64
  store i64 %581, i64* %RAX.i2528, align 8
  %582 = add nsw i64 %581, 12099168
  %583 = add i64 %578, 15
  store i64 %583, i64* %3, align 8
  %584 = inttoptr i64 %582 to i8*
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i64
  store i64 %586, i64* %RCX.i3786, align 8
  %587 = zext i8 %585 to i32
  %588 = add nsw i32 %587, -3
  %589 = icmp ult i8 %585, 3
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %14, align 1
  %591 = and i32 %588, 255
  %592 = tail call i32 @llvm.ctpop.i32(i32 %591)
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  %595 = xor i8 %594, 1
  store i8 %595, i8* %21, align 1
  %596 = xor i32 %588, %587
  %597 = lshr i32 %596, 4
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  store i8 %599, i8* %27, align 1
  %600 = icmp eq i32 %588, 0
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %30, align 1
  %602 = lshr i32 %588, 31
  %603 = trunc i32 %602 to i8
  store i8 %603, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v701 = select i1 %600, i64 453, i64 24
  %604 = add i64 %578, %.v701
  store i64 %604, i64* %3, align 8
  br i1 %600, label %block_.L_404d68, label %block_404bbb

block_404bbb:                                     ; preds = %block_404ba3
  %605 = add i64 %604, 7
  store i64 %605, i64* %3, align 8
  %606 = load i32, i32* %552, align 4
  %607 = sext i32 %606 to i64
  store i64 %607, i64* %RAX.i2528, align 8
  %608 = shl nsw i64 %607, 2
  %609 = add i64 %549, -1648
  %610 = add i64 %609, %608
  %611 = add i64 %604, 15
  store i64 %611, i64* %3, align 8
  %612 = inttoptr i64 %610 to i32*
  %613 = load i32, i32* %612, align 4
  %614 = add i32 %613, 1
  %615 = icmp ne i32 %613, -1
  %616 = zext i1 %615 to i8
  store i8 %616, i8* %14, align 1
  %617 = and i32 %614, 255
  %618 = tail call i32 @llvm.ctpop.i32(i32 %617)
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  store i8 %621, i8* %21, align 1
  %622 = xor i32 %613, 16
  %623 = xor i32 %622, %614
  %624 = lshr i32 %623, 4
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  store i8 %626, i8* %27, align 1
  %627 = icmp eq i32 %614, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %30, align 1
  %629 = lshr i32 %614, 31
  %630 = trunc i32 %629 to i8
  store i8 %630, i8* %33, align 1
  %631 = lshr i32 %613, 31
  %632 = xor i32 %631, 1
  %633 = xor i32 %629, %631
  %634 = add nuw nsw i32 %633, %632
  %635 = icmp eq i32 %634, 2
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %39, align 1
  %.v702 = select i1 %627, i64 21, i64 429
  %637 = add i64 %604, %.v702
  store i64 %637, i64* %3, align 8
  br i1 %627, label %block_404bd0, label %block_.L_404d68

block_404bd0:                                     ; preds = %block_404bbb
  %638 = add i64 %549, -40
  %639 = add i64 %637, 7
  store i64 %639, i64* %3, align 8
  %640 = inttoptr i64 %638 to i32*
  store i32 0, i32* %640, align 4
  %.pre475 = load i64, i64* %3, align 8
  br label %block_.L_404bd7

block_.L_404bd7:                                  ; preds = %block_.L_404d55, %block_404bd0
  %641 = phi i64 [ %1116, %block_.L_404d55 ], [ %.pre475, %block_404bd0 ]
  %642 = load i64, i64* %RBP.i, align 8
  %643 = add i64 %642, -40
  %644 = add i64 %641, 4
  store i64 %644, i64* %3, align 8
  %645 = inttoptr i64 %643 to i32*
  %646 = load i32, i32* %645, align 4
  %647 = add i32 %646, -4
  %648 = icmp ult i32 %646, 4
  %649 = zext i1 %648 to i8
  store i8 %649, i8* %14, align 1
  %650 = and i32 %647, 255
  %651 = tail call i32 @llvm.ctpop.i32(i32 %650)
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  %654 = xor i8 %653, 1
  store i8 %654, i8* %21, align 1
  %655 = xor i32 %647, %646
  %656 = lshr i32 %655, 4
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  store i8 %658, i8* %27, align 1
  %659 = icmp eq i32 %647, 0
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %30, align 1
  %661 = lshr i32 %647, 31
  %662 = trunc i32 %661 to i8
  store i8 %662, i8* %33, align 1
  %663 = lshr i32 %646, 31
  %664 = xor i32 %661, %663
  %665 = add nuw nsw i32 %664, %663
  %666 = icmp eq i32 %665, 2
  %667 = zext i1 %666 to i8
  store i8 %667, i8* %39, align 1
  %668 = icmp ne i8 %662, 0
  %669 = xor i1 %668, %666
  %.v703 = select i1 %669, i64 10, i64 396
  %670 = add i64 %641, %.v703
  store i64 %670, i64* %3, align 8
  br i1 %669, label %block_404be1, label %block_.L_404d63.loopexit

block_404be1:                                     ; preds = %block_.L_404bd7
  %671 = add i64 %642, -8072
  %672 = add i64 %670, 6
  store i64 %672, i64* %3, align 8
  %673 = inttoptr i64 %671 to i32*
  %674 = load i32, i32* %673, align 4
  %675 = zext i32 %674 to i64
  store i64 %675, i64* %RAX.i2528, align 8
  %676 = add i64 %670, 10
  store i64 %676, i64* %3, align 8
  %677 = load i32, i32* %645, align 4
  %678 = sext i32 %677 to i64
  store i64 %678, i64* %RCX.i3786, align 8
  %679 = shl nsw i64 %678, 2
  %680 = add nsw i64 %679, 8053168
  %681 = add i64 %670, 17
  store i64 %681, i64* %3, align 8
  %682 = inttoptr i64 %680 to i32*
  %683 = load i32, i32* %682, align 4
  %684 = add i32 %683, %674
  %685 = zext i32 %684 to i64
  store i64 %685, i64* %RAX.i2528, align 8
  %686 = icmp ult i32 %684, %674
  %687 = icmp ult i32 %684, %683
  %688 = or i1 %686, %687
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %14, align 1
  %690 = and i32 %684, 255
  %691 = tail call i32 @llvm.ctpop.i32(i32 %690)
  %692 = trunc i32 %691 to i8
  %693 = and i8 %692, 1
  %694 = xor i8 %693, 1
  store i8 %694, i8* %21, align 1
  %695 = xor i32 %683, %674
  %696 = xor i32 %695, %684
  %697 = lshr i32 %696, 4
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  store i8 %699, i8* %27, align 1
  %700 = icmp eq i32 %684, 0
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %30, align 1
  %702 = lshr i32 %684, 31
  %703 = trunc i32 %702 to i8
  store i8 %703, i8* %33, align 1
  %704 = lshr i32 %674, 31
  %705 = lshr i32 %683, 31
  %706 = xor i32 %702, %704
  %707 = xor i32 %702, %705
  %708 = add nuw nsw i32 %706, %707
  %709 = icmp eq i32 %708, 2
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %39, align 1
  %711 = add i64 %642, -8084
  %712 = add i64 %670, 23
  store i64 %712, i64* %3, align 8
  %713 = inttoptr i64 %711 to i32*
  store i32 %684, i32* %713, align 4
  %714 = load i64, i64* %RBP.i, align 8
  %715 = add i64 %714, -8084
  %716 = load i64, i64* %3, align 8
  %717 = add i64 %716, 7
  store i64 %717, i64* %3, align 8
  %718 = inttoptr i64 %715 to i32*
  %719 = load i32, i32* %718, align 4
  %720 = sext i32 %719 to i64
  store i64 %720, i64* %RCX.i3786, align 8
  %721 = add nsw i64 %720, 12099168
  %722 = add i64 %716, 15
  store i64 %722, i64* %3, align 8
  %723 = inttoptr i64 %721 to i8*
  %724 = load i8, i8* %723, align 1
  %725 = zext i8 %724 to i64
  store i64 %725, i64* %RAX.i2528, align 8
  %726 = zext i8 %724 to i32
  %727 = add nsw i32 %726, -3
  %728 = icmp ult i8 %724, 3
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %14, align 1
  %730 = and i32 %727, 255
  %731 = tail call i32 @llvm.ctpop.i32(i32 %730)
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = xor i8 %733, 1
  store i8 %734, i8* %21, align 1
  %735 = xor i32 %727, %726
  %736 = lshr i32 %735, 4
  %737 = trunc i32 %736 to i8
  %738 = and i8 %737, 1
  store i8 %738, i8* %27, align 1
  %739 = icmp eq i32 %727, 0
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %30, align 1
  %741 = lshr i32 %727, 31
  %742 = trunc i32 %741 to i8
  store i8 %742, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v704 = select i1 %739, i64 24, i64 29
  %743 = add i64 %716, %.v704
  store i64 %743, i64* %3, align 8
  br i1 %739, label %block_404c10, label %block_.L_404c15

block_404c10:                                     ; preds = %block_404be1
  %744 = add i64 %743, 325
  br label %block_.L_404d55

block_.L_404c15:                                  ; preds = %block_404be1
  %745 = add i64 %714, -8064
  %746 = add i64 %743, 7
  store i64 %746, i64* %3, align 8
  %747 = inttoptr i64 %745 to i32*
  %748 = load i32, i32* %747, align 4
  store i8 0, i8* %14, align 1
  %749 = and i32 %748, 255
  %750 = tail call i32 @llvm.ctpop.i32(i32 %749)
  %751 = trunc i32 %750 to i8
  %752 = and i8 %751, 1
  %753 = xor i8 %752, 1
  store i8 %753, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %754 = icmp eq i32 %748, 0
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %30, align 1
  %756 = lshr i32 %748, 31
  %757 = trunc i32 %756 to i8
  store i8 %757, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v705 = select i1 %754, i64 37, i64 13
  %758 = add i64 %743, %.v705
  store i64 %758, i64* %3, align 8
  br i1 %754, label %block_.L_404c3a, label %block_404c22

block_404c22:                                     ; preds = %block_.L_404c15
  %759 = add i64 %758, 7
  store i64 %759, i64* %3, align 8
  %760 = load i32, i32* %718, align 4
  %761 = sext i32 %760 to i64
  store i64 %761, i64* %RAX.i2528, align 8
  %762 = add nsw i64 %761, 12099168
  %763 = add i64 %758, 15
  store i64 %763, i64* %3, align 8
  %764 = inttoptr i64 %762 to i8*
  %765 = load i8, i8* %764, align 1
  %766 = zext i8 %765 to i64
  store i64 %766, i64* %RCX.i3786, align 8
  %767 = zext i8 %765 to i32
  store i8 0, i8* %14, align 1
  %768 = tail call i32 @llvm.ctpop.i32(i32 %767)
  %769 = trunc i32 %768 to i8
  %770 = and i8 %769, 1
  %771 = xor i8 %770, 1
  store i8 %771, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %772 = icmp eq i8 %765, 0
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v706 = select i1 %772, i64 24, i64 302
  %774 = add i64 %758, %.v706
  store i64 %774, i64* %3, align 8
  br i1 %772, label %block_.L_404c3a, label %block_.L_404d50

block_.L_404c3a:                                  ; preds = %block_404c22, %block_.L_404c15
  %775 = phi i64 [ %774, %block_404c22 ], [ %758, %block_.L_404c15 ]
  %776 = add i64 %775, 7
  store i64 %776, i64* %3, align 8
  %777 = load i32, i32* %718, align 4
  %778 = sext i32 %777 to i64
  store i64 %778, i64* %RAX.i2528, align 8
  %779 = shl nsw i64 %778, 2
  %780 = add i64 %714, -1648
  %781 = add i64 %780, %779
  %782 = add i64 %775, 14
  store i64 %782, i64* %3, align 8
  %783 = inttoptr i64 %781 to i32*
  %784 = load i32, i32* %783, align 4
  %785 = zext i32 %784 to i64
  store i64 %785, i64* %RCX.i3786, align 8
  %786 = add i64 %775, 20
  store i64 %786, i64* %3, align 8
  %787 = load i32, i32* %747, align 4
  %788 = sub i32 %784, %787
  %789 = icmp ult i32 %784, %787
  %790 = zext i1 %789 to i8
  store i8 %790, i8* %14, align 1
  %791 = and i32 %788, 255
  %792 = tail call i32 @llvm.ctpop.i32(i32 %791)
  %793 = trunc i32 %792 to i8
  %794 = and i8 %793, 1
  %795 = xor i8 %794, 1
  store i8 %795, i8* %21, align 1
  %796 = xor i32 %787, %784
  %797 = xor i32 %796, %788
  %798 = lshr i32 %797, 4
  %799 = trunc i32 %798 to i8
  %800 = and i8 %799, 1
  store i8 %800, i8* %27, align 1
  %801 = icmp eq i32 %788, 0
  %802 = zext i1 %801 to i8
  store i8 %802, i8* %30, align 1
  %803 = lshr i32 %788, 31
  %804 = trunc i32 %803 to i8
  store i8 %804, i8* %33, align 1
  %805 = lshr i32 %784, 31
  %806 = lshr i32 %787, 31
  %807 = xor i32 %806, %805
  %808 = xor i32 %803, %805
  %809 = add nuw nsw i32 %808, %807
  %810 = icmp eq i32 %809, 2
  %811 = zext i1 %810 to i8
  store i8 %811, i8* %39, align 1
  %.v707 = select i1 %801, i64 26, i64 278
  %812 = add i64 %775, %.v707
  store i64 %812, i64* %3, align 8
  br i1 %801, label %block_404c54, label %block_.L_404d50

block_404c54:                                     ; preds = %block_.L_404c3a
  %813 = add i64 %812, 7
  store i64 %813, i64* %3, align 8
  %814 = load i32, i32* %747, align 4
  store i8 0, i8* %14, align 1
  %815 = and i32 %814, 255
  %816 = tail call i32 @llvm.ctpop.i32(i32 %815)
  %817 = trunc i32 %816 to i8
  %818 = and i8 %817, 1
  %819 = xor i8 %818, 1
  store i8 %819, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %820 = icmp eq i32 %814, 0
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %30, align 1
  %822 = lshr i32 %814, 31
  %823 = trunc i32 %822 to i8
  store i8 %823, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %824 = icmp ne i8 %823, 0
  %825 = or i1 %820, %824
  %.v708 = select i1 %825, i64 90, i64 13
  %826 = add i64 %812, %.v708
  store i64 %826, i64* %3, align 8
  br i1 %825, label %block_.L_404cae, label %block_404c61

block_404c61:                                     ; preds = %block_404c54
  %827 = add i64 %714, -8072
  %828 = add i64 %826, 7
  store i64 %828, i64* %3, align 8
  %829 = inttoptr i64 %827 to i32*
  %830 = load i32, i32* %829, align 4
  %831 = sext i32 %830 to i64
  store i64 %831, i64* %RAX.i2528, align 8
  %832 = add nsw i64 %831, 12099168
  %833 = add i64 %826, 15
  store i64 %833, i64* %3, align 8
  %834 = inttoptr i64 %832 to i8*
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  store i64 %836, i64* %RCX.i3786, align 8
  %837 = zext i8 %835 to i32
  %838 = add i64 %714, -44
  %839 = add i64 %826, 18
  store i64 %839, i64* %3, align 8
  %840 = inttoptr i64 %838 to i32*
  %841 = load i32, i32* %840, align 4
  %842 = sub i32 %837, %841
  %843 = icmp ult i32 %837, %841
  %844 = zext i1 %843 to i8
  store i8 %844, i8* %14, align 1
  %845 = and i32 %842, 255
  %846 = tail call i32 @llvm.ctpop.i32(i32 %845)
  %847 = trunc i32 %846 to i8
  %848 = and i8 %847, 1
  %849 = xor i8 %848, 1
  store i8 %849, i8* %21, align 1
  %850 = xor i32 %841, %837
  %851 = xor i32 %850, %842
  %852 = lshr i32 %851, 4
  %853 = trunc i32 %852 to i8
  %854 = and i8 %853, 1
  store i8 %854, i8* %27, align 1
  %855 = icmp eq i32 %842, 0
  %856 = zext i1 %855 to i8
  store i8 %856, i8* %30, align 1
  %857 = lshr i32 %842, 31
  %858 = trunc i32 %857 to i8
  store i8 %858, i8* %33, align 1
  %859 = lshr i32 %841, 31
  %860 = add nuw nsw i32 %857, %859
  %861 = icmp eq i32 %860, 2
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %39, align 1
  %.v709 = select i1 %855, i64 24, i64 77
  %863 = add i64 %826, %.v709
  store i64 %863, i64* %3, align 8
  br i1 %855, label %block_404c79, label %block_.L_404cae

block_404c79:                                     ; preds = %block_404c61
  %864 = add i64 %863, 6
  store i64 %864, i64* %3, align 8
  %865 = load i32, i32* %747, align 4
  %866 = add i32 %865, 1
  %867 = zext i32 %866 to i64
  store i64 %867, i64* %RAX.i2528, align 8
  %868 = icmp eq i32 %865, -1
  %869 = icmp eq i32 %866, 0
  %870 = or i1 %868, %869
  %871 = zext i1 %870 to i8
  store i8 %871, i8* %14, align 1
  %872 = and i32 %866, 255
  %873 = tail call i32 @llvm.ctpop.i32(i32 %872)
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = xor i8 %875, 1
  store i8 %876, i8* %21, align 1
  %877 = xor i32 %866, %865
  %878 = lshr i32 %877, 4
  %879 = trunc i32 %878 to i8
  %880 = and i8 %879, 1
  store i8 %880, i8* %27, align 1
  %881 = zext i1 %869 to i8
  store i8 %881, i8* %30, align 1
  %882 = lshr i32 %866, 31
  %883 = trunc i32 %882 to i8
  store i8 %883, i8* %33, align 1
  %884 = lshr i32 %865, 31
  %885 = xor i32 %882, %884
  %886 = add nuw nsw i32 %885, %882
  %887 = icmp eq i32 %886, 2
  %888 = zext i1 %887 to i8
  store i8 %888, i8* %39, align 1
  %889 = add i64 %863, 16
  store i64 %889, i64* %3, align 8
  %890 = load i32, i32* %829, align 4
  %891 = sext i32 %890 to i64
  store i64 %891, i64* %RCX.i3786, align 8
  %892 = shl nsw i64 %891, 2
  %893 = add i64 %780, %892
  %894 = add i64 %863, 23
  store i64 %894, i64* %3, align 8
  %895 = inttoptr i64 %893 to i32*
  store i32 %866, i32* %895, align 4
  %896 = load i64, i64* %RBP.i, align 8
  %897 = add i64 %896, -8056
  %898 = load i64, i64* %3, align 8
  %899 = add i64 %898, 7
  store i64 %899, i64* %3, align 8
  %900 = inttoptr i64 %897 to i32*
  %901 = load i32, i32* %900, align 4
  store i8 0, i8* %14, align 1
  %902 = and i32 %901, 255
  %903 = tail call i32 @llvm.ctpop.i32(i32 %902)
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = xor i8 %905, 1
  store i8 %906, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %907 = icmp eq i32 %901, 0
  %908 = zext i1 %907 to i8
  store i8 %908, i8* %30, align 1
  %909 = lshr i32 %901, 31
  %910 = trunc i32 %909 to i8
  store i8 %910, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v714 = select i1 %907, i64 13, i64 25
  %911 = add i64 %898, %.v714
  store i64 %911, i64* %3, align 8
  br i1 %907, label %block_404c9d, label %block_.L_404ca9

block_404c9d:                                     ; preds = %block_404c79
  %912 = add i64 %896, -8072
  %913 = add i64 %911, 6
  store i64 %913, i64* %3, align 8
  %914 = inttoptr i64 %912 to i32*
  %915 = load i32, i32* %914, align 4
  %916 = zext i32 %915 to i64
  store i64 %916, i64* %RAX.i2528, align 8
  %917 = add i64 %911, 12
  store i64 %917, i64* %3, align 8
  store i32 %915, i32* %900, align 4
  %.pre476 = load i64, i64* %3, align 8
  br label %block_.L_404ca9

block_.L_404ca9:                                  ; preds = %block_404c79, %block_404c9d
  %918 = phi i64 [ %.pre476, %block_404c9d ], [ %911, %block_404c79 ]
  %919 = add i64 %918, 162
  br label %block_.L_404d4b

block_.L_404cae:                                  ; preds = %block_404c61, %block_404c54
  %920 = phi i64 [ %863, %block_404c61 ], [ %826, %block_404c54 ]
  %921 = add i64 %920, 7
  store i64 %921, i64* %3, align 8
  %922 = load i32, i32* %747, align 4
  store i8 0, i8* %14, align 1
  %923 = and i32 %922, 255
  %924 = tail call i32 @llvm.ctpop.i32(i32 %923)
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  store i8 %927, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %928 = icmp eq i32 %922, 0
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %30, align 1
  %930 = lshr i32 %922, 31
  %931 = trunc i32 %930 to i8
  store i8 %931, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %932 = icmp ne i8 %931, 0
  %933 = or i1 %928, %932
  %.v710 = select i1 %933, i64 90, i64 13
  %934 = add i64 %920, %.v710
  store i64 %934, i64* %3, align 8
  %.pre489 = add i64 %714, -8072
  br i1 %933, label %block_.L_404cae.block_.L_404d08_crit_edge, label %block_404cbb

block_.L_404cae.block_.L_404d08_crit_edge:        ; preds = %block_.L_404cae
  %.pre490 = inttoptr i64 %.pre489 to i32*
  br label %block_.L_404d08

block_404cbb:                                     ; preds = %block_.L_404cae
  %935 = add i64 %934, 7
  store i64 %935, i64* %3, align 8
  %936 = inttoptr i64 %.pre489 to i32*
  %937 = load i32, i32* %936, align 4
  %938 = sext i32 %937 to i64
  store i64 %938, i64* %RAX.i2528, align 8
  %939 = add nsw i64 %938, 12099168
  %940 = add i64 %934, 15
  store i64 %940, i64* %3, align 8
  %941 = inttoptr i64 %939 to i8*
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  store i64 %943, i64* %RCX.i3786, align 8
  %944 = zext i8 %942 to i32
  %945 = add i64 %714, -20
  %946 = add i64 %934, 18
  store i64 %946, i64* %3, align 8
  %947 = inttoptr i64 %945 to i32*
  %948 = load i32, i32* %947, align 4
  %949 = sub i32 %944, %948
  %950 = icmp ult i32 %944, %948
  %951 = zext i1 %950 to i8
  store i8 %951, i8* %14, align 1
  %952 = and i32 %949, 255
  %953 = tail call i32 @llvm.ctpop.i32(i32 %952)
  %954 = trunc i32 %953 to i8
  %955 = and i8 %954, 1
  %956 = xor i8 %955, 1
  store i8 %956, i8* %21, align 1
  %957 = xor i32 %948, %944
  %958 = xor i32 %957, %949
  %959 = lshr i32 %958, 4
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  store i8 %961, i8* %27, align 1
  %962 = icmp eq i32 %949, 0
  %963 = zext i1 %962 to i8
  store i8 %963, i8* %30, align 1
  %964 = lshr i32 %949, 31
  %965 = trunc i32 %964 to i8
  store i8 %965, i8* %33, align 1
  %966 = lshr i32 %948, 31
  %967 = add nuw nsw i32 %964, %966
  %968 = icmp eq i32 %967, 2
  %969 = zext i1 %968 to i8
  store i8 %969, i8* %39, align 1
  %.v711 = select i1 %962, i64 24, i64 77
  %970 = add i64 %934, %.v711
  store i64 %970, i64* %3, align 8
  br i1 %962, label %block_404cd3, label %block_.L_404d08

block_404cd3:                                     ; preds = %block_404cbb
  %971 = add i64 %970, 6
  store i64 %971, i64* %3, align 8
  %972 = load i32, i32* %747, align 4
  %973 = add i32 %972, 1
  %974 = zext i32 %973 to i64
  store i64 %974, i64* %RAX.i2528, align 8
  %975 = icmp eq i32 %972, -1
  %976 = icmp eq i32 %973, 0
  %977 = or i1 %975, %976
  %978 = zext i1 %977 to i8
  store i8 %978, i8* %14, align 1
  %979 = and i32 %973, 255
  %980 = tail call i32 @llvm.ctpop.i32(i32 %979)
  %981 = trunc i32 %980 to i8
  %982 = and i8 %981, 1
  %983 = xor i8 %982, 1
  store i8 %983, i8* %21, align 1
  %984 = xor i32 %973, %972
  %985 = lshr i32 %984, 4
  %986 = trunc i32 %985 to i8
  %987 = and i8 %986, 1
  store i8 %987, i8* %27, align 1
  %988 = zext i1 %976 to i8
  store i8 %988, i8* %30, align 1
  %989 = lshr i32 %973, 31
  %990 = trunc i32 %989 to i8
  store i8 %990, i8* %33, align 1
  %991 = lshr i32 %972, 31
  %992 = xor i32 %989, %991
  %993 = add nuw nsw i32 %992, %989
  %994 = icmp eq i32 %993, 2
  %995 = zext i1 %994 to i8
  store i8 %995, i8* %39, align 1
  %996 = add i64 %970, 16
  store i64 %996, i64* %3, align 8
  %997 = load i32, i32* %936, align 4
  %998 = sext i32 %997 to i64
  store i64 %998, i64* %RCX.i3786, align 8
  %999 = shl nsw i64 %998, 2
  %1000 = add i64 %780, %999
  %1001 = add i64 %970, 23
  store i64 %1001, i64* %3, align 8
  %1002 = inttoptr i64 %1000 to i32*
  store i32 %973, i32* %1002, align 4
  %1003 = load i64, i64* %RBP.i, align 8
  %1004 = add i64 %1003, -8060
  %1005 = load i64, i64* %3, align 8
  %1006 = add i64 %1005, 7
  store i64 %1006, i64* %3, align 8
  %1007 = inttoptr i64 %1004 to i32*
  %1008 = load i32, i32* %1007, align 4
  store i8 0, i8* %14, align 1
  %1009 = and i32 %1008, 255
  %1010 = tail call i32 @llvm.ctpop.i32(i32 %1009)
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  store i8 %1013, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1014 = icmp eq i32 %1008, 0
  %1015 = zext i1 %1014 to i8
  store i8 %1015, i8* %30, align 1
  %1016 = lshr i32 %1008, 31
  %1017 = trunc i32 %1016 to i8
  store i8 %1017, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v713 = select i1 %1014, i64 13, i64 25
  %1018 = add i64 %1005, %.v713
  store i64 %1018, i64* %3, align 8
  br i1 %1014, label %block_404cf7, label %block_.L_404d03

block_404cf7:                                     ; preds = %block_404cd3
  %1019 = add i64 %1003, -8072
  %1020 = add i64 %1018, 6
  store i64 %1020, i64* %3, align 8
  %1021 = inttoptr i64 %1019 to i32*
  %1022 = load i32, i32* %1021, align 4
  %1023 = zext i32 %1022 to i64
  store i64 %1023, i64* %RAX.i2528, align 8
  %1024 = add i64 %1018, 12
  store i64 %1024, i64* %3, align 8
  store i32 %1022, i32* %1007, align 4
  %.pre477 = load i64, i64* %3, align 8
  br label %block_.L_404d03

block_.L_404d03:                                  ; preds = %block_404cd3, %block_404cf7
  %1025 = phi i64 [ %.pre477, %block_404cf7 ], [ %1018, %block_404cd3 ]
  %1026 = add i64 %1025, 67
  br label %block_.L_404d46

block_.L_404d08:                                  ; preds = %block_404cbb, %block_.L_404cae.block_.L_404d08_crit_edge
  %.pre-phi491 = phi i32* [ %.pre490, %block_.L_404cae.block_.L_404d08_crit_edge ], [ %936, %block_404cbb ]
  %1027 = phi i64 [ %934, %block_.L_404cae.block_.L_404d08_crit_edge ], [ %970, %block_404cbb ]
  %1028 = add i64 %1027, 7
  store i64 %1028, i64* %3, align 8
  %1029 = load i32, i32* %.pre-phi491, align 4
  %1030 = sext i32 %1029 to i64
  store i64 %1030, i64* %RAX.i2528, align 8
  %1031 = add nsw i64 %1030, 12099168
  %1032 = add i64 %1027, 15
  store i64 %1032, i64* %3, align 8
  %1033 = inttoptr i64 %1031 to i8*
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  store i64 %1035, i64* %RCX.i3786, align 8
  %1036 = zext i8 %1034 to i32
  store i8 0, i8* %14, align 1
  %1037 = tail call i32 @llvm.ctpop.i32(i32 %1036)
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = xor i8 %1039, 1
  store i8 %1040, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1041 = icmp eq i8 %1034, 0
  %1042 = zext i1 %1041 to i8
  store i8 %1042, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v712 = select i1 %1041, i64 24, i64 57
  %1043 = add i64 %1027, %.v712
  store i64 %1043, i64* %3, align 8
  br i1 %1041, label %block_404d20, label %block_.L_404d41

block_404d20:                                     ; preds = %block_.L_404d08
  %1044 = add i64 %1043, 6
  store i64 %1044, i64* %3, align 8
  %1045 = load i32, i32* %747, align 4
  %1046 = add i32 %1045, 1
  %1047 = zext i32 %1046 to i64
  store i64 %1047, i64* %RAX.i2528, align 8
  %1048 = icmp eq i32 %1045, -1
  %1049 = icmp eq i32 %1046, 0
  %1050 = or i1 %1048, %1049
  %1051 = zext i1 %1050 to i8
  store i8 %1051, i8* %14, align 1
  %1052 = and i32 %1046, 255
  %1053 = tail call i32 @llvm.ctpop.i32(i32 %1052)
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  %1056 = xor i8 %1055, 1
  store i8 %1056, i8* %21, align 1
  %1057 = xor i32 %1046, %1045
  %1058 = lshr i32 %1057, 4
  %1059 = trunc i32 %1058 to i8
  %1060 = and i8 %1059, 1
  store i8 %1060, i8* %27, align 1
  %1061 = zext i1 %1049 to i8
  store i8 %1061, i8* %30, align 1
  %1062 = lshr i32 %1046, 31
  %1063 = trunc i32 %1062 to i8
  store i8 %1063, i8* %33, align 1
  %1064 = lshr i32 %1045, 31
  %1065 = xor i32 %1062, %1064
  %1066 = add nuw nsw i32 %1065, %1062
  %1067 = icmp eq i32 %1066, 2
  %1068 = zext i1 %1067 to i8
  store i8 %1068, i8* %39, align 1
  %1069 = add i64 %1043, 16
  store i64 %1069, i64* %3, align 8
  %1070 = load i32, i32* %.pre-phi491, align 4
  %1071 = sext i32 %1070 to i64
  store i64 %1071, i64* %RCX.i3786, align 8
  %1072 = shl nsw i64 %1071, 2
  %1073 = add i64 %780, %1072
  %1074 = add i64 %1043, 23
  store i64 %1074, i64* %3, align 8
  %1075 = inttoptr i64 %1073 to i32*
  store i32 %1046, i32* %1075, align 4
  %1076 = load i64, i64* %RBP.i, align 8
  %1077 = add i64 %1076, -8052
  %1078 = load i64, i64* %3, align 8
  %1079 = add i64 %1078, 10
  store i64 %1079, i64* %3, align 8
  %1080 = inttoptr i64 %1077 to i32*
  store i32 1, i32* %1080, align 4
  %.pre478 = load i64, i64* %3, align 8
  br label %block_.L_404d41

block_.L_404d41:                                  ; preds = %block_.L_404d08, %block_404d20
  %1081 = phi i64 [ %.pre478, %block_404d20 ], [ %1043, %block_.L_404d08 ]
  %1082 = add i64 %1081, 5
  store i64 %1082, i64* %3, align 8
  br label %block_.L_404d46

block_.L_404d46:                                  ; preds = %block_.L_404d41, %block_.L_404d03
  %storemerge219 = phi i64 [ %1026, %block_.L_404d03 ], [ %1082, %block_.L_404d41 ]
  %1083 = add i64 %storemerge219, 5
  store i64 %1083, i64* %3, align 8
  br label %block_.L_404d4b

block_.L_404d4b:                                  ; preds = %block_.L_404d46, %block_.L_404ca9
  %storemerge218 = phi i64 [ %919, %block_.L_404ca9 ], [ %1083, %block_.L_404d46 ]
  %1084 = add i64 %storemerge218, 24
  store i64 %1084, i64* %3, align 8
  %.pre479.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_404d63

block_.L_404d50:                                  ; preds = %block_.L_404c3a, %block_404c22
  %1085 = phi i64 [ %812, %block_.L_404c3a ], [ %774, %block_404c22 ]
  %1086 = add i64 %1085, 5
  store i64 %1086, i64* %3, align 8
  br label %block_.L_404d55

block_.L_404d55:                                  ; preds = %block_.L_404d50, %block_404c10
  %storemerge217 = phi i64 [ %744, %block_404c10 ], [ %1086, %block_.L_404d50 ]
  %1087 = add i64 %714, -40
  %1088 = add i64 %storemerge217, 3
  store i64 %1088, i64* %3, align 8
  %1089 = inttoptr i64 %1087 to i32*
  %1090 = load i32, i32* %1089, align 4
  %1091 = add i32 %1090, 1
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %RAX.i2528, align 8
  %1093 = icmp eq i32 %1090, -1
  %1094 = icmp eq i32 %1091, 0
  %1095 = or i1 %1093, %1094
  %1096 = zext i1 %1095 to i8
  store i8 %1096, i8* %14, align 1
  %1097 = and i32 %1091, 255
  %1098 = tail call i32 @llvm.ctpop.i32(i32 %1097)
  %1099 = trunc i32 %1098 to i8
  %1100 = and i8 %1099, 1
  %1101 = xor i8 %1100, 1
  store i8 %1101, i8* %21, align 1
  %1102 = xor i32 %1091, %1090
  %1103 = lshr i32 %1102, 4
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  store i8 %1105, i8* %27, align 1
  %1106 = zext i1 %1094 to i8
  store i8 %1106, i8* %30, align 1
  %1107 = lshr i32 %1091, 31
  %1108 = trunc i32 %1107 to i8
  store i8 %1108, i8* %33, align 1
  %1109 = lshr i32 %1090, 31
  %1110 = xor i32 %1107, %1109
  %1111 = add nuw nsw i32 %1110, %1107
  %1112 = icmp eq i32 %1111, 2
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %39, align 1
  %1114 = add i64 %storemerge217, 9
  store i64 %1114, i64* %3, align 8
  store i32 %1091, i32* %1089, align 4
  %1115 = load i64, i64* %3, align 8
  %1116 = add i64 %1115, -391
  store i64 %1116, i64* %3, align 8
  br label %block_.L_404bd7

block_.L_404d63.loopexit:                         ; preds = %block_.L_404bd7
  br label %block_.L_404d63

block_.L_404d63:                                  ; preds = %block_.L_404d63.loopexit, %block_.L_404d4b
  %.pre479 = phi i64 [ %.pre479.pre, %block_.L_404d4b ], [ %642, %block_.L_404d63.loopexit ]
  %1117 = phi i64 [ %1084, %block_.L_404d4b ], [ %670, %block_.L_404d63.loopexit ]
  %1118 = add i64 %1117, 5
  store i64 %1118, i64* %3, align 8
  br label %block_.L_404d68

block_.L_404d68:                                  ; preds = %block_404bbb, %block_.L_404d63, %block_404ba3
  %1119 = phi i64 [ %.pre479, %block_.L_404d63 ], [ %549, %block_404bbb ], [ %549, %block_404ba3 ]
  %1120 = phi i64 [ %1118, %block_.L_404d63 ], [ %637, %block_404bbb ], [ %604, %block_404ba3 ]
  %1121 = add i64 %1119, -8072
  %1122 = add i64 %1120, 11
  store i64 %1122, i64* %3, align 8
  %1123 = inttoptr i64 %1121 to i32*
  %1124 = load i32, i32* %1123, align 4
  %1125 = add i32 %1124, 1
  %1126 = zext i32 %1125 to i64
  store i64 %1126, i64* %RAX.i2528, align 8
  %1127 = icmp eq i32 %1124, -1
  %1128 = icmp eq i32 %1125, 0
  %1129 = or i1 %1127, %1128
  %1130 = zext i1 %1129 to i8
  store i8 %1130, i8* %14, align 1
  %1131 = and i32 %1125, 255
  %1132 = tail call i32 @llvm.ctpop.i32(i32 %1131)
  %1133 = trunc i32 %1132 to i8
  %1134 = and i8 %1133, 1
  %1135 = xor i8 %1134, 1
  store i8 %1135, i8* %21, align 1
  %1136 = xor i32 %1125, %1124
  %1137 = lshr i32 %1136, 4
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  store i8 %1139, i8* %27, align 1
  %1140 = zext i1 %1128 to i8
  store i8 %1140, i8* %30, align 1
  %1141 = lshr i32 %1125, 31
  %1142 = trunc i32 %1141 to i8
  store i8 %1142, i8* %33, align 1
  %1143 = lshr i32 %1124, 31
  %1144 = xor i32 %1141, %1143
  %1145 = add nuw nsw i32 %1144, %1141
  %1146 = icmp eq i32 %1145, 2
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %39, align 1
  %1148 = add i64 %1120, 20
  store i64 %1148, i64* %3, align 8
  store i32 %1125, i32* %1123, align 4
  %1149 = load i64, i64* %3, align 8
  %1150 = add i64 %1149, -489
  store i64 %1150, i64* %3, align 8
  br label %block_.L_404b93

block_.L_404d81:                                  ; preds = %block_.L_404b93
  %1151 = add i64 %549, -8064
  %1152 = add i64 %578, 6
  store i64 %1152, i64* %3, align 8
  %1153 = inttoptr i64 %1151 to i32*
  %1154 = load i32, i32* %1153, align 4
  %1155 = add i32 %1154, 1
  %1156 = zext i32 %1155 to i64
  store i64 %1156, i64* %RAX.i2528, align 8
  %1157 = icmp eq i32 %1154, -1
  %1158 = icmp eq i32 %1155, 0
  %1159 = or i1 %1157, %1158
  %1160 = zext i1 %1159 to i8
  store i8 %1160, i8* %14, align 1
  %1161 = and i32 %1155, 255
  %1162 = tail call i32 @llvm.ctpop.i32(i32 %1161)
  %1163 = trunc i32 %1162 to i8
  %1164 = and i8 %1163, 1
  %1165 = xor i8 %1164, 1
  store i8 %1165, i8* %21, align 1
  %1166 = xor i32 %1155, %1154
  %1167 = lshr i32 %1166, 4
  %1168 = trunc i32 %1167 to i8
  %1169 = and i8 %1168, 1
  store i8 %1169, i8* %27, align 1
  %1170 = zext i1 %1158 to i8
  store i8 %1170, i8* %30, align 1
  %1171 = lshr i32 %1155, 31
  %1172 = trunc i32 %1171 to i8
  store i8 %1172, i8* %33, align 1
  %1173 = lshr i32 %1154, 31
  %1174 = xor i32 %1171, %1173
  %1175 = add nuw nsw i32 %1174, %1171
  %1176 = icmp eq i32 %1175, 2
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %39, align 1
  %1178 = add i64 %578, 15
  store i64 %1178, i64* %3, align 8
  store i32 %1155, i32* %1153, align 4
  %1179 = load i64, i64* %RBP.i, align 8
  %1180 = add i64 %1179, -8052
  %1181 = load i64, i64* %3, align 8
  %1182 = add i64 %1181, 7
  store i64 %1182, i64* %3, align 8
  %1183 = inttoptr i64 %1180 to i32*
  %1184 = load i32, i32* %1183, align 4
  store i8 0, i8* %14, align 1
  %1185 = and i32 %1184, 255
  %1186 = tail call i32 @llvm.ctpop.i32(i32 %1185)
  %1187 = trunc i32 %1186 to i8
  %1188 = and i8 %1187, 1
  %1189 = xor i8 %1188, 1
  store i8 %1189, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1190 = icmp eq i32 %1184, 0
  %1191 = zext i1 %1190 to i8
  store i8 %1191, i8* %30, align 1
  %1192 = lshr i32 %1184, 31
  %1193 = trunc i32 %1192 to i8
  store i8 %1193, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v522 = select i1 %1190, i64 13, i64 -529
  %1194 = add i64 %1181, %.v522
  store i64 %1194, i64* %3, align 8
  br i1 %1190, label %block_404d9d, label %block_.L_404b7f

block_404d9d:                                     ; preds = %block_.L_404d81
  %1195 = add i64 %1179, -32
  %1196 = add i64 %1194, 5
  store i64 %1196, i64* %3, align 8
  %1197 = inttoptr i64 %1195 to i64*
  %1198 = load i64, i64* %1197, align 8
  store i8 0, i8* %14, align 1
  %1199 = trunc i64 %1198 to i32
  %1200 = and i32 %1199, 255
  %1201 = tail call i32 @llvm.ctpop.i32(i32 %1200)
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  store i8 %1204, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1205 = icmp eq i64 %1198, 0
  %1206 = zext i1 %1205 to i8
  store i8 %1206, i8* %30, align 1
  %1207 = lshr i64 %1198, 63
  %1208 = trunc i64 %1207 to i8
  store i8 %1208, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v523 = select i1 %1205, i64 163, i64 11
  %1209 = add i64 %1194, %.v523
  store i64 %1209, i64* %3, align 8
  br i1 %1205, label %block_.L_404e40, label %block_404da8

block_404da8:                                     ; preds = %block_404d9d
  %1210 = add i64 %1179, -8072
  %1211 = add i64 %1209, 10
  store i64 %1211, i64* %3, align 8
  %1212 = inttoptr i64 %1210 to i32*
  store i32 21, i32* %1212, align 4
  %.pre368 = load i64, i64* %3, align 8
  br label %block_.L_404db2

block_.L_404db2:                                  ; preds = %block_.L_404e27, %block_404da8
  %1213 = phi i64 [ %1349, %block_.L_404e27 ], [ %.pre368, %block_404da8 ]
  %1214 = load i64, i64* %RBP.i, align 8
  %1215 = add i64 %1214, -8072
  %1216 = add i64 %1213, 10
  store i64 %1216, i64* %3, align 8
  %1217 = inttoptr i64 %1215 to i32*
  %1218 = load i32, i32* %1217, align 4
  %1219 = add i32 %1218, -400
  %1220 = icmp ult i32 %1218, 400
  %1221 = zext i1 %1220 to i8
  store i8 %1221, i8* %14, align 1
  %1222 = and i32 %1219, 255
  %1223 = tail call i32 @llvm.ctpop.i32(i32 %1222)
  %1224 = trunc i32 %1223 to i8
  %1225 = and i8 %1224, 1
  %1226 = xor i8 %1225, 1
  store i8 %1226, i8* %21, align 1
  %1227 = xor i32 %1218, 16
  %1228 = xor i32 %1227, %1219
  %1229 = lshr i32 %1228, 4
  %1230 = trunc i32 %1229 to i8
  %1231 = and i8 %1230, 1
  store i8 %1231, i8* %27, align 1
  %1232 = icmp eq i32 %1219, 0
  %1233 = zext i1 %1232 to i8
  store i8 %1233, i8* %30, align 1
  %1234 = lshr i32 %1219, 31
  %1235 = trunc i32 %1234 to i8
  store i8 %1235, i8* %33, align 1
  %1236 = lshr i32 %1218, 31
  %1237 = xor i32 %1234, %1236
  %1238 = add nuw nsw i32 %1237, %1236
  %1239 = icmp eq i32 %1238, 2
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %39, align 1
  %1241 = icmp ne i8 %1235, 0
  %1242 = xor i1 %1241, %1239
  %.v519 = select i1 %1242, i64 16, i64 137
  %1243 = add i64 %1213, %.v519
  store i64 %1243, i64* %3, align 8
  br i1 %1242, label %block_404dc2, label %block_.L_404e3b

block_404dc2:                                     ; preds = %block_.L_404db2
  %1244 = add i64 %1243, 7
  store i64 %1244, i64* %3, align 8
  %1245 = load i32, i32* %1217, align 4
  %1246 = sext i32 %1245 to i64
  store i64 %1246, i64* %RAX.i2528, align 8
  %1247 = add nsw i64 %1246, 12099168
  %1248 = add i64 %1243, 15
  store i64 %1248, i64* %3, align 8
  %1249 = inttoptr i64 %1247 to i8*
  %1250 = load i8, i8* %1249, align 1
  %1251 = zext i8 %1250 to i64
  store i64 %1251, i64* %RCX.i3786, align 8
  %1252 = zext i8 %1250 to i32
  %1253 = add nsw i32 %1252, -3
  %1254 = icmp ult i8 %1250, 3
  %1255 = zext i1 %1254 to i8
  store i8 %1255, i8* %14, align 1
  %1256 = and i32 %1253, 255
  %1257 = tail call i32 @llvm.ctpop.i32(i32 %1256)
  %1258 = trunc i32 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = xor i8 %1259, 1
  store i8 %1260, i8* %21, align 1
  %1261 = xor i32 %1253, %1252
  %1262 = lshr i32 %1261, 4
  %1263 = trunc i32 %1262 to i8
  %1264 = and i8 %1263, 1
  store i8 %1264, i8* %27, align 1
  %1265 = icmp eq i32 %1253, 0
  %1266 = zext i1 %1265 to i8
  store i8 %1266, i8* %30, align 1
  %1267 = lshr i32 %1253, 31
  %1268 = trunc i32 %1267 to i8
  store i8 %1268, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v518 = select i1 %1265, i64 24, i64 29
  %1269 = add i64 %1243, %.v518
  store i64 %1269, i64* %3, align 8
  br i1 %1265, label %block_404dda, label %block_.L_404ddf

block_404dda:                                     ; preds = %block_404dc2
  %1270 = add i64 %1269, 77
  br label %block_.L_404e27

block_.L_404ddf:                                  ; preds = %block_404dc2
  %1271 = add i64 %1269, 7
  store i64 %1271, i64* %3, align 8
  %1272 = load i32, i32* %1217, align 4
  %1273 = sext i32 %1272 to i64
  store i64 %1273, i64* %RAX.i2528, align 8
  %1274 = shl nsw i64 %1273, 2
  %1275 = add i64 %1214, -1648
  %1276 = add i64 %1275, %1274
  %1277 = add i64 %1269, 15
  store i64 %1277, i64* %3, align 8
  %1278 = inttoptr i64 %1276 to i32*
  %1279 = load i32, i32* %1278, align 4
  %1280 = add i32 %1279, 1
  %1281 = icmp ne i32 %1279, -1
  %1282 = zext i1 %1281 to i8
  store i8 %1282, i8* %14, align 1
  %1283 = and i32 %1280, 255
  %1284 = tail call i32 @llvm.ctpop.i32(i32 %1283)
  %1285 = trunc i32 %1284 to i8
  %1286 = and i8 %1285, 1
  %1287 = xor i8 %1286, 1
  store i8 %1287, i8* %21, align 1
  %1288 = xor i32 %1279, 16
  %1289 = xor i32 %1288, %1280
  %1290 = lshr i32 %1289, 4
  %1291 = trunc i32 %1290 to i8
  %1292 = and i8 %1291, 1
  store i8 %1292, i8* %27, align 1
  %1293 = icmp eq i32 %1280, 0
  %1294 = zext i1 %1293 to i8
  store i8 %1294, i8* %30, align 1
  %1295 = lshr i32 %1280, 31
  %1296 = trunc i32 %1295 to i8
  store i8 %1296, i8* %33, align 1
  %1297 = lshr i32 %1279, 31
  %1298 = xor i32 %1297, 1
  %1299 = xor i32 %1295, %1297
  %1300 = add nuw nsw i32 %1299, %1298
  %1301 = icmp eq i32 %1300, 2
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %39, align 1
  %.v517 = select i1 %1293, i64 21, i64 44
  %1303 = add i64 %1269, %.v517
  %1304 = add i64 %1214, -32
  %1305 = add i64 %1303, 4
  store i64 %1305, i64* %3, align 8
  %1306 = inttoptr i64 %1304 to i64*
  %1307 = load i64, i64* %1306, align 8
  store i64 %1307, i64* %RAX.i2528, align 8
  %1308 = add i64 %1303, 11
  store i64 %1308, i64* %3, align 8
  %1309 = load i32, i32* %1217, align 4
  %1310 = sext i32 %1309 to i64
  store i64 %1310, i64* %RCX.i3786, align 8
  %1311 = shl nsw i64 %1310, 2
  %1312 = add i64 %1311, %1307
  %1313 = add i64 %1303, 18
  store i64 %1313, i64* %3, align 8
  %1314 = inttoptr i64 %1312 to i32*
  br i1 %1293, label %block_404df4, label %block_.L_404e0b

block_404df4:                                     ; preds = %block_.L_404ddf
  store i32 0, i32* %1314, align 4
  %1315 = load i64, i64* %3, align 8
  %1316 = add i64 %1315, 23
  store i64 %1316, i64* %3, align 8
  br label %block_.L_404e1d

block_.L_404e0b:                                  ; preds = %block_.L_404ddf
  store i32 1, i32* %1314, align 4
  %.pre369 = load i64, i64* %3, align 8
  br label %block_.L_404e1d

block_.L_404e1d:                                  ; preds = %block_.L_404e0b, %block_404df4
  %1317 = phi i64 [ %.pre369, %block_.L_404e0b ], [ %1316, %block_404df4 ]
  %1318 = add i64 %1317, 10
  store i64 %1318, i64* %3, align 8
  %.pre370 = load i64, i64* %RBP.i, align 8
  br label %block_.L_404e27

block_.L_404e27:                                  ; preds = %block_.L_404e1d, %block_404dda
  %1319 = phi i64 [ %1214, %block_404dda ], [ %.pre370, %block_.L_404e1d ]
  %storemerge220 = phi i64 [ %1270, %block_404dda ], [ %1318, %block_.L_404e1d ]
  %1320 = add i64 %1319, -8072
  %1321 = add i64 %storemerge220, 6
  store i64 %1321, i64* %3, align 8
  %1322 = inttoptr i64 %1320 to i32*
  %1323 = load i32, i32* %1322, align 4
  %1324 = add i32 %1323, 1
  %1325 = zext i32 %1324 to i64
  store i64 %1325, i64* %RAX.i2528, align 8
  %1326 = icmp eq i32 %1323, -1
  %1327 = icmp eq i32 %1324, 0
  %1328 = or i1 %1326, %1327
  %1329 = zext i1 %1328 to i8
  store i8 %1329, i8* %14, align 1
  %1330 = and i32 %1324, 255
  %1331 = tail call i32 @llvm.ctpop.i32(i32 %1330)
  %1332 = trunc i32 %1331 to i8
  %1333 = and i8 %1332, 1
  %1334 = xor i8 %1333, 1
  store i8 %1334, i8* %21, align 1
  %1335 = xor i32 %1324, %1323
  %1336 = lshr i32 %1335, 4
  %1337 = trunc i32 %1336 to i8
  %1338 = and i8 %1337, 1
  store i8 %1338, i8* %27, align 1
  %1339 = zext i1 %1327 to i8
  store i8 %1339, i8* %30, align 1
  %1340 = lshr i32 %1324, 31
  %1341 = trunc i32 %1340 to i8
  store i8 %1341, i8* %33, align 1
  %1342 = lshr i32 %1323, 31
  %1343 = xor i32 %1340, %1342
  %1344 = add nuw nsw i32 %1343, %1340
  %1345 = icmp eq i32 %1344, 2
  %1346 = zext i1 %1345 to i8
  store i8 %1346, i8* %39, align 1
  %1347 = add i64 %storemerge220, 15
  store i64 %1347, i64* %3, align 8
  store i32 %1324, i32* %1322, align 4
  %1348 = load i64, i64* %3, align 8
  %1349 = add i64 %1348, -132
  store i64 %1349, i64* %3, align 8
  br label %block_.L_404db2

block_.L_404e3b:                                  ; preds = %block_.L_404db2
  %1350 = add i64 %1243, 5
  store i64 %1350, i64* %3, align 8
  br label %block_.L_404e40

block_.L_404e40:                                  ; preds = %block_.L_404e3b, %block_404d9d
  %1351 = phi i64 [ %1214, %block_.L_404e3b ], [ %1179, %block_404d9d ]
  %1352 = phi i64 [ %1350, %block_.L_404e3b ], [ %1209, %block_404d9d ]
  %1353 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %1354 = and i32 %1353, 131072
  %1355 = zext i32 %1354 to i64
  store i64 %1355, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1356 = icmp eq i32 %1354, 0
  %.lobit501 = lshr exact i32 %1354, 17
  %1357 = trunc i32 %.lobit501 to i8
  %1358 = xor i8 %1357, 1
  store i8 %1358, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v524 = select i1 %1356, i64 759, i64 21
  %1359 = add i64 %1352, %.v524
  store i64 %1359, i64* %3, align 8
  br i1 %1356, label %block_.L_404e40.block_.L_405137_crit_edge, label %block_404e55

block_.L_404e40.block_.L_405137_crit_edge:        ; preds = %block_.L_404e40
  %.pre492 = getelementptr inbounds %union.anon, %union.anon* %48, i64 0, i32 0
  br label %block_.L_405137

block_404e55:                                     ; preds = %block_.L_404e40
  %1360 = add i64 %1351, -8088
  %1361 = add i64 %1359, 10
  store i64 %1361, i64* %3, align 8
  %1362 = inttoptr i64 %1360 to i32*
  store i32 0, i32* %1362, align 4
  %AL.i3263 = bitcast %union.anon* %40 to i8*
  %RSI.i3375 = getelementptr inbounds %union.anon, %union.anon* %48, i64 0, i32 0
  %.pre371 = load i64, i64* %3, align 8
  br label %block_.L_404e5f

block_.L_404e5f:                                  ; preds = %block_.L_405031, %block_404e55
  %1363 = phi i64 [ %.pre371, %block_404e55 ], [ %1794, %block_.L_405031 ]
  %MEMORY.27 = phi %struct.Memory* [ %call2_404a15, %block_404e55 ], [ %call2_40503d, %block_.L_405031 ]
  %1364 = load i64, i64* %RBP.i, align 8
  %1365 = add i64 %1364, -8088
  %1366 = add i64 %1363, 6
  store i64 %1366, i64* %3, align 8
  %1367 = inttoptr i64 %1365 to i32*
  %1368 = load i32, i32* %1367, align 4
  %1369 = zext i32 %1368 to i64
  store i64 %1369, i64* %RAX.i2528, align 8
  %1370 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %1371 = sub i32 %1368, %1370
  %1372 = icmp ult i32 %1368, %1370
  %1373 = zext i1 %1372 to i8
  store i8 %1373, i8* %14, align 1
  %1374 = and i32 %1371, 255
  %1375 = tail call i32 @llvm.ctpop.i32(i32 %1374)
  %1376 = trunc i32 %1375 to i8
  %1377 = and i8 %1376, 1
  %1378 = xor i8 %1377, 1
  store i8 %1378, i8* %21, align 1
  %1379 = xor i32 %1370, %1368
  %1380 = xor i32 %1379, %1371
  %1381 = lshr i32 %1380, 4
  %1382 = trunc i32 %1381 to i8
  %1383 = and i8 %1382, 1
  store i8 %1383, i8* %27, align 1
  %1384 = icmp eq i32 %1371, 0
  %1385 = zext i1 %1384 to i8
  store i8 %1385, i8* %30, align 1
  %1386 = lshr i32 %1371, 31
  %1387 = trunc i32 %1386 to i8
  store i8 %1387, i8* %33, align 1
  %1388 = lshr i32 %1368, 31
  %1389 = lshr i32 %1370, 31
  %1390 = xor i32 %1389, %1388
  %1391 = xor i32 %1386, %1388
  %1392 = add nuw nsw i32 %1391, %1390
  %1393 = icmp eq i32 %1392, 2
  %1394 = zext i1 %1393 to i8
  store i8 %1394, i8* %39, align 1
  %1395 = icmp ne i8 %1387, 0
  %1396 = xor i1 %1395, %1393
  %.v525 = select i1 %1396, i64 19, i64 509
  %1397 = add i64 %1363, %.v525
  store i64 %1397, i64* %3, align 8
  br i1 %1396, label %block_404e72, label %block_.L_40505c

block_404e72:                                     ; preds = %block_.L_404e5f
  %1398 = add i64 %1364, -8092
  %1399 = add i64 %1397, 10
  store i64 %1399, i64* %3, align 8
  %1400 = inttoptr i64 %1398 to i32*
  store i32 0, i32* %1400, align 4
  %.pre374 = load i64, i64* %3, align 8
  br label %block_.L_404e7c

block_.L_404e7c:                                  ; preds = %block_.L_405018, %block_404e72
  %1401 = phi i64 [ %.pre374, %block_404e72 ], [ %1751, %block_.L_405018 ]
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.27, %block_404e72 ], [ %MEMORY.34, %block_.L_405018 ]
  %1402 = load i64, i64* %RBP.i, align 8
  %1403 = add i64 %1402, -8092
  %1404 = add i64 %1401, 6
  store i64 %1404, i64* %3, align 8
  %1405 = inttoptr i64 %1403 to i32*
  %1406 = load i32, i32* %1405, align 4
  %1407 = zext i32 %1406 to i64
  store i64 %1407, i64* %RAX.i2528, align 8
  %1408 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %1409 = sub i32 %1406, %1408
  %1410 = icmp ult i32 %1406, %1408
  %1411 = zext i1 %1410 to i8
  store i8 %1411, i8* %14, align 1
  %1412 = and i32 %1409, 255
  %1413 = tail call i32 @llvm.ctpop.i32(i32 %1412)
  %1414 = trunc i32 %1413 to i8
  %1415 = and i8 %1414, 1
  %1416 = xor i8 %1415, 1
  store i8 %1416, i8* %21, align 1
  %1417 = xor i32 %1408, %1406
  %1418 = xor i32 %1417, %1409
  %1419 = lshr i32 %1418, 4
  %1420 = trunc i32 %1419 to i8
  %1421 = and i8 %1420, 1
  store i8 %1421, i8* %27, align 1
  %1422 = icmp eq i32 %1409, 0
  %1423 = zext i1 %1422 to i8
  store i8 %1423, i8* %30, align 1
  %1424 = lshr i32 %1409, 31
  %1425 = trunc i32 %1424 to i8
  store i8 %1425, i8* %33, align 1
  %1426 = lshr i32 %1406, 31
  %1427 = lshr i32 %1408, 31
  %1428 = xor i32 %1427, %1426
  %1429 = xor i32 %1424, %1426
  %1430 = add nuw nsw i32 %1429, %1428
  %1431 = icmp eq i32 %1430, 2
  %1432 = zext i1 %1431 to i8
  store i8 %1432, i8* %39, align 1
  %1433 = icmp ne i8 %1425, 0
  %1434 = xor i1 %1433, %1431
  %.v697 = select i1 %1434, i64 19, i64 437
  %1435 = add i64 %1401, %.v697
  store i64 %1435, i64* %3, align 8
  br i1 %1434, label %block_404e8f, label %block_.L_405031

block_404e8f:                                     ; preds = %block_.L_404e7c
  %1436 = add i64 %1402, -8088
  %1437 = add i64 %1435, 7
  store i64 %1437, i64* %3, align 8
  %1438 = inttoptr i64 %1436 to i32*
  %1439 = load i32, i32* %1438, align 4
  %1440 = mul i32 %1439, 20
  %1441 = add i32 %1440, 21
  %1442 = zext i32 %1441 to i64
  store i64 %1442, i64* %RAX.i2528, align 8
  %1443 = icmp ugt i32 %1440, -22
  %1444 = zext i1 %1443 to i8
  store i8 %1444, i8* %14, align 1
  %1445 = and i32 %1441, 253
  %1446 = tail call i32 @llvm.ctpop.i32(i32 %1445)
  %1447 = trunc i32 %1446 to i8
  %1448 = and i8 %1447, 1
  %1449 = xor i8 %1448, 1
  store i8 %1449, i8* %21, align 1
  %1450 = xor i32 %1440, 16
  %1451 = xor i32 %1450, %1441
  %1452 = lshr i32 %1451, 4
  %1453 = trunc i32 %1452 to i8
  %1454 = and i8 %1453, 1
  store i8 %1454, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1455 = lshr i32 %1441, 31
  %1456 = trunc i32 %1455 to i8
  store i8 %1456, i8* %33, align 1
  %1457 = lshr i32 %1440, 31
  %1458 = xor i32 %1455, %1457
  %1459 = add nuw nsw i32 %1458, %1455
  %1460 = icmp eq i32 %1459, 2
  %1461 = zext i1 %1460 to i8
  store i8 %1461, i8* %39, align 1
  %1462 = add i64 %1435, 16
  store i64 %1462, i64* %3, align 8
  %1463 = load i32, i32* %1405, align 4
  %1464 = add i32 %1463, %1441
  %1465 = zext i32 %1464 to i64
  store i64 %1465, i64* %RAX.i2528, align 8
  %1466 = icmp ult i32 %1464, %1441
  %1467 = icmp ult i32 %1464, %1463
  %1468 = or i1 %1466, %1467
  %1469 = zext i1 %1468 to i8
  store i8 %1469, i8* %14, align 1
  %1470 = and i32 %1464, 255
  %1471 = tail call i32 @llvm.ctpop.i32(i32 %1470)
  %1472 = trunc i32 %1471 to i8
  %1473 = and i8 %1472, 1
  %1474 = xor i8 %1473, 1
  store i8 %1474, i8* %21, align 1
  %1475 = xor i32 %1463, %1441
  %1476 = xor i32 %1475, %1464
  %1477 = lshr i32 %1476, 4
  %1478 = trunc i32 %1477 to i8
  %1479 = and i8 %1478, 1
  store i8 %1479, i8* %27, align 1
  %1480 = icmp eq i32 %1464, 0
  %1481 = zext i1 %1480 to i8
  store i8 %1481, i8* %30, align 1
  %1482 = lshr i32 %1464, 31
  %1483 = trunc i32 %1482 to i8
  store i8 %1483, i8* %33, align 1
  %1484 = lshr i32 %1463, 31
  %1485 = xor i32 %1482, %1455
  %1486 = xor i32 %1482, %1484
  %1487 = add nuw nsw i32 %1485, %1486
  %1488 = icmp eq i32 %1487, 2
  %1489 = zext i1 %1488 to i8
  store i8 %1489, i8* %39, align 1
  %1490 = add i64 %1402, -8072
  %1491 = add i64 %1435, 22
  store i64 %1491, i64* %3, align 8
  %1492 = inttoptr i64 %1490 to i32*
  store i32 %1464, i32* %1492, align 4
  %1493 = load i64, i64* %RBP.i, align 8
  %1494 = add i64 %1493, -8072
  %1495 = load i64, i64* %3, align 8
  %1496 = add i64 %1495, 7
  store i64 %1496, i64* %3, align 8
  %1497 = inttoptr i64 %1494 to i32*
  %1498 = load i32, i32* %1497, align 4
  %1499 = sext i32 %1498 to i64
  store i64 %1499, i64* %RCX.i3786, align 8
  %1500 = shl nsw i64 %1499, 2
  %1501 = add i64 %1493, -1648
  %1502 = add i64 %1501, %1500
  %1503 = add i64 %1495, 15
  store i64 %1503, i64* %3, align 8
  %1504 = inttoptr i64 %1502 to i32*
  %1505 = load i32, i32* %1504, align 4
  store i8 0, i8* %14, align 1
  %1506 = and i32 %1505, 255
  %1507 = tail call i32 @llvm.ctpop.i32(i32 %1506)
  %1508 = trunc i32 %1507 to i8
  %1509 = and i8 %1508, 1
  %1510 = xor i8 %1509, 1
  store i8 %1510, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1511 = icmp eq i32 %1505, 0
  %1512 = zext i1 %1511 to i8
  store i8 %1512, i8* %30, align 1
  %1513 = lshr i32 %1505, 31
  %1514 = trunc i32 %1513 to i8
  store i8 %1514, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1515 = icmp ne i8 %1514, 0
  %1516 = or i1 %1511, %1515
  %.v516 = select i1 %1516, i64 71, i64 21
  %1517 = add i64 %1495, %.v516
  store i64 %1517, i64* %3, align 8
  br i1 %1516, label %block_.L_404eec, label %block_404eba

block_404eba:                                     ; preds = %block_404e8f
  store i64 ptrtoint (%G__0x57f1e3_type* @G__0x57f1e3 to i64), i64* %RSI.i3375, align 8
  %1518 = load i64, i64* bitcast (%G_0x99c0a0_type* @G_0x99c0a0 to i64*), align 8
  store i64 %1518, i64* %RDI.i3360, align 8
  %1519 = add i64 %1517, 25
  store i64 %1519, i64* %3, align 8
  %1520 = load i32, i32* %1497, align 4
  %1521 = sext i32 %1520 to i64
  store i64 %1521, i64* %RAX.i2528, align 8
  %1522 = shl nsw i64 %1521, 2
  %1523 = add i64 %1501, %1522
  %1524 = add i64 %1517, 32
  store i64 %1524, i64* %3, align 8
  %1525 = inttoptr i64 %1523 to i32*
  %1526 = load i32, i32* %1525, align 4
  %1527 = zext i32 %1526 to i64
  store i64 %1527, i64* %RDX.i3821, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1528 = add i64 %1517, -15850
  %1529 = add i64 %1517, 39
  %1530 = load i64, i64* %6, align 8
  %1531 = add i64 %1530, -8
  %1532 = inttoptr i64 %1531 to i64*
  store i64 %1529, i64* %1532, align 8
  store i64 %1531, i64* %6, align 8
  store i64 %1528, i64* %3, align 8
  %1533 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %MEMORY.28)
  %1534 = load i64, i64* %RBP.i, align 8
  %1535 = add i64 %1534, -10896
  %1536 = load i32, i32* %EAX.i3678, align 4
  %1537 = load i64, i64* %3, align 8
  %1538 = add i64 %1537, 6
  store i64 %1538, i64* %3, align 8
  %1539 = inttoptr i64 %1535 to i32*
  store i32 %1536, i32* %1539, align 4
  %1540 = load i64, i64* %3, align 8
  %1541 = add i64 %1540, 305
  br label %block_.L_405018

block_.L_404eec:                                  ; preds = %block_404e8f
  %1542 = add i64 %1517, 7
  store i64 %1542, i64* %3, align 8
  %1543 = load i32, i32* %1497, align 4
  %1544 = sext i32 %1543 to i64
  store i64 %1544, i64* %RAX.i2528, align 8
  %1545 = shl nsw i64 %1544, 2
  %1546 = add i64 %1501, %1545
  %1547 = add i64 %1517, 15
  store i64 %1547, i64* %3, align 8
  %1548 = inttoptr i64 %1546 to i32*
  %1549 = load i32, i32* %1548, align 4
  store i8 0, i8* %14, align 1
  %1550 = and i32 %1549, 255
  %1551 = tail call i32 @llvm.ctpop.i32(i32 %1550)
  %1552 = trunc i32 %1551 to i8
  %1553 = and i8 %1552, 1
  %1554 = xor i8 %1553, 1
  store i8 %1554, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1555 = icmp eq i32 %1549, 0
  %1556 = zext i1 %1555 to i8
  store i8 %1556, i8* %30, align 1
  %1557 = lshr i32 %1549, 31
  %1558 = trunc i32 %1557 to i8
  store i8 %1558, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v515 = select i1 %1555, i64 21, i64 158
  %1559 = add i64 %1517, %.v515
  %1560 = add i64 %1559, 7
  store i64 %1560, i64* %3, align 8
  %1561 = load i32, i32* %1497, align 4
  %1562 = sext i32 %1561 to i64
  store i64 %1562, i64* %RAX.i2528, align 8
  %1563 = add nsw i64 %1562, 12099168
  %1564 = add i64 %1559, 15
  store i64 %1564, i64* %3, align 8
  %1565 = inttoptr i64 %1563 to i8*
  %1566 = load i8, i8* %1565, align 1
  %1567 = zext i8 %1566 to i64
  store i64 %1567, i64* %RCX.i3786, align 8
  %1568 = zext i8 %1566 to i32
  %1569 = add nsw i32 %1568, -1
  %1570 = icmp eq i8 %1566, 0
  %1571 = zext i1 %1570 to i8
  store i8 %1571, i8* %14, align 1
  %1572 = and i32 %1569, 255
  %1573 = tail call i32 @llvm.ctpop.i32(i32 %1572)
  %1574 = trunc i32 %1573 to i8
  %1575 = and i8 %1574, 1
  %1576 = xor i8 %1575, 1
  store i8 %1576, i8* %21, align 1
  %1577 = xor i32 %1569, %1568
  %1578 = lshr i32 %1577, 4
  %1579 = trunc i32 %1578 to i8
  %1580 = and i8 %1579, 1
  store i8 %1580, i8* %27, align 1
  %1581 = icmp eq i32 %1569, 0
  %1582 = zext i1 %1581 to i8
  store i8 %1582, i8* %30, align 1
  %1583 = lshr i32 %1569, 31
  %1584 = trunc i32 %1583 to i8
  store i8 %1584, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v698 = select i1 %1581, i64 24, i64 52
  %1585 = add i64 %1559, %.v698
  store i64 %1585, i64* %3, align 8
  br i1 %1555, label %block_404f01, label %block_.L_404f8a

block_404f01:                                     ; preds = %block_.L_404eec
  br i1 %1581, label %block_404f19, label %block_.L_404f35

block_404f19:                                     ; preds = %block_404f01
  store i64 ptrtoint (%G__0x579dc5_type* @G__0x579dc5 to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1586 = add i64 %1585, 315031
  %1587 = add i64 %1585, 17
  %1588 = load i64, i64* %6, align 8
  %1589 = add i64 %1588, -8
  %1590 = inttoptr i64 %1589 to i64*
  store i64 %1587, i64* %1590, align 8
  store i64 %1589, i64* %6, align 8
  store i64 %1586, i64* %3, align 8
  %call2_404f25 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1586, %struct.Memory* %MEMORY.28)
  %1591 = load i64, i64* %RBP.i, align 8
  %1592 = add i64 %1591, -10900
  %1593 = load i32, i32* %EAX.i3678, align 4
  %1594 = load i64, i64* %3, align 8
  %1595 = add i64 %1594, 6
  store i64 %1595, i64* %3, align 8
  %1596 = inttoptr i64 %1592 to i32*
  store i32 %1593, i32* %1596, align 4
  %1597 = load i64, i64* %3, align 8
  %1598 = add i64 %1597, 85
  br label %block_.L_404f85

block_.L_404f35:                                  ; preds = %block_404f01
  %1599 = add i64 %1585, 7
  store i64 %1599, i64* %3, align 8
  %1600 = load i32, i32* %1497, align 4
  %1601 = sext i32 %1600 to i64
  store i64 %1601, i64* %RAX.i2528, align 8
  %1602 = add nsw i64 %1601, 12099168
  %1603 = add i64 %1585, 15
  store i64 %1603, i64* %3, align 8
  %1604 = inttoptr i64 %1602 to i8*
  %1605 = load i8, i8* %1604, align 1
  %1606 = zext i8 %1605 to i64
  store i64 %1606, i64* %RCX.i3786, align 8
  %1607 = zext i8 %1605 to i32
  %1608 = add nsw i32 %1607, -2
  %1609 = icmp ult i8 %1605, 2
  %1610 = zext i1 %1609 to i8
  store i8 %1610, i8* %14, align 1
  %1611 = and i32 %1608, 255
  %1612 = tail call i32 @llvm.ctpop.i32(i32 %1611)
  %1613 = trunc i32 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = xor i8 %1614, 1
  store i8 %1615, i8* %21, align 1
  %1616 = xor i32 %1608, %1607
  %1617 = lshr i32 %1616, 4
  %1618 = trunc i32 %1617 to i8
  %1619 = and i8 %1618, 1
  store i8 %1619, i8* %27, align 1
  %1620 = icmp eq i32 %1608, 0
  %1621 = zext i1 %1620 to i8
  store i8 %1621, i8* %30, align 1
  %1622 = lshr i32 %1608, 31
  %1623 = trunc i32 %1622 to i8
  store i8 %1623, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v700 = select i1 %1620, i64 24, i64 52
  %1624 = add i64 %1585, %.v700
  %1625 = add i64 %1624, 10
  store i64 %1625, i64* %3, align 8
  br i1 %1620, label %block_404f4d, label %block_.L_404f69

block_404f4d:                                     ; preds = %block_.L_404f35
  store i64 ptrtoint (%G__0x579dc8_type* @G__0x579dc8 to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1626 = add i64 %1624, 314979
  %1627 = add i64 %1624, 17
  %1628 = load i64, i64* %6, align 8
  %1629 = add i64 %1628, -8
  %1630 = inttoptr i64 %1629 to i64*
  store i64 %1627, i64* %1630, align 8
  store i64 %1629, i64* %6, align 8
  store i64 %1626, i64* %3, align 8
  %call2_404f59 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1626, %struct.Memory* %MEMORY.28)
  %1631 = load i64, i64* %RBP.i, align 8
  %1632 = add i64 %1631, -10904
  %1633 = load i32, i32* %EAX.i3678, align 4
  %1634 = load i64, i64* %3, align 8
  %1635 = add i64 %1634, 6
  store i64 %1635, i64* %3, align 8
  %1636 = inttoptr i64 %1632 to i32*
  store i32 %1633, i32* %1636, align 4
  %1637 = load i64, i64* %3, align 8
  %1638 = add i64 %1637, 28
  store i64 %1638, i64* %3, align 8
  br label %block_.L_404f80

block_.L_404f69:                                  ; preds = %block_.L_404f35
  store i64 ptrtoint (%G__0x579dcb_type* @G__0x579dcb to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1639 = add i64 %1624, 314951
  %1640 = add i64 %1624, 17
  %1641 = load i64, i64* %6, align 8
  %1642 = add i64 %1641, -8
  %1643 = inttoptr i64 %1642 to i64*
  store i64 %1640, i64* %1643, align 8
  store i64 %1642, i64* %6, align 8
  store i64 %1639, i64* %3, align 8
  %call2_404f75 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1639, %struct.Memory* %MEMORY.28)
  %1644 = load i64, i64* %RBP.i, align 8
  %1645 = add i64 %1644, -10908
  %1646 = load i32, i32* %EAX.i3678, align 4
  %1647 = load i64, i64* %3, align 8
  %1648 = add i64 %1647, 6
  store i64 %1648, i64* %3, align 8
  %1649 = inttoptr i64 %1645 to i32*
  store i32 %1646, i32* %1649, align 4
  %.pre375 = load i64, i64* %3, align 8
  br label %block_.L_404f80

block_.L_404f80:                                  ; preds = %block_.L_404f69, %block_404f4d
  %1650 = phi i64 [ %.pre375, %block_.L_404f69 ], [ %1638, %block_404f4d ]
  %1651 = add i64 %1650, 5
  store i64 %1651, i64* %3, align 8
  br label %block_.L_404f85

block_.L_404f85:                                  ; preds = %block_.L_404f80, %block_404f19
  %storemerge222 = phi i64 [ %1598, %block_404f19 ], [ %1651, %block_.L_404f80 ]
  %1652 = add i64 %storemerge222, 142
  br label %block_.L_405013

block_.L_404f8a:                                  ; preds = %block_.L_404eec
  br i1 %1581, label %block_404fa2, label %block_.L_404fbe

block_404fa2:                                     ; preds = %block_.L_404f8a
  store i64 ptrtoint (%G__0x579dce_type* @G__0x579dce to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1653 = add i64 %1585, 314894
  %1654 = add i64 %1585, 17
  %1655 = load i64, i64* %6, align 8
  %1656 = add i64 %1655, -8
  %1657 = inttoptr i64 %1656 to i64*
  store i64 %1654, i64* %1657, align 8
  store i64 %1656, i64* %6, align 8
  store i64 %1653, i64* %3, align 8
  %call2_404fae = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1653, %struct.Memory* %MEMORY.28)
  %1658 = load i64, i64* %RBP.i, align 8
  %1659 = add i64 %1658, -10912
  %1660 = load i32, i32* %EAX.i3678, align 4
  %1661 = load i64, i64* %3, align 8
  %1662 = add i64 %1661, 6
  store i64 %1662, i64* %3, align 8
  %1663 = inttoptr i64 %1659 to i32*
  store i32 %1660, i32* %1663, align 4
  %1664 = load i64, i64* %3, align 8
  %1665 = add i64 %1664, 85
  br label %block_.L_40500e

block_.L_404fbe:                                  ; preds = %block_.L_404f8a
  %1666 = add i64 %1585, 7
  store i64 %1666, i64* %3, align 8
  %1667 = load i32, i32* %1497, align 4
  %1668 = sext i32 %1667 to i64
  store i64 %1668, i64* %RAX.i2528, align 8
  %1669 = add nsw i64 %1668, 12099168
  %1670 = add i64 %1585, 15
  store i64 %1670, i64* %3, align 8
  %1671 = inttoptr i64 %1669 to i8*
  %1672 = load i8, i8* %1671, align 1
  %1673 = zext i8 %1672 to i64
  store i64 %1673, i64* %RCX.i3786, align 8
  %1674 = zext i8 %1672 to i32
  %1675 = add nsw i32 %1674, -2
  %1676 = icmp ult i8 %1672, 2
  %1677 = zext i1 %1676 to i8
  store i8 %1677, i8* %14, align 1
  %1678 = and i32 %1675, 255
  %1679 = tail call i32 @llvm.ctpop.i32(i32 %1678)
  %1680 = trunc i32 %1679 to i8
  %1681 = and i8 %1680, 1
  %1682 = xor i8 %1681, 1
  store i8 %1682, i8* %21, align 1
  %1683 = xor i32 %1675, %1674
  %1684 = lshr i32 %1683, 4
  %1685 = trunc i32 %1684 to i8
  %1686 = and i8 %1685, 1
  store i8 %1686, i8* %27, align 1
  %1687 = icmp eq i32 %1675, 0
  %1688 = zext i1 %1687 to i8
  store i8 %1688, i8* %30, align 1
  %1689 = lshr i32 %1675, 31
  %1690 = trunc i32 %1689 to i8
  store i8 %1690, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v699 = select i1 %1687, i64 24, i64 52
  %1691 = add i64 %1585, %.v699
  %1692 = add i64 %1691, 10
  store i64 %1692, i64* %3, align 8
  br i1 %1687, label %block_404fd6, label %block_.L_404ff2

block_404fd6:                                     ; preds = %block_.L_404fbe
  store i64 ptrtoint (%G__0x579dd1_type* @G__0x579dd1 to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1693 = add i64 %1691, 314842
  %1694 = add i64 %1691, 17
  %1695 = load i64, i64* %6, align 8
  %1696 = add i64 %1695, -8
  %1697 = inttoptr i64 %1696 to i64*
  store i64 %1694, i64* %1697, align 8
  store i64 %1696, i64* %6, align 8
  store i64 %1693, i64* %3, align 8
  %call2_404fe2 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1693, %struct.Memory* %MEMORY.28)
  %1698 = load i64, i64* %RBP.i, align 8
  %1699 = add i64 %1698, -10916
  %1700 = load i32, i32* %EAX.i3678, align 4
  %1701 = load i64, i64* %3, align 8
  %1702 = add i64 %1701, 6
  store i64 %1702, i64* %3, align 8
  %1703 = inttoptr i64 %1699 to i32*
  store i32 %1700, i32* %1703, align 4
  %1704 = load i64, i64* %3, align 8
  %1705 = add i64 %1704, 28
  store i64 %1705, i64* %3, align 8
  br label %block_.L_405009

block_.L_404ff2:                                  ; preds = %block_.L_404fbe
  store i64 ptrtoint (%G__0x579dd4_type* @G__0x579dd4 to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1706 = add i64 %1691, 314814
  %1707 = add i64 %1691, 17
  %1708 = load i64, i64* %6, align 8
  %1709 = add i64 %1708, -8
  %1710 = inttoptr i64 %1709 to i64*
  store i64 %1707, i64* %1710, align 8
  store i64 %1709, i64* %6, align 8
  store i64 %1706, i64* %3, align 8
  %call2_404ffe = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1706, %struct.Memory* %MEMORY.28)
  %1711 = load i64, i64* %RBP.i, align 8
  %1712 = add i64 %1711, -10920
  %1713 = load i32, i32* %EAX.i3678, align 4
  %1714 = load i64, i64* %3, align 8
  %1715 = add i64 %1714, 6
  store i64 %1715, i64* %3, align 8
  %1716 = inttoptr i64 %1712 to i32*
  store i32 %1713, i32* %1716, align 4
  %.pre376 = load i64, i64* %3, align 8
  br label %block_.L_405009

block_.L_405009:                                  ; preds = %block_.L_404ff2, %block_404fd6
  %1717 = phi i64 [ %.pre376, %block_.L_404ff2 ], [ %1705, %block_404fd6 ]
  %1718 = add i64 %1717, 5
  store i64 %1718, i64* %3, align 8
  br label %block_.L_40500e

block_.L_40500e:                                  ; preds = %block_.L_405009, %block_404fa2
  %storemerge224 = phi i64 [ %1665, %block_404fa2 ], [ %1718, %block_.L_405009 ]
  %1719 = add i64 %storemerge224, 5
  store i64 %1719, i64* %3, align 8
  br label %block_.L_405013

block_.L_405013:                                  ; preds = %block_.L_40500e, %block_.L_404f85
  %storemerge223 = phi i64 [ %1652, %block_.L_404f85 ], [ %1719, %block_.L_40500e ]
  %1720 = add i64 %storemerge223, 5
  store i64 %1720, i64* %3, align 8
  br label %block_.L_405018

block_.L_405018:                                  ; preds = %block_.L_405013, %block_404eba
  %storemerge221 = phi i64 [ %1541, %block_404eba ], [ %1720, %block_.L_405013 ]
  %MEMORY.34 = phi %struct.Memory* [ %1533, %block_404eba ], [ %MEMORY.28, %block_.L_405013 ]
  %1721 = load i64, i64* %RBP.i, align 8
  %1722 = add i64 %1721, -8092
  %1723 = add i64 %storemerge221, 11
  store i64 %1723, i64* %3, align 8
  %1724 = inttoptr i64 %1722 to i32*
  %1725 = load i32, i32* %1724, align 4
  %1726 = add i32 %1725, 1
  %1727 = zext i32 %1726 to i64
  store i64 %1727, i64* %RAX.i2528, align 8
  %1728 = icmp eq i32 %1725, -1
  %1729 = icmp eq i32 %1726, 0
  %1730 = or i1 %1728, %1729
  %1731 = zext i1 %1730 to i8
  store i8 %1731, i8* %14, align 1
  %1732 = and i32 %1726, 255
  %1733 = tail call i32 @llvm.ctpop.i32(i32 %1732)
  %1734 = trunc i32 %1733 to i8
  %1735 = and i8 %1734, 1
  %1736 = xor i8 %1735, 1
  store i8 %1736, i8* %21, align 1
  %1737 = xor i32 %1726, %1725
  %1738 = lshr i32 %1737, 4
  %1739 = trunc i32 %1738 to i8
  %1740 = and i8 %1739, 1
  store i8 %1740, i8* %27, align 1
  %1741 = zext i1 %1729 to i8
  store i8 %1741, i8* %30, align 1
  %1742 = lshr i32 %1726, 31
  %1743 = trunc i32 %1742 to i8
  store i8 %1743, i8* %33, align 1
  %1744 = lshr i32 %1725, 31
  %1745 = xor i32 %1742, %1744
  %1746 = add nuw nsw i32 %1745, %1742
  %1747 = icmp eq i32 %1746, 2
  %1748 = zext i1 %1747 to i8
  store i8 %1748, i8* %39, align 1
  %1749 = add i64 %storemerge221, 20
  store i64 %1749, i64* %3, align 8
  store i32 %1726, i32* %1724, align 4
  %1750 = load i64, i64* %3, align 8
  %1751 = add i64 %1750, -432
  store i64 %1751, i64* %3, align 8
  br label %block_.L_404e7c

block_.L_405031:                                  ; preds = %block_.L_404e7c
  store i64 ptrtoint (%G__0x586073_type* @G__0x586073 to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1752 = add i64 %1435, 314751
  %1753 = add i64 %1435, 17
  %1754 = load i64, i64* %6, align 8
  %1755 = add i64 %1754, -8
  %1756 = inttoptr i64 %1755 to i64*
  store i64 %1753, i64* %1756, align 8
  store i64 %1755, i64* %6, align 8
  store i64 %1752, i64* %3, align 8
  %call2_40503d = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1752, %struct.Memory* %MEMORY.28)
  %1757 = load i64, i64* %RBP.i, align 8
  %1758 = add i64 %1757, -10924
  %1759 = load i32, i32* %EAX.i3678, align 4
  %1760 = load i64, i64* %3, align 8
  %1761 = add i64 %1760, 6
  store i64 %1761, i64* %3, align 8
  %1762 = inttoptr i64 %1758 to i32*
  store i32 %1759, i32* %1762, align 4
  %1763 = load i64, i64* %RBP.i, align 8
  %1764 = add i64 %1763, -8088
  %1765 = load i64, i64* %3, align 8
  %1766 = add i64 %1765, 6
  store i64 %1766, i64* %3, align 8
  %1767 = inttoptr i64 %1764 to i32*
  %1768 = load i32, i32* %1767, align 4
  %1769 = add i32 %1768, 1
  %1770 = zext i32 %1769 to i64
  store i64 %1770, i64* %RAX.i2528, align 8
  %1771 = icmp eq i32 %1768, -1
  %1772 = icmp eq i32 %1769, 0
  %1773 = or i1 %1771, %1772
  %1774 = zext i1 %1773 to i8
  store i8 %1774, i8* %14, align 1
  %1775 = and i32 %1769, 255
  %1776 = tail call i32 @llvm.ctpop.i32(i32 %1775)
  %1777 = trunc i32 %1776 to i8
  %1778 = and i8 %1777, 1
  %1779 = xor i8 %1778, 1
  store i8 %1779, i8* %21, align 1
  %1780 = xor i32 %1769, %1768
  %1781 = lshr i32 %1780, 4
  %1782 = trunc i32 %1781 to i8
  %1783 = and i8 %1782, 1
  store i8 %1783, i8* %27, align 1
  %1784 = zext i1 %1772 to i8
  store i8 %1784, i8* %30, align 1
  %1785 = lshr i32 %1769, 31
  %1786 = trunc i32 %1785 to i8
  store i8 %1786, i8* %33, align 1
  %1787 = lshr i32 %1768, 31
  %1788 = xor i32 %1785, %1787
  %1789 = add nuw nsw i32 %1788, %1785
  %1790 = icmp eq i32 %1789, 2
  %1791 = zext i1 %1790 to i8
  store i8 %1791, i8* %39, align 1
  %1792 = add i64 %1765, 15
  store i64 %1792, i64* %3, align 8
  store i32 %1769, i32* %1767, align 4
  %1793 = load i64, i64* %3, align 8
  %1794 = add i64 %1793, -504
  store i64 %1794, i64* %3, align 8
  br label %block_.L_404e5f

block_.L_40505c:                                  ; preds = %block_.L_404e5f
  store i64 ptrtoint (%G__0x579dd7_type* @G__0x579dd7 to i64), i64* %RDI.i3360, align 8
  %1795 = add i64 %1364, -8056
  %1796 = add i64 %1397, 16
  store i64 %1796, i64* %3, align 8
  %1797 = inttoptr i64 %1795 to i32*
  %1798 = load i32, i32* %1797, align 4
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RSI.i3375, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1800 = add i64 %1397, 314708
  %1801 = add i64 %1397, 23
  %1802 = load i64, i64* %6, align 8
  %1803 = add i64 %1802, -8
  %1804 = inttoptr i64 %1803 to i64*
  store i64 %1801, i64* %1804, align 8
  store i64 %1803, i64* %6, align 8
  store i64 %1800, i64* %3, align 8
  %call2_40506e = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1800, %struct.Memory* %MEMORY.27)
  %1805 = load i64, i64* %RBP.i, align 8
  %1806 = add i64 %1805, -8056
  %1807 = load i64, i64* %3, align 8
  %1808 = add i64 %1807, 7
  store i64 %1808, i64* %3, align 8
  %1809 = inttoptr i64 %1806 to i32*
  %1810 = load i32, i32* %1809, align 4
  store i8 0, i8* %14, align 1
  %1811 = and i32 %1810, 255
  %1812 = tail call i32 @llvm.ctpop.i32(i32 %1811)
  %1813 = trunc i32 %1812 to i8
  %1814 = and i8 %1813, 1
  %1815 = xor i8 %1814, 1
  store i8 %1815, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1816 = icmp eq i32 %1810, 0
  %1817 = zext i1 %1816 to i8
  store i8 %1817, i8* %30, align 1
  %1818 = lshr i32 %1810, 31
  %1819 = trunc i32 %1818 to i8
  store i8 %1819, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1820 = add i64 %1805, -10928
  %1821 = load i32, i32* %EAX.i3678, align 4
  %1822 = add i64 %1807, 13
  store i64 %1822, i64* %3, align 8
  %1823 = inttoptr i64 %1820 to i32*
  store i32 %1821, i32* %1823, align 4
  %1824 = load i64, i64* %3, align 8
  %1825 = load i8, i8* %30, align 1
  %1826 = icmp ne i8 %1825, 0
  %.v828 = select i1 %1826, i64 48, i64 6
  %1827 = add i64 %1824, %.v828
  %cmpBr_405080 = icmp eq i8 %1825, 1
  %1828 = add i64 %1827, 10
  store i64 %1828, i64* %3, align 8
  br i1 %cmpBr_405080, label %block_.L_4050b0, label %block_405086

block_405086:                                     ; preds = %block_.L_40505c
  store i64 ptrtoint (%G__0x579dec_type* @G__0x579dec to i64), i64* %RDI.i3360, align 8
  %1829 = load i64, i64* %RBP.i, align 8
  %1830 = add i64 %1829, -8056
  %1831 = add i64 %1827, 17
  store i64 %1831, i64* %3, align 8
  %1832 = inttoptr i64 %1830 to i32*
  %1833 = load i32, i32* %1832, align 4
  %1834 = sext i32 %1833 to i64
  store i64 %1834, i64* %RAX.i2528, align 8
  %1835 = shl nsw i64 %1834, 2
  %1836 = add i64 %1829, -1648
  %1837 = add i64 %1836, %1835
  %1838 = add i64 %1827, 24
  store i64 %1838, i64* %3, align 8
  %1839 = inttoptr i64 %1837 to i32*
  %1840 = load i32, i32* %1839, align 4
  %1841 = zext i32 %1840 to i64
  store i64 %1841, i64* %RSI.i3375, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1842 = add i64 %1827, 314666
  %1843 = add i64 %1827, 31
  %1844 = load i64, i64* %6, align 8
  %1845 = add i64 %1844, -8
  %1846 = inttoptr i64 %1845 to i64*
  store i64 %1843, i64* %1846, align 8
  store i64 %1845, i64* %6, align 8
  store i64 %1842, i64* %3, align 8
  %call2_4050a0 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1842, %struct.Memory* %call2_40506e)
  %1847 = load i64, i64* %RBP.i, align 8
  %1848 = add i64 %1847, -10932
  %1849 = load i32, i32* %EAX.i3678, align 4
  %1850 = load i64, i64* %3, align 8
  %1851 = add i64 %1850, 6
  store i64 %1851, i64* %3, align 8
  %1852 = inttoptr i64 %1848 to i32*
  store i32 %1849, i32* %1852, align 4
  %1853 = load i64, i64* %3, align 8
  %1854 = add i64 %1853, 28
  store i64 %1854, i64* %3, align 8
  br label %block_.L_4050c7

block_.L_4050b0:                                  ; preds = %block_.L_40505c
  store i64 ptrtoint (%G__0x586073_type* @G__0x586073 to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1855 = add i64 %1827, 314624
  %1856 = add i64 %1827, 17
  %1857 = load i64, i64* %6, align 8
  %1858 = add i64 %1857, -8
  %1859 = inttoptr i64 %1858 to i64*
  store i64 %1856, i64* %1859, align 8
  store i64 %1858, i64* %6, align 8
  store i64 %1855, i64* %3, align 8
  %call2_4050bc = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1855, %struct.Memory* %call2_40506e)
  %1860 = load i64, i64* %RBP.i, align 8
  %1861 = add i64 %1860, -10936
  %1862 = load i32, i32* %EAX.i3678, align 4
  %1863 = load i64, i64* %3, align 8
  %1864 = add i64 %1863, 6
  store i64 %1864, i64* %3, align 8
  %1865 = inttoptr i64 %1861 to i32*
  store i32 %1862, i32* %1865, align 4
  %.pre372 = load i64, i64* %3, align 8
  br label %block_.L_4050c7

block_.L_4050c7:                                  ; preds = %block_.L_4050b0, %block_405086
  %1866 = phi i64 [ %.pre372, %block_.L_4050b0 ], [ %1854, %block_405086 ]
  %MEMORY.35 = phi %struct.Memory* [ %call2_4050bc, %block_.L_4050b0 ], [ %call2_4050a0, %block_405086 ]
  store i64 ptrtoint (%G__0x579dfb_type* @G__0x579dfb to i64), i64* %RDI.i3360, align 8
  %1867 = load i64, i64* %RBP.i, align 8
  %1868 = add i64 %1867, -8060
  %1869 = add i64 %1866, 16
  store i64 %1869, i64* %3, align 8
  %1870 = inttoptr i64 %1868 to i32*
  %1871 = load i32, i32* %1870, align 4
  %1872 = zext i32 %1871 to i64
  store i64 %1872, i64* %RSI.i3375, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1873 = add i64 %1866, 314601
  %1874 = add i64 %1866, 23
  %1875 = load i64, i64* %6, align 8
  %1876 = add i64 %1875, -8
  %1877 = inttoptr i64 %1876 to i64*
  store i64 %1874, i64* %1877, align 8
  store i64 %1876, i64* %6, align 8
  store i64 %1873, i64* %3, align 8
  %call2_4050d9 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1873, %struct.Memory* %MEMORY.35)
  %1878 = load i64, i64* %RBP.i, align 8
  %1879 = add i64 %1878, -8060
  %1880 = load i64, i64* %3, align 8
  %1881 = add i64 %1880, 7
  store i64 %1881, i64* %3, align 8
  %1882 = inttoptr i64 %1879 to i32*
  %1883 = load i32, i32* %1882, align 4
  store i8 0, i8* %14, align 1
  %1884 = and i32 %1883, 255
  %1885 = tail call i32 @llvm.ctpop.i32(i32 %1884)
  %1886 = trunc i32 %1885 to i8
  %1887 = and i8 %1886, 1
  %1888 = xor i8 %1887, 1
  store i8 %1888, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1889 = icmp eq i32 %1883, 0
  %1890 = zext i1 %1889 to i8
  store i8 %1890, i8* %30, align 1
  %1891 = lshr i32 %1883, 31
  %1892 = trunc i32 %1891 to i8
  store i8 %1892, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1893 = add i64 %1878, -10940
  %1894 = load i32, i32* %EAX.i3678, align 4
  %1895 = add i64 %1880, 13
  store i64 %1895, i64* %3, align 8
  %1896 = inttoptr i64 %1893 to i32*
  store i32 %1894, i32* %1896, align 4
  %1897 = load i64, i64* %3, align 8
  %1898 = load i8, i8* %30, align 1
  %1899 = icmp ne i8 %1898, 0
  %.v829 = select i1 %1899, i64 48, i64 6
  %1900 = add i64 %1897, %.v829
  %cmpBr_4050eb = icmp eq i8 %1898, 1
  %1901 = add i64 %1900, 10
  store i64 %1901, i64* %3, align 8
  br i1 %cmpBr_4050eb, label %block_.L_40511b, label %block_4050f1

block_4050f1:                                     ; preds = %block_.L_4050c7
  store i64 ptrtoint (%G__0x579dec_type* @G__0x579dec to i64), i64* %RDI.i3360, align 8
  %1902 = load i64, i64* %RBP.i, align 8
  %1903 = add i64 %1902, -8060
  %1904 = add i64 %1900, 17
  store i64 %1904, i64* %3, align 8
  %1905 = inttoptr i64 %1903 to i32*
  %1906 = load i32, i32* %1905, align 4
  %1907 = sext i32 %1906 to i64
  store i64 %1907, i64* %RAX.i2528, align 8
  %1908 = shl nsw i64 %1907, 2
  %1909 = add i64 %1902, -1648
  %1910 = add i64 %1909, %1908
  %1911 = add i64 %1900, 24
  store i64 %1911, i64* %3, align 8
  %1912 = inttoptr i64 %1910 to i32*
  %1913 = load i32, i32* %1912, align 4
  %1914 = zext i32 %1913 to i64
  store i64 %1914, i64* %RSI.i3375, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1915 = add i64 %1900, 314559
  %1916 = add i64 %1900, 31
  %1917 = load i64, i64* %6, align 8
  %1918 = add i64 %1917, -8
  %1919 = inttoptr i64 %1918 to i64*
  store i64 %1916, i64* %1919, align 8
  store i64 %1918, i64* %6, align 8
  store i64 %1915, i64* %3, align 8
  %call2_40510b = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1915, %struct.Memory* %call2_4050d9)
  %1920 = load i64, i64* %RBP.i, align 8
  %1921 = add i64 %1920, -10944
  %1922 = load i32, i32* %EAX.i3678, align 4
  %1923 = load i64, i64* %3, align 8
  %1924 = add i64 %1923, 6
  store i64 %1924, i64* %3, align 8
  %1925 = inttoptr i64 %1921 to i32*
  store i32 %1922, i32* %1925, align 4
  %1926 = load i64, i64* %3, align 8
  %1927 = add i64 %1926, 28
  store i64 %1927, i64* %3, align 8
  br label %block_.L_405132

block_.L_40511b:                                  ; preds = %block_.L_4050c7
  store i64 ptrtoint (%G__0x586073_type* @G__0x586073 to i64), i64* %RDI.i3360, align 8
  store i8 0, i8* %AL.i3263, align 1
  %1928 = add i64 %1900, 314517
  %1929 = add i64 %1900, 17
  %1930 = load i64, i64* %6, align 8
  %1931 = add i64 %1930, -8
  %1932 = inttoptr i64 %1931 to i64*
  store i64 %1929, i64* %1932, align 8
  store i64 %1931, i64* %6, align 8
  store i64 %1928, i64* %3, align 8
  %call2_405127 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1928, %struct.Memory* %call2_4050d9)
  %1933 = load i64, i64* %RBP.i, align 8
  %1934 = add i64 %1933, -10948
  %1935 = load i32, i32* %EAX.i3678, align 4
  %1936 = load i64, i64* %3, align 8
  %1937 = add i64 %1936, 6
  store i64 %1937, i64* %3, align 8
  %1938 = inttoptr i64 %1934 to i32*
  store i32 %1935, i32* %1938, align 4
  %.pre373 = load i64, i64* %3, align 8
  br label %block_.L_405132

block_.L_405132:                                  ; preds = %block_.L_40511b, %block_4050f1
  %1939 = phi i64 [ %.pre373, %block_.L_40511b ], [ %1927, %block_4050f1 ]
  %MEMORY.36 = phi %struct.Memory* [ %call2_405127, %block_.L_40511b ], [ %call2_40510b, %block_4050f1 ]
  %1940 = add i64 %1939, 5
  store i64 %1940, i64* %3, align 8
  %.pre377 = load i64, i64* %RBP.i, align 8
  br label %block_.L_405137

block_.L_405137:                                  ; preds = %block_.L_404e40.block_.L_405137_crit_edge, %block_.L_405132
  %RSI.i3112.pre-phi = phi i64* [ %.pre492, %block_.L_404e40.block_.L_405137_crit_edge ], [ %RSI.i3375, %block_.L_405132 ]
  %1941 = phi i64 [ %1359, %block_.L_404e40.block_.L_405137_crit_edge ], [ %1940, %block_.L_405132 ]
  %1942 = phi i64 [ %1351, %block_.L_404e40.block_.L_405137_crit_edge ], [ %.pre377, %block_.L_405132 ]
  %MEMORY.37 = phi %struct.Memory* [ %call2_404a15, %block_.L_404e40.block_.L_405137_crit_edge ], [ %MEMORY.36, %block_.L_405132 ]
  %1943 = add i64 %1942, -8080
  %1944 = add i64 %1941, 10
  store i64 %1944, i64* %3, align 8
  %1945 = inttoptr i64 %1943 to i32*
  store i32 0, i32* %1945, align 4
  %1946 = load i64, i64* %RBP.i, align 8
  %1947 = add i64 %1946, -8076
  %1948 = load i64, i64* %3, align 8
  %1949 = add i64 %1948, 10
  store i64 %1949, i64* %3, align 8
  %1950 = inttoptr i64 %1947 to i32*
  store i32 5, i32* %1950, align 4
  %1951 = load i64, i64* %RBP.i, align 8
  %1952 = add i64 %1951, -8072
  %1953 = load i64, i64* %3, align 8
  %1954 = add i64 %1953, 10
  store i64 %1954, i64* %3, align 8
  %1955 = inttoptr i64 %1952 to i32*
  store i32 21, i32* %1955, align 4
  %EDX.i3077 = bitcast %union.anon* %55 to i32*
  %1956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %1958 = bitcast [32 x %union.VectorReg]* %1957 to i8*
  %1959 = bitcast [32 x %union.VectorReg]* %1957 to float*
  %1960 = bitcast [32 x %union.VectorReg]* %1957 to i32*
  %1961 = getelementptr inbounds i8, i8* %1958, i64 4
  %1962 = bitcast i8* %1961 to float*
  %1963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1964 = bitcast i64* %1963 to float*
  %1965 = getelementptr inbounds i8, i8* %1958, i64 12
  %1966 = bitcast i8* %1965 to float*
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %1968 = bitcast %union.VectorReg* %1967 to i8*
  %1969 = bitcast %union.VectorReg* %1967 to float*
  %1970 = bitcast %union.VectorReg* %1967 to i32*
  %1971 = getelementptr inbounds i8, i8* %1968, i64 4
  %1972 = bitcast i8* %1971 to float*
  %1973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %1974 = bitcast i64* %1973 to float*
  %1975 = getelementptr inbounds i8, i8* %1968, i64 12
  %1976 = bitcast i8* %1975 to float*
  %1977 = bitcast %union.VectorReg* %1967 to <2 x float>*
  %1978 = bitcast i64* %1973 to <2 x i32>*
  %1979 = bitcast i8* %1971 to i32*
  %1980 = bitcast i64* %1973 to i32*
  %1981 = bitcast i8* %1975 to i32*
  %1982 = bitcast [32 x %union.VectorReg]* %1957 to <2 x float>*
  %1983 = bitcast i64* %1963 to <2 x i32>*
  %1984 = bitcast i8* %1961 to i32*
  %1985 = bitcast i64* %1963 to i32*
  %1986 = bitcast i8* %1965 to i32*
  %.pre378 = load i64, i64* %3, align 8
  br label %block_.L_405155

block_.L_405155:                                  ; preds = %block_.L_40541a, %block_.L_405137
  %1987 = phi i64 [ %.pre378, %block_.L_405137 ], [ %3154, %block_.L_40541a ]
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.37, %block_.L_405137 ], [ %MEMORY.45, %block_.L_40541a ]
  %1988 = load i64, i64* %RBP.i, align 8
  %1989 = add i64 %1988, -8072
  %1990 = add i64 %1987, 10
  store i64 %1990, i64* %3, align 8
  %1991 = inttoptr i64 %1989 to i32*
  %1992 = load i32, i32* %1991, align 4
  %1993 = add i32 %1992, -400
  %1994 = icmp ult i32 %1992, 400
  %1995 = zext i1 %1994 to i8
  store i8 %1995, i8* %14, align 1
  %1996 = and i32 %1993, 255
  %1997 = tail call i32 @llvm.ctpop.i32(i32 %1996)
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  store i8 %2000, i8* %21, align 1
  %2001 = xor i32 %1992, 16
  %2002 = xor i32 %2001, %1993
  %2003 = lshr i32 %2002, 4
  %2004 = trunc i32 %2003 to i8
  %2005 = and i8 %2004, 1
  store i8 %2005, i8* %27, align 1
  %2006 = icmp eq i32 %1993, 0
  %2007 = zext i1 %2006 to i8
  store i8 %2007, i8* %30, align 1
  %2008 = lshr i32 %1993, 31
  %2009 = trunc i32 %2008 to i8
  store i8 %2009, i8* %33, align 1
  %2010 = lshr i32 %1992, 31
  %2011 = xor i32 %2008, %2010
  %2012 = add nuw nsw i32 %2011, %2010
  %2013 = icmp eq i32 %2012, 2
  %2014 = zext i1 %2013 to i8
  store i8 %2014, i8* %39, align 1
  %2015 = icmp ne i8 %2009, 0
  %2016 = xor i1 %2015, %2013
  %.v526 = select i1 %2016, i64 16, i64 729
  %2017 = add i64 %1987, %.v526
  store i64 %2017, i64* %3, align 8
  br i1 %2016, label %block_405165, label %block_.L_40542e

block_405165:                                     ; preds = %block_.L_405155
  %2018 = add i64 %2017, 7
  store i64 %2018, i64* %3, align 8
  %2019 = load i32, i32* %1991, align 4
  %2020 = sext i32 %2019 to i64
  store i64 %2020, i64* %RAX.i2528, align 8
  %2021 = add nsw i64 %2020, 12099168
  %2022 = add i64 %2017, 15
  store i64 %2022, i64* %3, align 8
  %2023 = inttoptr i64 %2021 to i8*
  %2024 = load i8, i8* %2023, align 1
  %2025 = zext i8 %2024 to i64
  store i64 %2025, i64* %RCX.i3786, align 8
  %2026 = zext i8 %2024 to i32
  store i8 0, i8* %14, align 1
  %2027 = tail call i32 @llvm.ctpop.i32(i32 %2026)
  %2028 = trunc i32 %2027 to i8
  %2029 = and i8 %2028, 1
  %2030 = xor i8 %2029, 1
  store i8 %2030, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2031 = icmp eq i8 %2024, 0
  %2032 = zext i1 %2031 to i8
  store i8 %2032, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v682 = select i1 %2031, i64 24, i64 45
  %2033 = add i64 %2017, %.v682
  store i64 %2033, i64* %3, align 8
  br i1 %2031, label %block_40517d, label %block_.L_40541a

block_40517d:                                     ; preds = %block_405165
  %2034 = add i64 %2033, 7
  store i64 %2034, i64* %3, align 8
  %2035 = load i32, i32* %1991, align 4
  %2036 = sext i32 %2035 to i64
  store i64 %2036, i64* %RAX.i2528, align 8
  %2037 = shl nsw i64 %2036, 2
  %2038 = add i64 %1988, -1648
  %2039 = add i64 %2038, %2037
  %2040 = add i64 %2033, 15
  store i64 %2040, i64* %3, align 8
  %2041 = inttoptr i64 %2039 to i32*
  %2042 = load i32, i32* %2041, align 4
  store i8 0, i8* %14, align 1
  %2043 = and i32 %2042, 255
  %2044 = tail call i32 @llvm.ctpop.i32(i32 %2043)
  %2045 = trunc i32 %2044 to i8
  %2046 = and i8 %2045, 1
  %2047 = xor i8 %2046, 1
  store i8 %2047, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2048 = icmp eq i32 %2042, 0
  %2049 = zext i1 %2048 to i8
  store i8 %2049, i8* %30, align 1
  %2050 = lshr i32 %2042, 31
  %2051 = trunc i32 %2050 to i8
  store i8 %2051, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v683 = select i1 %2048, i64 21, i64 26
  %2052 = add i64 %2033, %.v683
  store i64 %2052, i64* %3, align 8
  br i1 %2048, label %block_.L_40541a, label %block_.L_405197

block_.L_405197:                                  ; preds = %block_40517d
  store i64 3, i64* %RDX.i3821, align 8
  %2053 = zext i32 %2035 to i64
  %2054 = xor i64 %2053, %2036
  %2055 = trunc i64 %2054 to i32
  %2056 = and i64 %2054, 4294967295
  store i64 %2056, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  %2057 = and i32 %2055, 255
  %2058 = tail call i32 @llvm.ctpop.i32(i32 %2057)
  %2059 = trunc i32 %2058 to i8
  %2060 = and i8 %2059, 1
  %2061 = xor i8 %2060, 1
  store i8 %2061, i8* %21, align 1
  %2062 = icmp eq i32 %2055, 0
  %2063 = zext i1 %2062 to i8
  store i8 %2063, i8* %30, align 1
  %2064 = lshr i32 %2055, 31
  %2065 = trunc i32 %2064 to i8
  store i8 %2065, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %2066 = and i64 %2054, 4294967295
  store i64 %2066, i64* %RCX.i3786, align 8
  %2067 = add i64 %2052, 15
  store i64 %2067, i64* %3, align 8
  %2068 = load i32, i32* %1991, align 4
  %2069 = zext i32 %2068 to i64
  store i64 %2069, i64* %RDI.i3360, align 8
  %2070 = add i64 %1988, -20
  %2071 = add i64 %2052, 18
  store i64 %2071, i64* %3, align 8
  %2072 = inttoptr i64 %2070 to i32*
  %2073 = load i32, i32* %2072, align 4
  %2074 = zext i32 %2073 to i64
  store i64 %2074, i64* %RSI.i3112.pre-phi, align 8
  %2075 = add i64 %2052, 50201
  %2076 = add i64 %2052, 23
  %2077 = load i64, i64* %6, align 8
  %2078 = add i64 %2077, -8
  %2079 = inttoptr i64 %2078 to i64*
  store i64 %2076, i64* %2079, align 8
  store i64 %2078, i64* %6, align 8
  store i64 %2075, i64* %3, align 8
  %call2_4051a9 = tail call %struct.Memory* @sub_4115b0.approxlib(%struct.State* nonnull %0, i64 %2075, %struct.Memory* %MEMORY.38)
  %2080 = load i64, i64* %RBP.i, align 8
  %2081 = add i64 %2080, -8096
  %2082 = load i32, i32* %EAX.i3678, align 4
  %2083 = load i64, i64* %3, align 8
  %2084 = add i64 %2083, 6
  store i64 %2084, i64* %3, align 8
  %2085 = inttoptr i64 %2081 to i32*
  store i32 %2082, i32* %2085, align 4
  %2086 = load i64, i64* %RBP.i, align 8
  %2087 = add i64 %2086, -8096
  %2088 = load i64, i64* %3, align 8
  %2089 = add i64 %2088, 7
  store i64 %2089, i64* %3, align 8
  %2090 = inttoptr i64 %2087 to i32*
  %2091 = load i32, i32* %2090, align 4
  %2092 = add i32 %2091, -3
  %2093 = icmp ult i32 %2091, 3
  %2094 = zext i1 %2093 to i8
  store i8 %2094, i8* %14, align 1
  %2095 = and i32 %2092, 255
  %2096 = tail call i32 @llvm.ctpop.i32(i32 %2095)
  %2097 = trunc i32 %2096 to i8
  %2098 = and i8 %2097, 1
  %2099 = xor i8 %2098, 1
  store i8 %2099, i8* %21, align 1
  %2100 = xor i32 %2092, %2091
  %2101 = lshr i32 %2100, 4
  %2102 = trunc i32 %2101 to i8
  %2103 = and i8 %2102, 1
  store i8 %2103, i8* %27, align 1
  %2104 = icmp eq i32 %2092, 0
  %2105 = zext i1 %2104 to i8
  store i8 %2105, i8* %30, align 1
  %2106 = lshr i32 %2092, 31
  %2107 = trunc i32 %2106 to i8
  store i8 %2107, i8* %33, align 1
  %2108 = lshr i32 %2091, 31
  %2109 = xor i32 %2106, %2108
  %2110 = add nuw nsw i32 %2109, %2108
  %2111 = icmp eq i32 %2110, 2
  %2112 = zext i1 %2111 to i8
  store i8 %2112, i8* %39, align 1
  %2113 = icmp ne i8 %2107, 0
  %2114 = xor i1 %2113, %2111
  %.v684 = select i1 %2114, i64 13, i64 18
  %2115 = add i64 %2088, %.v684
  store i64 %2115, i64* %3, align 8
  br i1 %2114, label %block_.L_40541a, label %block_.L_4051c6

block_.L_4051c6:                                  ; preds = %block_.L_405197
  %2116 = add i64 %2086, -8072
  %2117 = add i64 %2115, 6
  store i64 %2117, i64* %3, align 8
  %2118 = inttoptr i64 %2116 to i32*
  %2119 = load i32, i32* %2118, align 4
  %2120 = zext i32 %2119 to i64
  store i64 %2120, i64* %RDI.i3360, align 8
  %2121 = add i64 %2086, -44
  %2122 = add i64 %2115, 9
  store i64 %2122, i64* %3, align 8
  %2123 = inttoptr i64 %2121 to i32*
  %2124 = load i32, i32* %2123, align 4
  %2125 = zext i32 %2124 to i64
  store i64 %2125, i64* %RSI.i3112.pre-phi, align 8
  %2126 = add i64 %2115, 61658
  %2127 = add i64 %2115, 14
  %2128 = load i64, i64* %6, align 8
  %2129 = add i64 %2128, -8
  %2130 = inttoptr i64 %2129 to i64*
  store i64 %2127, i64* %2130, align 8
  store i64 %2129, i64* %6, align 8
  store i64 %2126, i64* %3, align 8
  %call2_4051cf = tail call %struct.Memory* @sub_4142a0.is_self_atari(%struct.State* nonnull %0, i64 %2126, %struct.Memory* %MEMORY.38)
  %2131 = load i32, i32* %EAX.i3678, align 4
  %2132 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %2133 = and i32 %2131, 255
  %2134 = tail call i32 @llvm.ctpop.i32(i32 %2133)
  %2135 = trunc i32 %2134 to i8
  %2136 = and i8 %2135, 1
  %2137 = xor i8 %2136, 1
  store i8 %2137, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2138 = icmp eq i32 %2131, 0
  %2139 = zext i1 %2138 to i8
  store i8 %2139, i8* %30, align 1
  %2140 = lshr i32 %2131, 31
  %2141 = trunc i32 %2140 to i8
  store i8 %2141, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v685 = select i1 %2138, i64 14, i64 9
  %2142 = add i64 %2132, %.v685
  store i64 %2142, i64* %3, align 8
  %2143 = load i64, i64* %RBP.i, align 8
  br i1 %2138, label %block_.L_4051e2, label %block_.L_40541a

block_.L_4051e2:                                  ; preds = %block_.L_4051c6
  %2144 = add i64 %2143, -40
  %2145 = add i64 %2142, 7
  store i64 %2145, i64* %3, align 8
  %2146 = inttoptr i64 %2144 to i32*
  store i32 0, i32* %2146, align 4
  %.pre469 = load i64, i64* %3, align 8
  br label %block_.L_4051e9

block_.L_4051e9:                                  ; preds = %block_.L_405402, %block_.L_4051e2
  %2147 = phi i64 [ %.pre469, %block_.L_4051e2 ], [ %3121, %block_.L_405402 ]
  %MEMORY.40 = phi %struct.Memory* [ %MEMORY.38, %block_.L_4051e2 ], [ %MEMORY.44, %block_.L_405402 ]
  %2148 = load i64, i64* %RBP.i, align 8
  %2149 = add i64 %2148, -40
  %2150 = add i64 %2147, 4
  store i64 %2150, i64* %3, align 8
  %2151 = inttoptr i64 %2149 to i32*
  %2152 = load i32, i32* %2151, align 4
  %2153 = add i32 %2152, -4
  %2154 = icmp ult i32 %2152, 4
  %2155 = zext i1 %2154 to i8
  store i8 %2155, i8* %14, align 1
  %2156 = and i32 %2153, 255
  %2157 = tail call i32 @llvm.ctpop.i32(i32 %2156)
  %2158 = trunc i32 %2157 to i8
  %2159 = and i8 %2158, 1
  %2160 = xor i8 %2159, 1
  store i8 %2160, i8* %21, align 1
  %2161 = xor i32 %2153, %2152
  %2162 = lshr i32 %2161, 4
  %2163 = trunc i32 %2162 to i8
  %2164 = and i8 %2163, 1
  store i8 %2164, i8* %27, align 1
  %2165 = icmp eq i32 %2153, 0
  %2166 = zext i1 %2165 to i8
  store i8 %2166, i8* %30, align 1
  %2167 = lshr i32 %2153, 31
  %2168 = trunc i32 %2167 to i8
  store i8 %2168, i8* %33, align 1
  %2169 = lshr i32 %2152, 31
  %2170 = xor i32 %2167, %2169
  %2171 = add nuw nsw i32 %2170, %2169
  %2172 = icmp eq i32 %2171, 2
  %2173 = zext i1 %2172 to i8
  store i8 %2173, i8* %39, align 1
  %2174 = icmp ne i8 %2168, 0
  %2175 = xor i1 %2174, %2172
  %.v686 = select i1 %2175, i64 10, i64 556
  %2176 = add i64 %2147, %.v686
  store i64 %2176, i64* %3, align 8
  br i1 %2175, label %block_4051f3, label %block_.L_40541a.loopexit

block_4051f3:                                     ; preds = %block_.L_4051e9
  store i64 4, i64* %RAX.i2528, align 8
  %2177 = add i64 %2176, 9
  store i64 %2177, i64* %3, align 8
  %2178 = load i32, i32* %2151, align 4
  %2179 = sext i32 %2178 to i64
  store i64 %2179, i64* %RCX.i3786, align 8
  %2180 = shl nsw i64 %2179, 2
  %2181 = add nsw i64 %2180, 8053168
  %2182 = add i64 %2176, 16
  store i64 %2182, i64* %3, align 8
  %2183 = inttoptr i64 %2181 to i32*
  %2184 = load i32, i32* %2183, align 4
  %2185 = zext i32 %2184 to i64
  store i64 %2185, i64* %RDX.i3821, align 8
  %2186 = add i64 %2148, -8100
  %2187 = add i64 %2176, 22
  store i64 %2187, i64* %3, align 8
  %2188 = inttoptr i64 %2186 to i32*
  store i32 %2184, i32* %2188, align 4
  %2189 = load i64, i64* %RBP.i, align 8
  %2190 = add i64 %2189, -40
  %2191 = load i64, i64* %3, align 8
  %2192 = add i64 %2191, 3
  store i64 %2192, i64* %3, align 8
  %2193 = inttoptr i64 %2190 to i32*
  %2194 = load i32, i32* %2193, align 4
  %2195 = add i32 %2194, 1
  %2196 = zext i32 %2195 to i64
  store i64 %2196, i64* %RDX.i3821, align 8
  %2197 = icmp eq i32 %2194, -1
  %2198 = icmp eq i32 %2195, 0
  %2199 = or i1 %2197, %2198
  %2200 = zext i1 %2199 to i8
  store i8 %2200, i8* %14, align 1
  %2201 = and i32 %2195, 255
  %2202 = tail call i32 @llvm.ctpop.i32(i32 %2201)
  %2203 = trunc i32 %2202 to i8
  %2204 = and i8 %2203, 1
  %2205 = xor i8 %2204, 1
  store i8 %2205, i8* %21, align 1
  %2206 = xor i32 %2195, %2194
  %2207 = lshr i32 %2206, 4
  %2208 = trunc i32 %2207 to i8
  %2209 = and i8 %2208, 1
  store i8 %2209, i8* %27, align 1
  %2210 = zext i1 %2198 to i8
  store i8 %2210, i8* %30, align 1
  %2211 = lshr i32 %2195, 31
  %2212 = trunc i32 %2211 to i8
  store i8 %2212, i8* %33, align 1
  %2213 = lshr i32 %2194, 31
  %2214 = xor i32 %2211, %2213
  %2215 = add nuw nsw i32 %2214, %2211
  %2216 = icmp eq i32 %2215, 2
  %2217 = zext i1 %2216 to i8
  store i8 %2217, i8* %39, align 1
  %2218 = add i64 %2189, -10952
  %2219 = load i32, i32* %EAX.i3678, align 4
  %2220 = add i64 %2191, 12
  store i64 %2220, i64* %3, align 8
  %2221 = inttoptr i64 %2218 to i32*
  store i32 %2219, i32* %2221, align 4
  %2222 = load i32, i32* %EDX.i3077, align 4
  %2223 = zext i32 %2222 to i64
  %2224 = load i64, i64* %3, align 8
  store i64 %2223, i64* %RAX.i2528, align 8
  %2225 = sext i32 %2222 to i64
  %2226 = lshr i64 %2225, 32
  store i64 %2226, i64* %1956, align 8
  %2227 = load i64, i64* %RBP.i, align 8
  %2228 = add i64 %2227, -10952
  %2229 = add i64 %2224, 9
  store i64 %2229, i64* %3, align 8
  %2230 = inttoptr i64 %2228 to i32*
  %2231 = load i32, i32* %2230, align 4
  %2232 = zext i32 %2231 to i64
  store i64 %2232, i64* %RSI.i3112.pre-phi, align 8
  %2233 = add i64 %2224, 11
  store i64 %2233, i64* %3, align 8
  %2234 = sext i32 %2231 to i64
  %2235 = shl nuw i64 %2226, 32
  %2236 = or i64 %2235, %2223
  %2237 = sdiv i64 %2236, %2234
  %2238 = shl i64 %2237, 32
  %2239 = ashr exact i64 %2238, 32
  %2240 = icmp eq i64 %2237, %2239
  br i1 %2240, label %2243, label %2241

; <label>:2241:                                   ; preds = %block_4051f3
  %2242 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2233, %struct.Memory* %MEMORY.40)
  %.pre470 = load i32, i32* %EDX.i3077, align 4
  %.pre471 = load i64, i64* %3, align 8
  %.pre472 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit3058

; <label>:2243:                                   ; preds = %block_4051f3
  %2244 = srem i64 %2236, %2234
  %2245 = and i64 %2237, 4294967295
  store i64 %2245, i64* %RAX.i2528, align 8
  %2246 = and i64 %2244, 4294967295
  store i64 %2246, i64* %RDX.i3821, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2247 = trunc i64 %2244 to i32
  br label %routine_idivl__esi.exit3058

routine_idivl__esi.exit3058:                      ; preds = %2243, %2241
  %2248 = phi i64 [ %.pre472, %2241 ], [ %2227, %2243 ]
  %2249 = phi i64 [ %.pre471, %2241 ], [ %2233, %2243 ]
  %2250 = phi i32 [ %.pre470, %2241 ], [ %2247, %2243 ]
  %2251 = phi %struct.Memory* [ %2242, %2241 ], [ %MEMORY.40, %2243 ]
  %2252 = sext i32 %2250 to i64
  store i64 %2252, i64* %RCX.i3786, align 8
  %2253 = shl nsw i64 %2252, 2
  %2254 = add nsw i64 %2253, 8053168
  %2255 = add i64 %2249, 10
  store i64 %2255, i64* %3, align 8
  %2256 = inttoptr i64 %2254 to i32*
  %2257 = load i32, i32* %2256, align 4
  %2258 = zext i32 %2257 to i64
  store i64 %2258, i64* %RDX.i3821, align 8
  %2259 = add i64 %2248, -8104
  %2260 = add i64 %2249, 16
  store i64 %2260, i64* %3, align 8
  %2261 = inttoptr i64 %2259 to i32*
  store i32 %2257, i32* %2261, align 4
  %2262 = load i64, i64* %RBP.i, align 8
  %2263 = add i64 %2262, -8072
  %2264 = load i64, i64* %3, align 8
  %2265 = add i64 %2264, 6
  store i64 %2265, i64* %3, align 8
  %2266 = inttoptr i64 %2263 to i32*
  %2267 = load i32, i32* %2266, align 4
  %2268 = zext i32 %2267 to i64
  store i64 %2268, i64* %RDX.i3821, align 8
  %2269 = add i64 %2262, -8100
  %2270 = add i64 %2264, 12
  store i64 %2270, i64* %3, align 8
  %2271 = inttoptr i64 %2269 to i32*
  %2272 = load i32, i32* %2271, align 4
  %2273 = sub i32 %2267, %2272
  %2274 = zext i32 %2273 to i64
  store i64 %2274, i64* %RDX.i3821, align 8
  %2275 = icmp ult i32 %2267, %2272
  %2276 = zext i1 %2275 to i8
  store i8 %2276, i8* %14, align 1
  %2277 = and i32 %2273, 255
  %2278 = tail call i32 @llvm.ctpop.i32(i32 %2277)
  %2279 = trunc i32 %2278 to i8
  %2280 = and i8 %2279, 1
  %2281 = xor i8 %2280, 1
  store i8 %2281, i8* %21, align 1
  %2282 = xor i32 %2272, %2267
  %2283 = xor i32 %2282, %2273
  %2284 = lshr i32 %2283, 4
  %2285 = trunc i32 %2284 to i8
  %2286 = and i8 %2285, 1
  store i8 %2286, i8* %27, align 1
  %2287 = icmp eq i32 %2273, 0
  %2288 = zext i1 %2287 to i8
  store i8 %2288, i8* %30, align 1
  %2289 = lshr i32 %2273, 31
  %2290 = trunc i32 %2289 to i8
  store i8 %2290, i8* %33, align 1
  %2291 = lshr i32 %2267, 31
  %2292 = lshr i32 %2272, 31
  %2293 = xor i32 %2292, %2291
  %2294 = xor i32 %2289, %2291
  %2295 = add nuw nsw i32 %2294, %2293
  %2296 = icmp eq i32 %2295, 2
  %2297 = zext i1 %2296 to i8
  store i8 %2297, i8* %39, align 1
  %2298 = sext i32 %2273 to i64
  store i64 %2298, i64* %RCX.i3786, align 8
  %2299 = add nsw i64 %2298, 12099168
  %2300 = add i64 %2264, 23
  store i64 %2300, i64* %3, align 8
  %2301 = inttoptr i64 %2299 to i8*
  %2302 = load i8, i8* %2301, align 1
  %2303 = zext i8 %2302 to i64
  store i64 %2303, i64* %RDX.i3821, align 8
  %2304 = zext i8 %2302 to i32
  %2305 = add nsw i32 %2304, -3
  %2306 = icmp ult i8 %2302, 3
  %2307 = zext i1 %2306 to i8
  store i8 %2307, i8* %14, align 1
  %2308 = and i32 %2305, 255
  %2309 = tail call i32 @llvm.ctpop.i32(i32 %2308)
  %2310 = trunc i32 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = xor i8 %2311, 1
  store i8 %2312, i8* %21, align 1
  %2313 = xor i32 %2305, %2304
  %2314 = lshr i32 %2313, 4
  %2315 = trunc i32 %2314 to i8
  %2316 = and i8 %2315, 1
  store i8 %2316, i8* %27, align 1
  %2317 = icmp eq i32 %2305, 0
  %2318 = zext i1 %2317 to i8
  store i8 %2318, i8* %30, align 1
  %2319 = lshr i32 %2305, 31
  %2320 = trunc i32 %2319 to i8
  store i8 %2320, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v687 = select i1 %2317, i64 32, i64 466
  %2321 = add i64 %2264, %.v687
  store i64 %2321, i64* %3, align 8
  br i1 %2317, label %block_405250, label %block_.L_405402

block_405250:                                     ; preds = %routine_idivl__esi.exit3058
  %2322 = add i64 %2321, 6
  store i64 %2322, i64* %3, align 8
  %2323 = load i32, i32* %2266, align 4
  %2324 = zext i32 %2323 to i64
  store i64 %2324, i64* %RAX.i2528, align 8
  %2325 = add i64 %2321, 12
  store i64 %2325, i64* %3, align 8
  %2326 = load i32, i32* %2271, align 4
  %2327 = add i32 %2326, %2323
  %2328 = zext i32 %2327 to i64
  store i64 %2328, i64* %RAX.i2528, align 8
  %2329 = icmp ult i32 %2327, %2323
  %2330 = icmp ult i32 %2327, %2326
  %2331 = or i1 %2329, %2330
  %2332 = zext i1 %2331 to i8
  store i8 %2332, i8* %14, align 1
  %2333 = and i32 %2327, 255
  %2334 = tail call i32 @llvm.ctpop.i32(i32 %2333)
  %2335 = trunc i32 %2334 to i8
  %2336 = and i8 %2335, 1
  %2337 = xor i8 %2336, 1
  store i8 %2337, i8* %21, align 1
  %2338 = xor i32 %2326, %2323
  %2339 = xor i32 %2338, %2327
  %2340 = lshr i32 %2339, 4
  %2341 = trunc i32 %2340 to i8
  %2342 = and i8 %2341, 1
  store i8 %2342, i8* %27, align 1
  %2343 = icmp eq i32 %2327, 0
  %2344 = zext i1 %2343 to i8
  store i8 %2344, i8* %30, align 1
  %2345 = lshr i32 %2327, 31
  %2346 = trunc i32 %2345 to i8
  store i8 %2346, i8* %33, align 1
  %2347 = lshr i32 %2323, 31
  %2348 = lshr i32 %2326, 31
  %2349 = xor i32 %2345, %2347
  %2350 = xor i32 %2345, %2348
  %2351 = add nuw nsw i32 %2349, %2350
  %2352 = icmp eq i32 %2351, 2
  %2353 = zext i1 %2352 to i8
  store i8 %2353, i8* %39, align 1
  %2354 = sext i32 %2327 to i64
  store i64 %2354, i64* %RCX.i3786, align 8
  %2355 = add nsw i64 %2354, 12099168
  %2356 = add i64 %2321, 23
  store i64 %2356, i64* %3, align 8
  %2357 = inttoptr i64 %2355 to i8*
  %2358 = load i8, i8* %2357, align 1
  %2359 = zext i8 %2358 to i64
  store i64 %2359, i64* %RAX.i2528, align 8
  %2360 = zext i8 %2358 to i32
  %2361 = add i64 %2262, -20
  %2362 = add i64 %2321, 26
  store i64 %2362, i64* %3, align 8
  %2363 = inttoptr i64 %2361 to i32*
  %2364 = load i32, i32* %2363, align 4
  %2365 = sub i32 %2360, %2364
  %2366 = icmp ult i32 %2360, %2364
  %2367 = zext i1 %2366 to i8
  store i8 %2367, i8* %14, align 1
  %2368 = and i32 %2365, 255
  %2369 = tail call i32 @llvm.ctpop.i32(i32 %2368)
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  %2372 = xor i8 %2371, 1
  store i8 %2372, i8* %21, align 1
  %2373 = xor i32 %2364, %2360
  %2374 = xor i32 %2373, %2365
  %2375 = lshr i32 %2374, 4
  %2376 = trunc i32 %2375 to i8
  %2377 = and i8 %2376, 1
  store i8 %2377, i8* %27, align 1
  %2378 = icmp eq i32 %2365, 0
  %2379 = zext i1 %2378 to i8
  store i8 %2379, i8* %30, align 1
  %2380 = lshr i32 %2365, 31
  %2381 = trunc i32 %2380 to i8
  store i8 %2381, i8* %33, align 1
  %2382 = lshr i32 %2364, 31
  %2383 = add nuw nsw i32 %2380, %2382
  %2384 = icmp eq i32 %2383, 2
  %2385 = zext i1 %2384 to i8
  store i8 %2385, i8* %39, align 1
  %.v688 = select i1 %2378, i64 32, i64 434
  %2386 = add i64 %2321, %.v688
  store i64 %2386, i64* %3, align 8
  br i1 %2378, label %block_405270, label %block_.L_405402

block_405270:                                     ; preds = %block_405250
  %2387 = add i64 %2386, 6
  store i64 %2387, i64* %3, align 8
  %2388 = load i32, i32* %2266, align 4
  %2389 = zext i32 %2388 to i64
  store i64 %2389, i64* %RAX.i2528, align 8
  %2390 = add i64 %2386, 12
  store i64 %2390, i64* %3, align 8
  %2391 = load i32, i32* %2271, align 4
  %2392 = add i32 %2391, %2388
  %2393 = zext i32 %2392 to i64
  store i64 %2393, i64* %RAX.i2528, align 8
  %2394 = icmp ult i32 %2392, %2388
  %2395 = icmp ult i32 %2392, %2391
  %2396 = or i1 %2394, %2395
  %2397 = zext i1 %2396 to i8
  store i8 %2397, i8* %14, align 1
  %2398 = and i32 %2392, 255
  %2399 = tail call i32 @llvm.ctpop.i32(i32 %2398)
  %2400 = trunc i32 %2399 to i8
  %2401 = and i8 %2400, 1
  %2402 = xor i8 %2401, 1
  store i8 %2402, i8* %21, align 1
  %2403 = xor i32 %2391, %2388
  %2404 = xor i32 %2403, %2392
  %2405 = lshr i32 %2404, 4
  %2406 = trunc i32 %2405 to i8
  %2407 = and i8 %2406, 1
  store i8 %2407, i8* %27, align 1
  %2408 = icmp eq i32 %2392, 0
  %2409 = zext i1 %2408 to i8
  store i8 %2409, i8* %30, align 1
  %2410 = lshr i32 %2392, 31
  %2411 = trunc i32 %2410 to i8
  store i8 %2411, i8* %33, align 1
  %2412 = lshr i32 %2388, 31
  %2413 = lshr i32 %2391, 31
  %2414 = xor i32 %2410, %2412
  %2415 = xor i32 %2410, %2413
  %2416 = add nuw nsw i32 %2414, %2415
  %2417 = icmp eq i32 %2416, 2
  %2418 = zext i1 %2417 to i8
  store i8 %2418, i8* %39, align 1
  %2419 = add i64 %2262, -8104
  %2420 = add i64 %2386, 18
  store i64 %2420, i64* %3, align 8
  %2421 = inttoptr i64 %2419 to i32*
  %2422 = load i32, i32* %2421, align 4
  %2423 = add i32 %2422, %2392
  %2424 = zext i32 %2423 to i64
  store i64 %2424, i64* %RAX.i2528, align 8
  %2425 = icmp ult i32 %2423, %2392
  %2426 = icmp ult i32 %2423, %2422
  %2427 = or i1 %2425, %2426
  %2428 = zext i1 %2427 to i8
  store i8 %2428, i8* %14, align 1
  %2429 = and i32 %2423, 255
  %2430 = tail call i32 @llvm.ctpop.i32(i32 %2429)
  %2431 = trunc i32 %2430 to i8
  %2432 = and i8 %2431, 1
  %2433 = xor i8 %2432, 1
  store i8 %2433, i8* %21, align 1
  %2434 = xor i32 %2422, %2392
  %2435 = xor i32 %2434, %2423
  %2436 = lshr i32 %2435, 4
  %2437 = trunc i32 %2436 to i8
  %2438 = and i8 %2437, 1
  store i8 %2438, i8* %27, align 1
  %2439 = icmp eq i32 %2423, 0
  %2440 = zext i1 %2439 to i8
  store i8 %2440, i8* %30, align 1
  %2441 = lshr i32 %2423, 31
  %2442 = trunc i32 %2441 to i8
  store i8 %2442, i8* %33, align 1
  %2443 = lshr i32 %2422, 31
  %2444 = xor i32 %2441, %2410
  %2445 = xor i32 %2441, %2443
  %2446 = add nuw nsw i32 %2444, %2445
  %2447 = icmp eq i32 %2446, 2
  %2448 = zext i1 %2447 to i8
  store i8 %2448, i8* %39, align 1
  %2449 = sext i32 %2423 to i64
  store i64 %2449, i64* %RCX.i3786, align 8
  %2450 = add nsw i64 %2449, 12099168
  %2451 = add i64 %2386, 29
  store i64 %2451, i64* %3, align 8
  %2452 = inttoptr i64 %2450 to i8*
  %2453 = load i8, i8* %2452, align 1
  %2454 = zext i8 %2453 to i64
  store i64 %2454, i64* %RAX.i2528, align 8
  %2455 = zext i8 %2453 to i32
  %2456 = add i64 %2262, -44
  %2457 = add i64 %2386, 32
  store i64 %2457, i64* %3, align 8
  %2458 = inttoptr i64 %2456 to i32*
  %2459 = load i32, i32* %2458, align 4
  %2460 = sub i32 %2455, %2459
  %2461 = icmp ult i32 %2455, %2459
  %2462 = zext i1 %2461 to i8
  store i8 %2462, i8* %14, align 1
  %2463 = and i32 %2460, 255
  %2464 = tail call i32 @llvm.ctpop.i32(i32 %2463)
  %2465 = trunc i32 %2464 to i8
  %2466 = and i8 %2465, 1
  %2467 = xor i8 %2466, 1
  store i8 %2467, i8* %21, align 1
  %2468 = xor i32 %2459, %2455
  %2469 = xor i32 %2468, %2460
  %2470 = lshr i32 %2469, 4
  %2471 = trunc i32 %2470 to i8
  %2472 = and i8 %2471, 1
  store i8 %2472, i8* %27, align 1
  %2473 = icmp eq i32 %2460, 0
  %2474 = zext i1 %2473 to i8
  store i8 %2474, i8* %30, align 1
  %2475 = lshr i32 %2460, 31
  %2476 = trunc i32 %2475 to i8
  store i8 %2476, i8* %33, align 1
  %2477 = lshr i32 %2459, 31
  %2478 = add nuw nsw i32 %2475, %2477
  %2479 = icmp eq i32 %2478, 2
  %2480 = zext i1 %2479 to i8
  store i8 %2480, i8* %39, align 1
  %.v689 = select i1 %2473, i64 38, i64 402
  %2481 = add i64 %2386, %.v689
  store i64 %2481, i64* %3, align 8
  br i1 %2473, label %block_405296, label %block_.L_405402

block_405296:                                     ; preds = %block_405270
  %2482 = load i64, i64* %RBP.i, align 8
  %2483 = add i64 %2482, -8072
  %2484 = add i64 %2481, 6
  store i64 %2484, i64* %3, align 8
  %2485 = inttoptr i64 %2483 to i32*
  %2486 = load i32, i32* %2485, align 4
  %2487 = zext i32 %2486 to i64
  store i64 %2487, i64* %RAX.i2528, align 8
  %2488 = add i64 %2482, -8100
  %2489 = add i64 %2481, 12
  store i64 %2489, i64* %3, align 8
  %2490 = inttoptr i64 %2488 to i32*
  %2491 = load i32, i32* %2490, align 4
  %2492 = add i32 %2491, %2486
  %2493 = zext i32 %2492 to i64
  store i64 %2493, i64* %RAX.i2528, align 8
  %2494 = icmp ult i32 %2492, %2486
  %2495 = icmp ult i32 %2492, %2491
  %2496 = or i1 %2494, %2495
  %2497 = zext i1 %2496 to i8
  store i8 %2497, i8* %14, align 1
  %2498 = and i32 %2492, 255
  %2499 = tail call i32 @llvm.ctpop.i32(i32 %2498)
  %2500 = trunc i32 %2499 to i8
  %2501 = and i8 %2500, 1
  %2502 = xor i8 %2501, 1
  store i8 %2502, i8* %21, align 1
  %2503 = xor i32 %2491, %2486
  %2504 = xor i32 %2503, %2492
  %2505 = lshr i32 %2504, 4
  %2506 = trunc i32 %2505 to i8
  %2507 = and i8 %2506, 1
  store i8 %2507, i8* %27, align 1
  %2508 = icmp eq i32 %2492, 0
  %2509 = zext i1 %2508 to i8
  store i8 %2509, i8* %30, align 1
  %2510 = lshr i32 %2492, 31
  %2511 = trunc i32 %2510 to i8
  store i8 %2511, i8* %33, align 1
  %2512 = lshr i32 %2486, 31
  %2513 = lshr i32 %2491, 31
  %2514 = xor i32 %2510, %2512
  %2515 = xor i32 %2510, %2513
  %2516 = add nuw nsw i32 %2514, %2515
  %2517 = icmp eq i32 %2516, 2
  %2518 = zext i1 %2517 to i8
  store i8 %2518, i8* %39, align 1
  %2519 = add i64 %2482, -8104
  %2520 = add i64 %2481, 18
  store i64 %2520, i64* %3, align 8
  %2521 = inttoptr i64 %2519 to i32*
  %2522 = load i32, i32* %2521, align 4
  %2523 = sub i32 %2492, %2522
  %2524 = zext i32 %2523 to i64
  store i64 %2524, i64* %RAX.i2528, align 8
  %2525 = icmp ult i32 %2492, %2522
  %2526 = zext i1 %2525 to i8
  store i8 %2526, i8* %14, align 1
  %2527 = and i32 %2523, 255
  %2528 = tail call i32 @llvm.ctpop.i32(i32 %2527)
  %2529 = trunc i32 %2528 to i8
  %2530 = and i8 %2529, 1
  %2531 = xor i8 %2530, 1
  store i8 %2531, i8* %21, align 1
  %2532 = xor i32 %2522, %2492
  %2533 = xor i32 %2532, %2523
  %2534 = lshr i32 %2533, 4
  %2535 = trunc i32 %2534 to i8
  %2536 = and i8 %2535, 1
  store i8 %2536, i8* %27, align 1
  %2537 = icmp eq i32 %2523, 0
  %2538 = zext i1 %2537 to i8
  store i8 %2538, i8* %30, align 1
  %2539 = lshr i32 %2523, 31
  %2540 = trunc i32 %2539 to i8
  store i8 %2540, i8* %33, align 1
  %2541 = lshr i32 %2522, 31
  %2542 = xor i32 %2541, %2510
  %2543 = xor i32 %2539, %2510
  %2544 = add nuw nsw i32 %2543, %2542
  %2545 = icmp eq i32 %2544, 2
  %2546 = zext i1 %2545 to i8
  store i8 %2546, i8* %39, align 1
  %2547 = sext i32 %2523 to i64
  store i64 %2547, i64* %RCX.i3786, align 8
  %2548 = add nsw i64 %2547, 12099168
  %2549 = add i64 %2481, 29
  store i64 %2549, i64* %3, align 8
  %2550 = inttoptr i64 %2548 to i8*
  %2551 = load i8, i8* %2550, align 1
  %2552 = zext i8 %2551 to i64
  store i64 %2552, i64* %RAX.i2528, align 8
  %2553 = zext i8 %2551 to i32
  %2554 = add i64 %2482, -44
  %2555 = add i64 %2481, 32
  store i64 %2555, i64* %3, align 8
  %2556 = inttoptr i64 %2554 to i32*
  %2557 = load i32, i32* %2556, align 4
  %2558 = sub i32 %2553, %2557
  %2559 = icmp ult i32 %2553, %2557
  %2560 = zext i1 %2559 to i8
  store i8 %2560, i8* %14, align 1
  %2561 = and i32 %2558, 255
  %2562 = tail call i32 @llvm.ctpop.i32(i32 %2561)
  %2563 = trunc i32 %2562 to i8
  %2564 = and i8 %2563, 1
  %2565 = xor i8 %2564, 1
  store i8 %2565, i8* %21, align 1
  %2566 = xor i32 %2557, %2553
  %2567 = xor i32 %2566, %2558
  %2568 = lshr i32 %2567, 4
  %2569 = trunc i32 %2568 to i8
  %2570 = and i8 %2569, 1
  store i8 %2570, i8* %27, align 1
  %2571 = icmp eq i32 %2558, 0
  %2572 = zext i1 %2571 to i8
  store i8 %2572, i8* %30, align 1
  %2573 = lshr i32 %2558, 31
  %2574 = trunc i32 %2573 to i8
  store i8 %2574, i8* %33, align 1
  %2575 = lshr i32 %2557, 31
  %2576 = add nuw nsw i32 %2573, %2575
  %2577 = icmp eq i32 %2576, 2
  %2578 = zext i1 %2577 to i8
  store i8 %2578, i8* %39, align 1
  %.v690 = select i1 %2571, i64 38, i64 364
  %2579 = add i64 %2481, %.v690
  store i64 %2579, i64* %3, align 8
  br i1 %2571, label %block_4052bc, label %block_.L_405402

block_4052bc:                                     ; preds = %block_405296
  %2580 = load i64, i64* %RBP.i, align 8
  %2581 = add i64 %2580, -8096
  %2582 = add i64 %2579, 6
  store i64 %2582, i64* %3, align 8
  %2583 = inttoptr i64 %2581 to i32*
  %2584 = load i32, i32* %2583, align 4
  %2585 = zext i32 %2584 to i64
  store i64 %2585, i64* %RAX.i2528, align 8
  %2586 = add i64 %2580, -8072
  %2587 = add i64 %2579, 12
  store i64 %2587, i64* %3, align 8
  %2588 = inttoptr i64 %2586 to i32*
  %2589 = load i32, i32* %2588, align 4
  %2590 = zext i32 %2589 to i64
  store i64 %2590, i64* %RCX.i3786, align 8
  %2591 = add i64 %2580, -8100
  %2592 = add i64 %2579, 18
  store i64 %2592, i64* %3, align 8
  %2593 = inttoptr i64 %2591 to i32*
  %2594 = load i32, i32* %2593, align 4
  %2595 = add i32 %2594, %2589
  %2596 = zext i32 %2595 to i64
  store i64 %2596, i64* %RCX.i3786, align 8
  %2597 = icmp ult i32 %2595, %2589
  %2598 = icmp ult i32 %2595, %2594
  %2599 = or i1 %2597, %2598
  %2600 = zext i1 %2599 to i8
  store i8 %2600, i8* %14, align 1
  %2601 = and i32 %2595, 255
  %2602 = tail call i32 @llvm.ctpop.i32(i32 %2601)
  %2603 = trunc i32 %2602 to i8
  %2604 = and i8 %2603, 1
  %2605 = xor i8 %2604, 1
  store i8 %2605, i8* %21, align 1
  %2606 = xor i32 %2594, %2589
  %2607 = xor i32 %2606, %2595
  %2608 = lshr i32 %2607, 4
  %2609 = trunc i32 %2608 to i8
  %2610 = and i8 %2609, 1
  store i8 %2610, i8* %27, align 1
  %2611 = icmp eq i32 %2595, 0
  %2612 = zext i1 %2611 to i8
  store i8 %2612, i8* %30, align 1
  %2613 = lshr i32 %2595, 31
  %2614 = trunc i32 %2613 to i8
  store i8 %2614, i8* %33, align 1
  %2615 = lshr i32 %2589, 31
  %2616 = lshr i32 %2594, 31
  %2617 = xor i32 %2613, %2615
  %2618 = xor i32 %2613, %2616
  %2619 = add nuw nsw i32 %2617, %2618
  %2620 = icmp eq i32 %2619, 2
  %2621 = zext i1 %2620 to i8
  store i8 %2621, i8* %39, align 1
  store i64 %2596, i64* %RDI.i3360, align 8
  %2622 = add i64 %2580, -10956
  %2623 = add i64 %2579, 26
  store i64 %2623, i64* %3, align 8
  %2624 = inttoptr i64 %2622 to i32*
  store i32 %2584, i32* %2624, align 4
  %2625 = load i64, i64* %3, align 8
  %2626 = add i64 %2625, 42154
  %2627 = add i64 %2625, 5
  %2628 = load i64, i64* %6, align 8
  %2629 = add i64 %2628, -8
  %2630 = inttoptr i64 %2629 to i64*
  store i64 %2627, i64* %2630, align 8
  store i64 %2629, i64* %6, align 8
  store i64 %2626, i64* %3, align 8
  %call2_4052d6 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %2626, %struct.Memory* %2251)
  %2631 = load i64, i64* %RBP.i, align 8
  %2632 = add i64 %2631, -10956
  %2633 = load i64, i64* %3, align 8
  %2634 = add i64 %2633, 6
  store i64 %2634, i64* %3, align 8
  %2635 = inttoptr i64 %2632 to i32*
  %2636 = load i32, i32* %2635, align 4
  %2637 = zext i32 %2636 to i64
  store i64 %2637, i64* %RCX.i3786, align 8
  %2638 = load i32, i32* %EAX.i3678, align 4
  %2639 = sub i32 %2636, %2638
  %2640 = icmp ult i32 %2636, %2638
  %2641 = zext i1 %2640 to i8
  store i8 %2641, i8* %14, align 1
  %2642 = and i32 %2639, 255
  %2643 = tail call i32 @llvm.ctpop.i32(i32 %2642)
  %2644 = trunc i32 %2643 to i8
  %2645 = and i8 %2644, 1
  %2646 = xor i8 %2645, 1
  store i8 %2646, i8* %21, align 1
  %2647 = xor i32 %2638, %2636
  %2648 = xor i32 %2647, %2639
  %2649 = lshr i32 %2648, 4
  %2650 = trunc i32 %2649 to i8
  %2651 = and i8 %2650, 1
  store i8 %2651, i8* %27, align 1
  %2652 = icmp eq i32 %2639, 0
  %2653 = zext i1 %2652 to i8
  store i8 %2653, i8* %30, align 1
  %2654 = lshr i32 %2639, 31
  %2655 = trunc i32 %2654 to i8
  store i8 %2655, i8* %33, align 1
  %2656 = lshr i32 %2636, 31
  %2657 = lshr i32 %2638, 31
  %2658 = xor i32 %2657, %2656
  %2659 = xor i32 %2654, %2656
  %2660 = add nuw nsw i32 %2659, %2658
  %2661 = icmp eq i32 %2660, 2
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %39, align 1
  %2663 = icmp ne i8 %2655, 0
  %2664 = xor i1 %2663, %2661
  %.demorgan514 = or i1 %2652, %2664
  %.v691 = select i1 %.demorgan514, i64 14, i64 72
  %2665 = add i64 %2633, %.v691
  store i64 %2665, i64* %3, align 8
  br i1 %.demorgan514, label %block_4052e9, label %block_.L_405323

block_4052e9:                                     ; preds = %block_4052bc
  %2666 = add i64 %2631, -8096
  %2667 = add i64 %2665, 7
  store i64 %2667, i64* %3, align 8
  %2668 = inttoptr i64 %2666 to i32*
  %2669 = load i32, i32* %2668, align 4
  %2670 = add i32 %2669, -4
  %2671 = icmp ult i32 %2669, 4
  %2672 = zext i1 %2671 to i8
  store i8 %2672, i8* %14, align 1
  %2673 = and i32 %2670, 255
  %2674 = tail call i32 @llvm.ctpop.i32(i32 %2673)
  %2675 = trunc i32 %2674 to i8
  %2676 = and i8 %2675, 1
  %2677 = xor i8 %2676, 1
  store i8 %2677, i8* %21, align 1
  %2678 = xor i32 %2670, %2669
  %2679 = lshr i32 %2678, 4
  %2680 = trunc i32 %2679 to i8
  %2681 = and i8 %2680, 1
  store i8 %2681, i8* %27, align 1
  %2682 = icmp eq i32 %2670, 0
  %2683 = zext i1 %2682 to i8
  store i8 %2683, i8* %30, align 1
  %2684 = lshr i32 %2670, 31
  %2685 = trunc i32 %2684 to i8
  store i8 %2685, i8* %33, align 1
  %2686 = lshr i32 %2669, 31
  %2687 = xor i32 %2684, %2686
  %2688 = add nuw nsw i32 %2687, %2686
  %2689 = icmp eq i32 %2688, 2
  %2690 = zext i1 %2689 to i8
  store i8 %2690, i8* %39, align 1
  %2691 = icmp ne i8 %2685, 0
  %2692 = xor i1 %2691, %2689
  %2693 = or i1 %2682, %2692
  %.v695 = select i1 %2693, i64 281, i64 13
  %2694 = add i64 %2665, %.v695
  store i64 %2694, i64* %3, align 8
  br i1 %2693, label %block_.L_405402, label %block_4052f6

block_4052f6:                                     ; preds = %block_4052e9
  %2695 = add i64 %2694, 6
  store i64 %2695, i64* %3, align 8
  %2696 = load i32, i32* %2668, align 4
  %2697 = zext i32 %2696 to i64
  store i64 %2697, i64* %RAX.i2528, align 8
  %2698 = add i64 %2631, -8072
  %2699 = add i64 %2694, 12
  store i64 %2699, i64* %3, align 8
  %2700 = inttoptr i64 %2698 to i32*
  %2701 = load i32, i32* %2700, align 4
  %2702 = zext i32 %2701 to i64
  store i64 %2702, i64* %RCX.i3786, align 8
  %2703 = add i64 %2631, -8100
  %2704 = add i64 %2694, 18
  store i64 %2704, i64* %3, align 8
  %2705 = inttoptr i64 %2703 to i32*
  %2706 = load i32, i32* %2705, align 4
  %2707 = add i32 %2706, %2701
  %2708 = zext i32 %2707 to i64
  store i64 %2708, i64* %RCX.i3786, align 8
  %2709 = icmp ult i32 %2707, %2701
  %2710 = icmp ult i32 %2707, %2706
  %2711 = or i1 %2709, %2710
  %2712 = zext i1 %2711 to i8
  store i8 %2712, i8* %14, align 1
  %2713 = and i32 %2707, 255
  %2714 = tail call i32 @llvm.ctpop.i32(i32 %2713)
  %2715 = trunc i32 %2714 to i8
  %2716 = and i8 %2715, 1
  %2717 = xor i8 %2716, 1
  store i8 %2717, i8* %21, align 1
  %2718 = xor i32 %2706, %2701
  %2719 = xor i32 %2718, %2707
  %2720 = lshr i32 %2719, 4
  %2721 = trunc i32 %2720 to i8
  %2722 = and i8 %2721, 1
  store i8 %2722, i8* %27, align 1
  %2723 = icmp eq i32 %2707, 0
  %2724 = zext i1 %2723 to i8
  store i8 %2724, i8* %30, align 1
  %2725 = lshr i32 %2707, 31
  %2726 = trunc i32 %2725 to i8
  store i8 %2726, i8* %33, align 1
  %2727 = lshr i32 %2701, 31
  %2728 = lshr i32 %2706, 31
  %2729 = xor i32 %2725, %2727
  %2730 = xor i32 %2725, %2728
  %2731 = add nuw nsw i32 %2729, %2730
  %2732 = icmp eq i32 %2731, 2
  %2733 = zext i1 %2732 to i8
  store i8 %2733, i8* %39, align 1
  store i64 %2708, i64* %RDI.i3360, align 8
  %2734 = add i64 %2631, -10960
  %2735 = add i64 %2694, 26
  store i64 %2735, i64* %3, align 8
  %2736 = inttoptr i64 %2734 to i32*
  store i32 %2696, i32* %2736, align 4
  %2737 = load i64, i64* %3, align 8
  %2738 = add i64 %2737, 42096
  %2739 = add i64 %2737, 5
  %2740 = load i64, i64* %6, align 8
  %2741 = add i64 %2740, -8
  %2742 = inttoptr i64 %2741 to i64*
  store i64 %2739, i64* %2742, align 8
  store i64 %2741, i64* %6, align 8
  store i64 %2738, i64* %3, align 8
  %call2_405310 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %2738, %struct.Memory* %call2_4052d6)
  %2743 = load i64, i64* %RBP.i, align 8
  %2744 = add i64 %2743, -10960
  %2745 = load i64, i64* %3, align 8
  %2746 = add i64 %2745, 6
  store i64 %2746, i64* %3, align 8
  %2747 = inttoptr i64 %2744 to i32*
  %2748 = load i32, i32* %2747, align 4
  %2749 = zext i32 %2748 to i64
  store i64 %2749, i64* %RCX.i3786, align 8
  %2750 = load i32, i32* %EAX.i3678, align 4
  %2751 = sub i32 %2748, %2750
  %2752 = icmp ult i32 %2748, %2750
  %2753 = zext i1 %2752 to i8
  store i8 %2753, i8* %14, align 1
  %2754 = and i32 %2751, 255
  %2755 = tail call i32 @llvm.ctpop.i32(i32 %2754)
  %2756 = trunc i32 %2755 to i8
  %2757 = and i8 %2756, 1
  %2758 = xor i8 %2757, 1
  store i8 %2758, i8* %21, align 1
  %2759 = xor i32 %2750, %2748
  %2760 = xor i32 %2759, %2751
  %2761 = lshr i32 %2760, 4
  %2762 = trunc i32 %2761 to i8
  %2763 = and i8 %2762, 1
  store i8 %2763, i8* %27, align 1
  %2764 = icmp eq i32 %2751, 0
  %2765 = zext i1 %2764 to i8
  store i8 %2765, i8* %30, align 1
  %2766 = lshr i32 %2751, 31
  %2767 = trunc i32 %2766 to i8
  store i8 %2767, i8* %33, align 1
  %2768 = lshr i32 %2748, 31
  %2769 = lshr i32 %2750, 31
  %2770 = xor i32 %2769, %2768
  %2771 = xor i32 %2766, %2768
  %2772 = add nuw nsw i32 %2771, %2770
  %2773 = icmp eq i32 %2772, 2
  %2774 = zext i1 %2773 to i8
  store i8 %2774, i8* %39, align 1
  %.v696 = select i1 %2764, i64 14, i64 237
  %2775 = add i64 %2745, %.v696
  store i64 %2775, i64* %3, align 8
  br i1 %2764, label %block_.L_405323, label %block_.L_405402

block_.L_405323:                                  ; preds = %block_4052f6, %block_4052bc
  %2776 = phi i64 [ %2631, %block_4052bc ], [ %2743, %block_4052f6 ]
  %2777 = phi i64 [ %2665, %block_4052bc ], [ %2775, %block_4052f6 ]
  %MEMORY.41 = phi %struct.Memory* [ %call2_4052d6, %block_4052bc ], [ %call2_405310, %block_4052f6 ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %2778 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %2778, i64* %RCX.i3786, align 8
  %2779 = add i64 %2776, -8072
  %2780 = add i64 %2777, 24
  store i64 %2780, i64* %3, align 8
  %2781 = inttoptr i64 %2779 to i32*
  %2782 = load i32, i32* %2781, align 4
  %2783 = zext i32 %2782 to i64
  store i64 %2783, i64* %RDX.i3821, align 8
  %2784 = add i64 %2776, -8100
  %2785 = add i64 %2777, 30
  store i64 %2785, i64* %3, align 8
  %2786 = inttoptr i64 %2784 to i32*
  %2787 = load i32, i32* %2786, align 4
  %2788 = add i32 %2787, %2782
  %2789 = zext i32 %2788 to i64
  store i64 %2789, i64* %RDX.i3821, align 8
  %2790 = sext i32 %2788 to i64
  %2791 = mul nsw i64 %2790, 76
  store i64 %2791, i64* %RSI.i3112.pre-phi, align 8
  %2792 = lshr i64 %2791, 63
  %2793 = add i64 %2791, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %2793, i64* %RAX.i2528, align 8
  %2794 = icmp ult i64 %2793, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %2795 = icmp ult i64 %2793, %2791
  %2796 = or i1 %2794, %2795
  %2797 = zext i1 %2796 to i8
  store i8 %2797, i8* %14, align 1
  %2798 = trunc i64 %2793 to i32
  %2799 = and i32 %2798, 252
  %2800 = tail call i32 @llvm.ctpop.i32(i32 %2799)
  %2801 = trunc i32 %2800 to i8
  %2802 = and i8 %2801, 1
  %2803 = xor i8 %2802, 1
  store i8 %2803, i8* %21, align 1
  %2804 = xor i64 %2791, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %2805 = xor i64 %2804, %2793
  %2806 = lshr i64 %2805, 4
  %2807 = trunc i64 %2806 to i8
  %2808 = and i8 %2807, 1
  store i8 %2808, i8* %27, align 1
  %2809 = icmp eq i64 %2793, 0
  %2810 = zext i1 %2809 to i8
  store i8 %2810, i8* %30, align 1
  %2811 = lshr i64 %2793, 63
  %2812 = trunc i64 %2811 to i8
  store i8 %2812, i8* %33, align 1
  %2813 = xor i64 %2811, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %2814 = xor i64 %2811, %2792
  %2815 = add nuw nsw i64 %2813, %2814
  %2816 = icmp eq i64 %2815, 2
  %2817 = zext i1 %2816 to i8
  store i8 %2817, i8* %39, align 1
  %2818 = add i64 %2791, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %2819 = add i64 %2777, 44
  store i64 %2819, i64* %3, align 8
  %2820 = inttoptr i64 %2818 to i32*
  %2821 = load i32, i32* %2820, align 4
  %2822 = sext i32 %2821 to i64
  %2823 = mul nsw i64 %2822, 104
  store i64 %2823, i64* %RAX.i2528, align 8
  %2824 = lshr i64 %2823, 63
  %2825 = load i64, i64* %RCX.i3786, align 8
  %2826 = add i64 %2823, %2825
  store i64 %2826, i64* %RCX.i3786, align 8
  %2827 = icmp ult i64 %2826, %2825
  %2828 = icmp ult i64 %2826, %2823
  %2829 = or i1 %2827, %2828
  %2830 = zext i1 %2829 to i8
  store i8 %2830, i8* %14, align 1
  %2831 = trunc i64 %2826 to i32
  %2832 = and i32 %2831, 255
  %2833 = tail call i32 @llvm.ctpop.i32(i32 %2832)
  %2834 = trunc i32 %2833 to i8
  %2835 = and i8 %2834, 1
  %2836 = xor i8 %2835, 1
  store i8 %2836, i8* %21, align 1
  %2837 = xor i64 %2823, %2825
  %2838 = xor i64 %2837, %2826
  %2839 = lshr i64 %2838, 4
  %2840 = trunc i64 %2839 to i8
  %2841 = and i8 %2840, 1
  store i8 %2841, i8* %27, align 1
  %2842 = icmp eq i64 %2826, 0
  %2843 = zext i1 %2842 to i8
  store i8 %2843, i8* %30, align 1
  %2844 = lshr i64 %2826, 63
  %2845 = trunc i64 %2844 to i8
  store i8 %2845, i8* %33, align 1
  %2846 = lshr i64 %2825, 63
  %2847 = xor i64 %2844, %2846
  %2848 = xor i64 %2844, %2824
  %2849 = add nuw nsw i64 %2847, %2848
  %2850 = icmp eq i64 %2849, 2
  %2851 = zext i1 %2850 to i8
  store i8 %2851, i8* %39, align 1
  %2852 = add i64 %2826, 60
  %2853 = add i64 %2777, 55
  store i64 %2853, i64* %3, align 8
  %2854 = inttoptr i64 %2852 to i32*
  %2855 = load i32, i32* %2854, align 4
  %2856 = add i32 %2855, -9
  %2857 = icmp ult i32 %2855, 9
  %2858 = zext i1 %2857 to i8
  store i8 %2858, i8* %14, align 1
  %2859 = and i32 %2856, 255
  %2860 = tail call i32 @llvm.ctpop.i32(i32 %2859)
  %2861 = trunc i32 %2860 to i8
  %2862 = and i8 %2861, 1
  %2863 = xor i8 %2862, 1
  store i8 %2863, i8* %21, align 1
  %2864 = xor i32 %2856, %2855
  %2865 = lshr i32 %2864, 4
  %2866 = trunc i32 %2865 to i8
  %2867 = and i8 %2866, 1
  store i8 %2867, i8* %27, align 1
  %2868 = icmp eq i32 %2856, 0
  %2869 = zext i1 %2868 to i8
  store i8 %2869, i8* %30, align 1
  %2870 = lshr i32 %2856, 31
  %2871 = trunc i32 %2870 to i8
  store i8 %2871, i8* %33, align 1
  %2872 = lshr i32 %2855, 31
  %2873 = xor i32 %2870, %2872
  %2874 = add nuw nsw i32 %2873, %2872
  %2875 = icmp eq i32 %2874, 2
  %2876 = zext i1 %2875 to i8
  store i8 %2876, i8* %39, align 1
  %.v692 = select i1 %2868, i64 122, i64 61
  %2877 = add i64 %2777, %.v692
  store i64 %2877, i64* %3, align 8
  br i1 %2868, label %block_.L_40539d, label %block_405360

block_405360:                                     ; preds = %block_.L_405323
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %2878 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %2878, i64* %RCX.i3786, align 8
  %2879 = load i64, i64* %RBP.i, align 8
  %2880 = add i64 %2879, -8072
  %2881 = add i64 %2877, 24
  store i64 %2881, i64* %3, align 8
  %2882 = inttoptr i64 %2880 to i32*
  %2883 = load i32, i32* %2882, align 4
  %2884 = zext i32 %2883 to i64
  store i64 %2884, i64* %RDX.i3821, align 8
  %2885 = add i64 %2879, -8100
  %2886 = add i64 %2877, 30
  store i64 %2886, i64* %3, align 8
  %2887 = inttoptr i64 %2885 to i32*
  %2888 = load i32, i32* %2887, align 4
  %2889 = add i32 %2888, %2883
  %2890 = zext i32 %2889 to i64
  store i64 %2890, i64* %RDX.i3821, align 8
  %2891 = sext i32 %2889 to i64
  %2892 = mul nsw i64 %2891, 76
  store i64 %2892, i64* %RSI.i3112.pre-phi, align 8
  %2893 = lshr i64 %2892, 63
  %2894 = add i64 %2892, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %2894, i64* %RAX.i2528, align 8
  %2895 = icmp ult i64 %2894, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %2896 = icmp ult i64 %2894, %2892
  %2897 = or i1 %2895, %2896
  %2898 = zext i1 %2897 to i8
  store i8 %2898, i8* %14, align 1
  %2899 = trunc i64 %2894 to i32
  %2900 = and i32 %2899, 252
  %2901 = tail call i32 @llvm.ctpop.i32(i32 %2900)
  %2902 = trunc i32 %2901 to i8
  %2903 = and i8 %2902, 1
  %2904 = xor i8 %2903, 1
  store i8 %2904, i8* %21, align 1
  %2905 = xor i64 %2892, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %2906 = xor i64 %2905, %2894
  %2907 = lshr i64 %2906, 4
  %2908 = trunc i64 %2907 to i8
  %2909 = and i8 %2908, 1
  store i8 %2909, i8* %27, align 1
  %2910 = icmp eq i64 %2894, 0
  %2911 = zext i1 %2910 to i8
  store i8 %2911, i8* %30, align 1
  %2912 = lshr i64 %2894, 63
  %2913 = trunc i64 %2912 to i8
  store i8 %2913, i8* %33, align 1
  %2914 = xor i64 %2912, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %2915 = xor i64 %2912, %2893
  %2916 = add nuw nsw i64 %2914, %2915
  %2917 = icmp eq i64 %2916, 2
  %2918 = zext i1 %2917 to i8
  store i8 %2918, i8* %39, align 1
  %2919 = add i64 %2892, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %2920 = add i64 %2877, 44
  store i64 %2920, i64* %3, align 8
  %2921 = inttoptr i64 %2919 to i32*
  %2922 = load i32, i32* %2921, align 4
  %2923 = sext i32 %2922 to i64
  %2924 = mul nsw i64 %2923, 104
  store i64 %2924, i64* %RAX.i2528, align 8
  %2925 = lshr i64 %2924, 63
  %2926 = load i64, i64* %RCX.i3786, align 8
  %2927 = add i64 %2924, %2926
  store i64 %2927, i64* %RCX.i3786, align 8
  %2928 = icmp ult i64 %2927, %2926
  %2929 = icmp ult i64 %2927, %2924
  %2930 = or i1 %2928, %2929
  %2931 = zext i1 %2930 to i8
  store i8 %2931, i8* %14, align 1
  %2932 = trunc i64 %2927 to i32
  %2933 = and i32 %2932, 255
  %2934 = tail call i32 @llvm.ctpop.i32(i32 %2933)
  %2935 = trunc i32 %2934 to i8
  %2936 = and i8 %2935, 1
  %2937 = xor i8 %2936, 1
  store i8 %2937, i8* %21, align 1
  %2938 = xor i64 %2924, %2926
  %2939 = xor i64 %2938, %2927
  %2940 = lshr i64 %2939, 4
  %2941 = trunc i64 %2940 to i8
  %2942 = and i8 %2941, 1
  store i8 %2942, i8* %27, align 1
  %2943 = icmp eq i64 %2927, 0
  %2944 = zext i1 %2943 to i8
  store i8 %2944, i8* %30, align 1
  %2945 = lshr i64 %2927, 63
  %2946 = trunc i64 %2945 to i8
  store i8 %2946, i8* %33, align 1
  %2947 = lshr i64 %2926, 63
  %2948 = xor i64 %2945, %2947
  %2949 = xor i64 %2945, %2925
  %2950 = add nuw nsw i64 %2948, %2949
  %2951 = icmp eq i64 %2950, 2
  %2952 = zext i1 %2951 to i8
  store i8 %2952, i8* %39, align 1
  %2953 = add i64 %2927, 60
  %2954 = add i64 %2877, 55
  store i64 %2954, i64* %3, align 8
  %2955 = inttoptr i64 %2953 to i32*
  %2956 = load i32, i32* %2955, align 4
  %2957 = add i32 %2956, -8
  %2958 = icmp ult i32 %2956, 8
  %2959 = zext i1 %2958 to i8
  store i8 %2959, i8* %14, align 1
  %2960 = and i32 %2957, 255
  %2961 = tail call i32 @llvm.ctpop.i32(i32 %2960)
  %2962 = trunc i32 %2961 to i8
  %2963 = and i8 %2962, 1
  %2964 = xor i8 %2963, 1
  store i8 %2964, i8* %21, align 1
  %2965 = xor i32 %2957, %2956
  %2966 = lshr i32 %2965, 4
  %2967 = trunc i32 %2966 to i8
  %2968 = and i8 %2967, 1
  store i8 %2968, i8* %27, align 1
  %2969 = icmp eq i32 %2957, 0
  %2970 = zext i1 %2969 to i8
  store i8 %2970, i8* %30, align 1
  %2971 = lshr i32 %2957, 31
  %2972 = trunc i32 %2971 to i8
  store i8 %2972, i8* %33, align 1
  %2973 = lshr i32 %2956, 31
  %2974 = xor i32 %2971, %2973
  %2975 = add nuw nsw i32 %2974, %2973
  %2976 = icmp eq i32 %2975, 2
  %2977 = zext i1 %2976 to i8
  store i8 %2977, i8* %39, align 1
  %.v693 = select i1 %2969, i64 61, i64 162
  %2978 = add i64 %2877, %.v693
  store i64 %2978, i64* %3, align 8
  br i1 %2969, label %block_.L_40539d, label %block_.L_405402

block_.L_40539d:                                  ; preds = %block_405360, %block_.L_405323
  %2979 = phi i64 [ %2978, %block_405360 ], [ %2877, %block_.L_405323 ]
  %2980 = add i64 %2979, ptrtoint (%G_0xddd5b__rip__type* @G_0xddd5b__rip_ to i64)
  %2981 = add i64 %2979, 8
  store i64 %2981, i64* %3, align 8
  %2982 = inttoptr i64 %2980 to i32*
  %2983 = load i32, i32* %2982, align 4
  store i32 %2983, i32* %1960, align 1
  store float 0.000000e+00, float* %1962, align 1
  store float 0.000000e+00, float* %1964, align 1
  store float 0.000000e+00, float* %1966, align 1
  %2984 = load i64, i64* %RBP.i, align 8
  %2985 = add i64 %2984, -8072
  %2986 = add i64 %2979, 15
  store i64 %2986, i64* %3, align 8
  %2987 = inttoptr i64 %2985 to i32*
  %2988 = load i32, i32* %2987, align 4
  %2989 = sext i32 %2988 to i64
  store i64 %2989, i64* %RAX.i2528, align 8
  %2990 = shl nsw i64 %2989, 2
  %2991 = add i64 %2984, -4848
  %2992 = add i64 %2991, %2990
  %2993 = add i64 %2979, 24
  store i64 %2993, i64* %3, align 8
  %2994 = inttoptr i64 %2992 to i32*
  %2995 = load i32, i32* %2994, align 4
  store i32 %2995, i32* %1970, align 1
  store float 0.000000e+00, float* %1972, align 1
  store float 0.000000e+00, float* %1974, align 1
  store float 0.000000e+00, float* %1976, align 1
  %2996 = add i64 %2979, 31
  store i64 %2996, i64* %3, align 8
  %2997 = load i32, i32* %2987, align 4
  %2998 = sext i32 %2997 to i64
  store i64 %2998, i64* %RAX.i2528, align 8
  %2999 = shl nsw i64 %2998, 2
  %3000 = add i64 %2984, -6448
  %3001 = add i64 %3000, %2999
  %3002 = add i64 %2979, 40
  store i64 %3002, i64* %3, align 8
  %3003 = load <2 x float>, <2 x float>* %1977, align 1
  %3004 = load <2 x i32>, <2 x i32>* %1978, align 1
  %3005 = inttoptr i64 %3001 to float*
  %3006 = load float, float* %3005, align 4
  %3007 = extractelement <2 x float> %3003, i32 0
  %3008 = fadd float %3007, %3006
  store float %3008, float* %1969, align 1
  %3009 = bitcast <2 x float> %3003 to <2 x i32>
  %3010 = extractelement <2 x i32> %3009, i32 1
  store i32 %3010, i32* %1979, align 1
  %3011 = extractelement <2 x i32> %3004, i32 0
  store i32 %3011, i32* %1980, align 1
  %3012 = extractelement <2 x i32> %3004, i32 1
  store i32 %3012, i32* %1981, align 1
  %3013 = load <2 x float>, <2 x float>* %1982, align 1
  %3014 = load <2 x i32>, <2 x i32>* %1983, align 1
  %3015 = load <2 x float>, <2 x float>* %1977, align 1
  %3016 = extractelement <2 x float> %3013, i32 0
  %3017 = extractelement <2 x float> %3015, i32 0
  %3018 = fmul float %3016, %3017
  store float %3018, float* %1959, align 1
  %3019 = bitcast <2 x float> %3013 to <2 x i32>
  %3020 = extractelement <2 x i32> %3019, i32 1
  store i32 %3020, i32* %1984, align 1
  %3021 = extractelement <2 x i32> %3014, i32 0
  store i32 %3021, i32* %1985, align 1
  %3022 = extractelement <2 x i32> %3014, i32 1
  store i32 %3022, i32* %1986, align 1
  %3023 = load <2 x float>, <2 x float>* %1982, align 1
  %3024 = extractelement <2 x float> %3023, i32 0
  %3025 = tail call float @llvm.trunc.f32(float %3024)
  %3026 = tail call float @llvm.fabs.f32(float %3025)
  %3027 = fcmp ogt float %3026, 0x41E0000000000000
  %3028 = fptosi float %3025 to i32
  %3029 = zext i32 %3028 to i64
  %3030 = select i1 %3027, i64 2147483648, i64 %3029
  store i64 %3030, i64* %RCX.i3786, align 8
  %3031 = add i64 %2984, -8108
  %3032 = trunc i64 %3030 to i32
  %3033 = add i64 %2979, 54
  store i64 %3033, i64* %3, align 8
  %3034 = inttoptr i64 %3031 to i32*
  store i32 %3032, i32* %3034, align 4
  %3035 = load i64, i64* %RBP.i, align 8
  %3036 = add i64 %3035, -8108
  %3037 = load i64, i64* %3, align 8
  %3038 = add i64 %3037, 6
  store i64 %3038, i64* %3, align 8
  %3039 = inttoptr i64 %3036 to i32*
  %3040 = load i32, i32* %3039, align 4
  %3041 = zext i32 %3040 to i64
  store i64 %3041, i64* %RCX.i3786, align 8
  %3042 = add i64 %3035, -8076
  %3043 = add i64 %3037, 12
  store i64 %3043, i64* %3, align 8
  %3044 = inttoptr i64 %3042 to i32*
  %3045 = load i32, i32* %3044, align 4
  %3046 = sub i32 %3040, %3045
  %3047 = icmp ult i32 %3040, %3045
  %3048 = zext i1 %3047 to i8
  store i8 %3048, i8* %14, align 1
  %3049 = and i32 %3046, 255
  %3050 = tail call i32 @llvm.ctpop.i32(i32 %3049)
  %3051 = trunc i32 %3050 to i8
  %3052 = and i8 %3051, 1
  %3053 = xor i8 %3052, 1
  store i8 %3053, i8* %21, align 1
  %3054 = xor i32 %3045, %3040
  %3055 = xor i32 %3054, %3046
  %3056 = lshr i32 %3055, 4
  %3057 = trunc i32 %3056 to i8
  %3058 = and i8 %3057, 1
  store i8 %3058, i8* %27, align 1
  %3059 = icmp eq i32 %3046, 0
  %3060 = zext i1 %3059 to i8
  store i8 %3060, i8* %30, align 1
  %3061 = lshr i32 %3046, 31
  %3062 = trunc i32 %3061 to i8
  store i8 %3062, i8* %33, align 1
  %3063 = lshr i32 %3040, 31
  %3064 = lshr i32 %3045, 31
  %3065 = xor i32 %3064, %3063
  %3066 = xor i32 %3061, %3063
  %3067 = add nuw nsw i32 %3066, %3065
  %3068 = icmp eq i32 %3067, 2
  %3069 = zext i1 %3068 to i8
  store i8 %3069, i8* %39, align 1
  %3070 = icmp ne i8 %3062, 0
  %3071 = xor i1 %3070, %3068
  %3072 = or i1 %3059, %3071
  %.v694 = select i1 %3072, i64 42, i64 18
  %3073 = add i64 %3037, %.v694
  store i64 %3073, i64* %3, align 8
  br i1 %3072, label %block_.L_4053fd, label %block_4053e5

block_4053e5:                                     ; preds = %block_.L_40539d
  %3074 = add i64 %3073, 6
  store i64 %3074, i64* %3, align 8
  %3075 = load i32, i32* %3039, align 4
  %3076 = zext i32 %3075 to i64
  store i64 %3076, i64* %RAX.i2528, align 8
  %3077 = add i64 %3073, 12
  store i64 %3077, i64* %3, align 8
  store i32 %3075, i32* %3044, align 4
  %3078 = load i64, i64* %RBP.i, align 8
  %3079 = add i64 %3078, -8072
  %3080 = load i64, i64* %3, align 8
  %3081 = add i64 %3080, 6
  store i64 %3081, i64* %3, align 8
  %3082 = inttoptr i64 %3079 to i32*
  %3083 = load i32, i32* %3082, align 4
  %3084 = zext i32 %3083 to i64
  store i64 %3084, i64* %RAX.i2528, align 8
  %3085 = add i64 %3078, -8080
  %3086 = add i64 %3080, 12
  store i64 %3086, i64* %3, align 8
  %3087 = inttoptr i64 %3085 to i32*
  store i32 %3083, i32* %3087, align 4
  %.pre473 = load i64, i64* %3, align 8
  br label %block_.L_4053fd

block_.L_4053fd:                                  ; preds = %block_4053e5, %block_.L_40539d
  %3088 = phi i64 [ %.pre473, %block_4053e5 ], [ %3073, %block_.L_40539d ]
  %3089 = add i64 %3088, 5
  store i64 %3089, i64* %3, align 8
  br label %block_.L_405402

block_.L_405402:                                  ; preds = %block_405360, %block_4052f6, %block_405296, %block_405270, %block_405250, %routine_idivl__esi.exit3058, %block_.L_4053fd, %block_4052e9
  %3090 = phi i64 [ %2321, %routine_idivl__esi.exit3058 ], [ %2386, %block_405250 ], [ %2481, %block_405270 ], [ %2579, %block_405296 ], [ %3089, %block_.L_4053fd ], [ %2978, %block_405360 ], [ %2694, %block_4052e9 ], [ %2775, %block_4052f6 ]
  %MEMORY.44 = phi %struct.Memory* [ %2251, %routine_idivl__esi.exit3058 ], [ %2251, %block_405250 ], [ %2251, %block_405270 ], [ %2251, %block_405296 ], [ %MEMORY.41, %block_.L_4053fd ], [ %MEMORY.41, %block_405360 ], [ %call2_4052d6, %block_4052e9 ], [ %call2_405310, %block_4052f6 ]
  %3091 = load i64, i64* %RBP.i, align 8
  %3092 = add i64 %3091, -40
  %3093 = add i64 %3090, 8
  store i64 %3093, i64* %3, align 8
  %3094 = inttoptr i64 %3092 to i32*
  %3095 = load i32, i32* %3094, align 4
  %3096 = add i32 %3095, 1
  %3097 = zext i32 %3096 to i64
  store i64 %3097, i64* %RAX.i2528, align 8
  %3098 = icmp eq i32 %3095, -1
  %3099 = icmp eq i32 %3096, 0
  %3100 = or i1 %3098, %3099
  %3101 = zext i1 %3100 to i8
  store i8 %3101, i8* %14, align 1
  %3102 = and i32 %3096, 255
  %3103 = tail call i32 @llvm.ctpop.i32(i32 %3102)
  %3104 = trunc i32 %3103 to i8
  %3105 = and i8 %3104, 1
  %3106 = xor i8 %3105, 1
  store i8 %3106, i8* %21, align 1
  %3107 = xor i32 %3096, %3095
  %3108 = lshr i32 %3107, 4
  %3109 = trunc i32 %3108 to i8
  %3110 = and i8 %3109, 1
  store i8 %3110, i8* %27, align 1
  %3111 = zext i1 %3099 to i8
  store i8 %3111, i8* %30, align 1
  %3112 = lshr i32 %3096, 31
  %3113 = trunc i32 %3112 to i8
  store i8 %3113, i8* %33, align 1
  %3114 = lshr i32 %3095, 31
  %3115 = xor i32 %3112, %3114
  %3116 = add nuw nsw i32 %3115, %3112
  %3117 = icmp eq i32 %3116, 2
  %3118 = zext i1 %3117 to i8
  store i8 %3118, i8* %39, align 1
  %3119 = add i64 %3090, 14
  store i64 %3119, i64* %3, align 8
  store i32 %3096, i32* %3094, align 4
  %3120 = load i64, i64* %3, align 8
  %3121 = add i64 %3120, -551
  store i64 %3121, i64* %3, align 8
  br label %block_.L_4051e9

block_.L_40541a.loopexit:                         ; preds = %block_.L_4051e9
  br label %block_.L_40541a

block_.L_40541a:                                  ; preds = %block_.L_40541a.loopexit, %block_.L_4051c6, %block_40517d, %block_405165, %block_.L_405197
  %3122 = phi i64 [ %2086, %block_.L_405197 ], [ %1988, %block_40517d ], [ %1988, %block_405165 ], [ %2143, %block_.L_4051c6 ], [ %2148, %block_.L_40541a.loopexit ]
  %3123 = phi i64 [ %2115, %block_.L_405197 ], [ %2052, %block_40517d ], [ %2033, %block_405165 ], [ %2142, %block_.L_4051c6 ], [ %2176, %block_.L_40541a.loopexit ]
  %.sink250 = phi i64 [ 601, %block_.L_405197 ], [ 648, %block_40517d ], [ 648, %block_405165 ], [ 573, %block_.L_4051c6 ], [ 5, %block_.L_40541a.loopexit ]
  %MEMORY.45 = phi %struct.Memory* [ %MEMORY.38, %block_.L_405197 ], [ %MEMORY.38, %block_40517d ], [ %MEMORY.38, %block_405165 ], [ %MEMORY.38, %block_.L_4051c6 ], [ %MEMORY.40, %block_.L_40541a.loopexit ]
  %3124 = add i64 %3123, %.sink250
  %3125 = add i64 %3122, -8072
  %3126 = add i64 %3124, 6
  store i64 %3126, i64* %3, align 8
  %3127 = inttoptr i64 %3125 to i32*
  %3128 = load i32, i32* %3127, align 4
  %3129 = add i32 %3128, 1
  %3130 = zext i32 %3129 to i64
  store i64 %3130, i64* %RAX.i2528, align 8
  %3131 = icmp eq i32 %3128, -1
  %3132 = icmp eq i32 %3129, 0
  %3133 = or i1 %3131, %3132
  %3134 = zext i1 %3133 to i8
  store i8 %3134, i8* %14, align 1
  %3135 = and i32 %3129, 255
  %3136 = tail call i32 @llvm.ctpop.i32(i32 %3135)
  %3137 = trunc i32 %3136 to i8
  %3138 = and i8 %3137, 1
  %3139 = xor i8 %3138, 1
  store i8 %3139, i8* %21, align 1
  %3140 = xor i32 %3129, %3128
  %3141 = lshr i32 %3140, 4
  %3142 = trunc i32 %3141 to i8
  %3143 = and i8 %3142, 1
  store i8 %3143, i8* %27, align 1
  %3144 = zext i1 %3132 to i8
  store i8 %3144, i8* %30, align 1
  %3145 = lshr i32 %3129, 31
  %3146 = trunc i32 %3145 to i8
  store i8 %3146, i8* %33, align 1
  %3147 = lshr i32 %3128, 31
  %3148 = xor i32 %3145, %3147
  %3149 = add nuw nsw i32 %3148, %3145
  %3150 = icmp eq i32 %3149, 2
  %3151 = zext i1 %3150 to i8
  store i8 %3151, i8* %39, align 1
  %3152 = add i64 %3124, 15
  store i64 %3152, i64* %3, align 8
  store i32 %3129, i32* %3127, align 4
  %3153 = load i64, i64* %3, align 8
  %3154 = add i64 %3153, -724
  store i64 %3154, i64* %3, align 8
  br label %block_.L_405155

block_.L_40542e:                                  ; preds = %block_.L_405155
  %3155 = add i64 %1988, -8080
  %3156 = add i64 %2017, 7
  store i64 %3156, i64* %3, align 8
  %3157 = inttoptr i64 %3155 to i32*
  %3158 = load i32, i32* %3157, align 4
  store i8 0, i8* %14, align 1
  %3159 = and i32 %3158, 255
  %3160 = tail call i32 @llvm.ctpop.i32(i32 %3159)
  %3161 = trunc i32 %3160 to i8
  %3162 = and i8 %3161, 1
  %3163 = xor i8 %3162, 1
  store i8 %3163, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3164 = icmp eq i32 %3158, 0
  %3165 = zext i1 %3164 to i8
  store i8 %3165, i8* %30, align 1
  %3166 = lshr i32 %3158, 31
  %3167 = trunc i32 %3166 to i8
  store i8 %3167, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v527 = select i1 %3164, i64 115, i64 13
  %3168 = add i64 %2017, %.v527
  store i64 %3168, i64* %3, align 8
  br i1 %3164, label %block_.L_4054a1, label %block_40543b

block_40543b:                                     ; preds = %block_.L_40542e
  %3169 = add i64 %3168, 6
  store i64 %3169, i64* %3, align 8
  %3170 = load i32, i32* %3157, align 4
  %3171 = zext i32 %3170 to i64
  store i64 %3171, i64* %RDI.i3360, align 8
  %3172 = add i64 %1988, -20
  %3173 = add i64 %3168, 9
  store i64 %3173, i64* %3, align 8
  %3174 = inttoptr i64 %3172 to i32*
  %3175 = load i32, i32* %3174, align 4
  %3176 = zext i32 %3175 to i64
  store i64 %3176, i64* %RSI.i3112.pre-phi, align 8
  %3177 = add i64 %3168, 419829
  %3178 = add i64 %3168, 14
  %3179 = load i64, i64* %6, align 8
  %3180 = add i64 %3179, -8
  %3181 = inttoptr i64 %3180 to i64*
  store i64 %3178, i64* %3181, align 8
  store i64 %3180, i64* %6, align 8
  store i64 %3177, i64* %3, align 8
  %call2_405444 = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %3177, %struct.Memory* %MEMORY.38)
  %3182 = load i32, i32* %EAX.i3678, align 4
  %3183 = load i64, i64* %3, align 8
  %3184 = add i32 %3182, -5
  %3185 = icmp ult i32 %3182, 5
  %3186 = zext i1 %3185 to i8
  store i8 %3186, i8* %14, align 1
  %3187 = and i32 %3184, 255
  %3188 = tail call i32 @llvm.ctpop.i32(i32 %3187)
  %3189 = trunc i32 %3188 to i8
  %3190 = and i8 %3189, 1
  %3191 = xor i8 %3190, 1
  store i8 %3191, i8* %21, align 1
  %3192 = xor i32 %3184, %3182
  %3193 = lshr i32 %3192, 4
  %3194 = trunc i32 %3193 to i8
  %3195 = and i8 %3194, 1
  store i8 %3195, i8* %27, align 1
  %3196 = icmp eq i32 %3184, 0
  %3197 = zext i1 %3196 to i8
  store i8 %3197, i8* %30, align 1
  %3198 = lshr i32 %3184, 31
  %3199 = trunc i32 %3198 to i8
  store i8 %3199, i8* %33, align 1
  %3200 = lshr i32 %3182, 31
  %3201 = xor i32 %3198, %3200
  %3202 = add nuw nsw i32 %3201, %3200
  %3203 = icmp eq i32 %3202, 2
  %3204 = zext i1 %3203 to i8
  store i8 %3204, i8* %39, align 1
  %.v528 = select i1 %3196, i64 9, i64 88
  %3205 = add i64 %3183, %.v528
  store i64 %3205, i64* %3, align 8
  %3206 = load i64, i64* %RBP.i, align 8
  br i1 %3196, label %block_405452, label %block_.L_4054a1

block_405452:                                     ; preds = %block_40543b
  %3207 = add i64 %3206, -8080
  %3208 = add i64 %3205, 6
  store i64 %3208, i64* %3, align 8
  %3209 = inttoptr i64 %3207 to i32*
  %3210 = load i32, i32* %3209, align 4
  %3211 = zext i32 %3210 to i64
  store i64 %3211, i64* %RAX.i2528, align 8
  %3212 = add i64 %3206, -16
  %3213 = add i64 %3205, 10
  store i64 %3213, i64* %3, align 8
  %3214 = inttoptr i64 %3212 to i64*
  %3215 = load i64, i64* %3214, align 8
  store i64 %3215, i64* %RCX.i3786, align 8
  %3216 = add i64 %3205, 12
  store i64 %3216, i64* %3, align 8
  %3217 = inttoptr i64 %3215 to i32*
  store i32 %3210, i32* %3217, align 4
  %3218 = load i64, i64* %3, align 8
  %3219 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %3220 = and i32 %3219, 131072
  %3221 = zext i32 %3220 to i64
  store i64 %3221, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit502 = lshr exact i32 %3220, 17
  %3222 = trunc i32 %.lobit502 to i8
  %3223 = xor i8 %3222, 1
  store i8 %3223, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3224 = icmp eq i8 %3223, 0
  %.v681 = select i1 %3224, i64 26, i64 21
  %3225 = add i64 %3218, %.v681
  store i64 %3225, i64* %3, align 8
  br i1 %3224, label %block_.L_405478, label %block_405473

block_405473:                                     ; preds = %block_405452
  %3226 = add i64 %3225, 34
  store i64 %3226, i64* %3, align 8
  br label %block_.L_405495

block_.L_405478:                                  ; preds = %block_405452
  store i64 ptrtoint (%G__0x579e0b_type* @G__0x579e0b to i64), i64* %RDI.i3360, align 8
  %3227 = load i64, i64* %RBP.i, align 8
  %3228 = add i64 %3227, -8080
  %3229 = add i64 %3225, 16
  store i64 %3229, i64* %3, align 8
  %3230 = inttoptr i64 %3228 to i32*
  %3231 = load i32, i32* %3230, align 4
  %3232 = zext i32 %3231 to i64
  store i64 %3232, i64* %RSI.i3112.pre-phi, align 8
  %AL.i2772 = bitcast %union.anon* %40 to i8*
  store i8 0, i8* %AL.i2772, align 1
  %3233 = add i64 %3225, 313656
  %3234 = add i64 %3225, 23
  %3235 = load i64, i64* %6, align 8
  %3236 = add i64 %3235, -8
  %3237 = inttoptr i64 %3236 to i64*
  store i64 %3234, i64* %3237, align 8
  store i64 %3236, i64* %6, align 8
  store i64 %3233, i64* %3, align 8
  %call2_40548a = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %3233, %struct.Memory* %call2_405444)
  %3238 = load i64, i64* %RBP.i, align 8
  %3239 = add i64 %3238, -10964
  %3240 = load i32, i32* %EAX.i3678, align 4
  %3241 = load i64, i64* %3, align 8
  %3242 = add i64 %3241, 6
  store i64 %3242, i64* %3, align 8
  %3243 = inttoptr i64 %3239 to i32*
  store i32 %3240, i32* %3243, align 4
  %.pre379 = load i64, i64* %3, align 8
  br label %block_.L_405495

block_.L_405495:                                  ; preds = %block_.L_405478, %block_405473
  %3244 = phi i64 [ %.pre379, %block_.L_405478 ], [ %3226, %block_405473 ]
  %MEMORY.46 = phi %struct.Memory* [ %call2_40548a, %block_.L_405478 ], [ %call2_405444, %block_405473 ]
  %3245 = load i64, i64* %RBP.i, align 8
  %3246 = add i64 %3245, -4
  %3247 = add i64 %3244, 7
  store i64 %3247, i64* %3, align 8
  %3248 = inttoptr i64 %3246 to i32*
  store i32 1, i32* %3248, align 4
  %3249 = load i64, i64* %3, align 8
  %3250 = add i64 %3249, 6868
  store i64 %3250, i64* %3, align 8
  br label %block_.L_406f70

block_.L_4054a1:                                  ; preds = %block_40543b, %block_.L_40542e
  %3251 = phi i64 [ %3168, %block_.L_40542e ], [ %3205, %block_40543b ]
  %3252 = phi i64 [ %1988, %block_.L_40542e ], [ %3206, %block_40543b ]
  %MEMORY.47 = phi %struct.Memory* [ %MEMORY.38, %block_.L_40542e ], [ %call2_405444, %block_40543b ]
  %3253 = add i64 %3252, -8072
  %3254 = add i64 %3251, 10
  store i64 %3254, i64* %3, align 8
  %3255 = inttoptr i64 %3253 to i32*
  store i32 21, i32* %3255, align 4
  %.pre381 = load i64, i64* %3, align 8
  br label %block_.L_4054ab

block_.L_4054ab:                                  ; preds = %block_.L_40564d, %block_.L_4054a1
  %3256 = phi i64 [ %.pre381, %block_.L_4054a1 ], [ %3899, %block_.L_40564d ]
  %3257 = load i64, i64* %RBP.i, align 8
  %3258 = add i64 %3257, -8072
  %3259 = add i64 %3256, 10
  store i64 %3259, i64* %3, align 8
  %3260 = inttoptr i64 %3258 to i32*
  %3261 = load i32, i32* %3260, align 4
  %3262 = add i32 %3261, -400
  %3263 = icmp ult i32 %3261, 400
  %3264 = zext i1 %3263 to i8
  store i8 %3264, i8* %14, align 1
  %3265 = and i32 %3262, 255
  %3266 = tail call i32 @llvm.ctpop.i32(i32 %3265)
  %3267 = trunc i32 %3266 to i8
  %3268 = and i8 %3267, 1
  %3269 = xor i8 %3268, 1
  store i8 %3269, i8* %21, align 1
  %3270 = xor i32 %3261, 16
  %3271 = xor i32 %3270, %3262
  %3272 = lshr i32 %3271, 4
  %3273 = trunc i32 %3272 to i8
  %3274 = and i8 %3273, 1
  store i8 %3274, i8* %27, align 1
  %3275 = icmp eq i32 %3262, 0
  %3276 = zext i1 %3275 to i8
  store i8 %3276, i8* %30, align 1
  %3277 = lshr i32 %3262, 31
  %3278 = trunc i32 %3277 to i8
  store i8 %3278, i8* %33, align 1
  %3279 = lshr i32 %3261, 31
  %3280 = xor i32 %3277, %3279
  %3281 = add nuw nsw i32 %3280, %3279
  %3282 = icmp eq i32 %3281, 2
  %3283 = zext i1 %3282 to i8
  store i8 %3283, i8* %39, align 1
  %3284 = icmp ne i8 %3278, 0
  %3285 = xor i1 %3284, %3282
  %.v529 = select i1 %3285, i64 16, i64 443
  %3286 = add i64 %3256, %.v529
  store i64 %3286, i64* %3, align 8
  br i1 %3285, label %block_4054bb, label %block_.L_405666

block_4054bb:                                     ; preds = %block_.L_4054ab
  %3287 = add i64 %3286, 7
  store i64 %3287, i64* %3, align 8
  %3288 = load i32, i32* %3260, align 4
  %3289 = sext i32 %3288 to i64
  store i64 %3289, i64* %RAX.i2528, align 8
  %3290 = add nsw i64 %3289, 12099168
  %3291 = add i64 %3286, 15
  store i64 %3291, i64* %3, align 8
  %3292 = inttoptr i64 %3290 to i8*
  %3293 = load i8, i8* %3292, align 1
  %3294 = zext i8 %3293 to i64
  store i64 %3294, i64* %RCX.i3786, align 8
  %3295 = zext i8 %3293 to i32
  %3296 = add i64 %3257, -44
  %3297 = add i64 %3286, 18
  store i64 %3297, i64* %3, align 8
  %3298 = inttoptr i64 %3296 to i32*
  %3299 = load i32, i32* %3298, align 4
  %3300 = sub i32 %3295, %3299
  %3301 = icmp ult i32 %3295, %3299
  %3302 = zext i1 %3301 to i8
  store i8 %3302, i8* %14, align 1
  %3303 = and i32 %3300, 255
  %3304 = tail call i32 @llvm.ctpop.i32(i32 %3303)
  %3305 = trunc i32 %3304 to i8
  %3306 = and i8 %3305, 1
  %3307 = xor i8 %3306, 1
  store i8 %3307, i8* %21, align 1
  %3308 = xor i32 %3299, %3295
  %3309 = xor i32 %3308, %3300
  %3310 = lshr i32 %3309, 4
  %3311 = trunc i32 %3310 to i8
  %3312 = and i8 %3311, 1
  store i8 %3312, i8* %27, align 1
  %3313 = icmp eq i32 %3300, 0
  %3314 = zext i1 %3313 to i8
  store i8 %3314, i8* %30, align 1
  %3315 = lshr i32 %3300, 31
  %3316 = trunc i32 %3315 to i8
  store i8 %3316, i8* %33, align 1
  %3317 = lshr i32 %3299, 31
  %3318 = add nuw nsw i32 %3315, %3317
  %3319 = icmp eq i32 %3318, 2
  %3320 = zext i1 %3319 to i8
  store i8 %3320, i8* %39, align 1
  %.v668 = select i1 %3313, i64 24, i64 402
  %3321 = add i64 %3286, %.v668
  store i64 %3321, i64* %3, align 8
  br i1 %3313, label %block_4054d3, label %block_.L_40564d

block_4054d3:                                     ; preds = %block_4054bb
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %3322 = add i64 %3321, 17
  store i64 %3322, i64* %3, align 8
  %3323 = load i32, i32* %3260, align 4
  %3324 = sext i32 %3323 to i64
  %3325 = mul nsw i64 %3324, 380
  store i64 %3325, i64* %RCX.i3786, align 8
  %3326 = lshr i64 %3325, 63
  %3327 = add i64 %3325, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %3327, i64* %RAX.i2528, align 8
  %3328 = icmp ult i64 %3327, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %3329 = icmp ult i64 %3327, %3325
  %3330 = or i1 %3328, %3329
  %3331 = zext i1 %3330 to i8
  store i8 %3331, i8* %14, align 1
  %3332 = trunc i64 %3327 to i32
  %3333 = and i32 %3332, 252
  %3334 = tail call i32 @llvm.ctpop.i32(i32 %3333)
  %3335 = trunc i32 %3334 to i8
  %3336 = and i8 %3335, 1
  %3337 = xor i8 %3336, 1
  store i8 %3337, i8* %21, align 1
  %3338 = xor i64 %3325, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %3339 = xor i64 %3338, %3327
  %3340 = lshr i64 %3339, 4
  %3341 = trunc i64 %3340 to i8
  %3342 = and i8 %3341, 1
  store i8 %3342, i8* %27, align 1
  %3343 = icmp eq i64 %3327, 0
  %3344 = zext i1 %3343 to i8
  store i8 %3344, i8* %30, align 1
  %3345 = lshr i64 %3327, 63
  %3346 = trunc i64 %3345 to i8
  store i8 %3346, i8* %33, align 1
  %3347 = xor i64 %3345, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %3348 = xor i64 %3345, %3326
  %3349 = add nuw nsw i64 %3347, %3348
  %3350 = icmp eq i64 %3349, 2
  %3351 = zext i1 %3350 to i8
  store i8 %3351, i8* %39, align 1
  %3352 = add i64 %3325, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 56)
  %3353 = add i64 %3321, 31
  store i64 %3353, i64* %3, align 8
  %3354 = inttoptr i64 %3352 to i32*
  %3355 = load i32, i32* %3354, align 4
  store i8 0, i8* %14, align 1
  %3356 = and i32 %3355, 255
  %3357 = tail call i32 @llvm.ctpop.i32(i32 %3356)
  %3358 = trunc i32 %3357 to i8
  %3359 = and i8 %3358, 1
  %3360 = xor i8 %3359, 1
  store i8 %3360, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3361 = icmp eq i32 %3355, 0
  %3362 = zext i1 %3361 to i8
  store i8 %3362, i8* %30, align 1
  %3363 = lshr i32 %3355, 31
  %3364 = trunc i32 %3363 to i8
  store i8 %3364, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v669 = select i1 %3361, i64 378, i64 37
  %3365 = add i64 %3321, %.v669
  store i64 %3365, i64* %3, align 8
  br i1 %3361, label %block_.L_40564d, label %block_4054f8

block_4054f8:                                     ; preds = %block_4054d3
  %3366 = add i64 %3365, 6
  store i64 %3366, i64* %3, align 8
  %3367 = load i32, i32* %3260, align 4
  %3368 = zext i32 %3367 to i64
  store i64 %3368, i64* %RDI.i3360, align 8
  %3369 = add i64 %3365, 41608
  %3370 = add i64 %3365, 11
  %3371 = load i64, i64* %6, align 8
  %3372 = add i64 %3371, -8
  %3373 = inttoptr i64 %3372 to i64*
  store i64 %3370, i64* %3373, align 8
  store i64 %3372, i64* %6, align 8
  store i64 %3369, i64* %3, align 8
  %call2_4054fe = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %3369, %struct.Memory* %MEMORY.47)
  %3374 = load i32, i32* %EAX.i3678, align 4
  %3375 = load i64, i64* %3, align 8
  %3376 = add i32 %3374, -1
  %3377 = icmp eq i32 %3374, 0
  %3378 = zext i1 %3377 to i8
  store i8 %3378, i8* %14, align 1
  %3379 = and i32 %3376, 255
  %3380 = tail call i32 @llvm.ctpop.i32(i32 %3379)
  %3381 = trunc i32 %3380 to i8
  %3382 = and i8 %3381, 1
  %3383 = xor i8 %3382, 1
  store i8 %3383, i8* %21, align 1
  %3384 = xor i32 %3376, %3374
  %3385 = lshr i32 %3384, 4
  %3386 = trunc i32 %3385 to i8
  %3387 = and i8 %3386, 1
  store i8 %3387, i8* %27, align 1
  %3388 = icmp eq i32 %3376, 0
  %3389 = zext i1 %3388 to i8
  store i8 %3389, i8* %30, align 1
  %3390 = lshr i32 %3376, 31
  %3391 = trunc i32 %3390 to i8
  store i8 %3391, i8* %33, align 1
  %3392 = lshr i32 %3374, 31
  %3393 = xor i32 %3390, %3392
  %3394 = add nuw nsw i32 %3393, %3392
  %3395 = icmp eq i32 %3394, 2
  %3396 = zext i1 %3395 to i8
  store i8 %3396, i8* %39, align 1
  %.v670 = select i1 %3388, i64 9, i64 330
  %3397 = add i64 %3375, %.v670
  store i64 %3397, i64* %3, align 8
  br i1 %3388, label %block_40550c, label %block_.L_40564d

block_40550c:                                     ; preds = %block_4054f8
  %3398 = load i64, i64* %RBP.i, align 8
  %3399 = add i64 %3398, -8072
  %3400 = add i64 %3397, 6
  store i64 %3400, i64* %3, align 8
  %3401 = inttoptr i64 %3399 to i32*
  %3402 = load i32, i32* %3401, align 4
  %3403 = add i32 %3402, 20
  %3404 = zext i32 %3403 to i64
  store i64 %3404, i64* %RAX.i2528, align 8
  %3405 = icmp ugt i32 %3402, -21
  %3406 = zext i1 %3405 to i8
  store i8 %3406, i8* %14, align 1
  %3407 = and i32 %3403, 255
  %3408 = tail call i32 @llvm.ctpop.i32(i32 %3407)
  %3409 = trunc i32 %3408 to i8
  %3410 = and i8 %3409, 1
  %3411 = xor i8 %3410, 1
  store i8 %3411, i8* %21, align 1
  %3412 = xor i32 %3402, 16
  %3413 = xor i32 %3412, %3403
  %3414 = lshr i32 %3413, 4
  %3415 = trunc i32 %3414 to i8
  %3416 = and i8 %3415, 1
  store i8 %3416, i8* %27, align 1
  %3417 = icmp eq i32 %3403, 0
  %3418 = zext i1 %3417 to i8
  store i8 %3418, i8* %30, align 1
  %3419 = lshr i32 %3403, 31
  %3420 = trunc i32 %3419 to i8
  store i8 %3420, i8* %33, align 1
  %3421 = lshr i32 %3402, 31
  %3422 = xor i32 %3419, %3421
  %3423 = add nuw nsw i32 %3422, %3419
  %3424 = icmp eq i32 %3423, 2
  %3425 = zext i1 %3424 to i8
  store i8 %3425, i8* %39, align 1
  %3426 = sext i32 %3403 to i64
  store i64 %3426, i64* %RCX.i3786, align 8
  %3427 = add nsw i64 %3426, 12099168
  %3428 = add i64 %3397, 20
  store i64 %3428, i64* %3, align 8
  %3429 = inttoptr i64 %3427 to i8*
  %3430 = load i8, i8* %3429, align 1
  %3431 = zext i8 %3430 to i64
  store i64 %3431, i64* %RAX.i2528, align 8
  %3432 = zext i8 %3430 to i32
  %3433 = add nsw i32 %3432, -3
  %3434 = icmp ult i8 %3430, 3
  %3435 = zext i1 %3434 to i8
  store i8 %3435, i8* %14, align 1
  %3436 = and i32 %3433, 255
  %3437 = tail call i32 @llvm.ctpop.i32(i32 %3436)
  %3438 = trunc i32 %3437 to i8
  %3439 = and i8 %3438, 1
  %3440 = xor i8 %3439, 1
  store i8 %3440, i8* %21, align 1
  %3441 = xor i32 %3433, %3432
  %3442 = lshr i32 %3441, 4
  %3443 = trunc i32 %3442 to i8
  %3444 = and i8 %3443, 1
  store i8 %3444, i8* %27, align 1
  %3445 = icmp eq i32 %3433, 0
  %3446 = zext i1 %3445 to i8
  store i8 %3446, i8* %30, align 1
  %3447 = lshr i32 %3433, 31
  %3448 = trunc i32 %3447 to i8
  store i8 %3448, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v671 = select i1 %3445, i64 55, i64 29
  %3449 = add i64 %3397, %.v671
  store i64 %3449, i64* %3, align 8
  br i1 %3445, label %block_.L_405543, label %block_405529

block_405529:                                     ; preds = %block_40550c
  %3450 = add i64 %3449, 6
  store i64 %3450, i64* %3, align 8
  %3451 = load i32, i32* %3401, align 4
  %3452 = add i32 %3451, 20
  %3453 = zext i32 %3452 to i64
  store i64 %3453, i64* %RAX.i2528, align 8
  %3454 = icmp ugt i32 %3451, -21
  %3455 = zext i1 %3454 to i8
  store i8 %3455, i8* %14, align 1
  %3456 = and i32 %3452, 255
  %3457 = tail call i32 @llvm.ctpop.i32(i32 %3456)
  %3458 = trunc i32 %3457 to i8
  %3459 = and i8 %3458, 1
  %3460 = xor i8 %3459, 1
  store i8 %3460, i8* %21, align 1
  %3461 = xor i32 %3451, 16
  %3462 = xor i32 %3461, %3452
  %3463 = lshr i32 %3462, 4
  %3464 = trunc i32 %3463 to i8
  %3465 = and i8 %3464, 1
  store i8 %3465, i8* %27, align 1
  %3466 = icmp eq i32 %3452, 0
  %3467 = zext i1 %3466 to i8
  store i8 %3467, i8* %30, align 1
  %3468 = lshr i32 %3452, 31
  %3469 = trunc i32 %3468 to i8
  store i8 %3469, i8* %33, align 1
  %3470 = lshr i32 %3451, 31
  %3471 = xor i32 %3468, %3470
  %3472 = add nuw nsw i32 %3471, %3468
  %3473 = icmp eq i32 %3472, 2
  %3474 = zext i1 %3473 to i8
  store i8 %3474, i8* %39, align 1
  %3475 = sext i32 %3452 to i64
  store i64 %3475, i64* %RCX.i3786, align 8
  %3476 = shl nsw i64 %3475, 2
  %3477 = add nsw i64 %3476, -1648
  %3478 = add i64 %3477, %3398
  %3479 = add i64 %3449, 20
  store i64 %3479, i64* %3, align 8
  %3480 = inttoptr i64 %3478 to i32*
  %3481 = load i32, i32* %3480, align 4
  store i8 0, i8* %14, align 1
  %3482 = and i32 %3481, 255
  %3483 = tail call i32 @llvm.ctpop.i32(i32 %3482)
  %3484 = trunc i32 %3483 to i8
  %3485 = and i8 %3484, 1
  %3486 = xor i8 %3485, 1
  store i8 %3486, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3487 = icmp eq i32 %3481, 0
  %3488 = zext i1 %3487 to i8
  store i8 %3488, i8* %30, align 1
  %3489 = lshr i32 %3481, 31
  %3490 = trunc i32 %3489 to i8
  store i8 %3490, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v672 = select i1 %3487, i64 191, i64 26
  %3491 = add i64 %3449, %.v672
  store i64 %3491, i64* %3, align 8
  br i1 %3487, label %block_.L_4055e8, label %block_.L_405543

block_.L_405543:                                  ; preds = %block_405529, %block_40550c
  %3492 = phi i64 [ %3491, %block_405529 ], [ %3449, %block_40550c ]
  %3493 = add i64 %3492, 6
  store i64 %3493, i64* %3, align 8
  %3494 = load i32, i32* %3401, align 4
  %3495 = add i32 %3494, -1
  %3496 = zext i32 %3495 to i64
  store i64 %3496, i64* %RAX.i2528, align 8
  %3497 = icmp eq i32 %3494, 0
  %3498 = zext i1 %3497 to i8
  store i8 %3498, i8* %14, align 1
  %3499 = and i32 %3495, 255
  %3500 = tail call i32 @llvm.ctpop.i32(i32 %3499)
  %3501 = trunc i32 %3500 to i8
  %3502 = and i8 %3501, 1
  %3503 = xor i8 %3502, 1
  store i8 %3503, i8* %21, align 1
  %3504 = xor i32 %3495, %3494
  %3505 = lshr i32 %3504, 4
  %3506 = trunc i32 %3505 to i8
  %3507 = and i8 %3506, 1
  store i8 %3507, i8* %27, align 1
  %3508 = icmp eq i32 %3495, 0
  %3509 = zext i1 %3508 to i8
  store i8 %3509, i8* %30, align 1
  %3510 = lshr i32 %3495, 31
  %3511 = trunc i32 %3510 to i8
  store i8 %3511, i8* %33, align 1
  %3512 = lshr i32 %3494, 31
  %3513 = xor i32 %3510, %3512
  %3514 = add nuw nsw i32 %3513, %3512
  %3515 = icmp eq i32 %3514, 2
  %3516 = zext i1 %3515 to i8
  store i8 %3516, i8* %39, align 1
  %3517 = sext i32 %3495 to i64
  store i64 %3517, i64* %RCX.i3786, align 8
  %3518 = add nsw i64 %3517, 12099168
  %3519 = add i64 %3492, 20
  store i64 %3519, i64* %3, align 8
  %3520 = inttoptr i64 %3518 to i8*
  %3521 = load i8, i8* %3520, align 1
  %3522 = zext i8 %3521 to i64
  store i64 %3522, i64* %RAX.i2528, align 8
  %3523 = zext i8 %3521 to i32
  %3524 = add nsw i32 %3523, -3
  %3525 = icmp ult i8 %3521, 3
  %3526 = zext i1 %3525 to i8
  store i8 %3526, i8* %14, align 1
  %3527 = and i32 %3524, 255
  %3528 = tail call i32 @llvm.ctpop.i32(i32 %3527)
  %3529 = trunc i32 %3528 to i8
  %3530 = and i8 %3529, 1
  %3531 = xor i8 %3530, 1
  store i8 %3531, i8* %21, align 1
  %3532 = xor i32 %3524, %3523
  %3533 = lshr i32 %3532, 4
  %3534 = trunc i32 %3533 to i8
  %3535 = and i8 %3534, 1
  store i8 %3535, i8* %27, align 1
  %3536 = icmp eq i32 %3524, 0
  %3537 = zext i1 %3536 to i8
  store i8 %3537, i8* %30, align 1
  %3538 = lshr i32 %3524, 31
  %3539 = trunc i32 %3538 to i8
  store i8 %3539, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v673 = select i1 %3536, i64 55, i64 29
  %3540 = add i64 %3492, %.v673
  store i64 %3540, i64* %3, align 8
  br i1 %3536, label %block_.L_40557a, label %block_405560

block_405560:                                     ; preds = %block_.L_405543
  %3541 = add i64 %3540, 6
  store i64 %3541, i64* %3, align 8
  %3542 = load i32, i32* %3401, align 4
  %3543 = add i32 %3542, -1
  %3544 = zext i32 %3543 to i64
  store i64 %3544, i64* %RAX.i2528, align 8
  %3545 = icmp eq i32 %3542, 0
  %3546 = zext i1 %3545 to i8
  store i8 %3546, i8* %14, align 1
  %3547 = and i32 %3543, 255
  %3548 = tail call i32 @llvm.ctpop.i32(i32 %3547)
  %3549 = trunc i32 %3548 to i8
  %3550 = and i8 %3549, 1
  %3551 = xor i8 %3550, 1
  store i8 %3551, i8* %21, align 1
  %3552 = xor i32 %3543, %3542
  %3553 = lshr i32 %3552, 4
  %3554 = trunc i32 %3553 to i8
  %3555 = and i8 %3554, 1
  store i8 %3555, i8* %27, align 1
  %3556 = icmp eq i32 %3543, 0
  %3557 = zext i1 %3556 to i8
  store i8 %3557, i8* %30, align 1
  %3558 = lshr i32 %3543, 31
  %3559 = trunc i32 %3558 to i8
  store i8 %3559, i8* %33, align 1
  %3560 = lshr i32 %3542, 31
  %3561 = xor i32 %3558, %3560
  %3562 = add nuw nsw i32 %3561, %3560
  %3563 = icmp eq i32 %3562, 2
  %3564 = zext i1 %3563 to i8
  store i8 %3564, i8* %39, align 1
  %3565 = sext i32 %3543 to i64
  store i64 %3565, i64* %RCX.i3786, align 8
  %3566 = shl nsw i64 %3565, 2
  %3567 = add nsw i64 %3566, -1648
  %3568 = add i64 %3567, %3398
  %3569 = add i64 %3540, 20
  store i64 %3569, i64* %3, align 8
  %3570 = inttoptr i64 %3568 to i32*
  %3571 = load i32, i32* %3570, align 4
  store i8 0, i8* %14, align 1
  %3572 = and i32 %3571, 255
  %3573 = tail call i32 @llvm.ctpop.i32(i32 %3572)
  %3574 = trunc i32 %3573 to i8
  %3575 = and i8 %3574, 1
  %3576 = xor i8 %3575, 1
  store i8 %3576, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3577 = icmp eq i32 %3571, 0
  %3578 = zext i1 %3577 to i8
  store i8 %3578, i8* %30, align 1
  %3579 = lshr i32 %3571, 31
  %3580 = trunc i32 %3579 to i8
  store i8 %3580, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v674 = select i1 %3577, i64 136, i64 26
  %3581 = add i64 %3540, %.v674
  store i64 %3581, i64* %3, align 8
  br i1 %3577, label %block_.L_4055e8, label %block_.L_40557a

block_.L_40557a:                                  ; preds = %block_405560, %block_.L_405543
  %3582 = phi i64 [ %3581, %block_405560 ], [ %3540, %block_.L_405543 ]
  %3583 = add i64 %3582, 6
  store i64 %3583, i64* %3, align 8
  %3584 = load i32, i32* %3401, align 4
  %3585 = add i32 %3584, -20
  %3586 = zext i32 %3585 to i64
  store i64 %3586, i64* %RAX.i2528, align 8
  %3587 = icmp ult i32 %3584, 20
  %3588 = zext i1 %3587 to i8
  store i8 %3588, i8* %14, align 1
  %3589 = and i32 %3585, 255
  %3590 = tail call i32 @llvm.ctpop.i32(i32 %3589)
  %3591 = trunc i32 %3590 to i8
  %3592 = and i8 %3591, 1
  %3593 = xor i8 %3592, 1
  store i8 %3593, i8* %21, align 1
  %3594 = xor i32 %3584, 16
  %3595 = xor i32 %3594, %3585
  %3596 = lshr i32 %3595, 4
  %3597 = trunc i32 %3596 to i8
  %3598 = and i8 %3597, 1
  store i8 %3598, i8* %27, align 1
  %3599 = icmp eq i32 %3585, 0
  %3600 = zext i1 %3599 to i8
  store i8 %3600, i8* %30, align 1
  %3601 = lshr i32 %3585, 31
  %3602 = trunc i32 %3601 to i8
  store i8 %3602, i8* %33, align 1
  %3603 = lshr i32 %3584, 31
  %3604 = xor i32 %3601, %3603
  %3605 = add nuw nsw i32 %3604, %3603
  %3606 = icmp eq i32 %3605, 2
  %3607 = zext i1 %3606 to i8
  store i8 %3607, i8* %39, align 1
  %3608 = sext i32 %3585 to i64
  store i64 %3608, i64* %RCX.i3786, align 8
  %3609 = add nsw i64 %3608, 12099168
  %3610 = add i64 %3582, 20
  store i64 %3610, i64* %3, align 8
  %3611 = inttoptr i64 %3609 to i8*
  %3612 = load i8, i8* %3611, align 1
  %3613 = zext i8 %3612 to i64
  store i64 %3613, i64* %RAX.i2528, align 8
  %3614 = zext i8 %3612 to i32
  %3615 = add nsw i32 %3614, -3
  %3616 = icmp ult i8 %3612, 3
  %3617 = zext i1 %3616 to i8
  store i8 %3617, i8* %14, align 1
  %3618 = and i32 %3615, 255
  %3619 = tail call i32 @llvm.ctpop.i32(i32 %3618)
  %3620 = trunc i32 %3619 to i8
  %3621 = and i8 %3620, 1
  %3622 = xor i8 %3621, 1
  store i8 %3622, i8* %21, align 1
  %3623 = xor i32 %3615, %3614
  %3624 = lshr i32 %3623, 4
  %3625 = trunc i32 %3624 to i8
  %3626 = and i8 %3625, 1
  store i8 %3626, i8* %27, align 1
  %3627 = icmp eq i32 %3615, 0
  %3628 = zext i1 %3627 to i8
  store i8 %3628, i8* %30, align 1
  %3629 = lshr i32 %3615, 31
  %3630 = trunc i32 %3629 to i8
  store i8 %3630, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v675 = select i1 %3627, i64 55, i64 29
  %3631 = add i64 %3582, %.v675
  store i64 %3631, i64* %3, align 8
  br i1 %3627, label %block_.L_4055b1, label %block_405597

block_405597:                                     ; preds = %block_.L_40557a
  %3632 = add i64 %3631, 6
  store i64 %3632, i64* %3, align 8
  %3633 = load i32, i32* %3401, align 4
  %3634 = add i32 %3633, -20
  %3635 = zext i32 %3634 to i64
  store i64 %3635, i64* %RAX.i2528, align 8
  %3636 = icmp ult i32 %3633, 20
  %3637 = zext i1 %3636 to i8
  store i8 %3637, i8* %14, align 1
  %3638 = and i32 %3634, 255
  %3639 = tail call i32 @llvm.ctpop.i32(i32 %3638)
  %3640 = trunc i32 %3639 to i8
  %3641 = and i8 %3640, 1
  %3642 = xor i8 %3641, 1
  store i8 %3642, i8* %21, align 1
  %3643 = xor i32 %3633, 16
  %3644 = xor i32 %3643, %3634
  %3645 = lshr i32 %3644, 4
  %3646 = trunc i32 %3645 to i8
  %3647 = and i8 %3646, 1
  store i8 %3647, i8* %27, align 1
  %3648 = icmp eq i32 %3634, 0
  %3649 = zext i1 %3648 to i8
  store i8 %3649, i8* %30, align 1
  %3650 = lshr i32 %3634, 31
  %3651 = trunc i32 %3650 to i8
  store i8 %3651, i8* %33, align 1
  %3652 = lshr i32 %3633, 31
  %3653 = xor i32 %3650, %3652
  %3654 = add nuw nsw i32 %3653, %3652
  %3655 = icmp eq i32 %3654, 2
  %3656 = zext i1 %3655 to i8
  store i8 %3656, i8* %39, align 1
  %3657 = sext i32 %3634 to i64
  store i64 %3657, i64* %RCX.i3786, align 8
  %3658 = shl nsw i64 %3657, 2
  %3659 = add nsw i64 %3658, -1648
  %3660 = add i64 %3659, %3398
  %3661 = add i64 %3631, 20
  store i64 %3661, i64* %3, align 8
  %3662 = inttoptr i64 %3660 to i32*
  %3663 = load i32, i32* %3662, align 4
  store i8 0, i8* %14, align 1
  %3664 = and i32 %3663, 255
  %3665 = tail call i32 @llvm.ctpop.i32(i32 %3664)
  %3666 = trunc i32 %3665 to i8
  %3667 = and i8 %3666, 1
  %3668 = xor i8 %3667, 1
  store i8 %3668, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3669 = icmp eq i32 %3663, 0
  %3670 = zext i1 %3669 to i8
  store i8 %3670, i8* %30, align 1
  %3671 = lshr i32 %3663, 31
  %3672 = trunc i32 %3671 to i8
  store i8 %3672, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v676 = select i1 %3669, i64 81, i64 26
  %3673 = add i64 %3631, %.v676
  store i64 %3673, i64* %3, align 8
  br i1 %3669, label %block_.L_4055e8, label %block_.L_4055b1

block_.L_4055b1:                                  ; preds = %block_405597, %block_.L_40557a
  %3674 = phi i64 [ %3673, %block_405597 ], [ %3631, %block_.L_40557a ]
  %3675 = add i64 %3674, 6
  store i64 %3675, i64* %3, align 8
  %3676 = load i32, i32* %3401, align 4
  %3677 = add i32 %3676, 1
  %3678 = zext i32 %3677 to i64
  store i64 %3678, i64* %RAX.i2528, align 8
  %3679 = icmp eq i32 %3676, -1
  %3680 = icmp eq i32 %3677, 0
  %3681 = or i1 %3679, %3680
  %3682 = zext i1 %3681 to i8
  store i8 %3682, i8* %14, align 1
  %3683 = and i32 %3677, 255
  %3684 = tail call i32 @llvm.ctpop.i32(i32 %3683)
  %3685 = trunc i32 %3684 to i8
  %3686 = and i8 %3685, 1
  %3687 = xor i8 %3686, 1
  store i8 %3687, i8* %21, align 1
  %3688 = xor i32 %3677, %3676
  %3689 = lshr i32 %3688, 4
  %3690 = trunc i32 %3689 to i8
  %3691 = and i8 %3690, 1
  store i8 %3691, i8* %27, align 1
  %3692 = zext i1 %3680 to i8
  store i8 %3692, i8* %30, align 1
  %3693 = lshr i32 %3677, 31
  %3694 = trunc i32 %3693 to i8
  store i8 %3694, i8* %33, align 1
  %3695 = lshr i32 %3676, 31
  %3696 = xor i32 %3693, %3695
  %3697 = add nuw nsw i32 %3696, %3693
  %3698 = icmp eq i32 %3697, 2
  %3699 = zext i1 %3698 to i8
  store i8 %3699, i8* %39, align 1
  %3700 = sext i32 %3677 to i64
  store i64 %3700, i64* %RCX.i3786, align 8
  %3701 = add nsw i64 %3700, 12099168
  %3702 = add i64 %3674, 20
  store i64 %3702, i64* %3, align 8
  %3703 = inttoptr i64 %3701 to i8*
  %3704 = load i8, i8* %3703, align 1
  %3705 = zext i8 %3704 to i64
  store i64 %3705, i64* %RAX.i2528, align 8
  %3706 = zext i8 %3704 to i32
  %3707 = add nsw i32 %3706, -3
  %3708 = icmp ult i8 %3704, 3
  %3709 = zext i1 %3708 to i8
  store i8 %3709, i8* %14, align 1
  %3710 = and i32 %3707, 255
  %3711 = tail call i32 @llvm.ctpop.i32(i32 %3710)
  %3712 = trunc i32 %3711 to i8
  %3713 = and i8 %3712, 1
  %3714 = xor i8 %3713, 1
  store i8 %3714, i8* %21, align 1
  %3715 = xor i32 %3707, %3706
  %3716 = lshr i32 %3715, 4
  %3717 = trunc i32 %3716 to i8
  %3718 = and i8 %3717, 1
  store i8 %3718, i8* %27, align 1
  %3719 = icmp eq i32 %3707, 0
  %3720 = zext i1 %3719 to i8
  store i8 %3720, i8* %30, align 1
  %3721 = lshr i32 %3707, 31
  %3722 = trunc i32 %3721 to i8
  store i8 %3722, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v677 = select i1 %3719, i64 156, i64 29
  %3723 = add i64 %3674, %.v677
  store i64 %3723, i64* %3, align 8
  br i1 %3719, label %block_.L_40564d, label %block_4055ce

block_4055ce:                                     ; preds = %block_.L_4055b1
  %3724 = add i64 %3723, 6
  store i64 %3724, i64* %3, align 8
  %3725 = load i32, i32* %3401, align 4
  %3726 = add i32 %3725, 1
  %3727 = zext i32 %3726 to i64
  store i64 %3727, i64* %RAX.i2528, align 8
  %3728 = icmp eq i32 %3725, -1
  %3729 = icmp eq i32 %3726, 0
  %3730 = or i1 %3728, %3729
  %3731 = zext i1 %3730 to i8
  store i8 %3731, i8* %14, align 1
  %3732 = and i32 %3726, 255
  %3733 = tail call i32 @llvm.ctpop.i32(i32 %3732)
  %3734 = trunc i32 %3733 to i8
  %3735 = and i8 %3734, 1
  %3736 = xor i8 %3735, 1
  store i8 %3736, i8* %21, align 1
  %3737 = xor i32 %3726, %3725
  %3738 = lshr i32 %3737, 4
  %3739 = trunc i32 %3738 to i8
  %3740 = and i8 %3739, 1
  store i8 %3740, i8* %27, align 1
  %3741 = zext i1 %3729 to i8
  store i8 %3741, i8* %30, align 1
  %3742 = lshr i32 %3726, 31
  %3743 = trunc i32 %3742 to i8
  store i8 %3743, i8* %33, align 1
  %3744 = lshr i32 %3725, 31
  %3745 = xor i32 %3742, %3744
  %3746 = add nuw nsw i32 %3745, %3742
  %3747 = icmp eq i32 %3746, 2
  %3748 = zext i1 %3747 to i8
  store i8 %3748, i8* %39, align 1
  %3749 = sext i32 %3726 to i64
  store i64 %3749, i64* %RCX.i3786, align 8
  %3750 = shl nsw i64 %3749, 2
  %3751 = add nsw i64 %3750, -1648
  %3752 = add i64 %3751, %3398
  %3753 = add i64 %3723, 20
  store i64 %3753, i64* %3, align 8
  %3754 = inttoptr i64 %3752 to i32*
  %3755 = load i32, i32* %3754, align 4
  store i8 0, i8* %14, align 1
  %3756 = and i32 %3755, 255
  %3757 = tail call i32 @llvm.ctpop.i32(i32 %3756)
  %3758 = trunc i32 %3757 to i8
  %3759 = and i8 %3758, 1
  %3760 = xor i8 %3759, 1
  store i8 %3760, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3761 = icmp eq i32 %3755, 0
  %3762 = zext i1 %3761 to i8
  store i8 %3762, i8* %30, align 1
  %3763 = lshr i32 %3755, 31
  %3764 = trunc i32 %3763 to i8
  store i8 %3764, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v678 = select i1 %3761, i64 26, i64 127
  %3765 = add i64 %3723, %.v678
  store i64 %3765, i64* %3, align 8
  br i1 %3761, label %block_.L_4055e8, label %block_.L_40564d

block_.L_4055e8:                                  ; preds = %block_4055ce, %block_405597, %block_405560, %block_405529
  %3766 = phi i64 [ %3765, %block_4055ce ], [ %3673, %block_405597 ], [ %3581, %block_405560 ], [ %3491, %block_405529 ]
  store i64 1, i64* %RSI.i3112.pre-phi, align 8
  %3767 = add i64 %3398, -8112
  store i64 %3767, i64* %RDX.i3821, align 8
  %3768 = add i64 %3766, 18
  store i64 %3768, i64* %3, align 8
  %3769 = load i32, i32* %3401, align 4
  %3770 = zext i32 %3769 to i64
  store i64 %3770, i64* %RDI.i3360, align 8
  %3771 = add i64 %3766, 41560
  %3772 = add i64 %3766, 23
  %3773 = load i64, i64* %6, align 8
  %3774 = add i64 %3773, -8
  %3775 = inttoptr i64 %3774 to i64*
  store i64 %3772, i64* %3775, align 8
  store i64 %3774, i64* %6, align 8
  store i64 %3771, i64* %3, align 8
  %call2_4055fa = tail call %struct.Memory* @sub_40f840.findlib(%struct.State* nonnull %0, i64 %3771, %struct.Memory* %MEMORY.47)
  %3776 = load i64, i64* %RBP.i, align 8
  %3777 = add i64 %3776, -8072
  %3778 = load i64, i64* %3, align 8
  %3779 = add i64 %3778, 6
  store i64 %3779, i64* %3, align 8
  %3780 = inttoptr i64 %3777 to i32*
  %3781 = load i32, i32* %3780, align 4
  %3782 = zext i32 %3781 to i64
  store i64 %3782, i64* %RDI.i3360, align 8
  %3783 = add i64 %3776, -10968
  %3784 = load i32, i32* %EAX.i3678, align 4
  %3785 = add i64 %3778, 12
  store i64 %3785, i64* %3, align 8
  %3786 = inttoptr i64 %3783 to i32*
  store i32 %3784, i32* %3786, align 4
  %3787 = load i64, i64* %3, align 8
  %3788 = add i64 %3787, 57829
  %3789 = add i64 %3787, 5
  %3790 = load i64, i64* %6, align 8
  %3791 = add i64 %3790, -8
  %3792 = inttoptr i64 %3791 to i64*
  store i64 %3789, i64* %3792, align 8
  store i64 %3791, i64* %6, align 8
  store i64 %3788, i64* %3, align 8
  %call2_40560b = tail call %struct.Memory* @sub_4137f0.countstones(%struct.State* nonnull %0, i64 %3788, %struct.Memory* %MEMORY.47)
  %3793 = load i32, i32* %EAX.i3678, align 4
  %3794 = load i64, i64* %3, align 8
  %3795 = add i32 %3793, -1
  %3796 = icmp eq i32 %3793, 0
  %3797 = zext i1 %3796 to i8
  store i8 %3797, i8* %14, align 1
  %3798 = and i32 %3795, 255
  %3799 = tail call i32 @llvm.ctpop.i32(i32 %3798)
  %3800 = trunc i32 %3799 to i8
  %3801 = and i8 %3800, 1
  %3802 = xor i8 %3801, 1
  store i8 %3802, i8* %21, align 1
  %3803 = xor i32 %3795, %3793
  %3804 = lshr i32 %3803, 4
  %3805 = trunc i32 %3804 to i8
  %3806 = and i8 %3805, 1
  store i8 %3806, i8* %27, align 1
  %3807 = icmp eq i32 %3795, 0
  %3808 = zext i1 %3807 to i8
  store i8 %3808, i8* %30, align 1
  %3809 = lshr i32 %3795, 31
  %3810 = trunc i32 %3809 to i8
  store i8 %3810, i8* %33, align 1
  %3811 = lshr i32 %3793, 31
  %3812 = xor i32 %3809, %3811
  %3813 = add nuw nsw i32 %3812, %3811
  %3814 = icmp eq i32 %3813, 2
  %3815 = zext i1 %3814 to i8
  store i8 %3815, i8* %39, align 1
  %3816 = icmp ne i8 %3810, 0
  %3817 = xor i1 %3816, %3814
  %.demorgan513 = or i1 %3807, %3817
  %.v679 = select i1 %.demorgan513, i64 9, i64 32
  %3818 = add i64 %3794, %.v679
  store i64 %3818, i64* %3, align 8
  br i1 %.demorgan513, label %block_405619, label %block_.L_405630

block_405619:                                     ; preds = %block_.L_4055e8
  %3819 = load i64, i64* %RBP.i, align 8
  %3820 = add i64 %3819, -8112
  %3821 = add i64 %3818, 6
  store i64 %3821, i64* %3, align 8
  %3822 = inttoptr i64 %3820 to i32*
  %3823 = load i32, i32* %3822, align 4
  %3824 = zext i32 %3823 to i64
  store i64 %3824, i64* %RDI.i3360, align 8
  %3825 = add i64 %3819, -20
  %3826 = add i64 %3818, 9
  store i64 %3826, i64* %3, align 8
  %3827 = inttoptr i64 %3825 to i32*
  %3828 = load i32, i32* %3827, align 4
  %3829 = zext i32 %3828 to i64
  store i64 %3829, i64* %RSI.i3112.pre-phi, align 8
  %3830 = add i64 %3818, 60551
  %3831 = add i64 %3818, 14
  %3832 = load i64, i64* %6, align 8
  %3833 = add i64 %3832, -8
  %3834 = inttoptr i64 %3833 to i64*
  store i64 %3831, i64* %3834, align 8
  store i64 %3833, i64* %6, align 8
  store i64 %3830, i64* %3, align 8
  %call2_405622 = tail call %struct.Memory* @sub_4142a0.is_self_atari(%struct.State* nonnull %0, i64 %3830, %struct.Memory* %MEMORY.47)
  %3835 = load i32, i32* %EAX.i3678, align 4
  %3836 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %3837 = and i32 %3835, 255
  %3838 = tail call i32 @llvm.ctpop.i32(i32 %3837)
  %3839 = trunc i32 %3838 to i8
  %3840 = and i8 %3839, 1
  %3841 = xor i8 %3840, 1
  store i8 %3841, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3842 = icmp eq i32 %3835, 0
  %3843 = zext i1 %3842 to i8
  store i8 %3843, i8* %30, align 1
  %3844 = lshr i32 %3835, 31
  %3845 = trunc i32 %3844 to i8
  store i8 %3845, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v680 = select i1 %3842, i64 9, i64 33
  %3846 = add i64 %3836, %.v680
  store i64 %3846, i64* %3, align 8
  br i1 %3842, label %block_.L_405630, label %block_.L_405648

block_.L_405630:                                  ; preds = %block_405619, %block_.L_4055e8
  %3847 = phi i64 [ %3846, %block_405619 ], [ %3818, %block_.L_4055e8 ]
  %3848 = load i64, i64* %RBP.i, align 8
  %3849 = add i64 %3848, -8112
  %3850 = add i64 %3847, 6
  store i64 %3850, i64* %3, align 8
  %3851 = inttoptr i64 %3849 to i32*
  %3852 = load i32, i32* %3851, align 4
  %3853 = zext i32 %3852 to i64
  store i64 %3853, i64* %RAX.i2528, align 8
  %3854 = add i64 %3848, -16
  %3855 = add i64 %3847, 10
  store i64 %3855, i64* %3, align 8
  %3856 = inttoptr i64 %3854 to i64*
  %3857 = load i64, i64* %3856, align 8
  store i64 %3857, i64* %RCX.i3786, align 8
  %3858 = add i64 %3847, 12
  store i64 %3858, i64* %3, align 8
  %3859 = inttoptr i64 %3857 to i32*
  store i32 %3852, i32* %3859, align 4
  %3860 = load i64, i64* %RBP.i, align 8
  %3861 = add i64 %3860, -4
  %3862 = load i64, i64* %3, align 8
  %3863 = add i64 %3862, 7
  store i64 %3863, i64* %3, align 8
  %3864 = inttoptr i64 %3861 to i32*
  store i32 1, i32* %3864, align 4
  %3865 = load i64, i64* %3, align 8
  %3866 = add i64 %3865, 6445
  store i64 %3866, i64* %3, align 8
  br label %block_.L_406f70

block_.L_405648:                                  ; preds = %block_405619
  %3867 = add i64 %3846, 5
  store i64 %3867, i64* %3, align 8
  br label %block_.L_40564d

block_.L_40564d:                                  ; preds = %block_4055ce, %block_4054f8, %block_4054bb, %block_.L_405648, %block_.L_4055b1, %block_4054d3
  %3868 = phi i64 [ %3867, %block_.L_405648 ], [ %3765, %block_4055ce ], [ %3723, %block_.L_4055b1 ], [ %3397, %block_4054f8 ], [ %3365, %block_4054d3 ], [ %3321, %block_4054bb ]
  %3869 = load i64, i64* %RBP.i, align 8
  %3870 = add i64 %3869, -8072
  %3871 = add i64 %3868, 11
  store i64 %3871, i64* %3, align 8
  %3872 = inttoptr i64 %3870 to i32*
  %3873 = load i32, i32* %3872, align 4
  %3874 = add i32 %3873, 1
  %3875 = zext i32 %3874 to i64
  store i64 %3875, i64* %RAX.i2528, align 8
  %3876 = icmp eq i32 %3873, -1
  %3877 = icmp eq i32 %3874, 0
  %3878 = or i1 %3876, %3877
  %3879 = zext i1 %3878 to i8
  store i8 %3879, i8* %14, align 1
  %3880 = and i32 %3874, 255
  %3881 = tail call i32 @llvm.ctpop.i32(i32 %3880)
  %3882 = trunc i32 %3881 to i8
  %3883 = and i8 %3882, 1
  %3884 = xor i8 %3883, 1
  store i8 %3884, i8* %21, align 1
  %3885 = xor i32 %3874, %3873
  %3886 = lshr i32 %3885, 4
  %3887 = trunc i32 %3886 to i8
  %3888 = and i8 %3887, 1
  store i8 %3888, i8* %27, align 1
  %3889 = zext i1 %3877 to i8
  store i8 %3889, i8* %30, align 1
  %3890 = lshr i32 %3874, 31
  %3891 = trunc i32 %3890 to i8
  store i8 %3891, i8* %33, align 1
  %3892 = lshr i32 %3873, 31
  %3893 = xor i32 %3890, %3892
  %3894 = add nuw nsw i32 %3893, %3890
  %3895 = icmp eq i32 %3894, 2
  %3896 = zext i1 %3895 to i8
  store i8 %3896, i8* %39, align 1
  %3897 = add i64 %3868, 20
  store i64 %3897, i64* %3, align 8
  store i32 %3874, i32* %3872, align 4
  %3898 = load i64, i64* %3, align 8
  %3899 = add i64 %3898, -438
  store i64 %3899, i64* %3, align 8
  br label %block_.L_4054ab

block_.L_405666:                                  ; preds = %block_.L_4054ab
  %3900 = add i64 %3257, -8056
  %3901 = add i64 %3286, 7
  store i64 %3901, i64* %3, align 8
  %3902 = inttoptr i64 %3900 to i32*
  %3903 = load i32, i32* %3902, align 4
  store i8 0, i8* %14, align 1
  %3904 = and i32 %3903, 255
  %3905 = tail call i32 @llvm.ctpop.i32(i32 %3904)
  %3906 = trunc i32 %3905 to i8
  %3907 = and i8 %3906, 1
  %3908 = xor i8 %3907, 1
  store i8 %3908, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3909 = icmp eq i32 %3903, 0
  %3910 = zext i1 %3909 to i8
  store i8 %3910, i8* %30, align 1
  %3911 = lshr i32 %3903, 31
  %3912 = trunc i32 %3911 to i8
  store i8 %3912, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v530 = select i1 %3909, i64 13, i64 26
  %3913 = add i64 %3286, %.v530
  store i64 %3913, i64* %3, align 8
  %3914 = add i64 %3257, -8060
  br i1 %3909, label %block_405673, label %block_.L_405666.block_.L_405680_crit_edge

block_.L_405666.block_.L_405680_crit_edge:        ; preds = %block_.L_405666
  %.pre495 = inttoptr i64 %3914 to i32*
  br label %block_.L_405680

block_405673:                                     ; preds = %block_.L_405666
  %3915 = add i64 %3913, 7
  store i64 %3915, i64* %3, align 8
  %3916 = inttoptr i64 %3914 to i32*
  %3917 = load i32, i32* %3916, align 4
  store i8 0, i8* %14, align 1
  %3918 = and i32 %3917, 255
  %3919 = tail call i32 @llvm.ctpop.i32(i32 %3918)
  %3920 = trunc i32 %3919 to i8
  %3921 = and i8 %3920, 1
  %3922 = xor i8 %3921, 1
  store i8 %3922, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3923 = icmp eq i32 %3917, 0
  %3924 = zext i1 %3923 to i8
  store i8 %3924, i8* %30, align 1
  %3925 = lshr i32 %3917, 31
  %3926 = trunc i32 %3925 to i8
  store i8 %3926, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v554 = select i1 %3923, i64 1176, i64 13
  %3927 = add i64 %3913, %.v554
  store i64 %3927, i64* %3, align 8
  br i1 %3923, label %block_.L_405b0b, label %block_.L_405680

block_.L_405680:                                  ; preds = %block_.L_405666.block_.L_405680_crit_edge, %block_405673
  %.pre-phi496 = phi i32* [ %.pre495, %block_.L_405666.block_.L_405680_crit_edge ], [ %3916, %block_405673 ]
  %3928 = phi i64 [ %3913, %block_.L_405666.block_.L_405680_crit_edge ], [ %3927, %block_405673 ]
  %3929 = add i64 %3928, 7
  store i64 %3929, i64* %3, align 8
  %3930 = load i32, i32* %.pre-phi496, align 4
  store i8 0, i8* %14, align 1
  %3931 = and i32 %3930, 255
  %3932 = tail call i32 @llvm.ctpop.i32(i32 %3931)
  %3933 = trunc i32 %3932 to i8
  %3934 = and i8 %3933, 1
  %3935 = xor i8 %3934, 1
  store i8 %3935, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3936 = icmp eq i32 %3930, 0
  %3937 = zext i1 %3936 to i8
  store i8 %3937, i8* %30, align 1
  %3938 = lshr i32 %3930, 31
  %3939 = trunc i32 %3938 to i8
  store i8 %3939, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v531 = select i1 %3936, i64 13, i64 30
  %3940 = add i64 %3928, %.v531
  %3941 = add i64 %3940, 6
  store i64 %3941, i64* %3, align 8
  br i1 %3936, label %block_40568d, label %block_.L_40569e

block_40568d:                                     ; preds = %block_.L_405680
  %3942 = load i32, i32* %3902, align 4
  %3943 = zext i32 %3942 to i64
  store i64 %3943, i64* %RAX.i2528, align 8
  %3944 = add i64 %3257, -8068
  %3945 = add i64 %3940, 12
  store i64 %3945, i64* %3, align 8
  %3946 = inttoptr i64 %3944 to i32*
  store i32 %3942, i32* %3946, align 4
  %3947 = load i64, i64* %3, align 8
  %3948 = add i64 %3947, 17
  store i64 %3948, i64* %3, align 8
  br label %block_.L_4056aa

block_.L_40569e:                                  ; preds = %block_.L_405680
  %3949 = load i32, i32* %.pre-phi496, align 4
  %3950 = zext i32 %3949 to i64
  store i64 %3950, i64* %RAX.i2528, align 8
  %3951 = add i64 %3257, -8068
  %3952 = add i64 %3940, 12
  store i64 %3952, i64* %3, align 8
  %3953 = inttoptr i64 %3951 to i32*
  store i32 %3949, i32* %3953, align 4
  %.pre450 = load i64, i64* %3, align 8
  br label %block_.L_4056aa

block_.L_4056aa:                                  ; preds = %block_.L_40569e, %block_40568d
  %3954 = phi i64 [ %.pre450, %block_.L_40569e ], [ %3948, %block_40568d ]
  %3955 = load i64, i64* %RBP.i, align 8
  %3956 = add i64 %3955, -8068
  %3957 = add i64 %3954, 7
  store i64 %3957, i64* %3, align 8
  %3958 = inttoptr i64 %3956 to i32*
  %3959 = load i32, i32* %3958, align 4
  %3960 = sext i32 %3959 to i64
  store i64 %3960, i64* %RAX.i2528, align 8
  %3961 = shl nsw i64 %3960, 2
  %3962 = add i64 %3955, -1648
  %3963 = add i64 %3962, %3961
  %3964 = add i64 %3954, 15
  store i64 %3964, i64* %3, align 8
  %3965 = inttoptr i64 %3963 to i32*
  %3966 = load i32, i32* %3965, align 4
  %3967 = add i32 %3966, -2
  %3968 = icmp ult i32 %3966, 2
  %3969 = zext i1 %3968 to i8
  store i8 %3969, i8* %14, align 1
  %3970 = and i32 %3967, 255
  %3971 = tail call i32 @llvm.ctpop.i32(i32 %3970)
  %3972 = trunc i32 %3971 to i8
  %3973 = and i8 %3972, 1
  %3974 = xor i8 %3973, 1
  store i8 %3974, i8* %21, align 1
  %3975 = xor i32 %3967, %3966
  %3976 = lshr i32 %3975, 4
  %3977 = trunc i32 %3976 to i8
  %3978 = and i8 %3977, 1
  store i8 %3978, i8* %27, align 1
  %3979 = icmp eq i32 %3967, 0
  %3980 = zext i1 %3979 to i8
  store i8 %3980, i8* %30, align 1
  %3981 = lshr i32 %3967, 31
  %3982 = trunc i32 %3981 to i8
  store i8 %3982, i8* %33, align 1
  %3983 = lshr i32 %3966, 31
  %3984 = xor i32 %3981, %3983
  %3985 = add nuw nsw i32 %3984, %3983
  %3986 = icmp eq i32 %3985, 2
  %3987 = zext i1 %3986 to i8
  store i8 %3987, i8* %39, align 1
  %.v532 = select i1 %3979, i64 21, i64 903
  %3988 = add i64 %3954, %.v532
  store i64 %3988, i64* %3, align 8
  br i1 %3979, label %block_4056bf, label %block_.L_405a31

block_4056bf:                                     ; preds = %block_.L_4056aa
  store i64 0, i64* %RSI.i3112.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 400, i64* %RAX.i2528, align 8
  store i64 400, i64* %RDX.i3821, align 8
  %3989 = add i64 %3955, -8512
  store i64 %3989, i64* %RDI.i3360, align 8
  %3990 = add i64 %3955, -8513
  %3991 = add i64 %3988, 23
  store i64 %3991, i64* %3, align 8
  %3992 = inttoptr i64 %3990 to i8*
  store i8 0, i8* %3992, align 1
  %3993 = load i64, i64* %3, align 8
  %3994 = add i64 %3993, -18022
  %3995 = add i64 %3993, 5
  %3996 = load i64, i64* %6, align 8
  %3997 = add i64 %3996, -8
  %3998 = inttoptr i64 %3997 to i64*
  store i64 %3995, i64* %3998, align 8
  store i64 %3997, i64* %6, align 8
  store i64 %3994, i64* %3, align 8
  %3999 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %MEMORY.47)
  %4000 = load i64, i64* %RBP.i, align 8
  %4001 = add i64 %4000, -8076
  %4002 = load i64, i64* %3, align 8
  %4003 = add i64 %4002, 10
  store i64 %4003, i64* %3, align 8
  %4004 = inttoptr i64 %4001 to i32*
  store i32 0, i32* %4004, align 4
  %4005 = load i64, i64* %RBP.i, align 8
  %4006 = add i64 %4005, -8068
  %4007 = load i64, i64* %3, align 8
  %4008 = add i64 %4007, 6
  store i64 %4008, i64* %3, align 8
  %4009 = inttoptr i64 %4006 to i32*
  %4010 = load i32, i32* %4009, align 4
  %4011 = zext i32 %4010 to i64
  store i64 %4011, i64* %RAX.i2528, align 8
  %4012 = add i64 %4005, -8080
  %4013 = add i64 %4007, 12
  store i64 %4013, i64* %3, align 8
  %4014 = inttoptr i64 %4012 to i32*
  store i32 %4010, i32* %4014, align 4
  %4015 = load i64, i64* %RBP.i, align 8
  %4016 = add i64 %4015, -8072
  %4017 = load i64, i64* %3, align 8
  %4018 = add i64 %4017, 10
  store i64 %4018, i64* %3, align 8
  %4019 = inttoptr i64 %4016 to i32*
  store i32 21, i32* %4019, align 4
  %AL.i2491 = bitcast %union.anon* %40 to i8*
  %.pre451 = load i64, i64* %3, align 8
  br label %block_.L_4056fb

block_.L_4056fb:                                  ; preds = %block_.L_405a11, %block_4056bf
  %4020 = phi i64 [ %.pre451, %block_4056bf ], [ %5191, %block_.L_405a11 ]
  %MEMORY.57 = phi %struct.Memory* [ %3999, %block_4056bf ], [ %MEMORY.73, %block_.L_405a11 ]
  %4021 = load i64, i64* %RBP.i, align 8
  %4022 = add i64 %4021, -8072
  %4023 = add i64 %4020, 10
  store i64 %4023, i64* %3, align 8
  %4024 = inttoptr i64 %4022 to i32*
  %4025 = load i32, i32* %4024, align 4
  %4026 = add i32 %4025, -400
  %4027 = icmp ult i32 %4025, 400
  %4028 = zext i1 %4027 to i8
  store i8 %4028, i8* %14, align 1
  %4029 = and i32 %4026, 255
  %4030 = tail call i32 @llvm.ctpop.i32(i32 %4029)
  %4031 = trunc i32 %4030 to i8
  %4032 = and i8 %4031, 1
  %4033 = xor i8 %4032, 1
  store i8 %4033, i8* %21, align 1
  %4034 = xor i32 %4025, 16
  %4035 = xor i32 %4034, %4026
  %4036 = lshr i32 %4035, 4
  %4037 = trunc i32 %4036 to i8
  %4038 = and i8 %4037, 1
  store i8 %4038, i8* %27, align 1
  %4039 = icmp eq i32 %4026, 0
  %4040 = zext i1 %4039 to i8
  store i8 %4040, i8* %30, align 1
  %4041 = lshr i32 %4026, 31
  %4042 = trunc i32 %4041 to i8
  store i8 %4042, i8* %33, align 1
  %4043 = lshr i32 %4025, 31
  %4044 = xor i32 %4041, %4043
  %4045 = add nuw nsw i32 %4044, %4043
  %4046 = icmp eq i32 %4045, 2
  %4047 = zext i1 %4046 to i8
  store i8 %4047, i8* %39, align 1
  %4048 = icmp ne i8 %4042, 0
  %4049 = xor i1 %4048, %4046
  %.v538 = select i1 %4049, i64 16, i64 810
  %4050 = add i64 %4020, %.v538
  store i64 %4050, i64* %3, align 8
  br i1 %4049, label %block_40570b, label %block_.L_405a25

block_40570b:                                     ; preds = %block_.L_4056fb
  %4051 = add i64 %4021, -8520
  %4052 = add i64 %4050, 10
  store i64 %4052, i64* %3, align 8
  %4053 = inttoptr i64 %4051 to i32*
  store i32 0, i32* %4053, align 4
  %4054 = load i64, i64* %RBP.i, align 8
  %4055 = add i64 %4054, -8524
  %4056 = load i64, i64* %3, align 8
  %4057 = add i64 %4056, 10
  store i64 %4057, i64* %3, align 8
  %4058 = inttoptr i64 %4055 to i32*
  store i32 0, i32* %4058, align 4
  %4059 = load i64, i64* %RBP.i, align 8
  %4060 = add i64 %4059, -8072
  %4061 = load i64, i64* %3, align 8
  %4062 = add i64 %4061, 7
  store i64 %4062, i64* %3, align 8
  %4063 = inttoptr i64 %4060 to i32*
  %4064 = load i32, i32* %4063, align 4
  %4065 = sext i32 %4064 to i64
  store i64 %4065, i64* %RAX.i2528, align 8
  %4066 = add nsw i64 %4065, 12099168
  %4067 = add i64 %4061, 15
  store i64 %4067, i64* %3, align 8
  %4068 = inttoptr i64 %4066 to i8*
  %4069 = load i8, i8* %4068, align 1
  %4070 = zext i8 %4069 to i64
  store i64 %4070, i64* %RCX.i3786, align 8
  %4071 = zext i8 %4069 to i32
  %4072 = add nsw i32 %4071, -3
  %4073 = icmp ult i8 %4069, 3
  %4074 = zext i1 %4073 to i8
  store i8 %4074, i8* %14, align 1
  %4075 = and i32 %4072, 255
  %4076 = tail call i32 @llvm.ctpop.i32(i32 %4075)
  %4077 = trunc i32 %4076 to i8
  %4078 = and i8 %4077, 1
  %4079 = xor i8 %4078, 1
  store i8 %4079, i8* %21, align 1
  %4080 = xor i32 %4072, %4071
  %4081 = lshr i32 %4080, 4
  %4082 = trunc i32 %4081 to i8
  %4083 = and i8 %4082, 1
  store i8 %4083, i8* %27, align 1
  %4084 = icmp eq i32 %4072, 0
  %4085 = zext i1 %4084 to i8
  store i8 %4085, i8* %30, align 1
  %4086 = lshr i32 %4072, 31
  %4087 = trunc i32 %4086 to i8
  store i8 %4087, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v539 = select i1 %4084, i64 45, i64 24
  %4088 = add i64 %4061, %.v539
  store i64 %4088, i64* %3, align 8
  br i1 %4084, label %block_.L_40574c, label %block_405737

block_405737:                                     ; preds = %block_40570b
  %4089 = add i64 %4088, 7
  store i64 %4089, i64* %3, align 8
  %4090 = load i32, i32* %4063, align 4
  %4091 = sext i32 %4090 to i64
  store i64 %4091, i64* %RAX.i2528, align 8
  %4092 = shl nsw i64 %4091, 2
  %4093 = add i64 %4059, -1648
  %4094 = add i64 %4093, %4092
  %4095 = add i64 %4088, 15
  store i64 %4095, i64* %3, align 8
  %4096 = inttoptr i64 %4094 to i32*
  %4097 = load i32, i32* %4096, align 4
  %4098 = add i32 %4097, -1
  %4099 = icmp eq i32 %4097, 0
  %4100 = zext i1 %4099 to i8
  store i8 %4100, i8* %14, align 1
  %4101 = and i32 %4098, 255
  %4102 = tail call i32 @llvm.ctpop.i32(i32 %4101)
  %4103 = trunc i32 %4102 to i8
  %4104 = and i8 %4103, 1
  %4105 = xor i8 %4104, 1
  store i8 %4105, i8* %21, align 1
  %4106 = xor i32 %4098, %4097
  %4107 = lshr i32 %4106, 4
  %4108 = trunc i32 %4107 to i8
  %4109 = and i8 %4108, 1
  store i8 %4109, i8* %27, align 1
  %4110 = icmp eq i32 %4098, 0
  %4111 = zext i1 %4110 to i8
  store i8 %4111, i8* %30, align 1
  %4112 = lshr i32 %4098, 31
  %4113 = trunc i32 %4112 to i8
  store i8 %4113, i8* %33, align 1
  %4114 = lshr i32 %4097, 31
  %4115 = xor i32 %4112, %4114
  %4116 = add nuw nsw i32 %4115, %4114
  %4117 = icmp eq i32 %4116, 2
  %4118 = zext i1 %4117 to i8
  store i8 %4118, i8* %39, align 1
  %.v540 = select i1 %4110, i64 26, i64 21
  %4119 = add i64 %4088, %.v540
  store i64 %4119, i64* %3, align 8
  br i1 %4110, label %block_.L_405751, label %block_.L_40574c

block_.L_40574c:                                  ; preds = %block_405737, %block_40570b
  %4120 = phi i64 [ %4119, %block_405737 ], [ %4088, %block_40570b ]
  %4121 = add i64 %4120, 709
  br label %block_.L_405a11

block_.L_405751:                                  ; preds = %block_405737
  %4122 = add i64 %4059, -8513
  %4123 = add i64 %4119, 6
  store i64 %4123, i64* %3, align 8
  %4124 = inttoptr i64 %4122 to i8*
  %4125 = load i8, i8* %4124, align 1
  %4126 = add i8 %4125, 1
  store i8 %4126, i8* %AL.i2491, align 1
  %4127 = icmp eq i8 %4125, -1
  %4128 = icmp eq i8 %4126, 0
  %4129 = or i1 %4127, %4128
  %4130 = zext i1 %4129 to i8
  store i8 %4130, i8* %14, align 1
  %4131 = zext i8 %4126 to i32
  %4132 = tail call i32 @llvm.ctpop.i32(i32 %4131)
  %4133 = trunc i32 %4132 to i8
  %4134 = and i8 %4133, 1
  %4135 = xor i8 %4134, 1
  store i8 %4135, i8* %21, align 1
  %4136 = xor i8 %4126, %4125
  %4137 = lshr i8 %4136, 4
  %4138 = and i8 %4137, 1
  store i8 %4138, i8* %27, align 1
  %4139 = zext i1 %4128 to i8
  store i8 %4139, i8* %30, align 1
  %4140 = lshr i8 %4126, 7
  store i8 %4140, i8* %33, align 1
  %4141 = lshr i8 %4125, 7
  %4142 = xor i8 %4140, %4141
  %4143 = add nuw nsw i8 %4142, %4140
  %4144 = icmp eq i8 %4143, 2
  %4145 = zext i1 %4144 to i8
  store i8 %4145, i8* %39, align 1
  %4146 = add i64 %4119, 14
  store i64 %4146, i64* %3, align 8
  store i8 %4126, i8* %4124, align 1
  %4147 = load i64, i64* %RBP.i, align 8
  %4148 = add i64 %4147, -40
  %4149 = load i64, i64* %3, align 8
  %4150 = add i64 %4149, 7
  store i64 %4150, i64* %3, align 8
  %4151 = inttoptr i64 %4148 to i32*
  store i32 0, i32* %4151, align 4
  %.pre452 = load i64, i64* %3, align 8
  br label %block_.L_405766

block_.L_405766:                                  ; preds = %block_.L_4059a1, %block_.L_405751
  %4152 = phi i64 [ %.pre452, %block_.L_405751 ], [ %5041, %block_.L_4059a1 ]
  %MEMORY.59 = phi %struct.Memory* [ %MEMORY.57, %block_.L_405751 ], [ %MEMORY.70, %block_.L_4059a1 ]
  %4153 = load i64, i64* %RBP.i, align 8
  %4154 = add i64 %4153, -40
  %4155 = add i64 %4152, 4
  store i64 %4155, i64* %3, align 8
  %4156 = inttoptr i64 %4154 to i32*
  %4157 = load i32, i32* %4156, align 4
  %4158 = add i32 %4157, -4
  %4159 = icmp ult i32 %4157, 4
  %4160 = zext i1 %4159 to i8
  store i8 %4160, i8* %14, align 1
  %4161 = and i32 %4158, 255
  %4162 = tail call i32 @llvm.ctpop.i32(i32 %4161)
  %4163 = trunc i32 %4162 to i8
  %4164 = and i8 %4163, 1
  %4165 = xor i8 %4164, 1
  store i8 %4165, i8* %21, align 1
  %4166 = xor i32 %4158, %4157
  %4167 = lshr i32 %4166, 4
  %4168 = trunc i32 %4167 to i8
  %4169 = and i8 %4168, 1
  store i8 %4169, i8* %27, align 1
  %4170 = icmp eq i32 %4158, 0
  %4171 = zext i1 %4170 to i8
  store i8 %4171, i8* %30, align 1
  %4172 = lshr i32 %4158, 31
  %4173 = trunc i32 %4172 to i8
  store i8 %4173, i8* %33, align 1
  %4174 = lshr i32 %4157, 31
  %4175 = xor i32 %4172, %4174
  %4176 = add nuw nsw i32 %4175, %4174
  %4177 = icmp eq i32 %4176, 2
  %4178 = zext i1 %4177 to i8
  store i8 %4178, i8* %39, align 1
  %4179 = icmp ne i8 %4173, 0
  %4180 = xor i1 %4179, %4177
  %.v503 = select i1 %4180, i64 10, i64 585
  %4181 = add i64 %4152, %.v503
  %4182 = add i64 %4153, -8072
  %4183 = add i64 %4181, 6
  store i64 %4183, i64* %3, align 8
  %4184 = inttoptr i64 %4182 to i32*
  %4185 = load i32, i32* %4184, align 4
  %4186 = zext i32 %4185 to i64
  br i1 %4180, label %block_405770, label %block_.L_4059af

block_405770:                                     ; preds = %block_.L_405766
  store i64 %4186, i64* %RAX.i2528, align 8
  %4187 = add i64 %4181, 10
  store i64 %4187, i64* %3, align 8
  %4188 = load i32, i32* %4156, align 4
  %4189 = sext i32 %4188 to i64
  store i64 %4189, i64* %RCX.i3786, align 8
  %4190 = shl nsw i64 %4189, 2
  %4191 = add nsw i64 %4190, 8053168
  %4192 = add i64 %4181, 17
  store i64 %4192, i64* %3, align 8
  %4193 = inttoptr i64 %4191 to i32*
  %4194 = load i32, i32* %4193, align 4
  %4195 = add i32 %4194, %4185
  %4196 = zext i32 %4195 to i64
  store i64 %4196, i64* %RAX.i2528, align 8
  %4197 = icmp ult i32 %4195, %4185
  %4198 = icmp ult i32 %4195, %4194
  %4199 = or i1 %4197, %4198
  %4200 = zext i1 %4199 to i8
  store i8 %4200, i8* %14, align 1
  %4201 = and i32 %4195, 255
  %4202 = tail call i32 @llvm.ctpop.i32(i32 %4201)
  %4203 = trunc i32 %4202 to i8
  %4204 = and i8 %4203, 1
  %4205 = xor i8 %4204, 1
  store i8 %4205, i8* %21, align 1
  %4206 = xor i32 %4194, %4185
  %4207 = xor i32 %4206, %4195
  %4208 = lshr i32 %4207, 4
  %4209 = trunc i32 %4208 to i8
  %4210 = and i8 %4209, 1
  store i8 %4210, i8* %27, align 1
  %4211 = icmp eq i32 %4195, 0
  %4212 = zext i1 %4211 to i8
  store i8 %4212, i8* %30, align 1
  %4213 = lshr i32 %4195, 31
  %4214 = trunc i32 %4213 to i8
  store i8 %4214, i8* %33, align 1
  %4215 = lshr i32 %4185, 31
  %4216 = lshr i32 %4194, 31
  %4217 = xor i32 %4213, %4215
  %4218 = xor i32 %4213, %4216
  %4219 = add nuw nsw i32 %4217, %4218
  %4220 = icmp eq i32 %4219, 2
  %4221 = zext i1 %4220 to i8
  store i8 %4221, i8* %39, align 1
  %4222 = add i64 %4153, -8528
  %4223 = add i64 %4181, 23
  store i64 %4223, i64* %3, align 8
  %4224 = inttoptr i64 %4222 to i32*
  store i32 %4195, i32* %4224, align 4
  %4225 = load i64, i64* %RBP.i, align 8
  %4226 = add i64 %4225, -8528
  %4227 = load i64, i64* %3, align 8
  %4228 = add i64 %4227, 7
  store i64 %4228, i64* %3, align 8
  %4229 = inttoptr i64 %4226 to i32*
  %4230 = load i32, i32* %4229, align 4
  %4231 = sext i32 %4230 to i64
  store i64 %4231, i64* %RCX.i3786, align 8
  %4232 = add nsw i64 %4231, 12099168
  %4233 = add i64 %4227, 15
  store i64 %4233, i64* %3, align 8
  %4234 = inttoptr i64 %4232 to i8*
  %4235 = load i8, i8* %4234, align 1
  %4236 = zext i8 %4235 to i64
  store i64 %4236, i64* %RAX.i2528, align 8
  %4237 = zext i8 %4235 to i32
  %4238 = add nsw i32 %4237, -3
  %4239 = icmp ult i8 %4235, 3
  %4240 = zext i1 %4239 to i8
  store i8 %4240, i8* %14, align 1
  %4241 = and i32 %4238, 255
  %4242 = tail call i32 @llvm.ctpop.i32(i32 %4241)
  %4243 = trunc i32 %4242 to i8
  %4244 = and i8 %4243, 1
  %4245 = xor i8 %4244, 1
  store i8 %4245, i8* %21, align 1
  %4246 = xor i32 %4238, %4237
  %4247 = lshr i32 %4246, 4
  %4248 = trunc i32 %4247 to i8
  %4249 = and i8 %4248, 1
  store i8 %4249, i8* %27, align 1
  %4250 = icmp eq i32 %4238, 0
  %4251 = zext i1 %4250 to i8
  store i8 %4251, i8* %30, align 1
  %4252 = lshr i32 %4238, 31
  %4253 = trunc i32 %4252 to i8
  store i8 %4253, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v544 = select i1 %4250, i64 24, i64 29
  %4254 = add i64 %4227, %.v544
  store i64 %4254, i64* %3, align 8
  br i1 %4250, label %block_40579f, label %block_.L_4057a4

block_40579f:                                     ; preds = %block_405770
  %4255 = add i64 %4254, 514
  br label %block_.L_4059a1

block_.L_4057a4:                                  ; preds = %block_405770
  %4256 = add i64 %4254, 7
  store i64 %4256, i64* %3, align 8
  %4257 = load i32, i32* %4229, align 4
  %4258 = sext i32 %4257 to i64
  store i64 %4258, i64* %RAX.i2528, align 8
  %4259 = shl nsw i64 %4258, 2
  %4260 = add i64 %4225, -1648
  %4261 = add i64 %4260, %4259
  %4262 = add i64 %4254, 15
  store i64 %4262, i64* %3, align 8
  %4263 = inttoptr i64 %4261 to i32*
  %4264 = load i32, i32* %4263, align 4
  %4265 = add i32 %4264, -1
  %4266 = icmp eq i32 %4264, 0
  %4267 = zext i1 %4266 to i8
  store i8 %4267, i8* %14, align 1
  %4268 = and i32 %4265, 255
  %4269 = tail call i32 @llvm.ctpop.i32(i32 %4268)
  %4270 = trunc i32 %4269 to i8
  %4271 = and i8 %4270, 1
  %4272 = xor i8 %4271, 1
  store i8 %4272, i8* %21, align 1
  %4273 = xor i32 %4265, %4264
  %4274 = lshr i32 %4273, 4
  %4275 = trunc i32 %4274 to i8
  %4276 = and i8 %4275, 1
  store i8 %4276, i8* %27, align 1
  %4277 = icmp eq i32 %4265, 0
  %4278 = zext i1 %4277 to i8
  store i8 %4278, i8* %30, align 1
  %4279 = lshr i32 %4265, 31
  %4280 = trunc i32 %4279 to i8
  store i8 %4280, i8* %33, align 1
  %4281 = lshr i32 %4264, 31
  %4282 = xor i32 %4279, %4281
  %4283 = add nuw nsw i32 %4282, %4281
  %4284 = icmp eq i32 %4283, 2
  %4285 = zext i1 %4284 to i8
  store i8 %4285, i8* %39, align 1
  %4286 = icmp ne i8 %4280, 0
  %4287 = xor i1 %4286, %4284
  %.v545 = select i1 %4287, i64 21, i64 41
  %4288 = add i64 %4254, %.v545
  store i64 %4288, i64* %3, align 8
  br i1 %4287, label %block_4057b9, label %block_.L_4057cd

block_4057b9:                                     ; preds = %block_.L_4057a4
  %4289 = add i64 %4225, -8520
  %4290 = add i64 %4288, 6
  store i64 %4290, i64* %3, align 8
  %4291 = inttoptr i64 %4289 to i32*
  %4292 = load i32, i32* %4291, align 4
  %4293 = add i32 %4292, -1
  %4294 = zext i32 %4293 to i64
  store i64 %4294, i64* %RAX.i2528, align 8
  %4295 = icmp ne i32 %4292, 0
  %4296 = zext i1 %4295 to i8
  store i8 %4296, i8* %14, align 1
  %4297 = and i32 %4293, 255
  %4298 = tail call i32 @llvm.ctpop.i32(i32 %4297)
  %4299 = trunc i32 %4298 to i8
  %4300 = and i8 %4299, 1
  %4301 = xor i8 %4300, 1
  store i8 %4301, i8* %21, align 1
  %4302 = xor i32 %4292, 16
  %4303 = xor i32 %4302, %4293
  %4304 = lshr i32 %4303, 4
  %4305 = trunc i32 %4304 to i8
  %4306 = and i8 %4305, 1
  store i8 %4306, i8* %27, align 1
  %4307 = icmp eq i32 %4293, 0
  %4308 = zext i1 %4307 to i8
  store i8 %4308, i8* %30, align 1
  %4309 = lshr i32 %4293, 31
  %4310 = trunc i32 %4309 to i8
  store i8 %4310, i8* %33, align 1
  %4311 = lshr i32 %4292, 31
  %4312 = xor i32 %4309, %4311
  %4313 = xor i32 %4309, 1
  %4314 = add nuw nsw i32 %4312, %4313
  %4315 = icmp eq i32 %4314, 2
  %4316 = zext i1 %4315 to i8
  store i8 %4316, i8* %39, align 1
  %4317 = add i64 %4288, 15
  store i64 %4317, i64* %3, align 8
  store i32 %4293, i32* %4291, align 4
  %4318 = load i64, i64* %3, align 8
  %4319 = add i64 %4318, 468
  br label %block_.L_40599c

block_.L_4057cd:                                  ; preds = %block_.L_4057a4
  %4320 = add i64 %4288, 7
  store i64 %4320, i64* %3, align 8
  %4321 = load i32, i32* %4229, align 4
  %4322 = sext i32 %4321 to i64
  store i64 %4322, i64* %RAX.i2528, align 8
  %4323 = add nsw i64 %4322, 12099168
  %4324 = add i64 %4288, 15
  store i64 %4324, i64* %3, align 8
  %4325 = inttoptr i64 %4323 to i8*
  %4326 = load i8, i8* %4325, align 1
  %4327 = zext i8 %4326 to i64
  store i64 %4327, i64* %RCX.i3786, align 8
  %4328 = zext i8 %4326 to i32
  store i8 0, i8* %14, align 1
  %4329 = tail call i32 @llvm.ctpop.i32(i32 %4328)
  %4330 = trunc i32 %4329 to i8
  %4331 = and i8 %4330, 1
  %4332 = xor i8 %4331, 1
  store i8 %4332, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4333 = icmp eq i8 %4326, 0
  %4334 = zext i1 %4333 to i8
  store i8 %4334, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v546 = select i1 %4333, i64 24, i64 44
  %4335 = add i64 %4288, %.v546
  store i64 %4335, i64* %3, align 8
  br i1 %4333, label %block_4057e5, label %block_.L_4057f9

block_4057e5:                                     ; preds = %block_.L_4057cd
  %4336 = add i64 %4225, -8520
  %4337 = add i64 %4335, 6
  store i64 %4337, i64* %3, align 8
  %4338 = inttoptr i64 %4336 to i32*
  %4339 = load i32, i32* %4338, align 4
  %4340 = add i32 %4339, 1
  %4341 = zext i32 %4340 to i64
  store i64 %4341, i64* %RAX.i2528, align 8
  %4342 = icmp eq i32 %4339, -1
  %4343 = icmp eq i32 %4340, 0
  %4344 = or i1 %4342, %4343
  %4345 = zext i1 %4344 to i8
  store i8 %4345, i8* %14, align 1
  %4346 = and i32 %4340, 255
  %4347 = tail call i32 @llvm.ctpop.i32(i32 %4346)
  %4348 = trunc i32 %4347 to i8
  %4349 = and i8 %4348, 1
  %4350 = xor i8 %4349, 1
  store i8 %4350, i8* %21, align 1
  %4351 = xor i32 %4340, %4339
  %4352 = lshr i32 %4351, 4
  %4353 = trunc i32 %4352 to i8
  %4354 = and i8 %4353, 1
  store i8 %4354, i8* %27, align 1
  %4355 = zext i1 %4343 to i8
  store i8 %4355, i8* %30, align 1
  %4356 = lshr i32 %4340, 31
  %4357 = trunc i32 %4356 to i8
  store i8 %4357, i8* %33, align 1
  %4358 = lshr i32 %4339, 31
  %4359 = xor i32 %4356, %4358
  %4360 = add nuw nsw i32 %4359, %4356
  %4361 = icmp eq i32 %4360, 2
  %4362 = zext i1 %4361 to i8
  store i8 %4362, i8* %39, align 1
  %4363 = add i64 %4335, 15
  store i64 %4363, i64* %3, align 8
  store i32 %4340, i32* %4338, align 4
  %4364 = load i64, i64* %3, align 8
  %4365 = add i64 %4364, 419
  br label %block_.L_405997

block_.L_4057f9:                                  ; preds = %block_.L_4057cd
  %4366 = add i64 %4335, 7
  store i64 %4366, i64* %3, align 8
  %4367 = load i32, i32* %4229, align 4
  %4368 = sext i32 %4367 to i64
  store i64 %4368, i64* %RAX.i2528, align 8
  %4369 = add nsw i64 %4368, -8512
  %4370 = add i64 %4369, %4225
  %4371 = add i64 %4335, 15
  store i64 %4371, i64* %3, align 8
  %4372 = inttoptr i64 %4370 to i8*
  %4373 = load i8, i8* %4372, align 1
  %4374 = sext i8 %4373 to i64
  %4375 = and i64 %4374, 4294967295
  store i64 %4375, i64* %RCX.i3786, align 8
  %4376 = add i64 %4225, -8513
  %4377 = add i64 %4335, 22
  store i64 %4377, i64* %3, align 8
  %4378 = inttoptr i64 %4376 to i8*
  %4379 = load i8, i8* %4378, align 1
  %4380 = sext i8 %4379 to i64
  %4381 = and i64 %4380, 4294967295
  store i64 %4381, i64* %RDX.i3821, align 8
  %4382 = sext i8 %4373 to i32
  %4383 = sext i8 %4379 to i32
  %4384 = sub nsw i32 %4382, %4383
  %4385 = icmp ult i8 %4373, %4379
  %4386 = zext i1 %4385 to i8
  store i8 %4386, i8* %14, align 1
  %4387 = and i32 %4384, 255
  %4388 = tail call i32 @llvm.ctpop.i32(i32 %4387)
  %4389 = trunc i32 %4388 to i8
  %4390 = and i8 %4389, 1
  %4391 = xor i8 %4390, 1
  store i8 %4391, i8* %21, align 1
  %4392 = xor i8 %4379, %4373
  %4393 = zext i8 %4392 to i32
  %4394 = xor i32 %4393, %4384
  %4395 = lshr i32 %4394, 4
  %4396 = trunc i32 %4395 to i8
  %4397 = and i8 %4396, 1
  store i8 %4397, i8* %27, align 1
  %4398 = icmp eq i32 %4384, 0
  %4399 = zext i1 %4398 to i8
  store i8 %4399, i8* %30, align 1
  %4400 = lshr i32 %4384, 31
  %4401 = trunc i32 %4400 to i8
  store i8 %4401, i8* %33, align 1
  %4402 = lshr i32 %4382, 31
  %4403 = lshr i32 %4383, 31
  %4404 = xor i32 %4403, %4402
  %4405 = xor i32 %4400, %4402
  %4406 = add nuw nsw i32 %4405, %4404
  %4407 = icmp eq i32 %4406, 2
  %4408 = zext i1 %4407 to i8
  store i8 %4408, i8* %39, align 1
  %.v547 = select i1 %4398, i64 30, i64 50
  %4409 = add i64 %4335, %.v547
  store i64 %4409, i64* %3, align 8
  br i1 %4398, label %block_405817, label %block_.L_40582b

block_405817:                                     ; preds = %block_.L_4057f9
  %4410 = add i64 %4225, -8520
  %4411 = add i64 %4409, 6
  store i64 %4411, i64* %3, align 8
  %4412 = inttoptr i64 %4410 to i32*
  %4413 = load i32, i32* %4412, align 4
  %4414 = add i32 %4413, -1
  %4415 = zext i32 %4414 to i64
  store i64 %4415, i64* %RAX.i2528, align 8
  %4416 = icmp ne i32 %4413, 0
  %4417 = zext i1 %4416 to i8
  store i8 %4417, i8* %14, align 1
  %4418 = and i32 %4414, 255
  %4419 = tail call i32 @llvm.ctpop.i32(i32 %4418)
  %4420 = trunc i32 %4419 to i8
  %4421 = and i8 %4420, 1
  %4422 = xor i8 %4421, 1
  store i8 %4422, i8* %21, align 1
  %4423 = xor i32 %4413, 16
  %4424 = xor i32 %4423, %4414
  %4425 = lshr i32 %4424, 4
  %4426 = trunc i32 %4425 to i8
  %4427 = and i8 %4426, 1
  store i8 %4427, i8* %27, align 1
  %4428 = icmp eq i32 %4414, 0
  %4429 = zext i1 %4428 to i8
  store i8 %4429, i8* %30, align 1
  %4430 = lshr i32 %4414, 31
  %4431 = trunc i32 %4430 to i8
  store i8 %4431, i8* %33, align 1
  %4432 = lshr i32 %4413, 31
  %4433 = xor i32 %4430, %4432
  %4434 = xor i32 %4430, 1
  %4435 = add nuw nsw i32 %4433, %4434
  %4436 = icmp eq i32 %4435, 2
  %4437 = zext i1 %4436 to i8
  store i8 %4437, i8* %39, align 1
  %4438 = add i64 %4409, 15
  store i64 %4438, i64* %3, align 8
  store i32 %4414, i32* %4412, align 4
  %4439 = load i64, i64* %3, align 8
  %4440 = add i64 %4439, 364
  store i64 %4440, i64* %3, align 8
  br label %block_.L_405992

block_.L_40582b:                                  ; preds = %block_.L_4057f9
  %4441 = add i64 %4409, 7
  store i64 %4441, i64* %3, align 8
  %4442 = load i32, i32* %4229, align 4
  %4443 = sext i32 %4442 to i64
  store i64 %4443, i64* %RAX.i2528, align 8
  %4444 = add nsw i64 %4443, 12099168
  %4445 = add i64 %4409, 15
  store i64 %4445, i64* %3, align 8
  %4446 = inttoptr i64 %4444 to i8*
  %4447 = load i8, i8* %4446, align 1
  %4448 = zext i8 %4447 to i64
  store i64 %4448, i64* %RCX.i3786, align 8
  %4449 = zext i8 %4447 to i32
  %4450 = add i64 %4225, -20
  %4451 = add i64 %4409, 18
  store i64 %4451, i64* %3, align 8
  %4452 = inttoptr i64 %4450 to i32*
  %4453 = load i32, i32* %4452, align 4
  %4454 = sub i32 %4449, %4453
  %4455 = icmp ult i32 %4449, %4453
  %4456 = zext i1 %4455 to i8
  store i8 %4456, i8* %14, align 1
  %4457 = and i32 %4454, 255
  %4458 = tail call i32 @llvm.ctpop.i32(i32 %4457)
  %4459 = trunc i32 %4458 to i8
  %4460 = and i8 %4459, 1
  %4461 = xor i8 %4460, 1
  store i8 %4461, i8* %21, align 1
  %4462 = xor i32 %4453, %4449
  %4463 = xor i32 %4462, %4454
  %4464 = lshr i32 %4463, 4
  %4465 = trunc i32 %4464 to i8
  %4466 = and i8 %4465, 1
  store i8 %4466, i8* %27, align 1
  %4467 = icmp eq i32 %4454, 0
  %4468 = zext i1 %4467 to i8
  store i8 %4468, i8* %30, align 1
  %4469 = lshr i32 %4454, 31
  %4470 = trunc i32 %4469 to i8
  store i8 %4470, i8* %33, align 1
  %4471 = lshr i32 %4453, 31
  %4472 = add nuw nsw i32 %4469, %4471
  %4473 = icmp eq i32 %4472, 2
  %4474 = zext i1 %4473 to i8
  store i8 %4474, i8* %39, align 1
  %.v548 = select i1 %4467, i64 24, i64 194
  %4475 = add i64 %4409, %.v548
  store i64 %4475, i64* %3, align 8
  br i1 %4467, label %block_405843, label %block_.L_4058ed

block_405843:                                     ; preds = %block_.L_40582b
  %4476 = add i64 %4225, -8524
  %4477 = add i64 %4475, 10
  store i64 %4477, i64* %3, align 8
  %4478 = inttoptr i64 %4476 to i32*
  store i32 1, i32* %4478, align 4
  %4479 = load i64, i64* %RBP.i, align 8
  %4480 = add i64 %4479, -8520
  %4481 = load i64, i64* %3, align 8
  %4482 = add i64 %4481, 6
  store i64 %4482, i64* %3, align 8
  %4483 = inttoptr i64 %4480 to i32*
  %4484 = load i32, i32* %4483, align 4
  %4485 = add i32 %4484, 7
  %4486 = zext i32 %4485 to i64
  store i64 %4486, i64* %RAX.i2528, align 8
  %4487 = icmp ugt i32 %4484, -8
  %4488 = zext i1 %4487 to i8
  store i8 %4488, i8* %14, align 1
  %4489 = and i32 %4485, 255
  %4490 = tail call i32 @llvm.ctpop.i32(i32 %4489)
  %4491 = trunc i32 %4490 to i8
  %4492 = and i8 %4491, 1
  %4493 = xor i8 %4492, 1
  store i8 %4493, i8* %21, align 1
  %4494 = xor i32 %4485, %4484
  %4495 = lshr i32 %4494, 4
  %4496 = trunc i32 %4495 to i8
  %4497 = and i8 %4496, 1
  store i8 %4497, i8* %27, align 1
  %4498 = icmp eq i32 %4485, 0
  %4499 = zext i1 %4498 to i8
  store i8 %4499, i8* %30, align 1
  %4500 = lshr i32 %4485, 31
  %4501 = trunc i32 %4500 to i8
  store i8 %4501, i8* %33, align 1
  %4502 = lshr i32 %4484, 31
  %4503 = xor i32 %4500, %4502
  %4504 = add nuw nsw i32 %4503, %4500
  %4505 = icmp eq i32 %4504, 2
  %4506 = zext i1 %4505 to i8
  store i8 %4506, i8* %39, align 1
  %4507 = add i64 %4481, 15
  store i64 %4507, i64* %3, align 8
  store i32 %4485, i32* %4483, align 4
  %4508 = load i64, i64* %RBP.i, align 8
  %4509 = add i64 %4508, -8528
  %4510 = load i64, i64* %3, align 8
  %4511 = add i64 %4510, 6
  store i64 %4511, i64* %3, align 8
  %4512 = inttoptr i64 %4509 to i32*
  %4513 = load i32, i32* %4512, align 4
  %4514 = zext i32 %4513 to i64
  store i64 %4514, i64* %RDI.i3360, align 8
  %4515 = add i64 %4510, 57236
  %4516 = add i64 %4510, 11
  %4517 = load i64, i64* %6, align 8
  %4518 = add i64 %4517, -8
  %4519 = inttoptr i64 %4518 to i64*
  store i64 %4516, i64* %4519, align 8
  store i64 %4518, i64* %6, align 8
  store i64 %4515, i64* %3, align 8
  %call2_405862 = tail call %struct.Memory* @sub_4137f0.countstones(%struct.State* nonnull %0, i64 %4515, %struct.Memory* %MEMORY.59)
  %4520 = load i32, i32* %EAX.i3678, align 4
  %4521 = load i64, i64* %3, align 8
  %4522 = add i32 %4520, -2
  %4523 = icmp ult i32 %4520, 2
  %4524 = zext i1 %4523 to i8
  store i8 %4524, i8* %14, align 1
  %4525 = and i32 %4522, 255
  %4526 = tail call i32 @llvm.ctpop.i32(i32 %4525)
  %4527 = trunc i32 %4526 to i8
  %4528 = and i8 %4527, 1
  %4529 = xor i8 %4528, 1
  store i8 %4529, i8* %21, align 1
  %4530 = xor i32 %4522, %4520
  %4531 = lshr i32 %4530, 4
  %4532 = trunc i32 %4531 to i8
  %4533 = and i8 %4532, 1
  store i8 %4533, i8* %27, align 1
  %4534 = icmp eq i32 %4522, 0
  %4535 = zext i1 %4534 to i8
  store i8 %4535, i8* %30, align 1
  %4536 = lshr i32 %4522, 31
  %4537 = trunc i32 %4536 to i8
  store i8 %4537, i8* %33, align 1
  %4538 = lshr i32 %4520, 31
  %4539 = xor i32 %4536, %4538
  %4540 = add nuw nsw i32 %4539, %4538
  %4541 = icmp eq i32 %4540, 2
  %4542 = zext i1 %4541 to i8
  store i8 %4542, i8* %39, align 1
  %4543 = icmp ne i8 %4537, 0
  %4544 = xor i1 %4543, %4541
  %4545 = or i1 %4534, %4544
  %.v550 = select i1 %4545, i64 24, i64 9
  %4546 = add i64 %4521, %.v550
  store i64 %4546, i64* %3, align 8
  br i1 %4545, label %block_.L_40587f, label %block_405870

block_405870:                                     ; preds = %block_405843
  %4547 = load i64, i64* %RBP.i, align 8
  %4548 = add i64 %4547, -8520
  %4549 = add i64 %4546, 6
  store i64 %4549, i64* %3, align 8
  %4550 = inttoptr i64 %4548 to i32*
  %4551 = load i32, i32* %4550, align 4
  %4552 = add i32 %4551, 1
  %4553 = zext i32 %4552 to i64
  store i64 %4553, i64* %RAX.i2528, align 8
  %4554 = icmp eq i32 %4551, -1
  %4555 = icmp eq i32 %4552, 0
  %4556 = or i1 %4554, %4555
  %4557 = zext i1 %4556 to i8
  store i8 %4557, i8* %14, align 1
  %4558 = and i32 %4552, 255
  %4559 = tail call i32 @llvm.ctpop.i32(i32 %4558)
  %4560 = trunc i32 %4559 to i8
  %4561 = and i8 %4560, 1
  %4562 = xor i8 %4561, 1
  store i8 %4562, i8* %21, align 1
  %4563 = xor i32 %4552, %4551
  %4564 = lshr i32 %4563, 4
  %4565 = trunc i32 %4564 to i8
  %4566 = and i8 %4565, 1
  store i8 %4566, i8* %27, align 1
  %4567 = zext i1 %4555 to i8
  store i8 %4567, i8* %30, align 1
  %4568 = lshr i32 %4552, 31
  %4569 = trunc i32 %4568 to i8
  store i8 %4569, i8* %33, align 1
  %4570 = lshr i32 %4551, 31
  %4571 = xor i32 %4568, %4570
  %4572 = add nuw nsw i32 %4571, %4568
  %4573 = icmp eq i32 %4572, 2
  %4574 = zext i1 %4573 to i8
  store i8 %4574, i8* %39, align 1
  %4575 = add i64 %4546, 15
  store i64 %4575, i64* %3, align 8
  store i32 %4552, i32* %4550, align 4
  %.pre455 = load i64, i64* %3, align 8
  br label %block_.L_40587f

block_.L_40587f:                                  ; preds = %block_405870, %block_405843
  %4576 = phi i64 [ %.pre455, %block_405870 ], [ %4546, %block_405843 ]
  %4577 = load i64, i64* %RBP.i, align 8
  %4578 = add i64 %4577, -8528
  %4579 = add i64 %4576, 6
  store i64 %4579, i64* %3, align 8
  %4580 = inttoptr i64 %4578 to i32*
  %4581 = load i32, i32* %4580, align 4
  %4582 = zext i32 %4581 to i64
  store i64 %4582, i64* %RDI.i3360, align 8
  %4583 = add i64 %4576, 57201
  %4584 = add i64 %4576, 11
  %4585 = load i64, i64* %6, align 8
  %4586 = add i64 %4585, -8
  %4587 = inttoptr i64 %4586 to i64*
  store i64 %4584, i64* %4587, align 8
  store i64 %4586, i64* %6, align 8
  store i64 %4583, i64* %3, align 8
  %call2_405885 = tail call %struct.Memory* @sub_4137f0.countstones(%struct.State* nonnull %0, i64 %4583, %struct.Memory* %MEMORY.59)
  %4588 = load i32, i32* %EAX.i3678, align 4
  %4589 = load i64, i64* %3, align 8
  %4590 = add i32 %4588, -4
  %4591 = icmp ult i32 %4588, 4
  %4592 = zext i1 %4591 to i8
  store i8 %4592, i8* %14, align 1
  %4593 = and i32 %4590, 255
  %4594 = tail call i32 @llvm.ctpop.i32(i32 %4593)
  %4595 = trunc i32 %4594 to i8
  %4596 = and i8 %4595, 1
  %4597 = xor i8 %4596, 1
  store i8 %4597, i8* %21, align 1
  %4598 = xor i32 %4590, %4588
  %4599 = lshr i32 %4598, 4
  %4600 = trunc i32 %4599 to i8
  %4601 = and i8 %4600, 1
  store i8 %4601, i8* %27, align 1
  %4602 = icmp eq i32 %4590, 0
  %4603 = zext i1 %4602 to i8
  store i8 %4603, i8* %30, align 1
  %4604 = lshr i32 %4590, 31
  %4605 = trunc i32 %4604 to i8
  store i8 %4605, i8* %33, align 1
  %4606 = lshr i32 %4588, 31
  %4607 = xor i32 %4604, %4606
  %4608 = add nuw nsw i32 %4607, %4606
  %4609 = icmp eq i32 %4608, 2
  %4610 = zext i1 %4609 to i8
  store i8 %4610, i8* %39, align 1
  %4611 = icmp ne i8 %4605, 0
  %4612 = xor i1 %4611, %4609
  %4613 = or i1 %4602, %4612
  %.v551 = select i1 %4613, i64 24, i64 9
  %4614 = add i64 %4589, %.v551
  store i64 %4614, i64* %3, align 8
  br i1 %4613, label %block_.L_4058a2, label %block_405893

block_405893:                                     ; preds = %block_.L_40587f
  %4615 = load i64, i64* %RBP.i, align 8
  %4616 = add i64 %4615, -8520
  %4617 = add i64 %4614, 6
  store i64 %4617, i64* %3, align 8
  %4618 = inttoptr i64 %4616 to i32*
  %4619 = load i32, i32* %4618, align 4
  %4620 = add i32 %4619, 1
  %4621 = zext i32 %4620 to i64
  store i64 %4621, i64* %RAX.i2528, align 8
  %4622 = icmp eq i32 %4619, -1
  %4623 = icmp eq i32 %4620, 0
  %4624 = or i1 %4622, %4623
  %4625 = zext i1 %4624 to i8
  store i8 %4625, i8* %14, align 1
  %4626 = and i32 %4620, 255
  %4627 = tail call i32 @llvm.ctpop.i32(i32 %4626)
  %4628 = trunc i32 %4627 to i8
  %4629 = and i8 %4628, 1
  %4630 = xor i8 %4629, 1
  store i8 %4630, i8* %21, align 1
  %4631 = xor i32 %4620, %4619
  %4632 = lshr i32 %4631, 4
  %4633 = trunc i32 %4632 to i8
  %4634 = and i8 %4633, 1
  store i8 %4634, i8* %27, align 1
  %4635 = zext i1 %4623 to i8
  store i8 %4635, i8* %30, align 1
  %4636 = lshr i32 %4620, 31
  %4637 = trunc i32 %4636 to i8
  store i8 %4637, i8* %33, align 1
  %4638 = lshr i32 %4619, 31
  %4639 = xor i32 %4636, %4638
  %4640 = add nuw nsw i32 %4639, %4636
  %4641 = icmp eq i32 %4640, 2
  %4642 = zext i1 %4641 to i8
  store i8 %4642, i8* %39, align 1
  %4643 = add i64 %4614, 15
  store i64 %4643, i64* %3, align 8
  store i32 %4620, i32* %4618, align 4
  %.pre456 = load i64, i64* %3, align 8
  br label %block_.L_4058a2

block_.L_4058a2:                                  ; preds = %block_405893, %block_.L_40587f
  %4644 = phi i64 [ %.pre456, %block_405893 ], [ %4614, %block_.L_40587f ]
  %4645 = load i64, i64* %RBP.i, align 8
  %4646 = add i64 %4645, -8528
  %4647 = add i64 %4644, 6
  store i64 %4647, i64* %3, align 8
  %4648 = inttoptr i64 %4646 to i32*
  %4649 = load i32, i32* %4648, align 4
  %4650 = zext i32 %4649 to i64
  store i64 %4650, i64* %RDI.i3360, align 8
  %4651 = add i64 %4644, 40670
  %4652 = add i64 %4644, 11
  %4653 = load i64, i64* %6, align 8
  %4654 = add i64 %4653, -8
  %4655 = inttoptr i64 %4654 to i64*
  store i64 %4652, i64* %4655, align 8
  store i64 %4654, i64* %6, align 8
  store i64 %4651, i64* %3, align 8
  %call2_4058a8 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %4651, %struct.Memory* %MEMORY.59)
  %4656 = load i32, i32* %EAX.i3678, align 4
  %4657 = load i64, i64* %3, align 8
  %4658 = add i32 %4656, -4
  %4659 = icmp ult i32 %4656, 4
  %4660 = zext i1 %4659 to i8
  store i8 %4660, i8* %14, align 1
  %4661 = and i32 %4658, 255
  %4662 = tail call i32 @llvm.ctpop.i32(i32 %4661)
  %4663 = trunc i32 %4662 to i8
  %4664 = and i8 %4663, 1
  %4665 = xor i8 %4664, 1
  store i8 %4665, i8* %21, align 1
  %4666 = xor i32 %4658, %4656
  %4667 = lshr i32 %4666, 4
  %4668 = trunc i32 %4667 to i8
  %4669 = and i8 %4668, 1
  store i8 %4669, i8* %27, align 1
  %4670 = icmp eq i32 %4658, 0
  %4671 = zext i1 %4670 to i8
  store i8 %4671, i8* %30, align 1
  %4672 = lshr i32 %4658, 31
  %4673 = trunc i32 %4672 to i8
  store i8 %4673, i8* %33, align 1
  %4674 = lshr i32 %4656, 31
  %4675 = xor i32 %4672, %4674
  %4676 = add nuw nsw i32 %4675, %4674
  %4677 = icmp eq i32 %4676, 2
  %4678 = zext i1 %4677 to i8
  store i8 %4678, i8* %39, align 1
  %4679 = icmp ne i8 %4673, 0
  %4680 = xor i1 %4679, %4677
  %.v552 = select i1 %4680, i64 9, i64 24
  %4681 = add i64 %4657, %.v552
  store i64 %4681, i64* %3, align 8
  br i1 %4680, label %block_4058b6, label %block_.L_4058c5

block_4058b6:                                     ; preds = %block_.L_4058a2
  %4682 = load i64, i64* %RBP.i, align 8
  %4683 = add i64 %4682, -8520
  %4684 = add i64 %4681, 6
  store i64 %4684, i64* %3, align 8
  %4685 = inttoptr i64 %4683 to i32*
  %4686 = load i32, i32* %4685, align 4
  %4687 = add i32 %4686, 1
  %4688 = zext i32 %4687 to i64
  store i64 %4688, i64* %RAX.i2528, align 8
  %4689 = icmp eq i32 %4686, -1
  %4690 = icmp eq i32 %4687, 0
  %4691 = or i1 %4689, %4690
  %4692 = zext i1 %4691 to i8
  store i8 %4692, i8* %14, align 1
  %4693 = and i32 %4687, 255
  %4694 = tail call i32 @llvm.ctpop.i32(i32 %4693)
  %4695 = trunc i32 %4694 to i8
  %4696 = and i8 %4695, 1
  %4697 = xor i8 %4696, 1
  store i8 %4697, i8* %21, align 1
  %4698 = xor i32 %4687, %4686
  %4699 = lshr i32 %4698, 4
  %4700 = trunc i32 %4699 to i8
  %4701 = and i8 %4700, 1
  store i8 %4701, i8* %27, align 1
  %4702 = zext i1 %4690 to i8
  store i8 %4702, i8* %30, align 1
  %4703 = lshr i32 %4687, 31
  %4704 = trunc i32 %4703 to i8
  store i8 %4704, i8* %33, align 1
  %4705 = lshr i32 %4686, 31
  %4706 = xor i32 %4703, %4705
  %4707 = add nuw nsw i32 %4706, %4703
  %4708 = icmp eq i32 %4707, 2
  %4709 = zext i1 %4708 to i8
  store i8 %4709, i8* %39, align 1
  %4710 = add i64 %4681, 15
  store i64 %4710, i64* %3, align 8
  store i32 %4687, i32* %4685, align 4
  %.pre457 = load i64, i64* %3, align 8
  br label %block_.L_4058c5

block_.L_4058c5:                                  ; preds = %block_.L_4058a2, %block_4058b6
  %4711 = phi i64 [ %4681, %block_.L_4058a2 ], [ %.pre457, %block_4058b6 ]
  %4712 = load i64, i64* %RBP.i, align 8
  %4713 = add i64 %4712, -8528
  %4714 = add i64 %4711, 6
  store i64 %4714, i64* %3, align 8
  %4715 = inttoptr i64 %4713 to i32*
  %4716 = load i32, i32* %4715, align 4
  %4717 = zext i32 %4716 to i64
  store i64 %4717, i64* %RDI.i3360, align 8
  %4718 = add i64 %4711, 40635
  %4719 = add i64 %4711, 11
  %4720 = load i64, i64* %6, align 8
  %4721 = add i64 %4720, -8
  %4722 = inttoptr i64 %4721 to i64*
  store i64 %4719, i64* %4722, align 8
  store i64 %4721, i64* %6, align 8
  store i64 %4718, i64* %3, align 8
  %call2_4058cb = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %4718, %struct.Memory* %MEMORY.59)
  %4723 = load i32, i32* %EAX.i3678, align 4
  %4724 = load i64, i64* %3, align 8
  %4725 = add i32 %4723, -3
  %4726 = icmp ult i32 %4723, 3
  %4727 = zext i1 %4726 to i8
  store i8 %4727, i8* %14, align 1
  %4728 = and i32 %4725, 255
  %4729 = tail call i32 @llvm.ctpop.i32(i32 %4728)
  %4730 = trunc i32 %4729 to i8
  %4731 = and i8 %4730, 1
  %4732 = xor i8 %4731, 1
  store i8 %4732, i8* %21, align 1
  %4733 = xor i32 %4725, %4723
  %4734 = lshr i32 %4733, 4
  %4735 = trunc i32 %4734 to i8
  %4736 = and i8 %4735, 1
  store i8 %4736, i8* %27, align 1
  %4737 = icmp eq i32 %4725, 0
  %4738 = zext i1 %4737 to i8
  store i8 %4738, i8* %30, align 1
  %4739 = lshr i32 %4725, 31
  %4740 = trunc i32 %4739 to i8
  store i8 %4740, i8* %33, align 1
  %4741 = lshr i32 %4723, 31
  %4742 = xor i32 %4739, %4741
  %4743 = add nuw nsw i32 %4742, %4741
  %4744 = icmp eq i32 %4743, 2
  %4745 = zext i1 %4744 to i8
  store i8 %4745, i8* %39, align 1
  %4746 = icmp ne i8 %4740, 0
  %4747 = xor i1 %4746, %4744
  %.v553 = select i1 %4747, i64 9, i64 24
  %4748 = add i64 %4724, %.v553
  store i64 %4748, i64* %3, align 8
  br i1 %4747, label %block_4058d9, label %block_.L_4058e8

block_4058d9:                                     ; preds = %block_.L_4058c5
  %4749 = load i64, i64* %RBP.i, align 8
  %4750 = add i64 %4749, -8520
  %4751 = add i64 %4748, 6
  store i64 %4751, i64* %3, align 8
  %4752 = inttoptr i64 %4750 to i32*
  %4753 = load i32, i32* %4752, align 4
  %4754 = add i32 %4753, 1
  %4755 = zext i32 %4754 to i64
  store i64 %4755, i64* %RAX.i2528, align 8
  %4756 = icmp eq i32 %4753, -1
  %4757 = icmp eq i32 %4754, 0
  %4758 = or i1 %4756, %4757
  %4759 = zext i1 %4758 to i8
  store i8 %4759, i8* %14, align 1
  %4760 = and i32 %4754, 255
  %4761 = tail call i32 @llvm.ctpop.i32(i32 %4760)
  %4762 = trunc i32 %4761 to i8
  %4763 = and i8 %4762, 1
  %4764 = xor i8 %4763, 1
  store i8 %4764, i8* %21, align 1
  %4765 = xor i32 %4754, %4753
  %4766 = lshr i32 %4765, 4
  %4767 = trunc i32 %4766 to i8
  %4768 = and i8 %4767, 1
  store i8 %4768, i8* %27, align 1
  %4769 = zext i1 %4757 to i8
  store i8 %4769, i8* %30, align 1
  %4770 = lshr i32 %4754, 31
  %4771 = trunc i32 %4770 to i8
  store i8 %4771, i8* %33, align 1
  %4772 = lshr i32 %4753, 31
  %4773 = xor i32 %4770, %4772
  %4774 = add nuw nsw i32 %4773, %4770
  %4775 = icmp eq i32 %4774, 2
  %4776 = zext i1 %4775 to i8
  store i8 %4776, i8* %39, align 1
  %4777 = add i64 %4748, 15
  store i64 %4777, i64* %3, align 8
  store i32 %4754, i32* %4752, align 4
  %.pre458 = load i64, i64* %3, align 8
  br label %block_.L_4058e8

block_.L_4058e8:                                  ; preds = %block_.L_4058c5, %block_4058d9
  %4778 = phi i64 [ %4748, %block_.L_4058c5 ], [ %.pre458, %block_4058d9 ]
  %4779 = add i64 %4778, 145
  br label %block_.L_405979

block_.L_4058ed:                                  ; preds = %block_.L_40582b
  store i64 241, i64* %RDX.i3821, align 8
  %4780 = zext i32 %4442 to i64
  %4781 = xor i64 %4780, %4443
  %4782 = trunc i64 %4781 to i32
  %4783 = and i64 %4781, 4294967295
  store i64 %4783, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  %4784 = and i32 %4782, 255
  %4785 = tail call i32 @llvm.ctpop.i32(i32 %4784)
  %4786 = trunc i32 %4785 to i8
  %4787 = and i8 %4786, 1
  %4788 = xor i8 %4787, 1
  store i8 %4788, i8* %21, align 1
  %4789 = icmp eq i32 %4782, 0
  %4790 = zext i1 %4789 to i8
  store i8 %4790, i8* %30, align 1
  %4791 = lshr i32 %4782, 31
  %4792 = trunc i32 %4791 to i8
  store i8 %4792, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %4793 = and i64 %4781, 4294967295
  store i64 %4793, i64* %RCX.i3786, align 8
  %4794 = add i64 %4225, -8072
  %4795 = add i64 %4475, 15
  store i64 %4795, i64* %3, align 8
  %4796 = inttoptr i64 %4794 to i32*
  %4797 = load i32, i32* %4796, align 4
  %4798 = zext i32 %4797 to i64
  store i64 %4798, i64* %RDI.i3360, align 8
  %4799 = add i64 %4225, -44
  %4800 = add i64 %4475, 18
  store i64 %4800, i64* %3, align 8
  %4801 = inttoptr i64 %4799 to i32*
  %4802 = load i32, i32* %4801, align 4
  %4803 = zext i32 %4802 to i64
  store i64 %4803, i64* %RSI.i3112.pre-phi, align 8
  %4804 = add i64 %4475, 48323
  %4805 = add i64 %4475, 23
  %4806 = load i64, i64* %6, align 8
  %4807 = add i64 %4806, -8
  %4808 = inttoptr i64 %4807 to i64*
  store i64 %4805, i64* %4808, align 8
  store i64 %4807, i64* %6, align 8
  store i64 %4804, i64* %3, align 8
  %call2_4058ff = tail call %struct.Memory* @sub_4115b0.approxlib(%struct.State* nonnull %0, i64 %4804, %struct.Memory* %MEMORY.59)
  %4809 = load i64, i64* %RBP.i, align 8
  %4810 = add i64 %4809, -8528
  %4811 = load i64, i64* %3, align 8
  %4812 = add i64 %4811, 6
  store i64 %4812, i64* %3, align 8
  %4813 = inttoptr i64 %4810 to i32*
  %4814 = load i32, i32* %4813, align 4
  %4815 = zext i32 %4814 to i64
  store i64 %4815, i64* %RDI.i3360, align 8
  %4816 = add i64 %4809, -10972
  %4817 = load i32, i32* %EAX.i3678, align 4
  %4818 = add i64 %4811, 12
  store i64 %4818, i64* %3, align 8
  %4819 = inttoptr i64 %4816 to i32*
  store i32 %4817, i32* %4819, align 4
  %4820 = load i64, i64* %3, align 8
  %4821 = add i64 %4820, 40560
  %4822 = add i64 %4820, 5
  %4823 = load i64, i64* %6, align 8
  %4824 = add i64 %4823, -8
  %4825 = inttoptr i64 %4824 to i64*
  store i64 %4822, i64* %4825, align 8
  store i64 %4824, i64* %6, align 8
  store i64 %4821, i64* %3, align 8
  %call2_405910 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %4821, %struct.Memory* %MEMORY.59)
  %4826 = load i64, i64* %RBP.i, align 8
  %4827 = add i64 %4826, -10972
  %4828 = load i64, i64* %3, align 8
  %4829 = add i64 %4828, 6
  store i64 %4829, i64* %3, align 8
  %4830 = inttoptr i64 %4827 to i32*
  %4831 = load i32, i32* %4830, align 4
  %4832 = load i32, i32* %EAX.i3678, align 4
  %4833 = sub i32 %4831, %4832
  %4834 = zext i32 %4833 to i64
  store i64 %4834, i64* %RDX.i3821, align 8
  %4835 = icmp ult i32 %4831, %4832
  %4836 = zext i1 %4835 to i8
  store i8 %4836, i8* %14, align 1
  %4837 = and i32 %4833, 255
  %4838 = tail call i32 @llvm.ctpop.i32(i32 %4837)
  %4839 = trunc i32 %4838 to i8
  %4840 = and i8 %4839, 1
  %4841 = xor i8 %4840, 1
  store i8 %4841, i8* %21, align 1
  %4842 = xor i32 %4832, %4831
  %4843 = xor i32 %4842, %4833
  %4844 = lshr i32 %4843, 4
  %4845 = trunc i32 %4844 to i8
  %4846 = and i8 %4845, 1
  store i8 %4846, i8* %27, align 1
  %4847 = icmp eq i32 %4833, 0
  %4848 = zext i1 %4847 to i8
  store i8 %4848, i8* %30, align 1
  %4849 = lshr i32 %4833, 31
  %4850 = trunc i32 %4849 to i8
  store i8 %4850, i8* %33, align 1
  %4851 = lshr i32 %4831, 31
  %4852 = lshr i32 %4832, 31
  %4853 = xor i32 %4852, %4851
  %4854 = xor i32 %4849, %4851
  %4855 = add nuw nsw i32 %4854, %4853
  %4856 = icmp eq i32 %4855, 2
  %4857 = zext i1 %4856 to i8
  store i8 %4857, i8* %39, align 1
  %4858 = add i64 %4826, -8532
  %4859 = add i64 %4828, 14
  store i64 %4859, i64* %3, align 8
  %4860 = inttoptr i64 %4858 to i32*
  store i32 %4833, i32* %4860, align 4
  %4861 = load i64, i64* %RBP.i, align 8
  %4862 = add i64 %4861, -8524
  %4863 = load i64, i64* %3, align 8
  %4864 = add i64 %4863, 10
  store i64 %4864, i64* %3, align 8
  %4865 = inttoptr i64 %4862 to i32*
  store i32 1, i32* %4865, align 4
  %4866 = load i64, i64* %RBP.i, align 8
  %4867 = add i64 %4866, -8520
  %4868 = load i64, i64* %3, align 8
  %4869 = add i64 %4868, 6
  store i64 %4869, i64* %3, align 8
  %4870 = inttoptr i64 %4867 to i32*
  %4871 = load i32, i32* %4870, align 4
  %4872 = add i32 %4871, 1
  %4873 = zext i32 %4872 to i64
  store i64 %4873, i64* %RAX.i2528, align 8
  %4874 = icmp eq i32 %4871, -1
  %4875 = icmp eq i32 %4872, 0
  %4876 = or i1 %4874, %4875
  %4877 = zext i1 %4876 to i8
  store i8 %4877, i8* %14, align 1
  %4878 = and i32 %4872, 255
  %4879 = tail call i32 @llvm.ctpop.i32(i32 %4878)
  %4880 = trunc i32 %4879 to i8
  %4881 = and i8 %4880, 1
  %4882 = xor i8 %4881, 1
  store i8 %4882, i8* %21, align 1
  %4883 = xor i32 %4872, %4871
  %4884 = lshr i32 %4883, 4
  %4885 = trunc i32 %4884 to i8
  %4886 = and i8 %4885, 1
  store i8 %4886, i8* %27, align 1
  %4887 = zext i1 %4875 to i8
  store i8 %4887, i8* %30, align 1
  %4888 = lshr i32 %4872, 31
  %4889 = trunc i32 %4888 to i8
  store i8 %4889, i8* %33, align 1
  %4890 = lshr i32 %4871, 31
  %4891 = xor i32 %4888, %4890
  %4892 = add nuw nsw i32 %4891, %4888
  %4893 = icmp eq i32 %4892, 2
  %4894 = zext i1 %4893 to i8
  store i8 %4894, i8* %39, align 1
  %4895 = add i64 %4868, 15
  store i64 %4895, i64* %3, align 8
  store i32 %4872, i32* %4870, align 4
  %4896 = load i64, i64* %RBP.i, align 8
  %4897 = add i64 %4896, -8532
  %4898 = load i64, i64* %3, align 8
  %4899 = add i64 %4898, 7
  store i64 %4899, i64* %3, align 8
  %4900 = inttoptr i64 %4897 to i32*
  %4901 = load i32, i32* %4900, align 4
  store i8 0, i8* %14, align 1
  %4902 = and i32 %4901, 255
  %4903 = tail call i32 @llvm.ctpop.i32(i32 %4902)
  %4904 = trunc i32 %4903 to i8
  %4905 = and i8 %4904, 1
  %4906 = xor i8 %4905, 1
  store i8 %4906, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4907 = icmp eq i32 %4901, 0
  %4908 = zext i1 %4907 to i8
  store i8 %4908, i8* %30, align 1
  %4909 = lshr i32 %4901, 31
  %4910 = trunc i32 %4909 to i8
  store i8 %4910, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4911 = icmp ne i8 %4910, 0
  %.v = select i1 %4911, i64 21, i64 6
  %4912 = add i64 %4899, %.v
  store i64 %4912, i64* %3, align 8
  br i1 %4911, label %block_.L_405958, label %block_405949

block_405949:                                     ; preds = %block_.L_4058ed
  %4913 = add i64 %4896, -8520
  %4914 = add i64 %4912, 6
  store i64 %4914, i64* %3, align 8
  %4915 = inttoptr i64 %4913 to i32*
  %4916 = load i32, i32* %4915, align 4
  %4917 = add i32 %4916, 1
  %4918 = zext i32 %4917 to i64
  store i64 %4918, i64* %RAX.i2528, align 8
  %4919 = icmp eq i32 %4916, -1
  %4920 = icmp eq i32 %4917, 0
  %4921 = or i1 %4919, %4920
  %4922 = zext i1 %4921 to i8
  store i8 %4922, i8* %14, align 1
  %4923 = and i32 %4917, 255
  %4924 = tail call i32 @llvm.ctpop.i32(i32 %4923)
  %4925 = trunc i32 %4924 to i8
  %4926 = and i8 %4925, 1
  %4927 = xor i8 %4926, 1
  store i8 %4927, i8* %21, align 1
  %4928 = xor i32 %4917, %4916
  %4929 = lshr i32 %4928, 4
  %4930 = trunc i32 %4929 to i8
  %4931 = and i8 %4930, 1
  store i8 %4931, i8* %27, align 1
  %4932 = zext i1 %4920 to i8
  store i8 %4932, i8* %30, align 1
  %4933 = lshr i32 %4917, 31
  %4934 = trunc i32 %4933 to i8
  store i8 %4934, i8* %33, align 1
  %4935 = lshr i32 %4916, 31
  %4936 = xor i32 %4933, %4935
  %4937 = add nuw nsw i32 %4936, %4933
  %4938 = icmp eq i32 %4937, 2
  %4939 = zext i1 %4938 to i8
  store i8 %4939, i8* %39, align 1
  %4940 = add i64 %4912, 15
  store i64 %4940, i64* %3, align 8
  store i32 %4917, i32* %4915, align 4
  %.pre459 = load i64, i64* %RBP.i, align 8
  %.pre460 = load i64, i64* %3, align 8
  br label %block_.L_405958

block_.L_405958:                                  ; preds = %block_405949, %block_.L_4058ed
  %4941 = phi i64 [ %.pre460, %block_405949 ], [ %4912, %block_.L_4058ed ]
  %4942 = phi i64 [ %.pre459, %block_405949 ], [ %4896, %block_.L_4058ed ]
  %4943 = add i64 %4942, -8532
  %4944 = add i64 %4941, 7
  store i64 %4944, i64* %3, align 8
  %4945 = inttoptr i64 %4943 to i32*
  %4946 = load i32, i32* %4945, align 4
  store i8 0, i8* %14, align 1
  %4947 = and i32 %4946, 255
  %4948 = tail call i32 @llvm.ctpop.i32(i32 %4947)
  %4949 = trunc i32 %4948 to i8
  %4950 = and i8 %4949, 1
  %4951 = xor i8 %4950, 1
  store i8 %4951, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4952 = icmp eq i32 %4946, 0
  %4953 = zext i1 %4952 to i8
  store i8 %4953, i8* %30, align 1
  %4954 = lshr i32 %4946, 31
  %4955 = trunc i32 %4954 to i8
  store i8 %4955, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4956 = icmp ne i8 %4955, 0
  %4957 = or i1 %4952, %4956
  %.v549 = select i1 %4957, i64 28, i64 13
  %4958 = add i64 %4941, %.v549
  store i64 %4958, i64* %3, align 8
  br i1 %4957, label %block_.L_405974, label %block_405965

block_405965:                                     ; preds = %block_.L_405958
  %4959 = add i64 %4942, -8520
  %4960 = add i64 %4958, 6
  store i64 %4960, i64* %3, align 8
  %4961 = inttoptr i64 %4959 to i32*
  %4962 = load i32, i32* %4961, align 4
  %4963 = add i32 %4962, 1
  %4964 = zext i32 %4963 to i64
  store i64 %4964, i64* %RAX.i2528, align 8
  %4965 = icmp eq i32 %4962, -1
  %4966 = icmp eq i32 %4963, 0
  %4967 = or i1 %4965, %4966
  %4968 = zext i1 %4967 to i8
  store i8 %4968, i8* %14, align 1
  %4969 = and i32 %4963, 255
  %4970 = tail call i32 @llvm.ctpop.i32(i32 %4969)
  %4971 = trunc i32 %4970 to i8
  %4972 = and i8 %4971, 1
  %4973 = xor i8 %4972, 1
  store i8 %4973, i8* %21, align 1
  %4974 = xor i32 %4963, %4962
  %4975 = lshr i32 %4974, 4
  %4976 = trunc i32 %4975 to i8
  %4977 = and i8 %4976, 1
  store i8 %4977, i8* %27, align 1
  %4978 = zext i1 %4966 to i8
  store i8 %4978, i8* %30, align 1
  %4979 = lshr i32 %4963, 31
  %4980 = trunc i32 %4979 to i8
  store i8 %4980, i8* %33, align 1
  %4981 = lshr i32 %4962, 31
  %4982 = xor i32 %4979, %4981
  %4983 = add nuw nsw i32 %4982, %4979
  %4984 = icmp eq i32 %4983, 2
  %4985 = zext i1 %4984 to i8
  store i8 %4985, i8* %39, align 1
  %4986 = add i64 %4958, 15
  store i64 %4986, i64* %3, align 8
  store i32 %4963, i32* %4961, align 4
  %.pre461 = load i64, i64* %3, align 8
  br label %block_.L_405974

block_.L_405974:                                  ; preds = %block_405965, %block_.L_405958
  %4987 = phi i64 [ %.pre461, %block_405965 ], [ %4958, %block_.L_405958 ]
  %4988 = add i64 %4987, 5
  store i64 %4988, i64* %3, align 8
  br label %block_.L_405979

block_.L_405979:                                  ; preds = %block_.L_405974, %block_.L_4058e8
  %storemerge230 = phi i64 [ %4779, %block_.L_4058e8 ], [ %4988, %block_.L_405974 ]
  %4989 = load i64, i64* %RBP.i, align 8
  %4990 = add i64 %4989, -8512
  store i64 %4990, i64* %RSI.i3112.pre-phi, align 8
  %4991 = add i64 %4989, -8528
  %4992 = add i64 %storemerge230, 13
  store i64 %4992, i64* %3, align 8
  %4993 = inttoptr i64 %4991 to i32*
  %4994 = load i32, i32* %4993, align 4
  %4995 = zext i32 %4994 to i64
  store i64 %4995, i64* %RDI.i3360, align 8
  %4996 = add i64 %4989, -8513
  %4997 = add i64 %storemerge230, 20
  store i64 %4997, i64* %3, align 8
  %4998 = inttoptr i64 %4996 to i8*
  %4999 = load i8, i8* %4998, align 1
  %5000 = sext i8 %4999 to i64
  %5001 = and i64 %5000, 4294967295
  store i64 %5001, i64* %RDX.i3821, align 8
  %5002 = add i64 %storemerge230, 66359
  %5003 = add i64 %storemerge230, 25
  %5004 = load i64, i64* %6, align 8
  %5005 = add i64 %5004, -8
  %5006 = inttoptr i64 %5005 to i64*
  store i64 %5003, i64* %5006, align 8
  store i64 %5005, i64* %6, align 8
  store i64 %5002, i64* %3, align 8
  %call2_40598d = tail call %struct.Memory* @sub_415cb0.mark_string(%struct.State* nonnull %0, i64 %5002, %struct.Memory* %MEMORY.59)
  %.pre462 = load i64, i64* %3, align 8
  br label %block_.L_405992

block_.L_405992:                                  ; preds = %block_.L_405979, %block_405817
  %5007 = phi i64 [ %.pre462, %block_.L_405979 ], [ %4440, %block_405817 ]
  %MEMORY.67 = phi %struct.Memory* [ %call2_40598d, %block_.L_405979 ], [ %MEMORY.59, %block_405817 ]
  %5008 = add i64 %5007, 5
  store i64 %5008, i64* %3, align 8
  br label %block_.L_405997

block_.L_405997:                                  ; preds = %block_.L_405992, %block_4057e5
  %storemerge229 = phi i64 [ %4365, %block_4057e5 ], [ %5008, %block_.L_405992 ]
  %MEMORY.68 = phi %struct.Memory* [ %MEMORY.59, %block_4057e5 ], [ %MEMORY.67, %block_.L_405992 ]
  %5009 = add i64 %storemerge229, 5
  store i64 %5009, i64* %3, align 8
  br label %block_.L_40599c

block_.L_40599c:                                  ; preds = %block_.L_405997, %block_4057b9
  %storemerge228 = phi i64 [ %4319, %block_4057b9 ], [ %5009, %block_.L_405997 ]
  %MEMORY.69 = phi %struct.Memory* [ %MEMORY.59, %block_4057b9 ], [ %MEMORY.68, %block_.L_405997 ]
  %5010 = add i64 %storemerge228, 5
  store i64 %5010, i64* %3, align 8
  %.pre463 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4059a1

block_.L_4059a1:                                  ; preds = %block_.L_40599c, %block_40579f
  %5011 = phi i64 [ %4225, %block_40579f ], [ %.pre463, %block_.L_40599c ]
  %storemerge227 = phi i64 [ %4255, %block_40579f ], [ %5010, %block_.L_40599c ]
  %MEMORY.70 = phi %struct.Memory* [ %MEMORY.59, %block_40579f ], [ %MEMORY.69, %block_.L_40599c ]
  %5012 = add i64 %5011, -40
  %5013 = add i64 %storemerge227, 3
  store i64 %5013, i64* %3, align 8
  %5014 = inttoptr i64 %5012 to i32*
  %5015 = load i32, i32* %5014, align 4
  %5016 = add i32 %5015, 1
  %5017 = zext i32 %5016 to i64
  store i64 %5017, i64* %RAX.i2528, align 8
  %5018 = icmp eq i32 %5015, -1
  %5019 = icmp eq i32 %5016, 0
  %5020 = or i1 %5018, %5019
  %5021 = zext i1 %5020 to i8
  store i8 %5021, i8* %14, align 1
  %5022 = and i32 %5016, 255
  %5023 = tail call i32 @llvm.ctpop.i32(i32 %5022)
  %5024 = trunc i32 %5023 to i8
  %5025 = and i8 %5024, 1
  %5026 = xor i8 %5025, 1
  store i8 %5026, i8* %21, align 1
  %5027 = xor i32 %5016, %5015
  %5028 = lshr i32 %5027, 4
  %5029 = trunc i32 %5028 to i8
  %5030 = and i8 %5029, 1
  store i8 %5030, i8* %27, align 1
  %5031 = zext i1 %5019 to i8
  store i8 %5031, i8* %30, align 1
  %5032 = lshr i32 %5016, 31
  %5033 = trunc i32 %5032 to i8
  store i8 %5033, i8* %33, align 1
  %5034 = lshr i32 %5015, 31
  %5035 = xor i32 %5032, %5034
  %5036 = add nuw nsw i32 %5035, %5032
  %5037 = icmp eq i32 %5036, 2
  %5038 = zext i1 %5037 to i8
  store i8 %5038, i8* %39, align 1
  %5039 = add i64 %storemerge227, 9
  store i64 %5039, i64* %3, align 8
  store i32 %5016, i32* %5014, align 4
  %5040 = load i64, i64* %3, align 8
  %5041 = add i64 %5040, -580
  store i64 %5041, i64* %3, align 8
  br label %block_.L_405766

block_.L_4059af:                                  ; preds = %block_.L_405766
  store i64 %4186, i64* %RDI.i3360, align 8
  %5042 = add i64 %4153, -44
  %5043 = add i64 %4181, 9
  store i64 %5043, i64* %3, align 8
  %5044 = inttoptr i64 %5042 to i32*
  %5045 = load i32, i32* %5044, align 4
  %5046 = zext i32 %5045 to i64
  store i64 %5046, i64* %RSI.i3112.pre-phi, align 8
  %5047 = add i64 %4181, 15329
  %5048 = add i64 %4181, 14
  %5049 = load i64, i64* %6, align 8
  %5050 = add i64 %5049, -8
  %5051 = inttoptr i64 %5050 to i64*
  store i64 %5048, i64* %5051, align 8
  store i64 %5050, i64* %6, align 8
  store i64 %5047, i64* %3, align 8
  %call2_4059b8 = tail call %struct.Memory* @sub_409590.is_suicide(%struct.State* nonnull %0, i64 %5047, %struct.Memory* %MEMORY.59)
  %5052 = load i32, i32* %EAX.i3678, align 4
  %5053 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %5054 = and i32 %5052, 255
  %5055 = tail call i32 @llvm.ctpop.i32(i32 %5054)
  %5056 = trunc i32 %5055 to i8
  %5057 = and i8 %5056, 1
  %5058 = xor i8 %5057, 1
  store i8 %5058, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5059 = icmp eq i32 %5052, 0
  %5060 = zext i1 %5059 to i8
  store i8 %5060, i8* %30, align 1
  %5061 = lshr i32 %5052, 31
  %5062 = trunc i32 %5061 to i8
  store i8 %5062, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v541 = select i1 %5059, i64 24, i64 9
  %5063 = add i64 %5053, %.v541
  store i64 %5063, i64* %3, align 8
  br i1 %5059, label %block_.L_4059d5, label %block_4059c6

block_4059c6:                                     ; preds = %block_.L_4059af
  %5064 = load i64, i64* %RBP.i, align 8
  %5065 = add i64 %5064, -8520
  %5066 = add i64 %5063, 6
  store i64 %5066, i64* %3, align 8
  %5067 = inttoptr i64 %5065 to i32*
  %5068 = load i32, i32* %5067, align 4
  %5069 = add i32 %5068, -3
  %5070 = zext i32 %5069 to i64
  store i64 %5070, i64* %RAX.i2528, align 8
  %5071 = icmp ult i32 %5068, 3
  %5072 = zext i1 %5071 to i8
  store i8 %5072, i8* %14, align 1
  %5073 = and i32 %5069, 255
  %5074 = tail call i32 @llvm.ctpop.i32(i32 %5073)
  %5075 = trunc i32 %5074 to i8
  %5076 = and i8 %5075, 1
  %5077 = xor i8 %5076, 1
  store i8 %5077, i8* %21, align 1
  %5078 = xor i32 %5069, %5068
  %5079 = lshr i32 %5078, 4
  %5080 = trunc i32 %5079 to i8
  %5081 = and i8 %5080, 1
  store i8 %5081, i8* %27, align 1
  %5082 = icmp eq i32 %5069, 0
  %5083 = zext i1 %5082 to i8
  store i8 %5083, i8* %30, align 1
  %5084 = lshr i32 %5069, 31
  %5085 = trunc i32 %5084 to i8
  store i8 %5085, i8* %33, align 1
  %5086 = lshr i32 %5068, 31
  %5087 = xor i32 %5084, %5086
  %5088 = add nuw nsw i32 %5087, %5086
  %5089 = icmp eq i32 %5088, 2
  %5090 = zext i1 %5089 to i8
  store i8 %5090, i8* %39, align 1
  %5091 = add i64 %5063, 15
  store i64 %5091, i64* %3, align 8
  store i32 %5069, i32* %5067, align 4
  %.pre453 = load i64, i64* %3, align 8
  br label %block_.L_4059d5

block_.L_4059d5:                                  ; preds = %block_4059c6, %block_.L_4059af
  %5092 = phi i64 [ %.pre453, %block_4059c6 ], [ %5063, %block_.L_4059af ]
  %5093 = load i64, i64* %RBP.i, align 8
  %5094 = add i64 %5093, -8524
  %5095 = add i64 %5092, 7
  store i64 %5095, i64* %3, align 8
  %5096 = inttoptr i64 %5094 to i32*
  %5097 = load i32, i32* %5096, align 4
  store i8 0, i8* %14, align 1
  %5098 = and i32 %5097, 255
  %5099 = tail call i32 @llvm.ctpop.i32(i32 %5098)
  %5100 = trunc i32 %5099 to i8
  %5101 = and i8 %5100, 1
  %5102 = xor i8 %5101, 1
  store i8 %5102, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5103 = icmp eq i32 %5097, 0
  %5104 = zext i1 %5103 to i8
  store i8 %5104, i8* %30, align 1
  %5105 = lshr i32 %5097, 31
  %5106 = trunc i32 %5105 to i8
  store i8 %5106, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v542 = select i1 %5103, i64 55, i64 13
  %5107 = add i64 %5092, %.v542
  store i64 %5107, i64* %3, align 8
  br i1 %5103, label %block_.L_405a0c, label %block_4059e2

block_4059e2:                                     ; preds = %block_.L_4059d5
  %5108 = add i64 %5093, -8520
  %5109 = add i64 %5107, 6
  store i64 %5109, i64* %3, align 8
  %5110 = inttoptr i64 %5108 to i32*
  %5111 = load i32, i32* %5110, align 4
  %5112 = zext i32 %5111 to i64
  store i64 %5112, i64* %RAX.i2528, align 8
  %5113 = add i64 %5093, -8076
  %5114 = add i64 %5107, 12
  store i64 %5114, i64* %3, align 8
  %5115 = inttoptr i64 %5113 to i32*
  %5116 = load i32, i32* %5115, align 4
  %5117 = sub i32 %5111, %5116
  %5118 = icmp ult i32 %5111, %5116
  %5119 = zext i1 %5118 to i8
  store i8 %5119, i8* %14, align 1
  %5120 = and i32 %5117, 255
  %5121 = tail call i32 @llvm.ctpop.i32(i32 %5120)
  %5122 = trunc i32 %5121 to i8
  %5123 = and i8 %5122, 1
  %5124 = xor i8 %5123, 1
  store i8 %5124, i8* %21, align 1
  %5125 = xor i32 %5116, %5111
  %5126 = xor i32 %5125, %5117
  %5127 = lshr i32 %5126, 4
  %5128 = trunc i32 %5127 to i8
  %5129 = and i8 %5128, 1
  store i8 %5129, i8* %27, align 1
  %5130 = icmp eq i32 %5117, 0
  %5131 = zext i1 %5130 to i8
  store i8 %5131, i8* %30, align 1
  %5132 = lshr i32 %5117, 31
  %5133 = trunc i32 %5132 to i8
  store i8 %5133, i8* %33, align 1
  %5134 = lshr i32 %5111, 31
  %5135 = lshr i32 %5116, 31
  %5136 = xor i32 %5135, %5134
  %5137 = xor i32 %5132, %5134
  %5138 = add nuw nsw i32 %5137, %5136
  %5139 = icmp eq i32 %5138, 2
  %5140 = zext i1 %5139 to i8
  store i8 %5140, i8* %39, align 1
  %5141 = icmp ne i8 %5133, 0
  %5142 = xor i1 %5141, %5139
  %5143 = or i1 %5130, %5142
  %.v543 = select i1 %5143, i64 42, i64 18
  %5144 = add i64 %5107, %.v543
  store i64 %5144, i64* %3, align 8
  br i1 %5143, label %block_.L_405a0c, label %block_4059f4

block_4059f4:                                     ; preds = %block_4059e2
  %5145 = add i64 %5144, 6
  store i64 %5145, i64* %3, align 8
  %5146 = load i32, i32* %5110, align 4
  %5147 = zext i32 %5146 to i64
  store i64 %5147, i64* %RAX.i2528, align 8
  %5148 = add i64 %5144, 12
  store i64 %5148, i64* %3, align 8
  store i32 %5146, i32* %5115, align 4
  %5149 = load i64, i64* %RBP.i, align 8
  %5150 = add i64 %5149, -8072
  %5151 = load i64, i64* %3, align 8
  %5152 = add i64 %5151, 6
  store i64 %5152, i64* %3, align 8
  %5153 = inttoptr i64 %5150 to i32*
  %5154 = load i32, i32* %5153, align 4
  %5155 = zext i32 %5154 to i64
  store i64 %5155, i64* %RAX.i2528, align 8
  %5156 = add i64 %5149, -8080
  %5157 = add i64 %5151, 12
  store i64 %5157, i64* %3, align 8
  %5158 = inttoptr i64 %5156 to i32*
  store i32 %5154, i32* %5158, align 4
  %.pre454 = load i64, i64* %3, align 8
  %.pre464.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_405a0c

block_.L_405a0c:                                  ; preds = %block_4059f4, %block_4059e2, %block_.L_4059d5
  %.pre464 = phi i64 [ %.pre464.pre, %block_4059f4 ], [ %5093, %block_4059e2 ], [ %5093, %block_.L_4059d5 ]
  %5159 = phi i64 [ %.pre454, %block_4059f4 ], [ %5144, %block_4059e2 ], [ %5107, %block_.L_4059d5 ]
  %5160 = add i64 %5159, 5
  store i64 %5160, i64* %3, align 8
  br label %block_.L_405a11

block_.L_405a11:                                  ; preds = %block_.L_405a0c, %block_.L_40574c
  %5161 = phi i64 [ %4059, %block_.L_40574c ], [ %.pre464, %block_.L_405a0c ]
  %storemerge226 = phi i64 [ %4121, %block_.L_40574c ], [ %5160, %block_.L_405a0c ]
  %MEMORY.73 = phi %struct.Memory* [ %MEMORY.57, %block_.L_40574c ], [ %call2_4059b8, %block_.L_405a0c ]
  %5162 = add i64 %5161, -8072
  %5163 = add i64 %storemerge226, 6
  store i64 %5163, i64* %3, align 8
  %5164 = inttoptr i64 %5162 to i32*
  %5165 = load i32, i32* %5164, align 4
  %5166 = add i32 %5165, 1
  %5167 = zext i32 %5166 to i64
  store i64 %5167, i64* %RAX.i2528, align 8
  %5168 = icmp eq i32 %5165, -1
  %5169 = icmp eq i32 %5166, 0
  %5170 = or i1 %5168, %5169
  %5171 = zext i1 %5170 to i8
  store i8 %5171, i8* %14, align 1
  %5172 = and i32 %5166, 255
  %5173 = tail call i32 @llvm.ctpop.i32(i32 %5172)
  %5174 = trunc i32 %5173 to i8
  %5175 = and i8 %5174, 1
  %5176 = xor i8 %5175, 1
  store i8 %5176, i8* %21, align 1
  %5177 = xor i32 %5166, %5165
  %5178 = lshr i32 %5177, 4
  %5179 = trunc i32 %5178 to i8
  %5180 = and i8 %5179, 1
  store i8 %5180, i8* %27, align 1
  %5181 = zext i1 %5169 to i8
  store i8 %5181, i8* %30, align 1
  %5182 = lshr i32 %5166, 31
  %5183 = trunc i32 %5182 to i8
  store i8 %5183, i8* %33, align 1
  %5184 = lshr i32 %5165, 31
  %5185 = xor i32 %5182, %5184
  %5186 = add nuw nsw i32 %5185, %5182
  %5187 = icmp eq i32 %5186, 2
  %5188 = zext i1 %5187 to i8
  store i8 %5188, i8* %39, align 1
  %5189 = add i64 %storemerge226, 15
  store i64 %5189, i64* %3, align 8
  store i32 %5166, i32* %5164, align 4
  %5190 = load i64, i64* %3, align 8
  %5191 = add i64 %5190, -805
  store i64 %5191, i64* %3, align 8
  br label %block_.L_4056fb

block_.L_405a25:                                  ; preds = %block_.L_4056fb
  %5192 = add i64 %4021, -8080
  %5193 = add i64 %4050, 6
  store i64 %5193, i64* %3, align 8
  %5194 = inttoptr i64 %5192 to i32*
  %5195 = load i32, i32* %5194, align 4
  %5196 = zext i32 %5195 to i64
  store i64 %5196, i64* %RAX.i2528, align 8
  %5197 = add i64 %4021, -8068
  %5198 = add i64 %4050, 12
  store i64 %5198, i64* %3, align 8
  %5199 = inttoptr i64 %5197 to i32*
  store i32 %5195, i32* %5199, align 4
  %.pre465 = load i64, i64* %3, align 8
  br label %block_.L_405a31

block_.L_405a31:                                  ; preds = %block_.L_4056aa, %block_.L_405a25
  %5200 = phi i64 [ %3988, %block_.L_4056aa ], [ %.pre465, %block_.L_405a25 ]
  %MEMORY.74 = phi %struct.Memory* [ %MEMORY.47, %block_.L_4056aa ], [ %MEMORY.57, %block_.L_405a25 ]
  %5201 = add i64 %5200, 5
  br label %block_.L_405a36

block_.L_405a36:                                  ; preds = %block_.L_405aee, %block_.L_405a31
  %storemerge231 = phi i64 [ %5201, %block_.L_405a31 ], [ %5446, %block_.L_405aee ]
  %5202 = load i64, i64* %RBP.i, align 8
  %5203 = add i64 %5202, -8068
  %5204 = add i64 %storemerge231, 7
  store i64 %5204, i64* %3, align 8
  %5205 = inttoptr i64 %5203 to i32*
  %5206 = load i32, i32* %5205, align 4
  %5207 = sext i32 %5206 to i64
  store i64 %5207, i64* %RAX.i2528, align 8
  %5208 = shl nsw i64 %5207, 2
  %5209 = add i64 %5202, -1648
  %5210 = add i64 %5209, %5208
  %5211 = add i64 %storemerge231, 15
  store i64 %5211, i64* %3, align 8
  %5212 = inttoptr i64 %5210 to i32*
  %5213 = load i32, i32* %5212, align 4
  %5214 = add i32 %5213, -1
  %5215 = icmp eq i32 %5213, 0
  %5216 = zext i1 %5215 to i8
  store i8 %5216, i8* %14, align 1
  %5217 = and i32 %5214, 255
  %5218 = tail call i32 @llvm.ctpop.i32(i32 %5217)
  %5219 = trunc i32 %5218 to i8
  %5220 = and i8 %5219, 1
  %5221 = xor i8 %5220, 1
  store i8 %5221, i8* %21, align 1
  %5222 = xor i32 %5214, %5213
  %5223 = lshr i32 %5222, 4
  %5224 = trunc i32 %5223 to i8
  %5225 = and i8 %5224, 1
  store i8 %5225, i8* %27, align 1
  %5226 = icmp eq i32 %5214, 0
  %5227 = zext i1 %5226 to i8
  store i8 %5227, i8* %30, align 1
  %5228 = lshr i32 %5214, 31
  %5229 = trunc i32 %5228 to i8
  store i8 %5229, i8* %33, align 1
  %5230 = lshr i32 %5213, 31
  %5231 = xor i32 %5228, %5230
  %5232 = add nuw nsw i32 %5231, %5230
  %5233 = icmp eq i32 %5232, 2
  %5234 = zext i1 %5233 to i8
  store i8 %5234, i8* %39, align 1
  %5235 = icmp ne i8 %5229, 0
  %5236 = xor i1 %5235, %5233
  %5237 = or i1 %5226, %5236
  %.v533 = select i1 %5237, i64 189, i64 21
  %5238 = add i64 %storemerge231, %.v533
  store i64 %5238, i64* %3, align 8
  br i1 %5237, label %block_.L_405af3, label %block_405a4b

block_405a4b:                                     ; preds = %block_.L_405a36
  %5239 = add i64 %5202, -40
  %5240 = add i64 %5238, 7
  store i64 %5240, i64* %3, align 8
  %5241 = inttoptr i64 %5239 to i32*
  store i32 0, i32* %5241, align 4
  %.pre466 = load i64, i64* %3, align 8
  br label %block_.L_405a52

block_.L_405a52:                                  ; preds = %block_.L_405adb, %block_405a4b
  %5242 = phi i64 [ %5444, %block_.L_405adb ], [ %.pre466, %block_405a4b ]
  %5243 = load i64, i64* %RBP.i, align 8
  %5244 = add i64 %5243, -40
  %5245 = add i64 %5242, 4
  store i64 %5245, i64* %3, align 8
  %5246 = inttoptr i64 %5244 to i32*
  %5247 = load i32, i32* %5246, align 4
  %5248 = add i32 %5247, -4
  %5249 = icmp ult i32 %5247, 4
  %5250 = zext i1 %5249 to i8
  store i8 %5250, i8* %14, align 1
  %5251 = and i32 %5248, 255
  %5252 = tail call i32 @llvm.ctpop.i32(i32 %5251)
  %5253 = trunc i32 %5252 to i8
  %5254 = and i8 %5253, 1
  %5255 = xor i8 %5254, 1
  store i8 %5255, i8* %21, align 1
  %5256 = xor i32 %5248, %5247
  %5257 = lshr i32 %5256, 4
  %5258 = trunc i32 %5257 to i8
  %5259 = and i8 %5258, 1
  store i8 %5259, i8* %27, align 1
  %5260 = icmp eq i32 %5248, 0
  %5261 = zext i1 %5260 to i8
  store i8 %5261, i8* %30, align 1
  %5262 = lshr i32 %5248, 31
  %5263 = trunc i32 %5262 to i8
  store i8 %5263, i8* %33, align 1
  %5264 = lshr i32 %5247, 31
  %5265 = xor i32 %5262, %5264
  %5266 = add nuw nsw i32 %5265, %5264
  %5267 = icmp eq i32 %5266, 2
  %5268 = zext i1 %5267 to i8
  store i8 %5268, i8* %39, align 1
  %5269 = icmp ne i8 %5263, 0
  %5270 = xor i1 %5269, %5267
  %.v534 = select i1 %5270, i64 10, i64 156
  %5271 = add i64 %5242, %.v534
  store i64 %5271, i64* %3, align 8
  br i1 %5270, label %block_405a5c, label %block_.L_405aee.loopexit

block_405a5c:                                     ; preds = %block_.L_405a52
  %5272 = add i64 %5243, -8068
  %5273 = add i64 %5271, 6
  store i64 %5273, i64* %3, align 8
  %5274 = inttoptr i64 %5272 to i32*
  %5275 = load i32, i32* %5274, align 4
  %5276 = zext i32 %5275 to i64
  store i64 %5276, i64* %RAX.i2528, align 8
  %5277 = add i64 %5271, 10
  store i64 %5277, i64* %3, align 8
  %5278 = load i32, i32* %5246, align 4
  %5279 = sext i32 %5278 to i64
  store i64 %5279, i64* %RCX.i3786, align 8
  %5280 = shl nsw i64 %5279, 2
  %5281 = add nsw i64 %5280, 8053168
  %5282 = add i64 %5271, 17
  store i64 %5282, i64* %3, align 8
  %5283 = inttoptr i64 %5281 to i32*
  %5284 = load i32, i32* %5283, align 4
  %5285 = add i32 %5284, %5275
  %5286 = zext i32 %5285 to i64
  store i64 %5286, i64* %RAX.i2528, align 8
  %5287 = icmp ult i32 %5285, %5275
  %5288 = icmp ult i32 %5285, %5284
  %5289 = or i1 %5287, %5288
  %5290 = zext i1 %5289 to i8
  store i8 %5290, i8* %14, align 1
  %5291 = and i32 %5285, 255
  %5292 = tail call i32 @llvm.ctpop.i32(i32 %5291)
  %5293 = trunc i32 %5292 to i8
  %5294 = and i8 %5293, 1
  %5295 = xor i8 %5294, 1
  store i8 %5295, i8* %21, align 1
  %5296 = xor i32 %5284, %5275
  %5297 = xor i32 %5296, %5285
  %5298 = lshr i32 %5297, 4
  %5299 = trunc i32 %5298 to i8
  %5300 = and i8 %5299, 1
  store i8 %5300, i8* %27, align 1
  %5301 = icmp eq i32 %5285, 0
  %5302 = zext i1 %5301 to i8
  store i8 %5302, i8* %30, align 1
  %5303 = lshr i32 %5285, 31
  %5304 = trunc i32 %5303 to i8
  store i8 %5304, i8* %33, align 1
  %5305 = lshr i32 %5275, 31
  %5306 = lshr i32 %5284, 31
  %5307 = xor i32 %5303, %5305
  %5308 = xor i32 %5303, %5306
  %5309 = add nuw nsw i32 %5307, %5308
  %5310 = icmp eq i32 %5309, 2
  %5311 = zext i1 %5310 to i8
  store i8 %5311, i8* %39, align 1
  %5312 = add i64 %5243, -8536
  %5313 = add i64 %5271, 23
  store i64 %5313, i64* %3, align 8
  %5314 = inttoptr i64 %5312 to i32*
  store i32 %5285, i32* %5314, align 4
  %5315 = load i64, i64* %RBP.i, align 8
  %5316 = add i64 %5315, -8536
  %5317 = load i64, i64* %3, align 8
  %5318 = add i64 %5317, 7
  store i64 %5318, i64* %3, align 8
  %5319 = inttoptr i64 %5316 to i32*
  %5320 = load i32, i32* %5319, align 4
  %5321 = sext i32 %5320 to i64
  store i64 %5321, i64* %RCX.i3786, align 8
  %5322 = add nsw i64 %5321, 12099168
  %5323 = add i64 %5317, 15
  store i64 %5323, i64* %3, align 8
  %5324 = inttoptr i64 %5322 to i8*
  %5325 = load i8, i8* %5324, align 1
  %5326 = zext i8 %5325 to i64
  store i64 %5326, i64* %RAX.i2528, align 8
  %5327 = zext i8 %5325 to i32
  %5328 = add nsw i32 %5327, -3
  %5329 = icmp ult i8 %5325, 3
  %5330 = zext i1 %5329 to i8
  store i8 %5330, i8* %14, align 1
  %5331 = and i32 %5328, 255
  %5332 = tail call i32 @llvm.ctpop.i32(i32 %5331)
  %5333 = trunc i32 %5332 to i8
  %5334 = and i8 %5333, 1
  %5335 = xor i8 %5334, 1
  store i8 %5335, i8* %21, align 1
  %5336 = xor i32 %5328, %5327
  %5337 = lshr i32 %5336, 4
  %5338 = trunc i32 %5337 to i8
  %5339 = and i8 %5338, 1
  store i8 %5339, i8* %27, align 1
  %5340 = icmp eq i32 %5328, 0
  %5341 = zext i1 %5340 to i8
  store i8 %5341, i8* %30, align 1
  %5342 = lshr i32 %5328, 31
  %5343 = trunc i32 %5342 to i8
  store i8 %5343, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v535 = select i1 %5340, i64 104, i64 24
  %5344 = add i64 %5317, %.v535
  store i64 %5344, i64* %3, align 8
  br i1 %5340, label %block_.L_405adb, label %block_405a8b

block_405a8b:                                     ; preds = %block_405a5c
  %5345 = add i64 %5344, 7
  store i64 %5345, i64* %3, align 8
  %5346 = load i32, i32* %5319, align 4
  %5347 = sext i32 %5346 to i64
  store i64 %5347, i64* %RAX.i2528, align 8
  %5348 = add nsw i64 %5347, 12099168
  %5349 = add i64 %5344, 15
  store i64 %5349, i64* %3, align 8
  %5350 = inttoptr i64 %5348 to i8*
  %5351 = load i8, i8* %5350, align 1
  %5352 = zext i8 %5351 to i64
  store i64 %5352, i64* %RCX.i3786, align 8
  %5353 = zext i8 %5351 to i32
  store i8 0, i8* %14, align 1
  %5354 = tail call i32 @llvm.ctpop.i32(i32 %5353)
  %5355 = trunc i32 %5354 to i8
  %5356 = and i8 %5355, 1
  %5357 = xor i8 %5356, 1
  store i8 %5357, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5358 = icmp eq i8 %5351, 0
  %5359 = zext i1 %5358 to i8
  store i8 %5359, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v536 = select i1 %5358, i64 24, i64 80
  %5360 = add i64 %5344, %.v536
  store i64 %5360, i64* %3, align 8
  br i1 %5358, label %block_405aa3, label %block_.L_405adb

block_405aa3:                                     ; preds = %block_405a8b
  %5361 = add i64 %5360, 7
  store i64 %5361, i64* %3, align 8
  %5362 = load i32, i32* %5319, align 4
  %5363 = sext i32 %5362 to i64
  store i64 %5363, i64* %RAX.i2528, align 8
  %5364 = shl nsw i64 %5363, 2
  %5365 = add i64 %5315, -1648
  %5366 = add i64 %5365, %5364
  %5367 = add i64 %5360, 14
  store i64 %5367, i64* %3, align 8
  %5368 = inttoptr i64 %5366 to i32*
  %5369 = load i32, i32* %5368, align 4
  %5370 = zext i32 %5369 to i64
  store i64 %5370, i64* %RCX.i3786, align 8
  %5371 = add i64 %5315, -8068
  %5372 = add i64 %5360, 21
  store i64 %5372, i64* %3, align 8
  %5373 = inttoptr i64 %5371 to i32*
  %5374 = load i32, i32* %5373, align 4
  %5375 = sext i32 %5374 to i64
  store i64 %5375, i64* %RAX.i2528, align 8
  %5376 = shl nsw i64 %5375, 2
  %5377 = add i64 %5365, %5376
  %5378 = add i64 %5360, 28
  store i64 %5378, i64* %3, align 8
  %5379 = inttoptr i64 %5377 to i32*
  %5380 = load i32, i32* %5379, align 4
  %5381 = add i32 %5380, -1
  %5382 = zext i32 %5381 to i64
  store i64 %5382, i64* %RDX.i3821, align 8
  %5383 = lshr i32 %5381, 31
  %5384 = sub i32 %5369, %5381
  %5385 = icmp ult i32 %5369, %5381
  %5386 = zext i1 %5385 to i8
  store i8 %5386, i8* %14, align 1
  %5387 = and i32 %5384, 255
  %5388 = tail call i32 @llvm.ctpop.i32(i32 %5387)
  %5389 = trunc i32 %5388 to i8
  %5390 = and i8 %5389, 1
  %5391 = xor i8 %5390, 1
  store i8 %5391, i8* %21, align 1
  %5392 = xor i32 %5381, %5369
  %5393 = xor i32 %5392, %5384
  %5394 = lshr i32 %5393, 4
  %5395 = trunc i32 %5394 to i8
  %5396 = and i8 %5395, 1
  store i8 %5396, i8* %27, align 1
  %5397 = icmp eq i32 %5384, 0
  %5398 = zext i1 %5397 to i8
  store i8 %5398, i8* %30, align 1
  %5399 = lshr i32 %5384, 31
  %5400 = trunc i32 %5399 to i8
  store i8 %5400, i8* %33, align 1
  %5401 = lshr i32 %5369, 31
  %5402 = xor i32 %5383, %5401
  %5403 = xor i32 %5399, %5401
  %5404 = add nuw nsw i32 %5403, %5402
  %5405 = icmp eq i32 %5404, 2
  %5406 = zext i1 %5405 to i8
  store i8 %5406, i8* %39, align 1
  %.v537 = select i1 %5397, i64 39, i64 56
  %5407 = add i64 %5360, %.v537
  store i64 %5407, i64* %3, align 8
  br i1 %5397, label %block_405aca, label %block_.L_405adb

block_405aca:                                     ; preds = %block_405aa3
  %5408 = add i64 %5407, 6
  store i64 %5408, i64* %3, align 8
  %5409 = load i32, i32* %5319, align 4
  %5410 = zext i32 %5409 to i64
  store i64 %5410, i64* %RAX.i2528, align 8
  %5411 = add i64 %5407, 12
  store i64 %5411, i64* %3, align 8
  store i32 %5409, i32* %5373, align 4
  %5412 = load i64, i64* %3, align 8
  %5413 = add i64 %5412, 24
  store i64 %5413, i64* %3, align 8
  br label %block_.L_405aee

block_.L_405adb:                                  ; preds = %block_405aa3, %block_405a8b, %block_405a5c
  %5414 = phi i64 [ %5360, %block_405a8b ], [ %5344, %block_405a5c ], [ %5407, %block_405aa3 ]
  %5415 = add i64 %5315, -40
  %5416 = add i64 %5414, 8
  store i64 %5416, i64* %3, align 8
  %5417 = inttoptr i64 %5415 to i32*
  %5418 = load i32, i32* %5417, align 4
  %5419 = add i32 %5418, 1
  %5420 = zext i32 %5419 to i64
  store i64 %5420, i64* %RAX.i2528, align 8
  %5421 = icmp eq i32 %5418, -1
  %5422 = icmp eq i32 %5419, 0
  %5423 = or i1 %5421, %5422
  %5424 = zext i1 %5423 to i8
  store i8 %5424, i8* %14, align 1
  %5425 = and i32 %5419, 255
  %5426 = tail call i32 @llvm.ctpop.i32(i32 %5425)
  %5427 = trunc i32 %5426 to i8
  %5428 = and i8 %5427, 1
  %5429 = xor i8 %5428, 1
  store i8 %5429, i8* %21, align 1
  %5430 = xor i32 %5419, %5418
  %5431 = lshr i32 %5430, 4
  %5432 = trunc i32 %5431 to i8
  %5433 = and i8 %5432, 1
  store i8 %5433, i8* %27, align 1
  %5434 = zext i1 %5422 to i8
  store i8 %5434, i8* %30, align 1
  %5435 = lshr i32 %5419, 31
  %5436 = trunc i32 %5435 to i8
  store i8 %5436, i8* %33, align 1
  %5437 = lshr i32 %5418, 31
  %5438 = xor i32 %5435, %5437
  %5439 = add nuw nsw i32 %5438, %5435
  %5440 = icmp eq i32 %5439, 2
  %5441 = zext i1 %5440 to i8
  store i8 %5441, i8* %39, align 1
  %5442 = add i64 %5414, 14
  store i64 %5442, i64* %3, align 8
  store i32 %5419, i32* %5417, align 4
  %5443 = load i64, i64* %3, align 8
  %5444 = add i64 %5443, -151
  store i64 %5444, i64* %3, align 8
  br label %block_.L_405a52

block_.L_405aee.loopexit:                         ; preds = %block_.L_405a52
  br label %block_.L_405aee

block_.L_405aee:                                  ; preds = %block_.L_405aee.loopexit, %block_405aca
  %5445 = phi i64 [ %5413, %block_405aca ], [ %5271, %block_.L_405aee.loopexit ]
  %5446 = add i64 %5445, -184
  %5447 = add i64 %5445, 5
  store i64 %5447, i64* %3, align 8
  br label %block_.L_405a36

block_.L_405af3:                                  ; preds = %block_.L_405a36
  %5448 = add i64 %5238, 6
  store i64 %5448, i64* %3, align 8
  %5449 = load i32, i32* %5205, align 4
  %5450 = zext i32 %5449 to i64
  store i64 %5450, i64* %RAX.i2528, align 8
  %5451 = add i64 %5202, -16
  %5452 = add i64 %5238, 10
  store i64 %5452, i64* %3, align 8
  %5453 = inttoptr i64 %5451 to i64*
  %5454 = load i64, i64* %5453, align 8
  store i64 %5454, i64* %RCX.i3786, align 8
  %5455 = add i64 %5238, 12
  store i64 %5455, i64* %3, align 8
  %5456 = inttoptr i64 %5454 to i32*
  store i32 %5449, i32* %5456, align 4
  %5457 = load i64, i64* %RBP.i, align 8
  %5458 = add i64 %5457, -4
  %5459 = load i64, i64* %3, align 8
  %5460 = add i64 %5459, 7
  store i64 %5460, i64* %3, align 8
  %5461 = inttoptr i64 %5458 to i32*
  store i32 1, i32* %5461, align 4
  %5462 = load i64, i64* %3, align 8
  %5463 = add i64 %5462, 5226
  store i64 %5463, i64* %3, align 8
  br label %block_.L_406f70

block_.L_405b0b:                                  ; preds = %block_405673
  %5464 = add i64 %3927, 10
  store i64 %5464, i64* %3, align 8
  store i32 21, i32* %3260, align 4
  %5465 = bitcast [32 x %union.VectorReg]* %1957 to double*
  %5466 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1957, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %5467 = bitcast i64* %1963 to double*
  %5468 = bitcast %union.VectorReg* %1967 to double*
  %5469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5470 = bitcast %union.VectorReg* %5469 to i8*
  %5471 = bitcast %union.VectorReg* %5469 to i32*
  %5472 = getelementptr inbounds i8, i8* %5470, i64 4
  %5473 = bitcast i8* %5472 to i32*
  %5474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %5475 = bitcast i64* %5474 to i32*
  %5476 = getelementptr inbounds i8, i8* %5470, i64 12
  %5477 = bitcast i8* %5476 to i32*
  %5478 = bitcast %union.VectorReg* %5469 to double*
  %AL.i1212 = bitcast %union.anon* %40 to i8*
  %.pre382 = load i64, i64* %3, align 8
  br label %block_.L_405b15

block_.L_405b15:                                  ; preds = %block_.L_4063f9, %block_.L_405b0b
  %5479 = phi i64 [ %.pre382, %block_.L_405b0b ], [ %8625, %block_.L_4063f9 ]
  %MEMORY.79 = phi %struct.Memory* [ %MEMORY.47, %block_.L_405b0b ], [ %MEMORY.117, %block_.L_4063f9 ]
  %5480 = load i64, i64* %RBP.i, align 8
  %5481 = add i64 %5480, -8072
  %5482 = add i64 %5479, 10
  store i64 %5482, i64* %3, align 8
  %5483 = inttoptr i64 %5481 to i32*
  %5484 = load i32, i32* %5483, align 4
  %5485 = add i32 %5484, -400
  %5486 = icmp ult i32 %5484, 400
  %5487 = zext i1 %5486 to i8
  store i8 %5487, i8* %14, align 1
  %5488 = and i32 %5485, 255
  %5489 = tail call i32 @llvm.ctpop.i32(i32 %5488)
  %5490 = trunc i32 %5489 to i8
  %5491 = and i8 %5490, 1
  %5492 = xor i8 %5491, 1
  store i8 %5492, i8* %21, align 1
  %5493 = xor i32 %5484, 16
  %5494 = xor i32 %5493, %5485
  %5495 = lshr i32 %5494, 4
  %5496 = trunc i32 %5495 to i8
  %5497 = and i8 %5496, 1
  store i8 %5497, i8* %27, align 1
  %5498 = icmp eq i32 %5485, 0
  %5499 = zext i1 %5498 to i8
  store i8 %5499, i8* %30, align 1
  %5500 = lshr i32 %5485, 31
  %5501 = trunc i32 %5500 to i8
  store i8 %5501, i8* %33, align 1
  %5502 = lshr i32 %5484, 31
  %5503 = xor i32 %5500, %5502
  %5504 = add nuw nsw i32 %5503, %5502
  %5505 = icmp eq i32 %5504, 2
  %5506 = zext i1 %5505 to i8
  store i8 %5506, i8* %39, align 1
  %5507 = icmp ne i8 %5501, 0
  %5508 = xor i1 %5507, %5505
  %.v555 = select i1 %5508, i64 16, i64 2296
  %5509 = add i64 %5479, %.v555
  store i64 %5509, i64* %3, align 8
  br i1 %5508, label %block_405b25, label %block_.L_40640d

block_405b25:                                     ; preds = %block_.L_405b15
  %5510 = add i64 %5480, -8540
  %5511 = add i64 %5509, 10
  store i64 %5511, i64* %3, align 8
  %5512 = inttoptr i64 %5510 to i32*
  store i32 0, i32* %5512, align 4
  %5513 = load i64, i64* %RBP.i, align 8
  %5514 = add i64 %5513, -8544
  %5515 = load i64, i64* %3, align 8
  %5516 = add i64 %5515, 10
  store i64 %5516, i64* %3, align 8
  %5517 = inttoptr i64 %5514 to i32*
  store i32 0, i32* %5517, align 4
  %5518 = load i64, i64* %RBP.i, align 8
  %5519 = add i64 %5518, -8548
  %5520 = load i64, i64* %3, align 8
  %5521 = add i64 %5520, 10
  store i64 %5521, i64* %3, align 8
  %5522 = inttoptr i64 %5519 to i32*
  store i32 0, i32* %5522, align 4
  %5523 = load i64, i64* %RBP.i, align 8
  %5524 = add i64 %5523, -8552
  %5525 = load i64, i64* %3, align 8
  %5526 = add i64 %5525, 10
  store i64 %5526, i64* %3, align 8
  %5527 = inttoptr i64 %5524 to i32*
  store i32 0, i32* %5527, align 4
  %5528 = load i64, i64* %RBP.i, align 8
  %5529 = add i64 %5528, -8556
  %5530 = load i64, i64* %3, align 8
  %5531 = add i64 %5530, 10
  store i64 %5531, i64* %3, align 8
  %5532 = inttoptr i64 %5529 to i32*
  store i32 0, i32* %5532, align 4
  %5533 = load i64, i64* %RBP.i, align 8
  %5534 = add i64 %5533, -8560
  %5535 = load i64, i64* %3, align 8
  %5536 = add i64 %5535, 10
  store i64 %5536, i64* %3, align 8
  %5537 = inttoptr i64 %5534 to i32*
  store i32 3, i32* %5537, align 4
  %5538 = load i64, i64* %RBP.i, align 8
  %5539 = add i64 %5538, -8564
  %5540 = load i64, i64* %3, align 8
  %5541 = add i64 %5540, 10
  store i64 %5541, i64* %3, align 8
  %5542 = inttoptr i64 %5539 to i32*
  store i32 0, i32* %5542, align 4
  %5543 = load i64, i64* %RBP.i, align 8
  %5544 = add i64 %5543, -8072
  %5545 = load i64, i64* %3, align 8
  %5546 = add i64 %5545, 7
  store i64 %5546, i64* %3, align 8
  %5547 = inttoptr i64 %5544 to i32*
  %5548 = load i32, i32* %5547, align 4
  %5549 = sext i32 %5548 to i64
  store i64 %5549, i64* %RAX.i2528, align 8
  %5550 = shl nsw i64 %5549, 2
  %5551 = add i64 %5543, -3248
  %5552 = add i64 %5551, %5550
  %5553 = add i64 %5545, 18
  store i64 %5553, i64* %3, align 8
  %5554 = inttoptr i64 %5552 to i32*
  store i32 0, i32* %5554, align 4
  %5555 = load i64, i64* %RBP.i, align 8
  %5556 = add i64 %5555, -8072
  %5557 = load i64, i64* %3, align 8
  %5558 = add i64 %5557, 7
  store i64 %5558, i64* %3, align 8
  %5559 = inttoptr i64 %5556 to i32*
  %5560 = load i32, i32* %5559, align 4
  %5561 = sext i32 %5560 to i64
  store i64 %5561, i64* %RAX.i2528, align 8
  %5562 = add nsw i64 %5561, 12099168
  %5563 = add i64 %5557, 15
  store i64 %5563, i64* %3, align 8
  %5564 = inttoptr i64 %5562 to i8*
  %5565 = load i8, i8* %5564, align 1
  %5566 = zext i8 %5565 to i64
  store i64 %5566, i64* %RCX.i3786, align 8
  %5567 = zext i8 %5565 to i32
  store i8 0, i8* %14, align 1
  %5568 = tail call i32 @llvm.ctpop.i32(i32 %5567)
  %5569 = trunc i32 %5568 to i8
  %5570 = and i8 %5569, 1
  %5571 = xor i8 %5570, 1
  store i8 %5571, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5572 = icmp eq i8 %5565, 0
  %5573 = zext i1 %5572 to i8
  store i8 %5573, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v618 = select i1 %5572, i64 24, i64 45
  %5574 = add i64 %5557, %.v618
  store i64 %5574, i64* %3, align 8
  br i1 %5572, label %block_405b95, label %block_.L_4063f9

block_405b95:                                     ; preds = %block_405b25
  %5575 = add i64 %5574, 7
  store i64 %5575, i64* %3, align 8
  %5576 = load i32, i32* %5559, align 4
  %5577 = sext i32 %5576 to i64
  store i64 %5577, i64* %RAX.i2528, align 8
  %5578 = shl nsw i64 %5577, 2
  %5579 = add i64 %5555, -1648
  %5580 = add i64 %5579, %5578
  %5581 = add i64 %5574, 15
  store i64 %5581, i64* %3, align 8
  %5582 = inttoptr i64 %5580 to i32*
  %5583 = load i32, i32* %5582, align 4
  %5584 = add i32 %5583, 1
  %5585 = icmp ne i32 %5583, -1
  %5586 = zext i1 %5585 to i8
  store i8 %5586, i8* %14, align 1
  %5587 = and i32 %5584, 255
  %5588 = tail call i32 @llvm.ctpop.i32(i32 %5587)
  %5589 = trunc i32 %5588 to i8
  %5590 = and i8 %5589, 1
  %5591 = xor i8 %5590, 1
  store i8 %5591, i8* %21, align 1
  %5592 = xor i32 %5583, 16
  %5593 = xor i32 %5592, %5584
  %5594 = lshr i32 %5593, 4
  %5595 = trunc i32 %5594 to i8
  %5596 = and i8 %5595, 1
  store i8 %5596, i8* %27, align 1
  %5597 = icmp eq i32 %5584, 0
  %5598 = zext i1 %5597 to i8
  store i8 %5598, i8* %30, align 1
  %5599 = lshr i32 %5584, 31
  %5600 = trunc i32 %5599 to i8
  store i8 %5600, i8* %33, align 1
  %5601 = lshr i32 %5583, 31
  %5602 = xor i32 %5601, 1
  %5603 = xor i32 %5599, %5601
  %5604 = add nuw nsw i32 %5603, %5602
  %5605 = icmp eq i32 %5604, 2
  %5606 = zext i1 %5605 to i8
  store i8 %5606, i8* %39, align 1
  %.v619 = select i1 %5597, i64 26, i64 21
  %5607 = add i64 %5574, %.v619
  store i64 %5607, i64* %3, align 8
  br i1 %5597, label %block_.L_405baf, label %block_.L_4063f9

block_.L_405baf:                                  ; preds = %block_405b95
  store i64 0, i64* %RSI.i3112.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 1600, i64* %RAX.i2528, align 8
  store i64 1600, i64* %RDX.i3821, align 8
  %5608 = add i64 %5555, -10176
  store i64 %5608, i64* %RCX.i3786, align 8
  store i64 %5608, i64* %RDI.i3360, align 8
  %5609 = add i64 %5607, -19263
  %5610 = add i64 %5607, 24
  %5611 = load i64, i64* %6, align 8
  %5612 = add i64 %5611, -8
  %5613 = inttoptr i64 %5612 to i64*
  store i64 %5610, i64* %5613, align 8
  store i64 %5612, i64* %6, align 8
  store i64 %5609, i64* %3, align 8
  %5614 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %MEMORY.79)
  %5615 = load i64, i64* %RBP.i, align 8
  %5616 = add i64 %5615, -40
  %5617 = load i64, i64* %3, align 8
  %5618 = add i64 %5617, 7
  store i64 %5618, i64* %3, align 8
  %5619 = inttoptr i64 %5616 to i32*
  store i32 0, i32* %5619, align 4
  %.pre414 = load i64, i64* %3, align 8
  br label %block_.L_405bce

block_.L_405bce:                                  ; preds = %block_.L_406127, %block_.L_405baf
  %5620 = phi i64 [ %.pre414, %block_.L_405baf ], [ %7629, %block_.L_406127 ]
  %MEMORY.81 = phi %struct.Memory* [ %5614, %block_.L_405baf ], [ %MEMORY.105, %block_.L_406127 ]
  %5621 = load i64, i64* %RBP.i, align 8
  %5622 = add i64 %5621, -40
  %5623 = add i64 %5620, 4
  store i64 %5623, i64* %3, align 8
  %5624 = inttoptr i64 %5622 to i32*
  %5625 = load i32, i32* %5624, align 4
  %5626 = add i32 %5625, -8
  %5627 = icmp ult i32 %5625, 8
  %5628 = zext i1 %5627 to i8
  store i8 %5628, i8* %14, align 1
  %5629 = and i32 %5626, 255
  %5630 = tail call i32 @llvm.ctpop.i32(i32 %5629)
  %5631 = trunc i32 %5630 to i8
  %5632 = and i8 %5631, 1
  %5633 = xor i8 %5632, 1
  store i8 %5633, i8* %21, align 1
  %5634 = xor i32 %5626, %5625
  %5635 = lshr i32 %5634, 4
  %5636 = trunc i32 %5635 to i8
  %5637 = and i8 %5636, 1
  store i8 %5637, i8* %27, align 1
  %5638 = icmp eq i32 %5626, 0
  %5639 = zext i1 %5638 to i8
  store i8 %5639, i8* %30, align 1
  %5640 = lshr i32 %5626, 31
  %5641 = trunc i32 %5640 to i8
  store i8 %5641, i8* %33, align 1
  %5642 = lshr i32 %5625, 31
  %5643 = xor i32 %5640, %5642
  %5644 = add nuw nsw i32 %5643, %5642
  %5645 = icmp eq i32 %5644, 2
  %5646 = zext i1 %5645 to i8
  store i8 %5646, i8* %39, align 1
  %5647 = icmp ne i8 %5641, 0
  %5648 = xor i1 %5647, %5645
  %.v620 = select i1 %5648, i64 10, i64 1383
  %5649 = add i64 %5620, %.v620
  store i64 %5649, i64* %3, align 8
  br i1 %5648, label %block_405bd8, label %block_.L_406135.loopexit

block_405bd8:                                     ; preds = %block_.L_405bce
  %5650 = add i64 %5621, -8072
  %5651 = add i64 %5649, 6
  store i64 %5651, i64* %3, align 8
  %5652 = inttoptr i64 %5650 to i32*
  %5653 = load i32, i32* %5652, align 4
  %5654 = zext i32 %5653 to i64
  store i64 %5654, i64* %RAX.i2528, align 8
  %5655 = add i64 %5649, 10
  store i64 %5655, i64* %3, align 8
  %5656 = load i32, i32* %5624, align 4
  %5657 = sext i32 %5656 to i64
  store i64 %5657, i64* %RCX.i3786, align 8
  %5658 = shl nsw i64 %5657, 2
  %5659 = add nsw i64 %5658, 8053168
  %5660 = add i64 %5649, 17
  store i64 %5660, i64* %3, align 8
  %5661 = inttoptr i64 %5659 to i32*
  %5662 = load i32, i32* %5661, align 4
  %5663 = add i32 %5662, %5653
  %5664 = zext i32 %5663 to i64
  store i64 %5664, i64* %RAX.i2528, align 8
  %5665 = icmp ult i32 %5663, %5653
  %5666 = icmp ult i32 %5663, %5662
  %5667 = or i1 %5665, %5666
  %5668 = zext i1 %5667 to i8
  store i8 %5668, i8* %14, align 1
  %5669 = and i32 %5663, 255
  %5670 = tail call i32 @llvm.ctpop.i32(i32 %5669)
  %5671 = trunc i32 %5670 to i8
  %5672 = and i8 %5671, 1
  %5673 = xor i8 %5672, 1
  store i8 %5673, i8* %21, align 1
  %5674 = xor i32 %5662, %5653
  %5675 = xor i32 %5674, %5663
  %5676 = lshr i32 %5675, 4
  %5677 = trunc i32 %5676 to i8
  %5678 = and i8 %5677, 1
  store i8 %5678, i8* %27, align 1
  %5679 = icmp eq i32 %5663, 0
  %5680 = zext i1 %5679 to i8
  store i8 %5680, i8* %30, align 1
  %5681 = lshr i32 %5663, 31
  %5682 = trunc i32 %5681 to i8
  store i8 %5682, i8* %33, align 1
  %5683 = lshr i32 %5653, 31
  %5684 = lshr i32 %5662, 31
  %5685 = xor i32 %5681, %5683
  %5686 = xor i32 %5681, %5684
  %5687 = add nuw nsw i32 %5685, %5686
  %5688 = icmp eq i32 %5687, 2
  %5689 = zext i1 %5688 to i8
  store i8 %5689, i8* %39, align 1
  %5690 = add i64 %5621, -10180
  %5691 = add i64 %5649, 23
  store i64 %5691, i64* %3, align 8
  %5692 = inttoptr i64 %5690 to i32*
  store i32 %5663, i32* %5692, align 4
  %5693 = load i64, i64* %RBP.i, align 8
  %5694 = add i64 %5693, -10180
  %5695 = load i64, i64* %3, align 8
  %5696 = add i64 %5695, 7
  store i64 %5696, i64* %3, align 8
  %5697 = inttoptr i64 %5694 to i32*
  %5698 = load i32, i32* %5697, align 4
  %5699 = sext i32 %5698 to i64
  store i64 %5699, i64* %RCX.i3786, align 8
  %5700 = add nsw i64 %5699, 12099168
  %5701 = add i64 %5695, 15
  store i64 %5701, i64* %3, align 8
  %5702 = inttoptr i64 %5700 to i8*
  %5703 = load i8, i8* %5702, align 1
  %5704 = zext i8 %5703 to i64
  store i64 %5704, i64* %RAX.i2528, align 8
  %5705 = zext i8 %5703 to i32
  %5706 = add nsw i32 %5705, -3
  %5707 = icmp ult i8 %5703, 3
  %5708 = zext i1 %5707 to i8
  store i8 %5708, i8* %14, align 1
  %5709 = and i32 %5706, 255
  %5710 = tail call i32 @llvm.ctpop.i32(i32 %5709)
  %5711 = trunc i32 %5710 to i8
  %5712 = and i8 %5711, 1
  %5713 = xor i8 %5712, 1
  store i8 %5713, i8* %21, align 1
  %5714 = xor i32 %5706, %5705
  %5715 = lshr i32 %5714, 4
  %5716 = trunc i32 %5715 to i8
  %5717 = and i8 %5716, 1
  store i8 %5717, i8* %27, align 1
  %5718 = icmp eq i32 %5706, 0
  %5719 = zext i1 %5718 to i8
  store i8 %5719, i8* %30, align 1
  %5720 = lshr i32 %5706, 31
  %5721 = trunc i32 %5720 to i8
  store i8 %5721, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v635 = select i1 %5718, i64 24, i64 29
  %5722 = add i64 %5695, %.v635
  store i64 %5722, i64* %3, align 8
  br i1 %5718, label %block_405c07, label %block_.L_405c0c

block_405c07:                                     ; preds = %block_405bd8
  %5723 = add i64 %5722, 1312
  br label %block_.L_406127

block_.L_405c0c:                                  ; preds = %block_405bd8
  %5724 = add i64 %5722, 7
  store i64 %5724, i64* %3, align 8
  %5725 = load i32, i32* %5697, align 4
  %5726 = sext i32 %5725 to i64
  store i64 %5726, i64* %RAX.i2528, align 8
  %5727 = add nsw i64 %5726, 12099168
  %5728 = add i64 %5722, 15
  store i64 %5728, i64* %3, align 8
  %5729 = inttoptr i64 %5727 to i8*
  %5730 = load i8, i8* %5729, align 1
  %5731 = zext i8 %5730 to i64
  store i64 %5731, i64* %RCX.i3786, align 8
  %5732 = zext i8 %5730 to i32
  store i8 0, i8* %14, align 1
  %5733 = tail call i32 @llvm.ctpop.i32(i32 %5732)
  %5734 = trunc i32 %5733 to i8
  %5735 = and i8 %5734, 1
  %5736 = xor i8 %5735, 1
  store i8 %5736, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5737 = icmp eq i8 %5730, 0
  %5738 = zext i1 %5737 to i8
  store i8 %5738, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v636 = select i1 %5737, i64 24, i64 54
  %5739 = add i64 %5722, %.v636
  store i64 %5739, i64* %3, align 8
  br i1 %5737, label %block_405c24, label %block_.L_405c42

block_405c24:                                     ; preds = %block_.L_405c0c
  %5740 = add i64 %5693, -40
  %5741 = add i64 %5739, 4
  store i64 %5741, i64* %3, align 8
  %5742 = inttoptr i64 %5740 to i32*
  %5743 = load i32, i32* %5742, align 4
  %5744 = add i32 %5743, -4
  %5745 = icmp ult i32 %5743, 4
  %5746 = zext i1 %5745 to i8
  store i8 %5746, i8* %14, align 1
  %5747 = and i32 %5744, 255
  %5748 = tail call i32 @llvm.ctpop.i32(i32 %5747)
  %5749 = trunc i32 %5748 to i8
  %5750 = and i8 %5749, 1
  %5751 = xor i8 %5750, 1
  store i8 %5751, i8* %21, align 1
  %5752 = xor i32 %5744, %5743
  %5753 = lshr i32 %5752, 4
  %5754 = trunc i32 %5753 to i8
  %5755 = and i8 %5754, 1
  store i8 %5755, i8* %27, align 1
  %5756 = icmp eq i32 %5744, 0
  %5757 = zext i1 %5756 to i8
  store i8 %5757, i8* %30, align 1
  %5758 = lshr i32 %5744, 31
  %5759 = trunc i32 %5758 to i8
  store i8 %5759, i8* %33, align 1
  %5760 = lshr i32 %5743, 31
  %5761 = xor i32 %5758, %5760
  %5762 = add nuw nsw i32 %5761, %5760
  %5763 = icmp eq i32 %5762, 2
  %5764 = zext i1 %5763 to i8
  store i8 %5764, i8* %39, align 1
  %5765 = icmp ne i8 %5759, 0
  %5766 = xor i1 %5765, %5763
  %.v667 = select i1 %5766, i64 10, i64 25
  %5767 = add i64 %5739, %.v667
  store i64 %5767, i64* %3, align 8
  br i1 %5766, label %block_405c2e, label %block_.L_405c3d

block_405c2e:                                     ; preds = %block_405c24
  %5768 = add i64 %5693, -8540
  %5769 = add i64 %5767, 6
  store i64 %5769, i64* %3, align 8
  %5770 = inttoptr i64 %5768 to i32*
  %5771 = load i32, i32* %5770, align 4
  %5772 = add i32 %5771, 1
  %5773 = zext i32 %5772 to i64
  store i64 %5773, i64* %RAX.i2528, align 8
  %5774 = icmp eq i32 %5771, -1
  %5775 = icmp eq i32 %5772, 0
  %5776 = or i1 %5774, %5775
  %5777 = zext i1 %5776 to i8
  store i8 %5777, i8* %14, align 1
  %5778 = and i32 %5772, 255
  %5779 = tail call i32 @llvm.ctpop.i32(i32 %5778)
  %5780 = trunc i32 %5779 to i8
  %5781 = and i8 %5780, 1
  %5782 = xor i8 %5781, 1
  store i8 %5782, i8* %21, align 1
  %5783 = xor i32 %5772, %5771
  %5784 = lshr i32 %5783, 4
  %5785 = trunc i32 %5784 to i8
  %5786 = and i8 %5785, 1
  store i8 %5786, i8* %27, align 1
  %5787 = zext i1 %5775 to i8
  store i8 %5787, i8* %30, align 1
  %5788 = lshr i32 %5772, 31
  %5789 = trunc i32 %5788 to i8
  store i8 %5789, i8* %33, align 1
  %5790 = lshr i32 %5771, 31
  %5791 = xor i32 %5788, %5790
  %5792 = add nuw nsw i32 %5791, %5788
  %5793 = icmp eq i32 %5792, 2
  %5794 = zext i1 %5793 to i8
  store i8 %5794, i8* %39, align 1
  %5795 = add i64 %5767, 15
  store i64 %5795, i64* %3, align 8
  store i32 %5772, i32* %5770, align 4
  %.pre415 = load i64, i64* %3, align 8
  br label %block_.L_405c3d

block_.L_405c3d:                                  ; preds = %block_405c24, %block_405c2e
  %5796 = phi i64 [ %5767, %block_405c24 ], [ %.pre415, %block_405c2e ]
  %5797 = add i64 %5796, 1258
  br label %block_.L_406127

block_.L_405c42:                                  ; preds = %block_.L_405c0c
  %5798 = add i64 %5739, 7
  store i64 %5798, i64* %3, align 8
  %5799 = load i32, i32* %5697, align 4
  %5800 = sext i32 %5799 to i64
  store i64 %5800, i64* %RAX.i2528, align 8
  %5801 = add nsw i64 %5800, 12099168
  %5802 = add i64 %5739, 15
  store i64 %5802, i64* %3, align 8
  %5803 = inttoptr i64 %5801 to i8*
  %5804 = load i8, i8* %5803, align 1
  %5805 = zext i8 %5804 to i64
  store i64 %5805, i64* %RCX.i3786, align 8
  %5806 = zext i8 %5804 to i32
  %5807 = add i64 %5693, -44
  %5808 = add i64 %5739, 18
  store i64 %5808, i64* %3, align 8
  %5809 = inttoptr i64 %5807 to i32*
  %5810 = load i32, i32* %5809, align 4
  %5811 = sub i32 %5806, %5810
  %5812 = icmp ult i32 %5806, %5810
  %5813 = zext i1 %5812 to i8
  store i8 %5813, i8* %14, align 1
  %5814 = and i32 %5811, 255
  %5815 = tail call i32 @llvm.ctpop.i32(i32 %5814)
  %5816 = trunc i32 %5815 to i8
  %5817 = and i8 %5816, 1
  %5818 = xor i8 %5817, 1
  store i8 %5818, i8* %21, align 1
  %5819 = xor i32 %5810, %5806
  %5820 = xor i32 %5819, %5811
  %5821 = lshr i32 %5820, 4
  %5822 = trunc i32 %5821 to i8
  %5823 = and i8 %5822, 1
  store i8 %5823, i8* %27, align 1
  %5824 = icmp eq i32 %5811, 0
  %5825 = zext i1 %5824 to i8
  store i8 %5825, i8* %30, align 1
  %5826 = lshr i32 %5811, 31
  %5827 = trunc i32 %5826 to i8
  store i8 %5827, i8* %33, align 1
  %5828 = lshr i32 %5810, 31
  %5829 = add nuw nsw i32 %5826, %5828
  %5830 = icmp eq i32 %5829, 2
  %5831 = zext i1 %5830 to i8
  store i8 %5831, i8* %39, align 1
  %.v637 = select i1 %5824, i64 24, i64 385
  %5832 = add i64 %5739, %.v637
  store i64 %5832, i64* %3, align 8
  br i1 %5824, label %block_405c5a, label %block_.L_405dc3

block_405c5a:                                     ; preds = %block_.L_405c42
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %5833 = add i64 %5832, 17
  store i64 %5833, i64* %3, align 8
  %5834 = load i32, i32* %5697, align 4
  %5835 = sext i32 %5834 to i64
  %5836 = mul nsw i64 %5835, 76
  store i64 %5836, i64* %RCX.i3786, align 8
  %5837 = lshr i64 %5836, 63
  %5838 = add i64 %5836, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %5838, i64* %RAX.i2528, align 8
  %5839 = icmp ult i64 %5838, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5840 = icmp ult i64 %5838, %5836
  %5841 = or i1 %5839, %5840
  %5842 = zext i1 %5841 to i8
  store i8 %5842, i8* %14, align 1
  %5843 = trunc i64 %5838 to i32
  %5844 = and i32 %5843, 252
  %5845 = tail call i32 @llvm.ctpop.i32(i32 %5844)
  %5846 = trunc i32 %5845 to i8
  %5847 = and i8 %5846, 1
  %5848 = xor i8 %5847, 1
  store i8 %5848, i8* %21, align 1
  %5849 = xor i64 %5836, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5850 = xor i64 %5849, %5838
  %5851 = lshr i64 %5850, 4
  %5852 = trunc i64 %5851 to i8
  %5853 = and i8 %5852, 1
  store i8 %5853, i8* %27, align 1
  %5854 = icmp eq i64 %5838, 0
  %5855 = zext i1 %5854 to i8
  store i8 %5855, i8* %30, align 1
  %5856 = lshr i64 %5838, 63
  %5857 = trunc i64 %5856 to i8
  store i8 %5857, i8* %33, align 1
  %5858 = xor i64 %5856, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %5859 = xor i64 %5856, %5837
  %5860 = add nuw nsw i64 %5858, %5859
  %5861 = icmp eq i64 %5860, 2
  %5862 = zext i1 %5861 to i8
  store i8 %5862, i8* %39, align 1
  %5863 = add i64 %5836, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %5864 = add i64 %5832, 27
  store i64 %5864, i64* %3, align 8
  %5865 = inttoptr i64 %5863 to i32*
  %5866 = load i32, i32* %5865, align 4
  %5867 = zext i32 %5866 to i64
  store i64 %5867, i64* %RDX.i3821, align 8
  %5868 = add i64 %5693, -10184
  %5869 = add i64 %5832, 33
  store i64 %5869, i64* %3, align 8
  %5870 = inttoptr i64 %5868 to i32*
  store i32 %5866, i32* %5870, align 4
  %5871 = load i64, i64* %RBP.i, align 8
  %5872 = add i64 %5871, -40
  %5873 = load i64, i64* %3, align 8
  %5874 = add i64 %5873, 4
  store i64 %5874, i64* %3, align 8
  %5875 = inttoptr i64 %5872 to i32*
  %5876 = load i32, i32* %5875, align 4
  %5877 = add i32 %5876, -4
  %5878 = icmp ult i32 %5876, 4
  %5879 = zext i1 %5878 to i8
  store i8 %5879, i8* %14, align 1
  %5880 = and i32 %5877, 255
  %5881 = tail call i32 @llvm.ctpop.i32(i32 %5880)
  %5882 = trunc i32 %5881 to i8
  %5883 = and i8 %5882, 1
  %5884 = xor i8 %5883, 1
  store i8 %5884, i8* %21, align 1
  %5885 = xor i32 %5877, %5876
  %5886 = lshr i32 %5885, 4
  %5887 = trunc i32 %5886 to i8
  %5888 = and i8 %5887, 1
  store i8 %5888, i8* %27, align 1
  %5889 = icmp eq i32 %5877, 0
  %5890 = zext i1 %5889 to i8
  store i8 %5890, i8* %30, align 1
  %5891 = lshr i32 %5877, 31
  %5892 = trunc i32 %5891 to i8
  store i8 %5892, i8* %33, align 1
  %5893 = lshr i32 %5876, 31
  %5894 = xor i32 %5891, %5893
  %5895 = add nuw nsw i32 %5894, %5893
  %5896 = icmp eq i32 %5895, 2
  %5897 = zext i1 %5896 to i8
  store i8 %5897, i8* %39, align 1
  %5898 = icmp ne i8 %5892, 0
  %5899 = xor i1 %5898, %5896
  %.v657 = select i1 %5899, i64 10, i64 120
  %5900 = add i64 %5873, %.v657
  store i64 %5900, i64* %3, align 8
  br i1 %5899, label %block_405c85, label %block_.L_405cf3

block_405c85:                                     ; preds = %block_405c5a
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %5901 = add i64 %5871, -10180
  %5902 = add i64 %5900, 17
  store i64 %5902, i64* %3, align 8
  %5903 = inttoptr i64 %5901 to i32*
  %5904 = load i32, i32* %5903, align 4
  %5905 = sext i32 %5904 to i64
  %5906 = mul nsw i64 %5905, 76
  store i64 %5906, i64* %RCX.i3786, align 8
  %5907 = lshr i64 %5906, 63
  %5908 = add i64 %5906, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %5908, i64* %RAX.i2528, align 8
  %5909 = icmp ult i64 %5908, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5910 = icmp ult i64 %5908, %5906
  %5911 = or i1 %5909, %5910
  %5912 = zext i1 %5911 to i8
  store i8 %5912, i8* %14, align 1
  %5913 = trunc i64 %5908 to i32
  %5914 = and i32 %5913, 252
  %5915 = tail call i32 @llvm.ctpop.i32(i32 %5914)
  %5916 = trunc i32 %5915 to i8
  %5917 = and i8 %5916, 1
  %5918 = xor i8 %5917, 1
  store i8 %5918, i8* %21, align 1
  %5919 = xor i64 %5906, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5920 = xor i64 %5919, %5908
  %5921 = lshr i64 %5920, 4
  %5922 = trunc i64 %5921 to i8
  %5923 = and i8 %5922, 1
  store i8 %5923, i8* %27, align 1
  %5924 = icmp eq i64 %5908, 0
  %5925 = zext i1 %5924 to i8
  store i8 %5925, i8* %30, align 1
  %5926 = lshr i64 %5908, 63
  %5927 = trunc i64 %5926 to i8
  store i8 %5927, i8* %33, align 1
  %5928 = xor i64 %5926, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %5929 = xor i64 %5926, %5907
  %5930 = add nuw nsw i64 %5928, %5929
  %5931 = icmp eq i64 %5930, 2
  %5932 = zext i1 %5931 to i8
  store i8 %5932, i8* %39, align 1
  %5933 = add i64 %5906, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %5934 = add i64 %5900, 28
  store i64 %5934, i64* %3, align 8
  %5935 = inttoptr i64 %5933 to i32*
  %5936 = load i32, i32* %5935, align 4
  %5937 = add i32 %5936, -1
  %5938 = icmp eq i32 %5936, 0
  %5939 = zext i1 %5938 to i8
  store i8 %5939, i8* %14, align 1
  %5940 = and i32 %5937, 255
  %5941 = tail call i32 @llvm.ctpop.i32(i32 %5940)
  %5942 = trunc i32 %5941 to i8
  %5943 = and i8 %5942, 1
  %5944 = xor i8 %5943, 1
  store i8 %5944, i8* %21, align 1
  %5945 = xor i32 %5937, %5936
  %5946 = lshr i32 %5945, 4
  %5947 = trunc i32 %5946 to i8
  %5948 = and i8 %5947, 1
  store i8 %5948, i8* %27, align 1
  %5949 = icmp eq i32 %5937, 0
  %5950 = zext i1 %5949 to i8
  store i8 %5950, i8* %30, align 1
  %5951 = lshr i32 %5937, 31
  %5952 = trunc i32 %5951 to i8
  store i8 %5952, i8* %33, align 1
  %5953 = lshr i32 %5936, 31
  %5954 = xor i32 %5951, %5953
  %5955 = add nuw nsw i32 %5954, %5953
  %5956 = icmp eq i32 %5955, 2
  %5957 = zext i1 %5956 to i8
  store i8 %5957, i8* %39, align 1
  %.v665 = select i1 %5949, i64 34, i64 49
  %5958 = add i64 %5900, %.v665
  store i64 %5958, i64* %3, align 8
  %5959 = load i64, i64* %RBP.i, align 8
  br i1 %5949, label %block_405ca7, label %block_.L_405cb6

block_405ca7:                                     ; preds = %block_405c85
  %5960 = add i64 %5959, -8560
  %5961 = add i64 %5958, 10
  store i64 %5961, i64* %3, align 8
  %5962 = inttoptr i64 %5960 to i32*
  store i32 0, i32* %5962, align 4
  %5963 = load i64, i64* %3, align 8
  %5964 = add i64 %5963, 1156
  store i64 %5964, i64* %3, align 8
  %.pre416 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406135

block_.L_405cb6:                                  ; preds = %block_405c85
  %5965 = add i64 %5959, -10184
  %5966 = add i64 %5958, 7
  store i64 %5966, i64* %3, align 8
  %5967 = inttoptr i64 %5965 to i32*
  %5968 = load i32, i32* %5967, align 4
  %5969 = sext i32 %5968 to i64
  store i64 %5969, i64* %RAX.i2528, align 8
  %5970 = shl nsw i64 %5969, 2
  %5971 = add i64 %5959, -10176
  %5972 = add i64 %5971, %5970
  %5973 = add i64 %5958, 15
  store i64 %5973, i64* %3, align 8
  %5974 = inttoptr i64 %5972 to i32*
  %5975 = load i32, i32* %5974, align 4
  store i8 0, i8* %14, align 1
  %5976 = and i32 %5975, 255
  %5977 = tail call i32 @llvm.ctpop.i32(i32 %5976)
  %5978 = trunc i32 %5977 to i8
  %5979 = and i8 %5978, 1
  %5980 = xor i8 %5979, 1
  store i8 %5980, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5981 = icmp eq i32 %5975, 0
  %5982 = zext i1 %5981 to i8
  store i8 %5982, i8* %30, align 1
  %5983 = lshr i32 %5975, 31
  %5984 = trunc i32 %5983 to i8
  store i8 %5984, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v666 = select i1 %5981, i64 21, i64 51
  %5985 = add i64 %5958, %.v666
  store i64 %5985, i64* %3, align 8
  br i1 %5981, label %block_405ccb, label %block_.L_405ce9

block_405ccb:                                     ; preds = %block_.L_405cb6
  %5986 = add i64 %5959, -8540
  %5987 = add i64 %5985, 6
  store i64 %5987, i64* %3, align 8
  %5988 = inttoptr i64 %5986 to i32*
  %5989 = load i32, i32* %5988, align 4
  %5990 = add i32 %5989, 1
  %5991 = zext i32 %5990 to i64
  store i64 %5991, i64* %RAX.i2528, align 8
  %5992 = icmp eq i32 %5989, -1
  %5993 = icmp eq i32 %5990, 0
  %5994 = or i1 %5992, %5993
  %5995 = zext i1 %5994 to i8
  store i8 %5995, i8* %14, align 1
  %5996 = and i32 %5990, 255
  %5997 = tail call i32 @llvm.ctpop.i32(i32 %5996)
  %5998 = trunc i32 %5997 to i8
  %5999 = and i8 %5998, 1
  %6000 = xor i8 %5999, 1
  store i8 %6000, i8* %21, align 1
  %6001 = xor i32 %5990, %5989
  %6002 = lshr i32 %6001, 4
  %6003 = trunc i32 %6002 to i8
  %6004 = and i8 %6003, 1
  store i8 %6004, i8* %27, align 1
  %6005 = zext i1 %5993 to i8
  store i8 %6005, i8* %30, align 1
  %6006 = lshr i32 %5990, 31
  %6007 = trunc i32 %6006 to i8
  store i8 %6007, i8* %33, align 1
  %6008 = lshr i32 %5989, 31
  %6009 = xor i32 %6006, %6008
  %6010 = add nuw nsw i32 %6009, %6006
  %6011 = icmp eq i32 %6010, 2
  %6012 = zext i1 %6011 to i8
  store i8 %6012, i8* %39, align 1
  %6013 = add i64 %5985, 15
  store i64 %6013, i64* %3, align 8
  store i32 %5990, i32* %5988, align 4
  %6014 = load i64, i64* %RBP.i, align 8
  %6015 = add i64 %6014, -8552
  %6016 = load i64, i64* %3, align 8
  %6017 = add i64 %6016, 6
  store i64 %6017, i64* %3, align 8
  %6018 = inttoptr i64 %6015 to i32*
  %6019 = load i32, i32* %6018, align 4
  %6020 = add i32 %6019, 1
  %6021 = zext i32 %6020 to i64
  store i64 %6021, i64* %RAX.i2528, align 8
  %6022 = icmp eq i32 %6019, -1
  %6023 = icmp eq i32 %6020, 0
  %6024 = or i1 %6022, %6023
  %6025 = zext i1 %6024 to i8
  store i8 %6025, i8* %14, align 1
  %6026 = and i32 %6020, 255
  %6027 = tail call i32 @llvm.ctpop.i32(i32 %6026)
  %6028 = trunc i32 %6027 to i8
  %6029 = and i8 %6028, 1
  %6030 = xor i8 %6029, 1
  store i8 %6030, i8* %21, align 1
  %6031 = xor i32 %6020, %6019
  %6032 = lshr i32 %6031, 4
  %6033 = trunc i32 %6032 to i8
  %6034 = and i8 %6033, 1
  store i8 %6034, i8* %27, align 1
  %6035 = zext i1 %6023 to i8
  store i8 %6035, i8* %30, align 1
  %6036 = lshr i32 %6020, 31
  %6037 = trunc i32 %6036 to i8
  store i8 %6037, i8* %33, align 1
  %6038 = lshr i32 %6019, 31
  %6039 = xor i32 %6036, %6038
  %6040 = add nuw nsw i32 %6039, %6036
  %6041 = icmp eq i32 %6040, 2
  %6042 = zext i1 %6041 to i8
  store i8 %6042, i8* %39, align 1
  %6043 = add i64 %6016, 15
  store i64 %6043, i64* %3, align 8
  store i32 %6020, i32* %6018, align 4
  %.pre432 = load i64, i64* %3, align 8
  %.pre433.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_405ce9

block_.L_405ce9:                                  ; preds = %block_.L_405cb6, %block_405ccb
  %.pre433 = phi i64 [ %.pre433.pre, %block_405ccb ], [ %5959, %block_.L_405cb6 ]
  %6044 = phi i64 [ %.pre432, %block_405ccb ], [ %5985, %block_.L_405cb6 ]
  %6045 = add i64 %6044, 10
  store i64 %6045, i64* %3, align 8
  br label %block_.L_405cf3

block_.L_405cf3:                                  ; preds = %block_405c5a, %block_.L_405ce9
  %6046 = phi i64 [ %5900, %block_405c5a ], [ %6045, %block_.L_405ce9 ]
  %6047 = phi i64 [ %5871, %block_405c5a ], [ %.pre433, %block_.L_405ce9 ]
  %6048 = add i64 %6047, -10184
  %6049 = add i64 %6046, 7
  store i64 %6049, i64* %3, align 8
  %6050 = inttoptr i64 %6048 to i32*
  %6051 = load i32, i32* %6050, align 4
  %6052 = sext i32 %6051 to i64
  store i64 %6052, i64* %RAX.i2528, align 8
  %6053 = shl nsw i64 %6052, 2
  %6054 = add i64 %6047, -10176
  %6055 = add i64 %6054, %6053
  %6056 = add i64 %6046, 15
  store i64 %6056, i64* %3, align 8
  %6057 = inttoptr i64 %6055 to i32*
  %6058 = load i32, i32* %6057, align 4
  store i8 0, i8* %14, align 1
  %6059 = and i32 %6058, 255
  %6060 = tail call i32 @llvm.ctpop.i32(i32 %6059)
  %6061 = trunc i32 %6060 to i8
  %6062 = and i8 %6061, 1
  %6063 = xor i8 %6062, 1
  store i8 %6063, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6064 = icmp eq i32 %6058, 0
  %6065 = zext i1 %6064 to i8
  store i8 %6065, i8* %30, align 1
  %6066 = lshr i32 %6058, 31
  %6067 = trunc i32 %6066 to i8
  store i8 %6067, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v658 = select i1 %6064, i64 21, i64 185
  %6068 = add i64 %6046, %.v658
  store i64 %6068, i64* %3, align 8
  br i1 %6064, label %block_405d08, label %block_.L_405dac

block_405d08:                                     ; preds = %block_.L_405cf3
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %6069 = add i64 %6047, -10180
  %6070 = add i64 %6068, 17
  store i64 %6070, i64* %3, align 8
  %6071 = inttoptr i64 %6069 to i32*
  %6072 = load i32, i32* %6071, align 4
  %6073 = sext i32 %6072 to i64
  %6074 = mul nsw i64 %6073, 76
  store i64 %6074, i64* %RCX.i3786, align 8
  %6075 = lshr i64 %6074, 63
  %6076 = add i64 %6074, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6076, i64* %RAX.i2528, align 8
  %6077 = icmp ult i64 %6076, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6078 = icmp ult i64 %6076, %6074
  %6079 = or i1 %6077, %6078
  %6080 = zext i1 %6079 to i8
  store i8 %6080, i8* %14, align 1
  %6081 = trunc i64 %6076 to i32
  %6082 = and i32 %6081, 252
  %6083 = tail call i32 @llvm.ctpop.i32(i32 %6082)
  %6084 = trunc i32 %6083 to i8
  %6085 = and i8 %6084, 1
  %6086 = xor i8 %6085, 1
  store i8 %6086, i8* %21, align 1
  %6087 = xor i64 %6074, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6088 = xor i64 %6087, %6076
  %6089 = lshr i64 %6088, 4
  %6090 = trunc i64 %6089 to i8
  %6091 = and i8 %6090, 1
  store i8 %6091, i8* %27, align 1
  %6092 = icmp eq i64 %6076, 0
  %6093 = zext i1 %6092 to i8
  store i8 %6093, i8* %30, align 1
  %6094 = lshr i64 %6076, 63
  %6095 = trunc i64 %6094 to i8
  store i8 %6095, i8* %33, align 1
  %6096 = xor i64 %6094, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6097 = xor i64 %6094, %6075
  %6098 = add nuw nsw i64 %6096, %6097
  %6099 = icmp eq i64 %6098, 2
  %6100 = zext i1 %6099 to i8
  store i8 %6100, i8* %39, align 1
  %6101 = add i64 %6074, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %6102 = add i64 %6068, 28
  store i64 %6102, i64* %3, align 8
  %6103 = inttoptr i64 %6101 to i32*
  %6104 = load i32, i32* %6103, align 4
  store i8 0, i8* %14, align 1
  %6105 = and i32 %6104, 255
  %6106 = tail call i32 @llvm.ctpop.i32(i32 %6105)
  %6107 = trunc i32 %6106 to i8
  %6108 = and i8 %6107, 1
  %6109 = xor i8 %6108, 1
  store i8 %6109, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6110 = icmp eq i32 %6104, 0
  %6111 = zext i1 %6110 to i8
  store i8 %6111, i8* %30, align 1
  %6112 = lshr i32 %6104, 31
  %6113 = trunc i32 %6112 to i8
  store i8 %6113, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v659 = select i1 %6110, i64 34, i64 164
  %6114 = add i64 %6068, %.v659
  store i64 %6114, i64* %3, align 8
  br i1 %6110, label %block_405d2a, label %block_.L_405dac

block_405d2a:                                     ; preds = %block_405d08
  %6115 = add i64 %6047, -8564
  %6116 = add i64 %6114, 6
  store i64 %6116, i64* %3, align 8
  %6117 = inttoptr i64 %6115 to i32*
  %6118 = load i32, i32* %6117, align 4
  %6119 = add i32 %6118, 1
  %6120 = zext i32 %6119 to i64
  store i64 %6120, i64* %RAX.i2528, align 8
  %6121 = icmp eq i32 %6118, -1
  %6122 = icmp eq i32 %6119, 0
  %6123 = or i1 %6121, %6122
  %6124 = zext i1 %6123 to i8
  store i8 %6124, i8* %14, align 1
  %6125 = and i32 %6119, 255
  %6126 = tail call i32 @llvm.ctpop.i32(i32 %6125)
  %6127 = trunc i32 %6126 to i8
  %6128 = and i8 %6127, 1
  %6129 = xor i8 %6128, 1
  store i8 %6129, i8* %21, align 1
  %6130 = xor i32 %6119, %6118
  %6131 = lshr i32 %6130, 4
  %6132 = trunc i32 %6131 to i8
  %6133 = and i8 %6132, 1
  store i8 %6133, i8* %27, align 1
  %6134 = zext i1 %6122 to i8
  store i8 %6134, i8* %30, align 1
  %6135 = lshr i32 %6119, 31
  %6136 = trunc i32 %6135 to i8
  store i8 %6136, i8* %33, align 1
  %6137 = lshr i32 %6118, 31
  %6138 = xor i32 %6135, %6137
  %6139 = add nuw nsw i32 %6138, %6135
  %6140 = icmp eq i32 %6139, 2
  %6141 = zext i1 %6140 to i8
  store i8 %6141, i8* %39, align 1
  %6142 = add i64 %6114, 15
  store i64 %6142, i64* %3, align 8
  store i32 %6119, i32* %6117, align 4
  %6143 = load i64, i64* %RBP.i, align 8
  %6144 = add i64 %6143, -40
  %6145 = load i64, i64* %3, align 8
  %6146 = add i64 %6145, 4
  store i64 %6146, i64* %3, align 8
  %6147 = inttoptr i64 %6144 to i32*
  %6148 = load i32, i32* %6147, align 4
  %6149 = add i32 %6148, -4
  %6150 = icmp ult i32 %6148, 4
  %6151 = zext i1 %6150 to i8
  store i8 %6151, i8* %14, align 1
  %6152 = and i32 %6149, 255
  %6153 = tail call i32 @llvm.ctpop.i32(i32 %6152)
  %6154 = trunc i32 %6153 to i8
  %6155 = and i8 %6154, 1
  %6156 = xor i8 %6155, 1
  store i8 %6156, i8* %21, align 1
  %6157 = xor i32 %6149, %6148
  %6158 = lshr i32 %6157, 4
  %6159 = trunc i32 %6158 to i8
  %6160 = and i8 %6159, 1
  store i8 %6160, i8* %27, align 1
  %6161 = icmp eq i32 %6149, 0
  %6162 = zext i1 %6161 to i8
  store i8 %6162, i8* %30, align 1
  %6163 = lshr i32 %6149, 31
  %6164 = trunc i32 %6163 to i8
  store i8 %6164, i8* %33, align 1
  %6165 = lshr i32 %6148, 31
  %6166 = xor i32 %6163, %6165
  %6167 = add nuw nsw i32 %6166, %6165
  %6168 = icmp eq i32 %6167, 2
  %6169 = zext i1 %6168 to i8
  store i8 %6169, i8* %39, align 1
  %6170 = icmp ne i8 %6164, 0
  %6171 = xor i1 %6170, %6168
  %.v660 = select i1 %6171, i64 10, i64 65
  %6172 = add i64 %6145, %.v660
  store i64 %6172, i64* %3, align 8
  br i1 %6171, label %block_405d43, label %block_.L_405d7a

block_405d43:                                     ; preds = %block_405d2a
  %6173 = add i64 %6143, -10180
  %6174 = add i64 %6172, 6
  store i64 %6174, i64* %3, align 8
  %6175 = inttoptr i64 %6173 to i32*
  %6176 = load i32, i32* %6175, align 4
  %6177 = zext i32 %6176 to i64
  store i64 %6177, i64* %RDI.i3360, align 8
  %6178 = add i64 %6172, 39485
  %6179 = add i64 %6172, 11
  %6180 = load i64, i64* %6, align 8
  %6181 = add i64 %6180, -8
  %6182 = inttoptr i64 %6181 to i64*
  store i64 %6179, i64* %6182, align 8
  store i64 %6181, i64* %6, align 8
  store i64 %6178, i64* %3, align 8
  %call2_405d49 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %6178, %struct.Memory* %MEMORY.81)
  %6183 = load i32, i32* %EAX.i3678, align 4
  %6184 = load i64, i64* %3, align 8
  %6185 = add i32 %6183, -2
  %6186 = icmp ult i32 %6183, 2
  %6187 = zext i1 %6186 to i8
  store i8 %6187, i8* %14, align 1
  %6188 = and i32 %6185, 255
  %6189 = tail call i32 @llvm.ctpop.i32(i32 %6188)
  %6190 = trunc i32 %6189 to i8
  %6191 = and i8 %6190, 1
  %6192 = xor i8 %6191, 1
  store i8 %6192, i8* %21, align 1
  %6193 = xor i32 %6185, %6183
  %6194 = lshr i32 %6193, 4
  %6195 = trunc i32 %6194 to i8
  %6196 = and i8 %6195, 1
  store i8 %6196, i8* %27, align 1
  %6197 = icmp eq i32 %6185, 0
  %6198 = zext i1 %6197 to i8
  store i8 %6198, i8* %30, align 1
  %6199 = lshr i32 %6185, 31
  %6200 = trunc i32 %6199 to i8
  store i8 %6200, i8* %33, align 1
  %6201 = lshr i32 %6183, 31
  %6202 = xor i32 %6199, %6201
  %6203 = add nuw nsw i32 %6202, %6201
  %6204 = icmp eq i32 %6203, 2
  %6205 = zext i1 %6204 to i8
  store i8 %6205, i8* %39, align 1
  %6206 = icmp ne i8 %6200, 0
  %6207 = xor i1 %6206, %6204
  %.demorgan = or i1 %6197, %6207
  %.v663 = select i1 %.demorgan, i64 9, i64 44
  %6208 = add i64 %6184, %.v663
  store i64 %6208, i64* %3, align 8
  br i1 %.demorgan, label %block_405d57, label %block_.L_405d7a

block_405d57:                                     ; preds = %block_405d43
  %6209 = load i64, i64* %RBP.i, align 8
  %6210 = add i64 %6209, -10180
  %6211 = add i64 %6208, 6
  store i64 %6211, i64* %3, align 8
  %6212 = inttoptr i64 %6210 to i32*
  %6213 = load i32, i32* %6212, align 4
  %6214 = zext i32 %6213 to i64
  store i64 %6214, i64* %RDI.i3360, align 8
  %6215 = add i64 %6208, 55961
  %6216 = add i64 %6208, 11
  %6217 = load i64, i64* %6, align 8
  %6218 = add i64 %6217, -8
  %6219 = inttoptr i64 %6218 to i64*
  store i64 %6216, i64* %6219, align 8
  store i64 %6218, i64* %6, align 8
  store i64 %6215, i64* %3, align 8
  %call2_405d5d = tail call %struct.Memory* @sub_4137f0.countstones(%struct.State* nonnull %0, i64 %6215, %struct.Memory* %MEMORY.81)
  %6220 = load i32, i32* %EAX.i3678, align 4
  %6221 = load i64, i64* %3, align 8
  %6222 = add i32 %6220, -3
  %6223 = icmp ult i32 %6220, 3
  %6224 = zext i1 %6223 to i8
  store i8 %6224, i8* %14, align 1
  %6225 = and i32 %6222, 255
  %6226 = tail call i32 @llvm.ctpop.i32(i32 %6225)
  %6227 = trunc i32 %6226 to i8
  %6228 = and i8 %6227, 1
  %6229 = xor i8 %6228, 1
  store i8 %6229, i8* %21, align 1
  %6230 = xor i32 %6222, %6220
  %6231 = lshr i32 %6230, 4
  %6232 = trunc i32 %6231 to i8
  %6233 = and i8 %6232, 1
  store i8 %6233, i8* %27, align 1
  %6234 = icmp eq i32 %6222, 0
  %6235 = zext i1 %6234 to i8
  store i8 %6235, i8* %30, align 1
  %6236 = lshr i32 %6222, 31
  %6237 = trunc i32 %6236 to i8
  store i8 %6237, i8* %33, align 1
  %6238 = lshr i32 %6220, 31
  %6239 = xor i32 %6236, %6238
  %6240 = add nuw nsw i32 %6239, %6238
  %6241 = icmp eq i32 %6240, 2
  %6242 = zext i1 %6241 to i8
  store i8 %6242, i8* %39, align 1
  %6243 = icmp ne i8 %6237, 0
  %6244 = xor i1 %6243, %6241
  %.v664 = select i1 %6244, i64 24, i64 9
  %6245 = add i64 %6221, %.v664
  store i64 %6245, i64* %3, align 8
  br i1 %6244, label %block_.L_405d7a, label %block_405d6b

block_405d6b:                                     ; preds = %block_405d57
  %6246 = load i64, i64* %RBP.i, align 8
  %6247 = add i64 %6246, -8564
  %6248 = add i64 %6245, 6
  store i64 %6248, i64* %3, align 8
  %6249 = inttoptr i64 %6247 to i32*
  %6250 = load i32, i32* %6249, align 4
  %6251 = add i32 %6250, 1
  %6252 = zext i32 %6251 to i64
  store i64 %6252, i64* %RAX.i2528, align 8
  %6253 = icmp eq i32 %6250, -1
  %6254 = icmp eq i32 %6251, 0
  %6255 = or i1 %6253, %6254
  %6256 = zext i1 %6255 to i8
  store i8 %6256, i8* %14, align 1
  %6257 = and i32 %6251, 255
  %6258 = tail call i32 @llvm.ctpop.i32(i32 %6257)
  %6259 = trunc i32 %6258 to i8
  %6260 = and i8 %6259, 1
  %6261 = xor i8 %6260, 1
  store i8 %6261, i8* %21, align 1
  %6262 = xor i32 %6251, %6250
  %6263 = lshr i32 %6262, 4
  %6264 = trunc i32 %6263 to i8
  %6265 = and i8 %6264, 1
  store i8 %6265, i8* %27, align 1
  %6266 = zext i1 %6254 to i8
  store i8 %6266, i8* %30, align 1
  %6267 = lshr i32 %6251, 31
  %6268 = trunc i32 %6267 to i8
  store i8 %6268, i8* %33, align 1
  %6269 = lshr i32 %6250, 31
  %6270 = xor i32 %6267, %6269
  %6271 = add nuw nsw i32 %6270, %6267
  %6272 = icmp eq i32 %6271, 2
  %6273 = zext i1 %6272 to i8
  store i8 %6273, i8* %39, align 1
  %6274 = add i64 %6245, 15
  store i64 %6274, i64* %3, align 8
  store i32 %6251, i32* %6249, align 4
  %.pre434 = load i64, i64* %3, align 8
  br label %block_.L_405d7a

block_.L_405d7a:                                  ; preds = %block_405d43, %block_405d2a, %block_405d6b, %block_405d57
  %6275 = phi i64 [ %6172, %block_405d2a ], [ %.pre434, %block_405d6b ], [ %6245, %block_405d57 ], [ %6208, %block_405d43 ]
  %6276 = load i64, i64* %RBP.i, align 8
  %6277 = add i64 %6276, -40
  %6278 = add i64 %6275, 4
  store i64 %6278, i64* %3, align 8
  %6279 = inttoptr i64 %6277 to i32*
  %6280 = load i32, i32* %6279, align 4
  %6281 = add i32 %6280, -4
  %6282 = icmp ult i32 %6280, 4
  %6283 = zext i1 %6282 to i8
  store i8 %6283, i8* %14, align 1
  %6284 = and i32 %6281, 255
  %6285 = tail call i32 @llvm.ctpop.i32(i32 %6284)
  %6286 = trunc i32 %6285 to i8
  %6287 = and i8 %6286, 1
  %6288 = xor i8 %6287, 1
  store i8 %6288, i8* %21, align 1
  %6289 = xor i32 %6281, %6280
  %6290 = lshr i32 %6289, 4
  %6291 = trunc i32 %6290 to i8
  %6292 = and i8 %6291, 1
  store i8 %6292, i8* %27, align 1
  %6293 = icmp eq i32 %6281, 0
  %6294 = zext i1 %6293 to i8
  store i8 %6294, i8* %30, align 1
  %6295 = lshr i32 %6281, 31
  %6296 = trunc i32 %6295 to i8
  store i8 %6296, i8* %33, align 1
  %6297 = lshr i32 %6280, 31
  %6298 = xor i32 %6295, %6297
  %6299 = add nuw nsw i32 %6298, %6297
  %6300 = icmp eq i32 %6299, 2
  %6301 = zext i1 %6300 to i8
  store i8 %6301, i8* %39, align 1
  %6302 = icmp ne i8 %6296, 0
  %6303 = xor i1 %6302, %6300
  %.v661 = select i1 %6303, i64 10, i64 45
  %6304 = add i64 %6275, %.v661
  store i64 %6304, i64* %3, align 8
  br i1 %6303, label %block_405d84, label %block_.L_405da7

block_405d84:                                     ; preds = %block_.L_405d7a
  %6305 = add i64 %6276, -10180
  %6306 = add i64 %6304, 6
  store i64 %6306, i64* %3, align 8
  %6307 = inttoptr i64 %6305 to i32*
  %6308 = load i32, i32* %6307, align 4
  %6309 = zext i32 %6308 to i64
  store i64 %6309, i64* %RDI.i3360, align 8
  %6310 = add i64 %6304, 39420
  %6311 = add i64 %6304, 11
  %6312 = load i64, i64* %6, align 8
  %6313 = add i64 %6312, -8
  %6314 = inttoptr i64 %6313 to i64*
  store i64 %6311, i64* %6314, align 8
  store i64 %6313, i64* %6, align 8
  store i64 %6310, i64* %3, align 8
  %call2_405d8a = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %6310, %struct.Memory* %MEMORY.81)
  %6315 = load i32, i32* %EAX.i3678, align 4
  %6316 = load i64, i64* %3, align 8
  %6317 = add i32 %6315, -1
  %6318 = icmp eq i32 %6315, 0
  %6319 = zext i1 %6318 to i8
  store i8 %6319, i8* %14, align 1
  %6320 = and i32 %6317, 255
  %6321 = tail call i32 @llvm.ctpop.i32(i32 %6320)
  %6322 = trunc i32 %6321 to i8
  %6323 = and i8 %6322, 1
  %6324 = xor i8 %6323, 1
  store i8 %6324, i8* %21, align 1
  %6325 = xor i32 %6317, %6315
  %6326 = lshr i32 %6325, 4
  %6327 = trunc i32 %6326 to i8
  %6328 = and i8 %6327, 1
  store i8 %6328, i8* %27, align 1
  %6329 = icmp eq i32 %6317, 0
  %6330 = zext i1 %6329 to i8
  store i8 %6330, i8* %30, align 1
  %6331 = lshr i32 %6317, 31
  %6332 = trunc i32 %6331 to i8
  store i8 %6332, i8* %33, align 1
  %6333 = lshr i32 %6315, 31
  %6334 = xor i32 %6331, %6333
  %6335 = add nuw nsw i32 %6334, %6333
  %6336 = icmp eq i32 %6335, 2
  %6337 = zext i1 %6336 to i8
  store i8 %6337, i8* %39, align 1
  %.v662 = select i1 %6329, i64 9, i64 24
  %6338 = add i64 %6316, %.v662
  store i64 %6338, i64* %3, align 8
  br i1 %6329, label %block_405d98, label %block_.L_405da7

block_405d98:                                     ; preds = %block_405d84
  %6339 = load i64, i64* %RBP.i, align 8
  %6340 = add i64 %6339, -8564
  %6341 = add i64 %6338, 6
  store i64 %6341, i64* %3, align 8
  %6342 = inttoptr i64 %6340 to i32*
  %6343 = load i32, i32* %6342, align 4
  %6344 = add i32 %6343, 3
  %6345 = zext i32 %6344 to i64
  store i64 %6345, i64* %RAX.i2528, align 8
  %6346 = icmp ugt i32 %6343, -4
  %6347 = zext i1 %6346 to i8
  store i8 %6347, i8* %14, align 1
  %6348 = and i32 %6344, 255
  %6349 = tail call i32 @llvm.ctpop.i32(i32 %6348)
  %6350 = trunc i32 %6349 to i8
  %6351 = and i8 %6350, 1
  %6352 = xor i8 %6351, 1
  store i8 %6352, i8* %21, align 1
  %6353 = xor i32 %6344, %6343
  %6354 = lshr i32 %6353, 4
  %6355 = trunc i32 %6354 to i8
  %6356 = and i8 %6355, 1
  store i8 %6356, i8* %27, align 1
  %6357 = icmp eq i32 %6344, 0
  %6358 = zext i1 %6357 to i8
  store i8 %6358, i8* %30, align 1
  %6359 = lshr i32 %6344, 31
  %6360 = trunc i32 %6359 to i8
  store i8 %6360, i8* %33, align 1
  %6361 = lshr i32 %6343, 31
  %6362 = xor i32 %6359, %6361
  %6363 = add nuw nsw i32 %6362, %6359
  %6364 = icmp eq i32 %6363, 2
  %6365 = zext i1 %6364 to i8
  store i8 %6365, i8* %39, align 1
  %6366 = add i64 %6338, 15
  store i64 %6366, i64* %3, align 8
  store i32 %6344, i32* %6342, align 4
  %.pre435 = load i64, i64* %3, align 8
  br label %block_.L_405da7

block_.L_405da7:                                  ; preds = %block_405d84, %block_.L_405d7a, %block_405d98
  %6367 = phi i64 [ %6304, %block_.L_405d7a ], [ %.pre435, %block_405d98 ], [ %6338, %block_405d84 ]
  %6368 = add i64 %6367, 5
  store i64 %6368, i64* %3, align 8
  %.pre436 = load i64, i64* %RBP.i, align 8
  br label %block_.L_405dac

block_.L_405dac:                                  ; preds = %block_405d08, %block_.L_405cf3, %block_.L_405da7
  %6369 = phi i64 [ %6368, %block_.L_405da7 ], [ %6114, %block_405d08 ], [ %6068, %block_.L_405cf3 ]
  %6370 = phi i64 [ %.pre436, %block_.L_405da7 ], [ %6047, %block_405d08 ], [ %6047, %block_.L_405cf3 ]
  %6371 = add i64 %6370, -10184
  %6372 = add i64 %6369, 7
  store i64 %6372, i64* %3, align 8
  %6373 = inttoptr i64 %6371 to i32*
  %6374 = load i32, i32* %6373, align 4
  %6375 = sext i32 %6374 to i64
  store i64 %6375, i64* %RAX.i2528, align 8
  %6376 = shl nsw i64 %6375, 2
  %6377 = add i64 %6370, -10176
  %6378 = add i64 %6377, %6376
  %6379 = add i64 %6369, 18
  store i64 %6379, i64* %3, align 8
  %6380 = inttoptr i64 %6378 to i32*
  store i32 1, i32* %6380, align 4
  %6381 = load i64, i64* %3, align 8
  %6382 = add i64 %6381, 868
  br label %block_.L_406122

block_.L_405dc3:                                  ; preds = %block_.L_405c42
  %6383 = add i64 %5832, 7
  store i64 %6383, i64* %3, align 8
  %6384 = load i32, i32* %5697, align 4
  %6385 = sext i32 %6384 to i64
  store i64 %6385, i64* %RAX.i2528, align 8
  %6386 = add nsw i64 %6385, 12099168
  %6387 = add i64 %5832, 15
  store i64 %6387, i64* %3, align 8
  %6388 = inttoptr i64 %6386 to i8*
  %6389 = load i8, i8* %6388, align 1
  %6390 = zext i8 %6389 to i64
  store i64 %6390, i64* %RCX.i3786, align 8
  %6391 = zext i8 %6389 to i32
  %6392 = add i64 %5693, -20
  %6393 = add i64 %5832, 18
  store i64 %6393, i64* %3, align 8
  %6394 = inttoptr i64 %6392 to i32*
  %6395 = load i32, i32* %6394, align 4
  %6396 = sub i32 %6391, %6395
  %6397 = icmp ult i32 %6391, %6395
  %6398 = zext i1 %6397 to i8
  store i8 %6398, i8* %14, align 1
  %6399 = and i32 %6396, 255
  %6400 = tail call i32 @llvm.ctpop.i32(i32 %6399)
  %6401 = trunc i32 %6400 to i8
  %6402 = and i8 %6401, 1
  %6403 = xor i8 %6402, 1
  store i8 %6403, i8* %21, align 1
  %6404 = xor i32 %6395, %6391
  %6405 = xor i32 %6404, %6396
  %6406 = lshr i32 %6405, 4
  %6407 = trunc i32 %6406 to i8
  %6408 = and i8 %6407, 1
  store i8 %6408, i8* %27, align 1
  %6409 = icmp eq i32 %6396, 0
  %6410 = zext i1 %6409 to i8
  store i8 %6410, i8* %30, align 1
  %6411 = lshr i32 %6396, 31
  %6412 = trunc i32 %6411 to i8
  store i8 %6412, i8* %33, align 1
  %6413 = lshr i32 %6395, 31
  %6414 = add nuw nsw i32 %6411, %6413
  %6415 = icmp eq i32 %6414, 2
  %6416 = zext i1 %6415 to i8
  store i8 %6416, i8* %39, align 1
  %.v638 = select i1 %6409, i64 24, i64 858
  %6417 = add i64 %5832, %.v638
  store i64 %6417, i64* %3, align 8
  br i1 %6409, label %block_405ddb, label %block_.L_40611d

block_405ddb:                                     ; preds = %block_.L_405dc3
  %6418 = add i64 %6417, 6
  store i64 %6418, i64* %3, align 8
  %6419 = load i32, i32* %5697, align 4
  %6420 = zext i32 %6419 to i64
  store i64 %6420, i64* %RAX.i2528, align 8
  %6421 = add i64 %5693, -8072
  %6422 = add i64 %6417, 13
  store i64 %6422, i64* %3, align 8
  %6423 = inttoptr i64 %6421 to i32*
  %6424 = load i32, i32* %6423, align 4
  %6425 = sext i32 %6424 to i64
  store i64 %6425, i64* %RCX.i3786, align 8
  %6426 = shl nsw i64 %6425, 2
  %6427 = add i64 %5693, -8048
  %6428 = add i64 %6427, %6426
  %6429 = add i64 %6417, 20
  store i64 %6429, i64* %3, align 8
  %6430 = inttoptr i64 %6428 to i32*
  store i32 %6419, i32* %6430, align 4
  %6431 = load i64, i64* %RBP.i, align 8
  %6432 = add i64 %6431, -8560
  %6433 = load i64, i64* %3, align 8
  %6434 = add i64 %6433, 7
  store i64 %6434, i64* %3, align 8
  %6435 = inttoptr i64 %6432 to i32*
  %6436 = load i32, i32* %6435, align 4
  %6437 = add i32 %6436, -3
  %6438 = icmp ult i32 %6436, 3
  %6439 = zext i1 %6438 to i8
  store i8 %6439, i8* %14, align 1
  %6440 = and i32 %6437, 255
  %6441 = tail call i32 @llvm.ctpop.i32(i32 %6440)
  %6442 = trunc i32 %6441 to i8
  %6443 = and i8 %6442, 1
  %6444 = xor i8 %6443, 1
  store i8 %6444, i8* %21, align 1
  %6445 = xor i32 %6437, %6436
  %6446 = lshr i32 %6445, 4
  %6447 = trunc i32 %6446 to i8
  %6448 = and i8 %6447, 1
  store i8 %6448, i8* %27, align 1
  %6449 = icmp eq i32 %6437, 0
  %6450 = zext i1 %6449 to i8
  store i8 %6450, i8* %30, align 1
  %6451 = lshr i32 %6437, 31
  %6452 = trunc i32 %6451 to i8
  store i8 %6452, i8* %33, align 1
  %6453 = lshr i32 %6436, 31
  %6454 = xor i32 %6451, %6453
  %6455 = add nuw nsw i32 %6454, %6453
  %6456 = icmp eq i32 %6455, 2
  %6457 = zext i1 %6456 to i8
  store i8 %6457, i8* %39, align 1
  %.v639 = select i1 %6449, i64 13, i64 57
  %6458 = add i64 %6433, %.v639
  store i64 %6458, i64* %3, align 8
  br i1 %6449, label %block_405dfc, label %block_.L_405e28

block_405dfc:                                     ; preds = %block_405ddb
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %6459 = add i64 %6431, -10180
  %6460 = add i64 %6458, 17
  store i64 %6460, i64* %3, align 8
  %6461 = inttoptr i64 %6459 to i32*
  %6462 = load i32, i32* %6461, align 4
  %6463 = sext i32 %6462 to i64
  %6464 = mul nsw i64 %6463, 76
  store i64 %6464, i64* %RCX.i3786, align 8
  %6465 = lshr i64 %6464, 63
  %6466 = add i64 %6464, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6466, i64* %RAX.i2528, align 8
  %6467 = icmp ult i64 %6466, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6468 = icmp ult i64 %6466, %6464
  %6469 = or i1 %6467, %6468
  %6470 = zext i1 %6469 to i8
  store i8 %6470, i8* %14, align 1
  %6471 = trunc i64 %6466 to i32
  %6472 = and i32 %6471, 252
  %6473 = tail call i32 @llvm.ctpop.i32(i32 %6472)
  %6474 = trunc i32 %6473 to i8
  %6475 = and i8 %6474, 1
  %6476 = xor i8 %6475, 1
  store i8 %6476, i8* %21, align 1
  %6477 = xor i64 %6464, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6478 = xor i64 %6477, %6466
  %6479 = lshr i64 %6478, 4
  %6480 = trunc i64 %6479 to i8
  %6481 = and i8 %6480, 1
  store i8 %6481, i8* %27, align 1
  %6482 = icmp eq i64 %6466, 0
  %6483 = zext i1 %6482 to i8
  store i8 %6483, i8* %30, align 1
  %6484 = lshr i64 %6466, 63
  %6485 = trunc i64 %6484 to i8
  store i8 %6485, i8* %33, align 1
  %6486 = xor i64 %6484, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6487 = xor i64 %6484, %6465
  %6488 = add nuw nsw i64 %6486, %6487
  %6489 = icmp eq i64 %6488, 2
  %6490 = zext i1 %6489 to i8
  store i8 %6490, i8* %39, align 1
  %6491 = add i64 %6464, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %6492 = add i64 %6458, 28
  store i64 %6492, i64* %3, align 8
  %6493 = inttoptr i64 %6491 to i32*
  %6494 = load i32, i32* %6493, align 4
  %6495 = add i32 %6494, -1
  %6496 = icmp eq i32 %6494, 0
  %6497 = zext i1 %6496 to i8
  store i8 %6497, i8* %14, align 1
  %6498 = and i32 %6495, 255
  %6499 = tail call i32 @llvm.ctpop.i32(i32 %6498)
  %6500 = trunc i32 %6499 to i8
  %6501 = and i8 %6500, 1
  %6502 = xor i8 %6501, 1
  store i8 %6502, i8* %21, align 1
  %6503 = xor i32 %6495, %6494
  %6504 = lshr i32 %6503, 4
  %6505 = trunc i32 %6504 to i8
  %6506 = and i8 %6505, 1
  store i8 %6506, i8* %27, align 1
  %6507 = icmp eq i32 %6495, 0
  %6508 = zext i1 %6507 to i8
  store i8 %6508, i8* %30, align 1
  %6509 = lshr i32 %6495, 31
  %6510 = trunc i32 %6509 to i8
  store i8 %6510, i8* %33, align 1
  %6511 = lshr i32 %6494, 31
  %6512 = xor i32 %6509, %6511
  %6513 = add nuw nsw i32 %6512, %6511
  %6514 = icmp eq i32 %6513, 2
  %6515 = zext i1 %6514 to i8
  store i8 %6515, i8* %39, align 1
  %.v656 = select i1 %6507, i64 34, i64 44
  %6516 = add i64 %6458, %.v656
  store i64 %6516, i64* %3, align 8
  br i1 %6507, label %block_405e1e, label %block_.L_405e28

block_405e1e:                                     ; preds = %block_405dfc
  %6517 = load i64, i64* %RBP.i, align 8
  %6518 = add i64 %6517, -8560
  %6519 = add i64 %6516, 10
  store i64 %6519, i64* %3, align 8
  %6520 = inttoptr i64 %6518 to i32*
  store i32 1, i32* %6520, align 4
  %.pre437 = load i64, i64* %3, align 8
  br label %block_.L_405e28

block_.L_405e28:                                  ; preds = %block_405dfc, %block_405ddb, %block_405e1e
  %6521 = phi i64 [ %.pre437, %block_405e1e ], [ %6516, %block_405dfc ], [ %6458, %block_405ddb ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %6522 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %6522, i64* %RCX.i3786, align 8
  %6523 = load i64, i64* %RBP.i, align 8
  %6524 = add i64 %6523, -10180
  %6525 = add i64 %6521, 25
  store i64 %6525, i64* %3, align 8
  %6526 = inttoptr i64 %6524 to i32*
  %6527 = load i32, i32* %6526, align 4
  %6528 = sext i32 %6527 to i64
  %6529 = mul nsw i64 %6528, 76
  store i64 %6529, i64* %RDX.i3821, align 8
  %6530 = lshr i64 %6529, 63
  %6531 = add i64 %6529, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6531, i64* %RAX.i2528, align 8
  %6532 = icmp ult i64 %6531, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6533 = icmp ult i64 %6531, %6529
  %6534 = or i1 %6532, %6533
  %6535 = zext i1 %6534 to i8
  store i8 %6535, i8* %14, align 1
  %6536 = trunc i64 %6531 to i32
  %6537 = and i32 %6536, 252
  %6538 = tail call i32 @llvm.ctpop.i32(i32 %6537)
  %6539 = trunc i32 %6538 to i8
  %6540 = and i8 %6539, 1
  %6541 = xor i8 %6540, 1
  store i8 %6541, i8* %21, align 1
  %6542 = xor i64 %6529, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6543 = xor i64 %6542, %6531
  %6544 = lshr i64 %6543, 4
  %6545 = trunc i64 %6544 to i8
  %6546 = and i8 %6545, 1
  store i8 %6546, i8* %27, align 1
  %6547 = icmp eq i64 %6531, 0
  %6548 = zext i1 %6547 to i8
  store i8 %6548, i8* %30, align 1
  %6549 = lshr i64 %6531, 63
  %6550 = trunc i64 %6549 to i8
  store i8 %6550, i8* %33, align 1
  %6551 = xor i64 %6549, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6552 = xor i64 %6549, %6530
  %6553 = add nuw nsw i64 %6551, %6552
  %6554 = icmp eq i64 %6553, 2
  %6555 = zext i1 %6554 to i8
  store i8 %6555, i8* %39, align 1
  %6556 = add i64 %6529, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %6557 = add i64 %6521, 36
  store i64 %6557, i64* %3, align 8
  %6558 = inttoptr i64 %6556 to i32*
  %6559 = load i32, i32* %6558, align 4
  %6560 = sext i32 %6559 to i64
  %6561 = mul nsw i64 %6560, 104
  store i64 %6561, i64* %RAX.i2528, align 8
  %6562 = lshr i64 %6561, 63
  %6563 = load i64, i64* %RCX.i3786, align 8
  %6564 = add i64 %6561, %6563
  store i64 %6564, i64* %RCX.i3786, align 8
  %6565 = icmp ult i64 %6564, %6563
  %6566 = icmp ult i64 %6564, %6561
  %6567 = or i1 %6565, %6566
  %6568 = zext i1 %6567 to i8
  store i8 %6568, i8* %14, align 1
  %6569 = trunc i64 %6564 to i32
  %6570 = and i32 %6569, 255
  %6571 = tail call i32 @llvm.ctpop.i32(i32 %6570)
  %6572 = trunc i32 %6571 to i8
  %6573 = and i8 %6572, 1
  %6574 = xor i8 %6573, 1
  store i8 %6574, i8* %21, align 1
  %6575 = xor i64 %6561, %6563
  %6576 = xor i64 %6575, %6564
  %6577 = lshr i64 %6576, 4
  %6578 = trunc i64 %6577 to i8
  %6579 = and i8 %6578, 1
  store i8 %6579, i8* %27, align 1
  %6580 = icmp eq i64 %6564, 0
  %6581 = zext i1 %6580 to i8
  store i8 %6581, i8* %30, align 1
  %6582 = lshr i64 %6564, 63
  %6583 = trunc i64 %6582 to i8
  store i8 %6583, i8* %33, align 1
  %6584 = lshr i64 %6563, 63
  %6585 = xor i64 %6582, %6584
  %6586 = xor i64 %6582, %6562
  %6587 = add nuw nsw i64 %6585, %6586
  %6588 = icmp eq i64 %6587, 2
  %6589 = zext i1 %6588 to i8
  store i8 %6589, i8* %39, align 1
  %6590 = add i64 %6564, 60
  %6591 = add i64 %6521, 47
  store i64 %6591, i64* %3, align 8
  %6592 = inttoptr i64 %6590 to i32*
  %6593 = load i32, i32* %6592, align 4
  %6594 = add i32 %6593, -9
  %6595 = icmp ult i32 %6593, 9
  %6596 = zext i1 %6595 to i8
  store i8 %6596, i8* %14, align 1
  %6597 = and i32 %6594, 255
  %6598 = tail call i32 @llvm.ctpop.i32(i32 %6597)
  %6599 = trunc i32 %6598 to i8
  %6600 = and i8 %6599, 1
  %6601 = xor i8 %6600, 1
  store i8 %6601, i8* %21, align 1
  %6602 = xor i32 %6594, %6593
  %6603 = lshr i32 %6602, 4
  %6604 = trunc i32 %6603 to i8
  %6605 = and i8 %6604, 1
  store i8 %6605, i8* %27, align 1
  %6606 = icmp eq i32 %6594, 0
  %6607 = zext i1 %6606 to i8
  store i8 %6607, i8* %30, align 1
  %6608 = lshr i32 %6594, 31
  %6609 = trunc i32 %6608 to i8
  store i8 %6609, i8* %33, align 1
  %6610 = lshr i32 %6593, 31
  %6611 = xor i32 %6608, %6610
  %6612 = add nuw nsw i32 %6611, %6610
  %6613 = icmp eq i32 %6612, 2
  %6614 = zext i1 %6613 to i8
  store i8 %6614, i8* %39, align 1
  %.v640 = select i1 %6606, i64 53, i64 63
  %6615 = add i64 %6521, %.v640
  store i64 %6615, i64* %3, align 8
  br i1 %6606, label %block_405e5d, label %block_.L_405e67

block_405e5d:                                     ; preds = %block_.L_405e28
  %6616 = load i64, i64* %RBP.i, align 8
  %6617 = add i64 %6616, -8560
  %6618 = add i64 %6615, 10
  store i64 %6618, i64* %3, align 8
  %6619 = inttoptr i64 %6617 to i32*
  store i32 9, i32* %6619, align 4
  %.pre438 = load i64, i64* %3, align 8
  br label %block_.L_405e67

block_.L_405e67:                                  ; preds = %block_.L_405e28, %block_405e5d
  %6620 = phi i64 [ %.pre438, %block_405e5d ], [ %6615, %block_.L_405e28 ]
  %6621 = load i64, i64* %RBP.i, align 8
  %6622 = add i64 %6621, -40
  %6623 = add i64 %6620, 4
  store i64 %6623, i64* %3, align 8
  %6624 = inttoptr i64 %6622 to i32*
  %6625 = load i32, i32* %6624, align 4
  %6626 = add i32 %6625, -4
  %6627 = icmp ult i32 %6625, 4
  %6628 = zext i1 %6627 to i8
  store i8 %6628, i8* %14, align 1
  %6629 = and i32 %6626, 255
  %6630 = tail call i32 @llvm.ctpop.i32(i32 %6629)
  %6631 = trunc i32 %6630 to i8
  %6632 = and i8 %6631, 1
  %6633 = xor i8 %6632, 1
  store i8 %6633, i8* %21, align 1
  %6634 = xor i32 %6626, %6625
  %6635 = lshr i32 %6634, 4
  %6636 = trunc i32 %6635 to i8
  %6637 = and i8 %6636, 1
  store i8 %6637, i8* %27, align 1
  %6638 = icmp eq i32 %6626, 0
  %6639 = zext i1 %6638 to i8
  store i8 %6639, i8* %30, align 1
  %6640 = lshr i32 %6626, 31
  %6641 = trunc i32 %6640 to i8
  store i8 %6641, i8* %33, align 1
  %6642 = lshr i32 %6625, 31
  %6643 = xor i32 %6640, %6642
  %6644 = add nuw nsw i32 %6643, %6642
  %6645 = icmp eq i32 %6644, 2
  %6646 = zext i1 %6645 to i8
  store i8 %6646, i8* %39, align 1
  %6647 = icmp ne i8 %6641, 0
  %6648 = xor i1 %6647, %6645
  %.v641 = select i1 %6648, i64 10, i64 674
  %6649 = add i64 %6620, %.v641
  store i64 %6649, i64* %3, align 8
  br i1 %6648, label %block_405e71, label %block_.L_406109

block_405e71:                                     ; preds = %block_.L_405e67
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %6650 = add i64 %6621, -10180
  %6651 = add i64 %6649, 17
  store i64 %6651, i64* %3, align 8
  %6652 = inttoptr i64 %6650 to i32*
  %6653 = load i32, i32* %6652, align 4
  %6654 = sext i32 %6653 to i64
  %6655 = mul nsw i64 %6654, 380
  store i64 %6655, i64* %RCX.i3786, align 8
  %6656 = lshr i64 %6655, 63
  %6657 = add i64 %6655, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %6657, i64* %RAX.i2528, align 8
  %6658 = icmp ult i64 %6657, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %6659 = icmp ult i64 %6657, %6655
  %6660 = or i1 %6658, %6659
  %6661 = zext i1 %6660 to i8
  store i8 %6661, i8* %14, align 1
  %6662 = trunc i64 %6657 to i32
  %6663 = and i32 %6662, 252
  %6664 = tail call i32 @llvm.ctpop.i32(i32 %6663)
  %6665 = trunc i32 %6664 to i8
  %6666 = and i8 %6665, 1
  %6667 = xor i8 %6666, 1
  store i8 %6667, i8* %21, align 1
  %6668 = xor i64 %6655, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %6669 = xor i64 %6668, %6657
  %6670 = lshr i64 %6669, 4
  %6671 = trunc i64 %6670 to i8
  %6672 = and i8 %6671, 1
  store i8 %6672, i8* %27, align 1
  %6673 = icmp eq i64 %6657, 0
  %6674 = zext i1 %6673 to i8
  store i8 %6674, i8* %30, align 1
  %6675 = lshr i64 %6657, 63
  %6676 = trunc i64 %6675 to i8
  store i8 %6676, i8* %33, align 1
  %6677 = xor i64 %6675, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %6678 = xor i64 %6675, %6656
  %6679 = add nuw nsw i64 %6677, %6678
  %6680 = icmp eq i64 %6679, 2
  %6681 = zext i1 %6680 to i8
  store i8 %6681, i8* %39, align 1
  %6682 = add i64 %6655, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 12)
  %6683 = add i64 %6649, 30
  store i64 %6683, i64* %3, align 8
  %6684 = inttoptr i64 %6682 to i32*
  %6685 = load i32, i32* %6684, align 4
  %6686 = zext i32 %6685 to i64
  store i64 %6686, i64* %RDX.i3821, align 8
  %6687 = add i64 %6621, -10188
  %6688 = add i64 %6649, 36
  store i64 %6688, i64* %3, align 8
  %6689 = inttoptr i64 %6687 to i32*
  store i32 %6685, i32* %6689, align 4
  %6690 = load i64, i64* %RBP.i, align 8
  %6691 = add i64 %6690, -10188
  %6692 = load i64, i64* %3, align 8
  %6693 = add i64 %6692, 7
  store i64 %6693, i64* %3, align 8
  %6694 = inttoptr i64 %6691 to i32*
  %6695 = load i32, i32* %6694, align 4
  %6696 = sext i32 %6695 to i64
  store i64 %6696, i64* %RAX.i2528, align 8
  %6697 = shl nsw i64 %6696, 2
  %6698 = add i64 %6690, -10176
  %6699 = add i64 %6698, %6697
  %6700 = add i64 %6692, 15
  store i64 %6700, i64* %3, align 8
  %6701 = inttoptr i64 %6699 to i32*
  %6702 = load i32, i32* %6701, align 4
  store i8 0, i8* %14, align 1
  %6703 = and i32 %6702, 255
  %6704 = tail call i32 @llvm.ctpop.i32(i32 %6703)
  %6705 = trunc i32 %6704 to i8
  %6706 = and i8 %6705, 1
  %6707 = xor i8 %6706, 1
  store i8 %6707, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6708 = icmp eq i32 %6702, 0
  %6709 = zext i1 %6708 to i8
  store i8 %6709, i8* %30, align 1
  %6710 = lshr i32 %6702, 31
  %6711 = trunc i32 %6710 to i8
  store i8 %6711, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v642 = select i1 %6708, i64 21, i64 178
  %6712 = add i64 %6692, %.v642
  store i64 %6712, i64* %3, align 8
  br i1 %6708, label %block_405eaa, label %block_.L_405f47

block_405eaa:                                     ; preds = %block_405e71
  %6713 = add i64 %6690, -8556
  %6714 = add i64 %6712, 6
  store i64 %6714, i64* %3, align 8
  %6715 = inttoptr i64 %6713 to i32*
  %6716 = load i32, i32* %6715, align 4
  %6717 = add i32 %6716, 1
  %6718 = zext i32 %6717 to i64
  store i64 %6718, i64* %RAX.i2528, align 8
  %6719 = icmp eq i32 %6716, -1
  %6720 = icmp eq i32 %6717, 0
  %6721 = or i1 %6719, %6720
  %6722 = zext i1 %6721 to i8
  store i8 %6722, i8* %14, align 1
  %6723 = and i32 %6717, 255
  %6724 = tail call i32 @llvm.ctpop.i32(i32 %6723)
  %6725 = trunc i32 %6724 to i8
  %6726 = and i8 %6725, 1
  %6727 = xor i8 %6726, 1
  store i8 %6727, i8* %21, align 1
  %6728 = xor i32 %6717, %6716
  %6729 = lshr i32 %6728, 4
  %6730 = trunc i32 %6729 to i8
  %6731 = and i8 %6730, 1
  store i8 %6731, i8* %27, align 1
  %6732 = zext i1 %6720 to i8
  store i8 %6732, i8* %30, align 1
  %6733 = lshr i32 %6717, 31
  %6734 = trunc i32 %6733 to i8
  store i8 %6734, i8* %33, align 1
  %6735 = lshr i32 %6716, 31
  %6736 = xor i32 %6733, %6735
  %6737 = add nuw nsw i32 %6736, %6733
  %6738 = icmp eq i32 %6737, 2
  %6739 = zext i1 %6738 to i8
  store i8 %6739, i8* %39, align 1
  %6740 = add i64 %6712, 15
  store i64 %6740, i64* %3, align 8
  store i32 %6717, i32* %6715, align 4
  %6741 = load i64, i64* %RBP.i, align 8
  %6742 = add i64 %6741, -10188
  %6743 = load i64, i64* %3, align 8
  %6744 = add i64 %6743, 6
  store i64 %6744, i64* %3, align 8
  %6745 = inttoptr i64 %6742 to i32*
  %6746 = load i32, i32* %6745, align 4
  %6747 = zext i32 %6746 to i64
  store i64 %6747, i64* %RDI.i3360, align 8
  %6748 = add i64 %6743, 55607
  %6749 = add i64 %6743, 11
  %6750 = load i64, i64* %6, align 8
  %6751 = add i64 %6750, -8
  %6752 = inttoptr i64 %6751 to i64*
  store i64 %6749, i64* %6752, align 8
  store i64 %6751, i64* %6, align 8
  store i64 %6748, i64* %3, align 8
  %call2_405ebf = tail call %struct.Memory* @sub_4137f0.countstones(%struct.State* nonnull %0, i64 %6748, %struct.Memory* %MEMORY.81)
  %6753 = load i32, i32* %EAX.i3678, align 4
  %6754 = load i64, i64* %3, align 8
  %6755 = add i32 %6753, -1
  %6756 = icmp eq i32 %6753, 0
  %6757 = zext i1 %6756 to i8
  store i8 %6757, i8* %14, align 1
  %6758 = and i32 %6755, 255
  %6759 = tail call i32 @llvm.ctpop.i32(i32 %6758)
  %6760 = trunc i32 %6759 to i8
  %6761 = and i8 %6760, 1
  %6762 = xor i8 %6761, 1
  store i8 %6762, i8* %21, align 1
  %6763 = xor i32 %6755, %6753
  %6764 = lshr i32 %6763, 4
  %6765 = trunc i32 %6764 to i8
  %6766 = and i8 %6765, 1
  store i8 %6766, i8* %27, align 1
  %6767 = icmp eq i32 %6755, 0
  %6768 = zext i1 %6767 to i8
  store i8 %6768, i8* %30, align 1
  %6769 = lshr i32 %6755, 31
  %6770 = trunc i32 %6769 to i8
  store i8 %6770, i8* %33, align 1
  %6771 = lshr i32 %6753, 31
  %6772 = xor i32 %6769, %6771
  %6773 = add nuw nsw i32 %6772, %6771
  %6774 = icmp eq i32 %6773, 2
  %6775 = zext i1 %6774 to i8
  store i8 %6775, i8* %39, align 1
  %.v653 = select i1 %6767, i64 9, i64 24
  %6776 = add i64 %6754, %.v653
  store i64 %6776, i64* %3, align 8
  br i1 %6767, label %block_405ecd, label %block_.L_405edc

block_405ecd:                                     ; preds = %block_405eaa
  %6777 = load i64, i64* %RBP.i, align 8
  %6778 = add i64 %6777, -8564
  %6779 = add i64 %6776, 6
  store i64 %6779, i64* %3, align 8
  %6780 = inttoptr i64 %6778 to i32*
  %6781 = load i32, i32* %6780, align 4
  %6782 = add i32 %6781, 2
  %6783 = zext i32 %6782 to i64
  store i64 %6783, i64* %RAX.i2528, align 8
  %6784 = icmp ugt i32 %6781, -3
  %6785 = zext i1 %6784 to i8
  store i8 %6785, i8* %14, align 1
  %6786 = and i32 %6782, 255
  %6787 = tail call i32 @llvm.ctpop.i32(i32 %6786)
  %6788 = trunc i32 %6787 to i8
  %6789 = and i8 %6788, 1
  %6790 = xor i8 %6789, 1
  store i8 %6790, i8* %21, align 1
  %6791 = xor i32 %6782, %6781
  %6792 = lshr i32 %6791, 4
  %6793 = trunc i32 %6792 to i8
  %6794 = and i8 %6793, 1
  store i8 %6794, i8* %27, align 1
  %6795 = icmp eq i32 %6782, 0
  %6796 = zext i1 %6795 to i8
  store i8 %6796, i8* %30, align 1
  %6797 = lshr i32 %6782, 31
  %6798 = trunc i32 %6797 to i8
  store i8 %6798, i8* %33, align 1
  %6799 = lshr i32 %6781, 31
  %6800 = xor i32 %6797, %6799
  %6801 = add nuw nsw i32 %6800, %6797
  %6802 = icmp eq i32 %6801, 2
  %6803 = zext i1 %6802 to i8
  store i8 %6803, i8* %39, align 1
  %6804 = add i64 %6776, 15
  store i64 %6804, i64* %3, align 8
  store i32 %6782, i32* %6780, align 4
  %.pre439 = load i64, i64* %3, align 8
  br label %block_.L_405edc

block_.L_405edc:                                  ; preds = %block_405eaa, %block_405ecd
  %6805 = phi i64 [ %.pre439, %block_405ecd ], [ %6776, %block_405eaa ]
  %6806 = load i64, i64* %RBP.i, align 8
  %6807 = add i64 %6806, -10188
  %6808 = add i64 %6805, 6
  store i64 %6808, i64* %3, align 8
  %6809 = inttoptr i64 %6807 to i32*
  %6810 = load i32, i32* %6809, align 4
  %6811 = zext i32 %6810 to i64
  store i64 %6811, i64* %RDI.i3360, align 8
  %6812 = add i64 %6805, 39076
  %6813 = add i64 %6805, 11
  %6814 = load i64, i64* %6, align 8
  %6815 = add i64 %6814, -8
  %6816 = inttoptr i64 %6815 to i64*
  store i64 %6813, i64* %6816, align 8
  store i64 %6815, i64* %6, align 8
  store i64 %6812, i64* %3, align 8
  %call2_405ee2 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %6812, %struct.Memory* %MEMORY.81)
  %6817 = load i32, i32* %EAX.i3678, align 4
  %6818 = load i64, i64* %3, align 8
  %6819 = add i32 %6817, -6
  %6820 = icmp ult i32 %6817, 6
  %6821 = zext i1 %6820 to i8
  store i8 %6821, i8* %14, align 1
  %6822 = and i32 %6819, 255
  %6823 = tail call i32 @llvm.ctpop.i32(i32 %6822)
  %6824 = trunc i32 %6823 to i8
  %6825 = and i8 %6824, 1
  %6826 = xor i8 %6825, 1
  store i8 %6826, i8* %21, align 1
  %6827 = xor i32 %6819, %6817
  %6828 = lshr i32 %6827, 4
  %6829 = trunc i32 %6828 to i8
  %6830 = and i8 %6829, 1
  store i8 %6830, i8* %27, align 1
  %6831 = icmp eq i32 %6819, 0
  %6832 = zext i1 %6831 to i8
  store i8 %6832, i8* %30, align 1
  %6833 = lshr i32 %6819, 31
  %6834 = trunc i32 %6833 to i8
  store i8 %6834, i8* %33, align 1
  %6835 = lshr i32 %6817, 31
  %6836 = xor i32 %6833, %6835
  %6837 = add nuw nsw i32 %6836, %6835
  %6838 = icmp eq i32 %6837, 2
  %6839 = zext i1 %6838 to i8
  store i8 %6839, i8* %39, align 1
  %6840 = icmp ne i8 %6834, 0
  %6841 = xor i1 %6840, %6838
  %.v654 = select i1 %6841, i64 9, i64 78
  %6842 = add i64 %6818, %.v654
  store i64 %6842, i64* %3, align 8
  br i1 %6841, label %block_405ef0, label %block_.L_405f35

block_405ef0:                                     ; preds = %block_.L_405edc
  store i64 5, i64* %RDX.i3821, align 8
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i3786, align 8
  %6843 = load i64, i64* %RBP.i, align 8
  %6844 = add i64 %6843, -8072
  %6845 = add i64 %6842, 15
  store i64 %6845, i64* %3, align 8
  %6846 = inttoptr i64 %6844 to i32*
  %6847 = load i32, i32* %6846, align 4
  %6848 = zext i32 %6847 to i64
  store i64 %6848, i64* %RDI.i3360, align 8
  %6849 = add i64 %6843, -20
  %6850 = add i64 %6842, 18
  store i64 %6850, i64* %3, align 8
  %6851 = inttoptr i64 %6849 to i32*
  %6852 = load i32, i32* %6851, align 4
  %6853 = zext i32 %6852 to i64
  store i64 %6853, i64* %RSI.i3112.pre-phi, align 8
  %6854 = add i64 %6842, 46784
  %6855 = add i64 %6842, 23
  %6856 = load i64, i64* %6, align 8
  %6857 = add i64 %6856, -8
  %6858 = inttoptr i64 %6857 to i64*
  store i64 %6855, i64* %6858, align 8
  store i64 %6857, i64* %6, align 8
  store i64 %6854, i64* %3, align 8
  %call2_405f02 = tail call %struct.Memory* @sub_4115b0.approxlib(%struct.State* nonnull %0, i64 %6854, %struct.Memory* %MEMORY.81)
  %6859 = load i64, i64* %RBP.i, align 8
  %6860 = add i64 %6859, -10188
  %6861 = load i64, i64* %3, align 8
  %6862 = add i64 %6861, 6
  store i64 %6862, i64* %3, align 8
  %6863 = inttoptr i64 %6860 to i32*
  %6864 = load i32, i32* %6863, align 4
  %6865 = zext i32 %6864 to i64
  store i64 %6865, i64* %RDI.i3360, align 8
  %6866 = add i64 %6859, -10976
  %6867 = load i32, i32* %EAX.i3678, align 4
  %6868 = add i64 %6861, 12
  store i64 %6868, i64* %3, align 8
  %6869 = inttoptr i64 %6866 to i32*
  store i32 %6867, i32* %6869, align 4
  %6870 = load i64, i64* %3, align 8
  %6871 = add i64 %6870, 39021
  %6872 = add i64 %6870, 5
  %6873 = load i64, i64* %6, align 8
  %6874 = add i64 %6873, -8
  %6875 = inttoptr i64 %6874 to i64*
  store i64 %6872, i64* %6875, align 8
  store i64 %6874, i64* %6, align 8
  store i64 %6871, i64* %3, align 8
  %call2_405f13 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %6871, %struct.Memory* %MEMORY.81)
  %6876 = load i64, i64* %RBP.i, align 8
  %6877 = add i64 %6876, -10976
  %6878 = load i64, i64* %3, align 8
  %6879 = add i64 %6878, 6
  store i64 %6879, i64* %3, align 8
  %6880 = inttoptr i64 %6877 to i32*
  %6881 = load i32, i32* %6880, align 4
  %6882 = zext i32 %6881 to i64
  store i64 %6882, i64* %RDX.i3821, align 8
  %6883 = load i32, i32* %EAX.i3678, align 4
  %6884 = sub i32 %6881, %6883
  %6885 = icmp ult i32 %6881, %6883
  %6886 = zext i1 %6885 to i8
  store i8 %6886, i8* %14, align 1
  %6887 = and i32 %6884, 255
  %6888 = tail call i32 @llvm.ctpop.i32(i32 %6887)
  %6889 = trunc i32 %6888 to i8
  %6890 = and i8 %6889, 1
  %6891 = xor i8 %6890, 1
  store i8 %6891, i8* %21, align 1
  %6892 = xor i32 %6883, %6881
  %6893 = xor i32 %6892, %6884
  %6894 = lshr i32 %6893, 4
  %6895 = trunc i32 %6894 to i8
  %6896 = and i8 %6895, 1
  store i8 %6896, i8* %27, align 1
  %6897 = icmp eq i32 %6884, 0
  %6898 = zext i1 %6897 to i8
  store i8 %6898, i8* %30, align 1
  %6899 = lshr i32 %6884, 31
  %6900 = trunc i32 %6899 to i8
  store i8 %6900, i8* %33, align 1
  %6901 = lshr i32 %6881, 31
  %6902 = lshr i32 %6883, 31
  %6903 = xor i32 %6902, %6901
  %6904 = xor i32 %6899, %6901
  %6905 = add nuw nsw i32 %6904, %6903
  %6906 = icmp eq i32 %6905, 2
  %6907 = zext i1 %6906 to i8
  store i8 %6907, i8* %39, align 1
  %6908 = icmp ne i8 %6900, 0
  %6909 = xor i1 %6908, %6906
  %.v655 = select i1 %6909, i64 14, i64 29
  %6910 = add i64 %6878, %.v655
  store i64 %6910, i64* %3, align 8
  br i1 %6909, label %block_405f26, label %block_.L_405f35

block_405f26:                                     ; preds = %block_405ef0
  %6911 = add i64 %6876, -8564
  %6912 = add i64 %6910, 6
  store i64 %6912, i64* %3, align 8
  %6913 = inttoptr i64 %6911 to i32*
  %6914 = load i32, i32* %6913, align 4
  %6915 = add i32 %6914, -5
  %6916 = zext i32 %6915 to i64
  store i64 %6916, i64* %RAX.i2528, align 8
  %6917 = icmp ult i32 %6914, 5
  %6918 = zext i1 %6917 to i8
  store i8 %6918, i8* %14, align 1
  %6919 = and i32 %6915, 255
  %6920 = tail call i32 @llvm.ctpop.i32(i32 %6919)
  %6921 = trunc i32 %6920 to i8
  %6922 = and i8 %6921, 1
  %6923 = xor i8 %6922, 1
  store i8 %6923, i8* %21, align 1
  %6924 = xor i32 %6915, %6914
  %6925 = lshr i32 %6924, 4
  %6926 = trunc i32 %6925 to i8
  %6927 = and i8 %6926, 1
  store i8 %6927, i8* %27, align 1
  %6928 = icmp eq i32 %6915, 0
  %6929 = zext i1 %6928 to i8
  store i8 %6929, i8* %30, align 1
  %6930 = lshr i32 %6915, 31
  %6931 = trunc i32 %6930 to i8
  store i8 %6931, i8* %33, align 1
  %6932 = lshr i32 %6914, 31
  %6933 = xor i32 %6930, %6932
  %6934 = add nuw nsw i32 %6933, %6932
  %6935 = icmp eq i32 %6934, 2
  %6936 = zext i1 %6935 to i8
  store i8 %6936, i8* %39, align 1
  %6937 = add i64 %6910, 15
  store i64 %6937, i64* %3, align 8
  store i32 %6915, i32* %6913, align 4
  %.pre440 = load i64, i64* %3, align 8
  br label %block_.L_405f35

block_.L_405f35:                                  ; preds = %block_405ef0, %block_.L_405edc, %block_405f26
  %6938 = phi i64 [ %6910, %block_405ef0 ], [ %6842, %block_.L_405edc ], [ %.pre440, %block_405f26 ]
  %6939 = load i64, i64* %RBP.i, align 8
  %6940 = add i64 %6939, -10188
  %6941 = add i64 %6938, 7
  store i64 %6941, i64* %3, align 8
  %6942 = inttoptr i64 %6940 to i32*
  %6943 = load i32, i32* %6942, align 4
  %6944 = sext i32 %6943 to i64
  store i64 %6944, i64* %RAX.i2528, align 8
  %6945 = shl nsw i64 %6944, 2
  %6946 = add i64 %6939, -10176
  %6947 = add i64 %6946, %6945
  %6948 = add i64 %6938, 18
  store i64 %6948, i64* %3, align 8
  %6949 = inttoptr i64 %6947 to i32*
  store i32 1, i32* %6949, align 4
  %.pre441 = load i64, i64* %RBP.i, align 8
  %.pre442 = load i64, i64* %3, align 8
  br label %block_.L_405f47

block_.L_405f47:                                  ; preds = %block_405e71, %block_.L_405f35
  %6950 = phi i64 [ %.pre442, %block_.L_405f35 ], [ %6712, %block_405e71 ]
  %6951 = phi i64 [ %.pre441, %block_.L_405f35 ], [ %6690, %block_405e71 ]
  %6952 = add i64 %6951, -10188
  %6953 = add i64 %6950, 6
  store i64 %6953, i64* %3, align 8
  %6954 = inttoptr i64 %6952 to i32*
  %6955 = load i32, i32* %6954, align 4
  %6956 = zext i32 %6955 to i64
  store i64 %6956, i64* %RDI.i3360, align 8
  %6957 = add i64 %6950, 38969
  %6958 = add i64 %6950, 11
  %6959 = load i64, i64* %6, align 8
  %6960 = add i64 %6959, -8
  %6961 = inttoptr i64 %6960 to i64*
  store i64 %6958, i64* %6961, align 8
  store i64 %6960, i64* %6, align 8
  store i64 %6957, i64* %3, align 8
  %call2_405f4d = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %6957, %struct.Memory* %MEMORY.81)
  %6962 = load i32, i32* %EAX.i3678, align 4
  %6963 = load i64, i64* %3, align 8
  %6964 = add i32 %6962, -2
  %6965 = icmp ult i32 %6962, 2
  %6966 = zext i1 %6965 to i8
  store i8 %6966, i8* %14, align 1
  %6967 = and i32 %6964, 255
  %6968 = tail call i32 @llvm.ctpop.i32(i32 %6967)
  %6969 = trunc i32 %6968 to i8
  %6970 = and i8 %6969, 1
  %6971 = xor i8 %6970, 1
  store i8 %6971, i8* %21, align 1
  %6972 = xor i32 %6964, %6962
  %6973 = lshr i32 %6972, 4
  %6974 = trunc i32 %6973 to i8
  %6975 = and i8 %6974, 1
  store i8 %6975, i8* %27, align 1
  %6976 = icmp eq i32 %6964, 0
  %6977 = zext i1 %6976 to i8
  store i8 %6977, i8* %30, align 1
  %6978 = lshr i32 %6964, 31
  %6979 = trunc i32 %6978 to i8
  store i8 %6979, i8* %33, align 1
  %6980 = lshr i32 %6962, 31
  %6981 = xor i32 %6978, %6980
  %6982 = add nuw nsw i32 %6981, %6980
  %6983 = icmp eq i32 %6982, 2
  %6984 = zext i1 %6983 to i8
  store i8 %6984, i8* %39, align 1
  %6985 = icmp ne i8 %6979, 0
  %6986 = xor i1 %6985, %6983
  %.demorgan512 = or i1 %6976, %6986
  %.v643 = select i1 %.demorgan512, i64 9, i64 419
  %6987 = add i64 %6963, %.v643
  store i64 %6987, i64* %3, align 8
  br i1 %.demorgan512, label %block_405f5b, label %block_.L_4060f5

block_405f5b:                                     ; preds = %block_.L_405f47
  %6988 = load i64, i64* %RBP.i, align 8
  %6989 = add i64 %6988, -10196
  %6990 = add i64 %6987, 10
  store i64 %6990, i64* %3, align 8
  %6991 = inttoptr i64 %6989 to i32*
  store i32 0, i32* %6991, align 4
  %6992 = load i64, i64* %RBP.i, align 8
  %6993 = add i64 %6992, -10200
  %6994 = load i64, i64* %3, align 8
  %6995 = add i64 %6994, 10
  store i64 %6995, i64* %3, align 8
  %6996 = inttoptr i64 %6993 to i32*
  store i32 0, i32* %6996, align 4
  %6997 = load i64, i64* %RBP.i, align 8
  %6998 = add i64 %6997, -10192
  %6999 = load i64, i64* %3, align 8
  %7000 = add i64 %6999, 10
  store i64 %7000, i64* %3, align 8
  %7001 = inttoptr i64 %6998 to i32*
  store i32 0, i32* %7001, align 4
  %.pre443 = load i64, i64* %3, align 8
  br label %block_.L_405f79

block_.L_405f79:                                  ; preds = %block_.L_40606b, %block_405f5b
  %7002 = phi i64 [ %.pre443, %block_405f5b ], [ %7370, %block_.L_40606b ]
  %7003 = load i64, i64* %RBP.i, align 8
  %7004 = add i64 %7003, -10192
  %7005 = add i64 %7002, 7
  store i64 %7005, i64* %3, align 8
  %7006 = inttoptr i64 %7004 to i32*
  %7007 = load i32, i32* %7006, align 4
  %7008 = add i32 %7007, -4
  %7009 = icmp ult i32 %7007, 4
  %7010 = zext i1 %7009 to i8
  store i8 %7010, i8* %14, align 1
  %7011 = and i32 %7008, 255
  %7012 = tail call i32 @llvm.ctpop.i32(i32 %7011)
  %7013 = trunc i32 %7012 to i8
  %7014 = and i8 %7013, 1
  %7015 = xor i8 %7014, 1
  store i8 %7015, i8* %21, align 1
  %7016 = xor i32 %7008, %7007
  %7017 = lshr i32 %7016, 4
  %7018 = trunc i32 %7017 to i8
  %7019 = and i8 %7018, 1
  store i8 %7019, i8* %27, align 1
  %7020 = icmp eq i32 %7008, 0
  %7021 = zext i1 %7020 to i8
  store i8 %7021, i8* %30, align 1
  %7022 = lshr i32 %7008, 31
  %7023 = trunc i32 %7022 to i8
  store i8 %7023, i8* %33, align 1
  %7024 = lshr i32 %7007, 31
  %7025 = xor i32 %7022, %7024
  %7026 = add nuw nsw i32 %7025, %7024
  %7027 = icmp eq i32 %7026, 2
  %7028 = zext i1 %7027 to i8
  store i8 %7028, i8* %39, align 1
  %7029 = icmp ne i8 %7023, 0
  %7030 = xor i1 %7029, %7027
  %.v644 = select i1 %7030, i64 13, i64 262
  %7031 = add i64 %7002, %.v644
  store i64 %7031, i64* %3, align 8
  br i1 %7030, label %block_405f86, label %block_.L_40607f

block_405f86:                                     ; preds = %block_.L_405f79
  %7032 = add i64 %7031, 7
  store i64 %7032, i64* %3, align 8
  %7033 = load i32, i32* %7006, align 4
  %7034 = sext i32 %7033 to i64
  store i64 %7034, i64* %RAX.i2528, align 8
  %7035 = shl nsw i64 %7034, 2
  %7036 = add nsw i64 %7035, 8053168
  %7037 = add i64 %7031, 14
  store i64 %7037, i64* %3, align 8
  %7038 = inttoptr i64 %7036 to i32*
  %7039 = load i32, i32* %7038, align 4
  %7040 = zext i32 %7039 to i64
  store i64 %7040, i64* %RCX.i3786, align 8
  %7041 = add i64 %7003, -8064
  %7042 = add i64 %7031, 20
  store i64 %7042, i64* %3, align 8
  %7043 = inttoptr i64 %7041 to i32*
  store i32 %7039, i32* %7043, align 4
  %7044 = load i64, i64* %RBP.i, align 8
  %7045 = add i64 %7044, -10188
  %7046 = load i64, i64* %3, align 8
  %7047 = add i64 %7046, 6
  store i64 %7047, i64* %3, align 8
  %7048 = inttoptr i64 %7045 to i32*
  %7049 = load i32, i32* %7048, align 4
  %7050 = zext i32 %7049 to i64
  store i64 %7050, i64* %RCX.i3786, align 8
  %7051 = add i64 %7044, -8064
  %7052 = add i64 %7046, 12
  store i64 %7052, i64* %3, align 8
  %7053 = inttoptr i64 %7051 to i32*
  %7054 = load i32, i32* %7053, align 4
  %7055 = add i32 %7054, %7049
  %7056 = zext i32 %7055 to i64
  store i64 %7056, i64* %RCX.i3786, align 8
  %7057 = icmp ult i32 %7055, %7049
  %7058 = icmp ult i32 %7055, %7054
  %7059 = or i1 %7057, %7058
  %7060 = zext i1 %7059 to i8
  store i8 %7060, i8* %14, align 1
  %7061 = and i32 %7055, 255
  %7062 = tail call i32 @llvm.ctpop.i32(i32 %7061)
  %7063 = trunc i32 %7062 to i8
  %7064 = and i8 %7063, 1
  %7065 = xor i8 %7064, 1
  store i8 %7065, i8* %21, align 1
  %7066 = xor i32 %7054, %7049
  %7067 = xor i32 %7066, %7055
  %7068 = lshr i32 %7067, 4
  %7069 = trunc i32 %7068 to i8
  %7070 = and i8 %7069, 1
  store i8 %7070, i8* %27, align 1
  %7071 = icmp eq i32 %7055, 0
  %7072 = zext i1 %7071 to i8
  store i8 %7072, i8* %30, align 1
  %7073 = lshr i32 %7055, 31
  %7074 = trunc i32 %7073 to i8
  store i8 %7074, i8* %33, align 1
  %7075 = lshr i32 %7049, 31
  %7076 = lshr i32 %7054, 31
  %7077 = xor i32 %7073, %7075
  %7078 = xor i32 %7073, %7076
  %7079 = add nuw nsw i32 %7077, %7078
  %7080 = icmp eq i32 %7079, 2
  %7081 = zext i1 %7080 to i8
  store i8 %7081, i8* %39, align 1
  %7082 = sext i32 %7055 to i64
  store i64 %7082, i64* %RAX.i2528, align 8
  %7083 = add nsw i64 %7082, 12099168
  %7084 = add i64 %7046, 23
  store i64 %7084, i64* %3, align 8
  %7085 = inttoptr i64 %7083 to i8*
  %7086 = load i8, i8* %7085, align 1
  %7087 = zext i8 %7086 to i64
  store i64 %7087, i64* %RCX.i3786, align 8
  %7088 = zext i8 %7086 to i32
  %7089 = add nsw i32 %7088, -3
  %7090 = icmp ult i8 %7086, 3
  %7091 = zext i1 %7090 to i8
  store i8 %7091, i8* %14, align 1
  %7092 = and i32 %7089, 255
  %7093 = tail call i32 @llvm.ctpop.i32(i32 %7092)
  %7094 = trunc i32 %7093 to i8
  %7095 = and i8 %7094, 1
  %7096 = xor i8 %7095, 1
  store i8 %7096, i8* %21, align 1
  %7097 = xor i32 %7089, %7088
  %7098 = lshr i32 %7097, 4
  %7099 = trunc i32 %7098 to i8
  %7100 = and i8 %7099, 1
  store i8 %7100, i8* %27, align 1
  %7101 = icmp eq i32 %7089, 0
  %7102 = zext i1 %7101 to i8
  store i8 %7102, i8* %30, align 1
  %7103 = lshr i32 %7089, 31
  %7104 = trunc i32 %7103 to i8
  store i8 %7104, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v648 = select i1 %7101, i64 32, i64 37
  %7105 = add i64 %7046, %.v648
  store i64 %7105, i64* %3, align 8
  br i1 %7101, label %block_405fba, label %block_.L_405fbf

block_405fba:                                     ; preds = %block_405f86
  %7106 = add i64 %7105, 177
  br label %block_.L_40606b

block_.L_405fbf:                                  ; preds = %block_405f86
  %7107 = add i64 %7105, 6
  store i64 %7107, i64* %3, align 8
  %7108 = load i32, i32* %7048, align 4
  %7109 = zext i32 %7108 to i64
  store i64 %7109, i64* %RAX.i2528, align 8
  %7110 = add i64 %7105, 12
  store i64 %7110, i64* %3, align 8
  %7111 = load i32, i32* %7053, align 4
  %7112 = add i32 %7111, %7108
  %7113 = zext i32 %7112 to i64
  store i64 %7113, i64* %RAX.i2528, align 8
  %7114 = icmp ult i32 %7112, %7108
  %7115 = icmp ult i32 %7112, %7111
  %7116 = or i1 %7114, %7115
  %7117 = zext i1 %7116 to i8
  store i8 %7117, i8* %14, align 1
  %7118 = and i32 %7112, 255
  %7119 = tail call i32 @llvm.ctpop.i32(i32 %7118)
  %7120 = trunc i32 %7119 to i8
  %7121 = and i8 %7120, 1
  %7122 = xor i8 %7121, 1
  store i8 %7122, i8* %21, align 1
  %7123 = xor i32 %7111, %7108
  %7124 = xor i32 %7123, %7112
  %7125 = lshr i32 %7124, 4
  %7126 = trunc i32 %7125 to i8
  %7127 = and i8 %7126, 1
  store i8 %7127, i8* %27, align 1
  %7128 = icmp eq i32 %7112, 0
  %7129 = zext i1 %7128 to i8
  store i8 %7129, i8* %30, align 1
  %7130 = lshr i32 %7112, 31
  %7131 = trunc i32 %7130 to i8
  store i8 %7131, i8* %33, align 1
  %7132 = lshr i32 %7108, 31
  %7133 = lshr i32 %7111, 31
  %7134 = xor i32 %7130, %7132
  %7135 = xor i32 %7130, %7133
  %7136 = add nuw nsw i32 %7134, %7135
  %7137 = icmp eq i32 %7136, 2
  %7138 = zext i1 %7137 to i8
  store i8 %7138, i8* %39, align 1
  %7139 = sext i32 %7112 to i64
  store i64 %7139, i64* %RCX.i3786, align 8
  %7140 = add nsw i64 %7139, 12099168
  %7141 = add i64 %7105, 23
  store i64 %7141, i64* %3, align 8
  %7142 = inttoptr i64 %7140 to i8*
  %7143 = load i8, i8* %7142, align 1
  %7144 = zext i8 %7143 to i64
  store i64 %7144, i64* %RAX.i2528, align 8
  %7145 = zext i8 %7143 to i32
  %7146 = add i64 %7044, -44
  %7147 = add i64 %7105, 26
  store i64 %7147, i64* %3, align 8
  %7148 = inttoptr i64 %7146 to i32*
  %7149 = load i32, i32* %7148, align 4
  %7150 = sub i32 %7145, %7149
  %7151 = icmp ult i32 %7145, %7149
  %7152 = zext i1 %7151 to i8
  store i8 %7152, i8* %14, align 1
  %7153 = and i32 %7150, 255
  %7154 = tail call i32 @llvm.ctpop.i32(i32 %7153)
  %7155 = trunc i32 %7154 to i8
  %7156 = and i8 %7155, 1
  %7157 = xor i8 %7156, 1
  store i8 %7157, i8* %21, align 1
  %7158 = xor i32 %7149, %7145
  %7159 = xor i32 %7158, %7150
  %7160 = lshr i32 %7159, 4
  %7161 = trunc i32 %7160 to i8
  %7162 = and i8 %7161, 1
  store i8 %7162, i8* %27, align 1
  %7163 = icmp eq i32 %7150, 0
  %7164 = zext i1 %7163 to i8
  store i8 %7164, i8* %30, align 1
  %7165 = lshr i32 %7150, 31
  %7166 = trunc i32 %7165 to i8
  store i8 %7166, i8* %33, align 1
  %7167 = lshr i32 %7149, 31
  %7168 = add nuw nsw i32 %7165, %7167
  %7169 = icmp eq i32 %7168, 2
  %7170 = zext i1 %7169 to i8
  store i8 %7170, i8* %39, align 1
  %.v649 = select i1 %7163, i64 32, i64 89
  %7171 = add i64 %7105, %.v649
  store i64 %7171, i64* %3, align 8
  br i1 %7163, label %block_405fdf, label %block_.L_406018

block_405fdf:                                     ; preds = %block_.L_405fbf
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %7172 = add i64 %7171, 16
  store i64 %7172, i64* %3, align 8
  %7173 = load i32, i32* %7048, align 4
  %7174 = zext i32 %7173 to i64
  store i64 %7174, i64* %RCX.i3786, align 8
  %7175 = add i64 %7171, 22
  store i64 %7175, i64* %3, align 8
  %7176 = load i32, i32* %7053, align 4
  %7177 = add i32 %7176, %7173
  %7178 = zext i32 %7177 to i64
  store i64 %7178, i64* %RCX.i3786, align 8
  %7179 = sext i32 %7177 to i64
  %7180 = mul nsw i64 %7179, 76
  store i64 %7180, i64* %RDX.i3821, align 8
  %7181 = lshr i64 %7180, 63
  %7182 = add i64 %7180, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7182, i64* %RAX.i2528, align 8
  %7183 = icmp ult i64 %7182, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7184 = icmp ult i64 %7182, %7180
  %7185 = or i1 %7183, %7184
  %7186 = zext i1 %7185 to i8
  store i8 %7186, i8* %14, align 1
  %7187 = trunc i64 %7182 to i32
  %7188 = and i32 %7187, 252
  %7189 = tail call i32 @llvm.ctpop.i32(i32 %7188)
  %7190 = trunc i32 %7189 to i8
  %7191 = and i8 %7190, 1
  %7192 = xor i8 %7191, 1
  store i8 %7192, i8* %21, align 1
  %7193 = xor i64 %7180, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7194 = xor i64 %7193, %7182
  %7195 = lshr i64 %7194, 4
  %7196 = trunc i64 %7195 to i8
  %7197 = and i8 %7196, 1
  store i8 %7197, i8* %27, align 1
  %7198 = icmp eq i64 %7182, 0
  %7199 = zext i1 %7198 to i8
  store i8 %7199, i8* %30, align 1
  %7200 = lshr i64 %7182, 63
  %7201 = trunc i64 %7200 to i8
  store i8 %7201, i8* %33, align 1
  %7202 = xor i64 %7200, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7203 = xor i64 %7200, %7181
  %7204 = add nuw nsw i64 %7202, %7203
  %7205 = icmp eq i64 %7204, 2
  %7206 = zext i1 %7205 to i8
  store i8 %7206, i8* %39, align 1
  %7207 = add i64 %7180, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %7208 = add i64 %7171, 36
  store i64 %7208, i64* %3, align 8
  %7209 = inttoptr i64 %7207 to i32*
  %7210 = load i32, i32* %7209, align 4
  store i8 0, i8* %14, align 1
  %7211 = and i32 %7210, 255
  %7212 = tail call i32 @llvm.ctpop.i32(i32 %7211)
  %7213 = trunc i32 %7212 to i8
  %7214 = and i8 %7213, 1
  %7215 = xor i8 %7214, 1
  store i8 %7215, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7216 = icmp eq i32 %7210, 0
  %7217 = zext i1 %7216 to i8
  store i8 %7217, i8* %30, align 1
  %7218 = lshr i32 %7210, 31
  %7219 = trunc i32 %7218 to i8
  store i8 %7219, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v652 = select i1 %7216, i64 42, i64 57
  %7220 = add i64 %7171, %.v652
  store i64 %7220, i64* %3, align 8
  %7221 = load i64, i64* %RBP.i, align 8
  br i1 %7216, label %block_406009, label %block_.L_406018

block_406009:                                     ; preds = %block_405fdf
  %7222 = add i64 %7221, -10196
  %7223 = add i64 %7220, 10
  store i64 %7223, i64* %3, align 8
  %7224 = inttoptr i64 %7222 to i32*
  store i32 1, i32* %7224, align 4
  %7225 = load i64, i64* %3, align 8
  %7226 = add i64 %7225, 83
  br label %block_.L_406066

block_.L_406018:                                  ; preds = %block_405fdf, %block_.L_405fbf
  %7227 = phi i64 [ %7171, %block_.L_405fbf ], [ %7220, %block_405fdf ]
  %7228 = phi i64 [ %7044, %block_.L_405fbf ], [ %7221, %block_405fdf ]
  %7229 = add i64 %7228, -10188
  %7230 = add i64 %7227, 6
  store i64 %7230, i64* %3, align 8
  %7231 = inttoptr i64 %7229 to i32*
  %7232 = load i32, i32* %7231, align 4
  %7233 = zext i32 %7232 to i64
  store i64 %7233, i64* %RAX.i2528, align 8
  %7234 = add i64 %7228, -8064
  %7235 = add i64 %7227, 12
  store i64 %7235, i64* %3, align 8
  %7236 = inttoptr i64 %7234 to i32*
  %7237 = load i32, i32* %7236, align 4
  %7238 = add i32 %7237, %7232
  %7239 = zext i32 %7238 to i64
  store i64 %7239, i64* %RAX.i2528, align 8
  %7240 = icmp ult i32 %7238, %7232
  %7241 = icmp ult i32 %7238, %7237
  %7242 = or i1 %7240, %7241
  %7243 = zext i1 %7242 to i8
  store i8 %7243, i8* %14, align 1
  %7244 = and i32 %7238, 255
  %7245 = tail call i32 @llvm.ctpop.i32(i32 %7244)
  %7246 = trunc i32 %7245 to i8
  %7247 = and i8 %7246, 1
  %7248 = xor i8 %7247, 1
  store i8 %7248, i8* %21, align 1
  %7249 = xor i32 %7237, %7232
  %7250 = xor i32 %7249, %7238
  %7251 = lshr i32 %7250, 4
  %7252 = trunc i32 %7251 to i8
  %7253 = and i8 %7252, 1
  store i8 %7253, i8* %27, align 1
  %7254 = icmp eq i32 %7238, 0
  %7255 = zext i1 %7254 to i8
  store i8 %7255, i8* %30, align 1
  %7256 = lshr i32 %7238, 31
  %7257 = trunc i32 %7256 to i8
  store i8 %7257, i8* %33, align 1
  %7258 = lshr i32 %7232, 31
  %7259 = lshr i32 %7237, 31
  %7260 = xor i32 %7256, %7258
  %7261 = xor i32 %7256, %7259
  %7262 = add nuw nsw i32 %7260, %7261
  %7263 = icmp eq i32 %7262, 2
  %7264 = zext i1 %7263 to i8
  store i8 %7264, i8* %39, align 1
  %7265 = sext i32 %7238 to i64
  store i64 %7265, i64* %RCX.i3786, align 8
  %7266 = add nsw i64 %7265, 12099168
  %7267 = add i64 %7227, 23
  store i64 %7267, i64* %3, align 8
  %7268 = inttoptr i64 %7266 to i8*
  %7269 = load i8, i8* %7268, align 1
  %7270 = zext i8 %7269 to i64
  store i64 %7270, i64* %RAX.i2528, align 8
  %7271 = zext i8 %7269 to i32
  store i8 0, i8* %14, align 1
  %7272 = tail call i32 @llvm.ctpop.i32(i32 %7271)
  %7273 = trunc i32 %7272 to i8
  %7274 = and i8 %7273, 1
  %7275 = xor i8 %7274, 1
  store i8 %7275, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7276 = icmp eq i8 %7269, 0
  %7277 = zext i1 %7276 to i8
  store i8 %7277, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v650 = select i1 %7276, i64 32, i64 73
  %7278 = add i64 %7227, %.v650
  store i64 %7278, i64* %3, align 8
  br i1 %7276, label %block_406038, label %block_.L_406061

block_406038:                                     ; preds = %block_.L_406018
  %7279 = add i64 %7278, 6
  store i64 %7279, i64* %3, align 8
  %7280 = load i32, i32* %7231, align 4
  %7281 = zext i32 %7280 to i64
  store i64 %7281, i64* %RAX.i2528, align 8
  %7282 = add i64 %7278, 12
  store i64 %7282, i64* %3, align 8
  %7283 = load i32, i32* %7236, align 4
  %7284 = add i32 %7283, %7280
  %7285 = zext i32 %7284 to i64
  store i64 %7285, i64* %RAX.i2528, align 8
  %7286 = icmp ult i32 %7284, %7280
  %7287 = icmp ult i32 %7284, %7283
  %7288 = or i1 %7286, %7287
  %7289 = zext i1 %7288 to i8
  store i8 %7289, i8* %14, align 1
  %7290 = and i32 %7284, 255
  %7291 = tail call i32 @llvm.ctpop.i32(i32 %7290)
  %7292 = trunc i32 %7291 to i8
  %7293 = and i8 %7292, 1
  %7294 = xor i8 %7293, 1
  store i8 %7294, i8* %21, align 1
  %7295 = xor i32 %7283, %7280
  %7296 = xor i32 %7295, %7284
  %7297 = lshr i32 %7296, 4
  %7298 = trunc i32 %7297 to i8
  %7299 = and i8 %7298, 1
  store i8 %7299, i8* %27, align 1
  %7300 = icmp eq i32 %7284, 0
  %7301 = zext i1 %7300 to i8
  store i8 %7301, i8* %30, align 1
  %7302 = lshr i32 %7284, 31
  %7303 = trunc i32 %7302 to i8
  store i8 %7303, i8* %33, align 1
  %7304 = lshr i32 %7280, 31
  %7305 = lshr i32 %7283, 31
  %7306 = xor i32 %7302, %7304
  %7307 = xor i32 %7302, %7305
  %7308 = add nuw nsw i32 %7306, %7307
  %7309 = icmp eq i32 %7308, 2
  %7310 = zext i1 %7309 to i8
  store i8 %7310, i8* %39, align 1
  %7311 = add i64 %7228, -44
  %7312 = add i64 %7278, 15
  store i64 %7312, i64* %3, align 8
  %7313 = inttoptr i64 %7311 to i32*
  %7314 = load i32, i32* %7313, align 4
  %7315 = zext i32 %7314 to i64
  store i64 %7315, i64* %RSI.i3112.pre-phi, align 8
  store i64 %7285, i64* %RDI.i3360, align 8
  %7316 = add i64 %7278, 57960
  %7317 = add i64 %7278, 22
  %7318 = load i64, i64* %6, align 8
  %7319 = add i64 %7318, -8
  %7320 = inttoptr i64 %7319 to i64*
  store i64 %7317, i64* %7320, align 8
  store i64 %7319, i64* %6, align 8
  store i64 %7316, i64* %3, align 8
  %call2_406049 = tail call %struct.Memory* @sub_4142a0.is_self_atari(%struct.State* nonnull %0, i64 %7316, %struct.Memory* %call2_405f4d)
  %7321 = load i32, i32* %EAX.i3678, align 4
  %7322 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %7323 = and i32 %7321, 255
  %7324 = tail call i32 @llvm.ctpop.i32(i32 %7323)
  %7325 = trunc i32 %7324 to i8
  %7326 = and i8 %7325, 1
  %7327 = xor i8 %7326, 1
  store i8 %7327, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7328 = icmp eq i32 %7321, 0
  %7329 = zext i1 %7328 to i8
  store i8 %7329, i8* %30, align 1
  %7330 = lshr i32 %7321, 31
  %7331 = trunc i32 %7330 to i8
  store i8 %7331, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v651 = select i1 %7328, i64 9, i64 19
  %7332 = add i64 %7322, %.v651
  store i64 %7332, i64* %3, align 8
  br i1 %7328, label %block_406057, label %block_.L_406061

block_406057:                                     ; preds = %block_406038
  %7333 = load i64, i64* %RBP.i, align 8
  %7334 = add i64 %7333, -10200
  %7335 = add i64 %7332, 10
  store i64 %7335, i64* %3, align 8
  %7336 = inttoptr i64 %7334 to i32*
  store i32 1, i32* %7336, align 4
  %.pre446 = load i64, i64* %3, align 8
  br label %block_.L_406061

block_.L_406061:                                  ; preds = %block_406038, %block_.L_406018, %block_406057
  %7337 = phi i64 [ %.pre446, %block_406057 ], [ %7332, %block_406038 ], [ %7278, %block_.L_406018 ]
  %7338 = add i64 %7337, 5
  store i64 %7338, i64* %3, align 8
  br label %block_.L_406066

block_.L_406066:                                  ; preds = %block_.L_406061, %block_406009
  %storemerge237 = phi i64 [ %7226, %block_406009 ], [ %7338, %block_.L_406061 ]
  %7339 = add i64 %storemerge237, 5
  store i64 %7339, i64* %3, align 8
  %.pre447 = load i64, i64* %RBP.i, align 8
  br label %block_.L_40606b

block_.L_40606b:                                  ; preds = %block_.L_406066, %block_405fba
  %7340 = phi i64 [ %7044, %block_405fba ], [ %.pre447, %block_.L_406066 ]
  %storemerge236 = phi i64 [ %7106, %block_405fba ], [ %7339, %block_.L_406066 ]
  %7341 = add i64 %7340, -10192
  %7342 = add i64 %storemerge236, 6
  store i64 %7342, i64* %3, align 8
  %7343 = inttoptr i64 %7341 to i32*
  %7344 = load i32, i32* %7343, align 4
  %7345 = add i32 %7344, 1
  %7346 = zext i32 %7345 to i64
  store i64 %7346, i64* %RAX.i2528, align 8
  %7347 = icmp eq i32 %7344, -1
  %7348 = icmp eq i32 %7345, 0
  %7349 = or i1 %7347, %7348
  %7350 = zext i1 %7349 to i8
  store i8 %7350, i8* %14, align 1
  %7351 = and i32 %7345, 255
  %7352 = tail call i32 @llvm.ctpop.i32(i32 %7351)
  %7353 = trunc i32 %7352 to i8
  %7354 = and i8 %7353, 1
  %7355 = xor i8 %7354, 1
  store i8 %7355, i8* %21, align 1
  %7356 = xor i32 %7345, %7344
  %7357 = lshr i32 %7356, 4
  %7358 = trunc i32 %7357 to i8
  %7359 = and i8 %7358, 1
  store i8 %7359, i8* %27, align 1
  %7360 = zext i1 %7348 to i8
  store i8 %7360, i8* %30, align 1
  %7361 = lshr i32 %7345, 31
  %7362 = trunc i32 %7361 to i8
  store i8 %7362, i8* %33, align 1
  %7363 = lshr i32 %7344, 31
  %7364 = xor i32 %7361, %7363
  %7365 = add nuw nsw i32 %7364, %7361
  %7366 = icmp eq i32 %7365, 2
  %7367 = zext i1 %7366 to i8
  store i8 %7367, i8* %39, align 1
  %7368 = add i64 %storemerge236, 15
  store i64 %7368, i64* %3, align 8
  store i32 %7345, i32* %7343, align 4
  %7369 = load i64, i64* %3, align 8
  %7370 = add i64 %7369, -257
  store i64 %7370, i64* %3, align 8
  br label %block_.L_405f79

block_.L_40607f:                                  ; preds = %block_.L_405f79
  store i64 3, i64* %RDX.i3821, align 8
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i3786, align 8
  %7371 = add i64 %7003, -8072
  %7372 = add i64 %7031, 15
  store i64 %7372, i64* %3, align 8
  %7373 = inttoptr i64 %7371 to i32*
  %7374 = load i32, i32* %7373, align 4
  %7375 = zext i32 %7374 to i64
  store i64 %7375, i64* %RDI.i3360, align 8
  %7376 = add i64 %7003, -20
  %7377 = add i64 %7031, 18
  store i64 %7377, i64* %3, align 8
  %7378 = inttoptr i64 %7376 to i32*
  %7379 = load i32, i32* %7378, align 4
  %7380 = zext i32 %7379 to i64
  store i64 %7380, i64* %RSI.i3112.pre-phi, align 8
  %7381 = add i64 %7031, 46385
  %7382 = add i64 %7031, 23
  %7383 = load i64, i64* %6, align 8
  %7384 = add i64 %7383, -8
  %7385 = inttoptr i64 %7384 to i64*
  store i64 %7382, i64* %7385, align 8
  store i64 %7384, i64* %6, align 8
  store i64 %7381, i64* %3, align 8
  %call2_406091 = tail call %struct.Memory* @sub_4115b0.approxlib(%struct.State* nonnull %0, i64 %7381, %struct.Memory* %call2_405f4d)
  %7386 = load i32, i32* %EAX.i3678, align 4
  %7387 = load i64, i64* %3, align 8
  %7388 = add i32 %7386, -2
  %7389 = icmp ult i32 %7386, 2
  %7390 = zext i1 %7389 to i8
  store i8 %7390, i8* %14, align 1
  %7391 = and i32 %7388, 255
  %7392 = tail call i32 @llvm.ctpop.i32(i32 %7391)
  %7393 = trunc i32 %7392 to i8
  %7394 = and i8 %7393, 1
  %7395 = xor i8 %7394, 1
  store i8 %7395, i8* %21, align 1
  %7396 = xor i32 %7388, %7386
  %7397 = lshr i32 %7396, 4
  %7398 = trunc i32 %7397 to i8
  %7399 = and i8 %7398, 1
  store i8 %7399, i8* %27, align 1
  %7400 = icmp eq i32 %7388, 0
  %7401 = zext i1 %7400 to i8
  store i8 %7401, i8* %30, align 1
  %7402 = lshr i32 %7388, 31
  %7403 = trunc i32 %7402 to i8
  store i8 %7403, i8* %33, align 1
  %7404 = lshr i32 %7386, 31
  %7405 = xor i32 %7402, %7404
  %7406 = add nuw nsw i32 %7405, %7404
  %7407 = icmp eq i32 %7406, 2
  %7408 = zext i1 %7407 to i8
  store i8 %7408, i8* %39, align 1
  %7409 = icmp ne i8 %7403, 0
  %7410 = xor i1 %7409, %7407
  %7411 = or i1 %7400, %7410
  %.v645 = select i1 %7411, i64 90, i64 9
  %7412 = add i64 %7387, %.v645
  store i64 %7412, i64* %3, align 8
  br i1 %7411, label %block_.L_4060f0, label %block_40609f

block_40609f:                                     ; preds = %block_.L_40607f
  %7413 = load i64, i64* %RBP.i, align 8
  %7414 = add i64 %7413, -8564
  %7415 = add i64 %7412, 6
  store i64 %7415, i64* %3, align 8
  %7416 = inttoptr i64 %7414 to i32*
  %7417 = load i32, i32* %7416, align 4
  %7418 = add i32 %7417, 1
  %7419 = zext i32 %7418 to i64
  store i64 %7419, i64* %RAX.i2528, align 8
  %7420 = icmp eq i32 %7417, -1
  %7421 = icmp eq i32 %7418, 0
  %7422 = or i1 %7420, %7421
  %7423 = zext i1 %7422 to i8
  store i8 %7423, i8* %14, align 1
  %7424 = and i32 %7418, 255
  %7425 = tail call i32 @llvm.ctpop.i32(i32 %7424)
  %7426 = trunc i32 %7425 to i8
  %7427 = and i8 %7426, 1
  %7428 = xor i8 %7427, 1
  store i8 %7428, i8* %21, align 1
  %7429 = xor i32 %7418, %7417
  %7430 = lshr i32 %7429, 4
  %7431 = trunc i32 %7430 to i8
  %7432 = and i8 %7431, 1
  store i8 %7432, i8* %27, align 1
  %7433 = zext i1 %7421 to i8
  store i8 %7433, i8* %30, align 1
  %7434 = lshr i32 %7418, 31
  %7435 = trunc i32 %7434 to i8
  store i8 %7435, i8* %33, align 1
  %7436 = lshr i32 %7417, 31
  %7437 = xor i32 %7434, %7436
  %7438 = add nuw nsw i32 %7437, %7434
  %7439 = icmp eq i32 %7438, 2
  %7440 = zext i1 %7439 to i8
  store i8 %7440, i8* %39, align 1
  %7441 = add i64 %7412, 15
  store i64 %7441, i64* %3, align 8
  store i32 %7418, i32* %7416, align 4
  %7442 = load i64, i64* %RBP.i, align 8
  %7443 = add i64 %7442, -10196
  %7444 = load i64, i64* %3, align 8
  %7445 = add i64 %7444, 7
  store i64 %7445, i64* %3, align 8
  %7446 = inttoptr i64 %7443 to i32*
  %7447 = load i32, i32* %7446, align 4
  store i8 0, i8* %14, align 1
  %7448 = and i32 %7447, 255
  %7449 = tail call i32 @llvm.ctpop.i32(i32 %7448)
  %7450 = trunc i32 %7449 to i8
  %7451 = and i8 %7450, 1
  %7452 = xor i8 %7451, 1
  store i8 %7452, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7453 = icmp eq i32 %7447, 0
  %7454 = zext i1 %7453 to i8
  store i8 %7454, i8* %30, align 1
  %7455 = lshr i32 %7447, 31
  %7456 = trunc i32 %7455 to i8
  store i8 %7456, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v646 = select i1 %7453, i64 61, i64 13
  %7457 = add i64 %7444, %.v646
  store i64 %7457, i64* %3, align 8
  br i1 %7453, label %block_.L_4060eb, label %block_4060bb

block_4060bb:                                     ; preds = %block_40609f
  %7458 = add i64 %7442, -8564
  %7459 = add i64 %7457, 6
  store i64 %7459, i64* %3, align 8
  %7460 = inttoptr i64 %7458 to i32*
  %7461 = load i32, i32* %7460, align 4
  %7462 = add i32 %7461, 2
  %7463 = zext i32 %7462 to i64
  store i64 %7463, i64* %RAX.i2528, align 8
  %7464 = icmp ugt i32 %7461, -3
  %7465 = zext i1 %7464 to i8
  store i8 %7465, i8* %14, align 1
  %7466 = and i32 %7462, 255
  %7467 = tail call i32 @llvm.ctpop.i32(i32 %7466)
  %7468 = trunc i32 %7467 to i8
  %7469 = and i8 %7468, 1
  %7470 = xor i8 %7469, 1
  store i8 %7470, i8* %21, align 1
  %7471 = xor i32 %7462, %7461
  %7472 = lshr i32 %7471, 4
  %7473 = trunc i32 %7472 to i8
  %7474 = and i8 %7473, 1
  store i8 %7474, i8* %27, align 1
  %7475 = icmp eq i32 %7462, 0
  %7476 = zext i1 %7475 to i8
  store i8 %7476, i8* %30, align 1
  %7477 = lshr i32 %7462, 31
  %7478 = trunc i32 %7477 to i8
  store i8 %7478, i8* %33, align 1
  %7479 = lshr i32 %7461, 31
  %7480 = xor i32 %7477, %7479
  %7481 = add nuw nsw i32 %7480, %7477
  %7482 = icmp eq i32 %7481, 2
  %7483 = zext i1 %7482 to i8
  store i8 %7483, i8* %39, align 1
  %7484 = add i64 %7457, 15
  store i64 %7484, i64* %3, align 8
  store i32 %7462, i32* %7460, align 4
  %7485 = load i64, i64* %RBP.i, align 8
  %7486 = add i64 %7485, -10200
  %7487 = load i64, i64* %3, align 8
  %7488 = add i64 %7487, 7
  store i64 %7488, i64* %3, align 8
  %7489 = inttoptr i64 %7486 to i32*
  %7490 = load i32, i32* %7489, align 4
  store i8 0, i8* %14, align 1
  %7491 = and i32 %7490, 255
  %7492 = tail call i32 @llvm.ctpop.i32(i32 %7491)
  %7493 = trunc i32 %7492 to i8
  %7494 = and i8 %7493, 1
  %7495 = xor i8 %7494, 1
  store i8 %7495, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7496 = icmp eq i32 %7490, 0
  %7497 = zext i1 %7496 to i8
  store i8 %7497, i8* %30, align 1
  %7498 = lshr i32 %7490, 31
  %7499 = trunc i32 %7498 to i8
  store i8 %7499, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v647 = select i1 %7496, i64 28, i64 13
  %7500 = add i64 %7487, %.v647
  store i64 %7500, i64* %3, align 8
  br i1 %7496, label %block_.L_4060e6, label %block_4060d7

block_4060d7:                                     ; preds = %block_4060bb
  %7501 = add i64 %7485, -8564
  %7502 = add i64 %7500, 6
  store i64 %7502, i64* %3, align 8
  %7503 = inttoptr i64 %7501 to i32*
  %7504 = load i32, i32* %7503, align 4
  %7505 = add i32 %7504, 2
  %7506 = zext i32 %7505 to i64
  store i64 %7506, i64* %RAX.i2528, align 8
  %7507 = icmp ugt i32 %7504, -3
  %7508 = zext i1 %7507 to i8
  store i8 %7508, i8* %14, align 1
  %7509 = and i32 %7505, 255
  %7510 = tail call i32 @llvm.ctpop.i32(i32 %7509)
  %7511 = trunc i32 %7510 to i8
  %7512 = and i8 %7511, 1
  %7513 = xor i8 %7512, 1
  store i8 %7513, i8* %21, align 1
  %7514 = xor i32 %7505, %7504
  %7515 = lshr i32 %7514, 4
  %7516 = trunc i32 %7515 to i8
  %7517 = and i8 %7516, 1
  store i8 %7517, i8* %27, align 1
  %7518 = icmp eq i32 %7505, 0
  %7519 = zext i1 %7518 to i8
  store i8 %7519, i8* %30, align 1
  %7520 = lshr i32 %7505, 31
  %7521 = trunc i32 %7520 to i8
  store i8 %7521, i8* %33, align 1
  %7522 = lshr i32 %7504, 31
  %7523 = xor i32 %7520, %7522
  %7524 = add nuw nsw i32 %7523, %7520
  %7525 = icmp eq i32 %7524, 2
  %7526 = zext i1 %7525 to i8
  store i8 %7526, i8* %39, align 1
  %7527 = add i64 %7500, 15
  store i64 %7527, i64* %3, align 8
  store i32 %7505, i32* %7503, align 4
  %.pre444 = load i64, i64* %3, align 8
  br label %block_.L_4060e6

block_.L_4060e6:                                  ; preds = %block_4060d7, %block_4060bb
  %7528 = phi i64 [ %.pre444, %block_4060d7 ], [ %7500, %block_4060bb ]
  %7529 = add i64 %7528, 5
  store i64 %7529, i64* %3, align 8
  br label %block_.L_4060eb

block_.L_4060eb:                                  ; preds = %block_.L_4060e6, %block_40609f
  %7530 = phi i64 [ %7529, %block_.L_4060e6 ], [ %7457, %block_40609f ]
  %7531 = add i64 %7530, 5
  store i64 %7531, i64* %3, align 8
  br label %block_.L_4060f0

block_.L_4060f0:                                  ; preds = %block_.L_4060eb, %block_.L_40607f
  %7532 = phi i64 [ %7531, %block_.L_4060eb ], [ %7412, %block_.L_40607f ]
  %7533 = add i64 %7532, 5
  store i64 %7533, i64* %3, align 8
  br label %block_.L_4060f5

block_.L_4060f5:                                  ; preds = %block_.L_405f47, %block_.L_4060f0
  %7534 = phi i64 [ %6987, %block_.L_405f47 ], [ %7533, %block_.L_4060f0 ]
  %MEMORY.101 = phi %struct.Memory* [ %call2_405f4d, %block_.L_405f47 ], [ %call2_406091, %block_.L_4060f0 ]
  %7535 = load i64, i64* %RBP.i, align 8
  %7536 = add i64 %7535, -8544
  %7537 = add i64 %7534, 6
  store i64 %7537, i64* %3, align 8
  %7538 = inttoptr i64 %7536 to i32*
  %7539 = load i32, i32* %7538, align 4
  %7540 = add i32 %7539, 1
  %7541 = zext i32 %7540 to i64
  store i64 %7541, i64* %RAX.i2528, align 8
  %7542 = icmp eq i32 %7539, -1
  %7543 = icmp eq i32 %7540, 0
  %7544 = or i1 %7542, %7543
  %7545 = zext i1 %7544 to i8
  store i8 %7545, i8* %14, align 1
  %7546 = and i32 %7540, 255
  %7547 = tail call i32 @llvm.ctpop.i32(i32 %7546)
  %7548 = trunc i32 %7547 to i8
  %7549 = and i8 %7548, 1
  %7550 = xor i8 %7549, 1
  store i8 %7550, i8* %21, align 1
  %7551 = xor i32 %7540, %7539
  %7552 = lshr i32 %7551, 4
  %7553 = trunc i32 %7552 to i8
  %7554 = and i8 %7553, 1
  store i8 %7554, i8* %27, align 1
  %7555 = zext i1 %7543 to i8
  store i8 %7555, i8* %30, align 1
  %7556 = lshr i32 %7540, 31
  %7557 = trunc i32 %7556 to i8
  store i8 %7557, i8* %33, align 1
  %7558 = lshr i32 %7539, 31
  %7559 = xor i32 %7556, %7558
  %7560 = add nuw nsw i32 %7559, %7556
  %7561 = icmp eq i32 %7560, 2
  %7562 = zext i1 %7561 to i8
  store i8 %7562, i8* %39, align 1
  %7563 = add i64 %7534, 15
  store i64 %7563, i64* %3, align 8
  store i32 %7540, i32* %7538, align 4
  %7564 = load i64, i64* %3, align 8
  %7565 = add i64 %7564, 20
  store i64 %7565, i64* %3, align 8
  br label %block_.L_406118

block_.L_406109:                                  ; preds = %block_.L_405e67
  %7566 = add i64 %6621, -8548
  %7567 = add i64 %6649, 6
  store i64 %7567, i64* %3, align 8
  %7568 = inttoptr i64 %7566 to i32*
  %7569 = load i32, i32* %7568, align 4
  %7570 = add i32 %7569, 1
  %7571 = zext i32 %7570 to i64
  store i64 %7571, i64* %RAX.i2528, align 8
  %7572 = icmp eq i32 %7569, -1
  %7573 = icmp eq i32 %7570, 0
  %7574 = or i1 %7572, %7573
  %7575 = zext i1 %7574 to i8
  store i8 %7575, i8* %14, align 1
  %7576 = and i32 %7570, 255
  %7577 = tail call i32 @llvm.ctpop.i32(i32 %7576)
  %7578 = trunc i32 %7577 to i8
  %7579 = and i8 %7578, 1
  %7580 = xor i8 %7579, 1
  store i8 %7580, i8* %21, align 1
  %7581 = xor i32 %7570, %7569
  %7582 = lshr i32 %7581, 4
  %7583 = trunc i32 %7582 to i8
  %7584 = and i8 %7583, 1
  store i8 %7584, i8* %27, align 1
  %7585 = zext i1 %7573 to i8
  store i8 %7585, i8* %30, align 1
  %7586 = lshr i32 %7570, 31
  %7587 = trunc i32 %7586 to i8
  store i8 %7587, i8* %33, align 1
  %7588 = lshr i32 %7569, 31
  %7589 = xor i32 %7586, %7588
  %7590 = add nuw nsw i32 %7589, %7586
  %7591 = icmp eq i32 %7590, 2
  %7592 = zext i1 %7591 to i8
  store i8 %7592, i8* %39, align 1
  %7593 = add i64 %6649, 15
  store i64 %7593, i64* %3, align 8
  store i32 %7570, i32* %7568, align 4
  %.pre448 = load i64, i64* %3, align 8
  br label %block_.L_406118

block_.L_406118:                                  ; preds = %block_.L_406109, %block_.L_4060f5
  %7594 = phi i64 [ %.pre448, %block_.L_406109 ], [ %7565, %block_.L_4060f5 ]
  %MEMORY.102 = phi %struct.Memory* [ %MEMORY.81, %block_.L_406109 ], [ %MEMORY.101, %block_.L_4060f5 ]
  %7595 = add i64 %7594, 5
  store i64 %7595, i64* %3, align 8
  br label %block_.L_40611d

block_.L_40611d:                                  ; preds = %block_.L_405dc3, %block_.L_406118
  %7596 = phi i64 [ %6417, %block_.L_405dc3 ], [ %7595, %block_.L_406118 ]
  %MEMORY.103 = phi %struct.Memory* [ %MEMORY.81, %block_.L_405dc3 ], [ %MEMORY.102, %block_.L_406118 ]
  %7597 = add i64 %7596, 5
  store i64 %7597, i64* %3, align 8
  br label %block_.L_406122

block_.L_406122:                                  ; preds = %block_.L_40611d, %block_.L_405dac
  %storemerge235 = phi i64 [ %6382, %block_.L_405dac ], [ %7597, %block_.L_40611d ]
  %MEMORY.104 = phi %struct.Memory* [ %MEMORY.81, %block_.L_405dac ], [ %MEMORY.103, %block_.L_40611d ]
  %7598 = add i64 %storemerge235, 5
  br label %block_.L_406127

block_.L_406127:                                  ; preds = %block_.L_406122, %block_.L_405c3d, %block_405c07
  %.sink = phi i64 [ %7598, %block_.L_406122 ], [ %5797, %block_.L_405c3d ], [ %5723, %block_405c07 ]
  %MEMORY.105 = phi %struct.Memory* [ %MEMORY.104, %block_.L_406122 ], [ %MEMORY.81, %block_.L_405c3d ], [ %MEMORY.81, %block_405c07 ]
  %7599 = load i64, i64* %RBP.i, align 8
  %7600 = add i64 %7599, -40
  %7601 = add i64 %.sink, 3
  store i64 %7601, i64* %3, align 8
  %7602 = inttoptr i64 %7600 to i32*
  %7603 = load i32, i32* %7602, align 4
  %7604 = add i32 %7603, 1
  %7605 = zext i32 %7604 to i64
  store i64 %7605, i64* %RAX.i2528, align 8
  %7606 = icmp eq i32 %7603, -1
  %7607 = icmp eq i32 %7604, 0
  %7608 = or i1 %7606, %7607
  %7609 = zext i1 %7608 to i8
  store i8 %7609, i8* %14, align 1
  %7610 = and i32 %7604, 255
  %7611 = tail call i32 @llvm.ctpop.i32(i32 %7610)
  %7612 = trunc i32 %7611 to i8
  %7613 = and i8 %7612, 1
  %7614 = xor i8 %7613, 1
  store i8 %7614, i8* %21, align 1
  %7615 = xor i32 %7604, %7603
  %7616 = lshr i32 %7615, 4
  %7617 = trunc i32 %7616 to i8
  %7618 = and i8 %7617, 1
  store i8 %7618, i8* %27, align 1
  %7619 = zext i1 %7607 to i8
  store i8 %7619, i8* %30, align 1
  %7620 = lshr i32 %7604, 31
  %7621 = trunc i32 %7620 to i8
  store i8 %7621, i8* %33, align 1
  %7622 = lshr i32 %7603, 31
  %7623 = xor i32 %7620, %7622
  %7624 = add nuw nsw i32 %7623, %7620
  %7625 = icmp eq i32 %7624, 2
  %7626 = zext i1 %7625 to i8
  store i8 %7626, i8* %39, align 1
  %7627 = add i64 %.sink, 9
  store i64 %7627, i64* %3, align 8
  store i32 %7604, i32* %7602, align 4
  %7628 = load i64, i64* %3, align 8
  %7629 = add i64 %7628, -1378
  store i64 %7629, i64* %3, align 8
  br label %block_.L_405bce

block_.L_406135.loopexit:                         ; preds = %block_.L_405bce
  br label %block_.L_406135

block_.L_406135:                                  ; preds = %block_.L_406135.loopexit, %block_405ca7
  %7630 = phi i64 [ %5964, %block_405ca7 ], [ %5649, %block_.L_406135.loopexit ]
  %7631 = phi i64 [ %.pre416, %block_405ca7 ], [ %5621, %block_.L_406135.loopexit ]
  %7632 = add i64 %7631, -8560
  %7633 = add i64 %7630, 7
  store i64 %7633, i64* %3, align 8
  %7634 = inttoptr i64 %7632 to i32*
  %7635 = load i32, i32* %7634, align 4
  store i8 0, i8* %14, align 1
  %7636 = and i32 %7635, 255
  %7637 = tail call i32 @llvm.ctpop.i32(i32 %7636)
  %7638 = trunc i32 %7637 to i8
  %7639 = and i8 %7638, 1
  %7640 = xor i8 %7639, 1
  store i8 %7640, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7641 = icmp eq i32 %7635, 0
  %7642 = zext i1 %7641 to i8
  store i8 %7642, i8* %30, align 1
  %7643 = lshr i32 %7635, 31
  %7644 = trunc i32 %7643 to i8
  store i8 %7644, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v621 = select i1 %7641, i64 60, i64 13
  %7645 = add i64 %7630, %.v621
  store i64 %7645, i64* %3, align 8
  br i1 %7641, label %block_.L_4063f9, label %block_406142

block_406142:                                     ; preds = %block_.L_406135
  %7646 = add i64 %7645, 7
  store i64 %7646, i64* %3, align 8
  %7647 = load i32, i32* %7634, align 4
  %7648 = add i32 %7647, -3
  %7649 = icmp ult i32 %7647, 3
  %7650 = zext i1 %7649 to i8
  store i8 %7650, i8* %14, align 1
  %7651 = and i32 %7648, 255
  %7652 = tail call i32 @llvm.ctpop.i32(i32 %7651)
  %7653 = trunc i32 %7652 to i8
  %7654 = and i8 %7653, 1
  %7655 = xor i8 %7654, 1
  store i8 %7655, i8* %21, align 1
  %7656 = xor i32 %7648, %7647
  %7657 = lshr i32 %7656, 4
  %7658 = trunc i32 %7657 to i8
  %7659 = and i8 %7658, 1
  store i8 %7659, i8* %27, align 1
  %7660 = icmp eq i32 %7648, 0
  %7661 = zext i1 %7660 to i8
  store i8 %7661, i8* %30, align 1
  %7662 = lshr i32 %7648, 31
  %7663 = trunc i32 %7662 to i8
  store i8 %7663, i8* %33, align 1
  %7664 = lshr i32 %7647, 31
  %7665 = xor i32 %7662, %7664
  %7666 = add nuw nsw i32 %7665, %7664
  %7667 = icmp eq i32 %7666, 2
  %7668 = zext i1 %7667 to i8
  store i8 %7668, i8* %39, align 1
  %.v622 = select i1 %7660, i64 47, i64 13
  %7669 = add i64 %7645, %.v622
  store i64 %7669, i64* %3, align 8
  br i1 %7660, label %block_.L_4063f9, label %block_40614f

block_40614f:                                     ; preds = %block_406142
  %7670 = add i64 %7631, -8540
  %7671 = add i64 %7669, 7
  store i64 %7671, i64* %3, align 8
  %7672 = inttoptr i64 %7670 to i32*
  %7673 = load i32, i32* %7672, align 4
  store i8 0, i8* %14, align 1
  %7674 = and i32 %7673, 255
  %7675 = tail call i32 @llvm.ctpop.i32(i32 %7674)
  %7676 = trunc i32 %7675 to i8
  %7677 = and i8 %7676, 1
  %7678 = xor i8 %7677, 1
  store i8 %7678, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7679 = icmp eq i32 %7673, 0
  %7680 = zext i1 %7679 to i8
  store i8 %7680, i8* %30, align 1
  %7681 = lshr i32 %7673, 31
  %7682 = trunc i32 %7681 to i8
  store i8 %7682, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v623 = select i1 %7679, i64 34, i64 13
  %7683 = add i64 %7669, %.v623
  store i64 %7683, i64* %3, align 8
  br i1 %7679, label %block_.L_4063f9, label %block_40615c

block_40615c:                                     ; preds = %block_40614f
  %7684 = add i64 %7631, -8544
  %7685 = add i64 %7683, 6
  store i64 %7685, i64* %3, align 8
  %7686 = inttoptr i64 %7684 to i32*
  %7687 = load i32, i32* %7686, align 4
  %7688 = zext i32 %7687 to i64
  store i64 %7688, i64* %RAX.i2528, align 8
  %7689 = add i64 %7631, -8548
  %7690 = add i64 %7683, 12
  store i64 %7690, i64* %3, align 8
  %7691 = inttoptr i64 %7689 to i32*
  %7692 = load i32, i32* %7691, align 4
  %7693 = add i32 %7692, %7687
  %7694 = zext i32 %7693 to i64
  store i64 %7694, i64* %RAX.i2528, align 8
  %7695 = and i32 %7693, 255
  %7696 = tail call i32 @llvm.ctpop.i32(i32 %7695)
  %7697 = trunc i32 %7696 to i8
  %7698 = and i8 %7697, 1
  %7699 = xor i8 %7698, 1
  %7700 = icmp eq i32 %7693, 0
  %7701 = zext i1 %7700 to i8
  %7702 = lshr i32 %7693, 31
  %7703 = trunc i32 %7702 to i8
  store i8 0, i8* %14, align 1
  store i8 %7699, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 %7701, i8* %30, align 1
  store i8 %7703, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v624 = select i1 %7700, i64 21, i64 26
  %7704 = add i64 %7683, %.v624
  store i64 %7704, i64* %3, align 8
  br i1 %7700, label %block_.L_4063f9, label %block_.L_406176

block_.L_406176:                                  ; preds = %block_40615c
  %7705 = add i64 %7631, -8564
  %7706 = add i64 %7704, 7
  store i64 %7706, i64* %3, align 8
  %7707 = inttoptr i64 %7705 to i32*
  %7708 = load i32, i32* %7707, align 4
  store i8 0, i8* %14, align 1
  %7709 = and i32 %7708, 255
  %7710 = tail call i32 @llvm.ctpop.i32(i32 %7709)
  %7711 = trunc i32 %7710 to i8
  %7712 = and i8 %7711, 1
  %7713 = xor i8 %7712, 1
  store i8 %7713, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7714 = icmp eq i32 %7708, 0
  %7715 = zext i1 %7714 to i8
  store i8 %7715, i8* %30, align 1
  %7716 = lshr i32 %7708, 31
  %7717 = trunc i32 %7716 to i8
  store i8 %7717, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7718 = icmp ne i8 %7717, 0
  %.v248 = select i1 %7718, i64 6, i64 16
  %7719 = add i64 %7706, %.v248
  store i64 %7719, i64* %3, align 8
  br i1 %7718, label %block_406183, label %block_.L_40618d

block_406183:                                     ; preds = %block_.L_406176
  %7720 = add i64 %7719, 10
  store i64 %7720, i64* %3, align 8
  store i32 0, i32* %7707, align 4
  %.pre417 = load i64, i64* %RBP.i, align 8
  %.pre418 = load i64, i64* %3, align 8
  br label %block_.L_40618d

block_.L_40618d:                                  ; preds = %block_.L_406176, %block_406183
  %7721 = phi i64 [ %7719, %block_.L_406176 ], [ %.pre418, %block_406183 ]
  %7722 = phi i64 [ %7631, %block_.L_406176 ], [ %.pre417, %block_406183 ]
  %7723 = add i64 %7722, -8540
  %7724 = add i64 %7721, 6
  store i64 %7724, i64* %3, align 8
  %7725 = inttoptr i64 %7723 to i32*
  %7726 = load i32, i32* %7725, align 4
  %7727 = shl i32 %7726, 2
  %7728 = zext i32 %7727 to i64
  store i64 %7728, i64* %RAX.i2528, align 8
  %7729 = lshr i32 %7726, 30
  %7730 = trunc i32 %7729 to i8
  %7731 = and i8 %7730, 1
  store i8 %7731, i8* %14, align 1
  %7732 = and i32 %7727, 252
  %7733 = tail call i32 @llvm.ctpop.i32(i32 %7732)
  %7734 = trunc i32 %7733 to i8
  %7735 = and i8 %7734, 1
  %7736 = xor i8 %7735, 1
  store i8 %7736, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7737 = icmp eq i32 %7727, 0
  %7738 = zext i1 %7737 to i8
  store i8 %7738, i8* %30, align 1
  %7739 = lshr i32 %7726, 29
  %7740 = trunc i32 %7739 to i8
  %7741 = and i8 %7740, 1
  store i8 %7741, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7742 = add i64 %7722, -8564
  %7743 = add i64 %7721, 15
  store i64 %7743, i64* %3, align 8
  %7744 = inttoptr i64 %7742 to i32*
  %7745 = load i32, i32* %7744, align 4
  %7746 = add i32 %7745, %7727
  %7747 = zext i32 %7746 to i64
  store i64 %7747, i64* %RAX.i2528, align 8
  %7748 = icmp ult i32 %7746, %7727
  %7749 = icmp ult i32 %7746, %7745
  %7750 = or i1 %7748, %7749
  %7751 = zext i1 %7750 to i8
  store i8 %7751, i8* %14, align 1
  %7752 = and i32 %7746, 255
  %7753 = tail call i32 @llvm.ctpop.i32(i32 %7752)
  %7754 = trunc i32 %7753 to i8
  %7755 = and i8 %7754, 1
  %7756 = xor i8 %7755, 1
  store i8 %7756, i8* %21, align 1
  %7757 = xor i32 %7745, %7727
  %7758 = xor i32 %7757, %7746
  %7759 = lshr i32 %7758, 4
  %7760 = trunc i32 %7759 to i8
  %7761 = and i8 %7760, 1
  store i8 %7761, i8* %27, align 1
  %7762 = icmp eq i32 %7746, 0
  %7763 = zext i1 %7762 to i8
  store i8 %7763, i8* %30, align 1
  %7764 = lshr i32 %7746, 31
  %7765 = trunc i32 %7764 to i8
  store i8 %7765, i8* %33, align 1
  %7766 = lshr i32 %7726, 29
  %7767 = and i32 %7766, 1
  %7768 = lshr i32 %7745, 31
  %7769 = xor i32 %7764, %7767
  %7770 = xor i32 %7764, %7768
  %7771 = add nuw nsw i32 %7769, %7770
  %7772 = icmp eq i32 %7771, 2
  %7773 = zext i1 %7772 to i8
  store i8 %7773, i8* %39, align 1
  %7774 = add i64 %7722, -8072
  %7775 = add i64 %7721, 22
  store i64 %7775, i64* %3, align 8
  %7776 = inttoptr i64 %7774 to i32*
  %7777 = load i32, i32* %7776, align 4
  %7778 = sext i32 %7777 to i64
  store i64 %7778, i64* %RCX.i3786, align 8
  %7779 = shl nsw i64 %7778, 2
  %7780 = add i64 %7722, -3248
  %7781 = add i64 %7780, %7779
  %7782 = add i64 %7721, 29
  store i64 %7782, i64* %3, align 8
  %7783 = inttoptr i64 %7781 to i32*
  store i32 %7746, i32* %7783, align 4
  %7784 = load i64, i64* %RBP.i, align 8
  %7785 = add i64 %7784, -8560
  %7786 = load i64, i64* %3, align 8
  %7787 = add i64 %7786, 7
  store i64 %7787, i64* %3, align 8
  %7788 = inttoptr i64 %7785 to i32*
  %7789 = load i32, i32* %7788, align 4
  %7790 = add i32 %7789, -9
  %7791 = icmp ult i32 %7789, 9
  %7792 = zext i1 %7791 to i8
  store i8 %7792, i8* %14, align 1
  %7793 = and i32 %7790, 255
  %7794 = tail call i32 @llvm.ctpop.i32(i32 %7793)
  %7795 = trunc i32 %7794 to i8
  %7796 = and i8 %7795, 1
  %7797 = xor i8 %7796, 1
  store i8 %7797, i8* %21, align 1
  %7798 = xor i32 %7790, %7789
  %7799 = lshr i32 %7798, 4
  %7800 = trunc i32 %7799 to i8
  %7801 = and i8 %7800, 1
  store i8 %7801, i8* %27, align 1
  %7802 = icmp eq i32 %7790, 0
  %7803 = zext i1 %7802 to i8
  store i8 %7803, i8* %30, align 1
  %7804 = lshr i32 %7790, 31
  %7805 = trunc i32 %7804 to i8
  store i8 %7805, i8* %33, align 1
  %7806 = lshr i32 %7789, 31
  %7807 = xor i32 %7804, %7806
  %7808 = add nuw nsw i32 %7807, %7806
  %7809 = icmp eq i32 %7808, 2
  %7810 = zext i1 %7809 to i8
  store i8 %7810, i8* %39, align 1
  %.v625 = select i1 %7802, i64 13, i64 147
  %7811 = add i64 %7786, %.v625
  store i64 %7811, i64* %3, align 8
  br i1 %7802, label %block_4061b7, label %block_.L_40623d

block_4061b7:                                     ; preds = %block_.L_40618d
  %7812 = add i64 %7784, -8544
  %7813 = add i64 %7811, 6
  store i64 %7813, i64* %3, align 8
  %7814 = inttoptr i64 %7812 to i32*
  %7815 = load i32, i32* %7814, align 4
  %7816 = zext i32 %7815 to i64
  store i64 %7816, i64* %RAX.i2528, align 8
  %7817 = add i64 %7784, -8072
  %7818 = add i64 %7811, 13
  store i64 %7818, i64* %3, align 8
  %7819 = inttoptr i64 %7817 to i32*
  %7820 = load i32, i32* %7819, align 4
  %7821 = sext i32 %7820 to i64
  store i64 %7821, i64* %RCX.i3786, align 8
  %7822 = shl nsw i64 %7821, 2
  %7823 = add nsw i64 %7822, -3248
  %7824 = add i64 %7823, %7784
  %7825 = add i64 %7811, 20
  store i64 %7825, i64* %3, align 8
  %7826 = inttoptr i64 %7824 to i32*
  %7827 = load i32, i32* %7826, align 4
  %7828 = add i32 %7827, %7815
  %7829 = zext i32 %7828 to i64
  store i64 %7829, i64* %RAX.i2528, align 8
  %7830 = icmp ult i32 %7828, %7815
  %7831 = icmp ult i32 %7828, %7827
  %7832 = or i1 %7830, %7831
  %7833 = zext i1 %7832 to i8
  store i8 %7833, i8* %14, align 1
  %7834 = and i32 %7828, 255
  %7835 = tail call i32 @llvm.ctpop.i32(i32 %7834)
  %7836 = trunc i32 %7835 to i8
  %7837 = and i8 %7836, 1
  %7838 = xor i8 %7837, 1
  store i8 %7838, i8* %21, align 1
  %7839 = xor i32 %7827, %7815
  %7840 = xor i32 %7839, %7828
  %7841 = lshr i32 %7840, 4
  %7842 = trunc i32 %7841 to i8
  %7843 = and i8 %7842, 1
  store i8 %7843, i8* %27, align 1
  %7844 = icmp eq i32 %7828, 0
  %7845 = zext i1 %7844 to i8
  store i8 %7845, i8* %30, align 1
  %7846 = lshr i32 %7828, 31
  %7847 = trunc i32 %7846 to i8
  store i8 %7847, i8* %33, align 1
  %7848 = lshr i32 %7815, 31
  %7849 = lshr i32 %7827, 31
  %7850 = xor i32 %7846, %7848
  %7851 = xor i32 %7846, %7849
  %7852 = add nuw nsw i32 %7850, %7851
  %7853 = icmp eq i32 %7852, 2
  %7854 = zext i1 %7853 to i8
  store i8 %7854, i8* %39, align 1
  %7855 = add i64 %7784, -3248
  %7856 = add i64 %7855, %7822
  %7857 = add i64 %7811, 27
  store i64 %7857, i64* %3, align 8
  %7858 = inttoptr i64 %7856 to i32*
  store i32 %7828, i32* %7858, align 4
  %7859 = load i64, i64* %RBP.i, align 8
  %7860 = add i64 %7859, -8544
  %7861 = load i64, i64* %3, align 8
  %7862 = add i64 %7861, 7
  store i64 %7862, i64* %3, align 8
  %7863 = inttoptr i64 %7860 to i32*
  %7864 = load i32, i32* %7863, align 4
  %7865 = add i32 %7864, -2
  %7866 = icmp ult i32 %7864, 2
  %7867 = zext i1 %7866 to i8
  store i8 %7867, i8* %14, align 1
  %7868 = and i32 %7865, 255
  %7869 = tail call i32 @llvm.ctpop.i32(i32 %7868)
  %7870 = trunc i32 %7869 to i8
  %7871 = and i8 %7870, 1
  %7872 = xor i8 %7871, 1
  store i8 %7872, i8* %21, align 1
  %7873 = xor i32 %7865, %7864
  %7874 = lshr i32 %7873, 4
  %7875 = trunc i32 %7874 to i8
  %7876 = and i8 %7875, 1
  store i8 %7876, i8* %27, align 1
  %7877 = icmp eq i32 %7865, 0
  %7878 = zext i1 %7877 to i8
  store i8 %7878, i8* %30, align 1
  %7879 = lshr i32 %7865, 31
  %7880 = trunc i32 %7879 to i8
  store i8 %7880, i8* %33, align 1
  %7881 = lshr i32 %7864, 31
  %7882 = xor i32 %7879, %7881
  %7883 = add nuw nsw i32 %7882, %7881
  %7884 = icmp eq i32 %7883, 2
  %7885 = zext i1 %7884 to i8
  store i8 %7885, i8* %39, align 1
  %7886 = icmp ne i8 %7880, 0
  %7887 = xor i1 %7886, %7884
  %.v632 = select i1 %7887, i64 13, i64 40
  %7888 = add i64 %7861, %.v632
  store i64 %7888, i64* %3, align 8
  br i1 %7887, label %block_4061df, label %block_.L_4061fa

block_4061df:                                     ; preds = %block_4061b7
  %7889 = add i64 %7859, -8548
  %7890 = add i64 %7888, 6
  store i64 %7890, i64* %3, align 8
  %7891 = inttoptr i64 %7889 to i32*
  %7892 = load i32, i32* %7891, align 4
  %7893 = zext i32 %7892 to i64
  store i64 %7893, i64* %RAX.i2528, align 8
  %7894 = add i64 %7859, -8072
  %7895 = add i64 %7888, 13
  store i64 %7895, i64* %3, align 8
  %7896 = inttoptr i64 %7894 to i32*
  %7897 = load i32, i32* %7896, align 4
  %7898 = sext i32 %7897 to i64
  store i64 %7898, i64* %RCX.i3786, align 8
  %7899 = shl nsw i64 %7898, 2
  %7900 = add nsw i64 %7899, -3248
  %7901 = add i64 %7900, %7859
  %7902 = add i64 %7888, 20
  store i64 %7902, i64* %3, align 8
  %7903 = inttoptr i64 %7901 to i32*
  %7904 = load i32, i32* %7903, align 4
  %7905 = add i32 %7904, %7892
  %7906 = zext i32 %7905 to i64
  store i64 %7906, i64* %RAX.i2528, align 8
  %7907 = icmp ult i32 %7905, %7892
  %7908 = icmp ult i32 %7905, %7904
  %7909 = or i1 %7907, %7908
  %7910 = zext i1 %7909 to i8
  store i8 %7910, i8* %14, align 1
  %7911 = and i32 %7905, 255
  %7912 = tail call i32 @llvm.ctpop.i32(i32 %7911)
  %7913 = trunc i32 %7912 to i8
  %7914 = and i8 %7913, 1
  %7915 = xor i8 %7914, 1
  store i8 %7915, i8* %21, align 1
  %7916 = xor i32 %7904, %7892
  %7917 = xor i32 %7916, %7905
  %7918 = lshr i32 %7917, 4
  %7919 = trunc i32 %7918 to i8
  %7920 = and i8 %7919, 1
  store i8 %7920, i8* %27, align 1
  %7921 = icmp eq i32 %7905, 0
  %7922 = zext i1 %7921 to i8
  store i8 %7922, i8* %30, align 1
  %7923 = lshr i32 %7905, 31
  %7924 = trunc i32 %7923 to i8
  store i8 %7924, i8* %33, align 1
  %7925 = lshr i32 %7892, 31
  %7926 = lshr i32 %7904, 31
  %7927 = xor i32 %7923, %7925
  %7928 = xor i32 %7923, %7926
  %7929 = add nuw nsw i32 %7927, %7928
  %7930 = icmp eq i32 %7929, 2
  %7931 = zext i1 %7930 to i8
  store i8 %7931, i8* %39, align 1
  %7932 = add i64 %7859, -3248
  %7933 = add i64 %7932, %7899
  %7934 = add i64 %7888, 27
  store i64 %7934, i64* %3, align 8
  %7935 = inttoptr i64 %7933 to i32*
  store i32 %7905, i32* %7935, align 4
  %.pre419 = load i64, i64* %RBP.i, align 8
  %.pre420 = load i64, i64* %3, align 8
  br label %block_.L_4061fa

block_.L_4061fa:                                  ; preds = %block_4061b7, %block_4061df
  %7936 = phi i64 [ %7888, %block_4061b7 ], [ %.pre420, %block_4061df ]
  %7937 = phi i64 [ %7859, %block_4061b7 ], [ %.pre419, %block_4061df ]
  %7938 = add i64 %7937, -8556
  %7939 = add i64 %7936, 7
  store i64 %7939, i64* %3, align 8
  %7940 = inttoptr i64 %7938 to i32*
  %7941 = load i32, i32* %7940, align 4
  %7942 = add i32 %7941, -1
  %7943 = icmp eq i32 %7941, 0
  %7944 = zext i1 %7943 to i8
  store i8 %7944, i8* %14, align 1
  %7945 = and i32 %7942, 255
  %7946 = tail call i32 @llvm.ctpop.i32(i32 %7945)
  %7947 = trunc i32 %7946 to i8
  %7948 = and i8 %7947, 1
  %7949 = xor i8 %7948, 1
  store i8 %7949, i8* %21, align 1
  %7950 = xor i32 %7942, %7941
  %7951 = lshr i32 %7950, 4
  %7952 = trunc i32 %7951 to i8
  %7953 = and i8 %7952, 1
  store i8 %7953, i8* %27, align 1
  %7954 = icmp eq i32 %7942, 0
  %7955 = zext i1 %7954 to i8
  store i8 %7955, i8* %30, align 1
  %7956 = lshr i32 %7942, 31
  %7957 = trunc i32 %7956 to i8
  store i8 %7957, i8* %33, align 1
  %7958 = lshr i32 %7941, 31
  %7959 = xor i32 %7956, %7958
  %7960 = add nuw nsw i32 %7959, %7958
  %7961 = icmp eq i32 %7960, 2
  %7962 = zext i1 %7961 to i8
  store i8 %7962, i8* %39, align 1
  %7963 = icmp ne i8 %7957, 0
  %7964 = xor i1 %7963, %7961
  %7965 = or i1 %7954, %7964
  %.v633 = select i1 %7965, i64 62, i64 13
  %7966 = add i64 %7936, %.v633
  store i64 %7966, i64* %3, align 8
  br i1 %7965, label %block_.L_406238, label %block_406207

block_406207:                                     ; preds = %block_.L_4061fa
  %7967 = add i64 %7937, -8540
  %7968 = add i64 %7966, 7
  store i64 %7968, i64* %3, align 8
  %7969 = inttoptr i64 %7967 to i32*
  %7970 = load i32, i32* %7969, align 4
  %7971 = add i32 %7970, -1
  %7972 = icmp eq i32 %7970, 0
  %7973 = zext i1 %7972 to i8
  store i8 %7973, i8* %14, align 1
  %7974 = and i32 %7971, 255
  %7975 = tail call i32 @llvm.ctpop.i32(i32 %7974)
  %7976 = trunc i32 %7975 to i8
  %7977 = and i8 %7976, 1
  %7978 = xor i8 %7977, 1
  store i8 %7978, i8* %21, align 1
  %7979 = xor i32 %7971, %7970
  %7980 = lshr i32 %7979, 4
  %7981 = trunc i32 %7980 to i8
  %7982 = and i8 %7981, 1
  store i8 %7982, i8* %27, align 1
  %7983 = icmp eq i32 %7971, 0
  %7984 = zext i1 %7983 to i8
  store i8 %7984, i8* %30, align 1
  %7985 = lshr i32 %7971, 31
  %7986 = trunc i32 %7985 to i8
  store i8 %7986, i8* %33, align 1
  %7987 = lshr i32 %7970, 31
  %7988 = xor i32 %7985, %7987
  %7989 = add nuw nsw i32 %7988, %7987
  %7990 = icmp eq i32 %7989, 2
  %7991 = zext i1 %7990 to i8
  store i8 %7991, i8* %39, align 1
  %7992 = icmp ne i8 %7986, 0
  %7993 = xor i1 %7992, %7990
  %.v634 = select i1 %7993, i64 49, i64 13
  %7994 = add i64 %7966, %.v634
  store i64 %7994, i64* %3, align 8
  br i1 %7993, label %block_.L_406238, label %block_406214

block_406214:                                     ; preds = %block_406207
  %7995 = add i64 %7994, 6
  store i64 %7995, i64* %3, align 8
  %7996 = load i32, i32* %7940, align 4
  %7997 = mul i32 %7996, 5
  %7998 = add i32 %7997, -10
  %7999 = zext i32 %7997 to i64
  store i64 %7999, i64* %RAX.i2528, align 8
  %8000 = icmp ult i32 %7997, 10
  %8001 = zext i1 %8000 to i8
  store i8 %8001, i8* %14, align 1
  %8002 = and i32 %7997, 255
  %8003 = tail call i32 @llvm.ctpop.i32(i32 %8002)
  %8004 = trunc i32 %8003 to i8
  %8005 = and i8 %8004, 1
  %8006 = xor i8 %8005, 1
  store i8 %8006, i8* %21, align 1
  %8007 = xor i32 %7997, %7998
  %8008 = lshr i32 %8007, 4
  %8009 = trunc i32 %8008 to i8
  %8010 = and i8 %8009, 1
  store i8 %8010, i8* %27, align 1
  %8011 = icmp eq i32 %7997, 0
  %8012 = zext i1 %8011 to i8
  store i8 %8012, i8* %30, align 1
  %8013 = lshr i32 %7997, 31
  %8014 = trunc i32 %8013 to i8
  store i8 %8014, i8* %33, align 1
  %8015 = lshr i32 %7998, 31
  %8016 = xor i32 %8013, %8015
  %8017 = add nuw nsw i32 %8016, %8013
  %8018 = icmp eq i32 %8017, 2
  %8019 = zext i1 %8018 to i8
  store i8 %8019, i8* %39, align 1
  %8020 = add i64 %7937, -8072
  %8021 = add i64 %7994, 22
  store i64 %8021, i64* %3, align 8
  %8022 = inttoptr i64 %8020 to i32*
  %8023 = load i32, i32* %8022, align 4
  %8024 = sext i32 %8023 to i64
  store i64 %8024, i64* %RCX.i3786, align 8
  %8025 = load i64, i64* %RBP.i, align 8
  %8026 = shl nsw i64 %8024, 2
  %8027 = add nsw i64 %8026, -3248
  %8028 = add i64 %8027, %8025
  %8029 = add i64 %7994, 29
  store i64 %8029, i64* %3, align 8
  %8030 = inttoptr i64 %8028 to i32*
  %8031 = load i32, i32* %8030, align 4
  %8032 = add i32 %8031, %7997
  %8033 = zext i32 %8032 to i64
  store i64 %8033, i64* %RAX.i2528, align 8
  %8034 = icmp ult i32 %8032, %7997
  %8035 = icmp ult i32 %8032, %8031
  %8036 = or i1 %8034, %8035
  %8037 = zext i1 %8036 to i8
  store i8 %8037, i8* %14, align 1
  %8038 = and i32 %8032, 255
  %8039 = tail call i32 @llvm.ctpop.i32(i32 %8038)
  %8040 = trunc i32 %8039 to i8
  %8041 = and i8 %8040, 1
  %8042 = xor i8 %8041, 1
  store i8 %8042, i8* %21, align 1
  %8043 = xor i32 %8031, %7997
  %8044 = xor i32 %8043, %8032
  %8045 = lshr i32 %8044, 4
  %8046 = trunc i32 %8045 to i8
  %8047 = and i8 %8046, 1
  store i8 %8047, i8* %27, align 1
  %8048 = icmp eq i32 %8032, 0
  %8049 = zext i1 %8048 to i8
  store i8 %8049, i8* %30, align 1
  %8050 = lshr i32 %8032, 31
  %8051 = trunc i32 %8050 to i8
  store i8 %8051, i8* %33, align 1
  %8052 = lshr i32 %8031, 31
  %8053 = xor i32 %8050, %8013
  %8054 = xor i32 %8050, %8052
  %8055 = add nuw nsw i32 %8053, %8054
  %8056 = icmp eq i32 %8055, 2
  %8057 = zext i1 %8056 to i8
  store i8 %8057, i8* %39, align 1
  %8058 = add i64 %8025, -3248
  %8059 = add i64 %8058, %8026
  %8060 = add i64 %7994, 36
  store i64 %8060, i64* %3, align 8
  %8061 = inttoptr i64 %8059 to i32*
  store i32 %8032, i32* %8061, align 4
  %.pre421 = load i64, i64* %3, align 8
  br label %block_.L_406238

block_.L_406238:                                  ; preds = %block_406214, %block_406207, %block_.L_4061fa
  %8062 = phi i64 [ %.pre421, %block_406214 ], [ %7994, %block_406207 ], [ %7966, %block_.L_4061fa ]
  %8063 = add i64 %8062, 50
  br label %block_.L_40626a

block_.L_40623d:                                  ; preds = %block_.L_40618d
  %8064 = add i64 %7784, -8540
  %8065 = add i64 %7811, 7
  store i64 %8065, i64* %3, align 8
  %8066 = inttoptr i64 %8064 to i32*
  %8067 = load i32, i32* %8066, align 4
  %8068 = add i32 %8067, -2
  %8069 = icmp ult i32 %8067, 2
  %8070 = zext i1 %8069 to i8
  store i8 %8070, i8* %14, align 1
  %8071 = and i32 %8068, 255
  %8072 = tail call i32 @llvm.ctpop.i32(i32 %8071)
  %8073 = trunc i32 %8072 to i8
  %8074 = and i8 %8073, 1
  %8075 = xor i8 %8074, 1
  store i8 %8075, i8* %21, align 1
  %8076 = xor i32 %8068, %8067
  %8077 = lshr i32 %8076, 4
  %8078 = trunc i32 %8077 to i8
  %8079 = and i8 %8078, 1
  store i8 %8079, i8* %27, align 1
  %8080 = icmp eq i32 %8068, 0
  %8081 = zext i1 %8080 to i8
  store i8 %8081, i8* %30, align 1
  %8082 = lshr i32 %8068, 31
  %8083 = trunc i32 %8082 to i8
  store i8 %8083, i8* %33, align 1
  %8084 = lshr i32 %8067, 31
  %8085 = xor i32 %8082, %8084
  %8086 = add nuw nsw i32 %8085, %8084
  %8087 = icmp eq i32 %8086, 2
  %8088 = zext i1 %8087 to i8
  store i8 %8088, i8* %39, align 1
  %8089 = icmp ne i8 %8083, 0
  %8090 = xor i1 %8089, %8087
  %8091 = or i1 %8080, %8090
  %.v626 = select i1 %8091, i64 40, i64 13
  %8092 = add i64 %7811, %.v626
  store i64 %8092, i64* %3, align 8
  br i1 %8091, label %block_.L_406265, label %block_40624a

block_40624a:                                     ; preds = %block_.L_40623d
  %8093 = add i64 %7784, -8548
  %8094 = add i64 %8092, 6
  store i64 %8094, i64* %3, align 8
  %8095 = inttoptr i64 %8093 to i32*
  %8096 = load i32, i32* %8095, align 4
  %8097 = zext i32 %8096 to i64
  store i64 %8097, i64* %RAX.i2528, align 8
  %8098 = add i64 %7784, -8072
  %8099 = add i64 %8092, 13
  store i64 %8099, i64* %3, align 8
  %8100 = inttoptr i64 %8098 to i32*
  %8101 = load i32, i32* %8100, align 4
  %8102 = sext i32 %8101 to i64
  store i64 %8102, i64* %RCX.i3786, align 8
  %8103 = shl nsw i64 %8102, 2
  %8104 = add nsw i64 %8103, -3248
  %8105 = add i64 %8104, %7784
  %8106 = add i64 %8092, 20
  store i64 %8106, i64* %3, align 8
  %8107 = inttoptr i64 %8105 to i32*
  %8108 = load i32, i32* %8107, align 4
  %8109 = add i32 %8108, %8096
  %8110 = zext i32 %8109 to i64
  store i64 %8110, i64* %RAX.i2528, align 8
  %8111 = icmp ult i32 %8109, %8096
  %8112 = icmp ult i32 %8109, %8108
  %8113 = or i1 %8111, %8112
  %8114 = zext i1 %8113 to i8
  store i8 %8114, i8* %14, align 1
  %8115 = and i32 %8109, 255
  %8116 = tail call i32 @llvm.ctpop.i32(i32 %8115)
  %8117 = trunc i32 %8116 to i8
  %8118 = and i8 %8117, 1
  %8119 = xor i8 %8118, 1
  store i8 %8119, i8* %21, align 1
  %8120 = xor i32 %8108, %8096
  %8121 = xor i32 %8120, %8109
  %8122 = lshr i32 %8121, 4
  %8123 = trunc i32 %8122 to i8
  %8124 = and i8 %8123, 1
  store i8 %8124, i8* %27, align 1
  %8125 = icmp eq i32 %8109, 0
  %8126 = zext i1 %8125 to i8
  store i8 %8126, i8* %30, align 1
  %8127 = lshr i32 %8109, 31
  %8128 = trunc i32 %8127 to i8
  store i8 %8128, i8* %33, align 1
  %8129 = lshr i32 %8096, 31
  %8130 = lshr i32 %8108, 31
  %8131 = xor i32 %8127, %8129
  %8132 = xor i32 %8127, %8130
  %8133 = add nuw nsw i32 %8131, %8132
  %8134 = icmp eq i32 %8133, 2
  %8135 = zext i1 %8134 to i8
  store i8 %8135, i8* %39, align 1
  %8136 = add i64 %7784, -3248
  %8137 = add i64 %8136, %8103
  %8138 = add i64 %8092, 27
  store i64 %8138, i64* %3, align 8
  %8139 = inttoptr i64 %8137 to i32*
  store i32 %8109, i32* %8139, align 4
  %.pre422 = load i64, i64* %3, align 8
  br label %block_.L_406265

block_.L_406265:                                  ; preds = %block_40624a, %block_.L_40623d
  %8140 = phi i64 [ %.pre422, %block_40624a ], [ %8092, %block_.L_40623d ]
  %8141 = add i64 %8140, 5
  store i64 %8141, i64* %3, align 8
  br label %block_.L_40626a

block_.L_40626a:                                  ; preds = %block_.L_406265, %block_.L_406238
  %storemerge233 = phi i64 [ %8063, %block_.L_406238 ], [ %8141, %block_.L_406265 ]
  %8142 = load i64, i64* %RBP.i, align 8
  %8143 = add i64 %8142, -8552
  %8144 = add i64 %storemerge233, 7
  store i64 %8144, i64* %3, align 8
  %8145 = inttoptr i64 %8143 to i32*
  %8146 = load i32, i32* %8145, align 4
  %8147 = add i32 %8146, -1
  %8148 = icmp eq i32 %8146, 0
  %8149 = zext i1 %8148 to i8
  store i8 %8149, i8* %14, align 1
  %8150 = and i32 %8147, 255
  %8151 = tail call i32 @llvm.ctpop.i32(i32 %8150)
  %8152 = trunc i32 %8151 to i8
  %8153 = and i8 %8152, 1
  %8154 = xor i8 %8153, 1
  store i8 %8154, i8* %21, align 1
  %8155 = xor i32 %8147, %8146
  %8156 = lshr i32 %8155, 4
  %8157 = trunc i32 %8156 to i8
  %8158 = and i8 %8157, 1
  store i8 %8158, i8* %27, align 1
  %8159 = icmp eq i32 %8147, 0
  %8160 = zext i1 %8159 to i8
  store i8 %8160, i8* %30, align 1
  %8161 = lshr i32 %8147, 31
  %8162 = trunc i32 %8161 to i8
  store i8 %8162, i8* %33, align 1
  %8163 = lshr i32 %8146, 31
  %8164 = xor i32 %8161, %8163
  %8165 = add nuw nsw i32 %8164, %8163
  %8166 = icmp eq i32 %8165, 2
  %8167 = zext i1 %8166 to i8
  store i8 %8167, i8* %39, align 1
  %8168 = icmp ne i8 %8162, 0
  %8169 = xor i1 %8168, %8166
  %8170 = or i1 %8159, %8169
  %.v627 = select i1 %8170, i64 46, i64 13
  %8171 = add i64 %storemerge233, %.v627
  store i64 %8171, i64* %3, align 8
  br i1 %8170, label %block_.L_406298, label %block_406277

block_406277:                                     ; preds = %block_.L_40626a
  %8172 = add i64 %8171, 6
  store i64 %8172, i64* %3, align 8
  %8173 = load i32, i32* %8145, align 4
  %8174 = add i32 %8173, -1
  %8175 = sext i32 %8174 to i64
  %8176 = mul nsw i64 %8175, 10
  %8177 = trunc i64 %8176 to i32
  %8178 = and i64 %8176, 4294967294
  store i64 %8178, i64* %RAX.i2528, align 8
  %8179 = mul i64 %8175, 42949672960
  %8180 = ashr exact i64 %8179, 32
  %8181 = icmp ne i64 %8180, %8176
  %8182 = zext i1 %8181 to i8
  store i8 %8182, i8* %14, align 1
  %8183 = and i32 %8177, 254
  %8184 = tail call i32 @llvm.ctpop.i32(i32 %8183)
  %8185 = trunc i32 %8184 to i8
  %8186 = and i8 %8185, 1
  %8187 = xor i8 %8186, 1
  store i8 %8187, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %8188 = lshr i32 %8177, 31
  %8189 = trunc i32 %8188 to i8
  store i8 %8189, i8* %33, align 1
  store i8 %8182, i8* %39, align 1
  %8190 = add i64 %8142, -8072
  %8191 = add i64 %8171, 19
  store i64 %8191, i64* %3, align 8
  %8192 = inttoptr i64 %8190 to i32*
  %8193 = load i32, i32* %8192, align 4
  %8194 = sext i32 %8193 to i64
  store i64 %8194, i64* %RCX.i3786, align 8
  %8195 = shl nsw i64 %8194, 2
  %8196 = add nsw i64 %8195, -3248
  %8197 = add i64 %8196, %8142
  %8198 = add i64 %8171, 26
  store i64 %8198, i64* %3, align 8
  %8199 = trunc i64 %8176 to i32
  %8200 = inttoptr i64 %8197 to i32*
  %8201 = load i32, i32* %8200, align 4
  %8202 = add i32 %8201, %8199
  %8203 = zext i32 %8202 to i64
  store i64 %8203, i64* %RAX.i2528, align 8
  %8204 = icmp ult i32 %8202, %8199
  %8205 = icmp ult i32 %8202, %8201
  %8206 = or i1 %8204, %8205
  %8207 = zext i1 %8206 to i8
  store i8 %8207, i8* %14, align 1
  %8208 = and i32 %8202, 255
  %8209 = tail call i32 @llvm.ctpop.i32(i32 %8208)
  %8210 = trunc i32 %8209 to i8
  %8211 = and i8 %8210, 1
  %8212 = xor i8 %8211, 1
  store i8 %8212, i8* %21, align 1
  %8213 = xor i32 %8201, %8199
  %8214 = xor i32 %8213, %8202
  %8215 = lshr i32 %8214, 4
  %8216 = trunc i32 %8215 to i8
  %8217 = and i8 %8216, 1
  store i8 %8217, i8* %27, align 1
  %8218 = icmp eq i32 %8202, 0
  %8219 = zext i1 %8218 to i8
  store i8 %8219, i8* %30, align 1
  %8220 = lshr i32 %8202, 31
  %8221 = trunc i32 %8220 to i8
  store i8 %8221, i8* %33, align 1
  %8222 = lshr i32 %8199, 31
  %8223 = lshr i32 %8201, 31
  %8224 = xor i32 %8220, %8222
  %8225 = xor i32 %8220, %8223
  %8226 = add nuw nsw i32 %8224, %8225
  %8227 = icmp eq i32 %8226, 2
  %8228 = zext i1 %8227 to i8
  store i8 %8228, i8* %39, align 1
  %8229 = load i64, i64* %RBP.i, align 8
  %8230 = add i64 %8229, -3248
  %8231 = add i64 %8230, %8195
  %8232 = add i64 %8171, 33
  store i64 %8232, i64* %3, align 8
  %8233 = inttoptr i64 %8231 to i32*
  store i32 %8202, i32* %8233, align 4
  %.pre423 = load i64, i64* %3, align 8
  %.pre424 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406298

block_.L_406298:                                  ; preds = %block_406277, %block_.L_40626a
  %8234 = phi i64 [ %.pre424, %block_406277 ], [ %8142, %block_.L_40626a ]
  %8235 = phi i64 [ %.pre423, %block_406277 ], [ %8171, %block_.L_40626a ]
  %8236 = add i64 %8235, ptrtoint (%G_0xdcca8__rip__type* @G_0xdcca8__rip_ to i64)
  %8237 = add i64 %8235, 8
  store i64 %8237, i64* %3, align 8
  %8238 = inttoptr i64 %8236 to i64*
  %8239 = load i64, i64* %8238, align 8
  store i64 %8239, i64* %5466, align 1
  store double 0.000000e+00, double* %5467, align 1
  %8240 = add i64 %8234, -8072
  %8241 = add i64 %8235, 15
  store i64 %8241, i64* %3, align 8
  %8242 = inttoptr i64 %8240 to i32*
  %8243 = load i32, i32* %8242, align 4
  %8244 = sext i32 %8243 to i64
  store i64 %8244, i64* %RAX.i2528, align 8
  %8245 = shl nsw i64 %8244, 2
  %8246 = add i64 %8234, -4848
  %8247 = add i64 %8246, %8245
  %8248 = add i64 %8235, 24
  store i64 %8248, i64* %3, align 8
  %8249 = inttoptr i64 %8247 to float*
  %8250 = load float, float* %8249, align 4
  %8251 = fpext float %8250 to double
  store double %8251, double* %5468, align 1
  %8252 = bitcast i64 %8239 to <2 x i32>
  %8253 = extractelement <2 x i32> %8252, i32 0
  store i32 %8253, i32* %5471, align 1
  %8254 = extractelement <2 x i32> %8252, i32 1
  store i32 %8254, i32* %5473, align 1
  store i32 0, i32* %5475, align 1
  store i32 0, i32* %5477, align 1
  %8255 = load double, double* %5478, align 1
  %8256 = fmul double %8255, %8251
  store double %8256, double* %5478, align 1
  %8257 = tail call double @llvm.trunc.f64(double %8256)
  %8258 = tail call double @llvm.fabs.f64(double %8257)
  %8259 = fcmp ogt double %8258, 0x41DFFFFFFFC00000
  %8260 = fptosi double %8257 to i32
  %8261 = zext i32 %8260 to i64
  %8262 = select i1 %8259, i64 2147483648, i64 %8261
  store i64 %8262, i64* %RCX.i3786, align 8
  %8263 = add i64 %8234, -10204
  %8264 = trunc i64 %8262 to i32
  %8265 = add i64 %8235, 41
  store i64 %8265, i64* %3, align 8
  %8266 = inttoptr i64 %8263 to i32*
  store i32 %8264, i32* %8266, align 4
  %8267 = load i64, i64* %RBP.i, align 8
  %8268 = add i64 %8267, -8072
  %8269 = load i64, i64* %3, align 8
  %8270 = add i64 %8269, 7
  store i64 %8270, i64* %3, align 8
  %8271 = inttoptr i64 %8268 to i32*
  %8272 = load i32, i32* %8271, align 4
  %8273 = sext i32 %8272 to i64
  store i64 %8273, i64* %RAX.i2528, align 8
  %8274 = shl nsw i64 %8273, 2
  %8275 = add i64 %8267, -6448
  %8276 = add i64 %8275, %8274
  %8277 = add i64 %8269, 16
  store i64 %8277, i64* %3, align 8
  %8278 = inttoptr i64 %8276 to float*
  %8279 = load float, float* %8278, align 4
  %8280 = fpext float %8279 to double
  store double %8280, double* %5468, align 1
  %8281 = load double, double* %5465, align 1
  %8282 = fmul double %8280, %8281
  store double %8282, double* %5465, align 1
  %8283 = tail call double @llvm.trunc.f64(double %8282)
  %8284 = tail call double @llvm.fabs.f64(double %8283)
  %8285 = fcmp ogt double %8284, 0x41DFFFFFFFC00000
  %8286 = fptosi double %8283 to i32
  %8287 = zext i32 %8286 to i64
  %8288 = select i1 %8285, i64 2147483648, i64 %8287
  store i64 %8288, i64* %RCX.i3786, align 8
  %8289 = add i64 %8267, -10208
  %8290 = trunc i64 %8288 to i32
  %8291 = add i64 %8269, 30
  store i64 %8291, i64* %3, align 8
  %8292 = inttoptr i64 %8289 to i32*
  store i32 %8290, i32* %8292, align 4
  %8293 = load i64, i64* %RBP.i, align 8
  %8294 = add i64 %8293, -10204
  %8295 = load i64, i64* %3, align 8
  %8296 = add i64 %8295, 6
  store i64 %8296, i64* %3, align 8
  %8297 = inttoptr i64 %8294 to i32*
  %8298 = load i32, i32* %8297, align 4
  %8299 = zext i32 %8298 to i64
  store i64 %8299, i64* %RCX.i3786, align 8
  %8300 = add i64 %8293, -10208
  %8301 = add i64 %8295, 12
  store i64 %8301, i64* %3, align 8
  %8302 = inttoptr i64 %8300 to i32*
  %8303 = load i32, i32* %8302, align 4
  %8304 = add i32 %8303, %8298
  %8305 = zext i32 %8304 to i64
  store i64 %8305, i64* %RCX.i3786, align 8
  %8306 = icmp ult i32 %8304, %8298
  %8307 = icmp ult i32 %8304, %8303
  %8308 = or i1 %8306, %8307
  %8309 = zext i1 %8308 to i8
  store i8 %8309, i8* %14, align 1
  %8310 = and i32 %8304, 255
  %8311 = tail call i32 @llvm.ctpop.i32(i32 %8310)
  %8312 = trunc i32 %8311 to i8
  %8313 = and i8 %8312, 1
  %8314 = xor i8 %8313, 1
  store i8 %8314, i8* %21, align 1
  %8315 = xor i32 %8303, %8298
  %8316 = xor i32 %8315, %8304
  %8317 = lshr i32 %8316, 4
  %8318 = trunc i32 %8317 to i8
  %8319 = and i8 %8318, 1
  store i8 %8319, i8* %27, align 1
  %8320 = icmp eq i32 %8304, 0
  %8321 = zext i1 %8320 to i8
  store i8 %8321, i8* %30, align 1
  %8322 = lshr i32 %8304, 31
  %8323 = trunc i32 %8322 to i8
  store i8 %8323, i8* %33, align 1
  %8324 = lshr i32 %8298, 31
  %8325 = lshr i32 %8303, 31
  %8326 = xor i32 %8322, %8324
  %8327 = xor i32 %8322, %8325
  %8328 = add nuw nsw i32 %8326, %8327
  %8329 = icmp eq i32 %8328, 2
  %8330 = zext i1 %8329 to i8
  store i8 %8330, i8* %39, align 1
  %8331 = add i64 %8293, -10212
  %8332 = add i64 %8295, 18
  store i64 %8332, i64* %3, align 8
  %8333 = inttoptr i64 %8331 to i32*
  store i32 %8304, i32* %8333, align 4
  %8334 = load i64, i64* %RBP.i, align 8
  %8335 = add i64 %8334, -8072
  %8336 = load i64, i64* %3, align 8
  %8337 = add i64 %8336, 7
  store i64 %8337, i64* %3, align 8
  %8338 = inttoptr i64 %8335 to i32*
  %8339 = load i32, i32* %8338, align 4
  %8340 = sext i32 %8339 to i64
  store i64 %8340, i64* %RAX.i2528, align 8
  %8341 = shl nsw i64 %8340, 2
  %8342 = add i64 %8334, -3248
  %8343 = add i64 %8342, %8341
  %8344 = add i64 %8336, 15
  store i64 %8344, i64* %3, align 8
  %8345 = inttoptr i64 %8343 to i32*
  %8346 = load i32, i32* %8345, align 4
  store i8 0, i8* %14, align 1
  %8347 = and i32 %8346, 255
  %8348 = tail call i32 @llvm.ctpop.i32(i32 %8347)
  %8349 = trunc i32 %8348 to i8
  %8350 = and i8 %8349, 1
  %8351 = xor i8 %8350, 1
  store i8 %8351, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8352 = icmp eq i32 %8346, 0
  %8353 = zext i1 %8352 to i8
  store i8 %8353, i8* %30, align 1
  %8354 = lshr i32 %8346, 31
  %8355 = trunc i32 %8354 to i8
  store i8 %8355, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8356 = icmp ne i8 %8355, 0
  %8357 = or i1 %8352, %8356
  %.v628 = select i1 %8357, i64 75, i64 21
  %8358 = add i64 %8336, %.v628
  store i64 %8358, i64* %3, align 8
  br i1 %8357, label %block_.L_40633c, label %block_406306

block_406306:                                     ; preds = %block_.L_406298
  %8359 = add i64 %8358, 7
  store i64 %8359, i64* %3, align 8
  %8360 = load i32, i32* %8338, align 4
  %8361 = sext i32 %8360 to i64
  store i64 %8361, i64* %RAX.i2528, align 8
  %8362 = shl nsw i64 %8361, 2
  %8363 = add i64 %8342, %8362
  %8364 = add i64 %8358, 14
  store i64 %8364, i64* %3, align 8
  %8365 = inttoptr i64 %8363 to i32*
  %8366 = load i32, i32* %8365, align 4
  %8367 = zext i32 %8366 to i64
  store i64 %8367, i64* %RCX.i3786, align 8
  %8368 = add i64 %8334, -10212
  %8369 = add i64 %8358, 20
  store i64 %8369, i64* %3, align 8
  %8370 = inttoptr i64 %8368 to i32*
  %8371 = load i32, i32* %8370, align 4
  %8372 = add i32 %8371, %8366
  %8373 = zext i32 %8372 to i64
  store i64 %8373, i64* %RCX.i3786, align 8
  %8374 = and i32 %8372, 255
  %8375 = tail call i32 @llvm.ctpop.i32(i32 %8374)
  %8376 = trunc i32 %8375 to i8
  %8377 = and i8 %8376, 1
  %8378 = xor i8 %8377, 1
  %8379 = icmp eq i32 %8372, 0
  %8380 = zext i1 %8379 to i8
  %8381 = lshr i32 %8372, 31
  %8382 = trunc i32 %8381 to i8
  store i8 0, i8* %14, align 1
  store i8 %8378, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 %8380, i8* %30, align 1
  store i8 %8382, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8383 = xor i1 %8379, true
  %8384 = icmp eq i8 %8382, 0
  %8385 = and i1 %8384, %8383
  %.v629 = select i1 %8385, i64 54, i64 29
  %8386 = add i64 %8358, %.v629
  store i64 %8386, i64* %3, align 8
  br i1 %8385, label %block_.L_40633c, label %block_406323

block_406323:                                     ; preds = %block_406306
  store i64 1, i64* %RAX.i2528, align 8
  %8387 = add i64 %8386, 12
  store i64 %8387, i64* %3, align 8
  %8388 = load i32, i32* %8338, align 4
  %8389 = sext i32 %8388 to i64
  store i64 %8389, i64* %RCX.i3786, align 8
  %8390 = shl nsw i64 %8389, 2
  %8391 = add nsw i64 %8390, -3248
  %8392 = add i64 %8391, %8334
  %8393 = add i64 %8386, 19
  store i64 %8393, i64* %3, align 8
  %8394 = inttoptr i64 %8392 to i32*
  %8395 = load i32, i32* %8394, align 4
  %8396 = sub i32 1, %8395
  %8397 = zext i32 %8396 to i64
  store i64 %8397, i64* %RAX.i2528, align 8
  %8398 = icmp ugt i32 %8395, 1
  %8399 = zext i1 %8398 to i8
  store i8 %8399, i8* %14, align 1
  %8400 = and i32 %8396, 255
  %8401 = tail call i32 @llvm.ctpop.i32(i32 %8400)
  %8402 = trunc i32 %8401 to i8
  %8403 = and i8 %8402, 1
  %8404 = xor i8 %8403, 1
  store i8 %8404, i8* %21, align 1
  %8405 = xor i32 %8395, %8396
  %8406 = lshr i32 %8405, 4
  %8407 = trunc i32 %8406 to i8
  %8408 = and i8 %8407, 1
  store i8 %8408, i8* %27, align 1
  %8409 = icmp eq i32 %8396, 0
  %8410 = zext i1 %8409 to i8
  store i8 %8410, i8* %30, align 1
  %8411 = lshr i32 %8396, 31
  %8412 = trunc i32 %8411 to i8
  store i8 %8412, i8* %33, align 1
  %8413 = lshr i32 %8395, 31
  %8414 = add nuw nsw i32 %8411, %8413
  %8415 = icmp eq i32 %8414, 2
  %8416 = zext i1 %8415 to i8
  store i8 %8416, i8* %39, align 1
  %8417 = add i64 %8386, 25
  store i64 %8417, i64* %3, align 8
  store i32 %8396, i32* %8370, align 4
  %.pre425 = load i64, i64* %RBP.i, align 8
  %.pre426 = load i64, i64* %3, align 8
  br label %block_.L_40633c

block_.L_40633c:                                  ; preds = %block_406323, %block_406306, %block_.L_406298
  %8418 = phi i64 [ %.pre426, %block_406323 ], [ %8386, %block_406306 ], [ %8358, %block_.L_406298 ]
  %8419 = phi i64 [ %.pre425, %block_406323 ], [ %8334, %block_406306 ], [ %8334, %block_.L_406298 ]
  %8420 = add i64 %8419, -10212
  %8421 = add i64 %8418, 6
  store i64 %8421, i64* %3, align 8
  %8422 = inttoptr i64 %8420 to i32*
  %8423 = load i32, i32* %8422, align 4
  %8424 = zext i32 %8423 to i64
  store i64 %8424, i64* %RAX.i2528, align 8
  %8425 = add i64 %8419, -8072
  %8426 = add i64 %8418, 13
  store i64 %8426, i64* %3, align 8
  %8427 = inttoptr i64 %8425 to i32*
  %8428 = load i32, i32* %8427, align 4
  %8429 = sext i32 %8428 to i64
  store i64 %8429, i64* %RCX.i3786, align 8
  %8430 = shl nsw i64 %8429, 2
  %8431 = add nsw i64 %8430, -3248
  %8432 = add i64 %8431, %8419
  %8433 = add i64 %8418, 20
  store i64 %8433, i64* %3, align 8
  %8434 = inttoptr i64 %8432 to i32*
  %8435 = load i32, i32* %8434, align 4
  %8436 = add i32 %8435, %8423
  %8437 = add i64 %8419, -3248
  %8438 = add i64 %8437, %8430
  %8439 = add i64 %8418, 27
  store i64 %8439, i64* %3, align 8
  %8440 = inttoptr i64 %8438 to i32*
  store i32 %8436, i32* %8440, align 4
  %8441 = load i64, i64* %3, align 8
  %8442 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %8443 = and i32 %8442, 131072
  %8444 = zext i32 %8443 to i64
  store i64 %8444, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8445 = icmp eq i32 %8443, 0
  %.lobit511 = lshr exact i32 %8443, 17
  %8446 = trunc i32 %.lobit511 to i8
  %8447 = xor i8 %8446, 1
  store i8 %8447, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v630 = select i1 %8445, i64 77, i64 21
  %8448 = add i64 %8441, %.v630
  store i64 %8448, i64* %3, align 8
  br i1 %8445, label %block_.L_4063a4, label %block_40636c

block_40636c:                                     ; preds = %block_.L_40633c
  store i64 ptrtoint (%G__0x579e20_type* @G__0x579e20 to i64), i64* %RDI.i3360, align 8
  %8449 = load i64, i64* %RBP.i, align 8
  %8450 = add i64 %8449, -8072
  %8451 = add i64 %8448, 16
  store i64 %8451, i64* %3, align 8
  %8452 = inttoptr i64 %8450 to i32*
  %8453 = load i32, i32* %8452, align 4
  %8454 = zext i32 %8453 to i64
  store i64 %8454, i64* %RSI.i3112.pre-phi, align 8
  %8455 = add i64 %8448, 23
  store i64 %8455, i64* %3, align 8
  %8456 = load i32, i32* %8452, align 4
  %8457 = sext i32 %8456 to i64
  store i64 %8457, i64* %RAX.i2528, align 8
  %8458 = shl nsw i64 %8457, 2
  %8459 = add i64 %8449, -3248
  %8460 = add i64 %8459, %8458
  %8461 = add i64 %8448, 30
  store i64 %8461, i64* %3, align 8
  %8462 = inttoptr i64 %8460 to i32*
  %8463 = load i32, i32* %8462, align 4
  %8464 = zext i32 %8463 to i64
  store i64 %8464, i64* %RDX.i3821, align 8
  %8465 = add i64 %8449, -10204
  %8466 = add i64 %8448, 36
  store i64 %8466, i64* %3, align 8
  %8467 = inttoptr i64 %8465 to i32*
  %8468 = load i32, i32* %8467, align 4
  %8469 = zext i32 %8468 to i64
  store i64 %8469, i64* %RCX.i3786, align 8
  %8470 = add i64 %8449, -10208
  %8471 = add i64 %8448, 43
  store i64 %8471, i64* %3, align 8
  %8472 = inttoptr i64 %8470 to i32*
  %8473 = load i32, i32* %8472, align 4
  %8474 = zext i32 %8473 to i64
  store i64 %8474, i64* %43, align 8
  store i8 0, i8* %AL.i1212, align 1
  %8475 = add i64 %8448, 309828
  %8476 = add i64 %8448, 50
  %8477 = load i64, i64* %6, align 8
  %8478 = add i64 %8477, -8
  %8479 = inttoptr i64 %8478 to i64*
  store i64 %8476, i64* %8479, align 8
  store i64 %8478, i64* %6, align 8
  store i64 %8475, i64* %3, align 8
  %call2_406399 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %8475, %struct.Memory* %MEMORY.81)
  %8480 = load i64, i64* %RBP.i, align 8
  %8481 = add i64 %8480, -10980
  %8482 = load i32, i32* %EAX.i3678, align 4
  %8483 = load i64, i64* %3, align 8
  %8484 = add i64 %8483, 6
  store i64 %8484, i64* %3, align 8
  %8485 = inttoptr i64 %8481 to i32*
  store i32 %8482, i32* %8485, align 4
  %.pre428 = load i64, i64* %3, align 8
  br label %block_.L_4063a4

block_.L_4063a4:                                  ; preds = %block_40636c, %block_.L_40633c
  %8486 = phi i64 [ %8448, %block_.L_40633c ], [ %.pre428, %block_40636c ]
  %MEMORY.115 = phi %struct.Memory* [ %MEMORY.81, %block_.L_40633c ], [ %call2_406399, %block_40636c ]
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RDX.i3821, align 8
  %8487 = load i64, i64* %RBP.i, align 8
  %8488 = add i64 %8487, -8072
  %8489 = add i64 %8486, 10
  store i64 %8489, i64* %3, align 8
  %8490 = inttoptr i64 %8488 to i32*
  %8491 = load i32, i32* %8490, align 4
  %8492 = zext i32 %8491 to i64
  store i64 %8492, i64* %RDI.i3360, align 8
  %8493 = add i64 %8487, -20
  %8494 = add i64 %8486, 13
  store i64 %8494, i64* %3, align 8
  %8495 = inttoptr i64 %8493 to i32*
  %8496 = load i32, i32* %8495, align 4
  %8497 = zext i32 %8496 to i64
  store i64 %8497, i64* %RSI.i3112.pre-phi, align 8
  %8498 = add i64 %8486, 36444
  %8499 = add i64 %8486, 18
  %8500 = load i64, i64* %6, align 8
  %8501 = add i64 %8500, -8
  %8502 = inttoptr i64 %8501 to i64*
  store i64 %8499, i64* %8502, align 8
  store i64 %8501, i64* %6, align 8
  store i64 %8498, i64* %3, align 8
  %call2_4063b1 = tail call %struct.Memory* @sub_40f200.is_ko(%struct.State* nonnull %0, i64 %8498, %struct.Memory* %MEMORY.115)
  %8503 = load i32, i32* %EAX.i3678, align 4
  %8504 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %8505 = and i32 %8503, 255
  %8506 = tail call i32 @llvm.ctpop.i32(i32 %8505)
  %8507 = trunc i32 %8506 to i8
  %8508 = and i8 %8507, 1
  %8509 = xor i8 %8508, 1
  store i8 %8509, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8510 = icmp eq i32 %8503, 0
  %8511 = zext i1 %8510 to i8
  store i8 %8511, i8* %30, align 1
  %8512 = lshr i32 %8503, 31
  %8513 = trunc i32 %8512 to i8
  store i8 %8513, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v631 = select i1 %8510, i64 62, i64 9
  %8514 = add i64 %8504, %.v631
  store i64 %8514, i64* %3, align 8
  br i1 %8510, label %block_.L_4063f9, label %block_4063bf

block_4063bf:                                     ; preds = %block_.L_4063a4
  store i64 2, i64* %RAX.i2528, align 8
  %8515 = load i64, i64* %RBP.i, align 8
  %8516 = add i64 %8515, -8072
  %8517 = add i64 %8514, 12
  store i64 %8517, i64* %3, align 8
  %8518 = inttoptr i64 %8516 to i32*
  %8519 = load i32, i32* %8518, align 4
  %8520 = sext i32 %8519 to i64
  store i64 %8520, i64* %RCX.i3786, align 8
  %8521 = shl nsw i64 %8520, 2
  %8522 = add i64 %8515, -3248
  %8523 = add i64 %8522, %8521
  %8524 = add i64 %8514, 19
  store i64 %8524, i64* %3, align 8
  %8525 = inttoptr i64 %8523 to i32*
  %8526 = load i32, i32* %8525, align 4
  %8527 = add i32 %8526, 1
  %8528 = zext i32 %8527 to i64
  store i64 %8528, i64* %RDX.i3821, align 8
  %8529 = icmp eq i32 %8526, -1
  %8530 = icmp eq i32 %8527, 0
  %8531 = or i1 %8529, %8530
  %8532 = zext i1 %8531 to i8
  store i8 %8532, i8* %14, align 1
  %8533 = and i32 %8527, 255
  %8534 = tail call i32 @llvm.ctpop.i32(i32 %8533)
  %8535 = trunc i32 %8534 to i8
  %8536 = and i8 %8535, 1
  %8537 = xor i8 %8536, 1
  store i8 %8537, i8* %21, align 1
  %8538 = xor i32 %8527, %8526
  %8539 = lshr i32 %8538, 4
  %8540 = trunc i32 %8539 to i8
  %8541 = and i8 %8540, 1
  store i8 %8541, i8* %27, align 1
  %8542 = zext i1 %8530 to i8
  store i8 %8542, i8* %30, align 1
  %8543 = lshr i32 %8527, 31
  %8544 = trunc i32 %8543 to i8
  store i8 %8544, i8* %33, align 1
  %8545 = lshr i32 %8526, 31
  %8546 = xor i32 %8543, %8545
  %8547 = add nuw nsw i32 %8546, %8543
  %8548 = icmp eq i32 %8547, 2
  %8549 = zext i1 %8548 to i8
  store i8 %8549, i8* %39, align 1
  %8550 = add i64 %8515, -10984
  %8551 = add i64 %8514, 28
  store i64 %8551, i64* %3, align 8
  %8552 = inttoptr i64 %8550 to i32*
  store i32 2, i32* %8552, align 4
  %8553 = load i32, i32* %EDX.i3077, align 4
  %8554 = zext i32 %8553 to i64
  %8555 = load i64, i64* %3, align 8
  store i64 %8554, i64* %RAX.i2528, align 8
  %8556 = sext i32 %8553 to i64
  %8557 = lshr i64 %8556, 32
  store i64 %8557, i64* %1956, align 8
  %8558 = load i64, i64* %RBP.i, align 8
  %8559 = add i64 %8558, -10984
  %8560 = add i64 %8555, 9
  store i64 %8560, i64* %3, align 8
  %8561 = inttoptr i64 %8559 to i32*
  %8562 = load i32, i32* %8561, align 4
  %8563 = zext i32 %8562 to i64
  store i64 %8563, i64* %RSI.i3112.pre-phi, align 8
  %8564 = add i64 %8555, 11
  store i64 %8564, i64* %3, align 8
  %8565 = sext i32 %8562 to i64
  %8566 = shl nuw i64 %8557, 32
  %8567 = or i64 %8566, %8554
  %8568 = sdiv i64 %8567, %8565
  %8569 = shl i64 %8568, 32
  %8570 = ashr exact i64 %8569, 32
  %8571 = icmp eq i64 %8568, %8570
  br i1 %8571, label %8574, label %8572

; <label>:8572:                                   ; preds = %block_4063bf
  %8573 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8564, %struct.Memory* %call2_4063b1)
  %.pre429 = load i64, i64* %RBP.i, align 8
  %.pre430 = load i64, i64* %3, align 8
  %.pre431 = load i32, i32* %EAX.i3678, align 4
  br label %routine_idivl__esi.exit

; <label>:8574:                                   ; preds = %block_4063bf
  %8575 = srem i64 %8567, %8565
  %8576 = and i64 %8568, 4294967295
  store i64 %8576, i64* %RAX.i2528, align 8
  %8577 = and i64 %8575, 4294967295
  store i64 %8577, i64* %RDX.i3821, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8578 = trunc i64 %8568 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %8574, %8572
  %8579 = phi i32 [ %.pre431, %8572 ], [ %8578, %8574 ]
  %8580 = phi i64 [ %.pre430, %8572 ], [ %8564, %8574 ]
  %8581 = phi i64 [ %.pre429, %8572 ], [ %8558, %8574 ]
  %8582 = phi %struct.Memory* [ %8573, %8572 ], [ %call2_4063b1, %8574 ]
  %8583 = add i64 %8581, -8072
  %8584 = add i64 %8580, 7
  store i64 %8584, i64* %3, align 8
  %8585 = inttoptr i64 %8583 to i32*
  %8586 = load i32, i32* %8585, align 4
  %8587 = sext i32 %8586 to i64
  store i64 %8587, i64* %RCX.i3786, align 8
  %8588 = shl nsw i64 %8587, 2
  %8589 = add i64 %8581, -3248
  %8590 = add i64 %8589, %8588
  %8591 = add i64 %8580, 14
  store i64 %8591, i64* %3, align 8
  %8592 = inttoptr i64 %8590 to i32*
  store i32 %8579, i32* %8592, align 4
  %.pre449 = load i64, i64* %3, align 8
  br label %block_.L_4063f9

block_.L_4063f9:                                  ; preds = %block_40615c, %block_405b25, %block_405b95, %block_.L_4063a4, %routine_idivl__esi.exit, %block_.L_406135, %block_406142, %block_40614f
  %8593 = phi i64 [ %7704, %block_40615c ], [ %7683, %block_40614f ], [ %7669, %block_406142 ], [ %7645, %block_.L_406135 ], [ %.pre449, %routine_idivl__esi.exit ], [ %8514, %block_.L_4063a4 ], [ %5607, %block_405b95 ], [ %5574, %block_405b25 ]
  %.sink252 = phi i64 [ 648, %block_40615c ], [ 648, %block_40614f ], [ 648, %block_406142 ], [ 648, %block_.L_406135 ], [ 5, %routine_idivl__esi.exit ], [ 5, %block_.L_4063a4 ], [ 2127, %block_405b95 ], [ 2127, %block_405b25 ]
  %MEMORY.117 = phi %struct.Memory* [ %MEMORY.81, %block_40615c ], [ %MEMORY.81, %block_40614f ], [ %MEMORY.81, %block_406142 ], [ %MEMORY.81, %block_.L_406135 ], [ %8582, %routine_idivl__esi.exit ], [ %call2_4063b1, %block_.L_4063a4 ], [ %MEMORY.79, %block_405b95 ], [ %MEMORY.79, %block_405b25 ]
  %8594 = add i64 %8593, %.sink252
  %8595 = load i64, i64* %RBP.i, align 8
  %8596 = add i64 %8595, -8072
  %8597 = add i64 %8594, 6
  store i64 %8597, i64* %3, align 8
  %8598 = inttoptr i64 %8596 to i32*
  %8599 = load i32, i32* %8598, align 4
  %8600 = add i32 %8599, 1
  %8601 = zext i32 %8600 to i64
  store i64 %8601, i64* %RAX.i2528, align 8
  %8602 = icmp eq i32 %8599, -1
  %8603 = icmp eq i32 %8600, 0
  %8604 = or i1 %8602, %8603
  %8605 = zext i1 %8604 to i8
  store i8 %8605, i8* %14, align 1
  %8606 = and i32 %8600, 255
  %8607 = tail call i32 @llvm.ctpop.i32(i32 %8606)
  %8608 = trunc i32 %8607 to i8
  %8609 = and i8 %8608, 1
  %8610 = xor i8 %8609, 1
  store i8 %8610, i8* %21, align 1
  %8611 = xor i32 %8600, %8599
  %8612 = lshr i32 %8611, 4
  %8613 = trunc i32 %8612 to i8
  %8614 = and i8 %8613, 1
  store i8 %8614, i8* %27, align 1
  %8615 = zext i1 %8603 to i8
  store i8 %8615, i8* %30, align 1
  %8616 = lshr i32 %8600, 31
  %8617 = trunc i32 %8616 to i8
  store i8 %8617, i8* %33, align 1
  %8618 = lshr i32 %8599, 31
  %8619 = xor i32 %8616, %8618
  %8620 = add nuw nsw i32 %8619, %8616
  %8621 = icmp eq i32 %8620, 2
  %8622 = zext i1 %8621 to i8
  store i8 %8622, i8* %39, align 1
  %8623 = add i64 %8594, 15
  store i64 %8623, i64* %3, align 8
  store i32 %8600, i32* %8598, align 4
  %8624 = load i64, i64* %3, align 8
  %8625 = add i64 %8624, -2291
  store i64 %8625, i64* %3, align 8
  br label %block_.L_405b15

block_.L_40640d:                                  ; preds = %block_.L_405b15
  %8626 = add i64 %5509, 5
  %8627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %CL.i754 = bitcast %union.anon* %62 to i8*
  br label %block_.L_406412

block_.L_406412:                                  ; preds = %block_.L_406943, %block_.L_40640d
  %8628 = phi i64 [ %5480, %block_.L_40640d ], [ %.pre383, %block_.L_406943 ]
  %storemerge238 = phi i64 [ %8626, %block_.L_40640d ], [ %10171, %block_.L_406943 ]
  %MEMORY.118 = phi %struct.Memory* [ %MEMORY.79, %block_.L_40640d ], [ %MEMORY.137, %block_.L_406943 ]
  %8629 = add i64 %8628, -8076
  %8630 = add i64 %storemerge238, 10
  store i64 %8630, i64* %3, align 8
  %8631 = inttoptr i64 %8629 to i32*
  store i32 0, i32* %8631, align 4
  %8632 = load i64, i64* %RBP.i, align 8
  %8633 = add i64 %8632, -8068
  %8634 = load i64, i64* %3, align 8
  %8635 = add i64 %8634, 10
  store i64 %8635, i64* %3, align 8
  %8636 = inttoptr i64 %8633 to i32*
  store i32 0, i32* %8636, align 4
  %8637 = load i64, i64* %RBP.i, align 8
  %8638 = add i64 %8637, -8072
  %8639 = load i64, i64* %3, align 8
  %8640 = add i64 %8639, 10
  store i64 %8640, i64* %3, align 8
  %8641 = inttoptr i64 %8638 to i32*
  store i32 21, i32* %8641, align 4
  %.pre384 = load i64, i64* %3, align 8
  br label %block_.L_406430

block_.L_406430:                                  ; preds = %block_.L_406492, %block_.L_406412
  %8642 = phi i64 [ %8792, %block_.L_406492 ], [ %.pre384, %block_.L_406412 ]
  %8643 = load i64, i64* %RBP.i, align 8
  %8644 = add i64 %8643, -8072
  %8645 = add i64 %8642, 10
  store i64 %8645, i64* %3, align 8
  %8646 = inttoptr i64 %8644 to i32*
  %8647 = load i32, i32* %8646, align 4
  %8648 = add i32 %8647, -400
  %8649 = icmp ult i32 %8647, 400
  %8650 = zext i1 %8649 to i8
  store i8 %8650, i8* %14, align 1
  %8651 = and i32 %8648, 255
  %8652 = tail call i32 @llvm.ctpop.i32(i32 %8651)
  %8653 = trunc i32 %8652 to i8
  %8654 = and i8 %8653, 1
  %8655 = xor i8 %8654, 1
  store i8 %8655, i8* %21, align 1
  %8656 = xor i32 %8647, 16
  %8657 = xor i32 %8656, %8648
  %8658 = lshr i32 %8657, 4
  %8659 = trunc i32 %8658 to i8
  %8660 = and i8 %8659, 1
  store i8 %8660, i8* %27, align 1
  %8661 = icmp eq i32 %8648, 0
  %8662 = zext i1 %8661 to i8
  store i8 %8662, i8* %30, align 1
  %8663 = lshr i32 %8648, 31
  %8664 = trunc i32 %8663 to i8
  store i8 %8664, i8* %33, align 1
  %8665 = lshr i32 %8647, 31
  %8666 = xor i32 %8663, %8665
  %8667 = add nuw nsw i32 %8666, %8665
  %8668 = icmp eq i32 %8667, 2
  %8669 = zext i1 %8668 to i8
  store i8 %8669, i8* %39, align 1
  %8670 = icmp ne i8 %8664, 0
  %8671 = xor i1 %8670, %8668
  %.v505 = select i1 %8671, i64 16, i64 123
  %8672 = add i64 %8642, %.v505
  store i64 %8672, i64* %3, align 8
  br i1 %8671, label %block_406440, label %block_.L_4064ab

block_406440:                                     ; preds = %block_.L_406430
  %8673 = add i64 %8672, 7
  store i64 %8673, i64* %3, align 8
  %8674 = load i32, i32* %8646, align 4
  %8675 = sext i32 %8674 to i64
  store i64 %8675, i64* %RAX.i2528, align 8
  %8676 = add nsw i64 %8675, 12099168
  %8677 = add i64 %8672, 15
  store i64 %8677, i64* %3, align 8
  %8678 = inttoptr i64 %8676 to i8*
  %8679 = load i8, i8* %8678, align 1
  %8680 = zext i8 %8679 to i64
  store i64 %8680, i64* %RCX.i3786, align 8
  %8681 = zext i8 %8679 to i32
  %8682 = add nsw i32 %8681, -3
  %8683 = icmp ult i8 %8679, 3
  %8684 = zext i1 %8683 to i8
  store i8 %8684, i8* %14, align 1
  %8685 = and i32 %8682, 255
  %8686 = tail call i32 @llvm.ctpop.i32(i32 %8685)
  %8687 = trunc i32 %8686 to i8
  %8688 = and i8 %8687, 1
  %8689 = xor i8 %8688, 1
  store i8 %8689, i8* %21, align 1
  %8690 = xor i32 %8682, %8681
  %8691 = lshr i32 %8690, 4
  %8692 = trunc i32 %8691 to i8
  %8693 = and i8 %8692, 1
  store i8 %8693, i8* %27, align 1
  %8694 = icmp eq i32 %8682, 0
  %8695 = zext i1 %8694 to i8
  store i8 %8695, i8* %30, align 1
  %8696 = lshr i32 %8682, 31
  %8697 = trunc i32 %8696 to i8
  store i8 %8697, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v616 = select i1 %8694, i64 82, i64 24
  %8698 = add i64 %8672, %.v616
  store i64 %8698, i64* %3, align 8
  br i1 %8694, label %block_.L_406492, label %block_406458

block_406458:                                     ; preds = %block_406440
  %8699 = add i64 %8698, 7
  store i64 %8699, i64* %3, align 8
  %8700 = load i32, i32* %8646, align 4
  %8701 = sext i32 %8700 to i64
  store i64 %8701, i64* %RAX.i2528, align 8
  %8702 = shl nsw i64 %8701, 2
  %8703 = add i64 %8643, -3248
  %8704 = add i64 %8703, %8702
  %8705 = add i64 %8698, 14
  store i64 %8705, i64* %3, align 8
  %8706 = inttoptr i64 %8704 to i32*
  %8707 = load i32, i32* %8706, align 4
  %8708 = zext i32 %8707 to i64
  store i64 %8708, i64* %RCX.i3786, align 8
  %8709 = add i64 %8643, -8076
  %8710 = add i64 %8698, 20
  store i64 %8710, i64* %3, align 8
  %8711 = inttoptr i64 %8709 to i32*
  %8712 = load i32, i32* %8711, align 4
  %8713 = sub i32 %8707, %8712
  %8714 = icmp ult i32 %8707, %8712
  %8715 = zext i1 %8714 to i8
  store i8 %8715, i8* %14, align 1
  %8716 = and i32 %8713, 255
  %8717 = tail call i32 @llvm.ctpop.i32(i32 %8716)
  %8718 = trunc i32 %8717 to i8
  %8719 = and i8 %8718, 1
  %8720 = xor i8 %8719, 1
  store i8 %8720, i8* %21, align 1
  %8721 = xor i32 %8712, %8707
  %8722 = xor i32 %8721, %8713
  %8723 = lshr i32 %8722, 4
  %8724 = trunc i32 %8723 to i8
  %8725 = and i8 %8724, 1
  store i8 %8725, i8* %27, align 1
  %8726 = icmp eq i32 %8713, 0
  %8727 = zext i1 %8726 to i8
  store i8 %8727, i8* %30, align 1
  %8728 = lshr i32 %8713, 31
  %8729 = trunc i32 %8728 to i8
  store i8 %8729, i8* %33, align 1
  %8730 = lshr i32 %8707, 31
  %8731 = lshr i32 %8712, 31
  %8732 = xor i32 %8731, %8730
  %8733 = xor i32 %8728, %8730
  %8734 = add nuw nsw i32 %8733, %8732
  %8735 = icmp eq i32 %8734, 2
  %8736 = zext i1 %8735 to i8
  store i8 %8736, i8* %39, align 1
  %8737 = icmp ne i8 %8729, 0
  %8738 = xor i1 %8737, %8735
  %8739 = or i1 %8726, %8738
  %.v617 = select i1 %8739, i64 58, i64 26
  %8740 = add i64 %8698, %.v617
  store i64 %8740, i64* %3, align 8
  br i1 %8739, label %block_.L_406492, label %block_406472

block_406472:                                     ; preds = %block_406458
  %8741 = add i64 %8740, 7
  store i64 %8741, i64* %3, align 8
  %8742 = load i32, i32* %8646, align 4
  %8743 = sext i32 %8742 to i64
  store i64 %8743, i64* %RAX.i2528, align 8
  %8744 = shl nsw i64 %8743, 2
  %8745 = add i64 %8703, %8744
  %8746 = add i64 %8740, 14
  store i64 %8746, i64* %3, align 8
  %8747 = inttoptr i64 %8745 to i32*
  %8748 = load i32, i32* %8747, align 4
  %8749 = zext i32 %8748 to i64
  store i64 %8749, i64* %RCX.i3786, align 8
  %8750 = add i64 %8740, 20
  store i64 %8750, i64* %3, align 8
  store i32 %8748, i32* %8711, align 4
  %8751 = load i64, i64* %RBP.i, align 8
  %8752 = add i64 %8751, -8072
  %8753 = load i64, i64* %3, align 8
  %8754 = add i64 %8753, 6
  store i64 %8754, i64* %3, align 8
  %8755 = inttoptr i64 %8752 to i32*
  %8756 = load i32, i32* %8755, align 4
  %8757 = zext i32 %8756 to i64
  store i64 %8757, i64* %RCX.i3786, align 8
  %8758 = add i64 %8751, -8068
  %8759 = add i64 %8753, 12
  store i64 %8759, i64* %3, align 8
  %8760 = inttoptr i64 %8758 to i32*
  store i32 %8756, i32* %8760, align 4
  %.pre412 = load i64, i64* %3, align 8
  %.pre413 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406492

block_.L_406492:                                  ; preds = %block_406472, %block_406458, %block_406440
  %8761 = phi i64 [ %.pre413, %block_406472 ], [ %8643, %block_406458 ], [ %8643, %block_406440 ]
  %8762 = phi i64 [ %.pre412, %block_406472 ], [ %8740, %block_406458 ], [ %8698, %block_406440 ]
  %8763 = add i64 %8761, -8072
  %8764 = add i64 %8762, 11
  store i64 %8764, i64* %3, align 8
  %8765 = inttoptr i64 %8763 to i32*
  %8766 = load i32, i32* %8765, align 4
  %8767 = add i32 %8766, 1
  %8768 = zext i32 %8767 to i64
  store i64 %8768, i64* %RAX.i2528, align 8
  %8769 = icmp eq i32 %8766, -1
  %8770 = icmp eq i32 %8767, 0
  %8771 = or i1 %8769, %8770
  %8772 = zext i1 %8771 to i8
  store i8 %8772, i8* %14, align 1
  %8773 = and i32 %8767, 255
  %8774 = tail call i32 @llvm.ctpop.i32(i32 %8773)
  %8775 = trunc i32 %8774 to i8
  %8776 = and i8 %8775, 1
  %8777 = xor i8 %8776, 1
  store i8 %8777, i8* %21, align 1
  %8778 = xor i32 %8767, %8766
  %8779 = lshr i32 %8778, 4
  %8780 = trunc i32 %8779 to i8
  %8781 = and i8 %8780, 1
  store i8 %8781, i8* %27, align 1
  %8782 = zext i1 %8770 to i8
  store i8 %8782, i8* %30, align 1
  %8783 = lshr i32 %8767, 31
  %8784 = trunc i32 %8783 to i8
  store i8 %8784, i8* %33, align 1
  %8785 = lshr i32 %8766, 31
  %8786 = xor i32 %8783, %8785
  %8787 = add nuw nsw i32 %8786, %8783
  %8788 = icmp eq i32 %8787, 2
  %8789 = zext i1 %8788 to i8
  store i8 %8789, i8* %39, align 1
  %8790 = add i64 %8762, 20
  store i64 %8790, i64* %3, align 8
  store i32 %8767, i32* %8765, align 4
  %8791 = load i64, i64* %3, align 8
  %8792 = add i64 %8791, -118
  store i64 %8792, i64* %3, align 8
  br label %block_.L_406430

block_.L_4064ab:                                  ; preds = %block_.L_406430
  %8793 = add i64 %8643, -8068
  %8794 = add i64 %8672, 7
  store i64 %8794, i64* %3, align 8
  %8795 = inttoptr i64 %8793 to i32*
  %8796 = load i32, i32* %8795, align 4
  store i8 0, i8* %14, align 1
  %8797 = and i32 %8796, 255
  %8798 = tail call i32 @llvm.ctpop.i32(i32 %8797)
  %8799 = trunc i32 %8798 to i8
  %8800 = and i8 %8799, 1
  %8801 = xor i8 %8800, 1
  store i8 %8801, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8802 = icmp eq i32 %8796, 0
  %8803 = zext i1 %8802 to i8
  store i8 %8803, i8* %30, align 1
  %8804 = lshr i32 %8796, 31
  %8805 = trunc i32 %8804 to i8
  store i8 %8805, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v504 = select i1 %8802, i64 13, i64 18
  %8806 = add i64 %8672, %.v504
  store i64 %8806, i64* %3, align 8
  br i1 %8802, label %block_4064b8, label %block_.L_4064bd

block_4064b8:                                     ; preds = %block_.L_4064ab
  %8807 = add i64 %8806, 1178
  store i64 %8807, i64* %3, align 8
  store i32 21, i32* %8646, align 4
  %.pre385 = load i64, i64* %3, align 8
  br label %block_.L_406952

block_.L_4064bd:                                  ; preds = %block_.L_4064ab
  %8808 = add i64 %8806, 7
  store i64 %8808, i64* %3, align 8
  %8809 = load i32, i32* %8795, align 4
  %8810 = sext i32 %8809 to i64
  store i64 %8810, i64* %RAX.i2528, align 8
  %8811 = shl nsw i64 %8810, 2
  %8812 = add i64 %8643, -8048
  %8813 = add i64 %8812, %8811
  %8814 = add i64 %8806, 14
  store i64 %8814, i64* %3, align 8
  %8815 = inttoptr i64 %8813 to i32*
  %8816 = load i32, i32* %8815, align 4
  %8817 = zext i32 %8816 to i64
  store i64 %8817, i64* %RCX.i3786, align 8
  %8818 = add i64 %8643, -10216
  %8819 = add i64 %8806, 20
  store i64 %8819, i64* %3, align 8
  %8820 = inttoptr i64 %8818 to i32*
  store i32 %8816, i32* %8820, align 4
  %8821 = load i64, i64* %RBP.i, align 8
  %8822 = add i64 %8821, -8068
  %8823 = load i64, i64* %3, align 8
  %8824 = add i64 %8823, 6
  store i64 %8824, i64* %3, align 8
  %8825 = inttoptr i64 %8822 to i32*
  %8826 = load i32, i32* %8825, align 4
  %8827 = zext i32 %8826 to i64
  store i64 %8827, i64* %RDI.i3360, align 8
  %8828 = add i64 %8821, -20
  %8829 = add i64 %8823, 9
  store i64 %8829, i64* %3, align 8
  %8830 = inttoptr i64 %8828 to i32*
  %8831 = load i32, i32* %8830, align 4
  %8832 = zext i32 %8831 to i64
  store i64 %8832, i64* %RSI.i3112.pre-phi, align 8
  %8833 = add i64 %8823, 34719
  %8834 = add i64 %8823, 14
  %8835 = load i64, i64* %6, align 8
  %8836 = add i64 %8835, -8
  %8837 = inttoptr i64 %8836 to i64*
  store i64 %8834, i64* %8837, align 8
  store i64 %8836, i64* %6, align 8
  store i64 %8833, i64* %3, align 8
  %call2_4064da = tail call %struct.Memory* @sub_40ec70.is_illegal_ko_capture(%struct.State* nonnull %0, i64 %8833, %struct.Memory* %MEMORY.118)
  %8838 = load i32, i32* %EAX.i3678, align 4
  %8839 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %8840 = and i32 %8838, 255
  %8841 = tail call i32 @llvm.ctpop.i32(i32 %8840)
  %8842 = trunc i32 %8841 to i8
  %8843 = and i8 %8842, 1
  %8844 = xor i8 %8843, 1
  store i8 %8844, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8845 = icmp eq i32 %8838, 0
  %8846 = zext i1 %8845 to i8
  store i8 %8846, i8* %30, align 1
  %8847 = lshr i32 %8838, 31
  %8848 = trunc i32 %8847 to i8
  store i8 %8848, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v556 = select i1 %8845, i64 9, i64 198
  %8849 = add i64 %8839, %.v556
  store i64 %8849, i64* %3, align 8
  br i1 %8845, label %block_4064e8, label %block_.L_4065a5

block_4064e8:                                     ; preds = %block_.L_4064bd
  %8850 = load i64, i64* %RBP.i, align 8
  %8851 = add i64 %8850, -8068
  %8852 = add i64 %8849, 6
  store i64 %8852, i64* %3, align 8
  %8853 = inttoptr i64 %8851 to i32*
  %8854 = load i32, i32* %8853, align 4
  %8855 = zext i32 %8854 to i64
  store i64 %8855, i64* %RDI.i3360, align 8
  %8856 = add i64 %8850, -20
  %8857 = add i64 %8849, 9
  store i64 %8857, i64* %3, align 8
  %8858 = inttoptr i64 %8856 to i32*
  %8859 = load i32, i32* %8858, align 4
  %8860 = zext i32 %8859 to i64
  store i64 %8860, i64* %RSI.i3112.pre-phi, align 8
  %8861 = add i64 %8849, 415560
  %8862 = add i64 %8849, 14
  %8863 = load i64, i64* %6, align 8
  %8864 = add i64 %8863, -8
  %8865 = inttoptr i64 %8864 to i64*
  store i64 %8862, i64* %8865, align 8
  store i64 %8864, i64* %6, align 8
  store i64 %8861, i64* %3, align 8
  %call2_4064f1 = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %8861, %struct.Memory* %MEMORY.118)
  %8866 = load i32, i32* %EAX.i3678, align 4
  %8867 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %8868 = and i32 %8866, 255
  %8869 = tail call i32 @llvm.ctpop.i32(i32 %8868)
  %8870 = trunc i32 %8869 to i8
  %8871 = and i8 %8870, 1
  %8872 = xor i8 %8871, 1
  store i8 %8872, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8873 = icmp eq i32 %8866, 0
  %8874 = zext i1 %8873 to i8
  store i8 %8874, i8* %30, align 1
  %8875 = lshr i32 %8866, 31
  %8876 = trunc i32 %8875 to i8
  store i8 %8876, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v557 = select i1 %8873, i64 175, i64 9
  %8877 = add i64 %8867, %.v557
  store i64 %8877, i64* %3, align 8
  br i1 %8873, label %block_.L_4065a5, label %block_4064ff

block_4064ff:                                     ; preds = %block_4064e8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %8878 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %8878, i64* %RCX.i3786, align 8
  %8879 = load i64, i64* %RBP.i, align 8
  %8880 = add i64 %8879, -10216
  %8881 = add i64 %8877, 25
  store i64 %8881, i64* %3, align 8
  %8882 = inttoptr i64 %8880 to i32*
  %8883 = load i32, i32* %8882, align 4
  %8884 = sext i32 %8883 to i64
  %8885 = mul nsw i64 %8884, 76
  store i64 %8885, i64* %RDX.i3821, align 8
  %8886 = lshr i64 %8885, 63
  %8887 = add i64 %8885, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %8887, i64* %RAX.i2528, align 8
  %8888 = icmp ult i64 %8887, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8889 = icmp ult i64 %8887, %8885
  %8890 = or i1 %8888, %8889
  %8891 = zext i1 %8890 to i8
  store i8 %8891, i8* %14, align 1
  %8892 = trunc i64 %8887 to i32
  %8893 = and i32 %8892, 252
  %8894 = tail call i32 @llvm.ctpop.i32(i32 %8893)
  %8895 = trunc i32 %8894 to i8
  %8896 = and i8 %8895, 1
  %8897 = xor i8 %8896, 1
  store i8 %8897, i8* %21, align 1
  %8898 = xor i64 %8885, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8899 = xor i64 %8898, %8887
  %8900 = lshr i64 %8899, 4
  %8901 = trunc i64 %8900 to i8
  %8902 = and i8 %8901, 1
  store i8 %8902, i8* %27, align 1
  %8903 = icmp eq i64 %8887, 0
  %8904 = zext i1 %8903 to i8
  store i8 %8904, i8* %30, align 1
  %8905 = lshr i64 %8887, 63
  %8906 = trunc i64 %8905 to i8
  store i8 %8906, i8* %33, align 1
  %8907 = xor i64 %8905, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %8908 = xor i64 %8905, %8886
  %8909 = add nuw nsw i64 %8907, %8908
  %8910 = icmp eq i64 %8909, 2
  %8911 = zext i1 %8910 to i8
  store i8 %8911, i8* %39, align 1
  %8912 = add i64 %8885, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %8913 = add i64 %8877, 36
  store i64 %8913, i64* %3, align 8
  %8914 = inttoptr i64 %8912 to i32*
  %8915 = load i32, i32* %8914, align 4
  %8916 = sext i32 %8915 to i64
  %8917 = sext i32 %8915 to i128
  %8918 = and i128 %8917, -18446744073709551616
  %8919 = zext i64 %8916 to i128
  %8920 = or i128 %8918, %8919
  %8921 = mul nsw i128 %8920, 104
  %8922 = trunc i128 %8921 to i64
  store i64 %8922, i64* %RAX.i2528, align 8
  %8923 = lshr i64 %8922, 63
  %8924 = load i64, i64* %RCX.i3786, align 8
  %8925 = add i64 %8922, %8924
  store i64 %8925, i64* %RCX.i3786, align 8
  %8926 = icmp ult i64 %8925, %8924
  %8927 = icmp ult i64 %8925, %8922
  %8928 = or i1 %8926, %8927
  %8929 = zext i1 %8928 to i8
  store i8 %8929, i8* %14, align 1
  %8930 = trunc i64 %8925 to i32
  %8931 = and i32 %8930, 255
  %8932 = tail call i32 @llvm.ctpop.i32(i32 %8931)
  %8933 = trunc i32 %8932 to i8
  %8934 = and i8 %8933, 1
  %8935 = xor i8 %8934, 1
  store i8 %8935, i8* %21, align 1
  %8936 = xor i64 %8922, %8924
  %8937 = xor i64 %8936, %8925
  %8938 = lshr i64 %8937, 4
  %8939 = trunc i64 %8938 to i8
  %8940 = and i8 %8939, 1
  store i8 %8940, i8* %27, align 1
  %8941 = icmp eq i64 %8925, 0
  %8942 = zext i1 %8941 to i8
  store i8 %8942, i8* %30, align 1
  %8943 = lshr i64 %8925, 63
  %8944 = trunc i64 %8943 to i8
  store i8 %8944, i8* %33, align 1
  %8945 = lshr i64 %8924, 63
  %8946 = xor i64 %8943, %8945
  %8947 = xor i64 %8943, %8923
  %8948 = add nuw nsw i64 %8946, %8947
  %8949 = icmp eq i64 %8948, 2
  %8950 = zext i1 %8949 to i8
  store i8 %8950, i8* %39, align 1
  %8951 = add i64 %8925, 60
  %8952 = add i64 %8877, 47
  store i64 %8952, i64* %3, align 8
  %8953 = inttoptr i64 %8951 to i32*
  %8954 = load i32, i32* %8953, align 4
  %8955 = add i32 %8954, -9
  %8956 = icmp ult i32 %8954, 9
  %8957 = zext i1 %8956 to i8
  store i8 %8957, i8* %14, align 1
  %8958 = and i32 %8955, 255
  %8959 = tail call i32 @llvm.ctpop.i32(i32 %8958)
  %8960 = trunc i32 %8959 to i8
  %8961 = and i8 %8960, 1
  %8962 = xor i8 %8961, 1
  store i8 %8962, i8* %21, align 1
  %8963 = xor i32 %8955, %8954
  %8964 = lshr i32 %8963, 4
  %8965 = trunc i32 %8964 to i8
  %8966 = and i8 %8965, 1
  store i8 %8966, i8* %27, align 1
  %8967 = icmp eq i32 %8955, 0
  %8968 = zext i1 %8967 to i8
  store i8 %8968, i8* %30, align 1
  %8969 = lshr i32 %8955, 31
  %8970 = trunc i32 %8969 to i8
  store i8 %8970, i8* %33, align 1
  %8971 = lshr i32 %8954, 31
  %8972 = xor i32 %8969, %8971
  %8973 = add nuw nsw i32 %8972, %8971
  %8974 = icmp eq i32 %8973, 2
  %8975 = zext i1 %8974 to i8
  store i8 %8975, i8* %39, align 1
  %.v558 = select i1 %8967, i64 136, i64 53
  %8976 = add i64 %8877, %.v558
  store i64 %8976, i64* %3, align 8
  %8977 = trunc i128 %8921 to i64
  br i1 %8967, label %block_.L_406587, label %block_406534

block_406534:                                     ; preds = %block_4064ff
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %8978 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %8978, i64* %RCX.i3786, align 8
  %8979 = load i64, i64* %RBP.i, align 8
  %8980 = add i64 %8979, -10216
  %8981 = add i64 %8976, 25
  store i64 %8981, i64* %3, align 8
  %8982 = inttoptr i64 %8980 to i32*
  %8983 = load i32, i32* %8982, align 4
  %8984 = sext i32 %8983 to i64
  %8985 = mul nsw i64 %8984, 76
  store i64 %8985, i64* %RDX.i3821, align 8
  %8986 = lshr i64 %8985, 63
  %8987 = add i64 %8985, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %8987, i64* %RAX.i2528, align 8
  %8988 = icmp ult i64 %8987, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8989 = icmp ult i64 %8987, %8985
  %8990 = or i1 %8988, %8989
  %8991 = zext i1 %8990 to i8
  store i8 %8991, i8* %14, align 1
  %8992 = trunc i64 %8987 to i32
  %8993 = and i32 %8992, 252
  %8994 = tail call i32 @llvm.ctpop.i32(i32 %8993)
  %8995 = trunc i32 %8994 to i8
  %8996 = and i8 %8995, 1
  %8997 = xor i8 %8996, 1
  store i8 %8997, i8* %21, align 1
  %8998 = xor i64 %8985, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8999 = xor i64 %8998, %8987
  %9000 = lshr i64 %8999, 4
  %9001 = trunc i64 %9000 to i8
  %9002 = and i8 %9001, 1
  store i8 %9002, i8* %27, align 1
  %9003 = icmp eq i64 %8987, 0
  %9004 = zext i1 %9003 to i8
  store i8 %9004, i8* %30, align 1
  %9005 = lshr i64 %8987, 63
  %9006 = trunc i64 %9005 to i8
  store i8 %9006, i8* %33, align 1
  %9007 = xor i64 %9005, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %9008 = xor i64 %9005, %8986
  %9009 = add nuw nsw i64 %9007, %9008
  %9010 = icmp eq i64 %9009, 2
  %9011 = zext i1 %9010 to i8
  store i8 %9011, i8* %39, align 1
  %9012 = add i64 %8985, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %9013 = add i64 %8976, 36
  store i64 %9013, i64* %3, align 8
  %9014 = inttoptr i64 %9012 to i32*
  %9015 = load i32, i32* %9014, align 4
  %9016 = sext i32 %9015 to i64
  %9017 = sext i32 %9015 to i128
  %9018 = and i128 %9017, -18446744073709551616
  %9019 = zext i64 %9016 to i128
  %9020 = or i128 %9018, %9019
  %9021 = mul nsw i128 %9020, 104
  %9022 = trunc i128 %9021 to i64
  store i64 %9022, i64* %RAX.i2528, align 8
  %9023 = lshr i64 %9022, 63
  %9024 = load i64, i64* %RCX.i3786, align 8
  %9025 = add i64 %9022, %9024
  store i64 %9025, i64* %RCX.i3786, align 8
  %9026 = icmp ult i64 %9025, %9024
  %9027 = icmp ult i64 %9025, %9022
  %9028 = or i1 %9026, %9027
  %9029 = zext i1 %9028 to i8
  store i8 %9029, i8* %14, align 1
  %9030 = trunc i64 %9025 to i32
  %9031 = and i32 %9030, 255
  %9032 = tail call i32 @llvm.ctpop.i32(i32 %9031)
  %9033 = trunc i32 %9032 to i8
  %9034 = and i8 %9033, 1
  %9035 = xor i8 %9034, 1
  store i8 %9035, i8* %21, align 1
  %9036 = xor i64 %9022, %9024
  %9037 = xor i64 %9036, %9025
  %9038 = lshr i64 %9037, 4
  %9039 = trunc i64 %9038 to i8
  %9040 = and i8 %9039, 1
  store i8 %9040, i8* %27, align 1
  %9041 = icmp eq i64 %9025, 0
  %9042 = zext i1 %9041 to i8
  store i8 %9042, i8* %30, align 1
  %9043 = lshr i64 %9025, 63
  %9044 = trunc i64 %9043 to i8
  store i8 %9044, i8* %33, align 1
  %9045 = lshr i64 %9024, 63
  %9046 = xor i64 %9043, %9045
  %9047 = xor i64 %9043, %9023
  %9048 = add nuw nsw i64 %9046, %9047
  %9049 = icmp eq i64 %9048, 2
  %9050 = zext i1 %9049 to i8
  store i8 %9050, i8* %39, align 1
  %9051 = add i64 %9025, 60
  %9052 = add i64 %8976, 47
  store i64 %9052, i64* %3, align 8
  %9053 = inttoptr i64 %9051 to i32*
  %9054 = load i32, i32* %9053, align 4
  %9055 = add i32 %9054, -8
  %9056 = icmp ult i32 %9054, 8
  %9057 = zext i1 %9056 to i8
  store i8 %9057, i8* %14, align 1
  %9058 = and i32 %9055, 255
  %9059 = tail call i32 @llvm.ctpop.i32(i32 %9058)
  %9060 = trunc i32 %9059 to i8
  %9061 = and i8 %9060, 1
  %9062 = xor i8 %9061, 1
  store i8 %9062, i8* %21, align 1
  %9063 = xor i32 %9055, %9054
  %9064 = lshr i32 %9063, 4
  %9065 = trunc i32 %9064 to i8
  %9066 = and i8 %9065, 1
  store i8 %9066, i8* %27, align 1
  %9067 = icmp eq i32 %9055, 0
  %9068 = zext i1 %9067 to i8
  store i8 %9068, i8* %30, align 1
  %9069 = lshr i32 %9055, 31
  %9070 = trunc i32 %9069 to i8
  store i8 %9070, i8* %33, align 1
  %9071 = lshr i32 %9054, 31
  %9072 = xor i32 %9069, %9071
  %9073 = add nuw nsw i32 %9072, %9071
  %9074 = icmp eq i32 %9073, 2
  %9075 = zext i1 %9074 to i8
  store i8 %9075, i8* %39, align 1
  %.v559 = select i1 %9067, i64 83, i64 53
  %9076 = add i64 %8976, %.v559
  store i64 %9076, i64* %3, align 8
  %9077 = trunc i128 %9021 to i64
  br i1 %9067, label %block_.L_406587, label %block_406569

block_406569:                                     ; preds = %block_406534
  %9078 = trunc i128 %9021 to i64
  %9079 = and i64 %9078, 4294967288
  %9080 = xor i64 %9079, %9022
  %9081 = trunc i64 %9080 to i32
  %9082 = and i64 %9080, 4294967288
  store i64 %9082, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  %9083 = and i32 %9081, 248
  %9084 = tail call i32 @llvm.ctpop.i32(i32 %9083)
  %9085 = trunc i32 %9084 to i8
  %9086 = and i8 %9085, 1
  %9087 = xor i8 %9086, 1
  store i8 %9087, i8* %21, align 1
  %9088 = icmp eq i32 %9081, 0
  %9089 = zext i1 %9088 to i8
  store i8 %9089, i8* %30, align 1
  %9090 = lshr i32 %9081, 31
  %9091 = trunc i32 %9090 to i8
  store i8 %9091, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9092 = and i64 %9080, 4294967288
  store i64 %9092, i64* %RDX.i3821, align 8
  %9093 = load i64, i64* %RBP.i, align 8
  %9094 = add i64 %9093, -8068
  %9095 = add i64 %9076, 10
  store i64 %9095, i64* %3, align 8
  %9096 = inttoptr i64 %9094 to i32*
  %9097 = load i32, i32* %9096, align 4
  %9098 = zext i32 %9097 to i64
  store i64 %9098, i64* %RDI.i3360, align 8
  %9099 = add i64 %9093, -10216
  %9100 = add i64 %9076, 16
  store i64 %9100, i64* %3, align 8
  %9101 = inttoptr i64 %9099 to i32*
  %9102 = load i32, i32* %9101, align 4
  %9103 = zext i32 %9102 to i64
  store i64 %9103, i64* %RSI.i3112.pre-phi, align 8
  %9104 = add i64 %9076, 286295
  %9105 = add i64 %9076, 21
  %9106 = load i64, i64* %6, align 8
  %9107 = add i64 %9106, -8
  %9108 = inttoptr i64 %9107 to i64*
  store i64 %9105, i64* %9108, align 8
  store i64 %9107, i64* %6, align 8
  store i64 %9104, i64* %3, align 8
  %call2_406579 = tail call %struct.Memory* @sub_44c3c0.owl_does_defend(%struct.State* nonnull %0, i64 %9104, %struct.Memory* %MEMORY.118)
  %9109 = load i32, i32* %EAX.i3678, align 4
  %9110 = load i64, i64* %3, align 8
  %9111 = add i32 %9109, -5
  %9112 = icmp ult i32 %9109, 5
  %9113 = zext i1 %9112 to i8
  store i8 %9113, i8* %14, align 1
  %9114 = and i32 %9111, 255
  %9115 = tail call i32 @llvm.ctpop.i32(i32 %9114)
  %9116 = trunc i32 %9115 to i8
  %9117 = and i8 %9116, 1
  %9118 = xor i8 %9117, 1
  store i8 %9118, i8* %21, align 1
  %9119 = xor i32 %9111, %9109
  %9120 = lshr i32 %9119, 4
  %9121 = trunc i32 %9120 to i8
  %9122 = and i8 %9121, 1
  store i8 %9122, i8* %27, align 1
  %9123 = icmp eq i32 %9111, 0
  %9124 = zext i1 %9123 to i8
  store i8 %9124, i8* %30, align 1
  %9125 = lshr i32 %9111, 31
  %9126 = trunc i32 %9125 to i8
  store i8 %9126, i8* %33, align 1
  %9127 = lshr i32 %9109, 31
  %9128 = xor i32 %9125, %9127
  %9129 = add nuw nsw i32 %9128, %9127
  %9130 = icmp eq i32 %9129, 2
  %9131 = zext i1 %9130 to i8
  store i8 %9131, i8* %39, align 1
  %.v560 = select i1 %9123, i64 9, i64 39
  %9132 = add i64 %9110, %.v560
  store i64 %9132, i64* %3, align 8
  br i1 %9123, label %block_406569.block_.L_406587_crit_edge, label %block_.L_4065a5

block_406569.block_.L_406587_crit_edge:           ; preds = %block_406569
  %.pre400 = load i64, i64* %RAX.i2528, align 8
  br label %block_.L_406587

block_.L_406587:                                  ; preds = %block_406569.block_.L_406587_crit_edge, %block_406534, %block_4064ff
  %9133 = phi i64 [ %9132, %block_406569.block_.L_406587_crit_edge ], [ %9076, %block_406534 ], [ %8976, %block_4064ff ]
  %9134 = phi i64 [ %.pre400, %block_406569.block_.L_406587_crit_edge ], [ %9077, %block_406534 ], [ %8977, %block_4064ff ]
  %9135 = phi i64 [ %.pre400, %block_406569.block_.L_406587_crit_edge ], [ %9022, %block_406534 ], [ %8922, %block_4064ff ]
  %9136 = and i64 %9134, 4294967295
  %9137 = xor i64 %9136, %9135
  %9138 = trunc i64 %9137 to i32
  %9139 = and i64 %9137, 4294967295
  store i64 %9139, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  %9140 = and i32 %9138, 255
  %9141 = tail call i32 @llvm.ctpop.i32(i32 %9140)
  %9142 = trunc i32 %9141 to i8
  %9143 = and i8 %9142, 1
  %9144 = xor i8 %9143, 1
  store i8 %9144, i8* %21, align 1
  %9145 = icmp eq i32 %9138, 0
  %9146 = zext i1 %9145 to i8
  store i8 %9146, i8* %30, align 1
  %9147 = lshr i32 %9138, 31
  %9148 = trunc i32 %9147 to i8
  store i8 %9148, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9149 = and i64 %9137, 4294967295
  store i64 %9149, i64* %RCX.i3786, align 8
  %9150 = load i64, i64* %RBP.i, align 8
  %9151 = add i64 %9150, -8068
  %9152 = add i64 %9133, 10
  store i64 %9152, i64* %3, align 8
  %9153 = inttoptr i64 %9151 to i32*
  %9154 = load i32, i32* %9153, align 4
  %9155 = zext i32 %9154 to i64
  store i64 %9155, i64* %RDI.i3360, align 8
  %9156 = add i64 %9150, -20
  %9157 = add i64 %9133, 13
  store i64 %9157, i64* %3, align 8
  %9158 = inttoptr i64 %9156 to i32*
  %9159 = load i32, i32* %9158, align 4
  %9160 = zext i32 %9159 to i64
  store i64 %9160, i64* %RSI.i3112.pre-phi, align 8
  store i64 %9149, i64* %RDX.i3821, align 8
  %9161 = add i64 %9133, 470857
  %9162 = add i64 %9133, 21
  %9163 = load i64, i64* %6, align 8
  %9164 = add i64 %9163, -8
  %9165 = inttoptr i64 %9164 to i64*
  store i64 %9162, i64* %9165, align 8
  store i64 %9164, i64* %6, align 8
  store i64 %9161, i64* %3, align 8
  %call2_406597 = tail call %struct.Memory* @sub_4794d0.confirm_safety(%struct.State* nonnull %0, i64 %9161, %struct.Memory* %MEMORY.118)
  %9166 = load i32, i32* %EAX.i3678, align 4
  %9167 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %9168 = and i32 %9166, 255
  %9169 = tail call i32 @llvm.ctpop.i32(i32 %9168)
  %9170 = trunc i32 %9169 to i8
  %9171 = and i8 %9170, 1
  %9172 = xor i8 %9171, 1
  store i8 %9172, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9173 = icmp eq i32 %9166, 0
  %9174 = zext i1 %9173 to i8
  store i8 %9174, i8* %30, align 1
  %9175 = lshr i32 %9166, 31
  %9176 = trunc i32 %9175 to i8
  store i8 %9176, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v561 = select i1 %9173, i64 9, i64 32
  %9177 = add i64 %9167, %.v561
  store i64 %9177, i64* %3, align 8
  br i1 %9173, label %block_.L_4065a5, label %block_.L_4065bc

block_.L_4065a5:                                  ; preds = %block_.L_406587, %block_406569, %block_.L_4064bd, %block_4064e8
  %9178 = phi i64 [ %9177, %block_.L_406587 ], [ %9132, %block_406569 ], [ %8877, %block_4064e8 ], [ %8849, %block_.L_4064bd ]
  %9179 = load i64, i64* %RBP.i, align 8
  %9180 = add i64 %9179, -8068
  %9181 = add i64 %9178, 7
  store i64 %9181, i64* %3, align 8
  %9182 = inttoptr i64 %9180 to i32*
  %9183 = load i32, i32* %9182, align 4
  %9184 = sext i32 %9183 to i64
  store i64 %9184, i64* %RAX.i2528, align 8
  %9185 = shl nsw i64 %9184, 2
  %9186 = add i64 %9179, -3248
  %9187 = add i64 %9186, %9185
  %9188 = add i64 %9178, 18
  store i64 %9188, i64* %3, align 8
  %9189 = inttoptr i64 %9187 to i32*
  store i32 0, i32* %9189, align 4
  %9190 = load i64, i64* %3, align 8
  %9191 = add i64 %9190, 908
  br label %block_.L_406943

block_.L_4065bc:                                  ; preds = %block_.L_406587
  store i64 5, i64* %RDX.i3821, align 8
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i3786, align 8
  %9192 = load i64, i64* %RBP.i, align 8
  %9193 = add i64 %9192, -8068
  %9194 = add i64 %9177, 15
  store i64 %9194, i64* %3, align 8
  %9195 = inttoptr i64 %9193 to i32*
  %9196 = load i32, i32* %9195, align 4
  %9197 = zext i32 %9196 to i64
  store i64 %9197, i64* %RDI.i3360, align 8
  %9198 = add i64 %9192, -20
  %9199 = add i64 %9177, 18
  store i64 %9199, i64* %3, align 8
  %9200 = inttoptr i64 %9198 to i32*
  %9201 = load i32, i32* %9200, align 4
  %9202 = zext i32 %9201 to i64
  store i64 %9202, i64* %RSI.i3112.pre-phi, align 8
  %9203 = add i64 %9177, 45044
  %9204 = add i64 %9177, 23
  %9205 = load i64, i64* %6, align 8
  %9206 = add i64 %9205, -8
  %9207 = inttoptr i64 %9206 to i64*
  store i64 %9204, i64* %9207, align 8
  store i64 %9206, i64* %6, align 8
  store i64 %9203, i64* %3, align 8
  %call2_4065ce = tail call %struct.Memory* @sub_4115b0.approxlib(%struct.State* nonnull %0, i64 %9203, %struct.Memory* %MEMORY.118)
  %9208 = load i64, i64* %RBP.i, align 8
  %9209 = add i64 %9208, -10220
  %9210 = load i32, i32* %EAX.i3678, align 4
  %9211 = load i64, i64* %3, align 8
  %9212 = add i64 %9211, 6
  store i64 %9212, i64* %3, align 8
  %9213 = inttoptr i64 %9209 to i32*
  store i32 %9210, i32* %9213, align 4
  %9214 = load i64, i64* %RBP.i, align 8
  %9215 = add i64 %9214, -10224
  %9216 = load i64, i64* %3, align 8
  %9217 = add i64 %9216, 10
  store i64 %9217, i64* %3, align 8
  %9218 = inttoptr i64 %9215 to i32*
  store i32 1, i32* %9218, align 4
  %9219 = load i64, i64* %RBP.i, align 8
  %9220 = add i64 %9219, -10220
  %9221 = load i64, i64* %3, align 8
  %9222 = add i64 %9221, 7
  store i64 %9222, i64* %3, align 8
  %9223 = inttoptr i64 %9220 to i32*
  %9224 = load i32, i32* %9223, align 4
  %9225 = add i32 %9224, -5
  %9226 = icmp ult i32 %9224, 5
  %9227 = zext i1 %9226 to i8
  store i8 %9227, i8* %14, align 1
  %9228 = and i32 %9225, 255
  %9229 = tail call i32 @llvm.ctpop.i32(i32 %9228)
  %9230 = trunc i32 %9229 to i8
  %9231 = and i8 %9230, 1
  %9232 = xor i8 %9231, 1
  store i8 %9232, i8* %21, align 1
  %9233 = xor i32 %9225, %9224
  %9234 = lshr i32 %9233, 4
  %9235 = trunc i32 %9234 to i8
  %9236 = and i8 %9235, 1
  store i8 %9236, i8* %27, align 1
  %9237 = icmp eq i32 %9225, 0
  %9238 = zext i1 %9237 to i8
  store i8 %9238, i8* %30, align 1
  %9239 = lshr i32 %9225, 31
  %9240 = trunc i32 %9239 to i8
  store i8 %9240, i8* %33, align 1
  %9241 = lshr i32 %9224, 31
  %9242 = xor i32 %9239, %9241
  %9243 = add nuw nsw i32 %9242, %9241
  %9244 = icmp eq i32 %9243, 2
  %9245 = zext i1 %9244 to i8
  store i8 %9245, i8* %39, align 1
  %9246 = icmp ne i8 %9240, 0
  %9247 = xor i1 %9246, %9244
  %.v562 = select i1 %9247, i64 13, i64 744
  %9248 = add i64 %9221, %.v562
  store i64 %9248, i64* %3, align 8
  br i1 %9247, label %block_4065f0, label %block_.L_4068cb

block_4065f0:                                     ; preds = %block_.L_4065bc
  %9249 = add i64 %9219, -40
  %9250 = add i64 %9248, 7
  store i64 %9250, i64* %3, align 8
  %9251 = inttoptr i64 %9249 to i32*
  store i32 0, i32* %9251, align 4
  %.pre401 = load i64, i64* %3, align 8
  br label %block_.L_4065f7

block_.L_4065f7:                                  ; preds = %block_.L_40664f, %block_4065f0
  %9252 = phi i64 [ %.pre401, %block_4065f0 ], [ %9470, %block_.L_40664f ]
  %9253 = load i64, i64* %RBP.i, align 8
  %9254 = add i64 %9253, -40
  %9255 = add i64 %9252, 4
  store i64 %9255, i64* %3, align 8
  %9256 = inttoptr i64 %9254 to i32*
  %9257 = load i32, i32* %9256, align 4
  %9258 = add i32 %9257, -4
  %9259 = icmp ult i32 %9257, 4
  %9260 = zext i1 %9259 to i8
  store i8 %9260, i8* %14, align 1
  %9261 = and i32 %9258, 255
  %9262 = tail call i32 @llvm.ctpop.i32(i32 %9261)
  %9263 = trunc i32 %9262 to i8
  %9264 = and i8 %9263, 1
  %9265 = xor i8 %9264, 1
  store i8 %9265, i8* %21, align 1
  %9266 = xor i32 %9258, %9257
  %9267 = lshr i32 %9266, 4
  %9268 = trunc i32 %9267 to i8
  %9269 = and i8 %9268, 1
  store i8 %9269, i8* %27, align 1
  %9270 = icmp eq i32 %9258, 0
  %9271 = zext i1 %9270 to i8
  store i8 %9271, i8* %30, align 1
  %9272 = lshr i32 %9258, 31
  %9273 = trunc i32 %9272 to i8
  store i8 %9273, i8* %33, align 1
  %9274 = lshr i32 %9257, 31
  %9275 = xor i32 %9272, %9274
  %9276 = add nuw nsw i32 %9275, %9274
  %9277 = icmp eq i32 %9276, 2
  %9278 = zext i1 %9277 to i8
  store i8 %9278, i8* %39, align 1
  %9279 = icmp ne i8 %9273, 0
  %9280 = xor i1 %9279, %9277
  %.v565 = select i1 %9280, i64 10, i64 107
  %9281 = add i64 %9252, %.v565
  store i64 %9281, i64* %3, align 8
  br i1 %9280, label %block_406601, label %block_.L_406662.loopexit

block_406601:                                     ; preds = %block_.L_4065f7
  %9282 = add i64 %9253, -8068
  %9283 = add i64 %9281, 6
  store i64 %9283, i64* %3, align 8
  %9284 = inttoptr i64 %9282 to i32*
  %9285 = load i32, i32* %9284, align 4
  %9286 = zext i32 %9285 to i64
  store i64 %9286, i64* %RAX.i2528, align 8
  %9287 = add i64 %9281, 10
  store i64 %9287, i64* %3, align 8
  %9288 = load i32, i32* %9256, align 4
  %9289 = sext i32 %9288 to i64
  store i64 %9289, i64* %RCX.i3786, align 8
  %9290 = shl nsw i64 %9289, 2
  %9291 = add nsw i64 %9290, 8053168
  %9292 = add i64 %9281, 17
  store i64 %9292, i64* %3, align 8
  %9293 = inttoptr i64 %9291 to i32*
  %9294 = load i32, i32* %9293, align 4
  %9295 = add i32 %9294, %9285
  %9296 = zext i32 %9295 to i64
  store i64 %9296, i64* %RAX.i2528, align 8
  %9297 = icmp ult i32 %9295, %9285
  %9298 = icmp ult i32 %9295, %9294
  %9299 = or i1 %9297, %9298
  %9300 = zext i1 %9299 to i8
  store i8 %9300, i8* %14, align 1
  %9301 = and i32 %9295, 255
  %9302 = tail call i32 @llvm.ctpop.i32(i32 %9301)
  %9303 = trunc i32 %9302 to i8
  %9304 = and i8 %9303, 1
  %9305 = xor i8 %9304, 1
  store i8 %9305, i8* %21, align 1
  %9306 = xor i32 %9294, %9285
  %9307 = xor i32 %9306, %9295
  %9308 = lshr i32 %9307, 4
  %9309 = trunc i32 %9308 to i8
  %9310 = and i8 %9309, 1
  store i8 %9310, i8* %27, align 1
  %9311 = icmp eq i32 %9295, 0
  %9312 = zext i1 %9311 to i8
  store i8 %9312, i8* %30, align 1
  %9313 = lshr i32 %9295, 31
  %9314 = trunc i32 %9313 to i8
  store i8 %9314, i8* %33, align 1
  %9315 = lshr i32 %9285, 31
  %9316 = lshr i32 %9294, 31
  %9317 = xor i32 %9313, %9315
  %9318 = xor i32 %9313, %9316
  %9319 = add nuw nsw i32 %9317, %9318
  %9320 = icmp eq i32 %9319, 2
  %9321 = zext i1 %9320 to i8
  store i8 %9321, i8* %39, align 1
  %9322 = sext i32 %9295 to i64
  store i64 %9322, i64* %RCX.i3786, align 8
  %9323 = add nsw i64 %9322, 12099168
  %9324 = add i64 %9281, 28
  store i64 %9324, i64* %3, align 8
  %9325 = inttoptr i64 %9323 to i8*
  %9326 = load i8, i8* %9325, align 1
  %9327 = zext i8 %9326 to i64
  store i64 %9327, i64* %RAX.i2528, align 8
  %9328 = zext i8 %9326 to i32
  %9329 = add i64 %9253, -20
  %9330 = add i64 %9281, 31
  store i64 %9330, i64* %3, align 8
  %9331 = inttoptr i64 %9329 to i32*
  %9332 = load i32, i32* %9331, align 4
  %9333 = sub i32 %9328, %9332
  %9334 = icmp ult i32 %9328, %9332
  %9335 = zext i1 %9334 to i8
  store i8 %9335, i8* %14, align 1
  %9336 = and i32 %9333, 255
  %9337 = tail call i32 @llvm.ctpop.i32(i32 %9336)
  %9338 = trunc i32 %9337 to i8
  %9339 = and i8 %9338, 1
  %9340 = xor i8 %9339, 1
  store i8 %9340, i8* %21, align 1
  %9341 = xor i32 %9332, %9328
  %9342 = xor i32 %9341, %9333
  %9343 = lshr i32 %9342, 4
  %9344 = trunc i32 %9343 to i8
  %9345 = and i8 %9344, 1
  store i8 %9345, i8* %27, align 1
  %9346 = icmp eq i32 %9333, 0
  %9347 = zext i1 %9346 to i8
  store i8 %9347, i8* %30, align 1
  %9348 = lshr i32 %9333, 31
  %9349 = trunc i32 %9348 to i8
  store i8 %9349, i8* %33, align 1
  %9350 = lshr i32 %9332, 31
  %9351 = add nuw nsw i32 %9348, %9350
  %9352 = icmp eq i32 %9351, 2
  %9353 = zext i1 %9352 to i8
  store i8 %9353, i8* %39, align 1
  %.v576 = select i1 %9346, i64 37, i64 78
  %9354 = add i64 %9281, %.v576
  store i64 %9354, i64* %3, align 8
  %9355 = load i64, i64* %RBP.i, align 8
  br i1 %9346, label %block_406626, label %block_.L_40664f

block_406626:                                     ; preds = %block_406601
  %9356 = add i64 %9355, -8068
  %9357 = add i64 %9354, 6
  store i64 %9357, i64* %3, align 8
  %9358 = inttoptr i64 %9356 to i32*
  %9359 = load i32, i32* %9358, align 4
  %9360 = zext i32 %9359 to i64
  store i64 %9360, i64* %RAX.i2528, align 8
  %9361 = add i64 %9355, -40
  %9362 = add i64 %9354, 10
  store i64 %9362, i64* %3, align 8
  %9363 = inttoptr i64 %9361 to i32*
  %9364 = load i32, i32* %9363, align 4
  %9365 = sext i32 %9364 to i64
  store i64 %9365, i64* %RCX.i3786, align 8
  %9366 = shl nsw i64 %9365, 2
  %9367 = add nsw i64 %9366, 8053168
  %9368 = add i64 %9354, 17
  store i64 %9368, i64* %3, align 8
  %9369 = inttoptr i64 %9367 to i32*
  %9370 = load i32, i32* %9369, align 4
  %9371 = add i32 %9370, %9359
  %9372 = zext i32 %9371 to i64
  store i64 %9372, i64* %RAX.i2528, align 8
  %9373 = icmp ult i32 %9371, %9359
  %9374 = icmp ult i32 %9371, %9370
  %9375 = or i1 %9373, %9374
  %9376 = zext i1 %9375 to i8
  store i8 %9376, i8* %14, align 1
  %9377 = and i32 %9371, 255
  %9378 = tail call i32 @llvm.ctpop.i32(i32 %9377)
  %9379 = trunc i32 %9378 to i8
  %9380 = and i8 %9379, 1
  %9381 = xor i8 %9380, 1
  store i8 %9381, i8* %21, align 1
  %9382 = xor i32 %9370, %9359
  %9383 = xor i32 %9382, %9371
  %9384 = lshr i32 %9383, 4
  %9385 = trunc i32 %9384 to i8
  %9386 = and i8 %9385, 1
  store i8 %9386, i8* %27, align 1
  %9387 = icmp eq i32 %9371, 0
  %9388 = zext i1 %9387 to i8
  store i8 %9388, i8* %30, align 1
  %9389 = lshr i32 %9371, 31
  %9390 = trunc i32 %9389 to i8
  store i8 %9390, i8* %33, align 1
  %9391 = lshr i32 %9359, 31
  %9392 = lshr i32 %9370, 31
  %9393 = xor i32 %9389, %9391
  %9394 = xor i32 %9389, %9392
  %9395 = add nuw nsw i32 %9393, %9394
  %9396 = icmp eq i32 %9395, 2
  %9397 = zext i1 %9396 to i8
  store i8 %9397, i8* %39, align 1
  store i64 %9372, i64* %RDI.i3360, align 8
  %9398 = add i64 %9354, 37210
  %9399 = add i64 %9354, 24
  %9400 = load i64, i64* %6, align 8
  %9401 = add i64 %9400, -8
  %9402 = inttoptr i64 %9401 to i64*
  store i64 %9399, i64* %9402, align 8
  store i64 %9401, i64* %6, align 8
  store i64 %9398, i64* %3, align 8
  %call2_406639 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %9398, %struct.Memory* %MEMORY.118)
  %9403 = load i32, i32* %EAX.i3678, align 4
  %9404 = load i64, i64* %RBP.i, align 8
  %9405 = add i64 %9404, -10220
  %9406 = load i64, i64* %3, align 8
  %9407 = add i64 %9406, 6
  store i64 %9407, i64* %3, align 8
  %9408 = inttoptr i64 %9405 to i32*
  %9409 = load i32, i32* %9408, align 4
  %9410 = sub i32 %9403, %9409
  %9411 = icmp ult i32 %9403, %9409
  %9412 = zext i1 %9411 to i8
  store i8 %9412, i8* %14, align 1
  %9413 = and i32 %9410, 255
  %9414 = tail call i32 @llvm.ctpop.i32(i32 %9413)
  %9415 = trunc i32 %9414 to i8
  %9416 = and i8 %9415, 1
  %9417 = xor i8 %9416, 1
  store i8 %9417, i8* %21, align 1
  %9418 = xor i32 %9409, %9403
  %9419 = xor i32 %9418, %9410
  %9420 = lshr i32 %9419, 4
  %9421 = trunc i32 %9420 to i8
  %9422 = and i8 %9421, 1
  store i8 %9422, i8* %27, align 1
  %9423 = icmp eq i32 %9410, 0
  %9424 = zext i1 %9423 to i8
  store i8 %9424, i8* %30, align 1
  %9425 = lshr i32 %9410, 31
  %9426 = trunc i32 %9425 to i8
  store i8 %9426, i8* %33, align 1
  %9427 = lshr i32 %9403, 31
  %9428 = lshr i32 %9409, 31
  %9429 = xor i32 %9428, %9427
  %9430 = xor i32 %9425, %9427
  %9431 = add nuw nsw i32 %9430, %9429
  %9432 = icmp eq i32 %9431, 2
  %9433 = zext i1 %9432 to i8
  store i8 %9433, i8* %39, align 1
  %9434 = icmp ne i8 %9426, 0
  %9435 = xor i1 %9434, %9432
  %9436 = or i1 %9423, %9435
  %.v577 = select i1 %9436, i64 17, i64 12
  %9437 = add i64 %9406, %.v577
  store i64 %9437, i64* %3, align 8
  br i1 %9436, label %block_.L_40664f, label %block_40664a

block_40664a:                                     ; preds = %block_406626
  %9438 = add i64 %9437, 24
  store i64 %9438, i64* %3, align 8
  br label %block_.L_406662

block_.L_40664f:                                  ; preds = %block_406601, %block_406626
  %9439 = phi i64 [ %9404, %block_406626 ], [ %9355, %block_406601 ]
  %9440 = phi i64 [ %9437, %block_406626 ], [ %9354, %block_406601 ]
  %9441 = add i64 %9439, -40
  %9442 = add i64 %9440, 8
  store i64 %9442, i64* %3, align 8
  %9443 = inttoptr i64 %9441 to i32*
  %9444 = load i32, i32* %9443, align 4
  %9445 = add i32 %9444, 1
  %9446 = zext i32 %9445 to i64
  store i64 %9446, i64* %RAX.i2528, align 8
  %9447 = icmp eq i32 %9444, -1
  %9448 = icmp eq i32 %9445, 0
  %9449 = or i1 %9447, %9448
  %9450 = zext i1 %9449 to i8
  store i8 %9450, i8* %14, align 1
  %9451 = and i32 %9445, 255
  %9452 = tail call i32 @llvm.ctpop.i32(i32 %9451)
  %9453 = trunc i32 %9452 to i8
  %9454 = and i8 %9453, 1
  %9455 = xor i8 %9454, 1
  store i8 %9455, i8* %21, align 1
  %9456 = xor i32 %9445, %9444
  %9457 = lshr i32 %9456, 4
  %9458 = trunc i32 %9457 to i8
  %9459 = and i8 %9458, 1
  store i8 %9459, i8* %27, align 1
  %9460 = zext i1 %9448 to i8
  store i8 %9460, i8* %30, align 1
  %9461 = lshr i32 %9445, 31
  %9462 = trunc i32 %9461 to i8
  store i8 %9462, i8* %33, align 1
  %9463 = lshr i32 %9444, 31
  %9464 = xor i32 %9461, %9463
  %9465 = add nuw nsw i32 %9464, %9461
  %9466 = icmp eq i32 %9465, 2
  %9467 = zext i1 %9466 to i8
  store i8 %9467, i8* %39, align 1
  %9468 = add i64 %9440, 14
  store i64 %9468, i64* %3, align 8
  store i32 %9445, i32* %9443, align 4
  %9469 = load i64, i64* %3, align 8
  %9470 = add i64 %9469, -102
  store i64 %9470, i64* %3, align 8
  br label %block_.L_4065f7

block_.L_406662.loopexit:                         ; preds = %block_.L_4065f7
  br label %block_.L_406662

block_.L_406662:                                  ; preds = %block_.L_406662.loopexit, %block_40664a
  %9471 = phi i64 [ %9438, %block_40664a ], [ %9281, %block_.L_406662.loopexit ]
  %9472 = phi i64 [ %9404, %block_40664a ], [ %9253, %block_.L_406662.loopexit ]
  %9473 = add i64 %9472, -40
  %9474 = add i64 %9471, 4
  store i64 %9474, i64* %3, align 8
  %9475 = inttoptr i64 %9473 to i32*
  %9476 = load i32, i32* %9475, align 4
  %9477 = add i32 %9476, -4
  %9478 = icmp ult i32 %9476, 4
  %9479 = zext i1 %9478 to i8
  store i8 %9479, i8* %14, align 1
  %9480 = and i32 %9477, 255
  %9481 = tail call i32 @llvm.ctpop.i32(i32 %9480)
  %9482 = trunc i32 %9481 to i8
  %9483 = and i8 %9482, 1
  %9484 = xor i8 %9483, 1
  store i8 %9484, i8* %21, align 1
  %9485 = xor i32 %9477, %9476
  %9486 = lshr i32 %9485, 4
  %9487 = trunc i32 %9486 to i8
  %9488 = and i8 %9487, 1
  store i8 %9488, i8* %27, align 1
  %9489 = icmp eq i32 %9477, 0
  %9490 = zext i1 %9489 to i8
  store i8 %9490, i8* %30, align 1
  %9491 = lshr i32 %9477, 31
  %9492 = trunc i32 %9491 to i8
  store i8 %9492, i8* %33, align 1
  %9493 = lshr i32 %9476, 31
  %9494 = xor i32 %9491, %9493
  %9495 = add nuw nsw i32 %9494, %9493
  %9496 = icmp eq i32 %9495, 2
  %9497 = zext i1 %9496 to i8
  store i8 %9497, i8* %39, align 1
  %9498 = icmp ne i8 %9492, 0
  %9499 = xor i1 %9498, %9496
  %.v566 = select i1 %9499, i64 10, i64 612
  %9500 = add i64 %9471, %.v566
  store i64 %9500, i64* %3, align 8
  br i1 %9499, label %block_40666c, label %block_.L_4068c6

block_40666c:                                     ; preds = %block_.L_406662
  store i64 ptrtoint (%G__0x579e48_type* @G__0x579e48 to i64), i64* %RDX.i3821, align 8
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9501 = add i64 %9472, -8068
  %9502 = add i64 %9500, 18
  store i64 %9502, i64* %3, align 8
  %9503 = inttoptr i64 %9501 to i32*
  %9504 = load i32, i32* %9503, align 4
  %9505 = zext i32 %9504 to i64
  store i64 %9505, i64* %RDI.i3360, align 8
  %9506 = add i64 %9472, -20
  %9507 = add i64 %9500, 21
  store i64 %9507, i64* %3, align 8
  %9508 = inttoptr i64 %9506 to i32*
  %9509 = load i32, i32* %9508, align 4
  %9510 = zext i32 %9509 to i64
  store i64 %9510, i64* %RSI.i3112.pre-phi, align 8
  %9511 = add i64 %9500, 27
  store i64 %9511, i64* %3, align 8
  %9512 = load i32, i32* %9503, align 4
  %9513 = zext i32 %9512 to i64
  store i64 %9513, i64* %RCX.i3786, align 8
  %9514 = add i64 %9500, 31
  store i64 %9514, i64* %3, align 8
  %9515 = load i32, i32* %9475, align 4
  %9516 = sext i32 %9515 to i64
  store i64 %9516, i64* %43, align 8
  %9517 = shl nsw i64 %9516, 2
  %9518 = add nsw i64 %9517, 8053168
  %9519 = add i64 %9500, 39
  store i64 %9519, i64* %3, align 8
  %9520 = inttoptr i64 %9518 to i32*
  %9521 = load i32, i32* %9520, align 4
  %9522 = add i32 %9521, %9512
  %9523 = zext i32 %9522 to i64
  store i64 %9523, i64* %RCX.i3786, align 8
  %9524 = icmp ult i32 %9522, %9512
  %9525 = icmp ult i32 %9522, %9521
  %9526 = or i1 %9524, %9525
  %9527 = zext i1 %9526 to i8
  store i8 %9527, i8* %14, align 1
  %9528 = and i32 %9522, 255
  %9529 = tail call i32 @llvm.ctpop.i32(i32 %9528)
  %9530 = trunc i32 %9529 to i8
  %9531 = and i8 %9530, 1
  %9532 = xor i8 %9531, 1
  store i8 %9532, i8* %21, align 1
  %9533 = xor i32 %9521, %9512
  %9534 = xor i32 %9533, %9522
  %9535 = lshr i32 %9534, 4
  %9536 = trunc i32 %9535 to i8
  %9537 = and i8 %9536, 1
  store i8 %9537, i8* %27, align 1
  %9538 = icmp eq i32 %9522, 0
  %9539 = zext i1 %9538 to i8
  store i8 %9539, i8* %30, align 1
  %9540 = lshr i32 %9522, 31
  %9541 = trunc i32 %9540 to i8
  store i8 %9541, i8* %33, align 1
  %9542 = lshr i32 %9512, 31
  %9543 = lshr i32 %9521, 31
  %9544 = xor i32 %9540, %9542
  %9545 = xor i32 %9540, %9543
  %9546 = add nuw nsw i32 %9544, %9545
  %9547 = icmp eq i32 %9546, 2
  %9548 = zext i1 %9547 to i8
  store i8 %9548, i8* %39, align 1
  store i64 0, i64* %43, align 8
  store i64 0, i64* %8627, align 8
  %9549 = add i64 %9500, 10180
  %9550 = add i64 %9500, 50
  %9551 = load i64, i64* %6, align 8
  %9552 = add i64 %9551, -8
  %9553 = inttoptr i64 %9552 to i64*
  store i64 %9550, i64* %9553, align 8
  store i64 %9552, i64* %6, align 8
  store i64 %9549, i64* %3, align 8
  %call2_406699 = tail call %struct.Memory* @sub_408e30.trymove(%struct.State* nonnull %0, i64 %9549, %struct.Memory* %MEMORY.118)
  %9554 = load i32, i32* %EAX.i3678, align 4
  %9555 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %9556 = and i32 %9554, 255
  %9557 = tail call i32 @llvm.ctpop.i32(i32 %9556)
  %9558 = trunc i32 %9557 to i8
  %9559 = and i8 %9558, 1
  %9560 = xor i8 %9559, 1
  store i8 %9560, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9561 = icmp eq i32 %9554, 0
  %9562 = zext i1 %9561 to i8
  store i8 %9562, i8* %30, align 1
  %9563 = lshr i32 %9554, 31
  %9564 = trunc i32 %9563 to i8
  store i8 %9564, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v567 = select i1 %9561, i64 547, i64 9
  %9565 = add i64 %9555, %.v567
  store i64 %9565, i64* %3, align 8
  %.pre409.pre.pre = load i64, i64* %RBP.i, align 8
  br i1 %9561, label %block_.L_4068c1, label %block_4066a7

block_4066a7:                                     ; preds = %block_40666c
  %9566 = add i64 %.pre409.pre.pre, -10864
  store i64 %9566, i64* %RSI.i3112.pre-phi, align 8
  %9567 = add i64 %.pre409.pre.pre, -8068
  %9568 = add i64 %9565, 13
  store i64 %9568, i64* %3, align 8
  %9569 = inttoptr i64 %9567 to i32*
  %9570 = load i32, i32* %9569, align 4
  %9571 = zext i32 %9570 to i64
  store i64 %9571, i64* %RDI.i3360, align 8
  %9572 = add i64 %9565, 54361
  %9573 = add i64 %9565, 18
  %9574 = load i64, i64* %6, align 8
  %9575 = add i64 %9574, -8
  %9576 = inttoptr i64 %9575 to i64*
  store i64 %9573, i64* %9576, align 8
  store i64 %9575, i64* %6, align 8
  store i64 %9572, i64* %3, align 8
  %call2_4066b4 = tail call %struct.Memory* @sub_413b00.chainlinks(%struct.State* nonnull %0, i64 %9572, %struct.Memory* %call2_406699)
  %9577 = load i64, i64* %RBP.i, align 8
  %9578 = add i64 %9577, -10868
  %9579 = load i32, i32* %EAX.i3678, align 4
  %9580 = load i64, i64* %3, align 8
  %9581 = add i64 %9580, 6
  store i64 %9581, i64* %3, align 8
  %9582 = inttoptr i64 %9578 to i32*
  store i32 %9579, i32* %9582, align 4
  %9583 = load i64, i64* %RBP.i, align 8
  %9584 = add i64 %9583, -10872
  %9585 = load i64, i64* %3, align 8
  %9586 = add i64 %9585, 10
  store i64 %9586, i64* %3, align 8
  %9587 = inttoptr i64 %9584 to i32*
  store i32 0, i32* %9587, align 4
  %.pre402 = load i64, i64* %3, align 8
  br label %block_.L_4066c9

block_.L_4066c9:                                  ; preds = %block_.L_40679d, %block_4066a7
  %9588 = phi i64 [ %.pre402, %block_4066a7 ], [ %9842, %block_.L_40679d ]
  %9589 = load i64, i64* %RBP.i, align 8
  %9590 = add i64 %9589, -10872
  %9591 = add i64 %9588, 6
  store i64 %9591, i64* %3, align 8
  %9592 = inttoptr i64 %9590 to i32*
  %9593 = load i32, i32* %9592, align 4
  %9594 = zext i32 %9593 to i64
  store i64 %9594, i64* %RAX.i2528, align 8
  %9595 = add i64 %9589, -10868
  %9596 = add i64 %9588, 12
  store i64 %9596, i64* %3, align 8
  %9597 = inttoptr i64 %9595 to i32*
  %9598 = load i32, i32* %9597, align 4
  %9599 = sub i32 %9593, %9598
  %9600 = icmp ult i32 %9593, %9598
  %9601 = zext i1 %9600 to i8
  store i8 %9601, i8* %14, align 1
  %9602 = and i32 %9599, 255
  %9603 = tail call i32 @llvm.ctpop.i32(i32 %9602)
  %9604 = trunc i32 %9603 to i8
  %9605 = and i8 %9604, 1
  %9606 = xor i8 %9605, 1
  store i8 %9606, i8* %21, align 1
  %9607 = xor i32 %9598, %9593
  %9608 = xor i32 %9607, %9599
  %9609 = lshr i32 %9608, 4
  %9610 = trunc i32 %9609 to i8
  %9611 = and i8 %9610, 1
  store i8 %9611, i8* %27, align 1
  %9612 = icmp eq i32 %9599, 0
  %9613 = zext i1 %9612 to i8
  store i8 %9613, i8* %30, align 1
  %9614 = lshr i32 %9599, 31
  %9615 = trunc i32 %9614 to i8
  store i8 %9615, i8* %33, align 1
  %9616 = lshr i32 %9593, 31
  %9617 = lshr i32 %9598, 31
  %9618 = xor i32 %9617, %9616
  %9619 = xor i32 %9614, %9616
  %9620 = add nuw nsw i32 %9619, %9618
  %9621 = icmp eq i32 %9620, 2
  %9622 = zext i1 %9621 to i8
  store i8 %9622, i8* %39, align 1
  %9623 = icmp ne i8 %9615, 0
  %9624 = xor i1 %9623, %9621
  %.v568 = select i1 %9624, i64 18, i64 237
  %9625 = add i64 %9588, %.v568
  store i64 %9625, i64* %3, align 8
  br i1 %9624, label %block_4066db, label %block_.L_4067b6

block_4066db:                                     ; preds = %block_.L_4066c9
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %9626 = add i64 %9625, 17
  store i64 %9626, i64* %3, align 8
  %9627 = load i32, i32* %9592, align 4
  %9628 = sext i32 %9627 to i64
  store i64 %9628, i64* %RCX.i3786, align 8
  %9629 = shl nsw i64 %9628, 2
  %9630 = add i64 %9589, -10864
  %9631 = add i64 %9630, %9629
  %9632 = add i64 %9625, 25
  store i64 %9632, i64* %3, align 8
  %9633 = inttoptr i64 %9631 to i32*
  %9634 = load i32, i32* %9633, align 4
  %9635 = sext i32 %9634 to i64
  %9636 = mul nsw i64 %9635, 380
  store i64 %9636, i64* %RCX.i3786, align 8
  %9637 = lshr i64 %9636, 63
  %9638 = add i64 %9636, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %9638, i64* %RAX.i2528, align 8
  %9639 = icmp ult i64 %9638, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %9640 = icmp ult i64 %9638, %9636
  %9641 = or i1 %9639, %9640
  %9642 = zext i1 %9641 to i8
  store i8 %9642, i8* %14, align 1
  %9643 = trunc i64 %9638 to i32
  %9644 = and i32 %9643, 252
  %9645 = tail call i32 @llvm.ctpop.i32(i32 %9644)
  %9646 = trunc i32 %9645 to i8
  %9647 = and i8 %9646, 1
  %9648 = xor i8 %9647, 1
  store i8 %9648, i8* %21, align 1
  %9649 = xor i64 %9636, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %9650 = xor i64 %9649, %9638
  %9651 = lshr i64 %9650, 4
  %9652 = trunc i64 %9651 to i8
  %9653 = and i8 %9652, 1
  store i8 %9653, i8* %27, align 1
  %9654 = icmp eq i64 %9638, 0
  %9655 = zext i1 %9654 to i8
  store i8 %9655, i8* %30, align 1
  %9656 = lshr i64 %9638, 63
  %9657 = trunc i64 %9656 to i8
  store i8 %9657, i8* %33, align 1
  %9658 = xor i64 %9656, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %9659 = xor i64 %9656, %9637
  %9660 = add nuw nsw i64 %9658, %9659
  %9661 = icmp eq i64 %9660, 2
  %9662 = zext i1 %9661 to i8
  store i8 %9662, i8* %39, align 1
  %9663 = add i64 %9636, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 100)
  %9664 = add i64 %9625, 39
  store i64 %9664, i64* %3, align 8
  %9665 = inttoptr i64 %9663 to i32*
  %9666 = load i32, i32* %9665, align 4
  store i8 0, i8* %14, align 1
  %9667 = and i32 %9666, 255
  %9668 = tail call i32 @llvm.ctpop.i32(i32 %9667)
  %9669 = trunc i32 %9668 to i8
  %9670 = and i8 %9669, 1
  %9671 = xor i8 %9670, 1
  store i8 %9671, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9672 = icmp eq i32 %9666, 0
  %9673 = zext i1 %9672 to i8
  store i8 %9673, i8* %30, align 1
  %9674 = lshr i32 %9666, 31
  %9675 = trunc i32 %9674 to i8
  store i8 %9675, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v573 = select i1 %9672, i64 194, i64 45
  %9676 = add i64 %9625, %.v573
  store i64 %9676, i64* %3, align 8
  br i1 %9672, label %block_.L_40679d, label %block_406708

block_406708:                                     ; preds = %block_4066db
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RSI.i3112.pre-phi, align 8
  %9677 = load i64, i64* %RBP.i, align 8
  %9678 = add i64 %9677, -10872
  %9679 = add i64 %9676, 11
  store i64 %9679, i64* %3, align 8
  %9680 = inttoptr i64 %9678 to i32*
  %9681 = load i32, i32* %9680, align 4
  %9682 = sext i32 %9681 to i64
  store i64 %9682, i64* %RCX.i3786, align 8
  %9683 = shl nsw i64 %9682, 2
  %9684 = add i64 %9677, -10864
  %9685 = add i64 %9684, %9683
  %9686 = add i64 %9676, 18
  store i64 %9686, i64* %3, align 8
  %9687 = inttoptr i64 %9685 to i32*
  %9688 = load i32, i32* %9687, align 4
  %9689 = zext i32 %9688 to i64
  store i64 %9689, i64* %RDI.i3360, align 8
  %9690 = add i64 %9676, 409720
  %9691 = add i64 %9676, 23
  %9692 = load i64, i64* %6, align 8
  %9693 = add i64 %9692, -8
  %9694 = inttoptr i64 %9693 to i64*
  store i64 %9691, i64* %9694, align 8
  store i64 %9693, i64* %6, align 8
  store i64 %9690, i64* %3, align 8
  %call2_40671a = tail call %struct.Memory* @sub_46a780.find_defense(%struct.State* nonnull %0, i64 %9690, %struct.Memory* %call2_4066b4)
  %9695 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RCX.i3786, align 8
  %9696 = load i64, i64* %RBP.i, align 8
  %9697 = add i64 %9696, -10872
  %9698 = add i64 %9695, 17
  store i64 %9698, i64* %3, align 8
  %9699 = inttoptr i64 %9697 to i32*
  %9700 = load i32, i32* %9699, align 4
  %9701 = sext i32 %9700 to i64
  store i64 %9701, i64* %RSI.i3112.pre-phi, align 8
  %9702 = shl nsw i64 %9701, 2
  %9703 = add i64 %9696, -10864
  %9704 = add i64 %9703, %9702
  %9705 = add i64 %9695, 25
  store i64 %9705, i64* %3, align 8
  %9706 = inttoptr i64 %9704 to i32*
  %9707 = load i32, i32* %9706, align 4
  %9708 = sext i32 %9707 to i64
  %9709 = mul nsw i64 %9708, 380
  store i64 %9709, i64* %RSI.i3112.pre-phi, align 8
  %9710 = lshr i64 %9709, 63
  %9711 = add i64 %9709, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %9711, i64* %RCX.i3786, align 8
  %9712 = icmp ult i64 %9711, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %9713 = icmp ult i64 %9711, %9709
  %9714 = or i1 %9712, %9713
  %9715 = zext i1 %9714 to i8
  store i8 %9715, i8* %14, align 1
  %9716 = trunc i64 %9711 to i32
  %9717 = and i32 %9716, 252
  %9718 = tail call i32 @llvm.ctpop.i32(i32 %9717)
  %9719 = trunc i32 %9718 to i8
  %9720 = and i8 %9719, 1
  %9721 = xor i8 %9720, 1
  store i8 %9721, i8* %21, align 1
  %9722 = xor i64 %9709, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %9723 = xor i64 %9722, %9711
  %9724 = lshr i64 %9723, 4
  %9725 = trunc i64 %9724 to i8
  %9726 = and i8 %9725, 1
  store i8 %9726, i8* %27, align 1
  %9727 = icmp eq i64 %9711, 0
  %9728 = zext i1 %9727 to i8
  store i8 %9728, i8* %30, align 1
  %9729 = lshr i64 %9711, 63
  %9730 = trunc i64 %9729 to i8
  store i8 %9730, i8* %33, align 1
  %9731 = xor i64 %9729, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %9732 = xor i64 %9729, %9710
  %9733 = add nuw nsw i64 %9731, %9732
  %9734 = icmp eq i64 %9733, 2
  %9735 = zext i1 %9734 to i8
  store i8 %9735, i8* %39, align 1
  %9736 = load i32, i32* %EAX.i3678, align 4
  %9737 = add i64 %9709, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 180)
  %9738 = add i64 %9695, 41
  store i64 %9738, i64* %3, align 8
  %9739 = inttoptr i64 %9737 to i32*
  %9740 = load i32, i32* %9739, align 4
  %9741 = sub i32 %9736, %9740
  %9742 = icmp ult i32 %9736, %9740
  %9743 = zext i1 %9742 to i8
  store i8 %9743, i8* %14, align 1
  %9744 = and i32 %9741, 255
  %9745 = tail call i32 @llvm.ctpop.i32(i32 %9744)
  %9746 = trunc i32 %9745 to i8
  %9747 = and i8 %9746, 1
  %9748 = xor i8 %9747, 1
  store i8 %9748, i8* %21, align 1
  %9749 = xor i32 %9740, %9736
  %9750 = xor i32 %9749, %9741
  %9751 = lshr i32 %9750, 4
  %9752 = trunc i32 %9751 to i8
  %9753 = and i8 %9752, 1
  store i8 %9753, i8* %27, align 1
  %9754 = icmp eq i32 %9741, 0
  %9755 = zext i1 %9754 to i8
  store i8 %9755, i8* %30, align 1
  %9756 = lshr i32 %9741, 31
  %9757 = trunc i32 %9756 to i8
  store i8 %9757, i8* %33, align 1
  %9758 = lshr i32 %9736, 31
  %9759 = lshr i32 %9740, 31
  %9760 = xor i32 %9759, %9758
  %9761 = xor i32 %9756, %9758
  %9762 = add nuw nsw i32 %9761, %9760
  %9763 = icmp eq i32 %9762, 2
  %9764 = zext i1 %9763 to i8
  store i8 %9764, i8* %39, align 1
  %9765 = icmp ne i8 %9757, 0
  %9766 = xor i1 %9765, %9763
  %9767 = or i1 %9754, %9766
  %.v574 = select i1 %9767, i64 126, i64 47
  %9768 = add i64 %9695, %.v574
  store i64 %9768, i64* %3, align 8
  br i1 %9767, label %block_.L_40679d, label %block_40674e

block_40674e:                                     ; preds = %block_406708
  %9769 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %9770 = and i32 %9769, 131072
  %9771 = zext i32 %9770 to i64
  store i64 %9771, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit510 = lshr exact i32 %9770, 17
  %9772 = trunc i32 %.lobit510 to i8
  %9773 = xor i8 %9772, 1
  store i8 %9773, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9774 = icmp eq i8 %9773, 0
  %.v575 = select i1 %9774, i64 26, i64 21
  %9775 = add i64 %9768, %.v575
  store i64 %9775, i64* %3, align 8
  br i1 %9774, label %block_.L_406768, label %block_406763

block_406763:                                     ; preds = %block_40674e
  %9776 = add i64 %9775, 48
  store i64 %9776, i64* %3, align 8
  br label %block_.L_406793

block_.L_406768:                                  ; preds = %block_40674e
  store i64 ptrtoint (%G__0x579e54_type* @G__0x579e54 to i64), i64* %RDI.i3360, align 8
  %9777 = load i64, i64* %RBP.i, align 8
  %9778 = add i64 %9777, -10872
  %9779 = add i64 %9775, 17
  store i64 %9779, i64* %3, align 8
  %9780 = inttoptr i64 %9778 to i32*
  %9781 = load i32, i32* %9780, align 4
  %9782 = sext i32 %9781 to i64
  store i64 %9782, i64* %RAX.i2528, align 8
  %9783 = shl nsw i64 %9782, 2
  %9784 = add i64 %9777, -10864
  %9785 = add i64 %9784, %9783
  %9786 = add i64 %9775, 24
  store i64 %9786, i64* %3, align 8
  %9787 = inttoptr i64 %9785 to i32*
  %9788 = load i32, i32* %9787, align 4
  %9789 = zext i32 %9788 to i64
  store i64 %9789, i64* %RSI.i3112.pre-phi, align 8
  %9790 = add i64 %9777, -8068
  %9791 = add i64 %9775, 30
  store i64 %9791, i64* %3, align 8
  %9792 = inttoptr i64 %9790 to i32*
  %9793 = load i32, i32* %9792, align 4
  %9794 = zext i32 %9793 to i64
  store i64 %9794, i64* %RDX.i3821, align 8
  store i8 0, i8* %AL.i1212, align 1
  %9795 = add i64 %9775, 308808
  %9796 = add i64 %9775, 37
  %9797 = load i64, i64* %6, align 8
  %9798 = add i64 %9797, -8
  %9799 = inttoptr i64 %9798 to i64*
  store i64 %9796, i64* %9799, align 8
  store i64 %9798, i64* %6, align 8
  store i64 %9795, i64* %3, align 8
  %call2_406788 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %9795, %struct.Memory* %call2_4066b4)
  %9800 = load i64, i64* %RBP.i, align 8
  %9801 = add i64 %9800, -10988
  %9802 = load i32, i32* %EAX.i3678, align 4
  %9803 = load i64, i64* %3, align 8
  %9804 = add i64 %9803, 6
  store i64 %9804, i64* %3, align 8
  %9805 = inttoptr i64 %9801 to i32*
  store i32 %9802, i32* %9805, align 4
  %.pre407 = load i64, i64* %3, align 8
  br label %block_.L_406793

block_.L_406793:                                  ; preds = %block_.L_406768, %block_406763
  %9806 = phi i64 [ %.pre407, %block_.L_406768 ], [ %9776, %block_406763 ]
  %9807 = load i64, i64* %RBP.i, align 8
  %9808 = add i64 %9807, -10224
  %9809 = add i64 %9806, 10
  store i64 %9809, i64* %3, align 8
  %9810 = inttoptr i64 %9808 to i32*
  store i32 0, i32* %9810, align 4
  %.pre408 = load i64, i64* %3, align 8
  br label %block_.L_40679d

block_.L_40679d:                                  ; preds = %block_.L_406793, %block_406708, %block_4066db
  %9811 = phi i64 [ %.pre408, %block_.L_406793 ], [ %9768, %block_406708 ], [ %9676, %block_4066db ]
  %9812 = load i64, i64* %RBP.i, align 8
  %9813 = add i64 %9812, -10872
  %9814 = add i64 %9811, 11
  store i64 %9814, i64* %3, align 8
  %9815 = inttoptr i64 %9813 to i32*
  %9816 = load i32, i32* %9815, align 4
  %9817 = add i32 %9816, 1
  %9818 = zext i32 %9817 to i64
  store i64 %9818, i64* %RAX.i2528, align 8
  %9819 = icmp eq i32 %9816, -1
  %9820 = icmp eq i32 %9817, 0
  %9821 = or i1 %9819, %9820
  %9822 = zext i1 %9821 to i8
  store i8 %9822, i8* %14, align 1
  %9823 = and i32 %9817, 255
  %9824 = tail call i32 @llvm.ctpop.i32(i32 %9823)
  %9825 = trunc i32 %9824 to i8
  %9826 = and i8 %9825, 1
  %9827 = xor i8 %9826, 1
  store i8 %9827, i8* %21, align 1
  %9828 = xor i32 %9817, %9816
  %9829 = lshr i32 %9828, 4
  %9830 = trunc i32 %9829 to i8
  %9831 = and i8 %9830, 1
  store i8 %9831, i8* %27, align 1
  %9832 = zext i1 %9820 to i8
  store i8 %9832, i8* %30, align 1
  %9833 = lshr i32 %9817, 31
  %9834 = trunc i32 %9833 to i8
  store i8 %9834, i8* %33, align 1
  %9835 = lshr i32 %9816, 31
  %9836 = xor i32 %9833, %9835
  %9837 = add nuw nsw i32 %9836, %9833
  %9838 = icmp eq i32 %9837, 2
  %9839 = zext i1 %9838 to i8
  store i8 %9839, i8* %39, align 1
  %9840 = add i64 %9811, 20
  store i64 %9840, i64* %3, align 8
  store i32 %9817, i32* %9815, align 4
  %9841 = load i64, i64* %3, align 8
  %9842 = add i64 %9841, -232
  store i64 %9842, i64* %3, align 8
  br label %block_.L_4066c9

block_.L_4067b6:                                  ; preds = %block_.L_4066c9
  %9843 = add i64 %9625, 30122
  %9844 = add i64 %9625, 5
  %9845 = load i64, i64* %6, align 8
  %9846 = add i64 %9845, -8
  %9847 = inttoptr i64 %9846 to i64*
  store i64 %9844, i64* %9847, align 8
  store i64 %9846, i64* %6, align 8
  store i64 %9843, i64* %3, align 8
  %call2_4067b6 = tail call %struct.Memory* @sub_40dd60.popgo(%struct.State* nonnull %0, i64 %9843, %struct.Memory* %call2_4066b4)
  %9848 = load i64, i64* %RBP.i, align 8
  %9849 = add i64 %9848, -10872
  %9850 = load i64, i64* %3, align 8
  %9851 = add i64 %9850, 10
  store i64 %9851, i64* %3, align 8
  %9852 = inttoptr i64 %9849 to i32*
  store i32 0, i32* %9852, align 4
  %.pre403 = load i64, i64* %3, align 8
  br label %block_.L_4067c5

block_.L_4067c5:                                  ; preds = %block_.L_4068a3, %block_.L_4067b6
  %9853 = phi i64 [ %.pre403, %block_.L_4067b6 ], [ %10095, %block_.L_4068a3 ]
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %CL.i754, align 1
  %9854 = load i64, i64* %RBP.i, align 8
  %9855 = add i64 %9854, -10872
  %9856 = add i64 %9853, 10
  store i64 %9856, i64* %3, align 8
  %9857 = inttoptr i64 %9855 to i32*
  %9858 = load i32, i32* %9857, align 4
  %9859 = zext i32 %9858 to i64
  store i64 %9859, i64* %RAX.i2528, align 8
  %9860 = add i64 %9854, -10868
  %9861 = add i64 %9853, 16
  store i64 %9861, i64* %3, align 8
  %9862 = inttoptr i64 %9860 to i32*
  %9863 = load i32, i32* %9862, align 4
  %9864 = sub i32 %9858, %9863
  %9865 = icmp ult i32 %9858, %9863
  %9866 = zext i1 %9865 to i8
  store i8 %9866, i8* %14, align 1
  %9867 = and i32 %9864, 255
  %9868 = tail call i32 @llvm.ctpop.i32(i32 %9867)
  %9869 = trunc i32 %9868 to i8
  %9870 = and i8 %9869, 1
  %9871 = xor i8 %9870, 1
  store i8 %9871, i8* %21, align 1
  %9872 = xor i32 %9863, %9858
  %9873 = xor i32 %9872, %9864
  %9874 = lshr i32 %9873, 4
  %9875 = trunc i32 %9874 to i8
  %9876 = and i8 %9875, 1
  store i8 %9876, i8* %27, align 1
  %9877 = icmp eq i32 %9864, 0
  %9878 = zext i1 %9877 to i8
  store i8 %9878, i8* %30, align 1
  %9879 = lshr i32 %9864, 31
  %9880 = trunc i32 %9879 to i8
  store i8 %9880, i8* %33, align 1
  %9881 = lshr i32 %9858, 31
  %9882 = lshr i32 %9863, 31
  %9883 = xor i32 %9882, %9881
  %9884 = xor i32 %9879, %9881
  %9885 = add nuw nsw i32 %9884, %9883
  %9886 = icmp eq i32 %9885, 2
  %9887 = zext i1 %9886 to i8
  store i8 %9887, i8* %39, align 1
  %9888 = add i64 %9854, -10989
  %9889 = add i64 %9853, 22
  store i64 %9889, i64* %3, align 8
  %9890 = inttoptr i64 %9888 to i8*
  store i8 0, i8* %9890, align 1
  %9891 = load i64, i64* %3, align 8
  %9892 = add i64 %9891, 22
  %9893 = add i64 %9891, 6
  %9894 = load i8, i8* %33, align 1
  %9895 = icmp ne i8 %9894, 0
  %9896 = load i8, i8* %39, align 1
  %9897 = icmp ne i8 %9896, 0
  %9898 = xor i1 %9895, %9897
  %9899 = select i1 %9898, i64 %9893, i64 %9892
  store i64 %9899, i64* %3, align 8
  br i1 %9898, label %block_4067e1, label %block_.L_4067f1

block_4067e1:                                     ; preds = %block_.L_4067c5
  %9900 = load i64, i64* %RBP.i, align 8
  %9901 = add i64 %9900, -10224
  %9902 = add i64 %9899, 7
  store i64 %9902, i64* %3, align 8
  %9903 = inttoptr i64 %9901 to i32*
  %9904 = load i32, i32* %9903, align 4
  store i8 0, i8* %14, align 1
  %9905 = and i32 %9904, 255
  %9906 = tail call i32 @llvm.ctpop.i32(i32 %9905)
  %9907 = trunc i32 %9906 to i8
  %9908 = and i8 %9907, 1
  %9909 = xor i8 %9908, 1
  store i8 %9909, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9910 = icmp eq i32 %9904, 0
  %9911 = zext i1 %9910 to i8
  store i8 %9911, i8* %30, align 1
  %9912 = lshr i32 %9904, 31
  %9913 = trunc i32 %9912 to i8
  store i8 %9913, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9914 = xor i1 %9910, true
  %9915 = zext i1 %9914 to i8
  store i8 %9915, i8* %AL.i1212, align 1
  %9916 = add i64 %9900, -10989
  %9917 = add i64 %9899, 16
  store i64 %9917, i64* %3, align 8
  %9918 = inttoptr i64 %9916 to i8*
  store i8 %9915, i8* %9918, align 1
  %.pre404 = load i64, i64* %3, align 8
  br label %block_.L_4067f1

block_.L_4067f1:                                  ; preds = %block_.L_4067c5, %block_4067e1
  %9919 = phi i64 [ %9892, %block_.L_4067c5 ], [ %.pre404, %block_4067e1 ]
  %9920 = load i64, i64* %RBP.i, align 8
  %9921 = add i64 %9920, -10989
  %9922 = add i64 %9919, 6
  store i64 %9922, i64* %3, align 8
  %9923 = inttoptr i64 %9921 to i8*
  %9924 = load i8, i8* %9923, align 1
  store i8 %9924, i8* %AL.i1212, align 1
  %9925 = and i8 %9924, 1
  store i8 0, i8* %14, align 1
  %9926 = zext i8 %9925 to i32
  %9927 = tail call i32 @llvm.ctpop.i32(i32 %9926)
  %9928 = trunc i32 %9927 to i8
  %9929 = xor i8 %9928, 1
  store i8 %9929, i8* %21, align 1
  %9930 = xor i8 %9925, 1
  store i8 %9930, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9931 = icmp eq i8 %9930, 0
  %.v569 = select i1 %9931, i64 19, i64 14
  %9932 = add i64 %9919, %.v569
  store i64 %9932, i64* %3, align 8
  br i1 %9931, label %block_.L_406804, label %block_4067ff

block_4067ff:                                     ; preds = %block_.L_4067f1
  %9933 = add i64 %9932, 194
  store i64 %9933, i64* %3, align 8
  br label %block_.L_4068c1

block_.L_406804:                                  ; preds = %block_.L_4067f1
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %9934 = add i64 %9920, -10872
  %9935 = add i64 %9932, 17
  store i64 %9935, i64* %3, align 8
  %9936 = inttoptr i64 %9934 to i32*
  %9937 = load i32, i32* %9936, align 4
  %9938 = sext i32 %9937 to i64
  store i64 %9938, i64* %RCX.i3786, align 8
  %9939 = shl nsw i64 %9938, 2
  %9940 = add i64 %9920, -10864
  %9941 = add i64 %9940, %9939
  %9942 = add i64 %9932, 25
  store i64 %9942, i64* %3, align 8
  %9943 = inttoptr i64 %9941 to i32*
  %9944 = load i32, i32* %9943, align 4
  %9945 = sext i32 %9944 to i64
  %9946 = mul nsw i64 %9945, 76
  store i64 %9946, i64* %RCX.i3786, align 8
  %9947 = lshr i64 %9946, 63
  %9948 = add i64 %9946, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %9948, i64* %RAX.i2528, align 8
  %9949 = icmp ult i64 %9948, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %9950 = icmp ult i64 %9948, %9946
  %9951 = or i1 %9949, %9950
  %9952 = zext i1 %9951 to i8
  store i8 %9952, i8* %14, align 1
  %9953 = trunc i64 %9948 to i32
  %9954 = and i32 %9953, 252
  %9955 = tail call i32 @llvm.ctpop.i32(i32 %9954)
  %9956 = trunc i32 %9955 to i8
  %9957 = and i8 %9956, 1
  %9958 = xor i8 %9957, 1
  store i8 %9958, i8* %21, align 1
  %9959 = xor i64 %9946, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %9960 = xor i64 %9959, %9948
  %9961 = lshr i64 %9960, 4
  %9962 = trunc i64 %9961 to i8
  %9963 = and i8 %9962, 1
  store i8 %9963, i8* %27, align 1
  %9964 = icmp eq i64 %9948, 0
  %9965 = zext i1 %9964 to i8
  store i8 %9965, i8* %30, align 1
  %9966 = lshr i64 %9948, 63
  %9967 = trunc i64 %9966 to i8
  store i8 %9967, i8* %33, align 1
  %9968 = xor i64 %9966, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %9969 = xor i64 %9966, %9947
  %9970 = add nuw nsw i64 %9968, %9969
  %9971 = icmp eq i64 %9970, 2
  %9972 = zext i1 %9971 to i8
  store i8 %9972, i8* %39, align 1
  %9973 = add i64 %9946, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %9974 = add i64 %9932, 36
  store i64 %9974, i64* %3, align 8
  %9975 = inttoptr i64 %9973 to i32*
  %9976 = load i32, i32* %9975, align 4
  store i8 0, i8* %14, align 1
  %9977 = and i32 %9976, 255
  %9978 = tail call i32 @llvm.ctpop.i32(i32 %9977)
  %9979 = trunc i32 %9978 to i8
  %9980 = and i8 %9979, 1
  %9981 = xor i8 %9980, 1
  store i8 %9981, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9982 = icmp eq i32 %9976, 0
  %9983 = zext i1 %9982 to i8
  store i8 %9983, i8* %30, align 1
  %9984 = lshr i32 %9976, 31
  %9985 = trunc i32 %9984 to i8
  store i8 %9985, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v570 = select i1 %9982, i64 42, i64 159
  %9986 = add i64 %9932, %.v570
  store i64 %9986, i64* %3, align 8
  br i1 %9982, label %block_40682e, label %block_.L_4068a3

block_40682e:                                     ; preds = %block_.L_406804
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RDX.i3821, align 8
  %9987 = load i64, i64* %RBP.i, align 8
  %9988 = add i64 %9987, -8068
  %9989 = add i64 %9986, 10
  store i64 %9989, i64* %3, align 8
  %9990 = inttoptr i64 %9988 to i32*
  %9991 = load i32, i32* %9990, align 4
  %9992 = zext i32 %9991 to i64
  store i64 %9992, i64* %RDI.i3360, align 8
  %9993 = add i64 %9987, -10872
  %9994 = add i64 %9986, 17
  store i64 %9994, i64* %3, align 8
  %9995 = inttoptr i64 %9993 to i32*
  %9996 = load i32, i32* %9995, align 4
  %9997 = sext i32 %9996 to i64
  store i64 %9997, i64* %RCX.i3786, align 8
  %9998 = shl nsw i64 %9997, 2
  %9999 = add i64 %9987, -10864
  %10000 = add i64 %9999, %9998
  %10001 = add i64 %9986, 24
  store i64 %10001, i64* %3, align 8
  %10002 = inttoptr i64 %10000 to i32*
  %10003 = load i32, i32* %10002, align 4
  %10004 = zext i32 %10003 to i64
  store i64 %10004, i64* %RSI.i3112.pre-phi, align 8
  %10005 = add i64 %9986, 287490
  %10006 = add i64 %9986, 29
  %10007 = load i64, i64* %6, align 8
  %10008 = add i64 %10007, -8
  %10009 = inttoptr i64 %10008 to i64*
  store i64 %10006, i64* %10009, align 8
  store i64 %10008, i64* %6, align 8
  store i64 %10005, i64* %3, align 8
  %call2_406846 = tail call %struct.Memory* @sub_44cb30.owl_does_attack(%struct.State* nonnull %0, i64 %10005, %struct.Memory* %call2_4067b6)
  %10010 = load i32, i32* %EAX.i3678, align 4
  %10011 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %10012 = and i32 %10010, 255
  %10013 = tail call i32 @llvm.ctpop.i32(i32 %10012)
  %10014 = trunc i32 %10013 to i8
  %10015 = and i8 %10014, 1
  %10016 = xor i8 %10015, 1
  store i8 %10016, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10017 = icmp eq i32 %10010, 0
  %10018 = zext i1 %10017 to i8
  store i8 %10018, i8* %30, align 1
  %10019 = lshr i32 %10010, 31
  %10020 = trunc i32 %10019 to i8
  store i8 %10020, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v571 = select i1 %10017, i64 9, i64 88
  %10021 = add i64 %10011, %.v571
  store i64 %10021, i64* %3, align 8
  br i1 %10017, label %block_406854, label %block_.L_4068a3

block_406854:                                     ; preds = %block_40682e
  %10022 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %10023 = and i32 %10022, 131072
  %10024 = zext i32 %10023 to i64
  store i64 %10024, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit509 = lshr exact i32 %10023, 17
  %10025 = trunc i32 %.lobit509 to i8
  %10026 = xor i8 %10025, 1
  store i8 %10026, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10027 = icmp eq i8 %10026, 0
  %.v572 = select i1 %10027, i64 26, i64 21
  %10028 = add i64 %10021, %.v572
  store i64 %10028, i64* %3, align 8
  br i1 %10027, label %block_.L_40686e, label %block_406869

block_406869:                                     ; preds = %block_406854
  %10029 = add i64 %10028, 48
  store i64 %10029, i64* %3, align 8
  br label %block_.L_406899

block_.L_40686e:                                  ; preds = %block_406854
  store i64 ptrtoint (%G__0x579e85_type* @G__0x579e85 to i64), i64* %RDI.i3360, align 8
  %10030 = load i64, i64* %RBP.i, align 8
  %10031 = add i64 %10030, -10872
  %10032 = add i64 %10028, 17
  store i64 %10032, i64* %3, align 8
  %10033 = inttoptr i64 %10031 to i32*
  %10034 = load i32, i32* %10033, align 4
  %10035 = sext i32 %10034 to i64
  store i64 %10035, i64* %RAX.i2528, align 8
  %10036 = shl nsw i64 %10035, 2
  %10037 = add i64 %10030, -10864
  %10038 = add i64 %10037, %10036
  %10039 = add i64 %10028, 24
  store i64 %10039, i64* %3, align 8
  %10040 = inttoptr i64 %10038 to i32*
  %10041 = load i32, i32* %10040, align 4
  %10042 = zext i32 %10041 to i64
  store i64 %10042, i64* %RSI.i3112.pre-phi, align 8
  %10043 = add i64 %10030, -8068
  %10044 = add i64 %10028, 30
  store i64 %10044, i64* %3, align 8
  %10045 = inttoptr i64 %10043 to i32*
  %10046 = load i32, i32* %10045, align 4
  %10047 = zext i32 %10046 to i64
  store i64 %10047, i64* %RDX.i3821, align 8
  store i8 0, i8* %AL.i1212, align 1
  %10048 = add i64 %10028, 308546
  %10049 = add i64 %10028, 37
  %10050 = load i64, i64* %6, align 8
  %10051 = add i64 %10050, -8
  %10052 = inttoptr i64 %10051 to i64*
  store i64 %10049, i64* %10052, align 8
  store i64 %10051, i64* %6, align 8
  store i64 %10048, i64* %3, align 8
  %call2_40688e = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %10048, %struct.Memory* %call2_4067b6)
  %10053 = load i64, i64* %RBP.i, align 8
  %10054 = add i64 %10053, -10996
  %10055 = load i32, i32* %EAX.i3678, align 4
  %10056 = load i64, i64* %3, align 8
  %10057 = add i64 %10056, 6
  store i64 %10057, i64* %3, align 8
  %10058 = inttoptr i64 %10054 to i32*
  store i32 %10055, i32* %10058, align 4
  %.pre405 = load i64, i64* %3, align 8
  br label %block_.L_406899

block_.L_406899:                                  ; preds = %block_.L_40686e, %block_406869
  %10059 = phi i64 [ %.pre405, %block_.L_40686e ], [ %10029, %block_406869 ]
  %10060 = load i64, i64* %RBP.i, align 8
  %10061 = add i64 %10060, -10224
  %10062 = add i64 %10059, 10
  store i64 %10062, i64* %3, align 8
  %10063 = inttoptr i64 %10061 to i32*
  store i32 0, i32* %10063, align 4
  %.pre406 = load i64, i64* %3, align 8
  br label %block_.L_4068a3

block_.L_4068a3:                                  ; preds = %block_40682e, %block_.L_406804, %block_.L_406899
  %10064 = phi i64 [ %.pre406, %block_.L_406899 ], [ %10021, %block_40682e ], [ %9986, %block_.L_406804 ]
  %10065 = load i64, i64* %RBP.i, align 8
  %10066 = add i64 %10065, -10872
  %10067 = add i64 %10064, 11
  store i64 %10067, i64* %3, align 8
  %10068 = inttoptr i64 %10066 to i32*
  %10069 = load i32, i32* %10068, align 4
  %10070 = add i32 %10069, 1
  %10071 = zext i32 %10070 to i64
  store i64 %10071, i64* %RAX.i2528, align 8
  %10072 = icmp eq i32 %10069, -1
  %10073 = icmp eq i32 %10070, 0
  %10074 = or i1 %10072, %10073
  %10075 = zext i1 %10074 to i8
  store i8 %10075, i8* %14, align 1
  %10076 = and i32 %10070, 255
  %10077 = tail call i32 @llvm.ctpop.i32(i32 %10076)
  %10078 = trunc i32 %10077 to i8
  %10079 = and i8 %10078, 1
  %10080 = xor i8 %10079, 1
  store i8 %10080, i8* %21, align 1
  %10081 = xor i32 %10070, %10069
  %10082 = lshr i32 %10081, 4
  %10083 = trunc i32 %10082 to i8
  %10084 = and i8 %10083, 1
  store i8 %10084, i8* %27, align 1
  %10085 = zext i1 %10073 to i8
  store i8 %10085, i8* %30, align 1
  %10086 = lshr i32 %10070, 31
  %10087 = trunc i32 %10086 to i8
  store i8 %10087, i8* %33, align 1
  %10088 = lshr i32 %10069, 31
  %10089 = xor i32 %10086, %10088
  %10090 = add nuw nsw i32 %10089, %10086
  %10091 = icmp eq i32 %10090, 2
  %10092 = zext i1 %10091 to i8
  store i8 %10092, i8* %39, align 1
  %10093 = add i64 %10064, 20
  store i64 %10093, i64* %3, align 8
  store i32 %10070, i32* %10068, align 4
  %10094 = load i64, i64* %3, align 8
  %10095 = add i64 %10094, -242
  store i64 %10095, i64* %3, align 8
  br label %block_.L_4067c5

block_.L_4068c1:                                  ; preds = %block_40666c, %block_4067ff
  %.pre409.pre = phi i64 [ %9920, %block_4067ff ], [ %.pre409.pre.pre, %block_40666c ]
  %10096 = phi i64 [ %9933, %block_4067ff ], [ %9565, %block_40666c ]
  %MEMORY.133 = phi %struct.Memory* [ %call2_4067b6, %block_4067ff ], [ %call2_406699, %block_40666c ]
  %10097 = add i64 %10096, 5
  store i64 %10097, i64* %3, align 8
  br label %block_.L_4068c6

block_.L_4068c6:                                  ; preds = %block_.L_406662, %block_.L_4068c1
  %.pre409 = phi i64 [ %9472, %block_.L_406662 ], [ %.pre409.pre, %block_.L_4068c1 ]
  %10098 = phi i64 [ %9500, %block_.L_406662 ], [ %10097, %block_.L_4068c1 ]
  %MEMORY.134 = phi %struct.Memory* [ %MEMORY.118, %block_.L_406662 ], [ %MEMORY.133, %block_.L_4068c1 ]
  %10099 = add i64 %10098, 5
  store i64 %10099, i64* %3, align 8
  br label %block_.L_4068cb

block_.L_4068cb:                                  ; preds = %block_.L_4065bc, %block_.L_4068c6
  %10100 = phi i64 [ %9248, %block_.L_4065bc ], [ %10099, %block_.L_4068c6 ]
  %10101 = phi i64 [ %9219, %block_.L_4065bc ], [ %.pre409, %block_.L_4068c6 ]
  %MEMORY.135 = phi %struct.Memory* [ %MEMORY.118, %block_.L_4065bc ], [ %MEMORY.134, %block_.L_4068c6 ]
  %10102 = add i64 %10101, -10224
  %10103 = add i64 %10100, 7
  store i64 %10103, i64* %3, align 8
  %10104 = inttoptr i64 %10102 to i32*
  %10105 = load i32, i32* %10104, align 4
  store i8 0, i8* %14, align 1
  %10106 = and i32 %10105, 255
  %10107 = tail call i32 @llvm.ctpop.i32(i32 %10106)
  %10108 = trunc i32 %10107 to i8
  %10109 = and i8 %10108, 1
  %10110 = xor i8 %10109, 1
  store i8 %10110, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10111 = icmp eq i32 %10105, 0
  %10112 = zext i1 %10111 to i8
  store i8 %10112, i8* %30, align 1
  %10113 = lshr i32 %10105, 31
  %10114 = trunc i32 %10113 to i8
  store i8 %10114, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v563 = select i1 %10111, i64 13, i64 36
  %10115 = add i64 %10100, %.v563
  store i64 %10115, i64* %3, align 8
  %10116 = add i64 %10101, -8068
  br i1 %10111, label %block_4068d8, label %block_.L_4068ef

block_4068d8:                                     ; preds = %block_.L_4068cb
  %10117 = add i64 %10115, 7
  store i64 %10117, i64* %3, align 8
  %10118 = inttoptr i64 %10116 to i32*
  %10119 = load i32, i32* %10118, align 4
  %10120 = sext i32 %10119 to i64
  store i64 %10120, i64* %RAX.i2528, align 8
  %10121 = shl nsw i64 %10120, 2
  %10122 = add i64 %10101, -3248
  %10123 = add i64 %10122, %10121
  %10124 = add i64 %10115, 18
  store i64 %10124, i64* %3, align 8
  %10125 = inttoptr i64 %10123 to i32*
  store i32 0, i32* %10125, align 4
  %10126 = load i64, i64* %3, align 8
  %10127 = add i64 %10126, 89
  store i64 %10127, i64* %3, align 8
  br label %block_.L_406943

block_.L_4068ef:                                  ; preds = %block_.L_4068cb
  %10128 = add i64 %10115, 6
  store i64 %10128, i64* %3, align 8
  %10129 = inttoptr i64 %10116 to i32*
  %10130 = load i32, i32* %10129, align 4
  %10131 = zext i32 %10130 to i64
  store i64 %10131, i64* %RAX.i2528, align 8
  %10132 = add i64 %10101, -16
  %10133 = add i64 %10115, 10
  store i64 %10133, i64* %3, align 8
  %10134 = inttoptr i64 %10132 to i64*
  %10135 = load i64, i64* %10134, align 8
  store i64 %10135, i64* %RCX.i3786, align 8
  %10136 = add i64 %10115, 12
  store i64 %10136, i64* %3, align 8
  %10137 = inttoptr i64 %10135 to i32*
  store i32 %10130, i32* %10137, align 4
  %10138 = load i64, i64* %3, align 8
  %10139 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %10140 = and i32 %10139, 131072
  %10141 = zext i32 %10140 to i64
  store i64 %10141, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit508 = lshr exact i32 %10140, 17
  %10142 = trunc i32 %.lobit508 to i8
  %10143 = xor i8 %10142, 1
  store i8 %10143, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10144 = icmp eq i8 %10143, 0
  %.v564 = select i1 %10144, i64 26, i64 21
  %10145 = add i64 %10138, %.v564
  store i64 %10145, i64* %3, align 8
  br i1 %10144, label %block_.L_406915, label %block_406910

block_406910:                                     ; preds = %block_.L_4068ef
  %10146 = add i64 %10145, 34
  store i64 %10146, i64* %3, align 8
  br label %block_.L_406932

block_.L_406915:                                  ; preds = %block_.L_4068ef
  store i64 ptrtoint (%G__0x579eb0_type* @G__0x579eb0 to i64), i64* %RDI.i3360, align 8
  %10147 = load i64, i64* %RBP.i, align 8
  %10148 = add i64 %10147, -8068
  %10149 = add i64 %10145, 16
  store i64 %10149, i64* %3, align 8
  %10150 = inttoptr i64 %10148 to i32*
  %10151 = load i32, i32* %10150, align 4
  %10152 = zext i32 %10151 to i64
  store i64 %10152, i64* %RSI.i3112.pre-phi, align 8
  store i8 0, i8* %AL.i1212, align 1
  %10153 = add i64 %10145, 308379
  %10154 = add i64 %10145, 23
  %10155 = load i64, i64* %6, align 8
  %10156 = add i64 %10155, -8
  %10157 = inttoptr i64 %10156 to i64*
  store i64 %10154, i64* %10157, align 8
  store i64 %10156, i64* %6, align 8
  store i64 %10153, i64* %3, align 8
  %call2_406927 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %10153, %struct.Memory* %MEMORY.135)
  %10158 = load i64, i64* %RBP.i, align 8
  %10159 = add i64 %10158, -11000
  %10160 = load i32, i32* %EAX.i3678, align 4
  %10161 = load i64, i64* %3, align 8
  %10162 = add i64 %10161, 6
  store i64 %10162, i64* %3, align 8
  %10163 = inttoptr i64 %10159 to i32*
  store i32 %10160, i32* %10163, align 4
  %.pre410 = load i64, i64* %3, align 8
  br label %block_.L_406932

block_.L_406932:                                  ; preds = %block_.L_406915, %block_406910
  %10164 = phi i64 [ %.pre410, %block_.L_406915 ], [ %10146, %block_406910 ]
  %MEMORY.136 = phi %struct.Memory* [ %call2_406927, %block_.L_406915 ], [ %MEMORY.135, %block_406910 ]
  %10165 = load i64, i64* %RBP.i, align 8
  %10166 = add i64 %10165, -4
  %10167 = add i64 %10164, 7
  store i64 %10167, i64* %3, align 8
  %10168 = inttoptr i64 %10166 to i32*
  store i32 1, i32* %10168, align 4
  %10169 = load i64, i64* %3, align 8
  %10170 = add i64 %10169, 1591
  store i64 %10170, i64* %3, align 8
  br label %block_.L_406f70

block_.L_406943:                                  ; preds = %block_4068d8, %block_.L_4065a5
  %storemerge244 = phi i64 [ %9191, %block_.L_4065a5 ], [ %10127, %block_4068d8 ]
  %MEMORY.137 = phi %struct.Memory* [ %MEMORY.118, %block_.L_4065a5 ], [ %MEMORY.135, %block_4068d8 ]
  %10171 = add i64 %storemerge244, -1329
  %10172 = add i64 %storemerge244, 5
  store i64 %10172, i64* %3, align 8
  %.pre383 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406412

block_.L_406952:                                  ; preds = %block_.L_406daf, %block_4064b8
  %10173 = phi i64 [ %.pre385, %block_4064b8 ], [ %11480, %block_.L_406daf ]
  %MEMORY.138 = phi %struct.Memory* [ %MEMORY.118, %block_4064b8 ], [ %MEMORY.157, %block_.L_406daf ]
  %10174 = load i64, i64* %RBP.i, align 8
  %10175 = add i64 %10174, -8072
  %10176 = add i64 %10173, 10
  store i64 %10176, i64* %3, align 8
  %10177 = inttoptr i64 %10175 to i32*
  %10178 = load i32, i32* %10177, align 4
  %10179 = add i32 %10178, -400
  %10180 = icmp ult i32 %10178, 400
  %10181 = zext i1 %10180 to i8
  store i8 %10181, i8* %14, align 1
  %10182 = and i32 %10179, 255
  %10183 = tail call i32 @llvm.ctpop.i32(i32 %10182)
  %10184 = trunc i32 %10183 to i8
  %10185 = and i8 %10184, 1
  %10186 = xor i8 %10185, 1
  store i8 %10186, i8* %21, align 1
  %10187 = xor i32 %10178, 16
  %10188 = xor i32 %10187, %10179
  %10189 = lshr i32 %10188, 4
  %10190 = trunc i32 %10189 to i8
  %10191 = and i8 %10190, 1
  store i8 %10191, i8* %27, align 1
  %10192 = icmp eq i32 %10179, 0
  %10193 = zext i1 %10192 to i8
  store i8 %10193, i8* %30, align 1
  %10194 = lshr i32 %10179, 31
  %10195 = trunc i32 %10194 to i8
  store i8 %10195, i8* %33, align 1
  %10196 = lshr i32 %10178, 31
  %10197 = xor i32 %10194, %10196
  %10198 = add nuw nsw i32 %10197, %10196
  %10199 = icmp eq i32 %10198, 2
  %10200 = zext i1 %10199 to i8
  store i8 %10200, i8* %39, align 1
  %10201 = icmp ne i8 %10195, 0
  %10202 = xor i1 %10201, %10199
  %.v578 = select i1 %10202, i64 16, i64 1137
  %10203 = add i64 %10173, %.v578
  store i64 %10203, i64* %3, align 8
  br i1 %10202, label %block_406962, label %block_.L_406dc3

block_406962:                                     ; preds = %block_.L_406952
  %10204 = add i64 %10174, -10880
  %10205 = add i64 %10203, 10
  store i64 %10205, i64* %3, align 8
  %10206 = inttoptr i64 %10204 to i32*
  store i32 0, i32* %10206, align 4
  %10207 = load i64, i64* %RBP.i, align 8
  %10208 = add i64 %10207, -10884
  %10209 = load i64, i64* %3, align 8
  %10210 = add i64 %10209, 10
  store i64 %10210, i64* %3, align 8
  %10211 = inttoptr i64 %10208 to i32*
  store i32 0, i32* %10211, align 4
  %10212 = load i64, i64* %RBP.i, align 8
  %10213 = add i64 %10212, -8072
  %10214 = load i64, i64* %3, align 8
  %10215 = add i64 %10214, 7
  store i64 %10215, i64* %3, align 8
  %10216 = inttoptr i64 %10213 to i32*
  %10217 = load i32, i32* %10216, align 4
  %10218 = sext i32 %10217 to i64
  store i64 %10218, i64* %RAX.i2528, align 8
  %10219 = add nsw i64 %10218, 12099168
  %10220 = add i64 %10214, 15
  store i64 %10220, i64* %3, align 8
  %10221 = inttoptr i64 %10219 to i8*
  %10222 = load i8, i8* %10221, align 1
  %10223 = zext i8 %10222 to i64
  store i64 %10223, i64* %RCX.i3786, align 8
  %10224 = zext i8 %10222 to i32
  store i8 0, i8* %14, align 1
  %10225 = tail call i32 @llvm.ctpop.i32(i32 %10224)
  %10226 = trunc i32 %10225 to i8
  %10227 = and i8 %10226, 1
  %10228 = xor i8 %10227, 1
  store i8 %10228, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10229 = icmp eq i8 %10222, 0
  %10230 = zext i1 %10229 to i8
  store i8 %10230, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v588 = select i1 %10229, i64 24, i64 45
  %10231 = add i64 %10214, %.v588
  store i64 %10231, i64* %3, align 8
  br i1 %10229, label %block_40698e, label %block_.L_406daf

block_40698e:                                     ; preds = %block_406962
  %10232 = add i64 %10231, 7
  store i64 %10232, i64* %3, align 8
  %10233 = load i32, i32* %10216, align 4
  %10234 = sext i32 %10233 to i64
  store i64 %10234, i64* %RAX.i2528, align 8
  %10235 = shl nsw i64 %10234, 2
  %10236 = add i64 %10212, -1648
  %10237 = add i64 %10236, %10235
  %10238 = add i64 %10231, 15
  store i64 %10238, i64* %3, align 8
  %10239 = inttoptr i64 %10237 to i32*
  %10240 = load i32, i32* %10239, align 4
  %10241 = add i32 %10240, 1
  %10242 = icmp ne i32 %10240, -1
  %10243 = zext i1 %10242 to i8
  store i8 %10243, i8* %14, align 1
  %10244 = and i32 %10241, 255
  %10245 = tail call i32 @llvm.ctpop.i32(i32 %10244)
  %10246 = trunc i32 %10245 to i8
  %10247 = and i8 %10246, 1
  %10248 = xor i8 %10247, 1
  store i8 %10248, i8* %21, align 1
  %10249 = xor i32 %10240, 16
  %10250 = xor i32 %10249, %10241
  %10251 = lshr i32 %10250, 4
  %10252 = trunc i32 %10251 to i8
  %10253 = and i8 %10252, 1
  store i8 %10253, i8* %27, align 1
  %10254 = icmp eq i32 %10241, 0
  %10255 = zext i1 %10254 to i8
  store i8 %10255, i8* %30, align 1
  %10256 = lshr i32 %10241, 31
  %10257 = trunc i32 %10256 to i8
  store i8 %10257, i8* %33, align 1
  %10258 = lshr i32 %10240, 31
  %10259 = xor i32 %10258, 1
  %10260 = xor i32 %10256, %10258
  %10261 = add nuw nsw i32 %10260, %10259
  %10262 = icmp eq i32 %10261, 2
  %10263 = zext i1 %10262 to i8
  store i8 %10263, i8* %39, align 1
  %.v589 = select i1 %10254, i64 26, i64 21
  %10264 = add i64 %10231, %.v589
  store i64 %10264, i64* %3, align 8
  br i1 %10254, label %block_.L_4069a8, label %block_.L_406daf

block_.L_4069a8:                                  ; preds = %block_40698e
  %10265 = add i64 %10212, -10876
  %10266 = add i64 %10264, 10
  store i64 %10266, i64* %3, align 8
  %10267 = inttoptr i64 %10265 to i32*
  store i32 0, i32* %10267, align 4
  %10268 = load i64, i64* %RBP.i, align 8
  %10269 = add i64 %10268, -40
  %10270 = load i64, i64* %3, align 8
  %10271 = add i64 %10270, 7
  store i64 %10271, i64* %3, align 8
  %10272 = inttoptr i64 %10269 to i32*
  store i32 0, i32* %10272, align 4
  %.pre389 = load i64, i64* %3, align 8
  br label %block_.L_4069b9

block_.L_4069b9:                                  ; preds = %block_.L_406aab, %block_.L_4069a8
  %10273 = phi i64 [ %10664, %block_.L_406aab ], [ %.pre389, %block_.L_4069a8 ]
  %10274 = load i64, i64* %RBP.i, align 8
  %10275 = add i64 %10274, -40
  %10276 = add i64 %10273, 4
  store i64 %10276, i64* %3, align 8
  %10277 = inttoptr i64 %10275 to i32*
  %10278 = load i32, i32* %10277, align 4
  %10279 = add i32 %10278, -4
  %10280 = icmp ult i32 %10278, 4
  %10281 = zext i1 %10280 to i8
  store i8 %10281, i8* %14, align 1
  %10282 = and i32 %10279, 255
  %10283 = tail call i32 @llvm.ctpop.i32(i32 %10282)
  %10284 = trunc i32 %10283 to i8
  %10285 = and i8 %10284, 1
  %10286 = xor i8 %10285, 1
  store i8 %10286, i8* %21, align 1
  %10287 = xor i32 %10279, %10278
  %10288 = lshr i32 %10287, 4
  %10289 = trunc i32 %10288 to i8
  %10290 = and i8 %10289, 1
  store i8 %10290, i8* %27, align 1
  %10291 = icmp eq i32 %10279, 0
  %10292 = zext i1 %10291 to i8
  store i8 %10292, i8* %30, align 1
  %10293 = lshr i32 %10279, 31
  %10294 = trunc i32 %10293 to i8
  store i8 %10294, i8* %33, align 1
  %10295 = lshr i32 %10278, 31
  %10296 = xor i32 %10293, %10295
  %10297 = add nuw nsw i32 %10296, %10295
  %10298 = icmp eq i32 %10297, 2
  %10299 = zext i1 %10298 to i8
  store i8 %10299, i8* %39, align 1
  %10300 = icmp ne i8 %10294, 0
  %10301 = xor i1 %10300, %10298
  %.v590 = select i1 %10301, i64 10, i64 256
  %10302 = add i64 %10273, %.v590
  store i64 %10302, i64* %3, align 8
  br i1 %10301, label %block_4069c3, label %block_.L_406ab9.loopexit

block_4069c3:                                     ; preds = %block_.L_4069b9
  %10303 = add i64 %10274, -8072
  %10304 = add i64 %10302, 6
  store i64 %10304, i64* %3, align 8
  %10305 = inttoptr i64 %10303 to i32*
  %10306 = load i32, i32* %10305, align 4
  %10307 = zext i32 %10306 to i64
  store i64 %10307, i64* %RAX.i2528, align 8
  %10308 = add i64 %10302, 10
  store i64 %10308, i64* %3, align 8
  %10309 = load i32, i32* %10277, align 4
  %10310 = sext i32 %10309 to i64
  store i64 %10310, i64* %RCX.i3786, align 8
  %10311 = shl nsw i64 %10310, 2
  %10312 = add nsw i64 %10311, 8053168
  %10313 = add i64 %10302, 17
  store i64 %10313, i64* %3, align 8
  %10314 = inttoptr i64 %10312 to i32*
  %10315 = load i32, i32* %10314, align 4
  %10316 = add i32 %10315, %10306
  %10317 = zext i32 %10316 to i64
  store i64 %10317, i64* %RAX.i2528, align 8
  %10318 = icmp ult i32 %10316, %10306
  %10319 = icmp ult i32 %10316, %10315
  %10320 = or i1 %10318, %10319
  %10321 = zext i1 %10320 to i8
  store i8 %10321, i8* %14, align 1
  %10322 = and i32 %10316, 255
  %10323 = tail call i32 @llvm.ctpop.i32(i32 %10322)
  %10324 = trunc i32 %10323 to i8
  %10325 = and i8 %10324, 1
  %10326 = xor i8 %10325, 1
  store i8 %10326, i8* %21, align 1
  %10327 = xor i32 %10315, %10306
  %10328 = xor i32 %10327, %10316
  %10329 = lshr i32 %10328, 4
  %10330 = trunc i32 %10329 to i8
  %10331 = and i8 %10330, 1
  store i8 %10331, i8* %27, align 1
  %10332 = icmp eq i32 %10316, 0
  %10333 = zext i1 %10332 to i8
  store i8 %10333, i8* %30, align 1
  %10334 = lshr i32 %10316, 31
  %10335 = trunc i32 %10334 to i8
  store i8 %10335, i8* %33, align 1
  %10336 = lshr i32 %10306, 31
  %10337 = lshr i32 %10315, 31
  %10338 = xor i32 %10334, %10336
  %10339 = xor i32 %10334, %10337
  %10340 = add nuw nsw i32 %10338, %10339
  %10341 = icmp eq i32 %10340, 2
  %10342 = zext i1 %10341 to i8
  store i8 %10342, i8* %39, align 1
  %10343 = add i64 %10274, -10888
  %10344 = add i64 %10302, 23
  store i64 %10344, i64* %3, align 8
  %10345 = inttoptr i64 %10343 to i32*
  store i32 %10316, i32* %10345, align 4
  %10346 = load i64, i64* %RBP.i, align 8
  %10347 = add i64 %10346, -10888
  %10348 = load i64, i64* %3, align 8
  %10349 = add i64 %10348, 7
  store i64 %10349, i64* %3, align 8
  %10350 = inttoptr i64 %10347 to i32*
  %10351 = load i32, i32* %10350, align 4
  %10352 = sext i32 %10351 to i64
  store i64 %10352, i64* %RCX.i3786, align 8
  %10353 = add nsw i64 %10352, 12099168
  %10354 = add i64 %10348, 15
  store i64 %10354, i64* %3, align 8
  %10355 = inttoptr i64 %10353 to i8*
  %10356 = load i8, i8* %10355, align 1
  %10357 = zext i8 %10356 to i64
  store i64 %10357, i64* %RAX.i2528, align 8
  %10358 = zext i8 %10356 to i32
  %10359 = add nsw i32 %10358, -3
  %10360 = icmp ult i8 %10356, 3
  %10361 = zext i1 %10360 to i8
  store i8 %10361, i8* %14, align 1
  %10362 = and i32 %10359, 255
  %10363 = tail call i32 @llvm.ctpop.i32(i32 %10362)
  %10364 = trunc i32 %10363 to i8
  %10365 = and i8 %10364, 1
  %10366 = xor i8 %10365, 1
  store i8 %10366, i8* %21, align 1
  %10367 = xor i32 %10359, %10358
  %10368 = lshr i32 %10367, 4
  %10369 = trunc i32 %10368 to i8
  %10370 = and i8 %10369, 1
  store i8 %10370, i8* %27, align 1
  %10371 = icmp eq i32 %10359, 0
  %10372 = zext i1 %10371 to i8
  store i8 %10372, i8* %30, align 1
  %10373 = lshr i32 %10359, 31
  %10374 = trunc i32 %10373 to i8
  store i8 %10374, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v610 = select i1 %10371, i64 24, i64 29
  %10375 = add i64 %10348, %.v610
  store i64 %10375, i64* %3, align 8
  br i1 %10371, label %block_4069f2, label %block_.L_4069f7

block_4069f2:                                     ; preds = %block_4069c3
  %10376 = add i64 %10375, 185
  br label %block_.L_406aab

block_.L_4069f7:                                  ; preds = %block_4069c3
  %10377 = add i64 %10375, 7
  store i64 %10377, i64* %3, align 8
  %10378 = load i32, i32* %10350, align 4
  %10379 = sext i32 %10378 to i64
  store i64 %10379, i64* %RAX.i2528, align 8
  %10380 = add nsw i64 %10379, 12099168
  %10381 = add i64 %10375, 15
  store i64 %10381, i64* %3, align 8
  %10382 = inttoptr i64 %10380 to i8*
  %10383 = load i8, i8* %10382, align 1
  %10384 = zext i8 %10383 to i64
  store i64 %10384, i64* %RCX.i3786, align 8
  %10385 = zext i8 %10383 to i32
  %10386 = add i64 %10346, -44
  %10387 = add i64 %10375, 18
  store i64 %10387, i64* %3, align 8
  %10388 = inttoptr i64 %10386 to i32*
  %10389 = load i32, i32* %10388, align 4
  %10390 = sub i32 %10385, %10389
  %10391 = icmp ult i32 %10385, %10389
  %10392 = zext i1 %10391 to i8
  store i8 %10392, i8* %14, align 1
  %10393 = and i32 %10390, 255
  %10394 = tail call i32 @llvm.ctpop.i32(i32 %10393)
  %10395 = trunc i32 %10394 to i8
  %10396 = and i8 %10395, 1
  %10397 = xor i8 %10396, 1
  store i8 %10397, i8* %21, align 1
  %10398 = xor i32 %10389, %10385
  %10399 = xor i32 %10398, %10390
  %10400 = lshr i32 %10399, 4
  %10401 = trunc i32 %10400 to i8
  %10402 = and i8 %10401, 1
  store i8 %10402, i8* %27, align 1
  %10403 = icmp eq i32 %10390, 0
  %10404 = zext i1 %10403 to i8
  store i8 %10404, i8* %30, align 1
  %10405 = lshr i32 %10390, 31
  %10406 = trunc i32 %10405 to i8
  store i8 %10406, i8* %33, align 1
  %10407 = lshr i32 %10389, 31
  %10408 = add nuw nsw i32 %10405, %10407
  %10409 = icmp eq i32 %10408, 2
  %10410 = zext i1 %10409 to i8
  store i8 %10410, i8* %39, align 1
  %.v611 = select i1 %10403, i64 24, i64 175
  %10411 = add i64 %10375, %.v611
  store i64 %10411, i64* %3, align 8
  br i1 %10403, label %block_406a0f, label %block_.L_406aa6

block_406a0f:                                     ; preds = %block_.L_4069f7
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %10412 = add i64 %10411, 17
  store i64 %10412, i64* %3, align 8
  %10413 = load i32, i32* %10350, align 4
  %10414 = sext i32 %10413 to i64
  %10415 = mul nsw i64 %10414, 76
  store i64 %10415, i64* %RCX.i3786, align 8
  %10416 = lshr i64 %10415, 63
  %10417 = add i64 %10415, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %10417, i64* %RAX.i2528, align 8
  %10418 = icmp ult i64 %10417, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10419 = icmp ult i64 %10417, %10415
  %10420 = or i1 %10418, %10419
  %10421 = zext i1 %10420 to i8
  store i8 %10421, i8* %14, align 1
  %10422 = trunc i64 %10417 to i32
  %10423 = and i32 %10422, 252
  %10424 = tail call i32 @llvm.ctpop.i32(i32 %10423)
  %10425 = trunc i32 %10424 to i8
  %10426 = and i8 %10425, 1
  %10427 = xor i8 %10426, 1
  store i8 %10427, i8* %21, align 1
  %10428 = xor i64 %10415, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10429 = xor i64 %10428, %10417
  %10430 = lshr i64 %10429, 4
  %10431 = trunc i64 %10430 to i8
  %10432 = and i8 %10431, 1
  store i8 %10432, i8* %27, align 1
  %10433 = icmp eq i64 %10417, 0
  %10434 = zext i1 %10433 to i8
  store i8 %10434, i8* %30, align 1
  %10435 = lshr i64 %10417, 63
  %10436 = trunc i64 %10435 to i8
  store i8 %10436, i8* %33, align 1
  %10437 = xor i64 %10435, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %10438 = xor i64 %10435, %10416
  %10439 = add nuw nsw i64 %10437, %10438
  %10440 = icmp eq i64 %10439, 2
  %10441 = zext i1 %10440 to i8
  store i8 %10441, i8* %39, align 1
  %10442 = add i64 %10415, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %10443 = add i64 %10411, 28
  store i64 %10443, i64* %3, align 8
  %10444 = inttoptr i64 %10442 to i32*
  %10445 = load i32, i32* %10444, align 4
  %10446 = add i32 %10445, -1
  %10447 = icmp eq i32 %10445, 0
  %10448 = zext i1 %10447 to i8
  store i8 %10448, i8* %14, align 1
  %10449 = and i32 %10446, 255
  %10450 = tail call i32 @llvm.ctpop.i32(i32 %10449)
  %10451 = trunc i32 %10450 to i8
  %10452 = and i8 %10451, 1
  %10453 = xor i8 %10452, 1
  store i8 %10453, i8* %21, align 1
  %10454 = xor i32 %10446, %10445
  %10455 = lshr i32 %10454, 4
  %10456 = trunc i32 %10455 to i8
  %10457 = and i8 %10456, 1
  store i8 %10457, i8* %27, align 1
  %10458 = icmp eq i32 %10446, 0
  %10459 = zext i1 %10458 to i8
  store i8 %10459, i8* %30, align 1
  %10460 = lshr i32 %10446, 31
  %10461 = trunc i32 %10460 to i8
  store i8 %10461, i8* %33, align 1
  %10462 = lshr i32 %10445, 31
  %10463 = xor i32 %10460, %10462
  %10464 = add nuw nsw i32 %10463, %10462
  %10465 = icmp eq i32 %10464, 2
  %10466 = zext i1 %10465 to i8
  store i8 %10466, i8* %39, align 1
  %.v612 = select i1 %10458, i64 151, i64 34
  %10467 = add i64 %10411, %.v612
  store i64 %10467, i64* %3, align 8
  br i1 %10458, label %block_.L_406aa6, label %block_406a31

block_406a31:                                     ; preds = %block_406a0f
  %10468 = load i64, i64* %RBP.i, align 8
  %10469 = add i64 %10468, -36
  %10470 = add i64 %10467, 4
  store i64 %10470, i64* %3, align 8
  %10471 = inttoptr i64 %10469 to i32*
  %10472 = load i32, i32* %10471, align 4
  store i8 0, i8* %14, align 1
  %10473 = and i32 %10472, 255
  %10474 = tail call i32 @llvm.ctpop.i32(i32 %10473)
  %10475 = trunc i32 %10474 to i8
  %10476 = and i8 %10475, 1
  %10477 = xor i8 %10476, 1
  store i8 %10477, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10478 = icmp eq i32 %10472, 0
  %10479 = zext i1 %10478 to i8
  store i8 %10479, i8* %30, align 1
  %10480 = lshr i32 %10472, 31
  %10481 = trunc i32 %10480 to i8
  store i8 %10481, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v613 = select i1 %10478, i64 10, i64 47
  %10482 = add i64 %10467, %.v613
  store i64 %10482, i64* %3, align 8
  br i1 %10478, label %block_406a3b, label %block_406a31.block_.L_406a60_crit_edge

block_406a31.block_.L_406a60_crit_edge:           ; preds = %block_406a31
  %.pre497 = add i64 %10468, -10888
  %.pre499 = inttoptr i64 %.pre497 to i32*
  br label %block_.L_406a60

block_406a3b:                                     ; preds = %block_406a31
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %10483 = add i64 %10468, -10888
  %10484 = add i64 %10482, 17
  store i64 %10484, i64* %3, align 8
  %10485 = inttoptr i64 %10483 to i32*
  %10486 = load i32, i32* %10485, align 4
  %10487 = sext i32 %10486 to i64
  %10488 = mul nsw i64 %10487, 380
  store i64 %10488, i64* %RCX.i3786, align 8
  %10489 = lshr i64 %10488, 63
  %10490 = add i64 %10488, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %10490, i64* %RAX.i2528, align 8
  %10491 = icmp ult i64 %10490, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %10492 = icmp ult i64 %10490, %10488
  %10493 = or i1 %10491, %10492
  %10494 = zext i1 %10493 to i8
  store i8 %10494, i8* %14, align 1
  %10495 = trunc i64 %10490 to i32
  %10496 = and i32 %10495, 252
  %10497 = tail call i32 @llvm.ctpop.i32(i32 %10496)
  %10498 = trunc i32 %10497 to i8
  %10499 = and i8 %10498, 1
  %10500 = xor i8 %10499, 1
  store i8 %10500, i8* %21, align 1
  %10501 = xor i64 %10488, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %10502 = xor i64 %10501, %10490
  %10503 = lshr i64 %10502, 4
  %10504 = trunc i64 %10503 to i8
  %10505 = and i8 %10504, 1
  store i8 %10505, i8* %27, align 1
  %10506 = icmp eq i64 %10490, 0
  %10507 = zext i1 %10506 to i8
  store i8 %10507, i8* %30, align 1
  %10508 = lshr i64 %10490, 63
  %10509 = trunc i64 %10508 to i8
  store i8 %10509, i8* %33, align 1
  %10510 = xor i64 %10508, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %10511 = xor i64 %10508, %10489
  %10512 = add nuw nsw i64 %10510, %10511
  %10513 = icmp eq i64 %10512, 2
  %10514 = zext i1 %10513 to i8
  store i8 %10514, i8* %39, align 1
  %10515 = add i64 %10488, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 56)
  %10516 = add i64 %10482, 31
  store i64 %10516, i64* %3, align 8
  %10517 = inttoptr i64 %10515 to i32*
  %10518 = load i32, i32* %10517, align 4
  store i8 0, i8* %14, align 1
  %10519 = and i32 %10518, 255
  %10520 = tail call i32 @llvm.ctpop.i32(i32 %10519)
  %10521 = trunc i32 %10520 to i8
  %10522 = and i8 %10521, 1
  %10523 = xor i8 %10522, 1
  store i8 %10523, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10524 = icmp eq i32 %10518, 0
  %10525 = zext i1 %10524 to i8
  store i8 %10525, i8* %30, align 1
  %10526 = lshr i32 %10518, 31
  %10527 = trunc i32 %10526 to i8
  store i8 %10527, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v615 = select i1 %10524, i64 107, i64 37
  %10528 = add i64 %10482, %.v615
  store i64 %10528, i64* %3, align 8
  br i1 %10524, label %block_.L_406aa6, label %block_.L_406a60

block_.L_406a60:                                  ; preds = %block_406a31.block_.L_406a60_crit_edge, %block_406a3b
  %.pre-phi500 = phi i32* [ %.pre499, %block_406a31.block_.L_406a60_crit_edge ], [ %10485, %block_406a3b ]
  %10529 = phi i64 [ %10482, %block_406a31.block_.L_406a60_crit_edge ], [ %10528, %block_406a3b ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %10530 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10530, i64* %RCX.i3786, align 8
  %10531 = add i64 %10529, 25
  store i64 %10531, i64* %3, align 8
  %10532 = load i32, i32* %.pre-phi500, align 4
  %10533 = sext i32 %10532 to i64
  %10534 = mul nsw i64 %10533, 76
  store i64 %10534, i64* %RDX.i3821, align 8
  %10535 = lshr i64 %10534, 63
  %10536 = add i64 %10534, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %10536, i64* %RAX.i2528, align 8
  %10537 = icmp ult i64 %10536, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10538 = icmp ult i64 %10536, %10534
  %10539 = or i1 %10537, %10538
  %10540 = zext i1 %10539 to i8
  store i8 %10540, i8* %14, align 1
  %10541 = trunc i64 %10536 to i32
  %10542 = and i32 %10541, 252
  %10543 = tail call i32 @llvm.ctpop.i32(i32 %10542)
  %10544 = trunc i32 %10543 to i8
  %10545 = and i8 %10544, 1
  %10546 = xor i8 %10545, 1
  store i8 %10546, i8* %21, align 1
  %10547 = xor i64 %10534, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10548 = xor i64 %10547, %10536
  %10549 = lshr i64 %10548, 4
  %10550 = trunc i64 %10549 to i8
  %10551 = and i8 %10550, 1
  store i8 %10551, i8* %27, align 1
  %10552 = icmp eq i64 %10536, 0
  %10553 = zext i1 %10552 to i8
  store i8 %10553, i8* %30, align 1
  %10554 = lshr i64 %10536, 63
  %10555 = trunc i64 %10554 to i8
  store i8 %10555, i8* %33, align 1
  %10556 = xor i64 %10554, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %10557 = xor i64 %10554, %10535
  %10558 = add nuw nsw i64 %10556, %10557
  %10559 = icmp eq i64 %10558, 2
  %10560 = zext i1 %10559 to i8
  store i8 %10560, i8* %39, align 1
  %10561 = add i64 %10534, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %10562 = add i64 %10529, 36
  store i64 %10562, i64* %3, align 8
  %10563 = inttoptr i64 %10561 to i32*
  %10564 = load i32, i32* %10563, align 4
  %10565 = sext i32 %10564 to i64
  %10566 = mul nsw i64 %10565, 104
  store i64 %10566, i64* %RAX.i2528, align 8
  %10567 = lshr i64 %10566, 63
  %10568 = load i64, i64* %RCX.i3786, align 8
  %10569 = add i64 %10566, %10568
  store i64 %10569, i64* %RCX.i3786, align 8
  %10570 = icmp ult i64 %10569, %10568
  %10571 = icmp ult i64 %10569, %10566
  %10572 = or i1 %10570, %10571
  %10573 = zext i1 %10572 to i8
  store i8 %10573, i8* %14, align 1
  %10574 = trunc i64 %10569 to i32
  %10575 = and i32 %10574, 255
  %10576 = tail call i32 @llvm.ctpop.i32(i32 %10575)
  %10577 = trunc i32 %10576 to i8
  %10578 = and i8 %10577, 1
  %10579 = xor i8 %10578, 1
  store i8 %10579, i8* %21, align 1
  %10580 = xor i64 %10566, %10568
  %10581 = xor i64 %10580, %10569
  %10582 = lshr i64 %10581, 4
  %10583 = trunc i64 %10582 to i8
  %10584 = and i8 %10583, 1
  store i8 %10584, i8* %27, align 1
  %10585 = icmp eq i64 %10569, 0
  %10586 = zext i1 %10585 to i8
  store i8 %10586, i8* %30, align 1
  %10587 = lshr i64 %10569, 63
  %10588 = trunc i64 %10587 to i8
  store i8 %10588, i8* %33, align 1
  %10589 = lshr i64 %10568, 63
  %10590 = xor i64 %10587, %10589
  %10591 = xor i64 %10587, %10567
  %10592 = add nuw nsw i64 %10590, %10591
  %10593 = icmp eq i64 %10592, 2
  %10594 = zext i1 %10593 to i8
  store i8 %10594, i8* %39, align 1
  %10595 = add i64 %10569, 60
  %10596 = add i64 %10529, 47
  store i64 %10596, i64* %3, align 8
  %10597 = inttoptr i64 %10595 to i32*
  %10598 = load i32, i32* %10597, align 4
  %10599 = add i32 %10598, -5
  %10600 = icmp ult i32 %10598, 5
  %10601 = zext i1 %10600 to i8
  store i8 %10601, i8* %14, align 1
  %10602 = and i32 %10599, 255
  %10603 = tail call i32 @llvm.ctpop.i32(i32 %10602)
  %10604 = trunc i32 %10603 to i8
  %10605 = and i8 %10604, 1
  %10606 = xor i8 %10605, 1
  store i8 %10606, i8* %21, align 1
  %10607 = xor i32 %10599, %10598
  %10608 = lshr i32 %10607, 4
  %10609 = trunc i32 %10608 to i8
  %10610 = and i8 %10609, 1
  store i8 %10610, i8* %27, align 1
  %10611 = icmp eq i32 %10599, 0
  %10612 = zext i1 %10611 to i8
  store i8 %10612, i8* %30, align 1
  %10613 = lshr i32 %10599, 31
  %10614 = trunc i32 %10613 to i8
  store i8 %10614, i8* %33, align 1
  %10615 = lshr i32 %10598, 31
  %10616 = xor i32 %10613, %10615
  %10617 = add nuw nsw i32 %10616, %10615
  %10618 = icmp eq i32 %10617, 2
  %10619 = zext i1 %10618 to i8
  store i8 %10619, i8* %39, align 1
  %.v614 = select i1 %10611, i64 70, i64 53
  %10620 = add i64 %10529, %.v614
  store i64 %10620, i64* %3, align 8
  br i1 %10611, label %block_.L_406aa6, label %block_406a95

block_406a95:                                     ; preds = %block_.L_406a60
  %10621 = load i64, i64* %RBP.i, align 8
  %10622 = add i64 %10621, -10888
  %10623 = add i64 %10620, 6
  store i64 %10623, i64* %3, align 8
  %10624 = inttoptr i64 %10622 to i32*
  %10625 = load i32, i32* %10624, align 4
  %10626 = zext i32 %10625 to i64
  store i64 %10626, i64* %RAX.i2528, align 8
  %10627 = add i64 %10621, -10876
  %10628 = add i64 %10620, 12
  store i64 %10628, i64* %3, align 8
  %10629 = inttoptr i64 %10627 to i32*
  store i32 %10625, i32* %10629, align 4
  %10630 = load i64, i64* %3, align 8
  %10631 = add i64 %10630, 24
  store i64 %10631, i64* %3, align 8
  %.pre390 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406ab9

block_.L_406aa6:                                  ; preds = %block_.L_4069f7, %block_.L_406a60, %block_406a3b, %block_406a0f
  %10632 = phi i64 [ %10620, %block_.L_406a60 ], [ %10528, %block_406a3b ], [ %10467, %block_406a0f ], [ %10411, %block_.L_4069f7 ]
  %10633 = add i64 %10632, 5
  store i64 %10633, i64* %3, align 8
  %.pre399 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406aab

block_.L_406aab:                                  ; preds = %block_.L_406aa6, %block_4069f2
  %10634 = phi i64 [ %10346, %block_4069f2 ], [ %.pre399, %block_.L_406aa6 ]
  %storemerge239 = phi i64 [ %10376, %block_4069f2 ], [ %10633, %block_.L_406aa6 ]
  %10635 = add i64 %10634, -40
  %10636 = add i64 %storemerge239, 3
  store i64 %10636, i64* %3, align 8
  %10637 = inttoptr i64 %10635 to i32*
  %10638 = load i32, i32* %10637, align 4
  %10639 = add i32 %10638, 1
  %10640 = zext i32 %10639 to i64
  store i64 %10640, i64* %RAX.i2528, align 8
  %10641 = icmp eq i32 %10638, -1
  %10642 = icmp eq i32 %10639, 0
  %10643 = or i1 %10641, %10642
  %10644 = zext i1 %10643 to i8
  store i8 %10644, i8* %14, align 1
  %10645 = and i32 %10639, 255
  %10646 = tail call i32 @llvm.ctpop.i32(i32 %10645)
  %10647 = trunc i32 %10646 to i8
  %10648 = and i8 %10647, 1
  %10649 = xor i8 %10648, 1
  store i8 %10649, i8* %21, align 1
  %10650 = xor i32 %10639, %10638
  %10651 = lshr i32 %10650, 4
  %10652 = trunc i32 %10651 to i8
  %10653 = and i8 %10652, 1
  store i8 %10653, i8* %27, align 1
  %10654 = zext i1 %10642 to i8
  store i8 %10654, i8* %30, align 1
  %10655 = lshr i32 %10639, 31
  %10656 = trunc i32 %10655 to i8
  store i8 %10656, i8* %33, align 1
  %10657 = lshr i32 %10638, 31
  %10658 = xor i32 %10655, %10657
  %10659 = add nuw nsw i32 %10658, %10655
  %10660 = icmp eq i32 %10659, 2
  %10661 = zext i1 %10660 to i8
  store i8 %10661, i8* %39, align 1
  %10662 = add i64 %storemerge239, 9
  store i64 %10662, i64* %3, align 8
  store i32 %10639, i32* %10637, align 4
  %10663 = load i64, i64* %3, align 8
  %10664 = add i64 %10663, -251
  store i64 %10664, i64* %3, align 8
  br label %block_.L_4069b9

block_.L_406ab9.loopexit:                         ; preds = %block_.L_4069b9
  br label %block_.L_406ab9

block_.L_406ab9:                                  ; preds = %block_.L_406ab9.loopexit, %block_406a95
  %10665 = phi i64 [ %10631, %block_406a95 ], [ %10302, %block_.L_406ab9.loopexit ]
  %10666 = phi i64 [ %.pre390, %block_406a95 ], [ %10274, %block_.L_406ab9.loopexit ]
  %10667 = add i64 %10666, -10876
  %10668 = add i64 %10665, 7
  store i64 %10668, i64* %3, align 8
  %10669 = inttoptr i64 %10667 to i32*
  %10670 = load i32, i32* %10669, align 4
  store i8 0, i8* %14, align 1
  %10671 = and i32 %10670, 255
  %10672 = tail call i32 @llvm.ctpop.i32(i32 %10671)
  %10673 = trunc i32 %10672 to i8
  %10674 = and i8 %10673, 1
  %10675 = xor i8 %10674, 1
  store i8 %10675, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10676 = icmp eq i32 %10670, 0
  %10677 = zext i1 %10676 to i8
  store i8 %10677, i8* %30, align 1
  %10678 = lshr i32 %10670, 31
  %10679 = trunc i32 %10678 to i8
  store i8 %10679, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v591 = select i1 %10676, i64 13, i64 18
  %10680 = add i64 %10665, %.v591
  store i64 %10680, i64* %3, align 8
  br i1 %10676, label %block_.L_406daf, label %block_.L_406acb

block_.L_406acb:                                  ; preds = %block_.L_406ab9
  store i64 ptrtoint (%G__0x579ecb_type* @G__0x579ecb to i64), i64* %RDX.i3821, align 8
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10681 = add i64 %10666, -8072
  %10682 = add i64 %10680, 18
  store i64 %10682, i64* %3, align 8
  %10683 = inttoptr i64 %10681 to i32*
  %10684 = load i32, i32* %10683, align 4
  %10685 = zext i32 %10684 to i64
  store i64 %10685, i64* %RDI.i3360, align 8
  %10686 = add i64 %10666, -20
  %10687 = add i64 %10680, 21
  store i64 %10687, i64* %3, align 8
  %10688 = inttoptr i64 %10686 to i32*
  %10689 = load i32, i32* %10688, align 4
  %10690 = zext i32 %10689 to i64
  store i64 %10690, i64* %RSI.i3112.pre-phi, align 8
  %10691 = add i64 %10680, 27
  store i64 %10691, i64* %3, align 8
  %10692 = load i32, i32* %10669, align 4
  %10693 = zext i32 %10692 to i64
  store i64 %10693, i64* %RCX.i3786, align 8
  store i64 0, i64* %43, align 8
  store i64 0, i64* %8627, align 8
  %10694 = add i64 %10680, 9061
  %10695 = add i64 %10680, 38
  %10696 = load i64, i64* %6, align 8
  %10697 = add i64 %10696, -8
  %10698 = inttoptr i64 %10697 to i64*
  store i64 %10695, i64* %10698, align 8
  store i64 %10697, i64* %6, align 8
  store i64 %10694, i64* %3, align 8
  %call2_406aec = tail call %struct.Memory* @sub_408e30.trymove(%struct.State* nonnull %0, i64 %10694, %struct.Memory* %MEMORY.138)
  %10699 = load i32, i32* %EAX.i3678, align 4
  %10700 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %10701 = and i32 %10699, 255
  %10702 = tail call i32 @llvm.ctpop.i32(i32 %10701)
  %10703 = trunc i32 %10702 to i8
  %10704 = and i8 %10703, 1
  %10705 = xor i8 %10704, 1
  store i8 %10705, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10706 = icmp eq i32 %10699, 0
  %10707 = zext i1 %10706 to i8
  store i8 %10707, i8* %30, align 1
  %10708 = lshr i32 %10699, 31
  %10709 = trunc i32 %10708 to i8
  store i8 %10709, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v592 = select i1 %10706, i64 9, i64 14
  %10710 = add i64 %10700, %.v592
  store i64 %10710, i64* %3, align 8
  br i1 %10706, label %block_.L_406daf, label %block_.L_406aff

block_.L_406aff:                                  ; preds = %block_.L_406acb
  %10711 = load i64, i64* %RBP.i, align 8
  %10712 = add i64 %10711, -10884
  %10713 = add i64 %10710, 10
  store i64 %10713, i64* %3, align 8
  %10714 = inttoptr i64 %10712 to i32*
  store i32 1, i32* %10714, align 4
  %10715 = load i64, i64* %RBP.i, align 8
  %10716 = add i64 %10715, -40
  %10717 = load i64, i64* %3, align 8
  %10718 = add i64 %10717, 7
  store i64 %10718, i64* %3, align 8
  %10719 = inttoptr i64 %10716 to i32*
  store i32 0, i32* %10719, align 4
  %.pre391 = load i64, i64* %3, align 8
  br label %block_.L_406b10

block_.L_406b10:                                  ; preds = %block_.L_406ba7, %block_.L_406aff
  %10720 = phi i64 [ %11014, %block_.L_406ba7 ], [ %.pre391, %block_.L_406aff ]
  %10721 = load i64, i64* %RBP.i, align 8
  %10722 = add i64 %10721, -40
  %10723 = add i64 %10720, 4
  store i64 %10723, i64* %3, align 8
  %10724 = inttoptr i64 %10722 to i32*
  %10725 = load i32, i32* %10724, align 4
  %10726 = add i32 %10725, -4
  %10727 = icmp ult i32 %10725, 4
  %10728 = zext i1 %10727 to i8
  store i8 %10728, i8* %14, align 1
  %10729 = and i32 %10726, 255
  %10730 = tail call i32 @llvm.ctpop.i32(i32 %10729)
  %10731 = trunc i32 %10730 to i8
  %10732 = and i8 %10731, 1
  %10733 = xor i8 %10732, 1
  store i8 %10733, i8* %21, align 1
  %10734 = xor i32 %10726, %10725
  %10735 = lshr i32 %10734, 4
  %10736 = trunc i32 %10735 to i8
  %10737 = and i8 %10736, 1
  store i8 %10737, i8* %27, align 1
  %10738 = icmp eq i32 %10726, 0
  %10739 = zext i1 %10738 to i8
  store i8 %10739, i8* %30, align 1
  %10740 = lshr i32 %10726, 31
  %10741 = trunc i32 %10740 to i8
  store i8 %10741, i8* %33, align 1
  %10742 = lshr i32 %10725, 31
  %10743 = xor i32 %10740, %10742
  %10744 = add nuw nsw i32 %10743, %10742
  %10745 = icmp eq i32 %10744, 2
  %10746 = zext i1 %10745 to i8
  store i8 %10746, i8* %39, align 1
  %10747 = icmp ne i8 %10741, 0
  %10748 = xor i1 %10747, %10745
  %.v593 = select i1 %10748, i64 10, i64 170
  %10749 = add i64 %10720, %.v593
  store i64 %10749, i64* %3, align 8
  br i1 %10748, label %block_406b1a, label %block_.L_406bba.loopexit

block_406b1a:                                     ; preds = %block_.L_406b10
  %10750 = add i64 %10721, -8072
  %10751 = add i64 %10749, 6
  store i64 %10751, i64* %3, align 8
  %10752 = inttoptr i64 %10750 to i32*
  %10753 = load i32, i32* %10752, align 4
  %10754 = zext i32 %10753 to i64
  store i64 %10754, i64* %RAX.i2528, align 8
  %10755 = add i64 %10749, 10
  store i64 %10755, i64* %3, align 8
  %10756 = load i32, i32* %10724, align 4
  %10757 = sext i32 %10756 to i64
  store i64 %10757, i64* %RCX.i3786, align 8
  %10758 = shl nsw i64 %10757, 2
  %10759 = add nsw i64 %10758, 8053168
  %10760 = add i64 %10749, 17
  store i64 %10760, i64* %3, align 8
  %10761 = inttoptr i64 %10759 to i32*
  %10762 = load i32, i32* %10761, align 4
  %10763 = add i32 %10762, %10753
  %10764 = zext i32 %10763 to i64
  store i64 %10764, i64* %RAX.i2528, align 8
  %10765 = icmp ult i32 %10763, %10753
  %10766 = icmp ult i32 %10763, %10762
  %10767 = or i1 %10765, %10766
  %10768 = zext i1 %10767 to i8
  store i8 %10768, i8* %14, align 1
  %10769 = and i32 %10763, 255
  %10770 = tail call i32 @llvm.ctpop.i32(i32 %10769)
  %10771 = trunc i32 %10770 to i8
  %10772 = and i8 %10771, 1
  %10773 = xor i8 %10772, 1
  store i8 %10773, i8* %21, align 1
  %10774 = xor i32 %10762, %10753
  %10775 = xor i32 %10774, %10763
  %10776 = lshr i32 %10775, 4
  %10777 = trunc i32 %10776 to i8
  %10778 = and i8 %10777, 1
  store i8 %10778, i8* %27, align 1
  %10779 = icmp eq i32 %10763, 0
  %10780 = zext i1 %10779 to i8
  store i8 %10780, i8* %30, align 1
  %10781 = lshr i32 %10763, 31
  %10782 = trunc i32 %10781 to i8
  store i8 %10782, i8* %33, align 1
  %10783 = lshr i32 %10753, 31
  %10784 = lshr i32 %10762, 31
  %10785 = xor i32 %10781, %10783
  %10786 = xor i32 %10781, %10784
  %10787 = add nuw nsw i32 %10785, %10786
  %10788 = icmp eq i32 %10787, 2
  %10789 = zext i1 %10788 to i8
  store i8 %10789, i8* %39, align 1
  %10790 = sext i32 %10763 to i64
  store i64 %10790, i64* %RCX.i3786, align 8
  %10791 = add nsw i64 %10790, 12099168
  %10792 = add i64 %10749, 28
  store i64 %10792, i64* %3, align 8
  %10793 = inttoptr i64 %10791 to i8*
  %10794 = load i8, i8* %10793, align 1
  %10795 = zext i8 %10794 to i64
  store i64 %10795, i64* %RAX.i2528, align 8
  %10796 = zext i8 %10794 to i32
  %10797 = add i64 %10721, -20
  %10798 = add i64 %10749, 31
  store i64 %10798, i64* %3, align 8
  %10799 = inttoptr i64 %10797 to i32*
  %10800 = load i32, i32* %10799, align 4
  %10801 = sub i32 %10796, %10800
  %10802 = icmp ult i32 %10796, %10800
  %10803 = zext i1 %10802 to i8
  store i8 %10803, i8* %14, align 1
  %10804 = and i32 %10801, 255
  %10805 = tail call i32 @llvm.ctpop.i32(i32 %10804)
  %10806 = trunc i32 %10805 to i8
  %10807 = and i8 %10806, 1
  %10808 = xor i8 %10807, 1
  store i8 %10808, i8* %21, align 1
  %10809 = xor i32 %10800, %10796
  %10810 = xor i32 %10809, %10801
  %10811 = lshr i32 %10810, 4
  %10812 = trunc i32 %10811 to i8
  %10813 = and i8 %10812, 1
  store i8 %10813, i8* %27, align 1
  %10814 = icmp eq i32 %10801, 0
  %10815 = zext i1 %10814 to i8
  store i8 %10815, i8* %30, align 1
  %10816 = lshr i32 %10801, 31
  %10817 = trunc i32 %10816 to i8
  store i8 %10817, i8* %33, align 1
  %10818 = lshr i32 %10800, 31
  %10819 = add nuw nsw i32 %10816, %10818
  %10820 = icmp eq i32 %10819, 2
  %10821 = zext i1 %10820 to i8
  store i8 %10821, i8* %39, align 1
  %.v608 = select i1 %10814, i64 37, i64 141
  %10822 = add i64 %10749, %.v608
  store i64 %10822, i64* %3, align 8
  br i1 %10814, label %block_406b3f, label %block_.L_406ba7

block_406b3f:                                     ; preds = %block_406b1a
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %10823 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10823, i64* %RCX.i3786, align 8
  %10824 = load i64, i64* %RBP.i, align 8
  %10825 = add i64 %10824, -8072
  %10826 = add i64 %10822, 24
  store i64 %10826, i64* %3, align 8
  %10827 = inttoptr i64 %10825 to i32*
  %10828 = load i32, i32* %10827, align 4
  %10829 = zext i32 %10828 to i64
  store i64 %10829, i64* %RDX.i3821, align 8
  %10830 = add i64 %10824, -40
  %10831 = add i64 %10822, 28
  store i64 %10831, i64* %3, align 8
  %10832 = inttoptr i64 %10830 to i32*
  %10833 = load i32, i32* %10832, align 4
  %10834 = sext i32 %10833 to i64
  store i64 %10834, i64* %RSI.i3112.pre-phi, align 8
  %10835 = shl nsw i64 %10834, 2
  %10836 = add nsw i64 %10835, 8053168
  %10837 = add i64 %10822, 35
  store i64 %10837, i64* %3, align 8
  %10838 = inttoptr i64 %10836 to i32*
  %10839 = load i32, i32* %10838, align 4
  %10840 = add i32 %10839, %10828
  %10841 = zext i32 %10840 to i64
  store i64 %10841, i64* %RDX.i3821, align 8
  %10842 = sext i32 %10840 to i64
  %10843 = mul nsw i64 %10842, 76
  store i64 %10843, i64* %RSI.i3112.pre-phi, align 8
  %10844 = lshr i64 %10843, 63
  %10845 = add i64 %10843, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %10845, i64* %RAX.i2528, align 8
  %10846 = icmp ult i64 %10845, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10847 = icmp ult i64 %10845, %10843
  %10848 = or i1 %10846, %10847
  %10849 = zext i1 %10848 to i8
  store i8 %10849, i8* %14, align 1
  %10850 = trunc i64 %10845 to i32
  %10851 = and i32 %10850, 252
  %10852 = tail call i32 @llvm.ctpop.i32(i32 %10851)
  %10853 = trunc i32 %10852 to i8
  %10854 = and i8 %10853, 1
  %10855 = xor i8 %10854, 1
  store i8 %10855, i8* %21, align 1
  %10856 = xor i64 %10843, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10857 = xor i64 %10856, %10845
  %10858 = lshr i64 %10857, 4
  %10859 = trunc i64 %10858 to i8
  %10860 = and i8 %10859, 1
  store i8 %10860, i8* %27, align 1
  %10861 = icmp eq i64 %10845, 0
  %10862 = zext i1 %10861 to i8
  store i8 %10862, i8* %30, align 1
  %10863 = lshr i64 %10845, 63
  %10864 = trunc i64 %10863 to i8
  store i8 %10864, i8* %33, align 1
  %10865 = xor i64 %10863, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %10866 = xor i64 %10863, %10844
  %10867 = add nuw nsw i64 %10865, %10866
  %10868 = icmp eq i64 %10867, 2
  %10869 = zext i1 %10868 to i8
  store i8 %10869, i8* %39, align 1
  %10870 = add i64 %10843, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %10871 = add i64 %10822, 49
  store i64 %10871, i64* %3, align 8
  %10872 = inttoptr i64 %10870 to i32*
  %10873 = load i32, i32* %10872, align 4
  %10874 = sext i32 %10873 to i64
  %10875 = mul nsw i64 %10874, 104
  store i64 %10875, i64* %RAX.i2528, align 8
  %10876 = lshr i64 %10875, 63
  %10877 = load i64, i64* %RCX.i3786, align 8
  %10878 = add i64 %10875, %10877
  store i64 %10878, i64* %RCX.i3786, align 8
  %10879 = icmp ult i64 %10878, %10877
  %10880 = icmp ult i64 %10878, %10875
  %10881 = or i1 %10879, %10880
  %10882 = zext i1 %10881 to i8
  store i8 %10882, i8* %14, align 1
  %10883 = trunc i64 %10878 to i32
  %10884 = and i32 %10883, 255
  %10885 = tail call i32 @llvm.ctpop.i32(i32 %10884)
  %10886 = trunc i32 %10885 to i8
  %10887 = and i8 %10886, 1
  %10888 = xor i8 %10887, 1
  store i8 %10888, i8* %21, align 1
  %10889 = xor i64 %10875, %10877
  %10890 = xor i64 %10889, %10878
  %10891 = lshr i64 %10890, 4
  %10892 = trunc i64 %10891 to i8
  %10893 = and i8 %10892, 1
  store i8 %10893, i8* %27, align 1
  %10894 = icmp eq i64 %10878, 0
  %10895 = zext i1 %10894 to i8
  store i8 %10895, i8* %30, align 1
  %10896 = lshr i64 %10878, 63
  %10897 = trunc i64 %10896 to i8
  store i8 %10897, i8* %33, align 1
  %10898 = lshr i64 %10877, 63
  %10899 = xor i64 %10896, %10898
  %10900 = xor i64 %10896, %10876
  %10901 = add nuw nsw i64 %10899, %10900
  %10902 = icmp eq i64 %10901, 2
  %10903 = zext i1 %10902 to i8
  store i8 %10903, i8* %39, align 1
  %10904 = add i64 %10878, 60
  %10905 = add i64 %10822, 60
  store i64 %10905, i64* %3, align 8
  %10906 = inttoptr i64 %10904 to i32*
  %10907 = load i32, i32* %10906, align 4
  %10908 = add i32 %10907, -5
  %10909 = icmp ult i32 %10907, 5
  %10910 = zext i1 %10909 to i8
  store i8 %10910, i8* %14, align 1
  %10911 = and i32 %10908, 255
  %10912 = tail call i32 @llvm.ctpop.i32(i32 %10911)
  %10913 = trunc i32 %10912 to i8
  %10914 = and i8 %10913, 1
  %10915 = xor i8 %10914, 1
  store i8 %10915, i8* %21, align 1
  %10916 = xor i32 %10908, %10907
  %10917 = lshr i32 %10916, 4
  %10918 = trunc i32 %10917 to i8
  %10919 = and i8 %10918, 1
  store i8 %10919, i8* %27, align 1
  %10920 = icmp eq i32 %10908, 0
  %10921 = zext i1 %10920 to i8
  store i8 %10921, i8* %30, align 1
  %10922 = lshr i32 %10908, 31
  %10923 = trunc i32 %10922 to i8
  store i8 %10923, i8* %33, align 1
  %10924 = lshr i32 %10907, 31
  %10925 = xor i32 %10922, %10924
  %10926 = add nuw nsw i32 %10925, %10924
  %10927 = icmp eq i32 %10926, 2
  %10928 = zext i1 %10927 to i8
  store i8 %10928, i8* %39, align 1
  %.v609 = select i1 %10920, i64 104, i64 66
  %10929 = add i64 %10822, %.v609
  store i64 %10929, i64* %3, align 8
  br i1 %10920, label %block_.L_406ba7, label %block_406b81

block_406b81:                                     ; preds = %block_406b3f
  %10930 = load i64, i64* %RBP.i, align 8
  %10931 = add i64 %10930, -10884
  %10932 = add i64 %10929, 10
  store i64 %10932, i64* %3, align 8
  %10933 = inttoptr i64 %10931 to i32*
  store i32 0, i32* %10933, align 4
  %10934 = load i64, i64* %RBP.i, align 8
  %10935 = add i64 %10934, -8072
  %10936 = load i64, i64* %3, align 8
  %10937 = add i64 %10936, 6
  store i64 %10937, i64* %3, align 8
  %10938 = inttoptr i64 %10935 to i32*
  %10939 = load i32, i32* %10938, align 4
  %10940 = zext i32 %10939 to i64
  store i64 %10940, i64* %RAX.i2528, align 8
  %10941 = add i64 %10934, -40
  %10942 = add i64 %10936, 10
  store i64 %10942, i64* %3, align 8
  %10943 = inttoptr i64 %10941 to i32*
  %10944 = load i32, i32* %10943, align 4
  %10945 = sext i32 %10944 to i64
  store i64 %10945, i64* %RCX.i3786, align 8
  %10946 = shl nsw i64 %10945, 2
  %10947 = add nsw i64 %10946, 8053168
  %10948 = add i64 %10936, 17
  store i64 %10948, i64* %3, align 8
  %10949 = inttoptr i64 %10947 to i32*
  %10950 = load i32, i32* %10949, align 4
  %10951 = add i32 %10950, %10939
  %10952 = zext i32 %10951 to i64
  store i64 %10952, i64* %RAX.i2528, align 8
  %10953 = icmp ult i32 %10951, %10939
  %10954 = icmp ult i32 %10951, %10950
  %10955 = or i1 %10953, %10954
  %10956 = zext i1 %10955 to i8
  store i8 %10956, i8* %14, align 1
  %10957 = and i32 %10951, 255
  %10958 = tail call i32 @llvm.ctpop.i32(i32 %10957)
  %10959 = trunc i32 %10958 to i8
  %10960 = and i8 %10959, 1
  %10961 = xor i8 %10960, 1
  store i8 %10961, i8* %21, align 1
  %10962 = xor i32 %10950, %10939
  %10963 = xor i32 %10962, %10951
  %10964 = lshr i32 %10963, 4
  %10965 = trunc i32 %10964 to i8
  %10966 = and i8 %10965, 1
  store i8 %10966, i8* %27, align 1
  %10967 = icmp eq i32 %10951, 0
  %10968 = zext i1 %10967 to i8
  store i8 %10968, i8* %30, align 1
  %10969 = lshr i32 %10951, 31
  %10970 = trunc i32 %10969 to i8
  store i8 %10970, i8* %33, align 1
  %10971 = lshr i32 %10939, 31
  %10972 = lshr i32 %10950, 31
  %10973 = xor i32 %10969, %10971
  %10974 = xor i32 %10969, %10972
  %10975 = add nuw nsw i32 %10973, %10974
  %10976 = icmp eq i32 %10975, 2
  %10977 = zext i1 %10976 to i8
  store i8 %10977, i8* %39, align 1
  %10978 = add i64 %10934, -10880
  %10979 = add i64 %10936, 23
  store i64 %10979, i64* %3, align 8
  %10980 = inttoptr i64 %10978 to i32*
  store i32 %10951, i32* %10980, align 4
  %10981 = load i64, i64* %3, align 8
  %10982 = add i64 %10981, 24
  store i64 %10982, i64* %3, align 8
  %.pre392 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406bba

block_.L_406ba7:                                  ; preds = %block_406b1a, %block_406b3f
  %10983 = phi i64 [ %10929, %block_406b3f ], [ %10822, %block_406b1a ]
  %10984 = load i64, i64* %RBP.i, align 8
  %10985 = add i64 %10984, -40
  %10986 = add i64 %10983, 8
  store i64 %10986, i64* %3, align 8
  %10987 = inttoptr i64 %10985 to i32*
  %10988 = load i32, i32* %10987, align 4
  %10989 = add i32 %10988, 1
  %10990 = zext i32 %10989 to i64
  store i64 %10990, i64* %RAX.i2528, align 8
  %10991 = icmp eq i32 %10988, -1
  %10992 = icmp eq i32 %10989, 0
  %10993 = or i1 %10991, %10992
  %10994 = zext i1 %10993 to i8
  store i8 %10994, i8* %14, align 1
  %10995 = and i32 %10989, 255
  %10996 = tail call i32 @llvm.ctpop.i32(i32 %10995)
  %10997 = trunc i32 %10996 to i8
  %10998 = and i8 %10997, 1
  %10999 = xor i8 %10998, 1
  store i8 %10999, i8* %21, align 1
  %11000 = xor i32 %10989, %10988
  %11001 = lshr i32 %11000, 4
  %11002 = trunc i32 %11001 to i8
  %11003 = and i8 %11002, 1
  store i8 %11003, i8* %27, align 1
  %11004 = zext i1 %10992 to i8
  store i8 %11004, i8* %30, align 1
  %11005 = lshr i32 %10989, 31
  %11006 = trunc i32 %11005 to i8
  store i8 %11006, i8* %33, align 1
  %11007 = lshr i32 %10988, 31
  %11008 = xor i32 %11005, %11007
  %11009 = add nuw nsw i32 %11008, %11005
  %11010 = icmp eq i32 %11009, 2
  %11011 = zext i1 %11010 to i8
  store i8 %11011, i8* %39, align 1
  %11012 = add i64 %10983, 14
  store i64 %11012, i64* %3, align 8
  store i32 %10989, i32* %10987, align 4
  %11013 = load i64, i64* %3, align 8
  %11014 = add i64 %11013, -165
  store i64 %11014, i64* %3, align 8
  br label %block_.L_406b10

block_.L_406bba.loopexit:                         ; preds = %block_.L_406b10
  br label %block_.L_406bba

block_.L_406bba:                                  ; preds = %block_.L_406bba.loopexit, %block_406b81
  %11015 = phi i64 [ %10982, %block_406b81 ], [ %10749, %block_.L_406bba.loopexit ]
  %11016 = phi i64 [ %.pre392, %block_406b81 ], [ %10721, %block_.L_406bba.loopexit ]
  %11017 = add i64 %11016, -8072
  %11018 = add i64 %11015, 6
  store i64 %11018, i64* %3, align 8
  %11019 = inttoptr i64 %11017 to i32*
  %11020 = load i32, i32* %11019, align 4
  %11021 = zext i32 %11020 to i64
  store i64 %11021, i64* %RAX.i2528, align 8
  %11022 = add i64 %11016, -8068
  %11023 = add i64 %11015, 12
  store i64 %11023, i64* %3, align 8
  %11024 = inttoptr i64 %11022 to i32*
  store i32 %11020, i32* %11024, align 4
  %11025 = load i64, i64* %RBP.i, align 8
  %11026 = add i64 %11025, -10884
  %11027 = load i64, i64* %3, align 8
  %11028 = add i64 %11027, 7
  store i64 %11028, i64* %3, align 8
  %11029 = inttoptr i64 %11026 to i32*
  %11030 = load i32, i32* %11029, align 4
  store i8 0, i8* %14, align 1
  %11031 = and i32 %11030, 255
  %11032 = tail call i32 @llvm.ctpop.i32(i32 %11031)
  %11033 = trunc i32 %11032 to i8
  %11034 = and i8 %11033, 1
  %11035 = xor i8 %11034, 1
  store i8 %11035, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11036 = icmp eq i32 %11030, 0
  %11037 = zext i1 %11036 to i8
  store i8 %11037, i8* %30, align 1
  %11038 = lshr i32 %11030, 31
  %11039 = trunc i32 %11038 to i8
  store i8 %11039, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v594 = select i1 %11036, i64 13, i64 191
  %11040 = add i64 %11027, %.v594
  store i64 %11040, i64* %3, align 8
  br i1 %11036, label %block_406bd3, label %block_.L_406c85

block_406bd3:                                     ; preds = %block_.L_406bba
  %11041 = add i64 %11040, 5
  br label %block_.L_406bd8

block_.L_406bd8:                                  ; preds = %block_.L_406c5d, %block_406bd3
  %11042 = phi i64 [ %11025, %block_406bd3 ], [ %.pre393, %block_.L_406c5d ]
  %storemerge240 = phi i64 [ %11041, %block_406bd3 ], [ %11157, %block_.L_406c5d ]
  %11043 = add i64 %11042, -8072
  %11044 = add i64 %storemerge240, 6
  store i64 %11044, i64* %3, align 8
  %11045 = inttoptr i64 %11043 to i32*
  %11046 = load i32, i32* %11045, align 4
  %11047 = zext i32 %11046 to i64
  store i64 %11047, i64* %RDI.i3360, align 8
  %11048 = add i64 %storemerge240, 35752
  %11049 = add i64 %storemerge240, 11
  %11050 = load i64, i64* %6, align 8
  %11051 = add i64 %11050, -8
  %11052 = inttoptr i64 %11051 to i64*
  store i64 %11049, i64* %11052, align 8
  store i64 %11051, i64* %6, align 8
  store i64 %11048, i64* %3, align 8
  %call2_406bde = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %11048, %struct.Memory* %MEMORY.138)
  %11053 = load i32, i32* %EAX.i3678, align 4
  %11054 = load i64, i64* %3, align 8
  %11055 = add i32 %11053, -1
  %11056 = icmp eq i32 %11053, 0
  %11057 = zext i1 %11056 to i8
  store i8 %11057, i8* %14, align 1
  %11058 = and i32 %11055, 255
  %11059 = tail call i32 @llvm.ctpop.i32(i32 %11058)
  %11060 = trunc i32 %11059 to i8
  %11061 = and i8 %11060, 1
  %11062 = xor i8 %11061, 1
  store i8 %11062, i8* %21, align 1
  %11063 = xor i32 %11055, %11053
  %11064 = lshr i32 %11063, 4
  %11065 = trunc i32 %11064 to i8
  %11066 = and i8 %11065, 1
  store i8 %11066, i8* %27, align 1
  %11067 = icmp eq i32 %11055, 0
  %11068 = zext i1 %11067 to i8
  store i8 %11068, i8* %30, align 1
  %11069 = lshr i32 %11055, 31
  %11070 = trunc i32 %11069 to i8
  store i8 %11070, i8* %33, align 1
  %11071 = lshr i32 %11053, 31
  %11072 = xor i32 %11069, %11071
  %11073 = add nuw nsw i32 %11072, %11071
  %11074 = icmp eq i32 %11073, 2
  %11075 = zext i1 %11074 to i8
  store i8 %11075, i8* %39, align 1
  %.v605 = select i1 %11067, i64 9, i64 127
  %11076 = add i64 %11054, %.v605
  store i64 %11076, i64* %3, align 8
  br i1 %11067, label %block_406bec, label %block_.L_406c62.loopexit

block_406bec:                                     ; preds = %block_.L_406bd8
  store i64 1, i64* %RSI.i3112.pre-phi, align 8
  %11077 = load i64, i64* %RBP.i, align 8
  %11078 = add i64 %11077, -10892
  store i64 %11078, i64* %RDX.i3821, align 8
  %11079 = add i64 %11077, -8072
  %11080 = add i64 %11076, 18
  store i64 %11080, i64* %3, align 8
  %11081 = inttoptr i64 %11079 to i32*
  %11082 = load i32, i32* %11081, align 4
  %11083 = zext i32 %11082 to i64
  store i64 %11083, i64* %RDI.i3360, align 8
  %11084 = add i64 %11076, 35924
  %11085 = add i64 %11076, 23
  %11086 = load i64, i64* %6, align 8
  %11087 = add i64 %11086, -8
  %11088 = inttoptr i64 %11087 to i64*
  store i64 %11085, i64* %11088, align 8
  store i64 %11087, i64* %6, align 8
  store i64 %11084, i64* %3, align 8
  %call2_406bfe = tail call %struct.Memory* @sub_40f840.findlib(%struct.State* nonnull %0, i64 %11084, %struct.Memory* %MEMORY.138)
  %11089 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x579e48_type* @G__0x579e48 to i64), i64* %RDX.i3821, align 8
  store i64 0, i64* %RSI.i3112.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %11090 = load i64, i64* %RBP.i, align 8
  %11091 = add i64 %11090, -10892
  %11092 = add i64 %11089, 18
  store i64 %11092, i64* %3, align 8
  %11093 = inttoptr i64 %11091 to i32*
  %11094 = load i32, i32* %11093, align 4
  %11095 = zext i32 %11094 to i64
  store i64 %11095, i64* %RDI.i3360, align 8
  %11096 = add i64 %11090, -8068
  %11097 = add i64 %11089, 24
  store i64 %11097, i64* %3, align 8
  %11098 = inttoptr i64 %11096 to i32*
  store i32 %11094, i32* %11098, align 4
  %11099 = load i64, i64* %RBP.i, align 8
  %11100 = add i64 %11099, -8068
  %11101 = load i64, i64* %3, align 8
  %11102 = add i64 %11101, 6
  store i64 %11102, i64* %3, align 8
  %11103 = inttoptr i64 %11100 to i32*
  %11104 = load i32, i32* %11103, align 4
  %11105 = zext i32 %11104 to i64
  store i64 %11105, i64* %RDI.i3360, align 8
  %11106 = add i64 %11099, -20
  %11107 = add i64 %11101, 9
  store i64 %11107, i64* %3, align 8
  %11108 = inttoptr i64 %11106 to i32*
  %11109 = load i32, i32* %11108, align 4
  %11110 = zext i32 %11109 to i64
  store i64 %11110, i64* %RCX.i3786, align 8
  %11111 = add i64 %11099, -10876
  %11112 = add i64 %11101, 16
  store i64 %11112, i64* %3, align 8
  %11113 = inttoptr i64 %11111 to i32*
  %11114 = load i32, i32* %11113, align 4
  %11115 = zext i32 %11114 to i64
  store i64 %11115, i64* %43, align 8
  %11116 = add i64 %11099, -11004
  %11117 = load i32, i32* %ESI.i3824, align 4
  %11118 = add i64 %11101, 22
  store i64 %11118, i64* %3, align 8
  %11119 = inttoptr i64 %11116 to i32*
  store i32 %11117, i32* %11119, align 4
  %11120 = load i32, i32* %ECX.i3818, align 4
  %11121 = zext i32 %11120 to i64
  %11122 = load i64, i64* %3, align 8
  store i64 %11121, i64* %RSI.i3112.pre-phi, align 8
  %11123 = load i32, i32* %R8D.i3060, align 4
  %11124 = zext i32 %11123 to i64
  store i64 %11124, i64* %RCX.i3786, align 8
  %11125 = load i64, i64* %RBP.i, align 8
  %11126 = add i64 %11125, -11004
  %11127 = add i64 %11122, 12
  store i64 %11127, i64* %3, align 8
  %11128 = inttoptr i64 %11126 to i32*
  %11129 = load i32, i32* %11128, align 4
  %11130 = zext i32 %11129 to i64
  store i64 %11130, i64* %43, align 8
  %11131 = add i64 %11122, 19
  store i64 %11131, i64* %3, align 8
  %11132 = load i32, i32* %11128, align 4
  %11133 = zext i32 %11132 to i64
  store i64 %11133, i64* %8627, align 8
  %11134 = add i64 %11125, -11008
  %11135 = load i32, i32* %EAX.i3678, align 4
  %11136 = add i64 %11122, 25
  store i64 %11136, i64* %3, align 8
  %11137 = inttoptr i64 %11134 to i32*
  store i32 %11135, i32* %11137, align 4
  %11138 = load i64, i64* %3, align 8
  %11139 = add i64 %11138, 8678
  %11140 = add i64 %11138, 5
  %11141 = load i64, i64* %6, align 8
  %11142 = add i64 %11141, -8
  %11143 = inttoptr i64 %11142 to i64*
  store i64 %11140, i64* %11143, align 8
  store i64 %11142, i64* %6, align 8
  store i64 %11139, i64* %3, align 8
  %call2_406c4a = tail call %struct.Memory* @sub_408e30.trymove(%struct.State* nonnull %0, i64 %11139, %struct.Memory* %MEMORY.138)
  %11144 = load i32, i32* %EAX.i3678, align 4
  %11145 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %11146 = and i32 %11144, 255
  %11147 = tail call i32 @llvm.ctpop.i32(i32 %11146)
  %11148 = trunc i32 %11147 to i8
  %11149 = and i8 %11148, 1
  %11150 = xor i8 %11149, 1
  store i8 %11150, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11151 = icmp eq i32 %11144, 0
  %11152 = zext i1 %11151 to i8
  store i8 %11152, i8* %30, align 1
  %11153 = lshr i32 %11144, 31
  %11154 = trunc i32 %11153 to i8
  store i8 %11154, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v607 = select i1 %11151, i64 9, i64 14
  %11155 = add i64 %11145, %.v607
  store i64 %11155, i64* %3, align 8
  br i1 %11151, label %block_406c58, label %block_.L_406c5d

block_406c58:                                     ; preds = %block_406bec
  %11156 = add i64 %11155, 10
  store i64 %11156, i64* %3, align 8
  br label %block_.L_406c62

block_.L_406c5d:                                  ; preds = %block_406bec
  %11157 = add i64 %11155, -133
  %11158 = add i64 %11155, 5
  store i64 %11158, i64* %3, align 8
  %.pre393 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406bd8

block_.L_406c62.loopexit:                         ; preds = %block_.L_406bd8
  br label %block_.L_406c62

block_.L_406c62:                                  ; preds = %block_.L_406c62.loopexit, %block_406c58
  %11159 = phi i64 [ %11156, %block_406c58 ], [ %11076, %block_.L_406c62.loopexit ]
  %11160 = load i64, i64* %RBP.i, align 8
  %11161 = add i64 %11160, -8072
  %11162 = add i64 %11159, 6
  store i64 %11162, i64* %3, align 8
  %11163 = inttoptr i64 %11161 to i32*
  %11164 = load i32, i32* %11163, align 4
  %11165 = zext i32 %11164 to i64
  store i64 %11165, i64* %RDI.i3360, align 8
  %11166 = add i64 %11159, 35614
  %11167 = add i64 %11159, 11
  %11168 = load i64, i64* %6, align 8
  %11169 = add i64 %11168, -8
  %11170 = inttoptr i64 %11169 to i64*
  store i64 %11167, i64* %11170, align 8
  store i64 %11169, i64* %6, align 8
  store i64 %11166, i64* %3, align 8
  %call2_406c68 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %11166, %struct.Memory* %MEMORY.138)
  %11171 = load i32, i32* %EAX.i3678, align 4
  %11172 = load i64, i64* %3, align 8
  %11173 = add i32 %11171, -1
  %11174 = icmp eq i32 %11171, 0
  %11175 = zext i1 %11174 to i8
  store i8 %11175, i8* %14, align 1
  %11176 = and i32 %11173, 255
  %11177 = tail call i32 @llvm.ctpop.i32(i32 %11176)
  %11178 = trunc i32 %11177 to i8
  %11179 = and i8 %11178, 1
  %11180 = xor i8 %11179, 1
  store i8 %11180, i8* %21, align 1
  %11181 = xor i32 %11173, %11171
  %11182 = lshr i32 %11181, 4
  %11183 = trunc i32 %11182 to i8
  %11184 = and i8 %11183, 1
  store i8 %11184, i8* %27, align 1
  %11185 = icmp eq i32 %11173, 0
  %11186 = zext i1 %11185 to i8
  store i8 %11186, i8* %30, align 1
  %11187 = lshr i32 %11173, 31
  %11188 = trunc i32 %11187 to i8
  store i8 %11188, i8* %33, align 1
  %11189 = lshr i32 %11171, 31
  %11190 = xor i32 %11187, %11189
  %11191 = add nuw nsw i32 %11190, %11189
  %11192 = icmp eq i32 %11191, 2
  %11193 = zext i1 %11192 to i8
  store i8 %11193, i8* %39, align 1
  %.v606 = select i1 %11185, i64 9, i64 19
  %11194 = add i64 %11172, %.v606
  store i64 %11194, i64* %3, align 8
  br i1 %11185, label %block_406c76, label %block_.L_406c80

block_406c76:                                     ; preds = %block_.L_406c62
  %11195 = load i64, i64* %RBP.i, align 8
  %11196 = add i64 %11195, -8068
  %11197 = add i64 %11194, 10
  store i64 %11197, i64* %3, align 8
  %11198 = inttoptr i64 %11196 to i32*
  store i32 0, i32* %11198, align 4
  %.pre394 = load i64, i64* %3, align 8
  br label %block_.L_406c80

block_.L_406c80:                                  ; preds = %block_.L_406c62, %block_406c76
  %11199 = phi i64 [ %.pre394, %block_406c76 ], [ %11194, %block_.L_406c62 ]
  %11200 = add i64 %11199, 5
  store i64 %11200, i64* %3, align 8
  br label %block_.L_406c85

block_.L_406c85:                                  ; preds = %block_.L_406bba, %block_.L_406c80
  %11201 = phi i64 [ %11040, %block_.L_406bba ], [ %11200, %block_.L_406c80 ]
  %MEMORY.151 = phi %struct.Memory* [ %MEMORY.138, %block_.L_406bba ], [ %call2_406c68, %block_.L_406c80 ]
  %11202 = add i64 %11201, 5
  br label %block_.L_406c8a

block_.L_406c8a:                                  ; preds = %block_406c98, %block_.L_406c85
  %storemerge241 = phi i64 [ %11202, %block_.L_406c85 ], [ %11222, %block_406c98 ]
  %11203 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  store i8 0, i8* %14, align 1
  %11204 = and i32 %11203, 255
  %11205 = tail call i32 @llvm.ctpop.i32(i32 %11204)
  %11206 = trunc i32 %11205 to i8
  %11207 = and i8 %11206, 1
  %11208 = xor i8 %11207, 1
  store i8 %11208, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11209 = icmp eq i32 %11203, 0
  %11210 = zext i1 %11209 to i8
  store i8 %11210, i8* %30, align 1
  %11211 = lshr i32 %11203, 31
  %11212 = trunc i32 %11211 to i8
  store i8 %11212, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11213 = icmp ne i8 %11212, 0
  %11214 = or i1 %11209, %11213
  %.v595 = select i1 %11214, i64 24, i64 14
  %11215 = add i64 %storemerge241, %.v595
  store i64 %11215, i64* %3, align 8
  br i1 %11214, label %block_.L_406ca2, label %block_406c98

block_406c98:                                     ; preds = %block_.L_406c8a
  %11216 = add i64 %11215, 28872
  %11217 = add i64 %11215, 5
  %11218 = load i64, i64* %6, align 8
  %11219 = add i64 %11218, -8
  %11220 = inttoptr i64 %11219 to i64*
  store i64 %11217, i64* %11220, align 8
  store i64 %11219, i64* %6, align 8
  store i64 %11216, i64* %3, align 8
  %call2_406c98 = tail call %struct.Memory* @sub_40dd60.popgo(%struct.State* nonnull %0, i64 %11216, %struct.Memory* %MEMORY.151)
  %11221 = load i64, i64* %3, align 8
  %11222 = add i64 %11221, -19
  %11223 = add i64 %11221, 5
  store i64 %11223, i64* %3, align 8
  br label %block_.L_406c8a

block_.L_406ca2:                                  ; preds = %block_.L_406c8a
  %11224 = load i64, i64* %RBP.i, align 8
  %11225 = add i64 %11224, -8068
  %11226 = add i64 %11215, 7
  store i64 %11226, i64* %3, align 8
  %11227 = inttoptr i64 %11225 to i32*
  %11228 = load i32, i32* %11227, align 4
  store i8 0, i8* %14, align 1
  %11229 = and i32 %11228, 255
  %11230 = tail call i32 @llvm.ctpop.i32(i32 %11229)
  %11231 = trunc i32 %11230 to i8
  %11232 = and i8 %11231, 1
  %11233 = xor i8 %11232, 1
  store i8 %11233, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11234 = icmp eq i32 %11228, 0
  %11235 = zext i1 %11234 to i8
  store i8 %11235, i8* %30, align 1
  %11236 = lshr i32 %11228, 31
  %11237 = trunc i32 %11236 to i8
  store i8 %11237, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v596 = select i1 %11234, i64 13, i64 18
  %11238 = add i64 %11215, %.v596
  store i64 %11238, i64* %3, align 8
  br i1 %11234, label %block_.L_406daf, label %block_.L_406cb4

block_.L_406cb4:                                  ; preds = %block_.L_406ca2
  %11239 = add i64 %11224, -10884
  %11240 = add i64 %11238, 7
  store i64 %11240, i64* %3, align 8
  %11241 = inttoptr i64 %11239 to i32*
  %11242 = load i32, i32* %11241, align 4
  store i8 0, i8* %14, align 1
  %11243 = and i32 %11242, 255
  %11244 = tail call i32 @llvm.ctpop.i32(i32 %11243)
  %11245 = trunc i32 %11244 to i8
  %11246 = and i8 %11245, 1
  %11247 = xor i8 %11246, 1
  store i8 %11247, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11248 = icmp eq i32 %11242, 0
  %11249 = zext i1 %11248 to i8
  store i8 %11249, i8* %30, align 1
  %11250 = lshr i32 %11242, 31
  %11251 = trunc i32 %11250 to i8
  store i8 %11251, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v597 = select i1 %11248, i64 13, i64 41
  %11252 = add i64 %11238, %.v597
  store i64 %11252, i64* %3, align 8
  br i1 %11248, label %block_406cc1, label %block_.L_406cdd

block_406cc1:                                     ; preds = %block_.L_406cb4
  %11253 = add i64 %11252, 6
  store i64 %11253, i64* %3, align 8
  %11254 = load i32, i32* %11227, align 4
  %11255 = zext i32 %11254 to i64
  store i64 %11255, i64* %RDI.i3360, align 8
  %11256 = add i64 %11224, -20
  %11257 = add i64 %11252, 9
  store i64 %11257, i64* %3, align 8
  %11258 = inttoptr i64 %11256 to i32*
  %11259 = load i32, i32* %11258, align 4
  %11260 = zext i32 %11259 to i64
  store i64 %11260, i64* %RSI.i3112.pre-phi, align 8
  %11261 = add i64 %11252, 54751
  %11262 = add i64 %11252, 14
  %11263 = load i64, i64* %6, align 8
  %11264 = add i64 %11263, -8
  %11265 = inttoptr i64 %11264 to i64*
  store i64 %11262, i64* %11265, align 8
  store i64 %11264, i64* %6, align 8
  store i64 %11261, i64* %3, align 8
  %call2_406cca = tail call %struct.Memory* @sub_4142a0.is_self_atari(%struct.State* nonnull %0, i64 %11261, %struct.Memory* %MEMORY.151)
  %11266 = load i32, i32* %EAX.i3678, align 4
  %11267 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %11268 = and i32 %11266, 255
  %11269 = tail call i32 @llvm.ctpop.i32(i32 %11268)
  %11270 = trunc i32 %11269 to i8
  %11271 = and i8 %11270, 1
  %11272 = xor i8 %11271, 1
  store i8 %11272, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11273 = icmp eq i32 %11266, 0
  %11274 = zext i1 %11273 to i8
  store i8 %11274, i8* %30, align 1
  %11275 = lshr i32 %11266, 31
  %11276 = trunc i32 %11275 to i8
  store i8 %11276, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v604 = select i1 %11273, i64 14, i64 9
  %11277 = add i64 %11267, %.v604
  store i64 %11277, i64* %3, align 8
  br i1 %11273, label %block_406cc1.block_.L_406cdd_crit_edge, label %block_.L_406daf

block_406cc1.block_.L_406cdd_crit_edge:           ; preds = %block_406cc1
  %.pre395 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406cdd

block_.L_406cdd:                                  ; preds = %block_.L_406cb4, %block_406cc1.block_.L_406cdd_crit_edge
  %11278 = phi i64 [ %11224, %block_.L_406cb4 ], [ %.pre395, %block_406cc1.block_.L_406cdd_crit_edge ]
  %11279 = phi i64 [ %11252, %block_.L_406cb4 ], [ %11277, %block_406cc1.block_.L_406cdd_crit_edge ]
  %MEMORY.153 = phi %struct.Memory* [ %MEMORY.151, %block_.L_406cb4 ], [ %call2_406cca, %block_406cc1.block_.L_406cdd_crit_edge ]
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RDX.i3821, align 8
  %11280 = add i64 %11278, -8068
  %11281 = add i64 %11279, 10
  store i64 %11281, i64* %3, align 8
  %11282 = inttoptr i64 %11280 to i32*
  %11283 = load i32, i32* %11282, align 4
  %11284 = zext i32 %11283 to i64
  store i64 %11284, i64* %RDI.i3360, align 8
  %11285 = add i64 %11278, -10876
  %11286 = add i64 %11279, 16
  store i64 %11286, i64* %3, align 8
  %11287 = inttoptr i64 %11285 to i32*
  %11288 = load i32, i32* %11287, align 4
  %11289 = zext i32 %11288 to i64
  store i64 %11289, i64* %RSI.i3112.pre-phi, align 8
  %11290 = add i64 %11279, 286291
  %11291 = add i64 %11279, 21
  %11292 = load i64, i64* %6, align 8
  %11293 = add i64 %11292, -8
  %11294 = inttoptr i64 %11293 to i64*
  store i64 %11291, i64* %11294, align 8
  store i64 %11293, i64* %6, align 8
  store i64 %11290, i64* %3, align 8
  %call2_406ced = tail call %struct.Memory* @sub_44cb30.owl_does_attack(%struct.State* nonnull %0, i64 %11290, %struct.Memory* %MEMORY.153)
  %11295 = load i32, i32* %EAX.i3678, align 4
  %11296 = load i64, i64* %3, align 8
  %11297 = add i32 %11295, -5
  %11298 = icmp ult i32 %11295, 5
  %11299 = zext i1 %11298 to i8
  store i8 %11299, i8* %14, align 1
  %11300 = and i32 %11297, 255
  %11301 = tail call i32 @llvm.ctpop.i32(i32 %11300)
  %11302 = trunc i32 %11301 to i8
  %11303 = and i8 %11302, 1
  %11304 = xor i8 %11303, 1
  store i8 %11304, i8* %21, align 1
  %11305 = xor i32 %11297, %11295
  %11306 = lshr i32 %11305, 4
  %11307 = trunc i32 %11306 to i8
  %11308 = and i8 %11307, 1
  store i8 %11308, i8* %27, align 1
  %11309 = icmp eq i32 %11297, 0
  %11310 = zext i1 %11309 to i8
  store i8 %11310, i8* %30, align 1
  %11311 = lshr i32 %11297, 31
  %11312 = trunc i32 %11311 to i8
  store i8 %11312, i8* %33, align 1
  %11313 = lshr i32 %11295, 31
  %11314 = xor i32 %11311, %11313
  %11315 = add nuw nsw i32 %11314, %11313
  %11316 = icmp eq i32 %11315, 2
  %11317 = zext i1 %11316 to i8
  store i8 %11317, i8* %39, align 1
  %.v598 = select i1 %11309, i64 9, i64 184
  %11318 = add i64 %11296, %.v598
  store i64 %11318, i64* %3, align 8
  br i1 %11309, label %block_406cfb, label %block_.L_406daf

block_406cfb:                                     ; preds = %block_.L_406cdd
  %11319 = load i64, i64* %RBP.i, align 8
  %11320 = add i64 %11319, -10880
  %11321 = add i64 %11318, 7
  store i64 %11321, i64* %3, align 8
  %11322 = inttoptr i64 %11320 to i32*
  %11323 = load i32, i32* %11322, align 4
  store i8 0, i8* %14, align 1
  %11324 = and i32 %11323, 255
  %11325 = tail call i32 @llvm.ctpop.i32(i32 %11324)
  %11326 = trunc i32 %11325 to i8
  %11327 = and i8 %11326, 1
  %11328 = xor i8 %11327, 1
  store i8 %11328, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11329 = icmp eq i32 %11323, 0
  %11330 = zext i1 %11329 to i8
  store i8 %11330, i8* %30, align 1
  %11331 = lshr i32 %11323, 31
  %11332 = trunc i32 %11331 to i8
  store i8 %11332, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v599 = select i1 %11329, i64 48, i64 13
  %11333 = add i64 %11318, %.v599
  store i64 %11333, i64* %3, align 8
  br i1 %11329, label %block_.L_406d2b, label %block_406d08

block_406d08:                                     ; preds = %block_406cfb
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RDX.i3821, align 8
  %11334 = add i64 %11319, -8068
  %11335 = add i64 %11333, 10
  store i64 %11335, i64* %3, align 8
  %11336 = inttoptr i64 %11334 to i32*
  %11337 = load i32, i32* %11336, align 4
  %11338 = zext i32 %11337 to i64
  store i64 %11338, i64* %RDI.i3360, align 8
  %11339 = add i64 %11333, 16
  store i64 %11339, i64* %3, align 8
  %11340 = load i32, i32* %11322, align 4
  %11341 = zext i32 %11340 to i64
  store i64 %11341, i64* %RSI.i3112.pre-phi, align 8
  %11342 = add i64 %11333, 284344
  %11343 = add i64 %11333, 21
  %11344 = load i64, i64* %6, align 8
  %11345 = add i64 %11344, -8
  %11346 = inttoptr i64 %11345 to i64*
  store i64 %11343, i64* %11346, align 8
  store i64 %11345, i64* %6, align 8
  store i64 %11342, i64* %3, align 8
  %call2_406d18 = tail call %struct.Memory* @sub_44c3c0.owl_does_defend(%struct.State* nonnull %0, i64 %11342, %struct.Memory* %call2_406ced)
  %11347 = load i32, i32* %EAX.i3678, align 4
  %11348 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %11349 = and i32 %11347, 255
  %11350 = tail call i32 @llvm.ctpop.i32(i32 %11349)
  %11351 = trunc i32 %11350 to i8
  %11352 = and i8 %11351, 1
  %11353 = xor i8 %11352, 1
  store i8 %11353, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11354 = icmp eq i32 %11347, 0
  %11355 = zext i1 %11354 to i8
  store i8 %11355, i8* %30, align 1
  %11356 = lshr i32 %11347, 31
  %11357 = trunc i32 %11356 to i8
  store i8 %11357, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v600 = select i1 %11354, i64 9, i64 14
  %11358 = add i64 %11348, %.v600
  store i64 %11358, i64* %3, align 8
  br i1 %11354, label %block_.L_406daf, label %block_406d08.block_.L_406d2b_crit_edge

block_406d08.block_.L_406d2b_crit_edge:           ; preds = %block_406d08
  %.pre396 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406d2b

block_.L_406d2b:                                  ; preds = %block_406d08.block_.L_406d2b_crit_edge, %block_406cfb
  %11359 = phi i64 [ %11333, %block_406cfb ], [ %11358, %block_406d08.block_.L_406d2b_crit_edge ]
  %11360 = phi i64 [ %11319, %block_406cfb ], [ %.pre396, %block_406d08.block_.L_406d2b_crit_edge ]
  %MEMORY.154 = phi %struct.Memory* [ %call2_406ced, %block_406cfb ], [ %call2_406d18, %block_406d08.block_.L_406d2b_crit_edge ]
  %11361 = add i64 %11360, -10884
  %11362 = add i64 %11359, 7
  store i64 %11362, i64* %3, align 8
  %11363 = inttoptr i64 %11361 to i32*
  %11364 = load i32, i32* %11363, align 4
  store i8 0, i8* %14, align 1
  %11365 = and i32 %11364, 255
  %11366 = tail call i32 @llvm.ctpop.i32(i32 %11365)
  %11367 = trunc i32 %11366 to i8
  %11368 = and i8 %11367, 1
  %11369 = xor i8 %11368, 1
  store i8 %11369, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11370 = icmp eq i32 %11364, 0
  %11371 = zext i1 %11370 to i8
  store i8 %11371, i8* %30, align 1
  %11372 = lshr i32 %11364, 31
  %11373 = trunc i32 %11372 to i8
  store i8 %11373, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v601 = select i1 %11370, i64 13, i64 48
  %11374 = add i64 %11359, %.v601
  store i64 %11374, i64* %3, align 8
  br i1 %11370, label %block_406d38, label %block_.L_406d5b.loopexit

block_406d38:                                     ; preds = %block_.L_406d2b
  store i64 0, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i3786, align 8
  %11375 = add i64 %11360, -8068
  %11376 = add i64 %11374, 10
  store i64 %11376, i64* %3, align 8
  %11377 = inttoptr i64 %11375 to i32*
  %11378 = load i32, i32* %11377, align 4
  %11379 = zext i32 %11378 to i64
  store i64 %11379, i64* %RDI.i3360, align 8
  %11380 = add i64 %11360, -20
  %11381 = add i64 %11374, 13
  store i64 %11381, i64* %3, align 8
  %11382 = inttoptr i64 %11380 to i32*
  %11383 = load i32, i32* %11382, align 4
  %11384 = zext i32 %11383 to i64
  store i64 %11384, i64* %RSI.i3112.pre-phi, align 8
  store i64 0, i64* %RDX.i3821, align 8
  %11385 = add i64 %11374, 468888
  %11386 = add i64 %11374, 21
  %11387 = load i64, i64* %6, align 8
  %11388 = add i64 %11387, -8
  %11389 = inttoptr i64 %11388 to i64*
  store i64 %11386, i64* %11389, align 8
  store i64 %11388, i64* %6, align 8
  store i64 %11385, i64* %3, align 8
  %call2_406d48 = tail call %struct.Memory* @sub_4794d0.confirm_safety(%struct.State* nonnull %0, i64 %11385, %struct.Memory* %MEMORY.154)
  %11390 = load i32, i32* %EAX.i3678, align 4
  %11391 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %11392 = and i32 %11390, 255
  %11393 = tail call i32 @llvm.ctpop.i32(i32 %11392)
  %11394 = trunc i32 %11393 to i8
  %11395 = and i8 %11394, 1
  %11396 = xor i8 %11395, 1
  store i8 %11396, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11397 = icmp eq i32 %11390, 0
  %11398 = zext i1 %11397 to i8
  store i8 %11398, i8* %30, align 1
  %11399 = lshr i32 %11390, 31
  %11400 = trunc i32 %11399 to i8
  store i8 %11400, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v603 = select i1 %11397, i64 9, i64 14
  %11401 = add i64 %11391, %.v603
  store i64 %11401, i64* %3, align 8
  br i1 %11397, label %block_.L_406daf, label %block_406d38.block_.L_406d5b_crit_edge

block_406d38.block_.L_406d5b_crit_edge:           ; preds = %block_406d38
  %.pre397 = load i64, i64* %RBP.i, align 8
  br label %block_.L_406d5b

block_.L_406d5b.loopexit:                         ; preds = %block_.L_406d2b
  br label %block_.L_406d5b

block_.L_406d5b:                                  ; preds = %block_.L_406d5b.loopexit, %block_406d38.block_.L_406d5b_crit_edge
  %11402 = phi i64 [ %11401, %block_406d38.block_.L_406d5b_crit_edge ], [ %11374, %block_.L_406d5b.loopexit ]
  %11403 = phi i64 [ %.pre397, %block_406d38.block_.L_406d5b_crit_edge ], [ %11360, %block_.L_406d5b.loopexit ]
  %MEMORY.155 = phi %struct.Memory* [ %call2_406d48, %block_406d38.block_.L_406d5b_crit_edge ], [ %MEMORY.154, %block_.L_406d5b.loopexit ]
  %11404 = add i64 %11403, -8068
  %11405 = add i64 %11402, 6
  store i64 %11405, i64* %3, align 8
  %11406 = inttoptr i64 %11404 to i32*
  %11407 = load i32, i32* %11406, align 4
  %11408 = zext i32 %11407 to i64
  store i64 %11408, i64* %RAX.i2528, align 8
  %11409 = add i64 %11403, -16
  %11410 = add i64 %11402, 10
  store i64 %11410, i64* %3, align 8
  %11411 = inttoptr i64 %11409 to i64*
  %11412 = load i64, i64* %11411, align 8
  store i64 %11412, i64* %RCX.i3786, align 8
  %11413 = add i64 %11402, 12
  store i64 %11413, i64* %3, align 8
  %11414 = inttoptr i64 %11412 to i32*
  store i32 %11407, i32* %11414, align 4
  %11415 = load i64, i64* %3, align 8
  %11416 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %11417 = and i32 %11416, 131072
  %11418 = zext i32 %11417 to i64
  store i64 %11418, i64* %RAX.i2528, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit507 = lshr exact i32 %11417, 17
  %11419 = trunc i32 %.lobit507 to i8
  %11420 = xor i8 %11419, 1
  store i8 %11420, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11421 = icmp eq i8 %11420, 0
  %.v602 = select i1 %11421, i64 26, i64 21
  %11422 = add i64 %11415, %.v602
  store i64 %11422, i64* %3, align 8
  br i1 %11421, label %block_.L_406d81, label %block_406d7c

block_406d7c:                                     ; preds = %block_.L_406d5b
  %11423 = add i64 %11422, 34
  store i64 %11423, i64* %3, align 8
  br label %block_.L_406d9e

block_.L_406d81:                                  ; preds = %block_.L_406d5b
  store i64 ptrtoint (%G__0x579ed7_type* @G__0x579ed7 to i64), i64* %RDI.i3360, align 8
  %11424 = load i64, i64* %RBP.i, align 8
  %11425 = add i64 %11424, -8068
  %11426 = add i64 %11422, 16
  store i64 %11426, i64* %3, align 8
  %11427 = inttoptr i64 %11425 to i32*
  %11428 = load i32, i32* %11427, align 4
  %11429 = zext i32 %11428 to i64
  store i64 %11429, i64* %RSI.i3112.pre-phi, align 8
  store i8 0, i8* %AL.i1212, align 1
  %11430 = add i64 %11422, 307247
  %11431 = add i64 %11422, 23
  %11432 = load i64, i64* %6, align 8
  %11433 = add i64 %11432, -8
  %11434 = inttoptr i64 %11433 to i64*
  store i64 %11431, i64* %11434, align 8
  store i64 %11433, i64* %6, align 8
  store i64 %11430, i64* %3, align 8
  %call2_406d93 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %11430, %struct.Memory* %MEMORY.155)
  %11435 = load i64, i64* %RBP.i, align 8
  %11436 = add i64 %11435, -11012
  %11437 = load i32, i32* %EAX.i3678, align 4
  %11438 = load i64, i64* %3, align 8
  %11439 = add i64 %11438, 6
  store i64 %11439, i64* %3, align 8
  %11440 = inttoptr i64 %11436 to i32*
  store i32 %11437, i32* %11440, align 4
  %.pre398 = load i64, i64* %3, align 8
  br label %block_.L_406d9e

block_.L_406d9e:                                  ; preds = %block_.L_406d81, %block_406d7c
  %11441 = phi i64 [ %.pre398, %block_.L_406d81 ], [ %11423, %block_406d7c ]
  %MEMORY.156 = phi %struct.Memory* [ %call2_406d93, %block_.L_406d81 ], [ %MEMORY.155, %block_406d7c ]
  %11442 = load i64, i64* %RBP.i, align 8
  %11443 = add i64 %11442, -4
  %11444 = add i64 %11441, 7
  store i64 %11444, i64* %3, align 8
  %11445 = inttoptr i64 %11443 to i32*
  store i32 1, i32* %11445, align 4
  %11446 = load i64, i64* %3, align 8
  %11447 = add i64 %11446, 459
  store i64 %11447, i64* %3, align 8
  br label %block_.L_406f70

block_.L_406daf:                                  ; preds = %block_406d38, %block_406d08, %block_.L_406cdd, %block_.L_406ca2, %block_.L_406acb, %block_.L_406ab9, %block_406962, %block_40698e, %block_406cc1
  %11448 = phi i64 [ %10680, %block_.L_406ab9 ], [ %10710, %block_.L_406acb ], [ %11238, %block_.L_406ca2 ], [ %11277, %block_406cc1 ], [ %11358, %block_406d08 ], [ %11401, %block_406d38 ], [ %11318, %block_.L_406cdd ], [ %10264, %block_40698e ], [ %10231, %block_406962 ]
  %.sink255 = phi i64 [ 745, %block_.L_406ab9 ], [ 693, %block_.L_406acb ], [ 256, %block_.L_406ca2 ], [ 215, %block_406cc1 ], [ 137, %block_406d08 ], [ 89, %block_406d38 ], [ 5, %block_.L_406cdd ], [ 1036, %block_40698e ], [ 1036, %block_406962 ]
  %MEMORY.157 = phi %struct.Memory* [ %MEMORY.138, %block_.L_406ab9 ], [ %MEMORY.138, %block_.L_406acb ], [ %MEMORY.151, %block_.L_406ca2 ], [ %call2_406cca, %block_406cc1 ], [ %call2_406d18, %block_406d08 ], [ %call2_406d48, %block_406d38 ], [ %call2_406ced, %block_.L_406cdd ], [ %MEMORY.138, %block_40698e ], [ %MEMORY.138, %block_406962 ]
  %11449 = add i64 %11448, %.sink255
  %11450 = load i64, i64* %RBP.i, align 8
  %11451 = add i64 %11450, -8072
  %11452 = add i64 %11449, 6
  store i64 %11452, i64* %3, align 8
  %11453 = inttoptr i64 %11451 to i32*
  %11454 = load i32, i32* %11453, align 4
  %11455 = add i32 %11454, 1
  %11456 = zext i32 %11455 to i64
  store i64 %11456, i64* %RAX.i2528, align 8
  %11457 = icmp eq i32 %11454, -1
  %11458 = icmp eq i32 %11455, 0
  %11459 = or i1 %11457, %11458
  %11460 = zext i1 %11459 to i8
  store i8 %11460, i8* %14, align 1
  %11461 = and i32 %11455, 255
  %11462 = tail call i32 @llvm.ctpop.i32(i32 %11461)
  %11463 = trunc i32 %11462 to i8
  %11464 = and i8 %11463, 1
  %11465 = xor i8 %11464, 1
  store i8 %11465, i8* %21, align 1
  %11466 = xor i32 %11455, %11454
  %11467 = lshr i32 %11466, 4
  %11468 = trunc i32 %11467 to i8
  %11469 = and i8 %11468, 1
  store i8 %11469, i8* %27, align 1
  %11470 = zext i1 %11458 to i8
  store i8 %11470, i8* %30, align 1
  %11471 = lshr i32 %11455, 31
  %11472 = trunc i32 %11471 to i8
  store i8 %11472, i8* %33, align 1
  %11473 = lshr i32 %11454, 31
  %11474 = xor i32 %11471, %11473
  %11475 = add nuw nsw i32 %11474, %11471
  %11476 = icmp eq i32 %11475, 2
  %11477 = zext i1 %11476 to i8
  store i8 %11477, i8* %39, align 1
  %11478 = add i64 %11449, 15
  store i64 %11478, i64* %3, align 8
  store i32 %11455, i32* %11453, align 4
  %11479 = load i64, i64* %3, align 8
  %11480 = add i64 %11479, -1132
  store i64 %11480, i64* %3, align 8
  br label %block_.L_406952

block_.L_406dc3:                                  ; preds = %block_.L_406952
  %11481 = add i64 %10203, 10
  store i64 %11481, i64* %3, align 8
  store i32 21, i32* %10177, align 4
  %.pre386 = load i64, i64* %3, align 8
  br label %block_.L_406dcd

block_.L_406dcd:                                  ; preds = %block_.L_406f50, %block_.L_406dc3
  %11482 = phi i64 [ %12015, %block_.L_406f50 ], [ %.pre386, %block_.L_406dc3 ]
  %11483 = load i64, i64* %RBP.i, align 8
  %11484 = add i64 %11483, -8072
  %11485 = add i64 %11482, 10
  store i64 %11485, i64* %3, align 8
  %11486 = inttoptr i64 %11484 to i32*
  %11487 = load i32, i32* %11486, align 4
  %11488 = add i32 %11487, -400
  %11489 = icmp ult i32 %11487, 400
  %11490 = zext i1 %11489 to i8
  store i8 %11490, i8* %14, align 1
  %11491 = and i32 %11488, 255
  %11492 = tail call i32 @llvm.ctpop.i32(i32 %11491)
  %11493 = trunc i32 %11492 to i8
  %11494 = and i8 %11493, 1
  %11495 = xor i8 %11494, 1
  store i8 %11495, i8* %21, align 1
  %11496 = xor i32 %11487, 16
  %11497 = xor i32 %11496, %11488
  %11498 = lshr i32 %11497, 4
  %11499 = trunc i32 %11498 to i8
  %11500 = and i8 %11499, 1
  store i8 %11500, i8* %27, align 1
  %11501 = icmp eq i32 %11488, 0
  %11502 = zext i1 %11501 to i8
  store i8 %11502, i8* %30, align 1
  %11503 = lshr i32 %11488, 31
  %11504 = trunc i32 %11503 to i8
  store i8 %11504, i8* %33, align 1
  %11505 = lshr i32 %11487, 31
  %11506 = xor i32 %11503, %11505
  %11507 = add nuw nsw i32 %11506, %11505
  %11508 = icmp eq i32 %11507, 2
  %11509 = zext i1 %11508 to i8
  store i8 %11509, i8* %39, align 1
  %11510 = icmp ne i8 %11504, 0
  %11511 = xor i1 %11510, %11508
  %.v579 = select i1 %11511, i64 16, i64 412
  %11512 = add i64 %11482, %.v579
  store i64 %11512, i64* %3, align 8
  br i1 %11511, label %block_406ddd, label %block_.L_406f69

block_406ddd:                                     ; preds = %block_.L_406dcd
  %11513 = add i64 %11512, 7
  store i64 %11513, i64* %3, align 8
  %11514 = load i32, i32* %11486, align 4
  %11515 = sext i32 %11514 to i64
  store i64 %11515, i64* %RAX.i2528, align 8
  %11516 = add nsw i64 %11515, 12099168
  %11517 = add i64 %11512, 15
  store i64 %11517, i64* %3, align 8
  %11518 = inttoptr i64 %11516 to i8*
  %11519 = load i8, i8* %11518, align 1
  %11520 = zext i8 %11519 to i64
  store i64 %11520, i64* %RCX.i3786, align 8
  %11521 = zext i8 %11519 to i32
  %11522 = add i64 %11483, -44
  %11523 = add i64 %11512, 18
  store i64 %11523, i64* %3, align 8
  %11524 = inttoptr i64 %11522 to i32*
  %11525 = load i32, i32* %11524, align 4
  %11526 = sub i32 %11521, %11525
  %11527 = icmp ult i32 %11521, %11525
  %11528 = zext i1 %11527 to i8
  store i8 %11528, i8* %14, align 1
  %11529 = and i32 %11526, 255
  %11530 = tail call i32 @llvm.ctpop.i32(i32 %11529)
  %11531 = trunc i32 %11530 to i8
  %11532 = and i8 %11531, 1
  %11533 = xor i8 %11532, 1
  store i8 %11533, i8* %21, align 1
  %11534 = xor i32 %11525, %11521
  %11535 = xor i32 %11534, %11526
  %11536 = lshr i32 %11535, 4
  %11537 = trunc i32 %11536 to i8
  %11538 = and i8 %11537, 1
  store i8 %11538, i8* %27, align 1
  %11539 = icmp eq i32 %11526, 0
  %11540 = zext i1 %11539 to i8
  store i8 %11540, i8* %30, align 1
  %11541 = lshr i32 %11526, 31
  %11542 = trunc i32 %11541 to i8
  store i8 %11542, i8* %33, align 1
  %11543 = lshr i32 %11525, 31
  %11544 = add nuw nsw i32 %11541, %11543
  %11545 = icmp eq i32 %11544, 2
  %11546 = zext i1 %11545 to i8
  store i8 %11546, i8* %39, align 1
  %.v580 = select i1 %11539, i64 24, i64 371
  %11547 = add i64 %11512, %.v580
  store i64 %11547, i64* %3, align 8
  br i1 %11539, label %block_406df5, label %block_.L_406f50

block_406df5:                                     ; preds = %block_406ddd
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %11548 = add i64 %11547, 17
  store i64 %11548, i64* %3, align 8
  %11549 = load i32, i32* %11486, align 4
  %11550 = sext i32 %11549 to i64
  %11551 = mul nsw i64 %11550, 380
  store i64 %11551, i64* %RCX.i3786, align 8
  %11552 = lshr i64 %11551, 63
  %11553 = add i64 %11551, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11553, i64* %RAX.i2528, align 8
  %11554 = icmp ult i64 %11553, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11555 = icmp ult i64 %11553, %11551
  %11556 = or i1 %11554, %11555
  %11557 = zext i1 %11556 to i8
  store i8 %11557, i8* %14, align 1
  %11558 = trunc i64 %11553 to i32
  %11559 = and i32 %11558, 252
  %11560 = tail call i32 @llvm.ctpop.i32(i32 %11559)
  %11561 = trunc i32 %11560 to i8
  %11562 = and i8 %11561, 1
  %11563 = xor i8 %11562, 1
  store i8 %11563, i8* %21, align 1
  %11564 = xor i64 %11551, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11565 = xor i64 %11564, %11553
  %11566 = lshr i64 %11565, 4
  %11567 = trunc i64 %11566 to i8
  %11568 = and i8 %11567, 1
  store i8 %11568, i8* %27, align 1
  %11569 = icmp eq i64 %11553, 0
  %11570 = zext i1 %11569 to i8
  store i8 %11570, i8* %30, align 1
  %11571 = lshr i64 %11553, 63
  %11572 = trunc i64 %11571 to i8
  store i8 %11572, i8* %33, align 1
  %11573 = xor i64 %11571, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11574 = xor i64 %11571, %11552
  %11575 = add nuw nsw i64 %11573, %11574
  %11576 = icmp eq i64 %11575, 2
  %11577 = zext i1 %11576 to i8
  store i8 %11577, i8* %39, align 1
  %11578 = add i64 %11551, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 56)
  %11579 = add i64 %11547, 31
  store i64 %11579, i64* %3, align 8
  %11580 = inttoptr i64 %11578 to i32*
  %11581 = load i32, i32* %11580, align 4
  %11582 = add i32 %11581, -3
  %11583 = icmp ult i32 %11581, 3
  %11584 = zext i1 %11583 to i8
  store i8 %11584, i8* %14, align 1
  %11585 = and i32 %11582, 255
  %11586 = tail call i32 @llvm.ctpop.i32(i32 %11585)
  %11587 = trunc i32 %11586 to i8
  %11588 = and i8 %11587, 1
  %11589 = xor i8 %11588, 1
  store i8 %11589, i8* %21, align 1
  %11590 = xor i32 %11582, %11581
  %11591 = lshr i32 %11590, 4
  %11592 = trunc i32 %11591 to i8
  %11593 = and i8 %11592, 1
  store i8 %11593, i8* %27, align 1
  %11594 = icmp eq i32 %11582, 0
  %11595 = zext i1 %11594 to i8
  store i8 %11595, i8* %30, align 1
  %11596 = lshr i32 %11582, 31
  %11597 = trunc i32 %11596 to i8
  store i8 %11597, i8* %33, align 1
  %11598 = lshr i32 %11581, 31
  %11599 = xor i32 %11596, %11598
  %11600 = add nuw nsw i32 %11599, %11598
  %11601 = icmp eq i32 %11600, 2
  %11602 = zext i1 %11601 to i8
  store i8 %11602, i8* %39, align 1
  %.v581 = select i1 %11594, i64 47, i64 37
  %11603 = add i64 %11547, %.v581
  store i64 %11603, i64* %3, align 8
  %.pre387 = load i64, i64* %RBP.i, align 8
  br i1 %11594, label %block_.L_406e24, label %block_406e1a

block_406e1a:                                     ; preds = %block_406df5
  %11604 = add i64 %.pre387, -36
  %11605 = add i64 %11603, 4
  store i64 %11605, i64* %3, align 8
  %11606 = inttoptr i64 %11604 to i32*
  %11607 = load i32, i32* %11606, align 4
  store i8 0, i8* %14, align 1
  %11608 = and i32 %11607, 255
  %11609 = tail call i32 @llvm.ctpop.i32(i32 %11608)
  %11610 = trunc i32 %11609 to i8
  %11611 = and i8 %11610, 1
  %11612 = xor i8 %11611, 1
  store i8 %11612, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11613 = icmp eq i32 %11607, 0
  %11614 = zext i1 %11613 to i8
  store i8 %11614, i8* %30, align 1
  %11615 = lshr i32 %11607, 31
  %11616 = trunc i32 %11615 to i8
  store i8 %11616, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v582 = select i1 %11613, i64 310, i64 10
  %11617 = add i64 %11603, %.v582
  store i64 %11617, i64* %3, align 8
  br i1 %11613, label %block_.L_406f50, label %block_.L_406e24

block_.L_406e24:                                  ; preds = %block_406df5, %block_406e1a
  %11618 = phi i64 [ %11617, %block_406e1a ], [ %11603, %block_406df5 ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %11619 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %11619, i64* %RCX.i3786, align 8
  %11620 = add i64 %.pre387, -8072
  %11621 = add i64 %11618, 25
  store i64 %11621, i64* %3, align 8
  %11622 = inttoptr i64 %11620 to i32*
  %11623 = load i32, i32* %11622, align 4
  %11624 = sext i32 %11623 to i64
  %11625 = mul nsw i64 %11624, 76
  store i64 %11625, i64* %RDX.i3821, align 8
  %11626 = lshr i64 %11625, 63
  %11627 = add i64 %11625, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %11627, i64* %RAX.i2528, align 8
  %11628 = icmp ult i64 %11627, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11629 = icmp ult i64 %11627, %11625
  %11630 = or i1 %11628, %11629
  %11631 = zext i1 %11630 to i8
  store i8 %11631, i8* %14, align 1
  %11632 = trunc i64 %11627 to i32
  %11633 = and i32 %11632, 252
  %11634 = tail call i32 @llvm.ctpop.i32(i32 %11633)
  %11635 = trunc i32 %11634 to i8
  %11636 = and i8 %11635, 1
  %11637 = xor i8 %11636, 1
  store i8 %11637, i8* %21, align 1
  %11638 = xor i64 %11625, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11639 = xor i64 %11638, %11627
  %11640 = lshr i64 %11639, 4
  %11641 = trunc i64 %11640 to i8
  %11642 = and i8 %11641, 1
  store i8 %11642, i8* %27, align 1
  %11643 = icmp eq i64 %11627, 0
  %11644 = zext i1 %11643 to i8
  store i8 %11644, i8* %30, align 1
  %11645 = lshr i64 %11627, 63
  %11646 = trunc i64 %11645 to i8
  store i8 %11646, i8* %33, align 1
  %11647 = xor i64 %11645, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %11648 = xor i64 %11645, %11626
  %11649 = add nuw nsw i64 %11647, %11648
  %11650 = icmp eq i64 %11649, 2
  %11651 = zext i1 %11650 to i8
  store i8 %11651, i8* %39, align 1
  %11652 = add i64 %11625, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %11653 = add i64 %11618, 36
  store i64 %11653, i64* %3, align 8
  %11654 = inttoptr i64 %11652 to i32*
  %11655 = load i32, i32* %11654, align 4
  %11656 = sext i32 %11655 to i64
  %11657 = mul nsw i64 %11656, 104
  store i64 %11657, i64* %RAX.i2528, align 8
  %11658 = lshr i64 %11657, 63
  %11659 = load i64, i64* %RCX.i3786, align 8
  %11660 = add i64 %11657, %11659
  store i64 %11660, i64* %RCX.i3786, align 8
  %11661 = icmp ult i64 %11660, %11659
  %11662 = icmp ult i64 %11660, %11657
  %11663 = or i1 %11661, %11662
  %11664 = zext i1 %11663 to i8
  store i8 %11664, i8* %14, align 1
  %11665 = trunc i64 %11660 to i32
  %11666 = and i32 %11665, 255
  %11667 = tail call i32 @llvm.ctpop.i32(i32 %11666)
  %11668 = trunc i32 %11667 to i8
  %11669 = and i8 %11668, 1
  %11670 = xor i8 %11669, 1
  store i8 %11670, i8* %21, align 1
  %11671 = xor i64 %11657, %11659
  %11672 = xor i64 %11671, %11660
  %11673 = lshr i64 %11672, 4
  %11674 = trunc i64 %11673 to i8
  %11675 = and i8 %11674, 1
  store i8 %11675, i8* %27, align 1
  %11676 = icmp eq i64 %11660, 0
  %11677 = zext i1 %11676 to i8
  store i8 %11677, i8* %30, align 1
  %11678 = lshr i64 %11660, 63
  %11679 = trunc i64 %11678 to i8
  store i8 %11679, i8* %33, align 1
  %11680 = lshr i64 %11659, 63
  %11681 = xor i64 %11678, %11680
  %11682 = xor i64 %11678, %11658
  %11683 = add nuw nsw i64 %11681, %11682
  %11684 = icmp eq i64 %11683, 2
  %11685 = zext i1 %11684 to i8
  store i8 %11685, i8* %39, align 1
  %11686 = add i64 %11660, 60
  %11687 = add i64 %11618, 47
  store i64 %11687, i64* %3, align 8
  %11688 = inttoptr i64 %11686 to i32*
  %11689 = load i32, i32* %11688, align 4
  store i8 0, i8* %14, align 1
  %11690 = and i32 %11689, 255
  %11691 = tail call i32 @llvm.ctpop.i32(i32 %11690)
  %11692 = trunc i32 %11691 to i8
  %11693 = and i8 %11692, 1
  %11694 = xor i8 %11693, 1
  store i8 %11694, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11695 = icmp eq i32 %11689, 0
  %11696 = zext i1 %11695 to i8
  store i8 %11696, i8* %30, align 1
  %11697 = lshr i32 %11689, 31
  %11698 = trunc i32 %11697 to i8
  store i8 %11698, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v583 = select i1 %11695, i64 106, i64 53
  %11699 = add i64 %11618, %.v583
  store i64 %11699, i64* %3, align 8
  br i1 %11695, label %block_.L_406e8e, label %block_406e59

block_406e59:                                     ; preds = %block_.L_406e24
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i2528, align 8
  %11700 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %11700, i64* %RCX.i3786, align 8
  %11701 = load i64, i64* %RBP.i, align 8
  %11702 = add i64 %11701, -8072
  %11703 = add i64 %11699, 25
  store i64 %11703, i64* %3, align 8
  %11704 = inttoptr i64 %11702 to i32*
  %11705 = load i32, i32* %11704, align 4
  %11706 = sext i32 %11705 to i64
  %11707 = mul nsw i64 %11706, 76
  store i64 %11707, i64* %RDX.i3821, align 8
  %11708 = lshr i64 %11707, 63
  %11709 = add i64 %11707, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %11709, i64* %RAX.i2528, align 8
  %11710 = icmp ult i64 %11709, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11711 = icmp ult i64 %11709, %11707
  %11712 = or i1 %11710, %11711
  %11713 = zext i1 %11712 to i8
  store i8 %11713, i8* %14, align 1
  %11714 = trunc i64 %11709 to i32
  %11715 = and i32 %11714, 252
  %11716 = tail call i32 @llvm.ctpop.i32(i32 %11715)
  %11717 = trunc i32 %11716 to i8
  %11718 = and i8 %11717, 1
  %11719 = xor i8 %11718, 1
  store i8 %11719, i8* %21, align 1
  %11720 = xor i64 %11707, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11721 = xor i64 %11720, %11709
  %11722 = lshr i64 %11721, 4
  %11723 = trunc i64 %11722 to i8
  %11724 = and i8 %11723, 1
  store i8 %11724, i8* %27, align 1
  %11725 = icmp eq i64 %11709, 0
  %11726 = zext i1 %11725 to i8
  store i8 %11726, i8* %30, align 1
  %11727 = lshr i64 %11709, 63
  %11728 = trunc i64 %11727 to i8
  store i8 %11728, i8* %33, align 1
  %11729 = xor i64 %11727, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %11730 = xor i64 %11727, %11708
  %11731 = add nuw nsw i64 %11729, %11730
  %11732 = icmp eq i64 %11731, 2
  %11733 = zext i1 %11732 to i8
  store i8 %11733, i8* %39, align 1
  %11734 = add i64 %11707, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %11735 = add i64 %11699, 36
  store i64 %11735, i64* %3, align 8
  %11736 = inttoptr i64 %11734 to i32*
  %11737 = load i32, i32* %11736, align 4
  %11738 = sext i32 %11737 to i64
  %11739 = mul nsw i64 %11738, 104
  store i64 %11739, i64* %RAX.i2528, align 8
  %11740 = lshr i64 %11739, 63
  %11741 = load i64, i64* %RCX.i3786, align 8
  %11742 = add i64 %11739, %11741
  store i64 %11742, i64* %RCX.i3786, align 8
  %11743 = icmp ult i64 %11742, %11741
  %11744 = icmp ult i64 %11742, %11739
  %11745 = or i1 %11743, %11744
  %11746 = zext i1 %11745 to i8
  store i8 %11746, i8* %14, align 1
  %11747 = trunc i64 %11742 to i32
  %11748 = and i32 %11747, 255
  %11749 = tail call i32 @llvm.ctpop.i32(i32 %11748)
  %11750 = trunc i32 %11749 to i8
  %11751 = and i8 %11750, 1
  %11752 = xor i8 %11751, 1
  store i8 %11752, i8* %21, align 1
  %11753 = xor i64 %11739, %11741
  %11754 = xor i64 %11753, %11742
  %11755 = lshr i64 %11754, 4
  %11756 = trunc i64 %11755 to i8
  %11757 = and i8 %11756, 1
  store i8 %11757, i8* %27, align 1
  %11758 = icmp eq i64 %11742, 0
  %11759 = zext i1 %11758 to i8
  store i8 %11759, i8* %30, align 1
  %11760 = lshr i64 %11742, 63
  %11761 = trunc i64 %11760 to i8
  store i8 %11761, i8* %33, align 1
  %11762 = lshr i64 %11741, 63
  %11763 = xor i64 %11760, %11762
  %11764 = xor i64 %11760, %11740
  %11765 = add nuw nsw i64 %11763, %11764
  %11766 = icmp eq i64 %11765, 2
  %11767 = zext i1 %11766 to i8
  store i8 %11767, i8* %39, align 1
  %11768 = add i64 %11742, 60
  %11769 = add i64 %11699, 47
  store i64 %11769, i64* %3, align 8
  %11770 = inttoptr i64 %11768 to i32*
  %11771 = load i32, i32* %11770, align 4
  %11772 = add i32 %11771, -6
  %11773 = icmp ult i32 %11771, 6
  %11774 = zext i1 %11773 to i8
  store i8 %11774, i8* %14, align 1
  %11775 = and i32 %11772, 255
  %11776 = tail call i32 @llvm.ctpop.i32(i32 %11775)
  %11777 = trunc i32 %11776 to i8
  %11778 = and i8 %11777, 1
  %11779 = xor i8 %11778, 1
  store i8 %11779, i8* %21, align 1
  %11780 = xor i32 %11772, %11771
  %11781 = lshr i32 %11780, 4
  %11782 = trunc i32 %11781 to i8
  %11783 = and i8 %11782, 1
  store i8 %11783, i8* %27, align 1
  %11784 = icmp eq i32 %11772, 0
  %11785 = zext i1 %11784 to i8
  store i8 %11785, i8* %30, align 1
  %11786 = lshr i32 %11772, 31
  %11787 = trunc i32 %11786 to i8
  store i8 %11787, i8* %33, align 1
  %11788 = lshr i32 %11771, 31
  %11789 = xor i32 %11786, %11788
  %11790 = add nuw nsw i32 %11789, %11788
  %11791 = icmp eq i32 %11790, 2
  %11792 = zext i1 %11791 to i8
  store i8 %11792, i8* %39, align 1
  %.v584 = select i1 %11784, i64 53, i64 247
  %11793 = add i64 %11699, %.v584
  store i64 %11793, i64* %3, align 8
  br i1 %11784, label %block_.L_406e8e, label %block_.L_406f50

block_.L_406e8e:                                  ; preds = %block_406e59, %block_.L_406e24
  %11794 = phi i64 [ %11793, %block_406e59 ], [ %11699, %block_.L_406e24 ]
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %11795 = load i64, i64* %RBP.i, align 8
  %11796 = add i64 %11795, -8072
  %11797 = add i64 %11794, 17
  store i64 %11797, i64* %3, align 8
  %11798 = inttoptr i64 %11796 to i32*
  %11799 = load i32, i32* %11798, align 4
  %11800 = sext i32 %11799 to i64
  %11801 = mul nsw i64 %11800, 380
  store i64 %11801, i64* %RCX.i3786, align 8
  %11802 = lshr i64 %11801, 63
  %11803 = add i64 %11801, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11803, i64* %RAX.i2528, align 8
  %11804 = icmp ult i64 %11803, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11805 = icmp ult i64 %11803, %11801
  %11806 = or i1 %11804, %11805
  %11807 = zext i1 %11806 to i8
  store i8 %11807, i8* %14, align 1
  %11808 = trunc i64 %11803 to i32
  %11809 = and i32 %11808, 252
  %11810 = tail call i32 @llvm.ctpop.i32(i32 %11809)
  %11811 = trunc i32 %11810 to i8
  %11812 = and i8 %11811, 1
  %11813 = xor i8 %11812, 1
  store i8 %11813, i8* %21, align 1
  %11814 = xor i64 %11801, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11815 = xor i64 %11814, %11803
  %11816 = lshr i64 %11815, 4
  %11817 = trunc i64 %11816 to i8
  %11818 = and i8 %11817, 1
  store i8 %11818, i8* %27, align 1
  %11819 = icmp eq i64 %11803, 0
  %11820 = zext i1 %11819 to i8
  store i8 %11820, i8* %30, align 1
  %11821 = lshr i64 %11803, 63
  %11822 = trunc i64 %11821 to i8
  store i8 %11822, i8* %33, align 1
  %11823 = xor i64 %11821, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11824 = xor i64 %11821, %11802
  %11825 = add nuw nsw i64 %11823, %11824
  %11826 = icmp eq i64 %11825, 2
  %11827 = zext i1 %11826 to i8
  store i8 %11827, i8* %39, align 1
  %11828 = add i64 %11801, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 100)
  %11829 = add i64 %11794, 31
  store i64 %11829, i64* %3, align 8
  %11830 = inttoptr i64 %11828 to i32*
  %11831 = load i32, i32* %11830, align 4
  store i8 0, i8* %14, align 1
  %11832 = and i32 %11831, 255
  %11833 = tail call i32 @llvm.ctpop.i32(i32 %11832)
  %11834 = trunc i32 %11833 to i8
  %11835 = and i8 %11834, 1
  %11836 = xor i8 %11835, 1
  store i8 %11836, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11837 = icmp eq i32 %11831, 0
  %11838 = zext i1 %11837 to i8
  store i8 %11838, i8* %30, align 1
  %11839 = lshr i32 %11831, 31
  %11840 = trunc i32 %11839 to i8
  store i8 %11840, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v585 = select i1 %11837, i64 194, i64 37
  %11841 = add i64 %11794, %.v585
  store i64 %11841, i64* %3, align 8
  br i1 %11837, label %block_.L_406f50, label %block_406eb3

block_406eb3:                                     ; preds = %block_.L_406e8e
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %11842 = add i64 %11841, 17
  store i64 %11842, i64* %3, align 8
  %11843 = load i32, i32* %11798, align 4
  %11844 = sext i32 %11843 to i64
  %11845 = mul nsw i64 %11844, 380
  store i64 %11845, i64* %RCX.i3786, align 8
  %11846 = lshr i64 %11845, 63
  %11847 = add i64 %11845, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11847, i64* %RAX.i2528, align 8
  %11848 = icmp ult i64 %11847, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11849 = icmp ult i64 %11847, %11845
  %11850 = or i1 %11848, %11849
  %11851 = zext i1 %11850 to i8
  store i8 %11851, i8* %14, align 1
  %11852 = trunc i64 %11847 to i32
  %11853 = and i32 %11852, 252
  %11854 = tail call i32 @llvm.ctpop.i32(i32 %11853)
  %11855 = trunc i32 %11854 to i8
  %11856 = and i8 %11855, 1
  %11857 = xor i8 %11856, 1
  store i8 %11857, i8* %21, align 1
  %11858 = xor i64 %11845, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11859 = xor i64 %11858, %11847
  %11860 = lshr i64 %11859, 4
  %11861 = trunc i64 %11860 to i8
  %11862 = and i8 %11861, 1
  store i8 %11862, i8* %27, align 1
  %11863 = icmp eq i64 %11847, 0
  %11864 = zext i1 %11863 to i8
  store i8 %11864, i8* %30, align 1
  %11865 = lshr i64 %11847, 63
  %11866 = trunc i64 %11865 to i8
  store i8 %11866, i8* %33, align 1
  %11867 = xor i64 %11865, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11868 = xor i64 %11865, %11846
  %11869 = add nuw nsw i64 %11867, %11868
  %11870 = icmp eq i64 %11869, 2
  %11871 = zext i1 %11870 to i8
  store i8 %11871, i8* %39, align 1
  %11872 = add i64 %11845, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 60)
  %11873 = add i64 %11841, 30
  store i64 %11873, i64* %3, align 8
  %11874 = inttoptr i64 %11872 to i32*
  %11875 = load i32, i32* %11874, align 4
  %11876 = zext i32 %11875 to i64
  store i64 %11876, i64* %RDI.i3360, align 8
  %11877 = add i64 %11795, -20
  %11878 = add i64 %11841, 33
  store i64 %11878, i64* %3, align 8
  %11879 = inttoptr i64 %11877 to i32*
  %11880 = load i32, i32* %11879, align 4
  %11881 = zext i32 %11880 to i64
  store i64 %11881, i64* %RSI.i3112.pre-phi, align 8
  %11882 = add i64 %11841, 32189
  %11883 = add i64 %11841, 38
  %11884 = load i64, i64* %6, align 8
  %11885 = add i64 %11884, -8
  %11886 = inttoptr i64 %11885 to i64*
  store i64 %11883, i64* %11886, align 8
  store i64 %11885, i64* %6, align 8
  store i64 %11882, i64* %3, align 8
  %call2_406ed4 = tail call %struct.Memory* @sub_40ec70.is_illegal_ko_capture(%struct.State* nonnull %0, i64 %11882, %struct.Memory* %MEMORY.138)
  %11887 = load i32, i32* %EAX.i3678, align 4
  %11888 = load i64, i64* %3, align 8
  store i8 0, i8* %14, align 1
  %11889 = and i32 %11887, 255
  %11890 = tail call i32 @llvm.ctpop.i32(i32 %11889)
  %11891 = trunc i32 %11890 to i8
  %11892 = and i8 %11891, 1
  %11893 = xor i8 %11892, 1
  store i8 %11893, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11894 = icmp eq i32 %11887, 0
  %11895 = zext i1 %11894 to i8
  store i8 %11895, i8* %30, align 1
  %11896 = lshr i32 %11887, 31
  %11897 = trunc i32 %11896 to i8
  store i8 %11897, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v586 = select i1 %11894, i64 9, i64 119
  %11898 = add i64 %11888, %.v586
  store i64 %11898, i64* %3, align 8
  br i1 %11894, label %block_406ee2, label %block_.L_406f50

block_406ee2:                                     ; preds = %block_406eb3
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i2528, align 8
  %11899 = load i64, i64* %RBP.i, align 8
  %11900 = add i64 %11899, -8072
  %11901 = add i64 %11898, 17
  store i64 %11901, i64* %3, align 8
  %11902 = inttoptr i64 %11900 to i32*
  %11903 = load i32, i32* %11902, align 4
  %11904 = sext i32 %11903 to i64
  %11905 = mul nsw i64 %11904, 380
  store i64 %11905, i64* %RCX.i3786, align 8
  %11906 = lshr i64 %11905, 63
  %11907 = add i64 %11905, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11907, i64* %RAX.i2528, align 8
  %11908 = icmp ult i64 %11907, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11909 = icmp ult i64 %11907, %11905
  %11910 = or i1 %11908, %11909
  %11911 = zext i1 %11910 to i8
  store i8 %11911, i8* %14, align 1
  %11912 = trunc i64 %11907 to i32
  %11913 = and i32 %11912, 252
  %11914 = tail call i32 @llvm.ctpop.i32(i32 %11913)
  %11915 = trunc i32 %11914 to i8
  %11916 = and i8 %11915, 1
  %11917 = xor i8 %11916, 1
  store i8 %11917, i8* %21, align 1
  %11918 = xor i64 %11905, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11919 = xor i64 %11918, %11907
  %11920 = lshr i64 %11919, 4
  %11921 = trunc i64 %11920 to i8
  %11922 = and i8 %11921, 1
  store i8 %11922, i8* %27, align 1
  %11923 = icmp eq i64 %11907, 0
  %11924 = zext i1 %11923 to i8
  store i8 %11924, i8* %30, align 1
  %11925 = lshr i64 %11907, 63
  %11926 = trunc i64 %11925 to i8
  store i8 %11926, i8* %33, align 1
  %11927 = xor i64 %11925, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11928 = xor i64 %11925, %11906
  %11929 = add nuw nsw i64 %11927, %11928
  %11930 = icmp eq i64 %11929, 2
  %11931 = zext i1 %11930 to i8
  store i8 %11931, i8* %39, align 1
  %11932 = add i64 %11905, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 60)
  %11933 = add i64 %11898, 30
  store i64 %11933, i64* %3, align 8
  %11934 = inttoptr i64 %11932 to i32*
  %11935 = load i32, i32* %11934, align 4
  %11936 = zext i32 %11935 to i64
  store i64 %11936, i64* %RDX.i3821, align 8
  %11937 = add i64 %11899, -16
  %11938 = add i64 %11898, 34
  store i64 %11938, i64* %3, align 8
  %11939 = inttoptr i64 %11937 to i64*
  %11940 = load i64, i64* %11939, align 8
  store i64 %11940, i64* %RAX.i2528, align 8
  %11941 = add i64 %11898, 36
  store i64 %11941, i64* %3, align 8
  %11942 = inttoptr i64 %11940 to i32*
  store i32 %11935, i32* %11942, align 4
  %11943 = load i64, i64* %3, align 8
  %11944 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %11945 = and i32 %11944, 131072
  %11946 = zext i32 %11945 to i64
  store i64 %11946, i64* %RDX.i3821, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit506 = lshr exact i32 %11945, 17
  %11947 = trunc i32 %.lobit506 to i8
  %11948 = xor i8 %11947, 1
  store i8 %11948, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11949 = icmp eq i8 %11948, 0
  %.v587 = select i1 %11949, i64 27, i64 22
  %11950 = add i64 %11943, %.v587
  store i64 %11950, i64* %3, align 8
  br i1 %11949, label %block_.L_406f21, label %block_406f1c

block_406f1c:                                     ; preds = %block_406ee2
  %11951 = add i64 %11950, 40
  store i64 %11951, i64* %3, align 8
  br label %block_.L_406f44

block_.L_406f21:                                  ; preds = %block_406ee2
  store i64 ptrtoint (%G__0x579ef8_type* @G__0x579ef8 to i64), i64* %RDI.i3360, align 8
  %11952 = load i64, i64* %RBP.i, align 8
  %11953 = add i64 %11952, -8072
  %11954 = add i64 %11950, 16
  store i64 %11954, i64* %3, align 8
  %11955 = inttoptr i64 %11953 to i32*
  %11956 = load i32, i32* %11955, align 4
  %11957 = zext i32 %11956 to i64
  store i64 %11957, i64* %RSI.i3112.pre-phi, align 8
  %11958 = add i64 %11952, -16
  %11959 = add i64 %11950, 20
  store i64 %11959, i64* %3, align 8
  %11960 = inttoptr i64 %11958 to i64*
  %11961 = load i64, i64* %11960, align 8
  store i64 %11961, i64* %RAX.i2528, align 8
  %11962 = add i64 %11950, 22
  store i64 %11962, i64* %3, align 8
  %11963 = inttoptr i64 %11961 to i32*
  %11964 = load i32, i32* %11963, align 4
  %11965 = zext i32 %11964 to i64
  store i64 %11965, i64* %RDX.i3821, align 8
  store i8 0, i8* %AL.i1212, align 1
  %11966 = add i64 %11950, 306831
  %11967 = add i64 %11950, 29
  %11968 = load i64, i64* %6, align 8
  %11969 = add i64 %11968, -8
  %11970 = inttoptr i64 %11969 to i64*
  store i64 %11967, i64* %11970, align 8
  store i64 %11969, i64* %6, align 8
  store i64 %11966, i64* %3, align 8
  %call2_406f39 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %11966, %struct.Memory* %MEMORY.138)
  %11971 = load i64, i64* %RBP.i, align 8
  %11972 = add i64 %11971, -11016
  %11973 = load i32, i32* %EAX.i3678, align 4
  %11974 = load i64, i64* %3, align 8
  %11975 = add i64 %11974, 6
  store i64 %11975, i64* %3, align 8
  %11976 = inttoptr i64 %11972 to i32*
  store i32 %11973, i32* %11976, align 4
  %.pre388 = load i64, i64* %3, align 8
  br label %block_.L_406f44

block_.L_406f44:                                  ; preds = %block_.L_406f21, %block_406f1c
  %11977 = phi i64 [ %.pre388, %block_.L_406f21 ], [ %11951, %block_406f1c ]
  %MEMORY.161 = phi %struct.Memory* [ %call2_406f39, %block_.L_406f21 ], [ %MEMORY.138, %block_406f1c ]
  %11978 = load i64, i64* %RBP.i, align 8
  %11979 = add i64 %11978, -4
  %11980 = add i64 %11977, 7
  store i64 %11980, i64* %3, align 8
  %11981 = inttoptr i64 %11979 to i32*
  store i32 1, i32* %11981, align 4
  %11982 = load i64, i64* %3, align 8
  %11983 = add i64 %11982, 37
  store i64 %11983, i64* %3, align 8
  br label %block_.L_406f70

block_.L_406f50:                                  ; preds = %block_406eb3, %block_406e59, %block_406ddd, %block_.L_406e8e, %block_406e1a
  %11984 = phi i64 [ %11898, %block_406eb3 ], [ %11841, %block_.L_406e8e ], [ %11793, %block_406e59 ], [ %11617, %block_406e1a ], [ %11547, %block_406ddd ]
  %11985 = load i64, i64* %RBP.i, align 8
  %11986 = add i64 %11985, -8072
  %11987 = add i64 %11984, 11
  store i64 %11987, i64* %3, align 8
  %11988 = inttoptr i64 %11986 to i32*
  %11989 = load i32, i32* %11988, align 4
  %11990 = add i32 %11989, 1
  %11991 = zext i32 %11990 to i64
  store i64 %11991, i64* %RAX.i2528, align 8
  %11992 = icmp eq i32 %11989, -1
  %11993 = icmp eq i32 %11990, 0
  %11994 = or i1 %11992, %11993
  %11995 = zext i1 %11994 to i8
  store i8 %11995, i8* %14, align 1
  %11996 = and i32 %11990, 255
  %11997 = tail call i32 @llvm.ctpop.i32(i32 %11996)
  %11998 = trunc i32 %11997 to i8
  %11999 = and i8 %11998, 1
  %12000 = xor i8 %11999, 1
  store i8 %12000, i8* %21, align 1
  %12001 = xor i32 %11990, %11989
  %12002 = lshr i32 %12001, 4
  %12003 = trunc i32 %12002 to i8
  %12004 = and i8 %12003, 1
  store i8 %12004, i8* %27, align 1
  %12005 = zext i1 %11993 to i8
  store i8 %12005, i8* %30, align 1
  %12006 = lshr i32 %11990, 31
  %12007 = trunc i32 %12006 to i8
  store i8 %12007, i8* %33, align 1
  %12008 = lshr i32 %11989, 31
  %12009 = xor i32 %12006, %12008
  %12010 = add nuw nsw i32 %12009, %12006
  %12011 = icmp eq i32 %12010, 2
  %12012 = zext i1 %12011 to i8
  store i8 %12012, i8* %39, align 1
  %12013 = add i64 %11984, 20
  store i64 %12013, i64* %3, align 8
  store i32 %11990, i32* %11988, align 4
  %12014 = load i64, i64* %3, align 8
  %12015 = add i64 %12014, -407
  store i64 %12015, i64* %3, align 8
  br label %block_.L_406dcd

block_.L_406f69:                                  ; preds = %block_.L_406dcd
  %12016 = add i64 %11483, -4
  %12017 = add i64 %11512, 7
  store i64 %12017, i64* %3, align 8
  %12018 = inttoptr i64 %12016 to i32*
  store i32 -1, i32* %12018, align 4
  %.pre468 = load i64, i64* %3, align 8
  br label %block_.L_406f70

block_.L_406f70:                                  ; preds = %block_.L_406f69, %block_.L_406f44, %block_.L_406d9e, %block_.L_406932, %block_.L_405af3, %block_.L_405630, %block_.L_405495
  %12019 = phi i64 [ %5463, %block_.L_405af3 ], [ %10170, %block_.L_406932 ], [ %.pre468, %block_.L_406f69 ], [ %11983, %block_.L_406f44 ], [ %11447, %block_.L_406d9e ], [ %3866, %block_.L_405630 ], [ %3250, %block_.L_405495 ]
  %MEMORY.163 = phi %struct.Memory* [ %MEMORY.74, %block_.L_405af3 ], [ %MEMORY.136, %block_.L_406932 ], [ %MEMORY.138, %block_.L_406f69 ], [ %MEMORY.161, %block_.L_406f44 ], [ %MEMORY.156, %block_.L_406d9e ], [ %MEMORY.47, %block_.L_405630 ], [ %MEMORY.46, %block_.L_405495 ]
  %12020 = load i64, i64* %RBP.i, align 8
  %12021 = add i64 %12020, -4
  %12022 = add i64 %12019, 3
  store i64 %12022, i64* %3, align 8
  %12023 = inttoptr i64 %12021 to i32*
  %12024 = load i32, i32* %12023, align 4
  %12025 = zext i32 %12024 to i64
  store i64 %12025, i64* %RAX.i2528, align 8
  %12026 = load i64, i64* %6, align 8
  %12027 = add i64 %12026, 11024
  store i64 %12027, i64* %6, align 8
  %12028 = icmp ugt i64 %12026, -11025
  %12029 = zext i1 %12028 to i8
  store i8 %12029, i8* %14, align 1
  %12030 = trunc i64 %12027 to i32
  %12031 = and i32 %12030, 255
  %12032 = tail call i32 @llvm.ctpop.i32(i32 %12031)
  %12033 = trunc i32 %12032 to i8
  %12034 = and i8 %12033, 1
  %12035 = xor i8 %12034, 1
  store i8 %12035, i8* %21, align 1
  %12036 = xor i64 %12026, 16
  %12037 = xor i64 %12036, %12027
  %12038 = lshr i64 %12037, 4
  %12039 = trunc i64 %12038 to i8
  %12040 = and i8 %12039, 1
  store i8 %12040, i8* %27, align 1
  %12041 = icmp eq i64 %12027, 0
  %12042 = zext i1 %12041 to i8
  store i8 %12042, i8* %30, align 1
  %12043 = lshr i64 %12027, 63
  %12044 = trunc i64 %12043 to i8
  store i8 %12044, i8* %33, align 1
  %12045 = lshr i64 %12026, 63
  %12046 = xor i64 %12043, %12045
  %12047 = add nuw nsw i64 %12046, %12043
  %12048 = icmp eq i64 %12047, 2
  %12049 = zext i1 %12048 to i8
  store i8 %12049, i8* %39, align 1
  %12050 = add i64 %12019, 11
  store i64 %12050, i64* %3, align 8
  %12051 = add i64 %12026, 11032
  %12052 = inttoptr i64 %12027 to i64*
  %12053 = load i64, i64* %12052, align 8
  store i64 %12053, i64* %RBP.i, align 8
  store i64 %12051, i64* %6, align 8
  %12054 = add i64 %12019, 12
  store i64 %12054, i64* %3, align 8
  %12055 = inttoptr i64 %12051 to i64*
  %12056 = load i64, i64* %12055, align 8
  store i64 %12056, i64* %3, align 8
  %12057 = add i64 %12026, 11040
  store i64 %12057, i64* %6, align 8
  ret %struct.Memory* %MEMORY.163
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x2b10___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -11024
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 11024
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x12f0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 3, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x14__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %6, -20
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %5, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %4, align 8
  %14 = icmp ult i32 %5, %11
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %12, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %11, %5
  %24 = xor i32 %23, %12
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %12, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %5, 31
  %36 = lshr i32 %11, 31
  %37 = xor i32 %36, %35
  %38 = xor i32 %32, %35
  %39 = add nuw nsw i32 %38, %37
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8060
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_hotspots(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x1930__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -6448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.reading_hotspots(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x15__MINUS0x1f88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 21, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x190__MINUS0x1f88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -400
  %10 = icmp ult i32 %8, 400
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404b75(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1f88__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rax_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -3
  %8 = icmp ult i32 %4, 3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404a51(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404b61(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x14__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -20
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404aa5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb0eff0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1f88__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x17c___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 380
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x34__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_404aa5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x670__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 11
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  store i32 0, i32* %10, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404b57(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404b40(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x2c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -44
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404aec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x38__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_404b29(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x38__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404b52(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x670__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 11
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  store i32 -1, i32* %10, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404b5c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f88__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8072
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404a24(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8064
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8052
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404d81(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_404d68(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff__MINUS0x670__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, 1
  %13 = icmp ne i32 %11, -1
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %12, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %11, 16
  %23 = xor i32 %22, %12
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %12, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %12, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %11, 31
  %35 = xor i32 %34, 1
  %36 = xor i32 %31, %34
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404d68(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404d63(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x28__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x7ae1b0___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 8053168
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %3 to i32
  %10 = inttoptr i64 %6 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %9
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %RAX, align 8
  %14 = icmp ult i32 %12, %9
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %9
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %9, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8084
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1f94__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8084
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rcx_1____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -3
  %8 = icmp ult i32 %4, 3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404c15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404d55(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x1f80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8064
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_404c3a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1f94__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8084
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404d50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x670__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x1f80__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -8064
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_404cae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404cae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f80__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8064
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x670__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -1648
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x1f78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404ca9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8056
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404d4b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_404d08(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404d08(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x1f7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8060
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404d03(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8060
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404d46(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404d41(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x1f74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8052
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404d63(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404bd7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404d68(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404d6d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404b93(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8064
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x1f74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8052
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404b7f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__0x0__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_404e40(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_404e3b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404ddf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404e27(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404e0b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x20__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  store i32 0, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404e1d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  store i32 1, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404e22(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404db2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404e40(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xab0f24___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_andl__0x20000___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 5
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 131072
  store i64 %6, i64* %RAX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8, align 1
  %.lobit = lshr exact i64 %6, 17
  %9 = trunc i64 %.lobit to i8
  %10 = xor i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405137(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8088
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f98__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8088
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x7ae438___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40505c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8092
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f9c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8092
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405031(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0x14__MINUS0x1f98__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8088
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, 20
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967292
  store i64 %12, i64* %RAX, align 8
  %13 = mul i64 %9, 85899345920
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 252
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x15___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 21
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -22
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1f9c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8092
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x670__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = and i32 %11, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = icmp eq i32 %11, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %11, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_404eec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57f1e3___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57f1e3_type* @G__0x57f1e3 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x99c0a0___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x99c0a0_type* @G_0x99c0a0 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x670__rbp__rax_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x0___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  store i8 0, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.fprintf_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10896
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405018(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x670__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = and i32 %11, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = icmp eq i32 %11, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %11, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404f8a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404f35(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dc5___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dc5_type* @G__0x579dc5 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.gprintf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10900
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404f85(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -2
  %8 = icmp ult i32 %4, 2
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404f69(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dc8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dc8_type* @G__0x579dc8 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10904
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404f80(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dcb___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dcb_type* @G__0x579dcb to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10908
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405013(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404fbe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dce___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dce_type* @G__0x579dce to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2aa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10912
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40500e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_404ff2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dd1___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dd1_type* @G__0x579dd1 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2aa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10916
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405009(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dd4___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dd4_type* @G__0x579dd4 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2aa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10920
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40501d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8092
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404e7c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x586073___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x586073_type* @G__0x586073 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2aac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10924
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8088
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_404e5f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dd7___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dd7_type* @G__0x579dd7 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f78__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ab0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10928
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4050b0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dec___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dec_type* @G__0x579dec to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1f78__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x670__rbp__rax_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ab4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10932
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4050c7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ab8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10936
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579dfb___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579dfb_type* @G__0x579dfb to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f7c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8060
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2abc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10940
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40511b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1f7c__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8060
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ac0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10944
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405132(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ac4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10948
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405137(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8080
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x5__MINUS0x1f8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8076
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 5, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40542e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405192(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405197(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40541a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f88__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.approxlib(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1fa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8096
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__MINUS0x1fa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8096
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4051c6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.is_self_atari(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4051e2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405415(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x7ae1b0___rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = shl i64 %3, 2
  %5 = add i64 %4, 8053168
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1fa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8100
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ac8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10952
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ac8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10952
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1fa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8104
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f88__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x1fa4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rcx_1____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -3
  %8 = icmp ult i32 %4, 3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405402(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1fa4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x14__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -20
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1fa8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x2c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -44
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x1fa8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fa0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8096
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f88__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1fa4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2acc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10956
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.countlib(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2acc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10956
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_405323(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x1fa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8096
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_405402(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ad0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10960
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ad0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10960
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb4bd20___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1fa4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rsi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___rax___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x9__0x3c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -9
  %10 = icmp ult i32 %8, 9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40539d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x8__0x3c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -8
  %10 = icmp ult i32 %8, 8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_0xddd5b__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, ptrtoint (%G_0xddd5b__rip__type* @G_0xddd5b__rip_ to i64)
  %7 = add i64 %5, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %6 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %union.VectorReg* %3 to i32*
  store i32 %9, i32* %10, align 1
  %11 = getelementptr inbounds i8, i8* %4, i64 4
  %12 = bitcast i8* %11 to float*
  store float 0.000000e+00, float* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %14 = bitcast i64* %13 to float*
  store float 0.000000e+00, float* %14, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 12
  %16 = bitcast i8* %15 to float*
  store float 0.000000e+00, float* %16, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_MINUS0x12f0__rbp__rax_4____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = load i64, i64* %RAX, align 8
  %7 = shl i64 %6, 2
  %8 = add i64 %5, -4848
  %9 = add i64 %8, %7
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 9
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %9 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = bitcast %union.VectorReg* %3 to i32*
  store i32 %13, i32* %14, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 4
  %16 = bitcast i8* %15 to float*
  store float 0.000000e+00, float* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast i64* %17 to float*
  store float 0.000000e+00, float* %18, align 1
  %19 = getelementptr inbounds i8, i8* %4, i64 12
  %20 = bitcast i8* %19 to float*
  store float 0.000000e+00, float* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addss_MINUS0x1930__rbp__rax_4____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = load i64, i64* %RAX, align 8
  %7 = shl i64 %6, 2
  %8 = add i64 %5, -6448
  %9 = add i64 %8, %7
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 9
  store i64 %11, i64* %PC, align 8
  %12 = bitcast %union.VectorReg* %3 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to <2 x i32>*
  %16 = load <2 x i32>, <2 x i32>* %15, align 1
  %17 = inttoptr i64 %9 to float*
  %18 = load float, float* %17, align 4
  %19 = extractelement <2 x float> %13, i32 0
  %20 = fadd float %19, %18
  %21 = bitcast %union.VectorReg* %3 to float*
  store float %20, float* %21, align 1
  %22 = bitcast <2 x float> %13 to <2 x i32>
  %23 = extractelement <2 x i32> %22, i32 1
  %24 = getelementptr inbounds i8, i8* %4, i64 4
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 1
  %26 = extractelement <2 x i32> %16, i32 0
  %27 = bitcast i64* %14 to i32*
  store i32 %26, i32* %27, align 1
  %28 = extractelement <2 x i32> %16, i32 1
  %29 = getelementptr inbounds i8, i8* %4, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulss__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = extractelement <2 x float> %9, i32 0
  %16 = extractelement <2 x float> %14, i32 0
  %17 = fmul float %15, %16
  %18 = bitcast [32 x %union.VectorReg]* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %9 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %5, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %12, i32 0
  %24 = bitcast i64* %10 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %12, i32 1
  %26 = getelementptr inbounds i8, i8* %5, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttss2si__xmm0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = extractelement <2 x float> %7, i32 0
  %9 = tail call float @llvm.trunc.f32(float %8)
  %10 = tail call float @llvm.fabs.f32(float %9)
  %11 = fcmp ogt float %10, 0x41E0000000000000
  %12 = fptosi float %9 to i32
  %13 = zext i32 %12 to i64
  %14 = select i1 %11, i64 2147483648, i64 %13
  store i64 %14, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1fac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8108
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fac__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x1f8c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -8076
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4053fd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8076
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8080
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405402(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405407(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4051e9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405155(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x1f90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8080
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4054a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f90__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8080
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.safe_move(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x5___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -5
  %8 = icmp ult i32 %4, 5
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4054a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f90__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8080
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405478(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405495(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579e0b___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579e0b_type* @G__0x579e0b to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f90__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8080
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ad4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10964
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406f70(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405666(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40564d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40564d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x14___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 20
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -21
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405543(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4055e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40557a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x14___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -20
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 20
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4055b1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x1fb0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.findlib(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ad8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10968
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.countstones(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_405630(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fb0__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405648(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fb0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40564d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405652(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4054ab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405680(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405b0b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40569e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f78__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8068
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4056aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f7c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8060
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1f84__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x670__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -2
  %13 = icmp ult i32 %11, 2
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %12, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %12, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %12, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %12, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = xor i32 %30, %33
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405a31(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__esi___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RSI, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x190___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 400, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x2140__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x0__MINUS0x2141__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8513
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  store i8 0, i8* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memset_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x1f8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8076
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f84__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405a25(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2148__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x214c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8524
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40574c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x670__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -1648
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = icmp eq i32 %11, 0
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %12, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %12, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %12, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %12, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = xor i32 %30, %33
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405751(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405a11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x2141__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8513
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addb__0x1___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = add i8 %4, 1
  store i8 %7, i8* %AL, align 1
  %8 = icmp eq i8 %4, -1
  %9 = icmp eq i8 %7, 0
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = zext i8 %7 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i8 %7, %4
  %20 = lshr i8 %19, 4
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = zext i1 %9 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i8 %7, 7
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i8 %4, 7
  %28 = xor i8 %25, %27
  %29 = add nuw nsw i8 %28, %25
  %30 = icmp eq i8 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x2141__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8513
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4059af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2150__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8528
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2150__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4057a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4059a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2150__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4057cd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2148__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ne i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = xor i32 %27, 1
  %33 = add nuw nsw i32 %31, %32
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2148__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8520
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40599c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4057f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405997(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsbl_MINUS0x2140__rbp__rax_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %3, -8512
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsbl_MINUS0x2141__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8513
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = sext i8 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40582b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405992(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4058ed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x214c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8524
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x7___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 7
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -8
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2150__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -2
  %8 = icmp ult i32 %4, 2
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40587f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -4
  %8 = icmp ult i32 %4, 4
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4058a2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4058c5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4058e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405979(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xf1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 241, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2adc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10972
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2adc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10972
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2154__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8532
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x2154__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_405958(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_405974(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x2140__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.mark_string(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405766(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.is_suicide(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4059d5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x214c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8524
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405a0c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x1f8c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -8076
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_405a0c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4056fb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405a36(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_405af3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405aee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2158__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8536
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2158__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405adb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2158__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405adb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2158__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405aee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405ae0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405a52(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40640d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x215c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8540
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2164__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8548
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8552
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x216c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3__MINUS0x2170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 3, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8564
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xcb0__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -3248
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 11
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  store i32 0, i32* %10, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405baa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_405baf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4063f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x640___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1600, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x27c0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x8__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -8
  %10 = icmp ult i32 %8, 8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_406135(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x27c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x27c4__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405c0c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406127(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x27c4__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405c42(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405c3d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x215c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8540
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x215c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8540
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405dc3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x27c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10184
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405cf3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405cb6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406135(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x27c8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x27c0__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -10176
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = and i32 %11, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = icmp eq i32 %11, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %11, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405ce9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2168__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8552
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8552
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405cee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405cf3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405dac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2174__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8564
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8564
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405d7a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27c4__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_405d7a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_405d7a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405da7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405da7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 3
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405dac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x27c0__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -10176
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 11
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  store i32 1, i32* %10, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406122(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40611d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27c4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f70__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -8048
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__MINUS0x2170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405e28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x2170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x27c4__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405e67(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x9__MINUS0x2170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 9, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_406109(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x27cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10188
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x27cc__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405f47(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x216c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x216c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8556
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27cc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405edc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -6
  %8 = icmp ult i32 %4, 6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_405f35(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x5___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ae0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10976
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ae0__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10976
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x5___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -5
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 5
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_4060f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x27d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x27d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x27d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x27d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40607f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x27d0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x7ae1b0___rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 2
  %5 = add i64 %4, 8053168
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1f80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8064
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27cc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1f80__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8064
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_405fbf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40606b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27cc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x1f80__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8064
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406018(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x27d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406066(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406061(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x27d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27d0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x27d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10192
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405f79(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4060f0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x27d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4060eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x27d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4060e6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4060eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4060f0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4060f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2160__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8544
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406118(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2164__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8548
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2164__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8548
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40611d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405bce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x2170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406171(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x215c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8540
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x2164__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8548
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406176(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x2174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8564
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40618d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x2174__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8564
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xcb0__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -3248
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x9__MINUS0x2170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -9
  %10 = icmp ult i32 %8, 9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40623d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xcb0__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -3248
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RAX, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x2160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4061fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x216c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_406238(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x215c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8540
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_406238(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 2
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0x5___eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  %8 = mul nsw i64 %7, 5
  %9 = trunc i64 %8 to i32
  %10 = and i64 %8, 4294967295
  store i64 %10, i64* %RAX, align 8
  %11 = mul i64 %7, 21474836480
  %12 = ashr exact i64 %11, 32
  %13 = icmp ne i64 %12, %8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %9, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %23, align 1
  %24 = lshr i32 %9, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xa___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 10
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -11
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40626a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x215c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8540
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_406265(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x2168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8552
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_406298(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0xa___eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  %8 = mul nsw i64 %7, 10
  %9 = trunc i64 %8 to i32
  %10 = and i64 %8, 4294967294
  store i64 %10, i64* %RAX, align 8
  %11 = mul i64 %7, 42949672960
  %12 = ashr exact i64 %11, 32
  %13 = icmp ne i64 %12, %8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %9, 254
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %23, align 1
  %24 = lshr i32 %9, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xdcca8__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xdcca8__rip__type* @G_0xdcca8__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd_MINUS0x12f0__rbp__rax_4____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -4848
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 9
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %8 to float*
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = bitcast %union.VectorReg* %3 to double*
  store double %13, double* %14, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movaps__xmm0___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = extractelement <2 x i32> %9, i32 0
  %14 = bitcast %union.VectorReg* %3 to i32*
  store i32 %13, i32* %14, align 1
  %15 = extractelement <2 x i32> %9, i32 1
  %16 = getelementptr inbounds i8, i8* %5, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %12, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %12, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm1___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x27dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10204
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd_MINUS0x1930__rbp__rax_4____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -6448
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 9
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %8 to float*
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = bitcast %union.VectorReg* %3 to double*
  store double %13, double* %14, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast [32 x %union.VectorReg]* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x27e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10208
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27dc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x27e0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10208
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x27e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10212
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xcb0__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -3248
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = and i32 %11, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = icmp eq i32 %11, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %11, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40633c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xcb0__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -3248
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x27e4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10212
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_40633c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xcb0__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -3248
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 7
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RAX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x27e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27e4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4063a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579e20___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579e20_type* @G__0x579e20 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f88__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xcb0__rbp__rax_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -3248
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27e0__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10208
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ae4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10980
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.is_ko(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4063f4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xcb0__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -3248
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ae8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10984
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ae8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10984
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_405b15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406412(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4064ab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406492(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_406492(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1f8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8076
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1f84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8068
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406497(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406430(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x1f84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4064bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406948(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f70__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -8048
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x27e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10216
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f84__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.is_illegal_ko_capture(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4065a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4065a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x27e8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406587(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27e8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_does_defend(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.confirm_safety(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4065bc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406943(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x27ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10220
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x27f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x5__MINUS0x27ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -5
  %10 = icmp ult i32 %8, 5
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4068cb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_406662(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40664f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x27ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -10220
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40664f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406662(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406654(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4065f7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4068c6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579e48___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579e48_type* @G__0x579e48 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f84__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x28__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x7ae1b0___r8_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 8053168
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %3 to i32
  %10 = inttoptr i64 %6 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %9
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %RCX, align 8
  %14 = icmp ult i32 %12, %9
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %9
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %9, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.trymove(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4068c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x2a70__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10864
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.chainlinks(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10868
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2a78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10872
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a78__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10872
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x2a74__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -10868
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4067b6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2a78__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10872
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2a70__rbp__rcx_4____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -10864
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x64__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40679d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a70__rbp__rcx_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -10864
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.find_defense(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb0eff0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2a78__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10872
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2a70__rbp__rsi_4____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -10864
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x17c___rsi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 380
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0xb4__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RCX, align 8
  %6 = add i64 %5, 180
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40679d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406768(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406793(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579e54___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579e54_type* @G__0x579e54 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2a78__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10872
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a70__rbp__rax_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -10864
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f84__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2aec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10988
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x27f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4067a2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10872
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4066c9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.popgo(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al___cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %AL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x2aed__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10989
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4067f1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x27f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_setne__al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x2aed__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10989
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x2aed__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10989
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_testb__0x1___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = and i8 %4, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i8 %7, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406804(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4068bc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4068a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a70__rbp__rcx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -10864
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_does_attack(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40686e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406899(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579e85___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579e85_type* @G__0x579e85 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2af4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10996
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4068a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4067c5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4068c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4068c6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4068cb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4068ef(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40693e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406915(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406932(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579eb0___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579eb0_type* @G__0x579eb0 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f84__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2af8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -11000
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_406dc3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2a80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2a84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10884
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4069a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4069a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406daf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2a7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10876
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_406ab9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10888
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2a88__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10888
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4069f7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406aab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2a88__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10888
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406aa6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406aa6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406a60(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2a88__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10888
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x5__0x3c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -5
  %10 = icmp ult i32 %8, 5
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a88__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10888
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10876
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406ab9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4069b9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x2a7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10876
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406acb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579ecb___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579ecb_type* @G__0x579ecb to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a7c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10876
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406aff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x2a84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10884
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_406bba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406ba7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x28__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x7ae1b0___rsi_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 8053168
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %3 to i32
  %10 = inttoptr i64 %6 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %9
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %RDX, align 8
  %14 = icmp ult i32 %12, %9
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %9
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %9, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406ba7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10880
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406bba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406bac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406b10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x2a84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10884
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406c85(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406bd8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406c62(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x2a8c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10892
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a8c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10892
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0x1f84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8068
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a7c__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -10876
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x2afc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -11004
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2afc__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -11004
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2afc__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -11004
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2b00__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -11008
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406c5d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406c62(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406c80(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406c85(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406c8a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xb54ce4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_406ca2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406cb4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406cdd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406cdd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a7c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10876
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406daa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x2a80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406d2b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a80__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -10880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406d2b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406d5b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406d81(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406d9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579ed7___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579ed7_type* @G__0x579ed7 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2b04__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -11012
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406952(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_406f69(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406f50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__0x38__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406e24(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406f50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1f88__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x3c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_406e8e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6__0x3c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -6
  %10 = icmp ult i32 %8, 6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x3c__rax____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x3c__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xab0f24___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_andl__0x20000___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 131072
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8, align 1
  %.lobit = lshr exact i64 %6, 17
  %9 = trunc i64 %.lobit to i8
  %10 = xor i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_406f21(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406f44(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x579ef8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x579ef8_type* @G__0x579ef8 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2b08__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -11016
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406f55(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_406dcd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x2b10___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 11024
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -11025
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
